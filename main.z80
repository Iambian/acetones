#include "ti84pce.inc"
.org userMem-2
.db $EF, $7B

;SPASM help msg
;-E = Assemble eZ80 code
;-T = Generate code listing
;-C = Code counter mode
;-L = Symbol table mode
;-S = Stats mode
;-O = Don't write to output file
;-I [directory] = Add include directory
;-A = Labels are cAse-sensitive
;-D<name>[=value] = Create a define 'name' [with 'value']
;-N = Don't use colors for messages
;-V <Expression> = Pipe expression directly into assembly
;-H = Print this help message




programStart:
    di
    ld  (save_spl),sp
    ld  a,MB
    ld  (save_mbase),a
    ld  a,$D0
    ld  MB,a
    call startGfx
    ;
    ; todo; write test 6502 program, map it into rom.
    ; map virtual screen device into ram too. 32x30 screen ascii display
    ; is probably looking nice right about now.
    ; Could probably map it into PPU space since we're not actually doing
    ; anything about that until long after we're done testing core integrity
    ; You'll probably want to create a mockup vector table then do some equate
    ; magic to offset it and map it to $FFXX such that the three vectors will
    ; magically line up with $FFFA-$FFFF. NMI, RES, and IRQ. In that order.
    ; The rest of the page won't need to matter. It could literally be the
    ; surrounding eZ80 data/code. Just... don't allow writes to it.
    ;

    ;load reset vectors
    ld  hl,testVectors
    ld  bc,$000101
    ld  e,$FF
    call i6502_map_pages
    ;load program ROM to lowmem
    ld  hl,testCode
    ld  bc,$002008
    ld  e,$80
    call i6502_map_pages
    ;map nametable to writeable address space. Write routine to mirror this
    ;memory to screen.
    ld  hl,NAMETABLE1
    ld  bc,$002008
    ld  e,$40
    call i6502_map_pages
    ;Everything should be ready. Set up the debug environment and then
    ;start the emulation.
    jr $
    call i6502Init
    nop
    ;
    ;
    ;
programExit:
    call stopGfx
    ld  sp,(save_spl)
    ld  a,(save_mbase)
    ld  MB,a
    ld  iy,flags
    ret

loadROM:
    call _ClrLCDAll
_:  ld  hl,testFilename
    call _Mov9ToOP1
    call _ChkFindSym
    ret c
    call _ChkInRam
    jr  nz,+_
    call _Arc_Unarc
    jr  -_
_:  nop
    ld  de,9
    add hl,de
    ld  e,(hl)
    add hl,de
    inc hl
    call _LoadDEInd_s   ;ld de,(hl) but DE is 16 bit. Then HL+=2.
    ;HL=start of program data. DE is size of data.
    ;
    ;
    ; TODO: Finish writing this section.
    ;
    ;
    ret

testFilename:
.db AppVarObj,"NESTEST",0


;NMI, RES, and IRQ. In that order.
testVectors .equ $-(256-6)
.dw $8000
.dw $8000
.dw $8000
testCode:
.db $02     ;JAM. Emulator terminates on unsupported instructions or JAMs.





#include "lcd.z80"
#include "core.z80"
.echo "Main program size: ",$-programStart