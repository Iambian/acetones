; Code to handle interrup servicer. Note: This hinges on 
; PPU timing, so some of its initilization code will end up here too.

;BC=timeToInterrupt, DE=address
int6502_init:
    ld  hl,INT_TABLE-1
    ld  (hl),1
    inc hl
    ld  (hl),de
    inc hl
    inc hl
    inc hl
    ld  (hl),bc
int6502_setInt:
    ld  ix,core_memory_ix
    ld  hl,INT_TABLE+3
    ld  bc,(hl)
    or  a,a
    sbc hl,hl
    sbc hl,bc
    ld  (i6502_interrupt_timer),hl
    ret

;Call this in your NMI **BEFORE** you modify the interrupt table in any way.
;This will readjust existing timers that have a longer time than the NMI.
;This will not adjust i6502_interrupt_timer. If you don't push entries to the
;table after calling this, you must call int6502_setInt manually.
;Inputs: None. Table itself is adjusted.
int6502_nmiAdjust:
    ld  hl,INT_TABLE-1
    ld  a,(hl)
    dec a
    ret z       ;No entries other than the NMI.
    inc hl
    inc hl
    inc hl
    inc hl
    ld  bc,(hl)
_:  inc hl
    inc hl
    inc hl
    inc hl
    inc hl
    inc hl
    ld  de,(hl)
    ex  de,hl
    or  a,a
    sbc hl,bc
    ex  de,hl
    ld  (hl),de
    dec a
    jr  nz,-_
    ret

;BC=timeToInterrupt, DE=address
int6502_insert:
    ld  ix,INT_TABLE
    ld  a,(ix-1)
    inc (ix-1)
_:  ld  hl,(ix+3)
    or  a,a
    sbc hl,bc   ;if listtime < curtime (cset), keep moving forward
    jr  nc,+_   ;otherwise, do the shuffle
    lea ix,ix+6
    dec a
    jr  nz,-_   ;loop until we have a swappable, or list ends.
_:  ld  hl,(ix+0)
    ld  (ix+0),de
    ex  de,hl
    ld  hl,(ix+3)
    ld  (ix+3),bc
    push hl
    pop bc
    lea ix,ix+6
    sub a,1
    jr  nc,-_   ;when loop ends, we are done.
    jr  int6502_setInt

;Consumes entry currently being run.
;Never consume the last entry. The last entry should always be the PPU NMI.
int6502_consume:
    ld  ix,INT_TABLE
    ld  c,(ix-1)
    dec (ix-1)
    ld  b,6
    mlt bc
    lea de,ix+0
    lea hl,ix+6
    ldir
    jr  int6502_setInt
    














