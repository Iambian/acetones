    1 00:0000 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "main.z80"
    2 00:0000 -  -  -  -  .org userMem-2
    3 D1:A87F EF 7B -  -  .db $EF, $7B
    4 D1:A881 -  -  -  -  
    5 D1:A881 -  -  -  -  ;SPASM help msg
    6 D1:A881 -  -  -  -  ;-E = Assemble eZ80 code
    7 D1:A881 -  -  -  -  ;-T = Generate code listing
    8 D1:A881 -  -  -  -  ;-C = Code counter mode
    9 D1:A881 -  -  -  -  ;-L = Symbol table mode
   10 D1:A881 -  -  -  -  ;-S = Stats mode
   11 D1:A881 -  -  -  -  ;-O = Don't write to output file
   12 D1:A881 -  -  -  -  ;-I [directory] = Add include directory
   13 D1:A881 -  -  -  -  ;-A = Labels are cAse-sensitive
   14 D1:A881 -  -  -  -  ;-D<name>[=value] = Create a define 'name' [with 'value']
   15 D1:A881 -  -  -  -  ;-N = Don't use colors for messages
   16 D1:A881 -  -  -  -  ;-V <Expression> = Pipe expression directly into assembly
   17 D1:A881 -  -  -  -  ;-H = Print this help message
   18 D1:A881 -  -  -  -  
   19 D1:A881 -  -  -  -  
   20 D1:A881 -  -  -  -  
   21 D1:A881 -  -  -  -  
   22 D1:A881 -  -  -  -  programStart:
   23 D1:A881 F3 -  -  -      di
   24 D1:A882 DD 21 00 00 
              F0 -  -  -      ld  ix,$F00000
   25 D1:A887 DD CB 2C C6     set 0,(ix+$2C)      ;Enable ON latch
   26 D1:A88B DD 36 28 01     ld  (ix+$28),1      ;If latch was set, clear it.
   27 D1:A88F -  -  -  -  
   28 D1:A88F -  -  -  -      ;Continuous. Else it'd be possible for an NES ROM to tank the CPU
   29 D1:A88F -  -  -  -      ;performance by constantly polling the keyboard.
   30 D1:A88F 21 00 00 F5     ld  hl,mpKeyMode
   31 D1:A893 36 03 -  -      ld  (hl),3      
   32 D1:A895 ED 73 FC 31 
              D0 -  -  -      ld  (save_spl),sp
   33 D1:A89A ED 6E -  -      ld  a,MB
   34 D1:A89C 32 FF 31 D0     ld  (save_mbase),a
   35 D1:A8A0 3E D0 -  -      ld  a,$D0
   36 D1:A8A2 ED 6D -  -      ld  MB,a
   37 D1:A8A4 CD 2E B2 D1     call startGfx
   38 D1:A8A8 -  -  -  -  
   39 D1:A8A8 21 00 00 D4     ld  hl,vRam
   40 D1:A8AC 22 10 00 E3     ld  (mpLcdBase),hl
   41 D1:A8B0 11 01 00 D4     ld  de,vRam+1
   42 D1:A8B4 01 FF 2B 01     ld  bc,320*240-1
   43 D1:A8B8 36 00 -  -      ld  (hl),0
   44 D1:A8BA ED B0 -  -      ldir
   45 D1:A8BC CD F9 B1 D1     call waituntilnewkeypress
   46 D1:A8C0 CD F1 B1 D1     call waituntilkeyrelease
   47 D1:A8C4 -  -  -  -  
   48 D1:A8C4 CD E4 B3 D1     call setSmolScreenMode
   49 D1:A8C8 -  -  -  -  
   50 D1:A8C8 21 00 00 D4     ld  hl,vRam
   51 D1:A8CC 22 10 00 E3     ld  (mpLcdBase),hl
   52 D1:A8D0 21 00 00 00     ld  hl,$0000
   53 D1:A8D4 -  -  -  -      ;Write data into vRam. Draw a simple box.
   54 D1:A8D4 21 00 00 D4     ld  hl,vRam
   55 D1:A8D8 11 01 00 D4     ld  de,vRam+1
   56 D1:A8DC 01 FF DF 00     ld  bc,256*224-1
   57 D1:A8E0 36 E8 -  -      ld  (hl),$E8        ;red box. Rose?
   58 D1:A8E2 ED B0 -  -      ldir
   59 D1:A8E4 21 00 00 D4     ld  hl,vRam
   60 D1:A8E8 11 01 00 D4     ld  de,vRam+1
   61 D1:A8EC 01 FF 00 00     ld  bc,255
   62 D1:A8F0 36 57 -  -      ld  (hl),$57
   63 D1:A8F2 ED B0 -  -      ldir                ;top side. blue
   64 D1:A8F4 21 00 DF D4     ld  hl,vRam+(256*223)
   65 D1:A8F8 11 01 DF D4     ld  de,vRam+(256*223)+1
   66 D1:A8FC 01 FF 00 00     ld  bc,255
   67 D1:A900 36 57 -  -      ld  (hl),$57
   68 D1:A902 ED B0 -  -      ldir                ;bottom side. blue
   69 D1:A904 21 00 01 D4     ld  hl,vRam+256
   70 D1:A908 11 FF 00 00     ld  de,255
   71 D1:A90C 06 DE -  -      ld  b,224-2
   72 D1:A90E 36 25 -  -  _:  ld  (hl),$25        ;green left/right sides
   73 D1:A910 19 -  -  -      add hl,de
   74 D1:A911 36 25 -  -      ld  (hl),$25
   75 D1:A913 23 -  -  -      inc hl
   76 D1:A914 10 F8 -  -      djnz -_
   77 D1:A916 -  -  -  -  
   78 D1:A916 CD F9 B1 D1     call waituntilnewkeypress
   79 D1:A91A CD F1 B1 D1     call waituntilkeyrelease
   80 D1:A91E -  -  -  -  
   81 D1:A91E -  -  -  -  
   82 D1:A91E -  -  -  -      ;Restore defaults. First set sitronix window params, then primecell params.
   83 D1:A91E CD 31 B4 D1     call setFullScreenMode
   84 D1:A922 -  -  -  -  
   85 D1:A922 C3 DE AA D1     jp endCurrentRun
   86 D1:A926 -  -  -  -  
   87 D1:A926 -  -  -  -  
   88 D1:A926 -  -  -  -  
   89 D1:A926 -  -  -  -  
   90 D1:A926 -  -  -  -  
   91 D1:A926 -  -  -  -  
   92 D1:A926 -  -  -  -      ;
   93 D1:A926 -  -  -  -      ; todo; write test 6502 program, map it into rom.
   94 D1:A926 -  -  -  -      ; map virtual screen device into ram too. 32x30 screen ascii display
   95 D1:A926 -  -  -  -      ; is probably looking nice right about now.
   96 D1:A926 -  -  -  -      ; Could probably map it into PPU space since we're not actually doing
   97 D1:A926 -  -  -  -      ; anything about that until long after we're done testing core integrity
   98 D1:A926 -  -  -  -      ; You'll probably want to create a mockup vector table then do some equate
   99 D1:A926 -  -  -  -      ; magic to offset it and map it to $FFXX such that the three vectors will
  100 D1:A926 -  -  -  -      ; magically line up with $FFFA-$FFFF. NMI, RES, and IRQ. In that order.
  101 D1:A926 -  -  -  -      ; The rest of the page won't need to matter. It could literally be the
  102 D1:A926 -  -  -  -      ; surrounding eZ80 data/code. Just... don't allow writes to it.
  103 D1:A926 -  -  -  -      ;
  104 D1:A926 -  -  -  -  
  105 D1:A926 21 00 00 D4     ld  hl,screenBuf1
  106 D1:A92A 11 01 00 D4     ld  de,screenBuf1+1
  107 D1:A92E 01 FF 57 02     ld  bc,(2*240*320)-1
  108 D1:A932 36 00 -  -      ld  (hl),$00
  109 D1:A934 ED B0 -  -      ldir
  110 D1:A936 -  -  -  -  
  111 D1:A936 -  -  -  -      ;Makes sure all non-ROM areas have a mapping
  112 D1:A936 21 00 33 D0     ld  hl,scrap_mapping
  113 D1:A93A 01 01 80 00     ld  bc,$008001
  114 D1:A93E 1E 00 -  -      ld  e,0
  115 D1:A940 CD A6 B9 D1     call i6502_map_pages
  116 D1:A944 -  -  -  -  
  117 D1:A944 -  -  -  -  
  118 D1:A944 -  -  -  -  
  119 D1:A944 -  -  -  -      ;load reset vectors
  120 D1:A944 21 2C AA D1     ld  hl,testVectors
  121 D1:A948 01 01 01 00     ld  bc,$000101
  122 D1:A94C 1E FF -  -      ld  e,$FF
  123 D1:A94E CD A6 B9 D1     call i6502_map_pages
  124 D1:A952 -  -  -  -      ;load program ROM to lowmem
  125 D1:A952 21 2C AB D1     ld  hl,testCode
  126 D1:A956 01 08 20 00     ld  bc,$002008
  127 D1:A95A 1E 80 -  -      ld  e,$80
  128 D1:A95C CD A6 B9 D1     call i6502_map_pages
  129 D1:A960 -  -  -  -      ;map nametable to writeable address space. Write routine to mirror this
  130 D1:A960 -  -  -  -      ;memory to screen.
  131 D1:A960 21 00 58 D0     ld  hl,NAMETABLE1
  132 D1:A964 01 04 20 00     ld  bc,$002004
  133 D1:A968 1E 40 -  -      ld  e,$40
  134 D1:A96A CD A6 B9 D1     call i6502_map_pages
  135 D1:A96E -  -  -  -      ;Default mappings have been mapped. Let's search for and load a ROM file
  136 D1:A96E -  -  -  -      ;to acquire additional mappings. And maybe load in something that'll run.
  137 D1:A96E CD 81 B2 D1     call clearTextBuf
  138 D1:A972 3E 01 -  -      ld  a,1
  139 D1:A974 CD CE B2 D1     call setLineStart
  140 D1:A978 CD D7 B2 D1     call setCurLine
  141 D1:A97C 21 85 AB D1     ld  hl,text001
  142 D1:A980 CD F9 B2 D1     call printString
  143 D1:A984 FD 21 FC AB 
              D1 -  -  -      ld  iy,firstFileHeader
  144 D1:A989 01 00 00 00     ld  bc,0
  145 D1:A98D FD 4E FF -      ld  c,(iy-1)
  146 D1:A990 CD 7C B1 D1     call vatTraverse
  147 D1:A994 DA 19 AC D1     jp  c,err_noContainersFound
  148 D1:A998 D5 -  -  -      push de
  149 D1:A999 21 A5 AB D1         ld  hl,text003
  150 D1:A99D CD F9 B2 D1         call printString
  151 D1:A9A1 DD 46 FA -          ld  b,(ix-6)
  152 D1:A9A4 ED 22 F9 -          lea hl,ix-7
  153 D1:A9A7 7E -  -  -  _:      ld  a,(hl)
  154 D1:A9A8 2B -  -  -          dec hl
  155 D1:A9A9 E5 -  -  -          push hl
  156 D1:A9AA C5 -  -  -              push bc
  157 D1:A9AB CD 0F B3 D1                 call PrintBigFont
  158 D1:A9AF C1 -  -  -              pop bc
  159 D1:A9B0 E1 -  -  -          pop hl
  160 D1:A9B1 10 F4 -  -          djnz -_
  161 D1:A9B3 CD E2 B2 D1         call newLine
  162 D1:A9B7 D1 -  -  -      pop de
  163 D1:A9B8 CD 73 AD D1     call loadROMFile
  164 D1:A9BC -  -  -  -  
  165 D1:A9BC 21 B2 AB D1     ld  hl,text004
  166 D1:A9C0 CD F9 B2 D1     call printString
  167 D1:A9C4 -  -  -  -  
  168 D1:A9C4 -  -  -  -      ;load perf timers
  169 D1:A9C4 -  -  -  -  
  170 D1:A9C4 DD 21 00 00 
              F2 -  -  -      ld  ix,$F20000
  171 D1:A9C9 DD 27 30 -      ld  hl,(ix+$30)
  172 D1:A9CC CB 85 -  -      res 0,L ;turn off timer 0
  173 D1:A9CE CB CD -  -      set 1,L ;timer 0 uses 32KHz clock
  174 D1:A9D0 CB 95 -  -      res 2,L ;disables timer 0 interrupt generator
  175 D1:A9D2 CB CC -  -      set 1,H ;timer 0 counts upward
  176 D1:A9D4 DD 2F 30 -      ld  (ix+$30),hl
  177 D1:A9D7 -  -  -  -      
  178 D1:A9D7 AF -  -  -      xor a,a
  179 D1:A9D8 ED 62 -  -      sbc hl,hl
  180 D1:A9DA DD 2F 00 -      ld  (ix+0),hl
  181 D1:A9DD DD 77 03 -      ld  (ix+3),a
  182 D1:A9E0 -  -  -  -  
  183 D1:A9E0 -  -  -  -      ;Initialize all (additional) state machines,
  184 D1:A9E0 -  -  -  -      ;then initialize/start the emulation core
  185 D1:A9E0 -  -  -  -  
  186 D1:A9E0 CD D4 B7 D1     call int6502_init
  187 D1:A9E4 CD 33 E8 D1     call ppu_init
  188 D1:A9E8 CD 99 B8 D1     call i6502Init
  189 D1:A9EC -  -  -  -  
  190 D1:A9EC -  -  -  -      ;===========================================================================
  191 D1:A9EC -  -  -  -      ;===========================================================================
  192 D1:A9EC -  -  -  -      ;===========================================================================
  193 D1:A9EC -  -  -  -      ; TODO: This is where you'll insert code to test the PPU by manually
  194 D1:A9EC -  -  -  -      ; manipulating memory and registers, then calling its render function.
  195 D1:A9EC -  -  -  -      ; All mappings have been set up by the mappers. All you got to do is
  196 D1:A9EC -  -  -  -      ; use them. For initialization purposes, note these addresses:
  197 D1:A9EC -  -  -  -      ;
  198 D1:A9EC -  -  -  -      ; NAMETABLE1, NAMETABLE2, OBJECT_ATTRIB_MEM, vram_palette
  199 D1:A9EC -  -  -  -      ;
  200 D1:A9EC -  -  -  -      ; Configure the PPU registers. Notably:
  201 D1:A9EC -  -  -  -      ;
  202 D1:A9EC -  -  -  -      ; IX+PPU_CTRL, IX+PPU_MASK, IX+PPU_SCROLL
  203 D1:A9EC -  -  -  -      ;
  204 D1:A9EC -  -  -  -      ; After all these, you'll want to come up with a way to deal with drawlists
  205 D1:A9EC -  -  -  -      ; so games can alter PPU_SCROLL mid-frame. Sprite 0 hits is the popular
  206 D1:A9EC -  -  -  -      ; way to do that, so take note of when that happens.
  207 D1:A9EC -  -  -  -      ;
  208 D1:A9EC -  -  -  -      ;===========================================================================
  209 D1:A9EC -  -  -  -      ;===========================================================================
  210 D1:A9EC -  -  -  -      ;===========================================================================
  211 D1:A9EC -  -  -  -      ;nametable fill
  212 D1:A9EC 21 00 58 D0     ld  hl,NAMETABLE1
  213 D1:A9F0 E5 D1 -  -      push hl \ pop de
  214 D1:A9F2 13 -  -  -      inc de
  215 D1:A9F3 01 BF 03 00     ld  bc,(32*30)-1
  216 D1:A9F7 36 5F -  -      ld  (hl),'_'
  217 D1:A9F9 ED B0 -  -      ldir
  218 D1:A9FB 21 00 5C D0     ld  hl,NAMETABLE2
  219 D1:A9FF E5 D1 -  -      push hl \ pop de
  220 D1:AA01 13 -  -  -      inc de
  221 D1:AA02 01 BF 03 00     ld  bc,(32*30)-1
  222 D1:AA06 36 2A -  -      ld  (hl),'*'
  223 D1:AA08 ED B0 -  -      ldir
  224 D1:AA0A -  -  -  -      ;hide all sprites
  225 D1:AA0A 21 00 60 D0     ld  hl,OBJECT_ATTRIB_MEM
  226 D1:AA0E E5 D1 -  -      push hl \ pop de
  227 D1:AA10 13 -  -  -      inc de
  228 D1:AA11 01 FF 00 00     ld  bc,255
  229 D1:AA15 36 FF -  -      ld  (hl),$FF
  230 D1:AA17 ED B0 -  -      ldir
  231 D1:AA19 -  -  -  -      ;nametable 1 box pattern on displayable area (omit top and bottom 8 pixels)
  232 D1:AA19 21 00 58 D0     ld  hl,NAMETABLE1
  233 D1:AA1D E5 D1 -  -      push hl \ pop de
  234 D1:AA1F 13 -  -  -      inc de
  235 D1:AA20 01 BF 03 00     ld  bc,(32*30)-1
  236 D1:AA24 36 5A -  -      ld  (hl),'Z'
  237 D1:AA26 ED B0 -  -      ldir
  238 D1:AA28 21 20 58 D0     ld  hl,NAMETABLE1+32
  239 D1:AA2C E5 D1 -  -      push hl \ pop de
  240 D1:AA2E 13 -  -  -      inc de
  241 D1:AA2F 01 1F 00 00     ld  bc,31
  242 D1:AA33 36 77 -  -      ld  (hl),'w'
  243 D1:AA35 ED B0 -  -      ldir
  244 D1:AA37 21 A0 5B D0     ld  hl,NAMETABLE1+(32*29)
  245 D1:AA3B E5 D1 -  -      push hl \ pop de
  246 D1:AA3D 13 -  -  -      inc de
  247 D1:AA3E 01 1F 00 00     ld  bc,31
  248 D1:AA42 36 77 -  -      ld  (hl),'w'
  249 D1:AA44 ED B0 -  -      ldir
  250 D1:AA46 21 40 58 D0     ld  hl,NAMETABLE1+64
  251 D1:AA4A 06 1A -  -      ld  b,26
  252 D1:AA4C 11 1F 00 00     ld  de,31
  253 D1:AA50 36 69 -  -  _:  ld  (hl),'i'
  254 D1:AA52 19 -  -  -      add hl,de
  255 D1:AA53 36 6C -  -      ld  (hl),'l'
  256 D1:AA55 23 -  -  -      inc hl
  257 D1:AA56 10 F8 -  -      djnz -_
  258 D1:AA58 -  -  -  -      ;clear attribute memory
  259 D1:AA58 21 C0 5B D0     ld  hl,NAMETABLE1+960
  260 D1:AA5C 11 C1 5B D0     ld  de,NAMETABLE1+961
  261 D1:AA60 01 3F 00 00     ld  bc,63
  262 D1:AA64 36 00 -  -      ld  (hl),0
  263 D1:AA66 ED B0 -  -      ldir
  264 D1:AA68 21 C0 5F D0     ld  hl,NAMETABLE2+960
  265 D1:AA6C 11 C1 5F D0     ld  de,NAMETABLE2+961
  266 D1:AA70 01 3F 00 00     ld  bc,63
  267 D1:AA74 36 00 -  -      ld  (hl),0
  268 D1:AA76 ED B0 -  -      ldir
  269 D1:AA78 -  -  -  -  
  270 D1:AA78 -  -  -  -  
  271 D1:AA78 -  -  -  -  
  272 D1:AA78 18 20 -  -      jr ++_
  273 D1:AA7A -  -  -  -  _:  
  274 D1:AA7A 0E 30 30 30 .db $0E,$30,$30,$30 ;bg0
  275 D1:AA7E 0E 30 30 30 .db $0E,$30,$30,$30 ;bg1
  276 D1:AA82 0E 30 30 30 .db $0E,$30,$30,$30 ;bg2
  277 D1:AA86 0E 30 30 30 .db $0E,$30,$30,$30 ;bg4
  278 D1:AA8A 0E 30 30 30 .db $0E,$30,$30,$30 ;sp0
  279 D1:AA8E 0E 30 30 30 .db $0E,$30,$30,$30 ;sp1
  280 D1:AA92 0E 30 30 30 .db $0E,$30,$30,$30 ;sp2
  281 D1:AA96 0E 30 30 30 .db $0E,$30,$30,$30 ;sp3
  282 D1:AA9A -  -  -  -  
  283 D1:AA9A -  -  -  -  
  284 D1:AA9A 00 -  -  -  _:  nop
  285 D1:AA9B -  -  -  -      ;load palette RAM
  286 D1:AA9B 21 7A AA D1     ld  hl,--_
  287 D1:AA9F 11 00 32 D0     ld  de,vram_palette
  288 D1:AAA3 01 20 00 00     ld  bc,32
  289 D1:AAA7 ED B0 -  -      ldir
  290 D1:AAA9 -  -  -  -  
  291 D1:AAA9 -  -  -  -  
  292 D1:AAA9 -  -  -  -      ;set registers
  293 D1:AAA9 DD 36 FC 00     ld  (ix+PPU_XSCROLL),0      ;PPU_SCROLL is write-only. Data gets...
  294 D1:AAAD DD 36 FD 00     ld  (ix+PPU_YSCROLL),0      ;... deposited into these two registers.
  295 D1:AAB1 DD 36 E0 88     ld  (ix+PPU_CTRL),%10001000 ;NMI on, 1PPU, 8x8, BG0k, SP1k, VRC horiz, BNA00
  296 D1:AAB5 DD 36 E1 1E     ld  (ix+PPU_MASK),%00011110 ;0emph, draw BG/spr, draw BG/spr left, no gs.
  297 D1:AAB9 -  -  -  -  
  298 D1:AAB9 CD D5 E8 D1     call ppu_drawFrame
  299 D1:AABD -  -  -  -  
  300 D1:AABD CD 05 B2 D1     call fastCopy
  301 D1:AAC1 -  -  -  -  
  302 D1:AAC1 CD F9 B1 D1     call waituntilnewkeypress
  303 D1:AAC5 CD F1 B1 D1     call waituntilkeyrelease
  304 D1:AAC9 -  -  -  -  
  305 D1:AAC9 -  -  -  -  
  306 D1:AAC9 -  -  -  -      ;Performance timer disable and read.
  307 D1:AAC9 -  -  -  -  
  308 D1:AAC9 DD 21 00 00 
              F2 -  -  -      ld  ix,$F20000
  309 D1:AACE DD 7E 30 -      ld  a,(ix+$30)
  310 D1:AAD1 CB 87 -  -      res 0,a ;turn off timer 0
  311 D1:AAD3 CB CF -  -      set 1,a ;timer 0 uses 32768Hz clock
  312 D1:AAD5 CB 97 -  -      res 2,a ;disables timer 0 interrupt generator
  313 D1:AAD7 DD 77 30 -      ld  (ix+$30),a
  314 D1:AADA -  -  -  -      ;
  315 D1:AADA 2A 00 00 F2     ld  hl,($F20000)
  316 D1:AADE -  -  -  -  
  317 D1:AADE -  -  -  -  endCurrentRun:
  318 D1:AADE -  -  -  -      ;call dbg_prepNextLine
  319 D1:AADE -  -  -  -      ;call newLine
  320 D1:AADE 21 D4 AB D1     ld  hl,text005
  321 D1:AAE2 CD F9 B2 D1     call printString
  322 D1:AAE6 -  -  -  -  
  323 D1:AAE6 -  -  -  -      ;call printTextBuf
  324 D1:AAE6 CD 05 B2 D1     call fastCopy
  325 D1:AAEA -  -  -  -  
  326 D1:AAEA DD 21 00 00 
              F0 -  -  -  _:  ld  ix,$F00000
  327 D1:AAEF DD 36 28 01     ld  (ix+$28),1      ;If latch was set, clear it.
  328 D1:AAF3 DD 7E 20 -      ld  a,(ix+$20)      ;Check state of latch.
  329 D1:AAF6 E6 01 -  -      and a,%00000001
  330 D1:AAF8 C2 EA AA D1     jp  nz,-_           ;wait until ON key is released.
  331 D1:AAFC DD 21 00 00 
              F0 -  -  -      ld  ix,$F00000
  332 D1:AB01 DD CB 2C 86     res 0,(ix+$2C)      ;Disable ON latch
  333 D1:AB05 DD 36 28 01     ld  (ix+$28),1      ;If latch was set, clear it.
  334 D1:AB09 -  -  -  -  
  335 D1:AB09 -  -  -  -  ;    nop
  336 D1:AB09 CD F9 B1 D1     call waituntilnewkeypress
  337 D1:AB0D CD F1 B1 D1     call waituntilkeyrelease
  338 D1:AB11 -  -  -  -  
  339 D1:AB11 -  -  -  -      ;
  340 D1:AB11 -  -  -  -      ;
  341 D1:AB11 -  -  -  -      ;
  342 D1:AB11 -  -  -  -  programExit:
  343 D1:AB11 CD 20 B2 D1     call stopGfx
  344 D1:AB15 ED 7B FC 31 
              D0 -  -  -      ld  sp,(save_spl)
  345 D1:AB1A 3A FF 31 D0     ld  a,(save_mbase)
  346 D1:AB1E ED 6D -  -      ld  MB,a
  347 D1:AB20 FD 21 80 00 
              D0 -  -  -      ld  iy,flags
  348 D1:AB25 C9 -  -  -      ret
  349 D1:AB26 -  -  -  -  
  350 D1:AB26 -  -  -  -  ;NMI, RES, and IRQ. In that order.
  351 D1:AB26 -  -  -  -  testVectors .equ $-(256-6)
  352 D1:AB26 00 80 -  -  .dw $8000
  353 D1:AB28 00 80 -  -  .dw $8000
  354 D1:AB2A 00 80 -  -  .dw $8000
  355 D1:AB2C -  -  -  -  testCode:
  356 D1:AB2C A9 00 AA A8 .db $A9,$00,$AA,$A8
  357 D1:AB30 BD 14 80 -  .db $BD,$14,$80
  358 D1:AB33 C9 00 -  -  .db $C9,$00
  359 D1:AB35 F0 08 -  -  .db $F0,$08
  360 D1:AB37 99 21 40 -  .db $99,$21,$40
  361 D1:AB3A E8 C8 -  -  .db $E8,$C8
  362 D1:AB3C -  -  -  -  ;.db $12
  363 D1:AB3C 4C 04 80 02 .db $4C,$04,$80,$02
  364 D1:AB40 48 65 6C 6C 
              6F 2C 20 57 
              6F -  -  -  .db $48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F
  365 D1:AB49 72 6C 64 21 
              00 -  -  -  .db $72,$6C,$64,$21,$00
  366 D1:AB4E -  -  -  -  
  367 D1:AB4E -  -  -  -  
  368 D1:AB4E A9 00 AA A8 
              BD 11 80 C9 
              00 F0 05 99 
              21 40 D0 -  .db $A9,$00,$AA,$A8,$BD,$11,$80,$C9,$00,$F0,$05,$99,$21,$40,$D0
  369 D1:AB5D F4 02 48 65 
              6C 6C 6F 2C 
              20 57 6F 72 
              6C 64 21 00 .db $F4,$02,$48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F,$72,$6C,$64,$21,$00
  370 D1:AB6D 02 -  -  -  .db $02     ;JAM. Emulator terminates on unsupported instructions or JAMs.
  371 D1:AB6E -  -  -  -  
  372 D1:AB6E -  -  -  -  helloWorld:
  373 D1:AB6E 48 65 6C 6C 
              6F 2C 20 57 
              6F 72 6C 64 
              21 00 -  -  .db "Hello, World!",0
  374 D1:AB7C -  -  -  -  
  375 D1:AB7C -  -  -  -  timings_file:
  376 D1:AB7C 15 74 69 6D 
              69 6E 67 73 
              00 -  -  -  .db AppVarObj,"timings",0
  377 D1:AB85 -  -  -  -  
  378 D1:AB85 -  -  -  -  text001:
  379 D1:AB85 4C 6F 6F 6B 
              69 6E 67 20 
              75 70 20 6E 
              65 61 72 65 
              73 74 20 52 
              4F 4D 20 66 
              69 6C 65 2E 
              2E 2E 0A 00 .db "Looking up nearest ROM file...\n",0
  380 D1:ABA5 -  -  -  -  text003:
  381 D1:ABA5 46 69 6C 65 
              20 66 6F 75 
              6E 64 3A 20 
              00 -  -  -  .db "File found: ",0
  382 D1:ABB2 -  -  -  -  text004:
  383 D1:ABB2 52 4F 4D 46 
              69 6C 65 20 
              6C 6F 61 64 
              65 64 20 61 
              6E 64 20 72 
              65 61 64 79 
              20 74 6F 20 
              72 75 6E 2E 
              0A 00 -  -  .db "ROMFile loaded and ready to run.\n",0
  384 D1:ABD4 -  -  -  -  text005:
  385 D1:ABD4 -  -  -  -  ;    0123456789012345678901234567890123456789
  386 D1:ABD4 43 50 55 20 
              45 78 65 63 
              75 74 69 6F 
              6E 20 48 61 
              6C 74 65 64 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 00 -  .db "CPU Execution Halted                  ",0
  387 D1:ABFB -  -  -  -  text006:
  388 D1:ABFB -  -  -  -  
  389 D1:ABFB -  -  -  -  
  390 D1:ABFB 07 -  -  -  .db 7
  391 D1:ABFC -  -  -  -  firstFileHeader:
  392 D1:ABFC 43 45 4E 52 
              4F 4D 00 -  .db "CENROM",0
  393 D1:AC03 -  -  -  -  
  394 D1:AC03 -  -  -  -  err_:
  395 D1:AC03 -  -  -  -  
  396 D1:AC03 -  -  -  -  err_err:
  397 D1:AC03 E1 -  -  -      pop hl
  398 D1:AC04 CD F9 B2 D1     call printString
  399 D1:AC08 -  -  -  -  err_err_quit:
  400 D1:AC08 CD 05 B2 D1     call fastCopy
  401 D1:AC0C 00 -  -  -      nop
  402 D1:AC0D CD F9 B1 D1     call waituntilnewkeypress
  403 D1:AC11 CD F1 B1 D1     call waituntilkeyrelease
  404 D1:AC15 C3 11 AB D1     jp programExit
  405 D1:AC19 -  -  -  -  
  406 D1:AC19 -  -  -  -  err_noContainersFound:
  407 D1:AC19 CD 03 AC D1     call err_err
  408 D1:AC1D -  -  -  -      ;0123456789012345678901234567890123456789
  409 D1:AC1D 54 72 61 76 
              65 72 73 65 
              20 66 6F 75 
              6E 64 20 6E 
              6F 20 63 61 
              6E 64 69 64 
              61 74 65 20 
              52 4F 4D 53 
              2E 0A 00 -  .db "Traverse found no candidate ROMS.\n",0
  410 D1:AC40 -  -  -  -  
  411 D1:AC40 -  -  -  -  err_missingFiles:
  412 D1:AC40 F5 -  -  -      push af
  413 D1:AC41 21 52 AC D1         ld  hl,err_missingFiles_str
  414 D1:AC45 CD F9 B2 D1         call printString
  415 D1:AC49 F1 -  -  -      pop af
  416 D1:AC4A CD 3F B3 D1     call printSmallNumPair
  417 D1:AC4E C3 08 AC D1     jp err_err_quit
  418 D1:AC52 -  -  -  -  err_missingFiles_str:
  419 D1:AC52 4E 75 6D 62 
              65 72 20 6F 
              66 20 66 69 
              6C 65 73 20 
              6D 69 73 73 
              69 6E 67 3A 
              20 00 -  -  .db "Number of files missing: ",0
  420 D1:AC6C -  -  -  -  
  421 D1:AC6C -  -  -  -  err_tooManyFiles:
  422 D1:AC6C CD 03 AC D1     call err_err
  423 D1:AC70 -  -  -  -      ;0123456789012345678901234567890123456789
  424 D1:AC70 4D 61 78 20 
              66 69 6C 65 
              20 63 6F 75 
              6E 74 20 70 
              65 72 20 52 
              4F 4D 20 69 
              6D 61 67 65 
              20 65 78 63 
              65 65 64 65 
              64 2E 00 -  .db "Max file count per ROM image exceeded.",0
  425 D1:AC97 -  -  -  -  
  426 D1:AC97 -  -  -  -  err_PRGROMTooLarge:
  427 D1:AC97 CD 03 AC D1     call err_err
  428 D1:AC9B 4D 61 78 69 
              6D 75 6D 20 
              73 75 70 70 
              6F 72 74 65 
              64 20 50 52 
              47 5F 52 4F 
              4D 20 65 78 
              63 65 65 64 
              65 64 2E 00 .db "Maximum supported PRG_ROM exceeded.",0
  429 D1:ACBF -  -  -  -  err_CHRROMTooLarge:
  430 D1:ACBF CD 03 AC D1     call err_err
  431 D1:ACC3 4D 61 78 69 
              6D 75 6D 20 
              73 75 70 70 
              6F 72 74 65 
              64 20 43 48 
              52 5F 52 4F 
              4D 20 65 78 
              63 65 65 64 
              65 64 2E 00 .db "Maximum supported CHR_ROM exceeded.",0
  432 D1:ACE7 -  -  -  -  
  433 D1:ACE7 -  -  -  -  err_missingROMDetected:
  434 D1:ACE7 CD 03 AC D1     call err_err
  435 D1:ACEB 46 69 6C 65 
              20 74 6F 6F 
              20 73 6D 61 
              6C 6C 20 74 
              6F 20 68 6F 
              6C 64 20 64 
              65 63 6C 61 
              72 65 64 20 
              50 52 47 2B 
              43 48 52 00 .db "File too small to hold declared PRG+CHR",0
  436 D1:AD13 -  -  -  -  
  437 D1:AD13 -  -  -  -  err_ROMHeaderDamaged:
  438 D1:AD13 CD 03 AC D1     call err_err
  439 D1:AD17 69 4E 45 53 
              20 52 4F 4D 
              20 68 65 61 
              64 65 72 20 
              64 61 6D 61 
              67 65 64 2E 
              00 -  -  -  .db "iNES ROM header damaged.",0
  440 D1:AD30 -  -  -  -  
  441 D1:AD30 -  -  -  -  err_MapperOutOfRange:
  442 D1:AD30 CD 03 AC D1     call err_err
  443 D1:AD34 55 6E 73 75 
              70 70 6F 72 
              74 65 64 20 
              6D 61 70 70 
              65 72 20 64 
              65 74 65 63 
              74 65 64 2E 
              00 -  -  -  .db "Unsupported mapper detected.",0
  444 D1:AD51 -  -  -  -  
  445 D1:AD51 -  -  -  -  err_CHRROMNotFound:
  446 D1:AD51 CD 03 AC D1     call err_err
  447 D1:AD55 43 48 52 5F 
              52 4F 4D 20 
              6E 6F 74 20 
              66 6F 75 6E 
              64 20 69 6E 
              73 69 64 65 
              20 66 69 6C 
              65 00 -  -  .db "CHR_ROM not found inside file",0
  448 D1:AD73 -  -  -  -  
  449 D1:AD73 -  -  -  -  
  450 D1:AD73 -  -  -  -  ;Input: DE = Address of first file after the container header signature
  451 D1:AD73 -  -  -  -  ;Outputs: ROM vectors recorded and ready to map
  452 D1:AD73 -  -  -  -  ;Destroys: All registers.
  453 D1:AD73 -  -  -  -  loadROMFile:
  454 D1:AD73 EB -  -  -      ex  de,hl
  455 D1:AD74 AF -  -  -      xor a,a
  456 D1:AD75 32 33 34 D0     ld  (missing_files),a
  457 D1:AD79 BE -  -  -  _:  cp  (hl)    ;
  458 D1:AD7A 23 -  -  -      inc hl      ;
  459 D1:AD7B 20 FC -  -      jr  nz,-_   ;skips past zero-terminated string containing full ROM name
  460 D1:AD7D 22 30 34 D0     ld  (basefile_sig),hl
  461 D1:AD81 01 10 00 00     ld  bc,SIZEOF_INTEGRITY_HASH
  462 D1:AD85 09 -  -  -      add hl,bc
  463 D1:AD86 7E -  -  -      ld  a,(hl)
  464 D1:AD87 FE 01 -  -      cp  a,MAXNUMFILES
  465 D1:AD89 D2 6C AC D1     jp  nc,err_tooManyFiles
  466 D1:AD8D 32 2F 34 D0     ld  (inputNumFiles),a
  467 D1:AD91 47 -  -  -      ld  b,a
  468 D1:AD92 -  -  -  -  ;    ld  c,SIZEOF_INTEGRITY_HASH     ;c already set to this value from earlier.
  469 D1:AD92 ED 4C -  -      mlt bc
  470 D1:AD94 23 -  -  -      inc hl
  471 D1:AD95 E5 -  -  -      push hl
  472 D1:AD96 09 -  -  -          add hl,bc
  473 D1:AD97 FD 21 50 34 
              D0 -  -  -          ld  iy,FILETABLE
  474 D1:AD9C 4E -  -  -          ld  c,(hl)
  475 D1:AD9D 23 -  -  -          inc hl
  476 D1:AD9E 46 -  -  -          ld  b,(hl)
  477 D1:AD9F 23 -  -  -          inc hl
  478 D1:ADA0 52 FD 0F 00         ld.s (iy+FILE_SIZE_OFFSET),bc
  479 D1:ADA4 FD 2F 02 -          ld  (iy+FILE_ADR_OFFSET),hl
  480 D1:ADA7 E1 -  -  -      pop hl
  481 D1:ADA8 3C -  -  -      inc a
  482 D1:ADA9 3D -  -  -      dec a
  483 D1:ADAA 28 47 -  -      jr  z,loadROMFile_singleFileLoad
  484 D1:ADAC -  -  -  -      ;If more than one file, fill FILETABLE.
  485 D1:ADAC -  -  -  -      ;NOTE: For now, this machinery is disabled. Only a single file is allowed.
  486 D1:ADAC ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  487 D1:ADAF 47 -  -  -      ld  b,a
  488 D1:ADB0 -  -  -  -  loadROMFile_multiFileLoadLoop:
  489 D1:ADB0 C5 -  -  -      push bc
  490 D1:ADB1 FD 2F 05 -          ld  (iy+FILE_SIG_ADR_OFFSET),hl
  491 D1:ADB4 01 10 00 00         ld  bc,16
  492 D1:ADB8 11 6C B1 D1         ld  de,loadROMFile_tempSigHash
  493 D1:ADBC ED B0 -  -          ldir
  494 D1:ADBE E5 -  -  -          push hl
  495 D1:ADBF FD E5 -  -              push iy
  496 D1:ADC1 01 17 00 00                 ld  bc,23
  497 D1:ADC5 FD 21 65 B1 
              D1 -  -  -                  ld  iy,loadROMFile_tempSig
  498 D1:ADCA CD 7C B1 D1                 call vatTraverse    ;returns DE @ datasection size if found
  499 D1:ADCE 30 05 -  -                  jr  nc,+_
  500 D1:ADD0 21 33 34 D0                 ld  hl,missing_files
  501 D1:ADD4 34 -  -  -                  inc (hl)
  502 D1:ADD5 FD E1 -  -  _:          pop iy
  503 D1:ADD7 EB -  -  -              ex  de,hl
  504 D1:ADD8 5E -  -  -              ld  e,(hl)
  505 D1:ADD9 23 -  -  -              inc hl
  506 D1:ADDA 56 -  -  -              ld  d,(hl)
  507 D1:ADDB 23 -  -  -              inc hl
  508 D1:ADDC 52 FD 1F 00             ld.s (iy+FILE_SIZE_OFFSET),de
  509 D1:ADE0 FD 2F 02 -              ld  (iy+FILE_ADR_OFFSET),hl
  510 D1:ADE3 E1 -  -  -          pop hl
  511 D1:ADE4 C1 -  -  -      pop bc
  512 D1:ADE5 ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  513 D1:ADE8 10 C6 -  -      djnz loadROMFile_multiFileLoadLoop
  514 D1:ADEA 3A 33 34 D0     ld  a,(missing_files)
  515 D1:ADEE B7 -  -  -      or  a,a
  516 D1:ADEF C2 40 AC D1     jp  nz,err_missingFiles
  517 D1:ADF3 -  -  -  -  loadROMFile_singleFileLoad:
  518 D1:ADF3 -  -  -  -      ;Compute size of ROM by summing filesizes, less INES header
  519 D1:ADF3 3A 2F 34 D0     ld  a,(inputNumFiles)
  520 D1:ADF7 3C -  -  -      inc a
  521 D1:ADF8 47 -  -  -      ld  b,a
  522 D1:ADF9 21 00 00 00     ld  hl,0
  523 D1:ADFD DD 21 50 34 
              D0 -  -  -      ld  ix,FILETABLE
  524 D1:AE02 52 DD 17 00 _:  ld.s de,(ix+FILE_SIZE_OFFSET)
  525 D1:AE06 19 -  -  -      add hl,de
  526 D1:AE07 ED 32 08 -      lea ix,ix+FILETABLE_STRIDE
  527 D1:AE0A 10 F6 -  -      djnz -_
  528 D1:AE0C 01 F0 FF FF     ld  bc,-16
  529 D1:AE10 09 -  -  -      add hl,bc   ;subtract INES header
  530 D1:AE11 22 34 34 D0     ld  (total_rom_size),hl
  531 D1:AE15 -  -  -  -      ;Verify that the file actually contains an INES header.
  532 D1:AE15 -  -  -  -      ;TODO: Do this at an earlier stage. Such as file selection.
  533 D1:AE15 DD 2A 52 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  534 D1:AE1A DD 27 00 -      ld  hl,(ix+0)
  535 D1:AE1D 11 4E 45 53     ld  de,$53454E         ;4E 45 53 == "NES"
  536 D1:AE21 B7 -  -  -      or  a,a
  537 D1:AE22 ED 52 -  -      sbc hl,de   ;Note: add does not affect zero flag. Can't test this via -DE
  538 D1:AE24 C2 13 AD D1 _:  jp  nz,err_ROMHeaderDamaged
  539 D1:AE28 DD 7E 03 -      ld  a,(ix+3)
  540 D1:AE2B FE 1A -  -      cp  a,$1A
  541 D1:AE2D 20 F5 -  -      jr  nz,-_   ;19
  542 D1:AE2F -  -  -  -      ;Compute ROM size by reading INES header. This should be equ or lt above.
  543 D1:AE2F -  -  -  -      ;Note: The below line is optimized from...
  544 D1:AE2F DD 2A 52 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  545 D1:AE34 -  -  -  -      ;... these lines. But the intent might not be perfectly clear. We'll keep
  546 D1:AE34 -  -  -  -      ;these here just in case there's ever a question about it.
  547 D1:AE34 -  -  -  -  ;    ld  ix,FILETABLE
  548 D1:AE34 -  -  -  -  ;    ld  ix,(ix+FILE_ADR_OFFSET)
  549 D1:AE34 DD 6E 04 -      ld  L,(ix+4)    ;PRG ROM count, low
  550 D1:AE37 DD 5E 05 -      ld  e,(ix+5)    ;CHR ROM count, low
  551 D1:AE3A 26 00 -  -      ld  h,0
  552 D1:AE3C 54 -  -  -      ld  d,h
  553 D1:AE3D DD 7E 07 -      ld  a,(ix+7)    ;Check for INES2 bits
  554 D1:AE40 E6 0C -  -      and a,%00001100
  555 D1:AE42 FE 08 -  -      cp  a,%00001000
  556 D1:AE44 20 1B -  -      jr  nz,+_
  557 D1:AE46 DD 7E 09 -      ld  a,(ix+9)
  558 D1:AE49 47 -  -  -      ld  b,a
  559 D1:AE4A E6 0F -  -      and a,$0F
  560 D1:AE4C FE 02 -  -      cp  a,MAXPRGROM_HINIB+1
  561 D1:AE4E D2 97 AC D1     jp  nc,err_PRGROMTooLarge
  562 D1:AE52 67 -  -  -      ld  h,a
  563 D1:AE53 78 -  -  -      ld  a,b
  564 D1:AE54 E6 F0 -  -      and a,$F0
  565 D1:AE56 07 -  -  -      rlca
  566 D1:AE57 07 -  -  -      rlca
  567 D1:AE58 07 -  -  -      rlca
  568 D1:AE59 07 -  -  -      rlca
  569 D1:AE5A FE 04 -  -      cp  a,MAXCHRROM_HINIB+1
  570 D1:AE5C D2 BF AC D1     jp  nc,err_CHRROMTooLarge
  571 D1:AE60 57 -  -  -      ld  d,a
  572 D1:AE61 AF -  -  -  _:  xor a,a
  573 D1:AE62 32 37 34 D0     ld  (prg_rom_size),a
  574 D1:AE66 32 3A 34 D0     ld  (chr_rom_size),a
  575 D1:AE6A 29 -  -  -      add hl,hl   ;x2
  576 D1:AE6B 29 -  -  -      add hl,hl   ;x4
  577 D1:AE6C 29 -  -  -      add hl,hl   ;x8
  578 D1:AE6D 29 -  -  -      add hl,hl   ;x16
  579 D1:AE6E 29 -  -  -      add hl,hl   ;x32
  580 D1:AE6F 29 -  -  -      add hl,hl   ;x64
  581 D1:AE70 52 22 38 34 
              D0 -  -  -      ld.s (prg_rom_size+1),hl    ;x64x256
  582 D1:AE75 EB -  -  -      ex  de,hl
  583 D1:AE76 29 -  -  -      add hl,hl   ;x2
  584 D1:AE77 29 -  -  -      add hl,hl   ;x4
  585 D1:AE78 29 -  -  -      add hl,hl   ;x8
  586 D1:AE79 29 -  -  -      add hl,hl   ;x16
  587 D1:AE7A 29 -  -  -      add hl,hl   ;x32
  588 D1:AE7B 52 22 3B 34 
              D0 -  -  -      ld.s (chr_rom_size+1),hl    ;x32x256
  589 D1:AE80 2A 3A 34 D0     ld  hl,(chr_rom_size)
  590 D1:AE84 ED 5B 37 34 
              D0 -  -  -      ld  de,(prg_rom_size)
  591 D1:AE89 19 -  -  -      add hl,de
  592 D1:AE8A ED 5B 34 34 
              D0 -  -  -      ld  de,(total_rom_size)
  593 D1:AE8F B7 -  -  -      or  a,a
  594 D1:AE90 ED 52 -  -      sbc hl,de   ;declared-actual. declared must be equal to or smaller.
  595 D1:AE92 28 04 -  -      jr  z,+_
  596 D1:AE94 D2 E7 AC D1     jp  nc,err_missingROMDetected
  597 D1:AE98 -  -  -  -  _:  ;Find trainer, PRG, and CHR base addresses
  598 D1:AE98 ED 22 10 -      lea hl,ix+16
  599 D1:AE9B 22 43 34 D0     ld  (trainer_base),hl   ;whether it exists or not.
  600 D1:AE9F 11 00 00 00     ld  de,0
  601 D1:AEA3 DD CB 06 56     bit 2,(ix+6)
  602 D1:AEA7 28 04 -  -      jr  z,+_
  603 D1:AEA9 11 00 02 00     ld  de,512
  604 D1:AEAD 19 -  -  -  _:  add hl,de
  605 D1:AEAE 22 43 34 D0     ld  (prg_rom_base),hl
  606 D1:AEB2 FD 21 50 34 
              D0 -  -  -      ld  iy,FILETABLE
  607 D1:AEB7 52 FD 27 00     ld.s hl,(iy+FILE_SIZE_OFFSET)
  608 D1:AEBB B7 -  -  -      or  a,a
  609 D1:AEBC ED 52 -  -      sbc hl,de   ;less possible trainer
  610 D1:AEBE 11 10 00 00     ld  de,16
  611 D1:AEC2 ED 52 -  -      sbc hl,de   ;less iNES header. Remaining is now size of current file.
  612 D1:AEC4 EB -  -  -      ex  de,hl   ;curfilesize is now in DE
  613 D1:AEC5 2A 37 34 D0     ld  hl,(prg_rom_size)   ;keep subtracting filesize from this until carry.
  614 D1:AEC9 B7 -  -  -      or  a,a
  615 D1:AECA ED 52 -  -      sbc hl,de   ;if carry, prg_rom end is inside this file. Undo: HL is offset.
  616 D1:AECC 0E 00 -  -      ld  c,0     ;0th file current
  617 D1:AECE 38 1D -  -      jr  c,loadROMFile_locatedCHRROM
  618 D1:AED0 3A 2F 34 D0     ld  a,(inputNumFiles)
  619 D1:AED4 B7 -  -  -      or  a,a
  620 D1:AED5 28 12 -  -      jr  z,loadROMFile_noCHRROMFound
  621 D1:AED7 47 -  -  -      ld  b,a
  622 D1:AED8 ED 33 08 -  _:  lea iy,iy+FILETABLE_STRIDE
  623 D1:AEDB 52 ED 5B 00 
              00 00 -  -      ld.s de,(FILE_SIZE_OFFSET)
  624 D1:AEE1 0C -  -  -      inc c
  625 D1:AEE2 B7 -  -  -      or  a,a
  626 D1:AEE3 ED 52 -  -      sbc hl,de   ;
  627 D1:AEE5 38 06 -  -      jr  c,loadROMFile_locatedCHRROM
  628 D1:AEE7 10 EF -  -      djnz -_
  629 D1:AEE9 -  -  -  -  loadROMFile_noCHRROMFound:
  630 D1:AEE9 C3 51 AD D1     jp  err_CHRROMNotFound
  631 D1:AEED -  -  -  -  loadROMFile_locatedCHRROM:
  632 D1:AEED 19 -  -  -      add hl,de       ;Undid subtract. HL is now offset in current file
  633 D1:AEEE FD 17 02 -      ld  de,(iy+FILE_ADR_OFFSET) ;so get address inside that file.
  634 D1:AEF1 19 -  -  -      add hl,de
  635 D1:AEF2 79 -  -  -      ld  a,c
  636 D1:AEF3 22 46 34 D0     ld  (chr_rom_base),hl
  637 D1:AEF7 32 49 34 D0     ld  (chr_rom_base_file),a
  638 D1:AEFB -  -  -  -      ;Detect mapper and run its initializer
  639 D1:AEFB DD 7E 06 -      ld  a,(ix+6)
  640 D1:AEFE DD 46 07 -      ld  b,(ix+7)
  641 D1:AF01 07 -  -  -      rlca
  642 D1:AF02 07 -  -  -      rlca
  643 D1:AF03 07 -  -  -      rlca
  644 D1:AF04 07 -  -  -      rlca
  645 D1:AF05 A8 -  -  -      xor a,b
  646 D1:AF06 E6 0F -  -      and a,$0F
  647 D1:AF08 A8 -  -  -      xor a,b
  648 D1:AF09 52 EB -  -      ex.s de,hl  ;clears HLU,DEU
  649 D1:AF0B 5F -  -  -      ld  e,a
  650 D1:AF0C 21 3D 34 D0     ld  hl,submapper
  651 D1:AF10 36 00 -  -      ld  (hl),0
  652 D1:AF12 78 -  -  -      ld  a,b
  653 D1:AF13 E6 0C -  -      and a,%00001100
  654 D1:AF15 FE 08 -  -      cp  a,%00001000
  655 D1:AF17 3E 00 -  -      ld  a,0
  656 D1:AF19 20 0E -  -      jr  nz,+_
  657 D1:AF1B DD 46 08 -      ld  b,(ix+8)
  658 D1:AF1E 78 -  -  -      ld  a,b
  659 D1:AF1F 07 -  -  -      rlca
  660 D1:AF20 07 -  -  -      rlca
  661 D1:AF21 07 -  -  -      rlca
  662 D1:AF22 07 -  -  -      rlca
  663 D1:AF23 E6 0F -  -      and a,$0F
  664 D1:AF25 77 -  -  -      ld  (hl),a
  665 D1:AF26 78 -  -  -      ld  a,b
  666 D1:AF27 E6 0F -  -      and a,$0F
  667 D1:AF29 57 -  -  -  _:  ld  d,a
  668 D1:AF2A ED 53 3F 34 
              D0 -  -  -      ld  (mapper_id),de
  669 D1:AF2F 21 FF FF FF     ld  hl,-NUMBER_OF_MAPPERS
  670 D1:AF33 19 -  -  -      add hl,de
  671 D1:AF34 DA 30 AD D1     jp  c,err_MapperOutOfRange
  672 D1:AF38 ED 62 -  -      sbc hl,hl
  673 D1:AF3A 19 -  -  -      add hl,de               ;hl=de. both are mapper IDs
  674 D1:AF3B 2E 09 -  -      ld  L,MAPPER_STRIDE
  675 D1:AF3D 55 -  -  -      ld  d,L
  676 D1:AF3E ED 6C -  -      mlt hl                  ;high byte multiply
  677 D1:AF40 65 -  -  -      ld  h,L
  678 D1:AF41 2E 00 -  -      ld  L,0
  679 D1:AF43 ED 5C -  -      mlt de                  ;low byte multiply
  680 D1:AF45 19 -  -  -      add hl,de               ;This is the best 16bit * 8bit I know to do.
  681 D1:AF46 11 52 AF D1     ld  de,mapper_table
  682 D1:AF4A 19 -  -  -      add hl,de
  683 D1:AF4B 22 40 34 D0     ld  (mapper_adr_base),hl
  684 D1:AF4F ED 27 -  -      ld  hl,(hl)
  685 D1:AF51 E9 -  -  -      jp  (hl)
  686 D1:AF52 -  -  -  -  
  687 D1:AF52 -  -  -  -  mapper_table:   ;entries 9 wide
  688 D1:AF52 5B AF D1 -  .dl mapper0_init
  689 D1:AF55 D8 AF D1 -  .dl mapper0_read
  690 D1:AF58 80 B0 D1 -  .dl mapper0_write
  691 D1:AF5B -  -  -  -  
  692 D1:AF5B -  -  -  -  mapper0_init:
  693 D1:AF5B -  -  -  -      ;map trainer, if exist
  694 D1:AF5B DD CB 06 56     bit 2,(ix+6)
  695 D1:AF5F 28 0D -  -      jr  z,+_
  696 D1:AF61 2A 43 34 D0     ld  hl,(trainer_base)
  697 D1:AF65 1E 70 -  -      ld  e,$70
  698 D1:AF67 0E 02 -  -      ld  c,2
  699 D1:AF69 41 -  -  -      ld  b,c
  700 D1:AF6A CD A6 B9 D1     call i6502_map_pages
  701 D1:AF6E 2A 37 34 D0 _:  ld  hl,(prg_rom_size)
  702 D1:AF72 11 FF BF FF     ld  de,-(16384+1)
  703 D1:AF76 19 -  -  -      add hl,de   ;carry if more than 1 16KB segment
  704 D1:AF77 2A 43 34 D0     ld  hl,(prg_rom_base)
  705 D1:AF7B -  -  -  -      ;jr  $
  706 D1:AF7B 06 80 -  -      ld  b,$80
  707 D1:AF7D 58 -  -  -      ld  e,b
  708 D1:AF7E 0E 40 -  -      ld  c,$40
  709 D1:AF80 30 02 -  -      jr  nc,+_
  710 D1:AF82 CB 21 -  -      sla c
  711 D1:AF84 CD A6 B9 D1 _:  call i6502_map_pages
  712 D1:AF88 -  -  -  -      ;map in nametable mirroring
  713 D1:AF88 21 00 58 D0     ld  hl,NAMETABLE1
  714 D1:AF8C 11 00 5C D0     ld  de,NAMETABLE2
  715 D1:AF90 22 00 34 D0     ld  (nametable00),hl
  716 D1:AF94 ED 53 0C 34 
              D0 -  -  -      ld  (nametable11),de
  717 D1:AF99 DD CB 06 46     bit 0,(ix+6)    ;nametable arrangement. Mapper 0 has no alternates.
  718 D1:AF9D 28 01 -  -      jr  z,+_
  719 D1:AF9F EB -  -  -      ex  de,hl
  720 D1:AFA0 22 04 34 D0 _:  ld  (nametable01),hl
  721 D1:AFA4 ED 53 08 34 
              D0 -  -  -      ld  (nametable10),de
  722 D1:AFA9 -  -  -  -      ;Fill out nametable attrib pointers
  723 D1:AFA9 21 00 34 D0     ld  hl,nametable00
  724 D1:AFAD 01 C0 03 00     ld  bc,960
  725 D1:AFB1 3E 04 -  -      ld  a,4
  726 D1:AFB3 ED 17 -  -  _:  ld  de,(hl)
  727 D1:AFB5 CB E5 -  -      set 4,L
  728 D1:AFB7 EB -  -  -      ex  de,hl
  729 D1:AFB8 09 -  -  -      add hl,bc
  730 D1:AFB9 EB -  -  -      ex  de,hl
  731 D1:AFBA ED 1F -  -      ld  (hl),de
  732 D1:AFBC CB A5 -  -      res 4,L
  733 D1:AFBE 23 -  -  -      inc hl
  734 D1:AFBF 23 -  -  -      inc hl
  735 D1:AFC0 23 -  -  -      inc hl
  736 D1:AFC1 23 -  -  -      inc hl
  737 D1:AFC2 3D -  -  -      dec a
  738 D1:AFC3 20 EE -  -      jr  nz,-_
  739 D1:AFC5 -  -  -  -      ;initilize chr_rom current bank address.
  740 D1:AFC5 -  -  -  -      ;This mapper does not allow any additional banks, but if it does, this
  741 D1:AFC5 -  -  -  -      ;value must be recalculated from chr_rom_base
  742 D1:AFC5 2A 46 34 D0     ld  hl,(chr_rom_base)
  743 D1:AFC9 22 2C 34 D0     ld  (chr_rom_curbank),hl
  744 D1:AFCD 21 F3 B0 D1     ld  hl,mapper0_ppu_write
  745 D1:AFD1 22 4A 34 D0     ld  (ppu_smc_gate),hl
  746 D1:AFD5 36 C9 -  -      ld  (hl),$C9    ;ret. Will write nop here during first NMI handle
  747 D1:AFD7 C9 -  -  -      ret
  748 D1:AFD8 -  -  -  -  
  749 D1:AFD8 -  -  -  -  
  750 D1:AFD8 -  -  -  -  mapper0_read:
  751 D1:AFD8 7A -  -  -      ld  a,d
  752 D1:AFD9 87 -  -  -      add a,a
  753 D1:AFDA 30 08 -  -      jr  nc,+_
  754 D1:AFDC 7E -  -  -      ld  a,(hl)  ;is $8000 or above
  755 D1:AFDD C9 -  -  -      ret
  756 D1:AFDE FE 40 -  -      cp  a,$20*2
  757 D1:AFE0 38 02 -  -      jr  c,+_
  758 D1:AFE2 7E -  -  -      ld  a,(hl)  ;is below $2000
  759 D1:AFE3 C9 -  -  -      ret
  760 D1:AFE4 87 -  -  -  _:  add a,a
  761 D1:AFE5 30 13 -  -      jr  nc,mapper0_ppu_read     ;wasn't $4000 or higher.
  762 D1:AFE7 28 02 -  -      jr  z,mapper0_apu_read      ;high byte was exactly $40
  763 D1:AFE9 7E -  -  -      ld  a,(hl)
  764 D1:AFEA C9 -  -  -      ret
  765 D1:AFEB -  -  -  -  mapper0_apu_read:
  766 D1:AFEB 79 -  -  -      ld  a,c
  767 D1:AFEC FE 16 -  -      cp  a,$16
  768 D1:AFEE 20 08 -  -      jr  nz,+_
  769 D1:AFF0 37 -  -  -      scf
  770 D1:AFF1 DD CB FE 1E     rr  (ix+APU_KEYPAD)     ;after bits are exhausted, should read '1'
  771 D1:AFF5 CE 40 -  -      adc a,$40               ;Simulate open bus behavior
  772 D1:AFF7 C9 -  -  -      ret
  773 D1:AFF8 7E -  -  -  _:  ld  a,(hl)  ;hope that the dummy map page is good enough to not crash.
  774 D1:AFF9 C9 -  -  -      ret
  775 D1:AFFA -  -  -  -  mapper0_ppu_read:
  776 D1:AFFA 79 -  -  -      ld  a,c
  777 D1:AFFB E6 07 -  -      and a,%00000111
  778 D1:AFFD FE 07 -  -      cp  a,$07
  779 D1:AFFF 28 1C -  -      jr  z,mapper0_ppu_read_ppudata
  780 D1:B001 FE 04 -  -      cp  a,$04
  781 D1:B003 28 72 -  -      jr  z,mapper0_ppu_read_oamdata
  782 D1:B005 FE 02 -  -      cp  a,$02   ;gotta break this out since reading ppustatus does other stuff
  783 D1:B007 28 08 -  -      jr  z,mapper0_ppu_read_ppustatus
  784 D1:B009 -  -  -  -      ;We should ignore reads from write-only registers but i'm sure nothing
  785 D1:B009 -  -  -  -      ;will come of allowing it.
  786 D1:B009 ED 22 E0 -  _:  lea hl,ix+PPU_CTRL
  787 D1:B00C 7D -  -  -      ld  a,l
  788 D1:B00D 81 -  -  -      add a,c
  789 D1:B00E 6F -  -  -      ld  l,a
  790 D1:B00F 7E -  -  -      ld  a,(hl)  
  791 D1:B010 C9 -  -  -      ret
  792 D1:B011 -  -  -  -  mapper0_ppu_read_ppustatus:
  793 D1:B011 -  -  -  -      ;reading ppustatus does additional things.
  794 D1:B011 3E 55 -  -      ld  a,WREG_CONST
  795 D1:B013 DD 77 F4 -      ld  (ix+PPU_W),a
  796 D1:B016 ED 22 E2 -      lea hl,ix+PPU_STATUS
  797 D1:B019 7E -  -  -      ld  a,(hl)
  798 D1:B01A CB BE -  -      res 7,(hl)  ;clears VBlank flag if it was set. But only after read.
  799 D1:B01C -  -  -  -      ;!!! NOTE:
  800 D1:B01C -  -  -  -      ; In the future, sprite 0 hit flag is set in a generated "interrupt" event
  801 D1:B01C -  -  -  -      ; created by another "interrupt" event that the PPU ISR generates. The PPU
  802 D1:B01C -  -  -  -      ; event triggers at the end VBlank, clearing the sprite 0 flag and creating
  803 D1:B01C -  -  -  -      ; the sprite 0 hit event flag, where it is set. But only if sprite 0 can
  804 D1:B01C -  -  -  -      ; be hit.
  805 D1:B01C C9 -  -  -      ret
  806 D1:B01D -  -  -  -  mapper0_ppu_read_ppudata:
  807 D1:B01D DD 7E F3 -      ld  a,(ix+PPU_V+1)
  808 D1:B020 4F -  -  -      ld  c,a
  809 D1:B021 E6 3F -  -      and a,%00111111
  810 D1:B023 FE 20 -  -      cp  a,$20
  811 D1:B025 30 0F -  -      jr  nc,+_   ;skip reading from CHR_ROM
  812 D1:B027 D5 -  -  -      push de
  813 D1:B028 52 EB -  -          ex.s de,hl  ;clears DEU
  814 D1:B02A 2A 2C 34 D0         ld  hl,(chr_rom_curbank)
  815 D1:B02E 57 -  -  -          ld  d,a
  816 D1:B02F DD 5E F2 -          ld  e,(ix+PPU_V+0)
  817 D1:B032 19 -  -  -          add hl,de
  818 D1:B033 D1 -  -  -      pop de
  819 D1:B034 7E -  -  -      ld  a,(hl)
  820 D1:B035 C9 -  -  -      ret
  821 D1:B036 FE 3F -  -  _:  cp  a,$3F
  822 D1:B038 20 0C -  -      jr  nz,+_
  823 D1:B03A DD 7E F2 -      ld  a,(ix+PPU_V+0)
  824 D1:B03D E6 3F -  -      and a,%00111111
  825 D1:B03F 21 00 32 D0     ld  hl,vram_palette
  826 D1:B043 6F -  -  -      ld  L,a
  827 D1:B044 7E -  -  -      ld  a,(hl)
  828 D1:B045 C9 -  -  -      ret
  829 D1:B046 E6 0C -  -  _:  and a,%00001100     ;%00ZZTTaa Z:00,01=CHR,02=NT,03=PAL; T:WhichNT; a:adrHI
  830 D1:B048 21 00 34 D0     ld  hl,nametable00
  831 D1:B04C 6F -  -  -      ld  L,a             ;bits already in position to index the table
  832 D1:B04D ED 27 -  -      ld  hl,(hl)
  833 D1:B04F DD 6E F2 -      ld  L,(ix+PPU_V+0)
  834 D1:B052 DD 7E F3 -      ld  a,(ix+PPU_V+1)
  835 D1:B055 AC -  -  -      xor a,h     ;
  836 D1:B056 E6 03 -  -      and a,%00000011 ;keep low bits of address in A. H keep is location-specific.
  837 D1:B058 AC -  -  -      xor a,h
  838 D1:B059 67 -  -  -      ld  h,a
  839 D1:B05A DD CB E0 56     bit 2,(ix+PPU_CTRL) ;VRAM cursor direction
  840 D1:B05E 3E 01 -  -      ld  a,1
  841 D1:B060 28 02 -  -      jr  z,+_
  842 D1:B062 C6 1F -  -      add a,31
  843 D1:B064 DD 86 F2 -  _:  add a,(ix+PPU_V)
  844 D1:B067 DD 77 F2 -      ld  (ix+PPU_V),a
  845 D1:B06A 30 03 -  -      jr  nc,+_
  846 D1:B06C DD 34 F3 -      inc (ix+PPU_V+1)
  847 D1:B06F DD 7E E7 -  _:  ld  a,(ix+PPU_DATA) ;following dance simulates delayed buffer read
  848 D1:B072 46 -  -  -      ld  b,(hl)
  849 D1:B073 DD 70 E7 -      ld  (ix+PPU_DATA),b
  850 D1:B076 C9 -  -  -      ret
  851 D1:B077 -  -  -  -  mapper0_ppu_read_oamdata:
  852 D1:B077 -  -  -  -      ;this needs to be more complex than this. But I'm not. I won't.
  853 D1:B077 -  -  -  -      ;Not now. Not going to play Micro Machines. I don't wanna.
  854 D1:B077 21 00 60 D0     ld  hl,OBJECT_ATTRIB_MEM
  855 D1:B07B DD 6E E3 -      ld  L,(ix+PPU_OAMADDR)
  856 D1:B07E 7E -  -  -      ld  a,(hl)
  857 D1:B07F C9 -  -  -      ret
  858 D1:B080 -  -  -  -  
  859 D1:B080 -  -  -  -  
  860 D1:B080 -  -  -  -  mapper0_write:
  861 D1:B080 7A -  -  -      ld  a,d
  862 D1:B081 FE 20 -  -      cp  a,$20
  863 D1:B083 30 02 -  -      jr  nc,+_
  864 D1:B085 70 -  -  -      ld  (hl),b
  865 D1:B086 C9 -  -  -      ret
  866 D1:B087 FE 40 -  -  _:  cp  a,$40
  867 D1:B089 38 68 -  -      jr  c,mapper0_ppu_write
  868 D1:B08B 28 04 -  -      jr  z,mapper0_apu_write
  869 D1:B08D 87 -  -  -      add a,a
  870 D1:B08E D8 -  -  -      ret c       ;don't write anything to above $8000
  871 D1:B08F 70 -  -  -      ld  (hl),b  ;but allow it in $4100-$7FFF because it might be RAM.
  872 D1:B090 C9 -  -  -      ret
  873 D1:B091 -  -  -  -  mapper0_apu_write:
  874 D1:B091 79 -  -  -      ld  a,c
  875 D1:B092 FE 16 -  -      cp  a,$16
  876 D1:B094 20 3B -  -      jr  nz,+_
  877 D1:B096 DD 7E FF -      ld  a,(ix+APU_KEYLATCH)
  878 D1:B099 A8 -  -  -      xor a,b     ;Bit 0 is set if we're trying to change controller poll state.
  879 D1:B09A 0F -  -  -      rrca        ;And this is how we're going to get it.
  880 D1:B09B D0 -  -  -      ret nc      ;Only support NES standard controller.
  881 D1:B09C CB 40 -  -      bit 0,b     ;So... what are we changing it to?
  882 D1:B09E DD 70 FF -      ld  (ix+APU_KEYLATCH),b
  883 D1:B0A1 21 00 00 F5     ld  hl,mpKeyMode
  884 D1:B0A5 28 06 -  -      jr  z,mapper0_apu_stop_keyboard ;jump to strobe stop
  885 D1:B0A7 7E -  -  -      ld  a,(hl)
  886 D1:B0A8 FE 03 -  -      cp  a,3
  887 D1:B0AA C8 -  -  -      ret z       ;don't do anything to the keyboard if running continuous.
  888 D1:B0AB 77 -  -  -      ld  (hl),a  ;else set to continuous and keep going.
  889 D1:B0AC C9 -  -  -      ret
  890 D1:B0AD -  -  -  -  mapper0_apu_stop_keyboard:
  891 D1:B0AD 2E 12 -  -      ld  L,$12   ;76543210 : del mode 2nd y= wind zoom trace graph
  892 D1:B0AF 7E -  -  -      ld  a,(hl)
  893 D1:B0B0 2E 1E -  -      ld  L,$1E   ;----3210 : up right left down
  894 D1:B0B2 4E -  -  -      ld  c,(hl)
  895 D1:B0B3 A9 -  -  -      xor a,c
  896 D1:B0B4 E6 F0 -  -      and a,%11110000
  897 D1:B0B6 A9 -  -  -      xor a,c     ;keymapping has changed. We need to further alter it.
  898 D1:B0B7 -  -  -  -      ;[DE MO 2N Y= UP RI LE DO] maps to [SE, B, A, ST, UP, RI, LE, DO]
  899 D1:B0B7 -  -  -  -      ;The above must be rearranged to become:
  900 D1:B0B7 -  -  -  -      ;            [RI, LE, DO, UP, ST, SE, B , A ]
  901 D1:B0B7 -  -  -  -      ;as compared to
  902 D1:B0B7 -  -  -  -      ;            [SE, B , A , ST, UP, RI, LE, DO]
  903 D1:B0B7 07 -  -  -      rlca        ;[B , A , ST, UP, RI, LE, DO, SE]
  904 D1:B0B8 4F -  -  -      ld  c,a     ;b4  : UP is in correct position.
  905 D1:B0B9 07 -  -  -      rlca        ;[A , ST, UP, RI, LE, DO, SE, B ]
  906 D1:B0BA 07 -  -  -      rlca        ;[ST, UP, RI, LE, DO, SE, B , A ]
  907 D1:B0BB 47 -  -  -      ld  b,a     ;b0-2:SE, B , and A are in the correct position
  908 D1:B0BC 07 -  -  -      rlca        ;[UP, RI, LE, DO, SE, B , A , ST]
  909 D1:B0BD 07 -  -  -      rlca        ;[RI, LE, DO, SE, B , A , ST, UP]
  910 D1:B0BE 57 -  -  -      ld  d,a     ;b5-7: RI LE DO in correct position.
  911 D1:B0BF 07 -  -  -      rlca        ;[LE, DO, SE, B , A , ST, UP, RI]
  912 D1:B0C0 07 -  -  -      rlca        ;b3: ST is in the correct position.
  913 D1:B0C1 A9 -  -  -      xor a,c     ;
  914 D1:B0C2 E6 08 -  -      and a,%00001000 ;keep A3, merge others
  915 D1:B0C4 A9 -  -  -      xor a,c     ;Has: A3. Merge-in contains b4
  916 D1:B0C5 A8 -  -  -      xor a,b     ;
  917 D1:B0C6 E6 18 -  -      and a,%00011000 ;keep A3-4
  918 D1:B0C8 A8 -  -  -      xor a,b     ;Merge-in contains b0-2
  919 D1:B0C9 AA -  -  -      xor a,d     ;
  920 D1:B0CA E6 1F -  -      and a,%00011111 ;keep A0-4
  921 D1:B0CC AA -  -  -      xor a,d     ;Merge-in contains b5-7. Is complete.
  922 D1:B0CD DD 77 FE -      ld  (ix+APU_KEYPAD),a
  923 D1:B0D0 C9 -  -  -      ret
  924 D1:B0D1 FE 14 -  -  _:  cp  a,$14   ;OAM DMA
  925 D1:B0D3 20 1C -  -      jr  nz,+_
  926 D1:B0D5 C5 -  -  -      push bc
  927 D1:B0D6 D5 -  -  -          push de
  928 D1:B0D7 11 01 02 00             ld  de,513  ;or 514. Not going to emulate put/get cycles
  929 D1:B0DB FD 19 -  -              add iy,de
  930 D1:B0DD 0E 0C -  -              ld  c,BASETABLE_STRIDE
  931 D1:B0DF 21 00 40 D0             ld  hl,PAGETABLE
  932 D1:B0E3 09 -  -  -              add hl,bc
  933 D1:B0E4 11 00 60 D0             ld  de,OBJECT_ATTRIB_MEM
  934 D1:B0E8 01 00 01 00             ld  bc,256
  935 D1:B0EC ED B0 -  -              ldir
  936 D1:B0EE D1 -  -  -          pop de
  937 D1:B0EF C1 -  -  -      pop bc
  938 D1:B0F0 C9 -  -  -      ret
  939 D1:B0F1 70 -  -  -  _:  ld  (hl),b
  940 D1:B0F2 C9 -  -  -      ret
  941 D1:B0F3 -  -  -  -  mapper0_ppu_write:
  942 D1:B0F3 C9 -  -  -      ret
  943 D1:B0F4 -  -  -  -      ;TODO: gate off access outside VBlank
  944 D1:B0F4 -  -  -  -      ;TODO: Replace cp/jr chain with DJNZ chain for more optimal branching.
  945 D1:B0F4 79 -  -  -      ld  a,c
  946 D1:B0F5 E6 07 -  -      and a,%00000111
  947 D1:B0F7 -  -  -  -  ;    cp  a,$01  ;Once midframe is supported, uncomment this.
  948 D1:B0F7 -  -  -  -  ;    jr  z,mapper0_ppu_write_ppumask
  949 D1:B0F7 FE 02 -  -      cp  a,$02
  950 D1:B0F9 C8 -  -  -      ret z   ;read-only register. do not write to it.
  951 D1:B0FA FE 04 -  -      cp  a,$04
  952 D1:B0FC 28 08 -  -      jr  z,mapper0_ppu_write_oamdata
  953 D1:B0FE FE 06 -  -      cp a,$06
  954 D1:B100 28 0D -  -      jr  z,mapper0_ppu_write_ppuaddr
  955 D1:B102 FE 07 -  -      cp  a,$07
  956 D1:B104 28 17 -  -      jr  z,mapper0_ppu_write_ppudata
  957 D1:B106 -  -  -  -  ;    cp  a,$05  ;Once midframe is supported, uncomment this.
  958 D1:B106 -  -  -  -  ;    jr  z,mapper0_ppu_write_ppuscroll
  959 D1:B106 -  -  -  -  
  960 D1:B106 -  -  -  -  
  961 D1:B106 -  -  -  -  mapper0_ppu_write_oamdata:
  962 D1:B106 -  -  -  -      ;Doesn't check anything. So sad.
  963 D1:B106 21 00 60 D0     ld  hl,OBJECT_ATTRIB_MEM
  964 D1:B10A DD 6E E3 -      ld  L,(ix+PPU_OAMADDR)
  965 D1:B10D 70 -  -  -      ld  (hl),b
  966 D1:B10E C9 -  -  -      ret
  967 D1:B10F -  -  -  -  mapper0_ppu_write_ppuaddr:
  968 D1:B10F DD CB F4 0E     rrc (ix+PPU_W)
  969 D1:B113 38 04 -  -      jr  c,+_
  970 D1:B115 DD 70 F2 -      ld  (ix+PPU_V+0),b
  971 D1:B118 C9 -  -  -      ret
  972 D1:B119 DD 70 F3 -  _:  ld  (ix+PPU_V+1),b
  973 D1:B11C C9 -  -  -      ret
  974 D1:B11D -  -  -  -  
  975 D1:B11D -  -  -  -  mapper0_ppu_write_ppudata:
  976 D1:B11D DD 7E F3 -      ld  a,(ix+PPU_V+1)
  977 D1:B120 4F -  -  -      ld  c,a
  978 D1:B121 E6 3F -  -      and a,%00111111
  979 D1:B123 FE 20 -  -      cp  a,$20
  980 D1:B125 D8 -  -  -      ret c   ;Mapper 0 does not allow writing to CHR_ROM
  981 D1:B126 FE 3F -  -      cp  a,$3F
  982 D1:B128 28 2B -  -      jr  z,+++_    ;write to palette table
  983 D1:B12A E6 0C -  -      and a,%00001100     ;%00ZZTTaa Z:00,01=CHR,02=NT,03=PAL; T:WhichNT; a:adrHI
  984 D1:B12C 21 00 34 D0     ld  hl,nametable00
  985 D1:B130 6F -  -  -      ld  L,a             ;bits already in position to index the table
  986 D1:B131 ED 27 -  -      ld  hl,(hl)
  987 D1:B133 DD 6E F2 -      ld  L,(ix+PPU_V+0)
  988 D1:B136 DD 7E F3 -      ld  a,(ix+PPU_V+1)
  989 D1:B139 AC -  -  -      xor a,h     ;
  990 D1:B13A E6 03 -  -      and a,%00000011 ;keep low bits of address in A. H keep is location-specific.
  991 D1:B13C AC -  -  -      xor a,h
  992 D1:B13D 67 -  -  -      ld  h,a
  993 D1:B13E 70 -  -  -      ld  (hl),b
  994 D1:B13F DD CB E0 56     bit 2,(ix+PPU_CTRL) ;VRAM cursor direction
  995 D1:B143 3E 01 -  -      ld  a,1
  996 D1:B145 28 02 -  -      jr  z,+_
  997 D1:B147 C6 1F -  -      add a,31
  998 D1:B149 DD 86 F2 -  _:  add a,(ix+PPU_V)
  999 D1:B14C DD 77 F2 -      ld  (ix+PPU_V),a
 1000 D1:B14F 30 03 -  -      jr  nc,+_
 1001 D1:B151 DD 34 F3 -      inc (ix+PPU_V+1)
 1002 D1:B154 C9 -  -  -  _:  ret
 1003 D1:B155 21 00 32 D0 _:  ld  hl,vram_palette
 1004 D1:B159 DD 7E F2 -      ld  a,(ix+PPU_V+0)
 1005 D1:B15C E6 3F -  -      and a,%00111111
 1006 D1:B15E 6F -  -  -      ld  L,a
 1007 D1:B15F 70 -  -  -      ld  (hl),b
 1008 D1:B160 C9 -  -  -      ret
 1009 D1:B161 -  -  -  -  
 1010 D1:B161 -  -  -  -  mapper0_ppu_write_ppumask:
 1011 D1:B161 -  -  -  -      ;TODO: Allow queueing for midframe writes.
 1012 D1:B161 70 -  -  -      ld  (hl),b
 1013 D1:B162 C9 -  -  -      ret
 1014 D1:B163 -  -  -  -  mapper0_ppu_write_ppuscroll:
 1015 D1:B163 -  -  -  -      ;TODO: Allow queueing for midframe writes. Often used in conjunction
 1016 D1:B163 -  -  -  -      ;with Sprite0 hits for status bar rendering.
 1017 D1:B163 70 -  -  -      ld  (hl),b
 1018 D1:B164 C9 -  -  -      ret
 1019 D1:B165 -  -  -  -  
 1020 D1:B165 -  -  -  -  
 1021 D1:B165 -  -  -  -  loadROMFile_tempSig:    ;total 23 bytes
 1022 D1:B165 43 45 4E 52 
              4F 32 00 -  .db "CENRO2",0
 1023 D1:B16C -  -  -  -  loadROMFile_tempSigHash:
 1024 D1:B16C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;16 bytes for hash
 1025 D1:B17C -  -  -  -  
 1026 D1:B17C -  -  -  -  
 1027 D1:B17C -  -  -  -  ;Input: IY = locationOfSignature. 
 1028 D1:B17C -  -  -  -  ;       BC=size of signature (long load to clear BCU), still limited to 255.
 1029 D1:B17C -  -  -  -  ;Output: carry=1: Variable not found.
 1030 D1:B17C -  -  -  -  ;Output: carry=0: DE=address of variable data start after the signature
 1031 D1:B17C -  -  -  -  ;        IX=location of current variable's VAT location.
 1032 D1:B17C -  -  -  -  ;Destroys: All registers not in use.
 1033 D1:B17C -  -  -  -  ;NOTES: This routine is capable of resuming a search that has ended.
 1034 D1:B17C -  -  -  -  
 1035 D1:B17C -  -  -  -  ;To continue searching:
 1036 D1:B17C -  -  -  -  ;call vatTraverse_continue with the following inputs:
 1037 D1:B17C -  -  -  -  ;   IX preserved from a non-carry return of vatTraverse.
 1038 D1:B17C -  -  -  -  ;   BC = same as input for vatTraverse. vatTraverse does not destroy this reg.
 1039 D1:B17C -  -  -  -  ;   WARNING: DO NOT KEEP SEARCHING AFTER CALL RETURNS CARRY. START A NEW SEARCH.
 1040 D1:B17C -  -  -  -  vatTraverse:
 1041 D1:B17C -  -  -  -      ;progPtr = progvat start; ptemp = progvatend
 1042 D1:B17C DD 2A 9D 25 
              D0 -  -  -      ld  ix,(progPtr)
 1043 D1:B181 -  -  -  -  vatTraverse_loop:
 1044 D1:B181 2A 9A 25 D0     ld  hl,(pTemp)
 1045 D1:B185 ED 12 00 -      lea de,ix+0
 1046 D1:B188 B7 -  -  -      or  a,a
 1047 D1:B189 ED 52 -  -      sbc hl,de   ;HL<DE while in pVAT, else carry set.
 1048 D1:B18B 3F -  -  -      ccf
 1049 D1:B18C D8 -  -  -      ret c
 1050 D1:B18D 1A -  -  -      ld  a,(de)
 1051 D1:B18E E6 1F -  -      and a,$1F
 1052 D1:B190 FE 15 -  -      cp  a,AppVarObj
 1053 D1:B192 20 34 -  -      jr  nz,vatTraverse_skip
 1054 D1:B194 DD 17 F9 -      ld  de,(ix-7)   ;puts "page" byte in DEU
 1055 D1:B197 DD 5E FD -      ld  e,(ix-3)
 1056 D1:B19A DD 56 FC -      ld  d,(ix-4)
 1057 D1:B19D CD 98 1F 02     call _ChkInRam
 1058 D1:B1A1 EB -  -  -      ex  de,hl
 1059 D1:B1A2 30 08 -  -      jr  nc,+_
 1060 D1:B1A4 11 09 00 00     ld  de,9
 1061 D1:B1A8 19 -  -  -      add hl,de
 1062 D1:B1A9 5E -  -  -      ld  e,(hl)
 1063 D1:B1AA 19 -  -  -      add hl,de
 1064 D1:B1AB 23 -  -  -      inc hl
 1065 D1:B1AC 5E -  -  -  _:  ld  e,(hl)
 1066 D1:B1AD 23 -  -  -      inc hl
 1067 D1:B1AE 56 -  -  -      ld  d,(hl)
 1068 D1:B1AF 23 -  -  -      inc hl
 1069 D1:B1B0 EB -  -  -      ex  de,hl
 1070 D1:B1B1 B7 -  -  -      or  a,a
 1071 D1:B1B2 ED 42 -  -      sbc hl,bc   ;varsize-entrysize. If carry, entry cannot possibly be in var.
 1072 D1:B1B4 38 12 -  -      jr  c,vatTraverse_skip
 1073 D1:B1B6 ED 23 00 -      lea hl,iy+0
 1074 D1:B1B9 C5 -  -  -      push bc
 1075 D1:B1BA 1A -  -  -  _:      ld  a,(de)
 1076 D1:B1BB 13 -  -  -          inc de
 1077 D1:B1BC ED A1 -  -          cpi
 1078 D1:B1BE 20 07 -  -          jr  nz,vatTraverse_sigNoMatch
 1079 D1:B1C0 EA BA B1 D1         jp  pe,-_
 1080 D1:B1C4 C1 -  -  -      pop bc
 1081 D1:B1C5 B7 -  -  -      or  a,a
 1082 D1:B1C6 C9 -  -  -      ret         ;NC. DE = past the signature.
 1083 D1:B1C7 -  -  -  -  vatTraverse_sigNoMatch:
 1084 D1:B1C7 C1 -  -  -      pop bc
 1085 D1:B1C8 -  -  -  -  vatTraverse_continue:
 1086 D1:B1C8 -  -  -  -  vatTraverse_skip:
 1087 D1:B1C8 3E 07 -  -      ld  a,7
 1088 D1:B1CA 11 FF FF FF     ld  de,-1
 1089 D1:B1CE DD 86 FA -      add a,(ix-6)
 1090 D1:B1D1 ED 44 -  -      neg
 1091 D1:B1D3 5F -  -  -      ld  e,a
 1092 D1:B1D4 DD 19 -  -      add ix,de   ;because "sbc ix,de" isn't a thing. Boo.
 1093 D1:B1D6 18 A9 -  -      jr  vatTraverse_loop
 1094 D1:B1D8 -  -  -  -  
 1095 D1:B1D8 -  -  -  -  ;Copied from my Falldown2 project. I didn't want to have to
 1096 D1:B1D8 -  -  -  -  ;find yet another hardware reference for something I already did.
 1097 D1:B1D8 -  -  -  -  ;But I'll have to do it again anyway because this isn't exactly
 1098 D1:B1D8 -  -  -  -  ;what we're looking for. Here, we output the same sort of
 1099 D1:B1D8 -  -  -  -  ;game keys that I've used basically all my programming life.
 1100 D1:B1D8 -  -  -  -  ;Anyhoo. We'll be using the following:
 1101 D1:B1D8 -  -  -  -  ;kbitDown	equ 00h
 1102 D1:B1D8 -  -  -  -  ;kbitLeft	equ 01h
 1103 D1:B1D8 -  -  -  -  ;kbitRight	equ 02h
 1104 D1:B1D8 -  -  -  -  ;kbitUp		equ 03h
 1105 D1:B1D8 -  -  -  -  ;kbitYequ equ 04h
 1106 D1:B1D8 -  -  -  -  ;kbit2nd		equ 05h
 1107 D1:B1D8 -  -  -  -  ;kbitMode	equ 06h
 1108 D1:B1D8 -  -  -  -  ;kbitDel		equ 07h
 1109 D1:B1D8 -  -  -  -  ;You can find the other defines approximately where I found the stuff above.
 1110 D1:B1D8 -  -  -  -  
 1111 D1:B1D8 -  -  -  -  getkbd_adl:
 1112 D1:B1D8 DD 21 00 00 
              F5 -  -  -  	ld  ix,mpKeyMode
 1113 D1:B1DD ED 22 00 -  	lea hl,ix+0
 1114 D1:B1E0 36 02 -  -  	ld  (hl),keyModeScanOnce
 1115 D1:B1E2 AF -  -  -  	xor a
 1116 D1:B1E3 BE -  -  -  _:  cp  (hl)
 1117 D1:B1E4 20 FD -  -  	jr  nz,-_
 1118 D1:B1E6 DD 7E 12 -  	ld  a,(ix+kbdG1-mpKeyRange)
 1119 D1:B1E9 DD 6E 1E -  	ld  l,(ix+kbdG7-mpKeyRange)
 1120 D1:B1EC AD -  -  -  	xor L
 1121 D1:B1ED E6 F0 -  -  	and 11110000b	;mask out lower bits to let me shove dpad bits in
 1122 D1:B1EF AD -  -  -  	xor L
 1123 D1:B1F0 C9 -  -  -  	ret
 1124 D1:B1F1 -  -  -  -  
 1125 D1:B1F1 -  -  -  -  waituntilkeyrelease:
 1126 D1:B1F1 CD D8 B1 D1     call getkbd_adl
 1127 D1:B1F5 B7 -  -  -      or  a,a
 1128 D1:B1F6 20 F9 -  -      jr  nz,waituntilkeyrelease
 1129 D1:B1F8 C9 -  -  -  	ret
 1130 D1:B1F9 -  -  -  -  
 1131 D1:B1F9 -  -  -  -  waituntilnewkeypress:
 1132 D1:B1F9 CD F1 B1 D1     call waituntilkeyrelease
 1133 D1:B1FD CD D8 B1 D1 _:  call getkbd_adl
 1134 D1:B201 B7 -  -  -  	or  a,a
 1135 D1:B202 28 F9 -  -  	jr  z,-_
 1136 D1:B204 C9 -  -  -      ret
 1137 D1:B205 -  -  -  -  
 1138 D1:B205 -  -  -  -  #include "lcd.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    1 D1:B205 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 D1:B205 -  -  -  -  ;TI-84 Plus CE Include File
    2 D1:B205 -  -  -  -  
    3 D1:B205 -  -  -  -  ;Various Parts Contributed by
    4 D1:B205 -  -  -  -  ;- BrandonW
    5 D1:B205 -  -  -  -  ;- calc84
    6 D1:B205 -  -  -  -  ;- MateoConLechuga
    7 D1:B205 -  -  -  -  ;- Runer112
    8 D1:B205 -  -  -  -  ;- tr1p1ea
    9 D1:B205 -  -  -  -  ;- Kerm Martian
   10 D1:B205 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    2 D1:B205 -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
    5 D1:B205 -  -  -  -  ;
    6 D1:B205 -  -  -  -  ;
    7 D1:B205 -  -  -  -  ;
    8 D1:B205 -  -  -  -  
    9 D1:B205 -  -  -  -  ;Undefine this to speed up core process by losing debug state
   10 D1:B205 -  -  -  -  ;#define COREDEBUG
   11 D1:B205 -  -  -  -  
   12 D1:B205 -  -  -  -  DEBUG_PRINT_START_CYCLE .equ 0
   13 D1:B205 -  -  -  -  DEBUG_STEP_START_CYCLE  .equ 30000 ;26485
   14 D1:B205 -  -  -  -  
   15 D1:B205 -  -  -  -  
   16 D1:B205 -  -  -  -  
   17 D1:B205 -  -  -  -  FONTFGCOLOR .EQU $FF ;$29
   18 D1:B205 -  -  -  -  FONTBGCOLOR .EQU $00
   19 D1:B205 -  -  -  -  
   20 D1:B205 -  -  -  -  screenBuf1      .equ vRam
   21 D1:B205 -  -  -  -  screenBuf2      .equ vRam+(320*240)
   22 D1:B205 -  -  -  -  ;DO NOT MOVE THESE.
   23 D1:B205 -  -  -  -  xPos                .equ $D031F6
   24 D1:B205 -  -  -  -  yPos                .equ $D031F7
   25 D1:B205 -  -  -  -  slopPos             .equ $D031F8        ;extra byte here
   26 D1:B205 -  -  -  -  debugram            .equ $D031F9        ;FA and FB occupied too.
   27 D1:B205 -  -  -  -  save_spl            .equ $D031FC        ;FD and FE occupied too.
   28 D1:B205 -  -  -  -  save_mbase          .equ $D031FF        ;
   29 D1:B205 -  -  -  -  vram_palette        .equ $D03200        ;32 bytes. PPU palette RAM (bg, spr)
   30 D1:B205 -  -  -  -  core_memory_ix      .equ $D03280        ;IX range -128 to -64 already in use.
   31 D1:B205 -  -  -  -  scrap_mapping       .equ $D03300        ;256 bytes. maps to nowhere important.
   32 D1:B205 -  -  -  -  saferam1            .equ $D03400        ;1024 bytes available. Define later.
   33 D1:B205 -  -  -  -  main_ram            .equ $D03800        ;$0800 bytes of main system memory
   34 D1:B205 -  -  -  -  
   35 D1:B205 -  -  -  -  ZEROPAGE            .equ main_ram+(0*256)
   36 D1:B205 -  -  -  -  STACKBASE           .equ main_ram+(1*256)
   37 D1:B205 -  -  -  -  
   38 D1:B205 -  -  -  -  BASETABLE           .equ $D04000        ;variable size. 256*BASETABLE_STRIDE
   39 D1:B205 -  -  -  -  BASETABLE_STRIDE    .equ 12
   40 D1:B205 -  -  -  -  PAGETABLE_OFFSET    .equ 0
   41 D1:B205 -  -  -  -  PAGETABLE           .equ BASETABLE+PAGETABLE_OFFSET
   42 D1:B205 -  -  -  -  JUMPTABLE_OFFSET    .equ 4
   43 D1:B205 -  -  -  -  JUMPTABLE           .equ BASETABLE+JUMPTABLE_OFFSET
   44 D1:B205 -  -  -  -  USETABLE_OFFSET     .equ 8
   45 D1:B205 -  -  -  -  USETABLE            .equ BASETABLE+USETABLE_OFFSET
   46 D1:B205 -  -  -  -  
   47 D1:B205 -  -  -  -  NAMETABLE1          .equ BASETABLE+(512*BASETABLE_STRIDE)
   48 D1:B205 -  -  -  -  NAMETABLE2          .equ NAMETABLE1 + 1024  ;1024 BYTES
   49 D1:B205 -  -  -  -  OBJECT_ATTRIB_MEM   .equ NAMETABLE2 + 1024  ;256 BYTES
   50 D1:B205 -  -  -  -  
   51 D1:B205 -  -  -  -  ;
   52 D1:B205 -  -  -  -  ;saferam1 1024 bytes storage
   53 D1:B205 -  -  -  -  ;
   54 D1:B205 -  -  -  -  nametable00         .equ saferam1           ;4b Do not move these vars
   55 D1:B205 -  -  -  -  nametable01         .equ nametable00+4      ;4b
   56 D1:B205 -  -  -  -  nametable10         .equ nametable01+4      ;4b
   57 D1:B205 -  -  -  -  nametable11         .equ nametable10+4      ;4b
   58 D1:B205 -  -  -  -  nametable00_attrib  .equ nametable11+4      ;4b
   59 D1:B205 -  -  -  -  nametable01_attrib  .equ nametable00_attrib+4   ;4b
   60 D1:B205 -  -  -  -  nametable10_attrib  .equ nametable01_attrib+4   ;4b
   61 D1:B205 -  -  -  -  nametable11_attrib  .equ nametable10_attrib+4   ;4b
   62 D1:B205 -  -  -  -  chr_rom_tiles       .equ nametable11_attrib+4   ;4b
   63 D1:B205 -  -  -  -  chr_rom_sprites     .equ chr_rom_tiles+4    ;4b
   64 D1:B205 -  -  -  -  curScreenBuf        .equ chr_rom_sprites+4  ;4b
   65 D1:B205 -  -  -  -  linestart           .equ curScreenBuf+3     ;1b
   66 D1:B205 -  -  -  -  chr_rom_curbank     .equ linestart+1        ;3b Base used for PPU stuff.
   67 D1:B205 -  -  -  -  inputNumFiles       .equ chr_rom_curbank+3  ;1b
   68 D1:B205 -  -  -  -  basefile_sig        .equ inputNumFiles+1    ;3b pointer to 16b hash
   69 D1:B205 -  -  -  -  missing_files       .equ basefile_sig+3     ;1b
   70 D1:B205 -  -  -  -  total_rom_size      .equ missing_files+1    ;3b
   71 D1:B205 -  -  -  -  prg_rom_size        .equ total_rom_size+3   ;3b
   72 D1:B205 -  -  -  -  chr_rom_size        .equ prg_rom_size+3     ;3b
   73 D1:B205 -  -  -  -  submapper           .equ chr_rom_size+3     ;1b. iNES2 thing. Not often used.
   74 D1:B205 -  -  -  -  ines_flag_6         .equ submapper+1        ;1b. Flags that a mapper may need.
   75 D1:B205 -  -  -  -  mapper_id           .equ ines_flag_6+1      ;3b. Convenience load for 12 bits
   76 D1:B205 -  -  -  -  mapper_adr_base     .equ mapper_id+1        ;3b. Used to load mapper
   77 D1:B205 -  -  -  -  trainer_base        .equ mapper_adr_base+3  ;3b. If exist, starts here
   78 D1:B205 -  -  -  -  prg_rom_base        .equ mapper_adr_base+3  ;3b. Adjusted in case of trainer.
   79 D1:B205 -  -  -  -  chr_rom_base        .equ prg_rom_base+3     ;3b. Located somewhere.
   80 D1:B205 -  -  -  -  chr_rom_base_file   .equ chr_rom_base+3     ;1b. Nonzero if not in first file.
   81 D1:B205 -  -  -  -  ppu_smc_gate        .equ chr_rom_base_file+1 ;3b write address to ungate PPU
   82 D1:B205 -  -  -  -  timings_base        .equ ppu_smc_gate+3    ;3b. Current pointer to timings
   83 D1:B205 -  -  -  -  
   84 D1:B205 -  -  -  -  SIZEOF_INTEGRITY_HASH    .equ 16
   85 D1:B205 -  -  -  -  MAXPRGROM_HINIB     .equ 1
   86 D1:B205 -  -  -  -  MAXCHRROM_HINIB     .equ 3
   87 D1:B205 -  -  -  -  NUMBER_OF_MAPPERS   .equ 1
   88 D1:B205 -  -  -  -  MAPPER_STRIDE       .equ 9
   89 D1:B205 -  -  -  -  
   90 D1:B205 -  -  -  -  MAXNUMFILES         .equ 1                  ;set to 32 later. that's like 1.5MB
   91 D1:B205 -  -  -  -  FILETABLE_STRIDE    .equ 8
   92 D1:B205 -  -  -  -  FILETABLE           .equ timings_base+3   ;(MAXNUMFILES*FILETABLE_STRIDE)b
   93 D1:B205 -  -  -  -  FILE_SIZE_OFFSET    .equ 0
   94 D1:B205 -  -  -  -  FILE_ADR_OFFSET     .equ 2
   95 D1:B205 -  -  -  -  FILE_SIG_ADR_OFFSET .equ 5
   96 D1:B205 -  -  -  -  
   97 D1:B205 -  -  -  -  int_table_len       .equ FILETABLE+((MAXNUMFILES+1)*FILETABLE_STRIDE)
   98 D1:B205 -  -  -  -  INT_TABLE           .equ int_table_len+1
   99 D1:B205 -  -  -  -  INT_TABLE_MAXLEN    .equ 8
  100 D1:B205 -  -  -  -  INT_TABLE_STRIDE    .equ 6
  101 D1:B205 -  -  -  -  INT_ADDR_OFFSET     .equ 0
  102 D1:B205 -  -  -  -  INT_CYCLE_OFFSET    .equ 3
  103 D1:B205 -  -  -  -  
  104 D1:B205 -  -  -  -  
  105 D1:B205 -  -  -  -  
  106 D1:B205 -  -  -  -  ;
  107 D1:B205 -  -  -  -  ;
  108 D1:B205 -  -  -  -  ;
  109 D1:B205 -  -  -  -  ;
  110 D1:B205 -  -  -  -  #define WREG_CONST %01010101
  111 D1:B205 -  -  -  -  
  112 D1:B205 -  -  -  -  ;PPU default locations. Some are not used
  113 D1:B205 -  -  -  -  #define DEBUGCONTROL ($40-$80)
  114 D1:B205 -  -  -  -  #define PPU_CTRL -32
  115 D1:B205 -  -  -  -  #define PPU_MASK -31
  116 D1:B205 -  -  -  -  #define PPU_STATUS -30
  117 D1:B205 -  -  -  -  #define PPU_OAMADDR -29
  118 D1:B205 -  -  -  -  #define PPU_OAMDATA -28
  119 D1:B205 -  -  -  -  #define PPU_SCROLL -27
  120 D1:B205 -  -  -  -  #define PPU_ADDR -26
  121 D1:B205 -  -  -  -  #define PPU_DATA -25
  122 D1:B205 -  -  -  -  ;PPU internal stuff
  123 D1:B205 -  -  -  -  #define PPU_SUBCYCLE -15    ;0, 1, or 2.
  124 D1:B205 -  -  -  -  #define PPU_V -14           ;USED TO STORE VRAM ADDRESS (PPU ADDRESS SPACE)
  125 D1:B205 -  -  -  -  #define PPU_W -12           ;INTERNAL W REGISTER FOR HIGH/LOW BYTE PORT WRITES
  126 D1:B205 -  -  -  -  #define PPU_FRAMECOUNT -11  ;USED FOR EVEN/ODD
  127 D1:B205 -  -  -  -  #define PPU_NAMETABLE_PTR -10   ;Pointer cache
  128 D1:B205 -  -  -  -  #define PPU_VCOUNT -7
  129 D1:B205 -  -  -  -  #define PPU_HCOUNT -6
  130 D1:B205 -  -  -  -  #define PPU_TCOUNT -5
  131 D1:B205 -  -  -  -  #define PPU_XSCROLL -4  ;Should be constructed from PPU_SCROLL
  132 D1:B205 -  -  -  -  #define PPU_YSCROLL -3  ;
  133 D1:B205 -  -  -  -  #define APU_KEYPAD -2   ;First to last: A,B,SE,ST,UP,DO,LE,RI. 01234567.
  134 D1:B205 -  -  -  -  #define APU_KEYLATCH -1
  135 D1:B205 -  -  -  -  ;core memory
  136 D1:B205 -  -  -  -  #define REGA 0
  137 D1:B205 -  -  -  -  #define REGX 1
  138 D1:B205 -  -  -  -  #define REGY 2
  139 D1:B205 -  -  -  -  #define REGSP 3
  140 D1:B205 -  -  -  -  #define REGSR 4
  141 D1:B205 -  -  -  -  #define REGPC 5
  142 D1:B205 -  -  -  -  #define CYCLES_REMAIN 8
  143 D1:B205 -  -  -  -  #define CYCLES_CURRENT 11
  144 D1:B205 -  -  -  -  #define CURRENT_OPCODES 14
  145 D1:B205 -  -  -  -  #define CORE_STACK_BASE 17
  146 D1:B205 -  -  -  -  #define CORE_ERROR_LEVEL 20
  147 D1:B205 -  -  -  -  #define SCRAP_COUNTER 21
  148 D1:B205 -  -  -  -  #define PORT_WRITE_TIMESTAMP 24
  149 D1:B205 -  -  -  -  #define TEMP_MEMORY 27
  150 D1:B205 -  -  -  -  #define NMI_TRIGGERED 30 
  151 D1:B205 -  -  -  -  #define PREV_INSTR 31
  152 D1:B205 -  -  -  -  ;flag IDs
  153 D1:B205 -  -  -  -  #define SF_NEG 7
  154 D1:B205 -  -  -  -  #define SF_OVER 6 
  155 D1:B205 -  -  -  -  #define SF_RESERVED 5 
  156 D1:B205 -  -  -  -  #define SF_BRK 4
  157 D1:B205 -  -  -  -  #define SF_DEC 3
  158 D1:B205 -  -  -  -  #define SF_INT 2
  159 D1:B205 -  -  -  -  #define SF_ZERO 1
  160 D1:B205 -  -  -  -  #define SF_CARRY 0
  161 D1:B205 -  -  -  -  
  162 D1:B205 -  -  -  -  #macro ADDCYC(X)
  163 D1:B205                 #if (x < 1)
  164 D1:B205                     nop
  165 D1:B205                 #elif (X = 1)
  166 D1:B205                     inc iy
  167 D1:B205                 #else
  168 D1:B205                     lea iy,iy+X
  169 D1:B205                 #endif
  170 D1:B205             #endmacro
  171 D1:B205 -  -  -  -  
  172 D1:B205 -  -  -  -  ;
  173 D1:B205 -  -  -  -  ;
  174 D1:B205 -  -  -  -  ;
  175 D1:B205 -  -  -  -  #endif
  176 D1:B205 -  -  -  -  .list
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    3 D1:B205 -  -  -  -  
    4 D1:B205 -  -  -  -  ;Function list:
    5 D1:B205 -  -  -  -  ; fastCopy - Swaps drawing buffer to display what is currently written there.
    6 D1:B205 -  -  -  -  ; startGfx - Configures LCD to run in graphx mode. UNSAFE TO RUN MORE THAN ONCE
    7 D1:B205 -  -  -  -  ; stopGfx - Restores LCD configuration to TI-OS default.
    8 D1:B205 -  -  -  -  ; configureScreen - Swaps screen configuration betwen current and stored.
    9 D1:B205 -  -  -  -  ; setDefaultPalette - Sets default (XLIBC) color palette.
   10 D1:B205 -  -  -  -  ; clearTextBuf - no inputs. Sets text buffer to all spaces.
   11 D1:B205 -  -  -  -  ; printTextBuf - no inputs. Mirrors buffer to screen.
   12 D1:B205 -  -  -  -  ; setLineStart - A=xpos. Set xPos and linestart
   13 D1:B205 -  -  -  -  ; setCurLine - A=ypos. Set yPos.
   14 D1:B205 -  -  -  -  ; newLine - no inputs. sets linestart = xPos, increments yPos
   15 D1:B205 -  -  -  -  ; newPage - no inputs. sets linestart = xPos, yPos = 0
   16 D1:B205 -  -  -  -  ; printString - HL=address to string. destroys all.
   17 D1:B205 -  -  -  -  ; printBigFont - A=ASCII char to print at xPos,yPos. Advances xPos by 1.
   18 D1:B205 -  -  -  -  ; printSmallNumPair - A=0-255 to print at xPos,Ypos. Advances xPos by 1.
   19 D1:B205 -  -  -  -  ; calculateScreenPtr - Converts xPos,yPos into HL= screen buffer address.
   20 D1:B205 -  -  -  -  ; calculateScreenPtrDE - Converts E=xPos,D=yPos into HL= screen buffer address.
   21 D1:B205 -  -  -  -  ;
   22 D1:B205 -  -  -  -  ;
   23 D1:B205 -  -  -  -  ;
   24 D1:B205 -  -  -  -  ;
   25 D1:B205 -  -  -  -  ;
   26 D1:B205 -  -  -  -  ;
   27 D1:B205 -  -  -  -  ;
   28 D1:B205 -  -  -  -  
   29 D1:B205 -  -  -  -  
   30 D1:B205 -  -  -  -  
   31 D1:B205 -  -  -  -  
   32 D1:B205 -  -  -  -  ;-----------------------------------------------------------------------------
   33 D1:B205 -  -  -  -  ;Screen hardware interface stuff
   34 D1:B205 -  -  -  -  
   35 D1:B205 -  -  -  -  ;It ought to be called "bufSwap" but I just can't. I won't.
   36 D1:B205 -  -  -  -  fastCopy:
   37 D1:B205 11 00 00 D4     ld  de,screenBuf1
   38 D1:B209 2A 10 00 E3     ld  hl,(mpLcdBase)
   39 D1:B20D 22 28 34 D0     ld  (curScreenBuf),hl
   40 D1:B211 B7 -  -  -      or  a,a
   41 D1:B212 ED 52 -  -      sbc hl,de
   42 D1:B214 EB -  -  -      ex  de,hl
   43 D1:B215 20 04 -  -      jr  nz,+_
   44 D1:B217 21 00 2C D5     ld  hl,screenBuf2
   45 D1:B21B 22 10 00 E3 _:  ld  (mpLcdBase),hl
   46 D1:B21F C9 -  -  -      ret
   47 D1:B220 -  -  -  -  
   48 D1:B220 -  -  -  -  stopGfx:
   49 D1:B220 CD 74 03 00     call _boot_ClearVRAM
   50 D1:B224 11 2D 09 00     ld  de,lcdNormalMode
   51 D1:B228 01 00 00 D4     ld  bc,screenBuf1
   52 D1:B22C 18 0C -  -      jr  configureScreen
   53 D1:B22E -  -  -  -  
   54 D1:B22E -  -  -  -  startGfx:
   55 D1:B22E CD 74 03 00     call _boot_ClearVRAM
   56 D1:B232 11 27 38 01     ld  de,lcdWatermark+lcdIntFront+lcdPwr+lcdBpp8 ;+lcdBgr
   57 D1:B236 01 00 00 D4     ld  bc,screenBuf1
   58 D1:B23A -  -  -  -  configureScreen:
   59 D1:B23A 21 10 00 E3     ld  hl,mpLcdBase
   60 D1:B23E ED 0F -  -      ld  (hl),bc
   61 D1:B240 2E 18 -  -      ld  L,lcdCtrl
   62 D1:B242 ED 1F -  -      ld  (hl),de
   63 D1:B244 2E 01 -  -      ld  L,lcdTiming0 + 1
   64 D1:B246 01 08 00 00     ld  bc,8
   65 D1:B24A 11 79 B2 D1     ld  de,screenSettings
   66 D1:B24E 1A -  -  -  _:  ld  a,(de)
   67 D1:B24F ED A0 -  -      ldi
   68 D1:B251 2B -  -  -      dec hl
   69 D1:B252 77 -  -  -      ld  (hl),a
   70 D1:B253 23 -  -  -      inc hl
   71 D1:B254 EA 4E B2 D1     jp  pe,-_
   72 D1:B258 21 00 2C D5     ld  hl,screenBuf2
   73 D1:B25C 22 28 34 D0     ld  (curScreenBuf),hl
   74 D1:B260 -  -  -  -  ;Also copied from graphx
   75 D1:B260 -  -  -  -  setDefaultPalette:
   76 D1:B260 11 00 02 E3 	ld	de,mpLcdPalette	    ; address of mmio palette
   77 D1:B264 43 -  -  -  	ld	b,e			        ; b = 0
   78 D1:B265 78 -  -  -  _:	ld	a,b
   79 D1:B266 0F -  -  -  	rrca
   80 D1:B267 A8 -  -  -  	xor	a,b
   81 D1:B268 E6 E0 -  -  	and	a,224
   82 D1:B26A A8 -  -  -  	xor	a,b
   83 D1:B26B 12 -  -  -  	ld	(de),a
   84 D1:B26C 13 -  -  -  	inc	de
   85 D1:B26D 78 -  -  -  	ld	a,b
   86 D1:B26E 17 -  -  -  	rla
   87 D1:B26F 17 -  -  -  	rla
   88 D1:B270 17 -  -  -  	rla
   89 D1:B271 78 -  -  -  	ld	a,b
   90 D1:B272 1F -  -  -  	rra
   91 D1:B273 12 -  -  -  	ld	(de),a
   92 D1:B274 13 -  -  -  	inc	de
   93 D1:B275 04 -  -  -  	inc	b
   94 D1:B276 20 ED -  -  	jr	nz,-_		    ; loop for 256 times to fill palette
   95 D1:B278 C9 -  -  -  	ret
   96 D1:B279 -  -  -  -  
   97 D1:B279 -  -  -  -  screenSettings:
   98 D1:B279 -  -  -  -  ;Copied from my old Falldown2 project, which was also copied from graphx.asm
   99 D1:B279 -  -  -  -  ;	.db	14 shl 2			; PPL shl 2
  100 D1:B279 07 -  -  -  	.db	7					; HSW
  101 D1:B27A 57 -  -  -  	.db	87					; HFP
  102 D1:B27B 3F -  -  -  	.db	63					; HBP
  103 D1:B27C 3F 01 -  -  	.dw	(0 >> 10)+319		; (VSW shl 10)+LPP
  104 D1:B27E B3 -  -  -  	.db	179					; VFP
  105 D1:B27F 00 -  -  -  	.db	0					; VBP
  106 D1:B280 00 -  -  -  	.db	(0 >> 6)+(0 >> 5)+0	; (ACB shl 6)+(CLKSEL shl 5)+PCD_LO
  107 D1:B281 -  -  -  -  ;  H = ((PPL+1)*16)+(HSW+1)+(HFP+1)+(HBP+1) = 240+8+88+64 = 400
  108 D1:B281 -  -  -  -  ;  V = (LPP+1)+(VSW+1)+VFP+VBP = 320+1+179+0 = 500
  109 D1:B281 -  -  -  -  ; CC = H*V*PCD*2 = 400*500*2*2 = 800000
  110 D1:B281 -  -  -  -  ; Hz = 48000000/CC = 60
  111 D1:B281 -  -  -  -  
  112 D1:B281 -  -  -  -  
  113 D1:B281 -  -  -  -  ;-----------------------------------------------------------------------------
  114 D1:B281 -  -  -  -  ; Text Rendering
  115 D1:B281 -  -  -  -  
  116 D1:B281 -  -  -  -  clearTextBuf:
  117 D1:B281 21 00 58 D0     ld  hl,NAMETABLE1
  118 D1:B285 11 01 58 D0     ld  de,NAMETABLE1+1
  119 D1:B289 01 FF 03 00     ld  bc,1023
  120 D1:B28D 36 20 -  -      ld  (hl),' '
  121 D1:B28F ED B0 -  -      ldir
  122 D1:B291 C9 -  -  -      ret
  123 D1:B292 -  -  -  -  
  124 D1:B292 -  -  -  -  printTextBuf:
  125 D1:B292 2A F6 31 D0     ld  hl,(xPos)
  126 D1:B296 22 C6 B2 D1     ld  (printTextBuf_smcPosRecovery),hl
  127 D1:B29A 21 00 58 D0     ld  hl,NAMETABLE1
  128 D1:B29E AF -  -  -      xor a,a
  129 D1:B29F 32 F7 31 D0     ld  (yPos),a
  130 D1:B2A3 0E 1E -  -      ld  c,30
  131 D1:B2A5 3E 08 -  -  _:  ld  a,8
  132 D1:B2A7 32 F6 31 D0     ld  (xPos),a
  133 D1:B2AB 06 20 -  -      ld  b,$20
  134 D1:B2AD 7E -  -  -  _:  ld  a,(hl)
  135 D1:B2AE 23 -  -  -      inc hl
  136 D1:B2AF C5 -  -  -      push bc
  137 D1:B2B0 E5 -  -  -          push hl
  138 D1:B2B1 CD 0F B3 D1             call printBigFont
  139 D1:B2B5 E1 -  -  -          pop hl
  140 D1:B2B6 C1 -  -  -      pop bc
  141 D1:B2B7 10 F4 -  -      djnz -_
  142 D1:B2B9 3A F7 31 D0     ld  a,(yPos)
  143 D1:B2BD 3C -  -  -      inc a
  144 D1:B2BE 32 F7 31 D0     ld  (yPos),a
  145 D1:B2C2 0D -  -  -      dec  c
  146 D1:B2C3 20 E0 -  -      jr  nz,--_
  147 D1:B2C5 -  -  -  -  printTextBuf_smcPosRecovery .equ $+1
  148 D1:B2C5 21 00 00 00     ld  hl,0
  149 D1:B2C9 22 F6 31 D0     ld  (xPos),hl
  150 D1:B2CD C9 -  -  -      ret
  151 D1:B2CE -  -  -  -  
  152 D1:B2CE -  -  -  -  ;A=column to start on
  153 D1:B2CE -  -  -  -  setLineStart:
  154 D1:B2CE 32 F6 31 D0     ld  (xPos),a
  155 D1:B2D2 32 2B 34 D0     ld  (linestart),a
  156 D1:B2D6 C9 -  -  -      ret
  157 D1:B2D7 -  -  -  -  
  158 D1:B2D7 -  -  -  -  ;A=row to start on
  159 D1:B2D7 -  -  -  -  setCurLine:
  160 D1:B2D7 32 F7 31 D0     ld  (yPos),a
  161 D1:B2DB C9 -  -  -      ret
  162 D1:B2DC -  -  -  -  
  163 D1:B2DC -  -  -  -  newPage:
  164 D1:B2DC 3E FF -  -      ld  a,$FF
  165 D1:B2DE 32 F7 31 D0     ld  (yPos),a
  166 D1:B2E2 -  -  -  -  newLine:
  167 D1:B2E2 3A 2B 34 D0     ld  a,(linestart)
  168 D1:B2E6 32 F6 31 D0     ld  (xPos),a
  169 D1:B2EA 3A F7 31 D0     ld  a,(yPos)
  170 D1:B2EE 3C -  -  -      inc a
  171 D1:B2EF FE 1E -  -      cp  30
  172 D1:B2F1 38 01 -  -      jr  c,+_
  173 D1:B2F3 AF -  -  -      xor a,a
  174 D1:B2F4 32 F7 31 D0 _:  ld  (yPos),a
  175 D1:B2F8 C9 -  -  -      ret
  176 D1:B2F9 -  -  -  -  
  177 D1:B2F9 -  -  -  -      
  178 D1:B2F9 -  -  -  -      
  179 D1:B2F9 -  -  -  -  
  180 D1:B2F9 -  -  -  -  ;HL=address to string
  181 D1:B2F9 -  -  -  -  printString:
  182 D1:B2F9 7E -  -  -      ld  a,(hl)
  183 D1:B2FA 23 -  -  -      inc hl
  184 D1:B2FB B7 -  -  -      or  a,a
  185 D1:B2FC C8 -  -  -      ret z
  186 D1:B2FD FE 0A -  -      cp  a,'\n'
  187 D1:B2FF 20 06 -  -      jr nz,+_
  188 D1:B301 CD E2 B2 D1     call newLine
  189 D1:B305 18 F2 -  -      jr  printString
  190 D1:B307 E5 -  -  -  _:  push hl
  191 D1:B308 CD 0F B3 D1         call printBigFont
  192 D1:B30C E1 -  -  -      pop hl
  193 D1:B30D 18 EA -  -      jr printString
  194 D1:B30F -  -  -  -  
  195 D1:B30F -  -  -  -  
  196 D1:B30F -  -  -  -  ;in: A=chrToPrint
  197 D1:B30F -  -  -  -  printBigFont:
  198 D1:B30F CD A4 B3 D1     call calculateScreenPtr
  199 D1:B313 EB -  -  -      ex  de,hl
  200 D1:B314 6F -  -  -      ld  L,a
  201 D1:B315 26 08 -  -      ld  H,8
  202 D1:B317 ED 6C -  -      mlt hl
  203 D1:B319 01 7E B3 D1     ld  bc,graphx_textdata
  204 D1:B31D 09 -  -  -      add hl,bc
  205 D1:B31E EB -  -  -      ex  de,hl
  206 D1:B31F 0E 08 -  -      ld  c,8
  207 D1:B321 06 08 -  -  _:  ld  b,8
  208 D1:B323 1A -  -  -      ld  a,(de)
  209 D1:B324 87 -  -  -  _:  add a,a
  210 D1:B325 -  -  -  -  fontBGColor_var .equ $+1
  211 D1:B325 36 00 -  -      ld  (hl),FONTBGCOLOR
  212 D1:B327 30 02 -  -      jr  nc,$+4
  213 D1:B329 -  -  -  -  fontFGColor_var .equ $+1
  214 D1:B329 36 FF -  -      ld  (hl),FONTFGCOLOR
  215 D1:B32B 23 -  -  -      inc hl
  216 D1:B32C 10 F6 -  -      djnz -_
  217 D1:B32E 79 -  -  -      ld  a,c
  218 D1:B32F 01 38 01 00     ld  bc,320-8
  219 D1:B333 09 -  -  -      add hl,bc
  220 D1:B334 4F -  -  -      ld  c,a
  221 D1:B335 13 -  -  -      inc de
  222 D1:B336 0D -  -  -      dec c
  223 D1:B337 20 E8 -  -      jr  nz,--_
  224 D1:B339 21 F6 31 D0     ld  hl,xPos
  225 D1:B33D 34 -  -  -      inc (hl)
  226 D1:B33E C9 -  -  -      ret
  227 D1:B33F -  -  -  -  
  228 D1:B33F -  -  -  -  ;A= 0-255 numeric value to display as hex
  229 D1:B33F -  -  -  -  printSmallNumPair:
  230 D1:B33F CD A4 B3 D1     call calculateScreenPtr
  231 D1:B343 F5 -  -  -      push af
  232 D1:B344 1F -  -  -          rra
  233 D1:B345 1F -  -  -          rra
  234 D1:B346 1F -  -  -          rra
  235 D1:B347 1F -  -  -          rra
  236 D1:B348 CD 57 B3 D1         call +_
  237 D1:B34C F1 -  -  -      pop af
  238 D1:B34D CD 57 B3 D1     call +_
  239 D1:B351 21 F6 31 D0     ld  hl,xPos
  240 D1:B355 34 -  -  -      inc (hl)
  241 D1:B356 C9 -  -  -      ret
  242 D1:B357 E6 0F -  -  _:  and a,$0F
  243 D1:B359 01 40 01 00     ld  bc,320
  244 D1:B35D 09 -  -  -      add hl,bc   ;drop height by one. These small chars are *short*
  245 D1:B35E EB -  -  -      ex  de,hl
  246 D1:B35F 6F -  -  -      ld  L,a
  247 D1:B360 26 03 -  -      ld  H,3
  248 D1:B362 ED 6C -  -      mlt hl
  249 D1:B364 01 7E B7 D1     ld  bc,SmallHexFont
  250 D1:B368 09 -  -  -      add hl,bc
  251 D1:B369 EB -  -  -      ex  de,hl
  252 D1:B36A 0E 03 -  -      ld  c,3
  253 D1:B36C 18 14 -  -      jr  printSmallNumPair_2ndHalf
  254 D1:B36E -  -  -  -  printSmallNumPair_1stHalf:
  255 D1:B36E 1A -  -  -      ld  a,(de)
  256 D1:B36F 06 04 -  -      ld  b,4
  257 D1:B371 87 -  -  -  _:  add a,a
  258 D1:B372 -  -  -  -  smallFontBGColor_var .equ $+1
  259 D1:B372 36 00 -  -      ld  (hl),FONTBGCOLOR
  260 D1:B374 30 02 -  -      jr  nc,$+4
  261 D1:B376 -  -  -  -  smallFontFGColor_var .equ $+1
  262 D1:B376 36 FF -  -      ld  (hl),FONTFGCOLOR
  263 D1:B378 23 -  -  -      inc hl
  264 D1:B379 10 F6 -  -      djnz -_
  265 D1:B37B 79 -  -  -      ld  a,c
  266 D1:B37C 01 3C 01 00     ld  bc,320-4
  267 D1:B380 09 -  -  -      add hl,bc
  268 D1:B381 4F -  -  -      ld  c,a
  269 D1:B382 -  -  -  -  printSmallNumPair_2ndHalf:
  270 D1:B382 1A -  -  -      ld  a,(de)
  271 D1:B383 07 -  -  -      rlca
  272 D1:B384 07 -  -  -      rlca
  273 D1:B385 07 -  -  -      rlca
  274 D1:B386 07 -  -  -      rlca
  275 D1:B387 06 04 -  -      ld  b,4
  276 D1:B389 87 -  -  -  _:  add a,a
  277 D1:B38A 36 00 -  -      ld  (hl),FONTBGCOLOR
  278 D1:B38C 30 02 -  -      jr  nc,$+4
  279 D1:B38E 36 FF -  -      ld  (hl),FONTFGCOLOR
  280 D1:B390 23 -  -  -      inc hl
  281 D1:B391 10 F6 -  -      djnz -_
  282 D1:B393 13 -  -  -      inc de
  283 D1:B394 79 -  -  -      ld  a,c
  284 D1:B395 01 3C 01 00     ld  bc,320-4
  285 D1:B399 09 -  -  -      add hl,bc
  286 D1:B39A 4F -  -  -      ld  c,a
  287 D1:B39B 0D -  -  -      dec c
  288 D1:B39C 20 D0 -  -      jr  nz,printSmallNumPair_1stHalf
  289 D1:B39E 01 84 F8 FF     ld  bc,-(320*(1+5))+4
  290 D1:B3A2 09 -  -  -      add hl,bc
  291 D1:B3A3 C9 -  -  -      ret
  292 D1:B3A4 -  -  -  -  
  293 D1:B3A4 -  -  -  -  calculateScreenPtr:
  294 D1:B3A4 -  -  -  -      ;xcoord: x * 8 
  295 D1:B3A4 -  -  -  -      ;ycoord: 320 * 8 * y
  296 D1:B3A4 -  -  -  -      ;coord: (8x)+320*8y -> 8(x+320y)
  297 D1:B3A4 ED 5B F6 31 
              D0 -  -  -      ld  de,(xPos)
  298 D1:B3A9 -  -  -  -  calculateScreenPtrDE:
  299 D1:B3A9 6A -  -  -      ld  L,d     ;yPos
  300 D1:B3AA 26 A0 -  -      ld  h,160
  301 D1:B3AC ED 6C -  -      mlt hl
  302 D1:B3AE 29 -  -  -      add hl,hl
  303 D1:B3AF 16 01 -  -      ld  d,1
  304 D1:B3B1 ED 5C -  -      mlt de      ;DE=E. Clears high bytes.
  305 D1:B3B3 19 -  -  -      add hl,de
  306 D1:B3B4 29 -  -  -      add hl,hl
  307 D1:B3B5 29 -  -  -      add hl,hl
  308 D1:B3B6 29 -  -  -      add hl,hl
  309 D1:B3B7 ED 5B 28 34 
              D0 -  -  -      ld  de,(curScreenBuf)
  310 D1:B3BC 19 -  -  -      add hl,de
  311 D1:B3BD C9 -  -  -      ret
  312 D1:B3BE -  -  -  -  
  313 D1:B3BE -  -  -  -  
  314 D1:B3BE -  -  -  -  
  315 D1:B3BE -  -  -  -  ;Example code, also ripped from the page below.
  316 D1:B3BE -  -  -  -  ; ld a,036h ; Flips the lcd horizontally, vertically, and swaps the b and r components
  317 D1:B3BE -  -  -  -  ; call spiCmd
  318 D1:B3BE -  -  -  -  ; ld a,0C0h
  319 D1:B3BE -  -  -  -  ; call spiParam
  320 D1:B3BE -  -  -  -  ;
  321 D1:B3BE -  -  -  -  ; ld a,002h ; Resetting the lcd on exit
  322 D1:B3BE -  -  -  -  ; call spiCmd
  323 D1:B3BE -  -  -  -  ; jp boot_InitializeHardware
  324 D1:B3BE -  -  -  -  
  325 D1:B3BE -  -  -  -  ;Copied shamelessly from:
  326 D1:B3BE -  -  -  -  ;https://wikiti.brandonw.net/index.php?title=84PCE:Ports:D000
  327 D1:B3BE -  -  -  -  ; Input: A = parameter
  328 D1:B3BE -  -  -  -  spiParam:
  329 D1:B3BE 37 -  -  -   scf ; First bit is set for data
  330 D1:B3BF 30 -  -  -   .db 030h ; jr nc,? ; skips over one byte
  331 D1:B3C0 -  -  -  -  ; Input: A = command
  332 D1:B3C0 -  -  -  -  spiCmd:
  333 D1:B3C0 B7 -  -  -   or a,a ; First bit is clear for commands
  334 D1:B3C1 21 18 08 F8  ld hl,0F80818h
  335 D1:B3C5 CD DB B3 D1  call spiWrite
  336 D1:B3C9 6C -  -  -   ld l,h
  337 D1:B3CA 36 01 -  -   ld (hl),001h
  338 D1:B3CC -  -  -  -  spiWait:
  339 D1:B3CC 2E 0D -  -   ld l,00Dh
  340 D1:B3CE -  -  -  -  spiWait1:
  341 D1:B3CE 7E -  -  -   ld a,(hl)
  342 D1:B3CF E6 F0 -  -   and a,0F0h
  343 D1:B3D1 20 FB -  -   jr nz,spiWait1
  344 D1:B3D3 2D -  -  -   dec l
  345 D1:B3D4 -  -  -  -  spiWait2:
  346 D1:B3D4 CB 56 -  -   bit 2,(hl)
  347 D1:B3D6 20 FC -  -   jr nz,spiWait2
  348 D1:B3D8 6C -  -  -   ld l,h
  349 D1:B3D9 77 -  -  -   ld (hl),a
  350 D1:B3DA C9 -  -  -   ret
  351 D1:B3DB -  -  -  -  spiWrite:
  352 D1:B3DB 06 03 -  -   ld b,3
  353 D1:B3DD -  -  -  -  spiWriteLoop:
  354 D1:B3DD 17 -  -  -   rla
  355 D1:B3DE 17 -  -  -   rla
  356 D1:B3DF 17 -  -  -   rla
  357 D1:B3E0 77 -  -  -   ld (hl),a ; send 3 bits
  358 D1:B3E1 10 FA -  -   djnz spiWriteLoop
  359 D1:B3E3 C9 -  -  -   ret
  360 D1:B3E4 -  -  -  -  
  361 D1:B3E4 -  -  -  -  ;256x224
  362 D1:B3E4 -  -  -  -  setSmolScreenMode:
  363 D1:B3E4 -  -  -  -      ;Set primecell window parameters, then set sitronix window params.
  364 D1:B3E4 -  -  -  -      ;In that order.
  365 D1:B3E4 21 34 03 0A     ld  hl,$0A0300|(13<<2)   ;6b:(PIX/16)-1. Default 14 (240). Need 224 -> 13.
  366 D1:B3E8 22 00 00 E3     ld  (mpLcdTiming0),hl
  367 D1:B3EC 21 FF 08 02     ld  hl,$020800|(255)     ;10b:PIX. Default 319 (230). Need 256 -> 255
  368 D1:B3F0 22 04 00 E3     ld  (mpLcdTiming1),hl
  369 D1:B3F4 -  -  -  -      ;Column address set
  370 D1:B3F4 3E 2A -  -      ld  a,$2A
  371 D1:B3F6 CD C0 B3 D1     call spiCmd
  372 D1:B3FA 3E 00 CD BE 
              B3 D1 3E 20 
              CD BE B3 D1     ld  a,$00   \ call spiParam \ ld  a,$20 \ call spiParam ;hi, then lo bytes
  373 D1:B406 3E 01 CD BE 
              B3 D1 3E 1F 
              CD BE B3 D1     ld  a,$01   \ call spiParam \ ld  a,$1F \ call spiParam ;hi, then lo bytes
  374 D1:B412 -  -  -  -      ;Row address set
  375 D1:B412 3E 2B -  -      ld  a,$2B
  376 D1:B414 CD C0 B3 D1     call spiCmd
  377 D1:B418 3E 00 CD BE 
              B3 D1 3E 08 
              CD BE B3 D1     ld  a,$00   \ call spiParam \ ld  a,$08 \ call spiParam ;hi, then lo bytes
  378 D1:B424 3E 00 CD BE 
              B3 D1 3E E7 
              CD BE B3 D1     ld  a,$00   \ call spiParam \ ld  a,$E7 \ call spiParam ;hi, then lo bytes
  379 D1:B430 C9 -  -  -      ret
  380 D1:B431 -  -  -  -  
  381 D1:B431 -  -  -  -  ;320x240
  382 D1:B431 -  -  -  -  setFullScreenMode:
  383 D1:B431 21 38 03 0A     ld  hl,$0A0338
  384 D1:B435 22 00 00 E3     ld  (mpLcdTiming0),hl
  385 D1:B439 21 3F 09 02     ld  hl,$02093F
  386 D1:B43D 22 04 00 E3     ld  (mpLcdTiming1),hl
  387 D1:B441 -  -  -  -      ;Column address set
  388 D1:B441 3E 2A -  -      ld  a,$2A
  389 D1:B443 CD C0 B3 D1     call spiCmd
  390 D1:B447 3E 00 CD BE 
              B3 D1 3E 00 
              CD BE B3 D1     ld  a,$00   \ call spiParam \ ld  a,$00 \ call spiParam ;hi, then lo bytes
  391 D1:B453 3E 01 CD BE 
              B3 D1 3E 3F 
              CD BE B3 D1     ld  a,$01   \ call spiParam \ ld  a,$3F \ call spiParam ;hi, then lo bytes
  392 D1:B45F -  -  -  -      ;Row address set
  393 D1:B45F 3E 2B -  -      ld  a,$2B
  394 D1:B461 CD C0 B3 D1     call spiCmd
  395 D1:B465 3E 00 CD BE 
              B3 D1 3E 00 
              CD BE B3 D1     ld  a,$00   \ call spiParam \ ld  a,$00 \ call spiParam ;hi, then lo bytes
  396 D1:B471 3E 00 CD BE 
              B3 D1 3E EF 
              CD BE B3 D1     ld  a,$00   \ call spiParam \ ld  a,$EF \ call spiParam ;hi, then lo bytes
  397 D1:B47D C9 -  -  -      ret 
  398 D1:B47E -  -  -  -  
  399 D1:B47E -  -  -  -  
  400 D1:B47E -  -  -  -  ;-----------------------------------------------------------------------------
  401 D1:B47E -  -  -  -  ; Data Section
  402 D1:B47E -  -  -  -  
  403 D1:B47E -  -  -  -  graphx_textdata		.EQU $-(8*' ')		;points to what would be start of ASCII
  404 D1:B47E 00 00 00 00 
              00 00 00 00 .db	$00,$00,$00,$00,$00,$00,$00,$00 ;
  405 D1:B486 C0 C0 C0 C0 
              C0 00 C0 00 .db	$C0,$C0,$C0,$C0,$C0,$00,$C0,$00 ; !
  406 D1:B48E D8 D8 D8 00 
              00 00 00 00 .db	$D8,$D8,$D8,$00,$00,$00,$00,$00 ; "
  407 D1:B496 6C 6C FE 6C 
              FE 6C 6C 00 .db	$6C,$6C,$FE,$6C,$FE,$6C,$6C,$00 ; #
  408 D1:B49E 18 7E C0 7C 
              06 FC 18 00 .db	$18,$7E,$C0,$7C,$06,$FC,$18,$00 ; $
  409 D1:B4A6 00 C6 CC 18 
              30 66 C6 00 .db	$00,$C6,$CC,$18,$30,$66,$C6,$00 ; %
  410 D1:B4AE 38 6C 38 76 
              DC CC 76 00 .db	$38,$6C,$38,$76,$DC,$CC,$76,$00 ; &
  411 D1:B4B6 30 30 60 00 
              00 00 00 00 .db	$30,$30,$60,$00,$00,$00,$00,$00 ; '
  412 D1:B4BE 30 60 C0 C0 
              C0 60 30 00 .db	$30,$60,$C0,$C0,$C0,$60,$30,$00 ; (
  413 D1:B4C6 C0 60 30 30 
              30 60 C0 00 .db	$C0,$60,$30,$30,$30,$60,$C0,$00 ; )
  414 D1:B4CE 00 66 3C FF 
              3C 66 00 00 .db	$00,$66,$3C,$FF,$3C,$66,$00,$00 ; *
  415 D1:B4D6 00 30 30 FC 
              FC 30 30 00 .db	$00,$30,$30,$FC,$FC,$30,$30,$00 ; +
  416 D1:B4DE 00 00 00 00 
              00 60 60 C0 .db	$00,$00,$00,$00,$00,$60,$60,$C0 ; ,
  417 D1:B4E6 00 00 00 FC 
              00 00 00 00 .db	$00,$00,$00,$FC,$00,$00,$00,$00 ; -
  418 D1:B4EE 00 00 00 00 
              00 C0 C0 00 .db	$00,$00,$00,$00,$00,$C0,$C0,$00 ; .
  419 D1:B4F6 06 0C 18 30 
              60 C0 80 00 .db	$06,$0C,$18,$30,$60,$C0,$80,$00 ; /
  420 D1:B4FE 7C CE DE F6 
              E6 C6 7C 00 .db	$7C,$CE,$DE,$F6,$E6,$C6,$7C,$00 ; 0
  421 D1:B506 30 70 30 30 
              30 30 FC 00 .db	$30,$70,$30,$30,$30,$30,$FC,$00 ; 1
  422 D1:B50E 7C C6 06 7C 
              C0 C0 FE 00 .db	$7C,$C6,$06,$7C,$C0,$C0,$FE,$00 ; 2
  423 D1:B516 FC 06 06 3C 
              06 06 FC 00 .db	$FC,$06,$06,$3C,$06,$06,$FC,$00 ; 3
  424 D1:B51E 0C CC CC CC 
              FE 0C 0C 00 .db	$0C,$CC,$CC,$CC,$FE,$0C,$0C,$00 ; 4
  425 D1:B526 FE C0 FC 06 
              06 C6 7C 00 .db	$FE,$C0,$FC,$06,$06,$C6,$7C,$00 ; 5
  426 D1:B52E 7C C0 C0 FC 
              C6 C6 7C 00 .db	$7C,$C0,$C0,$FC,$C6,$C6,$7C,$00 ; 6
  427 D1:B536 FE 06 06 0C 
              18 30 30 00 .db	$FE,$06,$06,$0C,$18,$30,$30,$00 ; 7
  428 D1:B53E 7C C6 C6 7C 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$7C,$C6,$C6,$7C,$00 ; 8
  429 D1:B546 7C C6 C6 7E 
              06 06 7C 00 .db	$7C,$C6,$C6,$7E,$06,$06,$7C,$00 ; 9
  430 D1:B54E 00 C0 C0 00 
              00 C0 C0 00 .db	$00,$C0,$C0,$00,$00,$C0,$C0,$00 ; :
  431 D1:B556 00 60 60 00 
              00 60 60 C0 .db	$00,$60,$60,$00,$00,$60,$60,$C0 ; ;
  432 D1:B55E 18 30 60 C0 
              60 30 18 00 .db	$18,$30,$60,$C0,$60,$30,$18,$00 ; <
  433 D1:B566 00 00 FC 00 
              FC 00 00 00 .db	$00,$00,$FC,$00,$FC,$00,$00,$00 ; =
  434 D1:B56E C0 60 30 18 
              30 60 C0 00 .db	$C0,$60,$30,$18,$30,$60,$C0,$00 ; >
  435 D1:B576 78 CC 18 30 
              30 00 30 00 .db	$78,$CC,$18,$30,$30,$00,$30,$00 ; ?
  436 D1:B57E 7C C6 DE DE 
              DE C0 7E 00 .db	$7C,$C6,$DE,$DE,$DE,$C0,$7E,$00 ; @
  437 D1:B586 38 6C C6 C6 
              FE C6 C6 00 .db	$38,$6C,$C6,$C6,$FE,$C6,$C6,$00 ; A
  438 D1:B58E FC C6 C6 FC 
              C6 C6 FC 00 .db	$FC,$C6,$C6,$FC,$C6,$C6,$FC,$00 ; B
  439 D1:B596 7C C6 C0 C0 
              C0 C6 7C 00 .db	$7C,$C6,$C0,$C0,$C0,$C6,$7C,$00 ; C
  440 D1:B59E F8 CC C6 C6 
              C6 CC F8 00 .db	$F8,$CC,$C6,$C6,$C6,$CC,$F8,$00 ; D
  441 D1:B5A6 FE C0 C0 F8 
              C0 C0 FE 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$FE,$00 ; E
  442 D1:B5AE FE C0 C0 F8 
              C0 C0 C0 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$C0,$00 ; F
  443 D1:B5B6 7C C6 C0 C0 
              CE C6 7C 00 .db	$7C,$C6,$C0,$C0,$CE,$C6,$7C,$00 ; G
  444 D1:B5BE C6 C6 C6 FE 
              C6 C6 C6 00 .db	$C6,$C6,$C6,$FE,$C6,$C6,$C6,$00 ; H
  445 D1:B5C6 7E 18 18 18 
              18 18 7E 00 .db	$7E,$18,$18,$18,$18,$18,$7E,$00 ; I
  446 D1:B5CE 06 06 06 06 
              06 C6 7C 00 .db	$06,$06,$06,$06,$06,$C6,$7C,$00 ; J
  447 D1:B5D6 C6 CC D8 F0 
              D8 CC C6 00 .db	$C6,$CC,$D8,$F0,$D8,$CC,$C6,$00 ; K
  448 D1:B5DE C0 C0 C0 C0 
              C0 C0 FE 00 .db	$C0,$C0,$C0,$C0,$C0,$C0,$FE,$00 ; L
  449 D1:B5E6 C6 EE FE FE 
              D6 C6 C6 00 .db	$C6,$EE,$FE,$FE,$D6,$C6,$C6,$00 ; M
  450 D1:B5EE C6 E6 F6 DE 
              CE C6 C6 00 .db	$C6,$E6,$F6,$DE,$CE,$C6,$C6,$00 ; N
  451 D1:B5F6 7C C6 C6 C6 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$C6,$C6,$C6,$7C,$00 ; O
  452 D1:B5FE FC C6 C6 FC 
              C0 C0 C0 00 .db	$FC,$C6,$C6,$FC,$C0,$C0,$C0,$00 ; P
  453 D1:B606 7C C6 C6 C6 
              D6 DE 7C 06 .db	$7C,$C6,$C6,$C6,$D6,$DE,$7C,$06 ; Q
  454 D1:B60E FC C6 C6 FC 
              D8 CC C6 00 .db	$FC,$C6,$C6,$FC,$D8,$CC,$C6,$00 ; R
  455 D1:B616 7C C6 C0 7C 
              06 C6 7C 00 .db	$7C,$C6,$C0,$7C,$06,$C6,$7C,$00 ; S
  456 D1:B61E FF 18 18 18 
              18 18 18 00 .db	$FF,$18,$18,$18,$18,$18,$18,$00 ; T
  457 D1:B626 C6 C6 C6 C6 
              C6 C6 FE 00 .db	$C6,$C6,$C6,$C6,$C6,$C6,$FE,$00 ; U
  458 D1:B62E C6 C6 C6 C6 
              C6 7C 38 00 .db	$C6,$C6,$C6,$C6,$C6,$7C,$38,$00 ; V
  459 D1:B636 C6 C6 C6 C6 
              D6 FE 6C 00 .db	$C6,$C6,$C6,$C6,$D6,$FE,$6C,$00 ; W
  460 D1:B63E C6 C6 6C 38 
              6C C6 C6 00 .db	$C6,$C6,$6C,$38,$6C,$C6,$C6,$00 ; X
  461 D1:B646 C6 C6 C6 7C 
              18 30 E0 00 .db	$C6,$C6,$C6,$7C,$18,$30,$E0,$00 ; Y
  462 D1:B64E FE 06 0C 18 
              30 60 FE 00 .db	$FE,$06,$0C,$18,$30,$60,$FE,$00 ; Z
  463 D1:B656 F0 C0 C0 C0 
              C0 C0 F0 00 .db	$F0,$C0,$C0,$C0,$C0,$C0,$F0,$00 ; [
  464 D1:B65E C0 60 30 18 
              0C 06 02 00 .db	$C0,$60,$30,$18,$0C,$06,$02,$00 ; \
  465 D1:B666 F0 30 30 30 
              30 30 F0 00 .db	$F0,$30,$30,$30,$30,$30,$F0,$00 ; ]
  466 D1:B66E 10 38 6C C6 
              00 00 00 00 .db	$10,$38,$6C,$C6,$00,$00,$00,$00 ; ^
  467 D1:B676 00 00 00 00 
              00 00 00 FF .db	$00,$00,$00,$00,$00,$00,$00,$FF ; _
  468 D1:B67E C0 C0 60 00 
              00 00 00 00 .db	$C0,$C0,$60,$00,$00,$00,$00,$00 ; `
  469 D1:B686 00 00 7C 06 
              7E C6 7E 00 .db	$00,$00,$7C,$06,$7E,$C6,$7E,$00 ; a
  470 D1:B68E C0 C0 C0 FC 
              C6 C6 FC 00 .db	$C0,$C0,$C0,$FC,$C6,$C6,$FC,$00 ; b
  471 D1:B696 00 00 7C C6 
              C0 C6 7C 00 .db	$00,$00,$7C,$C6,$C0,$C6,$7C,$00 ; c
  472 D1:B69E 06 06 06 7E 
              C6 C6 7E 00 .db	$06,$06,$06,$7E,$C6,$C6,$7E,$00 ; d
  473 D1:B6A6 00 00 7C C6 
              FE C0 7C 00 .db	$00,$00,$7C,$C6,$FE,$C0,$7C,$00 ; e
  474 D1:B6AE 1C 36 30 78 
              30 30 78 00 .db	$1C,$36,$30,$78,$30,$30,$78,$00 ; f
  475 D1:B6B6 00 00 7E C6 
              C6 7E 06 FC .db	$00,$00,$7E,$C6,$C6,$7E,$06,$FC ; g
  476 D1:B6BE C0 C0 FC C6 
              C6 C6 C6 00 .db	$C0,$C0,$FC,$C6,$C6,$C6,$C6,$00 ; h
  477 D1:B6C6 18 00 38 18 
              18 18 3C 00 .db	$18,$00,$38,$18,$18,$18,$3C,$00 ; i
  478 D1:B6CE 06 00 06 06 
              06 06 C6 7C .db	$06,$00,$06,$06,$06,$06,$C6,$7C ; j
  479 D1:B6D6 C0 C0 CC D8 
              F8 CC C6 00 .db	$C0,$C0,$CC,$D8,$F8,$CC,$C6,$00 ; k
  480 D1:B6DE 38 18 18 18 
              18 18 3C 00 .db	$38,$18,$18,$18,$18,$18,$3C,$00 ; l
  481 D1:B6E6 00 00 CC FE 
              FE D6 D6 00 .db	$00,$00,$CC,$FE,$FE,$D6,$D6,$00 ; m
  482 D1:B6EE 00 00 FC C6 
              C6 C6 C6 00 .db	$00,$00,$FC,$C6,$C6,$C6,$C6,$00 ; n
  483 D1:B6F6 00 00 7C C6 
              C6 C6 7C 00 .db	$00,$00,$7C,$C6,$C6,$C6,$7C,$00 ; o
  484 D1:B6FE 00 00 FC C6 
              C6 FC C0 C0 .db	$00,$00,$FC,$C6,$C6,$FC,$C0,$C0 ; p
  485 D1:B706 00 00 7E C6 
              C6 7E 06 06 .db	$00,$00,$7E,$C6,$C6,$7E,$06,$06 ; q
  486 D1:B70E 00 00 FC C6 
              C0 C0 C0 00 .db	$00,$00,$FC,$C6,$C0,$C0,$C0,$00 ; r
  487 D1:B716 00 00 7E C0 
              7C 06 FC 00 .db	$00,$00,$7E,$C0,$7C,$06,$FC,$00 ; s
  488 D1:B71E 30 30 FC 30 
              30 30 1C 00 .db	$30,$30,$FC,$30,$30,$30,$1C,$00 ; t
  489 D1:B726 00 00 C6 C6 
              C6 C6 7E 00 .db	$00,$00,$C6,$C6,$C6,$C6,$7E,$00 ; u
  490 D1:B72E 00 00 C6 C6 
              C6 7C 38 00 .db	$00,$00,$C6,$C6,$C6,$7C,$38,$00 ; v
  491 D1:B736 00 00 C6 C6 
              D6 FE 6C 00 .db	$00,$00,$C6,$C6,$D6,$FE,$6C,$00 ; w
  492 D1:B73E 00 00 C6 6C 
              38 6C C6 00 .db	$00,$00,$C6,$6C,$38,$6C,$C6,$00 ; x
  493 D1:B746 00 00 C6 C6 
              C6 7E 06 FC .db	$00,$00,$C6,$C6,$C6,$7E,$06,$FC ; y
  494 D1:B74E 00 00 FE 0C 
              38 60 FE 00 .db	$00,$00,$FE,$0C,$38,$60,$FE,$00 ; z
  495 D1:B756 1C 30 30 E0 
              30 30 1C 00 .db	$1C,$30,$30,$E0,$30,$30,$1C,$00 ; {
  496 D1:B75E C0 C0 C0 00 
              C0 C0 C0 00 .db	$C0,$C0,$C0,$00,$C0,$C0,$C0,$00 ; |
  497 D1:B766 E0 30 30 1C 
              30 30 E0 00 .db	$E0,$30,$30,$1C,$30,$30,$E0,$00 ; }
  498 D1:B76E 76 DC 00 00 
              00 00 00 00 .db	$76,$DC,$00,$00,$00,$00,$00,$00 ; ~
  499 D1:B776 00 10 38 6C 
              C6 C6 FE 00 .db	$00,$10,$38,$6C,$C6,$C6,$FE,$00 ; △
  500 D1:B77E -  -  -  -  
  501 D1:B77E -  -  -  -  ;Copied from the Escheron: Twilight over Ragnoth project
  502 D1:B77E -  -  -  -  ;whose format was copied from a (then-)authorized source
  503 D1:B77E -  -  -  -  ;for DoorsCS (I think? The one for the 83+) by "Kerm Martian".
  504 D1:B77E -  -  -  -  SmallHexFont:
  505 D1:B77E 4E AA AE -  .db $4E,$AA,$AE				;zero
  506 D1:B781 44 C4 4E -  .db $44,$C4,$4E				;one
  507 D1:B784 4C 24 8E -  .db $4C,$24,$8E				;two
  508 D1:B787 4C 24 2C -  .db $4C,$24,$2C				;three
  509 D1:B78A 48 AE 22 -  .db $48,$AE,$22				;four
  510 D1:B78D 4E 8C 2C -  .db $4E,$8C,$2C				;five
  511 D1:B790 46 8E AE -  .db $46,$8E,$AE				;six
  512 D1:B793 4E 24 88 -  .db $4E,$24,$88				;seven
  513 D1:B796 4E AE AE -  .db $4E,$AE,$AE				;eight
  514 D1:B799 4E AE 2C -  .db $4E,$AE,$2C				;nine
  515 D1:B79C 44 AE AA -  .db $44,$AE,$AA				;A
  516 D1:B79F 4C AC AC -  .db $4C,$AC,$AC				;B
  517 D1:B7A2 46 88 86 -  .db $46,$88,$86				;C
  518 D1:B7A5 4C AA AC -  .db $4C,$AA,$AC				;D
  519 D1:B7A8 4E 8C 8E -  .db $4E,$8C,$8E				;E
  520 D1:B7AB 4E 8C 88 -  .db $4E,$8C,$88				;F
  521 D1:B7AE -  -  -  -  
  522 D1:B7AE -  -  -  -  
  523 D1:B7AE -  -  -  -  
Listing for file "main.z80"
 1139 D1:B7AE -  -  -  -  #include "coreint.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\coreint.z80"
    1 D1:B7AE -  -  -  -  ; Code to handle interrup servicer. Note: This hinges on 
    2 D1:B7AE -  -  -  -  ; PPU timing, so some of its initilization code will end up here too.
    3 D1:B7AE -  -  -  -  ;
    4 D1:B7AE -  -  -  -  
    5 D1:B7AE -  -  -  -  
    6 D1:B7AE -  -  -  -  ;This routine is called after the end of every insert/push/pop operation
    7 D1:B7AE -  -  -  -  int6502_updateIntCounter:
    8 D1:B7AE 21 60 34 D0     ld  hl,int_table_len
    9 D1:B7B2 7E -  -  -      ld  a,(hl)
   10 D1:B7B3 B7 -  -  -      or  a,a
   11 D1:B7B4 C8 -  -  -      ret z
   12 D1:B7B5 23 -  -  -      inc hl  ;advance to first pointer
   13 D1:B7B6 23 -  -  -      inc hl
   14 D1:B7B7 23 -  -  -      inc hl
   15 D1:B7B8 23 -  -  -      inc hl  ;advanced to first time
   16 D1:B7B9 ED 27 -  -      ld  hl,(hl)
   17 D1:B7BB -  -  -  -      ;neg hl
   18 D1:B7BB DD 2F 1B -      ld  (ix+TEMP_MEMORY),hl
   19 D1:B7BE DD 7E 1D -      ld  a,(ix+TEMP_MEMORY+2)
   20 D1:B7C1 2F -  -  -      cpl
   21 D1:B7C2 DD 77 1D -      ld  (ix+TEMP_MEMORY+2),a
   22 D1:B7C5 DD 27 1B -      ld  hl,(ix+TEMP_MEMORY)
   23 D1:B7C8 7D -  -  -      ld  a,l
   24 D1:B7C9 2F -  -  -      cpl
   25 D1:B7CA 6F -  -  -      ld  l,a
   26 D1:B7CB 7C -  -  -      ld  a,h
   27 D1:B7CC 2F -  -  -      cpl
   28 D1:B7CD 67 -  -  -      ld  h,a
   29 D1:B7CE 23 -  -  -      inc hl
   30 D1:B7CF -  -  -  -      ;load to clock counter in "core.z80"
   31 D1:B7CF 22 55 B9 D1     ld  (i6502_interrupt_timer),hl
   32 D1:B7D3 C9 -  -  -      ret
   33 D1:B7D4 -  -  -  -  
   34 D1:B7D4 -  -  -  -  int6502_init:
   35 D1:B7D4 AF -  -  -      xor a,a
   36 D1:B7D5 32 60 34 D0     ld  (int_table_len),a
   37 D1:B7D9 C9 -  -  -      ret
   38 D1:B7DA -  -  -  -  
   39 D1:B7DA -  -  -  -  
   40 D1:B7DA -  -  -  -  ;Only call this inside the NMI handler, since that is the routine that adjusts
   41 D1:B7DA -  -  -  -  ;the cycle counter downard. All entries that remain on the table will by
   42 D1:B7DA -  -  -  -  ;have a higher count than the NMI. The table's probably empty, though.
   43 D1:B7DA -  -  -  -  ;BC=timeToAdjust IX=thing
   44 D1:B7DA -  -  -  -  int6502_adjustTimings:
   45 D1:B7DA DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
   46 D1:B7DF DD 7E FF -      ld  a,(ix-1)
   47 D1:B7E2 B7 -  -  -      or  a,a
   48 D1:B7E3 20 0F -  -      jr  nz,int6502_adjustTimings_noAdjust
   49 D1:B7E5 -  -  -  -  int6502_adjustTimings_loop:
   50 D1:B7E5 DD 27 03 -      ld  hl,(ix+INT_CYCLE_OFFSET)
   51 D1:B7E8 B7 -  -  -      or  a,a
   52 D1:B7E9 ED 42 -  -      sbc hl,bc
   53 D1:B7EB DD 2F 03 -      ld  (ix+INT_CYCLE_OFFSET),hl
   54 D1:B7EE ED 32 06 -      lea ix,ix+INT_TABLE_STRIDE
   55 D1:B7F1 3D -  -  -      dec a
   56 D1:B7F2 20 F1 -  -      jr  nz,int6502_adjustTimings_loop
   57 D1:B7F4 -  -  -  -  int6502_adjustTimings_noAdjust:
   58 D1:B7F4 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   59 D1:B7F9 C9 -  -  -      ret
   60 D1:B7FA -  -  -  -  
   61 D1:B7FA -  -  -  -  ;DE=ISRToPush, BC=CallWhenThisClockIsPassed
   62 D1:B7FA -  -  -  -  ;This routine is called in the ISR handler to both acknowledge the consumption
   63 D1:B7FA -  -  -  -  ;of its turn at the ISR, and to (potentially) push another entry to the stack.
   64 D1:B7FA -  -  -  -  ;This does not affect ths size of a table since this is a combined
   65 D1:B7FA -  -  -  -  ;pop-and-insert operation
   66 D1:B7FA -  -  -  -  int6502_pushISRAfterPop:
   67 D1:B7FA DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
   68 D1:B7FF DD 7E FF -      ld  a,(ix-1)        ;length of the table
   69 D1:B802 B7 -  -  -      or  a,a
   70 D1:B803 20 13 -  -      jr  nz,int6502_pushISRAfterPop_keepChecking
   71 D1:B805 -  -  -  -  int6502_pushISRAfterPop_writeFirstEntry:
   72 D1:B805 DD 36 FF 01     ld  (ix-1),1
   73 D1:B809 -  -  -  -  int6502_pushISRAfterPop_writeEntry:
   74 D1:B809 DD 1F 00 -      ld  (ix+0),de
   75 D1:B80C DD 0F 03 -      ld  (ix+3),bc
   76 D1:B80F DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   77 D1:B814 C3 AE B7 D1     jp  int6502_updateIntCounter
   78 D1:B818 -  -  -  -  int6502_pushISRAfterPop_keepChecking:
   79 D1:B818 3D -  -  -      dec a
   80 D1:B819 28 EA -  -      jr  z,int6502_pushISRAfterPop_writeFirstEntry
   81 D1:B81B -  -  -  -      ;Loop steps:
   82 D1:B81B -  -  -  -      ;If not loopCounter or BC < ix[0].T:
   83 D1:B81B -  -  -  -      ;   ix[-1] = DE,BC
   84 D1:B81B -  -  -  -      ;   STOP.
   85 D1:B81B -  -  -  -      ;Else:
   86 D1:B81B -  -  -  -      ;   ix[-1] = ix[0]
   87 D1:B81B -  -  -  -      ;   ix += STRIDE
   88 D1:B81B -  -  -  -      ;   --loopCounter;
   89 D1:B81B -  -  -  -  int6502_pushISRAfterPop_loop:
   90 D1:B81B ED 32 06 -      lea ix,ix+INT_TABLE_STRIDE
   91 D1:B81E B7 -  -  -      or  a,a
   92 D1:B81F 28 E8 -  -      jr  z,int6502_pushISRAfterPop_writeEntry
   93 D1:B821 DD 27 03 -      ld  hl,(ix+INT_CYCLE_OFFSET)
   94 D1:B824 ED 42 -  -      sbc hl,bc   ;C if ix[0]<BC
   95 D1:B826 38 E1 -  -      jr  c,int6502_pushISRAfterPop_writeEntry
   96 D1:B828 DD 27 00 -      ld  hl,(ix+INT_ADDR_OFFSET)
   97 D1:B82B DD 2F FA -      ld  (ix+INT_ADDR_OFFSET-INT_TABLE_STRIDE),hl
   98 D1:B82E DD 27 03 -      ld  hl,(ix+INT_CYCLE_OFFSET)
   99 D1:B831 DD 2F FD -      ld  (ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE),hl
  100 D1:B834 3D -  -  -      dec a
  101 D1:B835 18 E4 -  -      jr int6502_pushISRAfterPop_loop
  102 D1:B837 -  -  -  -      
  103 D1:B837 -  -  -  -  ;DE=ISRToPush, BC=CallWhenThisClockIsPassed
  104 D1:B837 -  -  -  -  ;This actually adds an entry to the stack.
  105 D1:B837 -  -  -  -  int6502_insertISA:
  106 D1:B837 DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
  107 D1:B83C DD 7E FF -      ld  a,(ix-1)
  108 D1:B83F B7 -  -  -      or  a,a
  109 D1:B840 28 C3 -  -      jr  z,int6502_pushISRAfterPop_writeFirstEntry
  110 D1:B842 FE 08 -  -      cp  a,INT_TABLE_MAXLEN
  111 D1:B844 C8 -  -  -      ret z       ;do not attempt to insert if table is maxed out
  112 D1:B845 C5 -  -  -      push bc
  113 D1:B846 47 -  -  -          ld  b,a
  114 D1:B847 0E 06 -  -          ld  c,INT_TABLE_STRIDE
  115 D1:B849 ED 4C -  -          mlt bc
  116 D1:B84B DD 09 -  -          add ix,bc   ;at end of table
  117 D1:B84D C1 -  -  -      pop bc
  118 D1:B84E -  -  -  -      ;Loop details. IX points at entry after last:
  119 D1:B84E -  -  -  -      ;if not loopCtr or ix[-1].T < BC:
  120 D1:B84E -  -  -  -      ;   ix[0] = DE,BC , STOP.
  121 D1:B84E -  -  -  -      ;else:
  122 D1:B84E -  -  -  -      ;   ix[0] = ix[-1], ix-=STRIDE, loopCtr--
  123 D1:B84E -  -  -  -  int6502_insertISA_Loop:
  124 D1:B84E B7 -  -  -      or  a,a
  125 D1:B84F 28 B4 -  -      jr  z,int6502_pushISRAfterPop_writeFirstEntry
  126 D1:B851 DD 27 FD -      ld  hl,(ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE)
  127 D1:B854 ED 42 -  -      sbc hl,bc   ;C if ix[-1]<BC
  128 D1:B856 30 AD -  -      jr  nc,int6502_pushISRAfterPop_writeFirstEntry
  129 D1:B858 DD 27 FA -      ld  hl,(ix+INT_ADDR_OFFSET-INT_TABLE_STRIDE)
  130 D1:B85B DD 2F 00 -      ld  (ix+INT_ADDR_OFFSET),hl
  131 D1:B85E DD 27 FD -      ld  hl,(ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE)
  132 D1:B861 DD 2F 03 -      ld  (ix+INT_CYCLE_OFFSET),hl
  133 D1:B864 ED 32 FA -      lea ix,ix-INT_TABLE_STRIDE
  134 D1:B867 3D -  -  -      dec a
  135 D1:B868 18 E4 -  -      jr int6502_insertISA_Loop
  136 D1:B86A -  -  -  -      
  137 D1:B86A -  -  -  -  
  138 D1:B86A -  -  -  -  int6502_removeTop:
  139 D1:B86A DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
  140 D1:B86F DD 7E FF -      ld  a,(ix-1)
  141 D1:B872 B7 -  -  -      or  a,a
  142 D1:B873 28 1B -  -      jr  z,+_
  143 D1:B875 DD 35 FF -      dec (ix-1)
  144 D1:B878 4F -  -  -      ld  c,a
  145 D1:B879 06 06 -  -      ld  b,INT_TABLE_STRIDE
  146 D1:B87B ED 4C -  -      mlt bc
  147 D1:B87D ED 32 06 -      lea ix,ix+INT_TABLE_STRIDE
  148 D1:B880 ED 12 FA -      lea de,ix-INT_TABLE_STRIDE
  149 D1:B883 ED 22 00 -      lea hl,ix+0
  150 D1:B886 ED B0 -  -      ldir
  151 D1:B888 D5 -  -  -      push de
  152 D1:B889 E1 -  -  -      pop hl
  153 D1:B88A 13 -  -  -      inc de
  154 D1:B88B 71 -  -  -      ld  (hl),c
  155 D1:B88C 0E 05 -  -      ld  c,INT_TABLE_STRIDE-1
  156 D1:B88E ED B0 -  -      ldir
  157 D1:B890 DD 21 80 32 
              D0 -  -  -  _:  ld ix,core_memory_ix
  158 D1:B895 C3 AE B7 D1     jp int6502_updateIntCounter
  159 D1:B899 -  -  -  -  
  160 D1:B899 -  -  -  -  
  161 D1:B899 -  -  -  -  
  162 D1:B899 -  -  -  -  
  163 D1:B899 -  -  -  -  
  164 D1:B899 -  -  -  -  
  165 D1:B899 -  -  -  -  
  166 D1:B899 -  -  -  -  
  167 D1:B899 -  -  -  -  
  168 D1:B899 -  -  -  -  
  169 D1:B899 -  -  -  -  
  170 D1:B899 -  -  -  -  
  171 D1:B899 -  -  -  -  
  172 D1:B899 -  -  -  -  
Listing for file "main.z80"
 1140 D1:B899 -  -  -  -  #include "core.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    1 D1:B899 -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    2 D1:B899 -  -  -  -  
    3 D1:B899 -  -  -  -  ;TODO: DEFINE MEMORY ACCESS MACROS. ONE OR MORE FOR READ AND WRITE.
    4 D1:B899 -  -  -  -  ;FIGURE OUT HOW TO GET BOTH HIGH AND LOW BYTE OF ORIGINAL ADDRESS
    5 D1:B899 -  -  -  -  ;AND PERFORM ALTERNATE ACTIONS BASED ON WHAT HARDWARE WAS ACCESSED.
    6 D1:B899 -  -  -  -  ;NOTE: PATTERN SHOWS THAT D=MSB, C=LSB OF 6502 ADDRESS. USE THIS.
    7 D1:B899 -  -  -  -  ;
    8 D1:B899 -  -  -  -  ;THESE MACROS ARE PLACEHOLDERS. CHANGE THEM LATER ON TO REFLECT ACTUAL
    9 D1:B899 -  -  -  -  ;HARDWARE SHENANIGANS.
   10 D1:B899 -  -  -  -  ;
   11 D1:B899 -  -  -  -  ;NOTE: WRITE ACCESSES RELY ON KNOWING WHAT DATA TO WRITE. CAN'T STORE THAT IN A
   12 D1:B899 -  -  -  -  ;      SINCE WE NEED TO DO CONDITIONING. REGISTER B IS UNUSED SO LET'S USE THAT.
   13 D1:B899 -  -  -  -  ;
   14 D1:B899 -  -  -  -  #define READ_ACCESS call mapper0_read
   15 D1:B899 -  -  -  -  #define WRITE_ACCESS call mapper0_write
   16 D1:B899 -  -  -  -  ;Later, put in actual test. Z if not triggered, NZ if triggered. This
   17 D1:B899 -  -  -  -  ;alters the behavior of the BRK instruction.
   18 D1:B899 -  -  -  -  #define WAS_NMI_TRIGGERED bit 0,(ix+NMI_TRIGGERED)
   19 D1:B899 -  -  -  -  
   20 D1:B899 -  -  -  -  #define OPRFLG_C res SF_CARRY,b \ jr nc,$+4 \ set SF_CARRY,b
   21 D1:B899 -  -  -  -  #define OPRFLG_V res SF_OVER,b \ jp po,$+6 \ set SF_OVER,b
   22 D1:B899 -  -  -  -  #define OPRFLG_Z res SF_ZERO,b \ jr nz,$+4 \ set SF_ZERO,b
   23 D1:B899 -  -  -  -  #define OPRFLG_N res SF_NEG,b \ jr nc,$+4 \ set SF_NEG,b
   24 D1:B899 -  -  -  -  
   25 D1:B899 -  -  -  -  #define FLAGS_ZN ld b,(ix+REGSR) \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   26 D1:B899 -  -  -  -  #define FLAGS_CZN ld b,(ix+REGSR) \ OPRFLG_C \ rlc a  \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   27 D1:B899 -  -  -  -  #define FLAGS_VCZN ld b,(ix+REGSR) \ OPRFLG_V \ OPRFLG_C \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   28 D1:B899 -  -  -  -  
   29 D1:B899 -  -  -  -  
   30 D1:B899 -  -  -  -  ;Modify later to include provisions for hardware i/o based on page
   31 D1:B899 -  -  -  -  #define HW_READ(src_reg) ld a,(src_reg)
   32 D1:B899 -  -  -  -  #define HW_WRITE(dst_reg) ld (dst_reg),a
   33 D1:B899 -  -  -  -  
   34 D1:B899 -  -  -  -  
   35 D1:B899 -  -  -  -  
   36 D1:B899 -  -  -  -  
   37 D1:B899 -  -  -  -  ;=============================================================================
   38 D1:B899 -  -  -  -  ;=============================================================================
   39 D1:B899 -  -  -  -  ;=============================================================================
   40 D1:B899 -  -  -  -  ;=============================================================================
   41 D1:B899 -  -  -  -  ;You should have set up the mappings already. This is because
   42 D1:B899 -  -  -  -  ;mappings are program-dependant. Only $0000-$3FFF will be mapped in here
   43 D1:B899 -  -  -  -  ;more or less because I don't expect anything else to map that.
   44 D1:B899 -  -  -  -  i6502Init:
   45 D1:B899 -  -  -  -      ;
   46 D1:B899 -  -  -  -      ; At this point, you may need to randomize 2048 bytes at main_ram
   47 D1:B899 -  -  -  -      ;
   48 D1:B899 21 00 38 D0     ld  hl,main_ram
   49 D1:B89D 01 08 20 00     ld  bc,$002008
   50 D1:B8A1 1E 00 -  -      ld  e,$00
   51 D1:B8A3 CD A6 B9 D1     call i6502_map_pages
   52 D1:B8A7 21 00 33 D0     ld  hl,scrap_mapping
   53 D1:B8AB 01 01 20 00     ld  bc,$002001
   54 D1:B8AF 1E 20 -  -      ld  e,$20
   55 D1:B8B1 CD A6 B9 D1     call i6502_map_pages
   56 D1:B8B5 CD 8D B9 D1     call i6502_load_instruction_set
   57 D1:B8B9 -  -  -  -      ;
   58 D1:B8B9 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   59 D1:B8BE FD 21 08 00 
              00 -  -  -      ld  iy,8    ;8 cycle startup. Hooking into inst6502_jsr for init
   60 D1:B8C3 ED 22 00 -      lea hl,ix
   61 D1:B8C6 ED 12 01 -      lea de,ix+1
   62 D1:B8C9 01 7E 00 00     ld  bc,126
   63 D1:B8CD 36 00 -  -      ld  (hl),$00
   64 D1:B8CF ED B0 -  -      ldir
   65 D1:B8D1 -  -  -  -      ;
   66 D1:B8D1 21 00 00 00     ld  hl,0
   67 D1:B8D5 39 -  -  -      add hl,sp
   68 D1:B8D6 DD 2F 11 -      ld  (ix+CORE_STACK_BASE),hl
   69 D1:B8D9 -  -  -  -      ;
   70 D1:B8D9 DD 36 03 FD     ld  (ix+REGSP),$FD  ;init does a BRK-like action without the actual pushes.
   71 D1:B8DD DD 36 04 24     ld  (ix+REGSR),$24  ;Presumably, this is what status register starts with?
   72 D1:B8E1 21 F4 4B D0     ld  hl,PAGETABLE+(255*BASETABLE_STRIDE)
   73 D1:B8E5 ED 27 -  -      ld  hl,(hl)
   74 D1:B8E7 11 FC 00 00     ld  de,$0000FC
   75 D1:B8EB 19 -  -  -      add hl,de
   76 D1:B8EC ED 27 -  -      ld  hl,(hl) ;get RST vector
   77 D1:B8EE 52 DD 2F 05     ld.s (ix+REGPC),hl
   78 D1:B8F2 -  -  -  -      ;-- debug stuff. Timer things.
   79 D1:B8F2 3A 30 00 F2     ld  a,($F20030)
   80 D1:B8F6 CB C7 -  -      set 0,a ;turn on timer 1
   81 D1:B8F8 32 30 00 F2     ld  ($F20030),a
   82 D1:B8FC -  -  -  -      ; Core initialized. Begin fetching instructions
   83 D1:B8FC 18 07 -  -      jr  i6502FirstLoad
   84 D1:B8FE -  -  -  -  
   85 D1:B8FE -  -  -  -  i6502RetryFirstLoad:    ;reentrant from ISR handler
   86 D1:B8FE 52 DD 17 05     ld.s de,(ix+REGPC)
   87 D1:B902 1B -  -  -      dec de
   88 D1:B903 18 04 -  -      jr +_
   89 D1:B905 -  -  -  -  i6502FirstLoad:
   90 D1:B905 52 DD 17 05     ld.s de,(ix+REGPC)
   91 D1:B909 7B -  -  -  _:  ld  a,e
   92 D1:B90A 1E 0C -  -      ld  e,BASETABLE_STRIDE
   93 D1:B90C ED 5C -  -      mlt de
   94 D1:B90E 21 00 40 D0     ld  hl,PAGETABLE
   95 D1:B912 19 -  -  -      add hl,de
   96 D1:B913 ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
   97 D1:B915 16 00 -  -      ld  d,0
   98 D1:B917 5F -  -  -      ld  e,a
   99 D1:B918 19 -  -  -      add hl,de       ;resolve final address
  100 D1:B919 18 19 -  -      jr  i6502FinishLoad
  101 D1:B91B -  -  -  -  i6502NextLoad:
  102 D1:B91B 23 -  -  -      inc hl
  103 D1:B91C 1C -  -  -      inc e
  104 D1:B91D 20 15 -  -      jr  nz,i6502FinishLoad
  105 D1:B91F DD 56 06 -      ld  d,(ix+REGPC+1)
  106 D1:B922 14 -  -  -      inc d
  107 D1:B923 52 DD 1F 05     ld.s (ix+REGPC),de
  108 D1:B927 1E 0C -  -      ld  e,BASETABLE_STRIDE
  109 D1:B929 ED 5C -  -      mlt de
  110 D1:B92B 21 00 40 D0     ld  hl,PAGETABLE
  111 D1:B92F 19 -  -  -      add hl,de
  112 D1:B930 ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
  113 D1:B932 1E 00 -  -      ld  e,0         ;PCL known to be zero at this point.
  114 D1:B934 -  -  -  -  i6502FinishLoad:
  115 D1:B934 7E -  -  -      ld  a,(hl)
  116 D1:B935 -  -  -  -  
  117 D1:B935 -  -  -  -  #ifdef COREDEBUG
  118 D1:B935                 ld  (ix+CURRENT_OPCODES+0),a
  119 D1:B935                 ld  (ix+REGPC+0),e
  120 D1:B935             #endif
  121 D1:B935 23 -  -  -      inc hl
  122 D1:B936 1C -  -  -      inc e
  123 D1:B937 20 15 -  -      jr  nz,i6502PrepNextPage
  124 D1:B939 DD 56 06 -      ld  d,(ix+REGPC+1)
  125 D1:B93C 14 -  -  -      inc d
  126 D1:B93D 52 DD 1F 05     ld.s (ix+REGPC),de
  127 D1:B941 1E 0C -  -      ld  e,BASETABLE_STRIDE
  128 D1:B943 ED 5C -  -      mlt de
  129 D1:B945 21 00 40 D0     ld  hl,PAGETABLE
  130 D1:B949 19 -  -  -      add hl,de
  131 D1:B94A ED 27 -  -      ld  hl,(hl)
  132 D1:B94C 1E 00 -  -      ld  e,0
  133 D1:B94E -  -  -  -  i6502PrepNextPage:
  134 D1:B94E -  -  -  -  #ifdef COREDEBUG
  135 D1:B94E                 push af
  136 D1:B94E                     ld  a,(hl)
  137 D1:B94E                     ld  (ix+CURRENT_OPCODES+1),a
  138 D1:B94E                     push de
  139 D1:B94E                         push hl
  140 D1:B94E                             push ix
  141 D1:B94E                                 inc hl
  142 D1:B94E                                 inc e
  143 D1:B94E                                 jr  nz,+_
  144 D1:B94E                                 ld  d,(ix+REGPC+1)
  145 D1:B94E                                 inc d
  146 D1:B94E                                 ld  e,BASETABLE_STRIDE
  147 D1:B94E                                 mlt de
  148 D1:B94E                                 ld  hl,PAGETABLE
  149 D1:B94E                                 add hl,de
  150 D1:B94E                                 ld  hl,(hl)
  151 D1:B94E             _:                  ld  a,(hl)
  152 D1:B94E                                 ld  (ix+CURRENT_OPCODES+2),a
  153 D1:B94E                                 lea hl,ix
  154 D1:B94E                                 ld  de,core_memory_ix
  155 D1:B94E                                 or  a,a
  156 D1:B94E                                 sbc hl,de
  157 D1:B94E                                 jr  nz,$    ;halt program if IX is not core_memory_ix
  158 D1:B94E                                 ;jr $
  159 D1:B94E                                 push iy
  160 D1:B94E                                     call dbg_printLine
  161 D1:B94E                                 pop iy
  162 D1:B94E                                 ld  a,(ix+CORE_ERROR_LEVEL)
  163 D1:B94E                                 or  a,a
  164 D1:B94E                                 jr  z,+_
  165 D1:B94E                                 ld  hl,(ix+CORE_STACK_BASE)
  166 D1:B94E                                 ld  sp,hl
  167 D1:B94E                                 ret
  168 D1:B94E             _:                  ld  iy,(ix+CYCLES_CURRENT)  ;remove when done with timings
  169 D1:B94E                                 lea hl,iy+0
  170 D1:B94E                                 ld  de,DEBUG_STEP_START_CYCLE
  171 D1:B94E                                 or  a,a
  172 D1:B94E                                 sbc hl,de
  173 D1:B94E                                 call nc,waituntilnewkeypress
  174 D1:B94E                             pop ix
  175 D1:B94E                         pop hl
  176 D1:B94E                     pop de
  177 D1:B94E                 pop af
  178 D1:B94E             #endif
  179 D1:B94E E5 -  -  -      push hl
  180 D1:B94F F5 -  -  -          push af
  181 D1:B950 -  -  -  -              ;ld  a,(ix+PPU_FRAMECOUNT)
  182 D1:B950 -  -  -  -              ;or  a,a
  183 D1:B950 -  -  -  -              ;cp  a,$20
  184 D1:B950 -  -  -  -              ;jr  c,+_
  185 D1:B950 -  -  -  -              ;ld  bc,-25000
  186 D1:B950 -  -  -  -              ;lea hl,iy
  187 D1:B950 -  -  -  -              ;add hl,bc
  188 D1:B950 -  -  -  -              ;jr  c,$
  189 D1:B950 F1 -  -  -  _:      pop af
  190 D1:B951 ED 23 00 -          lea hl,iy
  191 D1:B954 -  -  -  -  i6502_interrupt_timer   .equ $+1
  192 D1:B954 01 DD 92 FF         ld  bc,-27939
  193 D1:B958 09 -  -  -          add hl,bc
  194 D1:B959 38 1A -  -          jr  c,i6502_take_interrupt
  195 D1:B95B -  -  -  -  i6502_continue_instruction_fetch:
  196 D1:B95B 67 -  -  -          ld  h,a
  197 D1:B95C 2E 0C -  -          ld  l,BASETABLE_STRIDE
  198 D1:B95E ED 6C -  -          mlt hl
  199 D1:B960 01 04 40 D0         ld  bc,JUMPTABLE
  200 D1:B964 09 -  -  -          add hl,bc
  201 D1:B965 ED 27 -  -          ld  hl,(hl)     ;jumptable
  202 D1:B967 E3 -  -  -          ex  (sp),hl     ;exch with exec addr, jumpto-via-ret
  203 D1:B968 C9 -  -  -      ret
  204 D1:B969 -  -  -  -  
  205 D1:B969 -  -  -  -  i6502_no_interrupts:
  206 D1:B969 -  -  -  -          ;This is what happens when you let the core run without setting
  207 D1:B969 -  -  -  -          ;up interrupts. It'll be up to the hardware access subroutines
  208 D1:B969 -  -  -  -          ;to configure interrupts from now on. See "coreint.z80" for
  209 D1:B969 -  -  -  -          ;more information
  210 D1:B969 21 00 00 80         ld  hl,$800000  ;INT_MIN. Prevent retry for as long as possible.
  211 D1:B96D 22 75 B9 D1         ld  (i6502_take_interrupt),hl
  212 D1:B971 C3 5B B9 D1         jp  i6502_continue_instruction_fetch
  213 D1:B975 -  -  -  -  
  214 D1:B975 -  -  -  -  i6502_take_interrupt:
  215 D1:B975 29 -  -  -          add hl,hl   ;Check sign bit. Keep going if neg result. Fit inside timer
  216 D1:B976 DA 5B B9 D1         jp  c,i6502_continue_instruction_fetch
  217 D1:B97A 67 -  -  -          ld  h,a
  218 D1:B97B 3A 60 34 D0         ld  a,(int_table_len)
  219 D1:B97F B7 -  -  -          or  a,a
  220 D1:B980 7C -  -  -          ld  a,h
  221 D1:B981 28 E6 -  -          jr  z,i6502_no_interrupts
  222 D1:B983 E1 -  -  -      pop hl
  223 D1:B984 AF -  -  -      xor a,a
  224 D1:B985 DD 73 05 -      ld  (ix+REGPC+0),e
  225 D1:B988 2A 61 34 D0     ld  hl,(INT_TABLE)  ;Find the routines in "coreint.z80" that handles
  226 D1:B98C E9 -  -  -      jp  (hl)            ;and maintains the interrupt table being used here.
  227 D1:B98D -  -  -  -  
  228 D1:B98D -  -  -  -  
  229 D1:B98D -  -  -  -  ;Instructions one byte wide returns to the main loop via:
  230 D1:B98D -  -  -  -  ;   JP i6502FinishLoad
  231 D1:B98D -  -  -  -  ;Those with parameters have HL at the address in quetion, and is expected to
  232 D1:B98D -  -  -  -  ;advance HL and E at the end of the instruction. You return to main loop via:
  233 D1:B98D -  -  -  -  ;   JP i6502NextLoad
  234 D1:B98D -  -  -  -  ;Unless you manually advance the pointer to the next instruction.
  235 D1:B98D -  -  -  -  ;You really shouldn't but if you must do that, then also do this:
  236 D1:B98D -  -  -  -  ;   JP i6502FinishLoad
  237 D1:B98D -  -  -  -  ;Remember that register E is very important; it tells you about page boundaries.
  238 D1:B98D -  -  -  -  
  239 D1:B98D -  -  -  -  
  240 D1:B98D -  -  -  -  ;-----------------------------------------------------------------------------
  241 D1:B98D -  -  -  -  ;-----------------------------------------------------------------------------
  242 D1:B98D -  -  -  -  ;-----------------------------------------------------------------------------
  243 D1:B98D -  -  -  -  
  244 D1:B98D -  -  -  -  ;  ***  *   * ****  ****   ***  *   * ***** ***** **  * *****  ***  
  245 D1:B98D -  -  -  -  ; *     *   * *   * *   * *   * *   *   *     *   **  * *     *     
  246 D1:B98D -  -  -  -  ;  ***  *   * ****  ****  *   * *   *   *     *   * * * ***    ***  
  247 D1:B98D -  -  -  -  ;     * *   * *   * *   * *   * *   *   *     *   *  ** *         * 
  248 D1:B98D -  -  -  -  ;  ***   ***  ****  *   *  ***   ***    *   ***** *  ** *****  ***  
  249 D1:B98D -  -  -  -  
  250 D1:B98D -  -  -  -  ;-----------------------------------------------------------------------------
  251 D1:B98D -  -  -  -  
  252 D1:B98D -  -  -  -  i6502_load_instruction_set:
  253 D1:B98D DD 21 04 40 
              D0 -  -  -      ld  ix,JUMPTABLE
  254 D1:B992 21 66 DD D1     ld  hl,inst6502_instruction_set
  255 D1:B996 06 00 -  -      ld  b,0
  256 D1:B998 ED 17 -  -  _:  ld  de,(hl)
  257 D1:B99A DD 1F 00 -      ld  (ix+0),de
  258 D1:B99D 23 -  -  -      inc hl
  259 D1:B99E 23 -  -  -      inc hl
  260 D1:B99F 23 -  -  -      inc hl
  261 D1:B9A0 ED 32 0C -      lea ix,ix+BASETABLE_STRIDE
  262 D1:B9A3 10 F3 -  -      djnz -_
  263 D1:B9A5 C9 -  -  -      ret
  264 D1:B9A6 -  -  -  -  
  265 D1:B9A6 -  -  -  -  ;HL=Base_ez80_address, C=Numpages_in_map, B=numpages_in_space, E=starting_page
  266 D1:B9A6 -  -  -  -  ;Example: To map and mirror 2KB RAM at $D03800 inside first 8KB of 6502 space
  267 D1:B9A6 -  -  -  -  ;HL=$D03800, C=$08, B=$20, E=$00
  268 D1:B9A6 -  -  -  -  ;Note: B should be a power of two and evenly divisible by C.
  269 D1:B9A6 -  -  -  -  i6502_map_pages:
  270 D1:B9A6 16 0C -  -      ld  d,BASETABLE_STRIDE
  271 D1:B9A8 ED 5C -  -      mlt de
  272 D1:B9AA DD 21 00 40 
              D0 -  -  -      ld  ix,PAGETABLE
  273 D1:B9AF DD 19 -  -      add ix,de
  274 D1:B9B1 78 -  -  -      ld  a,b     ;A = main counter for total number of pages in mapping space
  275 D1:B9B2 11 00 01 00     ld  de,256
  276 D1:B9B6 E5 -  -  -      push hl
  277 D1:B9B7 FD E1 -  -      pop iy
  278 D1:B9B9 41 -  -  -  _:  ld  b,c     ;looping for number of pages to map
  279 D1:B9BA DD 2F 00 -  _:  ld  (ix+0),hl
  280 D1:B9BD 19 -  -  -      add hl,de                   ;next page z80
  281 D1:B9BE ED 32 0C -      lea ix,ix+BASETABLE_STRIDE  ;next page entry
  282 D1:B9C1 3D -  -  -      dec a
  283 D1:B9C2 C8 -  -  -      ret z
  284 D1:B9C3 10 F5 -  -      djnz -_
  285 D1:B9C5 ED 23 00 -      lea hl,iy+0     ;start z80 pages over again for mirroring
  286 D1:B9C8 18 EF -  -      jr --_
  287 D1:B9CA -  -  -  -  
  288 D1:B9CA -  -  -  -  
  289 D1:B9CA -  -  -  -  subroutine6502_abs_split_start:
  290 D1:B9CA 4E -  -  -      ld  c,(hl)
  291 D1:B9CB 23 -  -  -      inc hl
  292 D1:B9CC 1C -  -  -      inc e
  293 D1:B9CD 20 15 -  -      jr nz,+_
  294 D1:B9CF DD 56 06 -      ld  d,(ix+REGPC+1)
  295 D1:B9D2 14 -  -  -      inc d
  296 D1:B9D3 52 DD 1F 05     ld.s (ix+REGPC),de
  297 D1:B9D7 1E 0C -  -      ld  e,BASETABLE_STRIDE
  298 D1:B9D9 ED 5C -  -      mlt de
  299 D1:B9DB 21 00 40 D0     ld  hl,PAGETABLE
  300 D1:B9DF 19 -  -  -      add hl,de
  301 D1:B9E0 ED 27 -  -      ld  hl,(hl) ;
  302 D1:B9E2 1E 00 -  -      ld  e,0
  303 D1:B9E4 46 -  -  -  _:  ld  b,(hl)
  304 D1:B9E5 C9 -  -  -      ret
  305 D1:B9E6 -  -  -  -  
  306 D1:B9E6 -  -  -  -  #define PUSH_ABSXSPLIT call subroutine6502_absx_split_start
  307 D1:B9E6 -  -  -  -  #define PUSH_ABSXSPLIT_NODEP call subroutine6502_absx_ss_noDep
  308 D1:B9E6 -  -  -  -  #define PUSH_ABSYSPLIT call subroutine6502_absy_split_start
  309 D1:B9E6 -  -  -  -  #define PUSH_ABSYSPLIT_NODEP call subroutine6502_absy_ss_noDep
  310 D1:B9E6 -  -  -  -  
  311 D1:B9E6 -  -  -  -  subroutine6502_absy_split_start:
  312 D1:B9E6 DD 4E 02 -      ld  c,(ix+REGY)
  313 D1:B9E9 18 03 -  -      jr +_
  314 D1:B9EB -  -  -  -  
  315 D1:B9EB -  -  -  -  subroutine6502_absx_split_start:
  316 D1:B9EB DD 4E 01 -      ld  c,(ix+REGX)
  317 D1:B9EE 7E -  -  -  _:  ld  a,(hl)
  318 D1:B9EF 23 -  -  -      inc hl
  319 D1:B9F0 1C -  -  -      inc e
  320 D1:B9F1 20 15 -  -      jr nz,+_
  321 D1:B9F3 DD 56 06 -      ld  d,(ix+REGPC+1)
  322 D1:B9F6 14 -  -  -      inc d
  323 D1:B9F7 52 DD 1F 05     ld.s (ix+REGPC),de
  324 D1:B9FB 1E 0C -  -      ld  e,BASETABLE_STRIDE
  325 D1:B9FD ED 5C -  -      mlt de
  326 D1:B9FF 21 00 40 D0     ld  hl,PAGETABLE
  327 D1:BA03 19 -  -  -      add hl,de
  328 D1:BA04 ED 27 -  -      ld  hl,(hl) ;
  329 D1:BA06 1E 00 -  -      ld  e,0
  330 D1:BA08 46 -  -  -  _:  ld  b,(hl)
  331 D1:BA09 E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  332 D1:BA0A E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  333 D1:BA0B 81 -  -  -          add a,c
  334 D1:BA0C 30 03 -  -          jr  nc,+_
  335 D1:BA0E FD 23 -  -          ADDCYC(1)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  336 D1:BA10 04 -  -  -          inc b
  337 D1:BA11 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  338 D1:BA12 0E 0C -  -          ld  c,BASETABLE_STRIDE
  339 D1:BA14 ED 4C -  -          mlt bc
  340 D1:BA16 21 00 40 D0         ld  hl,PAGETABLE
  341 D1:BA1A 09 -  -  -          add hl,bc
  342 D1:BA1B ED 27 -  -          ld  hl,(hl)
  343 D1:BA1D 06 00 -  -          ld  b,0
  344 D1:BA1F 4F -  -  -          ld  c,a
  345 D1:BA20 09 -  -  -          add hl,bc
  346 D1:BA21 C9 -  -  -      ret
  347 D1:BA22 -  -  -  -      
  348 D1:BA22 -  -  -  -  subroutine6502_absy_ss_noDep:
  349 D1:BA22 DD 4E 02 -      ld  c,(ix+REGY)
  350 D1:BA25 18 03 -  -      jr +_
  351 D1:BA27 -  -  -  -  subroutine6502_absx_ss_noDep:
  352 D1:BA27 DD 4E 01 -      ld  c,(ix+REGX)
  353 D1:BA2A 7E -  -  -  _:  ld  a,(hl)
  354 D1:BA2B 23 -  -  -      inc hl
  355 D1:BA2C 1C -  -  -      inc e
  356 D1:BA2D 20 15 -  -      jr nz,+_
  357 D1:BA2F DD 56 06 -      ld  d,(ix+REGPC+1)
  358 D1:BA32 14 -  -  -      inc d
  359 D1:BA33 52 DD 1F 05     ld.s (ix+REGPC),de
  360 D1:BA37 1E 0C -  -      ld  e,BASETABLE_STRIDE
  361 D1:BA39 ED 5C -  -      mlt de
  362 D1:BA3B 21 00 40 D0     ld  hl,PAGETABLE
  363 D1:BA3F 19 -  -  -      add hl,de
  364 D1:BA40 ED 27 -  -      ld  hl,(hl) ;
  365 D1:BA42 1E 00 -  -      ld  e,0
  366 D1:BA44 46 -  -  -  _:  ld  b,(hl)
  367 D1:BA45 E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  368 D1:BA46 E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  369 D1:BA47 81 -  -  -          add a,c
  370 D1:BA48 30 01 -  -          jr  nc,+_
  371 D1:BA4A 04 -  -  -          inc b
  372 D1:BA4B 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  373 D1:BA4C 0E 0C -  -          ld  c,BASETABLE_STRIDE
  374 D1:BA4E ED 4C -  -          mlt bc
  375 D1:BA50 21 00 40 D0         ld  hl,PAGETABLE
  376 D1:BA54 09 -  -  -          add hl,bc
  377 D1:BA55 ED 27 -  -          ld  hl,(hl)
  378 D1:BA57 06 00 -  -          ld  b,0
  379 D1:BA59 4F -  -  -          ld  c,a
  380 D1:BA5A 09 -  -  -          add hl,bc
  381 D1:BA5B C9 -  -  -      ret
  382 D1:BA5C -  -  -  -  
  383 D1:BA5C -  -  -  -  
  384 D1:BA5C -  -  -  -  
  385 D1:BA5C -  -  -  -  
  386 D1:BA5C -  -  -  -  
  387 D1:BA5C -  -  -  -  
  388 D1:BA5C -  -  -  -  
  389 D1:BA5C -  -  -  -  subroutine6502_adc_combined_end:
  390 D1:BA5C DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  391 D1:BA5F 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  392 D1:BA60 DD 7E 00 -      ld  a,(ix+REGA)
  393 D1:BA63 89 -  -  -      adc a,c
  394 D1:BA64 DD 77 00 -      ld  (ix+REGA),a
  395 D1:BA67 DD 46 04 CB 
              B0 E2 72 BA 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  396 D1:BA89 C3 1B B9 D1     jp i6502NextLoad
  397 D1:BA8D -  -  -  -  
  398 D1:BA8D -  -  -  -  subroutine6502_sbc_combined_end:
  399 D1:BA8D DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  400 D1:BA90 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  401 D1:BA91 DD 7E 00 -      ld  a,(ix+REGA)
  402 D1:BA94 3F -  -  -      ccf
  403 D1:BA95 99 -  -  -      sbc a,c
  404 D1:BA96 3F -  -  -      ccf
  405 D1:BA97 DD 77 00 -      ld  (ix+REGA),a
  406 D1:BA9A DD 46 04 CB 
              B0 E2 A5 BA 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  407 D1:BABC C3 1B B9 D1     jp i6502NextLoad
  408 D1:BAC0 -  -  -  -  
  409 D1:BAC0 -  -  -  -  subroutine6502_cmp_combined_end:
  410 D1:BAC0 DD 7E 00 -      ld  a,(ix+REGA)
  411 D1:BAC3 90 -  -  -      sub a,b
  412 D1:BAC4 3F -  -  -      ccf     ;because the 6502 is strange like that.
  413 D1:BAC5 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  414 D1:BADF C3 1B B9 D1     jp i6502NextLoad
  415 D1:BAE3 -  -  -  -  
  416 D1:BAE3 -  -  -  -  subroutine6502_take_branch:
  417 D1:BAE3 FD 23 -  -      ADDCYC(1)
  418 D1:BAE5 7E -  -  -      ld  a,(hl)  ;offset byte
  419 D1:BAE6 6F -  -  -      ld  L,a
  420 D1:BAE7 87 -  -  -      add a,a
  421 D1:BAE8 9F -  -  -      sbc a,a
  422 D1:BAE9 67 -  -  -      ld  H,a     ;sign-extending offset byte
  423 D1:BAEA DD 56 06 -      ld  d,(ix+REGPC+1)
  424 D1:BAED 13 -  -  -      inc de
  425 D1:BAEE 52 19 -  -      add.s hl,de
  426 D1:BAF0 7C -  -  -      ld  a,h
  427 D1:BAF1 BA -  -  -      cp  d       ;is high byte the same?
  428 D1:BAF2 28 02 -  -      jr  z,+_    ;if so, do not add another clock
  429 D1:BAF4 FD 23 -  -      ADDCYC(1)
  430 D1:BAF6 52 DD 2F 05 _:  ld.s (ix+REGPC),hl
  431 D1:BAFA C3 05 B9 D1     jp  i6502FirstLoad
  432 D1:BAFE -  -  -  -  
  433 D1:BAFE -  -  -  -  subroutine6502_take_branch_waitloop_detect:
  434 D1:BAFE 7E -  -  -      ld  a,(hl)      ;offset byte
  435 D1:BAFF 4F -  -  -      ld  c,a         ;keep that offset byte for now. We'll need it later.
  436 D1:BB00 6F -  -  -      ld  l,a
  437 D1:BB01 87 -  -  -      add a,a
  438 D1:BB02 9F -  -  -      sbc a,a
  439 D1:BB03 67 -  -  -      ld  h,a         ;sign-extend into HL
  440 D1:BB04 DD 56 06 -      ld  d,(ix+REGPC+1)
  441 D1:BB07 13 -  -  -      inc de
  442 D1:BB08 19 -  -  -      add hl,de           ;HLU unimportant for any further checks
  443 D1:BB09 52 DD 2F 05     ld.s (ix+REGPC),hl  ;since we aren't going to store it anyway
  444 D1:BB0D 5C -  -  -      ld  e,h             ;D=newMSB, E=oldMSB
  445 D1:BB0E -  -  -  -      ;Now we have to check the instruction we landed on to see 
  446 D1:BB0E 79 -  -  -      ld  a,c             ;Check offset byte if in range for waitloop things
  447 D1:BB0F FE FC -  -      cp  a,-2-2          ;-2 to reach back to itself, and -2 for the inst before
  448 D1:BB11 28 0C -  -      jr  z,subroutine6502_tbwd_2bcheck
  449 D1:BB13 -  -  -  -      ;insert other offset-based checks here
  450 D1:BB13 -  -  -  -  subroutine6502_tbwd_check_failed:
  451 D1:BB13 FD 23 -  -      ADDCYC(1)
  452 D1:BB15 7B -  -  -      ld  a,e
  453 D1:BB16 BA -  -  -      cp  a,d     ;Check if high byte changed. If so, it's a page crossing.
  454 D1:BB17 28 02 -  -      jr  z,+_
  455 D1:BB19 FD 23 -  -      ADDCYC(1)
  456 D1:BB1B C3 05 B9 D1 _:  jp  i6502FirstLoad
  457 D1:BB1F -  -  -  -  ;Note: By the time we're checking for waitloop status, the jump's already
  458 D1:BB1F -  -  -  -  ;been recorded for next execution. Thus, when the next interrupt occurs,
  459 D1:BB1F -  -  -  -  ;that instruction will be retried and the loop will fall through, preventing
  460 D1:BB1F -  -  -  -  ;the sort of lockup that would've needed additional flags to handle.
  461 D1:BB1F -  -  -  -  subroutine6502_tbwd_2bcheck:
  462 D1:BB1F ED 33 FE -      lea iy,iy-2     ;undo the first addcyc
  463 D1:BB22 7D -  -  -      ld  a,L         ;preserve LSB for later thingies.
  464 D1:BB23 44 -  -  -      ld  b,h
  465 D1:BB24 0E 0C -  -      ld  c,BASETABLE_STRIDE
  466 D1:BB26 ED 4C -  -      mlt bc
  467 D1:BB28 21 00 40 D0     ld  hl,PAGETABLE
  468 D1:BB2C 09 -  -  -      add hl,bc
  469 D1:BB2D ED 27 -  -      ld  hl,(hl)
  470 D1:BB2F 06 00 -  -      ld  b,0
  471 D1:BB31 4F -  -  -      ld  c,a
  472 D1:BB32 09 -  -  -      add hl,bc       ;Address to prior instruction reconstructed.
  473 D1:BB33 7E -  -  -      ld  a,(hl)
  474 D1:BB34 FE C5 -  -      cp  a,$C5       ;CMP_ZP, seen in Nestest
  475 D1:BB36 28 02 -  -      jr  z,subroutine6502_tbwd_waitloop
  476 D1:BB38 18 D9 -  -      jr  subroutine6502_tbwd_check_failed
  477 D1:BB3A -  -  -  -  
  478 D1:BB3A -  -  -  -  subroutine6502_tbwd_waitloop:
  479 D1:BB3A -  -  -  -  ;I don't particularly care about timing consistency here. 3 or more ccs per
  480 D1:BB3A -  -  -  -  ;iteration, I'll fix that later if it ever truly becomes a problem.
  481 D1:BB3A C3 29 D0 D1     jp  inst6052_jmp_abs_inf_loop   
  482 D1:BB3E -  -  -  -  
  483 D1:BB3E -  -  -  -  ;-----------------------------------------------------------------------------
  484 D1:BB3E -  -  -  -  
  485 D1:BB3E -  -  -  -  ; *** **  *  *** ***** ***  *   *  *** ***** *** ***  **  *     ***  ***** *****                                                
  486 D1:BB3E -  -  -  -  ;  *  **  * *      *   *  * *   * *      *    * *   * **  *    *     *       *                   
  487 D1:BB3E -  -  -  -  ;  *  * * *  ***   *   ***  *   * *      *    * *   * * * *     ***  ***     *                          
  488 D1:BB3E -  -  -  -  ;  *  *  **     *  *   *  * *   * *      *    * *   * *  **        * *       *                   
  489 D1:BB3E -  -  -  -  ; *** *  **  ***   *   *  *  ***   ***   *   *** ***  *  **     ***  *****   *                                 
  490 D1:BB3E -  -  -  -  
  491 D1:BB3E -  -  -  -  ;-----------------------------------------------------------------------------
  492 D1:BB3E -  -  -  -  
  493 D1:BB3E -  -  -  -  ;-----------------------------------------------------------------------------
  494 D1:BB3E -  -  -  -  ;-----------------------------------------------------------------------------
  495 D1:BB3E -  -  -  -  ;-----------------------------------------------------------------------------
  496 D1:BB3E -  -  -  -  ;Instructions by type: Transfer Instructions
  497 D1:BB3E -  -  -  -  ;LDA - Load Accumulator with Memory
  498 D1:BB3E -  -  -  -  ;    M -> A
  499 D1:BB3E -  -  -  -  ;    N	Z	C	I	D	V
  500 D1:BB3E -  -  -  -  ;    +	+	-	-	-	-
  501 D1:BB3E -  -  -  -  
  502 D1:BB3E -  -  -  -  ;addressing	assembler	opc	bytes	cycles
  503 D1:BB3E -  -  -  -  ;immediate	LDA #oper	A9	2	2
  504 D1:BB3E -  -  -  -  inst6502_lda_imm:
  505 D1:BB3E 7E -  -  -      ld  a,(hl)
  506 D1:BB3F DD 77 00 -      ld  (ix+REGA),a
  507 D1:BB42 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  508 D1:BB56 ED 33 02 -      ADDCYC(2)
  509 D1:BB59 C3 1B B9 D1     jp i6502NextLoad
  510 D1:BB5D -  -  -  -  
  511 D1:BB5D -  -  -  -  ;zeropage	LDA oper	A5	2	3
  512 D1:BB5D -  -  -  -  inst6502_lda_zp:
  513 D1:BB5D 7E -  -  -      ld  a,(hl)
  514 D1:BB5E 01 00 38 D0     ld  bc,ZEROPAGE
  515 D1:BB62 81 -  -  -      add a,c
  516 D1:BB63 4F -  -  -      ld  c,a
  517 D1:BB64 0A -  -  -      ld  a,(bc)
  518 D1:BB65 DD 77 00 -      ld  (ix+REGA),a
  519 D1:BB68 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  520 D1:BB7C ED 33 03 -      ADDCYC(3)
  521 D1:BB7F C3 1B B9 D1     jp i6502NextLoad
  522 D1:BB83 -  -  -  -  
  523 D1:BB83 -  -  -  -  ;zeropage,X	LDA oper,X	B5	2	4 
  524 D1:BB83 -  -  -  -  inst6502_lda_zpx:
  525 D1:BB83 7E -  -  -      ld  a,(hl)
  526 D1:BB84 01 00 38 D0     ld  bc,ZEROPAGE
  527 D1:BB88 81 -  -  -      add a,c
  528 D1:BB89 DD 86 01 -      add a,(ix+REGX)
  529 D1:BB8C 4F -  -  -      ld  c,a
  530 D1:BB8D 0A -  -  -      ld  a,(bc)
  531 D1:BB8E DD 77 00 -      ld  (ix+REGA),a
  532 D1:BB91 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  533 D1:BBA5 ED 33 04 -      ADDCYC(4)
  534 D1:BBA8 C3 1B B9 D1     jp i6502NextLoad
  535 D1:BBAC -  -  -  -  
  536 D1:BBAC -  -  -  -  ;absolute	LDA oper	AD	3	4
  537 D1:BBAC -  -  -  -  inst6502_lda_abs:
  538 D1:BBAC CD CA B9 D1     call subroutine6502_abs_split_start
  539 D1:BBB0 E5 -  -  -      push hl
  540 D1:BBB1 50 -  -  -          ld  d,b
  541 D1:BBB2 79 -  -  -          ld  a,c
  542 D1:BBB3 0E 0C -  -          ld  c,BASETABLE_STRIDE
  543 D1:BBB5 ED 4C -  -          mlt bc
  544 D1:BBB7 21 00 40 D0         ld  hl,PAGETABLE
  545 D1:BBBB 09 -  -  -          add hl,bc
  546 D1:BBBC ED 27 -  -          ld  hl,(hl)
  547 D1:BBBE 06 00 -  -          ld  b,0
  548 D1:BBC0 4F -  -  -          ld  c,a
  549 D1:BBC1 09 -  -  -          add hl,bc   ;full address
  550 D1:BBC2 CD D8 AF D1         READ_ACCESS
  551 D1:BBC6 DD 77 00 -          ld (ix+REGA),a
  552 D1:BBC9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  553 D1:BBDD ED 33 04 -          ADDCYC(4)
  554 D1:BBE0 E1 -  -  -      pop hl
  555 D1:BBE1 C3 1B B9 D1     jp i6502NextLoad
  556 D1:BBE5 -  -  -  -  
  557 D1:BBE5 -  -  -  -  ;absolute,X	LDA oper,X	BD	3	4* 
  558 D1:BBE5 -  -  -  -  inst6502_lda_absx:
  559 D1:BBE5 ED 33 04 -      ADDCYC(4)
  560 D1:BBE8 CD EB B9 D1     PUSH_ABSXSPLIT
  561 D1:BBEC CD D8 AF D1         READ_ACCESS
  562 D1:BBF0 DD 77 00 -          ld (ix+REGA),a
  563 D1:BBF3 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  564 D1:BC07 E1 -  -  -      pop hl
  565 D1:BC08 C3 1B B9 D1     jp i6502NextLoad
  566 D1:BC0C -  -  -  -  
  567 D1:BC0C -  -  -  -  ;absolute,Y	LDA oper,Y	B9	3	4* 
  568 D1:BC0C -  -  -  -  inst6502_lda_absy:
  569 D1:BC0C ED 33 04 -      ADDCYC(4)
  570 D1:BC0F CD E6 B9 D1     PUSH_ABSYSPLIT
  571 D1:BC13 CD D8 AF D1         READ_ACCESS
  572 D1:BC17 DD 77 00 -          ld (ix+REGA),a
  573 D1:BC1A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  574 D1:BC2E E1 -  -  -      pop hl
  575 D1:BC2F C3 1B B9 D1     jp i6502NextLoad
  576 D1:BC33 -  -  -  -  
  577 D1:BC33 -  -  -  -  ;(indirect,X)	LDA (oper,X)	A1	2	6
  578 D1:BC33 -  -  -  -  inst6502_lda_indx:
  579 D1:BC33 E5 -  -  -      push hl
  580 D1:BC34 7E -  -  -          ld  a,(hl)
  581 D1:BC35 21 00 38 D0         ld  hl,ZEROPAGE
  582 D1:BC39 85 -  -  -          add a,L
  583 D1:BC3A DD 86 01 -          add a,(ix+REGX)
  584 D1:BC3D 6F -  -  -          ld  L,a
  585 D1:BC3E 7E -  -  -          ld  a,(hl)
  586 D1:BC3F 2C -  -  -          inc L
  587 D1:BC40 56 -  -  -          ld  d,(hl)
  588 D1:BC41 42 -  -  -          ld  b,d
  589 D1:BC42 0E 0C -  -          ld  c,BASETABLE_STRIDE
  590 D1:BC44 ED 4C -  -          mlt bc
  591 D1:BC46 21 00 40 D0         ld  hl,PAGETABLE
  592 D1:BC4A 09 -  -  -          add hl,bc
  593 D1:BC4B ED 27 -  -          ld  hl,(hl)
  594 D1:BC4D 06 00 -  -          ld  b,0
  595 D1:BC4F 4F -  -  -          ld  c,a
  596 D1:BC50 09 -  -  -          add hl,bc
  597 D1:BC51 CD D8 AF D1         READ_ACCESS
  598 D1:BC55 DD 77 00 -          ld (ix+REGA),a
  599 D1:BC58 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  600 D1:BC6C ED 33 06 -          ADDCYC(6)
  601 D1:BC6F E1 -  -  -      pop hl
  602 D1:BC70 C3 1B B9 D1     jp i6502NextLoad
  603 D1:BC74 -  -  -  -  
  604 D1:BC74 -  -  -  -  ;(indirect),Y	LDA (oper),Y	B1	2	5*
  605 D1:BC74 -  -  -  -  inst6502_lda_indy:
  606 D1:BC74 E5 -  -  -      push hl
  607 D1:BC75 7E -  -  -          ld  a,(hl)
  608 D1:BC76 21 00 38 D0         ld  hl,ZEROPAGE
  609 D1:BC7A 85 -  -  -          add a,L
  610 D1:BC7B 6F -  -  -          ld  L,a
  611 D1:BC7C 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  612 D1:BC7D 2C -  -  -          inc L
  613 D1:BC7E DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  614 D1:BC81 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  615 D1:BC82 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  616 D1:BC84 FD 23 -  -          ADDCYC(1)
  617 D1:BC86 24 -  -  -          inc h
  618 D1:BC87 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  619 D1:BC88 2E 0C -  -          ld  L,BASETABLE_STRIDE
  620 D1:BC8A ED 6C -  -          mlt hl          ;23.
  621 D1:BC8C 01 00 40 D0         ld  bc,PAGETABLE
  622 D1:BC90 09 -  -  -          add hl,bc
  623 D1:BC91 ED 27 -  -          ld  hl,(hl)     ;address get.
  624 D1:BC93 01 00 00 00         ld  bc,0
  625 D1:BC97 4F -  -  -          ld  c,a
  626 D1:BC98 09 -  -  -          add hl,bc       ;Full address get.
  627 D1:BC99 CD D8 AF D1         READ_ACCESS
  628 D1:BC9D DD 77 00 -          ld  (ix+REGA),a
  629 D1:BCA0 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  630 D1:BCB4 ED 33 05 -          ADDCYC(5)
  631 D1:BCB7 E1 -  -  -      pop hl
  632 D1:BCB8 C3 1B B9 D1     jp i6502NextLoad
  633 D1:BCBC -  -  -  -  
  634 D1:BCBC -  -  -  -  ;-----------------------------------------------------------------------------
  635 D1:BCBC -  -  -  -  ;LDX - Load Index X with Memory
  636 D1:BCBC -  -  -  -  ;    M -> X
  637 D1:BCBC -  -  -  -  ;    N	Z	C	I	D	V
  638 D1:BCBC -  -  -  -  ;    +	+	-	-	-	-
  639 D1:BCBC -  -  -  -  
  640 D1:BCBC -  -  -  -  ;immediate	LDX #oper	A2	2	2  
  641 D1:BCBC -  -  -  -  inst6502_ldx_imm:
  642 D1:BCBC 7E -  -  -      ld  a,(hl)
  643 D1:BCBD DD 77 01 -      ld  (ix+REGX),a
  644 D1:BCC0 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  645 D1:BCD4 ED 33 02 -      ADDCYC(2)
  646 D1:BCD7 C3 1B B9 D1     jp i6502NextLoad
  647 D1:BCDB -  -  -  -  
  648 D1:BCDB -  -  -  -  ;zeropage	LDX oper	A6	2	3 
  649 D1:BCDB -  -  -  -  inst6502_ldx_zp:
  650 D1:BCDB 7E -  -  -      ld  a,(hl)
  651 D1:BCDC 01 00 38 D0     ld  bc,ZEROPAGE
  652 D1:BCE0 81 -  -  -      add a,c
  653 D1:BCE1 4F -  -  -      ld  c,a
  654 D1:BCE2 0A -  -  -      ld  a,(bc)
  655 D1:BCE3 DD 77 01 -      ld  (ix+REGX),a
  656 D1:BCE6 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  657 D1:BCFA ED 33 03 -      ADDCYC(3)
  658 D1:BCFD C3 1B B9 D1     jp i6502NextLoad
  659 D1:BD01 -  -  -  -  
  660 D1:BD01 -  -  -  -  ;zeropage,Y	LDX oper,Y	B6	2	4  
  661 D1:BD01 -  -  -  -  inst6502_ldx_zpy:
  662 D1:BD01 7E -  -  -      ld  a,(hl)
  663 D1:BD02 01 00 38 D0     ld  bc,ZEROPAGE
  664 D1:BD06 81 -  -  -      add a,c
  665 D1:BD07 DD 86 02 -      add a,(ix+REGY)
  666 D1:BD0A 4F -  -  -      ld  c,a
  667 D1:BD0B 0A -  -  -      ld  a,(bc)
  668 D1:BD0C DD 77 01 -      ld  (ix+REGX),a
  669 D1:BD0F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  670 D1:BD23 ED 33 04 -      ADDCYC(4)
  671 D1:BD26 C3 1B B9 D1     jp i6502NextLoad
  672 D1:BD2A -  -  -  -  
  673 D1:BD2A -  -  -  -  ;absolute	LDX oper	AE	3	4  
  674 D1:BD2A -  -  -  -  inst6502_ldx_abs:
  675 D1:BD2A CD CA B9 D1     call subroutine6502_abs_split_start
  676 D1:BD2E E5 -  -  -      push hl
  677 D1:BD2F 50 -  -  -          ld  d,b
  678 D1:BD30 79 -  -  -          ld  a,c
  679 D1:BD31 0E 0C -  -          ld  c,BASETABLE_STRIDE
  680 D1:BD33 ED 4C -  -          mlt bc
  681 D1:BD35 21 00 40 D0         ld  hl,PAGETABLE
  682 D1:BD39 09 -  -  -          add hl,bc
  683 D1:BD3A ED 27 -  -          ld  hl,(hl)
  684 D1:BD3C 06 00 -  -          ld  b,0
  685 D1:BD3E 4F -  -  -          ld  c,a
  686 D1:BD3F 09 -  -  -          add hl,bc   ;full address
  687 D1:BD40 CD D8 AF D1         READ_ACCESS
  688 D1:BD44 DD 77 01 -          ld (ix+REGX),a
  689 D1:BD47 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  690 D1:BD5B ED 33 04 -          ADDCYC(4)
  691 D1:BD5E E1 -  -  -      pop hl
  692 D1:BD5F C3 1B B9 D1     jp i6502NextLoad
  693 D1:BD63 -  -  -  -  
  694 D1:BD63 -  -  -  -  ;absolute,Y	LDX oper,Y	BE	3	4* 
  695 D1:BD63 -  -  -  -  inst6502_ldx_absy:
  696 D1:BD63 ED 33 04 -      ADDCYC(4)
  697 D1:BD66 CD E6 B9 D1     PUSH_ABSYSPLIT
  698 D1:BD6A CD D8 AF D1         READ_ACCESS
  699 D1:BD6E DD 77 01 -          ld (ix+REGX),a
  700 D1:BD71 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  701 D1:BD85 E1 -  -  -      pop hl
  702 D1:BD86 C3 1B B9 D1     jp i6502NextLoad
  703 D1:BD8A -  -  -  -  
  704 D1:BD8A -  -  -  -  ;-----------------------------------------------------------------------------
  705 D1:BD8A -  -  -  -  ;LDY -  Load Index Y with Memory
  706 D1:BD8A -  -  -  -  ;    M -> Y
  707 D1:BD8A -  -  -  -  ;    N	Z	C	I	D	V
  708 D1:BD8A -  -  -  -  ;    +	+	-	-	-	-
  709 D1:BD8A -  -  -  -  
  710 D1:BD8A -  -  -  -  ;immediate	LDY #oper	A0	2	2  
  711 D1:BD8A -  -  -  -  inst6502_ldy_imm:
  712 D1:BD8A 7E -  -  -      ld  a,(hl)
  713 D1:BD8B DD 77 02 -      ld  (ix+REGY),a
  714 D1:BD8E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  715 D1:BDA2 ED 33 02 -      ADDCYC(2)
  716 D1:BDA5 C3 1B B9 D1     jp i6502NextLoad
  717 D1:BDA9 -  -  -  -  
  718 D1:BDA9 -  -  -  -  ;zeropage	LDY oper	A4	2	3  
  719 D1:BDA9 -  -  -  -  inst6502_ldy_zp:
  720 D1:BDA9 7E -  -  -      ld  a,(hl)
  721 D1:BDAA 01 00 38 D0     ld  bc,ZEROPAGE
  722 D1:BDAE 81 -  -  -      add a,c
  723 D1:BDAF 4F -  -  -      ld  c,a
  724 D1:BDB0 0A -  -  -      ld  a,(bc)
  725 D1:BDB1 DD 77 02 -      ld  (ix+REGY),a
  726 D1:BDB4 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  727 D1:BDC8 ED 33 03 -      ADDCYC(3)
  728 D1:BDCB C3 1B B9 D1     jp i6502NextLoad
  729 D1:BDCF -  -  -  -  
  730 D1:BDCF -  -  -  -  ;zeropage,X	LDY oper,X	B4	2	4  
  731 D1:BDCF -  -  -  -  inst6502_ldy_zpx:
  732 D1:BDCF 7E -  -  -      ld  a,(hl)
  733 D1:BDD0 01 00 38 D0     ld  bc,ZEROPAGE
  734 D1:BDD4 81 -  -  -      add a,c
  735 D1:BDD5 DD 86 01 -      add a,(ix+REGX)
  736 D1:BDD8 4F -  -  -      ld  c,a
  737 D1:BDD9 0A -  -  -      ld  a,(bc)
  738 D1:BDDA DD 77 02 -      ld  (ix+REGY),a
  739 D1:BDDD DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  740 D1:BDF1 ED 33 04 -      ADDCYC(4)
  741 D1:BDF4 C3 1B B9 D1     jp i6502NextLoad
  742 D1:BDF8 -  -  -  -  
  743 D1:BDF8 -  -  -  -  ;absolute	LDY oper	AC	3	4  
  744 D1:BDF8 -  -  -  -  inst6502_ldy_abs:
  745 D1:BDF8 CD CA B9 D1     call subroutine6502_abs_split_start
  746 D1:BDFC E5 -  -  -      push hl
  747 D1:BDFD 50 -  -  -          ld  d,b
  748 D1:BDFE 79 -  -  -          ld  a,c
  749 D1:BDFF 0E 0C -  -          ld  c,BASETABLE_STRIDE
  750 D1:BE01 ED 4C -  -          mlt bc
  751 D1:BE03 21 00 40 D0         ld  hl,PAGETABLE
  752 D1:BE07 09 -  -  -          add hl,bc
  753 D1:BE08 ED 27 -  -          ld  hl,(hl)
  754 D1:BE0A 06 00 -  -          ld  b,0
  755 D1:BE0C 4F -  -  -          ld  c,a
  756 D1:BE0D 09 -  -  -          add hl,bc   ;full address
  757 D1:BE0E CD D8 AF D1         READ_ACCESS
  758 D1:BE12 DD 77 02 -          ld (ix+REGY),a
  759 D1:BE15 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  760 D1:BE29 ED 33 04 -          ADDCYC(4)
  761 D1:BE2C E1 -  -  -      pop hl
  762 D1:BE2D C3 1B B9 D1     jp i6502NextLoad
  763 D1:BE31 -  -  -  -  
  764 D1:BE31 -  -  -  -  ;absolute,X	LDY oper,X	BC	3	4* 
  765 D1:BE31 -  -  -  -  inst6502_ldy_absx:
  766 D1:BE31 ED 33 04 -      ADDCYC(4)
  767 D1:BE34 CD EB B9 D1     PUSH_ABSXSPLIT
  768 D1:BE38 CD D8 AF D1         READ_ACCESS
  769 D1:BE3C DD 77 02 -          ld (ix+REGY),a
  770 D1:BE3F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  771 D1:BE53 E1 -  -  -      pop hl
  772 D1:BE54 C3 1B B9 D1     jp i6502NextLoad
  773 D1:BE58 -  -  -  -  
  774 D1:BE58 -  -  -  -  ;-----------------------------------------------------------------------------
  775 D1:BE58 -  -  -  -  ;STA - Store Accumulator in Memory
  776 D1:BE58 -  -  -  -  ;    A -> M
  777 D1:BE58 -  -  -  -  ;    N	Z	C	I	D	V
  778 D1:BE58 -  -  -  -  ;    -	-	-	-	-	-
  779 D1:BE58 -  -  -  -  
  780 D1:BE58 -  -  -  -  ;zeropage	STA oper	85	2	3  
  781 D1:BE58 -  -  -  -  inst6502_sta_zp:
  782 D1:BE58 7E -  -  -      ld  a,(hl)
  783 D1:BE59 01 00 38 D0     ld  bc,ZEROPAGE
  784 D1:BE5D 81 -  -  -      add a,c
  785 D1:BE5E 4F -  -  -      ld  c,a
  786 D1:BE5F DD 7E 00 -      ld  a,(ix+REGA)
  787 D1:BE62 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  788 D1:BE63 ED 33 03 -      ADDCYC(3)
  789 D1:BE66 C3 1B B9 D1     jp i6502NextLoad
  790 D1:BE6A -  -  -  -  
  791 D1:BE6A -  -  -  -  ;zeropage,X	STA oper,X	95	2	4  
  792 D1:BE6A -  -  -  -  inst6502_sta_zpx:
  793 D1:BE6A 7E -  -  -      ld  a,(hl)
  794 D1:BE6B 01 00 38 D0     ld  bc,ZEROPAGE
  795 D1:BE6F 81 -  -  -      add a,c
  796 D1:BE70 DD 86 01 -      add a,(ix+REGX)
  797 D1:BE73 4F -  -  -      ld  c,a
  798 D1:BE74 DD 7E 00 -      ld  a,(ix+REGA)
  799 D1:BE77 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  800 D1:BE78 ED 33 04 -      ADDCYC(4)
  801 D1:BE7B C3 1B B9 D1     jp i6502NextLoad
  802 D1:BE7F -  -  -  -  
  803 D1:BE7F -  -  -  -  ;absolute	STA oper	8D	3	4
  804 D1:BE7F -  -  -  -  inst6502_sta_abs:
  805 D1:BE7F CD CA B9 D1     call subroutine6502_abs_split_start
  806 D1:BE83 E5 -  -  -      push hl
  807 D1:BE84 50 -  -  -          ld  d,b
  808 D1:BE85 79 -  -  -          ld  a,c
  809 D1:BE86 0E 0C -  -          ld  c,BASETABLE_STRIDE
  810 D1:BE88 ED 4C -  -          mlt bc
  811 D1:BE8A 21 00 40 D0         ld  hl,PAGETABLE
  812 D1:BE8E 09 -  -  -          add hl,bc
  813 D1:BE8F ED 27 -  -          ld  hl,(hl)
  814 D1:BE91 06 00 -  -          ld  b,0
  815 D1:BE93 4F -  -  -          ld  c,a
  816 D1:BE94 09 -  -  -          add hl,bc   ;full address
  817 D1:BE95 DD 46 00 -          ld  b,(ix+REGA)
  818 D1:BE98 CD 80 B0 D1         WRITE_ACCESS
  819 D1:BE9C ED 33 04 -          ADDCYC(4)
  820 D1:BE9F E1 -  -  -      pop hl
  821 D1:BEA0 C3 1B B9 D1     jp i6502NextLoad
  822 D1:BEA4 -  -  -  -  
  823 D1:BEA4 -  -  -  -  ;absolute,X	STA oper,X	9D	3	5  
  824 D1:BEA4 -  -  -  -  inst6502_sta_absx:
  825 D1:BEA4 ED 33 05 -      ADDCYC(5)
  826 D1:BEA7 CD 27 BA D1     PUSH_ABSXSPLIT_NODEP
  827 D1:BEAB DD 46 00 -          ld  b,(ix+REGA)
  828 D1:BEAE CD 80 B0 D1         WRITE_ACCESS
  829 D1:BEB2 E1 -  -  -      pop hl
  830 D1:BEB3 C3 1B B9 D1     jp i6502NextLoad
  831 D1:BEB7 -  -  -  -  
  832 D1:BEB7 -  -  -  -  ;absolute,Y	STA oper,Y	99	3	5  
  833 D1:BEB7 -  -  -  -  inst6502_sta_absy:
  834 D1:BEB7 ED 33 05 -      ADDCYC(5)
  835 D1:BEBA CD 22 BA D1     PUSH_ABSYSPLIT_NODEP
  836 D1:BEBE DD 46 00 -          ld  b,(ix+REGA)
  837 D1:BEC1 CD 80 B0 D1         WRITE_ACCESS
  838 D1:BEC5 E1 -  -  -      pop hl
  839 D1:BEC6 C3 1B B9 D1     jp i6502NextLoad
  840 D1:BECA -  -  -  -  
  841 D1:BECA -  -  -  -  ;(indirect,X)	STA (oper,X)	81	2	6  
  842 D1:BECA -  -  -  -  inst6502_sta_indx:
  843 D1:BECA E5 -  -  -      push hl
  844 D1:BECB 7E -  -  -          ld  a,(hl)
  845 D1:BECC 21 00 38 D0         ld  hl,ZEROPAGE
  846 D1:BED0 85 -  -  -          add a,L
  847 D1:BED1 DD 86 01 -          add a,(ix+REGX)
  848 D1:BED4 6F -  -  -          ld  L,a
  849 D1:BED5 7E -  -  -          ld  a,(hl)
  850 D1:BED6 2C -  -  -          inc L
  851 D1:BED7 56 -  -  -          ld  d,(hl)
  852 D1:BED8 42 -  -  -          ld  b,d
  853 D1:BED9 0E 0C -  -          ld  c,BASETABLE_STRIDE
  854 D1:BEDB ED 4C -  -          mlt bc
  855 D1:BEDD 21 00 40 D0         ld  hl,PAGETABLE
  856 D1:BEE1 09 -  -  -          add hl,bc
  857 D1:BEE2 ED 27 -  -          ld  hl,(hl)
  858 D1:BEE4 06 00 -  -          ld  b,0
  859 D1:BEE6 4F -  -  -          ld  c,a
  860 D1:BEE7 09 -  -  -          add hl,bc
  861 D1:BEE8 DD 46 00 -          ld  b,(ix+REGA)
  862 D1:BEEB CD 80 B0 D1         WRITE_ACCESS
  863 D1:BEEF ED 33 06 -          ADDCYC(6)
  864 D1:BEF2 E1 -  -  -      pop hl
  865 D1:BEF3 C3 1B B9 D1     jp i6502NextLoad
  866 D1:BEF7 -  -  -  -  
  867 D1:BEF7 -  -  -  -  ;(indirect),Y	STA (oper),Y	91	2	6  
  868 D1:BEF7 -  -  -  -  inst6502_sta_indy:
  869 D1:BEF7 E5 -  -  -      push hl
  870 D1:BEF8 7E -  -  -          ld  a,(hl)
  871 D1:BEF9 21 00 38 D0         ld  hl,ZEROPAGE
  872 D1:BEFD 85 -  -  -          add a,L
  873 D1:BEFE 6F -  -  -          ld  L,a
  874 D1:BEFF 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  875 D1:BF00 2C -  -  -          inc L
  876 D1:BF01 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  877 D1:BF04 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  878 D1:BF05 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  879 D1:BF07 24 -  -  -          inc h
  880 D1:BF08 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  881 D1:BF09 2E 0C -  -          ld  L,BASETABLE_STRIDE
  882 D1:BF0B ED 6C -  -          mlt hl          ;23.
  883 D1:BF0D 01 00 40 D0         ld  bc,PAGETABLE
  884 D1:BF11 09 -  -  -          add hl,bc
  885 D1:BF12 ED 27 -  -          ld  hl,(hl)     ;address get.
  886 D1:BF14 01 00 00 00         ld  bc,0
  887 D1:BF18 4F -  -  -          ld  c,a
  888 D1:BF19 09 -  -  -          add hl,bc       ;Full address get.
  889 D1:BF1A DD 46 00 -          ld  b,(ix+REGA)
  890 D1:BF1D CD 80 B0 D1         WRITE_ACCESS
  891 D1:BF21 ED 33 06 -          ADDCYC(6)
  892 D1:BF24 E1 -  -  -      pop hl
  893 D1:BF25 C3 1B B9 D1     jp i6502NextLoad
  894 D1:BF29 -  -  -  -  
  895 D1:BF29 -  -  -  -  ;-----------------------------------------------------------------------------
  896 D1:BF29 -  -  -  -  ;STX - Store Index X in Memory
  897 D1:BF29 -  -  -  -  ;    X -> M
  898 D1:BF29 -  -  -  -  ;    N	Z	C	I	D	V
  899 D1:BF29 -  -  -  -  ;    -	-	-	-	-	-
  900 D1:BF29 -  -  -  -  
  901 D1:BF29 -  -  -  -  ;zeropage	STX oper	86	2	3  
  902 D1:BF29 -  -  -  -  inst6502_stx_zp:
  903 D1:BF29 7E -  -  -      ld  a,(hl)
  904 D1:BF2A 01 00 38 D0     ld  bc,ZEROPAGE
  905 D1:BF2E 81 -  -  -      add a,c
  906 D1:BF2F 4F -  -  -      ld  c,a
  907 D1:BF30 DD 7E 01 -      ld  a,(ix+REGX)
  908 D1:BF33 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  909 D1:BF34 ED 33 03 -      ADDCYC(3)
  910 D1:BF37 C3 1B B9 D1     jp i6502NextLoad
  911 D1:BF3B -  -  -  -  
  912 D1:BF3B -  -  -  -  ;zeropage,Y	STX oper,Y	96	2	4  
  913 D1:BF3B -  -  -  -  inst6502_stx_zpy:
  914 D1:BF3B 7E -  -  -      ld  a,(hl)
  915 D1:BF3C 01 00 38 D0     ld  bc,ZEROPAGE
  916 D1:BF40 81 -  -  -      add a,c
  917 D1:BF41 DD 86 02 -      add a,(ix+REGY)
  918 D1:BF44 4F -  -  -      ld  c,a
  919 D1:BF45 DD 7E 01 -      ld  a,(ix+REGX)
  920 D1:BF48 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  921 D1:BF49 ED 33 04 -      ADDCYC(4)
  922 D1:BF4C C3 1B B9 D1     jp i6502NextLoad
  923 D1:BF50 -  -  -  -  
  924 D1:BF50 -  -  -  -  ;absolute	STX oper	8E	3	4  
  925 D1:BF50 -  -  -  -  inst6502_stx_abs:
  926 D1:BF50 CD CA B9 D1     call subroutine6502_abs_split_start
  927 D1:BF54 E5 -  -  -      push hl
  928 D1:BF55 50 -  -  -          ld  d,b
  929 D1:BF56 79 -  -  -          ld  a,c
  930 D1:BF57 0E 0C -  -          ld  c,BASETABLE_STRIDE
  931 D1:BF59 ED 4C -  -          mlt bc
  932 D1:BF5B 21 00 40 D0         ld  hl,PAGETABLE
  933 D1:BF5F 09 -  -  -          add hl,bc
  934 D1:BF60 ED 27 -  -          ld  hl,(hl)
  935 D1:BF62 06 00 -  -          ld  b,0
  936 D1:BF64 4F -  -  -          ld  c,a
  937 D1:BF65 09 -  -  -          add hl,bc   ;full address
  938 D1:BF66 DD 46 01 -          ld  b,(ix+REGX)
  939 D1:BF69 CD 80 B0 D1         WRITE_ACCESS
  940 D1:BF6D ED 33 04 -          ADDCYC(4)
  941 D1:BF70 E1 -  -  -      pop hl
  942 D1:BF71 C3 1B B9 D1     jp i6502NextLoad
  943 D1:BF75 -  -  -  -  
  944 D1:BF75 -  -  -  -  ;-----------------------------------------------------------------------------
  945 D1:BF75 -  -  -  -  ;STY - Store Index Y in Memory
  946 D1:BF75 -  -  -  -  ;    Y -> M
  947 D1:BF75 -  -  -  -  ;    N	Z	C	I	D	V
  948 D1:BF75 -  -  -  -  ;    -	-	-	-	-	-
  949 D1:BF75 -  -  -  -  
  950 D1:BF75 -  -  -  -  ;zeropage	STY oper	84	2	3  
  951 D1:BF75 -  -  -  -  inst6502_sty_zp:
  952 D1:BF75 7E -  -  -      ld  a,(hl)
  953 D1:BF76 01 00 38 D0     ld  bc,ZEROPAGE
  954 D1:BF7A 81 -  -  -      add a,c
  955 D1:BF7B 4F -  -  -      ld  c,a
  956 D1:BF7C DD 7E 02 -      ld  a,(ix+REGY)
  957 D1:BF7F 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  958 D1:BF80 ED 33 03 -      ADDCYC(3)
  959 D1:BF83 C3 1B B9 D1     jp i6502NextLoad
  960 D1:BF87 -  -  -  -  
  961 D1:BF87 -  -  -  -  ;zeropage,X	STY oper,X	94	2	4  
  962 D1:BF87 -  -  -  -  inst6502_sty_zpx:
  963 D1:BF87 7E -  -  -      ld  a,(hl)
  964 D1:BF88 01 00 38 D0     ld  bc,ZEROPAGE
  965 D1:BF8C 81 -  -  -      add a,c
  966 D1:BF8D DD 86 01 -      add a,(ix+REGX)
  967 D1:BF90 4F -  -  -      ld  c,a
  968 D1:BF91 DD 7E 02 -      ld  a,(ix+REGY)
  969 D1:BF94 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  970 D1:BF95 ED 33 04 -      ADDCYC(4)
  971 D1:BF98 C3 1B B9 D1     jp i6502NextLoad
  972 D1:BF9C -  -  -  -  
  973 D1:BF9C -  -  -  -  ;absolute	STY oper	8C	3	4  
  974 D1:BF9C -  -  -  -  inst6502_sty_abs:
  975 D1:BF9C CD CA B9 D1     call subroutine6502_abs_split_start
  976 D1:BFA0 E5 -  -  -      push hl
  977 D1:BFA1 50 -  -  -          ld  d,b
  978 D1:BFA2 79 -  -  -          ld  a,c
  979 D1:BFA3 0E 0C -  -          ld  c,BASETABLE_STRIDE
  980 D1:BFA5 ED 4C -  -          mlt bc
  981 D1:BFA7 21 00 40 D0         ld  hl,PAGETABLE
  982 D1:BFAB 09 -  -  -          add hl,bc
  983 D1:BFAC ED 27 -  -          ld  hl,(hl)
  984 D1:BFAE 06 00 -  -          ld  b,0
  985 D1:BFB0 4F -  -  -          ld  c,a
  986 D1:BFB1 09 -  -  -          add hl,bc   ;full address
  987 D1:BFB2 DD 46 02 -          ld  b,(ix+REGY)
  988 D1:BFB5 CD 80 B0 D1         WRITE_ACCESS
  989 D1:BFB9 ED 33 04 -          ADDCYC(4)
  990 D1:BFBC E1 -  -  -      pop hl
  991 D1:BFBD C3 1B B9 D1     jp i6502NextLoad
  992 D1:BFC1 -  -  -  -  
  993 D1:BFC1 -  -  -  -  ;-----------------------------------------------------------------------------
  994 D1:BFC1 -  -  -  -  ;TAX - Transfer Accumulator to Index X [A -> X]
  995 D1:BFC1 -  -  -  -  ;N	Z	C	I	D	V
  996 D1:BFC1 -  -  -  -  ;+	+	-	-	-	-
  997 D1:BFC1 -  -  -  -  ;implied	TAX	AA	1	2
  998 D1:BFC1 -  -  -  -  inst6502_tax:
  999 D1:BFC1 DD 7E 00 -      ld  a,(ix+REGA)
 1000 D1:BFC4 DD 77 01 -      ld  (ix+REGX),a
 1001 D1:BFC7 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1002 D1:BFDB ED 33 02 -      ADDCYC(2)
 1003 D1:BFDE C3 34 B9 D1     jp i6502FinishLoad
 1004 D1:BFE2 -  -  -  -  
 1005 D1:BFE2 -  -  -  -  ;TAY - Transfer Accumulator to Index Y [A -> Y]
 1006 D1:BFE2 -  -  -  -  ;N	Z	C	I	D	V
 1007 D1:BFE2 -  -  -  -  ;+	+	-	-	-	-
 1008 D1:BFE2 -  -  -  -  ;implied	TAY	A8	1	2
 1009 D1:BFE2 -  -  -  -  inst6502_tay:
 1010 D1:BFE2 DD 7E 00 -      ld  a,(ix+REGA)
 1011 D1:BFE5 DD 77 02 -      ld  (ix+REGY),a
 1012 D1:BFE8 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1013 D1:BFFC ED 33 02 -      ADDCYC(2)
 1014 D1:BFFF C3 34 B9 D1     jp i6502FinishLoad
 1015 D1:C003 -  -  -  -  
 1016 D1:C003 -  -  -  -  ;TSX - Transfer Stack Pointer to Index X [SP -> X]
 1017 D1:C003 -  -  -  -  ;N	Z	C	I	D	V
 1018 D1:C003 -  -  -  -  ;+	+	-	-	-	-
 1019 D1:C003 -  -  -  -  ;implied	TSX	BA	1	2
 1020 D1:C003 -  -  -  -  inst6502_tsx:
 1021 D1:C003 DD 7E 03 -      ld  a,(ix+REGSP)
 1022 D1:C006 DD 77 01 -      ld  (ix+REGX),a
 1023 D1:C009 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1024 D1:C01D ED 33 02 -      ADDCYC(2)
 1025 D1:C020 C3 34 B9 D1     jp i6502FinishLoad
 1026 D1:C024 -  -  -  -  
 1027 D1:C024 -  -  -  -  ;TXA - Transfer Index X to Accumulator [X -> A]
 1028 D1:C024 -  -  -  -  ;N	Z	C	I	D	V
 1029 D1:C024 -  -  -  -  ;+	+	-	-	-	-
 1030 D1:C024 -  -  -  -  ;implied	TXA	8A	1	2
 1031 D1:C024 -  -  -  -  inst6502_txa:
 1032 D1:C024 DD 7E 01 -      ld  a,(ix+REGX)
 1033 D1:C027 DD 77 00 -      ld  (ix+REGA),a
 1034 D1:C02A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1035 D1:C03E ED 33 02 -      ADDCYC(2)
 1036 D1:C041 C3 34 B9 D1     jp i6502FinishLoad
 1037 D1:C045 -  -  -  -  
 1038 D1:C045 -  -  -  -  ;TXS - Transfer Index X to Stack Pointer [X -> SP]
 1039 D1:C045 -  -  -  -  ;N	Z	C	I	D	V
 1040 D1:C045 -  -  -  -  ;-	-	-	-	-	-
 1041 D1:C045 -  -  -  -  ;implied	TXS	9A	1	2
 1042 D1:C045 -  -  -  -  inst6502_txs:
 1043 D1:C045 DD 7E 01 -      ld  a,(ix+REGX)
 1044 D1:C048 DD 77 03 -      ld  (ix+REGSP),a
 1045 D1:C04B ED 33 02 -      ADDCYC(2)
 1046 D1:C04E C3 34 B9 D1     jp i6502FinishLoad
 1047 D1:C052 -  -  -  -  
 1048 D1:C052 -  -  -  -  ;TYA - Transfer Index Y to Accumulator [Y -> A]
 1049 D1:C052 -  -  -  -  ;N	Z	C	I	D	V
 1050 D1:C052 -  -  -  -  ;+	+	-	-	-	-
 1051 D1:C052 -  -  -  -  ;implied	TYA	98	1	2
 1052 D1:C052 -  -  -  -  inst6502_tya:
 1053 D1:C052 DD 7E 02 -      ld  a,(ix+REGY)
 1054 D1:C055 DD 77 00 -      ld  (ix+REGA),a
 1055 D1:C058 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1056 D1:C06C ED 33 02 -      ADDCYC(2)
 1057 D1:C06F C3 34 B9 D1     jp i6502FinishLoad
 1058 D1:C073 -  -  -  -  
 1059 D1:C073 -  -  -  -  ;-----------------------------------------------------------------------------
 1060 D1:C073 -  -  -  -  ;-----------------------------------------------------------------------------
 1061 D1:C073 -  -  -  -  ;-----------------------------------------------------------------------------
 1062 D1:C073 -  -  -  -  ;Instructions by type: Stack Instructions
 1063 D1:C073 -  -  -  -  ;PHA - Push Accumulator on Stack
 1064 D1:C073 -  -  -  -  ;    push A
 1065 D1:C073 -  -  -  -  ;    N	Z	C	I	D	V
 1066 D1:C073 -  -  -  -  ;    -	-	-	-	-	-
 1067 D1:C073 -  -  -  -  ;implied	PHA	48	1	3 
 1068 D1:C073 -  -  -  -  inst6502_pha:
 1069 D1:C073 ED 33 03 -      ADDCYC(3)
 1070 D1:C076 DD 7E 00 -      ld  a,(ix+REGA)
 1071 D1:C079 01 00 39 D0     ld  bc,STACKBASE
 1072 D1:C07D DD 4E 03 -      ld  c,(ix+REGSP)
 1073 D1:C080 02 -  -  -      ld  (bc),a
 1074 D1:C081 0D -  -  -      dec c
 1075 D1:C082 DD 71 03 -      ld  (ix+REGSP),c
 1076 D1:C085 C3 34 B9 D1     jp i6502FinishLoad
 1077 D1:C089 -  -  -  -  
 1078 D1:C089 -  -  -  -  ;PHP - Push Processor Status on Stack
 1079 D1:C089 -  -  -  -  ;    The status register will be pushed with the break
 1080 D1:C089 -  -  -  -  ;    flag and bit 5 set to 1.
 1081 D1:C089 -  -  -  -  ;    push SR
 1082 D1:C089 -  -  -  -  ;    N	Z	C	I	D	V
 1083 D1:C089 -  -  -  -  ;    -	-	-	-	-	-
 1084 D1:C089 -  -  -  -  ;implied	PHP	08	1	3  
 1085 D1:C089 -  -  -  -  inst6502_php:
 1086 D1:C089 ED 33 03 -      ADDCYC(3)
 1087 D1:C08C DD 7E 04 -      ld  a,(ix+REGSR)
 1088 D1:C08F F6 30 -  -      or  a,%00110000
 1089 D1:C091 01 00 39 D0     ld  bc,STACKBASE
 1090 D1:C095 DD 4E 03 -      ld  c,(ix+REGSP)
 1091 D1:C098 02 -  -  -      ld  (bc),a
 1092 D1:C099 0D -  -  -      dec c
 1093 D1:C09A DD 71 03 -      ld  (ix+REGSP),c
 1094 D1:C09D C3 34 B9 D1     jp i6502FinishLoad
 1095 D1:C0A1 -  -  -  -  
 1096 D1:C0A1 -  -  -  -  
 1097 D1:C0A1 -  -  -  -  
 1098 D1:C0A1 -  -  -  -  ;PLA - Pull Accumulator from Stack
 1099 D1:C0A1 -  -  -  -  ;    pull A
 1100 D1:C0A1 -  -  -  -  ;    N	Z	C	I	D	V
 1101 D1:C0A1 -  -  -  -  ;    +	+	-	-	-	-
 1102 D1:C0A1 -  -  -  -  ;implied	PLA	68	1	4  
 1103 D1:C0A1 -  -  -  -  inst6502_pla:
 1104 D1:C0A1 ED 33 04 -      ADDCYC(4)
 1105 D1:C0A4 01 00 39 D0     ld  bc,STACKBASE
 1106 D1:C0A8 DD 4E 03 -      ld  c,(ix+REGSP)
 1107 D1:C0AB 0C -  -  -      inc c
 1108 D1:C0AC 0A -  -  -      ld  a,(bc)
 1109 D1:C0AD DD 71 03 -      ld  (ix+REGSP),c
 1110 D1:C0B0 DD 77 00 -      ld  (ix+REGA),a
 1111 D1:C0B3 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1112 D1:C0C7 C3 34 B9 D1     jp i6502FinishLoad
 1113 D1:C0CB -  -  -  -  
 1114 D1:C0CB -  -  -  -  ;PLP - Pull Processor Status from Stack
 1115 D1:C0CB -  -  -  -  ;    The status register will be pulled with the break
 1116 D1:C0CB -  -  -  -  ;    flag and bit 5 ignored.
 1117 D1:C0CB -  -  -  -  ;    pull SR
 1118 D1:C0CB -  -  -  -  ;    N	Z	C	I	D	V
 1119 D1:C0CB -  -  -  -  ;    from stack
 1120 D1:C0CB -  -  -  -  ;implied	PLP	28	1	4  
 1121 D1:C0CB -  -  -  -  inst6502_plp:
 1122 D1:C0CB ED 33 04 -      ADDCYC(4)
 1123 D1:C0CE 01 00 39 D0     ld  bc,STACKBASE
 1124 D1:C0D2 DD 4E 03 -      ld  c,(ix+REGSP)
 1125 D1:C0D5 0C -  -  -      inc c
 1126 D1:C0D6 0A -  -  -      ld  a,(bc)
 1127 D1:C0D7 DD 71 03 -      ld  (ix+REGSP),c
 1128 D1:C0DA DD 46 04 -      ld  b,(ix+REGSR)
 1129 D1:C0DD A8 -  -  -      xor a,b
 1130 D1:C0DE E6 CF -  -      and a,%11001111
 1131 D1:C0E0 A8 -  -  -      xor a,b
 1132 D1:C0E1 DD 77 04 -      ld  (ix+REGSR),a
 1133 D1:C0E4 C3 34 B9 D1     jp i6502FinishLoad
 1134 D1:C0E8 -  -  -  -  
 1135 D1:C0E8 -  -  -  -  
 1136 D1:C0E8 -  -  -  -  ;-----------------------------------------------------------------------------
 1137 D1:C0E8 -  -  -  -  ;-----------------------------------------------------------------------------
 1138 D1:C0E8 -  -  -  -  ;-----------------------------------------------------------------------------
 1139 D1:C0E8 -  -  -  -  ;Instructions by type: Decrements and Increments
 1140 D1:C0E8 -  -  -  -  
 1141 D1:C0E8 -  -  -  -  ;DEC -  Decrement Memory by One
 1142 D1:C0E8 -  -  -  -  ;    M - 1 -> M
 1143 D1:C0E8 -  -  -  -  ;    N	Z	C	I	D	V
 1144 D1:C0E8 -  -  -  -  ;    +	+	-	-	-	-
 1145 D1:C0E8 -  -  -  -  ;    addressing	assembler	opc	bytes	cycles
 1146 D1:C0E8 -  -  -  -  
 1147 D1:C0E8 -  -  -  -  ;    zeropage	DEC oper	C6	2	5  
 1148 D1:C0E8 -  -  -  -  inst6502_dec_zp:
 1149 D1:C0E8 7E -  -  -      ld  a,(hl)
 1150 D1:C0E9 01 00 38 D0     ld  bc,ZEROPAGE
 1151 D1:C0ED 81 -  -  -      add a,c
 1152 D1:C0EE 4F -  -  -      ld  c,a
 1153 D1:C0EF 0A -  -  -      ld  a,(bc)
 1154 D1:C0F0 3D -  -  -      dec a
 1155 D1:C0F1 02 -  -  -      ld  (bc),a
 1156 D1:C0F2 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1157 D1:C106 ED 33 05 -      ADDCYC(5)
 1158 D1:C109 C3 1B B9 D1     jp i6502NextLoad
 1159 D1:C10D -  -  -  -  
 1160 D1:C10D -  -  -  -  ;    zeropage,X	DEC oper,X	D6	2	6  
 1161 D1:C10D -  -  -  -  inst6502_dec_zpx:
 1162 D1:C10D 7E -  -  -      ld  a,(hl)
 1163 D1:C10E 01 00 38 D0     ld  bc,ZEROPAGE
 1164 D1:C112 81 -  -  -      add a,c
 1165 D1:C113 DD 86 01 -      add a,(ix+REGX)
 1166 D1:C116 4F -  -  -      ld  c,a
 1167 D1:C117 0A -  -  -      ld  a,(bc)
 1168 D1:C118 3D -  -  -      dec a
 1169 D1:C119 02 -  -  -      ld  (bc),a
 1170 D1:C11A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1171 D1:C12E ED 33 06 -      ADDCYC(6)
 1172 D1:C131 C3 1B B9 D1     jp i6502NextLoad
 1173 D1:C135 -  -  -  -  
 1174 D1:C135 -  -  -  -  ;    absolute	DEC oper	CE	3	6  
 1175 D1:C135 -  -  -  -  inst6502_dec_abs:
 1176 D1:C135 CD CA B9 D1     call subroutine6502_abs_split_start
 1177 D1:C139 E5 -  -  -      push hl
 1178 D1:C13A 50 -  -  -          ld  d,b
 1179 D1:C13B 79 -  -  -          ld  a,c
 1180 D1:C13C 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1181 D1:C13E ED 4C -  -          mlt bc
 1182 D1:C140 21 00 40 D0         ld  hl,PAGETABLE
 1183 D1:C144 09 -  -  -          add hl,bc
 1184 D1:C145 ED 27 -  -          ld  hl,(hl)
 1185 D1:C147 06 00 -  -          ld  b,0
 1186 D1:C149 4F -  -  -          ld  c,a
 1187 D1:C14A 09 -  -  -          add hl,bc   ;full address
 1188 D1:C14B CD D8 AF D1         READ_ACCESS
 1189 D1:C14F 3D -  -  -          dec a
 1190 D1:C150 47 -  -  -          ld  b,a
 1191 D1:C151 -  -  -  -          ;
 1192 D1:C151 DD 7E 04 -          ld  a,(ix+REGSR)
 1193 D1:C154 CB 8F -  -          res SF_ZERO,a
 1194 D1:C156 20 02 -  -          jr  nz,$+4
 1195 D1:C158 CB CF -  -          set SF_ZERO,a
 1196 D1:C15A CB BF -  -          res SF_NEG,a
 1197 D1:C15C F2 62 C1 D1         jp  p,$+6
 1198 D1:C160 CB FF -  -          set SF_NEG,a
 1199 D1:C162 DD 77 04 -          ld  (ix+REGSR),a
 1200 D1:C165 -  -  -  -          ;
 1201 D1:C165 CD 80 B0 D1         WRITE_ACCESS
 1202 D1:C169 ED 33 06 -          ADDCYC(6)
 1203 D1:C16C E1 -  -  -      pop hl
 1204 D1:C16D C3 1B B9 D1     jp i6502NextLoad
 1205 D1:C171 -  -  -  -  
 1206 D1:C171 -  -  -  -  ;    absolute,X	DEC oper,X	DE	3	7  
 1207 D1:C171 -  -  -  -  inst6502_dec_absx:
 1208 D1:C171 ED 33 07 -      ADDCYC(7)
 1209 D1:C174 CD 27 BA D1     PUSH_ABSXSPLIT_NODEP
 1210 D1:C178 CD D8 AF D1         READ_ACCESS
 1211 D1:C17C 3D -  -  -          dec a
 1212 D1:C17D 47 -  -  -          ld  b,a
 1213 D1:C17E -  -  -  -          ;
 1214 D1:C17E DD 7E 04 -          ld  a,(ix+REGSR)
 1215 D1:C181 CB 8F -  -          res SF_ZERO,a
 1216 D1:C183 20 02 -  -          jr  nz,$+4
 1217 D1:C185 CB CF -  -          set SF_ZERO,a
 1218 D1:C187 CB BF -  -          res SF_NEG,a
 1219 D1:C189 F2 8F C1 D1         jp  p,$+6
 1220 D1:C18D CB FF -  -          set SF_NEG,a
 1221 D1:C18F DD 77 04 -          ld  (ix+REGSR),a
 1222 D1:C192 -  -  -  -          ;
 1223 D1:C192 CD 80 B0 D1         WRITE_ACCESS
 1224 D1:C196 E1 -  -  -      pop hl
 1225 D1:C197 C3 1B B9 D1     jp i6502NextLoad
 1226 D1:C19B -  -  -  -  
 1227 D1:C19B -  -  -  -  ;DEX - Decrement Index X by One [X - 1 -> X]
 1228 D1:C19B -  -  -  -  ;Flags altered: NZ
 1229 D1:C19B -  -  -  -  ;implied	DEX	CA	1	2  
 1230 D1:C19B -  -  -  -  inst6502_dex:
 1231 D1:C19B DD 35 01 -      dec (ix+REGX)
 1232 D1:C19E DD 7E 04 -  _:  ld  a,(ix+REGSR)
 1233 D1:C1A1 CB 8F -  -      res SF_ZERO,a
 1234 D1:C1A3 20 02 -  -      jr  nz,$+4
 1235 D1:C1A5 CB CF -  -      set SF_ZERO,a
 1236 D1:C1A7 CB BF -  -      res SF_NEG,a
 1237 D1:C1A9 F2 AF C1 D1     jp  p,$+6
 1238 D1:C1AD CB FF -  -      set SF_NEG,a
 1239 D1:C1AF DD 77 04 -      ld  (ix+REGSR),a
 1240 D1:C1B2 ED 33 02 -      ADDCYC(2)
 1241 D1:C1B5 C3 34 B9 D1     jp i6502FinishLoad
 1242 D1:C1B9 -  -  -  -  
 1243 D1:C1B9 -  -  -  -  ;DEY - Decrement Index Y by One [Y - 1 -> Y]
 1244 D1:C1B9 -  -  -  -  ;Flags altered: NZ
 1245 D1:C1B9 -  -  -  -  ;implied	DEY	88	1	2  
 1246 D1:C1B9 -  -  -  -  inst6502_dey:
 1247 D1:C1B9 DD 35 02 -      dec (ix+REGY)
 1248 D1:C1BC 18 E0 -  -      jr  -_
 1249 D1:C1BE -  -  -  -  
 1250 D1:C1BE -  -  -  -  
 1251 D1:C1BE -  -  -  -  ;INX - Increment Index X by One [X + 1 -> X]
 1252 D1:C1BE -  -  -  -  ;Flags altered: NZ
 1253 D1:C1BE -  -  -  -  ;implied	INX	E8	1	2  
 1254 D1:C1BE -  -  -  -  inst6502_inx:
 1255 D1:C1BE DD 34 01 -      inc (ix+REGX)
 1256 D1:C1C1 18 DB -  -      jr  -_
 1257 D1:C1C3 -  -  -  -  
 1258 D1:C1C3 -  -  -  -  
 1259 D1:C1C3 -  -  -  -  ;INY - Increment Index Y by One [Y + 1 -> Y]
 1260 D1:C1C3 -  -  -  -  ;Flags altered: NZ
 1261 D1:C1C3 -  -  -  -  ;implied	INY	C8	1	2  
 1262 D1:C1C3 -  -  -  -  inst6502_iny:
 1263 D1:C1C3 DD 34 02 -      inc (ix+REGY)
 1264 D1:C1C6 18 D6 -  -      jr  -_
 1265 D1:C1C8 -  -  -  -  
 1266 D1:C1C8 -  -  -  -  
 1267 D1:C1C8 -  -  -  -  ;INC - Increment Memory by One
 1268 D1:C1C8 -  -  -  -  ;    M + 1 -> M
 1269 D1:C1C8 -  -  -  -  ;    N	Z	C	I	D	V
 1270 D1:C1C8 -  -  -  -  ;    +	+	-	-	-	-
 1271 D1:C1C8 -  -  -  -  
 1272 D1:C1C8 -  -  -  -  ;zeropage	INC oper	E6	2	5  
 1273 D1:C1C8 -  -  -  -  inst6502_inc_zp:
 1274 D1:C1C8 7E -  -  -      ld  a,(hl)
 1275 D1:C1C9 01 00 38 D0     ld  bc,ZEROPAGE
 1276 D1:C1CD 81 -  -  -      add a,c
 1277 D1:C1CE 4F -  -  -      ld  c,a
 1278 D1:C1CF 0A -  -  -      ld  a,(bc)
 1279 D1:C1D0 3C -  -  -      inc a
 1280 D1:C1D1 02 -  -  -      ld  (bc),a
 1281 D1:C1D2 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1282 D1:C1E6 ED 33 05 -      ADDCYC(5)
 1283 D1:C1E9 C3 1B B9 D1     jp i6502NextLoad
 1284 D1:C1ED -  -  -  -  
 1285 D1:C1ED -  -  -  -  ;zeropage,X	INC oper,X	F6	2	6  
 1286 D1:C1ED -  -  -  -  inst6502_inc_zpx:
 1287 D1:C1ED 7E -  -  -      ld  a,(hl)
 1288 D1:C1EE 01 00 38 D0     ld  bc,ZEROPAGE
 1289 D1:C1F2 81 -  -  -      add a,c
 1290 D1:C1F3 DD 86 01 -      add a,(ix+REGX)
 1291 D1:C1F6 4F -  -  -      ld  c,a
 1292 D1:C1F7 0A -  -  -      ld  a,(bc)
 1293 D1:C1F8 3C -  -  -      inc a
 1294 D1:C1F9 02 -  -  -      ld  (bc),a
 1295 D1:C1FA DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1296 D1:C20E ED 33 06 -      ADDCYC(6)
 1297 D1:C211 C3 1B B9 D1     jp i6502NextLoad
 1298 D1:C215 -  -  -  -      
 1299 D1:C215 -  -  -  -  ;absolute	INC oper	EE	3	6
 1300 D1:C215 -  -  -  -  inst6502_inc_abs:
 1301 D1:C215 CD CA B9 D1     call subroutine6502_abs_split_start
 1302 D1:C219 E5 -  -  -      push hl
 1303 D1:C21A 50 -  -  -          ld  d,b
 1304 D1:C21B 79 -  -  -          ld  a,c
 1305 D1:C21C 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1306 D1:C21E ED 4C -  -          mlt bc
 1307 D1:C220 21 00 40 D0         ld  hl,PAGETABLE
 1308 D1:C224 09 -  -  -          add hl,bc
 1309 D1:C225 ED 27 -  -          ld  hl,(hl)
 1310 D1:C227 06 00 -  -          ld  b,0
 1311 D1:C229 4F -  -  -          ld  c,a
 1312 D1:C22A 09 -  -  -          add hl,bc   ;full address
 1313 D1:C22B CD D8 AF D1         READ_ACCESS
 1314 D1:C22F 3C -  -  -          inc a
 1315 D1:C230 47 -  -  -          ld  b,a
 1316 D1:C231 -  -  -  -          ;
 1317 D1:C231 DD 7E 04 -          ld  a,(ix+REGSR)
 1318 D1:C234 CB 8F -  -          res SF_ZERO,a
 1319 D1:C236 20 02 -  -          jr  nz,$+4
 1320 D1:C238 CB CF -  -          set SF_ZERO,a
 1321 D1:C23A CB BF -  -          res SF_NEG,a
 1322 D1:C23C F2 42 C2 D1         jp  p,$+6
 1323 D1:C240 CB FF -  -          set SF_NEG,a
 1324 D1:C242 DD 77 04 -          ld  (ix+REGSR),a
 1325 D1:C245 -  -  -  -          ;
 1326 D1:C245 CD 80 B0 D1         WRITE_ACCESS
 1327 D1:C249 ED 33 06 -          ADDCYC(6)
 1328 D1:C24C E1 -  -  -      pop hl
 1329 D1:C24D C3 1B B9 D1     jp i6502NextLoad
 1330 D1:C251 -  -  -  -  
 1331 D1:C251 -  -  -  -  ;absolute,X	INC oper,X	FE	3	7  
 1332 D1:C251 -  -  -  -  inst6502_inc_absx:
 1333 D1:C251 ED 33 07 -      ADDCYC(7)
 1334 D1:C254 CD 27 BA D1     PUSH_ABSXSPLIT_NODEP
 1335 D1:C258 CD D8 AF D1         READ_ACCESS
 1336 D1:C25C 3C -  -  -          inc a
 1337 D1:C25D 47 -  -  -          ld  b,a
 1338 D1:C25E -  -  -  -          ;
 1339 D1:C25E DD 7E 04 -          ld  a,(ix+REGSR)
 1340 D1:C261 CB 8F -  -          res SF_ZERO,a
 1341 D1:C263 20 02 -  -          jr  nz,$+4
 1342 D1:C265 CB CF -  -          set SF_ZERO,a
 1343 D1:C267 CB BF -  -          res SF_NEG,a
 1344 D1:C269 F2 6F C2 D1         jp  p,$+6
 1345 D1:C26D CB FF -  -          set SF_NEG,a
 1346 D1:C26F DD 77 04 -          ld  (ix+REGSR),a
 1347 D1:C272 -  -  -  -          ;
 1348 D1:C272 CD 80 B0 D1         WRITE_ACCESS
 1349 D1:C276 E1 -  -  -      pop hl
 1350 D1:C277 C3 1B B9 D1     jp i6502NextLoad
 1351 D1:C27B -  -  -  -  
 1352 D1:C27B -  -  -  -  ;-----------------------------------------------------------------------------
 1353 D1:C27B -  -  -  -  ;-----------------------------------------------------------------------------
 1354 D1:C27B -  -  -  -  ;-----------------------------------------------------------------------------
 1355 D1:C27B -  -  -  -  ;Instructions by type: Arithmetic Operations
 1356 D1:C27B -  -  -  -  ;ADC - Add Memory to Accumulator with Carry  [A + M + C -> A, C]
 1357 D1:C27B -  -  -  -  ;    N	Z	C	I	D	V
 1358 D1:C27B -  -  -  -  ;    +	+	+	-	-	+
 1359 D1:C27B -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1360 D1:C27B -  -  -  -  
 1361 D1:C27B -  -  -  -  ;immediate	ADC #oper	69	2	2  
 1362 D1:C27B -  -  -  -  inst6502_adc_imm:
 1363 D1:C27B ED 33 02 -      ADDCYC(2)
 1364 D1:C27E 4E -  -  -      ld  c,(hl)
 1365 D1:C27F C3 5C BA D1     jp  subroutine6502_adc_combined_end
 1366 D1:C283 -  -  -  -      
 1367 D1:C283 -  -  -  -  
 1368 D1:C283 -  -  -  -  ;zeropage	ADC oper	65	2	3
 1369 D1:C283 -  -  -  -  inst6502_adc_zp:
 1370 D1:C283 ED 33 03 -      ADDCYC(3)
 1371 D1:C286 7E -  -  -      ld  a,(hl)
 1372 D1:C287 01 00 38 D0     ld  bc,ZEROPAGE
 1373 D1:C28B 81 -  -  -      add a,c
 1374 D1:C28C 4F -  -  -      ld  c,a
 1375 D1:C28D 0A -  -  -      ld  a,(bc)
 1376 D1:C28E 4F -  -  -      ld  c,a
 1377 D1:C28F C3 5C BA D1     jp  subroutine6502_adc_combined_end
 1378 D1:C293 -  -  -  -  
 1379 D1:C293 -  -  -  -  ;zeropage,X	ADC oper,X	75	2	4  
 1380 D1:C293 -  -  -  -  inst6502_adc_zpx:
 1381 D1:C293 ED 33 04 -      ADDCYC(4)
 1382 D1:C296 7E -  -  -      ld  a,(hl)
 1383 D1:C297 DD 86 01 -      add a,(ix+REGX)
 1384 D1:C29A 01 00 38 D0     ld  bc,ZEROPAGE
 1385 D1:C29E 81 -  -  -      add a,c
 1386 D1:C29F 4F -  -  -      ld  c,a
 1387 D1:C2A0 0A -  -  -      ld  a,(bc)
 1388 D1:C2A1 4F -  -  -      ld  c,a
 1389 D1:C2A2 C3 5C BA D1     jp  subroutine6502_adc_combined_end
 1390 D1:C2A6 -  -  -  -  
 1391 D1:C2A6 -  -  -  -  ;absolute	ADC oper	6D	3	4  
 1392 D1:C2A6 -  -  -  -  inst6502_adc_abs:
 1393 D1:C2A6 ED 33 04 -      ADDCYC(4)
 1394 D1:C2A9 CD CA B9 D1     call subroutine6502_abs_split_start
 1395 D1:C2AD E5 -  -  -      push hl
 1396 D1:C2AE 50 -  -  -          ld  d,b
 1397 D1:C2AF 79 -  -  -          ld  a,c
 1398 D1:C2B0 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1399 D1:C2B2 ED 4C -  -          mlt bc
 1400 D1:C2B4 21 00 40 D0         ld  hl,PAGETABLE
 1401 D1:C2B8 09 -  -  -          add hl,bc
 1402 D1:C2B9 ED 27 -  -          ld  hl,(hl)
 1403 D1:C2BB 06 00 -  -          ld  b,0
 1404 D1:C2BD 4F -  -  -          ld  c,a
 1405 D1:C2BE 09 -  -  -          add hl,bc   ;full address
 1406 D1:C2BF CD D8 AF D1         READ_ACCESS
 1407 D1:C2C3 E1 -  -  -      pop hl
 1408 D1:C2C4 4F -  -  -      ld  c,a
 1409 D1:C2C5 C3 5C BA D1     jp  subroutine6502_adc_combined_end
 1410 D1:C2C9 -  -  -  -  
 1411 D1:C2C9 -  -  -  -  ;absolute,X	ADC oper,X	7D	3	4* 
 1412 D1:C2C9 -  -  -  -  inst6502_adc_absx:
 1413 D1:C2C9 ED 33 04 -      ADDCYC(4)
 1414 D1:C2CC CD EB B9 D1     PUSH_ABSXSPLIT
 1415 D1:C2D0 CD D8 AF D1         READ_ACCESS
 1416 D1:C2D4 E1 -  -  -      pop hl
 1417 D1:C2D5 4F -  -  -      ld  c,a
 1418 D1:C2D6 C3 5C BA D1     jp  subroutine6502_adc_combined_end
 1419 D1:C2DA -  -  -  -  
 1420 D1:C2DA -  -  -  -  ;absolute,Y	ADC oper,Y	79	3	4*
 1421 D1:C2DA -  -  -  -  inst6502_adc_absy:
 1422 D1:C2DA ED 33 04 -      ADDCYC(4)
 1423 D1:C2DD CD E6 B9 D1     PUSH_ABSYSPLIT
 1424 D1:C2E1 CD D8 AF D1         READ_ACCESS
 1425 D1:C2E5 E1 -  -  -      pop hl
 1426 D1:C2E6 4F -  -  -      ld  c,a
 1427 D1:C2E7 C3 5C BA D1     jp  subroutine6502_adc_combined_end
 1428 D1:C2EB -  -  -  -  
 1429 D1:C2EB -  -  -  -  ;(indirect,X)	ADC (oper,X)	61	2	6  
 1430 D1:C2EB -  -  -  -  inst6502_adc_indx:
 1431 D1:C2EB ED 33 06 -      ADDCYC(6)
 1432 D1:C2EE E5 -  -  -      push hl
 1433 D1:C2EF 7E -  -  -          ld  a,(hl)
 1434 D1:C2F0 21 00 38 D0         ld  hl,ZEROPAGE
 1435 D1:C2F4 85 -  -  -          add a,L
 1436 D1:C2F5 DD 86 01 -          add a,(ix+REGX)
 1437 D1:C2F8 6F -  -  -          ld  L,a
 1438 D1:C2F9 7E -  -  -          ld  a,(hl)
 1439 D1:C2FA 2C -  -  -          inc L
 1440 D1:C2FB 56 -  -  -          ld  d,(hl)
 1441 D1:C2FC 42 -  -  -          ld  b,d
 1442 D1:C2FD 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1443 D1:C2FF ED 4C -  -          mlt bc
 1444 D1:C301 21 00 40 D0         ld  hl,PAGETABLE
 1445 D1:C305 09 -  -  -          add hl,bc
 1446 D1:C306 ED 27 -  -          ld  hl,(hl)
 1447 D1:C308 06 00 -  -          ld  b,0
 1448 D1:C30A 4F -  -  -          ld  c,a
 1449 D1:C30B 09 -  -  -          add hl,bc
 1450 D1:C30C CD D8 AF D1         READ_ACCESS
 1451 D1:C310 E1 -  -  -      pop hl
 1452 D1:C311 4F -  -  -      ld  c,a
 1453 D1:C312 C3 5C BA D1     jp  subroutine6502_adc_combined_end
 1454 D1:C316 -  -  -  -  
 1455 D1:C316 -  -  -  -  ;(indirect),Y	ADC (oper),Y	71	2	5* 
 1456 D1:C316 -  -  -  -  inst6502_adc_indy:
 1457 D1:C316 ED 33 05 -      ADDCYC(5)
 1458 D1:C319 E5 -  -  -      push hl
 1459 D1:C31A 7E -  -  -          ld  a,(hl)
 1460 D1:C31B 21 00 38 D0         ld  hl,ZEROPAGE
 1461 D1:C31F 85 -  -  -          add a,L
 1462 D1:C320 6F -  -  -          ld  L,a
 1463 D1:C321 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1464 D1:C322 2C -  -  -          inc L
 1465 D1:C323 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1466 D1:C326 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1467 D1:C327 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1468 D1:C329 FD 23 -  -          ADDCYC(1)
 1469 D1:C32B 24 -  -  -          inc h
 1470 D1:C32C 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1471 D1:C32D 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1472 D1:C32F ED 6C -  -          mlt hl          ;23.
 1473 D1:C331 01 00 40 D0         ld  bc,PAGETABLE
 1474 D1:C335 09 -  -  -          add hl,bc
 1475 D1:C336 ED 27 -  -          ld  hl,(hl)     ;address get.
 1476 D1:C338 01 00 00 00         ld  bc,0
 1477 D1:C33C 4F -  -  -          ld  c,a
 1478 D1:C33D 09 -  -  -          add hl,bc       ;Full address get.
 1479 D1:C33E CD D8 AF D1         READ_ACCESS
 1480 D1:C342 E1 -  -  -      pop hl
 1481 D1:C343 4F -  -  -      ld  c,a
 1482 D1:C344 C3 5C BA D1     jp  subroutine6502_adc_combined_end
 1483 D1:C348 -  -  -  -  
 1484 D1:C348 -  -  -  -  
 1485 D1:C348 -  -  -  -  ;SBC - Subtract Memory from Accumulator with Borrow
 1486 D1:C348 -  -  -  -  ;A - M - C̅ -> A
 1487 D1:C348 -  -  -  -  ;N	Z	C	I	D	V
 1488 D1:C348 -  -  -  -  ;+	+	+	-	-	+
 1489 D1:C348 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1490 D1:C348 -  -  -  -  
 1491 D1:C348 -  -  -  -  ;immediate	SBC #oper	E9	2	2  
 1492 D1:C348 -  -  -  -  inst6502_sbc_imm:
 1493 D1:C348 ED 33 02 -      ADDCYC(2)
 1494 D1:C34B 4E -  -  -      ld  c,(hl)
 1495 D1:C34C C3 8D BA D1     jp  subroutine6502_sbc_combined_end
 1496 D1:C350 -  -  -  -  
 1497 D1:C350 -  -  -  -  ;zeropage	SBC oper	E5	2	3  
 1498 D1:C350 -  -  -  -  inst6502_sbc_zp:
 1499 D1:C350 ED 33 03 -      ADDCYC(3)
 1500 D1:C353 7E -  -  -      ld  a,(hl)
 1501 D1:C354 01 00 38 D0     ld  bc,ZEROPAGE
 1502 D1:C358 81 -  -  -      add a,c
 1503 D1:C359 4F -  -  -      ld  c,a
 1504 D1:C35A 0A -  -  -      ld  a,(bc)
 1505 D1:C35B 4F -  -  -      ld  c,a
 1506 D1:C35C C3 8D BA D1     jp  subroutine6502_sbc_combined_end
 1507 D1:C360 -  -  -  -  
 1508 D1:C360 -  -  -  -  ;zeropage,X	SBC oper,X	F5	2	4  
 1509 D1:C360 -  -  -  -  inst6502_sbc_zpx:
 1510 D1:C360 ED 33 04 -      ADDCYC(4)
 1511 D1:C363 7E -  -  -      ld  a,(hl)
 1512 D1:C364 DD 86 01 -      add a,(ix+REGX)
 1513 D1:C367 01 00 38 D0     ld  bc,ZEROPAGE
 1514 D1:C36B 81 -  -  -      add a,c
 1515 D1:C36C 4F -  -  -      ld  c,a
 1516 D1:C36D 0A -  -  -      ld  a,(bc)
 1517 D1:C36E 4F -  -  -      ld  c,a
 1518 D1:C36F C3 8D BA D1     jp  subroutine6502_sbc_combined_end
 1519 D1:C373 -  -  -  -  
 1520 D1:C373 -  -  -  -  ;absolute	SBC oper	ED	3	4  
 1521 D1:C373 -  -  -  -  inst6502_sbc_abs:
 1522 D1:C373 ED 33 04 -      ADDCYC(4)
 1523 D1:C376 CD CA B9 D1     call subroutine6502_abs_split_start
 1524 D1:C37A E5 -  -  -      push hl
 1525 D1:C37B 50 -  -  -          ld  d,b
 1526 D1:C37C 79 -  -  -          ld  a,c
 1527 D1:C37D 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1528 D1:C37F ED 4C -  -          mlt bc
 1529 D1:C381 21 00 40 D0         ld  hl,PAGETABLE
 1530 D1:C385 09 -  -  -          add hl,bc
 1531 D1:C386 ED 27 -  -          ld  hl,(hl)
 1532 D1:C388 06 00 -  -          ld  b,0
 1533 D1:C38A 4F -  -  -          ld  c,a
 1534 D1:C38B 09 -  -  -          add hl,bc   ;full address
 1535 D1:C38C CD D8 AF D1         READ_ACCESS
 1536 D1:C390 E1 -  -  -      pop hl
 1537 D1:C391 4F -  -  -      ld  c,a
 1538 D1:C392 C3 8D BA D1     jp  subroutine6502_sbc_combined_end
 1539 D1:C396 -  -  -  -  
 1540 D1:C396 -  -  -  -  ;absolute,X	SBC oper,X	FD	3	4* 
 1541 D1:C396 -  -  -  -  inst6502_sbc_absx:
 1542 D1:C396 ED 33 04 -      ADDCYC(4)
 1543 D1:C399 CD EB B9 D1     PUSH_ABSXSPLIT
 1544 D1:C39D CD D8 AF D1         READ_ACCESS
 1545 D1:C3A1 E1 -  -  -      pop hl
 1546 D1:C3A2 4F -  -  -      ld  c,a
 1547 D1:C3A3 C3 8D BA D1     jp  subroutine6502_sbc_combined_end
 1548 D1:C3A7 -  -  -  -  
 1549 D1:C3A7 -  -  -  -  ;absolute,Y	SBC oper,Y	F9	3	4* 
 1550 D1:C3A7 -  -  -  -  inst6502_sbc_absy:
 1551 D1:C3A7 ED 33 04 -      ADDCYC(4)
 1552 D1:C3AA CD E6 B9 D1     PUSH_ABSYSPLIT
 1553 D1:C3AE CD D8 AF D1         READ_ACCESS
 1554 D1:C3B2 E1 -  -  -      pop hl
 1555 D1:C3B3 4F -  -  -      ld  c,a
 1556 D1:C3B4 C3 8D BA D1     jp  subroutine6502_sbc_combined_end
 1557 D1:C3B8 -  -  -  -  
 1558 D1:C3B8 -  -  -  -  ;(indirect,X)	SBC (oper,X)	E1	2	6  
 1559 D1:C3B8 -  -  -  -  inst6502_sbc_indx:
 1560 D1:C3B8 ED 33 06 -      ADDCYC(6)
 1561 D1:C3BB E5 -  -  -      push hl
 1562 D1:C3BC 7E -  -  -          ld  a,(hl)
 1563 D1:C3BD 21 00 38 D0         ld  hl,ZEROPAGE
 1564 D1:C3C1 85 -  -  -          add a,L
 1565 D1:C3C2 DD 86 01 -          add a,(ix+REGX)
 1566 D1:C3C5 6F -  -  -          ld  L,a
 1567 D1:C3C6 7E -  -  -          ld  a,(hl)
 1568 D1:C3C7 2C -  -  -          inc L
 1569 D1:C3C8 56 -  -  -          ld  d,(hl)
 1570 D1:C3C9 42 -  -  -          ld  b,d
 1571 D1:C3CA 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1572 D1:C3CC ED 4C -  -          mlt bc
 1573 D1:C3CE 21 00 40 D0         ld  hl,PAGETABLE
 1574 D1:C3D2 09 -  -  -          add hl,bc
 1575 D1:C3D3 ED 27 -  -          ld  hl,(hl)
 1576 D1:C3D5 06 00 -  -          ld  b,0
 1577 D1:C3D7 4F -  -  -          ld  c,a
 1578 D1:C3D8 09 -  -  -          add hl,bc
 1579 D1:C3D9 CD D8 AF D1         READ_ACCESS
 1580 D1:C3DD E1 -  -  -      pop hl
 1581 D1:C3DE 4F -  -  -      ld  c,a
 1582 D1:C3DF C3 8D BA D1     jp  subroutine6502_sbc_combined_end
 1583 D1:C3E3 -  -  -  -  
 1584 D1:C3E3 -  -  -  -  ;(indirect),Y	SBC (oper),Y	F1	2	5* 
 1585 D1:C3E3 -  -  -  -  inst6502_sbc_indy:
 1586 D1:C3E3 ED 33 05 -      ADDCYC(5)
 1587 D1:C3E6 E5 -  -  -      push hl
 1588 D1:C3E7 7E -  -  -          ld  a,(hl)
 1589 D1:C3E8 21 00 38 D0         ld  hl,ZEROPAGE
 1590 D1:C3EC 85 -  -  -          add a,L
 1591 D1:C3ED 6F -  -  -          ld  L,a
 1592 D1:C3EE 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1593 D1:C3EF 2C -  -  -          inc L
 1594 D1:C3F0 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1595 D1:C3F3 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1596 D1:C3F4 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1597 D1:C3F6 FD 23 -  -          ADDCYC(1)
 1598 D1:C3F8 24 -  -  -          inc h
 1599 D1:C3F9 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1600 D1:C3FA 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1601 D1:C3FC ED 6C -  -          mlt hl          ;23.
 1602 D1:C3FE 01 00 40 D0         ld  bc,PAGETABLE
 1603 D1:C402 09 -  -  -          add hl,bc
 1604 D1:C403 ED 27 -  -          ld  hl,(hl)     ;address get.
 1605 D1:C405 01 00 00 00         ld  bc,0
 1606 D1:C409 4F -  -  -          ld  c,a
 1607 D1:C40A 09 -  -  -          add hl,bc       ;Full address get.
 1608 D1:C40B CD D8 AF D1         READ_ACCESS
 1609 D1:C40F E1 -  -  -      pop hl
 1610 D1:C410 4F -  -  -      ld  c,a
 1611 D1:C411 C3 8D BA D1     jp  subroutine6502_sbc_combined_end
 1612 D1:C415 -  -  -  -  
 1613 D1:C415 -  -  -  -  
 1614 D1:C415 -  -  -  -  
 1615 D1:C415 -  -  -  -  ;-----------------------------------------------------------------------------
 1616 D1:C415 -  -  -  -  ;-----------------------------------------------------------------------------
 1617 D1:C415 -  -  -  -  ;-----------------------------------------------------------------------------
 1618 D1:C415 -  -  -  -  ;Instructions by type: Logical Operations
 1619 D1:C415 -  -  -  -  
 1620 D1:C415 -  -  -  -  ;AND - AND Memory with Accumulator
 1621 D1:C415 -  -  -  -  ;A AND M -> A
 1622 D1:C415 -  -  -  -  ;N	Z	C	I	D	V
 1623 D1:C415 -  -  -  -  ;+	+	-	-	-	-
 1624 D1:C415 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1625 D1:C415 -  -  -  -  
 1626 D1:C415 -  -  -  -  ;immediate	AND #oper	29	2	2  
 1627 D1:C415 -  -  -  -  inst6502_and_imm:
 1628 D1:C415 ED 33 02 -      ADDCYC(2)
 1629 D1:C418 7E -  -  -      ld  a,(hl)
 1630 D1:C419 DD A6 00 -      and a,(ix+REGA)
 1631 D1:C41C DD 77 00 -      ld  (ix+REGA),A
 1632 D1:C41F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1633 D1:C433 C3 1B B9 D1     jp i6502NextLoad
 1634 D1:C437 -  -  -  -  
 1635 D1:C437 -  -  -  -  ;zeropage	AND oper	25	2	3  
 1636 D1:C437 -  -  -  -  inst6502_and_zp:
 1637 D1:C437 ED 33 03 -      ADDCYC(3)
 1638 D1:C43A 7E -  -  -      ld  a,(hl)
 1639 D1:C43B 01 00 38 D0     ld  bc,ZEROPAGE
 1640 D1:C43F 81 -  -  -      add a,c
 1641 D1:C440 4F -  -  -      ld  c,a
 1642 D1:C441 0A -  -  -      ld  a,(bc)
 1643 D1:C442 DD A6 00 -      and a,(ix+REGA)
 1644 D1:C445 DD 77 00 -      ld  (ix+REGA),A
 1645 D1:C448 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1646 D1:C45C C3 1B B9 D1     jp i6502NextLoad
 1647 D1:C460 -  -  -  -  
 1648 D1:C460 -  -  -  -  ;zeropage,X	AND oper,X	35	2	4  
 1649 D1:C460 -  -  -  -  inst6502_and_zpx:
 1650 D1:C460 ED 33 04 -      ADDCYC(4)
 1651 D1:C463 7E -  -  -      ld  a,(hl)
 1652 D1:C464 01 00 38 D0     ld  bc,ZEROPAGE
 1653 D1:C468 81 -  -  -      add a,c
 1654 D1:C469 DD 86 01 -      add a,(ix+REGX)
 1655 D1:C46C 4F -  -  -      ld  c,a
 1656 D1:C46D 0A -  -  -      ld  a,(bc)
 1657 D1:C46E DD A6 00 -      and a,(ix+REGA)
 1658 D1:C471 DD 77 00 -      ld  (ix+REGA),A
 1659 D1:C474 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1660 D1:C488 C3 1B B9 D1     jp i6502NextLoad
 1661 D1:C48C -  -  -  -  
 1662 D1:C48C -  -  -  -  ;absolute	AND oper	2D	3	4  
 1663 D1:C48C -  -  -  -  inst6502_and_abs:
 1664 D1:C48C ED 33 04 -      ADDCYC(4)
 1665 D1:C48F CD CA B9 D1     call subroutine6502_abs_split_start
 1666 D1:C493 E5 -  -  -      push hl
 1667 D1:C494 50 -  -  -          ld  d,b
 1668 D1:C495 79 -  -  -          ld  a,c
 1669 D1:C496 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1670 D1:C498 ED 4C -  -          mlt bc
 1671 D1:C49A 21 00 40 D0         ld  hl,PAGETABLE
 1672 D1:C49E 09 -  -  -          add hl,bc
 1673 D1:C49F ED 27 -  -          ld  hl,(hl)
 1674 D1:C4A1 06 00 -  -          ld  b,0
 1675 D1:C4A3 4F -  -  -          ld  c,a
 1676 D1:C4A4 09 -  -  -          add hl,bc   ;full address
 1677 D1:C4A5 CD D8 AF D1         READ_ACCESS
 1678 D1:C4A9 E1 -  -  -      pop hl
 1679 D1:C4AA DD A6 00 -      and a,(ix+REGA)
 1680 D1:C4AD DD 77 00 -      ld  (ix+REGA),A
 1681 D1:C4B0 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1682 D1:C4C4 C3 1B B9 D1     jp i6502NextLoad
 1683 D1:C4C8 -  -  -  -  
 1684 D1:C4C8 -  -  -  -  ;absolute,X	AND oper,X	3D	3	4* 
 1685 D1:C4C8 -  -  -  -  inst6502_and_absx:
 1686 D1:C4C8 ED 33 04 -      ADDCYC(4)
 1687 D1:C4CB CD EB B9 D1     PUSH_ABSXSPLIT
 1688 D1:C4CF CD D8 AF D1         READ_ACCESS
 1689 D1:C4D3 DD A6 00 -          and a,(ix+REGA)
 1690 D1:C4D6 DD 77 00 -          ld  (ix+REGA),A
 1691 D1:C4D9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1692 D1:C4ED E1 -  -  -      pop hl
 1693 D1:C4EE C3 1B B9 D1     jp i6502NextLoad
 1694 D1:C4F2 -  -  -  -  
 1695 D1:C4F2 -  -  -  -  ;absolute,Y	AND oper,Y	39	3	4* 
 1696 D1:C4F2 -  -  -  -  inst6502_and_absy:
 1697 D1:C4F2 ED 33 04 -      ADDCYC(4)
 1698 D1:C4F5 CD E6 B9 D1     PUSH_ABSYSPLIT
 1699 D1:C4F9 CD D8 AF D1         READ_ACCESS
 1700 D1:C4FD E1 -  -  -      pop hl
 1701 D1:C4FE DD A6 00 -      and a,(ix+REGA)
 1702 D1:C501 DD 77 00 -      ld  (ix+REGA),A
 1703 D1:C504 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1704 D1:C518 C3 1B B9 D1     jp i6502NextLoad
 1705 D1:C51C -  -  -  -  
 1706 D1:C51C -  -  -  -  ;(indirect,X)	AND (oper,X)	21	2	6  
 1707 D1:C51C -  -  -  -  inst6502_and_indx:
 1708 D1:C51C ED 33 06 -      ADDCYC(6)
 1709 D1:C51F E5 -  -  -      push hl
 1710 D1:C520 7E -  -  -          ld  a,(hl)
 1711 D1:C521 21 00 38 D0         ld  hl,ZEROPAGE
 1712 D1:C525 85 -  -  -          add a,L
 1713 D1:C526 DD 86 01 -          add a,(ix+REGX)
 1714 D1:C529 6F -  -  -          ld  L,a
 1715 D1:C52A 7E -  -  -          ld  a,(hl)
 1716 D1:C52B 2C -  -  -          inc L
 1717 D1:C52C 56 -  -  -          ld  d,(hl)
 1718 D1:C52D 42 -  -  -          ld  b,d
 1719 D1:C52E 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1720 D1:C530 ED 4C -  -          mlt bc
 1721 D1:C532 21 00 40 D0         ld  hl,PAGETABLE
 1722 D1:C536 09 -  -  -          add hl,bc
 1723 D1:C537 ED 27 -  -          ld  hl,(hl)
 1724 D1:C539 06 00 -  -          ld  b,0
 1725 D1:C53B 4F -  -  -          ld  c,a
 1726 D1:C53C 09 -  -  -          add hl,bc
 1727 D1:C53D CD D8 AF D1         READ_ACCESS
 1728 D1:C541 E1 -  -  -      pop hl
 1729 D1:C542 DD A6 00 -      and a,(ix+REGA)
 1730 D1:C545 DD 77 00 -      ld  (ix+REGA),A
 1731 D1:C548 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1732 D1:C55C C3 1B B9 D1     jp i6502NextLoad
 1733 D1:C560 -  -  -  -  
 1734 D1:C560 -  -  -  -  ;(indirect),Y	AND (oper),Y	31	2	5* 
 1735 D1:C560 -  -  -  -  inst6502_and_indy:
 1736 D1:C560 ED 33 05 -      ADDCYC(5)
 1737 D1:C563 E5 -  -  -      push hl
 1738 D1:C564 7E -  -  -          ld  a,(hl)
 1739 D1:C565 21 00 38 D0         ld  hl,ZEROPAGE
 1740 D1:C569 85 -  -  -          add a,L
 1741 D1:C56A 6F -  -  -          ld  L,a
 1742 D1:C56B 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1743 D1:C56C 2C -  -  -          inc L
 1744 D1:C56D DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1745 D1:C570 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1746 D1:C571 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1747 D1:C573 24 -  -  -          inc h
 1748 D1:C574 FD 23 -  -          ADDCYC(1)
 1749 D1:C576 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1750 D1:C577 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1751 D1:C579 ED 6C -  -          mlt hl          ;23.
 1752 D1:C57B 01 00 40 D0         ld  bc,PAGETABLE
 1753 D1:C57F 09 -  -  -          add hl,bc
 1754 D1:C580 ED 27 -  -          ld  hl,(hl)     ;address get.
 1755 D1:C582 01 00 00 00         ld  bc,0
 1756 D1:C586 4F -  -  -          ld  c,a
 1757 D1:C587 09 -  -  -          add hl,bc       ;Full address get.
 1758 D1:C588 CD D8 AF D1         READ_ACCESS
 1759 D1:C58C E1 -  -  -      pop hl
 1760 D1:C58D DD A6 00 -      and a,(ix+REGA)
 1761 D1:C590 DD 77 00 -      ld  (ix+REGA),A
 1762 D1:C593 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1763 D1:C5A7 C3 1B B9 D1     jp i6502NextLoad
 1764 D1:C5AB -  -  -  -  
 1765 D1:C5AB -  -  -  -  ;-----------------------------------------------------------------------------
 1766 D1:C5AB -  -  -  -  ;EOR - Exclusive-OR Memory with Accumulator
 1767 D1:C5AB -  -  -  -  ;A EOR M -> A
 1768 D1:C5AB -  -  -  -  ;N	Z	C	I	D	V
 1769 D1:C5AB -  -  -  -  ;+	+	-	-	-	-
 1770 D1:C5AB -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1771 D1:C5AB -  -  -  -  
 1772 D1:C5AB -  -  -  -  ;immediate	EOR #oper	49	2	2  
 1773 D1:C5AB -  -  -  -  inst6502_eor_imm:
 1774 D1:C5AB ED 33 02 -      ADDCYC(2)
 1775 D1:C5AE 7E -  -  -      ld  a,(hl)
 1776 D1:C5AF DD AE 00 -      xor a,(ix+REGA)
 1777 D1:C5B2 DD 77 00 -      ld  (ix+REGA),A
 1778 D1:C5B5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1779 D1:C5C9 C3 1B B9 D1     jp i6502NextLoad
 1780 D1:C5CD -  -  -  -  
 1781 D1:C5CD -  -  -  -  ;zeropage	EOR oper	45	2	3  
 1782 D1:C5CD -  -  -  -  inst6502_eor_zp:
 1783 D1:C5CD ED 33 03 -      ADDCYC(3)
 1784 D1:C5D0 7E -  -  -      ld  a,(hl)
 1785 D1:C5D1 01 00 38 D0     ld  bc,ZEROPAGE
 1786 D1:C5D5 81 -  -  -      add a,c
 1787 D1:C5D6 4F -  -  -      ld  c,a
 1788 D1:C5D7 0A -  -  -      ld  a,(bc)
 1789 D1:C5D8 DD AE 00 -      xor a,(ix+REGA)
 1790 D1:C5DB DD 77 00 -      ld  (ix+REGA),A
 1791 D1:C5DE DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1792 D1:C5F2 C3 1B B9 D1     jp i6502NextLoad
 1793 D1:C5F6 -  -  -  -  
 1794 D1:C5F6 -  -  -  -  
 1795 D1:C5F6 -  -  -  -  ;zeropage,X	EOR oper,X	55	2	4  
 1796 D1:C5F6 -  -  -  -  inst6502_eor_zpx:
 1797 D1:C5F6 ED 33 04 -      ADDCYC(4)
 1798 D1:C5F9 7E -  -  -      ld  a,(hl)
 1799 D1:C5FA 01 00 38 D0     ld  bc,ZEROPAGE
 1800 D1:C5FE 81 -  -  -      add a,c
 1801 D1:C5FF DD 86 01 -      add a,(ix+REGX)
 1802 D1:C602 4F -  -  -      ld  c,a
 1803 D1:C603 0A -  -  -      ld  a,(bc)
 1804 D1:C604 DD AE 00 -      xor a,(ix+REGA)
 1805 D1:C607 DD 77 00 -      ld  (ix+REGA),A
 1806 D1:C60A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1807 D1:C61E C3 1B B9 D1     jp i6502NextLoad
 1808 D1:C622 -  -  -  -  
 1809 D1:C622 -  -  -  -  ;absolute	EOR oper	4D	3	4  
 1810 D1:C622 -  -  -  -  inst6502_eor_abs:
 1811 D1:C622 ED 33 04 -      ADDCYC(4)
 1812 D1:C625 CD CA B9 D1     call subroutine6502_abs_split_start
 1813 D1:C629 E5 -  -  -      push hl
 1814 D1:C62A 50 -  -  -          ld  d,b
 1815 D1:C62B 79 -  -  -          ld  a,c
 1816 D1:C62C 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1817 D1:C62E ED 4C -  -          mlt bc
 1818 D1:C630 21 00 40 D0         ld  hl,PAGETABLE
 1819 D1:C634 09 -  -  -          add hl,bc
 1820 D1:C635 ED 27 -  -          ld  hl,(hl)
 1821 D1:C637 06 00 -  -          ld  b,0
 1822 D1:C639 4F -  -  -          ld  c,a
 1823 D1:C63A 09 -  -  -          add hl,bc   ;full address
 1824 D1:C63B CD D8 AF D1         READ_ACCESS
 1825 D1:C63F E1 -  -  -      pop hl
 1826 D1:C640 DD AE 00 -      xor a,(ix+REGA)
 1827 D1:C643 DD 77 00 -      ld  (ix+REGA),A
 1828 D1:C646 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1829 D1:C65A C3 1B B9 D1     jp i6502NextLoad
 1830 D1:C65E -  -  -  -  
 1831 D1:C65E -  -  -  -  ;absolute,X	EOR oper,X	5D	3	4* 
 1832 D1:C65E -  -  -  -  inst6502_eor_absx:
 1833 D1:C65E ED 33 04 -      ADDCYC(4)
 1834 D1:C661 CD EB B9 D1     PUSH_ABSXSPLIT
 1835 D1:C665 CD D8 AF D1         READ_ACCESS
 1836 D1:C669 DD AE 00 -          xor a,(ix+REGA)
 1837 D1:C66C DD 77 00 -          ld  (ix+REGA),A
 1838 D1:C66F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1839 D1:C683 E1 -  -  -      pop hl
 1840 D1:C684 C3 1B B9 D1     jp i6502NextLoad
 1841 D1:C688 -  -  -  -  
 1842 D1:C688 -  -  -  -  ;absolute,Y	EOR oper,Y	59	3	4* 
 1843 D1:C688 -  -  -  -  inst6502_eor_absy:
 1844 D1:C688 ED 33 04 -      ADDCYC(4)
 1845 D1:C68B CD E6 B9 D1     PUSH_ABSYSPLIT
 1846 D1:C68F CD D8 AF D1         READ_ACCESS
 1847 D1:C693 E1 -  -  -      pop hl
 1848 D1:C694 DD AE 00 -      xor a,(ix+REGA)
 1849 D1:C697 DD 77 00 -      ld  (ix+REGA),A
 1850 D1:C69A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1851 D1:C6AE C3 1B B9 D1     jp i6502NextLoad
 1852 D1:C6B2 -  -  -  -  
 1853 D1:C6B2 -  -  -  -  ;(indirect,X)	EOR (oper,X)	41	2	6  
 1854 D1:C6B2 -  -  -  -  inst6502_eor_indx:
 1855 D1:C6B2 ED 33 06 -      ADDCYC(6)
 1856 D1:C6B5 E5 -  -  -      push hl
 1857 D1:C6B6 7E -  -  -          ld  a,(hl)
 1858 D1:C6B7 21 00 38 D0         ld  hl,ZEROPAGE
 1859 D1:C6BB 85 -  -  -          add a,L
 1860 D1:C6BC DD 86 01 -          add a,(ix+REGX)
 1861 D1:C6BF 6F -  -  -          ld  L,a
 1862 D1:C6C0 7E -  -  -          ld  a,(hl)
 1863 D1:C6C1 2C -  -  -          inc L
 1864 D1:C6C2 56 -  -  -          ld  d,(hl)
 1865 D1:C6C3 42 -  -  -          ld  b,d
 1866 D1:C6C4 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1867 D1:C6C6 ED 4C -  -          mlt bc
 1868 D1:C6C8 21 00 40 D0         ld  hl,PAGETABLE
 1869 D1:C6CC 09 -  -  -          add hl,bc
 1870 D1:C6CD ED 27 -  -          ld  hl,(hl)
 1871 D1:C6CF 06 00 -  -          ld  b,0
 1872 D1:C6D1 4F -  -  -          ld  c,a
 1873 D1:C6D2 09 -  -  -          add hl,bc
 1874 D1:C6D3 CD D8 AF D1         READ_ACCESS
 1875 D1:C6D7 E1 -  -  -      pop hl
 1876 D1:C6D8 DD AE 00 -      xor a,(ix+REGA)
 1877 D1:C6DB DD 77 00 -      ld  (ix+REGA),A
 1878 D1:C6DE DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1879 D1:C6F2 C3 1B B9 D1     jp i6502NextLoad
 1880 D1:C6F6 -  -  -  -  
 1881 D1:C6F6 -  -  -  -  ;(indirect),Y	EOR (oper),Y	51	2	5* 
 1882 D1:C6F6 -  -  -  -  inst6502_eor_indy:
 1883 D1:C6F6 ED 33 05 -      ADDCYC(5)
 1884 D1:C6F9 E5 -  -  -      push hl
 1885 D1:C6FA 7E -  -  -          ld  a,(hl)
 1886 D1:C6FB 21 00 38 D0         ld  hl,ZEROPAGE
 1887 D1:C6FF 85 -  -  -          add a,L
 1888 D1:C700 6F -  -  -          ld  L,a
 1889 D1:C701 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1890 D1:C702 2C -  -  -          inc L
 1891 D1:C703 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1892 D1:C706 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1893 D1:C707 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1894 D1:C709 24 -  -  -          inc h
 1895 D1:C70A FD 23 -  -          ADDCYC(1)
 1896 D1:C70C 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1897 D1:C70D 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1898 D1:C70F ED 6C -  -          mlt hl          ;23.
 1899 D1:C711 01 00 40 D0         ld  bc,PAGETABLE
 1900 D1:C715 09 -  -  -          add hl,bc
 1901 D1:C716 ED 27 -  -          ld  hl,(hl)     ;address get.
 1902 D1:C718 01 00 00 00         ld  bc,0
 1903 D1:C71C 4F -  -  -          ld  c,a
 1904 D1:C71D 09 -  -  -          add hl,bc       ;Full address get.
 1905 D1:C71E CD D8 AF D1         READ_ACCESS
 1906 D1:C722 E1 -  -  -      pop hl
 1907 D1:C723 DD AE 00 -      xor a,(ix+REGA)
 1908 D1:C726 DD 77 00 -      ld  (ix+REGA),A
 1909 D1:C729 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1910 D1:C73D C3 1B B9 D1     jp i6502NextLoad
 1911 D1:C741 -  -  -  -  
 1912 D1:C741 -  -  -  -  ;-----------------------------------------------------------------------------
 1913 D1:C741 -  -  -  -  ;ORA - OR Memory with Accumulator
 1914 D1:C741 -  -  -  -  ;A OR M -> A
 1915 D1:C741 -  -  -  -  ;N	Z	C	I	D	V
 1916 D1:C741 -  -  -  -  ;+	+	-	-	-	-
 1917 D1:C741 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1918 D1:C741 -  -  -  -  
 1919 D1:C741 -  -  -  -  ;immediate	ORA #oper	09	2	2  
 1920 D1:C741 -  -  -  -  inst6502_ora_imm:
 1921 D1:C741 ED 33 02 -      ADDCYC(2)
 1922 D1:C744 7E -  -  -      ld  a,(hl)
 1923 D1:C745 DD B6 00 -      or  a,(ix+REGA)
 1924 D1:C748 DD 77 00 -      ld  (ix+REGA),A
 1925 D1:C74B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1926 D1:C75F C3 1B B9 D1     jp i6502NextLoad
 1927 D1:C763 -  -  -  -  
 1928 D1:C763 -  -  -  -  ;zeropage	ORA oper	05	2	3  
 1929 D1:C763 -  -  -  -  inst6502_ora_zp:
 1930 D1:C763 ED 33 03 -      ADDCYC(3)
 1931 D1:C766 7E -  -  -      ld  a,(hl)
 1932 D1:C767 01 00 38 D0     ld  bc,ZEROPAGE
 1933 D1:C76B 81 -  -  -      add a,c
 1934 D1:C76C 4F -  -  -      ld  c,a
 1935 D1:C76D 0A -  -  -      ld  a,(bc)
 1936 D1:C76E DD B6 00 -      or  a,(ix+REGA)
 1937 D1:C771 DD 77 00 -      ld  (ix+REGA),A
 1938 D1:C774 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1939 D1:C788 C3 1B B9 D1     jp i6502NextLoad
 1940 D1:C78C -  -  -  -  
 1941 D1:C78C -  -  -  -  ;zeropage,X	ORA oper,X	15	2	4  
 1942 D1:C78C -  -  -  -  inst6502_ora_zpx:
 1943 D1:C78C ED 33 04 -      ADDCYC(4)
 1944 D1:C78F 7E -  -  -      ld  a,(hl)
 1945 D1:C790 01 00 38 D0     ld  bc,ZEROPAGE
 1946 D1:C794 81 -  -  -      add a,c
 1947 D1:C795 DD 86 01 -      add a,(ix+REGX)
 1948 D1:C798 4F -  -  -      ld  c,a
 1949 D1:C799 0A -  -  -      ld  a,(bc)
 1950 D1:C79A DD B6 00 -      or  a,(ix+REGA)
 1951 D1:C79D DD 77 00 -      ld  (ix+REGA),A
 1952 D1:C7A0 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1953 D1:C7B4 C3 1B B9 D1     jp i6502NextLoad
 1954 D1:C7B8 -  -  -  -  
 1955 D1:C7B8 -  -  -  -  ;absolute	ORA oper	0D	3	4  
 1956 D1:C7B8 -  -  -  -  inst6502_ora_abs:
 1957 D1:C7B8 ED 33 04 -      ADDCYC(4)
 1958 D1:C7BB CD CA B9 D1     call subroutine6502_abs_split_start
 1959 D1:C7BF E5 -  -  -      push hl
 1960 D1:C7C0 50 -  -  -          ld  d,b
 1961 D1:C7C1 79 -  -  -          ld  a,c
 1962 D1:C7C2 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1963 D1:C7C4 ED 4C -  -          mlt bc
 1964 D1:C7C6 21 00 40 D0         ld  hl,PAGETABLE
 1965 D1:C7CA 09 -  -  -          add hl,bc
 1966 D1:C7CB ED 27 -  -          ld  hl,(hl)
 1967 D1:C7CD 06 00 -  -          ld  b,0
 1968 D1:C7CF 4F -  -  -          ld  c,a
 1969 D1:C7D0 09 -  -  -          add hl,bc   ;full address
 1970 D1:C7D1 CD D8 AF D1         READ_ACCESS
 1971 D1:C7D5 E1 -  -  -      pop hl
 1972 D1:C7D6 DD B6 00 -      or  a,(ix+REGA)
 1973 D1:C7D9 DD 77 00 -      ld  (ix+REGA),A
 1974 D1:C7DC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1975 D1:C7F0 C3 1B B9 D1     jp i6502NextLoad
 1976 D1:C7F4 -  -  -  -  
 1977 D1:C7F4 -  -  -  -  ;absolute,X	ORA oper,X	1D	3	4* 
 1978 D1:C7F4 -  -  -  -  inst6502_ora_absx:
 1979 D1:C7F4 ED 33 04 -      ADDCYC(4)
 1980 D1:C7F7 CD EB B9 D1     PUSH_ABSXSPLIT
 1981 D1:C7FB CD D8 AF D1         READ_ACCESS
 1982 D1:C7FF DD B6 00 -          or  a,(ix+REGA)
 1983 D1:C802 DD 77 00 -          ld  (ix+REGA),A
 1984 D1:C805 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1985 D1:C819 E1 -  -  -      pop hl
 1986 D1:C81A C3 1B B9 D1     jp i6502NextLoad
 1987 D1:C81E -  -  -  -  
 1988 D1:C81E -  -  -  -  ;absolute,Y	ORA oper,Y	19	3	4* 
 1989 D1:C81E -  -  -  -  inst6502_ora_absy:
 1990 D1:C81E ED 33 04 -      ADDCYC(4)
 1991 D1:C821 CD E6 B9 D1     PUSH_ABSYSPLIT
 1992 D1:C825 CD D8 AF D1         READ_ACCESS
 1993 D1:C829 E1 -  -  -      pop hl
 1994 D1:C82A DD B6 00 -      or  a,(ix+REGA)
 1995 D1:C82D DD 77 00 -      ld  (ix+REGA),A
 1996 D1:C830 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1997 D1:C844 C3 1B B9 D1     jp i6502NextLoad
 1998 D1:C848 -  -  -  -  
 1999 D1:C848 -  -  -  -  ;(indirect,X)	ORA (oper,X)	01	2	6  
 2000 D1:C848 -  -  -  -  inst6502_ora_indx:
 2001 D1:C848 ED 33 06 -      ADDCYC(6)
 2002 D1:C84B E5 -  -  -      push hl
 2003 D1:C84C 7E -  -  -          ld  a,(hl)
 2004 D1:C84D 21 00 38 D0         ld  hl,ZEROPAGE
 2005 D1:C851 85 -  -  -          add a,L
 2006 D1:C852 DD 86 01 -          add a,(ix+REGX)
 2007 D1:C855 6F -  -  -          ld  L,a
 2008 D1:C856 7E -  -  -          ld  a,(hl)
 2009 D1:C857 2C -  -  -          inc L
 2010 D1:C858 56 -  -  -          ld  d,(hl)
 2011 D1:C859 42 -  -  -          ld  b,d
 2012 D1:C85A 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2013 D1:C85C ED 4C -  -          mlt bc
 2014 D1:C85E 21 00 40 D0         ld  hl,PAGETABLE
 2015 D1:C862 09 -  -  -          add hl,bc
 2016 D1:C863 ED 27 -  -          ld  hl,(hl)
 2017 D1:C865 06 00 -  -          ld  b,0
 2018 D1:C867 4F -  -  -          ld  c,a
 2019 D1:C868 09 -  -  -          add hl,bc
 2020 D1:C869 CD D8 AF D1         READ_ACCESS
 2021 D1:C86D E1 -  -  -      pop hl
 2022 D1:C86E DD B6 00 -      or  a,(ix+REGA)
 2023 D1:C871 DD 77 00 -      ld  (ix+REGA),A
 2024 D1:C874 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2025 D1:C888 C3 1B B9 D1     jp i6502NextLoad
 2026 D1:C88C -  -  -  -  
 2027 D1:C88C -  -  -  -  ;(indirect),Y	ORA (oper),Y	11	2	5* 
 2028 D1:C88C -  -  -  -  inst6502_ora_indy:
 2029 D1:C88C ED 33 05 -      ADDCYC(5)
 2030 D1:C88F E5 -  -  -      push hl
 2031 D1:C890 7E -  -  -          ld  a,(hl)
 2032 D1:C891 21 00 38 D0         ld  hl,ZEROPAGE
 2033 D1:C895 85 -  -  -          add a,L
 2034 D1:C896 6F -  -  -          ld  L,a
 2035 D1:C897 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 2036 D1:C898 2C -  -  -          inc L
 2037 D1:C899 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 2038 D1:C89C 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 2039 D1:C89D 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 2040 D1:C89F 24 -  -  -          inc h
 2041 D1:C8A0 FD 23 -  -          ADDCYC(1)
 2042 D1:C8A2 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 2043 D1:C8A3 2E 0C -  -          ld  L,BASETABLE_STRIDE
 2044 D1:C8A5 ED 6C -  -          mlt hl          ;23.
 2045 D1:C8A7 01 00 40 D0         ld  bc,PAGETABLE
 2046 D1:C8AB 09 -  -  -          add hl,bc
 2047 D1:C8AC ED 27 -  -          ld  hl,(hl)     ;address get.
 2048 D1:C8AE 01 00 00 00         ld  bc,0
 2049 D1:C8B2 4F -  -  -          ld  c,a
 2050 D1:C8B3 09 -  -  -          add hl,bc       ;Full address get.
 2051 D1:C8B4 CD D8 AF D1         READ_ACCESS
 2052 D1:C8B8 E1 -  -  -      pop hl
 2053 D1:C8B9 DD B6 00 -      or  a,(ix+REGA)
 2054 D1:C8BC DD 77 00 -      ld  (ix+REGA),A
 2055 D1:C8BF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2056 D1:C8D3 C3 1B B9 D1     jp i6502NextLoad
 2057 D1:C8D7 -  -  -  -  
 2058 D1:C8D7 -  -  -  -  ;-----------------------------------------------------------------------------
 2059 D1:C8D7 -  -  -  -  ;-----------------------------------------------------------------------------
 2060 D1:C8D7 -  -  -  -  ;-----------------------------------------------------------------------------
 2061 D1:C8D7 -  -  -  -  ;Instructions by type: Shift & Rotate Instructions
 2062 D1:C8D7 -  -  -  -  ;ASL - Shift Left One Bit (Memory or Accumulator)
 2063 D1:C8D7 -  -  -  -  ;C <- [76543210] <- 0
 2064 D1:C8D7 -  -  -  -  ;N	Z	C	I	D	V
 2065 D1:C8D7 -  -  -  -  ;+	+	+	-	-	-
 2066 D1:C8D7 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2067 D1:C8D7 -  -  -  -  
 2068 D1:C8D7 -  -  -  -  ;accumulator	ASL A	0A	1	2  
 2069 D1:C8D7 -  -  -  -  inst6502_asl:
 2070 D1:C8D7 ED 33 02 -      ADDCYC(2)
 2071 D1:C8DA DD 7E 00 -      ld  a,(ix+REGA)
 2072 D1:C8DD CB 27 -  -      sla a
 2073 D1:C8DF DD 77 00 -      ld  (ix+REGA),a
 2074 D1:C8E2 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2075 D1:C8FC C3 34 B9 D1     jp i6502FinishLoad
 2076 D1:C900 -  -  -  -  
 2077 D1:C900 -  -  -  -  ;zeropage	ASL oper	06	2	5  
 2078 D1:C900 -  -  -  -  inst6502_asl_zp:
 2079 D1:C900 ED 33 05 -      ADDCYC(5)
 2080 D1:C903 7E -  -  -      ld  a,(hl)
 2081 D1:C904 01 00 38 D0     ld  bc,ZEROPAGE
 2082 D1:C908 81 -  -  -      add a,c
 2083 D1:C909 4F -  -  -      ld  c,a
 2084 D1:C90A 0A -  -  -      ld  a,(bc)
 2085 D1:C90B CB 27 -  -      sla a
 2086 D1:C90D 02 -  -  -      ld  (bc),a
 2087 D1:C90E DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2088 D1:C928 C3 1B B9 D1     jp i6502NextLoad
 2089 D1:C92C -  -  -  -  
 2090 D1:C92C -  -  -  -  ;zeropage,X	ASL oper,X	16	2	6  
 2091 D1:C92C -  -  -  -  inst6502_asl_zpx:
 2092 D1:C92C ED 33 06 -      ADDCYC(6)
 2093 D1:C92F 7E -  -  -      ld  a,(hl)
 2094 D1:C930 01 00 38 D0     ld  bc,ZEROPAGE
 2095 D1:C934 81 -  -  -      add a,c
 2096 D1:C935 DD 86 01 -      add a,(ix+REGX)
 2097 D1:C938 4F -  -  -      ld  c,a
 2098 D1:C939 0A -  -  -      ld  a,(bc)
 2099 D1:C93A CB 27 -  -      sla a
 2100 D1:C93C 02 -  -  -      ld  (bc),a
 2101 D1:C93D DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2102 D1:C957 C3 1B B9 D1     jp i6502NextLoad
 2103 D1:C95B -  -  -  -  
 2104 D1:C95B -  -  -  -  ;absolute	ASL oper	0E	3	6  
 2105 D1:C95B -  -  -  -  inst6502_asl_abs:
 2106 D1:C95B ED 33 06 -      ADDCYC(6)
 2107 D1:C95E CD CA B9 D1     call subroutine6502_abs_split_start
 2108 D1:C962 E5 -  -  -      push hl
 2109 D1:C963 50 -  -  -          ld  d,b
 2110 D1:C964 79 -  -  -          ld  a,c
 2111 D1:C965 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2112 D1:C967 ED 4C -  -          mlt bc
 2113 D1:C969 21 00 40 D0         ld  hl,PAGETABLE
 2114 D1:C96D 09 -  -  -          add hl,bc
 2115 D1:C96E ED 27 -  -          ld  hl,(hl)
 2116 D1:C970 06 00 -  -          ld  b,0
 2117 D1:C972 4F -  -  -          ld  c,a
 2118 D1:C973 09 -  -  -          add hl,bc   ;full address
 2119 D1:C974 CD D8 AF D1         READ_ACCESS
 2120 D1:C978 CB 27 -  -          sla a
 2121 D1:C97A 4F -  -  -          ld  c,a
 2122 D1:C97B DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2123 D1:C995 41 -  -  -          ld  b,c
 2124 D1:C996 CD 80 B0 D1         WRITE_ACCESS
 2125 D1:C99A E1 -  -  -      pop hl
 2126 D1:C99B C3 1B B9 D1     jp i6502NextLoad
 2127 D1:C99F -  -  -  -  
 2128 D1:C99F -  -  -  -  ;absolute,X	ASL oper,X	1E	3	7  
 2129 D1:C99F -  -  -  -  inst6502_asl_absx:
 2130 D1:C99F ED 33 07 -      ADDCYC(7)
 2131 D1:C9A2 CD 27 BA D1     PUSH_ABSXSPLIT_NODEP
 2132 D1:C9A6 CD D8 AF D1         READ_ACCESS
 2133 D1:C9AA CB 27 -  -          sla a
 2134 D1:C9AC 4F -  -  -          ld  c,a
 2135 D1:C9AD DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2136 D1:C9C7 41 -  -  -          ld  b,c
 2137 D1:C9C8 CD 80 B0 D1         WRITE_ACCESS
 2138 D1:C9CC E1 -  -  -      pop hl
 2139 D1:C9CD C3 1B B9 D1     jp i6502NextLoad
 2140 D1:C9D1 -  -  -  -  
 2141 D1:C9D1 -  -  -  -  ;-----------------------------------------------------------------------------
 2142 D1:C9D1 -  -  -  -  ;LSR - Shift One Bit Right (Memory or Accumulator)
 2143 D1:C9D1 -  -  -  -  ;0 -> [76543210] -> C
 2144 D1:C9D1 -  -  -  -  ;N	Z	C	I	D	V
 2145 D1:C9D1 -  -  -  -  ;0	+	+	-	-	-
 2146 D1:C9D1 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2147 D1:C9D1 -  -  -  -  
 2148 D1:C9D1 -  -  -  -  ;accumulator	LSR A	4A	1	2  
 2149 D1:C9D1 -  -  -  -  inst6502_lsr:
 2150 D1:C9D1 ED 33 02 -      ADDCYC(2)
 2151 D1:C9D4 DD 7E 00 -      ld  a,(ix+REGA)
 2152 D1:C9D7 CB 3F -  -      srl a
 2153 D1:C9D9 DD 77 00 -      ld  (ix+REGA),a
 2154 D1:C9DC DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2155 D1:C9F6 C3 34 B9 D1     jp i6502FinishLoad
 2156 D1:C9FA -  -  -  -  
 2157 D1:C9FA -  -  -  -  ;zeropage	LSR oper	46	2	5  
 2158 D1:C9FA -  -  -  -  inst6502_lsr_zp:
 2159 D1:C9FA ED 33 05 -      ADDCYC(5)
 2160 D1:C9FD 7E -  -  -      ld  a,(hl)
 2161 D1:C9FE 01 00 38 D0     ld  bc,ZEROPAGE
 2162 D1:CA02 81 -  -  -      add a,c
 2163 D1:CA03 4F -  -  -      ld  c,a
 2164 D1:CA04 0A -  -  -      ld  a,(bc)
 2165 D1:CA05 CB 3F -  -      srl a
 2166 D1:CA07 02 -  -  -      ld  (bc),a
 2167 D1:CA08 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2168 D1:CA22 C3 1B B9 D1     jp i6502NextLoad
 2169 D1:CA26 -  -  -  -  
 2170 D1:CA26 -  -  -  -  ;zeropage,X	LSR oper,X	56	2	6  
 2171 D1:CA26 -  -  -  -  inst6502_lsr_zpx:
 2172 D1:CA26 ED 33 06 -      ADDCYC(6)
 2173 D1:CA29 7E -  -  -      ld  a,(hl)
 2174 D1:CA2A 01 00 38 D0     ld  bc,ZEROPAGE
 2175 D1:CA2E 81 -  -  -      add a,c
 2176 D1:CA2F DD 86 01 -      add a,(ix+REGX)
 2177 D1:CA32 4F -  -  -      ld  c,a
 2178 D1:CA33 0A -  -  -      ld  a,(bc)
 2179 D1:CA34 CB 3F -  -      srl a
 2180 D1:CA36 02 -  -  -      ld  (bc),a
 2181 D1:CA37 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2182 D1:CA51 C3 1B B9 D1     jp i6502NextLoad
 2183 D1:CA55 -  -  -  -      
 2184 D1:CA55 -  -  -  -  ;absolute	LSR oper	4E	3	6  
 2185 D1:CA55 -  -  -  -  inst6502_lsr_abs:
 2186 D1:CA55 ED 33 06 -      ADDCYC(6)
 2187 D1:CA58 CD CA B9 D1     call subroutine6502_abs_split_start
 2188 D1:CA5C E5 -  -  -      push hl
 2189 D1:CA5D 50 -  -  -          ld  d,b
 2190 D1:CA5E 79 -  -  -          ld  a,c
 2191 D1:CA5F 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2192 D1:CA61 ED 4C -  -          mlt bc
 2193 D1:CA63 21 00 40 D0         ld  hl,PAGETABLE
 2194 D1:CA67 09 -  -  -          add hl,bc
 2195 D1:CA68 ED 27 -  -          ld  hl,(hl)
 2196 D1:CA6A 06 00 -  -          ld  b,0
 2197 D1:CA6C 4F -  -  -          ld  c,a
 2198 D1:CA6D 09 -  -  -          add hl,bc   ;full address
 2199 D1:CA6E CD D8 AF D1         READ_ACCESS
 2200 D1:CA72 CB 3F -  -          srl a
 2201 D1:CA74 4F -  -  -          ld  c,a
 2202 D1:CA75 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2203 D1:CA8F 41 -  -  -          ld  b,c
 2204 D1:CA90 CD 80 B0 D1         WRITE_ACCESS
 2205 D1:CA94 E1 -  -  -      pop hl
 2206 D1:CA95 C3 1B B9 D1     jp i6502NextLoad
 2207 D1:CA99 -  -  -  -  
 2208 D1:CA99 -  -  -  -  ;absolute,X	LSR oper,X	5E	3	7  
 2209 D1:CA99 -  -  -  -  inst6502_lsr_absx:
 2210 D1:CA99 ED 33 07 -      ADDCYC(7)
 2211 D1:CA9C CD 27 BA D1     PUSH_ABSXSPLIT_NODEP
 2212 D1:CAA0 CD D8 AF D1         READ_ACCESS
 2213 D1:CAA4 CB 3F -  -          srl a
 2214 D1:CAA6 4F -  -  -          ld  c,a
 2215 D1:CAA7 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2216 D1:CAC1 41 -  -  -          ld  b,c
 2217 D1:CAC2 CD 80 B0 D1         WRITE_ACCESS
 2218 D1:CAC6 E1 -  -  -      pop hl
 2219 D1:CAC7 C3 1B B9 D1     jp i6502NextLoad
 2220 D1:CACB -  -  -  -  
 2221 D1:CACB -  -  -  -  ;-----------------------------------------------------------------------------
 2222 D1:CACB -  -  -  -  ;ROL - Rotate One Bit Left (Memory or Accumulator)
 2223 D1:CACB -  -  -  -  ;C <- [76543210] <- C
 2224 D1:CACB -  -  -  -  ;N	Z	C	I	D	V
 2225 D1:CACB -  -  -  -  ;+	+	+	-	-	-
 2226 D1:CACB -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2227 D1:CACB -  -  -  -  
 2228 D1:CACB -  -  -  -  ;accumulator	ROL A	2A	1	2  
 2229 D1:CACB -  -  -  -  inst6502_rol:
 2230 D1:CACB ED 33 02 -      ADDCYC(2)
 2231 D1:CACE DD 7E 04 -      ld  a,(ix+REGSR)
 2232 D1:CAD1 1F -  -  -      rra
 2233 D1:CAD2 DD CB 00 16     rl  (ix+REGA)
 2234 D1:CAD6 DD 7E 00 -      ld  a,(ix+REGA)
 2235 D1:CAD9 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2236 D1:CAF3 C3 34 B9 D1     jp i6502FinishLoad
 2237 D1:CAF7 -  -  -  -  
 2238 D1:CAF7 -  -  -  -  ;zeropage	ROL oper	26	2	5  
 2239 D1:CAF7 -  -  -  -  inst6502_rol_zp:
 2240 D1:CAF7 ED 33 05 -      ADDCYC(5)
 2241 D1:CAFA 7E -  -  -      ld  a,(hl)
 2242 D1:CAFB 01 00 38 D0     ld  bc,ZEROPAGE
 2243 D1:CAFF 81 -  -  -      add a,c
 2244 D1:CB00 4F -  -  -      ld  c,a
 2245 D1:CB01 DD 7E 04 -      ld  a,(ix+REGSR)
 2246 D1:CB04 1F -  -  -      rra
 2247 D1:CB05 0A -  -  -      ld  a,(bc)
 2248 D1:CB06 17 -  -  -      rla
 2249 D1:CB07 02 -  -  -      ld  (bc),a
 2250 D1:CB08 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2251 D1:CB22 C3 1B B9 D1     jp i6502NextLoad
 2252 D1:CB26 -  -  -  -  
 2253 D1:CB26 -  -  -  -  ;zeropage,X	ROL oper,X	36	2	6  
 2254 D1:CB26 -  -  -  -  inst6502_rol_zpx:
 2255 D1:CB26 ED 33 06 -      ADDCYC(6)
 2256 D1:CB29 7E -  -  -      ld  a,(hl)
 2257 D1:CB2A 01 00 38 D0     ld  bc,ZEROPAGE
 2258 D1:CB2E 81 -  -  -      add a,c
 2259 D1:CB2F DD 86 01 -      add a,(ix+REGX)
 2260 D1:CB32 4F -  -  -      ld  c,a
 2261 D1:CB33 DD 7E 04 -      ld  a,(ix+REGSR)
 2262 D1:CB36 1F -  -  -      rra
 2263 D1:CB37 0A -  -  -      ld  a,(bc)
 2264 D1:CB38 17 -  -  -      rla
 2265 D1:CB39 02 -  -  -      ld  (bc),a
 2266 D1:CB3A DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2267 D1:CB54 C3 1B B9 D1     jp i6502NextLoad
 2268 D1:CB58 -  -  -  -  
 2269 D1:CB58 -  -  -  -  ;absolute	ROL oper	2E	3	6  
 2270 D1:CB58 -  -  -  -  inst6502_rol_abs:
 2271 D1:CB58 ED 33 06 -      ADDCYC(6)
 2272 D1:CB5B CD CA B9 D1     call subroutine6502_abs_split_start
 2273 D1:CB5F E5 -  -  -      push hl
 2274 D1:CB60 50 -  -  -          ld  d,b
 2275 D1:CB61 79 -  -  -          ld  a,c
 2276 D1:CB62 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2277 D1:CB64 ED 4C -  -          mlt bc
 2278 D1:CB66 21 00 40 D0         ld  hl,PAGETABLE
 2279 D1:CB6A 09 -  -  -          add hl,bc
 2280 D1:CB6B ED 27 -  -          ld  hl,(hl)
 2281 D1:CB6D 06 00 -  -          ld  b,0
 2282 D1:CB6F 4F -  -  -          ld  c,a
 2283 D1:CB70 09 -  -  -          add hl,bc   ;full address
 2284 D1:CB71 CD D8 AF D1         READ_ACCESS
 2285 D1:CB75 DD 46 04 -          ld  b,(ix+REGSR)
 2286 D1:CB78 CB 18 -  -          rr b
 2287 D1:CB7A 17 -  -  -          rla
 2288 D1:CB7B 4F -  -  -          ld  c,a
 2289 D1:CB7C DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2290 D1:CB96 41 -  -  -          ld  b,c
 2291 D1:CB97 CD 80 B0 D1         WRITE_ACCESS
 2292 D1:CB9B E1 -  -  -      pop hl
 2293 D1:CB9C C3 1B B9 D1     jp i6502NextLoad
 2294 D1:CBA0 -  -  -  -  
 2295 D1:CBA0 -  -  -  -  ;absolute,X	ROL oper,X	3E	3	7  
 2296 D1:CBA0 -  -  -  -  inst6502_rol_absx:
 2297 D1:CBA0 ED 33 07 -      ADDCYC(7)
 2298 D1:CBA3 CD 27 BA D1     PUSH_ABSXSPLIT_NODEP
 2299 D1:CBA7 CD D8 AF D1         READ_ACCESS
 2300 D1:CBAB DD 46 04 -          ld  b,(ix+REGSR)
 2301 D1:CBAE CB 18 -  -          rr b
 2302 D1:CBB0 17 -  -  -          rla
 2303 D1:CBB1 4F -  -  -          ld  c,a
 2304 D1:CBB2 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2305 D1:CBCC 41 -  -  -          ld  b,c
 2306 D1:CBCD CD 80 B0 D1         WRITE_ACCESS
 2307 D1:CBD1 E1 -  -  -      pop hl
 2308 D1:CBD2 C3 1B B9 D1     jp i6502NextLoad
 2309 D1:CBD6 -  -  -  -  
 2310 D1:CBD6 -  -  -  -  ;-----------------------------------------------------------------------------
 2311 D1:CBD6 -  -  -  -  ;ROR - Rotate One Bit Right (Memory or Accumulator)
 2312 D1:CBD6 -  -  -  -  ;C -> [76543210] -> C
 2313 D1:CBD6 -  -  -  -  ;N	Z	C	I	D	V
 2314 D1:CBD6 -  -  -  -  ;+	+	+	-	-	-
 2315 D1:CBD6 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2316 D1:CBD6 -  -  -  -  
 2317 D1:CBD6 -  -  -  -  ;accumulator	ROR A	6A	1	2  
 2318 D1:CBD6 -  -  -  -  inst6502_ror:
 2319 D1:CBD6 ED 33 02 -      ADDCYC(2)
 2320 D1:CBD9 DD 7E 04 -      ld  a,(ix+REGSR)
 2321 D1:CBDC 1F -  -  -      rra
 2322 D1:CBDD DD CB 00 1E     rr  (ix+REGA)
 2323 D1:CBE1 DD 7E 00 -      ld  a,(ix+REGA)
 2324 D1:CBE4 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2325 D1:CBFE C3 34 B9 D1     jp i6502FinishLoad
 2326 D1:CC02 -  -  -  -  
 2327 D1:CC02 -  -  -  -  ;zeropage	ROR oper	66	2	5  
 2328 D1:CC02 -  -  -  -  inst6502_ror_zp:
 2329 D1:CC02 ED 33 05 -      ADDCYC(5)
 2330 D1:CC05 7E -  -  -      ld  a,(hl)
 2331 D1:CC06 01 00 38 D0     ld  bc,ZEROPAGE
 2332 D1:CC0A 81 -  -  -      add a,c
 2333 D1:CC0B 4F -  -  -      ld  c,a
 2334 D1:CC0C DD 7E 04 -      ld  a,(ix+REGSR)
 2335 D1:CC0F 1F -  -  -      rra
 2336 D1:CC10 0A -  -  -      ld  a,(bc)
 2337 D1:CC11 1F -  -  -      rra
 2338 D1:CC12 02 -  -  -      ld  (bc),a
 2339 D1:CC13 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2340 D1:CC2D C3 1B B9 D1     jp i6502NextLoad
 2341 D1:CC31 -  -  -  -  
 2342 D1:CC31 -  -  -  -  ;zeropage,X	ROR oper,X	76	2	6  
 2343 D1:CC31 -  -  -  -  inst6502_ror_zpx:
 2344 D1:CC31 ED 33 06 -      ADDCYC(6)
 2345 D1:CC34 7E -  -  -      ld  a,(hl)
 2346 D1:CC35 01 00 38 D0     ld  bc,ZEROPAGE
 2347 D1:CC39 81 -  -  -      add a,c
 2348 D1:CC3A DD 86 01 -      add a,(ix+REGX)
 2349 D1:CC3D 4F -  -  -      ld  c,a
 2350 D1:CC3E DD 7E 04 -      ld  a,(ix+REGSR)
 2351 D1:CC41 1F -  -  -      rra
 2352 D1:CC42 0A -  -  -      ld  a,(bc)
 2353 D1:CC43 1F -  -  -      rra
 2354 D1:CC44 02 -  -  -      ld  (bc),a
 2355 D1:CC45 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2356 D1:CC5F C3 1B B9 D1     jp i6502NextLoad
 2357 D1:CC63 -  -  -  -  
 2358 D1:CC63 -  -  -  -  ;absolute	ROR oper	6E	3	6  
 2359 D1:CC63 -  -  -  -  inst6502_ror_abs:
 2360 D1:CC63 ED 33 06 -      ADDCYC(6)
 2361 D1:CC66 CD CA B9 D1     call subroutine6502_abs_split_start
 2362 D1:CC6A E5 -  -  -      push hl
 2363 D1:CC6B 50 -  -  -          ld  d,b
 2364 D1:CC6C 79 -  -  -          ld  a,c
 2365 D1:CC6D 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2366 D1:CC6F ED 4C -  -          mlt bc
 2367 D1:CC71 21 00 40 D0         ld  hl,PAGETABLE
 2368 D1:CC75 09 -  -  -          add hl,bc
 2369 D1:CC76 ED 27 -  -          ld  hl,(hl)
 2370 D1:CC78 06 00 -  -          ld  b,0
 2371 D1:CC7A 4F -  -  -          ld  c,a
 2372 D1:CC7B 09 -  -  -          add hl,bc   ;full address
 2373 D1:CC7C CD D8 AF D1         READ_ACCESS
 2374 D1:CC80 DD 46 04 -          ld  b,(ix+REGSR)
 2375 D1:CC83 CB 18 -  -          rr b
 2376 D1:CC85 1F -  -  -          rra
 2377 D1:CC86 4F -  -  -          ld  c,a
 2378 D1:CC87 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2379 D1:CCA1 41 -  -  -          ld  b,c
 2380 D1:CCA2 CD 80 B0 D1         WRITE_ACCESS
 2381 D1:CCA6 E1 -  -  -      pop hl
 2382 D1:CCA7 C3 1B B9 D1     jp i6502NextLoad
 2383 D1:CCAB -  -  -  -  
 2384 D1:CCAB -  -  -  -  ;absolute,X	ROR oper,X	7E	3	7  
 2385 D1:CCAB -  -  -  -  inst6502_ror_absx:
 2386 D1:CCAB ED 33 07 -      ADDCYC(7)
 2387 D1:CCAE CD 27 BA D1     PUSH_ABSXSPLIT_NODEP
 2388 D1:CCB2 CD D8 AF D1         READ_ACCESS
 2389 D1:CCB6 DD 46 04 -          ld  b,(ix+REGSR)
 2390 D1:CCB9 CB 18 -  -          rr b
 2391 D1:CCBB 1F -  -  -          rra
 2392 D1:CCBC 4F -  -  -          ld  c,a
 2393 D1:CCBD DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2394 D1:CCD7 41 -  -  -          ld  b,c
 2395 D1:CCD8 CD 80 B0 D1         WRITE_ACCESS
 2396 D1:CCDC E1 -  -  -      pop hl
 2397 D1:CCDD C3 1B B9 D1     jp i6502NextLoad
 2398 D1:CCE1 -  -  -  -  
 2399 D1:CCE1 -  -  -  -  ;-----------------------------------------------------------------------------
 2400 D1:CCE1 -  -  -  -  ;-----------------------------------------------------------------------------
 2401 D1:CCE1 -  -  -  -  ;-----------------------------------------------------------------------------
 2402 D1:CCE1 -  -  -  -  ;Instructions by type: Flag Instructions
 2403 D1:CCE1 -  -  -  -  
 2404 D1:CCE1 -  -  -  -  ;CLC - Clear Carry Flag
 2405 D1:CCE1 -  -  -  -  ;0 -> C
 2406 D1:CCE1 -  -  -  -  ;N	Z	C	I	D	V
 2407 D1:CCE1 -  -  -  -  ;-	-	0	-	-	-
 2408 D1:CCE1 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2409 D1:CCE1 -  -  -  -  ;implied	CLC	18	1	2  
 2410 D1:CCE1 -  -  -  -  inst6502_clc:
 2411 D1:CCE1 ED 33 02 -      ADDCYC(2)
 2412 D1:CCE4 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 2413 D1:CCE8 C3 34 B9 D1     jp  i6502FinishLoad
 2414 D1:CCEC -  -  -  -  
 2415 D1:CCEC -  -  -  -  ;CLD - Clear Decimal Mode
 2416 D1:CCEC -  -  -  -  ;0 -> D
 2417 D1:CCEC -  -  -  -  ;N	Z	C	I	D	V
 2418 D1:CCEC -  -  -  -  ;-	-	-	-	0	-
 2419 D1:CCEC -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2420 D1:CCEC -  -  -  -  ;implied	CLD	D8	1	2  
 2421 D1:CCEC -  -  -  -  inst6502_cld:
 2422 D1:CCEC ED 33 02 -      ADDCYC(2)
 2423 D1:CCEF DD CB 04 9E     res SF_DEC,(ix+REGSR)
 2424 D1:CCF3 C3 34 B9 D1     jp  i6502FinishLoad
 2425 D1:CCF7 -  -  -  -  
 2426 D1:CCF7 -  -  -  -  ;CLI -  Clear Interrupt Disable Bit
 2427 D1:CCF7 -  -  -  -  ;0 -> I
 2428 D1:CCF7 -  -  -  -  ;N	Z	C	I	D	V
 2429 D1:CCF7 -  -  -  -  ;-	-	-	0	-	-
 2430 D1:CCF7 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2431 D1:CCF7 -  -  -  -  ;implied	CLI	58	1	2  
 2432 D1:CCF7 -  -  -  -  inst6502_cli:
 2433 D1:CCF7 ED 33 02 -      ADDCYC(2)
 2434 D1:CCFA DD CB 04 96     res SF_INT,(ix+REGSR)
 2435 D1:CCFE C3 34 B9 D1     jp  i6502FinishLoad
 2436 D1:CD02 -  -  -  -  
 2437 D1:CD02 -  -  -  -  ;CLV - Clear Overflow Flag
 2438 D1:CD02 -  -  -  -  ;0 -> V
 2439 D1:CD02 -  -  -  -  ;N	Z	C	I	D	V
 2440 D1:CD02 -  -  -  -  ;-	-	-	-	-	0
 2441 D1:CD02 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2442 D1:CD02 -  -  -  -  ;implied	CLV	B8	1	2  
 2443 D1:CD02 -  -  -  -  inst6502_clv:
 2444 D1:CD02 ED 33 02 -      ADDCYC(2)
 2445 D1:CD05 DD CB 04 B6     res SF_OVER,(ix+REGSR)
 2446 D1:CD09 C3 34 B9 D1     jp  i6502FinishLoad
 2447 D1:CD0D -  -  -  -  
 2448 D1:CD0D -  -  -  -  ;SEC - Set Carry Flag
 2449 D1:CD0D -  -  -  -  ;1 -> C
 2450 D1:CD0D -  -  -  -  ;N	Z	C	I	D	V
 2451 D1:CD0D -  -  -  -  ;-	-	1	-	-	-
 2452 D1:CD0D -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2453 D1:CD0D -  -  -  -  ;implied	SEC	38	1	2  
 2454 D1:CD0D -  -  -  -  inst6502_sec:
 2455 D1:CD0D ED 33 02 -      ADDCYC(2)
 2456 D1:CD10 DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 2457 D1:CD14 C3 34 B9 D1     jp  i6502FinishLoad
 2458 D1:CD18 -  -  -  -  
 2459 D1:CD18 -  -  -  -  ;SED - Set Decimal Flag
 2460 D1:CD18 -  -  -  -  ;1 -> D
 2461 D1:CD18 -  -  -  -  ;N	Z	C	I	D	V
 2462 D1:CD18 -  -  -  -  ;-	-	-	-	1	-
 2463 D1:CD18 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2464 D1:CD18 -  -  -  -  ;implied	SED	F8	1	2  
 2465 D1:CD18 -  -  -  -  inst6502_sed:
 2466 D1:CD18 ED 33 02 -      ADDCYC(2)
 2467 D1:CD1B DD CB 04 DE     set SF_DEC,(ix+REGSR)
 2468 D1:CD1F C3 34 B9 D1     jp  i6502FinishLoad
 2469 D1:CD23 -  -  -  -  
 2470 D1:CD23 -  -  -  -  ;SEI - Set Interrupt Disable Status
 2471 D1:CD23 -  -  -  -  ;1 -> I
 2472 D1:CD23 -  -  -  -  ;N	Z	C	I	D	V
 2473 D1:CD23 -  -  -  -  ;-	-	-	1	-	-
 2474 D1:CD23 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2475 D1:CD23 -  -  -  -  ;implied	SEI	78	1	2  
 2476 D1:CD23 -  -  -  -  inst6502_sei:
 2477 D1:CD23 ED 33 02 -      ADDCYC(2)
 2478 D1:CD26 DD CB 04 D6     set SF_INT,(ix+REGSR)
 2479 D1:CD2A C3 34 B9 D1     jp  i6502FinishLoad
 2480 D1:CD2E -  -  -  -  
 2481 D1:CD2E -  -  -  -  ;-----------------------------------------------------------------------------
 2482 D1:CD2E -  -  -  -  ;-----------------------------------------------------------------------------
 2483 D1:CD2E -  -  -  -  ;-----------------------------------------------------------------------------
 2484 D1:CD2E -  -  -  -  ;Instructions by type: Comparisons
 2485 D1:CD2E -  -  -  -  
 2486 D1:CD2E -  -  -  -  ;CMP - Compare Memory with Accumulator
 2487 D1:CD2E -  -  -  -  ;A - M
 2488 D1:CD2E -  -  -  -  ;N	Z	C	I	D	V
 2489 D1:CD2E -  -  -  -  ;+	+	+	-	-	-
 2490 D1:CD2E -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2491 D1:CD2E -  -  -  -  
 2492 D1:CD2E -  -  -  -  ;immediate	CMP #oper	C9	2	2  
 2493 D1:CD2E -  -  -  -  inst6502_cmp_imm:
 2494 D1:CD2E ED 33 02 -      ADDCYC(2)
 2495 D1:CD31 46 -  -  -      ld  b,(hl)
 2496 D1:CD32 C3 C0 BA D1     jp  subroutine6502_cmp_combined_end
 2497 D1:CD36 -  -  -  -  
 2498 D1:CD36 -  -  -  -  ;zeropage	CMP oper	C5	2	3  
 2499 D1:CD36 -  -  -  -  inst6502_cmp_zp:
 2500 D1:CD36 ED 33 03 -      ADDCYC(3)
 2501 D1:CD39 01 00 38 D0     ld  bc,ZEROPAGE
 2502 D1:CD3D 4E -  -  -      ld  c,(hl)
 2503 D1:CD3E 0A -  -  -      ld  a,(bc)
 2504 D1:CD3F 47 -  -  -      ld  b,a
 2505 D1:CD40 C3 C0 BA D1     jp  subroutine6502_cmp_combined_end
 2506 D1:CD44 -  -  -  -  
 2507 D1:CD44 -  -  -  -  ;zeropage,X	CMP oper,X	D5	2	4  
 2508 D1:CD44 -  -  -  -  inst6502_cmp_zpx:
 2509 D1:CD44 ED 33 04 -      ADDCYC(4)
 2510 D1:CD47 7E -  -  -      ld  a,(hl)
 2511 D1:CD48 01 00 38 D0     ld  bc,ZEROPAGE
 2512 D1:CD4C 81 -  -  -      add a,c
 2513 D1:CD4D DD 86 01 -      add a,(ix+REGX)
 2514 D1:CD50 4F -  -  -      ld  c,a
 2515 D1:CD51 0A -  -  -      ld  a,(bc)
 2516 D1:CD52 47 -  -  -      ld  b,a
 2517 D1:CD53 C3 C0 BA D1     jp  subroutine6502_cmp_combined_end
 2518 D1:CD57 -  -  -  -  
 2519 D1:CD57 -  -  -  -  ;absolute	CMP oper	CD	3	4  
 2520 D1:CD57 -  -  -  -  inst6502_cmp_abs:
 2521 D1:CD57 ED 33 04 -      ADDCYC(4)
 2522 D1:CD5A CD CA B9 D1     call subroutine6502_abs_split_start
 2523 D1:CD5E E5 -  -  -      push hl
 2524 D1:CD5F 50 -  -  -          ld  d,b
 2525 D1:CD60 79 -  -  -          ld  a,c
 2526 D1:CD61 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2527 D1:CD63 ED 4C -  -          mlt bc
 2528 D1:CD65 21 00 40 D0         ld  hl,PAGETABLE
 2529 D1:CD69 09 -  -  -          add hl,bc
 2530 D1:CD6A ED 27 -  -          ld  hl,(hl)
 2531 D1:CD6C 06 00 -  -          ld  b,0
 2532 D1:CD6E 4F -  -  -          ld  c,a
 2533 D1:CD6F 09 -  -  -          add hl,bc   ;full address
 2534 D1:CD70 CD D8 AF D1         READ_ACCESS
 2535 D1:CD74 E1 -  -  -      pop hl
 2536 D1:CD75 47 -  -  -      ld  b,a
 2537 D1:CD76 C3 C0 BA D1     jp  subroutine6502_cmp_combined_end
 2538 D1:CD7A -  -  -  -  
 2539 D1:CD7A -  -  -  -  ;absolute,X	CMP oper,X	DD	3	4* 
 2540 D1:CD7A -  -  -  -  inst6502_cmp_absx:
 2541 D1:CD7A ED 33 04 -      ADDCYC(4)
 2542 D1:CD7D CD EB B9 D1     PUSH_ABSXSPLIT
 2543 D1:CD81 CD D8 AF D1         READ_ACCESS
 2544 D1:CD85 E1 -  -  -      pop hl
 2545 D1:CD86 47 -  -  -      ld  b,a
 2546 D1:CD87 C3 C0 BA D1     jp  subroutine6502_cmp_combined_end
 2547 D1:CD8B -  -  -  -  
 2548 D1:CD8B -  -  -  -  ;absolute,Y	CMP oper,Y	D9	3	4* 
 2549 D1:CD8B -  -  -  -  inst6502_cmp_absy:
 2550 D1:CD8B ED 33 04 -      ADDCYC(4)
 2551 D1:CD8E CD E6 B9 D1     PUSH_ABSYSPLIT
 2552 D1:CD92 CD D8 AF D1         READ_ACCESS
 2553 D1:CD96 E1 -  -  -      pop hl
 2554 D1:CD97 47 -  -  -      ld  b,a
 2555 D1:CD98 C3 C0 BA D1     jp  subroutine6502_cmp_combined_end
 2556 D1:CD9C -  -  -  -  
 2557 D1:CD9C -  -  -  -  ;(indirect,X)	CMP (oper,X)	C1	2	6  
 2558 D1:CD9C -  -  -  -  inst6502_cmp_indx:
 2559 D1:CD9C ED 33 06 -      ADDCYC(6)
 2560 D1:CD9F E5 -  -  -      push hl
 2561 D1:CDA0 7E -  -  -          ld  a,(hl)
 2562 D1:CDA1 21 00 38 D0         ld  hl,ZEROPAGE
 2563 D1:CDA5 85 -  -  -          add a,L
 2564 D1:CDA6 DD 86 01 -          add a,(ix+REGX)
 2565 D1:CDA9 6F -  -  -          ld  L,a
 2566 D1:CDAA 7E -  -  -          ld  a,(hl)
 2567 D1:CDAB 2C -  -  -          inc L
 2568 D1:CDAC 56 -  -  -          ld  d,(hl)
 2569 D1:CDAD 42 -  -  -          ld  b,d
 2570 D1:CDAE 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2571 D1:CDB0 ED 4C -  -          mlt bc
 2572 D1:CDB2 21 00 40 D0         ld  hl,PAGETABLE
 2573 D1:CDB6 09 -  -  -          add hl,bc
 2574 D1:CDB7 ED 27 -  -          ld  hl,(hl)
 2575 D1:CDB9 06 00 -  -          ld  b,0
 2576 D1:CDBB 4F -  -  -          ld  c,a
 2577 D1:CDBC 09 -  -  -          add hl,bc
 2578 D1:CDBD CD D8 AF D1         READ_ACCESS
 2579 D1:CDC1 E1 -  -  -      pop hl
 2580 D1:CDC2 47 -  -  -      ld  b,a
 2581 D1:CDC3 C3 C0 BA D1     jp  subroutine6502_cmp_combined_end
 2582 D1:CDC7 -  -  -  -  
 2583 D1:CDC7 -  -  -  -  ;(indirect),Y	CMP (oper),Y	D1	2	5* 
 2584 D1:CDC7 -  -  -  -  inst6502_cmp_indy:
 2585 D1:CDC7 ED 33 05 -      ADDCYC(5)
 2586 D1:CDCA E5 -  -  -      push hl
 2587 D1:CDCB 7E -  -  -          ld  a,(hl)
 2588 D1:CDCC 21 00 38 D0         ld  hl,ZEROPAGE
 2589 D1:CDD0 85 -  -  -          add a,L
 2590 D1:CDD1 6F -  -  -          ld  L,a
 2591 D1:CDD2 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 2592 D1:CDD3 2C -  -  -          inc L
 2593 D1:CDD4 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 2594 D1:CDD7 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 2595 D1:CDD8 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 2596 D1:CDDA 24 -  -  -          inc h
 2597 D1:CDDB FD 23 -  -          ADDCYC(1)
 2598 D1:CDDD 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 2599 D1:CDDE 2E 0C -  -          ld  L,BASETABLE_STRIDE
 2600 D1:CDE0 ED 6C -  -          mlt hl          ;23.
 2601 D1:CDE2 01 00 40 D0         ld  bc,PAGETABLE
 2602 D1:CDE6 09 -  -  -          add hl,bc
 2603 D1:CDE7 ED 27 -  -          ld  hl,(hl)     ;address get.
 2604 D1:CDE9 01 00 00 00         ld  bc,0
 2605 D1:CDED 4F -  -  -          ld  c,a
 2606 D1:CDEE 09 -  -  -          add hl,bc       ;Full address get.
 2607 D1:CDEF CD D8 AF D1         READ_ACCESS
 2608 D1:CDF3 E1 -  -  -      pop hl
 2609 D1:CDF4 47 -  -  -      ld  b,a
 2610 D1:CDF5 C3 C0 BA D1     jp  subroutine6502_cmp_combined_end
 2611 D1:CDF9 -  -  -  -  
 2612 D1:CDF9 -  -  -  -  ;-----------------------------------------------------------------------------
 2613 D1:CDF9 -  -  -  -  ;CPX - Compare Memory and Index X
 2614 D1:CDF9 -  -  -  -  ;X - M
 2615 D1:CDF9 -  -  -  -  ;N	Z	C	I	D	V
 2616 D1:CDF9 -  -  -  -  ;+	+	+	-	-	-
 2617 D1:CDF9 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2618 D1:CDF9 -  -  -  -  ;immediate	CPX #oper	E0	2	2  
 2619 D1:CDF9 -  -  -  -  inst6502_cpx_imm:
 2620 D1:CDF9 ED 33 02 -      ADDCYC(2)
 2621 D1:CDFC DD 7E 01 -      ld  a,(ix+REGX)
 2622 D1:CDFF 96 -  -  -      sub a,(hl)
 2623 D1:CE00 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2624 D1:CE01 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2625 D1:CE1B C3 1B B9 D1     jp  i6502NextLoad
 2626 D1:CE1F -  -  -  -  
 2627 D1:CE1F -  -  -  -  ;zeropage	CPX oper	E4	2	3  
 2628 D1:CE1F -  -  -  -  inst6502_cpx_zp:
 2629 D1:CE1F ED 33 03 -      ADDCYC(3)
 2630 D1:CE22 01 00 38 D0     ld  bc,ZEROPAGE
 2631 D1:CE26 4E -  -  -      ld  c,(hl)
 2632 D1:CE27 0A -  -  -      ld  a,(bc)
 2633 D1:CE28 47 -  -  -      ld  b,a
 2634 D1:CE29 DD 7E 01 -      ld  a,(ix+REGX)
 2635 D1:CE2C 90 -  -  -      sub a,b
 2636 D1:CE2D 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2637 D1:CE2E DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2638 D1:CE48 C3 1B B9 D1     jp i6502NextLoad
 2639 D1:CE4C -  -  -  -  ;absolute	CPX oper	EC	3	4  
 2640 D1:CE4C -  -  -  -  inst6502_cpx_abs:
 2641 D1:CE4C ED 33 04 -      ADDCYC(4)
 2642 D1:CE4F CD CA B9 D1     call subroutine6502_abs_split_start
 2643 D1:CE53 E5 -  -  -      push hl
 2644 D1:CE54 50 -  -  -          ld  d,b
 2645 D1:CE55 79 -  -  -          ld  a,c
 2646 D1:CE56 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2647 D1:CE58 ED 4C -  -          mlt bc
 2648 D1:CE5A 21 00 40 D0         ld  hl,PAGETABLE
 2649 D1:CE5E 09 -  -  -          add hl,bc
 2650 D1:CE5F ED 27 -  -          ld  hl,(hl)
 2651 D1:CE61 06 00 -  -          ld  b,0
 2652 D1:CE63 4F -  -  -          ld  c,a
 2653 D1:CE64 09 -  -  -          add hl,bc   ;full address
 2654 D1:CE65 CD D8 AF D1         READ_ACCESS
 2655 D1:CE69 E1 -  -  -      pop hl
 2656 D1:CE6A 47 -  -  -      ld  b,a
 2657 D1:CE6B DD 7E 01 -      ld  a,(ix+REGX)
 2658 D1:CE6E 90 -  -  -      sub a,b
 2659 D1:CE6F 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2660 D1:CE70 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2661 D1:CE8A C3 1B B9 D1     jp i6502NextLoad
 2662 D1:CE8E -  -  -  -  
 2663 D1:CE8E -  -  -  -  ;-----------------------------------------------------------------------------
 2664 D1:CE8E -  -  -  -  ;CPY - Compare Memory and Index Y
 2665 D1:CE8E -  -  -  -  ;Y - M
 2666 D1:CE8E -  -  -  -  ;N	Z	C	I	D	V
 2667 D1:CE8E -  -  -  -  ;+	+	+	-	-	-
 2668 D1:CE8E -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2669 D1:CE8E -  -  -  -  ;immediate	CPY #oper	C0	2	2  
 2670 D1:CE8E -  -  -  -  inst6502_cpy_imm:
 2671 D1:CE8E ED 33 02 -      ADDCYC(2)
 2672 D1:CE91 DD 7E 02 -      ld  a,(ix+REGY)
 2673 D1:CE94 96 -  -  -      sub a,(hl)
 2674 D1:CE95 3F -  -  -      ccf
 2675 D1:CE96 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2676 D1:CEB0 C3 1B B9 D1     jp  i6502NextLoad
 2677 D1:CEB4 -  -  -  -  
 2678 D1:CEB4 -  -  -  -  ;zeropage	CPY oper	C4	2	3  
 2679 D1:CEB4 -  -  -  -  inst6502_cpy_zp:
 2680 D1:CEB4 ED 33 03 -      ADDCYC(3)
 2681 D1:CEB7 7E -  -  -      ld  a,(hl)
 2682 D1:CEB8 01 00 38 D0     ld  bc,ZEROPAGE
 2683 D1:CEBC 81 -  -  -      add a,c
 2684 D1:CEBD 4F -  -  -      ld  c,a
 2685 D1:CEBE 0A -  -  -      ld  a,(bc)
 2686 D1:CEBF 47 -  -  -      ld  b,a
 2687 D1:CEC0 DD 7E 02 -      ld  a,(ix+REGY)
 2688 D1:CEC3 90 -  -  -      sub a,b
 2689 D1:CEC4 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2690 D1:CEC5 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2691 D1:CEDF C3 1B B9 D1     jp i6502NextLoad
 2692 D1:CEE3 -  -  -  -  
 2693 D1:CEE3 -  -  -  -  ;absolute	CPY oper	CC	3	4  
 2694 D1:CEE3 -  -  -  -  inst6502_cpy_abs:
 2695 D1:CEE3 ED 33 04 -      ADDCYC(4)
 2696 D1:CEE6 CD CA B9 D1     call subroutine6502_abs_split_start
 2697 D1:CEEA E5 -  -  -      push hl
 2698 D1:CEEB 50 -  -  -          ld  d,b
 2699 D1:CEEC 79 -  -  -          ld  a,c
 2700 D1:CEED 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2701 D1:CEEF ED 4C -  -          mlt bc
 2702 D1:CEF1 21 00 40 D0         ld  hl,PAGETABLE
 2703 D1:CEF5 09 -  -  -          add hl,bc
 2704 D1:CEF6 ED 27 -  -          ld  hl,(hl)
 2705 D1:CEF8 06 00 -  -          ld  b,0
 2706 D1:CEFA 4F -  -  -          ld  c,a
 2707 D1:CEFB 09 -  -  -          add hl,bc   ;full address
 2708 D1:CEFC CD D8 AF D1         READ_ACCESS
 2709 D1:CF00 E1 -  -  -      pop hl
 2710 D1:CF01 47 -  -  -      ld  b,a
 2711 D1:CF02 DD 7E 02 -      ld  a,(ix+REGY)
 2712 D1:CF05 90 -  -  -      sub a,b
 2713 D1:CF06 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2714 D1:CF07 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2715 D1:CF21 C3 1B B9 D1     jp i6502NextLoad
 2716 D1:CF25 -  -  -  -  
 2717 D1:CF25 -  -  -  -  
 2718 D1:CF25 -  -  -  -  ;-----------------------------------------------------------------------------
 2719 D1:CF25 -  -  -  -  ;-----------------------------------------------------------------------------
 2720 D1:CF25 -  -  -  -  ;-----------------------------------------------------------------------------
 2721 D1:CF25 -  -  -  -  ;Instructions by type: Conditional Branch Instructions
 2722 D1:CF25 -  -  -  -  
 2723 D1:CF25 -  -  -  -  ;branch on C=0
 2724 D1:CF25 -  -  -  -  ;relative	BCC oper	90	2	2**
 2725 D1:CF25 -  -  -  -  inst6502_bcc:
 2726 D1:CF25 ED 33 02 -      ADDCYC(2)
 2727 D1:CF28 DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2728 D1:CF2C C2 1B B9 D1     jp  nz,i6502NextLoad
 2729 D1:CF30 C3 E3 BA D1     jp  subroutine6502_take_branch
 2730 D1:CF34 -  -  -  -  
 2731 D1:CF34 -  -  -  -  ;branch on C=1
 2732 D1:CF34 -  -  -  -  ;relative	BCS oper	B0	2	2**
 2733 D1:CF34 -  -  -  -  inst6502_bcs:
 2734 D1:CF34 ED 33 02 -      ADDCYC(2)
 2735 D1:CF37 DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2736 D1:CF3B CA 1B B9 D1     jp  z,i6502NextLoad
 2737 D1:CF3F C3 E3 BA D1     jp  subroutine6502_take_branch
 2738 D1:CF43 -  -  -  -  
 2739 D1:CF43 -  -  -  -  ;branch on Z=1
 2740 D1:CF43 -  -  -  -  ;relative	BEQ oper	F0	2	2**
 2741 D1:CF43 -  -  -  -  inst6502_beq:
 2742 D1:CF43 ED 33 02 -      ADDCYC(2)
 2743 D1:CF46 DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2744 D1:CF4A CA 1B B9 D1     jp  z,i6502NextLoad
 2745 D1:CF4E C3 FE BA D1     jp  subroutine6502_take_branch_waitloop_detect
 2746 D1:CF52 -  -  -  -  
 2747 D1:CF52 -  -  -  -  ;branch on N=1
 2748 D1:CF52 -  -  -  -  ;relative	BMI oper	30	2	2**
 2749 D1:CF52 -  -  -  -  inst6502_bmi:
 2750 D1:CF52 ED 33 02 -      ADDCYC(2)
 2751 D1:CF55 DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2752 D1:CF59 CA 1B B9 D1     jp  z,i6502NextLoad
 2753 D1:CF5D C3 E3 BA D1     jp  subroutine6502_take_branch
 2754 D1:CF61 -  -  -  -  
 2755 D1:CF61 -  -  -  -  
 2756 D1:CF61 -  -  -  -  ;branch on Z=0
 2757 D1:CF61 -  -  -  -  ;relative	BNE oper	D0	2	2**
 2758 D1:CF61 -  -  -  -  inst6502_bne:
 2759 D1:CF61 ED 33 02 -      ADDCYC(2)
 2760 D1:CF64 DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2761 D1:CF68 C2 1B B9 D1     jp  nz,i6502NextLoad
 2762 D1:CF6C C3 E3 BA D1     jp  subroutine6502_take_branch
 2763 D1:CF70 -  -  -  -  
 2764 D1:CF70 -  -  -  -  ;branch on N=0
 2765 D1:CF70 -  -  -  -  ;relative	BPL oper	10	2	2**
 2766 D1:CF70 -  -  -  -  inst6502_bpl:
 2767 D1:CF70 ED 33 02 -      ADDCYC(2)
 2768 D1:CF73 DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2769 D1:CF77 C2 1B B9 D1     jp  nz,i6502NextLoad
 2770 D1:CF7B C3 E3 BA D1     jp  subroutine6502_take_branch
 2771 D1:CF7F -  -  -  -  
 2772 D1:CF7F -  -  -  -  ;branch on V=0
 2773 D1:CF7F -  -  -  -  ;relative	BVC oper	50	2	2**
 2774 D1:CF7F -  -  -  -  inst6502_bvc:
 2775 D1:CF7F ED 33 02 -      ADDCYC(2)
 2776 D1:CF82 DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2777 D1:CF86 C2 1B B9 D1     jp  nz,i6502NextLoad
 2778 D1:CF8A C3 E3 BA D1     jp  subroutine6502_take_branch
 2779 D1:CF8E -  -  -  -  
 2780 D1:CF8E -  -  -  -  ;branch on V=1
 2781 D1:CF8E -  -  -  -  ;relative	BVS oper	70	2	2**
 2782 D1:CF8E -  -  -  -  inst6502_bvs:
 2783 D1:CF8E ED 33 02 -      ADDCYC(2)
 2784 D1:CF91 DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2785 D1:CF95 CA 1B B9 D1     jp  z,i6502NextLoad
 2786 D1:CF99 C3 E3 BA D1     jp  subroutine6502_take_branch
 2787 D1:CF9D -  -  -  -  
 2788 D1:CF9D -  -  -  -  ;-----------------------------------------------------------------------------
 2789 D1:CF9D -  -  -  -  ;-----------------------------------------------------------------------------
 2790 D1:CF9D -  -  -  -  ;-----------------------------------------------------------------------------
 2791 D1:CF9D -  -  -  -  ;Instructions by type: Interrupts
 2792 D1:CF9D -  -  -  -  
 2793 D1:CF9D -  -  -  -  ;BRK - Force Break
 2794 D1:CF9D -  -  -  -  ;BRK initiates a software interrupt similar to a hardware
 2795 D1:CF9D -  -  -  -  ;interrupt (IRQ). The return address pushed to the stack is
 2796 D1:CF9D -  -  -  -  ;PC+2, providing an extra byte of spacing for a break mark
 2797 D1:CF9D -  -  -  -  ;(identifying a reason for the break.)
 2798 D1:CF9D -  -  -  -  ;The status register will be pushed to the stack with the break
 2799 D1:CF9D -  -  -  -  ;flag set to 1. However, when retrieved during RTI or by a PLP
 2800 D1:CF9D -  -  -  -  ;instruction, the break flag will be ignored.
 2801 D1:CF9D -  -  -  -  ;The interrupt disable flag is not set automatically.
 2802 D1:CF9D -  -  -  -  ;
 2803 D1:CF9D -  -  -  -  ;interrupt,             N	Z	C	I	D	V
 2804 D1:CF9D -  -  -  -  ;push PC+2, push SR     -	-	-	1	-	-
 2805 D1:CF9D -  -  -  -  ;implied	BRK	00	1	7  
 2806 D1:CF9D -  -  -  -  inst6502_brk:
 2807 D1:CF9D ED 33 07 -      ADDCYC(7)
 2808 D1:CFA0 21 00 39 D0     ld  hl,STACKBASE
 2809 D1:CFA4 DD 6E 03 -      ld  L,(ix+REGSP)
 2810 D1:CFA7 52 DD 17 05     ld.s de,(ix+REGPC)
 2811 D1:CFAB 13 -  -  -      inc de      ;that extra spacer.
 2812 D1:CFAC 72 -  -  -      ld  (hl),d
 2813 D1:CFAD 2D -  -  -      dec L
 2814 D1:CFAE 73 -  -  -      ld  (hl),e
 2815 D1:CFAF 2D -  -  -      dec L
 2816 D1:CFB0 DD 7E 04 -      ld  a,(ix+REGSR)
 2817 D1:CFB3 CB D7 -  -      set SF_INT,a
 2818 D1:CFB5 77 -  -  -      ld  (hl),a
 2819 D1:CFB6 2D -  -  -      dec L
 2820 D1:CFB7 DD 75 03 -      ld  (ix+REGSP),L
 2821 D1:CFBA DD CB 1E 46     WAS_NMI_TRIGGERED
 2822 D1:CFBE 01 FE 00 00     ld  bc,$FE  ;IRQ vector
 2823 D1:CFC2 28 04 -  -      jr  z,+_
 2824 D1:CFC4 01 FA 00 00     ld  bc,$FA  ;NMI vector, if NMI is hijacking this instruction.
 2825 D1:CFC8 21 F4 4B D0 _:  ld  hl,(BASETABLE_STRIDE*$FF)+PAGETABLE
 2826 D1:CFCC ED 27 -  -      ld  hl,(hl)
 2827 D1:CFCE 09 -  -  -      add hl,bc
 2828 D1:CFCF ED 17 -  -      ld  de,(hl)
 2829 D1:CFD1 52 DD 1F 05     ld.s (ix+REGPC),de
 2830 D1:CFD5 C3 05 B9 D1     jp  i6502FirstLoad
 2831 D1:CFD9 -  -  -  -  
 2832 D1:CFD9 -  -  -  -  ;RTI - Return from Interrupt
 2833 D1:CFD9 -  -  -  -  ;The status register is pulled with the break flag
 2834 D1:CFD9 -  -  -  -  ;and bit 5 ignored. Then PC is pulled from the stack.
 2835 D1:CFD9 -  -  -  -  ;pull SR, pull PC      N Z C I D V
 2836 D1:CFD9 -  -  -  -  ;                      from stack
 2837 D1:CFD9 -  -  -  -  ;implied	RTI	40	1	6  
 2838 D1:CFD9 -  -  -  -  inst6502_rti:
 2839 D1:CFD9 21 00 39 D0     ld  hl,STACKBASE
 2840 D1:CFDD DD 6E 03 -      ld  l,(ix+REGSP)
 2841 D1:CFE0 2C -  -  -      inc l
 2842 D1:CFE1 7E -  -  -      ld  a,(hl)
 2843 D1:CFE2 2C -  -  -      inc l
 2844 D1:CFE3 5E -  -  -      ld  e,(hl)
 2845 D1:CFE4 2C -  -  -      inc l
 2846 D1:CFE5 56 -  -  -      ld  d,(hl)
 2847 D1:CFE6 DD 75 03 -      ld  (ix+REGSP),l
 2848 D1:CFE9 52 DD 1F 05     ld.s (ix+REGPC),de
 2849 D1:CFED DD 46 04 -      ld  b,(ix+REGSR)
 2850 D1:CFF0 A8 -  -  -      xor a,b
 2851 D1:CFF1 E6 DF -  -      and a,%11011111
 2852 D1:CFF3 A8 -  -  -      xor a,b
 2853 D1:CFF4 DD 77 04 -      ld  (ix+REGSR),a
 2854 D1:CFF7 ED 33 06 -      ADDCYC(6)
 2855 D1:CFFA C3 05 B9 D1     jp  i6502FirstLoad
 2856 D1:CFFE -  -  -  -  
 2857 D1:CFFE -  -  -  -  
 2858 D1:CFFE -  -  -  -  
 2859 D1:CFFE -  -  -  -  ;-----------------------------------------------------------------------------
 2860 D1:CFFE -  -  -  -  ;-----------------------------------------------------------------------------
 2861 D1:CFFE -  -  -  -  ;-----------------------------------------------------------------------------
 2862 D1:CFFE -  -  -  -  ;Instructions by type: Jumps and Subroutines
 2863 D1:CFFE -  -  -  -  
 2864 D1:CFFE -  -  -  -  ;absolute	JMP oper	4C	3	3  
 2865 D1:CFFE -  -  -  -  inst6052_jmp_abs:
 2866 D1:CFFE -  -  -  -      ;The waitloop handler requires that the ADDCYC() is NOT done until
 2867 D1:CFFE -  -  -  -      ;after the jump to do the wait happens. This is because it's possible
 2868 D1:CFFE -  -  -  -      ;that an IRQ/NMI may be skipped if ADDCYC() is done first.
 2869 D1:CFFE DD 56 06 -      ld  d,(ix+REGPC+1)
 2870 D1:D001 7E -  -  -      ld  a,(hl)
 2871 D1:D002 23 -  -  -      inc hl
 2872 D1:D003 1C -  -  -      inc e
 2873 D1:D004 20 0D -  -      jr  nz,+_
 2874 D1:D006 14 -  -  -      inc d
 2875 D1:D007 4A -  -  -      ld  c,d
 2876 D1:D008 06 0C -  -      ld  b,BASETABLE_STRIDE
 2877 D1:D00A ED 4C -  -      mlt bc
 2878 D1:D00C 21 00 40 D0     ld  hl,PAGETABLE
 2879 D1:D010 09 -  -  -      add hl,bc
 2880 D1:D011 ED 27 -  -      ld  hl,(hl)
 2881 D1:D013 66 -  -  -  _:  ld  h,(hl)
 2882 D1:D014 6F -  -  -      ld  l,a     ;HL=newaddr
 2883 D1:D015 1B -  -  -      dec de
 2884 D1:D016 1B -  -  -      dec de      ;DE=oldaddr, at start of instruction
 2885 D1:D017 52 EB -  -      ex.s de,hl  ;HL=oldaddr, DE=newaddr. Upper bytes cleared.
 2886 D1:D019 B7 -  -  -      or  a,a
 2887 D1:D01A ED 52 -  -      sbc hl,de   ;infinite loop detection
 2888 D1:D01C 52 DD 1F 05     ld.s (ix+REGPC),de
 2889 D1:D020 28 07 -  -      jr  z,inst6052_jmp_abs_inf_loop
 2890 D1:D022 ED 33 03 -      ADDCYC(3)
 2891 D1:D025 C3 05 B9 D1     jp i6502FirstLoad
 2892 D1:D029 -  -  -  -  
 2893 D1:D029 -  -  -  -  inst6052_jmp_abs_inf_loop:
 2894 D1:D029 ED 03 00 -      lea bc,iy+0
 2895 D1:D02C 2A 55 B9 D1     ld  hl,(i6502_interrupt_timer)
 2896 D1:D030 DD 2F 1B -      ld  (ix+TEMP_MEMORY),hl
 2897 D1:D033 DD 7E 1D -      ld  a,(ix+TEMP_MEMORY+2)
 2898 D1:D036 2F -  -  -      cpl
 2899 D1:D037 DD 77 1D -      ld  (ix+TEMP_MEMORY+2),a
 2900 D1:D03A DD 27 1B -      ld  hl,(ix+TEMP_MEMORY)
 2901 D1:D03D 7D -  -  -      ld  a,l
 2902 D1:D03E 2F -  -  -      cpl
 2903 D1:D03F 6F -  -  -      ld  l,a
 2904 D1:D040 7C -  -  -      ld  a,h
 2905 D1:D041 2F -  -  -      cpl
 2906 D1:D042 67 -  -  -      ld  h,a
 2907 D1:D043 23 -  -  -      inc hl
 2908 D1:D044 E5 -  -  -      push hl
 2909 D1:D045 FD E1 -  -      pop iy      ;screw accurate timing. I just want it to go brrt
 2910 D1:D047 -  -  -  -      ;TODO: Accurate timing is probably a necessary thing. Maybe do proper
 2911 D1:D047 -  -  -  -      ;math to figure this one out.
 2912 D1:D047 C3 05 B9 D1     jp  i6502FirstLoad  
 2913 D1:D04B -  -  -  -      
 2914 D1:D04B -  -  -  -  
 2915 D1:D04B -  -  -  -  
 2916 D1:D04B -  -  -  -  
 2917 D1:D04B -  -  -  -  ;Note: In earlier 6502 implementations, cross-page reads on indirect is bugged.
 2918 D1:D04B -  -  -  -  ;   The end effect would be that inst6502_jmp_indir_splitread would wrap around
 2919 D1:D04B -  -  -  -  ;   to the start of the current page rather than try to read the next page.
 2920 D1:D04B -  -  -  -  ;indirect	JMP (oper)	6C	3	5  
 2921 D1:D04B -  -  -  -  inst6502_jmp_indir:
 2922 D1:D04B ED 33 05 -      ADDCYC(5)
 2923 D1:D04E -  -  -  -      ;Doing much the same as abs_split_start below, except with fewer things
 2924 D1:D04E -  -  -  -      ;because we don't need to preserve any of the other stuff.
 2925 D1:D04E 4E -  -  -      ld  c,(hl)
 2926 D1:D04F 23 -  -  -      inc hl
 2927 D1:D050 1C -  -  -      inc e
 2928 D1:D051 20 0F -  -      jr  nz,+_
 2929 D1:D053 DD 56 06 -      ld  d,(ix+REGPC+1)
 2930 D1:D056 14 -  -  -      inc d
 2931 D1:D057 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2932 D1:D059 ED 5C -  -      mlt de
 2933 D1:D05B 21 00 40 D0     ld  hl,PAGETABLE
 2934 D1:D05F 19 -  -  -      add hl,de
 2935 D1:D060 ED 27 -  -      ld  hl,(hl)
 2936 D1:D062 46 -  -  -  _:  ld  b,(hl)
 2937 D1:D063 79 -  -  -      ld  a,c
 2938 D1:D064 0C -  -  -      inc c   ;check if there will be a split read.
 2939 D1:D065 0E 0C -  -      ld  c,BASETABLE_STRIDE  ;Flags not affected
 2940 D1:D067 ED 4C -  -      mlt bc                  ;Flags not affected
 2941 D1:D069 21 00 40 D0     ld  hl,PAGETABLE        ;Flags not affected
 2942 D1:D06D CA 82 D0 D1     jp  z,inst6502_jmp_indir_splitRead
 2943 D1:D071 09 -  -  -      add hl,bc
 2944 D1:D072 ED 27 -  -      ld  hl,(hl)
 2945 D1:D074 06 00 -  -      ld  b,0
 2946 D1:D076 4F -  -  -      ld  c,a
 2947 D1:D077 09 -  -  -      add hl,bc
 2948 D1:D078 ED 27 -  -      ld  hl,(hl)
 2949 D1:D07A 52 DD 2F 05     ld.s (ix+REGPC),hl
 2950 D1:D07E C3 05 B9 D1     jp  i6502FirstLoad
 2951 D1:D082 -  -  -  -  inst6502_jmp_indir_splitRead:
 2952 D1:D082 09 -  -  -      add hl,bc
 2953 D1:D083 ED 27 -  -      ld  hl,(hl)
 2954 D1:D085 7E -  -  -      ld  a,(hl)  ;high byte
 2955 D1:D086 01 FF 00 00     ld  bc,255
 2956 D1:D08A 09 -  -  -      add hl,bc
 2957 D1:D08B 4E -  -  -      ld  c,(hl)  ;low byte
 2958 D1:D08C 47 -  -  -      ld  b,a
 2959 D1:D08D 52 DD 0F 05     ld.s (ix+REGPC),bc
 2960 D1:D091 C3 05 B9 D1     jp  i6502FirstLoad
 2961 D1:D095 -  -  -  -  
 2962 D1:D095 -  -  -  -  
 2963 D1:D095 -  -  -  -  
 2964 D1:D095 -  -  -  -  
 2965 D1:D095 -  -  -  -  
 2966 D1:D095 -  -  -  -  ;absolute	JSR oper	20	3	6  
 2967 D1:D095 -  -  -  -  inst6502_jsr:
 2968 D1:D095 DD 56 06 -      ld  d,(ix+REGPC+1)
 2969 D1:D098 4E -  -  -      ld  c,(hl)
 2970 D1:D099 23 -  -  -      inc hl
 2971 D1:D09A 1C -  -  -      inc e
 2972 D1:D09B 20 10 -  -      jr  nz,+_
 2973 D1:D09D 14 -  -  -      inc d
 2974 D1:D09E 7A -  -  -      ld  a,d
 2975 D1:D09F 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2976 D1:D0A1 ED 5C -  -      mlt de
 2977 D1:D0A3 21 00 40 D0     ld  hl,PAGETABLE
 2978 D1:D0A7 19 -  -  -      add hl,de
 2979 D1:D0A8 ED 27 -  -      ld  hl,(hl)
 2980 D1:D0AA 57 -  -  -      ld  d,a
 2981 D1:D0AB 1E 00 -  -      ld  e,0
 2982 D1:D0AD 46 -  -  -  _:  ld  b,(hl)
 2983 D1:D0AE -  -  -  -      ;push de to 6502stack
 2984 D1:D0AE 21 00 39 D0     ld  hl,STACKBASE
 2985 D1:D0B2 DD 6E 03 -      ld  l,(ix+REGSP)
 2986 D1:D0B5 72 -  -  -      ld  (hl),d
 2987 D1:D0B6 2D -  -  -      dec l
 2988 D1:D0B7 73 -  -  -      ld  (hl),e
 2989 D1:D0B8 2D -  -  -      dec l
 2990 D1:D0B9 DD 75 03 -      ld  (ix+REGSP),l
 2991 D1:D0BC 52 DD 0F 05     ld.s (ix+REGPC),bc
 2992 D1:D0C0 ED 33 06 -      ADDCYC(6)
 2993 D1:D0C3 C3 05 B9 D1     jp  i6502FirstLoad
 2994 D1:D0C7 -  -  -  -  
 2995 D1:D0C7 -  -  -  -  ;implied	RTS	60	1	6
 2996 D1:D0C7 -  -  -  -  inst6502_rts:
 2997 D1:D0C7 21 00 39 D0     ld  hl,STACKBASE
 2998 D1:D0CB DD 6E 03 -      ld  l,(ix+REGSP)
 2999 D1:D0CE 2C -  -  -      inc l
 3000 D1:D0CF 5E -  -  -      ld  e,(hl)
 3001 D1:D0D0 2C -  -  -      inc l
 3002 D1:D0D1 56 -  -  -      ld  d,(hl)
 3003 D1:D0D2 DD 75 03 -      ld  (ix+REGSP),l
 3004 D1:D0D5 13 -  -  -      inc de
 3005 D1:D0D6 52 DD 1F 05     ld.s (ix+REGPC),de
 3006 D1:D0DA ED 33 06 -      ADDCYC(6)
 3007 D1:D0DD C3 05 B9 D1     jp  i6502FirstLoad
 3008 D1:D0E1 -  -  -  -  
 3009 D1:D0E1 -  -  -  -  
 3010 D1:D0E1 -  -  -  -  ;-----------------------------------------------------------------------------
 3011 D1:D0E1 -  -  -  -  ;-----------------------------------------------------------------------------
 3012 D1:D0E1 -  -  -  -  ;-----------------------------------------------------------------------------
 3013 D1:D0E1 -  -  -  -  ;Instructions by type: Miscellaneous
 3014 D1:D0E1 -  -  -  -  ;BIT - Test Bits in Memory with Accumulator
 3015 D1:D0E1 -  -  -  -  ;
 3016 D1:D0E1 -  -  -  -  ;bits 7 and 6 of operand are transfered to bit 7 and 6 of SR (N,V);
 3017 D1:D0E1 -  -  -  -  ;the zero-flag is set according to the result of the operand AND
 3018 D1:D0E1 -  -  -  -  ;the accumulator (set, if the result is zero, unset otherwise).
 3019 D1:D0E1 -  -  -  -  ;This allows a quick check of a few bits at once without affecting
 3020 D1:D0E1 -  -  -  -  ;any of the registers, other than the status register (SR).
 3021 D1:D0E1 -  -  -  -  
 3022 D1:D0E1 -  -  -  -  ;A AND M -> Z, M7 -> N, M6 -> V             N	Z	C	I	D	V
 3023 D1:D0E1 -  -  -  -  ;                                           M7	+	-	-	-	M6
 3024 D1:D0E1 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 3025 D1:D0E1 -  -  -  -  ;zeropage	BIT oper	24	2	3  
 3026 D1:D0E1 -  -  -  -  inst6502_bit_zp:
 3027 D1:D0E1 ED 33 03 -      ADDCYC(3)
 3028 D1:D0E4 7E -  -  -      ld  a,(hl)
 3029 D1:D0E5 01 00 38 D0     ld  bc,ZEROPAGE
 3030 D1:D0E9 81 -  -  -      add a,c
 3031 D1:D0EA 4F -  -  -      ld  c,a
 3032 D1:D0EB 0A -  -  -      ld  a,(bc)
 3033 D1:D0EC 4F -  -  -      ld  c,a
 3034 D1:D0ED DD A6 00 -  _:  and a,(ix+REGA)
 3035 D1:D0F0 79 -  -  -      ld  a,c     ;discard result, get bits from OPERANDs
 3036 D1:D0F1 CB 8F -  -      res SF_ZERO,a
 3037 D1:D0F3 20 02 -  -      jr  nz,$+4
 3038 D1:D0F5 CB CF -  -      set SF_ZERO,a
 3039 D1:D0F7 DD 46 04 -      ld  b,(ix+REGSR)    ;keep bits in flag other than NZ and V
 3040 D1:D0FA A8 -  -  -      xor a,b
 3041 D1:D0FB E6 C2 -  -      and a,%11000010     ;1=keepA, 0=discardA,keepB
 3042 D1:D0FD A8 -  -  -      xor a,b
 3043 D1:D0FE DD 77 04 -      ld  (ix+REGSR),a
 3044 D1:D101 C3 1B B9 D1     jp  i6502NextLoad
 3045 D1:D105 -  -  -  -  
 3046 D1:D105 -  -  -  -  ;absolute	BIT oper	2C	3	4  
 3047 D1:D105 -  -  -  -  inst6502_bit_abs:
 3048 D1:D105 ED 33 04 -      ADDCYC(4)
 3049 D1:D108 CD CA B9 D1     call subroutine6502_abs_split_start
 3050 D1:D10C E5 -  -  -      push hl
 3051 D1:D10D 50 -  -  -          ld  d,b
 3052 D1:D10E 79 -  -  -          ld  a,c
 3053 D1:D10F 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3054 D1:D111 ED 4C -  -          mlt bc
 3055 D1:D113 21 00 40 D0         ld  hl,PAGETABLE
 3056 D1:D117 09 -  -  -          add hl,bc
 3057 D1:D118 ED 27 -  -          ld  hl,(hl)
 3058 D1:D11A 06 00 -  -          ld  b,0
 3059 D1:D11C 4F -  -  -          ld  c,a
 3060 D1:D11D 09 -  -  -          add hl,bc   ;full address
 3061 D1:D11E CD D8 AF D1         READ_ACCESS
 3062 D1:D122 4F -  -  -          ld  c,a
 3063 D1:D123 E1 -  -  -      pop hl
 3064 D1:D124 18 C7 -  -      jr  -_    
 3065 D1:D126 -  -  -  -  
 3066 D1:D126 -  -  -  -  ;NOP - No Operation
 3067 D1:D126 -  -  -  -  ;implied	NOP	EA	1	2  
 3068 D1:D126 -  -  -  -  inst6502_nop:
 3069 D1:D126 ED 33 02 -      ADDCYC(2)
 3070 D1:D129 C3 34 B9 D1     jp  i6502FinishLoad
 3071 D1:D12D -  -  -  -  
 3072 D1:D12D -  -  -  -  
 3073 D1:D12D -  -  -  -  
 3074 D1:D12D -  -  -  -  ;##############################################################################
 3075 D1:D12D -  -  -  -  ;##############################################################################
 3076 D1:D12D -  -  -  -  ;##############################################################################
 3077 D1:D12D -  -  -  -  ;##-----#-#####-#####-----##---###---##-########-----#--##-##---#-----#----####
 3078 D1:D12D -  -  -  -  ;####-###-#####-#####-#####-#####-###-#-##########-###--##-#-######-###-###-###
 3079 D1:D12D -  -  -  -  ;####-###-#####-#####---###-##--#-----#-##########-###-#-#-##---###-###-----###
 3080 D1:D12D -  -  -  -  ;####-###-#####-#####-#####-###-#-###-#-##########-###-##--#####-##-###-##-####
 3081 D1:D12D -  -  -  -  ;##-----#-----#-----#-----##----#-###-#-----####-----#-##--#----###-###-###-#-#
 3082 D1:D12D -  -  -  -  ;##############################################################################
 3083 D1:D12D -  -  -  -  ;##############################################################################
 3084 D1:D12D -  -  -  -  ;##############################################################################
 3085 D1:D12D -  -  -  -  ;Instructions by type: Illegal Instructions
 3086 D1:D12D -  -  -  -  
 3087 D1:D12D -  -  -  -  ;NOP - No operations. All the no-operations. Even the ones that are linked
 3088 D1:D12D -  -  -  -  ;to the machinery that operates an addressing mode, but does nothing with it.
 3089 D1:D12D -  -  -  -  ;A whole lotta nothing.
 3090 D1:D12D -  -  -  -  
 3091 D1:D12D -  -  -  -  ;Bytes:1, Cycles:2, Opcodes: 1A, 3A, 5A, 7A, DA, FA
 3092 D1:D12D -  -  -  -  inst6502_nop_implied:
 3093 D1:D12D ED 33 02 -      ADDCYC(2)
 3094 D1:D130 C3 34 B9 D1     jp  i6502FinishLoad
 3095 D1:D134 -  -  -  -  
 3096 D1:D134 -  -  -  -  ;Bytes:2, Cycles:2, Opcodes: 80, 82, 89, C2, E2
 3097 D1:D134 -  -  -  -  inst6502_nop_imm:
 3098 D1:D134 ED 33 02 -      ADDCYC(2)
 3099 D1:D137 C3 1B B9 D1     jp  i6502NextLoad
 3100 D1:D13B -  -  -  -  
 3101 D1:D13B -  -  -  -  ;Bytes:2, Cycles:3, Opcodes: 04, 44, 64
 3102 D1:D13B -  -  -  -  inst6502_nop_zp:
 3103 D1:D13B ED 33 03 -      ADDCYC(3)
 3104 D1:D13E C3 1B B9 D1     jp  i6502NextLoad
 3105 D1:D142 -  -  -  -  
 3106 D1:D142 -  -  -  -  ;Bytes:2, Cycles:4, Opcodes: 14, 34, 54, 74, D4, F4
 3107 D1:D142 -  -  -  -  inst6502_nop_zpx:
 3108 D1:D142 ED 33 04 -      ADDCYC(4)
 3109 D1:D145 C3 1B B9 D1     jp  i6502NextLoad
 3110 D1:D149 -  -  -  -  
 3111 D1:D149 -  -  -  -  ;Bytes:3, Cycles:4, Opcode: 0C
 3112 D1:D149 -  -  -  -  inst6502_nop_abs:
 3113 D1:D149 ED 33 04 -      ADDCYC(4)
 3114 D1:D14C CD CA B9 D1     call subroutine6502_abs_split_start
 3115 D1:D150 E5 -  -  -      push hl
 3116 D1:D151 CD D8 AF D1         READ_ACCESS
 3117 D1:D155 E1 -  -  -      pop hl
 3118 D1:D156 C3 1B B9 D1     jp  i6502NextLoad
 3119 D1:D15A -  -  -  -  
 3120 D1:D15A -  -  -  -  ;Note: This thing latches all over the place but does nothing. All these
 3121 D1:D15A -  -  -  -  ;READ_ACCESS thingies are in case the ROM wants to clear PPU flags or something
 3122 D1:D15A -  -  -  -  ;using these instructions. But the one below is noted to do the touchy-feelies
 3123 D1:D15A -  -  -  -  ;at ABS and (ABS+X)&0xFF
 3124 D1:D15A -  -  -  -  ;Bytes:3, Cycles:4*, Opcodes: 1C, 3C, 5C, 7C, DC, FC
 3125 D1:D15A -  -  -  -  inst6502_nop_absx:
 3126 D1:D15A ED 33 04 -      ADDCYC(4)
 3127 D1:D15D CD EB B9 D1     PUSH_ABSXSPLIT
 3128 D1:D161 CD D8 AF D1         READ_ACCESS
 3129 D1:D165 E1 -  -  -      pop hl
 3130 D1:D166 C3 1B B9 D1     jp  i6502NextLoad
 3131 D1:D16A -  -  -  -  
 3132 D1:D16A -  -  -  -  ;-----------------------------------------------------------------------------
 3133 D1:D16A -  -  -  -  ;ALR (ASR) - AND oper + LSR
 3134 D1:D16A -  -  -  -  ;Affects CZN
 3135 D1:D16A -  -  -  -  
 3136 D1:D16A -  -  -  -  ;immediate	ALR #oper	4B	2	2 
 3137 D1:D16A -  -  -  -  inst6502_alr_imm:
 3138 D1:D16A ED 33 02 -      ADDCYC(2)
 3139 D1:D16D DD 7E 00 -      ld  a,(ix+REGA)
 3140 D1:D170 A6 -  -  -      and a,(hl)
 3141 D1:D171 CB 3F -  -      srl a   ;Must do it this way. A-optimized instr do not affect Z
 3142 D1:D173 DD 77 00 -      ld  (ix+REGA),a
 3143 D1:D176 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3144 D1:D190 C3 1B B9 D1     jp  i6502NextLoad
 3145 D1:D194 -  -  -  -  
 3146 D1:D194 -  -  -  -  ;-----------------------------------------------------------------------------
 3147 D1:D194 -  -  -  -  
 3148 D1:D194 -  -  -  -  ;ANC [ANC (ANC2)] - AND oper + set Carry as if ASL [ROL]
 3149 D1:D194 -  -  -  -  
 3150 D1:D194 -  -  -  -  ;immediate	ANC #oper	0B	2	2 
 3151 D1:D194 -  -  -  -  ;immediate	ANC #oper	2B	2	2
 3152 D1:D194 -  -  -  -  instr6502_anc_imm:
 3153 D1:D194 -  -  -  -  instr6502_anc2_imm:
 3154 D1:D194 ED 33 02 -      ADDCYC(2)
 3155 D1:D197 DD 7E 00 -      ld  a,(ix+REGA)
 3156 D1:D19A A6 -  -  -      and a,(hl)
 3157 D1:D19B DD 77 00 -      ld  (ix+REGA),a
 3158 D1:D19E CB 07 -  -      rlc a
 3159 D1:D1A0 DD 7E 04 -      ld  a,(ix+REGSR)
 3160 D1:D1A3 -  -  -  -      ;A small optimiztion here, letting us merge OPRFLG_C and OPRFLG_N
 3161 D1:D1A3 CB 87 -  -      res SF_CARRY,a
 3162 D1:D1A5 CB BF -  -      res SF_NEG,a
 3163 D1:D1A7 30 04 -  -      jr  nc,+_
 3164 D1:D1A9 CB C7 -  -      set SF_CARRY,a
 3165 D1:D1AB CB FF -  -      set SF_NEG,a
 3166 D1:D1AD CB 8F -  -  _:  res SF_ZERO,a
 3167 D1:D1AF 20 02 -  -      jr  nz,$+4
 3168 D1:D1B1 CB CF -  -      set SF_ZERO,a
 3169 D1:D1B3 DD 77 04 -      ld  (ix+REGSR),a
 3170 D1:D1B6 C3 1B B9 D1     jp  i6502NextLoad
 3171 D1:D1BA -  -  -  -  
 3172 D1:D1BA -  -  -  -  ;-----------------------------------------------------------------------------
 3173 D1:D1BA -  -  -  -  
 3174 D1:D1BA -  -  -  -  ;ANE (XAA) - (A OR ??) AND X AND oper -> A
 3175 D1:D1BA -  -  -  -  ;immediate	ANE #oper	8B	2	2  	††
 3176 D1:D1BA -  -  -  -  instr6502_ane_imm:
 3177 D1:D1BA ED 33 02 -      ADDCYC(2)
 3178 D1:D1BD ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3179 D1:D1BF DD B6 00 -      or  a,(ix+REGA)
 3180 D1:D1C2 DD A6 01 -      and a,(ix+REGX)
 3181 D1:D1C5 A6 -  -  -      and a,(hl)
 3182 D1:D1C6 DD 77 00 -      ld  (ix+REGA),a
 3183 D1:D1C9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3184 D1:D1DD C3 1B B9 D1     jp  i6502NextLoad
 3185 D1:D1E1 -  -  -  -  
 3186 D1:D1E1 -  -  -  -  ;-----------------------------------------------------------------------------
 3187 D1:D1E1 -  -  -  -  
 3188 D1:D1E1 -  -  -  -  
 3189 D1:D1E1 -  -  -  -  ;ARR - AND OPER + ROR
 3190 D1:D1E1 -  -  -  -  ;Something hinky is going on with the flags. "This operation involves the adder"
 3191 D1:D1E1 -  -  -  -  ;I need to get a better handle over what that might be.
 3192 D1:D1E1 -  -  -  -  ;CVZN flags affected.
 3193 D1:D1E1 -  -  -  -  ;
 3194 D1:D1E1 -  -  -  -  ;Primary sources reads:
 3195 D1:D1E1 -  -  -  -  ;----------------------
 3196 D1:D1E1 -  -  -  -  ;This operation involves the adder:
 3197 D1:D1E1 -  -  -  -  ;V-flag is set according to (A AND oper) + oper
 3198 D1:D1E1 -  -  -  -  ;The carry is not set, but bit 7 (sign) is exchanged with the carry
 3199 D1:D1E1 -  -  -  -  ;A AND oper, C -> [76543210] -> C
 3200 D1:D1E1 -  -  -  -  ;
 3201 D1:D1E1 -  -  -  -  ;Secondary source reads:
 3202 D1:D1E1 -  -  -  -  ;-----------------------
 3203 D1:D1E1 -  -  -  -  ;Similar to AND #i then ROR A, except sets the flags differently. 
 3204 D1:D1E1 -  -  -  -  ;N and Z are normal, but C is bit 6 and V is bit 6 xor bit 5. 
 3205 D1:D1E1 -  -  -  -  ;A fast way to perform signed division by 4 is: CMP #$80; ARR #$FF; ROR. 
 3206 D1:D1E1 -  -  -  -  ;This can be extended to larger powers of two.
 3207 D1:D1E1 -  -  -  -  
 3208 D1:D1E1 -  -  -  -  ;immediate	ARR #oper	6B	2	2  
 3209 D1:D1E1 -  -  -  -  instr6502_arr_imm:
 3210 D1:D1E1 ED 33 02 -      ADDCYC(2)
 3211 D1:D1E4 DD 7E 00 -      ld  a,(ix+REGA)
 3212 D1:D1E7 A6 -  -  -      and a,(hl)
 3213 D1:D1E8 47 -  -  -      ld  b,a
 3214 D1:D1E9 DD 7E 04 -      ld  a,(ix+REGSR)
 3215 D1:D1EC 4F -  -  -      ld  c,a
 3216 D1:D1ED 0F -  -  -      rrca    ;extract carry. This carry will go into sign bit of result
 3217 D1:D1EE CB B9 -  -      res SF_NEG,c
 3218 D1:D1F0 30 02 -  -      jr  nc,$+4
 3219 D1:D1F2 CB F9 -  -      set SF_NEG,c
 3220 D1:D1F4 CB 18 -  -      rr b
 3221 D1:D1F6 CB 89 -  -      res SF_ZERO,c
 3222 D1:D1F8 20 02 -  -      jr  nz,$+4
 3223 D1:D1FA CB C9 -  -      set SF_ZERO,c
 3224 D1:D1FC DD 70 00 -      ld  (ix+REGA),b
 3225 D1:D1FF 78 -  -  -      ld  a,b
 3226 D1:D200 E6 40 -  -      and a,%01000000
 3227 D1:D202 CB 81 -  -      res SF_CARRY,c
 3228 D1:D204 28 02 -  -      jr  z,$+4
 3229 D1:D206 CB C1 -  -      set SF_CARRY,c
 3230 D1:D208 0F -  -  -      rrca
 3231 D1:D209 EE 20 -  -      xor a,%00100000
 3232 D1:D20B E6 20 -  -      and a,%00100000
 3233 D1:D20D CB B1 -  -      res SF_OVER,c
 3234 D1:D20F 28 02 -  -      jr  z,$+4
 3235 D1:D211 CB F1 -  -      set SF_OVER,c
 3236 D1:D213 DD 71 04 -      ld  (ix+REGSR),c
 3237 D1:D216 -  -  -  -      ;TODO: Figure out a more efficient way to emulate this instruction.
 3238 D1:D216 C3 1B B9 D1     jp  i6502NextLoad
 3239 D1:D21A -  -  -  -  
 3240 D1:D21A -  -  -  -  ;-----------------------------------------------------------------------------
 3241 D1:D21A -  -  -  -  ;DCP (DCM) - DEC oper + CMP oper
 3242 D1:D21A -  -  -  -  ;M-1->M, A-M. Affects CZN
 3243 D1:D21A -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3244 D1:D21A -  -  -  -  
 3245 D1:D21A -  -  -  -  ;zeropage	DCP oper	C7	2	5  	
 3246 D1:D21A -  -  -  -  inst6502_dcp_zp:
 3247 D1:D21A ED 33 05 -      ADDCYC(5)
 3248 D1:D21D 7E -  -  -      ld  a,(hl)
 3249 D1:D21E 01 00 38 D0     ld  bc,ZEROPAGE
 3250 D1:D222 81 -  -  -      add a,c
 3251 D1:D223 4F -  -  -      ld  c,a
 3252 D1:D224 0A -  -  -      ld  a,(bc)
 3253 D1:D225 3D -  -  -      dec a
 3254 D1:D226 02 -  -  -      ld  (bc),a
 3255 D1:D227 47 -  -  -      ld  b,a
 3256 D1:D228 C3 C0 BA D1     jp  subroutine6502_cmp_combined_end
 3257 D1:D22C -  -  -  -  
 3258 D1:D22C -  -  -  -  ;zeropage,X	DCP oper,X	D7	2	6  	
 3259 D1:D22C -  -  -  -  inst6520_dcp_zpx:
 3260 D1:D22C ED 33 06 -      ADDCYC(6)
 3261 D1:D22F 7E -  -  -      ld  a,(hl)
 3262 D1:D230 01 00 38 D0     ld  bc,ZEROPAGE
 3263 D1:D234 81 -  -  -      add a,c
 3264 D1:D235 DD 86 01 -      add a,(ix+REGX)
 3265 D1:D238 4F -  -  -      ld  c,a
 3266 D1:D239 0A -  -  -      ld  a,(bc)
 3267 D1:D23A 3D -  -  -      dec a
 3268 D1:D23B 02 -  -  -      ld  (bc),a
 3269 D1:D23C 47 -  -  -      ld  b,a
 3270 D1:D23D C3 C0 BA D1     jp  subroutine6502_cmp_combined_end
 3271 D1:D241 -  -  -  -  
 3272 D1:D241 -  -  -  -  ;absolute	DCP oper	CF	3	6  	
 3273 D1:D241 -  -  -  -  inst6502_dcp_abs:
 3274 D1:D241 ED 33 06 -      ADDCYC(6)
 3275 D1:D244 CD CA B9 D1     call subroutine6502_abs_split_start
 3276 D1:D248 E5 -  -  -      push hl
 3277 D1:D249 50 -  -  -          ld  d,b
 3278 D1:D24A 79 -  -  -          ld  a,c
 3279 D1:D24B 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3280 D1:D24D ED 4C -  -          mlt bc
 3281 D1:D24F 21 00 40 D0         ld  hl,PAGETABLE
 3282 D1:D253 09 -  -  -          add hl,bc
 3283 D1:D254 ED 27 -  -          ld  hl,(hl)
 3284 D1:D256 06 00 -  -          ld  b,0
 3285 D1:D258 4F -  -  -          ld  c,a
 3286 D1:D259 09 -  -  -          add hl,bc   ;full address
 3287 D1:D25A CD D8 AF D1         READ_ACCESS
 3288 D1:D25E 3D -  -  -          dec a
 3289 D1:D25F 47 -  -  -          ld b,a
 3290 D1:D260 C5 -  -  -          push bc
 3291 D1:D261 CD 80 B0 D1             WRITE_ACCESS
 3292 D1:D265 C1 -  -  -          pop bc
 3293 D1:D266 E1 -  -  -      pop hl
 3294 D1:D267 C3 C0 BA D1     jp  subroutine6502_cmp_combined_end
 3295 D1:D26B -  -  -  -  
 3296 D1:D26B -  -  -  -  ;absolut,X	DCP oper,X	DF	3	7  	
 3297 D1:D26B -  -  -  -  inst6502_dcp_absx:
 3298 D1:D26B ED 33 07 -      ADDCYC(7)
 3299 D1:D26E CD 27 BA D1     PUSH_ABSXSPLIT_NODEP
 3300 D1:D272 CD D8 AF D1         READ_ACCESS
 3301 D1:D276 3D -  -  -          dec a
 3302 D1:D277 47 -  -  -          ld  b,a
 3303 D1:D278 C5 -  -  -          push bc
 3304 D1:D279 CD 80 B0 D1             WRITE_ACCESS
 3305 D1:D27D C1 -  -  -          pop bc
 3306 D1:D27E E1 -  -  -      pop hl
 3307 D1:D27F C3 C0 BA D1     jp  subroutine6502_cmp_combined_end
 3308 D1:D283 -  -  -  -  
 3309 D1:D283 -  -  -  -  ;absolut,Y	DCP oper,Y	DB	3	7  	
 3310 D1:D283 -  -  -  -  inst6502_dcp_absy:
 3311 D1:D283 ED 33 07 -      ADDCYC(7)
 3312 D1:D286 CD 22 BA D1     PUSH_ABSYSPLIT_NODEP
 3313 D1:D28A CD D8 AF D1         READ_ACCESS
 3314 D1:D28E 3D -  -  -          dec a
 3315 D1:D28F 47 -  -  -          ld  b,a
 3316 D1:D290 C5 -  -  -          push bc
 3317 D1:D291 CD 80 B0 D1             WRITE_ACCESS
 3318 D1:D295 C1 -  -  -          pop bc
 3319 D1:D296 E1 -  -  -      pop hl
 3320 D1:D297 C3 C0 BA D1     jp  subroutine6502_cmp_combined_end
 3321 D1:D29B -  -  -  -  
 3322 D1:D29B -  -  -  -  ;(indirect,X)	DCP (oper,X)	C3	2	8  	
 3323 D1:D29B -  -  -  -  inst6502_dcp_indx:
 3324 D1:D29B ED 33 08 -      ADDCYC(8)
 3325 D1:D29E E5 -  -  -      push hl
 3326 D1:D29F 7E -  -  -          ld  a,(hl)
 3327 D1:D2A0 21 00 38 D0         ld  hl,ZEROPAGE
 3328 D1:D2A4 85 -  -  -          add a,L
 3329 D1:D2A5 DD 86 01 -          add a,(ix+REGX)
 3330 D1:D2A8 6F -  -  -          ld  L,a
 3331 D1:D2A9 7E -  -  -          ld  a,(hl)
 3332 D1:D2AA 2C -  -  -          inc L
 3333 D1:D2AB 56 -  -  -          ld  d,(hl)
 3334 D1:D2AC 42 -  -  -          ld  b,d
 3335 D1:D2AD 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3336 D1:D2AF ED 4C -  -          mlt bc
 3337 D1:D2B1 21 00 40 D0         ld  hl,PAGETABLE
 3338 D1:D2B5 09 -  -  -          add hl,bc
 3339 D1:D2B6 ED 27 -  -          ld  hl,(hl)
 3340 D1:D2B8 06 00 -  -          ld  b,0
 3341 D1:D2BA 4F -  -  -          ld  c,a
 3342 D1:D2BB 09 -  -  -          add hl,bc
 3343 D1:D2BC CD D8 AF D1         READ_ACCESS
 3344 D1:D2C0 3D -  -  -          dec a
 3345 D1:D2C1 47 -  -  -          ld  b,a
 3346 D1:D2C2 C5 -  -  -          push bc
 3347 D1:D2C3 CD 80 B0 D1             WRITE_ACCESS
 3348 D1:D2C7 C1 -  -  -          pop bc
 3349 D1:D2C8 E1 -  -  -      pop hl
 3350 D1:D2C9 C3 C0 BA D1     jp  subroutine6502_cmp_combined_end
 3351 D1:D2CD -  -  -  -  
 3352 D1:D2CD -  -  -  -  ;(indirect),Y	DCP (oper),Y	D3	2	8  
 3353 D1:D2CD -  -  -  -  inst6502_dcp_indy:
 3354 D1:D2CD ED 33 08 -      ADDCYC(8)
 3355 D1:D2D0 E5 -  -  -      push hl
 3356 D1:D2D1 7E -  -  -          ld  a,(hl)
 3357 D1:D2D2 21 00 38 D0         ld  hl,ZEROPAGE
 3358 D1:D2D6 85 -  -  -          add a,L
 3359 D1:D2D7 6F -  -  -          ld  L,a
 3360 D1:D2D8 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3361 D1:D2D9 2C -  -  -          inc L
 3362 D1:D2DA DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3363 D1:D2DD 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3364 D1:D2DE 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3365 D1:D2E0 24 -  -  -          inc h
 3366 D1:D2E1 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3367 D1:D2E2 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3368 D1:D2E4 ED 6C -  -          mlt hl          ;23.
 3369 D1:D2E6 01 00 40 D0         ld  bc,PAGETABLE
 3370 D1:D2EA 09 -  -  -          add hl,bc
 3371 D1:D2EB ED 27 -  -          ld  hl,(hl)     ;address get.
 3372 D1:D2ED 01 00 00 00         ld  bc,0
 3373 D1:D2F1 4F -  -  -          ld  c,a
 3374 D1:D2F2 09 -  -  -          add hl,bc       ;Full address get.
 3375 D1:D2F3 CD D8 AF D1         READ_ACCESS
 3376 D1:D2F7 3D -  -  -          dec a
 3377 D1:D2F8 47 -  -  -          ld  b,a
 3378 D1:D2F9 C5 -  -  -          push bc
 3379 D1:D2FA CD 80 B0 D1             WRITE_ACCESS
 3380 D1:D2FE C1 -  -  -          pop bc
 3381 D1:D2FF E1 -  -  -      pop hl
 3382 D1:D300 C3 C0 BA D1     jp  subroutine6502_cmp_combined_end
 3383 D1:D304 -  -  -  -  
 3384 D1:D304 -  -  -  -  ;-----------------------------------------------------------------------------
 3385 D1:D304 -  -  -  -  ;ISC (ISB, INS) - INC oper + SBC oper
 3386 D1:D304 -  -  -  -  ;M+1->M, A-M-not(C)->A, affects VCZN
 3387 D1:D304 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3388 D1:D304 -  -  -  -  
 3389 D1:D304 -  -  -  -  
 3390 D1:D304 -  -  -  -  
 3391 D1:D304 -  -  -  -  ;zeropage	ISC oper	E7	2	5  	
 3392 D1:D304 -  -  -  -  inst6502_isc_zp:
 3393 D1:D304 ED 33 05 -      ADDCYC(5)
 3394 D1:D307 7E -  -  -      ld  a,(hl)
 3395 D1:D308 01 00 38 D0     ld  bc,ZEROPAGE
 3396 D1:D30C 81 -  -  -      add a,c
 3397 D1:D30D 4F -  -  -      ld  c,a
 3398 D1:D30E 0A -  -  -      ld  a,(bc)
 3399 D1:D30F 3C -  -  -      inc a
 3400 D1:D310 02 -  -  -      ld  (bc),a
 3401 D1:D311 4F -  -  -      ld  c,a
 3402 D1:D312 C3 8D BA D1     jp  subroutine6502_sbc_combined_end
 3403 D1:D316 -  -  -  -  
 3404 D1:D316 -  -  -  -  ;zeropage,X	ISC oper,X	F7	2	6  
 3405 D1:D316 -  -  -  -  inst6520_isc_zpx:
 3406 D1:D316 ED 33 06 -      ADDCYC(6)
 3407 D1:D319 7E -  -  -      ld  a,(hl)
 3408 D1:D31A 01 00 38 D0     ld  bc,ZEROPAGE
 3409 D1:D31E 81 -  -  -      add a,c
 3410 D1:D31F DD 86 01 -      add a,(ix+REGX)
 3411 D1:D322 4F -  -  -      ld  c,a
 3412 D1:D323 0A -  -  -      ld  a,(bc)
 3413 D1:D324 3C -  -  -      inc a
 3414 D1:D325 02 -  -  -      ld  (bc),a
 3415 D1:D326 4F -  -  -      ld  c,a
 3416 D1:D327 C3 8D BA D1     jp  subroutine6502_sbc_combined_end
 3417 D1:D32B -  -  -  -  
 3418 D1:D32B -  -  -  -  ;absolute	ISC oper	EF	3	6  	
 3419 D1:D32B -  -  -  -  inst6502_isc_abs:
 3420 D1:D32B ED 33 06 -      ADDCYC(6)
 3421 D1:D32E CD CA B9 D1     call subroutine6502_abs_split_start
 3422 D1:D332 E5 -  -  -      push hl
 3423 D1:D333 50 -  -  -          ld  d,b
 3424 D1:D334 79 -  -  -          ld  a,c
 3425 D1:D335 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3426 D1:D337 ED 4C -  -          mlt bc
 3427 D1:D339 21 00 40 D0         ld  hl,PAGETABLE
 3428 D1:D33D 09 -  -  -          add hl,bc
 3429 D1:D33E ED 27 -  -          ld  hl,(hl)
 3430 D1:D340 06 00 -  -          ld  b,0
 3431 D1:D342 4F -  -  -          ld  c,a
 3432 D1:D343 09 -  -  -          add hl,bc   ;full address
 3433 D1:D344 CD D8 AF D1         READ_ACCESS
 3434 D1:D348 3C -  -  -          inc a
 3435 D1:D349 47 -  -  -          ld b,a
 3436 D1:D34A 4F -  -  -          ld c,a
 3437 D1:D34B C5 -  -  -          push bc
 3438 D1:D34C CD 80 B0 D1             WRITE_ACCESS
 3439 D1:D350 C1 -  -  -          pop bc
 3440 D1:D351 E1 -  -  -      pop hl
 3441 D1:D352 C3 8D BA D1     jp  subroutine6502_sbc_combined_end
 3442 D1:D356 -  -  -  -  
 3443 D1:D356 -  -  -  -  ;absolut,X	ISC oper,X	FF	3	7  	
 3444 D1:D356 -  -  -  -  inst6502_isc_absx:
 3445 D1:D356 ED 33 07 -      ADDCYC(7)
 3446 D1:D359 CD 27 BA D1     PUSH_ABSXSPLIT_NODEP
 3447 D1:D35D CD D8 AF D1         READ_ACCESS
 3448 D1:D361 3C -  -  -          inc a
 3449 D1:D362 47 -  -  -          ld  b,a
 3450 D1:D363 4F -  -  -          ld  c,a
 3451 D1:D364 C5 -  -  -          push bc
 3452 D1:D365 CD 80 B0 D1             WRITE_ACCESS
 3453 D1:D369 C1 -  -  -          pop bc
 3454 D1:D36A E1 -  -  -      pop hl
 3455 D1:D36B C3 8D BA D1     jp  subroutine6502_sbc_combined_end
 3456 D1:D36F -  -  -  -  
 3457 D1:D36F -  -  -  -  ;absolut,Y	ISC oper,Y	FB	3	7  	
 3458 D1:D36F -  -  -  -  inst6502_isc_absy:
 3459 D1:D36F ED 33 07 -      ADDCYC(7)
 3460 D1:D372 CD 22 BA D1     PUSH_ABSYSPLIT_NODEP
 3461 D1:D376 CD D8 AF D1         READ_ACCESS
 3462 D1:D37A 3C -  -  -          inc a
 3463 D1:D37B 47 -  -  -          ld  b,a
 3464 D1:D37C 4F -  -  -          ld  c,a
 3465 D1:D37D C5 -  -  -          push bc
 3466 D1:D37E CD 80 B0 D1             WRITE_ACCESS
 3467 D1:D382 C1 -  -  -          pop bc
 3468 D1:D383 E1 -  -  -      pop hl
 3469 D1:D384 C3 8D BA D1     jp  subroutine6502_sbc_combined_end
 3470 D1:D388 -  -  -  -  
 3471 D1:D388 -  -  -  -  ;(indirect,X)	ISC (oper,X)	E3	2	8  	
 3472 D1:D388 -  -  -  -  inst6502_isc_indx:
 3473 D1:D388 ED 33 08 -      ADDCYC(8)
 3474 D1:D38B E5 -  -  -      push hl
 3475 D1:D38C 7E -  -  -          ld  a,(hl)
 3476 D1:D38D 21 00 38 D0         ld  hl,ZEROPAGE
 3477 D1:D391 85 -  -  -          add a,L
 3478 D1:D392 DD 86 01 -          add a,(ix+REGX)
 3479 D1:D395 6F -  -  -          ld  L,a
 3480 D1:D396 7E -  -  -          ld  a,(hl)
 3481 D1:D397 2C -  -  -          inc L
 3482 D1:D398 56 -  -  -          ld  d,(hl)
 3483 D1:D399 42 -  -  -          ld  b,d
 3484 D1:D39A 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3485 D1:D39C ED 4C -  -          mlt bc
 3486 D1:D39E 21 00 40 D0         ld  hl,PAGETABLE
 3487 D1:D3A2 09 -  -  -          add hl,bc
 3488 D1:D3A3 ED 27 -  -          ld  hl,(hl)
 3489 D1:D3A5 06 00 -  -          ld  b,0
 3490 D1:D3A7 4F -  -  -          ld  c,a
 3491 D1:D3A8 09 -  -  -          add hl,bc
 3492 D1:D3A9 CD D8 AF D1         READ_ACCESS
 3493 D1:D3AD 3C -  -  -          inc a
 3494 D1:D3AE 47 -  -  -          ld  b,a
 3495 D1:D3AF 4F -  -  -          ld  c,a
 3496 D1:D3B0 C5 -  -  -          push bc
 3497 D1:D3B1 CD 80 B0 D1             WRITE_ACCESS
 3498 D1:D3B5 C1 -  -  -          pop bc
 3499 D1:D3B6 E1 -  -  -      pop hl
 3500 D1:D3B7 C3 8D BA D1     jp  subroutine6502_sbc_combined_end
 3501 D1:D3BB -  -  -  -  
 3502 D1:D3BB -  -  -  -  ;(indirect),Y	ISC (oper),Y	F3	2	8  
 3503 D1:D3BB -  -  -  -  inst6502_isc_indy:
 3504 D1:D3BB ED 33 08 -      ADDCYC(8)
 3505 D1:D3BE E5 -  -  -      push hl
 3506 D1:D3BF 7E -  -  -          ld  a,(hl)
 3507 D1:D3C0 21 00 38 D0         ld  hl,ZEROPAGE
 3508 D1:D3C4 85 -  -  -          add a,L
 3509 D1:D3C5 6F -  -  -          ld  L,a
 3510 D1:D3C6 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3511 D1:D3C7 2C -  -  -          inc L
 3512 D1:D3C8 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3513 D1:D3CB 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3514 D1:D3CC 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3515 D1:D3CE 24 -  -  -          inc h
 3516 D1:D3CF 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3517 D1:D3D0 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3518 D1:D3D2 ED 6C -  -          mlt hl          ;23.
 3519 D1:D3D4 01 00 40 D0         ld  bc,PAGETABLE
 3520 D1:D3D8 09 -  -  -          add hl,bc
 3521 D1:D3D9 ED 27 -  -          ld  hl,(hl)     ;address get.
 3522 D1:D3DB 01 00 00 00         ld  bc,0
 3523 D1:D3DF 4F -  -  -          ld  c,a
 3524 D1:D3E0 09 -  -  -          add hl,bc       ;Full address get.
 3525 D1:D3E1 CD D8 AF D1         READ_ACCESS
 3526 D1:D3E5 3C -  -  -          inc a
 3527 D1:D3E6 47 -  -  -          ld  b,a
 3528 D1:D3E7 4F -  -  -          ld  c,a
 3529 D1:D3E8 C5 -  -  -          push bc
 3530 D1:D3E9 CD 80 B0 D1             WRITE_ACCESS
 3531 D1:D3ED C1 -  -  -          pop bc
 3532 D1:D3EE E1 -  -  -      pop hl
 3533 D1:D3EF C3 8D BA D1     jp  subroutine6502_sbc_combined_end
 3534 D1:D3F3 -  -  -  -  ;-----------------------------------------------------------------------------
 3535 D1:D3F3 -  -  -  -  ;LAS (LAR) - LDA/TSX oper
 3536 D1:D3F3 -  -  -  -  ;M AND SP -> A, X, SP. Affects ZN
 3537 D1:D3F3 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3538 D1:D3F3 -  -  -  -  ;absolut,Y	LAS oper,Y	BB	3	4* 
 3539 D1:D3F3 -  -  -  -  inst6502_las_absy:
 3540 D1:D3F3 ED 33 04 -      ADDCYC(4)
 3541 D1:D3F6 CD E6 B9 D1     PUSH_ABSYSPLIT
 3542 D1:D3FA CD D8 AF D1         READ_ACCESS
 3543 D1:D3FE E1 -  -  -      pop hl
 3544 D1:D3FF DD A6 03 -      and a,(ix+REGSP)
 3545 D1:D402 DD 77 00 -      ld  (ix+REGA),A
 3546 D1:D405 DD 77 01 -      ld  (ix+REGX),A
 3547 D1:D408 DD 77 03 -      ld  (ix+REGSP),A
 3548 D1:D40B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3549 D1:D41F C3 1B B9 D1     jp i6502NextLoad
 3550 D1:D423 -  -  -  -  
 3551 D1:D423 -  -  -  -  ;-----------------------------------------------------------------------------
 3552 D1:D423 -  -  -  -  ;LAX - LDA oper + LDX oper
 3553 D1:D423 -  -  -  -  ;M -> A -> X. Flags affected: ZN
 3554 D1:D423 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3555 D1:D423 -  -  -  -  ;zeropage	LAX oper	A7	2	3  	
 3556 D1:D423 -  -  -  -  inst6502_lax_zp:
 3557 D1:D423 ED 33 03 -      ADDCYC(3)
 3558 D1:D426 7E -  -  -      ld  a,(hl)
 3559 D1:D427 01 00 38 D0     ld  bc,ZEROPAGE
 3560 D1:D42B 81 -  -  -      add a,c
 3561 D1:D42C 4F -  -  -      ld  c,a
 3562 D1:D42D 0A -  -  -      ld  a,(bc)
 3563 D1:D42E DD 77 00 -      ld  (ix+REGA),a
 3564 D1:D431 DD 77 01 -      ld  (ix+REGX),a
 3565 D1:D434 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3566 D1:D448 C3 1B B9 D1     jp i6502NextLoad
 3567 D1:D44C -  -  -  -  
 3568 D1:D44C -  -  -  -  ;zeropage,Y	LAX oper,Y	B7	2	4  	
 3569 D1:D44C -  -  -  -  inst6502_lax_zpy:
 3570 D1:D44C ED 33 04 -      ADDCYC(4)
 3571 D1:D44F 7E -  -  -      ld  a,(hl)
 3572 D1:D450 01 00 38 D0     ld  bc,ZEROPAGE
 3573 D1:D454 81 -  -  -      add a,c
 3574 D1:D455 DD 86 02 -      add a,(ix+REGY)
 3575 D1:D458 4F -  -  -      ld  c,a
 3576 D1:D459 0A -  -  -      ld  a,(bc)
 3577 D1:D45A DD 77 00 -      ld  (ix+REGA),a
 3578 D1:D45D DD 77 01 -      ld  (ix+REGX),a
 3579 D1:D460 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3580 D1:D474 C3 1B B9 D1     jp i6502NextLoad
 3581 D1:D478 -  -  -  -  
 3582 D1:D478 -  -  -  -  ;absolute	LAX oper	AF	3	4  	
 3583 D1:D478 -  -  -  -  inst6502_lax_abs:
 3584 D1:D478 ED 33 04 -      ADDCYC(4)
 3585 D1:D47B CD CA B9 D1     call subroutine6502_abs_split_start
 3586 D1:D47F E5 -  -  -      push hl
 3587 D1:D480 50 -  -  -          ld  d,b
 3588 D1:D481 79 -  -  -          ld  a,c
 3589 D1:D482 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3590 D1:D484 ED 4C -  -          mlt bc
 3591 D1:D486 21 00 40 D0         ld  hl,PAGETABLE
 3592 D1:D48A 09 -  -  -          add hl,bc
 3593 D1:D48B ED 27 -  -          ld  hl,(hl)
 3594 D1:D48D 06 00 -  -          ld  b,0
 3595 D1:D48F 4F -  -  -          ld  c,a
 3596 D1:D490 09 -  -  -          add hl,bc   ;full address
 3597 D1:D491 CD D8 AF D1         READ_ACCESS
 3598 D1:D495 DD 77 00 -          ld (ix+REGA),a
 3599 D1:D498 DD 77 01 -          ld (ix+REGX),a
 3600 D1:D49B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3601 D1:D4AF E1 -  -  -      pop hl
 3602 D1:D4B0 C3 1B B9 D1     jp i6502NextLoad
 3603 D1:D4B4 -  -  -  -  
 3604 D1:D4B4 -  -  -  -  ;absolut,Y	LAX oper,Y	BF	3	4* 	
 3605 D1:D4B4 -  -  -  -  inst6502_lax_absy:
 3606 D1:D4B4 ED 33 04 -      ADDCYC(4)
 3607 D1:D4B7 CD E6 B9 D1     PUSH_ABSYSPLIT
 3608 D1:D4BB CD D8 AF D1         READ_ACCESS
 3609 D1:D4BF DD 77 00 -          ld (ix+REGA),a
 3610 D1:D4C2 DD 77 01 -          ld (ix+REGX),a
 3611 D1:D4C5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3612 D1:D4D9 E1 -  -  -      pop hl
 3613 D1:D4DA C3 1B B9 D1     jp i6502NextLoad
 3614 D1:D4DE -  -  -  -  
 3615 D1:D4DE -  -  -  -  ;(indirect,X)	LAX (oper,X)	A3	2	6  	
 3616 D1:D4DE -  -  -  -  inst6502_lax_indx:
 3617 D1:D4DE ED 33 06 -      ADDCYC(6)
 3618 D1:D4E1 E5 -  -  -      push hl
 3619 D1:D4E2 7E -  -  -          ld  a,(hl)
 3620 D1:D4E3 21 00 38 D0         ld  hl,ZEROPAGE
 3621 D1:D4E7 85 -  -  -          add a,L
 3622 D1:D4E8 DD 86 01 -          add a,(ix+REGX)
 3623 D1:D4EB 6F -  -  -          ld  L,a
 3624 D1:D4EC 7E -  -  -          ld  a,(hl)
 3625 D1:D4ED 2C -  -  -          inc L
 3626 D1:D4EE 56 -  -  -          ld  d,(hl)
 3627 D1:D4EF 42 -  -  -          ld  b,d
 3628 D1:D4F0 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3629 D1:D4F2 ED 4C -  -          mlt bc
 3630 D1:D4F4 21 00 40 D0         ld  hl,PAGETABLE
 3631 D1:D4F8 09 -  -  -          add hl,bc
 3632 D1:D4F9 ED 27 -  -          ld  hl,(hl)
 3633 D1:D4FB 06 00 -  -          ld  b,0
 3634 D1:D4FD 4F -  -  -          ld  c,a
 3635 D1:D4FE 09 -  -  -          add hl,bc
 3636 D1:D4FF CD D8 AF D1         READ_ACCESS
 3637 D1:D503 DD 77 00 -          ld (ix+REGA),a
 3638 D1:D506 DD 77 01 -          ld (ix+REGX),a
 3639 D1:D509 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3640 D1:D51D E1 -  -  -      pop hl
 3641 D1:D51E C3 1B B9 D1     jp i6502NextLoad
 3642 D1:D522 -  -  -  -  
 3643 D1:D522 -  -  -  -  ;(indirect),Y	LAX (oper),Y	B3	2	5* 
 3644 D1:D522 -  -  -  -  inst6502_lax_indy:
 3645 D1:D522 ED 33 05 -      ADDCYC(5)
 3646 D1:D525 E5 -  -  -      push hl
 3647 D1:D526 7E -  -  -          ld  a,(hl)
 3648 D1:D527 21 00 38 D0         ld  hl,ZEROPAGE
 3649 D1:D52B 85 -  -  -          add a,L
 3650 D1:D52C 6F -  -  -          ld  L,a
 3651 D1:D52D 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3652 D1:D52E 2C -  -  -          inc L
 3653 D1:D52F DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3654 D1:D532 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3655 D1:D533 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3656 D1:D535 FD 23 -  -          ADDCYC(1)
 3657 D1:D537 24 -  -  -          inc h
 3658 D1:D538 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3659 D1:D539 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3660 D1:D53B ED 6C -  -          mlt hl          ;23.
 3661 D1:D53D 01 00 40 D0         ld  bc,PAGETABLE
 3662 D1:D541 09 -  -  -          add hl,bc
 3663 D1:D542 ED 27 -  -          ld  hl,(hl)     ;address get.
 3664 D1:D544 01 00 00 00         ld  bc,0
 3665 D1:D548 4F -  -  -          ld  c,a
 3666 D1:D549 09 -  -  -          add hl,bc       ;Full address get.
 3667 D1:D54A CD D8 AF D1         READ_ACCESS
 3668 D1:D54E DD 77 00 -          ld  (ix+REGA),a
 3669 D1:D551 DD 77 01 -          ld  (ix+REGX),a
 3670 D1:D554 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3671 D1:D568 E1 -  -  -      pop hl
 3672 D1:D569 C3 1B B9 D1     jp i6502NextLoad
 3673 D1:D56D -  -  -  -  
 3674 D1:D56D -  -  -  -  ;-----------------------------------------------------------------------------
 3675 D1:D56D -  -  -  -  ;LXA (LAX immediate)
 3676 D1:D56D -  -  -  -  ;Store * AND oper in A and X
 3677 D1:D56D -  -  -  -  ;Highly unstable, involves a 'magic' constant, see ANE
 3678 D1:D56D -  -  -  -  ;(A OR CONST) AND oper -> A -> X
 3679 D1:D56D -  -  -  -  ;immediate	LXA #oper	AB	2	2  	††
 3680 D1:D56D -  -  -  -  inst6502_lxa:
 3681 D1:D56D ED 33 02 -      ADDCYC(2)
 3682 D1:D570 ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3683 D1:D572 DD B6 00 -      or  a,(ix+REGA)
 3684 D1:D575 A6 -  -  -      and a,(hl)
 3685 D1:D576 DD 77 00 -      ld  (ix+REGA),a
 3686 D1:D579 DD 77 01 -      ld  (ix+REGX),a
 3687 D1:D57C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3688 D1:D590 C3 1B B9 D1     jp  i6502NextLoad
 3689 D1:D594 -  -  -  -  
 3690 D1:D594 -  -  -  -  ;-----------------------------------------------------------------------------
 3691 D1:D594 -  -  -  -  ;RLA - ROL oper + AND oper
 3692 D1:D594 -  -  -  -  ;M = C <- [76543210] <- C, A AND M -> A. flags CZN
 3693 D1:D594 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3694 D1:D594 -  -  -  -  ;zeropage	RLA oper	27	2	5  	
 3695 D1:D594 -  -  -  -  inst6502_rla_zp:
 3696 D1:D594 ED 33 05 -      ADDCYC(5)
 3697 D1:D597 7E -  -  -      ld  a,(hl)
 3698 D1:D598 01 00 38 D0     ld  bc,ZEROPAGE
 3699 D1:D59C 81 -  -  -      add a,c
 3700 D1:D59D 4F -  -  -      ld  c,a
 3701 D1:D59E DD 7E 04 -      ld  a,(ix+REGSR)
 3702 D1:D5A1 1F -  -  -      rra
 3703 D1:D5A2 0A -  -  -      ld  a,(bc)
 3704 D1:D5A3 17 -  -  -      rla
 3705 D1:D5A4 02 -  -  -      ld  (bc),a
 3706 D1:D5A5 -  -  -  -      ;Flag breakdown to optimize for split operation
 3707 D1:D5A5 DD 46 04 -      ld  b,(ix+REGSR)
 3708 D1:D5A8 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3709 D1:D5AE DD A6 00 -      and a,(ix+REGA)
 3710 D1:D5B1 DD 77 00 -      ld  (ix+REGA),a
 3711 D1:D5B4 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3712 D1:D5BA 87 -  -  -      add a,a
 3713 D1:D5BB CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3714 D1:D5C1 DD 70 04 -      ld  (ix+REGSR),b
 3715 D1:D5C4 C3 1B B9 D1     jp i6502NextLoad
 3716 D1:D5C8 -  -  -  -  
 3717 D1:D5C8 -  -  -  -  ;zeropage,X	RLA oper,X	37	2	6  	
 3718 D1:D5C8 -  -  -  -  inst6502_rla_zpx:
 3719 D1:D5C8 ED 33 06 -      ADDCYC(6)
 3720 D1:D5CB 7E -  -  -      ld  a,(hl)
 3721 D1:D5CC 01 00 38 D0     ld  bc,ZEROPAGE
 3722 D1:D5D0 81 -  -  -      add a,c
 3723 D1:D5D1 DD 86 01 -      add a,(ix+REGX)
 3724 D1:D5D4 4F -  -  -      ld  c,a
 3725 D1:D5D5 DD 7E 04 -      ld  a,(ix+REGSR)
 3726 D1:D5D8 1F -  -  -      rra
 3727 D1:D5D9 0A -  -  -      ld  a,(bc)
 3728 D1:D5DA 17 -  -  -      rla
 3729 D1:D5DB 02 -  -  -      ld  (bc),a
 3730 D1:D5DC -  -  -  -      ;Flag breakdown to optimize for split operation
 3731 D1:D5DC DD 46 04 -      ld  b,(ix+REGSR)
 3732 D1:D5DF CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3733 D1:D5E5 DD A6 00 -      and a,(ix+REGA)
 3734 D1:D5E8 DD 77 00 -      ld  (ix+REGA),a
 3735 D1:D5EB CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3736 D1:D5F1 87 -  -  -      add a,a
 3737 D1:D5F2 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3738 D1:D5F8 DD 70 04 -      ld  (ix+REGSR),b
 3739 D1:D5FB C3 1B B9 D1     jp i6502NextLoad
 3740 D1:D5FF -  -  -  -  
 3741 D1:D5FF -  -  -  -  ;absolute	RLA oper	2F	3	6  	
 3742 D1:D5FF -  -  -  -  inst6502_rla_abs:
 3743 D1:D5FF ED 33 06 -      ADDCYC(6)
 3744 D1:D602 CD CA B9 D1     call subroutine6502_abs_split_start
 3745 D1:D606 E5 -  -  -      push hl
 3746 D1:D607 50 -  -  -          ld  d,b
 3747 D1:D608 79 -  -  -          ld  a,c
 3748 D1:D609 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3749 D1:D60B ED 4C -  -          mlt bc
 3750 D1:D60D 21 00 40 D0         ld  hl,PAGETABLE
 3751 D1:D611 09 -  -  -          add hl,bc
 3752 D1:D612 ED 27 -  -          ld  hl,(hl)
 3753 D1:D614 06 00 -  -          ld  b,0
 3754 D1:D616 4F -  -  -          ld  c,a
 3755 D1:D617 09 -  -  -          add hl,bc   ;full address
 3756 D1:D618 CD D8 AF D1         READ_ACCESS
 3757 D1:D61C DD 46 04 -          ld  b,(ix+REGSR)
 3758 D1:D61F CB 18 -  -          rr b
 3759 D1:D621 17 -  -  -          rla
 3760 D1:D622 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3761 D1:D623 -  -  -  -          ;Split oper
 3762 D1:D623 DD 46 04 -          ld  b,(ix+REGSR)
 3763 D1:D626 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3764 D1:D62C DD A6 00 -          and a,(ix+REGA)
 3765 D1:D62F DD 77 00 -          ld  (ix+REGA),a
 3766 D1:D632 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3767 D1:D638 87 -  -  -          add a,a
 3768 D1:D639 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3769 D1:D63F DD 70 04 -          ld  (ix+REGSR),b
 3770 D1:D642 41 -  -  -          ld  b,c
 3771 D1:D643 CD 80 B0 D1         WRITE_ACCESS
 3772 D1:D647 E1 -  -  -      pop hl
 3773 D1:D648 C3 1B B9 D1     jp i6502NextLoad
 3774 D1:D64C -  -  -  -  
 3775 D1:D64C -  -  -  -  ;absolut,X	RLA oper,X	3F	3	7  	
 3776 D1:D64C -  -  -  -  inst6502_rla_absx:
 3777 D1:D64C ED 33 07 -      ADDCYC(7)
 3778 D1:D64F CD 27 BA D1     PUSH_ABSXSPLIT_NODEP
 3779 D1:D653 CD D8 AF D1         READ_ACCESS
 3780 D1:D657 DD 46 04 -          ld  b,(ix+REGSR)
 3781 D1:D65A CB 18 -  -          rr b
 3782 D1:D65C 17 -  -  -          rla
 3783 D1:D65D 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3784 D1:D65E -  -  -  -          ;Split oper
 3785 D1:D65E DD 46 04 -          ld  b,(ix+REGSR)
 3786 D1:D661 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3787 D1:D667 DD A6 00 -          and a,(ix+REGA)
 3788 D1:D66A DD 77 00 -          ld  (ix+REGA),a
 3789 D1:D66D CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3790 D1:D673 87 -  -  -          add a,a
 3791 D1:D674 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3792 D1:D67A DD 70 04 -          ld  (ix+REGSR),b
 3793 D1:D67D 41 -  -  -          ld  b,c
 3794 D1:D67E CD 80 B0 D1         WRITE_ACCESS
 3795 D1:D682 E1 -  -  -      pop hl
 3796 D1:D683 C3 1B B9 D1     jp i6502NextLoad
 3797 D1:D687 -  -  -  -  
 3798 D1:D687 -  -  -  -  ;absolut,Y	RLA oper,Y	3B	3	7  	
 3799 D1:D687 -  -  -  -  inst6502_rla_absy:
 3800 D1:D687 ED 33 07 -      ADDCYC(7)
 3801 D1:D68A CD 22 BA D1     PUSH_ABSYSPLIT_NODEP
 3802 D1:D68E CD D8 AF D1         READ_ACCESS
 3803 D1:D692 DD 46 04 -          ld  b,(ix+REGSR)
 3804 D1:D695 CB 18 -  -          rr b
 3805 D1:D697 17 -  -  -          rla
 3806 D1:D698 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3807 D1:D699 -  -  -  -          ;Split oper
 3808 D1:D699 DD 46 04 -          ld  b,(ix+REGSR)
 3809 D1:D69C CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3810 D1:D6A2 DD A6 00 -          and a,(ix+REGA)
 3811 D1:D6A5 DD 77 00 -          ld  (ix+REGA),a
 3812 D1:D6A8 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3813 D1:D6AE 87 -  -  -          add a,a
 3814 D1:D6AF CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3815 D1:D6B5 DD 70 04 -          ld  (ix+REGSR),b
 3816 D1:D6B8 41 -  -  -          ld  b,c
 3817 D1:D6B9 CD 80 B0 D1         WRITE_ACCESS
 3818 D1:D6BD E1 -  -  -      pop hl
 3819 D1:D6BE C3 1B B9 D1     jp i6502NextLoad
 3820 D1:D6C2 -  -  -  -  
 3821 D1:D6C2 -  -  -  -  ;(indirect,X)	RLA (oper,X)	23	2	8  	
 3822 D1:D6C2 -  -  -  -  isnt6502_rla_indx:
 3823 D1:D6C2 ED 33 08 -      ADDCYC(8)
 3824 D1:D6C5 E5 -  -  -      push hl
 3825 D1:D6C6 7E -  -  -          ld  a,(hl)
 3826 D1:D6C7 21 00 38 D0         ld  hl,ZEROPAGE
 3827 D1:D6CB 85 -  -  -          add a,L
 3828 D1:D6CC DD 86 01 -          add a,(ix+REGX)
 3829 D1:D6CF 6F -  -  -          ld  L,a
 3830 D1:D6D0 7E -  -  -          ld  a,(hl)
 3831 D1:D6D1 2C -  -  -          inc L
 3832 D1:D6D2 56 -  -  -          ld  d,(hl)
 3833 D1:D6D3 42 -  -  -          ld  b,d
 3834 D1:D6D4 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3835 D1:D6D6 ED 4C -  -          mlt bc
 3836 D1:D6D8 21 00 40 D0         ld  hl,PAGETABLE
 3837 D1:D6DC 09 -  -  -          add hl,bc
 3838 D1:D6DD ED 27 -  -          ld  hl,(hl)
 3839 D1:D6DF 06 00 -  -          ld  b,0
 3840 D1:D6E1 4F -  -  -          ld  c,a
 3841 D1:D6E2 09 -  -  -          add hl,bc
 3842 D1:D6E3 CD D8 AF D1         READ_ACCESS
 3843 D1:D6E7 DD 46 04 -          ld  b,(ix+REGSR)
 3844 D1:D6EA CB 18 -  -          rr b
 3845 D1:D6EC 17 -  -  -          rla
 3846 D1:D6ED 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3847 D1:D6EE -  -  -  -          ;Split oper
 3848 D1:D6EE DD 46 04 -          ld  b,(ix+REGSR)
 3849 D1:D6F1 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3850 D1:D6F7 DD A6 00 -          and a,(ix+REGA)
 3851 D1:D6FA DD 77 00 -          ld  (ix+REGA),a
 3852 D1:D6FD CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3853 D1:D703 87 -  -  -          add a,a
 3854 D1:D704 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3855 D1:D70A DD 70 04 -          ld  (ix+REGSR),b
 3856 D1:D70D 41 -  -  -          ld  b,c
 3857 D1:D70E CD 80 B0 D1         WRITE_ACCESS
 3858 D1:D712 E1 -  -  -      pop hl
 3859 D1:D713 C3 1B B9 D1     jp  i6502NextLoad
 3860 D1:D717 -  -  -  -  
 3861 D1:D717 -  -  -  -  ;(indirect),Y	RLA (oper),Y	33	2	8  
 3862 D1:D717 -  -  -  -  inst6502_rla_indy:
 3863 D1:D717 ED 33 08 -      ADDCYC(8)
 3864 D1:D71A E5 -  -  -      push hl
 3865 D1:D71B 7E -  -  -          ld  a,(hl)
 3866 D1:D71C 21 00 38 D0         ld  hl,ZEROPAGE
 3867 D1:D720 85 -  -  -          add a,L
 3868 D1:D721 6F -  -  -          ld  L,a
 3869 D1:D722 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3870 D1:D723 2C -  -  -          inc L
 3871 D1:D724 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3872 D1:D727 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3873 D1:D728 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3874 D1:D72A 24 -  -  -          inc h
 3875 D1:D72B 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3876 D1:D72C 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3877 D1:D72E ED 6C -  -          mlt hl          ;23.
 3878 D1:D730 01 00 40 D0         ld  bc,PAGETABLE
 3879 D1:D734 09 -  -  -          add hl,bc
 3880 D1:D735 ED 27 -  -          ld  hl,(hl)     ;address get.
 3881 D1:D737 01 00 00 00         ld  bc,0
 3882 D1:D73B 4F -  -  -          ld  c,a
 3883 D1:D73C 09 -  -  -          add hl,bc       ;Full address get.
 3884 D1:D73D CD D8 AF D1         READ_ACCESS
 3885 D1:D741 DD 46 04 -          ld  b,(ix+REGSR)
 3886 D1:D744 CB 18 -  -          rr b
 3887 D1:D746 17 -  -  -          rla
 3888 D1:D747 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3889 D1:D748 -  -  -  -          ;Split oper
 3890 D1:D748 DD 46 04 -          ld  b,(ix+REGSR)
 3891 D1:D74B CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3892 D1:D751 DD A6 00 -          and a,(ix+REGA)
 3893 D1:D754 DD 77 00 -          ld  (ix+REGA),a
 3894 D1:D757 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3895 D1:D75D 87 -  -  -          add a,a
 3896 D1:D75E CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3897 D1:D764 DD 70 04 -          ld  (ix+REGSR),b
 3898 D1:D767 41 -  -  -          ld  b,c
 3899 D1:D768 CD 80 B0 D1         WRITE_ACCESS
 3900 D1:D76C E1 -  -  -      pop hl
 3901 D1:D76D C3 1B B9 D1     jp  i6502NextLoad
 3902 D1:D771 -  -  -  -  
 3903 D1:D771 -  -  -  -  ;-----------------------------------------------------------------------------
 3904 D1:D771 -  -  -  -  ;RRA
 3905 D1:D771 -  -  -  -  ;ROR oper + ADC oper
 3906 D1:D771 -  -  -  -  ;M = C -> [76543210] -> C, A + M + C -> A, C. Affects VCZN
 3907 D1:D771 -  -  -  -  
 3908 D1:D771 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3909 D1:D771 -  -  -  -  ;zeropage	RRA oper	67	2	5  	
 3910 D1:D771 -  -  -  -  inst6502_rra_zp:
 3911 D1:D771 ED 33 05 -      ADDCYC(5)
 3912 D1:D774 7E -  -  -      ld  a,(hl)
 3913 D1:D775 01 00 38 D0     ld  bc,ZEROPAGE
 3914 D1:D779 81 -  -  -      add a,c
 3915 D1:D77A 4F -  -  -      ld  c,a
 3916 D1:D77B DD 7E 04 -      ld  a,(ix+REGSR)
 3917 D1:D77E 1F -  -  -      rra
 3918 D1:D77F 0A -  -  -      ld  a,(bc)
 3919 D1:D780 1F -  -  -      rra
 3920 D1:D781 02 -  -  -      ld  (bc),a
 3921 D1:D782 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 3922 D1:D786 30 04 -  -      jr nc,$+6
 3923 D1:D788 DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 3924 D1:D78C 4F -  -  -      ld  c,a
 3925 D1:D78D C3 5C BA D1     jp  subroutine6502_adc_combined_end
 3926 D1:D791 -  -  -  -  
 3927 D1:D791 -  -  -  -  ;zeropage,X	RRA oper,X	77	2	6  	
 3928 D1:D791 -  -  -  -  inst6502_rra_zpx:
 3929 D1:D791 ED 33 06 -      ADDCYC(6)
 3930 D1:D794 7E -  -  -      ld  a,(hl)
 3931 D1:D795 01 00 38 D0     ld  bc,ZEROPAGE
 3932 D1:D799 81 -  -  -      add a,c
 3933 D1:D79A DD 86 01 -      add a,(ix+REGX)
 3934 D1:D79D 4F -  -  -      ld  c,a
 3935 D1:D79E DD 7E 04 -      ld  a,(ix+REGSR)
 3936 D1:D7A1 1F -  -  -      rra
 3937 D1:D7A2 0A -  -  -      ld  a,(bc)
 3938 D1:D7A3 1F -  -  -      rra
 3939 D1:D7A4 02 -  -  -      ld  (bc),a
 3940 D1:D7A5 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 3941 D1:D7A9 30 04 -  -      jr nc,$+6
 3942 D1:D7AB DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 3943 D1:D7AF 4F -  -  -      ld  c,a
 3944 D1:D7B0 C3 5C BA D1     jp  subroutine6502_adc_combined_end
 3945 D1:D7B4 -  -  -  -  
 3946 D1:D7B4 -  -  -  -  ;absolute	RRA oper	6F	3	6  	
 3947 D1:D7B4 -  -  -  -  inst6502_rra_abs:
 3948 D1:D7B4 ED 33 06 -      ADDCYC(6)
 3949 D1:D7B7 CD CA B9 D1     call subroutine6502_abs_split_start
 3950 D1:D7BB E5 -  -  -      push hl
 3951 D1:D7BC 50 -  -  -          ld  d,b
 3952 D1:D7BD 79 -  -  -          ld  a,c
 3953 D1:D7BE 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3954 D1:D7C0 ED 4C -  -          mlt bc
 3955 D1:D7C2 21 00 40 D0         ld  hl,PAGETABLE
 3956 D1:D7C6 09 -  -  -          add hl,bc
 3957 D1:D7C7 ED 27 -  -          ld  hl,(hl)
 3958 D1:D7C9 06 00 -  -          ld  b,0
 3959 D1:D7CB 4F -  -  -          ld  c,a
 3960 D1:D7CC 09 -  -  -          add hl,bc   ;full address
 3961 D1:D7CD CD D8 AF D1         READ_ACCESS
 3962 D1:D7D1 DD 46 04 -          ld  b,(ix+REGSR)
 3963 D1:D7D4 CB 18 -  -          rr b
 3964 D1:D7D6 1F -  -  -          rra
 3965 D1:D7D7 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3966 D1:D7DB 30 04 -  -          jr nc,$+6
 3967 D1:D7DD DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3968 D1:D7E1 47 -  -  -          ld  b,a
 3969 D1:D7E2 C5 -  -  -          push bc
 3970 D1:D7E3 CD 80 B0 D1             WRITE_ACCESS
 3971 D1:D7E7 C1 -  -  -          pop bc
 3972 D1:D7E8 48 -  -  -          ld c,b
 3973 D1:D7E9 E1 -  -  -      pop hl
 3974 D1:D7EA C3 5C BA D1     jp  subroutine6502_adc_combined_end
 3975 D1:D7EE -  -  -  -  
 3976 D1:D7EE -  -  -  -  ;absolut,X	RRA oper,X	7F	3	7  	
 3977 D1:D7EE -  -  -  -  inst6502_rra_absx:
 3978 D1:D7EE ED 33 07 -      ADDCYC(7)
 3979 D1:D7F1 CD 27 BA D1     PUSH_ABSXSPLIT_NODEP
 3980 D1:D7F5 CD D8 AF D1         READ_ACCESS
 3981 D1:D7F9 DD 46 04 -          ld  b,(ix+REGSR)
 3982 D1:D7FC CB 18 -  -          rr b
 3983 D1:D7FE 1F -  -  -          rra
 3984 D1:D7FF DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3985 D1:D803 30 04 -  -          jr nc,$+6
 3986 D1:D805 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3987 D1:D809 47 -  -  -          ld  b,a
 3988 D1:D80A C5 -  -  -          push bc
 3989 D1:D80B CD 80 B0 D1             WRITE_ACCESS
 3990 D1:D80F C1 -  -  -          pop bc
 3991 D1:D810 48 -  -  -          ld c,b
 3992 D1:D811 E1 -  -  -      pop hl
 3993 D1:D812 C3 5C BA D1     jp  subroutine6502_adc_combined_end
 3994 D1:D816 -  -  -  -  
 3995 D1:D816 -  -  -  -  ;absolut,Y	RRA oper,Y	7B	3	7  	
 3996 D1:D816 -  -  -  -  inst6502_rra_absy:
 3997 D1:D816 ED 33 07 -      ADDCYC(7)
 3998 D1:D819 CD 22 BA D1     PUSH_ABSYSPLIT_NODEP
 3999 D1:D81D CD D8 AF D1         READ_ACCESS
 4000 D1:D821 DD 46 04 -          ld  b,(ix+REGSR)
 4001 D1:D824 CB 18 -  -          rr b
 4002 D1:D826 1F -  -  -          rra
 4003 D1:D827 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 4004 D1:D82B 30 04 -  -          jr nc,$+6
 4005 D1:D82D DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 4006 D1:D831 47 -  -  -          ld  b,a
 4007 D1:D832 C5 -  -  -          push bc
 4008 D1:D833 CD 80 B0 D1             WRITE_ACCESS
 4009 D1:D837 C1 -  -  -          pop bc
 4010 D1:D838 48 -  -  -          ld c,b
 4011 D1:D839 E1 -  -  -      pop hl
 4012 D1:D83A C3 5C BA D1     jp  subroutine6502_adc_combined_end
 4013 D1:D83E -  -  -  -  
 4014 D1:D83E -  -  -  -  ;(indirect,X)	RRA (oper,X)	63	2	8  	
 4015 D1:D83E -  -  -  -  isnt6502_rra_indx:
 4016 D1:D83E ED 33 08 -      ADDCYC(8)
 4017 D1:D841 E5 -  -  -      push hl
 4018 D1:D842 7E -  -  -          ld  a,(hl)
 4019 D1:D843 21 00 38 D0         ld  hl,ZEROPAGE
 4020 D1:D847 85 -  -  -          add a,L
 4021 D1:D848 DD 86 01 -          add a,(ix+REGX)
 4022 D1:D84B 6F -  -  -          ld  L,a
 4023 D1:D84C 7E -  -  -          ld  a,(hl)
 4024 D1:D84D 2C -  -  -          inc L
 4025 D1:D84E 56 -  -  -          ld  d,(hl)
 4026 D1:D84F 42 -  -  -          ld  b,d
 4027 D1:D850 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4028 D1:D852 ED 4C -  -          mlt bc
 4029 D1:D854 21 00 40 D0         ld  hl,PAGETABLE
 4030 D1:D858 09 -  -  -          add hl,bc
 4031 D1:D859 ED 27 -  -          ld  hl,(hl)
 4032 D1:D85B 06 00 -  -          ld  b,0
 4033 D1:D85D 4F -  -  -          ld  c,a
 4034 D1:D85E 09 -  -  -          add hl,bc
 4035 D1:D85F CD D8 AF D1         READ_ACCESS
 4036 D1:D863 DD 46 04 -          ld  b,(ix+REGSR)
 4037 D1:D866 CB 18 -  -          rr b
 4038 D1:D868 1F -  -  -          rra
 4039 D1:D869 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 4040 D1:D86D 30 04 -  -          jr nc,$+6
 4041 D1:D86F DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 4042 D1:D873 47 -  -  -          ld  b,a
 4043 D1:D874 C5 -  -  -          push bc
 4044 D1:D875 CD 80 B0 D1             WRITE_ACCESS
 4045 D1:D879 C1 -  -  -          pop bc
 4046 D1:D87A 48 -  -  -          ld c,b
 4047 D1:D87B E1 -  -  -      pop hl
 4048 D1:D87C C3 5C BA D1     jp  subroutine6502_adc_combined_end
 4049 D1:D880 -  -  -  -  
 4050 D1:D880 -  -  -  -  ;(indirect),Y	RRA (oper),Y	73	2	8  
 4051 D1:D880 -  -  -  -  inst6502_rra_indy:
 4052 D1:D880 ED 33 08 -      ADDCYC(8)
 4053 D1:D883 E5 -  -  -      push hl
 4054 D1:D884 7E -  -  -          ld  a,(hl)
 4055 D1:D885 21 00 38 D0         ld  hl,ZEROPAGE
 4056 D1:D889 85 -  -  -          add a,L
 4057 D1:D88A 6F -  -  -          ld  L,a
 4058 D1:D88B 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4059 D1:D88C 2C -  -  -          inc L
 4060 D1:D88D DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4061 D1:D890 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4062 D1:D891 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4063 D1:D893 24 -  -  -          inc h
 4064 D1:D894 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4065 D1:D895 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4066 D1:D897 ED 6C -  -          mlt hl          ;23.
 4067 D1:D899 01 00 40 D0         ld  bc,PAGETABLE
 4068 D1:D89D 09 -  -  -          add hl,bc
 4069 D1:D89E ED 27 -  -          ld  hl,(hl)     ;address get.
 4070 D1:D8A0 01 00 00 00         ld  bc,0
 4071 D1:D8A4 4F -  -  -          ld  c,a
 4072 D1:D8A5 09 -  -  -          add hl,bc       ;Full address get.
 4073 D1:D8A6 CD D8 AF D1         READ_ACCESS
 4074 D1:D8AA DD 46 04 -          ld  b,(ix+REGSR)
 4075 D1:D8AD CB 18 -  -          rr b
 4076 D1:D8AF 1F -  -  -          rra
 4077 D1:D8B0 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 4078 D1:D8B4 30 04 -  -          jr nc,$+6
 4079 D1:D8B6 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 4080 D1:D8BA 47 -  -  -          ld  b,a
 4081 D1:D8BB C5 -  -  -          push bc
 4082 D1:D8BC CD 80 B0 D1             WRITE_ACCESS
 4083 D1:D8C0 C1 -  -  -          pop bc
 4084 D1:D8C1 48 -  -  -          ld c,b
 4085 D1:D8C2 E1 -  -  -      pop hl
 4086 D1:D8C3 C3 5C BA D1     jp  subroutine6502_adc_combined_end
 4087 D1:D8C7 -  -  -  -  
 4088 D1:D8C7 -  -  -  -  ;-----------------------------------------------------------------------------
 4089 D1:D8C7 -  -  -  -  ;SAX (AXS, AAX) - A AND X -> M
 4090 D1:D8C7 -  -  -  -  ;A and X are put on the bus at the same time (resulting effectively in an 
 4091 D1:D8C7 -  -  -  -  ;AND operation) and stored in M. Flags not affected.
 4092 D1:D8C7 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4093 D1:D8C7 -  -  -  -  ;zeropage	SAX oper	87	2	3  	
 4094 D1:D8C7 -  -  -  -  inst6502_sax_zp:
 4095 D1:D8C7 ED 33 03 -      ADDCYC(3)
 4096 D1:D8CA 7E -  -  -      ld  a,(hl)
 4097 D1:D8CB 01 00 38 D0     ld  bc,ZEROPAGE
 4098 D1:D8CF 81 -  -  -      add a,c
 4099 D1:D8D0 4F -  -  -      ld  c,a
 4100 D1:D8D1 DD 7E 00 -      ld  a,(ix+REGA)
 4101 D1:D8D4 DD A6 01 -      and a,(ix+REGX)
 4102 D1:D8D7 02 -  -  -      ld  (bc),a
 4103 D1:D8D8 C3 1B B9 D1     jp i6502NextLoad
 4104 D1:D8DC -  -  -  -  
 4105 D1:D8DC -  -  -  -  
 4106 D1:D8DC -  -  -  -  ;zeropage,Y	SAX oper,Y	97	2	4  	
 4107 D1:D8DC -  -  -  -  inst6502_sax_zpy:
 4108 D1:D8DC ED 33 04 -      ADDCYC(4)
 4109 D1:D8DF 7E -  -  -      ld  a,(hl)
 4110 D1:D8E0 01 00 38 D0     ld  bc,ZEROPAGE
 4111 D1:D8E4 81 -  -  -      add a,c
 4112 D1:D8E5 DD 86 02 -      add a,(ix+REGY)
 4113 D1:D8E8 4F -  -  -      ld  c,a
 4114 D1:D8E9 DD 7E 00 -      ld  a,(ix+REGA)
 4115 D1:D8EC DD A6 01 -      and a,(ix+REGX)
 4116 D1:D8EF 02 -  -  -      ld  (bc),a
 4117 D1:D8F0 C3 1B B9 D1     jp i6502NextLoad
 4118 D1:D8F4 -  -  -  -  
 4119 D1:D8F4 -  -  -  -  
 4120 D1:D8F4 -  -  -  -  ;absolute	SAX oper	8F	3	4  	
 4121 D1:D8F4 -  -  -  -  inst6502_sax_abs:
 4122 D1:D8F4 ED 33 04 -      ADDCYC(4)
 4123 D1:D8F7 CD CA B9 D1     call subroutine6502_abs_split_start
 4124 D1:D8FB E5 -  -  -      push hl
 4125 D1:D8FC 50 -  -  -          ld  d,b
 4126 D1:D8FD 79 -  -  -          ld  a,c
 4127 D1:D8FE 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4128 D1:D900 ED 4C -  -          mlt bc
 4129 D1:D902 21 00 40 D0         ld  hl,PAGETABLE
 4130 D1:D906 09 -  -  -          add hl,bc
 4131 D1:D907 ED 27 -  -          ld  hl,(hl)
 4132 D1:D909 06 00 -  -          ld  b,0
 4133 D1:D90B 4F -  -  -          ld  c,a
 4134 D1:D90C 09 -  -  -          add hl,bc   ;full address
 4135 D1:D90D DD 7E 00 -          ld  a,(ix+REGA)
 4136 D1:D910 DD A6 01 -          and a,(ix+REGX)
 4137 D1:D913 47 -  -  -          ld  b,a
 4138 D1:D914 CD 80 B0 D1         WRITE_ACCESS
 4139 D1:D918 E1 -  -  -      pop hl
 4140 D1:D919 C3 1B B9 D1     jp i6502NextLoad
 4141 D1:D91D -  -  -  -  
 4142 D1:D91D -  -  -  -  ;(indirect,X)	SAX (oper,X)	83	2	6  
 4143 D1:D91D -  -  -  -  inst6502_sax_indx:
 4144 D1:D91D ED 33 06 -      ADDCYC(6)
 4145 D1:D920 E5 -  -  -      push hl
 4146 D1:D921 7E -  -  -          ld  a,(hl)
 4147 D1:D922 21 00 38 D0         ld  hl,ZEROPAGE
 4148 D1:D926 85 -  -  -          add a,L
 4149 D1:D927 DD 86 01 -          add a,(ix+REGX)
 4150 D1:D92A 6F -  -  -          ld  L,a
 4151 D1:D92B 7E -  -  -          ld  a,(hl)
 4152 D1:D92C 2C -  -  -          inc L
 4153 D1:D92D 56 -  -  -          ld  d,(hl)
 4154 D1:D92E 42 -  -  -          ld  b,d
 4155 D1:D92F 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4156 D1:D931 ED 4C -  -          mlt bc
 4157 D1:D933 21 00 40 D0         ld  hl,PAGETABLE
 4158 D1:D937 09 -  -  -          add hl,bc
 4159 D1:D938 ED 27 -  -          ld  hl,(hl)
 4160 D1:D93A 06 00 -  -          ld  b,0
 4161 D1:D93C 4F -  -  -          ld  c,a
 4162 D1:D93D 09 -  -  -          add hl,bc
 4163 D1:D93E DD 7E 00 -          ld  a,(ix+REGA)
 4164 D1:D941 DD A6 01 -          and a,(ix+REGX)
 4165 D1:D944 47 -  -  -          ld  b,a
 4166 D1:D945 CD 80 B0 D1         WRITE_ACCESS
 4167 D1:D949 E1 -  -  -      pop hl
 4168 D1:D94A C3 1B B9 D1     jp i6502NextLoad
 4169 D1:D94E -  -  -  -  
 4170 D1:D94E -  -  -  -  ;-----------------------------------------------------------------------------
 4171 D1:D94E -  -  -  -  ;SBX (AXS, SAX) - CMP and DEX at once, sets flags like CMP
 4172 D1:D94E -  -  -  -  ;(A AND X) - oper -> X.  Flags affected: CZN
 4173 D1:D94E -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4174 D1:D94E -  -  -  -  ;immediate	SBX #oper	CB	2	2  
 4175 D1:D94E -  -  -  -  inst6502_sbx_imm:
 4176 D1:D94E DD 7E 00 -      ld  a,(ix+REGA)
 4177 D1:D951 DD A6 01 -      and a,(ix+REGX)
 4178 D1:D954 96 -  -  -      sub a,(hl)
 4179 D1:D955 DD 77 01 -      ld  (ix+REGX),a
 4180 D1:D958 3F -  -  -      ccf
 4181 D1:D959 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 4182 D1:D973 C3 1B B9 D1     jp  i6502NextLoad
 4183 D1:D977 -  -  -  -  
 4184 D1:D977 -  -  -  -  ;-----------------------------------------------------------------------------
 4185 D1:D977 -  -  -  -  ;SHA (AHX, AXA) - Stores A AND X AND (high-byte of addr. + 1) at addr.
 4186 D1:D977 -  -  -  -  ;unstable: sometimes 'AND (H+1)' is dropped, 
 4187 D1:D977 -  -  -  -  ;page boundary crossings may not work 
 4188 D1:D977 -  -  -  -  ;(with the high-byte of the value used as the high-byte of the address)
 4189 D1:D977 -  -  -  -  ;A AND X AND (H+1) -> M
 4190 D1:D977 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4191 D1:D977 -  -  -  -  ;
 4192 D1:D977 -  -  -  -  ;NOTE: NOT GOING TO IMPLEMENT THESE. THEY'LL ADVANCE THE 6502 PC IN THE CORRECT
 4193 D1:D977 -  -  -  -  ;MANNER BUT NOTHING MORE. THE CPU WILL HALT WHEN ENCOUNTERING ONE OF THESE.
 4194 D1:D977 -  -  -  -  ;
 4195 D1:D977 -  -  -  -  ;absolut,Y	SHA oper,Y	9F	3	5  	†
 4196 D1:D977 -  -  -  -  inst6502_sha_absy:
 4197 D1:D977 ED 33 05 -      ADDCYC(5)
 4198 D1:D97A CD E6 B9 D1     PUSH_ABSYSPLIT
 4199 D1:D97E 18 FE -  -          jr $
 4200 D1:D980 E1 -  -  -      pop hl
 4201 D1:D981 C3 1B B9 D1     jp i6502NextLoad
 4202 D1:D985 -  -  -  -  
 4203 D1:D985 -  -  -  -  ;(indirect),Y	SHA (oper),Y	93	2	6  	†
 4204 D1:D985 -  -  -  -  inst6502_sha_indy:
 4205 D1:D985 ED 33 06 -      ADDCYC(6)
 4206 D1:D988 E5 -  -  -      push hl
 4207 D1:D989 7E -  -  -          ld  a,(hl)
 4208 D1:D98A 21 00 38 D0         ld  hl,ZEROPAGE
 4209 D1:D98E 85 -  -  -          add a,L
 4210 D1:D98F 6F -  -  -          ld  L,a
 4211 D1:D990 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4212 D1:D991 2C -  -  -          inc L
 4213 D1:D992 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4214 D1:D995 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4215 D1:D996 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4216 D1:D998 24 -  -  -          inc h
 4217 D1:D999 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4218 D1:D99A 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4219 D1:D99C ED 6C -  -          mlt hl          ;23.
 4220 D1:D99E 01 00 40 D0         ld  bc,PAGETABLE
 4221 D1:D9A2 09 -  -  -          add hl,bc
 4222 D1:D9A3 ED 27 -  -          ld  hl,(hl)     ;address get.
 4223 D1:D9A5 01 00 00 00         ld  bc,0
 4224 D1:D9A9 4F -  -  -          ld  c,a
 4225 D1:D9AA 09 -  -  -          add hl,bc       ;Full address get.
 4226 D1:D9AB CD D8 AF D1         READ_ACCESS
 4227 D1:D9AF 18 FE -  -          jr $
 4228 D1:D9B1 E1 -  -  -      pop hl
 4229 D1:D9B2 C3 1B B9 D1     jp i6502NextLoad
 4230 D1:D9B6 -  -  -  -  
 4231 D1:D9B6 -  -  -  -  ;-----------------------------------------------------------------------------
 4232 D1:D9B6 -  -  -  -  ;SHX (A11, SXA, XAS)
 4233 D1:D9B6 -  -  -  -  ;SHY (A11, SYA, SAY)
 4234 D1:D9B6 -  -  -  -  ;TAS (XAS, SHS)
 4235 D1:D9B6 -  -  -  -  ;Not going to implement these, but they'll still get the program
 4236 D1:D9B6 -  -  -  -  ;counter to make the correct noises. Right before locking up the core.
 4237 D1:D9B6 -  -  -  -  ;All of these instructions are marked as "unstable" in that they'll sometimes
 4238 D1:D9B6 -  -  -  -  ;drop the high byte, and page crossings sometimes won't work.
 4239 D1:D9B6 -  -  -  -  
 4240 D1:D9B6 -  -  -  -  ;absolut,Y	SHX oper,Y	9E	3	5  	†
 4241 D1:D9B6 -  -  -  -  inst6502_shx_absy:
 4242 D1:D9B6 ED 33 05 -      ADDCYC(5)
 4243 D1:D9B9 CD 22 BA D1     PUSH_ABSYSPLIT_NODEP
 4244 D1:D9BD 18 FE -  -          jr $
 4245 D1:D9BF E1 -  -  -      pop hl
 4246 D1:D9C0 C3 1B B9 D1     jp i6502NextLoad
 4247 D1:D9C4 -  -  -  -  
 4248 D1:D9C4 -  -  -  -  ;absolut,X	SHY oper,X	9C	3	5  	†
 4249 D1:D9C4 -  -  -  -  inst6502_shy_absx:
 4250 D1:D9C4 ED 33 05 -      ADDCYC(5)
 4251 D1:D9C7 CD 27 BA D1     PUSH_ABSXSPLIT_NODEP
 4252 D1:D9CB 18 FE -  -          jr $
 4253 D1:D9CD E1 -  -  -      pop hl
 4254 D1:D9CE C3 1B B9 D1     jp i6502NextLoad
 4255 D1:D9D2 -  -  -  -  
 4256 D1:D9D2 -  -  -  -  ;absolut,Y	TAS oper,Y	9B	3	5  	†
 4257 D1:D9D2 -  -  -  -  inst6502_tas_absy:
 4258 D1:D9D2 ED 33 05 -      ADDCYC(5)
 4259 D1:D9D5 CD 22 BA D1     PUSH_ABSYSPLIT_NODEP
 4260 D1:D9D9 18 FE -  -          jr $
 4261 D1:D9DB E1 -  -  -      pop hl
 4262 D1:D9DC C3 1B B9 D1     jp i6502NextLoad
 4263 D1:D9E0 -  -  -  -  
 4264 D1:D9E0 -  -  -  -  ;-----------------------------------------------------------------------------
 4265 D1:D9E0 -  -  -  -  ;SLO (ASO) - ASL oper + ORA oper
 4266 D1:D9E0 -  -  -  -  ;M = C <- [76543210] <- 0, A OR M -> A. Affects: CZN
 4267 D1:D9E0 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4268 D1:D9E0 -  -  -  -  
 4269 D1:D9E0 -  -  -  -  ;zeropage	SLO oper	07	2	5  	
 4270 D1:D9E0 -  -  -  -  inst6502_slo_zp:
 4271 D1:D9E0 ED 33 05 -      ADDCYC(5)
 4272 D1:D9E3 7E -  -  -      ld  a,(hl)
 4273 D1:D9E4 01 00 38 D0     ld  bc,ZEROPAGE
 4274 D1:D9E8 81 -  -  -      add a,c
 4275 D1:D9E9 4F -  -  -      ld  c,a
 4276 D1:D9EA 0A -  -  -      ld  a,(bc)
 4277 D1:D9EB CB 27 -  -      sla a
 4278 D1:D9ED 02 -  -  -      ld  (bc),a
 4279 D1:D9EE -  -  -  -      ;Flag breakdown to optimize for split operation
 4280 D1:D9EE DD 46 04 -      ld  b,(ix+REGSR)
 4281 D1:D9F1 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4282 D1:D9F7 DD B6 00 -      or  a,(ix+REGA)
 4283 D1:D9FA DD 77 00 -      ld  (ix+REGA),a
 4284 D1:D9FD CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4285 D1:DA03 87 -  -  -      add a,a
 4286 D1:DA04 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4287 D1:DA0A DD 70 04 -      ld  (ix+REGSR),b
 4288 D1:DA0D C3 1B B9 D1     jp i6502NextLoad
 4289 D1:DA11 -  -  -  -  
 4290 D1:DA11 -  -  -  -  ;zeropage,X	SLO oper,X	17	2	6  	
 4291 D1:DA11 -  -  -  -  inst6502_slo_zpx:
 4292 D1:DA11 ED 33 06 -      ADDCYC(6)
 4293 D1:DA14 7E -  -  -      ld  a,(hl)
 4294 D1:DA15 01 00 38 D0     ld  bc,ZEROPAGE
 4295 D1:DA19 81 -  -  -      add a,c
 4296 D1:DA1A DD 86 01 -      add a,(ix+REGX)
 4297 D1:DA1D 4F -  -  -      ld  c,a
 4298 D1:DA1E 0A -  -  -      ld  a,(bc)
 4299 D1:DA1F CB 27 -  -      sla a
 4300 D1:DA21 02 -  -  -      ld  (bc),a
 4301 D1:DA22 -  -  -  -      ;Flag breakdown to optimize for split operation
 4302 D1:DA22 DD 46 04 -      ld  b,(ix+REGSR)
 4303 D1:DA25 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4304 D1:DA2B DD B6 00 -      or  a,(ix+REGA)
 4305 D1:DA2E DD 77 00 -      ld  (ix+REGA),a
 4306 D1:DA31 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4307 D1:DA37 87 -  -  -      add a,a
 4308 D1:DA38 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4309 D1:DA3E DD 70 04 -      ld  (ix+REGSR),b
 4310 D1:DA41 C3 1B B9 D1     jp i6502NextLoad
 4311 D1:DA45 -  -  -  -  
 4312 D1:DA45 -  -  -  -  ;absolute	SLO oper	0F	3	6  	
 4313 D1:DA45 -  -  -  -  inst6502_slo_abs:
 4314 D1:DA45 ED 33 06 -      ADDCYC(6)
 4315 D1:DA48 CD CA B9 D1     call subroutine6502_abs_split_start
 4316 D1:DA4C E5 -  -  -      push hl
 4317 D1:DA4D 50 -  -  -          ld  d,b
 4318 D1:DA4E 79 -  -  -          ld  a,c
 4319 D1:DA4F 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4320 D1:DA51 ED 4C -  -          mlt bc
 4321 D1:DA53 21 00 40 D0         ld  hl,PAGETABLE
 4322 D1:DA57 09 -  -  -          add hl,bc
 4323 D1:DA58 ED 27 -  -          ld  hl,(hl)
 4324 D1:DA5A 06 00 -  -          ld  b,0
 4325 D1:DA5C 4F -  -  -          ld  c,a
 4326 D1:DA5D 09 -  -  -          add hl,bc   ;full address
 4327 D1:DA5E CD D8 AF D1         READ_ACCESS
 4328 D1:DA62 CB 27 -  -          sla a
 4329 D1:DA64 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4330 D1:DA65 -  -  -  -          ;Split oper
 4331 D1:DA65 DD 46 04 -          ld  b,(ix+REGSR)
 4332 D1:DA68 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4333 D1:DA6E DD B6 00 -          or  a,(ix+REGA)
 4334 D1:DA71 DD 77 00 -          ld  (ix+REGA),a
 4335 D1:DA74 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4336 D1:DA7A 87 -  -  -          add a,a
 4337 D1:DA7B CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4338 D1:DA81 DD 70 04 -          ld  (ix+REGSR),b
 4339 D1:DA84 41 -  -  -          ld  b,c
 4340 D1:DA85 CD 80 B0 D1         WRITE_ACCESS
 4341 D1:DA89 E1 -  -  -      pop hl
 4342 D1:DA8A C3 1B B9 D1     jp i6502NextLoad
 4343 D1:DA8E -  -  -  -  
 4344 D1:DA8E -  -  -  -  ;absolut,X	SLO oper,X	1F	3	7  	
 4345 D1:DA8E -  -  -  -  inst6502_slo_absx:
 4346 D1:DA8E ED 33 07 -      ADDCYC(7)
 4347 D1:DA91 CD 27 BA D1     PUSH_ABSXSPLIT_NODEP
 4348 D1:DA95 CD D8 AF D1         READ_ACCESS
 4349 D1:DA99 CB 27 -  -          sla a
 4350 D1:DA9B 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4351 D1:DA9C -  -  -  -          ;Split oper
 4352 D1:DA9C DD 46 04 -          ld  b,(ix+REGSR)
 4353 D1:DA9F CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4354 D1:DAA5 DD B6 00 -          or  a,(ix+REGA)
 4355 D1:DAA8 DD 77 00 -          ld  (ix+REGA),a
 4356 D1:DAAB CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4357 D1:DAB1 87 -  -  -          add a,a
 4358 D1:DAB2 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4359 D1:DAB8 DD 70 04 -          ld  (ix+REGSR),b
 4360 D1:DABB 41 -  -  -          ld  b,c
 4361 D1:DABC CD 80 B0 D1         WRITE_ACCESS
 4362 D1:DAC0 E1 -  -  -      pop hl
 4363 D1:DAC1 C3 1B B9 D1     jp i6502NextLoad
 4364 D1:DAC5 -  -  -  -  
 4365 D1:DAC5 -  -  -  -  ;absolut,Y	SLO oper,Y	1B	3	7  	
 4366 D1:DAC5 -  -  -  -  inst6502_slo_absy:
 4367 D1:DAC5 ED 33 07 -      ADDCYC(7)
 4368 D1:DAC8 CD 22 BA D1     PUSH_ABSYSPLIT_NODEP
 4369 D1:DACC CD D8 AF D1         READ_ACCESS
 4370 D1:DAD0 CB 27 -  -          sla a
 4371 D1:DAD2 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4372 D1:DAD3 -  -  -  -          ;Split oper
 4373 D1:DAD3 DD 46 04 -          ld  b,(ix+REGSR)
 4374 D1:DAD6 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4375 D1:DADC DD B6 00 -          or  a,(ix+REGA)
 4376 D1:DADF DD 77 00 -          ld  (ix+REGA),a
 4377 D1:DAE2 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4378 D1:DAE8 87 -  -  -          add a,a
 4379 D1:DAE9 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4380 D1:DAEF DD 70 04 -          ld  (ix+REGSR),b
 4381 D1:DAF2 41 -  -  -          ld  b,c
 4382 D1:DAF3 CD 80 B0 D1         WRITE_ACCESS
 4383 D1:DAF7 E1 -  -  -      pop hl
 4384 D1:DAF8 C3 1B B9 D1     jp i6502NextLoad
 4385 D1:DAFC -  -  -  -  
 4386 D1:DAFC -  -  -  -  ;(indirect,X)	SLO (oper,X)	03	2	8  	
 4387 D1:DAFC -  -  -  -  isnt6502_slo_indx:
 4388 D1:DAFC ED 33 08 -      ADDCYC(8)
 4389 D1:DAFF E5 -  -  -      push hl
 4390 D1:DB00 7E -  -  -          ld  a,(hl)
 4391 D1:DB01 21 00 38 D0         ld  hl,ZEROPAGE
 4392 D1:DB05 85 -  -  -          add a,L
 4393 D1:DB06 DD 86 01 -          add a,(ix+REGX)
 4394 D1:DB09 6F -  -  -          ld  L,a
 4395 D1:DB0A 7E -  -  -          ld  a,(hl)
 4396 D1:DB0B 2C -  -  -          inc L
 4397 D1:DB0C 56 -  -  -          ld  d,(hl)
 4398 D1:DB0D 42 -  -  -          ld  b,d
 4399 D1:DB0E 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4400 D1:DB10 ED 4C -  -          mlt bc
 4401 D1:DB12 21 00 40 D0         ld  hl,PAGETABLE
 4402 D1:DB16 09 -  -  -          add hl,bc
 4403 D1:DB17 ED 27 -  -          ld  hl,(hl)
 4404 D1:DB19 06 00 -  -          ld  b,0
 4405 D1:DB1B 4F -  -  -          ld  c,a
 4406 D1:DB1C 09 -  -  -          add hl,bc
 4407 D1:DB1D CD D8 AF D1         READ_ACCESS
 4408 D1:DB21 CB 27 -  -          sla a
 4409 D1:DB23 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4410 D1:DB24 -  -  -  -          ;Split oper
 4411 D1:DB24 DD 46 04 -          ld  b,(ix+REGSR)
 4412 D1:DB27 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4413 D1:DB2D DD B6 00 -          or  a,(ix+REGA)
 4414 D1:DB30 DD 77 00 -          ld  (ix+REGA),a
 4415 D1:DB33 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4416 D1:DB39 87 -  -  -          add a,a
 4417 D1:DB3A CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4418 D1:DB40 DD 70 04 -          ld  (ix+REGSR),b
 4419 D1:DB43 41 -  -  -          ld  b,c
 4420 D1:DB44 CD 80 B0 D1         WRITE_ACCESS
 4421 D1:DB48 E1 -  -  -      pop hl
 4422 D1:DB49 C3 1B B9 D1     jp  i6502NextLoad
 4423 D1:DB4D -  -  -  -  
 4424 D1:DB4D -  -  -  -  ;(indirect),Y	SLO (oper),Y	13	2	8  
 4425 D1:DB4D -  -  -  -  inst6502_slo_indy:
 4426 D1:DB4D ED 33 08 -      ADDCYC(8)
 4427 D1:DB50 E5 -  -  -      push hl
 4428 D1:DB51 7E -  -  -          ld  a,(hl)
 4429 D1:DB52 21 00 38 D0         ld  hl,ZEROPAGE
 4430 D1:DB56 85 -  -  -          add a,L
 4431 D1:DB57 6F -  -  -          ld  L,a
 4432 D1:DB58 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4433 D1:DB59 2C -  -  -          inc L
 4434 D1:DB5A DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4435 D1:DB5D 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4436 D1:DB5E 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4437 D1:DB60 24 -  -  -          inc h
 4438 D1:DB61 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4439 D1:DB62 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4440 D1:DB64 ED 6C -  -          mlt hl          ;23.
 4441 D1:DB66 01 00 40 D0         ld  bc,PAGETABLE
 4442 D1:DB6A 09 -  -  -          add hl,bc
 4443 D1:DB6B ED 27 -  -          ld  hl,(hl)     ;address get.
 4444 D1:DB6D 01 00 00 00         ld  bc,0
 4445 D1:DB71 4F -  -  -          ld  c,a
 4446 D1:DB72 09 -  -  -          add hl,bc       ;Full address get.
 4447 D1:DB73 CD D8 AF D1         READ_ACCESS
 4448 D1:DB77 CB 27 -  -          sla a
 4449 D1:DB79 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4450 D1:DB7A -  -  -  -          ;Split oper
 4451 D1:DB7A DD 46 04 -          ld  b,(ix+REGSR)
 4452 D1:DB7D CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4453 D1:DB83 DD B6 00 -          or  a,(ix+REGA)
 4454 D1:DB86 DD 77 00 -          ld  (ix+REGA),a
 4455 D1:DB89 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4456 D1:DB8F 87 -  -  -          add a,a
 4457 D1:DB90 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4458 D1:DB96 DD 70 04 -          ld  (ix+REGSR),b
 4459 D1:DB99 41 -  -  -          ld  b,c
 4460 D1:DB9A CD 80 B0 D1         WRITE_ACCESS
 4461 D1:DB9E E1 -  -  -      pop hl
 4462 D1:DB9F C3 1B B9 D1     jp  i6502NextLoad
 4463 D1:DBA3 -  -  -  -  
 4464 D1:DBA3 -  -  -  -  ;-----------------------------------------------------------------------------
 4465 D1:DBA3 -  -  -  -  ;SRE (LSE) - LSR oper + EOR oper
 4466 D1:DBA3 -  -  -  -  ;M = 0 -> [76543210] -> C, A EOR M -> A. Affects: CZN
 4467 D1:DBA3 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4468 D1:DBA3 -  -  -  -  
 4469 D1:DBA3 -  -  -  -  ;zeropage	SRE oper	47	2	5  	
 4470 D1:DBA3 -  -  -  -  inst6502_sre_zp:
 4471 D1:DBA3 ED 33 05 -      ADDCYC(5)
 4472 D1:DBA6 7E -  -  -      ld  a,(hl)
 4473 D1:DBA7 01 00 38 D0     ld  bc,ZEROPAGE
 4474 D1:DBAB 81 -  -  -      add a,c
 4475 D1:DBAC 4F -  -  -      ld  c,a
 4476 D1:DBAD 0A -  -  -      ld  a,(bc)
 4477 D1:DBAE CB 3F -  -      srl a
 4478 D1:DBB0 02 -  -  -      ld  (bc),a
 4479 D1:DBB1 -  -  -  -      ;Flag breakdown to optimize for split operation
 4480 D1:DBB1 DD 46 04 -      ld  b,(ix+REGSR)
 4481 D1:DBB4 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4482 D1:DBBA DD AE 00 -      xor a,(ix+REGA)
 4483 D1:DBBD DD 77 00 -      ld  (ix+REGA),a
 4484 D1:DBC0 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4485 D1:DBC6 87 -  -  -      add a,a
 4486 D1:DBC7 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4487 D1:DBCD DD 70 04 -      ld  (ix+REGSR),b
 4488 D1:DBD0 C3 1B B9 D1     jp i6502NextLoad
 4489 D1:DBD4 -  -  -  -  
 4490 D1:DBD4 -  -  -  -  ;zeropage,X	SRE oper,X	57	2	6  	
 4491 D1:DBD4 -  -  -  -  inst6502_sre_zpx:
 4492 D1:DBD4 ED 33 06 -      ADDCYC(6)
 4493 D1:DBD7 7E -  -  -      ld  a,(hl)
 4494 D1:DBD8 01 00 38 D0     ld  bc,ZEROPAGE
 4495 D1:DBDC 81 -  -  -      add a,c
 4496 D1:DBDD DD 86 01 -      add a,(ix+REGX)
 4497 D1:DBE0 4F -  -  -      ld  c,a
 4498 D1:DBE1 0A -  -  -      ld  a,(bc)
 4499 D1:DBE2 CB 3F -  -      srl a
 4500 D1:DBE4 02 -  -  -      ld  (bc),a
 4501 D1:DBE5 -  -  -  -      ;Flag breakdown to optimize for split operation
 4502 D1:DBE5 DD 46 04 -      ld  b,(ix+REGSR)
 4503 D1:DBE8 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4504 D1:DBEE DD AE 00 -      xor a,(ix+REGA)
 4505 D1:DBF1 DD 77 00 -      ld  (ix+REGA),a
 4506 D1:DBF4 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4507 D1:DBFA 87 -  -  -      add a,a
 4508 D1:DBFB CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4509 D1:DC01 DD 70 04 -      ld  (ix+REGSR),b
 4510 D1:DC04 C3 1B B9 D1     jp i6502NextLoad
 4511 D1:DC08 -  -  -  -  
 4512 D1:DC08 -  -  -  -  ;absolute	SRE oper	4F	3	6  	
 4513 D1:DC08 -  -  -  -  inst6502_sre_abs:
 4514 D1:DC08 ED 33 06 -      ADDCYC(6)
 4515 D1:DC0B CD CA B9 D1     call subroutine6502_abs_split_start
 4516 D1:DC0F E5 -  -  -      push hl
 4517 D1:DC10 50 -  -  -          ld  d,b
 4518 D1:DC11 79 -  -  -          ld  a,c
 4519 D1:DC12 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4520 D1:DC14 ED 4C -  -          mlt bc
 4521 D1:DC16 21 00 40 D0         ld  hl,PAGETABLE
 4522 D1:DC1A 09 -  -  -          add hl,bc
 4523 D1:DC1B ED 27 -  -          ld  hl,(hl)
 4524 D1:DC1D 06 00 -  -          ld  b,0
 4525 D1:DC1F 4F -  -  -          ld  c,a
 4526 D1:DC20 09 -  -  -          add hl,bc   ;full address
 4527 D1:DC21 CD D8 AF D1         READ_ACCESS
 4528 D1:DC25 CB 3F -  -          srl a
 4529 D1:DC27 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4530 D1:DC28 -  -  -  -          ;Split oper
 4531 D1:DC28 DD 46 04 -          ld  b,(ix+REGSR)
 4532 D1:DC2B CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4533 D1:DC31 DD AE 00 -          xor a,(ix+REGA)
 4534 D1:DC34 DD 77 00 -          ld  (ix+REGA),a
 4535 D1:DC37 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4536 D1:DC3D 87 -  -  -          add a,a
 4537 D1:DC3E CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4538 D1:DC44 DD 70 04 -          ld  (ix+REGSR),b
 4539 D1:DC47 41 -  -  -          ld  b,c
 4540 D1:DC48 CD 80 B0 D1         WRITE_ACCESS
 4541 D1:DC4C E1 -  -  -      pop hl
 4542 D1:DC4D C3 1B B9 D1     jp i6502NextLoad
 4543 D1:DC51 -  -  -  -  
 4544 D1:DC51 -  -  -  -  ;absolut,X	SRE oper,X	5F	3	7  	
 4545 D1:DC51 -  -  -  -  inst6502_sre_absx:
 4546 D1:DC51 ED 33 07 -      ADDCYC(7)
 4547 D1:DC54 CD 27 BA D1     PUSH_ABSXSPLIT_NODEP
 4548 D1:DC58 CD D8 AF D1         READ_ACCESS
 4549 D1:DC5C CB 3F -  -          srl a
 4550 D1:DC5E 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4551 D1:DC5F -  -  -  -          ;Split oper
 4552 D1:DC5F DD 46 04 -          ld  b,(ix+REGSR)
 4553 D1:DC62 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4554 D1:DC68 DD AE 00 -          xor a,(ix+REGA)
 4555 D1:DC6B DD 77 00 -          ld  (ix+REGA),a
 4556 D1:DC6E CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4557 D1:DC74 87 -  -  -          add a,a
 4558 D1:DC75 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4559 D1:DC7B DD 70 04 -          ld  (ix+REGSR),b
 4560 D1:DC7E 41 -  -  -          ld  b,c
 4561 D1:DC7F CD 80 B0 D1         WRITE_ACCESS
 4562 D1:DC83 E1 -  -  -      pop hl
 4563 D1:DC84 C3 1B B9 D1     jp i6502NextLoad
 4564 D1:DC88 -  -  -  -  
 4565 D1:DC88 -  -  -  -  ;absolut,Y	SRE oper,Y	5B	3	7  	
 4566 D1:DC88 -  -  -  -  inst6502_sre_absy:
 4567 D1:DC88 ED 33 07 -      ADDCYC(7)
 4568 D1:DC8B CD 22 BA D1     PUSH_ABSYSPLIT_NODEP
 4569 D1:DC8F CD D8 AF D1         READ_ACCESS
 4570 D1:DC93 CB 3F -  -          srl a
 4571 D1:DC95 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4572 D1:DC96 -  -  -  -          ;Split oper
 4573 D1:DC96 DD 46 04 -          ld  b,(ix+REGSR)
 4574 D1:DC99 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4575 D1:DC9F DD AE 00 -          xor a,(ix+REGA)
 4576 D1:DCA2 DD 77 00 -          ld  (ix+REGA),a
 4577 D1:DCA5 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4578 D1:DCAB 87 -  -  -          add a,a
 4579 D1:DCAC CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4580 D1:DCB2 DD 70 04 -          ld  (ix+REGSR),b
 4581 D1:DCB5 41 -  -  -          ld  b,c
 4582 D1:DCB6 CD 80 B0 D1         WRITE_ACCESS
 4583 D1:DCBA E1 -  -  -      pop hl
 4584 D1:DCBB C3 1B B9 D1     jp i6502NextLoad
 4585 D1:DCBF -  -  -  -  
 4586 D1:DCBF -  -  -  -  ;(indirect,X)	SRE (oper,X)	43	2	8  	
 4587 D1:DCBF -  -  -  -  isnt6502_sre_indx:
 4588 D1:DCBF ED 33 08 -      ADDCYC(8)
 4589 D1:DCC2 E5 -  -  -      push hl
 4590 D1:DCC3 7E -  -  -          ld  a,(hl)
 4591 D1:DCC4 21 00 38 D0         ld  hl,ZEROPAGE
 4592 D1:DCC8 85 -  -  -          add a,L
 4593 D1:DCC9 DD 86 01 -          add a,(ix+REGX)
 4594 D1:DCCC 6F -  -  -          ld  L,a
 4595 D1:DCCD 7E -  -  -          ld  a,(hl)
 4596 D1:DCCE 2C -  -  -          inc L
 4597 D1:DCCF 56 -  -  -          ld  d,(hl)
 4598 D1:DCD0 42 -  -  -          ld  b,d
 4599 D1:DCD1 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4600 D1:DCD3 ED 4C -  -          mlt bc
 4601 D1:DCD5 21 00 40 D0         ld  hl,PAGETABLE
 4602 D1:DCD9 09 -  -  -          add hl,bc
 4603 D1:DCDA ED 27 -  -          ld  hl,(hl)
 4604 D1:DCDC 06 00 -  -          ld  b,0
 4605 D1:DCDE 4F -  -  -          ld  c,a
 4606 D1:DCDF 09 -  -  -          add hl,bc
 4607 D1:DCE0 CD D8 AF D1         READ_ACCESS
 4608 D1:DCE4 CB 3F -  -          srl a
 4609 D1:DCE6 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4610 D1:DCE7 -  -  -  -          ;Split oper
 4611 D1:DCE7 DD 46 04 -          ld  b,(ix+REGSR)
 4612 D1:DCEA CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4613 D1:DCF0 DD AE 00 -          xor a,(ix+REGA)
 4614 D1:DCF3 DD 77 00 -          ld  (ix+REGA),a
 4615 D1:DCF6 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4616 D1:DCFC 87 -  -  -          add a,a
 4617 D1:DCFD CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4618 D1:DD03 DD 70 04 -          ld  (ix+REGSR),b
 4619 D1:DD06 41 -  -  -          ld  b,c
 4620 D1:DD07 CD 80 B0 D1         WRITE_ACCESS
 4621 D1:DD0B E1 -  -  -      pop hl
 4622 D1:DD0C C3 1B B9 D1     jp  i6502NextLoad
 4623 D1:DD10 -  -  -  -  
 4624 D1:DD10 -  -  -  -  ;(indirect),Y	SRE (oper),Y	53	2	8  
 4625 D1:DD10 -  -  -  -  inst6502_sre_indy:
 4626 D1:DD10 ED 33 08 -      ADDCYC(8)
 4627 D1:DD13 E5 -  -  -      push hl
 4628 D1:DD14 7E -  -  -          ld  a,(hl)
 4629 D1:DD15 21 00 38 D0         ld  hl,ZEROPAGE
 4630 D1:DD19 85 -  -  -          add a,L
 4631 D1:DD1A 6F -  -  -          ld  L,a
 4632 D1:DD1B 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4633 D1:DD1C 2C -  -  -          inc L
 4634 D1:DD1D DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4635 D1:DD20 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4636 D1:DD21 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4637 D1:DD23 24 -  -  -          inc h
 4638 D1:DD24 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4639 D1:DD25 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4640 D1:DD27 ED 6C -  -          mlt hl          ;23.
 4641 D1:DD29 01 00 40 D0         ld  bc,PAGETABLE
 4642 D1:DD2D 09 -  -  -          add hl,bc
 4643 D1:DD2E ED 27 -  -          ld  hl,(hl)     ;address get.
 4644 D1:DD30 01 00 00 00         ld  bc,0
 4645 D1:DD34 4F -  -  -          ld  c,a
 4646 D1:DD35 09 -  -  -          add hl,bc       ;Full address get.
 4647 D1:DD36 CD D8 AF D1         READ_ACCESS
 4648 D1:DD3A CB 3F -  -          srl a
 4649 D1:DD3C 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4650 D1:DD3D -  -  -  -          ;Split oper
 4651 D1:DD3D DD 46 04 -          ld  b,(ix+REGSR)
 4652 D1:DD40 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4653 D1:DD46 DD AE 00 -          xor a,(ix+REGA)
 4654 D1:DD49 DD 77 00 -          ld  (ix+REGA),a
 4655 D1:DD4C CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4656 D1:DD52 87 -  -  -          add a,a
 4657 D1:DD53 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4658 D1:DD59 DD 70 04 -          ld  (ix+REGSR),b
 4659 D1:DD5C 41 -  -  -          ld  b,c
 4660 D1:DD5D CD 80 B0 D1         WRITE_ACCESS
 4661 D1:DD61 E1 -  -  -      pop hl
 4662 D1:DD62 C3 1B B9 D1     jp  i6502NextLoad
 4663 D1:DD66 -  -  -  -  
 4664 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4665 D1:DD66 -  -  -  -  ;USBC (USBC)
 4666 D1:DD66 -  -  -  -  ;immediate	USBC #oper	EB	2	2  
 4667 D1:DD66 -  -  -  -  ;Map this to instruction $E9 (inst6502_sbc_imm)
 4668 D1:DD66 -  -  -  -  
 4669 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4670 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4671 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4672 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4673 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4674 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4675 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4676 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4677 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4678 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4679 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4680 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4681 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4682 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4683 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4684 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4685 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4686 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4687 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4688 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4689 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4690 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4691 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4692 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4693 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4694 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4695 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4696 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4697 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4698 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4699 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4700 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4701 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4702 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4703 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4704 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4705 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4706 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4707 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4708 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4709 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4710 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4711 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4712 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4713 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4714 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4715 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4716 D1:DD66 -  -  -  -  ;-----------------------------------------------------------------------------
 4717 D1:DD66 -  -  -  -  
 4718 D1:DD66 -  -  -  -  inst6502_instruction_set:
 4719 D1:DD66 9D CF D1 -  .dl	inst6502_brk					;00
 4720 D1:DD69 48 C8 D1 -  .dl	inst6502_ora_indx				;01
 4721 D1:DD6C 6D E0 D1 -  .dl	inst6502_jam_02 				;02
 4722 D1:DD6F FC DA D1 -  .dl	isnt6502_slo_indx				;03
 4723 D1:DD72 3B D1 D1 -  .dl	inst6502_nop_zp 				;04
 4724 D1:DD75 63 C7 D1 -  .dl	inst6502_ora_zp					;05
 4725 D1:DD78 00 C9 D1 -  .dl	inst6502_asl_zp					;06
 4726 D1:DD7B E0 D9 D1 -  .dl	inst6502_slo_zp 				;07
 4727 D1:DD7E 89 C0 D1 -  .dl	inst6502_php					;08
 4728 D1:DD81 41 C7 D1 -  .dl	inst6502_ora_imm				;09
 4729 D1:DD84 D7 C8 D1 -  .dl	inst6502_asl					;0A
 4730 D1:DD87 94 D1 D1 -  .dl	instr6502_anc_imm				;0B
 4731 D1:DD8A 49 D1 D1 -  .dl	inst6502_nop_abs				;0C
 4732 D1:DD8D B8 C7 D1 -  .dl	inst6502_ora_abs				;0D
 4733 D1:DD90 5B C9 D1 -  .dl	inst6502_asl_abs				;0E
 4734 D1:DD93 45 DA D1 -  .dl	inst6502_slo_abs				;0F
 4735 D1:DD96 70 CF D1 -  .dl	inst6502_bpl					;10
 4736 D1:DD99 8C C8 D1 -  .dl	inst6502_ora_indy				;11
 4737 D1:DD9C 67 E0 D1 -  .dl	inst6502_jam_12_halt			;12 JAM. Used to halt emulation for inspection
 4738 D1:DD9F 4D DB D1 -  .dl	inst6502_slo_indy				;13
 4739 D1:DDA2 42 D1 D1 -  .dl	inst6502_nop_zpx				;14
 4740 D1:DDA5 8C C7 D1 -  .dl	inst6502_ora_zpx				;15
 4741 D1:DDA8 2C C9 D1 -  .dl	inst6502_asl_zpx				;16
 4742 D1:DDAB 11 DA D1 -  .dl	inst6502_slo_zpx				;17
 4743 D1:DDAE E1 CC D1 -  .dl	inst6502_clc					;18
 4744 D1:DDB1 1E C8 D1 -  .dl	inst6502_ora_absy				;19
 4745 D1:DDB4 2D D1 D1 -  .dl	inst6502_nop_implied    		;1A
 4746 D1:DDB7 C5 DA D1 -  .dl	inst6502_slo_absy				;1B
 4747 D1:DDBA 5A D1 D1 -  .dl	inst6502_nop_absx				;1C
 4748 D1:DDBD F4 C7 D1 -  .dl	inst6502_ora_absx				;1D
 4749 D1:DDC0 9F C9 D1 -  .dl	inst6502_asl_absx				;1E
 4750 D1:DDC3 8E DA D1 -  .dl	inst6502_slo_absx				;1F
 4751 D1:DDC6 95 D0 D1 -  .dl	inst6502_jsr					;20
 4752 D1:DDC9 1C C5 D1 -  .dl	inst6502_and_indx				;21
 4753 D1:DDCC 6D E0 D1 -  .dl	inst6502_jam_22 				;22
 4754 D1:DDCF C2 D6 D1 -  .dl	isnt6502_rla_indx				;23
 4755 D1:DDD2 E1 D0 D1 -  .dl	inst6502_bit_zp					;24
 4756 D1:DDD5 37 C4 D1 -  .dl	inst6502_and_zp					;25
 4757 D1:DDD8 F7 CA D1 -  .dl	inst6502_rol_zp					;26
 4758 D1:DDDB 94 D5 D1 -  .dl	inst6502_rla_zp 				;27
 4759 D1:DDDE CB C0 D1 -  .dl	inst6502_plp					;28
 4760 D1:DDE1 15 C4 D1 -  .dl	inst6502_and_imm				;29
 4761 D1:DDE4 CB CA D1 -  .dl	inst6502_rol					;2A
 4762 D1:DDE7 94 D1 D1 -  .dl	instr6502_anc2_imm				;2B
 4763 D1:DDEA 05 D1 D1 -  .dl	inst6502_bit_abs				;2C
 4764 D1:DDED 8C C4 D1 -  .dl	inst6502_and_abs				;2D
 4765 D1:DDF0 58 CB D1 -  .dl	inst6502_rol_abs				;2E
 4766 D1:DDF3 FF D5 D1 -  .dl	inst6502_rla_abs				;2F
 4767 D1:DDF6 52 CF D1 -  .dl	inst6502_bmi					;30
 4768 D1:DDF9 60 C5 D1 -  .dl	inst6502_and_indy				;31
 4769 D1:DDFC 6D E0 D1 -  .dl	inst6502_jam_32 				;32
 4770 D1:DDFF 17 D7 D1 -  .dl	inst6502_rla_indy				;33
 4771 D1:DE02 42 D1 D1 -  .dl	inst6502_nop_zpx				;34
 4772 D1:DE05 60 C4 D1 -  .dl	inst6502_and_zpx				;35
 4773 D1:DE08 26 CB D1 -  .dl	inst6502_rol_zpx				;36
 4774 D1:DE0B C8 D5 D1 -  .dl	inst6502_rla_zpx				;37
 4775 D1:DE0E 0D CD D1 -  .dl	inst6502_sec					;38
 4776 D1:DE11 F2 C4 D1 -  .dl	inst6502_and_absy				;39
 4777 D1:DE14 2D D1 D1 -  .dl	inst6502_nop_implied			;3A
 4778 D1:DE17 87 D6 D1 -  .dl	inst6502_rla_absy   			;3B
 4779 D1:DE1A 5A D1 D1 -  .dl	inst6502_nop_absx   			;3C
 4780 D1:DE1D C8 C4 D1 -  .dl	inst6502_and_absx				;3D
 4781 D1:DE20 A0 CB D1 -  .dl	inst6502_rol_absx				;3E
 4782 D1:DE23 4C D6 D1 -  .dl	inst6502_rla_absx   			;3F
 4783 D1:DE26 D9 CF D1 -  .dl	inst6502_rti					;40
 4784 D1:DE29 B2 C6 D1 -  .dl	inst6502_eor_indx				;41
 4785 D1:DE2C 6D E0 D1 -  .dl	inst6502_jam_42     			;42
 4786 D1:DE2F BF DC D1 -  .dl	isnt6502_sre_indx   			;43
 4787 D1:DE32 3B D1 D1 -  .dl	inst6502_nop_zp     			;44
 4788 D1:DE35 CD C5 D1 -  .dl	inst6502_eor_zp					;45
 4789 D1:DE38 FA C9 D1 -  .dl	inst6502_lsr_zp					;46
 4790 D1:DE3B A3 DB D1 -  .dl	inst6502_sre_zp     			;47
 4791 D1:DE3E 73 C0 D1 -  .dl	inst6502_pha					;48
 4792 D1:DE41 AB C5 D1 -  .dl	inst6502_eor_imm				;49
 4793 D1:DE44 D1 C9 D1 -  .dl	inst6502_lsr					;4A
 4794 D1:DE47 6A D1 D1 -  .dl	inst6502_alr_imm    			;4B
 4795 D1:DE4A FE CF D1 -  .dl	inst6052_jmp_abs				;4C
 4796 D1:DE4D 22 C6 D1 -  .dl	inst6502_eor_abs				;4D
 4797 D1:DE50 55 CA D1 -  .dl	inst6502_lsr_abs				;4E
 4798 D1:DE53 08 DC D1 -  .dl	inst6502_sre_abs    			;4F
 4799 D1:DE56 7F CF D1 -  .dl	inst6502_bvc					;50
 4800 D1:DE59 F6 C6 D1 -  .dl	inst6502_eor_indy				;51
 4801 D1:DE5C 6D E0 D1 -  .dl	inst6502_jam_52     			;52
 4802 D1:DE5F 10 DD D1 -  .dl	inst6502_sre_indy   			;53
 4803 D1:DE62 42 D1 D1 -  .dl	inst6502_nop_zpx    			;54
 4804 D1:DE65 F6 C5 D1 -  .dl	inst6502_eor_zpx				;55
 4805 D1:DE68 26 CA D1 -  .dl	inst6502_lsr_zpx				;56
 4806 D1:DE6B D4 DB D1 -  .dl	inst6502_sre_zpx    			;57
 4807 D1:DE6E F7 CC D1 -  .dl	inst6502_cli					;58
 4808 D1:DE71 88 C6 D1 -  .dl	inst6502_eor_absy				;59
 4809 D1:DE74 2D D1 D1 -  .dl	inst6502_nop_implied			;5A
 4810 D1:DE77 88 DC D1 -  .dl	inst6502_sre_absy   			;5B
 4811 D1:DE7A 5A D1 D1 -  .dl	inst6502_nop_absx   			;5C
 4812 D1:DE7D 5E C6 D1 -  .dl	inst6502_eor_absx				;5D
 4813 D1:DE80 99 CA D1 -  .dl	inst6502_lsr_absx				;5E
 4814 D1:DE83 51 DC D1 -  .dl	inst6502_sre_absx   			;5F
 4815 D1:DE86 C7 D0 D1 -  .dl	inst6502_rts					;60
 4816 D1:DE89 EB C2 D1 -  .dl	inst6502_adc_indx				;61
 4817 D1:DE8C 6D E0 D1 -  .dl	inst6502_jam_62     			;62
 4818 D1:DE8F 3E D8 D1 -  .dl	isnt6502_rra_indx   			;63
 4819 D1:DE92 3B D1 D1 -  .dl	inst6502_nop_zp     			;64
 4820 D1:DE95 83 C2 D1 -  .dl	inst6502_adc_zp					;65
 4821 D1:DE98 02 CC D1 -  .dl	inst6502_ror_zp					;66
 4822 D1:DE9B 71 D7 D1 -  .dl	inst6502_rra_zp     			;67
 4823 D1:DE9E A1 C0 D1 -  .dl	inst6502_pla					;68
 4824 D1:DEA1 7B C2 D1 -  .dl	inst6502_adc_imm				;69
 4825 D1:DEA4 D6 CB D1 -  .dl	inst6502_ror					;6A
 4826 D1:DEA7 E1 D1 D1 -  .dl	instr6502_arr_imm   			;6B
 4827 D1:DEAA 4B D0 D1 -  .dl	inst6502_jmp_indir				;6C
 4828 D1:DEAD A6 C2 D1 -  .dl	inst6502_adc_abs				;6D
 4829 D1:DEB0 63 CC D1 -  .dl	inst6502_ror_abs				;6E
 4830 D1:DEB3 B4 D7 D1 -  .dl	inst6502_rra_abs    			;6F
 4831 D1:DEB6 8E CF D1 -  .dl	inst6502_bvs					;70
 4832 D1:DEB9 16 C3 D1 -  .dl	inst6502_adc_indy				;71
 4833 D1:DEBC 6D E0 D1 -  .dl	inst6502_jam_72     			;72
 4834 D1:DEBF 80 D8 D1 -  .dl	inst6502_rra_indy   			;73
 4835 D1:DEC2 42 D1 D1 -  .dl	inst6502_nop_zpx    			;74
 4836 D1:DEC5 93 C2 D1 -  .dl	inst6502_adc_zpx				;75
 4837 D1:DEC8 31 CC D1 -  .dl	inst6502_ror_zpx				;76
 4838 D1:DECB 91 D7 D1 -  .dl	inst6502_rra_zpx    			;77
 4839 D1:DECE 23 CD D1 -  .dl	inst6502_sei					;78
 4840 D1:DED1 DA C2 D1 -  .dl	inst6502_adc_absy				;79
 4841 D1:DED4 2D D1 D1 -  .dl	inst6502_nop_implied			;7A
 4842 D1:DED7 16 D8 D1 -  .dl	inst6502_rra_absy   			;7B
 4843 D1:DEDA 5A D1 D1 -  .dl	inst6502_nop_absx   			;7C
 4844 D1:DEDD C9 C2 D1 -  .dl	inst6502_adc_absx				;7D
 4845 D1:DEE0 AB CC D1 -  .dl	inst6502_ror_absx				;7E
 4846 D1:DEE3 EE D7 D1 -  .dl	inst6502_rra_absx   			;7F
 4847 D1:DEE6 34 D1 D1 -  .dl	inst6502_nop_imm    			;80
 4848 D1:DEE9 CA BE D1 -  .dl	inst6502_sta_indx				;81
 4849 D1:DEEC 34 D1 D1 -  .dl	inst6502_nop_imm    			;82
 4850 D1:DEEF 1D D9 D1 -  .dl	inst6502_sax_indx   			;83
 4851 D1:DEF2 75 BF D1 -  .dl	inst6502_sty_zp					;84
 4852 D1:DEF5 58 BE D1 -  .dl	inst6502_sta_zp					;85
 4853 D1:DEF8 29 BF D1 -  .dl	inst6502_stx_zp					;86
 4854 D1:DEFB C7 D8 D1 -  .dl	inst6502_sax_zp     			;87
 4855 D1:DEFE B9 C1 D1 -  .dl	inst6502_dey					;88
 4856 D1:DF01 34 D1 D1 -  .dl	inst6502_nop_imm    			;89
 4857 D1:DF04 24 C0 D1 -  .dl	inst6502_txa					;8A
 4858 D1:DF07 BA D1 D1 -  .dl	instr6502_ane_imm   			;8B
 4859 D1:DF0A 9C BF D1 -  .dl	inst6502_sty_abs				;8C
 4860 D1:DF0D 7F BE D1 -  .dl	inst6502_sta_abs				;8D
 4861 D1:DF10 50 BF D1 -  .dl	inst6502_stx_abs				;8E
 4862 D1:DF13 F4 D8 D1 -  .dl	inst6502_sax_abs    			;8F
 4863 D1:DF16 25 CF D1 -  .dl	inst6502_bcc					;90
 4864 D1:DF19 F7 BE D1 -  .dl	inst6502_sta_indy				;91
 4865 D1:DF1C 6D E0 D1 -  .dl	inst6502_jam_92     			;92
 4866 D1:DF1F 85 D9 D1 -  .dl	inst6502_sha_indy   			;93
 4867 D1:DF22 87 BF D1 -  .dl	inst6502_sty_zpx				;94
 4868 D1:DF25 6A BE D1 -  .dl	inst6502_sta_zpx				;95
 4869 D1:DF28 3B BF D1 -  .dl	inst6502_stx_zpy				;96
 4870 D1:DF2B DC D8 D1 -  .dl	inst6502_sax_zpy    			;97
 4871 D1:DF2E 52 C0 D1 -  .dl	inst6502_tya					;98
 4872 D1:DF31 B7 BE D1 -  .dl	inst6502_sta_absy				;99
 4873 D1:DF34 45 C0 D1 -  .dl	inst6502_txs					;9A
 4874 D1:DF37 D2 D9 D1 -  .dl	inst6502_tas_absy   			;9B
 4875 D1:DF3A C4 D9 D1 -  .dl	inst6502_shy_absx   			;9C
 4876 D1:DF3D A4 BE D1 -  .dl	inst6502_sta_absx				;9D
 4877 D1:DF40 B6 D9 D1 -  .dl	inst6502_shx_absy   			;9E
 4878 D1:DF43 77 D9 D1 -  .dl	inst6502_sha_absy   			;9F
 4879 D1:DF46 8A BD D1 -  .dl	inst6502_ldy_imm				;A0
 4880 D1:DF49 33 BC D1 -  .dl	inst6502_lda_indx				;A1
 4881 D1:DF4C BC BC D1 -  .dl	inst6502_ldx_imm				;A2
 4882 D1:DF4F DE D4 D1 -  .dl	inst6502_lax_indx   			;A3
 4883 D1:DF52 A9 BD D1 -  .dl	inst6502_ldy_zp					;A4
 4884 D1:DF55 5D BB D1 -  .dl	inst6502_lda_zp					;A5
 4885 D1:DF58 DB BC D1 -  .dl	inst6502_ldx_zp					;A6
 4886 D1:DF5B 23 D4 D1 -  .dl	inst6502_lax_zp     			;A7
 4887 D1:DF5E E2 BF D1 -  .dl	inst6502_tay					;A8
 4888 D1:DF61 3E BB D1 -  .dl	inst6502_lda_imm				;A9
 4889 D1:DF64 C1 BF D1 -  .dl	inst6502_tax					;AA
 4890 D1:DF67 6D D5 D1 -  .dl	inst6502_lxa        			;AB
 4891 D1:DF6A F8 BD D1 -  .dl	inst6502_ldy_abs				;AC
 4892 D1:DF6D AC BB D1 -  .dl	inst6502_lda_abs				;AD
 4893 D1:DF70 2A BD D1 -  .dl	inst6502_ldx_abs				;AE
 4894 D1:DF73 78 D4 D1 -  .dl	inst6502_lax_abs    			;AF
 4895 D1:DF76 34 CF D1 -  .dl	inst6502_bcs					;B0
 4896 D1:DF79 74 BC D1 -  .dl	inst6502_lda_indy				;B1
 4897 D1:DF7C 6D E0 D1 -  .dl	inst6502_jam_B2     			;B2
 4898 D1:DF7F 22 D5 D1 -  .dl	inst6502_lax_indy   			;B3
 4899 D1:DF82 CF BD D1 -  .dl	inst6502_ldy_zpx				;B4
 4900 D1:DF85 83 BB D1 -  .dl	inst6502_lda_zpx				;B5
 4901 D1:DF88 01 BD D1 -  .dl	inst6502_ldx_zpy				;B6
 4902 D1:DF8B 4C D4 D1 -  .dl	inst6502_lax_zpy    			;B7
 4903 D1:DF8E 02 CD D1 -  .dl	inst6502_clv					;B8
 4904 D1:DF91 0C BC D1 -  .dl	inst6502_lda_absy				;B9
 4905 D1:DF94 03 C0 D1 -  .dl	inst6502_tsx					;BA
 4906 D1:DF97 F3 D3 D1 -  .dl	inst6502_las_absy   			;BB
 4907 D1:DF9A 31 BE D1 -  .dl	inst6502_ldy_absx				;BC
 4908 D1:DF9D E5 BB D1 -  .dl	inst6502_lda_absx				;BD
 4909 D1:DFA0 63 BD D1 -  .dl	inst6502_ldx_absy				;BE
 4910 D1:DFA3 B4 D4 D1 -  .dl	inst6502_lax_absy   			;BF
 4911 D1:DFA6 8E CE D1 -  .dl	inst6502_cpy_imm				;C0
 4912 D1:DFA9 9C CD D1 -  .dl	inst6502_cmp_indx				;C1
 4913 D1:DFAC 34 D1 D1 -  .dl	inst6502_nop_imm    			;C2
 4914 D1:DFAF 9B D2 D1 -  .dl	inst6502_dcp_indx   			;C3
 4915 D1:DFB2 B4 CE D1 -  .dl	inst6502_cpy_zp					;C4
 4916 D1:DFB5 36 CD D1 -  .dl	inst6502_cmp_zp					;C5
 4917 D1:DFB8 E8 C0 D1 -  .dl	inst6502_dec_zp					;C6
 4918 D1:DFBB 1A D2 D1 -  .dl	inst6502_dcp_zp     			;C7
 4919 D1:DFBE C3 C1 D1 -  .dl	inst6502_iny					;C8
 4920 D1:DFC1 2E CD D1 -  .dl	inst6502_cmp_imm				;C9
 4921 D1:DFC4 9B C1 D1 -  .dl	inst6502_dex					;CA
 4922 D1:DFC7 4E D9 D1 -  .dl	inst6502_sbx_imm    			;CB
 4923 D1:DFCA E3 CE D1 -  .dl	inst6502_cpy_abs				;CC
 4924 D1:DFCD 57 CD D1 -  .dl	inst6502_cmp_abs				;CD
 4925 D1:DFD0 35 C1 D1 -  .dl	inst6502_dec_abs				;CE
 4926 D1:DFD3 41 D2 D1 -  .dl	inst6502_dcp_abs    			;CF
 4927 D1:DFD6 61 CF D1 -  .dl	inst6502_bne					;D0
 4928 D1:DFD9 C7 CD D1 -  .dl	inst6502_cmp_indy				;D1
 4929 D1:DFDC 6D E0 D1 -  .dl	inst6502_jam_D2     			;D2
 4930 D1:DFDF CD D2 D1 -  .dl	inst6502_dcp_indy   			;D3
 4931 D1:DFE2 42 D1 D1 -  .dl	inst6502_nop_zpx    			;D4
 4932 D1:DFE5 44 CD D1 -  .dl	inst6502_cmp_zpx				;D5
 4933 D1:DFE8 0D C1 D1 -  .dl	inst6502_dec_zpx				;D6
 4934 D1:DFEB 2C D2 D1 -  .dl	inst6520_dcp_zpx    			;D7
 4935 D1:DFEE EC CC D1 -  .dl	inst6502_cld					;D8
 4936 D1:DFF1 8B CD D1 -  .dl	inst6502_cmp_absy				;D9
 4937 D1:DFF4 2D D1 D1 -  .dl	inst6502_nop_implied			;DA
 4938 D1:DFF7 83 D2 D1 -  .dl	inst6502_dcp_absy   			;DB
 4939 D1:DFFA 5A D1 D1 -  .dl	inst6502_nop_absx   			;DC
 4940 D1:DFFD 7A CD D1 -  .dl	inst6502_cmp_absx				;DD
 4941 D1:E000 71 C1 D1 -  .dl	inst6502_dec_absx				;DE
 4942 D1:E003 6B D2 D1 -  .dl	inst6502_dcp_absx   			;DF
 4943 D1:E006 F9 CD D1 -  .dl	inst6502_cpx_imm				;E0
 4944 D1:E009 B8 C3 D1 -  .dl	inst6502_sbc_indx				;E1
 4945 D1:E00C 34 D1 D1 -  .dl	inst6502_nop_imm    			;E2
 4946 D1:E00F 88 D3 D1 -  .dl	inst6502_isc_indx   			;E3
 4947 D1:E012 1F CE D1 -  .dl	inst6502_cpx_zp					;E4
 4948 D1:E015 50 C3 D1 -  .dl	inst6502_sbc_zp					;E5
 4949 D1:E018 C8 C1 D1 -  .dl	inst6502_inc_zp					;E6
 4950 D1:E01B 04 D3 D1 -  .dl	inst6502_isc_zp     			;E7
 4951 D1:E01E BE C1 D1 -  .dl	inst6502_inx					;E8
 4952 D1:E021 48 C3 D1 -  .dl	inst6502_sbc_imm				;E9
 4953 D1:E024 26 D1 D1 -  .dl	inst6502_nop					;EA
 4954 D1:E027 48 C3 D1 -  .dl	inst6502_sbc_imm			    ;EB *DUPLICATE OF E9
 4955 D1:E02A 4C CE D1 -  .dl	inst6502_cpx_abs				;EC
 4956 D1:E02D 73 C3 D1 -  .dl	inst6502_sbc_abs				;ED
 4957 D1:E030 15 C2 D1 -  .dl	inst6502_inc_abs				;EE
 4958 D1:E033 2B D3 D1 -  .dl	inst6502_isc_abs    			;EF
 4959 D1:E036 43 CF D1 -  .dl	inst6502_beq					;F0
 4960 D1:E039 E3 C3 D1 -  .dl	inst6502_sbc_indy				;F1
 4961 D1:E03C 6D E0 D1 -  .dl	inst6502_jam_F2     			;F2
 4962 D1:E03F BB D3 D1 -  .dl	inst6502_isc_indy   			;F3
 4963 D1:E042 42 D1 D1 -  .dl	inst6502_nop_zpx    			;F4
 4964 D1:E045 60 C3 D1 -  .dl	inst6502_sbc_zpx				;F5
 4965 D1:E048 ED C1 D1 -  .dl	inst6502_inc_zpx				;F6
 4966 D1:E04B 16 D3 D1 -  .dl	inst6520_isc_zpx    			;F7
 4967 D1:E04E 18 CD D1 -  .dl	inst6502_sed					;F8
 4968 D1:E051 A7 C3 D1 -  .dl	inst6502_sbc_absy				;F9
 4969 D1:E054 2D D1 D1 -  .dl	inst6502_nop_implied			;FA
 4970 D1:E057 6F D3 D1 -  .dl	inst6502_isc_absy   			;FB
 4971 D1:E05A 5A D1 D1 -  .dl	inst6502_nop_absx   			;FC
 4972 D1:E05D 96 C3 D1 -  .dl	inst6502_sbc_absx				;FD
 4973 D1:E060 51 C2 D1 -  .dl	inst6502_inc_absx				;FE
 4974 D1:E063 56 D3 D1 -  .dl	inst6502_isc_absx   			;FF
 4975 D1:E066 -  -  -  -  
 4976 D1:E066 -  -  -  -  ;-----------------------------------------------------------------------------
 4977 D1:E066 -  -  -  -  ;-----------------------------------------------------------------------------
 4978 D1:E066 -  -  -  -  ;-----------------------------------------------------------------------------
 4979 D1:E066 -  -  -  -  ;These instructions are located here because they perform a function outside
 4980 D1:E066 -  -  -  -  ;the context of emulating instructions. These are mapped to instructions that
 4981 D1:E066 -  -  -  -  ;would, on the real hardware, freeze the CPU and require a reset to continue.
 4982 D1:E066 -  -  -  -  ;
 4983 D1:E066 -  -  -  -  ;Here, they'll let us perform useful things. Like exiting the emulator.
 4984 D1:E066 -  -  -  -  ;Or jamming in one spot. Or other things in the future. Debugging things.
 4985 D1:E066 -  -  -  -  ;Future stuff like breakpoints and console output. That sorta thing.
 4986 D1:E066 -  -  -  -  ;
 4987 D1:E066 -  -  -  -  
 4988 D1:E066 -  -  -  -  inst6502_:
 4989 D1:E066 C9 -  -  -      ret
 4990 D1:E067 -  -  -  -  
 4991 D1:E067 -  -  -  -  inst6502_jam_12_halt:
 4992 D1:E067 18 FE -  -      jr $
 4993 D1:E069 C3 34 B9 D1     jp i6502FinishLoad
 4994 D1:E06D -  -  -  -  
 4995 D1:E06D -  -  -  -  inst6502_jam_02:
 4996 D1:E06D -  -  -  -  inst6502_jam_22:
 4997 D1:E06D -  -  -  -  inst6502_jam_32:
 4998 D1:E06D -  -  -  -  inst6502_jam_42:
 4999 D1:E06D -  -  -  -  inst6502_jam_52:
 5000 D1:E06D -  -  -  -  inst6502_jam_62:
 5001 D1:E06D -  -  -  -  inst6502_jam_72:
 5002 D1:E06D -  -  -  -  inst6502_jam_92:
 5003 D1:E06D -  -  -  -  inst6502_jam_B2:
 5004 D1:E06D -  -  -  -  inst6502_jam_D2:
 5005 D1:E06D -  -  -  -  inst6502_jam_F2:
 5006 D1:E06D C9 -  -  -      ret
 5007 D1:E06E -  -  -  -  
 5008 D1:E06E -  -  -  -  
 5009 D1:E06E -  -  -  -  
 5010 D1:E06E -  -  -  -  
 5011 D1:E06E -  -  -  -  
 5012 D1:E06E -  -  -  -  
 5013 D1:E06E -  -  -  -  
 5014 D1:E06E -  -  -  -  
 5015 D1:E06E -  -  -  -  
 5016 D1:E06E -  -  -  -  
 5017 D1:E06E -  -  -  -  
 5018 D1:E06E -  -  -  -  
 5019 D1:E06E -  -  -  -  
Listing for file "main.z80"
 1141 D1:E06E -  -  -  -  #include "debug.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    1 D1:E06E -  -  -  -  ;This has all the tables needed to drive the debugger.
    2 D1:E06E -  -  -  -  #include "debug_itab.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug_itab.z80"
    1 D1:E06E -  -  -  -  inst6502_opcode_width_table:
    2 D1:E06E 01 -  -  -  .db 1    ;0: 
    3 D1:E06F 02 -  -  -  .db 2    ;1: zpg,X
    4 D1:E070 03 -  -  -  .db 3    ;2: ind
    5 D1:E071 03 -  -  -  .db 3    ;3: abs
    6 D1:E072 03 -  -  -  .db 3    ;4: abs,X
    7 D1:E073 02 -  -  -  .db 2    ;5: X,ind
    8 D1:E074 01 -  -  -  .db 1    ;6: A
    9 D1:E075 02 -  -  -  .db 2    ;7: zpg
   10 D1:E076 02 -  -  -  .db 2    ;8: rel
   11 D1:E077 02 -  -  -  .db 2    ;9: #
   12 D1:E078 01 -  -  -  .db 1    ;10: impl
   13 D1:E079 02 -  -  -  .db 2    ;11: ind,Y
   14 D1:E07A 03 -  -  -  .db 3    ;12: abs,Y
   15 D1:E07B 02 -  -  -  .db 2    ;13: zpg,Y
   16 D1:E07C -  -  -  -  
   17 D1:E07C -  -  -  -  
   18 D1:E07C -  -  -  -  ;Note: 1=1byteOper, 2=2byteOper, -=1byteRelOper. Other chrs are literal
   19 D1:E07C -  -  -  -  
   20 D1:E07C -  -  -  -  inst6502_disassembler:
   21 D1:E07C 01 -  -  -  .db 1,""  ;
   22 D1:E07D 04 31 2C 58 .db 4,"1,X"  ;
   23 D1:E081 04 28 32 29 .db 4,"(2)"  ;
   24 D1:E085 02 32 -  -  .db 2,"2"  ;
   25 D1:E087 04 32 2C 58 .db 4,"2,X"  ;
   26 D1:E08B 06 28 31 2C 
              58 29 -  -  .db 6,"(1,X)"  ;
   27 D1:E091 02 41 -  -  .db 2,"A"  ;
   28 D1:E093 02 31 -  -  .db 2,"1"  ;
   29 D1:E095 02 2D -  -  .db 2,"-"  ;
   30 D1:E097 03 23 31 -  .db 3,"#1"  ;
   31 D1:E09A 01 -  -  -  .db 1,""  ;
   32 D1:E09B 06 28 31 29 
              2C 59 -  -  .db 6,"(1),Y"  ;
   33 D1:E0A1 04 32 2C 59 .db 4,"2,Y"  ;
   34 D1:E0A5 04 31 2C 59 .db 4,"1,Y"  ;
   35 D1:E0A9 -  -  -  -  
   36 D1:E0A9 -  -  -  -  inst6502_disassembly_table:
   37 D1:E0A9 42 52 4B 0A .db "BRK", 10     ;0x00
   38 D1:E0AD 4F 52 41 05 .db "ORA", 5     ;0x01
   39 D1:E0B1 4A 41 4D 00 .db "JAM", 0     ;0x02
   40 D1:E0B5 53 4C 4F 05 .db "SLO", 5     ;0x03
   41 D1:E0B9 4E 4F 50 07 .db "NOP", 7     ;0x04
   42 D1:E0BD 4F 52 41 07 .db "ORA", 7     ;0x05
   43 D1:E0C1 41 53 4C 07 .db "ASL", 7     ;0x06
   44 D1:E0C5 53 4C 4F 07 .db "SLO", 7     ;0x07
   45 D1:E0C9 50 48 50 0A .db "PHP", 10     ;0x08
   46 D1:E0CD 4F 52 41 09 .db "ORA", 9     ;0x09
   47 D1:E0D1 41 53 4C 06 .db "ASL", 6     ;0x0A
   48 D1:E0D5 41 4E 43 09 .db "ANC", 9     ;0x0B
   49 D1:E0D9 4E 4F 50 03 .db "NOP", 3     ;0x0C
   50 D1:E0DD 4F 52 41 03 .db "ORA", 3     ;0x0D
   51 D1:E0E1 41 53 4C 03 .db "ASL", 3     ;0x0E
   52 D1:E0E5 53 4C 4F 03 .db "SLO", 3     ;0x0F
   53 D1:E0E9 42 50 4C 08 .db "BPL", 8     ;0x10
   54 D1:E0ED 4F 52 41 0B .db "ORA", 11     ;0x11
   55 D1:E0F1 4A 41 4D 00 .db "JAM", 0     ;0x12
   56 D1:E0F5 53 4C 4F 0B .db "SLO", 11     ;0x13
   57 D1:E0F9 4E 4F 50 01 .db "NOP", 1     ;0x14
   58 D1:E0FD 4F 52 41 01 .db "ORA", 1     ;0x15
   59 D1:E101 41 53 4C 01 .db "ASL", 1     ;0x16
   60 D1:E105 53 4C 4F 01 .db "SLO", 1     ;0x17
   61 D1:E109 43 4C 43 0A .db "CLC", 10     ;0x18
   62 D1:E10D 4F 52 41 0C .db "ORA", 12     ;0x19
   63 D1:E111 4E 4F 50 0A .db "NOP", 10     ;0x1A
   64 D1:E115 53 4C 4F 0C .db "SLO", 12     ;0x1B
   65 D1:E119 4E 4F 50 04 .db "NOP", 4     ;0x1C
   66 D1:E11D 4F 52 41 04 .db "ORA", 4     ;0x1D
   67 D1:E121 41 53 4C 04 .db "ASL", 4     ;0x1E
   68 D1:E125 53 4C 4F 04 .db "SLO", 4     ;0x1F
   69 D1:E129 4A 53 52 03 .db "JSR", 3     ;0x20
   70 D1:E12D 41 4E 44 05 .db "AND", 5     ;0x21
   71 D1:E131 4A 41 4D 00 .db "JAM", 0     ;0x22
   72 D1:E135 52 4C 41 05 .db "RLA", 5     ;0x23
   73 D1:E139 42 49 54 07 .db "BIT", 7     ;0x24
   74 D1:E13D 41 4E 44 07 .db "AND", 7     ;0x25
   75 D1:E141 52 4F 4C 07 .db "ROL", 7     ;0x26
   76 D1:E145 52 4C 41 07 .db "RLA", 7     ;0x27
   77 D1:E149 50 4C 50 0A .db "PLP", 10     ;0x28
   78 D1:E14D 41 4E 44 09 .db "AND", 9     ;0x29
   79 D1:E151 52 4F 4C 06 .db "ROL", 6     ;0x2A
   80 D1:E155 41 4E 43 09 .db "ANC", 9     ;0x2B
   81 D1:E159 42 49 54 03 .db "BIT", 3     ;0x2C
   82 D1:E15D 41 4E 44 03 .db "AND", 3     ;0x2D
   83 D1:E161 52 4F 4C 03 .db "ROL", 3     ;0x2E
   84 D1:E165 52 4C 41 03 .db "RLA", 3     ;0x2F
   85 D1:E169 42 4D 49 08 .db "BMI", 8     ;0x30
   86 D1:E16D 41 4E 44 0B .db "AND", 11     ;0x31
   87 D1:E171 4A 41 4D 00 .db "JAM", 0     ;0x32
   88 D1:E175 52 4C 41 0B .db "RLA", 11     ;0x33
   89 D1:E179 4E 4F 50 01 .db "NOP", 1     ;0x34
   90 D1:E17D 41 4E 44 01 .db "AND", 1     ;0x35
   91 D1:E181 52 4F 4C 01 .db "ROL", 1     ;0x36
   92 D1:E185 52 4C 41 01 .db "RLA", 1     ;0x37
   93 D1:E189 53 45 43 0A .db "SEC", 10     ;0x38
   94 D1:E18D 41 4E 44 0C .db "AND", 12     ;0x39
   95 D1:E191 4E 4F 50 0A .db "NOP", 10     ;0x3A
   96 D1:E195 52 4C 41 0C .db "RLA", 12     ;0x3B
   97 D1:E199 4E 4F 50 04 .db "NOP", 4     ;0x3C
   98 D1:E19D 41 4E 44 04 .db "AND", 4     ;0x3D
   99 D1:E1A1 52 4F 4C 04 .db "ROL", 4     ;0x3E
  100 D1:E1A5 52 4C 41 04 .db "RLA", 4     ;0x3F
  101 D1:E1A9 52 54 49 0A .db "RTI", 10     ;0x40
  102 D1:E1AD 45 4F 52 05 .db "EOR", 5     ;0x41
  103 D1:E1B1 4A 41 4D 00 .db "JAM", 0     ;0x42
  104 D1:E1B5 53 52 45 05 .db "SRE", 5     ;0x43
  105 D1:E1B9 4E 4F 50 07 .db "NOP", 7     ;0x44
  106 D1:E1BD 45 4F 52 07 .db "EOR", 7     ;0x45
  107 D1:E1C1 4C 53 52 07 .db "LSR", 7     ;0x46
  108 D1:E1C5 53 52 45 07 .db "SRE", 7     ;0x47
  109 D1:E1C9 50 48 41 0A .db "PHA", 10     ;0x48
  110 D1:E1CD 45 4F 52 09 .db "EOR", 9     ;0x49
  111 D1:E1D1 4C 53 52 06 .db "LSR", 6     ;0x4A
  112 D1:E1D5 41 4C 52 09 .db "ALR", 9     ;0x4B
  113 D1:E1D9 4A 4D 50 03 .db "JMP", 3     ;0x4C
  114 D1:E1DD 45 4F 52 03 .db "EOR", 3     ;0x4D
  115 D1:E1E1 4C 53 52 03 .db "LSR", 3     ;0x4E
  116 D1:E1E5 53 52 45 03 .db "SRE", 3     ;0x4F
  117 D1:E1E9 42 56 43 08 .db "BVC", 8     ;0x50
  118 D1:E1ED 45 4F 52 0B .db "EOR", 11     ;0x51
  119 D1:E1F1 4A 41 4D 00 .db "JAM", 0     ;0x52
  120 D1:E1F5 53 52 45 0B .db "SRE", 11     ;0x53
  121 D1:E1F9 4E 4F 50 01 .db "NOP", 1     ;0x54
  122 D1:E1FD 45 4F 52 01 .db "EOR", 1     ;0x55
  123 D1:E201 4C 53 52 01 .db "LSR", 1     ;0x56
  124 D1:E205 53 52 45 01 .db "SRE", 1     ;0x57
  125 D1:E209 43 4C 49 0A .db "CLI", 10     ;0x58
  126 D1:E20D 45 4F 52 0C .db "EOR", 12     ;0x59
  127 D1:E211 4E 4F 50 0A .db "NOP", 10     ;0x5A
  128 D1:E215 53 52 45 0C .db "SRE", 12     ;0x5B
  129 D1:E219 4E 4F 50 04 .db "NOP", 4     ;0x5C
  130 D1:E21D 45 4F 52 04 .db "EOR", 4     ;0x5D
  131 D1:E221 4C 53 52 04 .db "LSR", 4     ;0x5E
  132 D1:E225 53 52 45 04 .db "SRE", 4     ;0x5F
  133 D1:E229 52 54 53 0A .db "RTS", 10     ;0x60
  134 D1:E22D 41 44 43 05 .db "ADC", 5     ;0x61
  135 D1:E231 4A 41 4D 00 .db "JAM", 0     ;0x62
  136 D1:E235 52 52 41 05 .db "RRA", 5     ;0x63
  137 D1:E239 4E 4F 50 07 .db "NOP", 7     ;0x64
  138 D1:E23D 41 44 43 07 .db "ADC", 7     ;0x65
  139 D1:E241 52 4F 52 07 .db "ROR", 7     ;0x66
  140 D1:E245 52 52 41 07 .db "RRA", 7     ;0x67
  141 D1:E249 50 4C 41 0A .db "PLA", 10     ;0x68
  142 D1:E24D 41 44 43 09 .db "ADC", 9     ;0x69
  143 D1:E251 52 4F 52 06 .db "ROR", 6     ;0x6A
  144 D1:E255 41 52 52 09 .db "ARR", 9     ;0x6B
  145 D1:E259 4A 4D 50 02 .db "JMP", 2     ;0x6C
  146 D1:E25D 41 44 43 03 .db "ADC", 3     ;0x6D
  147 D1:E261 52 4F 52 03 .db "ROR", 3     ;0x6E
  148 D1:E265 52 52 41 03 .db "RRA", 3     ;0x6F
  149 D1:E269 42 56 53 08 .db "BVS", 8     ;0x70
  150 D1:E26D 41 44 43 0B .db "ADC", 11     ;0x71
  151 D1:E271 4A 41 4D 00 .db "JAM", 0     ;0x72
  152 D1:E275 52 52 41 0B .db "RRA", 11     ;0x73
  153 D1:E279 4E 4F 50 01 .db "NOP", 1     ;0x74
  154 D1:E27D 41 44 43 01 .db "ADC", 1     ;0x75
  155 D1:E281 52 4F 52 01 .db "ROR", 1     ;0x76
  156 D1:E285 52 52 41 01 .db "RRA", 1     ;0x77
  157 D1:E289 53 45 49 0A .db "SEI", 10     ;0x78
  158 D1:E28D 41 44 43 0C .db "ADC", 12     ;0x79
  159 D1:E291 4E 4F 50 0A .db "NOP", 10     ;0x7A
  160 D1:E295 52 52 41 0C .db "RRA", 12     ;0x7B
  161 D1:E299 4E 4F 50 04 .db "NOP", 4     ;0x7C
  162 D1:E29D 41 44 43 04 .db "ADC", 4     ;0x7D
  163 D1:E2A1 52 4F 52 04 .db "ROR", 4     ;0x7E
  164 D1:E2A5 52 52 41 04 .db "RRA", 4     ;0x7F
  165 D1:E2A9 4E 4F 50 09 .db "NOP", 9     ;0x80
  166 D1:E2AD 53 54 41 05 .db "STA", 5     ;0x81
  167 D1:E2B1 4E 4F 50 09 .db "NOP", 9     ;0x82
  168 D1:E2B5 53 41 58 05 .db "SAX", 5     ;0x83
  169 D1:E2B9 53 54 59 07 .db "STY", 7     ;0x84
  170 D1:E2BD 53 54 41 07 .db "STA", 7     ;0x85
  171 D1:E2C1 53 54 58 07 .db "STX", 7     ;0x86
  172 D1:E2C5 53 41 58 07 .db "SAX", 7     ;0x87
  173 D1:E2C9 44 45 59 0A .db "DEY", 10     ;0x88
  174 D1:E2CD 4E 4F 50 09 .db "NOP", 9     ;0x89
  175 D1:E2D1 54 58 41 0A .db "TXA", 10     ;0x8A
  176 D1:E2D5 41 4E 45 09 .db "ANE", 9     ;0x8B
  177 D1:E2D9 53 54 59 03 .db "STY", 3     ;0x8C
  178 D1:E2DD 53 54 41 03 .db "STA", 3     ;0x8D
  179 D1:E2E1 53 54 58 03 .db "STX", 3     ;0x8E
  180 D1:E2E5 53 41 58 03 .db "SAX", 3     ;0x8F
  181 D1:E2E9 42 43 43 08 .db "BCC", 8     ;0x90
  182 D1:E2ED 53 54 41 0B .db "STA", 11     ;0x91
  183 D1:E2F1 4A 41 4D 00 .db "JAM", 0     ;0x92
  184 D1:E2F5 53 48 41 0B .db "SHA", 11     ;0x93
  185 D1:E2F9 53 54 59 01 .db "STY", 1     ;0x94
  186 D1:E2FD 53 54 41 01 .db "STA", 1     ;0x95
  187 D1:E301 53 54 58 0D .db "STX", 13     ;0x96
  188 D1:E305 53 41 58 0D .db "SAX", 13     ;0x97
  189 D1:E309 54 59 41 0A .db "TYA", 10     ;0x98
  190 D1:E30D 53 54 41 0C .db "STA", 12     ;0x99
  191 D1:E311 54 58 53 0A .db "TXS", 10     ;0x9A
  192 D1:E315 54 41 53 0C .db "TAS", 12     ;0x9B
  193 D1:E319 53 48 59 04 .db "SHY", 4     ;0x9C
  194 D1:E31D 53 54 41 04 .db "STA", 4     ;0x9D
  195 D1:E321 53 48 58 0C .db "SHX", 12     ;0x9E
  196 D1:E325 53 48 41 0C .db "SHA", 12     ;0x9F
  197 D1:E329 4C 44 59 09 .db "LDY", 9     ;0xA0
  198 D1:E32D 4C 44 41 05 .db "LDA", 5     ;0xA1
  199 D1:E331 4C 44 58 09 .db "LDX", 9     ;0xA2
  200 D1:E335 4C 41 58 05 .db "LAX", 5     ;0xA3
  201 D1:E339 4C 44 59 07 .db "LDY", 7     ;0xA4
  202 D1:E33D 4C 44 41 07 .db "LDA", 7     ;0xA5
  203 D1:E341 4C 44 58 07 .db "LDX", 7     ;0xA6
  204 D1:E345 4C 41 58 07 .db "LAX", 7     ;0xA7
  205 D1:E349 54 41 59 0A .db "TAY", 10     ;0xA8
  206 D1:E34D 4C 44 41 09 .db "LDA", 9     ;0xA9
  207 D1:E351 54 41 58 0A .db "TAX", 10     ;0xAA
  208 D1:E355 4C 58 41 09 .db "LXA", 9     ;0xAB
  209 D1:E359 4C 44 59 03 .db "LDY", 3     ;0xAC
  210 D1:E35D 4C 44 41 03 .db "LDA", 3     ;0xAD
  211 D1:E361 4C 44 58 03 .db "LDX", 3     ;0xAE
  212 D1:E365 4C 41 58 03 .db "LAX", 3     ;0xAF
  213 D1:E369 42 43 53 08 .db "BCS", 8     ;0xB0
  214 D1:E36D 4C 44 41 0B .db "LDA", 11     ;0xB1
  215 D1:E371 4A 41 4D 00 .db "JAM", 0     ;0xB2
  216 D1:E375 4C 41 58 0B .db "LAX", 11     ;0xB3
  217 D1:E379 4C 44 59 01 .db "LDY", 1     ;0xB4
  218 D1:E37D 4C 44 41 01 .db "LDA", 1     ;0xB5
  219 D1:E381 4C 44 58 0D .db "LDX", 13     ;0xB6
  220 D1:E385 4C 41 58 0D .db "LAX", 13     ;0xB7
  221 D1:E389 43 4C 56 0A .db "CLV", 10     ;0xB8
  222 D1:E38D 4C 44 41 0C .db "LDA", 12     ;0xB9
  223 D1:E391 54 53 58 0A .db "TSX", 10     ;0xBA
  224 D1:E395 4C 41 53 0C .db "LAS", 12     ;0xBB
  225 D1:E399 4C 44 59 04 .db "LDY", 4     ;0xBC
  226 D1:E39D 4C 44 41 04 .db "LDA", 4     ;0xBD
  227 D1:E3A1 4C 44 58 0C .db "LDX", 12     ;0xBE
  228 D1:E3A5 4C 41 58 0C .db "LAX", 12     ;0xBF
  229 D1:E3A9 43 50 59 09 .db "CPY", 9     ;0xC0
  230 D1:E3AD 43 4D 50 05 .db "CMP", 5     ;0xC1
  231 D1:E3B1 4E 4F 50 09 .db "NOP", 9     ;0xC2
  232 D1:E3B5 44 43 50 05 .db "DCP", 5     ;0xC3
  233 D1:E3B9 43 50 59 07 .db "CPY", 7     ;0xC4
  234 D1:E3BD 43 4D 50 07 .db "CMP", 7     ;0xC5
  235 D1:E3C1 44 45 43 07 .db "DEC", 7     ;0xC6
  236 D1:E3C5 44 43 50 07 .db "DCP", 7     ;0xC7
  237 D1:E3C9 49 4E 59 0A .db "INY", 10     ;0xC8
  238 D1:E3CD 43 4D 50 09 .db "CMP", 9     ;0xC9
  239 D1:E3D1 44 45 58 0A .db "DEX", 10     ;0xCA
  240 D1:E3D5 53 42 58 09 .db "SBX", 9     ;0xCB
  241 D1:E3D9 43 50 59 03 .db "CPY", 3     ;0xCC
  242 D1:E3DD 43 4D 50 03 .db "CMP", 3     ;0xCD
  243 D1:E3E1 44 45 43 03 .db "DEC", 3     ;0xCE
  244 D1:E3E5 44 43 50 03 .db "DCP", 3     ;0xCF
  245 D1:E3E9 42 4E 45 08 .db "BNE", 8     ;0xD0
  246 D1:E3ED 43 4D 50 0B .db "CMP", 11     ;0xD1
  247 D1:E3F1 4A 41 4D 00 .db "JAM", 0     ;0xD2
  248 D1:E3F5 44 43 50 0B .db "DCP", 11     ;0xD3
  249 D1:E3F9 4E 4F 50 01 .db "NOP", 1     ;0xD4
  250 D1:E3FD 43 4D 50 01 .db "CMP", 1     ;0xD5
  251 D1:E401 44 45 43 01 .db "DEC", 1     ;0xD6
  252 D1:E405 44 43 50 01 .db "DCP", 1     ;0xD7
  253 D1:E409 43 4C 44 0A .db "CLD", 10     ;0xD8
  254 D1:E40D 43 4D 50 0C .db "CMP", 12     ;0xD9
  255 D1:E411 4E 4F 50 0A .db "NOP", 10     ;0xDA
  256 D1:E415 44 43 50 0C .db "DCP", 12     ;0xDB
  257 D1:E419 4E 4F 50 04 .db "NOP", 4     ;0xDC
  258 D1:E41D 43 4D 50 04 .db "CMP", 4     ;0xDD
  259 D1:E421 44 45 43 04 .db "DEC", 4     ;0xDE
  260 D1:E425 44 43 50 04 .db "DCP", 4     ;0xDF
  261 D1:E429 43 50 58 09 .db "CPX", 9     ;0xE0
  262 D1:E42D 53 42 43 05 .db "SBC", 5     ;0xE1
  263 D1:E431 4E 4F 50 09 .db "NOP", 9     ;0xE2
  264 D1:E435 49 53 43 05 .db "ISC", 5     ;0xE3
  265 D1:E439 43 50 58 07 .db "CPX", 7     ;0xE4
  266 D1:E43D 53 42 43 07 .db "SBC", 7     ;0xE5
  267 D1:E441 49 4E 43 07 .db "INC", 7     ;0xE6
  268 D1:E445 49 53 43 07 .db "ISC", 7     ;0xE7
  269 D1:E449 49 4E 58 0A .db "INX", 10     ;0xE8
  270 D1:E44D 53 42 43 09 .db "SBC", 9     ;0xE9
  271 D1:E451 4E 4F 50 0A .db "NOP", 10     ;0xEA
  272 D1:E455 55 53 42 09 .db "USB", 9     ;0xEB
  273 D1:E459 43 50 58 03 .db "CPX", 3     ;0xEC
  274 D1:E45D 53 42 43 03 .db "SBC", 3     ;0xED
  275 D1:E461 49 4E 43 03 .db "INC", 3     ;0xEE
  276 D1:E465 49 53 43 03 .db "ISC", 3     ;0xEF
  277 D1:E469 42 45 51 08 .db "BEQ", 8     ;0xF0
  278 D1:E46D 53 42 43 0B .db "SBC", 11     ;0xF1
  279 D1:E471 4A 41 4D 00 .db "JAM", 0     ;0xF2
  280 D1:E475 49 53 43 0B .db "ISC", 11     ;0xF3
  281 D1:E479 4E 4F 50 01 .db "NOP", 1     ;0xF4
  282 D1:E47D 53 42 43 01 .db "SBC", 1     ;0xF5
  283 D1:E481 49 4E 43 01 .db "INC", 1     ;0xF6
  284 D1:E485 49 53 43 01 .db "ISC", 1     ;0xF7
  285 D1:E489 53 45 44 0A .db "SED", 10     ;0xF8
  286 D1:E48D 53 42 43 0C .db "SBC", 12     ;0xF9
  287 D1:E491 4E 4F 50 0A .db "NOP", 10     ;0xFA
  288 D1:E495 49 53 43 0C .db "ISC", 12     ;0xFB
  289 D1:E499 4E 4F 50 04 .db "NOP", 4     ;0xFC
  290 D1:E49D 53 42 43 04 .db "SBC", 4     ;0xFD
  291 D1:E4A1 49 4E 43 04 .db "INC", 4     ;0xFE
  292 D1:E4A5 49 53 43 04 .db "ISC", 4     ;0xFF
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    3 D1:E4A9 -  -  -  -  
    4 D1:E4A9 -  -  -  -  
    5 D1:E4A9 -  -  -  -  ;You must assign a print character routine.
    6 D1:E4A9 -  -  -  -  ;You must also write all opcode bytes to operbuf or map operbuf to where written
    7 D1:E4A9 -  -  -  -  dbg_printChr    = PrintBigFont
    8 D1:E4A9 -  -  -  -  operbuf         = debugram
    9 D1:E4A9 -  -  -  -  
   10 D1:E4A9 -  -  -  -  
   11 D1:E4A9 -  -  -  -  dbg_resetScreen:
   12 D1:E4A9 21 00 00 D4     ld  hl,screenBuf1
   13 D1:E4AD 11 01 00 D4     ld  de,screenBuf1+1
   14 D1:E4B1 01 FF 57 02     ld  bc,(2*240*320)-1
   15 D1:E4B5 36 00 -  -      ld  (hl),$00
   16 D1:E4B7 ED B0 -  -      ldir
   17 D1:E4B9 AF -  -  -      xor a,a
   18 D1:E4BA CD CE B2 D1     call setLineStart
   19 D1:E4BE CD D7 B2 D1     call setCurLine
   20 D1:E4C2 C9 -  -  -      ret
   21 D1:E4C3 -  -  -  -  
   22 D1:E4C3 -  -  -  -  dbg_prepNextLine:
   23 D1:E4C3 AF -  -  -      xor a,a
   24 D1:E4C4 32 F6 31 D0     ld  (xPos),a
   25 D1:E4C8 CD A4 B3 D1     call calculateScreenPtr
   26 D1:E4CC EB -  -  -      ex  de,hl
   27 D1:E4CD 21 FF 2B D5     ld  hl,screenBuf2-1
   28 D1:E4D1 B7 -  -  -      or  a,a
   29 D1:E4D2 ED 52 -  -      sbc hl,de
   30 D1:E4D4 -  -  -  -  ;If C: DE in sb2. subtract to set in sb1.
   31 D1:E4D4 -  -  -  -  ;If NC: DE in sb1. add to set in sb2.
   32 D1:E4D4 21 00 2C 01     ld  hl,320*240
   33 D1:E4D8 30 04 -  -      jr  nc,+_
   34 D1:E4DA 21 00 D4 FE     ld  hl,-(320*240)+0
   35 D1:E4DE 19 -  -  -  _:  add hl,de   ;HL set to other buffer. DE points to current buffer.
   36 D1:E4DF 01 00 0A 00     ld  bc,320*8    ;copy one line from other buffer to current buffer.
   37 D1:E4E3 7E -  -  -  _:  ld  a,(hl)
   38 D1:E4E4 C6 01 -  -      add a,1     ;carry if $FF (white), NC if not
   39 D1:E4E6 9F -  -  -      sbc a,a     ;if carry, returns to $FF, else is black
   40 D1:E4E7 77 -  -  -      ld  (hl),a
   41 D1:E4E8 ED A0 -  -      ldi
   42 D1:E4EA EA E3 E4 D1     jp  pe,-_
   43 D1:E4EE 3A F7 31 D0     ld  a,(yPos)
   44 D1:E4F2 FE 1D -  -      cp  a,29
   45 D1:E4F4 20 06 -  -      jr  nz,+_
   46 D1:E4F6 21 00 D4 FE     ld  hl,-(320*240)
   47 D1:E4FA 19 -  -  -      add hl,de
   48 D1:E4FB EB -  -  -      ex de,hl        ;if bottom of screen, then reset DE to top of screen.
   49 D1:E4FC D5 -  -  -  _:  push de
   50 D1:E4FD E1 -  -  -      pop hl
   51 D1:E4FE 13 -  -  -      inc de
   52 D1:E4FF 71 -  -  -      ld  (hl),c
   53 D1:E500 01 BF 08 00     ld  bc,(320*7)-1    ;erase whole line below it to prepare for writing.
   54 D1:E504 ED B0 -  -      ldir
   55 D1:E506 C9 -  -  -      ret
   56 D1:E507 -  -  -  -  
   57 D1:E507 -  -  -  -  ;Input: ix = core_memory_ix 
   58 D1:E507 -  -  -  -  ;Output: Text onscreen
   59 D1:E507 -  -  -  -  dbg_printLine:
   60 D1:E507 E5 C5 D5 DD 
              E5 FD E5 F5     push hl \ push bc \ push de \ push ix \ push iy \ push af
   61 D1:E50F ED 23 00 -      lea hl,iy+0
   62 D1:E512 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl
   63 D1:E515 11 00 00 00     ld  de,DEBUG_PRINT_START_CYCLE
   64 D1:E519 B7 -  -  -      or  a,a
   65 D1:E51A ED 52 -  -      sbc hl,de
   66 D1:E51C DA 00 E6 D1     jp  c,dbg_printLine_noPrint
   67 D1:E520 -  -  -  -  
   68 D1:E520 3E 1A -  -      ld  a,$1A   ;blue
   69 D1:E522 32 26 B3 D1     ld  (fontBGColor_var),a
   70 D1:E526 32 73 B3 D1     ld  (smallFontBGColor_var),a
   71 D1:E52A DD 27 0E -      ld  hl,(ix+CURRENT_OPCODES)
   72 D1:E52D 22 F9 31 D0     ld  (operbuf),hl
   73 D1:E531 CD C3 E4 D1     call dbg_prepNextLine
   74 D1:E535 CD E2 B2 D1     call newLine
   75 D1:E539 DD 7E 06 -      ld  a,(ix+REGPC+1)
   76 D1:E53C CD 3F B3 D1     call printSmallNumPair
   77 D1:E540 DD 7E 05 -      ld  a,(ix+REGPC+0)
   78 D1:E543 CD 3F B3 D1     call printSmallNumPair
   79 D1:E547 3E 20 -  -      ld  a,' '
   80 D1:E549 CD 0F B3 D1     call printBigFont
   81 D1:E54D -  -  -  -      ;
   82 D1:E54D 3E 41 -  -      ld  a,'A'
   83 D1:E54F CD 0F B3 D1     call printBigFont
   84 D1:E553 DD 7E 00 -      ld  a,(ix+REGA)
   85 D1:E556 CD 3F B3 D1     call printSmallNumPair
   86 D1:E55A 3E 20 -  -      ld  a,' '
   87 D1:E55C CD 0F B3 D1     call printBigFont
   88 D1:E560 -  -  -  -      ;
   89 D1:E560 3E 58 -  -      ld  a,'X'
   90 D1:E562 CD 0F B3 D1     call printBigFont
   91 D1:E566 DD 7E 01 -      ld  a,(ix+REGX)
   92 D1:E569 CD 3F B3 D1     call printSmallNumPair
   93 D1:E56D 3E 20 -  -      ld  a,' '
   94 D1:E56F CD 0F B3 D1     call printBigFont
   95 D1:E573 -  -  -  -      ;
   96 D1:E573 3E 59 -  -      ld  a,'Y'
   97 D1:E575 CD 0F B3 D1     call printBigFont
   98 D1:E579 DD 7E 02 -      ld  a,(ix+REGY)
   99 D1:E57C CD 3F B3 D1     call printSmallNumPair
  100 D1:E580 3E 20 -  -      ld  a,' '
  101 D1:E582 CD 0F B3 D1     call printBigFont
  102 D1:E586 -  -  -  -      ;
  103 D1:E586 3E 53 -  -      ld  a,'S'
  104 D1:E588 CD 0F B3 D1     call printBigFont
  105 D1:E58C DD 7E 03 -      ld  a,(ix+REGSP)
  106 D1:E58F CD 3F B3 D1     call printSmallNumPair
  107 D1:E593 3E 20 -  -      ld  a,' '
  108 D1:E595 CD 0F B3 D1     call printBigFont
  109 D1:E599 -  -  -  -      ;
  110 D1:E599 3E 50 -  -      ld  a,'P'
  111 D1:E59B CD 0F B3 D1     call printBigFont
  112 D1:E59F DD 7E 04 -      ld  a,(ix+REGSR)
  113 D1:E5A2 CD 3F B3 D1     call printSmallNumPair
  114 D1:E5A6 3E 20 -  -      ld  a,' '
  115 D1:E5A8 CD 0F B3 D1     call printBigFont
  116 D1:E5AC -  -  -  -  
  117 D1:E5AC -  -  -  -      ;
  118 D1:E5AC -  -  -  -  ;    ld  hl,dbg_printLine_str001
  119 D1:E5AC -  -  -  -  ;    call printString
  120 D1:E5AC -  -  -  -  ;    ld  b,5
  121 D1:E5AC -  -  -  -  ;    lea hl,ix+0
  122 D1:E5AC -  -  -  -  ;_:  ld  a,(hl)
  123 D1:E5AC -  -  -  -  ;    inc hl
  124 D1:E5AC -  -  -  -  ;    push bc
  125 D1:E5AC -  -  -  -  ;        push hl
  126 D1:E5AC -  -  -  -  ;            call printSmallNumPair
  127 D1:E5AC -  -  -  -  ;            ld  a,' '
  128 D1:E5AC -  -  -  -  ;            call printBigFont
  129 D1:E5AC -  -  -  -  ;        pop hl
  130 D1:E5AC -  -  -  -  ;    pop bc
  131 D1:E5AC -  -  -  -  ;    djnz -_
  132 D1:E5AC -  -  -  -  
  133 D1:E5AC DD 7E 0D -      ld  a,(ix+CYCLES_CURRENT+2)
  134 D1:E5AF CD 3F B3 D1     call printSmallNumPair
  135 D1:E5B3 DD 7E 0C -      ld  a,(ix+CYCLES_CURRENT+1)
  136 D1:E5B6 CD 3F B3 D1     call printSmallNumPair
  137 D1:E5BA DD 7E 0B -      ld  a,(ix+CYCLES_CURRENT+0)
  138 D1:E5BD CD 3F B3 D1     call printSmallNumPair
  139 D1:E5C1 3E 20 -  -      ld  a,' '
  140 D1:E5C3 CD 0F B3 D1     call printBigFont
  141 D1:E5C7 2A F9 31 D0     ld  hl,(operbuf)
  142 D1:E5CB DD 2F 0E -      ld  (ix+CURRENT_OPCODES),hl
  143 D1:E5CE 7D -  -  -      ld  a,L
  144 D1:E5CF CD F0 E6 D1     call dbg_getInstSize
  145 D1:E5D3 06 03 -  -      ld  b,3
  146 D1:E5D5 4F -  -  -      ld  c,a
  147 D1:E5D6 0C -  -  -      inc c
  148 D1:E5D7 ED 22 0E -      lea hl,ix+CURRENT_OPCODES
  149 D1:E5DA 7E -  -  -  _:  ld  a,(hl)
  150 D1:E5DB 23 -  -  -      inc hl
  151 D1:E5DC E5 -  -  -      push hl
  152 D1:E5DD 0D -  -  -          dec c
  153 D1:E5DE F2 E3 E5 D1         jp p,+_
  154 D1:E5E2 0C -  -  -          inc c   ;never let c go below zero.
  155 D1:E5E3 C5 -  -  -  _:      push bc
  156 D1:E5E4 28 06 -  -              jr  z,+_
  157 D1:E5E6 CD 3F B3 D1             call printSmallNumPair
  158 D1:E5EA 18 06 -  -              jr ++_
  159 D1:E5EC 3E 20 -  -  _:          ld  a,' '
  160 D1:E5EE CD 0F B3 D1             call printBigFont
  161 D1:E5F2 C1 -  -  -  _:      pop bc
  162 D1:E5F3 E1 -  -  -      pop hl
  163 D1:E5F4 10 E4 -  -      djnz ----_
  164 D1:E5F6 3E 20 -  -      ld  a,' '
  165 D1:E5F8 CD 0F B3 D1     call printBigFont
  166 D1:E5FC CD 08 E7 D1     call dbg_printDisassembly
  167 D1:E600 -  -  -  -  
  168 D1:E600 -  -  -  -      ;
  169 D1:E600 -  -  -  -      ;Remove section below when done testing nestest for timings
  170 D1:E600 -  -  -  -      ;
  171 D1:E600 -  -  -  -  dbg_printLine_noPrint:
  172 D1:E600 11 00 00 00     ld  de,0
  173 D1:E604 2A 4D 34 D0     ld  hl,(timings_base)
  174 D1:E608 5E -  -  -      ld  e,(hl)
  175 D1:E609 23 -  -  -      inc hl
  176 D1:E60A 56 -  -  -      ld  d,(hl)
  177 D1:E60B 23 -  -  -      inc hl
  178 D1:E60C 22 4D 34 D0     ld  (timings_base),hl
  179 D1:E610 DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  180 D1:E613 B7 -  -  -      or  a,a
  181 D1:E614 ED 52 -  -      sbc hl,de
  182 D1:E616 28 17 -  -      jr  z,+_
  183 D1:E618 21 FF FF FF     ld  hl,-1
  184 D1:E61C DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  185 D1:E61F CD E2 B2 D1     call newLine
  186 D1:E623 21 B3 E6 D1     ld  hl,dbg_printLine_timeMismatch
  187 D1:E627 CD F9 B2 D1     call printString
  188 D1:E62B DD 36 14 01     ld  (ix+CORE_ERROR_LEVEL),1
  189 D1:E62F 2A 4D 34 D0 _:  ld  hl,(timings_base)
  190 D1:E633 7E -  -  -      ld  a,(hl)
  191 D1:E634 23 -  -  -      inc hl
  192 D1:E635 22 4D 34 D0     ld  (timings_base),hl
  193 D1:E639 DD BE 04 -      cp  a,(ix+REGSR)
  194 D1:E63C 28 17 -  -      jr  z,+_
  195 D1:E63E 21 FF FF FF     ld  hl,-1
  196 D1:E642 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  197 D1:E645 CD E2 B2 D1     call newLine
  198 D1:E649 21 CD E6 D1     ld  hl,dbg_printLine_statusRegisterMismatch
  199 D1:E64D CD F9 B2 D1     call printString
  200 D1:E651 DD 36 14 02     ld  (ix+CORE_ERROR_LEVEL),2
  201 D1:E655 -  -  -  -  _:
  202 D1:E655 -  -  -  -      ;
  203 D1:E655 -  -  -  -      ;End debug-debug section
  204 D1:E655 -  -  -  -      ;
  205 D1:E655 CD 05 B2 D1     call fastCopy
  206 D1:E659 AF -  -  -      xor a,a     ;black
  207 D1:E65A 32 26 B3 D1     ld  (fontBGColor_var),a
  208 D1:E65E 32 73 B3 D1     ld  (smallFontBGColor_var),a
  209 D1:E662 -  -  -  -  
  210 D1:E662 F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  211 D1:E66A -  -  -  -      ;push hl \ push bc \ push de \ push ix \ push iy \ push af
  212 D1:E66A C9 -  -  -      ret
  213 D1:E66B -  -  -  -  
  214 D1:E66B -  -  -  -  
  215 D1:E66B -  -  -  -      ;also remove this when done timing debugging
  216 D1:E66B 11 00 00 00     ld  de,0
  217 D1:E66F 2A 4D 34 D0     ld  hl,(timings_base)
  218 D1:E673 5E -  -  -      ld  e,(hl)
  219 D1:E674 23 -  -  -      inc hl
  220 D1:E675 56 -  -  -      ld  d,(hl)
  221 D1:E676 23 -  -  -      inc hl
  222 D1:E677 22 4D 34 D0     ld  (timings_base),hl
  223 D1:E67B DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  224 D1:E67E B7 -  -  -      or  a,a
  225 D1:E67F ED 52 -  -      sbc hl,de
  226 D1:E681 28 13 -  -      jr  z,+_
  227 D1:E683 21 FF FF FF     ld  hl,-1
  228 D1:E687 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  229 D1:E68A CD E2 B2 D1     call newLine
  230 D1:E68E 21 B3 E6 D1     ld  hl,dbg_printLine_timeMismatch
  231 D1:E692 CD F9 B2 D1     call printString
  232 D1:E696 -  -  -  -  _:  ;
  233 D1:E696 -  -  -  -      ;End debug-debug section
  234 D1:E696 -  -  -  -      ;
  235 D1:E696 CD 05 B2 D1     call fastCopy
  236 D1:E69A AF -  -  -      xor a,a     ;black
  237 D1:E69B 32 26 B3 D1     ld  (fontBGColor_var),a
  238 D1:E69F 32 73 B3 D1     ld  (smallFontBGColor_var),a
  239 D1:E6A3 F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  240 D1:E6AB C9 -  -  -      ret
  241 D1:E6AC -  -  -  -  
  242 D1:E6AC -  -  -  -  dbg_printLine_str001:
  243 D1:E6AC 41 58 59 53 
              50 20 00 -  .db "AXYSP ",0
  244 D1:E6B3 -  -  -  -  dbg_printLine_timeMismatch:
  245 D1:E6B3 43 50 55 20 
              54 65 73 74 
              20 74 69 6D 
              69 6E 67 20 
              6D 69 73 6D 
              61 74 63 68 
              2E 00 -  -  .db "CPU Test timing mismatch.",0
  246 D1:E6CD -  -  -  -  dbg_printLine_statusRegisterMismatch:
  247 D1:E6CD -  -  -  -  ;    0123456789012345678901234567890123456789
  248 D1:E6CD 43 50 55 20 
              54 65 73 74 
              20 73 74 61 
              74 75 73 20 
              72 65 67 69 
              73 74 65 72 
              20 6D 69 73 
              6D 61 74 63 
              68 2E 00 -  .db "CPU Test status register mismatch.",0
  249 D1:E6F0 -  -  -  -  
  250 D1:E6F0 -  -  -  -  
  251 D1:E6F0 -  -  -  -  
  252 D1:E6F0 -  -  -  -  
  253 D1:E6F0 -  -  -  -  
  254 D1:E6F0 -  -  -  -  
  255 D1:E6F0 -  -  -  -  ;A=instruction. Returns: A=size
  256 D1:E6F0 -  -  -  -  dbg_getInstSize:
  257 D1:E6F0 E5 D5 -  -      push hl \ push de
  258 D1:E6F2 57 -  -  -          ld  d,a
  259 D1:E6F3 1E 04 -  -          ld  e,4
  260 D1:E6F5 ED 5C -  -          mlt de
  261 D1:E6F7 21 AC E0 D1         ld  hl,inst6502_disassembly_table+3
  262 D1:E6FB 19 -  -  -          add hl,de
  263 D1:E6FC 16 00 -  -          ld  d,0
  264 D1:E6FE 5E -  -  -          ld  e,(hl)
  265 D1:E6FF 21 6E E0 D1         ld  hl,inst6502_opcode_width_table
  266 D1:E703 19 -  -  -          add hl,de
  267 D1:E704 7E -  -  -          ld  a,(hl)
  268 D1:E705 D1 E1 -  -      pop de \ pop hl
  269 D1:E707 C9 -  -  -      ret
  270 D1:E708 -  -  -  -  
  271 D1:E708 -  -  -  -  dbg_printDisassembly:
  272 D1:E708 F5 C5 D5 E5 
              DD E5 -  -      push af \ push bc \ push de \ push hl \ push ix
  273 D1:E70E -  -  -  -      ;find entry in disassembly table
  274 D1:E70E 2A F9 31 D0     ld  hl,(operbuf)
  275 D1:E712 26 04 -  -      ld  H,4
  276 D1:E714 ED 6C -  -      mlt hl
  277 D1:E716 11 A9 E0 D1     ld  de,inst6502_disassembly_table
  278 D1:E71A 19 -  -  -      add hl,de
  279 D1:E71B 06 03 -  -      ld  b,3
  280 D1:E71D 7E -  -  -  _:  ld  a,(hl)
  281 D1:E71E 23 -  -  -      inc hl
  282 D1:E71F CD A5 E7 D1     call dbg_printC
  283 D1:E723 10 F8 -  -      djnz -_
  284 D1:E725 3E 20 -  -      ld  a,' '
  285 D1:E727 CD A5 E7 D1     call dbg_printC
  286 D1:E72B 46 -  -  -      ld  b,(hl)
  287 D1:E72C 04 -  -  -      inc b
  288 D1:E72D -  -  -  -      ;Instruction addressing mode in B. Now find text for that address mode.
  289 D1:E72D 21 7C E0 D1     ld  hl,inst6502_disassembler
  290 D1:E731 11 00 00 00     ld  de,0
  291 D1:E735 5E -  -  -  _:  ld  e,(hl)
  292 D1:E736 19 -  -  -      add hl,de
  293 D1:E737 10 FC -  -      djnz -_
  294 D1:E739 1D -  -  -      dec e
  295 D1:E73A 28 29 -  -      jr  z,dbg_printDisassembly_end  ;stop if text is zero-sized
  296 D1:E73C ED 52 -  -      sbc hl,de   ;rewind to start of text part of instruction. E is text length.
  297 D1:E73E 43 -  -  -      ld  b,e
  298 D1:E73F -  -  -  -  dbg_printDisassembly_printOperandLoop:
  299 D1:E73F 7E -  -  -      ld  a,(hl)
  300 D1:E740 23 -  -  -      inc hl
  301 D1:E741 FE 31 -  -      cp  a,'1'
  302 D1:E743 20 06 -  -      jr  nz,+_
  303 D1:E745 CD 89 E7 D1     call dbg_printOperand1
  304 D1:E749 18 18 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  305 D1:E74B FE 32 -  -  _:  cp  a,'2'
  306 D1:E74D 20 06 -  -      jr  nz,+_
  307 D1:E74F CD 81 E7 D1     call dbg_printOperand2
  308 D1:E753 18 0E -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  309 D1:E755 FE 2D -  -  _:  cp  a,'-'
  310 D1:E757 20 06 -  -      jr  nz,+_
  311 D1:E759 CD 6C E7 D1     call dbg_printRel1
  312 D1:E75D 18 04 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  313 D1:E75F CD A5 E7 D1 _:  call dbg_printC
  314 D1:E763 -  -  -  -  dbg_PrintDisassembly_printOperandFallthrough:
  315 D1:E763 10 DA -  -      djnz dbg_printDisassembly_printOperandLoop
  316 D1:E765 -  -  -  -  dbg_printDisassembly_end:
  317 D1:E765 DD E1 E1 D1 
              C1 F1 -  -      pop ix \ pop hl \ pop de \ pop bc \ pop af
  318 D1:E76B C9 -  -  -      ret
  319 D1:E76C -  -  -  -  
  320 D1:E76C -  -  -  -  dbg_printRel1:
  321 D1:E76C 3A FA 31 D0     ld  a,(operbuf+1)
  322 D1:E770 B7 -  -  -      or  a,a
  323 D1:E771 F2 7F E7 D1     jp  p,dbg_printRel1_skipNeg
  324 D1:E775 F5 -  -  -      push af
  325 D1:E776 3E 2D -  -          ld   a,'-'
  326 D1:E778 CD A5 E7 D1         call dbg_printC
  327 D1:E77C F1 -  -  -      pop af
  328 D1:E77D ED 44 -  -      neg
  329 D1:E77F -  -  -  -  dbg_printRel1_skipNeg:
  330 D1:E77F 18 0C -  -      jr dbg_printHex
  331 D1:E781 -  -  -  -  
  332 D1:E781 -  -  -  -  dbg_printOperand2:
  333 D1:E781 3A FB 31 D0     ld  a,(operbuf+2)
  334 D1:E785 CD 8D E7 D1     call dbg_printHex
  335 D1:E789 -  -  -  -  dbg_printOperand1:
  336 D1:E789 3A FA 31 D0     ld  a,(operbuf+1)
  337 D1:E78D -  -  -  -  dbg_printHex:
  338 D1:E78D CD 92 E7 D1     call dispAHex
  339 D1:E791 C9 -  -  -      ret
  340 D1:E792 -  -  -  -  
  341 D1:E792 -  -  -  -  dispAHex:
  342 D1:E792 F5 -  -  -      push af
  343 D1:E793 CD 9A E7 D1         call +_
  344 D1:E797 F1 -  -  -      pop af
  345 D1:E798 18 04 -  -      jr  ++_
  346 D1:E79A 1F -  -  -  _:  rra
  347 D1:E79B 1F -  -  -      rra
  348 D1:E79C 1F -  -  -      rra
  349 D1:E79D 1F -  -  -      rra
  350 D1:E79E F6 F0 -  -  _:  or  a,$F0
  351 D1:E7A0 27 -  -  -      daa
  352 D1:E7A1 C6 A0 -  -      add a,$A0
  353 D1:E7A3 CE 40 -  -      adc a,$40
  354 D1:E7A5 -  -  -  -  dbg_printC:
  355 D1:E7A5 E5 -  -  -      push hl
  356 D1:E7A6 C5 -  -  -          push bc
  357 D1:E7A7 CD 0F B3 D1             call dbg_printChr
  358 D1:E7AB C1 -  -  -          pop bc
  359 D1:E7AC E1 -  -  -      pop hl
  360 D1:E7AD C9 -  -  -      ret
Listing for file "main.z80"
 1142 D1:E7AE -  -  -  -  #include "ppu.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ppu.z80"
    1 D1:E7AE -  -  -  -  ;PPU-related stuff is written here, though not all of it is localized in
    2 D1:E7AE -  -  -  -  ;this file. Some of it will necessarily be located with the mapper code
    3 D1:E7AE -  -  -  -  ;that handles PPU I/O.
    4 D1:E7AE -  -  -  -  
    5 D1:E7AE -  -  -  -  ; NOTES ON SPRITE 0 HIT IS LOCATED IN MAIN.Z80, AROUND THE CODE WHERE
    6 D1:E7AE -  -  -  -  ; MAPPER 0 READ HANDLER HANDLES READING PPU_STATUS.
    7 D1:E7AE -  -  -  -  
    8 D1:E7AE -  -  -  -  
    9 D1:E7AE -  -  -  -  
   10 D1:E7AE -  -  -  -      ;Do this before a lot of other things.
   11 D1:E7AE -  -  -  -      ;Select current character rom banks from PPU settings.
   12 D1:E7AE 2A 46 34 D0     ld  hl,(chr_rom_base)
   13 D1:E7B2 01 00 10 00     ld  bc,$001000
   14 D1:E7B6 DD 7E E0 -      ld  a,(ix+PPU_CTRL)
   15 D1:E7B9 E5 -  -  -      push hl
   16 D1:E7BA CB 67 -  -          bit 4,a     ;background pattern base offset
   17 D1:E7BC 28 01 -  -          jr  z,+_
   18 D1:E7BE 09 -  -  -          add hl,bc
   19 D1:E7BF 22 20 34 D0 _:      ld  (chr_rom_tiles),hl
   20 D1:E7C3 E1 -  -  -      pop hl
   21 D1:E7C4 CB 6F -  -      bit 5,a     ;sprite pattern base offset
   22 D1:E7C6 28 01 -  -      jr  z,+_
   23 D1:E7C8 09 -  -  -      add hl,bc
   24 D1:E7C9 22 24 34 D0 _:  ld  (chr_rom_sprites),hl
   25 D1:E7CD -  -  -  -  
   26 D1:E7CD -  -  -  -  
   27 D1:E7CD -  -  -  -  
   28 D1:E7CD -  -  -  -      ;B=Y, C=X. Obtain nametable address
   29 D1:E7CD -  -  -  -      ;You must preserve BC yourself. Somehow. Or not depending on how you loop.
   30 D1:E7CD -  -  -  -      ;B and C are modified to fit inside the nametable selected.
   31 D1:E7CD 21 80 06 1A     ld  hl,nametable00>>3
   32 D1:E7D1 78 -  -  -      ld  a,b
   33 D1:E7D2 D6 20 -  -      sub 32
   34 D1:E7D4 38 01 -  -      jr  c,+_
   35 D1:E7D6 78 -  -  -      ld  a,b
   36 D1:E7D7 47 -  -  -  _:  ld  b,a
   37 D1:E7D8 3F -  -  -      ccf
   38 D1:E7D9 ED 6A -  -      adc hl,hl
   39 D1:E7DB 79 -  -  -      ld  a,c
   40 D1:E7DC D6 1E -  -      sub 30
   41 D1:E7DE 38 01 -  -      jr  c,+_
   42 D1:E7E0 79 -  -  -      ld  a,c
   43 D1:E7E1 4F -  -  -  _:  ld  c,a
   44 D1:E7E2 3F -  -  -      ccf
   45 D1:E7E3 ED 6A -  -      adc hl,hl
   46 D1:E7E5 29 -  -  -      add hl,hl   ;HL is now a pointer. do ld hl,(hl) to get actual NT address.
   47 D1:E7E6 -  -  -  -  
   48 D1:E7E6 -  -  -  -  
   49 D1:E7E6 -  -  -  -      ;Increment C=X, adjusting nametable pointer table in HL if crossover
   50 D1:E7E6 0C -  -  -      inc c
   51 D1:E7E7 79 -  -  -      ld  a,c
   52 D1:E7E8 FE 20 -  -      cp  a,32
   53 D1:E7EA 38 06 -  -      jr  c,+_
   54 D1:E7EC 0E 00 -  -      ld  c,0
   55 D1:E7EE 7D -  -  -      ld  a,L
   56 D1:E7EF EE 04 -  -      xor a,%00000100
   57 D1:E7F1 6F -  -  -      ld  L,a
   58 D1:E7F2 00 -  -  -  _:  nop
   59 D1:E7F3 -  -  -  -  
   60 D1:E7F3 -  -  -  -      ;Increment B=Y, adjusting nametable pointer table in HL if crossover
   61 D1:E7F3 04 -  -  -      inc b
   62 D1:E7F4 78 -  -  -      ld  a,b
   63 D1:E7F5 FE 1E -  -      cp  a,30
   64 D1:E7F7 38 06 -  -      jr  c,+_
   65 D1:E7F9 06 00 -  -      ld  b,0
   66 D1:E7FB 7D -  -  -      ld  a,L
   67 D1:E7FC EE 08 -  -      xor a,%00001000
   68 D1:E7FE 6F -  -  -      ld  L,a
   69 D1:E7FF 00 -  -  -  _:  nop
   70 D1:E800 -  -  -  -  
   71 D1:E800 -  -  -  -      ;Retrieves attribute byte from B=Y, C=X
   72 D1:E800 -  -  -  -      ;HL=nametable pointer table
   73 D1:E800 -  -  -  -      ;NTptr tab low byte fmt: %000TIIAA. T=attrib, I=ID, A=address bytes
   74 D1:E800 D5 -  -  -      push de
   75 D1:E801 79 -  -  -          ld  a,c
   76 D1:E802 CB 3F -  -          srl a
   77 D1:E804 CB 3F -  -          srl a   ;change 0-30 to 0-7. Discards low 2 bits.
   78 D1:E806 5F -  -  -          ld  e,a
   79 D1:E807 78 -  -  -          ld  a,b
   80 D1:E808 E6 03 -  -          and a,3 ;discard two lower bits
   81 D1:E80A 87 -  -  -          add a,a ;But place remaining bits up higher
   82 D1:E80B 83 -  -  -          add a,e ;A=%00YYYXXX
   83 D1:E80C CB E5 -  -          set 4,L ;swap to attrib
   84 D1:E80E ED 17 -  -          ld  de,(hl)
   85 D1:E810 CB A5 -  -          res 4,L ;swap back to main nametable pointers
   86 D1:E812 83 -  -  -          add a,e ;base is $C0. This will not produce a carry.
   87 D1:E813 5F -  -  -          ld  e,a
   88 D1:E814 1A -  -  -          ld  a,(de)
   89 D1:E815 D1 -  -  -      pop de
   90 D1:E816 -  -  -  -  
   91 D1:E816 -  -  -  -      ;Selects attribute from A from B=Y, C=X in format %0000AA00
   92 D1:E816 CB 48 -  -      bit 1,b
   93 D1:E818 28 04 -  -      jr  z,+_
   94 D1:E81A 07 -  -  -      rlca    ;If not zero, shift upper nibble into lower nibble
   95 D1:E81B 07 -  -  -      rlca    ;for further selection.
   96 D1:E81C 07 -  -  -      rlca
   97 D1:E81D 07 -  -  -      rlca
   98 D1:E81E CB 49 -  -  _:  bit 1,c
   99 D1:E820 20 02 -  -      jr  nz,+_   ;If not zero, upper 2 bits of lower nibble already in position
  100 D1:E822 07 -  -  -      rlca        ;Otherwise, move them into position
  101 D1:E823 07 -  -  -      rlca        
  102 D1:E824 E6 0C -  -  _:  and a,%00001100
  103 D1:E826 -  -  -  -  
  104 D1:E826 -  -  -  -      ;Nametable/tilemap variant
  105 D1:E826 -  -  -  -      ;Sets DE to current location in nametable wrt B=Y, C=X
  106 D1:E826 -  -  -  -      ;HL=current nametable pointer
  107 D1:E826 E5 -  -  -      push hl
  108 D1:E827 ED 27 -  -          ld  hl,(hl)
  109 D1:E829 1E 20 -  -          ld  e,32
  110 D1:E82B 50 -  -  -          ld  d,b
  111 D1:E82C ED 5C -  -          mlt de
  112 D1:E82E 7B -  -  -          ld  a,e
  113 D1:E82F 81 -  -  -          add a,c
  114 D1:E830 5F -  -  -          ld  e,a
  115 D1:E831 19 -  -  -          add hl,de
  116 D1:E832 -  -  -  -          ;ex  de,hl
  117 D1:E832 E1 -  -  -      pop hl
  118 D1:E833 -  -  -  -  
  119 D1:E833 -  -  -  -      ;TODO: Find way to link stuff above. The task set forth is the following:
  120 D1:E833 -  -  -  -      ;Create the main tile rendering loop. We must track the following:
  121 D1:E833 -  -  -  -      ;   Screen pointer, nametable position, loop parameters.
  122 D1:E833 -  -  -  -      ;With these, we will:
  123 D1:E833 -  -  -  -      ;1. Get tileID from nametable position
  124 D1:E833 -  -  -  -      ;2. Get attribute data associated with that tile.
  125 D1:E833 -  -  -  -      ;3. Retrieve CHR_ROM data and
  126 D1:E833 -  -  -  -      ;4. Combine it to retrieve color data, then write it to screen buffer.
  127 D1:E833 -  -  -  -      ;
  128 D1:E833 -  -  -  -      ;Later on, insert a cacheing step between 2 and 3. to selectively
  129 D1:E833 -  -  -  -      ;modify step 4.
  130 D1:E833 -  -  -  -      ;
  131 D1:E833 -  -  -  -      ; Do in the inlining thing later.
  132 D1:E833 -  -  -  -      ;
  133 D1:E833 -  -  -  -  
  134 D1:E833 -  -  -  -  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 D1:E833 -  -  -  -  ;    ***   *** ***** *   *  ***  *          *** ***** *   * ***** *****
  136 D1:E833 -  -  -  -  ;   *   * *      *   *   * *   * *         *      *   *   * *     *    
  137 D1:E833 -  -  -  -  ;   ***** *      *   *   * ***** *          ***   *   *   * ***   ***  
  138 D1:E833 -  -  -  -  ;   *   * *      *   *   * *   * *             *  *   *   * *     *    
  139 D1:E833 -  -  -  -  ;   *   *  ***   *    ***  *   * *****      ***   *    ***  *     *    
  140 D1:E833 -  -  -  -  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 D1:E833 -  -  -  -  
  142 D1:E833 -  -  -  -  
  143 D1:E833 -  -  -  -  
  144 D1:E833 -  -  -  -  ;
  145 D1:E833 -  -  -  -  ppu_init:
  146 D1:E833 -  -  -  -      ; Reset palette RAM, PPU, and APU registers
  147 D1:E833 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
  148 D1:E838 ED 22 80 -      lea hl,ix-128
  149 D1:E83B ED 12 81 -      lea de,ix-127
  150 D1:E83E 01 7E 00 00     ld  bc,126
  151 D1:E842 36 00 -  -      ld  (hl),$00
  152 D1:E844 ED B0 -  -      ldir
  153 D1:E846 -  -  -  -      ; Bit pattern used in detecting even-odd frames
  154 D1:E846 3E 55 -  -      ld  a,WREG_CONST
  155 D1:E848 DD 77 F4 -      ld  (ix+PPU_W),a
  156 D1:E84B -  -  -  -      ; Copies converted 64 colors to hardware LCD palette RAM.
  157 D1:E84B -  -  -  -      ; The data is from https://www.nesdev.org/wiki/PPU_palettes
  158 D1:E84B -  -  -  -      ; The destination is the Primecell PL111 LCD controller, documented here:
  159 D1:E84B -  -  -  -      ; https://wikiti.brandonw.net/index.php?title=84PCE:Ports:4000
  160 D1:E84B 11 00 02 E3     ld  de,mpLcdPalette
  161 D1:E84F 21 1D EB D1     ld  hl,paletteData
  162 D1:E853 01 80 00 00     ld  bc,64*2
  163 D1:E857 ED B0 -  -      ldir
  164 D1:E859 -  -  -  -      ; Sets up the core's interrupt subsystem
  165 D1:E859 AF -  -  -      xor a,a
  166 D1:E85A 32 60 34 D0     ld  (int_table_len),a
  167 D1:E85E 11 6F E8 D1     ld  de,ppu_isr
  168 D1:E862 01 23 6D 00     ld  bc,27939
  169 D1:E866 CD 37 B8 D1     call int6502_insertISA  ;sets ix. ix before this unknown.
  170 D1:E86A DD 36 F1 02     ld  (ix+PPU_SUBCYCLE),2
  171 D1:E86E C9 -  -  -      ret
  172 D1:E86F -  -  -  -  
  173 D1:E86F -  -  -  -  
  174 D1:E86F -  -  -  -  
  175 D1:E86F -  -  -  -  ;Some bits of this is in "coreint.z80"
  176 D1:E86F -  -  -  -  ppu_isr:
  177 D1:E86F 3A 20 00 F0     ld  a,($F00020)
  178 D1:E873 E6 01 -  -      and a,%0000001
  179 D1:E875 C2 DE AA D1     jp  nz,endCurrentRun    ;stop execution when ON key is pressed
  180 D1:E879 -  -  -  -  
  181 D1:E879 DD 7E E0 -      ld  a,(ix+PPU_CTRL)
  182 D1:E87C E6 18 -  -      and a,%00011000     ;sprite and background. if zero, no rendering happens.
  183 D1:E87E -  -  -  -      ;jr  z,ppu_isr_nodraw
  184 D1:E87E -  -  -  -      ;perform the check that makes odd cycles one ppu cc shorter, but only if
  185 D1:E87E -  -  -  -      ;something is being rendered to the screen
  186 D1:E87E DD 7E F5 -      ld  a,(ix+PPU_FRAMECOUNT)
  187 D1:E881 0F -  -  -      rrca
  188 D1:E882 30 03 -  -      jr  nc,+_
  189 D1:E884 DD 35 F1 -      dec (ix+PPU_SUBCYCLE)
  190 D1:E887 -  -  -  -  _:  ;there... should be something else to do?
  191 D1:E887 -  -  -  -      ;call ppu_drawBGSprites
  192 D1:E887 FD E5 -  -      push iy
  193 D1:E889 CD D5 E8 D1         call ppu_drawFrame
  194 D1:E88D FD E1 -  -      pop iy
  195 D1:E88F -  -  -  -      ;call ppu_drawFGSprites
  196 D1:E88F -  -  -  -  ppu_isr_nodraw:
  197 D1:E88F DD 34 F5 -      inc (ix+PPU_FRAMECOUNT)
  198 D1:E892 01 23 6D 00     ld  bc,27939
  199 D1:E896 DD 7E F1 -      ld  a,(ix+PPU_SUBCYCLE)
  200 D1:E899 C6 02 -  -      add a,2     ;add the 2/3rds cycle
  201 D1:E89B FE 03 -  -      cp  a,3     ;but is it more than 3? (0,1,2)
  202 D1:E89D 38 03 -  -      jr  c,+_
  203 D1:E89F D6 03 -  -      sub a,3
  204 D1:E8A1 03 -  -  -      inc bc
  205 D1:E8A2 DD 77 F1 -  _:  ld  (ix+PPU_SUBCYCLE),a
  206 D1:E8A5 ED 23 00 -      lea hl,iy+0
  207 D1:E8A8 B7 -  -  -      or  a,a
  208 D1:E8A9 ED 42 -  -      sbc hl,bc
  209 D1:E8AB E5 -  -  -      push hl
  210 D1:E8AC FD E1 -  -      pop iy
  211 D1:E8AE 11 6F E8 D1     ld  de,ppu_isr
  212 D1:E8B2 CD DA B7 D1     call int6502_adjustTimings
  213 D1:E8B6 CD FA B7 D1     call int6502_pushISRAfterPop
  214 D1:E8BA DD CB E2 FE     set 7,(ix+PPU_STATUS)
  215 D1:E8BE 2A 4A 34 D0     ld  hl,(ppu_smc_gate)
  216 D1:E8C2 36 00 -  -      ld  (hl),$00        ;nop out ret so writes no longer ignored.
  217 D1:E8C4 -  -  -  -      ;
  218 D1:E8C4 -  -  -  -      ; TODO: Figure this one out:
  219 D1:E8C4 -  -  -  -      ; Do we need something to unset VBlank active flag at the end of
  220 D1:E8C4 -  -  -  -      ; VBlank if left unread?
  221 D1:E8C4 -  -  -  -      ;
  222 D1:E8C4 DD CB E0 7E     bit 7,(ix+PPU_CTRL)     ;VBlank NMI enable flag
  223 D1:E8C8 CA FE B8 D1     jp  z,i6502RetryFirstLoad
  224 D1:E8CC 3E FF -  -      ld  a,$FF
  225 D1:E8CE DD 77 1E -      ld  (ix+NMI_TRIGGERED),a
  226 D1:E8D1 C3 9D CF D1     jp  inst6502_brk
  227 D1:E8D5 -  -  -  -  
  228 D1:E8D5 -  -  -  -  
  229 D1:E8D5 -  -  -  -  
  230 D1:E8D5 -  -  -  -  
  231 D1:E8D5 -  -  -  -  
  232 D1:E8D5 -  -  -  -  
  233 D1:E8D5 -  -  -  -  ppu_drawFrame:
  234 D1:E8D5 -  -  -  -  
  235 D1:E8D5 -  -  -  -  ;backdrop color. Do not render the following if there are no
  236 D1:E8D5 -  -  -  -  ;sprites to hide in the background.
  237 D1:E8D5 2A 28 34 D0     ld  hl,(curScreenBuf)
  238 D1:E8D9 01 00 2C 01     ld  bc,320*240
  239 D1:E8DD 09 -  -  -      add hl,bc
  240 D1:E8DE ED 73 51 E9 
              D1 -  -  -      ld  (++_+1),sp
  241 D1:E8E3 F9 -  -  -      ld  sp,hl
  242 D1:E8E4 06 00 -  -      ld  b,0
  243 D1:E8E6 11 00 00 00     ld  de,0
  244 D1:E8EA D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -  _:  push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  245 D1:E8F4 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  246 D1:E8FE D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  247 D1:E908 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  248 D1:E912 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  249 D1:E91C D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  250 D1:E926 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  251 D1:E930 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  252 D1:E93A D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  253 D1:E944 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  254 D1:E94E 10 9A -  -      djnz -_
  255 D1:E950 31 00 00 00 _:  ld  sp,0
  256 D1:E954 -  -  -  -  ;The following is a framecounter. Mask out if needed.
  257 D1:E954 21 01 00 00     ld  hl,1
  258 D1:E958 22 F6 31 D0     ld  (xPos),hl   
  259 D1:E95C DD 7E F5 -      ld  a,(ix+PPU_FRAMECOUNT)
  260 D1:E95F CD 3F B3 D1     call printSmallNumPair
  261 D1:E963 3E 20 -  -      ld  a,' '
  262 D1:E965 CD 0F B3 D1     call printBigFont
  263 D1:E969 AF -  -  -      xor a,a
  264 D1:E96A ED 62 -  -      sbc hl,hl
  265 D1:E96C ED 5B 00 00 
              F2 -  -  -      ld  de,($F20000)
  266 D1:E971 7A -  -  -      ld  a,d
  267 D1:E972 B7 -  -  -      or  a,a     ;Framerate too large to bother calculating. Or far too small.
  268 D1:E973 28 30 -  -      jr  z,ppu_noframerate
  269 D1:E975 22 00 00 F2     ld  ($F20000),hl
  270 D1:E979 21 00 80 00     ld  hl,32768
  271 D1:E97D AF -  -  -      xor a,a
  272 D1:E97E 3C -  -  -  _:  inc a
  273 D1:E97F ED 52 -  -      sbc hl,de
  274 D1:E981 30 FB -  -      jr  nc,-_
  275 D1:E983 3D -  -  -      dec a
  276 D1:E984 B7 -  -  -      or  a,a ;clears necessary flags
  277 D1:E985 27 -  -  -      daa
  278 D1:E986 D5 -  -  -      push de
  279 D1:E987 CD 3F B3 D1         call printSmallNumPair
  280 D1:E98B 3E 2E -  -          ld  a,'.'
  281 D1:E98D CD 0F B3 D1         call printBigFont
  282 D1:E991 D1 -  -  -      pop de
  283 D1:E992 AF -  -  -      xor a,a
  284 D1:E993 5A -  -  -      ld  e,d
  285 D1:E994 57 -  -  -      ld  d,a
  286 D1:E995 21 00 32 00     ld  hl,32768/256*100
  287 D1:E999 3C -  -  -  _:  inc a
  288 D1:E99A ED 52 -  -      sbc hl,de
  289 D1:E99C 30 FB -  -      jr  nc,-_
  290 D1:E99E 3D -  -  -      dec a
  291 D1:E99F B7 -  -  -      or  a,a ;clears necessary flags
  292 D1:E9A0 27 -  -  -      daa
  293 D1:E9A1 CD 3F B3 D1     call printSmallNumPair
  294 D1:E9A5 -  -  -  -  ppu_noframerate:
  295 D1:E9A5 CD 05 B2 D1     call fastCopy
  296 D1:E9A9 C9 -  -  -      ret
  297 D1:E9AA -  -  -  -  
  298 D1:E9AA -  -  -  -      
  299 D1:E9AA -  -  -  -      
  300 D1:E9AA -  -  -  -  
  301 D1:E9AA -  -  -  -  
  302 D1:E9AA -  -  -  -  
  303 D1:E9AA -  -  -  -  
  304 D1:E9AA -  -  -  -  
  305 D1:E9AA -  -  -  -  
  306 D1:E9AA -  -  -  -  
  307 D1:E9AA -  -  -  -  
  308 D1:E9AA -  -  -  -  
  309 D1:E9AA -  -  -  -      ;set base rom addresses
  310 D1:E9AA 2A 46 34 D0     ld  hl,(chr_rom_base)
  311 D1:E9AE 01 00 10 00     ld  bc,$001000
  312 D1:E9B2 DD 7E E0 -      ld  a,(ix+PPU_CTRL)
  313 D1:E9B5 E5 -  -  -      push hl
  314 D1:E9B6 CB 67 -  -          bit 4,a     ;background pattern base offset
  315 D1:E9B8 28 01 -  -          jr  z,+_
  316 D1:E9BA 09 -  -  -          add hl,bc
  317 D1:E9BB 22 20 34 D0 _:      ld  (chr_rom_tiles),hl
  318 D1:E9BF E1 -  -  -      pop hl
  319 D1:E9C0 CB 6F -  -      bit 5,a     ;sprite pattern base offset
  320 D1:E9C2 28 01 -  -      jr  z,+_
  321 D1:E9C4 09 -  -  -      add hl,bc
  322 D1:E9C5 22 24 34 D0 _:  ld  (chr_rom_sprites),hl
  323 D1:E9C9 -  -  -  -      ;set coarse x,y scroll positions. B=Y, C=x
  324 D1:E9C9 DD 07 FC -      ld  bc,(ix+PPU_XSCROLL)
  325 D1:E9CC CB 20 -  -      sla b
  326 D1:E9CE CB 20 -  -      sla b
  327 D1:E9D0 CB 20 -  -      sla b
  328 D1:E9D2 CB 21 -  -      sla c
  329 D1:E9D4 CB 21 -  -      sla c
  330 D1:E9D6 CB 21 -  -      sla c
  331 D1:E9D8 -  -  -  -      ;set base nametable addresses
  332 D1:E9D8 21 00 34 D0     ld  hl,nametable00
  333 D1:E9DC DD 7E E0 -      ld  a,(ix+PPU_CTRL)
  334 D1:E9DF E6 03 -  -      and a,3
  335 D1:E9E1 87 -  -  -      add a,a
  336 D1:E9E2 87 -  -  -      add a,a
  337 D1:E9E3 6F -  -  -      ld  L,a
  338 D1:E9E4 DD 2F F6 -      ld  (ix+PPU_NAMETABLE_PTR),hl   ;yeah. let's cache this so we don't lose it
  339 D1:E9E7 -  -  -  -      ;In-place setting of nametable address wrt X,Y
  340 D1:E9E7 -  -  -  -      ;%------YY YYYXXXXX
  341 D1:E9E7 ED 17 -  -      ld  de,(hl)
  342 D1:E9E9 79 -  -  -      ld  a,c
  343 D1:E9EA 07 -  -  -      rlca
  344 D1:E9EB 07 -  -  -      rlca
  345 D1:E9EC 07 -  -  -      rlca
  346 D1:E9ED 5F -  -  -      ld  e,a
  347 D1:E9EE AA -  -  -      xor a,d
  348 D1:E9EF E6 03 -  -      and a,%00000011
  349 D1:E9F1 AA -  -  -      xor a,d
  350 D1:E9F2 7B -  -  -      ld  a,e
  351 D1:E9F3 A8 -  -  -      xor a,b
  352 D1:E9F4 E6 E0 -  -      and %11100000
  353 D1:E9F6 A8 -  -  -      xor a,b
  354 D1:E9F7 5F -  -  -      ld  e,a
  355 D1:E9F8 -  -  -  -      ;Fetch first attribute byte from address
  356 D1:E9F8 -  -  -  -      ;%------YY YYYXXXXX -> %------11 11YYYXXX
  357 D1:E9F8 D5 -  -  -      push de
  358 D1:E9F9 7A -  -  -          ld  a,d
  359 D1:E9FA 1F -  -  -          rra
  360 D1:E9FB CB 3B -  -          srl e
  361 D1:E9FD 1F -  -  -          rra
  362 D1:E9FE CB 3B -  -          srl e       ;YYYYYXXX
  363 D1:EA00 CB C2 -  -          set 0,d
  364 D1:EA02 CB CA -  -          set 1,d
  365 D1:EA04 7B -  -  -          ld  a,e
  366 D1:EA05 07 -  -  -          rlca
  367 D1:EA06 07 -  -  -          rlca
  368 D1:EA07 F6 C0 -  -          or  a,%11000000
  369 D1:EA09 AB -  -  -          xor a,e
  370 D1:EA0A E6 F8 -  -          and a,%11111000
  371 D1:EA0C AB -  -  -          xor a,e
  372 D1:EA0D 5F -  -  -          ld  e,a
  373 D1:EA0E 1A -  -  -          ld  a,(de)
  374 D1:EA0F D1 -  -  -      pop de
  375 D1:EA10 -  -  -  -      ;Selects attribute from A from B=Y, C=X in format %0000AA00
  376 D1:EA10 -  -  -  -      ;Let's instead use DE %------yy yYyxxxXx y: e6, x: e1
  377 D1:EA10 CB 73 -  -      bit 6,e
  378 D1:EA12 28 04 -  -      jr  z,+_
  379 D1:EA14 07 -  -  -      rlca    ;If not zero, shift upper nibble into lower nibble
  380 D1:EA15 07 -  -  -      rlca    ;for further selection.
  381 D1:EA16 07 -  -  -      rlca
  382 D1:EA17 07 -  -  -      rlca
  383 D1:EA18 CB 4B -  -  _:  bit 1,e
  384 D1:EA1A 20 02 -  -      jr  nz,+_   ;If not zero, upper 2 bits of lower nibble already in position
  385 D1:EA1C 07 -  -  -      rlca        ;Otherwise, move them into position
  386 D1:EA1D 07 -  -  -      rlca        
  387 D1:EA1E E6 0C -  -  _:  and a,%00001100
  388 D1:EA20 32 56 EA D1     ld  (ppu_mainTileLoop_attribute_write),a
  389 D1:EA24 -  -  -  -  
  390 D1:EA24 DD 36 F9 1E     ld  (ix+PPU_VCOUNT),30
  391 D1:EA28 FD 2A 28 34 
              D0 -  -  -      ld  iy,(curScreenBuf)
  392 D1:EA2D ED 33 20 -      lea iy,iy+32
  393 D1:EA30 -  -  -  -  ppu_verticalLoop:
  394 D1:EA30 DD 36 FA 20     ld  (ix+PPU_HCOUNT),32
  395 D1:EA34 -  -  -  -  ppu_horizontalLoop:
  396 D1:EA34 1A -  -  -      ld  a,(de)
  397 D1:EA35 E5 -  -  -      push hl
  398 D1:EA36 D5 -  -  -          push de
  399 D1:EA37 2A 20 34 D0             ld  hl,(chr_rom_tiles)
  400 D1:EA3B 4F -  -  -              ld  c,a
  401 D1:EA3C 06 10 -  -              ld  b,16
  402 D1:EA3E ED 4C -  -              mlt bc
  403 D1:EA40 09 -  -  -              add hl,bc
  404 D1:EA41 DD 36 FB 08             ld  (ix+PPU_TCOUNT),8
  405 D1:EA45 ED 13 00 -              lea de,iy+0
  406 D1:EA48 -  -  -  -  ppu_mainTileLoop:
  407 D1:EA48 7E -  -  -              ld  a,(hl)
  408 D1:EA49 01 08 00 00             ld  bc,8
  409 D1:EA4D 09 -  -  -              add hl,bc
  410 D1:EA4E 46 -  -  -              ld  b,(hl)
  411 D1:EA4F 4F -  -  -              ld  c,a
  412 D1:EA50 E5 -  -  -              push hl
  413 D1:EA51 21 00 32 D0                 ld  hl,vram_palette
  414 D1:EA55 -  -  -  -  ppu_mainTileLoop_attribute_write    .equ $+1
  415 D1:EA55 3E 00 -  -                  ld  a,0
  416 D1:EA57 -  -  -  -                  ;Attrib to LSB of VRAM_PALETTE, shift CHR_ROM data to LSB to
  417 D1:EA57 -  -  -  -                  ;form full address+offset. Copy from palette to buffer.
  418 D1:EA57 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;1/8 12b apiece
  419 D1:EA63 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;2/8
  420 D1:EA6F 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;3/8
  421 D1:EA7B 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;4/8
  422 D1:EA87 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;5/8
  423 D1:EA93 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;6/8
  424 D1:EA9F 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;7/8
  425 D1:EAAB 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;8/8 96b tot
  426 D1:EAB7 21 38 01 00                 ld  hl,320-8
  427 D1:EABB 19 -  -  -                  add hl,de
  428 D1:EABC EB -  -  -                  ex  de,hl
  429 D1:EABD E1 -  -  -              pop hl
  430 D1:EABE 01 F9 FF FF             ld  bc,-7
  431 D1:EAC2 09 -  -  -              add hl,bc
  432 D1:EAC3 DD 35 FB -              dec (ix+PPU_TCOUNT)
  433 D1:EAC6 20 80 -  -              jr  nz,ppu_mainTileLoop
  434 D1:EAC8 -  -  -  -              ;start wrapping up the horizontal loop
  435 D1:EAC8 D1 -  -  -          pop de
  436 D1:EAC9 E1 -  -  -      pop hl
  437 D1:EACA 7B -  -  -      ld  a,e
  438 D1:EACB 13 -  -  -      inc de
  439 D1:EACC AB -  -  -      xor a,e
  440 D1:EACD CB 6F -  -      bit 5,a     ;A carry in X would result in a change in bit 5
  441 D1:EACF 28 14 -  -      jr  z,+_    ;Which means there's no crossover if no sign change
  442 D1:EAD1 1B -  -  -      dec de      ;revert those changes in case they cascaded past E
  443 D1:EAD2 1C -  -  -      inc e
  444 D1:EAD3 E6 E0 -  -      and a,%11100000     ;The funny thing is that the XOR above...
  445 D1:EAD5 AB -  -  -      xor a,e             ;... is still valid for this masking technique.
  446 D1:EAD6 4F -  -  -      ld  c,a     ;And now let's squirrel this and...
  447 D1:EAD7 42 -  -  -      ld  b,d     ;...D for later merge magic
  448 D1:EAD8 7C -  -  -      ld  a,h
  449 D1:EAD9 EE 04 -  -      xor a,%00000100 ;flip to the next horizontal buffer...
  450 D1:EADB 67 -  -  -      ld  h,a
  451 D1:EADC ED 17 -  -      ld  de,(hl)
  452 D1:EADE 59 -  -  -      ld  e,c
  453 D1:EADF 78 -  -  -      ld  a,b
  454 D1:EAE0 AA -  -  -      xor d
  455 D1:EAE1 E6 03 -  -      and a,%00000011
  456 D1:EAE3 AA -  -  -      xor d
  457 D1:EAE4 57 -  -  -      ld  d,a         ;and map coords into a new nametable
  458 D1:EAE5 ED 33 08 -  _:  lea iy,iy+8     ;next position on the buffer.
  459 D1:EAE8 DD 35 FA -      dec (ix+PPU_HCOUNT)
  460 D1:EAEB C2 34 EA D1     jp  nz,ppu_horizontalLoop
  461 D1:EAEF -  -  -  -      ;the X buffer *will* have changed at some point and rolled around
  462 D1:EAEF -  -  -  -      ;so there's no need to deal with X. Still gotta do Y first...
  463 D1:EAEF EB -  -  -      ex  de,hl
  464 D1:EAF0 7C -  -  -      ld  a,h
  465 D1:EAF1 01 20 00 00     ld  bc,%00100000
  466 D1:EAF5 09 -  -  -      add hl,bc   ;%-----^yy yYyxxxXx
  467 D1:EAF6 EB -  -  -      ex  de,hl
  468 D1:EAF7 4B -  -  -      ld  c,e     ;coordinate storage.
  469 D1:EAF8 42 -  -  -      ld  b,d
  470 D1:EAF9 AA -  -  -      xor a,d     ;detect sign change in bit 2
  471 D1:EAFA CB 57 -  -      bit 2,a
  472 D1:EAFC 28 04 -  -      jr  z,+_
  473 D1:EAFE 7D -  -  -      ld  a,L
  474 D1:EAFF EE 08 -  -      xor a,%00001000 ;flip to the next vertical buffer...
  475 D1:EB01 6F -  -  -      ld  L,a
  476 D1:EB02 7D -  -  -  _:  ld  a,L
  477 D1:EB03 EE 04 -  -      xor a,%00000100 ;flip back the horizontal buffer that must've been flipped.
  478 D1:EB05 6F -  -  -      ld  L,a
  479 D1:EB06 ED 17 -  -      ld  de,(hl)
  480 D1:EB08 59 -  -  -      ld  e,c
  481 D1:EB09 78 -  -  -      ld  a,b
  482 D1:EB0A AA -  -  -      xor d
  483 D1:EB0B E6 03 -  -      and a,%00000011
  484 D1:EB0D AA -  -  -      xor d
  485 D1:EB0E 57 -  -  -      ld  d,a         ;and map coords into a new nametable
  486 D1:EB0F 01 00 09 00     ld  bc,(320*7)+(320-256)
  487 D1:EB13 FD 09 -  -      add iy,bc       ;move cursor pointer to the next row
  488 D1:EB15 DD 35 F9 -      dec (ix+PPU_VCOUNT)
  489 D1:EB18 C2 30 EA D1     jp  nz,ppu_verticalLoop
  490 D1:EB1C C9 -  -  -      ret
  491 D1:EB1D -  -  -  -  
  492 D1:EB1D -  -  -  -  ;TODO: Test changes to the PPU and link together something in the mapper
  493 D1:EB1D -  -  -  -  ;to perform controls. Also. Those freakin' interrupts. DO THEM.
  494 D1:EB1D -  -  -  -  ;Might also want to implement a drawlist of sorts since writes to the ports
  495 D1:EB1D -  -  -  -  ;ought to be timestamped. That way, we'll be able to tell what the hell is
  496 D1:EB1D -  -  -  -  ;being done mid-frame and then make adjustments to such things as
  497 D1:EB1D -  -  -  -  ;BG rendering mid-draw, if necessary. Or be able to detect such attempts as
  498 D1:EB1D -  -  -  -  ;I don't think I want to deal with that. Only deal with stuff that should
  499 D1:EB1D -  -  -  -  ;be occurring within the VBlank period.
  500 D1:EB1D -  -  -  -  
  501 D1:EB1D -  -  -  -  
  502 D1:EB1D -  -  -  -  
  503 D1:EB1D -  -  -  -  
  504 D1:EB1D -  -  -  -  
  505 D1:EB1D -  -  -  -  
  506 D1:EB1D -  -  -  -  
  507 D1:EB1D -  -  -  -  
  508 D1:EB1D -  -  -  -  
  509 D1:EB1D -  -  -  -  
  510 D1:EB1D -  -  -  -  
Listing for file "main.z80"
 1143 D1:EB1D -  -  -  -  #include "palette.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\palette.z80"
    1 D1:EB1D -  -  -  -  paletteData:
    2 D1:EB1D 8C B1 A0 BC 
              42 CC 06 CC 
              0A BC 0C A0 
              0C 80 6A 80 .dw $B18C, $BCA0, $CC42, $CC06, $BC0A, $A00C, $800C, $806A
    3 D1:EB2D C6 80 02 81 
              20 81 20 81 
              00 A1 00 80 
              00 80 00 80 .dw $80C6, $8102, $8120, $8120, $A100, $8000, $8000, $8000
    4 D1:EB3D B5 D6 82 E5 
              07 FD AD FC 
              73 E4 76 C0 
              B6 94 33 81 .dw $D6B5, $E582, $FD07, $FCAD, $E473, $C076, $94B6, $8133
    5 D1:EB4D AD 81 07 82 
              22 82 20 96 
              E0 C1 00 80 
              00 80 00 80 .dw $81AD, $8207, $8222, $9620, $C1E0, $8000, $8000, $8000
    6 D1:EB5D FF FF CC FE 
              51 FE F8 FD 
              BD FD BF E9 
              FF BD 7D 96 .dw $FFFF, $FECC, $FE51, $FDF8, $FDBD, $E9BF, $BDFF, $967D
    7 D1:EB6D F8 82 51 83 
              8C 97 88 BF 
              28 EB 29 A5 
              00 80 00 80 .dw $82F8, $8351, $978C, $BF88, $EB28, $A529, $8000, $8000
    8 D1:EB7D FF FF 97 FF 
              5A FF 3C FF 
              1E FF 1F F7 
              3F E7 5E D7 .dw $FFFF, $FF97, $FF5A, $FF3C, $FF1E, $F71F, $E73F, $D75E
    9 D1:EB8D 9C CB BA CB 
              D7 D7 D6 E7 
              B6 F7 F7 DE 
              00 80 00 80 .dw $CB9C, $CBBA, $D7D7, $E7D6, $F7B6, $DEF7, $8000, $8000
   10 D1:EB9D 0C A1 40 AC 
              02 BC 06 BC 
              0A B0 0C 98 
              0D 80 2A 80 .dw $A10C, $AC40, $BC02, $BC06, $B00A, $980C, $800D, $802A
   11 D1:EBAD 86 80 A2 80 
              C0 80 C0 80 
              80 90 00 80 
              00 80 00 80 .dw $8086, $80A2, $80C0, $80C0, $9080, $8000, $8000, $8000
   12 D1:EBBD 15 C2 02 D1 
              87 E4 4D E4 
              32 D4 55 B4 
              96 8C F3 80 .dw $C215, $D102, $E487, $E44D, $D432, $B455, $8C96, $80F3
   13 D1:EBCD 4E 81 88 81 
              A2 81 A0 85 
              40 AD 00 80 
              00 80 00 80 .dw $814E, $8188, $81A2, $85A0, $AD40, $8000, $8000, $8000
   14 D1:EBDD 3F E7 0C F6 
              B1 FD 78 FD 
              3D F9 5F D5 
              9F AD FD 89 .dw $E73F, $F60C, $FDB1, $FD78, $F93D, $D55F, $AD9F, $89FD
   15 D1:EBED 58 82 B2 82 
              CC 86 C9 AA 
              69 D2 C9 98 
              00 80 00 80 .dw $8258, $82B2, $86CC, $AAC9, $D269, $98C9, $8000, $8000
   16 D1:EBFD 3F E7 D8 EE 
              9A F6 7C F6 
              7F EE 7F E2 
              9F D2 BF C2 .dw $E73F, $EED8, $F69A, $F67C, $EE7F, $E27F, $D29F, $C2BF
   17 D1:EC0D FD BA 1A B7 
              18 BF 17 CF 
              F7 DE 57 C6 
              00 80 00 80 .dw $BAFD, $B71A, $BF18, $CF17, $DEF7, $C657, $8000, $8000
   18 D1:EC1D 68 99 80 A8 
              40 B8 03 B4 
              06 A4 08 8C 
              09 80 67 80 .dw $9968, $A880, $B840, $B403, $A406, $8C08, $8009, $8067
   19 D1:EC2D A4 80 00 81 
              20 81 20 81 
              E0 90 00 80 
              00 80 00 80 .dw $80A4, $8100, $8120, $8120, $90E0, $8000, $8000, $8000
   20 D1:EC3D 8F B6 60 C9 
              E3 DC 88 DC 
              4D C4 70 A4 
              B0 80 0E 81 .dw $B68F, $C960, $DCE3, $DC88, $C44D, $A470, $80B0, $810E
   21 D1:EC4D 89 81 E4 81 
              20 82 00 86 
              C0 A9 00 80 
              00 80 00 80 .dw $8189, $81E4, $8220, $8600, $A9C0, $8000, $8000, $8000
   22 D1:EC5D D8 DB A7 EE 
              2C FE B1 FD 
              96 E9 99 C5 
              D9 9D 57 82 .dw $DBD8, $EEA7, $FE2C, $FDB1, $E996, $C599, $9DD9, $8257
   23 D1:EC6D D2 82 2D 83 
              68 83 65 A3 
              04 CB 26 91 
              00 80 00 80 .dw $82D2, $832D, $8368, $A365, $CB04, $9126, $8000, $8000
   24 D1:EC7D D8 DB 51 E3 
              33 EB F5 EA 
              F7 DE F8 D2 
              19 C3 37 B3 .dw $DBD8, $E351, $EB33, $EAF5, $DEF7, $D2F8, $C319, $B337
   25 D1:EC8D 76 AB 93 AB 
              B1 B7 B0 C3 
              90 D3 B0 BA 
              00 80 00 80 .dw $AB76, $AB93, $B7B1, $C3B0, $D390, $BAB0, $8000, $8000
   26 D1:EC9D 08 99 40 A4 
              00 B0 03 B0 
              06 A4 09 8C 
              09 80 27 80 .dw $9908, $A440, $B000, $B003, $A406, $8C09, $8009, $8027
   27 D1:ECAD 64 80 A0 80 
              C0 80 C0 80 
              80 90 00 80 
              00 80 00 80 .dw $8064, $80A0, $80C0, $80C0, $9080, $8000, $8000, $8000
   28 D1:ECBD 10 B2 E0 C4 
              84 D4 49 D4 
              2D C4 30 A4 
              71 80 CE 80 .dw $B210, $C4E0, $D484, $D449, $C42D, $A430, $8071, $80CE
   29 D1:ECCD 2A 81 85 81 
              A1 81 80 81 
              40 A5 00 80 
              00 80 00 80 .dw $812A, $8185, $81A1, $8180, $A540, $8000, $8000, $8000
   30 D1:ECDD 39 D7 08 EA 
              AD F9 52 F9 
              36 E9 5A C5 
              9A 9D F7 81 .dw $D739, $EA08, $F9AD, $F952, $E936, $C55A, $9D9A, $81F7
   31 D1:ECED 53 82 AD 82 
              C9 82 A6 9E 
              65 C6 C6 90 
              00 80 00 80 .dw $8253, $82AD, $82C9, $9EA6, $C665, $90C6, $8000, $8000
   32 D1:ECFD 39 D7 B2 DE 
              94 E2 76 E2 
              58 DE 79 CE 
              99 BE B8 B2 .dw $D739, $DEB2, $E294, $E276, $DE58, $CE79, $BE99, $B2B8
   33 D1:ED0D D7 AA F4 AA 
              12 B3 11 BF 
              F1 CE 31 BA 
              00 80 00 80 .dw $AAD7, $AAF4, $B312, $BF11, $CEF1, $BA31, $8000, $8000
   34 D1:ED1D 29 B9 80 C0 
              21 D0 05 CC 
              08 C0 0A A4 
              09 88 27 80 .dw $B929, $C080, $D021, $CC05, $C008, $A40A, $8809, $8027
   35 D1:ED2D 63 80 A0 80 
              E0 80 E0 88 
              C0 A4 00 80 
              00 80 00 80 .dw $8063, $80A0, $80E0, $88E0, $A4C0, $8000, $8000, $8000
   36 D1:ED3D 31 E2 21 E9 
              C6 FC 6B FC 
              2F E8 32 C4 
              71 9C CE 80 .dw $E231, $E921, $FCC6, $FC6B, $E82F, $C432, $9C71, $80CE
   37 D1:ED4D 29 81 84 81 
              C0 81 C0 9D 
              80 C9 00 84 
              00 80 00 80 .dw $8129, $8184, $81C0, $9DC0, $C980, $8400, $8000, $8000
   38 D1:ED5D 5A FF 69 FE 
              EE FD 94 FD 
              59 FD 5B F1 
              9B C9 F8 A1 .dw $FF5A, $FE69, $FDEE, $FD94, $FD59, $F15B, $C99B, $A1F8
   39 D1:ED6D 52 8E AD 8E 
              E8 A6 E5 CA 
              A6 F6 E7 AC 
              00 80 00 80 .dw $8E52, $8EAD, $A6E8, $CAE5, $F6A6, $ACE7, $8000, $8000
   40 D1:ED7D 5A FF F3 FE 
              D5 FE 98 FE 
              99 FE 9B FE 
              9A F2 D9 E2 .dw $FF5A, $FEF3, $FED5, $FE98, $FE99, $FE9B, $F29A, $E2D9
   41 D1:ED8D F7 DA 15 DB 
              33 E7 32 F3 
              12 FF 52 EA 
              00 80 00 80 .dw $DAF7, $DB15, $E733, $F332, $FF12, $EA52, $8000, $8000
   42 D1:ED9D E9 A8 40 AC 
              01 BC 04 BC 
              08 B0 09 9C 
              09 80 07 80 .dw $A8E9, $AC40, $BC01, $BC04, $B008, $9C09, $8009, $8007
   43 D1:EDAD 43 80 80 80 
              A0 80 A0 80 
              80 94 00 80 
              00 80 00 80 .dw $8043, $8080, $80A0, $80A0, $9480, $8000, $8000, $8000
   44 D1:EDBD D1 C9 E1 D0 
              86 E8 2B E8 
              0F D4 11 B8 
              51 94 AE 80 .dw $C9D1, $D0E1, $E886, $E82B, $D40F, $B811, $9451, $80AE
   45 D1:EDCD 09 81 44 81 
              80 81 60 8D 
              40 AD 00 80 
              00 80 00 80 .dw $8109, $8144, $8180, $8D60, $AD40, $8000, $8000, $8000
   46 D1:EDDD FA EE E9 F9 
              8F FD 34 FD 
              18 FD 1B DD 
              5B B9 B8 91 .dw $EEFA, $F9E9, $FD8F, $FD34, $FD18, $DD1B, $B95B, $91B8
   47 D1:EDED 12 82 6D 82 
              89 92 86 B2 
              46 D6 A7 9C 
              00 80 00 80 .dw $8212, $826D, $9289, $B286, $D646, $9CA7, $8000, $8000
   48 D1:EDFD FA EE 93 F6 
              75 FE 58 FE 
              39 F6 3A EA 
              5A DA 79 CA .dw $EEFA, $F693, $FE75, $FE58, $F639, $EA3A, $DA5A, $CA79
   49 D1:EE0D 97 C2 B5 C2 
              D3 CA D2 D6 
              B2 E6 12 CE 
              00 80 00 80 .dw $C297, $C2B5, $CAD3, $D6D2, $E6B2, $CE12, $8000, $8000
   50 D1:EE1D 07 A5 60 AC 
              20 B8 02 B8 
              06 A8 08 94 
              08 80 26 80 .dw $A507, $AC60, $B820, $B802, $A806, $9408, $8008, $8026
   51 D1:EE2D 63 80 A0 80 
              C0 80 C0 80 
              A0 98 00 80 
              00 80 00 80 .dw $8063, $80A0, $80C0, $80C0, $98A0, $8000, $8000, $8000
   52 D1:EE3D 0E C2 20 D1 
              C3 E0 68 E0 
              2C C8 2F AC 
              6F 88 AC 80 .dw $C20E, $D120, $E0C3, $E068, $C82C, $AC2F, $886F, $80AC
   53 D1:EE4D 08 81 83 81 
              A0 81 A0 8D 
              60 B1 00 80 
              00 80 00 80 .dw $8108, $8183, $81A0, $8DA0, $B160, $8000, $8000, $8000
   54 D1:EE5D 36 EB 46 F6 
              CB FD 70 FD 
              35 F1 37 D1 
              77 AD D5 8D .dw $EB36, $F646, $FDCB, $FD70, $F135, $D137, $AD77, $8DD5
   55 D1:EE6D 30 82 AB 82 
              E6 92 C4 B2 
              84 D6 C5 98 
              00 80 00 80 .dw $8230, $82AB, $92E6, $B2C4, $D684, $98C5, $8000, $8000
   56 D1:EE7D 36 EB D0 EE 
              B2 F6 94 F6 
              76 EE 77 DE 
              97 D2 B6 C2 .dw $EB36, $EED0, $F6B2, $F694, $EE76, $DE77, $D297, $C2B6
   57 D1:EE8D D4 BA 12 BB 
              10 C7 0F D3 
              EF E2 4F CA 
              00 80 00 80 .dw $BAD4, $BB12, $C710, $D30F, $E2EF, $CA4F, $8000, $8000
   58 D1:EE9D E7 9C 40 A8 
              00 B4 03 B4 
              06 A8 08 90 
              08 80 06 80 .dw $9CE7, $A840, $B400, $B403, $A806, $9008, $8008, $8006
   59 D1:EEAD 43 80 80 80 
              A0 80 A0 80 
              80 90 00 80 
              00 80 00 80 .dw $8043, $8080, $80A0, $80A0, $9080, $8000, $8000, $8000
   60 D1:EEBD CE B9 E0 C8 
              83 D8 28 D8 
              0C C8 0F A8 
              4F 84 AC 80 .dw $B9CE, $C8E0, $D883, $D828, $C80C, $A80F, $844F, $80AC
   61 D1:EECD 08 81 43 81 
              80 81 60 85 
              40 A9 00 80 
              00 80 00 80 .dw $8108, $8143, $8180, $8560, $A940, $8000, $8000, $8000
   62 D1:EEDD F7 DE E7 ED 
              8C FD 31 FD 
              15 ED 18 CD 
              58 A5 B5 85 .dw $DEF7, $EDE7, $FD8C, $FD31, $ED15, $CD18, $A558, $85B5
   63 D1:EEED 11 82 6C 82 
              87 86 84 A6 
              44 CE A5 94 
              00 80 00 80 .dw $8211, $826C, $8687, $A684, $CE44, $94A5, $8000, $8000
   64 D1:EEFD F7 DE 91 E6 
              72 EE 55 EE 
              36 E6 37 D6 
              57 CA 76 BA .dw $DEF7, $E691, $EE72, $EE55, $E636, $D637, $CA57, $BA76
   65 D1:EF0D 95 B2 B2 B2 
              D1 BA CF CA 
              AF D6 10 C2 
              00 80 00 80 .dw $B295, $B2B2, $BAD1, $CACF, $D6AF, $C210, $8000, $8000
Listing for file "main.z80"
 1144 D1:EF1D -  -  -  -  
 1145 D1:EF1D -  -  -  -  .echo "Main program size: ",$-programStart
