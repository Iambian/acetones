    1 00:0000 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "main.z80"
    2 00:0000 -  -  -  -  .org userMem-2
    3 D1:A87F EF 7B -  -  .db $EF, $7B
    4 D1:A881 -  -  -  -  
    5 D1:A881 -  -  -  -  ;SPASM help msg
    6 D1:A881 -  -  -  -  ;-E = Assemble eZ80 code
    7 D1:A881 -  -  -  -  ;-T = Generate code listing
    8 D1:A881 -  -  -  -  ;-C = Code counter mode
    9 D1:A881 -  -  -  -  ;-L = Symbol table mode
   10 D1:A881 -  -  -  -  ;-S = Stats mode
   11 D1:A881 -  -  -  -  ;-O = Don't write to output file
   12 D1:A881 -  -  -  -  ;-I [directory] = Add include directory
   13 D1:A881 -  -  -  -  ;-A = Labels are cAse-sensitive
   14 D1:A881 -  -  -  -  ;-D<name>[=value] = Create a define 'name' [with 'value']
   15 D1:A881 -  -  -  -  ;-N = Don't use colors for messages
   16 D1:A881 -  -  -  -  ;-V <Expression> = Pipe expression directly into assembly
   17 D1:A881 -  -  -  -  ;-H = Print this help message
   18 D1:A881 -  -  -  -  
   19 D1:A881 -  -  -  -  
   20 D1:A881 -  -  -  -  
   21 D1:A881 -  -  -  -  
   22 D1:A881 -  -  -  -  programStart:
   23 D1:A881 F3 -  -  -      di
   24 D1:A882 DD 21 00 00 
              F0 -  -  -      ld  ix,$F00000
   25 D1:A887 DD CB 2C C6     set 0,(ix+$2C)      ;Enable ON latch
   26 D1:A88B DD 36 28 01     ld  (ix+$28),1      ;If latch was set, clear it.
   27 D1:A88F -  -  -  -  
   28 D1:A88F -  -  -  -      ;Continuous. Else it'd be possible for an NES ROM to tank the CPU
   29 D1:A88F -  -  -  -      ;performance by constantly polling the keyboard.
   30 D1:A88F 21 00 00 F5     ld  hl,mpKeyMode
   31 D1:A893 36 03 -  -      ld  (hl),3      
   32 D1:A895 ED 73 FC 31 
              D0 -  -  -      ld  (save_spl),sp
   33 D1:A89A ED 6E -  -      ld  a,MB
   34 D1:A89C 32 FF 31 D0     ld  (save_mbase),a
   35 D1:A8A0 3E D0 -  -      ld  a,$D0
   36 D1:A8A2 ED 6D -  -      ld  MB,a
   37 D1:A8A4 CD C5 B0 D1     call startGfx
   38 D1:A8A8 -  -  -  -  
   39 D1:A8A8 -  -  -  -  
   40 D1:A8A8 -  -  -  -  
   41 D1:A8A8 -  -  -  -  
   42 D1:A8A8 -  -  -  -  
   43 D1:A8A8 -  -  -  -  
   44 D1:A8A8 -  -  -  -  
   45 D1:A8A8 -  -  -  -  
   46 D1:A8A8 -  -  -  -  
   47 D1:A8A8 -  -  -  -  
   48 D1:A8A8 -  -  -  -  
   49 D1:A8A8 -  -  -  -      ;
   50 D1:A8A8 -  -  -  -      ; todo; write test 6502 program, map it into rom.
   51 D1:A8A8 -  -  -  -      ; map virtual screen device into ram too. 32x30 screen ascii display
   52 D1:A8A8 -  -  -  -      ; is probably looking nice right about now.
   53 D1:A8A8 -  -  -  -      ; Could probably map it into PPU space since we're not actually doing
   54 D1:A8A8 -  -  -  -      ; anything about that until long after we're done testing core integrity
   55 D1:A8A8 -  -  -  -      ; You'll probably want to create a mockup vector table then do some equate
   56 D1:A8A8 -  -  -  -      ; magic to offset it and map it to $FFXX such that the three vectors will
   57 D1:A8A8 -  -  -  -      ; magically line up with $FFFA-$FFFF. NMI, RES, and IRQ. In that order.
   58 D1:A8A8 -  -  -  -      ; The rest of the page won't need to matter. It could literally be the
   59 D1:A8A8 -  -  -  -      ; surrounding eZ80 data/code. Just... don't allow writes to it.
   60 D1:A8A8 -  -  -  -      ;
   61 D1:A8A8 -  -  -  -  
   62 D1:A8A8 21 00 00 D4     ld  hl,screenBuf1
   63 D1:A8AC 11 01 00 D4     ld  de,screenBuf1+1
   64 D1:A8B0 01 FF 57 02     ld  bc,(2*240*320)-1
   65 D1:A8B4 36 00 -  -      ld  (hl),$00
   66 D1:A8B6 ED B0 -  -      ldir
   67 D1:A8B8 -  -  -  -  
   68 D1:A8B8 -  -  -  -      ;Makes sure all non-ROM areas have a mapping
   69 D1:A8B8 21 00 33 D0     ld  hl,scrap_mapping
   70 D1:A8BC 01 01 80 00     ld  bc,$008001
   71 D1:A8C0 1E 00 -  -      ld  e,0
   72 D1:A8C2 CD 7D B7 D1     call i6502_map_pages
   73 D1:A8C6 -  -  -  -  
   74 D1:A8C6 -  -  -  -  
   75 D1:A8C6 -  -  -  -  
   76 D1:A8C6 -  -  -  -      ;load reset vectors
   77 D1:A8C6 21 D1 A8 D1     ld  hl,testVectors
   78 D1:A8CA 01 01 01 00     ld  bc,$000101
   79 D1:A8CE 1E FF -  -      ld  e,$FF
   80 D1:A8D0 CD 7D B7 D1     call i6502_map_pages
   81 D1:A8D4 -  -  -  -      ;load program ROM to lowmem
   82 D1:A8D4 21 D1 A9 D1     ld  hl,testCode
   83 D1:A8D8 01 08 20 00     ld  bc,$002008
   84 D1:A8DC 1E 80 -  -      ld  e,$80
   85 D1:A8DE CD 7D B7 D1     call i6502_map_pages
   86 D1:A8E2 -  -  -  -      ;map nametable to writeable address space. Write routine to mirror this
   87 D1:A8E2 -  -  -  -      ;memory to screen.
   88 D1:A8E2 21 00 58 D0     ld  hl,NAMETABLE1
   89 D1:A8E6 01 04 20 00     ld  bc,$002004
   90 D1:A8EA 1E 40 -  -      ld  e,$40
   91 D1:A8EC CD 7D B7 D1     call i6502_map_pages
   92 D1:A8F0 -  -  -  -      ;Default mappings have been mapped. Let's search for and load a ROM file
   93 D1:A8F0 -  -  -  -      ;to acquire additional mappings. And maybe load in something that'll run.
   94 D1:A8F0 CD 18 B1 D1     call clearTextBuf
   95 D1:A8F4 3E 01 -  -      ld  a,1
   96 D1:A8F6 CD 65 B1 D1     call setLineStart
   97 D1:A8FA CD 6E B1 D1     call setCurLine
   98 D1:A8FE 21 2A AA D1     ld  hl,text001
   99 D1:A902 CD 90 B1 D1     call printString
  100 D1:A906 FD 21 98 AA 
              D1 -  -  -      ld  iy,firstFileHeader
  101 D1:A90B 01 00 00 00     ld  bc,0
  102 D1:A90F FD 4E FF -      ld  c,(iy-1)
  103 D1:A912 CD 13 B0 D1     call vatTraverse
  104 D1:A916 DA B5 AA D1     jp  c,err_noContainersFound
  105 D1:A91A D5 -  -  -      push de
  106 D1:A91B 21 41 AA D1         ld  hl,text003
  107 D1:A91F CD 90 B1 D1         call printString
  108 D1:A923 DD 46 FA -          ld  b,(ix-6)
  109 D1:A926 ED 22 F9 -          lea hl,ix-7
  110 D1:A929 7E -  -  -  _:      ld  a,(hl)
  111 D1:A92A 2B -  -  -          dec hl
  112 D1:A92B E5 -  -  -          push hl
  113 D1:A92C C5 -  -  -              push bc
  114 D1:A92D CD A6 B1 D1                 call PrintBigFont
  115 D1:A931 C1 -  -  -              pop bc
  116 D1:A932 E1 -  -  -          pop hl
  117 D1:A933 10 F4 -  -          djnz -_
  118 D1:A935 CD 79 B1 D1         call newLine
  119 D1:A939 D1 -  -  -      pop de
  120 D1:A93A CD 0F AC D1     call loadROMFile
  121 D1:A93E -  -  -  -  
  122 D1:A93E 21 4E AA D1     ld  hl,text004
  123 D1:A942 CD 90 B1 D1     call printString
  124 D1:A946 -  -  -  -  
  125 D1:A946 -  -  -  -      ;load perf timers
  126 D1:A946 -  -  -  -  
  127 D1:A946 DD 21 00 00 
              F2 -  -  -      ld  ix,$F20000
  128 D1:A94B DD 27 30 -      ld  hl,(ix+$30)
  129 D1:A94E CB 85 -  -      res 0,L ;turn off timer 0
  130 D1:A950 CB CD -  -      set 1,L ;timer 0 uses 32KHz clock
  131 D1:A952 CB 95 -  -      res 2,L ;disables timer 0 interrupt generator
  132 D1:A954 CB CC -  -      set 1,H ;timer 0 counts upward
  133 D1:A956 DD 2F 30 -      ld  (ix+$30),hl
  134 D1:A959 -  -  -  -      
  135 D1:A959 AF -  -  -      xor a,a
  136 D1:A95A ED 62 -  -      sbc hl,hl
  137 D1:A95C DD 2F 00 -      ld  (ix+0),hl
  138 D1:A95F DD 77 03 -      ld  (ix+3),a
  139 D1:A962 -  -  -  -  
  140 D1:A962 -  -  -  -      ;Initialize all (additional) state machines,
  141 D1:A962 -  -  -  -      ;then initialize/start the emulation core
  142 D1:A962 -  -  -  -  
  143 D1:A962 CD AB B5 D1     call int6502_init
  144 D1:A966 CD 0A E6 D1     call ppu_init
  145 D1:A96A CD 70 B6 D1     call i6502Init
  146 D1:A96E -  -  -  -  
  147 D1:A96E -  -  -  -      ;Performance timer disable and read.
  148 D1:A96E -  -  -  -  
  149 D1:A96E DD 21 00 00 
              F2 -  -  -      ld  ix,$F20000
  150 D1:A973 DD 7E 30 -      ld  a,(ix+$30)
  151 D1:A976 CB 87 -  -      res 0,a ;turn off timer 0
  152 D1:A978 CB CF -  -      set 1,a ;timer 0 uses 32768Hz clock
  153 D1:A97A CB 97 -  -      res 2,a ;disables timer 0 interrupt generator
  154 D1:A97C DD 77 30 -      ld  (ix+$30),a
  155 D1:A97F -  -  -  -      ;
  156 D1:A97F 2A 00 00 F2     ld  hl,($F20000)
  157 D1:A983 -  -  -  -  
  158 D1:A983 -  -  -  -  endCurrentRun:
  159 D1:A983 CD 9A E2 D1     call dbg_prepNextLine
  160 D1:A987 CD 79 B1 D1     call newLine
  161 D1:A98B 21 70 AA D1     ld  hl,text005
  162 D1:A98F CD 90 B1 D1     call printString
  163 D1:A993 -  -  -  -  
  164 D1:A993 -  -  -  -      ;call printTextBuf
  165 D1:A993 CD 9C B0 D1     call fastCopy
  166 D1:A997 -  -  -  -  
  167 D1:A997 DD 21 00 00 
              F0 -  -  -  _:  ld  ix,$F00000
  168 D1:A99C DD 36 28 01     ld  (ix+$28),1      ;If latch was set, clear it.
  169 D1:A9A0 DD 7E 20 -      ld  a,(ix+$20)      ;Check state of latch.
  170 D1:A9A3 E6 01 -  -      and a,%00000001
  171 D1:A9A5 C2 97 A9 D1     jp  nz,-_           ;wait until ON key is released.
  172 D1:A9A9 DD 21 00 00 
              F0 -  -  -      ld  ix,$F00000
  173 D1:A9AE DD CB 2C 86     res 0,(ix+$2C)      ;Disable ON latch
  174 D1:A9B2 DD 36 28 01     ld  (ix+$28),1      ;If latch was set, clear it.
  175 D1:A9B6 -  -  -  -  
  176 D1:A9B6 -  -  -  -  ;    nop
  177 D1:A9B6 -  -  -  -  ;    call waituntilnewkeypress
  178 D1:A9B6 -  -  -  -  ;    call waituntilkeyrelease
  179 D1:A9B6 -  -  -  -  
  180 D1:A9B6 -  -  -  -      ;
  181 D1:A9B6 -  -  -  -      ;
  182 D1:A9B6 -  -  -  -      ;
  183 D1:A9B6 -  -  -  -  programExit:
  184 D1:A9B6 CD B7 B0 D1     call stopGfx
  185 D1:A9BA ED 7B FC 31 
              D0 -  -  -      ld  sp,(save_spl)
  186 D1:A9BF 3A FF 31 D0     ld  a,(save_mbase)
  187 D1:A9C3 ED 6D -  -      ld  MB,a
  188 D1:A9C5 FD 21 80 00 
              D0 -  -  -      ld  iy,flags
  189 D1:A9CA C9 -  -  -      ret
  190 D1:A9CB -  -  -  -  
  191 D1:A9CB -  -  -  -  ;NMI, RES, and IRQ. In that order.
  192 D1:A9CB -  -  -  -  testVectors .equ $-(256-6)
  193 D1:A9CB 00 80 -  -  .dw $8000
  194 D1:A9CD 00 80 -  -  .dw $8000
  195 D1:A9CF 00 80 -  -  .dw $8000
  196 D1:A9D1 -  -  -  -  testCode:
  197 D1:A9D1 A9 00 AA A8 .db $A9,$00,$AA,$A8
  198 D1:A9D5 BD 14 80 -  .db $BD,$14,$80
  199 D1:A9D8 C9 00 -  -  .db $C9,$00
  200 D1:A9DA F0 08 -  -  .db $F0,$08
  201 D1:A9DC 99 21 40 -  .db $99,$21,$40
  202 D1:A9DF E8 C8 -  -  .db $E8,$C8
  203 D1:A9E1 -  -  -  -  ;.db $12
  204 D1:A9E1 4C 04 80 02 .db $4C,$04,$80,$02
  205 D1:A9E5 48 65 6C 6C 
              6F 2C 20 57 
              6F -  -  -  .db $48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F
  206 D1:A9EE 72 6C 64 21 
              00 -  -  -  .db $72,$6C,$64,$21,$00
  207 D1:A9F3 -  -  -  -  
  208 D1:A9F3 -  -  -  -  
  209 D1:A9F3 A9 00 AA A8 
              BD 11 80 C9 
              00 F0 05 99 
              21 40 D0 -  .db $A9,$00,$AA,$A8,$BD,$11,$80,$C9,$00,$F0,$05,$99,$21,$40,$D0
  210 D1:AA02 F4 02 48 65 
              6C 6C 6F 2C 
              20 57 6F 72 
              6C 64 21 00 .db $F4,$02,$48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F,$72,$6C,$64,$21,$00
  211 D1:AA12 02 -  -  -  .db $02     ;JAM. Emulator terminates on unsupported instructions or JAMs.
  212 D1:AA13 -  -  -  -  
  213 D1:AA13 -  -  -  -  helloWorld:
  214 D1:AA13 48 65 6C 6C 
              6F 2C 20 57 
              6F 72 6C 64 
              21 00 -  -  .db "Hello, World!",0
  215 D1:AA21 -  -  -  -  
  216 D1:AA21 -  -  -  -  timings_file:
  217 D1:AA21 15 74 69 6D 
              69 6E 67 73 
              00 -  -  -  .db AppVarObj,"timings",0
  218 D1:AA2A -  -  -  -  
  219 D1:AA2A -  -  -  -  text001:
  220 D1:AA2A 4C 6F 6F 6B 
              69 6E 67 20 
              75 70 20 6E 
              65 73 74 65 
              73 74 2E 2E 
              2E 0A 00 -  .db "Looking up nestest...\n",0
  221 D1:AA41 -  -  -  -  text003:
  222 D1:AA41 46 69 6C 65 
              20 66 6F 75 
              6E 64 3A 20 
              00 -  -  -  .db "File found: ",0
  223 D1:AA4E -  -  -  -  text004:
  224 D1:AA4E 52 4F 4D 46 
              69 6C 65 20 
              6C 6F 61 64 
              65 64 20 61 
              6E 64 20 72 
              65 61 64 79 
              20 74 6F 20 
              72 75 6E 2E 
              0A 00 -  -  .db "ROMFile loaded and ready to run.\n",0
  225 D1:AA70 -  -  -  -  text005:
  226 D1:AA70 -  -  -  -  ;    0123456789012345678901234567890123456789
  227 D1:AA70 43 50 55 20 
              45 78 65 63 
              75 74 69 6F 
              6E 20 48 61 
              6C 74 65 64 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 00 -  .db "CPU Execution Halted                  ",0
  228 D1:AA97 -  -  -  -  text006:
  229 D1:AA97 -  -  -  -  
  230 D1:AA97 -  -  -  -  
  231 D1:AA97 07 -  -  -  .db 7
  232 D1:AA98 -  -  -  -  firstFileHeader:
  233 D1:AA98 43 45 4E 52 
              4F 4D 00 -  .db "CENROM",0
  234 D1:AA9F -  -  -  -  
  235 D1:AA9F -  -  -  -  err_:
  236 D1:AA9F -  -  -  -  
  237 D1:AA9F -  -  -  -  err_err:
  238 D1:AA9F E1 -  -  -      pop hl
  239 D1:AAA0 CD 90 B1 D1     call printString
  240 D1:AAA4 -  -  -  -  err_err_quit:
  241 D1:AAA4 CD 9C B0 D1     call fastCopy
  242 D1:AAA8 00 -  -  -      nop
  243 D1:AAA9 CD 90 B0 D1     call waituntilnewkeypress
  244 D1:AAAD CD 88 B0 D1     call waituntilkeyrelease
  245 D1:AAB1 C3 B6 A9 D1     jp programExit
  246 D1:AAB5 -  -  -  -  
  247 D1:AAB5 -  -  -  -  err_noContainersFound:
  248 D1:AAB5 CD 9F AA D1     call err_err
  249 D1:AAB9 -  -  -  -      ;0123456789012345678901234567890123456789
  250 D1:AAB9 54 72 61 76 
              65 72 73 65 
              20 66 6F 75 
              6E 64 20 6E 
              6F 20 63 61 
              6E 64 69 64 
              61 74 65 20 
              52 4F 4D 53 
              2E 0A 00 -  .db "Traverse found no candidate ROMS.\n",0
  251 D1:AADC -  -  -  -  
  252 D1:AADC -  -  -  -  err_missingFiles:
  253 D1:AADC F5 -  -  -      push af
  254 D1:AADD 21 EE AA D1         ld  hl,err_missingFiles_str
  255 D1:AAE1 CD 90 B1 D1         call printString
  256 D1:AAE5 F1 -  -  -      pop af
  257 D1:AAE6 CD D6 B1 D1     call printSmallNumPair
  258 D1:AAEA C3 A4 AA D1     jp err_err_quit
  259 D1:AAEE -  -  -  -  err_missingFiles_str:
  260 D1:AAEE 4E 75 6D 62 
              65 72 20 6F 
              66 20 66 69 
              6C 65 73 20 
              6D 69 73 73 
              69 6E 67 3A 
              20 00 -  -  .db "Number of files missing: ",0
  261 D1:AB08 -  -  -  -  
  262 D1:AB08 -  -  -  -  err_tooManyFiles:
  263 D1:AB08 CD 9F AA D1     call err_err
  264 D1:AB0C -  -  -  -      ;0123456789012345678901234567890123456789
  265 D1:AB0C 4D 61 78 20 
              66 69 6C 65 
              20 63 6F 75 
              6E 74 20 70 
              65 72 20 52 
              4F 4D 20 69 
              6D 61 67 65 
              20 65 78 63 
              65 65 64 65 
              64 2E 00 -  .db "Max file count per ROM image exceeded.",0
  266 D1:AB33 -  -  -  -  
  267 D1:AB33 -  -  -  -  err_PRGROMTooLarge:
  268 D1:AB33 CD 9F AA D1     call err_err
  269 D1:AB37 4D 61 78 69 
              6D 75 6D 20 
              73 75 70 70 
              6F 72 74 65 
              64 20 50 52 
              47 5F 52 4F 
              4D 20 65 78 
              63 65 65 64 
              65 64 2E 00 .db "Maximum supported PRG_ROM exceeded.",0
  270 D1:AB5B -  -  -  -  err_CHRROMTooLarge:
  271 D1:AB5B CD 9F AA D1     call err_err
  272 D1:AB5F 4D 61 78 69 
              6D 75 6D 20 
              73 75 70 70 
              6F 72 74 65 
              64 20 43 48 
              52 5F 52 4F 
              4D 20 65 78 
              63 65 65 64 
              65 64 2E 00 .db "Maximum supported CHR_ROM exceeded.",0
  273 D1:AB83 -  -  -  -  
  274 D1:AB83 -  -  -  -  err_missingROMDetected:
  275 D1:AB83 CD 9F AA D1     call err_err
  276 D1:AB87 46 69 6C 65 
              20 74 6F 6F 
              20 73 6D 61 
              6C 6C 20 74 
              6F 20 68 6F 
              6C 64 20 64 
              65 63 6C 61 
              72 65 64 20 
              50 52 47 2B 
              43 48 52 00 .db "File too small to hold declared PRG+CHR",0
  277 D1:ABAF -  -  -  -  
  278 D1:ABAF -  -  -  -  err_ROMHeaderDamaged:
  279 D1:ABAF CD 9F AA D1     call err_err
  280 D1:ABB3 69 4E 45 53 
              20 52 4F 4D 
              20 68 65 61 
              64 65 72 20 
              64 61 6D 61 
              67 65 64 2E 
              00 -  -  -  .db "iNES ROM header damaged.",0
  281 D1:ABCC -  -  -  -  
  282 D1:ABCC -  -  -  -  err_MapperOutOfRange:
  283 D1:ABCC CD 9F AA D1     call err_err
  284 D1:ABD0 55 6E 73 75 
              70 70 6F 72 
              74 65 64 20 
              6D 61 70 70 
              65 72 20 64 
              65 74 65 63 
              74 65 64 2E 
              00 -  -  -  .db "Unsupported mapper detected.",0
  285 D1:ABED -  -  -  -  
  286 D1:ABED -  -  -  -  err_CHRROMNotFound:
  287 D1:ABED CD 9F AA D1     call err_err
  288 D1:ABF1 43 48 52 5F 
              52 4F 4D 20 
              6E 6F 74 20 
              66 6F 75 6E 
              64 20 69 6E 
              73 69 64 65 
              20 66 69 6C 
              65 00 -  -  .db "CHR_ROM not found inside file",0
  289 D1:AC0F -  -  -  -  
  290 D1:AC0F -  -  -  -  
  291 D1:AC0F -  -  -  -  ;Input: DE = Address of first file after the container header signature
  292 D1:AC0F -  -  -  -  ;Outputs: ROM vectors recorded and ready to map
  293 D1:AC0F -  -  -  -  ;Destroys: All registers.
  294 D1:AC0F -  -  -  -  loadROMFile:
  295 D1:AC0F EB -  -  -      ex  de,hl
  296 D1:AC10 AF -  -  -      xor a,a
  297 D1:AC11 32 33 34 D0     ld  (missing_files),a
  298 D1:AC15 BE -  -  -  _:  cp  (hl)    ;
  299 D1:AC16 23 -  -  -      inc hl      ;
  300 D1:AC17 20 FC -  -      jr  nz,-_   ;skips past zero-terminated string containing full ROM name
  301 D1:AC19 22 30 34 D0     ld  (basefile_sig),hl
  302 D1:AC1D 01 10 00 00     ld  bc,SIZEOF_INTEGRITY_HASH
  303 D1:AC21 09 -  -  -      add hl,bc
  304 D1:AC22 7E -  -  -      ld  a,(hl)
  305 D1:AC23 FE 01 -  -      cp  a,MAXNUMFILES
  306 D1:AC25 D2 08 AB D1     jp  nc,err_tooManyFiles
  307 D1:AC29 32 2F 34 D0     ld  (inputNumFiles),a
  308 D1:AC2D 47 -  -  -      ld  b,a
  309 D1:AC2E -  -  -  -  ;    ld  c,SIZEOF_INTEGRITY_HASH     ;c already set to this value from earlier.
  310 D1:AC2E ED 4C -  -      mlt bc
  311 D1:AC30 23 -  -  -      inc hl
  312 D1:AC31 E5 -  -  -      push hl
  313 D1:AC32 09 -  -  -          add hl,bc
  314 D1:AC33 FD 21 50 34 
              D0 -  -  -          ld  iy,FILETABLE
  315 D1:AC38 4E -  -  -          ld  c,(hl)
  316 D1:AC39 23 -  -  -          inc hl
  317 D1:AC3A 46 -  -  -          ld  b,(hl)
  318 D1:AC3B 23 -  -  -          inc hl
  319 D1:AC3C 52 FD 0F 00         ld.s (iy+FILE_SIZE_OFFSET),bc
  320 D1:AC40 FD 2F 02 -          ld  (iy+FILE_ADR_OFFSET),hl
  321 D1:AC43 E1 -  -  -      pop hl
  322 D1:AC44 3C -  -  -      inc a
  323 D1:AC45 3D -  -  -      dec a
  324 D1:AC46 28 47 -  -      jr  z,loadROMFile_singleFileLoad
  325 D1:AC48 -  -  -  -      ;If more than one file, fill FILETABLE.
  326 D1:AC48 -  -  -  -      ;NOTE: For now, this machinery is disabled. Only a single file is allowed.
  327 D1:AC48 ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  328 D1:AC4B 47 -  -  -      ld  b,a
  329 D1:AC4C -  -  -  -  loadROMFile_multiFileLoadLoop:
  330 D1:AC4C C5 -  -  -      push bc
  331 D1:AC4D FD 2F 05 -          ld  (iy+FILE_SIG_ADR_OFFSET),hl
  332 D1:AC50 01 10 00 00         ld  bc,16
  333 D1:AC54 11 03 B0 D1         ld  de,loadROMFile_tempSigHash
  334 D1:AC58 ED B0 -  -          ldir
  335 D1:AC5A E5 -  -  -          push hl
  336 D1:AC5B FD E5 -  -              push iy
  337 D1:AC5D 01 17 00 00                 ld  bc,23
  338 D1:AC61 FD 21 FC AF 
              D1 -  -  -                  ld  iy,loadROMFile_tempSig
  339 D1:AC66 CD 13 B0 D1                 call vatTraverse    ;returns DE @ datasection size if found
  340 D1:AC6A 30 05 -  -                  jr  nc,+_
  341 D1:AC6C 21 33 34 D0                 ld  hl,missing_files
  342 D1:AC70 34 -  -  -                  inc (hl)
  343 D1:AC71 FD E1 -  -  _:          pop iy
  344 D1:AC73 EB -  -  -              ex  de,hl
  345 D1:AC74 5E -  -  -              ld  e,(hl)
  346 D1:AC75 23 -  -  -              inc hl
  347 D1:AC76 56 -  -  -              ld  d,(hl)
  348 D1:AC77 23 -  -  -              inc hl
  349 D1:AC78 52 FD 1F 00             ld.s (iy+FILE_SIZE_OFFSET),de
  350 D1:AC7C FD 2F 02 -              ld  (iy+FILE_ADR_OFFSET),hl
  351 D1:AC7F E1 -  -  -          pop hl
  352 D1:AC80 C1 -  -  -      pop bc
  353 D1:AC81 ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  354 D1:AC84 10 C6 -  -      djnz loadROMFile_multiFileLoadLoop
  355 D1:AC86 3A 33 34 D0     ld  a,(missing_files)
  356 D1:AC8A B7 -  -  -      or  a,a
  357 D1:AC8B C2 DC AA D1     jp  nz,err_missingFiles
  358 D1:AC8F -  -  -  -  loadROMFile_singleFileLoad:
  359 D1:AC8F -  -  -  -      ;Compute size of ROM by summing filesizes, less INES header
  360 D1:AC8F 3A 2F 34 D0     ld  a,(inputNumFiles)
  361 D1:AC93 3C -  -  -      inc a
  362 D1:AC94 47 -  -  -      ld  b,a
  363 D1:AC95 21 00 00 00     ld  hl,0
  364 D1:AC99 DD 21 50 34 
              D0 -  -  -      ld  ix,FILETABLE
  365 D1:AC9E 52 DD 17 00 _:  ld.s de,(ix+FILE_SIZE_OFFSET)
  366 D1:ACA2 19 -  -  -      add hl,de
  367 D1:ACA3 ED 32 08 -      lea ix,ix+FILETABLE_STRIDE
  368 D1:ACA6 10 F6 -  -      djnz -_
  369 D1:ACA8 01 F0 FF FF     ld  bc,-16
  370 D1:ACAC 09 -  -  -      add hl,bc   ;subtract INES header
  371 D1:ACAD 22 34 34 D0     ld  (total_rom_size),hl
  372 D1:ACB1 -  -  -  -      ;Verify that the file actually contains an INES header.
  373 D1:ACB1 -  -  -  -      ;TODO: Do this at an earlier stage. Such as file selection.
  374 D1:ACB1 DD 2A 52 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  375 D1:ACB6 DD 27 00 -      ld  hl,(ix+0)
  376 D1:ACB9 11 4E 45 53     ld  de,$53454E         ;4E 45 53 == "NES"
  377 D1:ACBD B7 -  -  -      or  a,a
  378 D1:ACBE ED 52 -  -      sbc hl,de   ;Note: add does not affect zero flag. Can't test this via -DE
  379 D1:ACC0 C2 AF AB D1 _:  jp  nz,err_ROMHeaderDamaged
  380 D1:ACC4 DD 7E 03 -      ld  a,(ix+3)
  381 D1:ACC7 FE 1A -  -      cp  a,$1A
  382 D1:ACC9 20 F5 -  -      jr  nz,-_   ;19
  383 D1:ACCB -  -  -  -      ;Compute ROM size by reading INES header. This should be equ or lt above.
  384 D1:ACCB -  -  -  -      ;Note: The below line is optimized from...
  385 D1:ACCB DD 2A 52 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  386 D1:ACD0 -  -  -  -      ;... these lines. But the intent might not be perfectly clear. We'll keep
  387 D1:ACD0 -  -  -  -      ;these here just in case there's ever a question about it.
  388 D1:ACD0 -  -  -  -  ;    ld  ix,FILETABLE
  389 D1:ACD0 -  -  -  -  ;    ld  ix,(ix+FILE_ADR_OFFSET)
  390 D1:ACD0 DD 6E 04 -      ld  L,(ix+4)    ;PRG ROM count, low
  391 D1:ACD3 DD 5E 05 -      ld  e,(ix+5)    ;CHR ROM count, low
  392 D1:ACD6 26 00 -  -      ld  h,0
  393 D1:ACD8 54 -  -  -      ld  d,h
  394 D1:ACD9 DD 7E 07 -      ld  a,(ix+7)    ;Check for INES2 bits
  395 D1:ACDC E6 0C -  -      and a,%00001100
  396 D1:ACDE FE 08 -  -      cp  a,%00001000
  397 D1:ACE0 20 1B -  -      jr  nz,+_
  398 D1:ACE2 DD 7E 09 -      ld  a,(ix+9)
  399 D1:ACE5 47 -  -  -      ld  b,a
  400 D1:ACE6 E6 0F -  -      and a,$0F
  401 D1:ACE8 FE 02 -  -      cp  a,MAXPRGROM_HINIB+1
  402 D1:ACEA D2 33 AB D1     jp  nc,err_PRGROMTooLarge
  403 D1:ACEE 67 -  -  -      ld  h,a
  404 D1:ACEF 78 -  -  -      ld  a,b
  405 D1:ACF0 E6 F0 -  -      and a,$F0
  406 D1:ACF2 07 -  -  -      rlca
  407 D1:ACF3 07 -  -  -      rlca
  408 D1:ACF4 07 -  -  -      rlca
  409 D1:ACF5 07 -  -  -      rlca
  410 D1:ACF6 FE 04 -  -      cp  a,MAXCHRROM_HINIB+1
  411 D1:ACF8 D2 5B AB D1     jp  nc,err_CHRROMTooLarge
  412 D1:ACFC 57 -  -  -      ld  d,a
  413 D1:ACFD AF -  -  -  _:  xor a,a
  414 D1:ACFE 32 37 34 D0     ld  (prg_rom_size),a
  415 D1:AD02 32 3A 34 D0     ld  (chr_rom_size),a
  416 D1:AD06 29 -  -  -      add hl,hl   ;x2
  417 D1:AD07 29 -  -  -      add hl,hl   ;x4
  418 D1:AD08 29 -  -  -      add hl,hl   ;x8
  419 D1:AD09 29 -  -  -      add hl,hl   ;x16
  420 D1:AD0A 29 -  -  -      add hl,hl   ;x32
  421 D1:AD0B 29 -  -  -      add hl,hl   ;x64
  422 D1:AD0C 52 22 38 34 
              D0 -  -  -      ld.s (prg_rom_size+1),hl    ;x64x256
  423 D1:AD11 EB -  -  -      ex  de,hl
  424 D1:AD12 29 -  -  -      add hl,hl   ;x2
  425 D1:AD13 29 -  -  -      add hl,hl   ;x4
  426 D1:AD14 29 -  -  -      add hl,hl   ;x8
  427 D1:AD15 29 -  -  -      add hl,hl   ;x16
  428 D1:AD16 29 -  -  -      add hl,hl   ;x32
  429 D1:AD17 52 22 3B 34 
              D0 -  -  -      ld.s (chr_rom_size+1),hl    ;x32x256
  430 D1:AD1C 2A 3A 34 D0     ld  hl,(chr_rom_size)
  431 D1:AD20 ED 5B 37 34 
              D0 -  -  -      ld  de,(prg_rom_size)
  432 D1:AD25 19 -  -  -      add hl,de
  433 D1:AD26 ED 5B 34 34 
              D0 -  -  -      ld  de,(total_rom_size)
  434 D1:AD2B B7 -  -  -      or  a,a
  435 D1:AD2C ED 52 -  -      sbc hl,de   ;declared-actual. declared must be equal to or smaller.
  436 D1:AD2E 28 04 -  -      jr  z,+_
  437 D1:AD30 D2 83 AB D1     jp  nc,err_missingROMDetected
  438 D1:AD34 -  -  -  -  _:  ;Find trainer, PRG, and CHR base addresses
  439 D1:AD34 ED 22 10 -      lea hl,ix+16
  440 D1:AD37 22 43 34 D0     ld  (trainer_base),hl   ;whether it exists or not.
  441 D1:AD3B 11 00 00 00     ld  de,0
  442 D1:AD3F DD CB 06 56     bit 2,(ix+6)
  443 D1:AD43 28 04 -  -      jr  z,+_
  444 D1:AD45 11 00 02 00     ld  de,512
  445 D1:AD49 19 -  -  -  _:  add hl,de
  446 D1:AD4A 22 43 34 D0     ld  (prg_rom_base),hl
  447 D1:AD4E FD 21 50 34 
              D0 -  -  -      ld  iy,FILETABLE
  448 D1:AD53 52 FD 27 00     ld.s hl,(iy+FILE_SIZE_OFFSET)
  449 D1:AD57 B7 -  -  -      or  a,a
  450 D1:AD58 ED 52 -  -      sbc hl,de   ;less possible trainer
  451 D1:AD5A 11 10 00 00     ld  de,16
  452 D1:AD5E ED 52 -  -      sbc hl,de   ;less iNES header. Remaining is now size of current file.
  453 D1:AD60 EB -  -  -      ex  de,hl   ;curfilesize is now in DE
  454 D1:AD61 2A 37 34 D0     ld  hl,(prg_rom_size)   ;keep subtracting filesize from this until carry.
  455 D1:AD65 B7 -  -  -      or  a,a
  456 D1:AD66 ED 52 -  -      sbc hl,de   ;if carry, prg_rom end is inside this file. Undo: HL is offset.
  457 D1:AD68 0E 00 -  -      ld  c,0     ;0th file current
  458 D1:AD6A 38 1D -  -      jr  c,loadROMFile_locatedCHRROM
  459 D1:AD6C 3A 2F 34 D0     ld  a,(inputNumFiles)
  460 D1:AD70 B7 -  -  -      or  a,a
  461 D1:AD71 28 12 -  -      jr  z,loadROMFile_noCHRROMFound
  462 D1:AD73 47 -  -  -      ld  b,a
  463 D1:AD74 ED 33 08 -  _:  lea iy,iy+FILETABLE_STRIDE
  464 D1:AD77 52 ED 5B 00 
              00 00 -  -      ld.s de,(FILE_SIZE_OFFSET)
  465 D1:AD7D 0C -  -  -      inc c
  466 D1:AD7E B7 -  -  -      or  a,a
  467 D1:AD7F ED 52 -  -      sbc hl,de   ;
  468 D1:AD81 38 06 -  -      jr  c,loadROMFile_locatedCHRROM
  469 D1:AD83 10 EF -  -      djnz -_
  470 D1:AD85 -  -  -  -  loadROMFile_noCHRROMFound:
  471 D1:AD85 C3 ED AB D1     jp  err_CHRROMNotFound
  472 D1:AD89 -  -  -  -  loadROMFile_locatedCHRROM:
  473 D1:AD89 19 -  -  -      add hl,de       ;Undid subtract. HL is now offset in current file
  474 D1:AD8A FD 17 02 -      ld  de,(iy+FILE_ADR_OFFSET) ;so get address inside that file.
  475 D1:AD8D 19 -  -  -      add hl,de
  476 D1:AD8E 79 -  -  -      ld  a,c
  477 D1:AD8F 22 46 34 D0     ld  (chr_rom_base),hl
  478 D1:AD93 32 49 34 D0     ld  (chr_rom_base_file),a
  479 D1:AD97 -  -  -  -      ;Detect mapper and run its initializer
  480 D1:AD97 DD 7E 06 -      ld  a,(ix+6)
  481 D1:AD9A DD 46 07 -      ld  b,(ix+7)
  482 D1:AD9D 07 -  -  -      rlca
  483 D1:AD9E 07 -  -  -      rlca
  484 D1:AD9F 07 -  -  -      rlca
  485 D1:ADA0 07 -  -  -      rlca
  486 D1:ADA1 A8 -  -  -      xor a,b
  487 D1:ADA2 E6 0F -  -      and a,$0F
  488 D1:ADA4 A8 -  -  -      xor a,b
  489 D1:ADA5 52 EB -  -      ex.s de,hl  ;clears HLU,DEU
  490 D1:ADA7 5F -  -  -      ld  e,a
  491 D1:ADA8 21 3D 34 D0     ld  hl,submapper
  492 D1:ADAC 36 00 -  -      ld  (hl),0
  493 D1:ADAE 78 -  -  -      ld  a,b
  494 D1:ADAF E6 0C -  -      and a,%00001100
  495 D1:ADB1 FE 08 -  -      cp  a,%00001000
  496 D1:ADB3 3E 00 -  -      ld  a,0
  497 D1:ADB5 20 0E -  -      jr  nz,+_
  498 D1:ADB7 DD 46 08 -      ld  b,(ix+8)
  499 D1:ADBA 78 -  -  -      ld  a,b
  500 D1:ADBB 07 -  -  -      rlca
  501 D1:ADBC 07 -  -  -      rlca
  502 D1:ADBD 07 -  -  -      rlca
  503 D1:ADBE 07 -  -  -      rlca
  504 D1:ADBF E6 0F -  -      and a,$0F
  505 D1:ADC1 77 -  -  -      ld  (hl),a
  506 D1:ADC2 78 -  -  -      ld  a,b
  507 D1:ADC3 E6 0F -  -      and a,$0F
  508 D1:ADC5 57 -  -  -  _:  ld  d,a
  509 D1:ADC6 ED 53 3F 34 
              D0 -  -  -      ld  (mapper_id),de
  510 D1:ADCB 21 FF FF FF     ld  hl,-NUMBER_OF_MAPPERS
  511 D1:ADCF 19 -  -  -      add hl,de
  512 D1:ADD0 DA CC AB D1     jp  c,err_MapperOutOfRange
  513 D1:ADD4 ED 62 -  -      sbc hl,hl
  514 D1:ADD6 19 -  -  -      add hl,de               ;hl=de. both are mapper IDs
  515 D1:ADD7 2E 09 -  -      ld  L,MAPPER_STRIDE
  516 D1:ADD9 55 -  -  -      ld  d,L
  517 D1:ADDA ED 6C -  -      mlt hl                  ;high byte multiply
  518 D1:ADDC 65 -  -  -      ld  h,L
  519 D1:ADDD 2E 00 -  -      ld  L,0
  520 D1:ADDF ED 5C -  -      mlt de                  ;low byte multiply
  521 D1:ADE1 19 -  -  -      add hl,de               ;This is the best 16bit * 8bit I know to do.
  522 D1:ADE2 11 EE AD D1     ld  de,mapper_table
  523 D1:ADE6 19 -  -  -      add hl,de
  524 D1:ADE7 22 40 34 D0     ld  (mapper_adr_base),hl
  525 D1:ADEB ED 27 -  -      ld  hl,(hl)
  526 D1:ADED E9 -  -  -      jp  (hl)
  527 D1:ADEE -  -  -  -  
  528 D1:ADEE -  -  -  -  mapper_table:   ;entries 9 wide
  529 D1:ADEE F7 AD D1 -  .dl mapper0_init
  530 D1:ADF1 74 AE D1 -  .dl mapper0_read
  531 D1:ADF4 17 AF D1 -  .dl mapper0_write
  532 D1:ADF7 -  -  -  -  
  533 D1:ADF7 -  -  -  -  mapper0_init:
  534 D1:ADF7 -  -  -  -      ;map trainer, if exist
  535 D1:ADF7 DD CB 06 56     bit 2,(ix+6)
  536 D1:ADFB 28 0D -  -      jr  z,+_
  537 D1:ADFD 2A 43 34 D0     ld  hl,(trainer_base)
  538 D1:AE01 1E 70 -  -      ld  e,$70
  539 D1:AE03 0E 02 -  -      ld  c,2
  540 D1:AE05 41 -  -  -      ld  b,c
  541 D1:AE06 CD 7D B7 D1     call i6502_map_pages
  542 D1:AE0A 2A 37 34 D0 _:  ld  hl,(prg_rom_size)
  543 D1:AE0E 11 FF BF FF     ld  de,-(16384+1)
  544 D1:AE12 19 -  -  -      add hl,de   ;carry if more than 1 16KB segment
  545 D1:AE13 2A 43 34 D0     ld  hl,(prg_rom_base)
  546 D1:AE17 -  -  -  -      ;jr  $
  547 D1:AE17 06 80 -  -      ld  b,$80
  548 D1:AE19 58 -  -  -      ld  e,b
  549 D1:AE1A 0E 40 -  -      ld  c,$40
  550 D1:AE1C 30 02 -  -      jr  nc,+_
  551 D1:AE1E CB 21 -  -      sla c
  552 D1:AE20 CD 7D B7 D1 _:  call i6502_map_pages
  553 D1:AE24 -  -  -  -      ;map in nametable mirroring
  554 D1:AE24 21 00 58 D0     ld  hl,NAMETABLE1
  555 D1:AE28 11 00 5C D0     ld  de,NAMETABLE2
  556 D1:AE2C 22 00 34 D0     ld  (nametable00),hl
  557 D1:AE30 ED 53 0C 34 
              D0 -  -  -      ld  (nametable11),de
  558 D1:AE35 DD CB 06 46     bit 0,(ix+6)    ;nametable arrangement. Mapper 0 has no alternates.
  559 D1:AE39 28 01 -  -      jr  z,+_
  560 D1:AE3B EB -  -  -      ex  de,hl
  561 D1:AE3C 22 04 34 D0 _:  ld  (nametable01),hl
  562 D1:AE40 ED 53 08 34 
              D0 -  -  -      ld  (nametable10),de
  563 D1:AE45 -  -  -  -      ;Fill out nametable attrib pointers
  564 D1:AE45 21 00 34 D0     ld  hl,nametable00
  565 D1:AE49 01 C0 03 00     ld  bc,960
  566 D1:AE4D 3E 04 -  -      ld  a,4
  567 D1:AE4F ED 17 -  -  _:  ld  de,(hl)
  568 D1:AE51 CB E5 -  -      set 4,L
  569 D1:AE53 EB -  -  -      ex  de,hl
  570 D1:AE54 09 -  -  -      add hl,bc
  571 D1:AE55 EB -  -  -      ex  de,hl
  572 D1:AE56 ED 1F -  -      ld  (hl),de
  573 D1:AE58 CB A5 -  -      res 4,L
  574 D1:AE5A 23 -  -  -      inc hl
  575 D1:AE5B 23 -  -  -      inc hl
  576 D1:AE5C 23 -  -  -      inc hl
  577 D1:AE5D 23 -  -  -      inc hl
  578 D1:AE5E 3D -  -  -      dec a
  579 D1:AE5F 20 EE -  -      jr  nz,-_
  580 D1:AE61 -  -  -  -      ;initilize chr_rom current bank address.
  581 D1:AE61 -  -  -  -      ;This mapper does not allow any additional banks, but if it does, this
  582 D1:AE61 -  -  -  -      ;value must be recalculated from chr_rom_base
  583 D1:AE61 2A 46 34 D0     ld  hl,(chr_rom_base)
  584 D1:AE65 22 2C 34 D0     ld  (chr_rom_curbank),hl
  585 D1:AE69 21 8A AF D1     ld  hl,mapper0_ppu_write
  586 D1:AE6D 22 4A 34 D0     ld  (ppu_smc_gate),hl
  587 D1:AE71 36 C9 -  -      ld  (hl),$C9    ;ret. Will write nop here during first NMI handle
  588 D1:AE73 C9 -  -  -      ret
  589 D1:AE74 -  -  -  -  
  590 D1:AE74 -  -  -  -  
  591 D1:AE74 -  -  -  -  mapper0_read:
  592 D1:AE74 7A -  -  -      ld  a,d
  593 D1:AE75 87 -  -  -      add a,a
  594 D1:AE76 30 08 -  -      jr  nc,+_
  595 D1:AE78 7E -  -  -      ld  a,(hl)  ;is $8000 or above
  596 D1:AE79 C9 -  -  -      ret
  597 D1:AE7A FE 40 -  -      cp  a,$20*2
  598 D1:AE7C 38 02 -  -      jr  c,+_
  599 D1:AE7E 7E -  -  -      ld  a,(hl)  ;is below $2000
  600 D1:AE7F C9 -  -  -      ret
  601 D1:AE80 87 -  -  -  _:  add a,a
  602 D1:AE81 30 13 -  -      jr  nc,mapper0_ppu_read     ;wasn't $4000 or higher.
  603 D1:AE83 28 02 -  -      jr  z,mapper0_apu_read      ;high byte was exactly $40
  604 D1:AE85 7E -  -  -      ld  a,(hl)
  605 D1:AE86 C9 -  -  -      ret
  606 D1:AE87 -  -  -  -  mapper0_apu_read:
  607 D1:AE87 79 -  -  -      ld  a,c
  608 D1:AE88 FE 16 -  -      cp  a,$16
  609 D1:AE8A 20 08 -  -      jr  nz,+_
  610 D1:AE8C 37 -  -  -      scf
  611 D1:AE8D DD CB FE 1E     rr  (ix+APU_KEYPAD)     ;after bits are exhausted, should read '1'
  612 D1:AE91 CE 40 -  -      adc a,$40               ;Simulate open bus behavior
  613 D1:AE93 C9 -  -  -      ret
  614 D1:AE94 7E -  -  -  _:  ld  a,(hl)  ;hope that the dummy map page is good enough to not crash.
  615 D1:AE95 C9 -  -  -      ret
  616 D1:AE96 -  -  -  -  mapper0_ppu_read:
  617 D1:AE96 79 -  -  -      ld  a,c
  618 D1:AE97 E6 07 -  -      and a,%00000111
  619 D1:AE99 FE 07 -  -      cp  a,$07
  620 D1:AE9B 28 17 -  -      jr  z,mapper0_ppu_read_ppudata
  621 D1:AE9D FE 04 -  -      cp  a,$04
  622 D1:AE9F 28 6D -  -      jr  z,mapper0_ppu_read_oamdata
  623 D1:AEA1 FE 02 -  -      cp  a,$02   ;gotta break this out since reading ppustatus does other stuff
  624 D1:AEA3 28 08 -  -      jr  z,mapper0_ppu_read_ppustatus
  625 D1:AEA5 -  -  -  -      ;We should ignore reads from write-only registers but i'm sure nothing
  626 D1:AEA5 -  -  -  -      ;will come of allowing it.
  627 D1:AEA5 ED 22 E0 -  _:  lea hl,ix+PPU_CTRL
  628 D1:AEA8 7D -  -  -      ld  a,l
  629 D1:AEA9 81 -  -  -      add a,c
  630 D1:AEAA 6F -  -  -      ld  l,a
  631 D1:AEAB 7E -  -  -      ld  a,(hl)  
  632 D1:AEAC C9 -  -  -      ret
  633 D1:AEAD -  -  -  -  mapper0_ppu_read_ppustatus:
  634 D1:AEAD -  -  -  -      ;reading ppustatus does additional things.
  635 D1:AEAD 3E 55 -  -      ld  a,WREG_CONST
  636 D1:AEAF DD 77 F4 -      ld  (ix+PPU_W),a
  637 D1:AEB2 18 F1 -  -      jr -_
  638 D1:AEB4 -  -  -  -  mapper0_ppu_read_ppudata:
  639 D1:AEB4 DD 7E F3 -      ld  a,(ix+PPU_V+1)
  640 D1:AEB7 4F -  -  -      ld  c,a
  641 D1:AEB8 E6 3F -  -      and a,%00111111
  642 D1:AEBA FE 20 -  -      cp  a,$20
  643 D1:AEBC 30 0F -  -      jr  nc,+_   ;skip reading from CHR_ROM
  644 D1:AEBE D5 -  -  -      push de
  645 D1:AEBF 52 EB -  -          ex.s de,hl  ;clears DEU
  646 D1:AEC1 2A 2C 34 D0         ld  hl,(chr_rom_curbank)
  647 D1:AEC5 57 -  -  -          ld  d,a
  648 D1:AEC6 DD 5E F2 -          ld  e,(ix+PPU_V+0)
  649 D1:AEC9 19 -  -  -          add hl,de
  650 D1:AECA D1 -  -  -      pop de
  651 D1:AECB 7E -  -  -      ld  a,(hl)
  652 D1:AECC C9 -  -  -      ret
  653 D1:AECD FE 3F -  -  _:  cp  a,$3F
  654 D1:AECF 20 0C -  -      jr  nz,+_
  655 D1:AED1 DD 7E F2 -      ld  a,(ix+PPU_V+0)
  656 D1:AED4 E6 3F -  -      and a,%00111111
  657 D1:AED6 21 00 32 D0     ld  hl,vram_palette
  658 D1:AEDA 6F -  -  -      ld  L,a
  659 D1:AEDB 7E -  -  -      ld  a,(hl)
  660 D1:AEDC C9 -  -  -      ret
  661 D1:AEDD E6 0C -  -  _:  and a,%00001100     ;%00ZZTTaa Z:00,01=CHR,02=NT,03=PAL; T:WhichNT; a:adrHI
  662 D1:AEDF 21 00 34 D0     ld  hl,nametable00
  663 D1:AEE3 6F -  -  -      ld  L,a             ;bits already in position to index the table
  664 D1:AEE4 ED 27 -  -      ld  hl,(hl)
  665 D1:AEE6 DD 6E F2 -      ld  L,(ix+PPU_V+0)
  666 D1:AEE9 DD 7E F3 -      ld  a,(ix+PPU_V+1)
  667 D1:AEEC AC -  -  -      xor a,h     ;
  668 D1:AEED E6 03 -  -      and a,%00000011 ;keep low bits of address in A. H keep is location-specific.
  669 D1:AEEF AC -  -  -      xor a,h
  670 D1:AEF0 67 -  -  -      ld  h,a
  671 D1:AEF1 DD CB E0 56     bit 2,(ix+PPU_CTRL) ;VRAM cursor direction
  672 D1:AEF5 3E 01 -  -      ld  a,1
  673 D1:AEF7 28 02 -  -      jr  z,+_
  674 D1:AEF9 C6 1F -  -      add a,31
  675 D1:AEFB DD 86 F2 -  _:  add a,(ix+PPU_V)
  676 D1:AEFE DD 77 F2 -      ld  (ix+PPU_V),a
  677 D1:AF01 30 03 -  -      jr  nc,+_
  678 D1:AF03 DD 34 F3 -      inc (ix+PPU_V+1)
  679 D1:AF06 DD 7E E7 -  _:  ld  a,(ix+PPU_DATA) ;following dance simulates delayed buffer read
  680 D1:AF09 46 -  -  -      ld  b,(hl)
  681 D1:AF0A DD 70 E7 -      ld  (ix+PPU_DATA),b
  682 D1:AF0D C9 -  -  -      ret
  683 D1:AF0E -  -  -  -  mapper0_ppu_read_oamdata:
  684 D1:AF0E -  -  -  -      ;this needs to be more complex than this. But I'm not. I won't.
  685 D1:AF0E -  -  -  -      ;Not now. Not going to play Micro Machines. I don't wanna.
  686 D1:AF0E 21 00 60 D0     ld  hl,OBJECT_ATTRIB_MEM
  687 D1:AF12 DD 6E E3 -      ld  L,(ix+PPU_OAMADDR)
  688 D1:AF15 7E -  -  -      ld  a,(hl)
  689 D1:AF16 C9 -  -  -      ret
  690 D1:AF17 -  -  -  -  
  691 D1:AF17 -  -  -  -  
  692 D1:AF17 -  -  -  -  mapper0_write:
  693 D1:AF17 7A -  -  -      ld  a,d
  694 D1:AF18 FE 20 -  -      cp  a,$20
  695 D1:AF1A 30 02 -  -      jr  nc,+_
  696 D1:AF1C 70 -  -  -      ld  (hl),b
  697 D1:AF1D C9 -  -  -      ret
  698 D1:AF1E FE 40 -  -  _:  cp  a,$40
  699 D1:AF20 38 68 -  -      jr  c,mapper0_ppu_write
  700 D1:AF22 28 04 -  -      jr  z,mapper0_apu_write
  701 D1:AF24 87 -  -  -      add a,a
  702 D1:AF25 D8 -  -  -      ret c       ;don't write anything to above $8000
  703 D1:AF26 70 -  -  -      ld  (hl),b  ;but allow it in $4100-$7FFF because it might be RAM.
  704 D1:AF27 C9 -  -  -      ret
  705 D1:AF28 -  -  -  -  mapper0_apu_write:
  706 D1:AF28 79 -  -  -      ld  a,c
  707 D1:AF29 FE 16 -  -      cp  a,$16
  708 D1:AF2B 20 3B -  -      jr  nz,+_
  709 D1:AF2D DD 7E FF -      ld  a,(ix+APU_KEYLATCH)
  710 D1:AF30 A8 -  -  -      xor a,b     ;Bit 0 is set if we're trying to change controller poll state.
  711 D1:AF31 0F -  -  -      rrca        ;And this is how we're going to get it.
  712 D1:AF32 D0 -  -  -      ret nc      ;Only support NES standard controller.
  713 D1:AF33 CB 40 -  -      bit 0,b     ;So... what are we changing it to?
  714 D1:AF35 DD 70 FF -      ld  (ix+APU_KEYLATCH),b
  715 D1:AF38 21 00 00 F5     ld  hl,mpKeyMode
  716 D1:AF3C 28 06 -  -      jr  z,mapper0_apu_stop_keyboard ;jump to strobe stop
  717 D1:AF3E 7E -  -  -      ld  a,(hl)
  718 D1:AF3F FE 03 -  -      cp  a,3
  719 D1:AF41 C8 -  -  -      ret z       ;don't do anything to the keyboard if running continuous.
  720 D1:AF42 77 -  -  -      ld  (hl),a  ;else set to continuous and keep going.
  721 D1:AF43 C9 -  -  -      ret
  722 D1:AF44 -  -  -  -  mapper0_apu_stop_keyboard:
  723 D1:AF44 2E 12 -  -      ld  L,$12   ;76543210 : del mode 2nd y= wind zoom trace graph
  724 D1:AF46 7E -  -  -      ld  a,(hl)
  725 D1:AF47 2E 1E -  -      ld  L,$1E   ;----3210 : up right left down
  726 D1:AF49 4E -  -  -      ld  c,(hl)
  727 D1:AF4A A9 -  -  -      xor a,c
  728 D1:AF4B E6 F0 -  -      and a,%11110000
  729 D1:AF4D A9 -  -  -      xor a,c     ;keymapping has changed. We need to further alter it.
  730 D1:AF4E -  -  -  -      ;[DE MO 2N Y= UP RI LE DO] maps to [SE, B, A, ST, UP, RI, LE, DO]
  731 D1:AF4E -  -  -  -      ;The above must be rearranged to become:
  732 D1:AF4E -  -  -  -      ;            [RI, LE, DO, UP, ST, SE, B , A ]
  733 D1:AF4E -  -  -  -      ;as compared to
  734 D1:AF4E -  -  -  -      ;            [SE, B , A , ST, UP, RI, LE, DO]
  735 D1:AF4E 07 -  -  -      rlca        ;[B , A , ST, UP, RI, LE, DO, SE]
  736 D1:AF4F 4F -  -  -      ld  c,a     ;b4  : UP is in correct position.
  737 D1:AF50 07 -  -  -      rlca        ;[A , ST, UP, RI, LE, DO, SE, B ]
  738 D1:AF51 07 -  -  -      rlca        ;[ST, UP, RI, LE, DO, SE, B , A ]
  739 D1:AF52 47 -  -  -      ld  b,a     ;b0-2:SE, B , and A are in the correct position
  740 D1:AF53 07 -  -  -      rlca        ;[UP, RI, LE, DO, SE, B , A , ST]
  741 D1:AF54 07 -  -  -      rlca        ;[RI, LE, DO, SE, B , A , ST, UP]
  742 D1:AF55 57 -  -  -      ld  d,a     ;b5-7: RI LE DO in correct position.
  743 D1:AF56 07 -  -  -      rlca        ;[LE, DO, SE, B , A , ST, UP, RI]
  744 D1:AF57 07 -  -  -      rlca        ;b3: ST is in the correct position.
  745 D1:AF58 A9 -  -  -      xor a,c     ;
  746 D1:AF59 E6 08 -  -      and a,%00001000 ;keep A3, merge others
  747 D1:AF5B A9 -  -  -      xor a,c     ;Has: A3. Merge-in contains b4
  748 D1:AF5C A8 -  -  -      xor a,b     ;
  749 D1:AF5D E6 18 -  -      and a,%00011000 ;keep A3-4
  750 D1:AF5F A8 -  -  -      xor a,b     ;Merge-in contains b0-2
  751 D1:AF60 AA -  -  -      xor a,d     ;
  752 D1:AF61 E6 1F -  -      and a,%00011111 ;keep A0-4
  753 D1:AF63 AA -  -  -      xor a,d     ;Merge-in contains b5-7. Is complete.
  754 D1:AF64 DD 77 FE -      ld  (ix+APU_KEYPAD),a
  755 D1:AF67 C9 -  -  -      ret
  756 D1:AF68 FE 14 -  -  _:  cp  a,$14   ;OAM DMA
  757 D1:AF6A 20 1C -  -      jr  nz,+_
  758 D1:AF6C C5 -  -  -      push bc
  759 D1:AF6D D5 -  -  -          push de
  760 D1:AF6E 11 01 02 00             ld  de,513  ;or 514. Not going to emulate put/get cycles
  761 D1:AF72 FD 19 -  -              add iy,de
  762 D1:AF74 0E 0C -  -              ld  c,BASETABLE_STRIDE
  763 D1:AF76 21 00 40 D0             ld  hl,PAGETABLE
  764 D1:AF7A 09 -  -  -              add hl,bc
  765 D1:AF7B 11 00 60 D0             ld  de,OBJECT_ATTRIB_MEM
  766 D1:AF7F 01 00 01 00             ld  bc,256
  767 D1:AF83 ED B0 -  -              ldir
  768 D1:AF85 D1 -  -  -          pop de
  769 D1:AF86 C1 -  -  -      pop bc
  770 D1:AF87 C9 -  -  -      ret
  771 D1:AF88 70 -  -  -  _:  ld  (hl),b
  772 D1:AF89 C9 -  -  -      ret
  773 D1:AF8A -  -  -  -  mapper0_ppu_write:
  774 D1:AF8A C9 -  -  -      ret
  775 D1:AF8B -  -  -  -      ;TODO: gate off access outside VBlank
  776 D1:AF8B -  -  -  -      ;TODO: Replace cp/jr chain with DJNZ chain for more optimal branching.
  777 D1:AF8B 79 -  -  -      ld  a,c
  778 D1:AF8C E6 07 -  -      and a,%00000111
  779 D1:AF8E -  -  -  -  ;    cp  a,$01  ;Once midframe is supported, uncomment this.
  780 D1:AF8E -  -  -  -  ;    jr  z,mapper0_ppu_write_ppumask
  781 D1:AF8E FE 02 -  -      cp  a,$02
  782 D1:AF90 C8 -  -  -      ret z   ;read-only register. do not write to it.
  783 D1:AF91 FE 04 -  -      cp  a,$04
  784 D1:AF93 28 08 -  -      jr  z,mapper0_ppu_write_oamdata
  785 D1:AF95 FE 06 -  -      cp a,$06
  786 D1:AF97 28 0D -  -      jr  z,mapper0_ppu_write_ppuaddr
  787 D1:AF99 FE 07 -  -      cp  a,$07
  788 D1:AF9B 28 17 -  -      jr  z,mapper0_ppu_write_ppudata
  789 D1:AF9D -  -  -  -  ;    cp  a,$05  ;Once midframe is supported, uncomment this.
  790 D1:AF9D -  -  -  -  ;    jr  z,mapper0_ppu_write_ppuscroll
  791 D1:AF9D -  -  -  -  
  792 D1:AF9D -  -  -  -  
  793 D1:AF9D -  -  -  -  mapper0_ppu_write_oamdata:
  794 D1:AF9D -  -  -  -      ;Doesn't check anything. So sad.
  795 D1:AF9D 21 00 60 D0     ld  hl,OBJECT_ATTRIB_MEM
  796 D1:AFA1 DD 6E E3 -      ld  L,(ix+PPU_OAMADDR)
  797 D1:AFA4 70 -  -  -      ld  (hl),b
  798 D1:AFA5 C9 -  -  -      ret
  799 D1:AFA6 -  -  -  -  mapper0_ppu_write_ppuaddr:
  800 D1:AFA6 DD CB F4 0E     rrc (ix+PPU_W)
  801 D1:AFAA 38 04 -  -      jr  c,+_
  802 D1:AFAC DD 70 F2 -      ld  (ix+PPU_V+0),b
  803 D1:AFAF C9 -  -  -      ret
  804 D1:AFB0 DD 70 F3 -  _:  ld  (ix+PPU_V+1),b
  805 D1:AFB3 C9 -  -  -      ret
  806 D1:AFB4 -  -  -  -  
  807 D1:AFB4 -  -  -  -  mapper0_ppu_write_ppudata:
  808 D1:AFB4 DD 7E F3 -      ld  a,(ix+PPU_V+1)
  809 D1:AFB7 4F -  -  -      ld  c,a
  810 D1:AFB8 E6 3F -  -      and a,%00111111
  811 D1:AFBA FE 20 -  -      cp  a,$20
  812 D1:AFBC D8 -  -  -      ret c   ;Mapper 0 does not allow writing to CHR_ROM
  813 D1:AFBD FE 3F -  -      cp  a,$3F
  814 D1:AFBF 28 2B -  -      jr  z,+++_    ;write to palette table
  815 D1:AFC1 E6 0C -  -      and a,%00001100     ;%00ZZTTaa Z:00,01=CHR,02=NT,03=PAL; T:WhichNT; a:adrHI
  816 D1:AFC3 21 00 34 D0     ld  hl,nametable00
  817 D1:AFC7 6F -  -  -      ld  L,a             ;bits already in position to index the table
  818 D1:AFC8 ED 27 -  -      ld  hl,(hl)
  819 D1:AFCA DD 6E F2 -      ld  L,(ix+PPU_V+0)
  820 D1:AFCD DD 7E F3 -      ld  a,(ix+PPU_V+1)
  821 D1:AFD0 AC -  -  -      xor a,h     ;
  822 D1:AFD1 E6 03 -  -      and a,%00000011 ;keep low bits of address in A. H keep is location-specific.
  823 D1:AFD3 AC -  -  -      xor a,h
  824 D1:AFD4 67 -  -  -      ld  h,a
  825 D1:AFD5 70 -  -  -      ld  (hl),b
  826 D1:AFD6 DD CB E0 56     bit 2,(ix+PPU_CTRL) ;VRAM cursor direction
  827 D1:AFDA 3E 01 -  -      ld  a,1
  828 D1:AFDC 28 02 -  -      jr  z,+_
  829 D1:AFDE C6 1F -  -      add a,31
  830 D1:AFE0 DD 86 F2 -  _:  add a,(ix+PPU_V)
  831 D1:AFE3 DD 77 F2 -      ld  (ix+PPU_V),a
  832 D1:AFE6 30 03 -  -      jr  nc,+_
  833 D1:AFE8 DD 34 F3 -      inc (ix+PPU_V+1)
  834 D1:AFEB C9 -  -  -  _:  ret
  835 D1:AFEC 21 00 32 D0 _:  ld  hl,vram_palette
  836 D1:AFF0 DD 7E F2 -      ld  a,(ix+PPU_V+0)
  837 D1:AFF3 E6 3F -  -      and a,%00111111
  838 D1:AFF5 6F -  -  -      ld  L,a
  839 D1:AFF6 70 -  -  -      ld  (hl),b
  840 D1:AFF7 C9 -  -  -      ret
  841 D1:AFF8 -  -  -  -  
  842 D1:AFF8 -  -  -  -  mapper0_ppu_write_ppumask:
  843 D1:AFF8 -  -  -  -      ;TODO: Allow queueing for midframe writes.
  844 D1:AFF8 70 -  -  -      ld  (hl),b
  845 D1:AFF9 C9 -  -  -      ret
  846 D1:AFFA -  -  -  -  mapper0_ppu_write_ppuscroll:
  847 D1:AFFA -  -  -  -      ;TODO: Allow queueing for midframe writes. Often used in conjunction
  848 D1:AFFA -  -  -  -      ;with Sprite0 hits for status bar rendering.
  849 D1:AFFA 70 -  -  -      ld  (hl),b
  850 D1:AFFB C9 -  -  -      ret
  851 D1:AFFC -  -  -  -  
  852 D1:AFFC -  -  -  -  
  853 D1:AFFC -  -  -  -  loadROMFile_tempSig:    ;total 23 bytes
  854 D1:AFFC 43 45 4E 52 
              4F 32 00 -  .db "CENRO2",0
  855 D1:B003 -  -  -  -  loadROMFile_tempSigHash:
  856 D1:B003 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;16 bytes for hash
  857 D1:B013 -  -  -  -  
  858 D1:B013 -  -  -  -  
  859 D1:B013 -  -  -  -  ;Input: IY = locationOfSignature. 
  860 D1:B013 -  -  -  -  ;       BC=size of signature (long load to clear BCU), still limited to 255.
  861 D1:B013 -  -  -  -  ;Output: carry=1: Variable not found.
  862 D1:B013 -  -  -  -  ;Output: carry=0: DE=address of variable data start after the signature
  863 D1:B013 -  -  -  -  ;        IX=location of current variable's VAT location.
  864 D1:B013 -  -  -  -  ;Destroys: All registers not in use.
  865 D1:B013 -  -  -  -  ;NOTES: This routine is capable of resuming a search that has ended.
  866 D1:B013 -  -  -  -  
  867 D1:B013 -  -  -  -  ;To continue searching:
  868 D1:B013 -  -  -  -  ;call vatTraverse_continue with the following inputs:
  869 D1:B013 -  -  -  -  ;   IX preserved from a non-carry return of vatTraverse.
  870 D1:B013 -  -  -  -  ;   BC = same as input for vatTraverse. vatTraverse does not destroy this reg.
  871 D1:B013 -  -  -  -  ;   WARNING: DO NOT KEEP SEARCHING AFTER CALL RETURNS CARRY. START A NEW SEARCH.
  872 D1:B013 -  -  -  -  vatTraverse:
  873 D1:B013 -  -  -  -      ;progPtr = progvat start; ptemp = progvatend
  874 D1:B013 DD 2A 9D 25 
              D0 -  -  -      ld  ix,(progPtr)
  875 D1:B018 -  -  -  -  vatTraverse_loop:
  876 D1:B018 2A 9A 25 D0     ld  hl,(pTemp)
  877 D1:B01C ED 12 00 -      lea de,ix+0
  878 D1:B01F B7 -  -  -      or  a,a
  879 D1:B020 ED 52 -  -      sbc hl,de   ;HL<DE while in pVAT, else carry set.
  880 D1:B022 3F -  -  -      ccf
  881 D1:B023 D8 -  -  -      ret c
  882 D1:B024 1A -  -  -      ld  a,(de)
  883 D1:B025 E6 1F -  -      and a,$1F
  884 D1:B027 FE 15 -  -      cp  a,AppVarObj
  885 D1:B029 20 34 -  -      jr  nz,vatTraverse_skip
  886 D1:B02B DD 17 F9 -      ld  de,(ix-7)   ;puts "page" byte in DEU
  887 D1:B02E DD 5E FD -      ld  e,(ix-3)
  888 D1:B031 DD 56 FC -      ld  d,(ix-4)
  889 D1:B034 CD 98 1F 02     call _ChkInRam
  890 D1:B038 EB -  -  -      ex  de,hl
  891 D1:B039 30 08 -  -      jr  nc,+_
  892 D1:B03B 11 09 00 00     ld  de,9
  893 D1:B03F 19 -  -  -      add hl,de
  894 D1:B040 5E -  -  -      ld  e,(hl)
  895 D1:B041 19 -  -  -      add hl,de
  896 D1:B042 23 -  -  -      inc hl
  897 D1:B043 5E -  -  -  _:  ld  e,(hl)
  898 D1:B044 23 -  -  -      inc hl
  899 D1:B045 56 -  -  -      ld  d,(hl)
  900 D1:B046 23 -  -  -      inc hl
  901 D1:B047 EB -  -  -      ex  de,hl
  902 D1:B048 B7 -  -  -      or  a,a
  903 D1:B049 ED 42 -  -      sbc hl,bc   ;varsize-entrysize. If carry, entry cannot possibly be in var.
  904 D1:B04B 38 12 -  -      jr  c,vatTraverse_skip
  905 D1:B04D ED 23 00 -      lea hl,iy+0
  906 D1:B050 C5 -  -  -      push bc
  907 D1:B051 1A -  -  -  _:      ld  a,(de)
  908 D1:B052 13 -  -  -          inc de
  909 D1:B053 ED A1 -  -          cpi
  910 D1:B055 20 07 -  -          jr  nz,vatTraverse_sigNoMatch
  911 D1:B057 EA 51 B0 D1         jp  pe,-_
  912 D1:B05B C1 -  -  -      pop bc
  913 D1:B05C B7 -  -  -      or  a,a
  914 D1:B05D C9 -  -  -      ret         ;NC. DE = past the signature.
  915 D1:B05E -  -  -  -  vatTraverse_sigNoMatch:
  916 D1:B05E C1 -  -  -      pop bc
  917 D1:B05F -  -  -  -  vatTraverse_continue:
  918 D1:B05F -  -  -  -  vatTraverse_skip:
  919 D1:B05F 3E 07 -  -      ld  a,7
  920 D1:B061 11 FF FF FF     ld  de,-1
  921 D1:B065 DD 86 FA -      add a,(ix-6)
  922 D1:B068 ED 44 -  -      neg
  923 D1:B06A 5F -  -  -      ld  e,a
  924 D1:B06B DD 19 -  -      add ix,de   ;because "sbc ix,de" isn't a thing. Boo.
  925 D1:B06D 18 A9 -  -      jr  vatTraverse_loop
  926 D1:B06F -  -  -  -  
  927 D1:B06F -  -  -  -  ;Copied from my Falldown2 project. I didn't want to have to
  928 D1:B06F -  -  -  -  ;find yet another hardware reference for something I already did.
  929 D1:B06F -  -  -  -  ;But I'll have to do it again anyway because this isn't exactly
  930 D1:B06F -  -  -  -  ;what we're looking for. Here, we output the same sort of
  931 D1:B06F -  -  -  -  ;game keys that I've used basically all my programming life.
  932 D1:B06F -  -  -  -  ;Anyhoo. We'll be using the following:
  933 D1:B06F -  -  -  -  ;kbitDown	equ 00h
  934 D1:B06F -  -  -  -  ;kbitLeft	equ 01h
  935 D1:B06F -  -  -  -  ;kbitRight	equ 02h
  936 D1:B06F -  -  -  -  ;kbitUp		equ 03h
  937 D1:B06F -  -  -  -  ;kbitYequ equ 04h
  938 D1:B06F -  -  -  -  ;kbit2nd		equ 05h
  939 D1:B06F -  -  -  -  ;kbitMode	equ 06h
  940 D1:B06F -  -  -  -  ;kbitDel		equ 07h
  941 D1:B06F -  -  -  -  ;You can find the other defines approximately where I found the stuff above.
  942 D1:B06F -  -  -  -  
  943 D1:B06F -  -  -  -  getkbd_adl:
  944 D1:B06F DD 21 00 00 
              F5 -  -  -  	ld  ix,mpKeyMode
  945 D1:B074 ED 22 00 -  	lea hl,ix+0
  946 D1:B077 36 02 -  -  	ld  (hl),keyModeScanOnce
  947 D1:B079 AF -  -  -  	xor a
  948 D1:B07A BE -  -  -  _:  cp  (hl)
  949 D1:B07B 20 FD -  -  	jr  nz,-_
  950 D1:B07D DD 7E 12 -  	ld  a,(ix+kbdG1-mpKeyRange)
  951 D1:B080 DD 6E 1E -  	ld  l,(ix+kbdG7-mpKeyRange)
  952 D1:B083 AD -  -  -  	xor L
  953 D1:B084 E6 F0 -  -  	and 11110000b	;mask out lower bits to let me shove dpad bits in
  954 D1:B086 AD -  -  -  	xor L
  955 D1:B087 C9 -  -  -  	ret
  956 D1:B088 -  -  -  -  
  957 D1:B088 -  -  -  -  waituntilkeyrelease:
  958 D1:B088 CD 6F B0 D1     call getkbd_adl
  959 D1:B08C B7 -  -  -      or  a,a
  960 D1:B08D 20 F9 -  -      jr  nz,waituntilkeyrelease
  961 D1:B08F C9 -  -  -  	ret
  962 D1:B090 -  -  -  -  
  963 D1:B090 -  -  -  -  waituntilnewkeypress:
  964 D1:B090 CD 88 B0 D1     call waituntilkeyrelease
  965 D1:B094 CD 6F B0 D1 _:  call getkbd_adl
  966 D1:B098 B7 -  -  -  	or  a,a
  967 D1:B099 28 F9 -  -  	jr  z,-_
  968 D1:B09B C9 -  -  -      ret
  969 D1:B09C -  -  -  -  
  970 D1:B09C -  -  -  -  #include "lcd.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    1 D1:B09C -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 D1:B09C -  -  -  -  ;TI-84 Plus CE Include File
    2 D1:B09C -  -  -  -  
    3 D1:B09C -  -  -  -  ;Various Parts Contributed by
    4 D1:B09C -  -  -  -  ;- BrandonW
    5 D1:B09C -  -  -  -  ;- calc84
    6 D1:B09C -  -  -  -  ;- MateoConLechuga
    7 D1:B09C -  -  -  -  ;- Runer112
    8 D1:B09C -  -  -  -  ;- tr1p1ea
    9 D1:B09C -  -  -  -  ;- Kerm Martian
   10 D1:B09C -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    2 D1:B09C -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
    5 D1:B09C -  -  -  -  ;
    6 D1:B09C -  -  -  -  ;
    7 D1:B09C -  -  -  -  ;
    8 D1:B09C -  -  -  -  
    9 D1:B09C -  -  -  -  ;Undefine this to speed up core process by losing debug state
   10 D1:B09C -  -  -  -  ;#define COREDEBUG
   11 D1:B09C -  -  -  -  
   12 D1:B09C -  -  -  -  DEBUG_PRINT_START_CYCLE .equ 0
   13 D1:B09C -  -  -  -  DEBUG_STEP_START_CYCLE  .equ 30000 ;26485
   14 D1:B09C -  -  -  -  
   15 D1:B09C -  -  -  -  
   16 D1:B09C -  -  -  -  
   17 D1:B09C -  -  -  -  FONTFGCOLOR .EQU $FF ;$29
   18 D1:B09C -  -  -  -  FONTBGCOLOR .EQU $00
   19 D1:B09C -  -  -  -  
   20 D1:B09C -  -  -  -  screenBuf1      .equ vRam
   21 D1:B09C -  -  -  -  screenBuf2      .equ vRam+(320*240)
   22 D1:B09C -  -  -  -  ;DO NOT MOVE THESE.
   23 D1:B09C -  -  -  -  xPos                .equ $D031F6
   24 D1:B09C -  -  -  -  yPos                .equ $D031F7
   25 D1:B09C -  -  -  -  slopPos             .equ $D031F8        ;extra byte here
   26 D1:B09C -  -  -  -  debugram            .equ $D031F9        ;FA and FB occupied too.
   27 D1:B09C -  -  -  -  save_spl            .equ $D031FC        ;FD and FE occupied too.
   28 D1:B09C -  -  -  -  save_mbase          .equ $D031FF        ;
   29 D1:B09C -  -  -  -  vram_palette        .equ $D03200        ;64 bytes of color. It looks like itself
   30 D1:B09C -  -  -  -  core_memory_ix      .equ $D03280        ;IX range -128 to -64 already in use.
   31 D1:B09C -  -  -  -  scrap_mapping       .equ $D03300        ;256 bytes. maps to nowhere important.
   32 D1:B09C -  -  -  -  saferam1            .equ $D03400        ;1024 bytes available. Define later.
   33 D1:B09C -  -  -  -  main_ram            .equ $D03800        ;$0800 bytes of main system memory
   34 D1:B09C -  -  -  -  
   35 D1:B09C -  -  -  -  ZEROPAGE            .equ main_ram+(0*256)
   36 D1:B09C -  -  -  -  STACKBASE           .equ main_ram+(1*256)
   37 D1:B09C -  -  -  -  
   38 D1:B09C -  -  -  -  BASETABLE           .equ $D04000        ;variable size. 256*BASETABLE_STRIDE
   39 D1:B09C -  -  -  -  BASETABLE_STRIDE    .equ 12
   40 D1:B09C -  -  -  -  PAGETABLE_OFFSET    .equ 0
   41 D1:B09C -  -  -  -  PAGETABLE           .equ BASETABLE+PAGETABLE_OFFSET
   42 D1:B09C -  -  -  -  JUMPTABLE_OFFSET    .equ 4
   43 D1:B09C -  -  -  -  JUMPTABLE           .equ BASETABLE+JUMPTABLE_OFFSET
   44 D1:B09C -  -  -  -  USETABLE_OFFSET     .equ 8
   45 D1:B09C -  -  -  -  USETABLE            .equ BASETABLE+USETABLE_OFFSET
   46 D1:B09C -  -  -  -  
   47 D1:B09C -  -  -  -  NAMETABLE1          .equ BASETABLE+(512*BASETABLE_STRIDE)
   48 D1:B09C -  -  -  -  NAMETABLE2          .equ NAMETABLE1 + 1024  ;1024 BYTES
   49 D1:B09C -  -  -  -  OBJECT_ATTRIB_MEM   .equ NAMETABLE2 + 1024  ;256 BYTES
   50 D1:B09C -  -  -  -  
   51 D1:B09C -  -  -  -  ;
   52 D1:B09C -  -  -  -  ;saferam1 1024 bytes storage
   53 D1:B09C -  -  -  -  ;
   54 D1:B09C -  -  -  -  nametable00         .equ saferam1           ;4b Do not move these vars
   55 D1:B09C -  -  -  -  nametable01         .equ nametable00+4      ;4b
   56 D1:B09C -  -  -  -  nametable10         .equ nametable01+4      ;4b
   57 D1:B09C -  -  -  -  nametable11         .equ nametable10+4      ;4b
   58 D1:B09C -  -  -  -  nametable00_attrib  .equ nametable11+4      ;4b
   59 D1:B09C -  -  -  -  nametable01_attrib  .equ nametable00_attrib+4   ;4b
   60 D1:B09C -  -  -  -  nametable10_attrib  .equ nametable01_attrib+4   ;4b
   61 D1:B09C -  -  -  -  nametable11_attrib  .equ nametable10_attrib+4   ;4b
   62 D1:B09C -  -  -  -  chr_rom_tiles       .equ nametable11_attrib+4   ;4b
   63 D1:B09C -  -  -  -  chr_rom_sprites     .equ chr_rom_tiles+4    ;4b
   64 D1:B09C -  -  -  -  curScreenBuf        .equ chr_rom_sprites+4  ;4b
   65 D1:B09C -  -  -  -  linestart           .equ curScreenBuf+3     ;1b
   66 D1:B09C -  -  -  -  chr_rom_curbank     .equ linestart+1        ;3b Base used for PPU stuff.
   67 D1:B09C -  -  -  -  inputNumFiles       .equ chr_rom_curbank+3  ;1b
   68 D1:B09C -  -  -  -  basefile_sig        .equ inputNumFiles+1    ;3b pointer to 16b hash
   69 D1:B09C -  -  -  -  missing_files       .equ basefile_sig+3     ;1b
   70 D1:B09C -  -  -  -  total_rom_size      .equ missing_files+1    ;3b
   71 D1:B09C -  -  -  -  prg_rom_size        .equ total_rom_size+3   ;3b
   72 D1:B09C -  -  -  -  chr_rom_size        .equ prg_rom_size+3     ;3b
   73 D1:B09C -  -  -  -  submapper           .equ chr_rom_size+3     ;1b. iNES2 thing. Not often used.
   74 D1:B09C -  -  -  -  ines_flag_6         .equ submapper+1        ;1b. Flags that a mapper may need.
   75 D1:B09C -  -  -  -  mapper_id           .equ ines_flag_6+1      ;3b. Convenience load for 12 bits
   76 D1:B09C -  -  -  -  mapper_adr_base     .equ mapper_id+1        ;3b. Used to load mapper
   77 D1:B09C -  -  -  -  trainer_base        .equ mapper_adr_base+3  ;3b. If exist, starts here
   78 D1:B09C -  -  -  -  prg_rom_base        .equ mapper_adr_base+3  ;3b. Adjusted in case of trainer.
   79 D1:B09C -  -  -  -  chr_rom_base        .equ prg_rom_base+3     ;3b. Located somewhere.
   80 D1:B09C -  -  -  -  chr_rom_base_file   .equ chr_rom_base+3     ;1b. Nonzero if not in first file.
   81 D1:B09C -  -  -  -  ppu_smc_gate        .equ chr_rom_base_file+1 ;3b write address to ungate PPU
   82 D1:B09C -  -  -  -  timings_base        .equ ppu_smc_gate+3    ;3b. Current pointer to timings
   83 D1:B09C -  -  -  -  
   84 D1:B09C -  -  -  -  SIZEOF_INTEGRITY_HASH    .equ 16
   85 D1:B09C -  -  -  -  MAXPRGROM_HINIB     .equ 1
   86 D1:B09C -  -  -  -  MAXCHRROM_HINIB     .equ 3
   87 D1:B09C -  -  -  -  NUMBER_OF_MAPPERS   .equ 1
   88 D1:B09C -  -  -  -  MAPPER_STRIDE       .equ 9
   89 D1:B09C -  -  -  -  
   90 D1:B09C -  -  -  -  MAXNUMFILES         .equ 1                  ;set to 32 later. that's like 1.5MB
   91 D1:B09C -  -  -  -  FILETABLE_STRIDE    .equ 8
   92 D1:B09C -  -  -  -  FILETABLE           .equ timings_base+3   ;(MAXNUMFILES*FILETABLE_STRIDE)b
   93 D1:B09C -  -  -  -  FILE_SIZE_OFFSET    .equ 0
   94 D1:B09C -  -  -  -  FILE_ADR_OFFSET     .equ 2
   95 D1:B09C -  -  -  -  FILE_SIG_ADR_OFFSET .equ 5
   96 D1:B09C -  -  -  -  
   97 D1:B09C -  -  -  -  int_table_len       .equ FILETABLE+((MAXNUMFILES+1)*FILETABLE_STRIDE)
   98 D1:B09C -  -  -  -  INT_TABLE           .equ int_table_len+1
   99 D1:B09C -  -  -  -  INT_TABLE_MAXLEN    .equ 8
  100 D1:B09C -  -  -  -  INT_TABLE_STRIDE    .equ 6
  101 D1:B09C -  -  -  -  INT_ADDR_OFFSET     .equ 0
  102 D1:B09C -  -  -  -  INT_CYCLE_OFFSET    .equ 3
  103 D1:B09C -  -  -  -  
  104 D1:B09C -  -  -  -  
  105 D1:B09C -  -  -  -  
  106 D1:B09C -  -  -  -  ;
  107 D1:B09C -  -  -  -  ;
  108 D1:B09C -  -  -  -  ;
  109 D1:B09C -  -  -  -  ;
  110 D1:B09C -  -  -  -  #define WREG_CONST %01010101
  111 D1:B09C -  -  -  -  
  112 D1:B09C -  -  -  -  ;PPU default locations. Some are not used
  113 D1:B09C -  -  -  -  #define DEBUGCONTROL ($40-$80)
  114 D1:B09C -  -  -  -  #define PPU_CTRL -32
  115 D1:B09C -  -  -  -  #define PPU_MASK -31
  116 D1:B09C -  -  -  -  #define PPU_STATUS -30
  117 D1:B09C -  -  -  -  #define PPU_OAMADDR -29
  118 D1:B09C -  -  -  -  #define PPU_OAMDATA -28
  119 D1:B09C -  -  -  -  #define PPU_SCROLL -27
  120 D1:B09C -  -  -  -  #define PPU_ADDR -26
  121 D1:B09C -  -  -  -  #define PPU_DATA -25
  122 D1:B09C -  -  -  -  ;PPU internal stuff
  123 D1:B09C -  -  -  -  #define PPU_SUBCYCLE -15    ;0, 1, or 2.
  124 D1:B09C -  -  -  -  #define PPU_V -14           ;USED TO STORE VRAM ADDRESS (PPU ADDRESS SPACE)
  125 D1:B09C -  -  -  -  #define PPU_W -12           ;INTERNAL W REGISTER FOR HIGH/LOW BYTE PORT WRITES
  126 D1:B09C -  -  -  -  #define PPU_FRAMECOUNT -11  ;USED FOR EVEN/ODD
  127 D1:B09C -  -  -  -  #define PPU_NAMETABLE_PTR -10   ;Pointer cache
  128 D1:B09C -  -  -  -  #define PPU_VCOUNT -7
  129 D1:B09C -  -  -  -  #define PPU_HCOUNT -6
  130 D1:B09C -  -  -  -  #define PPU_TCOUNT -5
  131 D1:B09C -  -  -  -  #define PPU_XSCROLL -4  ;Should be constructed from PPU_SCROLL
  132 D1:B09C -  -  -  -  #define PPU_YSCROLL -3  ;
  133 D1:B09C -  -  -  -  #define APU_KEYPAD -2   ;First to last: A,B,SE,ST,UP,DO,LE,RI. 01234567.
  134 D1:B09C -  -  -  -  #define APU_KEYLATCH -1
  135 D1:B09C -  -  -  -  ;core memory
  136 D1:B09C -  -  -  -  #define REGA 0
  137 D1:B09C -  -  -  -  #define REGX 1
  138 D1:B09C -  -  -  -  #define REGY 2
  139 D1:B09C -  -  -  -  #define REGSP 3
  140 D1:B09C -  -  -  -  #define REGSR 4
  141 D1:B09C -  -  -  -  #define REGPC 5
  142 D1:B09C -  -  -  -  #define CYCLES_REMAIN 8
  143 D1:B09C -  -  -  -  #define CYCLES_CURRENT 11
  144 D1:B09C -  -  -  -  #define CURRENT_OPCODES 14
  145 D1:B09C -  -  -  -  #define CORE_STACK_BASE 17
  146 D1:B09C -  -  -  -  #define CORE_ERROR_LEVEL 20
  147 D1:B09C -  -  -  -  #define SCRAP_COUNTER 21
  148 D1:B09C -  -  -  -  #define PORT_WRITE_TIMESTAMP 24
  149 D1:B09C -  -  -  -  #define TEMP_MEMORY 27
  150 D1:B09C -  -  -  -  #define NMI_TRIGGERED 30 
  151 D1:B09C -  -  -  -  #define PREV_INSTR 31
  152 D1:B09C -  -  -  -  ;flag IDs
  153 D1:B09C -  -  -  -  #define SF_NEG 7
  154 D1:B09C -  -  -  -  #define SF_OVER 6 
  155 D1:B09C -  -  -  -  #define SF_RESERVED 5 
  156 D1:B09C -  -  -  -  #define SF_BRK 4
  157 D1:B09C -  -  -  -  #define SF_DEC 3
  158 D1:B09C -  -  -  -  #define SF_INT 2
  159 D1:B09C -  -  -  -  #define SF_ZERO 1
  160 D1:B09C -  -  -  -  #define SF_CARRY 0
  161 D1:B09C -  -  -  -  
  162 D1:B09C -  -  -  -  #macro ADDCYC(X)
  163 D1:B09C                 #if (x < 1)
  164 D1:B09C                     nop
  165 D1:B09C                 #elif (X = 1)
  166 D1:B09C                     inc iy
  167 D1:B09C                 #else
  168 D1:B09C                     lea iy,iy+X
  169 D1:B09C                 #endif
  170 D1:B09C             #endmacro
  171 D1:B09C -  -  -  -  
  172 D1:B09C -  -  -  -  ;
  173 D1:B09C -  -  -  -  ;
  174 D1:B09C -  -  -  -  ;
  175 D1:B09C -  -  -  -  #endif
  176 D1:B09C -  -  -  -  .list
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    3 D1:B09C -  -  -  -  
    4 D1:B09C -  -  -  -  ;Function list:
    5 D1:B09C -  -  -  -  ; fastCopy - Swaps drawing buffer to display what is currently written there.
    6 D1:B09C -  -  -  -  ; startGfx - Configures LCD to run in graphx mode. UNSAFE TO RUN MORE THAN ONCE
    7 D1:B09C -  -  -  -  ; stopGfx - Restores LCD configuration to TI-OS default.
    8 D1:B09C -  -  -  -  ; configureScreen - Swaps screen configuration betwen current and stored.
    9 D1:B09C -  -  -  -  ; setDefaultPalette - Sets default (XLIBC) color palette.
   10 D1:B09C -  -  -  -  ; clearTextBuf - no inputs. Sets text buffer to all spaces.
   11 D1:B09C -  -  -  -  ; printTextBuf - no inputs. Mirrors buffer to screen.
   12 D1:B09C -  -  -  -  ; setLineStart - A=xpos. Set xPos and linestart
   13 D1:B09C -  -  -  -  ; setCurLine - A=ypos. Set yPos.
   14 D1:B09C -  -  -  -  ; newLine - no inputs. sets linestart = xPos, increments yPos
   15 D1:B09C -  -  -  -  ; newPage - no inputs. sets linestart = xPos, yPos = 0
   16 D1:B09C -  -  -  -  ; printString - HL=address to string. destroys all.
   17 D1:B09C -  -  -  -  ; printBigFont - A=ASCII char to print at xPos,yPos. Advances xPos by 1.
   18 D1:B09C -  -  -  -  ; printSmallNumPair - A=0-255 to print at xPos,Ypos. Advances xPos by 1.
   19 D1:B09C -  -  -  -  ; calculateScreenPtr - Converts xPos,yPos into HL= screen buffer address.
   20 D1:B09C -  -  -  -  ; calculateScreenPtrDE - Converts E=xPos,D=yPos into HL= screen buffer address.
   21 D1:B09C -  -  -  -  ;
   22 D1:B09C -  -  -  -  ;
   23 D1:B09C -  -  -  -  ;
   24 D1:B09C -  -  -  -  ;
   25 D1:B09C -  -  -  -  ;
   26 D1:B09C -  -  -  -  ;
   27 D1:B09C -  -  -  -  ;
   28 D1:B09C -  -  -  -  
   29 D1:B09C -  -  -  -  
   30 D1:B09C -  -  -  -  
   31 D1:B09C -  -  -  -  
   32 D1:B09C -  -  -  -  ;-----------------------------------------------------------------------------
   33 D1:B09C -  -  -  -  ;Screen hardware interface stuff
   34 D1:B09C -  -  -  -  
   35 D1:B09C -  -  -  -  ;It ought to be called "bufSwap" but I just can't. I won't.
   36 D1:B09C -  -  -  -  fastCopy:
   37 D1:B09C 11 00 00 D4     ld  de,screenBuf1
   38 D1:B0A0 2A 10 00 E3     ld  hl,(mpLcdBase)
   39 D1:B0A4 22 28 34 D0     ld  (curScreenBuf),hl
   40 D1:B0A8 B7 -  -  -      or  a,a
   41 D1:B0A9 ED 52 -  -      sbc hl,de
   42 D1:B0AB EB -  -  -      ex  de,hl
   43 D1:B0AC 20 04 -  -      jr  nz,+_
   44 D1:B0AE 21 00 2C D5     ld  hl,screenBuf2
   45 D1:B0B2 22 10 00 E3 _:  ld  (mpLcdBase),hl
   46 D1:B0B6 C9 -  -  -      ret
   47 D1:B0B7 -  -  -  -  
   48 D1:B0B7 -  -  -  -  stopGfx:
   49 D1:B0B7 CD 74 03 00     call _boot_ClearVRAM
   50 D1:B0BB 11 2D 09 00     ld  de,lcdNormalMode
   51 D1:B0BF 01 00 00 D4     ld  bc,screenBuf1
   52 D1:B0C3 18 0C -  -      jr  configureScreen
   53 D1:B0C5 -  -  -  -  
   54 D1:B0C5 -  -  -  -  startGfx:
   55 D1:B0C5 CD 74 03 00     call _boot_ClearVRAM
   56 D1:B0C9 11 27 38 01     ld  de,lcdWatermark+lcdIntFront+lcdPwr+lcdBpp8 ;+lcdBgr
   57 D1:B0CD 01 00 00 D4     ld  bc,screenBuf1
   58 D1:B0D1 -  -  -  -  configureScreen:
   59 D1:B0D1 21 10 00 E3     ld  hl,mpLcdBase
   60 D1:B0D5 ED 0F -  -      ld  (hl),bc
   61 D1:B0D7 2E 18 -  -      ld  L,lcdCtrl
   62 D1:B0D9 ED 1F -  -      ld  (hl),de
   63 D1:B0DB 2E 01 -  -      ld  L,lcdTiming0 + 1
   64 D1:B0DD 01 08 00 00     ld  bc,8
   65 D1:B0E1 11 10 B1 D1     ld  de,screenSettings
   66 D1:B0E5 1A -  -  -  _:  ld  a,(de)
   67 D1:B0E6 ED A0 -  -      ldi
   68 D1:B0E8 2B -  -  -      dec hl
   69 D1:B0E9 77 -  -  -      ld  (hl),a
   70 D1:B0EA 23 -  -  -      inc hl
   71 D1:B0EB EA E5 B0 D1     jp  pe,-_
   72 D1:B0EF 21 00 2C D5     ld  hl,screenBuf2
   73 D1:B0F3 22 28 34 D0     ld  (curScreenBuf),hl
   74 D1:B0F7 -  -  -  -  ;Also copied from graphx
   75 D1:B0F7 -  -  -  -  setDefaultPalette:
   76 D1:B0F7 11 00 02 E3 	ld	de,mpLcdPalette	    ; address of mmio palette
   77 D1:B0FB 43 -  -  -  	ld	b,e			        ; b = 0
   78 D1:B0FC 78 -  -  -  _:	ld	a,b
   79 D1:B0FD 0F -  -  -  	rrca
   80 D1:B0FE A8 -  -  -  	xor	a,b
   81 D1:B0FF E6 E0 -  -  	and	a,224
   82 D1:B101 A8 -  -  -  	xor	a,b
   83 D1:B102 12 -  -  -  	ld	(de),a
   84 D1:B103 13 -  -  -  	inc	de
   85 D1:B104 78 -  -  -  	ld	a,b
   86 D1:B105 17 -  -  -  	rla
   87 D1:B106 17 -  -  -  	rla
   88 D1:B107 17 -  -  -  	rla
   89 D1:B108 78 -  -  -  	ld	a,b
   90 D1:B109 1F -  -  -  	rra
   91 D1:B10A 12 -  -  -  	ld	(de),a
   92 D1:B10B 13 -  -  -  	inc	de
   93 D1:B10C 04 -  -  -  	inc	b
   94 D1:B10D 20 ED -  -  	jr	nz,-_		    ; loop for 256 times to fill palette
   95 D1:B10F C9 -  -  -  	ret
   96 D1:B110 -  -  -  -  
   97 D1:B110 -  -  -  -  screenSettings:
   98 D1:B110 -  -  -  -  ;Copied from my old Falldown2 project, which was also copied from graphx.asm
   99 D1:B110 -  -  -  -  ;	.db	14 shl 2			; PPL shl 2
  100 D1:B110 07 -  -  -  	.db	7					; HSW
  101 D1:B111 57 -  -  -  	.db	87					; HFP
  102 D1:B112 3F -  -  -  	.db	63					; HBP
  103 D1:B113 3F 01 -  -  	.dw	(0 >> 10)+319		; (VSW shl 10)+LPP
  104 D1:B115 B3 -  -  -  	.db	179					; VFP
  105 D1:B116 00 -  -  -  	.db	0					; VBP
  106 D1:B117 00 -  -  -  	.db	(0 >> 6)+(0 >> 5)+0	; (ACB shl 6)+(CLKSEL shl 5)+PCD_LO
  107 D1:B118 -  -  -  -  ;  H = ((PPL+1)*16)+(HSW+1)+(HFP+1)+(HBP+1) = 240+8+88+64 = 400
  108 D1:B118 -  -  -  -  ;  V = (LPP+1)+(VSW+1)+VFP+VBP = 320+1+179+0 = 500
  109 D1:B118 -  -  -  -  ; CC = H*V*PCD*2 = 400*500*2*2 = 800000
  110 D1:B118 -  -  -  -  ; Hz = 48000000/CC = 60
  111 D1:B118 -  -  -  -  
  112 D1:B118 -  -  -  -  
  113 D1:B118 -  -  -  -  ;-----------------------------------------------------------------------------
  114 D1:B118 -  -  -  -  ; Text Rendering
  115 D1:B118 -  -  -  -  
  116 D1:B118 -  -  -  -  clearTextBuf:
  117 D1:B118 21 00 58 D0     ld  hl,NAMETABLE1
  118 D1:B11C 11 01 58 D0     ld  de,NAMETABLE1+1
  119 D1:B120 01 FF 03 00     ld  bc,1023
  120 D1:B124 36 20 -  -      ld  (hl),' '
  121 D1:B126 ED B0 -  -      ldir
  122 D1:B128 C9 -  -  -      ret
  123 D1:B129 -  -  -  -  
  124 D1:B129 -  -  -  -  printTextBuf:
  125 D1:B129 2A F6 31 D0     ld  hl,(xPos)
  126 D1:B12D 22 5D B1 D1     ld  (printTextBuf_smcPosRecovery),hl
  127 D1:B131 21 00 58 D0     ld  hl,NAMETABLE1
  128 D1:B135 AF -  -  -      xor a,a
  129 D1:B136 32 F7 31 D0     ld  (yPos),a
  130 D1:B13A 0E 1E -  -      ld  c,30
  131 D1:B13C 3E 08 -  -  _:  ld  a,8
  132 D1:B13E 32 F6 31 D0     ld  (xPos),a
  133 D1:B142 06 20 -  -      ld  b,$20
  134 D1:B144 7E -  -  -  _:  ld  a,(hl)
  135 D1:B145 23 -  -  -      inc hl
  136 D1:B146 C5 -  -  -      push bc
  137 D1:B147 E5 -  -  -          push hl
  138 D1:B148 CD A6 B1 D1             call printBigFont
  139 D1:B14C E1 -  -  -          pop hl
  140 D1:B14D C1 -  -  -      pop bc
  141 D1:B14E 10 F4 -  -      djnz -_
  142 D1:B150 3A F7 31 D0     ld  a,(yPos)
  143 D1:B154 3C -  -  -      inc a
  144 D1:B155 32 F7 31 D0     ld  (yPos),a
  145 D1:B159 0D -  -  -      dec  c
  146 D1:B15A 20 E0 -  -      jr  nz,--_
  147 D1:B15C -  -  -  -  printTextBuf_smcPosRecovery .equ $+1
  148 D1:B15C 21 00 00 00     ld  hl,0
  149 D1:B160 22 F6 31 D0     ld  (xPos),hl
  150 D1:B164 C9 -  -  -      ret
  151 D1:B165 -  -  -  -  
  152 D1:B165 -  -  -  -  ;A=column to start on
  153 D1:B165 -  -  -  -  setLineStart:
  154 D1:B165 32 F6 31 D0     ld  (xPos),a
  155 D1:B169 32 2B 34 D0     ld  (linestart),a
  156 D1:B16D C9 -  -  -      ret
  157 D1:B16E -  -  -  -  
  158 D1:B16E -  -  -  -  ;A=row to start on
  159 D1:B16E -  -  -  -  setCurLine:
  160 D1:B16E 32 F7 31 D0     ld  (yPos),a
  161 D1:B172 C9 -  -  -      ret
  162 D1:B173 -  -  -  -  
  163 D1:B173 -  -  -  -  newPage:
  164 D1:B173 3E FF -  -      ld  a,$FF
  165 D1:B175 32 F7 31 D0     ld  (yPos),a
  166 D1:B179 -  -  -  -  newLine:
  167 D1:B179 3A 2B 34 D0     ld  a,(linestart)
  168 D1:B17D 32 F6 31 D0     ld  (xPos),a
  169 D1:B181 3A F7 31 D0     ld  a,(yPos)
  170 D1:B185 3C -  -  -      inc a
  171 D1:B186 FE 1E -  -      cp  30
  172 D1:B188 38 01 -  -      jr  c,+_
  173 D1:B18A AF -  -  -      xor a,a
  174 D1:B18B 32 F7 31 D0 _:  ld  (yPos),a
  175 D1:B18F C9 -  -  -      ret
  176 D1:B190 -  -  -  -  
  177 D1:B190 -  -  -  -      
  178 D1:B190 -  -  -  -      
  179 D1:B190 -  -  -  -  
  180 D1:B190 -  -  -  -  ;HL=address to string
  181 D1:B190 -  -  -  -  printString:
  182 D1:B190 7E -  -  -      ld  a,(hl)
  183 D1:B191 23 -  -  -      inc hl
  184 D1:B192 B7 -  -  -      or  a,a
  185 D1:B193 C8 -  -  -      ret z
  186 D1:B194 FE 0A -  -      cp  a,'\n'
  187 D1:B196 20 06 -  -      jr nz,+_
  188 D1:B198 CD 79 B1 D1     call newLine
  189 D1:B19C 18 F2 -  -      jr  printString
  190 D1:B19E E5 -  -  -  _:  push hl
  191 D1:B19F CD A6 B1 D1         call printBigFont
  192 D1:B1A3 E1 -  -  -      pop hl
  193 D1:B1A4 18 EA -  -      jr printString
  194 D1:B1A6 -  -  -  -  
  195 D1:B1A6 -  -  -  -  
  196 D1:B1A6 -  -  -  -  ;in: A=chrToPrint
  197 D1:B1A6 -  -  -  -  printBigFont:
  198 D1:B1A6 CD 3B B2 D1     call calculateScreenPtr
  199 D1:B1AA EB -  -  -      ex  de,hl
  200 D1:B1AB 6F -  -  -      ld  L,a
  201 D1:B1AC 26 08 -  -      ld  H,8
  202 D1:B1AE ED 6C -  -      mlt hl
  203 D1:B1B0 01 55 B1 D1     ld  bc,graphx_textdata
  204 D1:B1B4 09 -  -  -      add hl,bc
  205 D1:B1B5 EB -  -  -      ex  de,hl
  206 D1:B1B6 0E 08 -  -      ld  c,8
  207 D1:B1B8 06 08 -  -  _:  ld  b,8
  208 D1:B1BA 1A -  -  -      ld  a,(de)
  209 D1:B1BB 87 -  -  -  _:  add a,a
  210 D1:B1BC -  -  -  -  fontBGColor_var .equ $+1
  211 D1:B1BC 36 00 -  -      ld  (hl),FONTBGCOLOR
  212 D1:B1BE 30 02 -  -      jr  nc,$+4
  213 D1:B1C0 -  -  -  -  fontFGColor_var .equ $+1
  214 D1:B1C0 36 FF -  -      ld  (hl),FONTFGCOLOR
  215 D1:B1C2 23 -  -  -      inc hl
  216 D1:B1C3 10 F6 -  -      djnz -_
  217 D1:B1C5 79 -  -  -      ld  a,c
  218 D1:B1C6 01 38 01 00     ld  bc,320-8
  219 D1:B1CA 09 -  -  -      add hl,bc
  220 D1:B1CB 4F -  -  -      ld  c,a
  221 D1:B1CC 13 -  -  -      inc de
  222 D1:B1CD 0D -  -  -      dec c
  223 D1:B1CE 20 E8 -  -      jr  nz,--_
  224 D1:B1D0 21 F6 31 D0     ld  hl,xPos
  225 D1:B1D4 34 -  -  -      inc (hl)
  226 D1:B1D5 C9 -  -  -      ret
  227 D1:B1D6 -  -  -  -  
  228 D1:B1D6 -  -  -  -  ;A= 0-255 numeric value to display as hex
  229 D1:B1D6 -  -  -  -  printSmallNumPair:
  230 D1:B1D6 CD 3B B2 D1     call calculateScreenPtr
  231 D1:B1DA F5 -  -  -      push af
  232 D1:B1DB 1F -  -  -          rra
  233 D1:B1DC 1F -  -  -          rra
  234 D1:B1DD 1F -  -  -          rra
  235 D1:B1DE 1F -  -  -          rra
  236 D1:B1DF CD EE B1 D1         call +_
  237 D1:B1E3 F1 -  -  -      pop af
  238 D1:B1E4 CD EE B1 D1     call +_
  239 D1:B1E8 21 F6 31 D0     ld  hl,xPos
  240 D1:B1EC 34 -  -  -      inc (hl)
  241 D1:B1ED C9 -  -  -      ret
  242 D1:B1EE E6 0F -  -  _:  and a,$0F
  243 D1:B1F0 01 40 01 00     ld  bc,320
  244 D1:B1F4 09 -  -  -      add hl,bc   ;drop height by one. These small chars are *short*
  245 D1:B1F5 EB -  -  -      ex  de,hl
  246 D1:B1F6 6F -  -  -      ld  L,a
  247 D1:B1F7 26 03 -  -      ld  H,3
  248 D1:B1F9 ED 6C -  -      mlt hl
  249 D1:B1FB 01 55 B5 D1     ld  bc,SmallHexFont
  250 D1:B1FF 09 -  -  -      add hl,bc
  251 D1:B200 EB -  -  -      ex  de,hl
  252 D1:B201 0E 03 -  -      ld  c,3
  253 D1:B203 18 14 -  -      jr  printSmallNumPair_2ndHalf
  254 D1:B205 -  -  -  -  printSmallNumPair_1stHalf:
  255 D1:B205 1A -  -  -      ld  a,(de)
  256 D1:B206 06 04 -  -      ld  b,4
  257 D1:B208 87 -  -  -  _:  add a,a
  258 D1:B209 -  -  -  -  smallFontBGColor_var .equ $+1
  259 D1:B209 36 00 -  -      ld  (hl),FONTBGCOLOR
  260 D1:B20B 30 02 -  -      jr  nc,$+4
  261 D1:B20D -  -  -  -  smallFontFGColor_var .equ $+1
  262 D1:B20D 36 FF -  -      ld  (hl),FONTFGCOLOR
  263 D1:B20F 23 -  -  -      inc hl
  264 D1:B210 10 F6 -  -      djnz -_
  265 D1:B212 79 -  -  -      ld  a,c
  266 D1:B213 01 3C 01 00     ld  bc,320-4
  267 D1:B217 09 -  -  -      add hl,bc
  268 D1:B218 4F -  -  -      ld  c,a
  269 D1:B219 -  -  -  -  printSmallNumPair_2ndHalf:
  270 D1:B219 1A -  -  -      ld  a,(de)
  271 D1:B21A 07 -  -  -      rlca
  272 D1:B21B 07 -  -  -      rlca
  273 D1:B21C 07 -  -  -      rlca
  274 D1:B21D 07 -  -  -      rlca
  275 D1:B21E 06 04 -  -      ld  b,4
  276 D1:B220 87 -  -  -  _:  add a,a
  277 D1:B221 36 00 -  -      ld  (hl),FONTBGCOLOR
  278 D1:B223 30 02 -  -      jr  nc,$+4
  279 D1:B225 36 FF -  -      ld  (hl),FONTFGCOLOR
  280 D1:B227 23 -  -  -      inc hl
  281 D1:B228 10 F6 -  -      djnz -_
  282 D1:B22A 13 -  -  -      inc de
  283 D1:B22B 79 -  -  -      ld  a,c
  284 D1:B22C 01 3C 01 00     ld  bc,320-4
  285 D1:B230 09 -  -  -      add hl,bc
  286 D1:B231 4F -  -  -      ld  c,a
  287 D1:B232 0D -  -  -      dec c
  288 D1:B233 20 D0 -  -      jr  nz,printSmallNumPair_1stHalf
  289 D1:B235 01 84 F8 FF     ld  bc,-(320*(1+5))+4
  290 D1:B239 09 -  -  -      add hl,bc
  291 D1:B23A C9 -  -  -      ret
  292 D1:B23B -  -  -  -  
  293 D1:B23B -  -  -  -  calculateScreenPtr:
  294 D1:B23B -  -  -  -      ;xcoord: x * 8 
  295 D1:B23B -  -  -  -      ;ycoord: 320 * 8 * y
  296 D1:B23B -  -  -  -      ;coord: (8x)+320*8y -> 8(x+320y)
  297 D1:B23B ED 5B F6 31 
              D0 -  -  -      ld  de,(xPos)
  298 D1:B240 -  -  -  -  calculateScreenPtrDE:
  299 D1:B240 6A -  -  -      ld  L,d     ;yPos
  300 D1:B241 26 A0 -  -      ld  h,160
  301 D1:B243 ED 6C -  -      mlt hl
  302 D1:B245 29 -  -  -      add hl,hl
  303 D1:B246 16 01 -  -      ld  d,1
  304 D1:B248 ED 5C -  -      mlt de      ;DE=E. Clears high bytes.
  305 D1:B24A 19 -  -  -      add hl,de
  306 D1:B24B 29 -  -  -      add hl,hl
  307 D1:B24C 29 -  -  -      add hl,hl
  308 D1:B24D 29 -  -  -      add hl,hl
  309 D1:B24E ED 5B 28 34 
              D0 -  -  -      ld  de,(curScreenBuf)
  310 D1:B253 19 -  -  -      add hl,de
  311 D1:B254 C9 -  -  -      ret
  312 D1:B255 -  -  -  -  
  313 D1:B255 -  -  -  -  
  314 D1:B255 -  -  -  -  
  315 D1:B255 -  -  -  -  
  316 D1:B255 -  -  -  -  
  317 D1:B255 -  -  -  -  
  318 D1:B255 -  -  -  -  
  319 D1:B255 -  -  -  -  
  320 D1:B255 -  -  -  -  
  321 D1:B255 -  -  -  -  ;-----------------------------------------------------------------------------
  322 D1:B255 -  -  -  -  ; Data Section
  323 D1:B255 -  -  -  -  
  324 D1:B255 -  -  -  -  graphx_textdata		.EQU $-(8*' ')		;points to what would be start of ASCII
  325 D1:B255 00 00 00 00 
              00 00 00 00 .db	$00,$00,$00,$00,$00,$00,$00,$00 ;
  326 D1:B25D C0 C0 C0 C0 
              C0 00 C0 00 .db	$C0,$C0,$C0,$C0,$C0,$00,$C0,$00 ; !
  327 D1:B265 D8 D8 D8 00 
              00 00 00 00 .db	$D8,$D8,$D8,$00,$00,$00,$00,$00 ; "
  328 D1:B26D 6C 6C FE 6C 
              FE 6C 6C 00 .db	$6C,$6C,$FE,$6C,$FE,$6C,$6C,$00 ; #
  329 D1:B275 18 7E C0 7C 
              06 FC 18 00 .db	$18,$7E,$C0,$7C,$06,$FC,$18,$00 ; $
  330 D1:B27D 00 C6 CC 18 
              30 66 C6 00 .db	$00,$C6,$CC,$18,$30,$66,$C6,$00 ; %
  331 D1:B285 38 6C 38 76 
              DC CC 76 00 .db	$38,$6C,$38,$76,$DC,$CC,$76,$00 ; &
  332 D1:B28D 30 30 60 00 
              00 00 00 00 .db	$30,$30,$60,$00,$00,$00,$00,$00 ; '
  333 D1:B295 30 60 C0 C0 
              C0 60 30 00 .db	$30,$60,$C0,$C0,$C0,$60,$30,$00 ; (
  334 D1:B29D C0 60 30 30 
              30 60 C0 00 .db	$C0,$60,$30,$30,$30,$60,$C0,$00 ; )
  335 D1:B2A5 00 66 3C FF 
              3C 66 00 00 .db	$00,$66,$3C,$FF,$3C,$66,$00,$00 ; *
  336 D1:B2AD 00 30 30 FC 
              FC 30 30 00 .db	$00,$30,$30,$FC,$FC,$30,$30,$00 ; +
  337 D1:B2B5 00 00 00 00 
              00 60 60 C0 .db	$00,$00,$00,$00,$00,$60,$60,$C0 ; ,
  338 D1:B2BD 00 00 00 FC 
              00 00 00 00 .db	$00,$00,$00,$FC,$00,$00,$00,$00 ; -
  339 D1:B2C5 00 00 00 00 
              00 C0 C0 00 .db	$00,$00,$00,$00,$00,$C0,$C0,$00 ; .
  340 D1:B2CD 06 0C 18 30 
              60 C0 80 00 .db	$06,$0C,$18,$30,$60,$C0,$80,$00 ; /
  341 D1:B2D5 7C CE DE F6 
              E6 C6 7C 00 .db	$7C,$CE,$DE,$F6,$E6,$C6,$7C,$00 ; 0
  342 D1:B2DD 30 70 30 30 
              30 30 FC 00 .db	$30,$70,$30,$30,$30,$30,$FC,$00 ; 1
  343 D1:B2E5 7C C6 06 7C 
              C0 C0 FE 00 .db	$7C,$C6,$06,$7C,$C0,$C0,$FE,$00 ; 2
  344 D1:B2ED FC 06 06 3C 
              06 06 FC 00 .db	$FC,$06,$06,$3C,$06,$06,$FC,$00 ; 3
  345 D1:B2F5 0C CC CC CC 
              FE 0C 0C 00 .db	$0C,$CC,$CC,$CC,$FE,$0C,$0C,$00 ; 4
  346 D1:B2FD FE C0 FC 06 
              06 C6 7C 00 .db	$FE,$C0,$FC,$06,$06,$C6,$7C,$00 ; 5
  347 D1:B305 7C C0 C0 FC 
              C6 C6 7C 00 .db	$7C,$C0,$C0,$FC,$C6,$C6,$7C,$00 ; 6
  348 D1:B30D FE 06 06 0C 
              18 30 30 00 .db	$FE,$06,$06,$0C,$18,$30,$30,$00 ; 7
  349 D1:B315 7C C6 C6 7C 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$7C,$C6,$C6,$7C,$00 ; 8
  350 D1:B31D 7C C6 C6 7E 
              06 06 7C 00 .db	$7C,$C6,$C6,$7E,$06,$06,$7C,$00 ; 9
  351 D1:B325 00 C0 C0 00 
              00 C0 C0 00 .db	$00,$C0,$C0,$00,$00,$C0,$C0,$00 ; :
  352 D1:B32D 00 60 60 00 
              00 60 60 C0 .db	$00,$60,$60,$00,$00,$60,$60,$C0 ; ;
  353 D1:B335 18 30 60 C0 
              60 30 18 00 .db	$18,$30,$60,$C0,$60,$30,$18,$00 ; <
  354 D1:B33D 00 00 FC 00 
              FC 00 00 00 .db	$00,$00,$FC,$00,$FC,$00,$00,$00 ; =
  355 D1:B345 C0 60 30 18 
              30 60 C0 00 .db	$C0,$60,$30,$18,$30,$60,$C0,$00 ; >
  356 D1:B34D 78 CC 18 30 
              30 00 30 00 .db	$78,$CC,$18,$30,$30,$00,$30,$00 ; ?
  357 D1:B355 7C C6 DE DE 
              DE C0 7E 00 .db	$7C,$C6,$DE,$DE,$DE,$C0,$7E,$00 ; @
  358 D1:B35D 38 6C C6 C6 
              FE C6 C6 00 .db	$38,$6C,$C6,$C6,$FE,$C6,$C6,$00 ; A
  359 D1:B365 FC C6 C6 FC 
              C6 C6 FC 00 .db	$FC,$C6,$C6,$FC,$C6,$C6,$FC,$00 ; B
  360 D1:B36D 7C C6 C0 C0 
              C0 C6 7C 00 .db	$7C,$C6,$C0,$C0,$C0,$C6,$7C,$00 ; C
  361 D1:B375 F8 CC C6 C6 
              C6 CC F8 00 .db	$F8,$CC,$C6,$C6,$C6,$CC,$F8,$00 ; D
  362 D1:B37D FE C0 C0 F8 
              C0 C0 FE 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$FE,$00 ; E
  363 D1:B385 FE C0 C0 F8 
              C0 C0 C0 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$C0,$00 ; F
  364 D1:B38D 7C C6 C0 C0 
              CE C6 7C 00 .db	$7C,$C6,$C0,$C0,$CE,$C6,$7C,$00 ; G
  365 D1:B395 C6 C6 C6 FE 
              C6 C6 C6 00 .db	$C6,$C6,$C6,$FE,$C6,$C6,$C6,$00 ; H
  366 D1:B39D 7E 18 18 18 
              18 18 7E 00 .db	$7E,$18,$18,$18,$18,$18,$7E,$00 ; I
  367 D1:B3A5 06 06 06 06 
              06 C6 7C 00 .db	$06,$06,$06,$06,$06,$C6,$7C,$00 ; J
  368 D1:B3AD C6 CC D8 F0 
              D8 CC C6 00 .db	$C6,$CC,$D8,$F0,$D8,$CC,$C6,$00 ; K
  369 D1:B3B5 C0 C0 C0 C0 
              C0 C0 FE 00 .db	$C0,$C0,$C0,$C0,$C0,$C0,$FE,$00 ; L
  370 D1:B3BD C6 EE FE FE 
              D6 C6 C6 00 .db	$C6,$EE,$FE,$FE,$D6,$C6,$C6,$00 ; M
  371 D1:B3C5 C6 E6 F6 DE 
              CE C6 C6 00 .db	$C6,$E6,$F6,$DE,$CE,$C6,$C6,$00 ; N
  372 D1:B3CD 7C C6 C6 C6 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$C6,$C6,$C6,$7C,$00 ; O
  373 D1:B3D5 FC C6 C6 FC 
              C0 C0 C0 00 .db	$FC,$C6,$C6,$FC,$C0,$C0,$C0,$00 ; P
  374 D1:B3DD 7C C6 C6 C6 
              D6 DE 7C 06 .db	$7C,$C6,$C6,$C6,$D6,$DE,$7C,$06 ; Q
  375 D1:B3E5 FC C6 C6 FC 
              D8 CC C6 00 .db	$FC,$C6,$C6,$FC,$D8,$CC,$C6,$00 ; R
  376 D1:B3ED 7C C6 C0 7C 
              06 C6 7C 00 .db	$7C,$C6,$C0,$7C,$06,$C6,$7C,$00 ; S
  377 D1:B3F5 FF 18 18 18 
              18 18 18 00 .db	$FF,$18,$18,$18,$18,$18,$18,$00 ; T
  378 D1:B3FD C6 C6 C6 C6 
              C6 C6 FE 00 .db	$C6,$C6,$C6,$C6,$C6,$C6,$FE,$00 ; U
  379 D1:B405 C6 C6 C6 C6 
              C6 7C 38 00 .db	$C6,$C6,$C6,$C6,$C6,$7C,$38,$00 ; V
  380 D1:B40D C6 C6 C6 C6 
              D6 FE 6C 00 .db	$C6,$C6,$C6,$C6,$D6,$FE,$6C,$00 ; W
  381 D1:B415 C6 C6 6C 38 
              6C C6 C6 00 .db	$C6,$C6,$6C,$38,$6C,$C6,$C6,$00 ; X
  382 D1:B41D C6 C6 C6 7C 
              18 30 E0 00 .db	$C6,$C6,$C6,$7C,$18,$30,$E0,$00 ; Y
  383 D1:B425 FE 06 0C 18 
              30 60 FE 00 .db	$FE,$06,$0C,$18,$30,$60,$FE,$00 ; Z
  384 D1:B42D F0 C0 C0 C0 
              C0 C0 F0 00 .db	$F0,$C0,$C0,$C0,$C0,$C0,$F0,$00 ; [
  385 D1:B435 C0 60 30 18 
              0C 06 02 00 .db	$C0,$60,$30,$18,$0C,$06,$02,$00 ; \
  386 D1:B43D F0 30 30 30 
              30 30 F0 00 .db	$F0,$30,$30,$30,$30,$30,$F0,$00 ; ]
  387 D1:B445 10 38 6C C6 
              00 00 00 00 .db	$10,$38,$6C,$C6,$00,$00,$00,$00 ; ^
  388 D1:B44D 00 00 00 00 
              00 00 00 FF .db	$00,$00,$00,$00,$00,$00,$00,$FF ; _
  389 D1:B455 C0 C0 60 00 
              00 00 00 00 .db	$C0,$C0,$60,$00,$00,$00,$00,$00 ; `
  390 D1:B45D 00 00 7C 06 
              7E C6 7E 00 .db	$00,$00,$7C,$06,$7E,$C6,$7E,$00 ; a
  391 D1:B465 C0 C0 C0 FC 
              C6 C6 FC 00 .db	$C0,$C0,$C0,$FC,$C6,$C6,$FC,$00 ; b
  392 D1:B46D 00 00 7C C6 
              C0 C6 7C 00 .db	$00,$00,$7C,$C6,$C0,$C6,$7C,$00 ; c
  393 D1:B475 06 06 06 7E 
              C6 C6 7E 00 .db	$06,$06,$06,$7E,$C6,$C6,$7E,$00 ; d
  394 D1:B47D 00 00 7C C6 
              FE C0 7C 00 .db	$00,$00,$7C,$C6,$FE,$C0,$7C,$00 ; e
  395 D1:B485 1C 36 30 78 
              30 30 78 00 .db	$1C,$36,$30,$78,$30,$30,$78,$00 ; f
  396 D1:B48D 00 00 7E C6 
              C6 7E 06 FC .db	$00,$00,$7E,$C6,$C6,$7E,$06,$FC ; g
  397 D1:B495 C0 C0 FC C6 
              C6 C6 C6 00 .db	$C0,$C0,$FC,$C6,$C6,$C6,$C6,$00 ; h
  398 D1:B49D 18 00 38 18 
              18 18 3C 00 .db	$18,$00,$38,$18,$18,$18,$3C,$00 ; i
  399 D1:B4A5 06 00 06 06 
              06 06 C6 7C .db	$06,$00,$06,$06,$06,$06,$C6,$7C ; j
  400 D1:B4AD C0 C0 CC D8 
              F8 CC C6 00 .db	$C0,$C0,$CC,$D8,$F8,$CC,$C6,$00 ; k
  401 D1:B4B5 38 18 18 18 
              18 18 3C 00 .db	$38,$18,$18,$18,$18,$18,$3C,$00 ; l
  402 D1:B4BD 00 00 CC FE 
              FE D6 D6 00 .db	$00,$00,$CC,$FE,$FE,$D6,$D6,$00 ; m
  403 D1:B4C5 00 00 FC C6 
              C6 C6 C6 00 .db	$00,$00,$FC,$C6,$C6,$C6,$C6,$00 ; n
  404 D1:B4CD 00 00 7C C6 
              C6 C6 7C 00 .db	$00,$00,$7C,$C6,$C6,$C6,$7C,$00 ; o
  405 D1:B4D5 00 00 FC C6 
              C6 FC C0 C0 .db	$00,$00,$FC,$C6,$C6,$FC,$C0,$C0 ; p
  406 D1:B4DD 00 00 7E C6 
              C6 7E 06 06 .db	$00,$00,$7E,$C6,$C6,$7E,$06,$06 ; q
  407 D1:B4E5 00 00 FC C6 
              C0 C0 C0 00 .db	$00,$00,$FC,$C6,$C0,$C0,$C0,$00 ; r
  408 D1:B4ED 00 00 7E C0 
              7C 06 FC 00 .db	$00,$00,$7E,$C0,$7C,$06,$FC,$00 ; s
  409 D1:B4F5 30 30 FC 30 
              30 30 1C 00 .db	$30,$30,$FC,$30,$30,$30,$1C,$00 ; t
  410 D1:B4FD 00 00 C6 C6 
              C6 C6 7E 00 .db	$00,$00,$C6,$C6,$C6,$C6,$7E,$00 ; u
  411 D1:B505 00 00 C6 C6 
              C6 7C 38 00 .db	$00,$00,$C6,$C6,$C6,$7C,$38,$00 ; v
  412 D1:B50D 00 00 C6 C6 
              D6 FE 6C 00 .db	$00,$00,$C6,$C6,$D6,$FE,$6C,$00 ; w
  413 D1:B515 00 00 C6 6C 
              38 6C C6 00 .db	$00,$00,$C6,$6C,$38,$6C,$C6,$00 ; x
  414 D1:B51D 00 00 C6 C6 
              C6 7E 06 FC .db	$00,$00,$C6,$C6,$C6,$7E,$06,$FC ; y
  415 D1:B525 00 00 FE 0C 
              38 60 FE 00 .db	$00,$00,$FE,$0C,$38,$60,$FE,$00 ; z
  416 D1:B52D 1C 30 30 E0 
              30 30 1C 00 .db	$1C,$30,$30,$E0,$30,$30,$1C,$00 ; {
  417 D1:B535 C0 C0 C0 00 
              C0 C0 C0 00 .db	$C0,$C0,$C0,$00,$C0,$C0,$C0,$00 ; |
  418 D1:B53D E0 30 30 1C 
              30 30 E0 00 .db	$E0,$30,$30,$1C,$30,$30,$E0,$00 ; }
  419 D1:B545 76 DC 00 00 
              00 00 00 00 .db	$76,$DC,$00,$00,$00,$00,$00,$00 ; ~
  420 D1:B54D 00 10 38 6C 
              C6 C6 FE 00 .db	$00,$10,$38,$6C,$C6,$C6,$FE,$00 ; △
  421 D1:B555 -  -  -  -  
  422 D1:B555 -  -  -  -  ;Copied from the Escheron: Twilight over Ragnoth project
  423 D1:B555 -  -  -  -  ;whose format was copied from a (then-)authorized source
  424 D1:B555 -  -  -  -  ;for DoorsCS (I think? The one for the 83+) by "Kerm Martian".
  425 D1:B555 -  -  -  -  SmallHexFont:
  426 D1:B555 4E AA AE -  .db $4E,$AA,$AE				;zero
  427 D1:B558 44 C4 4E -  .db $44,$C4,$4E				;one
  428 D1:B55B 4C 24 8E -  .db $4C,$24,$8E				;two
  429 D1:B55E 4C 24 2C -  .db $4C,$24,$2C				;three
  430 D1:B561 48 AE 22 -  .db $48,$AE,$22				;four
  431 D1:B564 4E 8C 2C -  .db $4E,$8C,$2C				;five
  432 D1:B567 46 8E AE -  .db $46,$8E,$AE				;six
  433 D1:B56A 4E 24 88 -  .db $4E,$24,$88				;seven
  434 D1:B56D 4E AE AE -  .db $4E,$AE,$AE				;eight
  435 D1:B570 4E AE 2C -  .db $4E,$AE,$2C				;nine
  436 D1:B573 44 AE AA -  .db $44,$AE,$AA				;A
  437 D1:B576 4C AC AC -  .db $4C,$AC,$AC				;B
  438 D1:B579 46 88 86 -  .db $46,$88,$86				;C
  439 D1:B57C 4C AA AC -  .db $4C,$AA,$AC				;D
  440 D1:B57F 4E 8C 8E -  .db $4E,$8C,$8E				;E
  441 D1:B582 4E 8C 88 -  .db $4E,$8C,$88				;F
  442 D1:B585 -  -  -  -  
  443 D1:B585 -  -  -  -  
  444 D1:B585 -  -  -  -  
Listing for file "main.z80"
  971 D1:B585 -  -  -  -  #include "coreint.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\coreint.z80"
    1 D1:B585 -  -  -  -  ; Code to handle interrup servicer. Note: This hinges on 
    2 D1:B585 -  -  -  -  ; PPU timing, so some of its initilization code will end up here too.
    3 D1:B585 -  -  -  -  ;
    4 D1:B585 -  -  -  -  
    5 D1:B585 -  -  -  -  
    6 D1:B585 -  -  -  -  ;This routine is called after the end of every insert/push/pop operation
    7 D1:B585 -  -  -  -  int6502_updateIntCounter:
    8 D1:B585 21 60 34 D0     ld  hl,int_table_len
    9 D1:B589 7E -  -  -      ld  a,(hl)
   10 D1:B58A B7 -  -  -      or  a,a
   11 D1:B58B C8 -  -  -      ret z
   12 D1:B58C 23 -  -  -      inc hl  ;advance to first pointer
   13 D1:B58D 23 -  -  -      inc hl
   14 D1:B58E 23 -  -  -      inc hl
   15 D1:B58F 23 -  -  -      inc hl  ;advanced to first time
   16 D1:B590 ED 27 -  -      ld  hl,(hl)
   17 D1:B592 -  -  -  -      ;neg hl
   18 D1:B592 DD 2F 1B -      ld  (ix+TEMP_MEMORY),hl
   19 D1:B595 DD 7E 1D -      ld  a,(ix+TEMP_MEMORY+2)
   20 D1:B598 2F -  -  -      cpl
   21 D1:B599 DD 77 1D -      ld  (ix+TEMP_MEMORY+2),a
   22 D1:B59C DD 27 1B -      ld  hl,(ix+TEMP_MEMORY)
   23 D1:B59F 7D -  -  -      ld  a,l
   24 D1:B5A0 2F -  -  -      cpl
   25 D1:B5A1 6F -  -  -      ld  l,a
   26 D1:B5A2 7C -  -  -      ld  a,h
   27 D1:B5A3 2F -  -  -      cpl
   28 D1:B5A4 67 -  -  -      ld  h,a
   29 D1:B5A5 23 -  -  -      inc hl
   30 D1:B5A6 -  -  -  -      ;load to clock counter in "core.z80"
   31 D1:B5A6 22 2C B7 D1     ld  (i6502_interrupt_timer),hl
   32 D1:B5AA C9 -  -  -      ret
   33 D1:B5AB -  -  -  -  
   34 D1:B5AB -  -  -  -  int6502_init:
   35 D1:B5AB AF -  -  -      xor a,a
   36 D1:B5AC 32 60 34 D0     ld  (int_table_len),a
   37 D1:B5B0 C9 -  -  -      ret
   38 D1:B5B1 -  -  -  -  
   39 D1:B5B1 -  -  -  -  
   40 D1:B5B1 -  -  -  -  ;Only call this inside the NMI handler, since that is the routine that adjusts
   41 D1:B5B1 -  -  -  -  ;the cycle counter downard. All entries that remain on the table will by
   42 D1:B5B1 -  -  -  -  ;have a higher count than the NMI. The table's probably empty, though.
   43 D1:B5B1 -  -  -  -  ;BC=timeToAdjust IX=thing
   44 D1:B5B1 -  -  -  -  int6502_adjustTimings:
   45 D1:B5B1 DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
   46 D1:B5B6 DD 7E FF -      ld  a,(ix-1)
   47 D1:B5B9 B7 -  -  -      or  a,a
   48 D1:B5BA 20 0F -  -      jr  nz,int6502_adjustTimings_noAdjust
   49 D1:B5BC -  -  -  -  int6502_adjustTimings_loop:
   50 D1:B5BC DD 27 03 -      ld  hl,(ix+INT_CYCLE_OFFSET)
   51 D1:B5BF B7 -  -  -      or  a,a
   52 D1:B5C0 ED 42 -  -      sbc hl,bc
   53 D1:B5C2 DD 2F 03 -      ld  (ix+INT_CYCLE_OFFSET),hl
   54 D1:B5C5 ED 32 06 -      lea ix,ix+INT_TABLE_STRIDE
   55 D1:B5C8 3D -  -  -      dec a
   56 D1:B5C9 20 F1 -  -      jr  nz,int6502_adjustTimings_loop
   57 D1:B5CB -  -  -  -  int6502_adjustTimings_noAdjust:
   58 D1:B5CB DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   59 D1:B5D0 C9 -  -  -      ret
   60 D1:B5D1 -  -  -  -  
   61 D1:B5D1 -  -  -  -  ;DE=ISRToPush, BC=CallWhenThisClockIsPassed
   62 D1:B5D1 -  -  -  -  ;This routine is called in the ISR handler to both acknowledge the consumption
   63 D1:B5D1 -  -  -  -  ;of its turn at the ISR, and to (potentially) push another entry to the stack.
   64 D1:B5D1 -  -  -  -  ;This does not affect ths size of a table since this is a combined
   65 D1:B5D1 -  -  -  -  ;pop-and-insert operation
   66 D1:B5D1 -  -  -  -  int6502_pushISRAfterPop:
   67 D1:B5D1 DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
   68 D1:B5D6 DD 7E FF -      ld  a,(ix-1)        ;length of the table
   69 D1:B5D9 B7 -  -  -      or  a,a
   70 D1:B5DA 20 13 -  -      jr  nz,int6502_pushISRAfterPop_keepChecking
   71 D1:B5DC -  -  -  -  int6502_pushISRAfterPop_writeFirstEntry:
   72 D1:B5DC DD 36 FF 01     ld  (ix-1),1
   73 D1:B5E0 -  -  -  -  int6502_pushISRAfterPop_writeEntry:
   74 D1:B5E0 DD 1F 00 -      ld  (ix+0),de
   75 D1:B5E3 DD 0F 03 -      ld  (ix+3),bc
   76 D1:B5E6 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   77 D1:B5EB C3 85 B5 D1     jp  int6502_updateIntCounter
   78 D1:B5EF -  -  -  -  int6502_pushISRAfterPop_keepChecking:
   79 D1:B5EF 3D -  -  -      dec a
   80 D1:B5F0 28 EA -  -      jr  z,int6502_pushISRAfterPop_writeFirstEntry
   81 D1:B5F2 -  -  -  -      ;Loop steps:
   82 D1:B5F2 -  -  -  -      ;If not loopCounter or BC < ix[0].T:
   83 D1:B5F2 -  -  -  -      ;   ix[-1] = DE,BC
   84 D1:B5F2 -  -  -  -      ;   STOP.
   85 D1:B5F2 -  -  -  -      ;Else:
   86 D1:B5F2 -  -  -  -      ;   ix[-1] = ix[0]
   87 D1:B5F2 -  -  -  -      ;   ix += STRIDE
   88 D1:B5F2 -  -  -  -      ;   --loopCounter;
   89 D1:B5F2 -  -  -  -  int6502_pushISRAfterPop_loop:
   90 D1:B5F2 ED 32 06 -      lea ix,ix+INT_TABLE_STRIDE
   91 D1:B5F5 B7 -  -  -      or  a,a
   92 D1:B5F6 28 E8 -  -      jr  z,int6502_pushISRAfterPop_writeEntry
   93 D1:B5F8 DD 27 03 -      ld  hl,(ix+INT_CYCLE_OFFSET)
   94 D1:B5FB ED 42 -  -      sbc hl,bc   ;C if ix[0]<BC
   95 D1:B5FD 38 E1 -  -      jr  c,int6502_pushISRAfterPop_writeEntry
   96 D1:B5FF DD 27 00 -      ld  hl,(ix+INT_ADDR_OFFSET)
   97 D1:B602 DD 2F FA -      ld  (ix+INT_ADDR_OFFSET-INT_TABLE_STRIDE),hl
   98 D1:B605 DD 27 03 -      ld  hl,(ix+INT_CYCLE_OFFSET)
   99 D1:B608 DD 2F FD -      ld  (ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE),hl
  100 D1:B60B 3D -  -  -      dec a
  101 D1:B60C 18 E4 -  -      jr int6502_pushISRAfterPop_loop
  102 D1:B60E -  -  -  -      
  103 D1:B60E -  -  -  -  ;DE=ISRToPush, BC=CallWhenThisClockIsPassed
  104 D1:B60E -  -  -  -  ;This actually adds an entry to the stack.
  105 D1:B60E -  -  -  -  int6502_insertISA:
  106 D1:B60E DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
  107 D1:B613 DD 7E FF -      ld  a,(ix-1)
  108 D1:B616 B7 -  -  -      or  a,a
  109 D1:B617 28 C3 -  -      jr  z,int6502_pushISRAfterPop_writeFirstEntry
  110 D1:B619 FE 08 -  -      cp  a,INT_TABLE_MAXLEN
  111 D1:B61B C8 -  -  -      ret z       ;do not attempt to insert if table is maxed out
  112 D1:B61C C5 -  -  -      push bc
  113 D1:B61D 47 -  -  -          ld  b,a
  114 D1:B61E 0E 06 -  -          ld  c,INT_TABLE_STRIDE
  115 D1:B620 ED 4C -  -          mlt bc
  116 D1:B622 DD 09 -  -          add ix,bc   ;at end of table
  117 D1:B624 C1 -  -  -      pop bc
  118 D1:B625 -  -  -  -      ;Loop details. IX points at entry after last:
  119 D1:B625 -  -  -  -      ;if not loopCtr or ix[-1].T < BC:
  120 D1:B625 -  -  -  -      ;   ix[0] = DE,BC , STOP.
  121 D1:B625 -  -  -  -      ;else:
  122 D1:B625 -  -  -  -      ;   ix[0] = ix[-1], ix-=STRIDE, loopCtr--
  123 D1:B625 -  -  -  -  int6502_insertISA_Loop:
  124 D1:B625 B7 -  -  -      or  a,a
  125 D1:B626 28 B4 -  -      jr  z,int6502_pushISRAfterPop_writeFirstEntry
  126 D1:B628 DD 27 FD -      ld  hl,(ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE)
  127 D1:B62B ED 42 -  -      sbc hl,bc   ;C if ix[-1]<BC
  128 D1:B62D 30 AD -  -      jr  nc,int6502_pushISRAfterPop_writeFirstEntry
  129 D1:B62F DD 27 FA -      ld  hl,(ix+INT_ADDR_OFFSET-INT_TABLE_STRIDE)
  130 D1:B632 DD 2F 00 -      ld  (ix+INT_ADDR_OFFSET),hl
  131 D1:B635 DD 27 FD -      ld  hl,(ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE)
  132 D1:B638 DD 2F 03 -      ld  (ix+INT_CYCLE_OFFSET),hl
  133 D1:B63B ED 32 FA -      lea ix,ix-INT_TABLE_STRIDE
  134 D1:B63E 3D -  -  -      dec a
  135 D1:B63F 18 E4 -  -      jr int6502_insertISA_Loop
  136 D1:B641 -  -  -  -      
  137 D1:B641 -  -  -  -  
  138 D1:B641 -  -  -  -  int6502_removeTop:
  139 D1:B641 DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
  140 D1:B646 DD 7E FF -      ld  a,(ix-1)
  141 D1:B649 B7 -  -  -      or  a,a
  142 D1:B64A 28 1B -  -      jr  z,+_
  143 D1:B64C DD 35 FF -      dec (ix-1)
  144 D1:B64F 4F -  -  -      ld  c,a
  145 D1:B650 06 06 -  -      ld  b,INT_TABLE_STRIDE
  146 D1:B652 ED 4C -  -      mlt bc
  147 D1:B654 ED 32 06 -      lea ix,ix+INT_TABLE_STRIDE
  148 D1:B657 ED 12 FA -      lea de,ix-INT_TABLE_STRIDE
  149 D1:B65A ED 22 00 -      lea hl,ix+0
  150 D1:B65D ED B0 -  -      ldir
  151 D1:B65F D5 -  -  -      push de
  152 D1:B660 E1 -  -  -      pop hl
  153 D1:B661 13 -  -  -      inc de
  154 D1:B662 71 -  -  -      ld  (hl),c
  155 D1:B663 0E 05 -  -      ld  c,INT_TABLE_STRIDE-1
  156 D1:B665 ED B0 -  -      ldir
  157 D1:B667 DD 21 80 32 
              D0 -  -  -  _:  ld ix,core_memory_ix
  158 D1:B66C C3 85 B5 D1     jp int6502_updateIntCounter
  159 D1:B670 -  -  -  -  
  160 D1:B670 -  -  -  -  
  161 D1:B670 -  -  -  -  
  162 D1:B670 -  -  -  -  
  163 D1:B670 -  -  -  -  
  164 D1:B670 -  -  -  -  
  165 D1:B670 -  -  -  -  
  166 D1:B670 -  -  -  -  
  167 D1:B670 -  -  -  -  
  168 D1:B670 -  -  -  -  
  169 D1:B670 -  -  -  -  
  170 D1:B670 -  -  -  -  
  171 D1:B670 -  -  -  -  
  172 D1:B670 -  -  -  -  
Listing for file "main.z80"
  972 D1:B670 -  -  -  -  #include "core.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    1 D1:B670 -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    2 D1:B670 -  -  -  -  
    3 D1:B670 -  -  -  -  ;TODO: DEFINE MEMORY ACCESS MACROS. ONE OR MORE FOR READ AND WRITE.
    4 D1:B670 -  -  -  -  ;FIGURE OUT HOW TO GET BOTH HIGH AND LOW BYTE OF ORIGINAL ADDRESS
    5 D1:B670 -  -  -  -  ;AND PERFORM ALTERNATE ACTIONS BASED ON WHAT HARDWARE WAS ACCESSED.
    6 D1:B670 -  -  -  -  ;NOTE: PATTERN SHOWS THAT D=MSB, C=LSB OF 6502 ADDRESS. USE THIS.
    7 D1:B670 -  -  -  -  ;
    8 D1:B670 -  -  -  -  ;THESE MACROS ARE PLACEHOLDERS. CHANGE THEM LATER ON TO REFLECT ACTUAL
    9 D1:B670 -  -  -  -  ;HARDWARE SHENANIGANS.
   10 D1:B670 -  -  -  -  ;
   11 D1:B670 -  -  -  -  ;NOTE: WRITE ACCESSES RELY ON KNOWING WHAT DATA TO WRITE. CAN'T STORE THAT IN A
   12 D1:B670 -  -  -  -  ;      SINCE WE NEED TO DO CONDITIONING. REGISTER B IS UNUSED SO LET'S USE THAT.
   13 D1:B670 -  -  -  -  ;
   14 D1:B670 -  -  -  -  #define READ_ACCESS call mapper0_read
   15 D1:B670 -  -  -  -  #define WRITE_ACCESS call mapper0_write
   16 D1:B670 -  -  -  -  ;Later, put in actual test. Z if not triggered, NZ if triggered. This
   17 D1:B670 -  -  -  -  ;alters the behavior of the BRK instruction.
   18 D1:B670 -  -  -  -  #define WAS_NMI_TRIGGERED bit 0,(ix+NMI_TRIGGERED)
   19 D1:B670 -  -  -  -  
   20 D1:B670 -  -  -  -  #define OPRFLG_C res SF_CARRY,b \ jr nc,$+4 \ set SF_CARRY,b
   21 D1:B670 -  -  -  -  #define OPRFLG_V res SF_OVER,b \ jp po,$+6 \ set SF_OVER,b
   22 D1:B670 -  -  -  -  #define OPRFLG_Z res SF_ZERO,b \ jr nz,$+4 \ set SF_ZERO,b
   23 D1:B670 -  -  -  -  #define OPRFLG_N res SF_NEG,b \ jr nc,$+4 \ set SF_NEG,b
   24 D1:B670 -  -  -  -  
   25 D1:B670 -  -  -  -  #define FLAGS_ZN ld b,(ix+REGSR) \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   26 D1:B670 -  -  -  -  #define FLAGS_CZN ld b,(ix+REGSR) \ OPRFLG_C \ rlc a  \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   27 D1:B670 -  -  -  -  #define FLAGS_VCZN ld b,(ix+REGSR) \ OPRFLG_V \ OPRFLG_C \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   28 D1:B670 -  -  -  -  
   29 D1:B670 -  -  -  -  
   30 D1:B670 -  -  -  -  ;Modify later to include provisions for hardware i/o based on page
   31 D1:B670 -  -  -  -  #define HW_READ(src_reg) ld a,(src_reg)
   32 D1:B670 -  -  -  -  #define HW_WRITE(dst_reg) ld (dst_reg),a
   33 D1:B670 -  -  -  -  
   34 D1:B670 -  -  -  -  
   35 D1:B670 -  -  -  -  
   36 D1:B670 -  -  -  -  
   37 D1:B670 -  -  -  -  ;=============================================================================
   38 D1:B670 -  -  -  -  ;=============================================================================
   39 D1:B670 -  -  -  -  ;=============================================================================
   40 D1:B670 -  -  -  -  ;=============================================================================
   41 D1:B670 -  -  -  -  ;You should have set up the mappings already. This is because
   42 D1:B670 -  -  -  -  ;mappings are program-dependant. Only $0000-$3FFF will be mapped in here
   43 D1:B670 -  -  -  -  ;more or less because I don't expect anything else to map that.
   44 D1:B670 -  -  -  -  i6502Init:
   45 D1:B670 -  -  -  -      ;
   46 D1:B670 -  -  -  -      ; At this point, you may need to randomize 2048 bytes at main_ram
   47 D1:B670 -  -  -  -      ;
   48 D1:B670 21 00 38 D0     ld  hl,main_ram
   49 D1:B674 01 08 20 00     ld  bc,$002008
   50 D1:B678 1E 00 -  -      ld  e,$00
   51 D1:B67A CD 7D B7 D1     call i6502_map_pages
   52 D1:B67E 21 00 33 D0     ld  hl,scrap_mapping
   53 D1:B682 01 01 20 00     ld  bc,$002001
   54 D1:B686 1E 20 -  -      ld  e,$20
   55 D1:B688 CD 7D B7 D1     call i6502_map_pages
   56 D1:B68C CD 64 B7 D1     call i6502_load_instruction_set
   57 D1:B690 -  -  -  -      ;
   58 D1:B690 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   59 D1:B695 FD 21 08 00 
              00 -  -  -      ld  iy,8    ;8 cycle startup. Hooking into inst6502_jsr for init
   60 D1:B69A ED 22 00 -      lea hl,ix
   61 D1:B69D ED 12 01 -      lea de,ix+1
   62 D1:B6A0 01 7E 00 00     ld  bc,126
   63 D1:B6A4 36 00 -  -      ld  (hl),$00
   64 D1:B6A6 ED B0 -  -      ldir
   65 D1:B6A8 -  -  -  -      ;
   66 D1:B6A8 21 00 00 00     ld  hl,0
   67 D1:B6AC 39 -  -  -      add hl,sp
   68 D1:B6AD DD 2F 11 -      ld  (ix+CORE_STACK_BASE),hl
   69 D1:B6B0 -  -  -  -      ;
   70 D1:B6B0 DD 36 03 FD     ld  (ix+REGSP),$FD  ;init does a BRK-like action without the actual pushes.
   71 D1:B6B4 DD 36 04 24     ld  (ix+REGSR),$24  ;Presumably, this is what status register starts with?
   72 D1:B6B8 21 F4 4B D0     ld  hl,PAGETABLE+(255*BASETABLE_STRIDE)
   73 D1:B6BC ED 27 -  -      ld  hl,(hl)
   74 D1:B6BE 11 FC 00 00     ld  de,$0000FC
   75 D1:B6C2 19 -  -  -      add hl,de
   76 D1:B6C3 ED 27 -  -      ld  hl,(hl) ;get RST vector
   77 D1:B6C5 52 DD 2F 05     ld.s (ix+REGPC),hl
   78 D1:B6C9 -  -  -  -      ;-- debug stuff. Timer things.
   79 D1:B6C9 3A 30 00 F2     ld  a,($F20030)
   80 D1:B6CD CB C7 -  -      set 0,a ;turn on timer 1
   81 D1:B6CF 32 30 00 F2     ld  ($F20030),a
   82 D1:B6D3 -  -  -  -      ; Core initialized. Begin fetching instructions
   83 D1:B6D3 18 07 -  -      jr  i6502FirstLoad
   84 D1:B6D5 -  -  -  -  
   85 D1:B6D5 -  -  -  -  i6502RetryFirstLoad:    ;reentrant from ISR handler
   86 D1:B6D5 52 DD 17 05     ld.s de,(ix+REGPC)
   87 D1:B6D9 1B -  -  -      dec de
   88 D1:B6DA 18 04 -  -      jr +_
   89 D1:B6DC -  -  -  -  i6502FirstLoad:
   90 D1:B6DC 52 DD 17 05     ld.s de,(ix+REGPC)
   91 D1:B6E0 7B -  -  -  _:  ld  a,e
   92 D1:B6E1 1E 0C -  -      ld  e,BASETABLE_STRIDE
   93 D1:B6E3 ED 5C -  -      mlt de
   94 D1:B6E5 21 00 40 D0     ld  hl,PAGETABLE
   95 D1:B6E9 19 -  -  -      add hl,de
   96 D1:B6EA ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
   97 D1:B6EC 16 00 -  -      ld  d,0
   98 D1:B6EE 5F -  -  -      ld  e,a
   99 D1:B6EF 19 -  -  -      add hl,de       ;resolve final address
  100 D1:B6F0 18 19 -  -      jr  i6502FinishLoad
  101 D1:B6F2 -  -  -  -  i6502NextLoad:
  102 D1:B6F2 23 -  -  -      inc hl
  103 D1:B6F3 1C -  -  -      inc e
  104 D1:B6F4 20 15 -  -      jr  nz,i6502FinishLoad
  105 D1:B6F6 DD 56 06 -      ld  d,(ix+REGPC+1)
  106 D1:B6F9 14 -  -  -      inc d
  107 D1:B6FA 52 DD 1F 05     ld.s (ix+REGPC),de
  108 D1:B6FE 1E 0C -  -      ld  e,BASETABLE_STRIDE
  109 D1:B700 ED 5C -  -      mlt de
  110 D1:B702 21 00 40 D0     ld  hl,PAGETABLE
  111 D1:B706 19 -  -  -      add hl,de
  112 D1:B707 ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
  113 D1:B709 1E 00 -  -      ld  e,0         ;PCL known to be zero at this point.
  114 D1:B70B -  -  -  -  i6502FinishLoad:
  115 D1:B70B 7E -  -  -      ld  a,(hl)
  116 D1:B70C -  -  -  -  
  117 D1:B70C -  -  -  -  #ifdef COREDEBUG
  118 D1:B70C                 ld  (ix+CURRENT_OPCODES+0),a
  119 D1:B70C                 ld  (ix+REGPC+0),e
  120 D1:B70C             #endif
  121 D1:B70C 23 -  -  -      inc hl
  122 D1:B70D 1C -  -  -      inc e
  123 D1:B70E 20 15 -  -      jr  nz,i6502PrepNextPage
  124 D1:B710 DD 56 06 -      ld  d,(ix+REGPC+1)
  125 D1:B713 14 -  -  -      inc d
  126 D1:B714 52 DD 1F 05     ld.s (ix+REGPC),de
  127 D1:B718 1E 0C -  -      ld  e,BASETABLE_STRIDE
  128 D1:B71A ED 5C -  -      mlt de
  129 D1:B71C 21 00 40 D0     ld  hl,PAGETABLE
  130 D1:B720 19 -  -  -      add hl,de
  131 D1:B721 ED 27 -  -      ld  hl,(hl)
  132 D1:B723 1E 00 -  -      ld  e,0
  133 D1:B725 -  -  -  -  i6502PrepNextPage:
  134 D1:B725 -  -  -  -  #ifdef COREDEBUG
  135 D1:B725                 push af
  136 D1:B725                     ld  a,(hl)
  137 D1:B725                     ld  (ix+CURRENT_OPCODES+1),a
  138 D1:B725                     push de
  139 D1:B725                         push hl
  140 D1:B725                             push ix
  141 D1:B725                                 inc hl
  142 D1:B725                                 inc e
  143 D1:B725                                 jr  nz,+_
  144 D1:B725                                 ld  d,(ix+REGPC+1)
  145 D1:B725                                 inc d
  146 D1:B725                                 ld  e,BASETABLE_STRIDE
  147 D1:B725                                 mlt de
  148 D1:B725                                 ld  hl,PAGETABLE
  149 D1:B725                                 add hl,de
  150 D1:B725                                 ld  hl,(hl)
  151 D1:B725             _:                  ld  a,(hl)
  152 D1:B725                                 ld  (ix+CURRENT_OPCODES+2),a
  153 D1:B725                                 lea hl,ix
  154 D1:B725                                 ld  de,core_memory_ix
  155 D1:B725                                 or  a,a
  156 D1:B725                                 sbc hl,de
  157 D1:B725                                 jr  nz,$    ;halt program if IX is not core_memory_ix
  158 D1:B725                                 ;jr $
  159 D1:B725                                 push iy
  160 D1:B725                                     call dbg_printLine
  161 D1:B725                                 pop iy
  162 D1:B725                                 ld  a,(ix+CORE_ERROR_LEVEL)
  163 D1:B725                                 or  a,a
  164 D1:B725                                 jr  z,+_
  165 D1:B725                                 ld  hl,(ix+CORE_STACK_BASE)
  166 D1:B725                                 ld  sp,hl
  167 D1:B725                                 ret
  168 D1:B725             _:                  ld  iy,(ix+CYCLES_CURRENT)  ;remove when done with timings
  169 D1:B725                                 lea hl,iy+0
  170 D1:B725                                 ld  de,DEBUG_STEP_START_CYCLE
  171 D1:B725                                 or  a,a
  172 D1:B725                                 sbc hl,de
  173 D1:B725                                 call nc,waituntilnewkeypress
  174 D1:B725                             pop ix
  175 D1:B725                         pop hl
  176 D1:B725                     pop de
  177 D1:B725                 pop af
  178 D1:B725             #endif
  179 D1:B725 E5 -  -  -      push hl
  180 D1:B726 F5 -  -  -          push af
  181 D1:B727 -  -  -  -              ;ld  a,(ix+PPU_FRAMECOUNT)
  182 D1:B727 -  -  -  -              ;or  a,a
  183 D1:B727 -  -  -  -              ;cp  a,$20
  184 D1:B727 -  -  -  -              ;jr  c,+_
  185 D1:B727 -  -  -  -              ;ld  bc,-25000
  186 D1:B727 -  -  -  -              ;lea hl,iy
  187 D1:B727 -  -  -  -              ;add hl,bc
  188 D1:B727 -  -  -  -              ;jr  c,$
  189 D1:B727 F1 -  -  -  _:      pop af
  190 D1:B728 ED 23 00 -          lea hl,iy
  191 D1:B72B -  -  -  -  i6502_interrupt_timer   .equ $+1
  192 D1:B72B 01 DD 92 FF         ld  bc,-27939
  193 D1:B72F 09 -  -  -          add hl,bc
  194 D1:B730 38 1A -  -          jr  c,i6502_take_interrupt
  195 D1:B732 -  -  -  -  i6502_continue_instruction_fetch:
  196 D1:B732 67 -  -  -          ld  h,a
  197 D1:B733 2E 0C -  -          ld  l,BASETABLE_STRIDE
  198 D1:B735 ED 6C -  -          mlt hl
  199 D1:B737 01 04 40 D0         ld  bc,JUMPTABLE
  200 D1:B73B 09 -  -  -          add hl,bc
  201 D1:B73C ED 27 -  -          ld  hl,(hl)     ;jumptable
  202 D1:B73E E3 -  -  -          ex  (sp),hl     ;exch with exec addr, jumpto-via-ret
  203 D1:B73F C9 -  -  -      ret
  204 D1:B740 -  -  -  -  
  205 D1:B740 -  -  -  -  i6502_no_interrupts:
  206 D1:B740 -  -  -  -          ;This is what happens when you let the core run without setting
  207 D1:B740 -  -  -  -          ;up interrupts. It'll be up to the hardware access subroutines
  208 D1:B740 -  -  -  -          ;to configure interrupts from now on. See "coreint.z80" for
  209 D1:B740 -  -  -  -          ;more information
  210 D1:B740 21 00 00 80         ld  hl,$800000  ;INT_MIN. Prevent retry for as long as possible.
  211 D1:B744 22 4C B7 D1         ld  (i6502_take_interrupt),hl
  212 D1:B748 C3 32 B7 D1         jp  i6502_continue_instruction_fetch
  213 D1:B74C -  -  -  -  
  214 D1:B74C -  -  -  -  i6502_take_interrupt:
  215 D1:B74C 29 -  -  -          add hl,hl   ;Check sign bit. Keep going if neg result. Fit inside timer
  216 D1:B74D DA 32 B7 D1         jp  c,i6502_continue_instruction_fetch
  217 D1:B751 67 -  -  -          ld  h,a
  218 D1:B752 3A 60 34 D0         ld  a,(int_table_len)
  219 D1:B756 B7 -  -  -          or  a,a
  220 D1:B757 7C -  -  -          ld  a,h
  221 D1:B758 28 E6 -  -          jr  z,i6502_no_interrupts
  222 D1:B75A E1 -  -  -      pop hl
  223 D1:B75B AF -  -  -      xor a,a
  224 D1:B75C DD 73 05 -      ld  (ix+REGPC+0),e
  225 D1:B75F 2A 61 34 D0     ld  hl,(INT_TABLE)  ;Find the routines in "coreint.z80" that handles
  226 D1:B763 E9 -  -  -      jp  (hl)            ;and maintains the interrupt table being used here.
  227 D1:B764 -  -  -  -  
  228 D1:B764 -  -  -  -  
  229 D1:B764 -  -  -  -  ;Instructions one byte wide returns to the main loop via:
  230 D1:B764 -  -  -  -  ;   JP i6502FinishLoad
  231 D1:B764 -  -  -  -  ;Those with parameters have HL at the address in quetion, and is expected to
  232 D1:B764 -  -  -  -  ;advance HL and E at the end of the instruction. You return to main loop via:
  233 D1:B764 -  -  -  -  ;   JP i6502NextLoad
  234 D1:B764 -  -  -  -  ;Unless you manually advance the pointer to the next instruction.
  235 D1:B764 -  -  -  -  ;You really shouldn't but if you must do that, then also do this:
  236 D1:B764 -  -  -  -  ;   JP i6502FinishLoad
  237 D1:B764 -  -  -  -  ;Remember that register E is very important; it tells you about page boundaries.
  238 D1:B764 -  -  -  -  
  239 D1:B764 -  -  -  -  
  240 D1:B764 -  -  -  -  ;-----------------------------------------------------------------------------
  241 D1:B764 -  -  -  -  ;-----------------------------------------------------------------------------
  242 D1:B764 -  -  -  -  ;-----------------------------------------------------------------------------
  243 D1:B764 -  -  -  -  
  244 D1:B764 -  -  -  -  ;  ***  *   * ****  ****   ***  *   * ***** ***** **  * *****  ***  
  245 D1:B764 -  -  -  -  ; *     *   * *   * *   * *   * *   *   *     *   **  * *     *     
  246 D1:B764 -  -  -  -  ;  ***  *   * ****  ****  *   * *   *   *     *   * * * ***    ***  
  247 D1:B764 -  -  -  -  ;     * *   * *   * *   * *   * *   *   *     *   *  ** *         * 
  248 D1:B764 -  -  -  -  ;  ***   ***  ****  *   *  ***   ***    *   ***** *  ** *****  ***  
  249 D1:B764 -  -  -  -  
  250 D1:B764 -  -  -  -  ;-----------------------------------------------------------------------------
  251 D1:B764 -  -  -  -  
  252 D1:B764 -  -  -  -  i6502_load_instruction_set:
  253 D1:B764 DD 21 04 40 
              D0 -  -  -      ld  ix,JUMPTABLE
  254 D1:B769 21 3D DB D1     ld  hl,inst6502_instruction_set
  255 D1:B76D 06 00 -  -      ld  b,0
  256 D1:B76F ED 17 -  -  _:  ld  de,(hl)
  257 D1:B771 DD 1F 00 -      ld  (ix+0),de
  258 D1:B774 23 -  -  -      inc hl
  259 D1:B775 23 -  -  -      inc hl
  260 D1:B776 23 -  -  -      inc hl
  261 D1:B777 ED 32 0C -      lea ix,ix+BASETABLE_STRIDE
  262 D1:B77A 10 F3 -  -      djnz -_
  263 D1:B77C C9 -  -  -      ret
  264 D1:B77D -  -  -  -  
  265 D1:B77D -  -  -  -  ;HL=Base_ez80_address, C=Numpages_in_map, B=numpages_in_space, E=starting_page
  266 D1:B77D -  -  -  -  ;Example: To map and mirror 2KB RAM at $D03800 inside first 8KB of 6502 space
  267 D1:B77D -  -  -  -  ;HL=$D03800, C=$08, B=$20, E=$00
  268 D1:B77D -  -  -  -  ;Note: B should be a power of two and evenly divisible by C.
  269 D1:B77D -  -  -  -  i6502_map_pages:
  270 D1:B77D 16 0C -  -      ld  d,BASETABLE_STRIDE
  271 D1:B77F ED 5C -  -      mlt de
  272 D1:B781 DD 21 00 40 
              D0 -  -  -      ld  ix,PAGETABLE
  273 D1:B786 DD 19 -  -      add ix,de
  274 D1:B788 78 -  -  -      ld  a,b     ;A = main counter for total number of pages in mapping space
  275 D1:B789 11 00 01 00     ld  de,256
  276 D1:B78D E5 -  -  -      push hl
  277 D1:B78E FD E1 -  -      pop iy
  278 D1:B790 41 -  -  -  _:  ld  b,c     ;looping for number of pages to map
  279 D1:B791 DD 2F 00 -  _:  ld  (ix+0),hl
  280 D1:B794 19 -  -  -      add hl,de                   ;next page z80
  281 D1:B795 ED 32 0C -      lea ix,ix+BASETABLE_STRIDE  ;next page entry
  282 D1:B798 3D -  -  -      dec a
  283 D1:B799 C8 -  -  -      ret z
  284 D1:B79A 10 F5 -  -      djnz -_
  285 D1:B79C ED 23 00 -      lea hl,iy+0     ;start z80 pages over again for mirroring
  286 D1:B79F 18 EF -  -      jr --_
  287 D1:B7A1 -  -  -  -  
  288 D1:B7A1 -  -  -  -  
  289 D1:B7A1 -  -  -  -  subroutine6502_abs_split_start:
  290 D1:B7A1 4E -  -  -      ld  c,(hl)
  291 D1:B7A2 23 -  -  -      inc hl
  292 D1:B7A3 1C -  -  -      inc e
  293 D1:B7A4 20 15 -  -      jr nz,+_
  294 D1:B7A6 DD 56 06 -      ld  d,(ix+REGPC+1)
  295 D1:B7A9 14 -  -  -      inc d
  296 D1:B7AA 52 DD 1F 05     ld.s (ix+REGPC),de
  297 D1:B7AE 1E 0C -  -      ld  e,BASETABLE_STRIDE
  298 D1:B7B0 ED 5C -  -      mlt de
  299 D1:B7B2 21 00 40 D0     ld  hl,PAGETABLE
  300 D1:B7B6 19 -  -  -      add hl,de
  301 D1:B7B7 ED 27 -  -      ld  hl,(hl) ;
  302 D1:B7B9 1E 00 -  -      ld  e,0
  303 D1:B7BB 46 -  -  -  _:  ld  b,(hl)
  304 D1:B7BC C9 -  -  -      ret
  305 D1:B7BD -  -  -  -  
  306 D1:B7BD -  -  -  -  #define PUSH_ABSXSPLIT call subroutine6502_absx_split_start
  307 D1:B7BD -  -  -  -  #define PUSH_ABSXSPLIT_NODEP call subroutine6502_absx_ss_noDep
  308 D1:B7BD -  -  -  -  #define PUSH_ABSYSPLIT call subroutine6502_absy_split_start
  309 D1:B7BD -  -  -  -  #define PUSH_ABSYSPLIT_NODEP call subroutine6502_absy_ss_noDep
  310 D1:B7BD -  -  -  -  
  311 D1:B7BD -  -  -  -  subroutine6502_absy_split_start:
  312 D1:B7BD DD 4E 02 -      ld  c,(ix+REGY)
  313 D1:B7C0 18 03 -  -      jr +_
  314 D1:B7C2 -  -  -  -  
  315 D1:B7C2 -  -  -  -  subroutine6502_absx_split_start:
  316 D1:B7C2 DD 4E 01 -      ld  c,(ix+REGX)
  317 D1:B7C5 7E -  -  -  _:  ld  a,(hl)
  318 D1:B7C6 23 -  -  -      inc hl
  319 D1:B7C7 1C -  -  -      inc e
  320 D1:B7C8 20 15 -  -      jr nz,+_
  321 D1:B7CA DD 56 06 -      ld  d,(ix+REGPC+1)
  322 D1:B7CD 14 -  -  -      inc d
  323 D1:B7CE 52 DD 1F 05     ld.s (ix+REGPC),de
  324 D1:B7D2 1E 0C -  -      ld  e,BASETABLE_STRIDE
  325 D1:B7D4 ED 5C -  -      mlt de
  326 D1:B7D6 21 00 40 D0     ld  hl,PAGETABLE
  327 D1:B7DA 19 -  -  -      add hl,de
  328 D1:B7DB ED 27 -  -      ld  hl,(hl) ;
  329 D1:B7DD 1E 00 -  -      ld  e,0
  330 D1:B7DF 46 -  -  -  _:  ld  b,(hl)
  331 D1:B7E0 E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  332 D1:B7E1 E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  333 D1:B7E2 81 -  -  -          add a,c
  334 D1:B7E3 30 03 -  -          jr  nc,+_
  335 D1:B7E5 FD 23 -  -          ADDCYC(1)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  336 D1:B7E7 04 -  -  -          inc b
  337 D1:B7E8 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  338 D1:B7E9 0E 0C -  -          ld  c,BASETABLE_STRIDE
  339 D1:B7EB ED 4C -  -          mlt bc
  340 D1:B7ED 21 00 40 D0         ld  hl,PAGETABLE
  341 D1:B7F1 09 -  -  -          add hl,bc
  342 D1:B7F2 ED 27 -  -          ld  hl,(hl)
  343 D1:B7F4 06 00 -  -          ld  b,0
  344 D1:B7F6 4F -  -  -          ld  c,a
  345 D1:B7F7 09 -  -  -          add hl,bc
  346 D1:B7F8 C9 -  -  -      ret
  347 D1:B7F9 -  -  -  -      
  348 D1:B7F9 -  -  -  -  subroutine6502_absy_ss_noDep:
  349 D1:B7F9 DD 4E 02 -      ld  c,(ix+REGY)
  350 D1:B7FC 18 03 -  -      jr +_
  351 D1:B7FE -  -  -  -  subroutine6502_absx_ss_noDep:
  352 D1:B7FE DD 4E 01 -      ld  c,(ix+REGX)
  353 D1:B801 7E -  -  -  _:  ld  a,(hl)
  354 D1:B802 23 -  -  -      inc hl
  355 D1:B803 1C -  -  -      inc e
  356 D1:B804 20 15 -  -      jr nz,+_
  357 D1:B806 DD 56 06 -      ld  d,(ix+REGPC+1)
  358 D1:B809 14 -  -  -      inc d
  359 D1:B80A 52 DD 1F 05     ld.s (ix+REGPC),de
  360 D1:B80E 1E 0C -  -      ld  e,BASETABLE_STRIDE
  361 D1:B810 ED 5C -  -      mlt de
  362 D1:B812 21 00 40 D0     ld  hl,PAGETABLE
  363 D1:B816 19 -  -  -      add hl,de
  364 D1:B817 ED 27 -  -      ld  hl,(hl) ;
  365 D1:B819 1E 00 -  -      ld  e,0
  366 D1:B81B 46 -  -  -  _:  ld  b,(hl)
  367 D1:B81C E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  368 D1:B81D E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  369 D1:B81E 81 -  -  -          add a,c
  370 D1:B81F 30 01 -  -          jr  nc,+_
  371 D1:B821 04 -  -  -          inc b
  372 D1:B822 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  373 D1:B823 0E 0C -  -          ld  c,BASETABLE_STRIDE
  374 D1:B825 ED 4C -  -          mlt bc
  375 D1:B827 21 00 40 D0         ld  hl,PAGETABLE
  376 D1:B82B 09 -  -  -          add hl,bc
  377 D1:B82C ED 27 -  -          ld  hl,(hl)
  378 D1:B82E 06 00 -  -          ld  b,0
  379 D1:B830 4F -  -  -          ld  c,a
  380 D1:B831 09 -  -  -          add hl,bc
  381 D1:B832 C9 -  -  -      ret
  382 D1:B833 -  -  -  -  
  383 D1:B833 -  -  -  -  
  384 D1:B833 -  -  -  -  
  385 D1:B833 -  -  -  -  
  386 D1:B833 -  -  -  -  
  387 D1:B833 -  -  -  -  
  388 D1:B833 -  -  -  -  
  389 D1:B833 -  -  -  -  subroutine6502_adc_combined_end:
  390 D1:B833 DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  391 D1:B836 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  392 D1:B837 DD 7E 00 -      ld  a,(ix+REGA)
  393 D1:B83A 89 -  -  -      adc a,c
  394 D1:B83B DD 77 00 -      ld  (ix+REGA),a
  395 D1:B83E DD 46 04 CB 
              B0 E2 49 B8 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  396 D1:B860 C3 F2 B6 D1     jp i6502NextLoad
  397 D1:B864 -  -  -  -  
  398 D1:B864 -  -  -  -  subroutine6502_sbc_combined_end:
  399 D1:B864 DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  400 D1:B867 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  401 D1:B868 DD 7E 00 -      ld  a,(ix+REGA)
  402 D1:B86B 3F -  -  -      ccf
  403 D1:B86C 99 -  -  -      sbc a,c
  404 D1:B86D 3F -  -  -      ccf
  405 D1:B86E DD 77 00 -      ld  (ix+REGA),a
  406 D1:B871 DD 46 04 CB 
              B0 E2 7C B8 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  407 D1:B893 C3 F2 B6 D1     jp i6502NextLoad
  408 D1:B897 -  -  -  -  
  409 D1:B897 -  -  -  -  subroutine6502_cmp_combined_end:
  410 D1:B897 DD 7E 00 -      ld  a,(ix+REGA)
  411 D1:B89A 90 -  -  -      sub a,b
  412 D1:B89B 3F -  -  -      ccf     ;because the 6502 is strange like that.
  413 D1:B89C DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  414 D1:B8B6 C3 F2 B6 D1     jp i6502NextLoad
  415 D1:B8BA -  -  -  -  
  416 D1:B8BA -  -  -  -  subroutine6502_take_branch:
  417 D1:B8BA FD 23 -  -      ADDCYC(1)
  418 D1:B8BC 7E -  -  -      ld  a,(hl)  ;offset byte
  419 D1:B8BD 6F -  -  -      ld  L,a
  420 D1:B8BE 87 -  -  -      add a,a
  421 D1:B8BF 9F -  -  -      sbc a,a
  422 D1:B8C0 67 -  -  -      ld  H,a     ;sign-extending offset byte
  423 D1:B8C1 DD 56 06 -      ld  d,(ix+REGPC+1)
  424 D1:B8C4 13 -  -  -      inc de
  425 D1:B8C5 52 19 -  -      add.s hl,de
  426 D1:B8C7 7C -  -  -      ld  a,h
  427 D1:B8C8 BA -  -  -      cp  d       ;is high byte the same?
  428 D1:B8C9 28 02 -  -      jr  z,+_    ;if so, do not add another clock
  429 D1:B8CB FD 23 -  -      ADDCYC(1)
  430 D1:B8CD 52 DD 2F 05 _:  ld.s (ix+REGPC),hl
  431 D1:B8D1 C3 DC B6 D1     jp  i6502FirstLoad
  432 D1:B8D5 -  -  -  -  
  433 D1:B8D5 -  -  -  -  subroutine6502_take_branch_waitloop_detect:
  434 D1:B8D5 7E -  -  -      ld  a,(hl)      ;offset byte
  435 D1:B8D6 4F -  -  -      ld  c,a         ;keep that offset byte for now. We'll need it later.
  436 D1:B8D7 6F -  -  -      ld  l,a
  437 D1:B8D8 87 -  -  -      add a,a
  438 D1:B8D9 9F -  -  -      sbc a,a
  439 D1:B8DA 67 -  -  -      ld  h,a         ;sign-extend into HL
  440 D1:B8DB DD 56 06 -      ld  d,(ix+REGPC+1)
  441 D1:B8DE 13 -  -  -      inc de
  442 D1:B8DF 19 -  -  -      add hl,de           ;HLU unimportant for any further checks
  443 D1:B8E0 52 DD 2F 05     ld.s (ix+REGPC),hl  ;since we aren't going to store it anyway
  444 D1:B8E4 5C -  -  -      ld  e,h             ;D=newMSB, E=oldMSB
  445 D1:B8E5 -  -  -  -      ;Now we have to check the instruction we landed on to see 
  446 D1:B8E5 79 -  -  -      ld  a,c             ;Check offset byte if in range for waitloop things
  447 D1:B8E6 FE FC -  -      cp  a,-2-2          ;-2 to reach back to itself, and -2 for the inst before
  448 D1:B8E8 28 0C -  -      jr  z,subroutine6502_tbwd_2bcheck
  449 D1:B8EA -  -  -  -      ;insert other offset-based checks here
  450 D1:B8EA -  -  -  -  subroutine6502_tbwd_check_failed:
  451 D1:B8EA FD 23 -  -      ADDCYC(1)
  452 D1:B8EC 7B -  -  -      ld  a,e
  453 D1:B8ED BA -  -  -      cp  a,d     ;Check if high byte changed. If so, it's a page crossing.
  454 D1:B8EE 28 02 -  -      jr  z,+_
  455 D1:B8F0 FD 23 -  -      ADDCYC(1)
  456 D1:B8F2 C3 DC B6 D1 _:  jp  i6502FirstLoad
  457 D1:B8F6 -  -  -  -  ;Note: By the time we're checking for waitloop status, the jump's already
  458 D1:B8F6 -  -  -  -  ;been recorded for next execution. Thus, when the next interrupt occurs,
  459 D1:B8F6 -  -  -  -  ;that instruction will be retried and the loop will fall through, preventing
  460 D1:B8F6 -  -  -  -  ;the sort of lockup that would've needed additional flags to handle.
  461 D1:B8F6 -  -  -  -  subroutine6502_tbwd_2bcheck:
  462 D1:B8F6 ED 33 FE -      lea iy,iy-2     ;undo the first addcyc
  463 D1:B8F9 7D -  -  -      ld  a,L         ;preserve LSB for later thingies.
  464 D1:B8FA 44 -  -  -      ld  b,h
  465 D1:B8FB 0E 0C -  -      ld  c,BASETABLE_STRIDE
  466 D1:B8FD ED 4C -  -      mlt bc
  467 D1:B8FF 21 00 40 D0     ld  hl,PAGETABLE
  468 D1:B903 09 -  -  -      add hl,bc
  469 D1:B904 ED 27 -  -      ld  hl,(hl)
  470 D1:B906 06 00 -  -      ld  b,0
  471 D1:B908 4F -  -  -      ld  c,a
  472 D1:B909 09 -  -  -      add hl,bc       ;Address to prior instruction reconstructed.
  473 D1:B90A 7E -  -  -      ld  a,(hl)
  474 D1:B90B FE C5 -  -      cp  a,$C5       ;CMP_ZP, seen in Nestest
  475 D1:B90D 28 02 -  -      jr  z,subroutine6502_tbwd_waitloop
  476 D1:B90F 18 D9 -  -      jr  subroutine6502_tbwd_check_failed
  477 D1:B911 -  -  -  -  
  478 D1:B911 -  -  -  -  subroutine6502_tbwd_waitloop:
  479 D1:B911 -  -  -  -  ;I don't particularly care about timing consistency here. 3 or more ccs per
  480 D1:B911 -  -  -  -  ;iteration, I'll fix that later if it ever truly becomes a problem.
  481 D1:B911 C3 00 CE D1     jp  inst6052_jmp_abs_inf_loop   
  482 D1:B915 -  -  -  -  
  483 D1:B915 -  -  -  -  ;-----------------------------------------------------------------------------
  484 D1:B915 -  -  -  -  
  485 D1:B915 -  -  -  -  ; *** **  *  *** ***** ***  *   *  *** ***** *** ***  **  *     ***  ***** *****                                                
  486 D1:B915 -  -  -  -  ;  *  **  * *      *   *  * *   * *      *    * *   * **  *    *     *       *                   
  487 D1:B915 -  -  -  -  ;  *  * * *  ***   *   ***  *   * *      *    * *   * * * *     ***  ***     *                          
  488 D1:B915 -  -  -  -  ;  *  *  **     *  *   *  * *   * *      *    * *   * *  **        * *       *                   
  489 D1:B915 -  -  -  -  ; *** *  **  ***   *   *  *  ***   ***   *   *** ***  *  **     ***  *****   *                                 
  490 D1:B915 -  -  -  -  
  491 D1:B915 -  -  -  -  ;-----------------------------------------------------------------------------
  492 D1:B915 -  -  -  -  
  493 D1:B915 -  -  -  -  ;-----------------------------------------------------------------------------
  494 D1:B915 -  -  -  -  ;-----------------------------------------------------------------------------
  495 D1:B915 -  -  -  -  ;-----------------------------------------------------------------------------
  496 D1:B915 -  -  -  -  ;Instructions by type: Transfer Instructions
  497 D1:B915 -  -  -  -  ;LDA - Load Accumulator with Memory
  498 D1:B915 -  -  -  -  ;    M -> A
  499 D1:B915 -  -  -  -  ;    N	Z	C	I	D	V
  500 D1:B915 -  -  -  -  ;    +	+	-	-	-	-
  501 D1:B915 -  -  -  -  
  502 D1:B915 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
  503 D1:B915 -  -  -  -  ;immediate	LDA #oper	A9	2	2
  504 D1:B915 -  -  -  -  inst6502_lda_imm:
  505 D1:B915 7E -  -  -      ld  a,(hl)
  506 D1:B916 DD 77 00 -      ld  (ix+REGA),a
  507 D1:B919 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  508 D1:B92D ED 33 02 -      ADDCYC(2)
  509 D1:B930 C3 F2 B6 D1     jp i6502NextLoad
  510 D1:B934 -  -  -  -  
  511 D1:B934 -  -  -  -  ;zeropage	LDA oper	A5	2	3
  512 D1:B934 -  -  -  -  inst6502_lda_zp:
  513 D1:B934 7E -  -  -      ld  a,(hl)
  514 D1:B935 01 00 38 D0     ld  bc,ZEROPAGE
  515 D1:B939 81 -  -  -      add a,c
  516 D1:B93A 4F -  -  -      ld  c,a
  517 D1:B93B 0A -  -  -      ld  a,(bc)
  518 D1:B93C DD 77 00 -      ld  (ix+REGA),a
  519 D1:B93F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  520 D1:B953 ED 33 03 -      ADDCYC(3)
  521 D1:B956 C3 F2 B6 D1     jp i6502NextLoad
  522 D1:B95A -  -  -  -  
  523 D1:B95A -  -  -  -  ;zeropage,X	LDA oper,X	B5	2	4 
  524 D1:B95A -  -  -  -  inst6502_lda_zpx:
  525 D1:B95A 7E -  -  -      ld  a,(hl)
  526 D1:B95B 01 00 38 D0     ld  bc,ZEROPAGE
  527 D1:B95F 81 -  -  -      add a,c
  528 D1:B960 DD 86 01 -      add a,(ix+REGX)
  529 D1:B963 4F -  -  -      ld  c,a
  530 D1:B964 0A -  -  -      ld  a,(bc)
  531 D1:B965 DD 77 00 -      ld  (ix+REGA),a
  532 D1:B968 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  533 D1:B97C ED 33 04 -      ADDCYC(4)
  534 D1:B97F C3 F2 B6 D1     jp i6502NextLoad
  535 D1:B983 -  -  -  -  
  536 D1:B983 -  -  -  -  ;absolute	LDA oper	AD	3	4
  537 D1:B983 -  -  -  -  inst6502_lda_abs:
  538 D1:B983 CD A1 B7 D1     call subroutine6502_abs_split_start
  539 D1:B987 E5 -  -  -      push hl
  540 D1:B988 50 -  -  -          ld  d,b
  541 D1:B989 79 -  -  -          ld  a,c
  542 D1:B98A 0E 0C -  -          ld  c,BASETABLE_STRIDE
  543 D1:B98C ED 4C -  -          mlt bc
  544 D1:B98E 21 00 40 D0         ld  hl,PAGETABLE
  545 D1:B992 09 -  -  -          add hl,bc
  546 D1:B993 ED 27 -  -          ld  hl,(hl)
  547 D1:B995 06 00 -  -          ld  b,0
  548 D1:B997 4F -  -  -          ld  c,a
  549 D1:B998 09 -  -  -          add hl,bc   ;full address
  550 D1:B999 CD 74 AE D1         READ_ACCESS
  551 D1:B99D DD 77 00 -          ld (ix+REGA),a
  552 D1:B9A0 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  553 D1:B9B4 ED 33 04 -          ADDCYC(4)
  554 D1:B9B7 E1 -  -  -      pop hl
  555 D1:B9B8 C3 F2 B6 D1     jp i6502NextLoad
  556 D1:B9BC -  -  -  -  
  557 D1:B9BC -  -  -  -  ;absolute,X	LDA oper,X	BD	3	4* 
  558 D1:B9BC -  -  -  -  inst6502_lda_absx:
  559 D1:B9BC ED 33 04 -      ADDCYC(4)
  560 D1:B9BF CD C2 B7 D1     PUSH_ABSXSPLIT
  561 D1:B9C3 CD 74 AE D1         READ_ACCESS
  562 D1:B9C7 DD 77 00 -          ld (ix+REGA),a
  563 D1:B9CA DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  564 D1:B9DE E1 -  -  -      pop hl
  565 D1:B9DF C3 F2 B6 D1     jp i6502NextLoad
  566 D1:B9E3 -  -  -  -  
  567 D1:B9E3 -  -  -  -  ;absolute,Y	LDA oper,Y	B9	3	4* 
  568 D1:B9E3 -  -  -  -  inst6502_lda_absy:
  569 D1:B9E3 ED 33 04 -      ADDCYC(4)
  570 D1:B9E6 CD BD B7 D1     PUSH_ABSYSPLIT
  571 D1:B9EA CD 74 AE D1         READ_ACCESS
  572 D1:B9EE DD 77 00 -          ld (ix+REGA),a
  573 D1:B9F1 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  574 D1:BA05 E1 -  -  -      pop hl
  575 D1:BA06 C3 F2 B6 D1     jp i6502NextLoad
  576 D1:BA0A -  -  -  -  
  577 D1:BA0A -  -  -  -  ;(indirect,X)	LDA (oper,X)	A1	2	6
  578 D1:BA0A -  -  -  -  inst6502_lda_indx:
  579 D1:BA0A E5 -  -  -      push hl
  580 D1:BA0B 7E -  -  -          ld  a,(hl)
  581 D1:BA0C 21 00 38 D0         ld  hl,ZEROPAGE
  582 D1:BA10 85 -  -  -          add a,L
  583 D1:BA11 DD 86 01 -          add a,(ix+REGX)
  584 D1:BA14 6F -  -  -          ld  L,a
  585 D1:BA15 7E -  -  -          ld  a,(hl)
  586 D1:BA16 2C -  -  -          inc L
  587 D1:BA17 56 -  -  -          ld  d,(hl)
  588 D1:BA18 42 -  -  -          ld  b,d
  589 D1:BA19 0E 0C -  -          ld  c,BASETABLE_STRIDE
  590 D1:BA1B ED 4C -  -          mlt bc
  591 D1:BA1D 21 00 40 D0         ld  hl,PAGETABLE
  592 D1:BA21 09 -  -  -          add hl,bc
  593 D1:BA22 ED 27 -  -          ld  hl,(hl)
  594 D1:BA24 06 00 -  -          ld  b,0
  595 D1:BA26 4F -  -  -          ld  c,a
  596 D1:BA27 09 -  -  -          add hl,bc
  597 D1:BA28 CD 74 AE D1         READ_ACCESS
  598 D1:BA2C DD 77 00 -          ld (ix+REGA),a
  599 D1:BA2F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  600 D1:BA43 ED 33 06 -          ADDCYC(6)
  601 D1:BA46 E1 -  -  -      pop hl
  602 D1:BA47 C3 F2 B6 D1     jp i6502NextLoad
  603 D1:BA4B -  -  -  -  
  604 D1:BA4B -  -  -  -  ;(indirect),Y	LDA (oper),Y	B1	2	5*
  605 D1:BA4B -  -  -  -  inst6502_lda_indy:
  606 D1:BA4B E5 -  -  -      push hl
  607 D1:BA4C 7E -  -  -          ld  a,(hl)
  608 D1:BA4D 21 00 38 D0         ld  hl,ZEROPAGE
  609 D1:BA51 85 -  -  -          add a,L
  610 D1:BA52 6F -  -  -          ld  L,a
  611 D1:BA53 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  612 D1:BA54 2C -  -  -          inc L
  613 D1:BA55 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  614 D1:BA58 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  615 D1:BA59 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  616 D1:BA5B FD 23 -  -          ADDCYC(1)
  617 D1:BA5D 24 -  -  -          inc h
  618 D1:BA5E 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  619 D1:BA5F 2E 0C -  -          ld  L,BASETABLE_STRIDE
  620 D1:BA61 ED 6C -  -          mlt hl          ;23.
  621 D1:BA63 01 00 40 D0         ld  bc,PAGETABLE
  622 D1:BA67 09 -  -  -          add hl,bc
  623 D1:BA68 ED 27 -  -          ld  hl,(hl)     ;address get.
  624 D1:BA6A 01 00 00 00         ld  bc,0
  625 D1:BA6E 4F -  -  -          ld  c,a
  626 D1:BA6F 09 -  -  -          add hl,bc       ;Full address get.
  627 D1:BA70 CD 74 AE D1         READ_ACCESS
  628 D1:BA74 DD 77 00 -          ld  (ix+REGA),a
  629 D1:BA77 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  630 D1:BA8B ED 33 05 -          ADDCYC(5)
  631 D1:BA8E E1 -  -  -      pop hl
  632 D1:BA8F C3 F2 B6 D1     jp i6502NextLoad
  633 D1:BA93 -  -  -  -  
  634 D1:BA93 -  -  -  -  ;-----------------------------------------------------------------------------
  635 D1:BA93 -  -  -  -  ;LDX - Load Index X with Memory
  636 D1:BA93 -  -  -  -  ;    M -> X
  637 D1:BA93 -  -  -  -  ;    N	Z	C	I	D	V
  638 D1:BA93 -  -  -  -  ;    +	+	-	-	-	-
  639 D1:BA93 -  -  -  -  
  640 D1:BA93 -  -  -  -  ;immediate	LDX #oper	A2	2	2  
  641 D1:BA93 -  -  -  -  inst6502_ldx_imm:
  642 D1:BA93 7E -  -  -      ld  a,(hl)
  643 D1:BA94 DD 77 01 -      ld  (ix+REGX),a
  644 D1:BA97 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  645 D1:BAAB ED 33 02 -      ADDCYC(2)
  646 D1:BAAE C3 F2 B6 D1     jp i6502NextLoad
  647 D1:BAB2 -  -  -  -  
  648 D1:BAB2 -  -  -  -  ;zeropage	LDX oper	A6	2	3 
  649 D1:BAB2 -  -  -  -  inst6502_ldx_zp:
  650 D1:BAB2 7E -  -  -      ld  a,(hl)
  651 D1:BAB3 01 00 38 D0     ld  bc,ZEROPAGE
  652 D1:BAB7 81 -  -  -      add a,c
  653 D1:BAB8 4F -  -  -      ld  c,a
  654 D1:BAB9 0A -  -  -      ld  a,(bc)
  655 D1:BABA DD 77 01 -      ld  (ix+REGX),a
  656 D1:BABD DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  657 D1:BAD1 ED 33 03 -      ADDCYC(3)
  658 D1:BAD4 C3 F2 B6 D1     jp i6502NextLoad
  659 D1:BAD8 -  -  -  -  
  660 D1:BAD8 -  -  -  -  ;zeropage,Y	LDX oper,Y	B6	2	4  
  661 D1:BAD8 -  -  -  -  inst6502_ldx_zpy:
  662 D1:BAD8 7E -  -  -      ld  a,(hl)
  663 D1:BAD9 01 00 38 D0     ld  bc,ZEROPAGE
  664 D1:BADD 81 -  -  -      add a,c
  665 D1:BADE DD 86 02 -      add a,(ix+REGY)
  666 D1:BAE1 4F -  -  -      ld  c,a
  667 D1:BAE2 0A -  -  -      ld  a,(bc)
  668 D1:BAE3 DD 77 01 -      ld  (ix+REGX),a
  669 D1:BAE6 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  670 D1:BAFA ED 33 04 -      ADDCYC(4)
  671 D1:BAFD C3 F2 B6 D1     jp i6502NextLoad
  672 D1:BB01 -  -  -  -  
  673 D1:BB01 -  -  -  -  ;absolute	LDX oper	AE	3	4  
  674 D1:BB01 -  -  -  -  inst6502_ldx_abs:
  675 D1:BB01 CD A1 B7 D1     call subroutine6502_abs_split_start
  676 D1:BB05 E5 -  -  -      push hl
  677 D1:BB06 50 -  -  -          ld  d,b
  678 D1:BB07 79 -  -  -          ld  a,c
  679 D1:BB08 0E 0C -  -          ld  c,BASETABLE_STRIDE
  680 D1:BB0A ED 4C -  -          mlt bc
  681 D1:BB0C 21 00 40 D0         ld  hl,PAGETABLE
  682 D1:BB10 09 -  -  -          add hl,bc
  683 D1:BB11 ED 27 -  -          ld  hl,(hl)
  684 D1:BB13 06 00 -  -          ld  b,0
  685 D1:BB15 4F -  -  -          ld  c,a
  686 D1:BB16 09 -  -  -          add hl,bc   ;full address
  687 D1:BB17 CD 74 AE D1         READ_ACCESS
  688 D1:BB1B DD 77 01 -          ld (ix+REGX),a
  689 D1:BB1E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  690 D1:BB32 ED 33 04 -          ADDCYC(4)
  691 D1:BB35 E1 -  -  -      pop hl
  692 D1:BB36 C3 F2 B6 D1     jp i6502NextLoad
  693 D1:BB3A -  -  -  -  
  694 D1:BB3A -  -  -  -  ;absolute,Y	LDX oper,Y	BE	3	4* 
  695 D1:BB3A -  -  -  -  inst6502_ldx_absy:
  696 D1:BB3A ED 33 04 -      ADDCYC(4)
  697 D1:BB3D CD BD B7 D1     PUSH_ABSYSPLIT
  698 D1:BB41 CD 74 AE D1         READ_ACCESS
  699 D1:BB45 DD 77 01 -          ld (ix+REGX),a
  700 D1:BB48 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  701 D1:BB5C E1 -  -  -      pop hl
  702 D1:BB5D C3 F2 B6 D1     jp i6502NextLoad
  703 D1:BB61 -  -  -  -  
  704 D1:BB61 -  -  -  -  ;-----------------------------------------------------------------------------
  705 D1:BB61 -  -  -  -  ;LDY -  Load Index Y with Memory
  706 D1:BB61 -  -  -  -  ;    M -> Y
  707 D1:BB61 -  -  -  -  ;    N	Z	C	I	D	V
  708 D1:BB61 -  -  -  -  ;    +	+	-	-	-	-
  709 D1:BB61 -  -  -  -  
  710 D1:BB61 -  -  -  -  ;immediate	LDY #oper	A0	2	2  
  711 D1:BB61 -  -  -  -  inst6502_ldy_imm:
  712 D1:BB61 7E -  -  -      ld  a,(hl)
  713 D1:BB62 DD 77 02 -      ld  (ix+REGY),a
  714 D1:BB65 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  715 D1:BB79 ED 33 02 -      ADDCYC(2)
  716 D1:BB7C C3 F2 B6 D1     jp i6502NextLoad
  717 D1:BB80 -  -  -  -  
  718 D1:BB80 -  -  -  -  ;zeropage	LDY oper	A4	2	3  
  719 D1:BB80 -  -  -  -  inst6502_ldy_zp:
  720 D1:BB80 7E -  -  -      ld  a,(hl)
  721 D1:BB81 01 00 38 D0     ld  bc,ZEROPAGE
  722 D1:BB85 81 -  -  -      add a,c
  723 D1:BB86 4F -  -  -      ld  c,a
  724 D1:BB87 0A -  -  -      ld  a,(bc)
  725 D1:BB88 DD 77 02 -      ld  (ix+REGY),a
  726 D1:BB8B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  727 D1:BB9F ED 33 03 -      ADDCYC(3)
  728 D1:BBA2 C3 F2 B6 D1     jp i6502NextLoad
  729 D1:BBA6 -  -  -  -  
  730 D1:BBA6 -  -  -  -  ;zeropage,X	LDY oper,X	B4	2	4  
  731 D1:BBA6 -  -  -  -  inst6502_ldy_zpx:
  732 D1:BBA6 7E -  -  -      ld  a,(hl)
  733 D1:BBA7 01 00 38 D0     ld  bc,ZEROPAGE
  734 D1:BBAB 81 -  -  -      add a,c
  735 D1:BBAC DD 86 01 -      add a,(ix+REGX)
  736 D1:BBAF 4F -  -  -      ld  c,a
  737 D1:BBB0 0A -  -  -      ld  a,(bc)
  738 D1:BBB1 DD 77 02 -      ld  (ix+REGY),a
  739 D1:BBB4 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  740 D1:BBC8 ED 33 04 -      ADDCYC(4)
  741 D1:BBCB C3 F2 B6 D1     jp i6502NextLoad
  742 D1:BBCF -  -  -  -  
  743 D1:BBCF -  -  -  -  ;absolute	LDY oper	AC	3	4  
  744 D1:BBCF -  -  -  -  inst6502_ldy_abs:
  745 D1:BBCF CD A1 B7 D1     call subroutine6502_abs_split_start
  746 D1:BBD3 E5 -  -  -      push hl
  747 D1:BBD4 50 -  -  -          ld  d,b
  748 D1:BBD5 79 -  -  -          ld  a,c
  749 D1:BBD6 0E 0C -  -          ld  c,BASETABLE_STRIDE
  750 D1:BBD8 ED 4C -  -          mlt bc
  751 D1:BBDA 21 00 40 D0         ld  hl,PAGETABLE
  752 D1:BBDE 09 -  -  -          add hl,bc
  753 D1:BBDF ED 27 -  -          ld  hl,(hl)
  754 D1:BBE1 06 00 -  -          ld  b,0
  755 D1:BBE3 4F -  -  -          ld  c,a
  756 D1:BBE4 09 -  -  -          add hl,bc   ;full address
  757 D1:BBE5 CD 74 AE D1         READ_ACCESS
  758 D1:BBE9 DD 77 02 -          ld (ix+REGY),a
  759 D1:BBEC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  760 D1:BC00 ED 33 04 -          ADDCYC(4)
  761 D1:BC03 E1 -  -  -      pop hl
  762 D1:BC04 C3 F2 B6 D1     jp i6502NextLoad
  763 D1:BC08 -  -  -  -  
  764 D1:BC08 -  -  -  -  ;absolute,X	LDY oper,X	BC	3	4* 
  765 D1:BC08 -  -  -  -  inst6502_ldy_absx:
  766 D1:BC08 ED 33 04 -      ADDCYC(4)
  767 D1:BC0B CD C2 B7 D1     PUSH_ABSXSPLIT
  768 D1:BC0F CD 74 AE D1         READ_ACCESS
  769 D1:BC13 DD 77 02 -          ld (ix+REGY),a
  770 D1:BC16 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  771 D1:BC2A E1 -  -  -      pop hl
  772 D1:BC2B C3 F2 B6 D1     jp i6502NextLoad
  773 D1:BC2F -  -  -  -  
  774 D1:BC2F -  -  -  -  ;-----------------------------------------------------------------------------
  775 D1:BC2F -  -  -  -  ;STA - Store Accumulator in Memory
  776 D1:BC2F -  -  -  -  ;    A -> M
  777 D1:BC2F -  -  -  -  ;    N	Z	C	I	D	V
  778 D1:BC2F -  -  -  -  ;    -	-	-	-	-	-
  779 D1:BC2F -  -  -  -  
  780 D1:BC2F -  -  -  -  ;zeropage	STA oper	85	2	3  
  781 D1:BC2F -  -  -  -  inst6502_sta_zp:
  782 D1:BC2F 7E -  -  -      ld  a,(hl)
  783 D1:BC30 01 00 38 D0     ld  bc,ZEROPAGE
  784 D1:BC34 81 -  -  -      add a,c
  785 D1:BC35 4F -  -  -      ld  c,a
  786 D1:BC36 DD 7E 00 -      ld  a,(ix+REGA)
  787 D1:BC39 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  788 D1:BC3A ED 33 03 -      ADDCYC(3)
  789 D1:BC3D C3 F2 B6 D1     jp i6502NextLoad
  790 D1:BC41 -  -  -  -  
  791 D1:BC41 -  -  -  -  ;zeropage,X	STA oper,X	95	2	4  
  792 D1:BC41 -  -  -  -  inst6502_sta_zpx:
  793 D1:BC41 7E -  -  -      ld  a,(hl)
  794 D1:BC42 01 00 38 D0     ld  bc,ZEROPAGE
  795 D1:BC46 81 -  -  -      add a,c
  796 D1:BC47 DD 86 01 -      add a,(ix+REGX)
  797 D1:BC4A 4F -  -  -      ld  c,a
  798 D1:BC4B DD 7E 00 -      ld  a,(ix+REGA)
  799 D1:BC4E 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  800 D1:BC4F ED 33 04 -      ADDCYC(4)
  801 D1:BC52 C3 F2 B6 D1     jp i6502NextLoad
  802 D1:BC56 -  -  -  -  
  803 D1:BC56 -  -  -  -  ;absolute	STA oper	8D	3	4
  804 D1:BC56 -  -  -  -  inst6502_sta_abs:
  805 D1:BC56 CD A1 B7 D1     call subroutine6502_abs_split_start
  806 D1:BC5A E5 -  -  -      push hl
  807 D1:BC5B 50 -  -  -          ld  d,b
  808 D1:BC5C 79 -  -  -          ld  a,c
  809 D1:BC5D 0E 0C -  -          ld  c,BASETABLE_STRIDE
  810 D1:BC5F ED 4C -  -          mlt bc
  811 D1:BC61 21 00 40 D0         ld  hl,PAGETABLE
  812 D1:BC65 09 -  -  -          add hl,bc
  813 D1:BC66 ED 27 -  -          ld  hl,(hl)
  814 D1:BC68 06 00 -  -          ld  b,0
  815 D1:BC6A 4F -  -  -          ld  c,a
  816 D1:BC6B 09 -  -  -          add hl,bc   ;full address
  817 D1:BC6C DD 46 00 -          ld  b,(ix+REGA)
  818 D1:BC6F CD 17 AF D1         WRITE_ACCESS
  819 D1:BC73 ED 33 04 -          ADDCYC(4)
  820 D1:BC76 E1 -  -  -      pop hl
  821 D1:BC77 C3 F2 B6 D1     jp i6502NextLoad
  822 D1:BC7B -  -  -  -  
  823 D1:BC7B -  -  -  -  ;absolute,X	STA oper,X	9D	3	5  
  824 D1:BC7B -  -  -  -  inst6502_sta_absx:
  825 D1:BC7B ED 33 05 -      ADDCYC(5)
  826 D1:BC7E CD FE B7 D1     PUSH_ABSXSPLIT_NODEP
  827 D1:BC82 DD 46 00 -          ld  b,(ix+REGA)
  828 D1:BC85 CD 17 AF D1         WRITE_ACCESS
  829 D1:BC89 E1 -  -  -      pop hl
  830 D1:BC8A C3 F2 B6 D1     jp i6502NextLoad
  831 D1:BC8E -  -  -  -  
  832 D1:BC8E -  -  -  -  ;absolute,Y	STA oper,Y	99	3	5  
  833 D1:BC8E -  -  -  -  inst6502_sta_absy:
  834 D1:BC8E ED 33 05 -      ADDCYC(5)
  835 D1:BC91 CD F9 B7 D1     PUSH_ABSYSPLIT_NODEP
  836 D1:BC95 DD 46 00 -          ld  b,(ix+REGA)
  837 D1:BC98 CD 17 AF D1         WRITE_ACCESS
  838 D1:BC9C E1 -  -  -      pop hl
  839 D1:BC9D C3 F2 B6 D1     jp i6502NextLoad
  840 D1:BCA1 -  -  -  -  
  841 D1:BCA1 -  -  -  -  ;(indirect,X)	STA (oper,X)	81	2	6  
  842 D1:BCA1 -  -  -  -  inst6502_sta_indx:
  843 D1:BCA1 E5 -  -  -      push hl
  844 D1:BCA2 7E -  -  -          ld  a,(hl)
  845 D1:BCA3 21 00 38 D0         ld  hl,ZEROPAGE
  846 D1:BCA7 85 -  -  -          add a,L
  847 D1:BCA8 DD 86 01 -          add a,(ix+REGX)
  848 D1:BCAB 6F -  -  -          ld  L,a
  849 D1:BCAC 7E -  -  -          ld  a,(hl)
  850 D1:BCAD 2C -  -  -          inc L
  851 D1:BCAE 56 -  -  -          ld  d,(hl)
  852 D1:BCAF 42 -  -  -          ld  b,d
  853 D1:BCB0 0E 0C -  -          ld  c,BASETABLE_STRIDE
  854 D1:BCB2 ED 4C -  -          mlt bc
  855 D1:BCB4 21 00 40 D0         ld  hl,PAGETABLE
  856 D1:BCB8 09 -  -  -          add hl,bc
  857 D1:BCB9 ED 27 -  -          ld  hl,(hl)
  858 D1:BCBB 06 00 -  -          ld  b,0
  859 D1:BCBD 4F -  -  -          ld  c,a
  860 D1:BCBE 09 -  -  -          add hl,bc
  861 D1:BCBF DD 46 00 -          ld  b,(ix+REGA)
  862 D1:BCC2 CD 17 AF D1         WRITE_ACCESS
  863 D1:BCC6 ED 33 06 -          ADDCYC(6)
  864 D1:BCC9 E1 -  -  -      pop hl
  865 D1:BCCA C3 F2 B6 D1     jp i6502NextLoad
  866 D1:BCCE -  -  -  -  
  867 D1:BCCE -  -  -  -  ;(indirect),Y	STA (oper),Y	91	2	6  
  868 D1:BCCE -  -  -  -  inst6502_sta_indy:
  869 D1:BCCE E5 -  -  -      push hl
  870 D1:BCCF 7E -  -  -          ld  a,(hl)
  871 D1:BCD0 21 00 38 D0         ld  hl,ZEROPAGE
  872 D1:BCD4 85 -  -  -          add a,L
  873 D1:BCD5 6F -  -  -          ld  L,a
  874 D1:BCD6 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  875 D1:BCD7 2C -  -  -          inc L
  876 D1:BCD8 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  877 D1:BCDB 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  878 D1:BCDC 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  879 D1:BCDE 24 -  -  -          inc h
  880 D1:BCDF 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  881 D1:BCE0 2E 0C -  -          ld  L,BASETABLE_STRIDE
  882 D1:BCE2 ED 6C -  -          mlt hl          ;23.
  883 D1:BCE4 01 00 40 D0         ld  bc,PAGETABLE
  884 D1:BCE8 09 -  -  -          add hl,bc
  885 D1:BCE9 ED 27 -  -          ld  hl,(hl)     ;address get.
  886 D1:BCEB 01 00 00 00         ld  bc,0
  887 D1:BCEF 4F -  -  -          ld  c,a
  888 D1:BCF0 09 -  -  -          add hl,bc       ;Full address get.
  889 D1:BCF1 DD 46 00 -          ld  b,(ix+REGA)
  890 D1:BCF4 CD 17 AF D1         WRITE_ACCESS
  891 D1:BCF8 ED 33 06 -          ADDCYC(6)
  892 D1:BCFB E1 -  -  -      pop hl
  893 D1:BCFC C3 F2 B6 D1     jp i6502NextLoad
  894 D1:BD00 -  -  -  -  
  895 D1:BD00 -  -  -  -  ;-----------------------------------------------------------------------------
  896 D1:BD00 -  -  -  -  ;STX - Store Index X in Memory
  897 D1:BD00 -  -  -  -  ;    X -> M
  898 D1:BD00 -  -  -  -  ;    N	Z	C	I	D	V
  899 D1:BD00 -  -  -  -  ;    -	-	-	-	-	-
  900 D1:BD00 -  -  -  -  
  901 D1:BD00 -  -  -  -  ;zeropage	STX oper	86	2	3  
  902 D1:BD00 -  -  -  -  inst6502_stx_zp:
  903 D1:BD00 7E -  -  -      ld  a,(hl)
  904 D1:BD01 01 00 38 D0     ld  bc,ZEROPAGE
  905 D1:BD05 81 -  -  -      add a,c
  906 D1:BD06 4F -  -  -      ld  c,a
  907 D1:BD07 DD 7E 01 -      ld  a,(ix+REGX)
  908 D1:BD0A 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  909 D1:BD0B ED 33 03 -      ADDCYC(3)
  910 D1:BD0E C3 F2 B6 D1     jp i6502NextLoad
  911 D1:BD12 -  -  -  -  
  912 D1:BD12 -  -  -  -  ;zeropage,Y	STX oper,Y	96	2	4  
  913 D1:BD12 -  -  -  -  inst6502_stx_zpy:
  914 D1:BD12 7E -  -  -      ld  a,(hl)
  915 D1:BD13 01 00 38 D0     ld  bc,ZEROPAGE
  916 D1:BD17 81 -  -  -      add a,c
  917 D1:BD18 DD 86 02 -      add a,(ix+REGY)
  918 D1:BD1B 4F -  -  -      ld  c,a
  919 D1:BD1C DD 7E 01 -      ld  a,(ix+REGX)
  920 D1:BD1F 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  921 D1:BD20 ED 33 04 -      ADDCYC(4)
  922 D1:BD23 C3 F2 B6 D1     jp i6502NextLoad
  923 D1:BD27 -  -  -  -  
  924 D1:BD27 -  -  -  -  ;absolute	STX oper	8E	3	4  
  925 D1:BD27 -  -  -  -  inst6502_stx_abs:
  926 D1:BD27 CD A1 B7 D1     call subroutine6502_abs_split_start
  927 D1:BD2B E5 -  -  -      push hl
  928 D1:BD2C 50 -  -  -          ld  d,b
  929 D1:BD2D 79 -  -  -          ld  a,c
  930 D1:BD2E 0E 0C -  -          ld  c,BASETABLE_STRIDE
  931 D1:BD30 ED 4C -  -          mlt bc
  932 D1:BD32 21 00 40 D0         ld  hl,PAGETABLE
  933 D1:BD36 09 -  -  -          add hl,bc
  934 D1:BD37 ED 27 -  -          ld  hl,(hl)
  935 D1:BD39 06 00 -  -          ld  b,0
  936 D1:BD3B 4F -  -  -          ld  c,a
  937 D1:BD3C 09 -  -  -          add hl,bc   ;full address
  938 D1:BD3D DD 46 01 -          ld  b,(ix+REGX)
  939 D1:BD40 CD 17 AF D1         WRITE_ACCESS
  940 D1:BD44 ED 33 04 -          ADDCYC(4)
  941 D1:BD47 E1 -  -  -      pop hl
  942 D1:BD48 C3 F2 B6 D1     jp i6502NextLoad
  943 D1:BD4C -  -  -  -  
  944 D1:BD4C -  -  -  -  ;-----------------------------------------------------------------------------
  945 D1:BD4C -  -  -  -  ;STY - Store Index Y in Memory
  946 D1:BD4C -  -  -  -  ;    Y -> M
  947 D1:BD4C -  -  -  -  ;    N	Z	C	I	D	V
  948 D1:BD4C -  -  -  -  ;    -	-	-	-	-	-
  949 D1:BD4C -  -  -  -  
  950 D1:BD4C -  -  -  -  ;zeropage	STY oper	84	2	3  
  951 D1:BD4C -  -  -  -  inst6502_sty_zp:
  952 D1:BD4C 7E -  -  -      ld  a,(hl)
  953 D1:BD4D 01 00 38 D0     ld  bc,ZEROPAGE
  954 D1:BD51 81 -  -  -      add a,c
  955 D1:BD52 4F -  -  -      ld  c,a
  956 D1:BD53 DD 7E 02 -      ld  a,(ix+REGY)
  957 D1:BD56 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  958 D1:BD57 ED 33 03 -      ADDCYC(3)
  959 D1:BD5A C3 F2 B6 D1     jp i6502NextLoad
  960 D1:BD5E -  -  -  -  
  961 D1:BD5E -  -  -  -  ;zeropage,X	STY oper,X	94	2	4  
  962 D1:BD5E -  -  -  -  inst6502_sty_zpx:
  963 D1:BD5E 7E -  -  -      ld  a,(hl)
  964 D1:BD5F 01 00 38 D0     ld  bc,ZEROPAGE
  965 D1:BD63 81 -  -  -      add a,c
  966 D1:BD64 DD 86 01 -      add a,(ix+REGX)
  967 D1:BD67 4F -  -  -      ld  c,a
  968 D1:BD68 DD 7E 02 -      ld  a,(ix+REGY)
  969 D1:BD6B 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  970 D1:BD6C ED 33 04 -      ADDCYC(4)
  971 D1:BD6F C3 F2 B6 D1     jp i6502NextLoad
  972 D1:BD73 -  -  -  -  
  973 D1:BD73 -  -  -  -  ;absolute	STY oper	8C	3	4  
  974 D1:BD73 -  -  -  -  inst6502_sty_abs:
  975 D1:BD73 CD A1 B7 D1     call subroutine6502_abs_split_start
  976 D1:BD77 E5 -  -  -      push hl
  977 D1:BD78 50 -  -  -          ld  d,b
  978 D1:BD79 79 -  -  -          ld  a,c
  979 D1:BD7A 0E 0C -  -          ld  c,BASETABLE_STRIDE
  980 D1:BD7C ED 4C -  -          mlt bc
  981 D1:BD7E 21 00 40 D0         ld  hl,PAGETABLE
  982 D1:BD82 09 -  -  -          add hl,bc
  983 D1:BD83 ED 27 -  -          ld  hl,(hl)
  984 D1:BD85 06 00 -  -          ld  b,0
  985 D1:BD87 4F -  -  -          ld  c,a
  986 D1:BD88 09 -  -  -          add hl,bc   ;full address
  987 D1:BD89 DD 46 02 -          ld  b,(ix+REGY)
  988 D1:BD8C CD 17 AF D1         WRITE_ACCESS
  989 D1:BD90 ED 33 04 -          ADDCYC(4)
  990 D1:BD93 E1 -  -  -      pop hl
  991 D1:BD94 C3 F2 B6 D1     jp i6502NextLoad
  992 D1:BD98 -  -  -  -  
  993 D1:BD98 -  -  -  -  ;-----------------------------------------------------------------------------
  994 D1:BD98 -  -  -  -  ;TAX - Transfer Accumulator to Index X [A -> X]
  995 D1:BD98 -  -  -  -  ;N	Z	C	I	D	V
  996 D1:BD98 -  -  -  -  ;+	+	-	-	-	-
  997 D1:BD98 -  -  -  -  ;implied	TAX	AA	1	2
  998 D1:BD98 -  -  -  -  inst6502_tax:
  999 D1:BD98 DD 7E 00 -      ld  a,(ix+REGA)
 1000 D1:BD9B DD 77 01 -      ld  (ix+REGX),a
 1001 D1:BD9E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1002 D1:BDB2 ED 33 02 -      ADDCYC(2)
 1003 D1:BDB5 C3 0B B7 D1     jp i6502FinishLoad
 1004 D1:BDB9 -  -  -  -  
 1005 D1:BDB9 -  -  -  -  ;TAY - Transfer Accumulator to Index Y [A -> Y]
 1006 D1:BDB9 -  -  -  -  ;N	Z	C	I	D	V
 1007 D1:BDB9 -  -  -  -  ;+	+	-	-	-	-
 1008 D1:BDB9 -  -  -  -  ;implied	TAY	A8	1	2
 1009 D1:BDB9 -  -  -  -  inst6502_tay:
 1010 D1:BDB9 DD 7E 00 -      ld  a,(ix+REGA)
 1011 D1:BDBC DD 77 02 -      ld  (ix+REGY),a
 1012 D1:BDBF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1013 D1:BDD3 ED 33 02 -      ADDCYC(2)
 1014 D1:BDD6 C3 0B B7 D1     jp i6502FinishLoad
 1015 D1:BDDA -  -  -  -  
 1016 D1:BDDA -  -  -  -  ;TSX - Transfer Stack Pointer to Index X [SP -> X]
 1017 D1:BDDA -  -  -  -  ;N	Z	C	I	D	V
 1018 D1:BDDA -  -  -  -  ;+	+	-	-	-	-
 1019 D1:BDDA -  -  -  -  ;implied	TSX	BA	1	2
 1020 D1:BDDA -  -  -  -  inst6502_tsx:
 1021 D1:BDDA DD 7E 03 -      ld  a,(ix+REGSP)
 1022 D1:BDDD DD 77 01 -      ld  (ix+REGX),a
 1023 D1:BDE0 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1024 D1:BDF4 ED 33 02 -      ADDCYC(2)
 1025 D1:BDF7 C3 0B B7 D1     jp i6502FinishLoad
 1026 D1:BDFB -  -  -  -  
 1027 D1:BDFB -  -  -  -  ;TXA - Transfer Index X to Accumulator [X -> A]
 1028 D1:BDFB -  -  -  -  ;N	Z	C	I	D	V
 1029 D1:BDFB -  -  -  -  ;+	+	-	-	-	-
 1030 D1:BDFB -  -  -  -  ;implied	TXA	8A	1	2
 1031 D1:BDFB -  -  -  -  inst6502_txa:
 1032 D1:BDFB DD 7E 01 -      ld  a,(ix+REGX)
 1033 D1:BDFE DD 77 00 -      ld  (ix+REGA),a
 1034 D1:BE01 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1035 D1:BE15 ED 33 02 -      ADDCYC(2)
 1036 D1:BE18 C3 0B B7 D1     jp i6502FinishLoad
 1037 D1:BE1C -  -  -  -  
 1038 D1:BE1C -  -  -  -  ;TXS - Transfer Index X to Stack Pointer [X -> SP]
 1039 D1:BE1C -  -  -  -  ;N	Z	C	I	D	V
 1040 D1:BE1C -  -  -  -  ;-	-	-	-	-	-
 1041 D1:BE1C -  -  -  -  ;implied	TXS	9A	1	2
 1042 D1:BE1C -  -  -  -  inst6502_txs:
 1043 D1:BE1C DD 7E 01 -      ld  a,(ix+REGX)
 1044 D1:BE1F DD 77 03 -      ld  (ix+REGSP),a
 1045 D1:BE22 ED 33 02 -      ADDCYC(2)
 1046 D1:BE25 C3 0B B7 D1     jp i6502FinishLoad
 1047 D1:BE29 -  -  -  -  
 1048 D1:BE29 -  -  -  -  ;TYA - Transfer Index Y to Accumulator [Y -> A]
 1049 D1:BE29 -  -  -  -  ;N	Z	C	I	D	V
 1050 D1:BE29 -  -  -  -  ;+	+	-	-	-	-
 1051 D1:BE29 -  -  -  -  ;implied	TYA	98	1	2
 1052 D1:BE29 -  -  -  -  inst6502_tya:
 1053 D1:BE29 DD 7E 02 -      ld  a,(ix+REGY)
 1054 D1:BE2C DD 77 00 -      ld  (ix+REGA),a
 1055 D1:BE2F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1056 D1:BE43 ED 33 02 -      ADDCYC(2)
 1057 D1:BE46 C3 0B B7 D1     jp i6502FinishLoad
 1058 D1:BE4A -  -  -  -  
 1059 D1:BE4A -  -  -  -  ;-----------------------------------------------------------------------------
 1060 D1:BE4A -  -  -  -  ;-----------------------------------------------------------------------------
 1061 D1:BE4A -  -  -  -  ;-----------------------------------------------------------------------------
 1062 D1:BE4A -  -  -  -  ;Instructions by type: Stack Instructions
 1063 D1:BE4A -  -  -  -  ;PHA - Push Accumulator on Stack
 1064 D1:BE4A -  -  -  -  ;    push A
 1065 D1:BE4A -  -  -  -  ;    N	Z	C	I	D	V
 1066 D1:BE4A -  -  -  -  ;    -	-	-	-	-	-
 1067 D1:BE4A -  -  -  -  ;implied	PHA	48	1	3 
 1068 D1:BE4A -  -  -  -  inst6502_pha:
 1069 D1:BE4A ED 33 03 -      ADDCYC(3)
 1070 D1:BE4D DD 7E 00 -      ld  a,(ix+REGA)
 1071 D1:BE50 01 00 39 D0     ld  bc,STACKBASE
 1072 D1:BE54 DD 4E 03 -      ld  c,(ix+REGSP)
 1073 D1:BE57 02 -  -  -      ld  (bc),a
 1074 D1:BE58 0D -  -  -      dec c
 1075 D1:BE59 DD 71 03 -      ld  (ix+REGSP),c
 1076 D1:BE5C C3 0B B7 D1     jp i6502FinishLoad
 1077 D1:BE60 -  -  -  -  
 1078 D1:BE60 -  -  -  -  ;PHP - Push Processor Status on Stack
 1079 D1:BE60 -  -  -  -  ;    The status register will be pushed with the break
 1080 D1:BE60 -  -  -  -  ;    flag and bit 5 set to 1.
 1081 D1:BE60 -  -  -  -  ;    push SR
 1082 D1:BE60 -  -  -  -  ;    N	Z	C	I	D	V
 1083 D1:BE60 -  -  -  -  ;    -	-	-	-	-	-
 1084 D1:BE60 -  -  -  -  ;implied	PHP	08	1	3  
 1085 D1:BE60 -  -  -  -  inst6502_php:
 1086 D1:BE60 ED 33 03 -      ADDCYC(3)
 1087 D1:BE63 DD 7E 04 -      ld  a,(ix+REGSR)
 1088 D1:BE66 F6 30 -  -      or  a,%00110000
 1089 D1:BE68 01 00 39 D0     ld  bc,STACKBASE
 1090 D1:BE6C DD 4E 03 -      ld  c,(ix+REGSP)
 1091 D1:BE6F 02 -  -  -      ld  (bc),a
 1092 D1:BE70 0D -  -  -      dec c
 1093 D1:BE71 DD 71 03 -      ld  (ix+REGSP),c
 1094 D1:BE74 C3 0B B7 D1     jp i6502FinishLoad
 1095 D1:BE78 -  -  -  -  
 1096 D1:BE78 -  -  -  -  
 1097 D1:BE78 -  -  -  -  
 1098 D1:BE78 -  -  -  -  ;PLA - Pull Accumulator from Stack
 1099 D1:BE78 -  -  -  -  ;    pull A
 1100 D1:BE78 -  -  -  -  ;    N	Z	C	I	D	V
 1101 D1:BE78 -  -  -  -  ;    +	+	-	-	-	-
 1102 D1:BE78 -  -  -  -  ;implied	PLA	68	1	4  
 1103 D1:BE78 -  -  -  -  inst6502_pla:
 1104 D1:BE78 ED 33 04 -      ADDCYC(4)
 1105 D1:BE7B 01 00 39 D0     ld  bc,STACKBASE
 1106 D1:BE7F DD 4E 03 -      ld  c,(ix+REGSP)
 1107 D1:BE82 0C -  -  -      inc c
 1108 D1:BE83 0A -  -  -      ld  a,(bc)
 1109 D1:BE84 DD 71 03 -      ld  (ix+REGSP),c
 1110 D1:BE87 DD 77 00 -      ld  (ix+REGA),a
 1111 D1:BE8A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1112 D1:BE9E C3 0B B7 D1     jp i6502FinishLoad
 1113 D1:BEA2 -  -  -  -  
 1114 D1:BEA2 -  -  -  -  ;PLP - Pull Processor Status from Stack
 1115 D1:BEA2 -  -  -  -  ;    The status register will be pulled with the break
 1116 D1:BEA2 -  -  -  -  ;    flag and bit 5 ignored.
 1117 D1:BEA2 -  -  -  -  ;    pull SR
 1118 D1:BEA2 -  -  -  -  ;    N	Z	C	I	D	V
 1119 D1:BEA2 -  -  -  -  ;    from stack
 1120 D1:BEA2 -  -  -  -  ;implied	PLP	28	1	4  
 1121 D1:BEA2 -  -  -  -  inst6502_plp:
 1122 D1:BEA2 ED 33 04 -      ADDCYC(4)
 1123 D1:BEA5 01 00 39 D0     ld  bc,STACKBASE
 1124 D1:BEA9 DD 4E 03 -      ld  c,(ix+REGSP)
 1125 D1:BEAC 0C -  -  -      inc c
 1126 D1:BEAD 0A -  -  -      ld  a,(bc)
 1127 D1:BEAE DD 71 03 -      ld  (ix+REGSP),c
 1128 D1:BEB1 DD 46 04 -      ld  b,(ix+REGSR)
 1129 D1:BEB4 A8 -  -  -      xor a,b
 1130 D1:BEB5 E6 CF -  -      and a,%11001111
 1131 D1:BEB7 A8 -  -  -      xor a,b
 1132 D1:BEB8 DD 77 04 -      ld  (ix+REGSR),a
 1133 D1:BEBB C3 0B B7 D1     jp i6502FinishLoad
 1134 D1:BEBF -  -  -  -  
 1135 D1:BEBF -  -  -  -  
 1136 D1:BEBF -  -  -  -  ;-----------------------------------------------------------------------------
 1137 D1:BEBF -  -  -  -  ;-----------------------------------------------------------------------------
 1138 D1:BEBF -  -  -  -  ;-----------------------------------------------------------------------------
 1139 D1:BEBF -  -  -  -  ;Instructions by type: Decrements and Increments
 1140 D1:BEBF -  -  -  -  
 1141 D1:BEBF -  -  -  -  ;DEC -  Decrement Memory by One
 1142 D1:BEBF -  -  -  -  ;    M - 1 -> M
 1143 D1:BEBF -  -  -  -  ;    N	Z	C	I	D	V
 1144 D1:BEBF -  -  -  -  ;    +	+	-	-	-	-
 1145 D1:BEBF -  -  -  -  ;    addressing	assembler	opc	bytes	cycles
 1146 D1:BEBF -  -  -  -  
 1147 D1:BEBF -  -  -  -  ;    zeropage	DEC oper	C6	2	5  
 1148 D1:BEBF -  -  -  -  inst6502_dec_zp:
 1149 D1:BEBF 7E -  -  -      ld  a,(hl)
 1150 D1:BEC0 01 00 38 D0     ld  bc,ZEROPAGE
 1151 D1:BEC4 81 -  -  -      add a,c
 1152 D1:BEC5 4F -  -  -      ld  c,a
 1153 D1:BEC6 0A -  -  -      ld  a,(bc)
 1154 D1:BEC7 3D -  -  -      dec a
 1155 D1:BEC8 02 -  -  -      ld  (bc),a
 1156 D1:BEC9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1157 D1:BEDD ED 33 05 -      ADDCYC(5)
 1158 D1:BEE0 C3 F2 B6 D1     jp i6502NextLoad
 1159 D1:BEE4 -  -  -  -  
 1160 D1:BEE4 -  -  -  -  ;    zeropage,X	DEC oper,X	D6	2	6  
 1161 D1:BEE4 -  -  -  -  inst6502_dec_zpx:
 1162 D1:BEE4 7E -  -  -      ld  a,(hl)
 1163 D1:BEE5 01 00 38 D0     ld  bc,ZEROPAGE
 1164 D1:BEE9 81 -  -  -      add a,c
 1165 D1:BEEA DD 86 01 -      add a,(ix+REGX)
 1166 D1:BEED 4F -  -  -      ld  c,a
 1167 D1:BEEE 0A -  -  -      ld  a,(bc)
 1168 D1:BEEF 3D -  -  -      dec a
 1169 D1:BEF0 02 -  -  -      ld  (bc),a
 1170 D1:BEF1 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1171 D1:BF05 ED 33 06 -      ADDCYC(6)
 1172 D1:BF08 C3 F2 B6 D1     jp i6502NextLoad
 1173 D1:BF0C -  -  -  -  
 1174 D1:BF0C -  -  -  -  ;    absolute	DEC oper	CE	3	6  
 1175 D1:BF0C -  -  -  -  inst6502_dec_abs:
 1176 D1:BF0C CD A1 B7 D1     call subroutine6502_abs_split_start
 1177 D1:BF10 E5 -  -  -      push hl
 1178 D1:BF11 50 -  -  -          ld  d,b
 1179 D1:BF12 79 -  -  -          ld  a,c
 1180 D1:BF13 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1181 D1:BF15 ED 4C -  -          mlt bc
 1182 D1:BF17 21 00 40 D0         ld  hl,PAGETABLE
 1183 D1:BF1B 09 -  -  -          add hl,bc
 1184 D1:BF1C ED 27 -  -          ld  hl,(hl)
 1185 D1:BF1E 06 00 -  -          ld  b,0
 1186 D1:BF20 4F -  -  -          ld  c,a
 1187 D1:BF21 09 -  -  -          add hl,bc   ;full address
 1188 D1:BF22 CD 74 AE D1         READ_ACCESS
 1189 D1:BF26 3D -  -  -          dec a
 1190 D1:BF27 47 -  -  -          ld  b,a
 1191 D1:BF28 -  -  -  -          ;
 1192 D1:BF28 DD 7E 04 -          ld  a,(ix+REGSR)
 1193 D1:BF2B CB 8F -  -          res SF_ZERO,a
 1194 D1:BF2D 20 02 -  -          jr  nz,$+4
 1195 D1:BF2F CB CF -  -          set SF_ZERO,a
 1196 D1:BF31 CB BF -  -          res SF_NEG,a
 1197 D1:BF33 F2 39 BF D1         jp  p,$+6
 1198 D1:BF37 CB FF -  -          set SF_NEG,a
 1199 D1:BF39 DD 77 04 -          ld  (ix+REGSR),a
 1200 D1:BF3C -  -  -  -          ;
 1201 D1:BF3C CD 17 AF D1         WRITE_ACCESS
 1202 D1:BF40 ED 33 06 -          ADDCYC(6)
 1203 D1:BF43 E1 -  -  -      pop hl
 1204 D1:BF44 C3 F2 B6 D1     jp i6502NextLoad
 1205 D1:BF48 -  -  -  -  
 1206 D1:BF48 -  -  -  -  ;    absolute,X	DEC oper,X	DE	3	7  
 1207 D1:BF48 -  -  -  -  inst6502_dec_absx:
 1208 D1:BF48 ED 33 07 -      ADDCYC(7)
 1209 D1:BF4B CD FE B7 D1     PUSH_ABSXSPLIT_NODEP
 1210 D1:BF4F CD 74 AE D1         READ_ACCESS
 1211 D1:BF53 3D -  -  -          dec a
 1212 D1:BF54 47 -  -  -          ld  b,a
 1213 D1:BF55 -  -  -  -          ;
 1214 D1:BF55 DD 7E 04 -          ld  a,(ix+REGSR)
 1215 D1:BF58 CB 8F -  -          res SF_ZERO,a
 1216 D1:BF5A 20 02 -  -          jr  nz,$+4
 1217 D1:BF5C CB CF -  -          set SF_ZERO,a
 1218 D1:BF5E CB BF -  -          res SF_NEG,a
 1219 D1:BF60 F2 66 BF D1         jp  p,$+6
 1220 D1:BF64 CB FF -  -          set SF_NEG,a
 1221 D1:BF66 DD 77 04 -          ld  (ix+REGSR),a
 1222 D1:BF69 -  -  -  -          ;
 1223 D1:BF69 CD 17 AF D1         WRITE_ACCESS
 1224 D1:BF6D E1 -  -  -      pop hl
 1225 D1:BF6E C3 F2 B6 D1     jp i6502NextLoad
 1226 D1:BF72 -  -  -  -  
 1227 D1:BF72 -  -  -  -  ;DEX - Decrement Index X by One [X - 1 -> X]
 1228 D1:BF72 -  -  -  -  ;Flags altered: NZ
 1229 D1:BF72 -  -  -  -  ;implied	DEX	CA	1	2  
 1230 D1:BF72 -  -  -  -  inst6502_dex:
 1231 D1:BF72 DD 35 01 -      dec (ix+REGX)
 1232 D1:BF75 DD 7E 04 -  _:  ld  a,(ix+REGSR)
 1233 D1:BF78 CB 8F -  -      res SF_ZERO,a
 1234 D1:BF7A 20 02 -  -      jr  nz,$+4
 1235 D1:BF7C CB CF -  -      set SF_ZERO,a
 1236 D1:BF7E CB BF -  -      res SF_NEG,a
 1237 D1:BF80 F2 86 BF D1     jp  p,$+6
 1238 D1:BF84 CB FF -  -      set SF_NEG,a
 1239 D1:BF86 DD 77 04 -      ld  (ix+REGSR),a
 1240 D1:BF89 ED 33 02 -      ADDCYC(2)
 1241 D1:BF8C C3 0B B7 D1     jp i6502FinishLoad
 1242 D1:BF90 -  -  -  -  
 1243 D1:BF90 -  -  -  -  ;DEY - Decrement Index Y by One [Y - 1 -> Y]
 1244 D1:BF90 -  -  -  -  ;Flags altered: NZ
 1245 D1:BF90 -  -  -  -  ;implied	DEY	88	1	2  
 1246 D1:BF90 -  -  -  -  inst6502_dey:
 1247 D1:BF90 DD 35 02 -      dec (ix+REGY)
 1248 D1:BF93 18 E0 -  -      jr  -_
 1249 D1:BF95 -  -  -  -  
 1250 D1:BF95 -  -  -  -  
 1251 D1:BF95 -  -  -  -  ;INX - Increment Index X by One [X + 1 -> X]
 1252 D1:BF95 -  -  -  -  ;Flags altered: NZ
 1253 D1:BF95 -  -  -  -  ;implied	INX	E8	1	2  
 1254 D1:BF95 -  -  -  -  inst6502_inx:
 1255 D1:BF95 DD 34 01 -      inc (ix+REGX)
 1256 D1:BF98 18 DB -  -      jr  -_
 1257 D1:BF9A -  -  -  -  
 1258 D1:BF9A -  -  -  -  
 1259 D1:BF9A -  -  -  -  ;INY - Increment Index Y by One [Y + 1 -> Y]
 1260 D1:BF9A -  -  -  -  ;Flags altered: NZ
 1261 D1:BF9A -  -  -  -  ;implied	INY	C8	1	2  
 1262 D1:BF9A -  -  -  -  inst6502_iny:
 1263 D1:BF9A DD 34 02 -      inc (ix+REGY)
 1264 D1:BF9D 18 D6 -  -      jr  -_
 1265 D1:BF9F -  -  -  -  
 1266 D1:BF9F -  -  -  -  
 1267 D1:BF9F -  -  -  -  ;INC - Increment Memory by One
 1268 D1:BF9F -  -  -  -  ;    M + 1 -> M
 1269 D1:BF9F -  -  -  -  ;    N	Z	C	I	D	V
 1270 D1:BF9F -  -  -  -  ;    +	+	-	-	-	-
 1271 D1:BF9F -  -  -  -  
 1272 D1:BF9F -  -  -  -  ;zeropage	INC oper	E6	2	5  
 1273 D1:BF9F -  -  -  -  inst6502_inc_zp:
 1274 D1:BF9F 7E -  -  -      ld  a,(hl)
 1275 D1:BFA0 01 00 38 D0     ld  bc,ZEROPAGE
 1276 D1:BFA4 81 -  -  -      add a,c
 1277 D1:BFA5 4F -  -  -      ld  c,a
 1278 D1:BFA6 0A -  -  -      ld  a,(bc)
 1279 D1:BFA7 3C -  -  -      inc a
 1280 D1:BFA8 02 -  -  -      ld  (bc),a
 1281 D1:BFA9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1282 D1:BFBD ED 33 05 -      ADDCYC(5)
 1283 D1:BFC0 C3 F2 B6 D1     jp i6502NextLoad
 1284 D1:BFC4 -  -  -  -  
 1285 D1:BFC4 -  -  -  -  ;zeropage,X	INC oper,X	F6	2	6  
 1286 D1:BFC4 -  -  -  -  inst6502_inc_zpx:
 1287 D1:BFC4 7E -  -  -      ld  a,(hl)
 1288 D1:BFC5 01 00 38 D0     ld  bc,ZEROPAGE
 1289 D1:BFC9 81 -  -  -      add a,c
 1290 D1:BFCA DD 86 01 -      add a,(ix+REGX)
 1291 D1:BFCD 4F -  -  -      ld  c,a
 1292 D1:BFCE 0A -  -  -      ld  a,(bc)
 1293 D1:BFCF 3C -  -  -      inc a
 1294 D1:BFD0 02 -  -  -      ld  (bc),a
 1295 D1:BFD1 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1296 D1:BFE5 ED 33 06 -      ADDCYC(6)
 1297 D1:BFE8 C3 F2 B6 D1     jp i6502NextLoad
 1298 D1:BFEC -  -  -  -      
 1299 D1:BFEC -  -  -  -  ;absolute	INC oper	EE	3	6
 1300 D1:BFEC -  -  -  -  inst6502_inc_abs:
 1301 D1:BFEC CD A1 B7 D1     call subroutine6502_abs_split_start
 1302 D1:BFF0 E5 -  -  -      push hl
 1303 D1:BFF1 50 -  -  -          ld  d,b
 1304 D1:BFF2 79 -  -  -          ld  a,c
 1305 D1:BFF3 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1306 D1:BFF5 ED 4C -  -          mlt bc
 1307 D1:BFF7 21 00 40 D0         ld  hl,PAGETABLE
 1308 D1:BFFB 09 -  -  -          add hl,bc
 1309 D1:BFFC ED 27 -  -          ld  hl,(hl)
 1310 D1:BFFE 06 00 -  -          ld  b,0
 1311 D1:C000 4F -  -  -          ld  c,a
 1312 D1:C001 09 -  -  -          add hl,bc   ;full address
 1313 D1:C002 CD 74 AE D1         READ_ACCESS
 1314 D1:C006 3C -  -  -          inc a
 1315 D1:C007 47 -  -  -          ld  b,a
 1316 D1:C008 -  -  -  -          ;
 1317 D1:C008 DD 7E 04 -          ld  a,(ix+REGSR)
 1318 D1:C00B CB 8F -  -          res SF_ZERO,a
 1319 D1:C00D 20 02 -  -          jr  nz,$+4
 1320 D1:C00F CB CF -  -          set SF_ZERO,a
 1321 D1:C011 CB BF -  -          res SF_NEG,a
 1322 D1:C013 F2 19 C0 D1         jp  p,$+6
 1323 D1:C017 CB FF -  -          set SF_NEG,a
 1324 D1:C019 DD 77 04 -          ld  (ix+REGSR),a
 1325 D1:C01C -  -  -  -          ;
 1326 D1:C01C CD 17 AF D1         WRITE_ACCESS
 1327 D1:C020 ED 33 06 -          ADDCYC(6)
 1328 D1:C023 E1 -  -  -      pop hl
 1329 D1:C024 C3 F2 B6 D1     jp i6502NextLoad
 1330 D1:C028 -  -  -  -  
 1331 D1:C028 -  -  -  -  ;absolute,X	INC oper,X	FE	3	7  
 1332 D1:C028 -  -  -  -  inst6502_inc_absx:
 1333 D1:C028 ED 33 07 -      ADDCYC(7)
 1334 D1:C02B CD FE B7 D1     PUSH_ABSXSPLIT_NODEP
 1335 D1:C02F CD 74 AE D1         READ_ACCESS
 1336 D1:C033 3C -  -  -          inc a
 1337 D1:C034 47 -  -  -          ld  b,a
 1338 D1:C035 -  -  -  -          ;
 1339 D1:C035 DD 7E 04 -          ld  a,(ix+REGSR)
 1340 D1:C038 CB 8F -  -          res SF_ZERO,a
 1341 D1:C03A 20 02 -  -          jr  nz,$+4
 1342 D1:C03C CB CF -  -          set SF_ZERO,a
 1343 D1:C03E CB BF -  -          res SF_NEG,a
 1344 D1:C040 F2 46 C0 D1         jp  p,$+6
 1345 D1:C044 CB FF -  -          set SF_NEG,a
 1346 D1:C046 DD 77 04 -          ld  (ix+REGSR),a
 1347 D1:C049 -  -  -  -          ;
 1348 D1:C049 CD 17 AF D1         WRITE_ACCESS
 1349 D1:C04D E1 -  -  -      pop hl
 1350 D1:C04E C3 F2 B6 D1     jp i6502NextLoad
 1351 D1:C052 -  -  -  -  
 1352 D1:C052 -  -  -  -  ;-----------------------------------------------------------------------------
 1353 D1:C052 -  -  -  -  ;-----------------------------------------------------------------------------
 1354 D1:C052 -  -  -  -  ;-----------------------------------------------------------------------------
 1355 D1:C052 -  -  -  -  ;Instructions by type: Arithmetic Operations
 1356 D1:C052 -  -  -  -  ;ADC - Add Memory to Accumulator with Carry  [A + M + C -> A, C]
 1357 D1:C052 -  -  -  -  ;    N	Z	C	I	D	V
 1358 D1:C052 -  -  -  -  ;    +	+	+	-	-	+
 1359 D1:C052 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1360 D1:C052 -  -  -  -  
 1361 D1:C052 -  -  -  -  ;immediate	ADC #oper	69	2	2  
 1362 D1:C052 -  -  -  -  inst6502_adc_imm:
 1363 D1:C052 ED 33 02 -      ADDCYC(2)
 1364 D1:C055 4E -  -  -      ld  c,(hl)
 1365 D1:C056 C3 33 B8 D1     jp  subroutine6502_adc_combined_end
 1366 D1:C05A -  -  -  -      
 1367 D1:C05A -  -  -  -  
 1368 D1:C05A -  -  -  -  ;zeropage	ADC oper	65	2	3
 1369 D1:C05A -  -  -  -  inst6502_adc_zp:
 1370 D1:C05A ED 33 03 -      ADDCYC(3)
 1371 D1:C05D 7E -  -  -      ld  a,(hl)
 1372 D1:C05E 01 00 38 D0     ld  bc,ZEROPAGE
 1373 D1:C062 81 -  -  -      add a,c
 1374 D1:C063 4F -  -  -      ld  c,a
 1375 D1:C064 0A -  -  -      ld  a,(bc)
 1376 D1:C065 4F -  -  -      ld  c,a
 1377 D1:C066 C3 33 B8 D1     jp  subroutine6502_adc_combined_end
 1378 D1:C06A -  -  -  -  
 1379 D1:C06A -  -  -  -  ;zeropage,X	ADC oper,X	75	2	4  
 1380 D1:C06A -  -  -  -  inst6502_adc_zpx:
 1381 D1:C06A ED 33 04 -      ADDCYC(4)
 1382 D1:C06D 7E -  -  -      ld  a,(hl)
 1383 D1:C06E DD 86 01 -      add a,(ix+REGX)
 1384 D1:C071 01 00 38 D0     ld  bc,ZEROPAGE
 1385 D1:C075 81 -  -  -      add a,c
 1386 D1:C076 4F -  -  -      ld  c,a
 1387 D1:C077 0A -  -  -      ld  a,(bc)
 1388 D1:C078 4F -  -  -      ld  c,a
 1389 D1:C079 C3 33 B8 D1     jp  subroutine6502_adc_combined_end
 1390 D1:C07D -  -  -  -  
 1391 D1:C07D -  -  -  -  ;absolute	ADC oper	6D	3	4  
 1392 D1:C07D -  -  -  -  inst6502_adc_abs:
 1393 D1:C07D ED 33 04 -      ADDCYC(4)
 1394 D1:C080 CD A1 B7 D1     call subroutine6502_abs_split_start
 1395 D1:C084 E5 -  -  -      push hl
 1396 D1:C085 50 -  -  -          ld  d,b
 1397 D1:C086 79 -  -  -          ld  a,c
 1398 D1:C087 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1399 D1:C089 ED 4C -  -          mlt bc
 1400 D1:C08B 21 00 40 D0         ld  hl,PAGETABLE
 1401 D1:C08F 09 -  -  -          add hl,bc
 1402 D1:C090 ED 27 -  -          ld  hl,(hl)
 1403 D1:C092 06 00 -  -          ld  b,0
 1404 D1:C094 4F -  -  -          ld  c,a
 1405 D1:C095 09 -  -  -          add hl,bc   ;full address
 1406 D1:C096 CD 74 AE D1         READ_ACCESS
 1407 D1:C09A E1 -  -  -      pop hl
 1408 D1:C09B 4F -  -  -      ld  c,a
 1409 D1:C09C C3 33 B8 D1     jp  subroutine6502_adc_combined_end
 1410 D1:C0A0 -  -  -  -  
 1411 D1:C0A0 -  -  -  -  ;absolute,X	ADC oper,X	7D	3	4* 
 1412 D1:C0A0 -  -  -  -  inst6502_adc_absx:
 1413 D1:C0A0 ED 33 04 -      ADDCYC(4)
 1414 D1:C0A3 CD C2 B7 D1     PUSH_ABSXSPLIT
 1415 D1:C0A7 CD 74 AE D1         READ_ACCESS
 1416 D1:C0AB E1 -  -  -      pop hl
 1417 D1:C0AC 4F -  -  -      ld  c,a
 1418 D1:C0AD C3 33 B8 D1     jp  subroutine6502_adc_combined_end
 1419 D1:C0B1 -  -  -  -  
 1420 D1:C0B1 -  -  -  -  ;absolute,Y	ADC oper,Y	79	3	4*
 1421 D1:C0B1 -  -  -  -  inst6502_adc_absy:
 1422 D1:C0B1 ED 33 04 -      ADDCYC(4)
 1423 D1:C0B4 CD BD B7 D1     PUSH_ABSYSPLIT
 1424 D1:C0B8 CD 74 AE D1         READ_ACCESS
 1425 D1:C0BC E1 -  -  -      pop hl
 1426 D1:C0BD 4F -  -  -      ld  c,a
 1427 D1:C0BE C3 33 B8 D1     jp  subroutine6502_adc_combined_end
 1428 D1:C0C2 -  -  -  -  
 1429 D1:C0C2 -  -  -  -  ;(indirect,X)	ADC (oper,X)	61	2	6  
 1430 D1:C0C2 -  -  -  -  inst6502_adc_indx:
 1431 D1:C0C2 ED 33 06 -      ADDCYC(6)
 1432 D1:C0C5 E5 -  -  -      push hl
 1433 D1:C0C6 7E -  -  -          ld  a,(hl)
 1434 D1:C0C7 21 00 38 D0         ld  hl,ZEROPAGE
 1435 D1:C0CB 85 -  -  -          add a,L
 1436 D1:C0CC DD 86 01 -          add a,(ix+REGX)
 1437 D1:C0CF 6F -  -  -          ld  L,a
 1438 D1:C0D0 7E -  -  -          ld  a,(hl)
 1439 D1:C0D1 2C -  -  -          inc L
 1440 D1:C0D2 56 -  -  -          ld  d,(hl)
 1441 D1:C0D3 42 -  -  -          ld  b,d
 1442 D1:C0D4 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1443 D1:C0D6 ED 4C -  -          mlt bc
 1444 D1:C0D8 21 00 40 D0         ld  hl,PAGETABLE
 1445 D1:C0DC 09 -  -  -          add hl,bc
 1446 D1:C0DD ED 27 -  -          ld  hl,(hl)
 1447 D1:C0DF 06 00 -  -          ld  b,0
 1448 D1:C0E1 4F -  -  -          ld  c,a
 1449 D1:C0E2 09 -  -  -          add hl,bc
 1450 D1:C0E3 CD 74 AE D1         READ_ACCESS
 1451 D1:C0E7 E1 -  -  -      pop hl
 1452 D1:C0E8 4F -  -  -      ld  c,a
 1453 D1:C0E9 C3 33 B8 D1     jp  subroutine6502_adc_combined_end
 1454 D1:C0ED -  -  -  -  
 1455 D1:C0ED -  -  -  -  ;(indirect),Y	ADC (oper),Y	71	2	5* 
 1456 D1:C0ED -  -  -  -  inst6502_adc_indy:
 1457 D1:C0ED ED 33 05 -      ADDCYC(5)
 1458 D1:C0F0 E5 -  -  -      push hl
 1459 D1:C0F1 7E -  -  -          ld  a,(hl)
 1460 D1:C0F2 21 00 38 D0         ld  hl,ZEROPAGE
 1461 D1:C0F6 85 -  -  -          add a,L
 1462 D1:C0F7 6F -  -  -          ld  L,a
 1463 D1:C0F8 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1464 D1:C0F9 2C -  -  -          inc L
 1465 D1:C0FA DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1466 D1:C0FD 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1467 D1:C0FE 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1468 D1:C100 FD 23 -  -          ADDCYC(1)
 1469 D1:C102 24 -  -  -          inc h
 1470 D1:C103 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1471 D1:C104 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1472 D1:C106 ED 6C -  -          mlt hl          ;23.
 1473 D1:C108 01 00 40 D0         ld  bc,PAGETABLE
 1474 D1:C10C 09 -  -  -          add hl,bc
 1475 D1:C10D ED 27 -  -          ld  hl,(hl)     ;address get.
 1476 D1:C10F 01 00 00 00         ld  bc,0
 1477 D1:C113 4F -  -  -          ld  c,a
 1478 D1:C114 09 -  -  -          add hl,bc       ;Full address get.
 1479 D1:C115 CD 74 AE D1         READ_ACCESS
 1480 D1:C119 E1 -  -  -      pop hl
 1481 D1:C11A 4F -  -  -      ld  c,a
 1482 D1:C11B C3 33 B8 D1     jp  subroutine6502_adc_combined_end
 1483 D1:C11F -  -  -  -  
 1484 D1:C11F -  -  -  -  
 1485 D1:C11F -  -  -  -  ;SBC - Subtract Memory from Accumulator with Borrow
 1486 D1:C11F -  -  -  -  ;A - M - C̅ -> A
 1487 D1:C11F -  -  -  -  ;N	Z	C	I	D	V
 1488 D1:C11F -  -  -  -  ;+	+	+	-	-	+
 1489 D1:C11F -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1490 D1:C11F -  -  -  -  
 1491 D1:C11F -  -  -  -  ;immediate	SBC #oper	E9	2	2  
 1492 D1:C11F -  -  -  -  inst6502_sbc_imm:
 1493 D1:C11F ED 33 02 -      ADDCYC(2)
 1494 D1:C122 4E -  -  -      ld  c,(hl)
 1495 D1:C123 C3 64 B8 D1     jp  subroutine6502_sbc_combined_end
 1496 D1:C127 -  -  -  -  
 1497 D1:C127 -  -  -  -  ;zeropage	SBC oper	E5	2	3  
 1498 D1:C127 -  -  -  -  inst6502_sbc_zp:
 1499 D1:C127 ED 33 03 -      ADDCYC(3)
 1500 D1:C12A 7E -  -  -      ld  a,(hl)
 1501 D1:C12B 01 00 38 D0     ld  bc,ZEROPAGE
 1502 D1:C12F 81 -  -  -      add a,c
 1503 D1:C130 4F -  -  -      ld  c,a
 1504 D1:C131 0A -  -  -      ld  a,(bc)
 1505 D1:C132 4F -  -  -      ld  c,a
 1506 D1:C133 C3 64 B8 D1     jp  subroutine6502_sbc_combined_end
 1507 D1:C137 -  -  -  -  
 1508 D1:C137 -  -  -  -  ;zeropage,X	SBC oper,X	F5	2	4  
 1509 D1:C137 -  -  -  -  inst6502_sbc_zpx:
 1510 D1:C137 ED 33 04 -      ADDCYC(4)
 1511 D1:C13A 7E -  -  -      ld  a,(hl)
 1512 D1:C13B DD 86 01 -      add a,(ix+REGX)
 1513 D1:C13E 01 00 38 D0     ld  bc,ZEROPAGE
 1514 D1:C142 81 -  -  -      add a,c
 1515 D1:C143 4F -  -  -      ld  c,a
 1516 D1:C144 0A -  -  -      ld  a,(bc)
 1517 D1:C145 4F -  -  -      ld  c,a
 1518 D1:C146 C3 64 B8 D1     jp  subroutine6502_sbc_combined_end
 1519 D1:C14A -  -  -  -  
 1520 D1:C14A -  -  -  -  ;absolute	SBC oper	ED	3	4  
 1521 D1:C14A -  -  -  -  inst6502_sbc_abs:
 1522 D1:C14A ED 33 04 -      ADDCYC(4)
 1523 D1:C14D CD A1 B7 D1     call subroutine6502_abs_split_start
 1524 D1:C151 E5 -  -  -      push hl
 1525 D1:C152 50 -  -  -          ld  d,b
 1526 D1:C153 79 -  -  -          ld  a,c
 1527 D1:C154 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1528 D1:C156 ED 4C -  -          mlt bc
 1529 D1:C158 21 00 40 D0         ld  hl,PAGETABLE
 1530 D1:C15C 09 -  -  -          add hl,bc
 1531 D1:C15D ED 27 -  -          ld  hl,(hl)
 1532 D1:C15F 06 00 -  -          ld  b,0
 1533 D1:C161 4F -  -  -          ld  c,a
 1534 D1:C162 09 -  -  -          add hl,bc   ;full address
 1535 D1:C163 CD 74 AE D1         READ_ACCESS
 1536 D1:C167 E1 -  -  -      pop hl
 1537 D1:C168 4F -  -  -      ld  c,a
 1538 D1:C169 C3 64 B8 D1     jp  subroutine6502_sbc_combined_end
 1539 D1:C16D -  -  -  -  
 1540 D1:C16D -  -  -  -  ;absolute,X	SBC oper,X	FD	3	4* 
 1541 D1:C16D -  -  -  -  inst6502_sbc_absx:
 1542 D1:C16D ED 33 04 -      ADDCYC(4)
 1543 D1:C170 CD C2 B7 D1     PUSH_ABSXSPLIT
 1544 D1:C174 CD 74 AE D1         READ_ACCESS
 1545 D1:C178 E1 -  -  -      pop hl
 1546 D1:C179 4F -  -  -      ld  c,a
 1547 D1:C17A C3 64 B8 D1     jp  subroutine6502_sbc_combined_end
 1548 D1:C17E -  -  -  -  
 1549 D1:C17E -  -  -  -  ;absolute,Y	SBC oper,Y	F9	3	4* 
 1550 D1:C17E -  -  -  -  inst6502_sbc_absy:
 1551 D1:C17E ED 33 04 -      ADDCYC(4)
 1552 D1:C181 CD BD B7 D1     PUSH_ABSYSPLIT
 1553 D1:C185 CD 74 AE D1         READ_ACCESS
 1554 D1:C189 E1 -  -  -      pop hl
 1555 D1:C18A 4F -  -  -      ld  c,a
 1556 D1:C18B C3 64 B8 D1     jp  subroutine6502_sbc_combined_end
 1557 D1:C18F -  -  -  -  
 1558 D1:C18F -  -  -  -  ;(indirect,X)	SBC (oper,X)	E1	2	6  
 1559 D1:C18F -  -  -  -  inst6502_sbc_indx:
 1560 D1:C18F ED 33 06 -      ADDCYC(6)
 1561 D1:C192 E5 -  -  -      push hl
 1562 D1:C193 7E -  -  -          ld  a,(hl)
 1563 D1:C194 21 00 38 D0         ld  hl,ZEROPAGE
 1564 D1:C198 85 -  -  -          add a,L
 1565 D1:C199 DD 86 01 -          add a,(ix+REGX)
 1566 D1:C19C 6F -  -  -          ld  L,a
 1567 D1:C19D 7E -  -  -          ld  a,(hl)
 1568 D1:C19E 2C -  -  -          inc L
 1569 D1:C19F 56 -  -  -          ld  d,(hl)
 1570 D1:C1A0 42 -  -  -          ld  b,d
 1571 D1:C1A1 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1572 D1:C1A3 ED 4C -  -          mlt bc
 1573 D1:C1A5 21 00 40 D0         ld  hl,PAGETABLE
 1574 D1:C1A9 09 -  -  -          add hl,bc
 1575 D1:C1AA ED 27 -  -          ld  hl,(hl)
 1576 D1:C1AC 06 00 -  -          ld  b,0
 1577 D1:C1AE 4F -  -  -          ld  c,a
 1578 D1:C1AF 09 -  -  -          add hl,bc
 1579 D1:C1B0 CD 74 AE D1         READ_ACCESS
 1580 D1:C1B4 E1 -  -  -      pop hl
 1581 D1:C1B5 4F -  -  -      ld  c,a
 1582 D1:C1B6 C3 64 B8 D1     jp  subroutine6502_sbc_combined_end
 1583 D1:C1BA -  -  -  -  
 1584 D1:C1BA -  -  -  -  ;(indirect),Y	SBC (oper),Y	F1	2	5* 
 1585 D1:C1BA -  -  -  -  inst6502_sbc_indy:
 1586 D1:C1BA ED 33 05 -      ADDCYC(5)
 1587 D1:C1BD E5 -  -  -      push hl
 1588 D1:C1BE 7E -  -  -          ld  a,(hl)
 1589 D1:C1BF 21 00 38 D0         ld  hl,ZEROPAGE
 1590 D1:C1C3 85 -  -  -          add a,L
 1591 D1:C1C4 6F -  -  -          ld  L,a
 1592 D1:C1C5 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1593 D1:C1C6 2C -  -  -          inc L
 1594 D1:C1C7 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1595 D1:C1CA 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1596 D1:C1CB 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1597 D1:C1CD FD 23 -  -          ADDCYC(1)
 1598 D1:C1CF 24 -  -  -          inc h
 1599 D1:C1D0 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1600 D1:C1D1 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1601 D1:C1D3 ED 6C -  -          mlt hl          ;23.
 1602 D1:C1D5 01 00 40 D0         ld  bc,PAGETABLE
 1603 D1:C1D9 09 -  -  -          add hl,bc
 1604 D1:C1DA ED 27 -  -          ld  hl,(hl)     ;address get.
 1605 D1:C1DC 01 00 00 00         ld  bc,0
 1606 D1:C1E0 4F -  -  -          ld  c,a
 1607 D1:C1E1 09 -  -  -          add hl,bc       ;Full address get.
 1608 D1:C1E2 CD 74 AE D1         READ_ACCESS
 1609 D1:C1E6 E1 -  -  -      pop hl
 1610 D1:C1E7 4F -  -  -      ld  c,a
 1611 D1:C1E8 C3 64 B8 D1     jp  subroutine6502_sbc_combined_end
 1612 D1:C1EC -  -  -  -  
 1613 D1:C1EC -  -  -  -  
 1614 D1:C1EC -  -  -  -  
 1615 D1:C1EC -  -  -  -  ;-----------------------------------------------------------------------------
 1616 D1:C1EC -  -  -  -  ;-----------------------------------------------------------------------------
 1617 D1:C1EC -  -  -  -  ;-----------------------------------------------------------------------------
 1618 D1:C1EC -  -  -  -  ;Instructions by type: Logical Operations
 1619 D1:C1EC -  -  -  -  
 1620 D1:C1EC -  -  -  -  ;AND - AND Memory with Accumulator
 1621 D1:C1EC -  -  -  -  ;A AND M -> A
 1622 D1:C1EC -  -  -  -  ;N	Z	C	I	D	V
 1623 D1:C1EC -  -  -  -  ;+	+	-	-	-	-
 1624 D1:C1EC -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1625 D1:C1EC -  -  -  -  
 1626 D1:C1EC -  -  -  -  ;immediate	AND #oper	29	2	2  
 1627 D1:C1EC -  -  -  -  inst6502_and_imm:
 1628 D1:C1EC ED 33 02 -      ADDCYC(2)
 1629 D1:C1EF 7E -  -  -      ld  a,(hl)
 1630 D1:C1F0 DD A6 00 -      and a,(ix+REGA)
 1631 D1:C1F3 DD 77 00 -      ld  (ix+REGA),A
 1632 D1:C1F6 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1633 D1:C20A C3 F2 B6 D1     jp i6502NextLoad
 1634 D1:C20E -  -  -  -  
 1635 D1:C20E -  -  -  -  ;zeropage	AND oper	25	2	3  
 1636 D1:C20E -  -  -  -  inst6502_and_zp:
 1637 D1:C20E ED 33 03 -      ADDCYC(3)
 1638 D1:C211 7E -  -  -      ld  a,(hl)
 1639 D1:C212 01 00 38 D0     ld  bc,ZEROPAGE
 1640 D1:C216 81 -  -  -      add a,c
 1641 D1:C217 4F -  -  -      ld  c,a
 1642 D1:C218 0A -  -  -      ld  a,(bc)
 1643 D1:C219 DD A6 00 -      and a,(ix+REGA)
 1644 D1:C21C DD 77 00 -      ld  (ix+REGA),A
 1645 D1:C21F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1646 D1:C233 C3 F2 B6 D1     jp i6502NextLoad
 1647 D1:C237 -  -  -  -  
 1648 D1:C237 -  -  -  -  ;zeropage,X	AND oper,X	35	2	4  
 1649 D1:C237 -  -  -  -  inst6502_and_zpx:
 1650 D1:C237 ED 33 04 -      ADDCYC(4)
 1651 D1:C23A 7E -  -  -      ld  a,(hl)
 1652 D1:C23B 01 00 38 D0     ld  bc,ZEROPAGE
 1653 D1:C23F 81 -  -  -      add a,c
 1654 D1:C240 DD 86 01 -      add a,(ix+REGX)
 1655 D1:C243 4F -  -  -      ld  c,a
 1656 D1:C244 0A -  -  -      ld  a,(bc)
 1657 D1:C245 DD A6 00 -      and a,(ix+REGA)
 1658 D1:C248 DD 77 00 -      ld  (ix+REGA),A
 1659 D1:C24B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1660 D1:C25F C3 F2 B6 D1     jp i6502NextLoad
 1661 D1:C263 -  -  -  -  
 1662 D1:C263 -  -  -  -  ;absolute	AND oper	2D	3	4  
 1663 D1:C263 -  -  -  -  inst6502_and_abs:
 1664 D1:C263 ED 33 04 -      ADDCYC(4)
 1665 D1:C266 CD A1 B7 D1     call subroutine6502_abs_split_start
 1666 D1:C26A E5 -  -  -      push hl
 1667 D1:C26B 50 -  -  -          ld  d,b
 1668 D1:C26C 79 -  -  -          ld  a,c
 1669 D1:C26D 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1670 D1:C26F ED 4C -  -          mlt bc
 1671 D1:C271 21 00 40 D0         ld  hl,PAGETABLE
 1672 D1:C275 09 -  -  -          add hl,bc
 1673 D1:C276 ED 27 -  -          ld  hl,(hl)
 1674 D1:C278 06 00 -  -          ld  b,0
 1675 D1:C27A 4F -  -  -          ld  c,a
 1676 D1:C27B 09 -  -  -          add hl,bc   ;full address
 1677 D1:C27C CD 74 AE D1         READ_ACCESS
 1678 D1:C280 E1 -  -  -      pop hl
 1679 D1:C281 DD A6 00 -      and a,(ix+REGA)
 1680 D1:C284 DD 77 00 -      ld  (ix+REGA),A
 1681 D1:C287 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1682 D1:C29B C3 F2 B6 D1     jp i6502NextLoad
 1683 D1:C29F -  -  -  -  
 1684 D1:C29F -  -  -  -  ;absolute,X	AND oper,X	3D	3	4* 
 1685 D1:C29F -  -  -  -  inst6502_and_absx:
 1686 D1:C29F ED 33 04 -      ADDCYC(4)
 1687 D1:C2A2 CD C2 B7 D1     PUSH_ABSXSPLIT
 1688 D1:C2A6 CD 74 AE D1         READ_ACCESS
 1689 D1:C2AA DD A6 00 -          and a,(ix+REGA)
 1690 D1:C2AD DD 77 00 -          ld  (ix+REGA),A
 1691 D1:C2B0 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1692 D1:C2C4 E1 -  -  -      pop hl
 1693 D1:C2C5 C3 F2 B6 D1     jp i6502NextLoad
 1694 D1:C2C9 -  -  -  -  
 1695 D1:C2C9 -  -  -  -  ;absolute,Y	AND oper,Y	39	3	4* 
 1696 D1:C2C9 -  -  -  -  inst6502_and_absy:
 1697 D1:C2C9 ED 33 04 -      ADDCYC(4)
 1698 D1:C2CC CD BD B7 D1     PUSH_ABSYSPLIT
 1699 D1:C2D0 CD 74 AE D1         READ_ACCESS
 1700 D1:C2D4 E1 -  -  -      pop hl
 1701 D1:C2D5 DD A6 00 -      and a,(ix+REGA)
 1702 D1:C2D8 DD 77 00 -      ld  (ix+REGA),A
 1703 D1:C2DB DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1704 D1:C2EF C3 F2 B6 D1     jp i6502NextLoad
 1705 D1:C2F3 -  -  -  -  
 1706 D1:C2F3 -  -  -  -  ;(indirect,X)	AND (oper,X)	21	2	6  
 1707 D1:C2F3 -  -  -  -  inst6502_and_indx:
 1708 D1:C2F3 ED 33 06 -      ADDCYC(6)
 1709 D1:C2F6 E5 -  -  -      push hl
 1710 D1:C2F7 7E -  -  -          ld  a,(hl)
 1711 D1:C2F8 21 00 38 D0         ld  hl,ZEROPAGE
 1712 D1:C2FC 85 -  -  -          add a,L
 1713 D1:C2FD DD 86 01 -          add a,(ix+REGX)
 1714 D1:C300 6F -  -  -          ld  L,a
 1715 D1:C301 7E -  -  -          ld  a,(hl)
 1716 D1:C302 2C -  -  -          inc L
 1717 D1:C303 56 -  -  -          ld  d,(hl)
 1718 D1:C304 42 -  -  -          ld  b,d
 1719 D1:C305 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1720 D1:C307 ED 4C -  -          mlt bc
 1721 D1:C309 21 00 40 D0         ld  hl,PAGETABLE
 1722 D1:C30D 09 -  -  -          add hl,bc
 1723 D1:C30E ED 27 -  -          ld  hl,(hl)
 1724 D1:C310 06 00 -  -          ld  b,0
 1725 D1:C312 4F -  -  -          ld  c,a
 1726 D1:C313 09 -  -  -          add hl,bc
 1727 D1:C314 CD 74 AE D1         READ_ACCESS
 1728 D1:C318 E1 -  -  -      pop hl
 1729 D1:C319 DD A6 00 -      and a,(ix+REGA)
 1730 D1:C31C DD 77 00 -      ld  (ix+REGA),A
 1731 D1:C31F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1732 D1:C333 C3 F2 B6 D1     jp i6502NextLoad
 1733 D1:C337 -  -  -  -  
 1734 D1:C337 -  -  -  -  ;(indirect),Y	AND (oper),Y	31	2	5* 
 1735 D1:C337 -  -  -  -  inst6502_and_indy:
 1736 D1:C337 ED 33 05 -      ADDCYC(5)
 1737 D1:C33A E5 -  -  -      push hl
 1738 D1:C33B 7E -  -  -          ld  a,(hl)
 1739 D1:C33C 21 00 38 D0         ld  hl,ZEROPAGE
 1740 D1:C340 85 -  -  -          add a,L
 1741 D1:C341 6F -  -  -          ld  L,a
 1742 D1:C342 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1743 D1:C343 2C -  -  -          inc L
 1744 D1:C344 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1745 D1:C347 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1746 D1:C348 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1747 D1:C34A 24 -  -  -          inc h
 1748 D1:C34B FD 23 -  -          ADDCYC(1)
 1749 D1:C34D 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1750 D1:C34E 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1751 D1:C350 ED 6C -  -          mlt hl          ;23.
 1752 D1:C352 01 00 40 D0         ld  bc,PAGETABLE
 1753 D1:C356 09 -  -  -          add hl,bc
 1754 D1:C357 ED 27 -  -          ld  hl,(hl)     ;address get.
 1755 D1:C359 01 00 00 00         ld  bc,0
 1756 D1:C35D 4F -  -  -          ld  c,a
 1757 D1:C35E 09 -  -  -          add hl,bc       ;Full address get.
 1758 D1:C35F CD 74 AE D1         READ_ACCESS
 1759 D1:C363 E1 -  -  -      pop hl
 1760 D1:C364 DD A6 00 -      and a,(ix+REGA)
 1761 D1:C367 DD 77 00 -      ld  (ix+REGA),A
 1762 D1:C36A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1763 D1:C37E C3 F2 B6 D1     jp i6502NextLoad
 1764 D1:C382 -  -  -  -  
 1765 D1:C382 -  -  -  -  ;-----------------------------------------------------------------------------
 1766 D1:C382 -  -  -  -  ;EOR - Exclusive-OR Memory with Accumulator
 1767 D1:C382 -  -  -  -  ;A EOR M -> A
 1768 D1:C382 -  -  -  -  ;N	Z	C	I	D	V
 1769 D1:C382 -  -  -  -  ;+	+	-	-	-	-
 1770 D1:C382 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1771 D1:C382 -  -  -  -  
 1772 D1:C382 -  -  -  -  ;immediate	EOR #oper	49	2	2  
 1773 D1:C382 -  -  -  -  inst6502_eor_imm:
 1774 D1:C382 ED 33 02 -      ADDCYC(2)
 1775 D1:C385 7E -  -  -      ld  a,(hl)
 1776 D1:C386 DD AE 00 -      xor a,(ix+REGA)
 1777 D1:C389 DD 77 00 -      ld  (ix+REGA),A
 1778 D1:C38C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1779 D1:C3A0 C3 F2 B6 D1     jp i6502NextLoad
 1780 D1:C3A4 -  -  -  -  
 1781 D1:C3A4 -  -  -  -  ;zeropage	EOR oper	45	2	3  
 1782 D1:C3A4 -  -  -  -  inst6502_eor_zp:
 1783 D1:C3A4 ED 33 03 -      ADDCYC(3)
 1784 D1:C3A7 7E -  -  -      ld  a,(hl)
 1785 D1:C3A8 01 00 38 D0     ld  bc,ZEROPAGE
 1786 D1:C3AC 81 -  -  -      add a,c
 1787 D1:C3AD 4F -  -  -      ld  c,a
 1788 D1:C3AE 0A -  -  -      ld  a,(bc)
 1789 D1:C3AF DD AE 00 -      xor a,(ix+REGA)
 1790 D1:C3B2 DD 77 00 -      ld  (ix+REGA),A
 1791 D1:C3B5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1792 D1:C3C9 C3 F2 B6 D1     jp i6502NextLoad
 1793 D1:C3CD -  -  -  -  
 1794 D1:C3CD -  -  -  -  
 1795 D1:C3CD -  -  -  -  ;zeropage,X	EOR oper,X	55	2	4  
 1796 D1:C3CD -  -  -  -  inst6502_eor_zpx:
 1797 D1:C3CD ED 33 04 -      ADDCYC(4)
 1798 D1:C3D0 7E -  -  -      ld  a,(hl)
 1799 D1:C3D1 01 00 38 D0     ld  bc,ZEROPAGE
 1800 D1:C3D5 81 -  -  -      add a,c
 1801 D1:C3D6 DD 86 01 -      add a,(ix+REGX)
 1802 D1:C3D9 4F -  -  -      ld  c,a
 1803 D1:C3DA 0A -  -  -      ld  a,(bc)
 1804 D1:C3DB DD AE 00 -      xor a,(ix+REGA)
 1805 D1:C3DE DD 77 00 -      ld  (ix+REGA),A
 1806 D1:C3E1 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1807 D1:C3F5 C3 F2 B6 D1     jp i6502NextLoad
 1808 D1:C3F9 -  -  -  -  
 1809 D1:C3F9 -  -  -  -  ;absolute	EOR oper	4D	3	4  
 1810 D1:C3F9 -  -  -  -  inst6502_eor_abs:
 1811 D1:C3F9 ED 33 04 -      ADDCYC(4)
 1812 D1:C3FC CD A1 B7 D1     call subroutine6502_abs_split_start
 1813 D1:C400 E5 -  -  -      push hl
 1814 D1:C401 50 -  -  -          ld  d,b
 1815 D1:C402 79 -  -  -          ld  a,c
 1816 D1:C403 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1817 D1:C405 ED 4C -  -          mlt bc
 1818 D1:C407 21 00 40 D0         ld  hl,PAGETABLE
 1819 D1:C40B 09 -  -  -          add hl,bc
 1820 D1:C40C ED 27 -  -          ld  hl,(hl)
 1821 D1:C40E 06 00 -  -          ld  b,0
 1822 D1:C410 4F -  -  -          ld  c,a
 1823 D1:C411 09 -  -  -          add hl,bc   ;full address
 1824 D1:C412 CD 74 AE D1         READ_ACCESS
 1825 D1:C416 E1 -  -  -      pop hl
 1826 D1:C417 DD AE 00 -      xor a,(ix+REGA)
 1827 D1:C41A DD 77 00 -      ld  (ix+REGA),A
 1828 D1:C41D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1829 D1:C431 C3 F2 B6 D1     jp i6502NextLoad
 1830 D1:C435 -  -  -  -  
 1831 D1:C435 -  -  -  -  ;absolute,X	EOR oper,X	5D	3	4* 
 1832 D1:C435 -  -  -  -  inst6502_eor_absx:
 1833 D1:C435 ED 33 04 -      ADDCYC(4)
 1834 D1:C438 CD C2 B7 D1     PUSH_ABSXSPLIT
 1835 D1:C43C CD 74 AE D1         READ_ACCESS
 1836 D1:C440 DD AE 00 -          xor a,(ix+REGA)
 1837 D1:C443 DD 77 00 -          ld  (ix+REGA),A
 1838 D1:C446 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1839 D1:C45A E1 -  -  -      pop hl
 1840 D1:C45B C3 F2 B6 D1     jp i6502NextLoad
 1841 D1:C45F -  -  -  -  
 1842 D1:C45F -  -  -  -  ;absolute,Y	EOR oper,Y	59	3	4* 
 1843 D1:C45F -  -  -  -  inst6502_eor_absy:
 1844 D1:C45F ED 33 04 -      ADDCYC(4)
 1845 D1:C462 CD BD B7 D1     PUSH_ABSYSPLIT
 1846 D1:C466 CD 74 AE D1         READ_ACCESS
 1847 D1:C46A E1 -  -  -      pop hl
 1848 D1:C46B DD AE 00 -      xor a,(ix+REGA)
 1849 D1:C46E DD 77 00 -      ld  (ix+REGA),A
 1850 D1:C471 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1851 D1:C485 C3 F2 B6 D1     jp i6502NextLoad
 1852 D1:C489 -  -  -  -  
 1853 D1:C489 -  -  -  -  ;(indirect,X)	EOR (oper,X)	41	2	6  
 1854 D1:C489 -  -  -  -  inst6502_eor_indx:
 1855 D1:C489 ED 33 06 -      ADDCYC(6)
 1856 D1:C48C E5 -  -  -      push hl
 1857 D1:C48D 7E -  -  -          ld  a,(hl)
 1858 D1:C48E 21 00 38 D0         ld  hl,ZEROPAGE
 1859 D1:C492 85 -  -  -          add a,L
 1860 D1:C493 DD 86 01 -          add a,(ix+REGX)
 1861 D1:C496 6F -  -  -          ld  L,a
 1862 D1:C497 7E -  -  -          ld  a,(hl)
 1863 D1:C498 2C -  -  -          inc L
 1864 D1:C499 56 -  -  -          ld  d,(hl)
 1865 D1:C49A 42 -  -  -          ld  b,d
 1866 D1:C49B 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1867 D1:C49D ED 4C -  -          mlt bc
 1868 D1:C49F 21 00 40 D0         ld  hl,PAGETABLE
 1869 D1:C4A3 09 -  -  -          add hl,bc
 1870 D1:C4A4 ED 27 -  -          ld  hl,(hl)
 1871 D1:C4A6 06 00 -  -          ld  b,0
 1872 D1:C4A8 4F -  -  -          ld  c,a
 1873 D1:C4A9 09 -  -  -          add hl,bc
 1874 D1:C4AA CD 74 AE D1         READ_ACCESS
 1875 D1:C4AE E1 -  -  -      pop hl
 1876 D1:C4AF DD AE 00 -      xor a,(ix+REGA)
 1877 D1:C4B2 DD 77 00 -      ld  (ix+REGA),A
 1878 D1:C4B5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1879 D1:C4C9 C3 F2 B6 D1     jp i6502NextLoad
 1880 D1:C4CD -  -  -  -  
 1881 D1:C4CD -  -  -  -  ;(indirect),Y	EOR (oper),Y	51	2	5* 
 1882 D1:C4CD -  -  -  -  inst6502_eor_indy:
 1883 D1:C4CD ED 33 05 -      ADDCYC(5)
 1884 D1:C4D0 E5 -  -  -      push hl
 1885 D1:C4D1 7E -  -  -          ld  a,(hl)
 1886 D1:C4D2 21 00 38 D0         ld  hl,ZEROPAGE
 1887 D1:C4D6 85 -  -  -          add a,L
 1888 D1:C4D7 6F -  -  -          ld  L,a
 1889 D1:C4D8 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1890 D1:C4D9 2C -  -  -          inc L
 1891 D1:C4DA DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1892 D1:C4DD 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1893 D1:C4DE 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1894 D1:C4E0 24 -  -  -          inc h
 1895 D1:C4E1 FD 23 -  -          ADDCYC(1)
 1896 D1:C4E3 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1897 D1:C4E4 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1898 D1:C4E6 ED 6C -  -          mlt hl          ;23.
 1899 D1:C4E8 01 00 40 D0         ld  bc,PAGETABLE
 1900 D1:C4EC 09 -  -  -          add hl,bc
 1901 D1:C4ED ED 27 -  -          ld  hl,(hl)     ;address get.
 1902 D1:C4EF 01 00 00 00         ld  bc,0
 1903 D1:C4F3 4F -  -  -          ld  c,a
 1904 D1:C4F4 09 -  -  -          add hl,bc       ;Full address get.
 1905 D1:C4F5 CD 74 AE D1         READ_ACCESS
 1906 D1:C4F9 E1 -  -  -      pop hl
 1907 D1:C4FA DD AE 00 -      xor a,(ix+REGA)
 1908 D1:C4FD DD 77 00 -      ld  (ix+REGA),A
 1909 D1:C500 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1910 D1:C514 C3 F2 B6 D1     jp i6502NextLoad
 1911 D1:C518 -  -  -  -  
 1912 D1:C518 -  -  -  -  ;-----------------------------------------------------------------------------
 1913 D1:C518 -  -  -  -  ;ORA - OR Memory with Accumulator
 1914 D1:C518 -  -  -  -  ;A OR M -> A
 1915 D1:C518 -  -  -  -  ;N	Z	C	I	D	V
 1916 D1:C518 -  -  -  -  ;+	+	-	-	-	-
 1917 D1:C518 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1918 D1:C518 -  -  -  -  
 1919 D1:C518 -  -  -  -  ;immediate	ORA #oper	09	2	2  
 1920 D1:C518 -  -  -  -  inst6502_ora_imm:
 1921 D1:C518 ED 33 02 -      ADDCYC(2)
 1922 D1:C51B 7E -  -  -      ld  a,(hl)
 1923 D1:C51C DD B6 00 -      or  a,(ix+REGA)
 1924 D1:C51F DD 77 00 -      ld  (ix+REGA),A
 1925 D1:C522 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1926 D1:C536 C3 F2 B6 D1     jp i6502NextLoad
 1927 D1:C53A -  -  -  -  
 1928 D1:C53A -  -  -  -  ;zeropage	ORA oper	05	2	3  
 1929 D1:C53A -  -  -  -  inst6502_ora_zp:
 1930 D1:C53A ED 33 03 -      ADDCYC(3)
 1931 D1:C53D 7E -  -  -      ld  a,(hl)
 1932 D1:C53E 01 00 38 D0     ld  bc,ZEROPAGE
 1933 D1:C542 81 -  -  -      add a,c
 1934 D1:C543 4F -  -  -      ld  c,a
 1935 D1:C544 0A -  -  -      ld  a,(bc)
 1936 D1:C545 DD B6 00 -      or  a,(ix+REGA)
 1937 D1:C548 DD 77 00 -      ld  (ix+REGA),A
 1938 D1:C54B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1939 D1:C55F C3 F2 B6 D1     jp i6502NextLoad
 1940 D1:C563 -  -  -  -  
 1941 D1:C563 -  -  -  -  ;zeropage,X	ORA oper,X	15	2	4  
 1942 D1:C563 -  -  -  -  inst6502_ora_zpx:
 1943 D1:C563 ED 33 04 -      ADDCYC(4)
 1944 D1:C566 7E -  -  -      ld  a,(hl)
 1945 D1:C567 01 00 38 D0     ld  bc,ZEROPAGE
 1946 D1:C56B 81 -  -  -      add a,c
 1947 D1:C56C DD 86 01 -      add a,(ix+REGX)
 1948 D1:C56F 4F -  -  -      ld  c,a
 1949 D1:C570 0A -  -  -      ld  a,(bc)
 1950 D1:C571 DD B6 00 -      or  a,(ix+REGA)
 1951 D1:C574 DD 77 00 -      ld  (ix+REGA),A
 1952 D1:C577 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1953 D1:C58B C3 F2 B6 D1     jp i6502NextLoad
 1954 D1:C58F -  -  -  -  
 1955 D1:C58F -  -  -  -  ;absolute	ORA oper	0D	3	4  
 1956 D1:C58F -  -  -  -  inst6502_ora_abs:
 1957 D1:C58F ED 33 04 -      ADDCYC(4)
 1958 D1:C592 CD A1 B7 D1     call subroutine6502_abs_split_start
 1959 D1:C596 E5 -  -  -      push hl
 1960 D1:C597 50 -  -  -          ld  d,b
 1961 D1:C598 79 -  -  -          ld  a,c
 1962 D1:C599 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1963 D1:C59B ED 4C -  -          mlt bc
 1964 D1:C59D 21 00 40 D0         ld  hl,PAGETABLE
 1965 D1:C5A1 09 -  -  -          add hl,bc
 1966 D1:C5A2 ED 27 -  -          ld  hl,(hl)
 1967 D1:C5A4 06 00 -  -          ld  b,0
 1968 D1:C5A6 4F -  -  -          ld  c,a
 1969 D1:C5A7 09 -  -  -          add hl,bc   ;full address
 1970 D1:C5A8 CD 74 AE D1         READ_ACCESS
 1971 D1:C5AC E1 -  -  -      pop hl
 1972 D1:C5AD DD B6 00 -      or  a,(ix+REGA)
 1973 D1:C5B0 DD 77 00 -      ld  (ix+REGA),A
 1974 D1:C5B3 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1975 D1:C5C7 C3 F2 B6 D1     jp i6502NextLoad
 1976 D1:C5CB -  -  -  -  
 1977 D1:C5CB -  -  -  -  ;absolute,X	ORA oper,X	1D	3	4* 
 1978 D1:C5CB -  -  -  -  inst6502_ora_absx:
 1979 D1:C5CB ED 33 04 -      ADDCYC(4)
 1980 D1:C5CE CD C2 B7 D1     PUSH_ABSXSPLIT
 1981 D1:C5D2 CD 74 AE D1         READ_ACCESS
 1982 D1:C5D6 DD B6 00 -          or  a,(ix+REGA)
 1983 D1:C5D9 DD 77 00 -          ld  (ix+REGA),A
 1984 D1:C5DC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1985 D1:C5F0 E1 -  -  -      pop hl
 1986 D1:C5F1 C3 F2 B6 D1     jp i6502NextLoad
 1987 D1:C5F5 -  -  -  -  
 1988 D1:C5F5 -  -  -  -  ;absolute,Y	ORA oper,Y	19	3	4* 
 1989 D1:C5F5 -  -  -  -  inst6502_ora_absy:
 1990 D1:C5F5 ED 33 04 -      ADDCYC(4)
 1991 D1:C5F8 CD BD B7 D1     PUSH_ABSYSPLIT
 1992 D1:C5FC CD 74 AE D1         READ_ACCESS
 1993 D1:C600 E1 -  -  -      pop hl
 1994 D1:C601 DD B6 00 -      or  a,(ix+REGA)
 1995 D1:C604 DD 77 00 -      ld  (ix+REGA),A
 1996 D1:C607 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1997 D1:C61B C3 F2 B6 D1     jp i6502NextLoad
 1998 D1:C61F -  -  -  -  
 1999 D1:C61F -  -  -  -  ;(indirect,X)	ORA (oper,X)	01	2	6  
 2000 D1:C61F -  -  -  -  inst6502_ora_indx:
 2001 D1:C61F ED 33 06 -      ADDCYC(6)
 2002 D1:C622 E5 -  -  -      push hl
 2003 D1:C623 7E -  -  -          ld  a,(hl)
 2004 D1:C624 21 00 38 D0         ld  hl,ZEROPAGE
 2005 D1:C628 85 -  -  -          add a,L
 2006 D1:C629 DD 86 01 -          add a,(ix+REGX)
 2007 D1:C62C 6F -  -  -          ld  L,a
 2008 D1:C62D 7E -  -  -          ld  a,(hl)
 2009 D1:C62E 2C -  -  -          inc L
 2010 D1:C62F 56 -  -  -          ld  d,(hl)
 2011 D1:C630 42 -  -  -          ld  b,d
 2012 D1:C631 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2013 D1:C633 ED 4C -  -          mlt bc
 2014 D1:C635 21 00 40 D0         ld  hl,PAGETABLE
 2015 D1:C639 09 -  -  -          add hl,bc
 2016 D1:C63A ED 27 -  -          ld  hl,(hl)
 2017 D1:C63C 06 00 -  -          ld  b,0
 2018 D1:C63E 4F -  -  -          ld  c,a
 2019 D1:C63F 09 -  -  -          add hl,bc
 2020 D1:C640 CD 74 AE D1         READ_ACCESS
 2021 D1:C644 E1 -  -  -      pop hl
 2022 D1:C645 DD B6 00 -      or  a,(ix+REGA)
 2023 D1:C648 DD 77 00 -      ld  (ix+REGA),A
 2024 D1:C64B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2025 D1:C65F C3 F2 B6 D1     jp i6502NextLoad
 2026 D1:C663 -  -  -  -  
 2027 D1:C663 -  -  -  -  ;(indirect),Y	ORA (oper),Y	11	2	5* 
 2028 D1:C663 -  -  -  -  inst6502_ora_indy:
 2029 D1:C663 ED 33 05 -      ADDCYC(5)
 2030 D1:C666 E5 -  -  -      push hl
 2031 D1:C667 7E -  -  -          ld  a,(hl)
 2032 D1:C668 21 00 38 D0         ld  hl,ZEROPAGE
 2033 D1:C66C 85 -  -  -          add a,L
 2034 D1:C66D 6F -  -  -          ld  L,a
 2035 D1:C66E 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 2036 D1:C66F 2C -  -  -          inc L
 2037 D1:C670 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 2038 D1:C673 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 2039 D1:C674 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 2040 D1:C676 24 -  -  -          inc h
 2041 D1:C677 FD 23 -  -          ADDCYC(1)
 2042 D1:C679 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 2043 D1:C67A 2E 0C -  -          ld  L,BASETABLE_STRIDE
 2044 D1:C67C ED 6C -  -          mlt hl          ;23.
 2045 D1:C67E 01 00 40 D0         ld  bc,PAGETABLE
 2046 D1:C682 09 -  -  -          add hl,bc
 2047 D1:C683 ED 27 -  -          ld  hl,(hl)     ;address get.
 2048 D1:C685 01 00 00 00         ld  bc,0
 2049 D1:C689 4F -  -  -          ld  c,a
 2050 D1:C68A 09 -  -  -          add hl,bc       ;Full address get.
 2051 D1:C68B CD 74 AE D1         READ_ACCESS
 2052 D1:C68F E1 -  -  -      pop hl
 2053 D1:C690 DD B6 00 -      or  a,(ix+REGA)
 2054 D1:C693 DD 77 00 -      ld  (ix+REGA),A
 2055 D1:C696 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2056 D1:C6AA C3 F2 B6 D1     jp i6502NextLoad
 2057 D1:C6AE -  -  -  -  
 2058 D1:C6AE -  -  -  -  ;-----------------------------------------------------------------------------
 2059 D1:C6AE -  -  -  -  ;-----------------------------------------------------------------------------
 2060 D1:C6AE -  -  -  -  ;-----------------------------------------------------------------------------
 2061 D1:C6AE -  -  -  -  ;Instructions by type: Shift & Rotate Instructions
 2062 D1:C6AE -  -  -  -  ;ASL - Shift Left One Bit (Memory or Accumulator)
 2063 D1:C6AE -  -  -  -  ;C <- [76543210] <- 0
 2064 D1:C6AE -  -  -  -  ;N	Z	C	I	D	V
 2065 D1:C6AE -  -  -  -  ;+	+	+	-	-	-
 2066 D1:C6AE -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2067 D1:C6AE -  -  -  -  
 2068 D1:C6AE -  -  -  -  ;accumulator	ASL A	0A	1	2  
 2069 D1:C6AE -  -  -  -  inst6502_asl:
 2070 D1:C6AE ED 33 02 -      ADDCYC(2)
 2071 D1:C6B1 DD 7E 00 -      ld  a,(ix+REGA)
 2072 D1:C6B4 CB 27 -  -      sla a
 2073 D1:C6B6 DD 77 00 -      ld  (ix+REGA),a
 2074 D1:C6B9 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2075 D1:C6D3 C3 0B B7 D1     jp i6502FinishLoad
 2076 D1:C6D7 -  -  -  -  
 2077 D1:C6D7 -  -  -  -  ;zeropage	ASL oper	06	2	5  
 2078 D1:C6D7 -  -  -  -  inst6502_asl_zp:
 2079 D1:C6D7 ED 33 05 -      ADDCYC(5)
 2080 D1:C6DA 7E -  -  -      ld  a,(hl)
 2081 D1:C6DB 01 00 38 D0     ld  bc,ZEROPAGE
 2082 D1:C6DF 81 -  -  -      add a,c
 2083 D1:C6E0 4F -  -  -      ld  c,a
 2084 D1:C6E1 0A -  -  -      ld  a,(bc)
 2085 D1:C6E2 CB 27 -  -      sla a
 2086 D1:C6E4 02 -  -  -      ld  (bc),a
 2087 D1:C6E5 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2088 D1:C6FF C3 F2 B6 D1     jp i6502NextLoad
 2089 D1:C703 -  -  -  -  
 2090 D1:C703 -  -  -  -  ;zeropage,X	ASL oper,X	16	2	6  
 2091 D1:C703 -  -  -  -  inst6502_asl_zpx:
 2092 D1:C703 ED 33 06 -      ADDCYC(6)
 2093 D1:C706 7E -  -  -      ld  a,(hl)
 2094 D1:C707 01 00 38 D0     ld  bc,ZEROPAGE
 2095 D1:C70B 81 -  -  -      add a,c
 2096 D1:C70C DD 86 01 -      add a,(ix+REGX)
 2097 D1:C70F 4F -  -  -      ld  c,a
 2098 D1:C710 0A -  -  -      ld  a,(bc)
 2099 D1:C711 CB 27 -  -      sla a
 2100 D1:C713 02 -  -  -      ld  (bc),a
 2101 D1:C714 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2102 D1:C72E C3 F2 B6 D1     jp i6502NextLoad
 2103 D1:C732 -  -  -  -  
 2104 D1:C732 -  -  -  -  ;absolute	ASL oper	0E	3	6  
 2105 D1:C732 -  -  -  -  inst6502_asl_abs:
 2106 D1:C732 ED 33 06 -      ADDCYC(6)
 2107 D1:C735 CD A1 B7 D1     call subroutine6502_abs_split_start
 2108 D1:C739 E5 -  -  -      push hl
 2109 D1:C73A 50 -  -  -          ld  d,b
 2110 D1:C73B 79 -  -  -          ld  a,c
 2111 D1:C73C 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2112 D1:C73E ED 4C -  -          mlt bc
 2113 D1:C740 21 00 40 D0         ld  hl,PAGETABLE
 2114 D1:C744 09 -  -  -          add hl,bc
 2115 D1:C745 ED 27 -  -          ld  hl,(hl)
 2116 D1:C747 06 00 -  -          ld  b,0
 2117 D1:C749 4F -  -  -          ld  c,a
 2118 D1:C74A 09 -  -  -          add hl,bc   ;full address
 2119 D1:C74B CD 74 AE D1         READ_ACCESS
 2120 D1:C74F CB 27 -  -          sla a
 2121 D1:C751 4F -  -  -          ld  c,a
 2122 D1:C752 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2123 D1:C76C 41 -  -  -          ld  b,c
 2124 D1:C76D CD 17 AF D1         WRITE_ACCESS
 2125 D1:C771 E1 -  -  -      pop hl
 2126 D1:C772 C3 F2 B6 D1     jp i6502NextLoad
 2127 D1:C776 -  -  -  -  
 2128 D1:C776 -  -  -  -  ;absolute,X	ASL oper,X	1E	3	7  
 2129 D1:C776 -  -  -  -  inst6502_asl_absx:
 2130 D1:C776 ED 33 07 -      ADDCYC(7)
 2131 D1:C779 CD FE B7 D1     PUSH_ABSXSPLIT_NODEP
 2132 D1:C77D CD 74 AE D1         READ_ACCESS
 2133 D1:C781 CB 27 -  -          sla a
 2134 D1:C783 4F -  -  -          ld  c,a
 2135 D1:C784 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2136 D1:C79E 41 -  -  -          ld  b,c
 2137 D1:C79F CD 17 AF D1         WRITE_ACCESS
 2138 D1:C7A3 E1 -  -  -      pop hl
 2139 D1:C7A4 C3 F2 B6 D1     jp i6502NextLoad
 2140 D1:C7A8 -  -  -  -  
 2141 D1:C7A8 -  -  -  -  ;-----------------------------------------------------------------------------
 2142 D1:C7A8 -  -  -  -  ;LSR - Shift One Bit Right (Memory or Accumulator)
 2143 D1:C7A8 -  -  -  -  ;0 -> [76543210] -> C
 2144 D1:C7A8 -  -  -  -  ;N	Z	C	I	D	V
 2145 D1:C7A8 -  -  -  -  ;0	+	+	-	-	-
 2146 D1:C7A8 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2147 D1:C7A8 -  -  -  -  
 2148 D1:C7A8 -  -  -  -  ;accumulator	LSR A	4A	1	2  
 2149 D1:C7A8 -  -  -  -  inst6502_lsr:
 2150 D1:C7A8 ED 33 02 -      ADDCYC(2)
 2151 D1:C7AB DD 7E 00 -      ld  a,(ix+REGA)
 2152 D1:C7AE CB 3F -  -      srl a
 2153 D1:C7B0 DD 77 00 -      ld  (ix+REGA),a
 2154 D1:C7B3 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2155 D1:C7CD C3 0B B7 D1     jp i6502FinishLoad
 2156 D1:C7D1 -  -  -  -  
 2157 D1:C7D1 -  -  -  -  ;zeropage	LSR oper	46	2	5  
 2158 D1:C7D1 -  -  -  -  inst6502_lsr_zp:
 2159 D1:C7D1 ED 33 05 -      ADDCYC(5)
 2160 D1:C7D4 7E -  -  -      ld  a,(hl)
 2161 D1:C7D5 01 00 38 D0     ld  bc,ZEROPAGE
 2162 D1:C7D9 81 -  -  -      add a,c
 2163 D1:C7DA 4F -  -  -      ld  c,a
 2164 D1:C7DB 0A -  -  -      ld  a,(bc)
 2165 D1:C7DC CB 3F -  -      srl a
 2166 D1:C7DE 02 -  -  -      ld  (bc),a
 2167 D1:C7DF DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2168 D1:C7F9 C3 F2 B6 D1     jp i6502NextLoad
 2169 D1:C7FD -  -  -  -  
 2170 D1:C7FD -  -  -  -  ;zeropage,X	LSR oper,X	56	2	6  
 2171 D1:C7FD -  -  -  -  inst6502_lsr_zpx:
 2172 D1:C7FD ED 33 06 -      ADDCYC(6)
 2173 D1:C800 7E -  -  -      ld  a,(hl)
 2174 D1:C801 01 00 38 D0     ld  bc,ZEROPAGE
 2175 D1:C805 81 -  -  -      add a,c
 2176 D1:C806 DD 86 01 -      add a,(ix+REGX)
 2177 D1:C809 4F -  -  -      ld  c,a
 2178 D1:C80A 0A -  -  -      ld  a,(bc)
 2179 D1:C80B CB 3F -  -      srl a
 2180 D1:C80D 02 -  -  -      ld  (bc),a
 2181 D1:C80E DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2182 D1:C828 C3 F2 B6 D1     jp i6502NextLoad
 2183 D1:C82C -  -  -  -      
 2184 D1:C82C -  -  -  -  ;absolute	LSR oper	4E	3	6  
 2185 D1:C82C -  -  -  -  inst6502_lsr_abs:
 2186 D1:C82C ED 33 06 -      ADDCYC(6)
 2187 D1:C82F CD A1 B7 D1     call subroutine6502_abs_split_start
 2188 D1:C833 E5 -  -  -      push hl
 2189 D1:C834 50 -  -  -          ld  d,b
 2190 D1:C835 79 -  -  -          ld  a,c
 2191 D1:C836 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2192 D1:C838 ED 4C -  -          mlt bc
 2193 D1:C83A 21 00 40 D0         ld  hl,PAGETABLE
 2194 D1:C83E 09 -  -  -          add hl,bc
 2195 D1:C83F ED 27 -  -          ld  hl,(hl)
 2196 D1:C841 06 00 -  -          ld  b,0
 2197 D1:C843 4F -  -  -          ld  c,a
 2198 D1:C844 09 -  -  -          add hl,bc   ;full address
 2199 D1:C845 CD 74 AE D1         READ_ACCESS
 2200 D1:C849 CB 3F -  -          srl a
 2201 D1:C84B 4F -  -  -          ld  c,a
 2202 D1:C84C DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2203 D1:C866 41 -  -  -          ld  b,c
 2204 D1:C867 CD 17 AF D1         WRITE_ACCESS
 2205 D1:C86B E1 -  -  -      pop hl
 2206 D1:C86C C3 F2 B6 D1     jp i6502NextLoad
 2207 D1:C870 -  -  -  -  
 2208 D1:C870 -  -  -  -  ;absolute,X	LSR oper,X	5E	3	7  
 2209 D1:C870 -  -  -  -  inst6502_lsr_absx:
 2210 D1:C870 ED 33 07 -      ADDCYC(7)
 2211 D1:C873 CD FE B7 D1     PUSH_ABSXSPLIT_NODEP
 2212 D1:C877 CD 74 AE D1         READ_ACCESS
 2213 D1:C87B CB 3F -  -          srl a
 2214 D1:C87D 4F -  -  -          ld  c,a
 2215 D1:C87E DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2216 D1:C898 41 -  -  -          ld  b,c
 2217 D1:C899 CD 17 AF D1         WRITE_ACCESS
 2218 D1:C89D E1 -  -  -      pop hl
 2219 D1:C89E C3 F2 B6 D1     jp i6502NextLoad
 2220 D1:C8A2 -  -  -  -  
 2221 D1:C8A2 -  -  -  -  ;-----------------------------------------------------------------------------
 2222 D1:C8A2 -  -  -  -  ;ROL - Rotate One Bit Left (Memory or Accumulator)
 2223 D1:C8A2 -  -  -  -  ;C <- [76543210] <- C
 2224 D1:C8A2 -  -  -  -  ;N	Z	C	I	D	V
 2225 D1:C8A2 -  -  -  -  ;+	+	+	-	-	-
 2226 D1:C8A2 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2227 D1:C8A2 -  -  -  -  
 2228 D1:C8A2 -  -  -  -  ;accumulator	ROL A	2A	1	2  
 2229 D1:C8A2 -  -  -  -  inst6502_rol:
 2230 D1:C8A2 ED 33 02 -      ADDCYC(2)
 2231 D1:C8A5 DD 7E 04 -      ld  a,(ix+REGSR)
 2232 D1:C8A8 1F -  -  -      rra
 2233 D1:C8A9 DD CB 00 16     rl  (ix+REGA)
 2234 D1:C8AD DD 7E 00 -      ld  a,(ix+REGA)
 2235 D1:C8B0 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2236 D1:C8CA C3 0B B7 D1     jp i6502FinishLoad
 2237 D1:C8CE -  -  -  -  
 2238 D1:C8CE -  -  -  -  ;zeropage	ROL oper	26	2	5  
 2239 D1:C8CE -  -  -  -  inst6502_rol_zp:
 2240 D1:C8CE ED 33 05 -      ADDCYC(5)
 2241 D1:C8D1 7E -  -  -      ld  a,(hl)
 2242 D1:C8D2 01 00 38 D0     ld  bc,ZEROPAGE
 2243 D1:C8D6 81 -  -  -      add a,c
 2244 D1:C8D7 4F -  -  -      ld  c,a
 2245 D1:C8D8 DD 7E 04 -      ld  a,(ix+REGSR)
 2246 D1:C8DB 1F -  -  -      rra
 2247 D1:C8DC 0A -  -  -      ld  a,(bc)
 2248 D1:C8DD 17 -  -  -      rla
 2249 D1:C8DE 02 -  -  -      ld  (bc),a
 2250 D1:C8DF DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2251 D1:C8F9 C3 F2 B6 D1     jp i6502NextLoad
 2252 D1:C8FD -  -  -  -  
 2253 D1:C8FD -  -  -  -  ;zeropage,X	ROL oper,X	36	2	6  
 2254 D1:C8FD -  -  -  -  inst6502_rol_zpx:
 2255 D1:C8FD ED 33 06 -      ADDCYC(6)
 2256 D1:C900 7E -  -  -      ld  a,(hl)
 2257 D1:C901 01 00 38 D0     ld  bc,ZEROPAGE
 2258 D1:C905 81 -  -  -      add a,c
 2259 D1:C906 DD 86 01 -      add a,(ix+REGX)
 2260 D1:C909 4F -  -  -      ld  c,a
 2261 D1:C90A DD 7E 04 -      ld  a,(ix+REGSR)
 2262 D1:C90D 1F -  -  -      rra
 2263 D1:C90E 0A -  -  -      ld  a,(bc)
 2264 D1:C90F 17 -  -  -      rla
 2265 D1:C910 02 -  -  -      ld  (bc),a
 2266 D1:C911 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2267 D1:C92B C3 F2 B6 D1     jp i6502NextLoad
 2268 D1:C92F -  -  -  -  
 2269 D1:C92F -  -  -  -  ;absolute	ROL oper	2E	3	6  
 2270 D1:C92F -  -  -  -  inst6502_rol_abs:
 2271 D1:C92F ED 33 06 -      ADDCYC(6)
 2272 D1:C932 CD A1 B7 D1     call subroutine6502_abs_split_start
 2273 D1:C936 E5 -  -  -      push hl
 2274 D1:C937 50 -  -  -          ld  d,b
 2275 D1:C938 79 -  -  -          ld  a,c
 2276 D1:C939 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2277 D1:C93B ED 4C -  -          mlt bc
 2278 D1:C93D 21 00 40 D0         ld  hl,PAGETABLE
 2279 D1:C941 09 -  -  -          add hl,bc
 2280 D1:C942 ED 27 -  -          ld  hl,(hl)
 2281 D1:C944 06 00 -  -          ld  b,0
 2282 D1:C946 4F -  -  -          ld  c,a
 2283 D1:C947 09 -  -  -          add hl,bc   ;full address
 2284 D1:C948 CD 74 AE D1         READ_ACCESS
 2285 D1:C94C DD 46 04 -          ld  b,(ix+REGSR)
 2286 D1:C94F CB 18 -  -          rr b
 2287 D1:C951 17 -  -  -          rla
 2288 D1:C952 4F -  -  -          ld  c,a
 2289 D1:C953 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2290 D1:C96D 41 -  -  -          ld  b,c
 2291 D1:C96E CD 17 AF D1         WRITE_ACCESS
 2292 D1:C972 E1 -  -  -      pop hl
 2293 D1:C973 C3 F2 B6 D1     jp i6502NextLoad
 2294 D1:C977 -  -  -  -  
 2295 D1:C977 -  -  -  -  ;absolute,X	ROL oper,X	3E	3	7  
 2296 D1:C977 -  -  -  -  inst6502_rol_absx:
 2297 D1:C977 ED 33 07 -      ADDCYC(7)
 2298 D1:C97A CD FE B7 D1     PUSH_ABSXSPLIT_NODEP
 2299 D1:C97E CD 74 AE D1         READ_ACCESS
 2300 D1:C982 DD 46 04 -          ld  b,(ix+REGSR)
 2301 D1:C985 CB 18 -  -          rr b
 2302 D1:C987 17 -  -  -          rla
 2303 D1:C988 4F -  -  -          ld  c,a
 2304 D1:C989 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2305 D1:C9A3 41 -  -  -          ld  b,c
 2306 D1:C9A4 CD 17 AF D1         WRITE_ACCESS
 2307 D1:C9A8 E1 -  -  -      pop hl
 2308 D1:C9A9 C3 F2 B6 D1     jp i6502NextLoad
 2309 D1:C9AD -  -  -  -  
 2310 D1:C9AD -  -  -  -  ;-----------------------------------------------------------------------------
 2311 D1:C9AD -  -  -  -  ;ROR - Rotate One Bit Right (Memory or Accumulator)
 2312 D1:C9AD -  -  -  -  ;C -> [76543210] -> C
 2313 D1:C9AD -  -  -  -  ;N	Z	C	I	D	V
 2314 D1:C9AD -  -  -  -  ;+	+	+	-	-	-
 2315 D1:C9AD -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2316 D1:C9AD -  -  -  -  
 2317 D1:C9AD -  -  -  -  ;accumulator	ROR A	6A	1	2  
 2318 D1:C9AD -  -  -  -  inst6502_ror:
 2319 D1:C9AD ED 33 02 -      ADDCYC(2)
 2320 D1:C9B0 DD 7E 04 -      ld  a,(ix+REGSR)
 2321 D1:C9B3 1F -  -  -      rra
 2322 D1:C9B4 DD CB 00 1E     rr  (ix+REGA)
 2323 D1:C9B8 DD 7E 00 -      ld  a,(ix+REGA)
 2324 D1:C9BB DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2325 D1:C9D5 C3 0B B7 D1     jp i6502FinishLoad
 2326 D1:C9D9 -  -  -  -  
 2327 D1:C9D9 -  -  -  -  ;zeropage	ROR oper	66	2	5  
 2328 D1:C9D9 -  -  -  -  inst6502_ror_zp:
 2329 D1:C9D9 ED 33 05 -      ADDCYC(5)
 2330 D1:C9DC 7E -  -  -      ld  a,(hl)
 2331 D1:C9DD 01 00 38 D0     ld  bc,ZEROPAGE
 2332 D1:C9E1 81 -  -  -      add a,c
 2333 D1:C9E2 4F -  -  -      ld  c,a
 2334 D1:C9E3 DD 7E 04 -      ld  a,(ix+REGSR)
 2335 D1:C9E6 1F -  -  -      rra
 2336 D1:C9E7 0A -  -  -      ld  a,(bc)
 2337 D1:C9E8 1F -  -  -      rra
 2338 D1:C9E9 02 -  -  -      ld  (bc),a
 2339 D1:C9EA DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2340 D1:CA04 C3 F2 B6 D1     jp i6502NextLoad
 2341 D1:CA08 -  -  -  -  
 2342 D1:CA08 -  -  -  -  ;zeropage,X	ROR oper,X	76	2	6  
 2343 D1:CA08 -  -  -  -  inst6502_ror_zpx:
 2344 D1:CA08 ED 33 06 -      ADDCYC(6)
 2345 D1:CA0B 7E -  -  -      ld  a,(hl)
 2346 D1:CA0C 01 00 38 D0     ld  bc,ZEROPAGE
 2347 D1:CA10 81 -  -  -      add a,c
 2348 D1:CA11 DD 86 01 -      add a,(ix+REGX)
 2349 D1:CA14 4F -  -  -      ld  c,a
 2350 D1:CA15 DD 7E 04 -      ld  a,(ix+REGSR)
 2351 D1:CA18 1F -  -  -      rra
 2352 D1:CA19 0A -  -  -      ld  a,(bc)
 2353 D1:CA1A 1F -  -  -      rra
 2354 D1:CA1B 02 -  -  -      ld  (bc),a
 2355 D1:CA1C DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2356 D1:CA36 C3 F2 B6 D1     jp i6502NextLoad
 2357 D1:CA3A -  -  -  -  
 2358 D1:CA3A -  -  -  -  ;absolute	ROR oper	6E	3	6  
 2359 D1:CA3A -  -  -  -  inst6502_ror_abs:
 2360 D1:CA3A ED 33 06 -      ADDCYC(6)
 2361 D1:CA3D CD A1 B7 D1     call subroutine6502_abs_split_start
 2362 D1:CA41 E5 -  -  -      push hl
 2363 D1:CA42 50 -  -  -          ld  d,b
 2364 D1:CA43 79 -  -  -          ld  a,c
 2365 D1:CA44 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2366 D1:CA46 ED 4C -  -          mlt bc
 2367 D1:CA48 21 00 40 D0         ld  hl,PAGETABLE
 2368 D1:CA4C 09 -  -  -          add hl,bc
 2369 D1:CA4D ED 27 -  -          ld  hl,(hl)
 2370 D1:CA4F 06 00 -  -          ld  b,0
 2371 D1:CA51 4F -  -  -          ld  c,a
 2372 D1:CA52 09 -  -  -          add hl,bc   ;full address
 2373 D1:CA53 CD 74 AE D1         READ_ACCESS
 2374 D1:CA57 DD 46 04 -          ld  b,(ix+REGSR)
 2375 D1:CA5A CB 18 -  -          rr b
 2376 D1:CA5C 1F -  -  -          rra
 2377 D1:CA5D 4F -  -  -          ld  c,a
 2378 D1:CA5E DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2379 D1:CA78 41 -  -  -          ld  b,c
 2380 D1:CA79 CD 17 AF D1         WRITE_ACCESS
 2381 D1:CA7D E1 -  -  -      pop hl
 2382 D1:CA7E C3 F2 B6 D1     jp i6502NextLoad
 2383 D1:CA82 -  -  -  -  
 2384 D1:CA82 -  -  -  -  ;absolute,X	ROR oper,X	7E	3	7  
 2385 D1:CA82 -  -  -  -  inst6502_ror_absx:
 2386 D1:CA82 ED 33 07 -      ADDCYC(7)
 2387 D1:CA85 CD FE B7 D1     PUSH_ABSXSPLIT_NODEP
 2388 D1:CA89 CD 74 AE D1         READ_ACCESS
 2389 D1:CA8D DD 46 04 -          ld  b,(ix+REGSR)
 2390 D1:CA90 CB 18 -  -          rr b
 2391 D1:CA92 1F -  -  -          rra
 2392 D1:CA93 4F -  -  -          ld  c,a
 2393 D1:CA94 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2394 D1:CAAE 41 -  -  -          ld  b,c
 2395 D1:CAAF CD 17 AF D1         WRITE_ACCESS
 2396 D1:CAB3 E1 -  -  -      pop hl
 2397 D1:CAB4 C3 F2 B6 D1     jp i6502NextLoad
 2398 D1:CAB8 -  -  -  -  
 2399 D1:CAB8 -  -  -  -  ;-----------------------------------------------------------------------------
 2400 D1:CAB8 -  -  -  -  ;-----------------------------------------------------------------------------
 2401 D1:CAB8 -  -  -  -  ;-----------------------------------------------------------------------------
 2402 D1:CAB8 -  -  -  -  ;Instructions by type: Flag Instructions
 2403 D1:CAB8 -  -  -  -  
 2404 D1:CAB8 -  -  -  -  ;CLC - Clear Carry Flag
 2405 D1:CAB8 -  -  -  -  ;0 -> C
 2406 D1:CAB8 -  -  -  -  ;N	Z	C	I	D	V
 2407 D1:CAB8 -  -  -  -  ;-	-	0	-	-	-
 2408 D1:CAB8 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2409 D1:CAB8 -  -  -  -  ;implied	CLC	18	1	2  
 2410 D1:CAB8 -  -  -  -  inst6502_clc:
 2411 D1:CAB8 ED 33 02 -      ADDCYC(2)
 2412 D1:CABB DD CB 04 86     res SF_CARRY,(ix+REGSR)
 2413 D1:CABF C3 0B B7 D1     jp  i6502FinishLoad
 2414 D1:CAC3 -  -  -  -  
 2415 D1:CAC3 -  -  -  -  ;CLD - Clear Decimal Mode
 2416 D1:CAC3 -  -  -  -  ;0 -> D
 2417 D1:CAC3 -  -  -  -  ;N	Z	C	I	D	V
 2418 D1:CAC3 -  -  -  -  ;-	-	-	-	0	-
 2419 D1:CAC3 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2420 D1:CAC3 -  -  -  -  ;implied	CLD	D8	1	2  
 2421 D1:CAC3 -  -  -  -  inst6502_cld:
 2422 D1:CAC3 ED 33 02 -      ADDCYC(2)
 2423 D1:CAC6 DD CB 04 9E     res SF_DEC,(ix+REGSR)
 2424 D1:CACA C3 0B B7 D1     jp  i6502FinishLoad
 2425 D1:CACE -  -  -  -  
 2426 D1:CACE -  -  -  -  ;CLI -  Clear Interrupt Disable Bit
 2427 D1:CACE -  -  -  -  ;0 -> I
 2428 D1:CACE -  -  -  -  ;N	Z	C	I	D	V
 2429 D1:CACE -  -  -  -  ;-	-	-	0	-	-
 2430 D1:CACE -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2431 D1:CACE -  -  -  -  ;implied	CLI	58	1	2  
 2432 D1:CACE -  -  -  -  inst6502_cli:
 2433 D1:CACE ED 33 02 -      ADDCYC(2)
 2434 D1:CAD1 DD CB 04 96     res SF_INT,(ix+REGSR)
 2435 D1:CAD5 C3 0B B7 D1     jp  i6502FinishLoad
 2436 D1:CAD9 -  -  -  -  
 2437 D1:CAD9 -  -  -  -  ;CLV - Clear Overflow Flag
 2438 D1:CAD9 -  -  -  -  ;0 -> V
 2439 D1:CAD9 -  -  -  -  ;N	Z	C	I	D	V
 2440 D1:CAD9 -  -  -  -  ;-	-	-	-	-	0
 2441 D1:CAD9 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2442 D1:CAD9 -  -  -  -  ;implied	CLV	B8	1	2  
 2443 D1:CAD9 -  -  -  -  inst6502_clv:
 2444 D1:CAD9 ED 33 02 -      ADDCYC(2)
 2445 D1:CADC DD CB 04 B6     res SF_OVER,(ix+REGSR)
 2446 D1:CAE0 C3 0B B7 D1     jp  i6502FinishLoad
 2447 D1:CAE4 -  -  -  -  
 2448 D1:CAE4 -  -  -  -  ;SEC - Set Carry Flag
 2449 D1:CAE4 -  -  -  -  ;1 -> C
 2450 D1:CAE4 -  -  -  -  ;N	Z	C	I	D	V
 2451 D1:CAE4 -  -  -  -  ;-	-	1	-	-	-
 2452 D1:CAE4 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2453 D1:CAE4 -  -  -  -  ;implied	SEC	38	1	2  
 2454 D1:CAE4 -  -  -  -  inst6502_sec:
 2455 D1:CAE4 ED 33 02 -      ADDCYC(2)
 2456 D1:CAE7 DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 2457 D1:CAEB C3 0B B7 D1     jp  i6502FinishLoad
 2458 D1:CAEF -  -  -  -  
 2459 D1:CAEF -  -  -  -  ;SED - Set Decimal Flag
 2460 D1:CAEF -  -  -  -  ;1 -> D
 2461 D1:CAEF -  -  -  -  ;N	Z	C	I	D	V
 2462 D1:CAEF -  -  -  -  ;-	-	-	-	1	-
 2463 D1:CAEF -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2464 D1:CAEF -  -  -  -  ;implied	SED	F8	1	2  
 2465 D1:CAEF -  -  -  -  inst6502_sed:
 2466 D1:CAEF ED 33 02 -      ADDCYC(2)
 2467 D1:CAF2 DD CB 04 DE     set SF_DEC,(ix+REGSR)
 2468 D1:CAF6 C3 0B B7 D1     jp  i6502FinishLoad
 2469 D1:CAFA -  -  -  -  
 2470 D1:CAFA -  -  -  -  ;SEI - Set Interrupt Disable Status
 2471 D1:CAFA -  -  -  -  ;1 -> I
 2472 D1:CAFA -  -  -  -  ;N	Z	C	I	D	V
 2473 D1:CAFA -  -  -  -  ;-	-	-	1	-	-
 2474 D1:CAFA -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2475 D1:CAFA -  -  -  -  ;implied	SEI	78	1	2  
 2476 D1:CAFA -  -  -  -  inst6502_sei:
 2477 D1:CAFA ED 33 02 -      ADDCYC(2)
 2478 D1:CAFD DD CB 04 D6     set SF_INT,(ix+REGSR)
 2479 D1:CB01 C3 0B B7 D1     jp  i6502FinishLoad
 2480 D1:CB05 -  -  -  -  
 2481 D1:CB05 -  -  -  -  ;-----------------------------------------------------------------------------
 2482 D1:CB05 -  -  -  -  ;-----------------------------------------------------------------------------
 2483 D1:CB05 -  -  -  -  ;-----------------------------------------------------------------------------
 2484 D1:CB05 -  -  -  -  ;Instructions by type: Comparisons
 2485 D1:CB05 -  -  -  -  
 2486 D1:CB05 -  -  -  -  ;CMP - Compare Memory with Accumulator
 2487 D1:CB05 -  -  -  -  ;A - M
 2488 D1:CB05 -  -  -  -  ;N	Z	C	I	D	V
 2489 D1:CB05 -  -  -  -  ;+	+	+	-	-	-
 2490 D1:CB05 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2491 D1:CB05 -  -  -  -  
 2492 D1:CB05 -  -  -  -  ;immediate	CMP #oper	C9	2	2  
 2493 D1:CB05 -  -  -  -  inst6502_cmp_imm:
 2494 D1:CB05 ED 33 02 -      ADDCYC(2)
 2495 D1:CB08 46 -  -  -      ld  b,(hl)
 2496 D1:CB09 C3 97 B8 D1     jp  subroutine6502_cmp_combined_end
 2497 D1:CB0D -  -  -  -  
 2498 D1:CB0D -  -  -  -  ;zeropage	CMP oper	C5	2	3  
 2499 D1:CB0D -  -  -  -  inst6502_cmp_zp:
 2500 D1:CB0D ED 33 03 -      ADDCYC(3)
 2501 D1:CB10 01 00 38 D0     ld  bc,ZEROPAGE
 2502 D1:CB14 4E -  -  -      ld  c,(hl)
 2503 D1:CB15 0A -  -  -      ld  a,(bc)
 2504 D1:CB16 47 -  -  -      ld  b,a
 2505 D1:CB17 C3 97 B8 D1     jp  subroutine6502_cmp_combined_end
 2506 D1:CB1B -  -  -  -  
 2507 D1:CB1B -  -  -  -  ;zeropage,X	CMP oper,X	D5	2	4  
 2508 D1:CB1B -  -  -  -  inst6502_cmp_zpx:
 2509 D1:CB1B ED 33 04 -      ADDCYC(4)
 2510 D1:CB1E 7E -  -  -      ld  a,(hl)
 2511 D1:CB1F 01 00 38 D0     ld  bc,ZEROPAGE
 2512 D1:CB23 81 -  -  -      add a,c
 2513 D1:CB24 DD 86 01 -      add a,(ix+REGX)
 2514 D1:CB27 4F -  -  -      ld  c,a
 2515 D1:CB28 0A -  -  -      ld  a,(bc)
 2516 D1:CB29 47 -  -  -      ld  b,a
 2517 D1:CB2A C3 97 B8 D1     jp  subroutine6502_cmp_combined_end
 2518 D1:CB2E -  -  -  -  
 2519 D1:CB2E -  -  -  -  ;absolute	CMP oper	CD	3	4  
 2520 D1:CB2E -  -  -  -  inst6502_cmp_abs:
 2521 D1:CB2E ED 33 04 -      ADDCYC(4)
 2522 D1:CB31 CD A1 B7 D1     call subroutine6502_abs_split_start
 2523 D1:CB35 E5 -  -  -      push hl
 2524 D1:CB36 50 -  -  -          ld  d,b
 2525 D1:CB37 79 -  -  -          ld  a,c
 2526 D1:CB38 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2527 D1:CB3A ED 4C -  -          mlt bc
 2528 D1:CB3C 21 00 40 D0         ld  hl,PAGETABLE
 2529 D1:CB40 09 -  -  -          add hl,bc
 2530 D1:CB41 ED 27 -  -          ld  hl,(hl)
 2531 D1:CB43 06 00 -  -          ld  b,0
 2532 D1:CB45 4F -  -  -          ld  c,a
 2533 D1:CB46 09 -  -  -          add hl,bc   ;full address
 2534 D1:CB47 CD 74 AE D1         READ_ACCESS
 2535 D1:CB4B E1 -  -  -      pop hl
 2536 D1:CB4C 47 -  -  -      ld  b,a
 2537 D1:CB4D C3 97 B8 D1     jp  subroutine6502_cmp_combined_end
 2538 D1:CB51 -  -  -  -  
 2539 D1:CB51 -  -  -  -  ;absolute,X	CMP oper,X	DD	3	4* 
 2540 D1:CB51 -  -  -  -  inst6502_cmp_absx:
 2541 D1:CB51 ED 33 04 -      ADDCYC(4)
 2542 D1:CB54 CD C2 B7 D1     PUSH_ABSXSPLIT
 2543 D1:CB58 CD 74 AE D1         READ_ACCESS
 2544 D1:CB5C E1 -  -  -      pop hl
 2545 D1:CB5D 47 -  -  -      ld  b,a
 2546 D1:CB5E C3 97 B8 D1     jp  subroutine6502_cmp_combined_end
 2547 D1:CB62 -  -  -  -  
 2548 D1:CB62 -  -  -  -  ;absolute,Y	CMP oper,Y	D9	3	4* 
 2549 D1:CB62 -  -  -  -  inst6502_cmp_absy:
 2550 D1:CB62 ED 33 04 -      ADDCYC(4)
 2551 D1:CB65 CD BD B7 D1     PUSH_ABSYSPLIT
 2552 D1:CB69 CD 74 AE D1         READ_ACCESS
 2553 D1:CB6D E1 -  -  -      pop hl
 2554 D1:CB6E 47 -  -  -      ld  b,a
 2555 D1:CB6F C3 97 B8 D1     jp  subroutine6502_cmp_combined_end
 2556 D1:CB73 -  -  -  -  
 2557 D1:CB73 -  -  -  -  ;(indirect,X)	CMP (oper,X)	C1	2	6  
 2558 D1:CB73 -  -  -  -  inst6502_cmp_indx:
 2559 D1:CB73 ED 33 06 -      ADDCYC(6)
 2560 D1:CB76 E5 -  -  -      push hl
 2561 D1:CB77 7E -  -  -          ld  a,(hl)
 2562 D1:CB78 21 00 38 D0         ld  hl,ZEROPAGE
 2563 D1:CB7C 85 -  -  -          add a,L
 2564 D1:CB7D DD 86 01 -          add a,(ix+REGX)
 2565 D1:CB80 6F -  -  -          ld  L,a
 2566 D1:CB81 7E -  -  -          ld  a,(hl)
 2567 D1:CB82 2C -  -  -          inc L
 2568 D1:CB83 56 -  -  -          ld  d,(hl)
 2569 D1:CB84 42 -  -  -          ld  b,d
 2570 D1:CB85 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2571 D1:CB87 ED 4C -  -          mlt bc
 2572 D1:CB89 21 00 40 D0         ld  hl,PAGETABLE
 2573 D1:CB8D 09 -  -  -          add hl,bc
 2574 D1:CB8E ED 27 -  -          ld  hl,(hl)
 2575 D1:CB90 06 00 -  -          ld  b,0
 2576 D1:CB92 4F -  -  -          ld  c,a
 2577 D1:CB93 09 -  -  -          add hl,bc
 2578 D1:CB94 CD 74 AE D1         READ_ACCESS
 2579 D1:CB98 E1 -  -  -      pop hl
 2580 D1:CB99 47 -  -  -      ld  b,a
 2581 D1:CB9A C3 97 B8 D1     jp  subroutine6502_cmp_combined_end
 2582 D1:CB9E -  -  -  -  
 2583 D1:CB9E -  -  -  -  ;(indirect),Y	CMP (oper),Y	D1	2	5* 
 2584 D1:CB9E -  -  -  -  inst6502_cmp_indy:
 2585 D1:CB9E ED 33 05 -      ADDCYC(5)
 2586 D1:CBA1 E5 -  -  -      push hl
 2587 D1:CBA2 7E -  -  -          ld  a,(hl)
 2588 D1:CBA3 21 00 38 D0         ld  hl,ZEROPAGE
 2589 D1:CBA7 85 -  -  -          add a,L
 2590 D1:CBA8 6F -  -  -          ld  L,a
 2591 D1:CBA9 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 2592 D1:CBAA 2C -  -  -          inc L
 2593 D1:CBAB DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 2594 D1:CBAE 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 2595 D1:CBAF 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 2596 D1:CBB1 24 -  -  -          inc h
 2597 D1:CBB2 FD 23 -  -          ADDCYC(1)
 2598 D1:CBB4 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 2599 D1:CBB5 2E 0C -  -          ld  L,BASETABLE_STRIDE
 2600 D1:CBB7 ED 6C -  -          mlt hl          ;23.
 2601 D1:CBB9 01 00 40 D0         ld  bc,PAGETABLE
 2602 D1:CBBD 09 -  -  -          add hl,bc
 2603 D1:CBBE ED 27 -  -          ld  hl,(hl)     ;address get.
 2604 D1:CBC0 01 00 00 00         ld  bc,0
 2605 D1:CBC4 4F -  -  -          ld  c,a
 2606 D1:CBC5 09 -  -  -          add hl,bc       ;Full address get.
 2607 D1:CBC6 CD 74 AE D1         READ_ACCESS
 2608 D1:CBCA E1 -  -  -      pop hl
 2609 D1:CBCB 47 -  -  -      ld  b,a
 2610 D1:CBCC C3 97 B8 D1     jp  subroutine6502_cmp_combined_end
 2611 D1:CBD0 -  -  -  -  
 2612 D1:CBD0 -  -  -  -  ;-----------------------------------------------------------------------------
 2613 D1:CBD0 -  -  -  -  ;CPX - Compare Memory and Index X
 2614 D1:CBD0 -  -  -  -  ;X - M
 2615 D1:CBD0 -  -  -  -  ;N	Z	C	I	D	V
 2616 D1:CBD0 -  -  -  -  ;+	+	+	-	-	-
 2617 D1:CBD0 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2618 D1:CBD0 -  -  -  -  ;immediate	CPX #oper	E0	2	2  
 2619 D1:CBD0 -  -  -  -  inst6502_cpx_imm:
 2620 D1:CBD0 ED 33 02 -      ADDCYC(2)
 2621 D1:CBD3 DD 7E 01 -      ld  a,(ix+REGX)
 2622 D1:CBD6 96 -  -  -      sub a,(hl)
 2623 D1:CBD7 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2624 D1:CBD8 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2625 D1:CBF2 C3 F2 B6 D1     jp  i6502NextLoad
 2626 D1:CBF6 -  -  -  -  
 2627 D1:CBF6 -  -  -  -  ;zeropage	CPX oper	E4	2	3  
 2628 D1:CBF6 -  -  -  -  inst6502_cpx_zp:
 2629 D1:CBF6 ED 33 03 -      ADDCYC(3)
 2630 D1:CBF9 01 00 38 D0     ld  bc,ZEROPAGE
 2631 D1:CBFD 4E -  -  -      ld  c,(hl)
 2632 D1:CBFE 0A -  -  -      ld  a,(bc)
 2633 D1:CBFF 47 -  -  -      ld  b,a
 2634 D1:CC00 DD 7E 01 -      ld  a,(ix+REGX)
 2635 D1:CC03 90 -  -  -      sub a,b
 2636 D1:CC04 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2637 D1:CC05 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2638 D1:CC1F C3 F2 B6 D1     jp i6502NextLoad
 2639 D1:CC23 -  -  -  -  ;absolute	CPX oper	EC	3	4  
 2640 D1:CC23 -  -  -  -  inst6502_cpx_abs:
 2641 D1:CC23 ED 33 04 -      ADDCYC(4)
 2642 D1:CC26 CD A1 B7 D1     call subroutine6502_abs_split_start
 2643 D1:CC2A E5 -  -  -      push hl
 2644 D1:CC2B 50 -  -  -          ld  d,b
 2645 D1:CC2C 79 -  -  -          ld  a,c
 2646 D1:CC2D 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2647 D1:CC2F ED 4C -  -          mlt bc
 2648 D1:CC31 21 00 40 D0         ld  hl,PAGETABLE
 2649 D1:CC35 09 -  -  -          add hl,bc
 2650 D1:CC36 ED 27 -  -          ld  hl,(hl)
 2651 D1:CC38 06 00 -  -          ld  b,0
 2652 D1:CC3A 4F -  -  -          ld  c,a
 2653 D1:CC3B 09 -  -  -          add hl,bc   ;full address
 2654 D1:CC3C CD 74 AE D1         READ_ACCESS
 2655 D1:CC40 E1 -  -  -      pop hl
 2656 D1:CC41 47 -  -  -      ld  b,a
 2657 D1:CC42 DD 7E 01 -      ld  a,(ix+REGX)
 2658 D1:CC45 90 -  -  -      sub a,b
 2659 D1:CC46 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2660 D1:CC47 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2661 D1:CC61 C3 F2 B6 D1     jp i6502NextLoad
 2662 D1:CC65 -  -  -  -  
 2663 D1:CC65 -  -  -  -  ;-----------------------------------------------------------------------------
 2664 D1:CC65 -  -  -  -  ;CPY - Compare Memory and Index Y
 2665 D1:CC65 -  -  -  -  ;Y - M
 2666 D1:CC65 -  -  -  -  ;N	Z	C	I	D	V
 2667 D1:CC65 -  -  -  -  ;+	+	+	-	-	-
 2668 D1:CC65 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2669 D1:CC65 -  -  -  -  ;immediate	CPY #oper	C0	2	2  
 2670 D1:CC65 -  -  -  -  inst6502_cpy_imm:
 2671 D1:CC65 ED 33 02 -      ADDCYC(2)
 2672 D1:CC68 DD 7E 02 -      ld  a,(ix+REGY)
 2673 D1:CC6B 96 -  -  -      sub a,(hl)
 2674 D1:CC6C 3F -  -  -      ccf
 2675 D1:CC6D DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2676 D1:CC87 C3 F2 B6 D1     jp  i6502NextLoad
 2677 D1:CC8B -  -  -  -  
 2678 D1:CC8B -  -  -  -  ;zeropage	CPY oper	C4	2	3  
 2679 D1:CC8B -  -  -  -  inst6502_cpy_zp:
 2680 D1:CC8B ED 33 03 -      ADDCYC(3)
 2681 D1:CC8E 7E -  -  -      ld  a,(hl)
 2682 D1:CC8F 01 00 38 D0     ld  bc,ZEROPAGE
 2683 D1:CC93 81 -  -  -      add a,c
 2684 D1:CC94 4F -  -  -      ld  c,a
 2685 D1:CC95 0A -  -  -      ld  a,(bc)
 2686 D1:CC96 47 -  -  -      ld  b,a
 2687 D1:CC97 DD 7E 02 -      ld  a,(ix+REGY)
 2688 D1:CC9A 90 -  -  -      sub a,b
 2689 D1:CC9B 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2690 D1:CC9C DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2691 D1:CCB6 C3 F2 B6 D1     jp i6502NextLoad
 2692 D1:CCBA -  -  -  -  
 2693 D1:CCBA -  -  -  -  ;absolute	CPY oper	CC	3	4  
 2694 D1:CCBA -  -  -  -  inst6502_cpy_abs:
 2695 D1:CCBA ED 33 04 -      ADDCYC(4)
 2696 D1:CCBD CD A1 B7 D1     call subroutine6502_abs_split_start
 2697 D1:CCC1 E5 -  -  -      push hl
 2698 D1:CCC2 50 -  -  -          ld  d,b
 2699 D1:CCC3 79 -  -  -          ld  a,c
 2700 D1:CCC4 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2701 D1:CCC6 ED 4C -  -          mlt bc
 2702 D1:CCC8 21 00 40 D0         ld  hl,PAGETABLE
 2703 D1:CCCC 09 -  -  -          add hl,bc
 2704 D1:CCCD ED 27 -  -          ld  hl,(hl)
 2705 D1:CCCF 06 00 -  -          ld  b,0
 2706 D1:CCD1 4F -  -  -          ld  c,a
 2707 D1:CCD2 09 -  -  -          add hl,bc   ;full address
 2708 D1:CCD3 CD 74 AE D1         READ_ACCESS
 2709 D1:CCD7 E1 -  -  -      pop hl
 2710 D1:CCD8 47 -  -  -      ld  b,a
 2711 D1:CCD9 DD 7E 02 -      ld  a,(ix+REGY)
 2712 D1:CCDC 90 -  -  -      sub a,b
 2713 D1:CCDD 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2714 D1:CCDE DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2715 D1:CCF8 C3 F2 B6 D1     jp i6502NextLoad
 2716 D1:CCFC -  -  -  -  
 2717 D1:CCFC -  -  -  -  
 2718 D1:CCFC -  -  -  -  ;-----------------------------------------------------------------------------
 2719 D1:CCFC -  -  -  -  ;-----------------------------------------------------------------------------
 2720 D1:CCFC -  -  -  -  ;-----------------------------------------------------------------------------
 2721 D1:CCFC -  -  -  -  ;Instructions by type: Conditional Branch Instructions
 2722 D1:CCFC -  -  -  -  
 2723 D1:CCFC -  -  -  -  ;branch on C=0
 2724 D1:CCFC -  -  -  -  ;relative	BCC oper	90	2	2**
 2725 D1:CCFC -  -  -  -  inst6502_bcc:
 2726 D1:CCFC ED 33 02 -      ADDCYC(2)
 2727 D1:CCFF DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2728 D1:CD03 C2 F2 B6 D1     jp  nz,i6502NextLoad
 2729 D1:CD07 C3 BA B8 D1     jp  subroutine6502_take_branch
 2730 D1:CD0B -  -  -  -  
 2731 D1:CD0B -  -  -  -  ;branch on C=1
 2732 D1:CD0B -  -  -  -  ;relative	BCS oper	B0	2	2**
 2733 D1:CD0B -  -  -  -  inst6502_bcs:
 2734 D1:CD0B ED 33 02 -      ADDCYC(2)
 2735 D1:CD0E DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2736 D1:CD12 CA F2 B6 D1     jp  z,i6502NextLoad
 2737 D1:CD16 C3 BA B8 D1     jp  subroutine6502_take_branch
 2738 D1:CD1A -  -  -  -  
 2739 D1:CD1A -  -  -  -  ;branch on Z=1
 2740 D1:CD1A -  -  -  -  ;relative	BEQ oper	F0	2	2**
 2741 D1:CD1A -  -  -  -  inst6502_beq:
 2742 D1:CD1A ED 33 02 -      ADDCYC(2)
 2743 D1:CD1D DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2744 D1:CD21 CA F2 B6 D1     jp  z,i6502NextLoad
 2745 D1:CD25 C3 D5 B8 D1     jp  subroutine6502_take_branch_waitloop_detect
 2746 D1:CD29 -  -  -  -  
 2747 D1:CD29 -  -  -  -  ;branch on N=1
 2748 D1:CD29 -  -  -  -  ;relative	BMI oper	30	2	2**
 2749 D1:CD29 -  -  -  -  inst6502_bmi:
 2750 D1:CD29 ED 33 02 -      ADDCYC(2)
 2751 D1:CD2C DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2752 D1:CD30 CA F2 B6 D1     jp  z,i6502NextLoad
 2753 D1:CD34 C3 BA B8 D1     jp  subroutine6502_take_branch
 2754 D1:CD38 -  -  -  -  
 2755 D1:CD38 -  -  -  -  
 2756 D1:CD38 -  -  -  -  ;branch on Z=0
 2757 D1:CD38 -  -  -  -  ;relative	BNE oper	D0	2	2**
 2758 D1:CD38 -  -  -  -  inst6502_bne:
 2759 D1:CD38 ED 33 02 -      ADDCYC(2)
 2760 D1:CD3B DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2761 D1:CD3F C2 F2 B6 D1     jp  nz,i6502NextLoad
 2762 D1:CD43 C3 BA B8 D1     jp  subroutine6502_take_branch
 2763 D1:CD47 -  -  -  -  
 2764 D1:CD47 -  -  -  -  ;branch on N=0
 2765 D1:CD47 -  -  -  -  ;relative	BPL oper	10	2	2**
 2766 D1:CD47 -  -  -  -  inst6502_bpl:
 2767 D1:CD47 ED 33 02 -      ADDCYC(2)
 2768 D1:CD4A DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2769 D1:CD4E C2 F2 B6 D1     jp  nz,i6502NextLoad
 2770 D1:CD52 C3 BA B8 D1     jp  subroutine6502_take_branch
 2771 D1:CD56 -  -  -  -  
 2772 D1:CD56 -  -  -  -  ;branch on V=0
 2773 D1:CD56 -  -  -  -  ;relative	BVC oper	50	2	2**
 2774 D1:CD56 -  -  -  -  inst6502_bvc:
 2775 D1:CD56 ED 33 02 -      ADDCYC(2)
 2776 D1:CD59 DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2777 D1:CD5D C2 F2 B6 D1     jp  nz,i6502NextLoad
 2778 D1:CD61 C3 BA B8 D1     jp  subroutine6502_take_branch
 2779 D1:CD65 -  -  -  -  
 2780 D1:CD65 -  -  -  -  ;branch on V=1
 2781 D1:CD65 -  -  -  -  ;relative	BVS oper	70	2	2**
 2782 D1:CD65 -  -  -  -  inst6502_bvs:
 2783 D1:CD65 ED 33 02 -      ADDCYC(2)
 2784 D1:CD68 DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2785 D1:CD6C CA F2 B6 D1     jp  z,i6502NextLoad
 2786 D1:CD70 C3 BA B8 D1     jp  subroutine6502_take_branch
 2787 D1:CD74 -  -  -  -  
 2788 D1:CD74 -  -  -  -  ;-----------------------------------------------------------------------------
 2789 D1:CD74 -  -  -  -  ;-----------------------------------------------------------------------------
 2790 D1:CD74 -  -  -  -  ;-----------------------------------------------------------------------------
 2791 D1:CD74 -  -  -  -  ;Instructions by type: Interrupts
 2792 D1:CD74 -  -  -  -  
 2793 D1:CD74 -  -  -  -  ;BRK - Force Break
 2794 D1:CD74 -  -  -  -  ;BRK initiates a software interrupt similar to a hardware
 2795 D1:CD74 -  -  -  -  ;interrupt (IRQ). The return address pushed to the stack is
 2796 D1:CD74 -  -  -  -  ;PC+2, providing an extra byte of spacing for a break mark
 2797 D1:CD74 -  -  -  -  ;(identifying a reason for the break.)
 2798 D1:CD74 -  -  -  -  ;The status register will be pushed to the stack with the break
 2799 D1:CD74 -  -  -  -  ;flag set to 1. However, when retrieved during RTI or by a PLP
 2800 D1:CD74 -  -  -  -  ;instruction, the break flag will be ignored.
 2801 D1:CD74 -  -  -  -  ;The interrupt disable flag is not set automatically.
 2802 D1:CD74 -  -  -  -  ;
 2803 D1:CD74 -  -  -  -  ;interrupt,             N	Z	C	I	D	V
 2804 D1:CD74 -  -  -  -  ;push PC+2, push SR     -	-	-	1	-	-
 2805 D1:CD74 -  -  -  -  ;implied	BRK	00	1	7  
 2806 D1:CD74 -  -  -  -  inst6502_brk:
 2807 D1:CD74 ED 33 07 -      ADDCYC(7)
 2808 D1:CD77 21 00 39 D0     ld  hl,STACKBASE
 2809 D1:CD7B DD 6E 03 -      ld  L,(ix+REGSP)
 2810 D1:CD7E 52 DD 17 05     ld.s de,(ix+REGPC)
 2811 D1:CD82 13 -  -  -      inc de      ;that extra spacer.
 2812 D1:CD83 72 -  -  -      ld  (hl),d
 2813 D1:CD84 2D -  -  -      dec L
 2814 D1:CD85 73 -  -  -      ld  (hl),e
 2815 D1:CD86 2D -  -  -      dec L
 2816 D1:CD87 DD 7E 04 -      ld  a,(ix+REGSR)
 2817 D1:CD8A CB D7 -  -      set SF_INT,a
 2818 D1:CD8C 77 -  -  -      ld  (hl),a
 2819 D1:CD8D 2D -  -  -      dec L
 2820 D1:CD8E DD 75 03 -      ld  (ix+REGSP),L
 2821 D1:CD91 DD CB 1E 46     WAS_NMI_TRIGGERED
 2822 D1:CD95 01 FE 00 00     ld  bc,$FE  ;IRQ vector
 2823 D1:CD99 28 04 -  -      jr  z,+_
 2824 D1:CD9B 01 FA 00 00     ld  bc,$FA  ;NMI vector, if NMI is hijacking this instruction.
 2825 D1:CD9F 21 F4 4B D0 _:  ld  hl,(BASETABLE_STRIDE*$FF)+PAGETABLE
 2826 D1:CDA3 ED 27 -  -      ld  hl,(hl)
 2827 D1:CDA5 09 -  -  -      add hl,bc
 2828 D1:CDA6 ED 17 -  -      ld  de,(hl)
 2829 D1:CDA8 52 DD 1F 05     ld.s (ix+REGPC),de
 2830 D1:CDAC C3 DC B6 D1     jp  i6502FirstLoad
 2831 D1:CDB0 -  -  -  -  
 2832 D1:CDB0 -  -  -  -  ;RTI - Return from Interrupt
 2833 D1:CDB0 -  -  -  -  ;The status register is pulled with the break flag
 2834 D1:CDB0 -  -  -  -  ;and bit 5 ignored. Then PC is pulled from the stack.
 2835 D1:CDB0 -  -  -  -  ;pull SR, pull PC      N Z C I D V
 2836 D1:CDB0 -  -  -  -  ;                      from stack
 2837 D1:CDB0 -  -  -  -  ;implied	RTI	40	1	6  
 2838 D1:CDB0 -  -  -  -  inst6502_rti:
 2839 D1:CDB0 21 00 39 D0     ld  hl,STACKBASE
 2840 D1:CDB4 DD 6E 03 -      ld  l,(ix+REGSP)
 2841 D1:CDB7 2C -  -  -      inc l
 2842 D1:CDB8 7E -  -  -      ld  a,(hl)
 2843 D1:CDB9 2C -  -  -      inc l
 2844 D1:CDBA 5E -  -  -      ld  e,(hl)
 2845 D1:CDBB 2C -  -  -      inc l
 2846 D1:CDBC 56 -  -  -      ld  d,(hl)
 2847 D1:CDBD DD 75 03 -      ld  (ix+REGSP),l
 2848 D1:CDC0 52 DD 1F 05     ld.s (ix+REGPC),de
 2849 D1:CDC4 DD 46 04 -      ld  b,(ix+REGSR)
 2850 D1:CDC7 A8 -  -  -      xor a,b
 2851 D1:CDC8 E6 DF -  -      and a,%11011111
 2852 D1:CDCA A8 -  -  -      xor a,b
 2853 D1:CDCB DD 77 04 -      ld  (ix+REGSR),a
 2854 D1:CDCE ED 33 06 -      ADDCYC(6)
 2855 D1:CDD1 C3 DC B6 D1     jp  i6502FirstLoad
 2856 D1:CDD5 -  -  -  -  
 2857 D1:CDD5 -  -  -  -  
 2858 D1:CDD5 -  -  -  -  
 2859 D1:CDD5 -  -  -  -  ;-----------------------------------------------------------------------------
 2860 D1:CDD5 -  -  -  -  ;-----------------------------------------------------------------------------
 2861 D1:CDD5 -  -  -  -  ;-----------------------------------------------------------------------------
 2862 D1:CDD5 -  -  -  -  ;Instructions by type: Jumps and Subroutines
 2863 D1:CDD5 -  -  -  -  
 2864 D1:CDD5 -  -  -  -  ;absolute	JMP oper	4C	3	3  
 2865 D1:CDD5 -  -  -  -  inst6052_jmp_abs:
 2866 D1:CDD5 -  -  -  -      ;The waitloop handler requires that the ADDCYC() is NOT done until
 2867 D1:CDD5 -  -  -  -      ;after the jump to do the wait happens. This is because it's possible
 2868 D1:CDD5 -  -  -  -      ;that an IRQ/NMI may be skipped if ADDCYC() is done first.
 2869 D1:CDD5 DD 56 06 -      ld  d,(ix+REGPC+1)
 2870 D1:CDD8 7E -  -  -      ld  a,(hl)
 2871 D1:CDD9 23 -  -  -      inc hl
 2872 D1:CDDA 1C -  -  -      inc e
 2873 D1:CDDB 20 0D -  -      jr  nz,+_
 2874 D1:CDDD 14 -  -  -      inc d
 2875 D1:CDDE 4A -  -  -      ld  c,d
 2876 D1:CDDF 06 0C -  -      ld  b,BASETABLE_STRIDE
 2877 D1:CDE1 ED 4C -  -      mlt bc
 2878 D1:CDE3 21 00 40 D0     ld  hl,PAGETABLE
 2879 D1:CDE7 09 -  -  -      add hl,bc
 2880 D1:CDE8 ED 27 -  -      ld  hl,(hl)
 2881 D1:CDEA 66 -  -  -  _:  ld  h,(hl)
 2882 D1:CDEB 6F -  -  -      ld  l,a     ;HL=newaddr
 2883 D1:CDEC 1B -  -  -      dec de
 2884 D1:CDED 1B -  -  -      dec de      ;DE=oldaddr, at start of instruction
 2885 D1:CDEE 52 EB -  -      ex.s de,hl  ;HL=oldaddr, DE=newaddr. Upper bytes cleared.
 2886 D1:CDF0 B7 -  -  -      or  a,a
 2887 D1:CDF1 ED 52 -  -      sbc hl,de   ;infinite loop detection
 2888 D1:CDF3 52 DD 1F 05     ld.s (ix+REGPC),de
 2889 D1:CDF7 28 07 -  -      jr  z,inst6052_jmp_abs_inf_loop
 2890 D1:CDF9 ED 33 03 -      ADDCYC(3)
 2891 D1:CDFC C3 DC B6 D1     jp i6502FirstLoad
 2892 D1:CE00 -  -  -  -  
 2893 D1:CE00 -  -  -  -  inst6052_jmp_abs_inf_loop:
 2894 D1:CE00 ED 03 00 -      lea bc,iy+0
 2895 D1:CE03 2A 2C B7 D1     ld  hl,(i6502_interrupt_timer)
 2896 D1:CE07 DD 2F 1B -      ld  (ix+TEMP_MEMORY),hl
 2897 D1:CE0A DD 7E 1D -      ld  a,(ix+TEMP_MEMORY+2)
 2898 D1:CE0D 2F -  -  -      cpl
 2899 D1:CE0E DD 77 1D -      ld  (ix+TEMP_MEMORY+2),a
 2900 D1:CE11 DD 27 1B -      ld  hl,(ix+TEMP_MEMORY)
 2901 D1:CE14 7D -  -  -      ld  a,l
 2902 D1:CE15 2F -  -  -      cpl
 2903 D1:CE16 6F -  -  -      ld  l,a
 2904 D1:CE17 7C -  -  -      ld  a,h
 2905 D1:CE18 2F -  -  -      cpl
 2906 D1:CE19 67 -  -  -      ld  h,a
 2907 D1:CE1A 23 -  -  -      inc hl
 2908 D1:CE1B E5 -  -  -      push hl
 2909 D1:CE1C FD E1 -  -      pop iy      ;screw accurate timing. I just want it to go brrt
 2910 D1:CE1E C3 DC B6 D1     jp  i6502FirstLoad  
 2911 D1:CE22 -  -  -  -      
 2912 D1:CE22 -  -  -  -  
 2913 D1:CE22 -  -  -  -  
 2914 D1:CE22 -  -  -  -  
 2915 D1:CE22 -  -  -  -  ;Note: In earlier 6502 implementations, cross-page reads on indirect is bugged.
 2916 D1:CE22 -  -  -  -  ;   The end effect would be that inst6502_jmp_indir_splitread would wrap around
 2917 D1:CE22 -  -  -  -  ;   to the start of the current page rather than try to read the next page.
 2918 D1:CE22 -  -  -  -  ;indirect	JMP (oper)	6C	3	5  
 2919 D1:CE22 -  -  -  -  inst6502_jmp_indir:
 2920 D1:CE22 ED 33 05 -      ADDCYC(5)
 2921 D1:CE25 -  -  -  -      ;Doing much the same as abs_split_start below, except with fewer things
 2922 D1:CE25 -  -  -  -      ;because we don't need to preserve any of the other stuff.
 2923 D1:CE25 4E -  -  -      ld  c,(hl)
 2924 D1:CE26 23 -  -  -      inc hl
 2925 D1:CE27 1C -  -  -      inc e
 2926 D1:CE28 20 0F -  -      jr  nz,+_
 2927 D1:CE2A DD 56 06 -      ld  d,(ix+REGPC+1)
 2928 D1:CE2D 14 -  -  -      inc d
 2929 D1:CE2E 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2930 D1:CE30 ED 5C -  -      mlt de
 2931 D1:CE32 21 00 40 D0     ld  hl,PAGETABLE
 2932 D1:CE36 19 -  -  -      add hl,de
 2933 D1:CE37 ED 27 -  -      ld  hl,(hl)
 2934 D1:CE39 46 -  -  -  _:  ld  b,(hl)
 2935 D1:CE3A 79 -  -  -      ld  a,c
 2936 D1:CE3B 0C -  -  -      inc c   ;check if there will be a split read.
 2937 D1:CE3C 0E 0C -  -      ld  c,BASETABLE_STRIDE  ;Flags not affected
 2938 D1:CE3E ED 4C -  -      mlt bc                  ;Flags not affected
 2939 D1:CE40 21 00 40 D0     ld  hl,PAGETABLE        ;Flags not affected
 2940 D1:CE44 CA 59 CE D1     jp  z,inst6502_jmp_indir_splitRead
 2941 D1:CE48 09 -  -  -      add hl,bc
 2942 D1:CE49 ED 27 -  -      ld  hl,(hl)
 2943 D1:CE4B 06 00 -  -      ld  b,0
 2944 D1:CE4D 4F -  -  -      ld  c,a
 2945 D1:CE4E 09 -  -  -      add hl,bc
 2946 D1:CE4F ED 27 -  -      ld  hl,(hl)
 2947 D1:CE51 52 DD 2F 05     ld.s (ix+REGPC),hl
 2948 D1:CE55 C3 DC B6 D1     jp  i6502FirstLoad
 2949 D1:CE59 -  -  -  -  inst6502_jmp_indir_splitRead:
 2950 D1:CE59 09 -  -  -      add hl,bc
 2951 D1:CE5A ED 27 -  -      ld  hl,(hl)
 2952 D1:CE5C 7E -  -  -      ld  a,(hl)  ;high byte
 2953 D1:CE5D 01 FF 00 00     ld  bc,255
 2954 D1:CE61 09 -  -  -      add hl,bc
 2955 D1:CE62 4E -  -  -      ld  c,(hl)  ;low byte
 2956 D1:CE63 47 -  -  -      ld  b,a
 2957 D1:CE64 52 DD 0F 05     ld.s (ix+REGPC),bc
 2958 D1:CE68 C3 DC B6 D1     jp  i6502FirstLoad
 2959 D1:CE6C -  -  -  -  
 2960 D1:CE6C -  -  -  -  
 2961 D1:CE6C -  -  -  -  
 2962 D1:CE6C -  -  -  -  
 2963 D1:CE6C -  -  -  -  
 2964 D1:CE6C -  -  -  -  ;absolute	JSR oper	20	3	6  
 2965 D1:CE6C -  -  -  -  inst6502_jsr:
 2966 D1:CE6C DD 56 06 -      ld  d,(ix+REGPC+1)
 2967 D1:CE6F 4E -  -  -      ld  c,(hl)
 2968 D1:CE70 23 -  -  -      inc hl
 2969 D1:CE71 1C -  -  -      inc e
 2970 D1:CE72 20 10 -  -      jr  nz,+_
 2971 D1:CE74 14 -  -  -      inc d
 2972 D1:CE75 7A -  -  -      ld  a,d
 2973 D1:CE76 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2974 D1:CE78 ED 5C -  -      mlt de
 2975 D1:CE7A 21 00 40 D0     ld  hl,PAGETABLE
 2976 D1:CE7E 19 -  -  -      add hl,de
 2977 D1:CE7F ED 27 -  -      ld  hl,(hl)
 2978 D1:CE81 57 -  -  -      ld  d,a
 2979 D1:CE82 1E 00 -  -      ld  e,0
 2980 D1:CE84 46 -  -  -  _:  ld  b,(hl)
 2981 D1:CE85 -  -  -  -      ;push de to 6502stack
 2982 D1:CE85 21 00 39 D0     ld  hl,STACKBASE
 2983 D1:CE89 DD 6E 03 -      ld  l,(ix+REGSP)
 2984 D1:CE8C 72 -  -  -      ld  (hl),d
 2985 D1:CE8D 2D -  -  -      dec l
 2986 D1:CE8E 73 -  -  -      ld  (hl),e
 2987 D1:CE8F 2D -  -  -      dec l
 2988 D1:CE90 DD 75 03 -      ld  (ix+REGSP),l
 2989 D1:CE93 52 DD 0F 05     ld.s (ix+REGPC),bc
 2990 D1:CE97 ED 33 06 -      ADDCYC(6)
 2991 D1:CE9A C3 DC B6 D1     jp  i6502FirstLoad
 2992 D1:CE9E -  -  -  -  
 2993 D1:CE9E -  -  -  -  ;implied	RTS	60	1	6
 2994 D1:CE9E -  -  -  -  inst6502_rts:
 2995 D1:CE9E 21 00 39 D0     ld  hl,STACKBASE
 2996 D1:CEA2 DD 6E 03 -      ld  l,(ix+REGSP)
 2997 D1:CEA5 2C -  -  -      inc l
 2998 D1:CEA6 5E -  -  -      ld  e,(hl)
 2999 D1:CEA7 2C -  -  -      inc l
 3000 D1:CEA8 56 -  -  -      ld  d,(hl)
 3001 D1:CEA9 DD 75 03 -      ld  (ix+REGSP),l
 3002 D1:CEAC 13 -  -  -      inc de
 3003 D1:CEAD 52 DD 1F 05     ld.s (ix+REGPC),de
 3004 D1:CEB1 ED 33 06 -      ADDCYC(6)
 3005 D1:CEB4 C3 DC B6 D1     jp  i6502FirstLoad
 3006 D1:CEB8 -  -  -  -  
 3007 D1:CEB8 -  -  -  -  
 3008 D1:CEB8 -  -  -  -  ;-----------------------------------------------------------------------------
 3009 D1:CEB8 -  -  -  -  ;-----------------------------------------------------------------------------
 3010 D1:CEB8 -  -  -  -  ;-----------------------------------------------------------------------------
 3011 D1:CEB8 -  -  -  -  ;Instructions by type: Miscellaneous
 3012 D1:CEB8 -  -  -  -  ;BIT - Test Bits in Memory with Accumulator
 3013 D1:CEB8 -  -  -  -  ;
 3014 D1:CEB8 -  -  -  -  ;bits 7 and 6 of operand are transfered to bit 7 and 6 of SR (N,V);
 3015 D1:CEB8 -  -  -  -  ;the zero-flag is set according to the result of the operand AND
 3016 D1:CEB8 -  -  -  -  ;the accumulator (set, if the result is zero, unset otherwise).
 3017 D1:CEB8 -  -  -  -  ;This allows a quick check of a few bits at once without affecting
 3018 D1:CEB8 -  -  -  -  ;any of the registers, other than the status register (SR).
 3019 D1:CEB8 -  -  -  -  
 3020 D1:CEB8 -  -  -  -  ;A AND M -> Z, M7 -> N, M6 -> V             N	Z	C	I	D	V
 3021 D1:CEB8 -  -  -  -  ;                                           M7	+	-	-	-	M6
 3022 D1:CEB8 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 3023 D1:CEB8 -  -  -  -  ;zeropage	BIT oper	24	2	3  
 3024 D1:CEB8 -  -  -  -  inst6502_bit_zp:
 3025 D1:CEB8 ED 33 03 -      ADDCYC(3)
 3026 D1:CEBB 7E -  -  -      ld  a,(hl)
 3027 D1:CEBC 01 00 38 D0     ld  bc,ZEROPAGE
 3028 D1:CEC0 81 -  -  -      add a,c
 3029 D1:CEC1 4F -  -  -      ld  c,a
 3030 D1:CEC2 0A -  -  -      ld  a,(bc)
 3031 D1:CEC3 4F -  -  -      ld  c,a
 3032 D1:CEC4 DD A6 00 -  _:  and a,(ix+REGA)
 3033 D1:CEC7 79 -  -  -      ld  a,c     ;discard result, get bits from OPERANDs
 3034 D1:CEC8 CB 8F -  -      res SF_ZERO,a
 3035 D1:CECA 20 02 -  -      jr  nz,$+4
 3036 D1:CECC CB CF -  -      set SF_ZERO,a
 3037 D1:CECE DD 46 04 -      ld  b,(ix+REGSR)    ;keep bits in flag other than NZ and V
 3038 D1:CED1 A8 -  -  -      xor a,b
 3039 D1:CED2 E6 C2 -  -      and a,%11000010     ;1=keepA, 0=discardA,keepB
 3040 D1:CED4 A8 -  -  -      xor a,b
 3041 D1:CED5 DD 77 04 -      ld  (ix+REGSR),a
 3042 D1:CED8 C3 F2 B6 D1     jp  i6502NextLoad
 3043 D1:CEDC -  -  -  -  
 3044 D1:CEDC -  -  -  -  ;absolute	BIT oper	2C	3	4  
 3045 D1:CEDC -  -  -  -  inst6502_bit_abs:
 3046 D1:CEDC ED 33 04 -      ADDCYC(4)
 3047 D1:CEDF CD A1 B7 D1     call subroutine6502_abs_split_start
 3048 D1:CEE3 E5 -  -  -      push hl
 3049 D1:CEE4 50 -  -  -          ld  d,b
 3050 D1:CEE5 79 -  -  -          ld  a,c
 3051 D1:CEE6 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3052 D1:CEE8 ED 4C -  -          mlt bc
 3053 D1:CEEA 21 00 40 D0         ld  hl,PAGETABLE
 3054 D1:CEEE 09 -  -  -          add hl,bc
 3055 D1:CEEF ED 27 -  -          ld  hl,(hl)
 3056 D1:CEF1 06 00 -  -          ld  b,0
 3057 D1:CEF3 4F -  -  -          ld  c,a
 3058 D1:CEF4 09 -  -  -          add hl,bc   ;full address
 3059 D1:CEF5 CD 74 AE D1         READ_ACCESS
 3060 D1:CEF9 4F -  -  -          ld  c,a
 3061 D1:CEFA E1 -  -  -      pop hl
 3062 D1:CEFB 18 C7 -  -      jr  -_    
 3063 D1:CEFD -  -  -  -  
 3064 D1:CEFD -  -  -  -  ;NOP - No Operation
 3065 D1:CEFD -  -  -  -  ;implied	NOP	EA	1	2  
 3066 D1:CEFD -  -  -  -  inst6502_nop:
 3067 D1:CEFD ED 33 02 -      ADDCYC(2)
 3068 D1:CF00 C3 0B B7 D1     jp  i6502FinishLoad
 3069 D1:CF04 -  -  -  -  
 3070 D1:CF04 -  -  -  -  
 3071 D1:CF04 -  -  -  -  
 3072 D1:CF04 -  -  -  -  ;##############################################################################
 3073 D1:CF04 -  -  -  -  ;##############################################################################
 3074 D1:CF04 -  -  -  -  ;##############################################################################
 3075 D1:CF04 -  -  -  -  ;##-----#-#####-#####-----##---###---##-########-----#--##-##---#-----#----####
 3076 D1:CF04 -  -  -  -  ;####-###-#####-#####-#####-#####-###-#-##########-###--##-#-######-###-###-###
 3077 D1:CF04 -  -  -  -  ;####-###-#####-#####---###-##--#-----#-##########-###-#-#-##---###-###-----###
 3078 D1:CF04 -  -  -  -  ;####-###-#####-#####-#####-###-#-###-#-##########-###-##--#####-##-###-##-####
 3079 D1:CF04 -  -  -  -  ;##-----#-----#-----#-----##----#-###-#-----####-----#-##--#----###-###-###-#-#
 3080 D1:CF04 -  -  -  -  ;##############################################################################
 3081 D1:CF04 -  -  -  -  ;##############################################################################
 3082 D1:CF04 -  -  -  -  ;##############################################################################
 3083 D1:CF04 -  -  -  -  ;Instructions by type: Illegal Instructions
 3084 D1:CF04 -  -  -  -  
 3085 D1:CF04 -  -  -  -  ;NOP - No operations. All the no-operations. Even the ones that are linked
 3086 D1:CF04 -  -  -  -  ;to the machinery that operates an addressing mode, but does nothing with it.
 3087 D1:CF04 -  -  -  -  ;A whole lotta nothing.
 3088 D1:CF04 -  -  -  -  
 3089 D1:CF04 -  -  -  -  ;Bytes:1, Cycles:2, Opcodes: 1A, 3A, 5A, 7A, DA, FA
 3090 D1:CF04 -  -  -  -  inst6502_nop_implied:
 3091 D1:CF04 ED 33 02 -      ADDCYC(2)
 3092 D1:CF07 C3 0B B7 D1     jp  i6502FinishLoad
 3093 D1:CF0B -  -  -  -  
 3094 D1:CF0B -  -  -  -  ;Bytes:2, Cycles:2, Opcodes: 80, 82, 89, C2, E2
 3095 D1:CF0B -  -  -  -  inst6502_nop_imm:
 3096 D1:CF0B ED 33 02 -      ADDCYC(2)
 3097 D1:CF0E C3 F2 B6 D1     jp  i6502NextLoad
 3098 D1:CF12 -  -  -  -  
 3099 D1:CF12 -  -  -  -  ;Bytes:2, Cycles:3, Opcodes: 04, 44, 64
 3100 D1:CF12 -  -  -  -  inst6502_nop_zp:
 3101 D1:CF12 ED 33 03 -      ADDCYC(3)
 3102 D1:CF15 C3 F2 B6 D1     jp  i6502NextLoad
 3103 D1:CF19 -  -  -  -  
 3104 D1:CF19 -  -  -  -  ;Bytes:2, Cycles:4, Opcodes: 14, 34, 54, 74, D4, F4
 3105 D1:CF19 -  -  -  -  inst6502_nop_zpx:
 3106 D1:CF19 ED 33 04 -      ADDCYC(4)
 3107 D1:CF1C C3 F2 B6 D1     jp  i6502NextLoad
 3108 D1:CF20 -  -  -  -  
 3109 D1:CF20 -  -  -  -  ;Bytes:3, Cycles:4, Opcode: 0C
 3110 D1:CF20 -  -  -  -  inst6502_nop_abs:
 3111 D1:CF20 ED 33 04 -      ADDCYC(4)
 3112 D1:CF23 CD A1 B7 D1     call subroutine6502_abs_split_start
 3113 D1:CF27 E5 -  -  -      push hl
 3114 D1:CF28 CD 74 AE D1         READ_ACCESS
 3115 D1:CF2C E1 -  -  -      pop hl
 3116 D1:CF2D C3 F2 B6 D1     jp  i6502NextLoad
 3117 D1:CF31 -  -  -  -  
 3118 D1:CF31 -  -  -  -  ;Note: This thing latches all over the place but does nothing. All these
 3119 D1:CF31 -  -  -  -  ;READ_ACCESS thingies are in case the ROM wants to clear PPU flags or something
 3120 D1:CF31 -  -  -  -  ;using these instructions. But the one below is noted to do the touchy-feelies
 3121 D1:CF31 -  -  -  -  ;at ABS and (ABS+X)&0xFF
 3122 D1:CF31 -  -  -  -  ;Bytes:3, Cycles:4*, Opcodes: 1C, 3C, 5C, 7C, DC, FC
 3123 D1:CF31 -  -  -  -  inst6502_nop_absx:
 3124 D1:CF31 ED 33 04 -      ADDCYC(4)
 3125 D1:CF34 CD C2 B7 D1     PUSH_ABSXSPLIT
 3126 D1:CF38 CD 74 AE D1         READ_ACCESS
 3127 D1:CF3C E1 -  -  -      pop hl
 3128 D1:CF3D C3 F2 B6 D1     jp  i6502NextLoad
 3129 D1:CF41 -  -  -  -  
 3130 D1:CF41 -  -  -  -  ;-----------------------------------------------------------------------------
 3131 D1:CF41 -  -  -  -  ;ALR (ASR) - AND oper + LSR
 3132 D1:CF41 -  -  -  -  ;Affects CZN
 3133 D1:CF41 -  -  -  -  
 3134 D1:CF41 -  -  -  -  ;immediate	ALR #oper	4B	2	2 
 3135 D1:CF41 -  -  -  -  inst6502_alr_imm:
 3136 D1:CF41 ED 33 02 -      ADDCYC(2)
 3137 D1:CF44 DD 7E 00 -      ld  a,(ix+REGA)
 3138 D1:CF47 A6 -  -  -      and a,(hl)
 3139 D1:CF48 CB 3F -  -      srl a   ;Must do it this way. A-optimized instr do not affect Z
 3140 D1:CF4A DD 77 00 -      ld  (ix+REGA),a
 3141 D1:CF4D DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3142 D1:CF67 C3 F2 B6 D1     jp  i6502NextLoad
 3143 D1:CF6B -  -  -  -  
 3144 D1:CF6B -  -  -  -  ;-----------------------------------------------------------------------------
 3145 D1:CF6B -  -  -  -  
 3146 D1:CF6B -  -  -  -  ;ANC [ANC (ANC2)] - AND oper + set Carry as if ASL [ROL]
 3147 D1:CF6B -  -  -  -  
 3148 D1:CF6B -  -  -  -  ;immediate	ANC #oper	0B	2	2 
 3149 D1:CF6B -  -  -  -  ;immediate	ANC #oper	2B	2	2
 3150 D1:CF6B -  -  -  -  instr6502_anc_imm:
 3151 D1:CF6B -  -  -  -  instr6502_anc2_imm:
 3152 D1:CF6B ED 33 02 -      ADDCYC(2)
 3153 D1:CF6E DD 7E 00 -      ld  a,(ix+REGA)
 3154 D1:CF71 A6 -  -  -      and a,(hl)
 3155 D1:CF72 DD 77 00 -      ld  (ix+REGA),a
 3156 D1:CF75 CB 07 -  -      rlc a
 3157 D1:CF77 DD 7E 04 -      ld  a,(ix+REGSR)
 3158 D1:CF7A -  -  -  -      ;A small optimiztion here, letting us merge OPRFLG_C and OPRFLG_N
 3159 D1:CF7A CB 87 -  -      res SF_CARRY,a
 3160 D1:CF7C CB BF -  -      res SF_NEG,a
 3161 D1:CF7E 30 04 -  -      jr  nc,+_
 3162 D1:CF80 CB C7 -  -      set SF_CARRY,a
 3163 D1:CF82 CB FF -  -      set SF_NEG,a
 3164 D1:CF84 CB 8F -  -  _:  res SF_ZERO,a
 3165 D1:CF86 20 02 -  -      jr  nz,$+4
 3166 D1:CF88 CB CF -  -      set SF_ZERO,a
 3167 D1:CF8A DD 77 04 -      ld  (ix+REGSR),a
 3168 D1:CF8D C3 F2 B6 D1     jp  i6502NextLoad
 3169 D1:CF91 -  -  -  -  
 3170 D1:CF91 -  -  -  -  ;-----------------------------------------------------------------------------
 3171 D1:CF91 -  -  -  -  
 3172 D1:CF91 -  -  -  -  ;ANE (XAA) - (A OR ??) AND X AND oper -> A
 3173 D1:CF91 -  -  -  -  ;immediate	ANE #oper	8B	2	2  	††
 3174 D1:CF91 -  -  -  -  instr6502_ane_imm:
 3175 D1:CF91 ED 33 02 -      ADDCYC(2)
 3176 D1:CF94 ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3177 D1:CF96 DD B6 00 -      or  a,(ix+REGA)
 3178 D1:CF99 DD A6 01 -      and a,(ix+REGX)
 3179 D1:CF9C A6 -  -  -      and a,(hl)
 3180 D1:CF9D DD 77 00 -      ld  (ix+REGA),a
 3181 D1:CFA0 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3182 D1:CFB4 C3 F2 B6 D1     jp  i6502NextLoad
 3183 D1:CFB8 -  -  -  -  
 3184 D1:CFB8 -  -  -  -  ;-----------------------------------------------------------------------------
 3185 D1:CFB8 -  -  -  -  
 3186 D1:CFB8 -  -  -  -  
 3187 D1:CFB8 -  -  -  -  ;ARR - AND OPER + ROR
 3188 D1:CFB8 -  -  -  -  ;Something hinky is going on with the flags. "This operation involves the adder"
 3189 D1:CFB8 -  -  -  -  ;I need to get a better handle over what that might be.
 3190 D1:CFB8 -  -  -  -  ;CVZN flags affected.
 3191 D1:CFB8 -  -  -  -  ;
 3192 D1:CFB8 -  -  -  -  ;Primary sources reads:
 3193 D1:CFB8 -  -  -  -  ;----------------------
 3194 D1:CFB8 -  -  -  -  ;This operation involves the adder:
 3195 D1:CFB8 -  -  -  -  ;V-flag is set according to (A AND oper) + oper
 3196 D1:CFB8 -  -  -  -  ;The carry is not set, but bit 7 (sign) is exchanged with the carry
 3197 D1:CFB8 -  -  -  -  ;A AND oper, C -> [76543210] -> C
 3198 D1:CFB8 -  -  -  -  ;
 3199 D1:CFB8 -  -  -  -  ;Secondary source reads:
 3200 D1:CFB8 -  -  -  -  ;-----------------------
 3201 D1:CFB8 -  -  -  -  ;Similar to AND #i then ROR A, except sets the flags differently. 
 3202 D1:CFB8 -  -  -  -  ;N and Z are normal, but C is bit 6 and V is bit 6 xor bit 5. 
 3203 D1:CFB8 -  -  -  -  ;A fast way to perform signed division by 4 is: CMP #$80; ARR #$FF; ROR. 
 3204 D1:CFB8 -  -  -  -  ;This can be extended to larger powers of two.
 3205 D1:CFB8 -  -  -  -  
 3206 D1:CFB8 -  -  -  -  ;immediate	ARR #oper	6B	2	2  
 3207 D1:CFB8 -  -  -  -  instr6502_arr_imm:
 3208 D1:CFB8 ED 33 02 -      ADDCYC(2)
 3209 D1:CFBB DD 7E 00 -      ld  a,(ix+REGA)
 3210 D1:CFBE A6 -  -  -      and a,(hl)
 3211 D1:CFBF 47 -  -  -      ld  b,a
 3212 D1:CFC0 DD 7E 04 -      ld  a,(ix+REGSR)
 3213 D1:CFC3 4F -  -  -      ld  c,a
 3214 D1:CFC4 0F -  -  -      rrca    ;extract carry. This carry will go into sign bit of result
 3215 D1:CFC5 CB B9 -  -      res SF_NEG,c
 3216 D1:CFC7 30 02 -  -      jr  nc,$+4
 3217 D1:CFC9 CB F9 -  -      set SF_NEG,c
 3218 D1:CFCB CB 18 -  -      rr b
 3219 D1:CFCD CB 89 -  -      res SF_ZERO,c
 3220 D1:CFCF 20 02 -  -      jr  nz,$+4
 3221 D1:CFD1 CB C9 -  -      set SF_ZERO,c
 3222 D1:CFD3 DD 70 00 -      ld  (ix+REGA),b
 3223 D1:CFD6 78 -  -  -      ld  a,b
 3224 D1:CFD7 E6 40 -  -      and a,%01000000
 3225 D1:CFD9 CB 81 -  -      res SF_CARRY,c
 3226 D1:CFDB 28 02 -  -      jr  z,$+4
 3227 D1:CFDD CB C1 -  -      set SF_CARRY,c
 3228 D1:CFDF 0F -  -  -      rrca
 3229 D1:CFE0 EE 20 -  -      xor a,%00100000
 3230 D1:CFE2 E6 20 -  -      and a,%00100000
 3231 D1:CFE4 CB B1 -  -      res SF_OVER,c
 3232 D1:CFE6 28 02 -  -      jr  z,$+4
 3233 D1:CFE8 CB F1 -  -      set SF_OVER,c
 3234 D1:CFEA DD 71 04 -      ld  (ix+REGSR),c
 3235 D1:CFED -  -  -  -      ;TODO: Figure out a more efficient way to emulate this instruction.
 3236 D1:CFED C3 F2 B6 D1     jp  i6502NextLoad
 3237 D1:CFF1 -  -  -  -  
 3238 D1:CFF1 -  -  -  -  ;-----------------------------------------------------------------------------
 3239 D1:CFF1 -  -  -  -  ;DCP (DCM) - DEC oper + CMP oper
 3240 D1:CFF1 -  -  -  -  ;M-1->M, A-M. Affects CZN
 3241 D1:CFF1 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3242 D1:CFF1 -  -  -  -  
 3243 D1:CFF1 -  -  -  -  ;zeropage	DCP oper	C7	2	5  	
 3244 D1:CFF1 -  -  -  -  inst6502_dcp_zp:
 3245 D1:CFF1 ED 33 05 -      ADDCYC(5)
 3246 D1:CFF4 7E -  -  -      ld  a,(hl)
 3247 D1:CFF5 01 00 38 D0     ld  bc,ZEROPAGE
 3248 D1:CFF9 81 -  -  -      add a,c
 3249 D1:CFFA 4F -  -  -      ld  c,a
 3250 D1:CFFB 0A -  -  -      ld  a,(bc)
 3251 D1:CFFC 3D -  -  -      dec a
 3252 D1:CFFD 02 -  -  -      ld  (bc),a
 3253 D1:CFFE 47 -  -  -      ld  b,a
 3254 D1:CFFF C3 97 B8 D1     jp  subroutine6502_cmp_combined_end
 3255 D1:D003 -  -  -  -  
 3256 D1:D003 -  -  -  -  ;zeropage,X	DCP oper,X	D7	2	6  	
 3257 D1:D003 -  -  -  -  inst6520_dcp_zpx:
 3258 D1:D003 ED 33 06 -      ADDCYC(6)
 3259 D1:D006 7E -  -  -      ld  a,(hl)
 3260 D1:D007 01 00 38 D0     ld  bc,ZEROPAGE
 3261 D1:D00B 81 -  -  -      add a,c
 3262 D1:D00C DD 86 01 -      add a,(ix+REGX)
 3263 D1:D00F 4F -  -  -      ld  c,a
 3264 D1:D010 0A -  -  -      ld  a,(bc)
 3265 D1:D011 3D -  -  -      dec a
 3266 D1:D012 02 -  -  -      ld  (bc),a
 3267 D1:D013 47 -  -  -      ld  b,a
 3268 D1:D014 C3 97 B8 D1     jp  subroutine6502_cmp_combined_end
 3269 D1:D018 -  -  -  -  
 3270 D1:D018 -  -  -  -  ;absolute	DCP oper	CF	3	6  	
 3271 D1:D018 -  -  -  -  inst6502_dcp_abs:
 3272 D1:D018 ED 33 06 -      ADDCYC(6)
 3273 D1:D01B CD A1 B7 D1     call subroutine6502_abs_split_start
 3274 D1:D01F E5 -  -  -      push hl
 3275 D1:D020 50 -  -  -          ld  d,b
 3276 D1:D021 79 -  -  -          ld  a,c
 3277 D1:D022 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3278 D1:D024 ED 4C -  -          mlt bc
 3279 D1:D026 21 00 40 D0         ld  hl,PAGETABLE
 3280 D1:D02A 09 -  -  -          add hl,bc
 3281 D1:D02B ED 27 -  -          ld  hl,(hl)
 3282 D1:D02D 06 00 -  -          ld  b,0
 3283 D1:D02F 4F -  -  -          ld  c,a
 3284 D1:D030 09 -  -  -          add hl,bc   ;full address
 3285 D1:D031 CD 74 AE D1         READ_ACCESS
 3286 D1:D035 3D -  -  -          dec a
 3287 D1:D036 47 -  -  -          ld b,a
 3288 D1:D037 C5 -  -  -          push bc
 3289 D1:D038 CD 17 AF D1             WRITE_ACCESS
 3290 D1:D03C C1 -  -  -          pop bc
 3291 D1:D03D E1 -  -  -      pop hl
 3292 D1:D03E C3 97 B8 D1     jp  subroutine6502_cmp_combined_end
 3293 D1:D042 -  -  -  -  
 3294 D1:D042 -  -  -  -  ;absolut,X	DCP oper,X	DF	3	7  	
 3295 D1:D042 -  -  -  -  inst6502_dcp_absx:
 3296 D1:D042 ED 33 07 -      ADDCYC(7)
 3297 D1:D045 CD FE B7 D1     PUSH_ABSXSPLIT_NODEP
 3298 D1:D049 CD 74 AE D1         READ_ACCESS
 3299 D1:D04D 3D -  -  -          dec a
 3300 D1:D04E 47 -  -  -          ld  b,a
 3301 D1:D04F C5 -  -  -          push bc
 3302 D1:D050 CD 17 AF D1             WRITE_ACCESS
 3303 D1:D054 C1 -  -  -          pop bc
 3304 D1:D055 E1 -  -  -      pop hl
 3305 D1:D056 C3 97 B8 D1     jp  subroutine6502_cmp_combined_end
 3306 D1:D05A -  -  -  -  
 3307 D1:D05A -  -  -  -  ;absolut,Y	DCP oper,Y	DB	3	7  	
 3308 D1:D05A -  -  -  -  inst6502_dcp_absy:
 3309 D1:D05A ED 33 07 -      ADDCYC(7)
 3310 D1:D05D CD F9 B7 D1     PUSH_ABSYSPLIT_NODEP
 3311 D1:D061 CD 74 AE D1         READ_ACCESS
 3312 D1:D065 3D -  -  -          dec a
 3313 D1:D066 47 -  -  -          ld  b,a
 3314 D1:D067 C5 -  -  -          push bc
 3315 D1:D068 CD 17 AF D1             WRITE_ACCESS
 3316 D1:D06C C1 -  -  -          pop bc
 3317 D1:D06D E1 -  -  -      pop hl
 3318 D1:D06E C3 97 B8 D1     jp  subroutine6502_cmp_combined_end
 3319 D1:D072 -  -  -  -  
 3320 D1:D072 -  -  -  -  ;(indirect,X)	DCP (oper,X)	C3	2	8  	
 3321 D1:D072 -  -  -  -  inst6502_dcp_indx:
 3322 D1:D072 ED 33 08 -      ADDCYC(8)
 3323 D1:D075 E5 -  -  -      push hl
 3324 D1:D076 7E -  -  -          ld  a,(hl)
 3325 D1:D077 21 00 38 D0         ld  hl,ZEROPAGE
 3326 D1:D07B 85 -  -  -          add a,L
 3327 D1:D07C DD 86 01 -          add a,(ix+REGX)
 3328 D1:D07F 6F -  -  -          ld  L,a
 3329 D1:D080 7E -  -  -          ld  a,(hl)
 3330 D1:D081 2C -  -  -          inc L
 3331 D1:D082 56 -  -  -          ld  d,(hl)
 3332 D1:D083 42 -  -  -          ld  b,d
 3333 D1:D084 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3334 D1:D086 ED 4C -  -          mlt bc
 3335 D1:D088 21 00 40 D0         ld  hl,PAGETABLE
 3336 D1:D08C 09 -  -  -          add hl,bc
 3337 D1:D08D ED 27 -  -          ld  hl,(hl)
 3338 D1:D08F 06 00 -  -          ld  b,0
 3339 D1:D091 4F -  -  -          ld  c,a
 3340 D1:D092 09 -  -  -          add hl,bc
 3341 D1:D093 CD 74 AE D1         READ_ACCESS
 3342 D1:D097 3D -  -  -          dec a
 3343 D1:D098 47 -  -  -          ld  b,a
 3344 D1:D099 C5 -  -  -          push bc
 3345 D1:D09A CD 17 AF D1             WRITE_ACCESS
 3346 D1:D09E C1 -  -  -          pop bc
 3347 D1:D09F E1 -  -  -      pop hl
 3348 D1:D0A0 C3 97 B8 D1     jp  subroutine6502_cmp_combined_end
 3349 D1:D0A4 -  -  -  -  
 3350 D1:D0A4 -  -  -  -  ;(indirect),Y	DCP (oper),Y	D3	2	8  
 3351 D1:D0A4 -  -  -  -  inst6502_dcp_indy:
 3352 D1:D0A4 ED 33 08 -      ADDCYC(8)
 3353 D1:D0A7 E5 -  -  -      push hl
 3354 D1:D0A8 7E -  -  -          ld  a,(hl)
 3355 D1:D0A9 21 00 38 D0         ld  hl,ZEROPAGE
 3356 D1:D0AD 85 -  -  -          add a,L
 3357 D1:D0AE 6F -  -  -          ld  L,a
 3358 D1:D0AF 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3359 D1:D0B0 2C -  -  -          inc L
 3360 D1:D0B1 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3361 D1:D0B4 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3362 D1:D0B5 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3363 D1:D0B7 24 -  -  -          inc h
 3364 D1:D0B8 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3365 D1:D0B9 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3366 D1:D0BB ED 6C -  -          mlt hl          ;23.
 3367 D1:D0BD 01 00 40 D0         ld  bc,PAGETABLE
 3368 D1:D0C1 09 -  -  -          add hl,bc
 3369 D1:D0C2 ED 27 -  -          ld  hl,(hl)     ;address get.
 3370 D1:D0C4 01 00 00 00         ld  bc,0
 3371 D1:D0C8 4F -  -  -          ld  c,a
 3372 D1:D0C9 09 -  -  -          add hl,bc       ;Full address get.
 3373 D1:D0CA CD 74 AE D1         READ_ACCESS
 3374 D1:D0CE 3D -  -  -          dec a
 3375 D1:D0CF 47 -  -  -          ld  b,a
 3376 D1:D0D0 C5 -  -  -          push bc
 3377 D1:D0D1 CD 17 AF D1             WRITE_ACCESS
 3378 D1:D0D5 C1 -  -  -          pop bc
 3379 D1:D0D6 E1 -  -  -      pop hl
 3380 D1:D0D7 C3 97 B8 D1     jp  subroutine6502_cmp_combined_end
 3381 D1:D0DB -  -  -  -  
 3382 D1:D0DB -  -  -  -  ;-----------------------------------------------------------------------------
 3383 D1:D0DB -  -  -  -  ;ISC (ISB, INS) - INC oper + SBC oper
 3384 D1:D0DB -  -  -  -  ;M+1->M, A-M-not(C)->A, affects VCZN
 3385 D1:D0DB -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3386 D1:D0DB -  -  -  -  
 3387 D1:D0DB -  -  -  -  
 3388 D1:D0DB -  -  -  -  
 3389 D1:D0DB -  -  -  -  ;zeropage	ISC oper	E7	2	5  	
 3390 D1:D0DB -  -  -  -  inst6502_isc_zp:
 3391 D1:D0DB ED 33 05 -      ADDCYC(5)
 3392 D1:D0DE 7E -  -  -      ld  a,(hl)
 3393 D1:D0DF 01 00 38 D0     ld  bc,ZEROPAGE
 3394 D1:D0E3 81 -  -  -      add a,c
 3395 D1:D0E4 4F -  -  -      ld  c,a
 3396 D1:D0E5 0A -  -  -      ld  a,(bc)
 3397 D1:D0E6 3C -  -  -      inc a
 3398 D1:D0E7 02 -  -  -      ld  (bc),a
 3399 D1:D0E8 4F -  -  -      ld  c,a
 3400 D1:D0E9 C3 64 B8 D1     jp  subroutine6502_sbc_combined_end
 3401 D1:D0ED -  -  -  -  
 3402 D1:D0ED -  -  -  -  ;zeropage,X	ISC oper,X	F7	2	6  
 3403 D1:D0ED -  -  -  -  inst6520_isc_zpx:
 3404 D1:D0ED ED 33 06 -      ADDCYC(6)
 3405 D1:D0F0 7E -  -  -      ld  a,(hl)
 3406 D1:D0F1 01 00 38 D0     ld  bc,ZEROPAGE
 3407 D1:D0F5 81 -  -  -      add a,c
 3408 D1:D0F6 DD 86 01 -      add a,(ix+REGX)
 3409 D1:D0F9 4F -  -  -      ld  c,a
 3410 D1:D0FA 0A -  -  -      ld  a,(bc)
 3411 D1:D0FB 3C -  -  -      inc a
 3412 D1:D0FC 02 -  -  -      ld  (bc),a
 3413 D1:D0FD 4F -  -  -      ld  c,a
 3414 D1:D0FE C3 64 B8 D1     jp  subroutine6502_sbc_combined_end
 3415 D1:D102 -  -  -  -  
 3416 D1:D102 -  -  -  -  ;absolute	ISC oper	EF	3	6  	
 3417 D1:D102 -  -  -  -  inst6502_isc_abs:
 3418 D1:D102 ED 33 06 -      ADDCYC(6)
 3419 D1:D105 CD A1 B7 D1     call subroutine6502_abs_split_start
 3420 D1:D109 E5 -  -  -      push hl
 3421 D1:D10A 50 -  -  -          ld  d,b
 3422 D1:D10B 79 -  -  -          ld  a,c
 3423 D1:D10C 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3424 D1:D10E ED 4C -  -          mlt bc
 3425 D1:D110 21 00 40 D0         ld  hl,PAGETABLE
 3426 D1:D114 09 -  -  -          add hl,bc
 3427 D1:D115 ED 27 -  -          ld  hl,(hl)
 3428 D1:D117 06 00 -  -          ld  b,0
 3429 D1:D119 4F -  -  -          ld  c,a
 3430 D1:D11A 09 -  -  -          add hl,bc   ;full address
 3431 D1:D11B CD 74 AE D1         READ_ACCESS
 3432 D1:D11F 3C -  -  -          inc a
 3433 D1:D120 47 -  -  -          ld b,a
 3434 D1:D121 4F -  -  -          ld c,a
 3435 D1:D122 C5 -  -  -          push bc
 3436 D1:D123 CD 17 AF D1             WRITE_ACCESS
 3437 D1:D127 C1 -  -  -          pop bc
 3438 D1:D128 E1 -  -  -      pop hl
 3439 D1:D129 C3 64 B8 D1     jp  subroutine6502_sbc_combined_end
 3440 D1:D12D -  -  -  -  
 3441 D1:D12D -  -  -  -  ;absolut,X	ISC oper,X	FF	3	7  	
 3442 D1:D12D -  -  -  -  inst6502_isc_absx:
 3443 D1:D12D ED 33 07 -      ADDCYC(7)
 3444 D1:D130 CD FE B7 D1     PUSH_ABSXSPLIT_NODEP
 3445 D1:D134 CD 74 AE D1         READ_ACCESS
 3446 D1:D138 3C -  -  -          inc a
 3447 D1:D139 47 -  -  -          ld  b,a
 3448 D1:D13A 4F -  -  -          ld  c,a
 3449 D1:D13B C5 -  -  -          push bc
 3450 D1:D13C CD 17 AF D1             WRITE_ACCESS
 3451 D1:D140 C1 -  -  -          pop bc
 3452 D1:D141 E1 -  -  -      pop hl
 3453 D1:D142 C3 64 B8 D1     jp  subroutine6502_sbc_combined_end
 3454 D1:D146 -  -  -  -  
 3455 D1:D146 -  -  -  -  ;absolut,Y	ISC oper,Y	FB	3	7  	
 3456 D1:D146 -  -  -  -  inst6502_isc_absy:
 3457 D1:D146 ED 33 07 -      ADDCYC(7)
 3458 D1:D149 CD F9 B7 D1     PUSH_ABSYSPLIT_NODEP
 3459 D1:D14D CD 74 AE D1         READ_ACCESS
 3460 D1:D151 3C -  -  -          inc a
 3461 D1:D152 47 -  -  -          ld  b,a
 3462 D1:D153 4F -  -  -          ld  c,a
 3463 D1:D154 C5 -  -  -          push bc
 3464 D1:D155 CD 17 AF D1             WRITE_ACCESS
 3465 D1:D159 C1 -  -  -          pop bc
 3466 D1:D15A E1 -  -  -      pop hl
 3467 D1:D15B C3 64 B8 D1     jp  subroutine6502_sbc_combined_end
 3468 D1:D15F -  -  -  -  
 3469 D1:D15F -  -  -  -  ;(indirect,X)	ISC (oper,X)	E3	2	8  	
 3470 D1:D15F -  -  -  -  inst6502_isc_indx:
 3471 D1:D15F ED 33 08 -      ADDCYC(8)
 3472 D1:D162 E5 -  -  -      push hl
 3473 D1:D163 7E -  -  -          ld  a,(hl)
 3474 D1:D164 21 00 38 D0         ld  hl,ZEROPAGE
 3475 D1:D168 85 -  -  -          add a,L
 3476 D1:D169 DD 86 01 -          add a,(ix+REGX)
 3477 D1:D16C 6F -  -  -          ld  L,a
 3478 D1:D16D 7E -  -  -          ld  a,(hl)
 3479 D1:D16E 2C -  -  -          inc L
 3480 D1:D16F 56 -  -  -          ld  d,(hl)
 3481 D1:D170 42 -  -  -          ld  b,d
 3482 D1:D171 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3483 D1:D173 ED 4C -  -          mlt bc
 3484 D1:D175 21 00 40 D0         ld  hl,PAGETABLE
 3485 D1:D179 09 -  -  -          add hl,bc
 3486 D1:D17A ED 27 -  -          ld  hl,(hl)
 3487 D1:D17C 06 00 -  -          ld  b,0
 3488 D1:D17E 4F -  -  -          ld  c,a
 3489 D1:D17F 09 -  -  -          add hl,bc
 3490 D1:D180 CD 74 AE D1         READ_ACCESS
 3491 D1:D184 3C -  -  -          inc a
 3492 D1:D185 47 -  -  -          ld  b,a
 3493 D1:D186 4F -  -  -          ld  c,a
 3494 D1:D187 C5 -  -  -          push bc
 3495 D1:D188 CD 17 AF D1             WRITE_ACCESS
 3496 D1:D18C C1 -  -  -          pop bc
 3497 D1:D18D E1 -  -  -      pop hl
 3498 D1:D18E C3 64 B8 D1     jp  subroutine6502_sbc_combined_end
 3499 D1:D192 -  -  -  -  
 3500 D1:D192 -  -  -  -  ;(indirect),Y	ISC (oper),Y	F3	2	8  
 3501 D1:D192 -  -  -  -  inst6502_isc_indy:
 3502 D1:D192 ED 33 08 -      ADDCYC(8)
 3503 D1:D195 E5 -  -  -      push hl
 3504 D1:D196 7E -  -  -          ld  a,(hl)
 3505 D1:D197 21 00 38 D0         ld  hl,ZEROPAGE
 3506 D1:D19B 85 -  -  -          add a,L
 3507 D1:D19C 6F -  -  -          ld  L,a
 3508 D1:D19D 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3509 D1:D19E 2C -  -  -          inc L
 3510 D1:D19F DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3511 D1:D1A2 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3512 D1:D1A3 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3513 D1:D1A5 24 -  -  -          inc h
 3514 D1:D1A6 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3515 D1:D1A7 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3516 D1:D1A9 ED 6C -  -          mlt hl          ;23.
 3517 D1:D1AB 01 00 40 D0         ld  bc,PAGETABLE
 3518 D1:D1AF 09 -  -  -          add hl,bc
 3519 D1:D1B0 ED 27 -  -          ld  hl,(hl)     ;address get.
 3520 D1:D1B2 01 00 00 00         ld  bc,0
 3521 D1:D1B6 4F -  -  -          ld  c,a
 3522 D1:D1B7 09 -  -  -          add hl,bc       ;Full address get.
 3523 D1:D1B8 CD 74 AE D1         READ_ACCESS
 3524 D1:D1BC 3C -  -  -          inc a
 3525 D1:D1BD 47 -  -  -          ld  b,a
 3526 D1:D1BE 4F -  -  -          ld  c,a
 3527 D1:D1BF C5 -  -  -          push bc
 3528 D1:D1C0 CD 17 AF D1             WRITE_ACCESS
 3529 D1:D1C4 C1 -  -  -          pop bc
 3530 D1:D1C5 E1 -  -  -      pop hl
 3531 D1:D1C6 C3 64 B8 D1     jp  subroutine6502_sbc_combined_end
 3532 D1:D1CA -  -  -  -  ;-----------------------------------------------------------------------------
 3533 D1:D1CA -  -  -  -  ;LAS (LAR) - LDA/TSX oper
 3534 D1:D1CA -  -  -  -  ;M AND SP -> A, X, SP. Affects ZN
 3535 D1:D1CA -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3536 D1:D1CA -  -  -  -  ;absolut,Y	LAS oper,Y	BB	3	4* 
 3537 D1:D1CA -  -  -  -  inst6502_las_absy:
 3538 D1:D1CA ED 33 04 -      ADDCYC(4)
 3539 D1:D1CD CD BD B7 D1     PUSH_ABSYSPLIT
 3540 D1:D1D1 CD 74 AE D1         READ_ACCESS
 3541 D1:D1D5 E1 -  -  -      pop hl
 3542 D1:D1D6 DD A6 03 -      and a,(ix+REGSP)
 3543 D1:D1D9 DD 77 00 -      ld  (ix+REGA),A
 3544 D1:D1DC DD 77 01 -      ld  (ix+REGX),A
 3545 D1:D1DF DD 77 03 -      ld  (ix+REGSP),A
 3546 D1:D1E2 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3547 D1:D1F6 C3 F2 B6 D1     jp i6502NextLoad
 3548 D1:D1FA -  -  -  -  
 3549 D1:D1FA -  -  -  -  ;-----------------------------------------------------------------------------
 3550 D1:D1FA -  -  -  -  ;LAX - LDA oper + LDX oper
 3551 D1:D1FA -  -  -  -  ;M -> A -> X. Flags affected: ZN
 3552 D1:D1FA -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3553 D1:D1FA -  -  -  -  ;zeropage	LAX oper	A7	2	3  	
 3554 D1:D1FA -  -  -  -  inst6502_lax_zp:
 3555 D1:D1FA ED 33 03 -      ADDCYC(3)
 3556 D1:D1FD 7E -  -  -      ld  a,(hl)
 3557 D1:D1FE 01 00 38 D0     ld  bc,ZEROPAGE
 3558 D1:D202 81 -  -  -      add a,c
 3559 D1:D203 4F -  -  -      ld  c,a
 3560 D1:D204 0A -  -  -      ld  a,(bc)
 3561 D1:D205 DD 77 00 -      ld  (ix+REGA),a
 3562 D1:D208 DD 77 01 -      ld  (ix+REGX),a
 3563 D1:D20B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3564 D1:D21F C3 F2 B6 D1     jp i6502NextLoad
 3565 D1:D223 -  -  -  -  
 3566 D1:D223 -  -  -  -  ;zeropage,Y	LAX oper,Y	B7	2	4  	
 3567 D1:D223 -  -  -  -  inst6502_lax_zpy:
 3568 D1:D223 ED 33 04 -      ADDCYC(4)
 3569 D1:D226 7E -  -  -      ld  a,(hl)
 3570 D1:D227 01 00 38 D0     ld  bc,ZEROPAGE
 3571 D1:D22B 81 -  -  -      add a,c
 3572 D1:D22C DD 86 02 -      add a,(ix+REGY)
 3573 D1:D22F 4F -  -  -      ld  c,a
 3574 D1:D230 0A -  -  -      ld  a,(bc)
 3575 D1:D231 DD 77 00 -      ld  (ix+REGA),a
 3576 D1:D234 DD 77 01 -      ld  (ix+REGX),a
 3577 D1:D237 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3578 D1:D24B C3 F2 B6 D1     jp i6502NextLoad
 3579 D1:D24F -  -  -  -  
 3580 D1:D24F -  -  -  -  ;absolute	LAX oper	AF	3	4  	
 3581 D1:D24F -  -  -  -  inst6502_lax_abs:
 3582 D1:D24F ED 33 04 -      ADDCYC(4)
 3583 D1:D252 CD A1 B7 D1     call subroutine6502_abs_split_start
 3584 D1:D256 E5 -  -  -      push hl
 3585 D1:D257 50 -  -  -          ld  d,b
 3586 D1:D258 79 -  -  -          ld  a,c
 3587 D1:D259 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3588 D1:D25B ED 4C -  -          mlt bc
 3589 D1:D25D 21 00 40 D0         ld  hl,PAGETABLE
 3590 D1:D261 09 -  -  -          add hl,bc
 3591 D1:D262 ED 27 -  -          ld  hl,(hl)
 3592 D1:D264 06 00 -  -          ld  b,0
 3593 D1:D266 4F -  -  -          ld  c,a
 3594 D1:D267 09 -  -  -          add hl,bc   ;full address
 3595 D1:D268 CD 74 AE D1         READ_ACCESS
 3596 D1:D26C DD 77 00 -          ld (ix+REGA),a
 3597 D1:D26F DD 77 01 -          ld (ix+REGX),a
 3598 D1:D272 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3599 D1:D286 E1 -  -  -      pop hl
 3600 D1:D287 C3 F2 B6 D1     jp i6502NextLoad
 3601 D1:D28B -  -  -  -  
 3602 D1:D28B -  -  -  -  ;absolut,Y	LAX oper,Y	BF	3	4* 	
 3603 D1:D28B -  -  -  -  inst6502_lax_absy:
 3604 D1:D28B ED 33 04 -      ADDCYC(4)
 3605 D1:D28E CD BD B7 D1     PUSH_ABSYSPLIT
 3606 D1:D292 CD 74 AE D1         READ_ACCESS
 3607 D1:D296 DD 77 00 -          ld (ix+REGA),a
 3608 D1:D299 DD 77 01 -          ld (ix+REGX),a
 3609 D1:D29C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3610 D1:D2B0 E1 -  -  -      pop hl
 3611 D1:D2B1 C3 F2 B6 D1     jp i6502NextLoad
 3612 D1:D2B5 -  -  -  -  
 3613 D1:D2B5 -  -  -  -  ;(indirect,X)	LAX (oper,X)	A3	2	6  	
 3614 D1:D2B5 -  -  -  -  inst6502_lax_indx:
 3615 D1:D2B5 ED 33 06 -      ADDCYC(6)
 3616 D1:D2B8 E5 -  -  -      push hl
 3617 D1:D2B9 7E -  -  -          ld  a,(hl)
 3618 D1:D2BA 21 00 38 D0         ld  hl,ZEROPAGE
 3619 D1:D2BE 85 -  -  -          add a,L
 3620 D1:D2BF DD 86 01 -          add a,(ix+REGX)
 3621 D1:D2C2 6F -  -  -          ld  L,a
 3622 D1:D2C3 7E -  -  -          ld  a,(hl)
 3623 D1:D2C4 2C -  -  -          inc L
 3624 D1:D2C5 56 -  -  -          ld  d,(hl)
 3625 D1:D2C6 42 -  -  -          ld  b,d
 3626 D1:D2C7 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3627 D1:D2C9 ED 4C -  -          mlt bc
 3628 D1:D2CB 21 00 40 D0         ld  hl,PAGETABLE
 3629 D1:D2CF 09 -  -  -          add hl,bc
 3630 D1:D2D0 ED 27 -  -          ld  hl,(hl)
 3631 D1:D2D2 06 00 -  -          ld  b,0
 3632 D1:D2D4 4F -  -  -          ld  c,a
 3633 D1:D2D5 09 -  -  -          add hl,bc
 3634 D1:D2D6 CD 74 AE D1         READ_ACCESS
 3635 D1:D2DA DD 77 00 -          ld (ix+REGA),a
 3636 D1:D2DD DD 77 01 -          ld (ix+REGX),a
 3637 D1:D2E0 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3638 D1:D2F4 E1 -  -  -      pop hl
 3639 D1:D2F5 C3 F2 B6 D1     jp i6502NextLoad
 3640 D1:D2F9 -  -  -  -  
 3641 D1:D2F9 -  -  -  -  ;(indirect),Y	LAX (oper),Y	B3	2	5* 
 3642 D1:D2F9 -  -  -  -  inst6502_lax_indy:
 3643 D1:D2F9 ED 33 05 -      ADDCYC(5)
 3644 D1:D2FC E5 -  -  -      push hl
 3645 D1:D2FD 7E -  -  -          ld  a,(hl)
 3646 D1:D2FE 21 00 38 D0         ld  hl,ZEROPAGE
 3647 D1:D302 85 -  -  -          add a,L
 3648 D1:D303 6F -  -  -          ld  L,a
 3649 D1:D304 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3650 D1:D305 2C -  -  -          inc L
 3651 D1:D306 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3652 D1:D309 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3653 D1:D30A 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3654 D1:D30C FD 23 -  -          ADDCYC(1)
 3655 D1:D30E 24 -  -  -          inc h
 3656 D1:D30F 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3657 D1:D310 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3658 D1:D312 ED 6C -  -          mlt hl          ;23.
 3659 D1:D314 01 00 40 D0         ld  bc,PAGETABLE
 3660 D1:D318 09 -  -  -          add hl,bc
 3661 D1:D319 ED 27 -  -          ld  hl,(hl)     ;address get.
 3662 D1:D31B 01 00 00 00         ld  bc,0
 3663 D1:D31F 4F -  -  -          ld  c,a
 3664 D1:D320 09 -  -  -          add hl,bc       ;Full address get.
 3665 D1:D321 CD 74 AE D1         READ_ACCESS
 3666 D1:D325 DD 77 00 -          ld  (ix+REGA),a
 3667 D1:D328 DD 77 01 -          ld  (ix+REGX),a
 3668 D1:D32B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3669 D1:D33F E1 -  -  -      pop hl
 3670 D1:D340 C3 F2 B6 D1     jp i6502NextLoad
 3671 D1:D344 -  -  -  -  
 3672 D1:D344 -  -  -  -  ;-----------------------------------------------------------------------------
 3673 D1:D344 -  -  -  -  ;LXA (LAX immediate)
 3674 D1:D344 -  -  -  -  ;Store * AND oper in A and X
 3675 D1:D344 -  -  -  -  ;Highly unstable, involves a 'magic' constant, see ANE
 3676 D1:D344 -  -  -  -  ;(A OR CONST) AND oper -> A -> X
 3677 D1:D344 -  -  -  -  ;immediate	LXA #oper	AB	2	2  	††
 3678 D1:D344 -  -  -  -  inst6502_lxa:
 3679 D1:D344 ED 33 02 -      ADDCYC(2)
 3680 D1:D347 ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3681 D1:D349 DD B6 00 -      or  a,(ix+REGA)
 3682 D1:D34C A6 -  -  -      and a,(hl)
 3683 D1:D34D DD 77 00 -      ld  (ix+REGA),a
 3684 D1:D350 DD 77 01 -      ld  (ix+REGX),a
 3685 D1:D353 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3686 D1:D367 C3 F2 B6 D1     jp  i6502NextLoad
 3687 D1:D36B -  -  -  -  
 3688 D1:D36B -  -  -  -  ;-----------------------------------------------------------------------------
 3689 D1:D36B -  -  -  -  ;RLA - ROL oper + AND oper
 3690 D1:D36B -  -  -  -  ;M = C <- [76543210] <- C, A AND M -> A. flags CZN
 3691 D1:D36B -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3692 D1:D36B -  -  -  -  ;zeropage	RLA oper	27	2	5  	
 3693 D1:D36B -  -  -  -  inst6502_rla_zp:
 3694 D1:D36B ED 33 05 -      ADDCYC(5)
 3695 D1:D36E 7E -  -  -      ld  a,(hl)
 3696 D1:D36F 01 00 38 D0     ld  bc,ZEROPAGE
 3697 D1:D373 81 -  -  -      add a,c
 3698 D1:D374 4F -  -  -      ld  c,a
 3699 D1:D375 DD 7E 04 -      ld  a,(ix+REGSR)
 3700 D1:D378 1F -  -  -      rra
 3701 D1:D379 0A -  -  -      ld  a,(bc)
 3702 D1:D37A 17 -  -  -      rla
 3703 D1:D37B 02 -  -  -      ld  (bc),a
 3704 D1:D37C -  -  -  -      ;Flag breakdown to optimize for split operation
 3705 D1:D37C DD 46 04 -      ld  b,(ix+REGSR)
 3706 D1:D37F CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3707 D1:D385 DD A6 00 -      and a,(ix+REGA)
 3708 D1:D388 DD 77 00 -      ld  (ix+REGA),a
 3709 D1:D38B CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3710 D1:D391 87 -  -  -      add a,a
 3711 D1:D392 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3712 D1:D398 DD 70 04 -      ld  (ix+REGSR),b
 3713 D1:D39B C3 F2 B6 D1     jp i6502NextLoad
 3714 D1:D39F -  -  -  -  
 3715 D1:D39F -  -  -  -  ;zeropage,X	RLA oper,X	37	2	6  	
 3716 D1:D39F -  -  -  -  inst6502_rla_zpx:
 3717 D1:D39F ED 33 06 -      ADDCYC(6)
 3718 D1:D3A2 7E -  -  -      ld  a,(hl)
 3719 D1:D3A3 01 00 38 D0     ld  bc,ZEROPAGE
 3720 D1:D3A7 81 -  -  -      add a,c
 3721 D1:D3A8 DD 86 01 -      add a,(ix+REGX)
 3722 D1:D3AB 4F -  -  -      ld  c,a
 3723 D1:D3AC DD 7E 04 -      ld  a,(ix+REGSR)
 3724 D1:D3AF 1F -  -  -      rra
 3725 D1:D3B0 0A -  -  -      ld  a,(bc)
 3726 D1:D3B1 17 -  -  -      rla
 3727 D1:D3B2 02 -  -  -      ld  (bc),a
 3728 D1:D3B3 -  -  -  -      ;Flag breakdown to optimize for split operation
 3729 D1:D3B3 DD 46 04 -      ld  b,(ix+REGSR)
 3730 D1:D3B6 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3731 D1:D3BC DD A6 00 -      and a,(ix+REGA)
 3732 D1:D3BF DD 77 00 -      ld  (ix+REGA),a
 3733 D1:D3C2 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3734 D1:D3C8 87 -  -  -      add a,a
 3735 D1:D3C9 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3736 D1:D3CF DD 70 04 -      ld  (ix+REGSR),b
 3737 D1:D3D2 C3 F2 B6 D1     jp i6502NextLoad
 3738 D1:D3D6 -  -  -  -  
 3739 D1:D3D6 -  -  -  -  ;absolute	RLA oper	2F	3	6  	
 3740 D1:D3D6 -  -  -  -  inst6502_rla_abs:
 3741 D1:D3D6 ED 33 06 -      ADDCYC(6)
 3742 D1:D3D9 CD A1 B7 D1     call subroutine6502_abs_split_start
 3743 D1:D3DD E5 -  -  -      push hl
 3744 D1:D3DE 50 -  -  -          ld  d,b
 3745 D1:D3DF 79 -  -  -          ld  a,c
 3746 D1:D3E0 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3747 D1:D3E2 ED 4C -  -          mlt bc
 3748 D1:D3E4 21 00 40 D0         ld  hl,PAGETABLE
 3749 D1:D3E8 09 -  -  -          add hl,bc
 3750 D1:D3E9 ED 27 -  -          ld  hl,(hl)
 3751 D1:D3EB 06 00 -  -          ld  b,0
 3752 D1:D3ED 4F -  -  -          ld  c,a
 3753 D1:D3EE 09 -  -  -          add hl,bc   ;full address
 3754 D1:D3EF CD 74 AE D1         READ_ACCESS
 3755 D1:D3F3 DD 46 04 -          ld  b,(ix+REGSR)
 3756 D1:D3F6 CB 18 -  -          rr b
 3757 D1:D3F8 17 -  -  -          rla
 3758 D1:D3F9 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3759 D1:D3FA -  -  -  -          ;Split oper
 3760 D1:D3FA DD 46 04 -          ld  b,(ix+REGSR)
 3761 D1:D3FD CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3762 D1:D403 DD A6 00 -          and a,(ix+REGA)
 3763 D1:D406 DD 77 00 -          ld  (ix+REGA),a
 3764 D1:D409 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3765 D1:D40F 87 -  -  -          add a,a
 3766 D1:D410 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3767 D1:D416 DD 70 04 -          ld  (ix+REGSR),b
 3768 D1:D419 41 -  -  -          ld  b,c
 3769 D1:D41A CD 17 AF D1         WRITE_ACCESS
 3770 D1:D41E E1 -  -  -      pop hl
 3771 D1:D41F C3 F2 B6 D1     jp i6502NextLoad
 3772 D1:D423 -  -  -  -  
 3773 D1:D423 -  -  -  -  ;absolut,X	RLA oper,X	3F	3	7  	
 3774 D1:D423 -  -  -  -  inst6502_rla_absx:
 3775 D1:D423 ED 33 07 -      ADDCYC(7)
 3776 D1:D426 CD FE B7 D1     PUSH_ABSXSPLIT_NODEP
 3777 D1:D42A CD 74 AE D1         READ_ACCESS
 3778 D1:D42E DD 46 04 -          ld  b,(ix+REGSR)
 3779 D1:D431 CB 18 -  -          rr b
 3780 D1:D433 17 -  -  -          rla
 3781 D1:D434 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3782 D1:D435 -  -  -  -          ;Split oper
 3783 D1:D435 DD 46 04 -          ld  b,(ix+REGSR)
 3784 D1:D438 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3785 D1:D43E DD A6 00 -          and a,(ix+REGA)
 3786 D1:D441 DD 77 00 -          ld  (ix+REGA),a
 3787 D1:D444 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3788 D1:D44A 87 -  -  -          add a,a
 3789 D1:D44B CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3790 D1:D451 DD 70 04 -          ld  (ix+REGSR),b
 3791 D1:D454 41 -  -  -          ld  b,c
 3792 D1:D455 CD 17 AF D1         WRITE_ACCESS
 3793 D1:D459 E1 -  -  -      pop hl
 3794 D1:D45A C3 F2 B6 D1     jp i6502NextLoad
 3795 D1:D45E -  -  -  -  
 3796 D1:D45E -  -  -  -  ;absolut,Y	RLA oper,Y	3B	3	7  	
 3797 D1:D45E -  -  -  -  inst6502_rla_absy:
 3798 D1:D45E ED 33 07 -      ADDCYC(7)
 3799 D1:D461 CD F9 B7 D1     PUSH_ABSYSPLIT_NODEP
 3800 D1:D465 CD 74 AE D1         READ_ACCESS
 3801 D1:D469 DD 46 04 -          ld  b,(ix+REGSR)
 3802 D1:D46C CB 18 -  -          rr b
 3803 D1:D46E 17 -  -  -          rla
 3804 D1:D46F 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3805 D1:D470 -  -  -  -          ;Split oper
 3806 D1:D470 DD 46 04 -          ld  b,(ix+REGSR)
 3807 D1:D473 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3808 D1:D479 DD A6 00 -          and a,(ix+REGA)
 3809 D1:D47C DD 77 00 -          ld  (ix+REGA),a
 3810 D1:D47F CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3811 D1:D485 87 -  -  -          add a,a
 3812 D1:D486 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3813 D1:D48C DD 70 04 -          ld  (ix+REGSR),b
 3814 D1:D48F 41 -  -  -          ld  b,c
 3815 D1:D490 CD 17 AF D1         WRITE_ACCESS
 3816 D1:D494 E1 -  -  -      pop hl
 3817 D1:D495 C3 F2 B6 D1     jp i6502NextLoad
 3818 D1:D499 -  -  -  -  
 3819 D1:D499 -  -  -  -  ;(indirect,X)	RLA (oper,X)	23	2	8  	
 3820 D1:D499 -  -  -  -  isnt6502_rla_indx:
 3821 D1:D499 ED 33 08 -      ADDCYC(8)
 3822 D1:D49C E5 -  -  -      push hl
 3823 D1:D49D 7E -  -  -          ld  a,(hl)
 3824 D1:D49E 21 00 38 D0         ld  hl,ZEROPAGE
 3825 D1:D4A2 85 -  -  -          add a,L
 3826 D1:D4A3 DD 86 01 -          add a,(ix+REGX)
 3827 D1:D4A6 6F -  -  -          ld  L,a
 3828 D1:D4A7 7E -  -  -          ld  a,(hl)
 3829 D1:D4A8 2C -  -  -          inc L
 3830 D1:D4A9 56 -  -  -          ld  d,(hl)
 3831 D1:D4AA 42 -  -  -          ld  b,d
 3832 D1:D4AB 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3833 D1:D4AD ED 4C -  -          mlt bc
 3834 D1:D4AF 21 00 40 D0         ld  hl,PAGETABLE
 3835 D1:D4B3 09 -  -  -          add hl,bc
 3836 D1:D4B4 ED 27 -  -          ld  hl,(hl)
 3837 D1:D4B6 06 00 -  -          ld  b,0
 3838 D1:D4B8 4F -  -  -          ld  c,a
 3839 D1:D4B9 09 -  -  -          add hl,bc
 3840 D1:D4BA CD 74 AE D1         READ_ACCESS
 3841 D1:D4BE DD 46 04 -          ld  b,(ix+REGSR)
 3842 D1:D4C1 CB 18 -  -          rr b
 3843 D1:D4C3 17 -  -  -          rla
 3844 D1:D4C4 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3845 D1:D4C5 -  -  -  -          ;Split oper
 3846 D1:D4C5 DD 46 04 -          ld  b,(ix+REGSR)
 3847 D1:D4C8 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3848 D1:D4CE DD A6 00 -          and a,(ix+REGA)
 3849 D1:D4D1 DD 77 00 -          ld  (ix+REGA),a
 3850 D1:D4D4 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3851 D1:D4DA 87 -  -  -          add a,a
 3852 D1:D4DB CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3853 D1:D4E1 DD 70 04 -          ld  (ix+REGSR),b
 3854 D1:D4E4 41 -  -  -          ld  b,c
 3855 D1:D4E5 CD 17 AF D1         WRITE_ACCESS
 3856 D1:D4E9 E1 -  -  -      pop hl
 3857 D1:D4EA C3 F2 B6 D1     jp  i6502NextLoad
 3858 D1:D4EE -  -  -  -  
 3859 D1:D4EE -  -  -  -  ;(indirect),Y	RLA (oper),Y	33	2	8  
 3860 D1:D4EE -  -  -  -  inst6502_rla_indy:
 3861 D1:D4EE ED 33 08 -      ADDCYC(8)
 3862 D1:D4F1 E5 -  -  -      push hl
 3863 D1:D4F2 7E -  -  -          ld  a,(hl)
 3864 D1:D4F3 21 00 38 D0         ld  hl,ZEROPAGE
 3865 D1:D4F7 85 -  -  -          add a,L
 3866 D1:D4F8 6F -  -  -          ld  L,a
 3867 D1:D4F9 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3868 D1:D4FA 2C -  -  -          inc L
 3869 D1:D4FB DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3870 D1:D4FE 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3871 D1:D4FF 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3872 D1:D501 24 -  -  -          inc h
 3873 D1:D502 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3874 D1:D503 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3875 D1:D505 ED 6C -  -          mlt hl          ;23.
 3876 D1:D507 01 00 40 D0         ld  bc,PAGETABLE
 3877 D1:D50B 09 -  -  -          add hl,bc
 3878 D1:D50C ED 27 -  -          ld  hl,(hl)     ;address get.
 3879 D1:D50E 01 00 00 00         ld  bc,0
 3880 D1:D512 4F -  -  -          ld  c,a
 3881 D1:D513 09 -  -  -          add hl,bc       ;Full address get.
 3882 D1:D514 CD 74 AE D1         READ_ACCESS
 3883 D1:D518 DD 46 04 -          ld  b,(ix+REGSR)
 3884 D1:D51B CB 18 -  -          rr b
 3885 D1:D51D 17 -  -  -          rla
 3886 D1:D51E 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3887 D1:D51F -  -  -  -          ;Split oper
 3888 D1:D51F DD 46 04 -          ld  b,(ix+REGSR)
 3889 D1:D522 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3890 D1:D528 DD A6 00 -          and a,(ix+REGA)
 3891 D1:D52B DD 77 00 -          ld  (ix+REGA),a
 3892 D1:D52E CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3893 D1:D534 87 -  -  -          add a,a
 3894 D1:D535 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3895 D1:D53B DD 70 04 -          ld  (ix+REGSR),b
 3896 D1:D53E 41 -  -  -          ld  b,c
 3897 D1:D53F CD 17 AF D1         WRITE_ACCESS
 3898 D1:D543 E1 -  -  -      pop hl
 3899 D1:D544 C3 F2 B6 D1     jp  i6502NextLoad
 3900 D1:D548 -  -  -  -  
 3901 D1:D548 -  -  -  -  ;-----------------------------------------------------------------------------
 3902 D1:D548 -  -  -  -  ;RRA
 3903 D1:D548 -  -  -  -  ;ROR oper + ADC oper
 3904 D1:D548 -  -  -  -  ;M = C -> [76543210] -> C, A + M + C -> A, C. Affects VCZN
 3905 D1:D548 -  -  -  -  
 3906 D1:D548 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3907 D1:D548 -  -  -  -  ;zeropage	RRA oper	67	2	5  	
 3908 D1:D548 -  -  -  -  inst6502_rra_zp:
 3909 D1:D548 ED 33 05 -      ADDCYC(5)
 3910 D1:D54B 7E -  -  -      ld  a,(hl)
 3911 D1:D54C 01 00 38 D0     ld  bc,ZEROPAGE
 3912 D1:D550 81 -  -  -      add a,c
 3913 D1:D551 4F -  -  -      ld  c,a
 3914 D1:D552 DD 7E 04 -      ld  a,(ix+REGSR)
 3915 D1:D555 1F -  -  -      rra
 3916 D1:D556 0A -  -  -      ld  a,(bc)
 3917 D1:D557 1F -  -  -      rra
 3918 D1:D558 02 -  -  -      ld  (bc),a
 3919 D1:D559 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 3920 D1:D55D 30 04 -  -      jr nc,$+6
 3921 D1:D55F DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 3922 D1:D563 4F -  -  -      ld  c,a
 3923 D1:D564 C3 33 B8 D1     jp  subroutine6502_adc_combined_end
 3924 D1:D568 -  -  -  -  
 3925 D1:D568 -  -  -  -  ;zeropage,X	RRA oper,X	77	2	6  	
 3926 D1:D568 -  -  -  -  inst6502_rra_zpx:
 3927 D1:D568 ED 33 06 -      ADDCYC(6)
 3928 D1:D56B 7E -  -  -      ld  a,(hl)
 3929 D1:D56C 01 00 38 D0     ld  bc,ZEROPAGE
 3930 D1:D570 81 -  -  -      add a,c
 3931 D1:D571 DD 86 01 -      add a,(ix+REGX)
 3932 D1:D574 4F -  -  -      ld  c,a
 3933 D1:D575 DD 7E 04 -      ld  a,(ix+REGSR)
 3934 D1:D578 1F -  -  -      rra
 3935 D1:D579 0A -  -  -      ld  a,(bc)
 3936 D1:D57A 1F -  -  -      rra
 3937 D1:D57B 02 -  -  -      ld  (bc),a
 3938 D1:D57C DD CB 04 86     res SF_CARRY,(ix+REGSR)
 3939 D1:D580 30 04 -  -      jr nc,$+6
 3940 D1:D582 DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 3941 D1:D586 4F -  -  -      ld  c,a
 3942 D1:D587 C3 33 B8 D1     jp  subroutine6502_adc_combined_end
 3943 D1:D58B -  -  -  -  
 3944 D1:D58B -  -  -  -  ;absolute	RRA oper	6F	3	6  	
 3945 D1:D58B -  -  -  -  inst6502_rra_abs:
 3946 D1:D58B ED 33 06 -      ADDCYC(6)
 3947 D1:D58E CD A1 B7 D1     call subroutine6502_abs_split_start
 3948 D1:D592 E5 -  -  -      push hl
 3949 D1:D593 50 -  -  -          ld  d,b
 3950 D1:D594 79 -  -  -          ld  a,c
 3951 D1:D595 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3952 D1:D597 ED 4C -  -          mlt bc
 3953 D1:D599 21 00 40 D0         ld  hl,PAGETABLE
 3954 D1:D59D 09 -  -  -          add hl,bc
 3955 D1:D59E ED 27 -  -          ld  hl,(hl)
 3956 D1:D5A0 06 00 -  -          ld  b,0
 3957 D1:D5A2 4F -  -  -          ld  c,a
 3958 D1:D5A3 09 -  -  -          add hl,bc   ;full address
 3959 D1:D5A4 CD 74 AE D1         READ_ACCESS
 3960 D1:D5A8 DD 46 04 -          ld  b,(ix+REGSR)
 3961 D1:D5AB CB 18 -  -          rr b
 3962 D1:D5AD 1F -  -  -          rra
 3963 D1:D5AE DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3964 D1:D5B2 30 04 -  -          jr nc,$+6
 3965 D1:D5B4 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3966 D1:D5B8 47 -  -  -          ld  b,a
 3967 D1:D5B9 C5 -  -  -          push bc
 3968 D1:D5BA CD 17 AF D1             WRITE_ACCESS
 3969 D1:D5BE C1 -  -  -          pop bc
 3970 D1:D5BF 48 -  -  -          ld c,b
 3971 D1:D5C0 E1 -  -  -      pop hl
 3972 D1:D5C1 C3 33 B8 D1     jp  subroutine6502_adc_combined_end
 3973 D1:D5C5 -  -  -  -  
 3974 D1:D5C5 -  -  -  -  ;absolut,X	RRA oper,X	7F	3	7  	
 3975 D1:D5C5 -  -  -  -  inst6502_rra_absx:
 3976 D1:D5C5 ED 33 07 -      ADDCYC(7)
 3977 D1:D5C8 CD FE B7 D1     PUSH_ABSXSPLIT_NODEP
 3978 D1:D5CC CD 74 AE D1         READ_ACCESS
 3979 D1:D5D0 DD 46 04 -          ld  b,(ix+REGSR)
 3980 D1:D5D3 CB 18 -  -          rr b
 3981 D1:D5D5 1F -  -  -          rra
 3982 D1:D5D6 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3983 D1:D5DA 30 04 -  -          jr nc,$+6
 3984 D1:D5DC DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3985 D1:D5E0 47 -  -  -          ld  b,a
 3986 D1:D5E1 C5 -  -  -          push bc
 3987 D1:D5E2 CD 17 AF D1             WRITE_ACCESS
 3988 D1:D5E6 C1 -  -  -          pop bc
 3989 D1:D5E7 48 -  -  -          ld c,b
 3990 D1:D5E8 E1 -  -  -      pop hl
 3991 D1:D5E9 C3 33 B8 D1     jp  subroutine6502_adc_combined_end
 3992 D1:D5ED -  -  -  -  
 3993 D1:D5ED -  -  -  -  ;absolut,Y	RRA oper,Y	7B	3	7  	
 3994 D1:D5ED -  -  -  -  inst6502_rra_absy:
 3995 D1:D5ED ED 33 07 -      ADDCYC(7)
 3996 D1:D5F0 CD F9 B7 D1     PUSH_ABSYSPLIT_NODEP
 3997 D1:D5F4 CD 74 AE D1         READ_ACCESS
 3998 D1:D5F8 DD 46 04 -          ld  b,(ix+REGSR)
 3999 D1:D5FB CB 18 -  -          rr b
 4000 D1:D5FD 1F -  -  -          rra
 4001 D1:D5FE DD CB 04 86         res SF_CARRY,(ix+REGSR)
 4002 D1:D602 30 04 -  -          jr nc,$+6
 4003 D1:D604 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 4004 D1:D608 47 -  -  -          ld  b,a
 4005 D1:D609 C5 -  -  -          push bc
 4006 D1:D60A CD 17 AF D1             WRITE_ACCESS
 4007 D1:D60E C1 -  -  -          pop bc
 4008 D1:D60F 48 -  -  -          ld c,b
 4009 D1:D610 E1 -  -  -      pop hl
 4010 D1:D611 C3 33 B8 D1     jp  subroutine6502_adc_combined_end
 4011 D1:D615 -  -  -  -  
 4012 D1:D615 -  -  -  -  ;(indirect,X)	RRA (oper,X)	63	2	8  	
 4013 D1:D615 -  -  -  -  isnt6502_rra_indx:
 4014 D1:D615 ED 33 08 -      ADDCYC(8)
 4015 D1:D618 E5 -  -  -      push hl
 4016 D1:D619 7E -  -  -          ld  a,(hl)
 4017 D1:D61A 21 00 38 D0         ld  hl,ZEROPAGE
 4018 D1:D61E 85 -  -  -          add a,L
 4019 D1:D61F DD 86 01 -          add a,(ix+REGX)
 4020 D1:D622 6F -  -  -          ld  L,a
 4021 D1:D623 7E -  -  -          ld  a,(hl)
 4022 D1:D624 2C -  -  -          inc L
 4023 D1:D625 56 -  -  -          ld  d,(hl)
 4024 D1:D626 42 -  -  -          ld  b,d
 4025 D1:D627 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4026 D1:D629 ED 4C -  -          mlt bc
 4027 D1:D62B 21 00 40 D0         ld  hl,PAGETABLE
 4028 D1:D62F 09 -  -  -          add hl,bc
 4029 D1:D630 ED 27 -  -          ld  hl,(hl)
 4030 D1:D632 06 00 -  -          ld  b,0
 4031 D1:D634 4F -  -  -          ld  c,a
 4032 D1:D635 09 -  -  -          add hl,bc
 4033 D1:D636 CD 74 AE D1         READ_ACCESS
 4034 D1:D63A DD 46 04 -          ld  b,(ix+REGSR)
 4035 D1:D63D CB 18 -  -          rr b
 4036 D1:D63F 1F -  -  -          rra
 4037 D1:D640 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 4038 D1:D644 30 04 -  -          jr nc,$+6
 4039 D1:D646 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 4040 D1:D64A 47 -  -  -          ld  b,a
 4041 D1:D64B C5 -  -  -          push bc
 4042 D1:D64C CD 17 AF D1             WRITE_ACCESS
 4043 D1:D650 C1 -  -  -          pop bc
 4044 D1:D651 48 -  -  -          ld c,b
 4045 D1:D652 E1 -  -  -      pop hl
 4046 D1:D653 C3 33 B8 D1     jp  subroutine6502_adc_combined_end
 4047 D1:D657 -  -  -  -  
 4048 D1:D657 -  -  -  -  ;(indirect),Y	RRA (oper),Y	73	2	8  
 4049 D1:D657 -  -  -  -  inst6502_rra_indy:
 4050 D1:D657 ED 33 08 -      ADDCYC(8)
 4051 D1:D65A E5 -  -  -      push hl
 4052 D1:D65B 7E -  -  -          ld  a,(hl)
 4053 D1:D65C 21 00 38 D0         ld  hl,ZEROPAGE
 4054 D1:D660 85 -  -  -          add a,L
 4055 D1:D661 6F -  -  -          ld  L,a
 4056 D1:D662 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4057 D1:D663 2C -  -  -          inc L
 4058 D1:D664 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4059 D1:D667 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4060 D1:D668 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4061 D1:D66A 24 -  -  -          inc h
 4062 D1:D66B 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4063 D1:D66C 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4064 D1:D66E ED 6C -  -          mlt hl          ;23.
 4065 D1:D670 01 00 40 D0         ld  bc,PAGETABLE
 4066 D1:D674 09 -  -  -          add hl,bc
 4067 D1:D675 ED 27 -  -          ld  hl,(hl)     ;address get.
 4068 D1:D677 01 00 00 00         ld  bc,0
 4069 D1:D67B 4F -  -  -          ld  c,a
 4070 D1:D67C 09 -  -  -          add hl,bc       ;Full address get.
 4071 D1:D67D CD 74 AE D1         READ_ACCESS
 4072 D1:D681 DD 46 04 -          ld  b,(ix+REGSR)
 4073 D1:D684 CB 18 -  -          rr b
 4074 D1:D686 1F -  -  -          rra
 4075 D1:D687 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 4076 D1:D68B 30 04 -  -          jr nc,$+6
 4077 D1:D68D DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 4078 D1:D691 47 -  -  -          ld  b,a
 4079 D1:D692 C5 -  -  -          push bc
 4080 D1:D693 CD 17 AF D1             WRITE_ACCESS
 4081 D1:D697 C1 -  -  -          pop bc
 4082 D1:D698 48 -  -  -          ld c,b
 4083 D1:D699 E1 -  -  -      pop hl
 4084 D1:D69A C3 33 B8 D1     jp  subroutine6502_adc_combined_end
 4085 D1:D69E -  -  -  -  
 4086 D1:D69E -  -  -  -  ;-----------------------------------------------------------------------------
 4087 D1:D69E -  -  -  -  ;SAX (AXS, AAX) - A AND X -> M
 4088 D1:D69E -  -  -  -  ;A and X are put on the bus at the same time (resulting effectively in an 
 4089 D1:D69E -  -  -  -  ;AND operation) and stored in M. Flags not affected.
 4090 D1:D69E -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4091 D1:D69E -  -  -  -  ;zeropage	SAX oper	87	2	3  	
 4092 D1:D69E -  -  -  -  inst6502_sax_zp:
 4093 D1:D69E ED 33 03 -      ADDCYC(3)
 4094 D1:D6A1 7E -  -  -      ld  a,(hl)
 4095 D1:D6A2 01 00 38 D0     ld  bc,ZEROPAGE
 4096 D1:D6A6 81 -  -  -      add a,c
 4097 D1:D6A7 4F -  -  -      ld  c,a
 4098 D1:D6A8 DD 7E 00 -      ld  a,(ix+REGA)
 4099 D1:D6AB DD A6 01 -      and a,(ix+REGX)
 4100 D1:D6AE 02 -  -  -      ld  (bc),a
 4101 D1:D6AF C3 F2 B6 D1     jp i6502NextLoad
 4102 D1:D6B3 -  -  -  -  
 4103 D1:D6B3 -  -  -  -  
 4104 D1:D6B3 -  -  -  -  ;zeropage,Y	SAX oper,Y	97	2	4  	
 4105 D1:D6B3 -  -  -  -  inst6502_sax_zpy:
 4106 D1:D6B3 ED 33 04 -      ADDCYC(4)
 4107 D1:D6B6 7E -  -  -      ld  a,(hl)
 4108 D1:D6B7 01 00 38 D0     ld  bc,ZEROPAGE
 4109 D1:D6BB 81 -  -  -      add a,c
 4110 D1:D6BC DD 86 02 -      add a,(ix+REGY)
 4111 D1:D6BF 4F -  -  -      ld  c,a
 4112 D1:D6C0 DD 7E 00 -      ld  a,(ix+REGA)
 4113 D1:D6C3 DD A6 01 -      and a,(ix+REGX)
 4114 D1:D6C6 02 -  -  -      ld  (bc),a
 4115 D1:D6C7 C3 F2 B6 D1     jp i6502NextLoad
 4116 D1:D6CB -  -  -  -  
 4117 D1:D6CB -  -  -  -  
 4118 D1:D6CB -  -  -  -  ;absolute	SAX oper	8F	3	4  	
 4119 D1:D6CB -  -  -  -  inst6502_sax_abs:
 4120 D1:D6CB ED 33 04 -      ADDCYC(4)
 4121 D1:D6CE CD A1 B7 D1     call subroutine6502_abs_split_start
 4122 D1:D6D2 E5 -  -  -      push hl
 4123 D1:D6D3 50 -  -  -          ld  d,b
 4124 D1:D6D4 79 -  -  -          ld  a,c
 4125 D1:D6D5 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4126 D1:D6D7 ED 4C -  -          mlt bc
 4127 D1:D6D9 21 00 40 D0         ld  hl,PAGETABLE
 4128 D1:D6DD 09 -  -  -          add hl,bc
 4129 D1:D6DE ED 27 -  -          ld  hl,(hl)
 4130 D1:D6E0 06 00 -  -          ld  b,0
 4131 D1:D6E2 4F -  -  -          ld  c,a
 4132 D1:D6E3 09 -  -  -          add hl,bc   ;full address
 4133 D1:D6E4 DD 7E 00 -          ld  a,(ix+REGA)
 4134 D1:D6E7 DD A6 01 -          and a,(ix+REGX)
 4135 D1:D6EA 47 -  -  -          ld  b,a
 4136 D1:D6EB CD 17 AF D1         WRITE_ACCESS
 4137 D1:D6EF E1 -  -  -      pop hl
 4138 D1:D6F0 C3 F2 B6 D1     jp i6502NextLoad
 4139 D1:D6F4 -  -  -  -  
 4140 D1:D6F4 -  -  -  -  ;(indirect,X)	SAX (oper,X)	83	2	6  
 4141 D1:D6F4 -  -  -  -  inst6502_sax_indx:
 4142 D1:D6F4 ED 33 06 -      ADDCYC(6)
 4143 D1:D6F7 E5 -  -  -      push hl
 4144 D1:D6F8 7E -  -  -          ld  a,(hl)
 4145 D1:D6F9 21 00 38 D0         ld  hl,ZEROPAGE
 4146 D1:D6FD 85 -  -  -          add a,L
 4147 D1:D6FE DD 86 01 -          add a,(ix+REGX)
 4148 D1:D701 6F -  -  -          ld  L,a
 4149 D1:D702 7E -  -  -          ld  a,(hl)
 4150 D1:D703 2C -  -  -          inc L
 4151 D1:D704 56 -  -  -          ld  d,(hl)
 4152 D1:D705 42 -  -  -          ld  b,d
 4153 D1:D706 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4154 D1:D708 ED 4C -  -          mlt bc
 4155 D1:D70A 21 00 40 D0         ld  hl,PAGETABLE
 4156 D1:D70E 09 -  -  -          add hl,bc
 4157 D1:D70F ED 27 -  -          ld  hl,(hl)
 4158 D1:D711 06 00 -  -          ld  b,0
 4159 D1:D713 4F -  -  -          ld  c,a
 4160 D1:D714 09 -  -  -          add hl,bc
 4161 D1:D715 DD 7E 00 -          ld  a,(ix+REGA)
 4162 D1:D718 DD A6 01 -          and a,(ix+REGX)
 4163 D1:D71B 47 -  -  -          ld  b,a
 4164 D1:D71C CD 17 AF D1         WRITE_ACCESS
 4165 D1:D720 E1 -  -  -      pop hl
 4166 D1:D721 C3 F2 B6 D1     jp i6502NextLoad
 4167 D1:D725 -  -  -  -  
 4168 D1:D725 -  -  -  -  ;-----------------------------------------------------------------------------
 4169 D1:D725 -  -  -  -  ;SBX (AXS, SAX) - CMP and DEX at once, sets flags like CMP
 4170 D1:D725 -  -  -  -  ;(A AND X) - oper -> X.  Flags affected: CZN
 4171 D1:D725 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4172 D1:D725 -  -  -  -  ;immediate	SBX #oper	CB	2	2  
 4173 D1:D725 -  -  -  -  inst6502_sbx_imm:
 4174 D1:D725 DD 7E 00 -      ld  a,(ix+REGA)
 4175 D1:D728 DD A6 01 -      and a,(ix+REGX)
 4176 D1:D72B 96 -  -  -      sub a,(hl)
 4177 D1:D72C DD 77 01 -      ld  (ix+REGX),a
 4178 D1:D72F 3F -  -  -      ccf
 4179 D1:D730 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 4180 D1:D74A C3 F2 B6 D1     jp  i6502NextLoad
 4181 D1:D74E -  -  -  -  
 4182 D1:D74E -  -  -  -  ;-----------------------------------------------------------------------------
 4183 D1:D74E -  -  -  -  ;SHA (AHX, AXA) - Stores A AND X AND (high-byte of addr. + 1) at addr.
 4184 D1:D74E -  -  -  -  ;unstable: sometimes 'AND (H+1)' is dropped, 
 4185 D1:D74E -  -  -  -  ;page boundary crossings may not work 
 4186 D1:D74E -  -  -  -  ;(with the high-byte of the value used as the high-byte of the address)
 4187 D1:D74E -  -  -  -  ;A AND X AND (H+1) -> M
 4188 D1:D74E -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4189 D1:D74E -  -  -  -  ;
 4190 D1:D74E -  -  -  -  ;NOTE: NOT GOING TO IMPLEMENT THESE. THEY'LL ADVANCE THE 6502 PC IN THE CORRECT
 4191 D1:D74E -  -  -  -  ;MANNER BUT NOTHING MORE. THE CPU WILL HALT WHEN ENCOUNTERING ONE OF THESE.
 4192 D1:D74E -  -  -  -  ;
 4193 D1:D74E -  -  -  -  ;absolut,Y	SHA oper,Y	9F	3	5  	†
 4194 D1:D74E -  -  -  -  inst6502_sha_absy:
 4195 D1:D74E ED 33 05 -      ADDCYC(5)
 4196 D1:D751 CD BD B7 D1     PUSH_ABSYSPLIT
 4197 D1:D755 18 FE -  -          jr $
 4198 D1:D757 E1 -  -  -      pop hl
 4199 D1:D758 C3 F2 B6 D1     jp i6502NextLoad
 4200 D1:D75C -  -  -  -  
 4201 D1:D75C -  -  -  -  ;(indirect),Y	SHA (oper),Y	93	2	6  	†
 4202 D1:D75C -  -  -  -  inst6502_sha_indy:
 4203 D1:D75C ED 33 06 -      ADDCYC(6)
 4204 D1:D75F E5 -  -  -      push hl
 4205 D1:D760 7E -  -  -          ld  a,(hl)
 4206 D1:D761 21 00 38 D0         ld  hl,ZEROPAGE
 4207 D1:D765 85 -  -  -          add a,L
 4208 D1:D766 6F -  -  -          ld  L,a
 4209 D1:D767 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4210 D1:D768 2C -  -  -          inc L
 4211 D1:D769 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4212 D1:D76C 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4213 D1:D76D 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4214 D1:D76F 24 -  -  -          inc h
 4215 D1:D770 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4216 D1:D771 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4217 D1:D773 ED 6C -  -          mlt hl          ;23.
 4218 D1:D775 01 00 40 D0         ld  bc,PAGETABLE
 4219 D1:D779 09 -  -  -          add hl,bc
 4220 D1:D77A ED 27 -  -          ld  hl,(hl)     ;address get.
 4221 D1:D77C 01 00 00 00         ld  bc,0
 4222 D1:D780 4F -  -  -          ld  c,a
 4223 D1:D781 09 -  -  -          add hl,bc       ;Full address get.
 4224 D1:D782 CD 74 AE D1         READ_ACCESS
 4225 D1:D786 18 FE -  -          jr $
 4226 D1:D788 E1 -  -  -      pop hl
 4227 D1:D789 C3 F2 B6 D1     jp i6502NextLoad
 4228 D1:D78D -  -  -  -  
 4229 D1:D78D -  -  -  -  ;-----------------------------------------------------------------------------
 4230 D1:D78D -  -  -  -  ;SHX (A11, SXA, XAS)
 4231 D1:D78D -  -  -  -  ;SHY (A11, SYA, SAY)
 4232 D1:D78D -  -  -  -  ;TAS (XAS, SHS)
 4233 D1:D78D -  -  -  -  ;Not going to implement these, but they'll still get the program
 4234 D1:D78D -  -  -  -  ;counter to make the correct noises. Right before locking up the core.
 4235 D1:D78D -  -  -  -  ;All of these instructions are marked as "unstable" in that they'll sometimes
 4236 D1:D78D -  -  -  -  ;drop the high byte, and page crossings sometimes won't work.
 4237 D1:D78D -  -  -  -  
 4238 D1:D78D -  -  -  -  ;absolut,Y	SHX oper,Y	9E	3	5  	†
 4239 D1:D78D -  -  -  -  inst6502_shx_absy:
 4240 D1:D78D ED 33 05 -      ADDCYC(5)
 4241 D1:D790 CD F9 B7 D1     PUSH_ABSYSPLIT_NODEP
 4242 D1:D794 18 FE -  -          jr $
 4243 D1:D796 E1 -  -  -      pop hl
 4244 D1:D797 C3 F2 B6 D1     jp i6502NextLoad
 4245 D1:D79B -  -  -  -  
 4246 D1:D79B -  -  -  -  ;absolut,X	SHY oper,X	9C	3	5  	†
 4247 D1:D79B -  -  -  -  inst6502_shy_absx:
 4248 D1:D79B ED 33 05 -      ADDCYC(5)
 4249 D1:D79E CD FE B7 D1     PUSH_ABSXSPLIT_NODEP
 4250 D1:D7A2 18 FE -  -          jr $
 4251 D1:D7A4 E1 -  -  -      pop hl
 4252 D1:D7A5 C3 F2 B6 D1     jp i6502NextLoad
 4253 D1:D7A9 -  -  -  -  
 4254 D1:D7A9 -  -  -  -  ;absolut,Y	TAS oper,Y	9B	3	5  	†
 4255 D1:D7A9 -  -  -  -  inst6502_tas_absy:
 4256 D1:D7A9 ED 33 05 -      ADDCYC(5)
 4257 D1:D7AC CD F9 B7 D1     PUSH_ABSYSPLIT_NODEP
 4258 D1:D7B0 18 FE -  -          jr $
 4259 D1:D7B2 E1 -  -  -      pop hl
 4260 D1:D7B3 C3 F2 B6 D1     jp i6502NextLoad
 4261 D1:D7B7 -  -  -  -  
 4262 D1:D7B7 -  -  -  -  ;-----------------------------------------------------------------------------
 4263 D1:D7B7 -  -  -  -  ;SLO (ASO) - ASL oper + ORA oper
 4264 D1:D7B7 -  -  -  -  ;M = C <- [76543210] <- 0, A OR M -> A. Affects: CZN
 4265 D1:D7B7 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4266 D1:D7B7 -  -  -  -  
 4267 D1:D7B7 -  -  -  -  ;zeropage	SLO oper	07	2	5  	
 4268 D1:D7B7 -  -  -  -  inst6502_slo_zp:
 4269 D1:D7B7 ED 33 05 -      ADDCYC(5)
 4270 D1:D7BA 7E -  -  -      ld  a,(hl)
 4271 D1:D7BB 01 00 38 D0     ld  bc,ZEROPAGE
 4272 D1:D7BF 81 -  -  -      add a,c
 4273 D1:D7C0 4F -  -  -      ld  c,a
 4274 D1:D7C1 0A -  -  -      ld  a,(bc)
 4275 D1:D7C2 CB 27 -  -      sla a
 4276 D1:D7C4 02 -  -  -      ld  (bc),a
 4277 D1:D7C5 -  -  -  -      ;Flag breakdown to optimize for split operation
 4278 D1:D7C5 DD 46 04 -      ld  b,(ix+REGSR)
 4279 D1:D7C8 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4280 D1:D7CE DD B6 00 -      or  a,(ix+REGA)
 4281 D1:D7D1 DD 77 00 -      ld  (ix+REGA),a
 4282 D1:D7D4 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4283 D1:D7DA 87 -  -  -      add a,a
 4284 D1:D7DB CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4285 D1:D7E1 DD 70 04 -      ld  (ix+REGSR),b
 4286 D1:D7E4 C3 F2 B6 D1     jp i6502NextLoad
 4287 D1:D7E8 -  -  -  -  
 4288 D1:D7E8 -  -  -  -  ;zeropage,X	SLO oper,X	17	2	6  	
 4289 D1:D7E8 -  -  -  -  inst6502_slo_zpx:
 4290 D1:D7E8 ED 33 06 -      ADDCYC(6)
 4291 D1:D7EB 7E -  -  -      ld  a,(hl)
 4292 D1:D7EC 01 00 38 D0     ld  bc,ZEROPAGE
 4293 D1:D7F0 81 -  -  -      add a,c
 4294 D1:D7F1 DD 86 01 -      add a,(ix+REGX)
 4295 D1:D7F4 4F -  -  -      ld  c,a
 4296 D1:D7F5 0A -  -  -      ld  a,(bc)
 4297 D1:D7F6 CB 27 -  -      sla a
 4298 D1:D7F8 02 -  -  -      ld  (bc),a
 4299 D1:D7F9 -  -  -  -      ;Flag breakdown to optimize for split operation
 4300 D1:D7F9 DD 46 04 -      ld  b,(ix+REGSR)
 4301 D1:D7FC CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4302 D1:D802 DD B6 00 -      or  a,(ix+REGA)
 4303 D1:D805 DD 77 00 -      ld  (ix+REGA),a
 4304 D1:D808 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4305 D1:D80E 87 -  -  -      add a,a
 4306 D1:D80F CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4307 D1:D815 DD 70 04 -      ld  (ix+REGSR),b
 4308 D1:D818 C3 F2 B6 D1     jp i6502NextLoad
 4309 D1:D81C -  -  -  -  
 4310 D1:D81C -  -  -  -  ;absolute	SLO oper	0F	3	6  	
 4311 D1:D81C -  -  -  -  inst6502_slo_abs:
 4312 D1:D81C ED 33 06 -      ADDCYC(6)
 4313 D1:D81F CD A1 B7 D1     call subroutine6502_abs_split_start
 4314 D1:D823 E5 -  -  -      push hl
 4315 D1:D824 50 -  -  -          ld  d,b
 4316 D1:D825 79 -  -  -          ld  a,c
 4317 D1:D826 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4318 D1:D828 ED 4C -  -          mlt bc
 4319 D1:D82A 21 00 40 D0         ld  hl,PAGETABLE
 4320 D1:D82E 09 -  -  -          add hl,bc
 4321 D1:D82F ED 27 -  -          ld  hl,(hl)
 4322 D1:D831 06 00 -  -          ld  b,0
 4323 D1:D833 4F -  -  -          ld  c,a
 4324 D1:D834 09 -  -  -          add hl,bc   ;full address
 4325 D1:D835 CD 74 AE D1         READ_ACCESS
 4326 D1:D839 CB 27 -  -          sla a
 4327 D1:D83B 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4328 D1:D83C -  -  -  -          ;Split oper
 4329 D1:D83C DD 46 04 -          ld  b,(ix+REGSR)
 4330 D1:D83F CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4331 D1:D845 DD B6 00 -          or  a,(ix+REGA)
 4332 D1:D848 DD 77 00 -          ld  (ix+REGA),a
 4333 D1:D84B CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4334 D1:D851 87 -  -  -          add a,a
 4335 D1:D852 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4336 D1:D858 DD 70 04 -          ld  (ix+REGSR),b
 4337 D1:D85B 41 -  -  -          ld  b,c
 4338 D1:D85C CD 17 AF D1         WRITE_ACCESS
 4339 D1:D860 E1 -  -  -      pop hl
 4340 D1:D861 C3 F2 B6 D1     jp i6502NextLoad
 4341 D1:D865 -  -  -  -  
 4342 D1:D865 -  -  -  -  ;absolut,X	SLO oper,X	1F	3	7  	
 4343 D1:D865 -  -  -  -  inst6502_slo_absx:
 4344 D1:D865 ED 33 07 -      ADDCYC(7)
 4345 D1:D868 CD FE B7 D1     PUSH_ABSXSPLIT_NODEP
 4346 D1:D86C CD 74 AE D1         READ_ACCESS
 4347 D1:D870 CB 27 -  -          sla a
 4348 D1:D872 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4349 D1:D873 -  -  -  -          ;Split oper
 4350 D1:D873 DD 46 04 -          ld  b,(ix+REGSR)
 4351 D1:D876 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4352 D1:D87C DD B6 00 -          or  a,(ix+REGA)
 4353 D1:D87F DD 77 00 -          ld  (ix+REGA),a
 4354 D1:D882 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4355 D1:D888 87 -  -  -          add a,a
 4356 D1:D889 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4357 D1:D88F DD 70 04 -          ld  (ix+REGSR),b
 4358 D1:D892 41 -  -  -          ld  b,c
 4359 D1:D893 CD 17 AF D1         WRITE_ACCESS
 4360 D1:D897 E1 -  -  -      pop hl
 4361 D1:D898 C3 F2 B6 D1     jp i6502NextLoad
 4362 D1:D89C -  -  -  -  
 4363 D1:D89C -  -  -  -  ;absolut,Y	SLO oper,Y	1B	3	7  	
 4364 D1:D89C -  -  -  -  inst6502_slo_absy:
 4365 D1:D89C ED 33 07 -      ADDCYC(7)
 4366 D1:D89F CD F9 B7 D1     PUSH_ABSYSPLIT_NODEP
 4367 D1:D8A3 CD 74 AE D1         READ_ACCESS
 4368 D1:D8A7 CB 27 -  -          sla a
 4369 D1:D8A9 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4370 D1:D8AA -  -  -  -          ;Split oper
 4371 D1:D8AA DD 46 04 -          ld  b,(ix+REGSR)
 4372 D1:D8AD CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4373 D1:D8B3 DD B6 00 -          or  a,(ix+REGA)
 4374 D1:D8B6 DD 77 00 -          ld  (ix+REGA),a
 4375 D1:D8B9 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4376 D1:D8BF 87 -  -  -          add a,a
 4377 D1:D8C0 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4378 D1:D8C6 DD 70 04 -          ld  (ix+REGSR),b
 4379 D1:D8C9 41 -  -  -          ld  b,c
 4380 D1:D8CA CD 17 AF D1         WRITE_ACCESS
 4381 D1:D8CE E1 -  -  -      pop hl
 4382 D1:D8CF C3 F2 B6 D1     jp i6502NextLoad
 4383 D1:D8D3 -  -  -  -  
 4384 D1:D8D3 -  -  -  -  ;(indirect,X)	SLO (oper,X)	03	2	8  	
 4385 D1:D8D3 -  -  -  -  isnt6502_slo_indx:
 4386 D1:D8D3 ED 33 08 -      ADDCYC(8)
 4387 D1:D8D6 E5 -  -  -      push hl
 4388 D1:D8D7 7E -  -  -          ld  a,(hl)
 4389 D1:D8D8 21 00 38 D0         ld  hl,ZEROPAGE
 4390 D1:D8DC 85 -  -  -          add a,L
 4391 D1:D8DD DD 86 01 -          add a,(ix+REGX)
 4392 D1:D8E0 6F -  -  -          ld  L,a
 4393 D1:D8E1 7E -  -  -          ld  a,(hl)
 4394 D1:D8E2 2C -  -  -          inc L
 4395 D1:D8E3 56 -  -  -          ld  d,(hl)
 4396 D1:D8E4 42 -  -  -          ld  b,d
 4397 D1:D8E5 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4398 D1:D8E7 ED 4C -  -          mlt bc
 4399 D1:D8E9 21 00 40 D0         ld  hl,PAGETABLE
 4400 D1:D8ED 09 -  -  -          add hl,bc
 4401 D1:D8EE ED 27 -  -          ld  hl,(hl)
 4402 D1:D8F0 06 00 -  -          ld  b,0
 4403 D1:D8F2 4F -  -  -          ld  c,a
 4404 D1:D8F3 09 -  -  -          add hl,bc
 4405 D1:D8F4 CD 74 AE D1         READ_ACCESS
 4406 D1:D8F8 CB 27 -  -          sla a
 4407 D1:D8FA 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4408 D1:D8FB -  -  -  -          ;Split oper
 4409 D1:D8FB DD 46 04 -          ld  b,(ix+REGSR)
 4410 D1:D8FE CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4411 D1:D904 DD B6 00 -          or  a,(ix+REGA)
 4412 D1:D907 DD 77 00 -          ld  (ix+REGA),a
 4413 D1:D90A CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4414 D1:D910 87 -  -  -          add a,a
 4415 D1:D911 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4416 D1:D917 DD 70 04 -          ld  (ix+REGSR),b
 4417 D1:D91A 41 -  -  -          ld  b,c
 4418 D1:D91B CD 17 AF D1         WRITE_ACCESS
 4419 D1:D91F E1 -  -  -      pop hl
 4420 D1:D920 C3 F2 B6 D1     jp  i6502NextLoad
 4421 D1:D924 -  -  -  -  
 4422 D1:D924 -  -  -  -  ;(indirect),Y	SLO (oper),Y	13	2	8  
 4423 D1:D924 -  -  -  -  inst6502_slo_indy:
 4424 D1:D924 ED 33 08 -      ADDCYC(8)
 4425 D1:D927 E5 -  -  -      push hl
 4426 D1:D928 7E -  -  -          ld  a,(hl)
 4427 D1:D929 21 00 38 D0         ld  hl,ZEROPAGE
 4428 D1:D92D 85 -  -  -          add a,L
 4429 D1:D92E 6F -  -  -          ld  L,a
 4430 D1:D92F 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4431 D1:D930 2C -  -  -          inc L
 4432 D1:D931 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4433 D1:D934 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4434 D1:D935 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4435 D1:D937 24 -  -  -          inc h
 4436 D1:D938 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4437 D1:D939 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4438 D1:D93B ED 6C -  -          mlt hl          ;23.
 4439 D1:D93D 01 00 40 D0         ld  bc,PAGETABLE
 4440 D1:D941 09 -  -  -          add hl,bc
 4441 D1:D942 ED 27 -  -          ld  hl,(hl)     ;address get.
 4442 D1:D944 01 00 00 00         ld  bc,0
 4443 D1:D948 4F -  -  -          ld  c,a
 4444 D1:D949 09 -  -  -          add hl,bc       ;Full address get.
 4445 D1:D94A CD 74 AE D1         READ_ACCESS
 4446 D1:D94E CB 27 -  -          sla a
 4447 D1:D950 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4448 D1:D951 -  -  -  -          ;Split oper
 4449 D1:D951 DD 46 04 -          ld  b,(ix+REGSR)
 4450 D1:D954 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4451 D1:D95A DD B6 00 -          or  a,(ix+REGA)
 4452 D1:D95D DD 77 00 -          ld  (ix+REGA),a
 4453 D1:D960 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4454 D1:D966 87 -  -  -          add a,a
 4455 D1:D967 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4456 D1:D96D DD 70 04 -          ld  (ix+REGSR),b
 4457 D1:D970 41 -  -  -          ld  b,c
 4458 D1:D971 CD 17 AF D1         WRITE_ACCESS
 4459 D1:D975 E1 -  -  -      pop hl
 4460 D1:D976 C3 F2 B6 D1     jp  i6502NextLoad
 4461 D1:D97A -  -  -  -  
 4462 D1:D97A -  -  -  -  ;-----------------------------------------------------------------------------
 4463 D1:D97A -  -  -  -  ;SRE (LSE) - LSR oper + EOR oper
 4464 D1:D97A -  -  -  -  ;M = 0 -> [76543210] -> C, A EOR M -> A. Affects: CZN
 4465 D1:D97A -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4466 D1:D97A -  -  -  -  
 4467 D1:D97A -  -  -  -  ;zeropage	SRE oper	47	2	5  	
 4468 D1:D97A -  -  -  -  inst6502_sre_zp:
 4469 D1:D97A ED 33 05 -      ADDCYC(5)
 4470 D1:D97D 7E -  -  -      ld  a,(hl)
 4471 D1:D97E 01 00 38 D0     ld  bc,ZEROPAGE
 4472 D1:D982 81 -  -  -      add a,c
 4473 D1:D983 4F -  -  -      ld  c,a
 4474 D1:D984 0A -  -  -      ld  a,(bc)
 4475 D1:D985 CB 3F -  -      srl a
 4476 D1:D987 02 -  -  -      ld  (bc),a
 4477 D1:D988 -  -  -  -      ;Flag breakdown to optimize for split operation
 4478 D1:D988 DD 46 04 -      ld  b,(ix+REGSR)
 4479 D1:D98B CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4480 D1:D991 DD AE 00 -      xor a,(ix+REGA)
 4481 D1:D994 DD 77 00 -      ld  (ix+REGA),a
 4482 D1:D997 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4483 D1:D99D 87 -  -  -      add a,a
 4484 D1:D99E CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4485 D1:D9A4 DD 70 04 -      ld  (ix+REGSR),b
 4486 D1:D9A7 C3 F2 B6 D1     jp i6502NextLoad
 4487 D1:D9AB -  -  -  -  
 4488 D1:D9AB -  -  -  -  ;zeropage,X	SRE oper,X	57	2	6  	
 4489 D1:D9AB -  -  -  -  inst6502_sre_zpx:
 4490 D1:D9AB ED 33 06 -      ADDCYC(6)
 4491 D1:D9AE 7E -  -  -      ld  a,(hl)
 4492 D1:D9AF 01 00 38 D0     ld  bc,ZEROPAGE
 4493 D1:D9B3 81 -  -  -      add a,c
 4494 D1:D9B4 DD 86 01 -      add a,(ix+REGX)
 4495 D1:D9B7 4F -  -  -      ld  c,a
 4496 D1:D9B8 0A -  -  -      ld  a,(bc)
 4497 D1:D9B9 CB 3F -  -      srl a
 4498 D1:D9BB 02 -  -  -      ld  (bc),a
 4499 D1:D9BC -  -  -  -      ;Flag breakdown to optimize for split operation
 4500 D1:D9BC DD 46 04 -      ld  b,(ix+REGSR)
 4501 D1:D9BF CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4502 D1:D9C5 DD AE 00 -      xor a,(ix+REGA)
 4503 D1:D9C8 DD 77 00 -      ld  (ix+REGA),a
 4504 D1:D9CB CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4505 D1:D9D1 87 -  -  -      add a,a
 4506 D1:D9D2 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4507 D1:D9D8 DD 70 04 -      ld  (ix+REGSR),b
 4508 D1:D9DB C3 F2 B6 D1     jp i6502NextLoad
 4509 D1:D9DF -  -  -  -  
 4510 D1:D9DF -  -  -  -  ;absolute	SRE oper	4F	3	6  	
 4511 D1:D9DF -  -  -  -  inst6502_sre_abs:
 4512 D1:D9DF ED 33 06 -      ADDCYC(6)
 4513 D1:D9E2 CD A1 B7 D1     call subroutine6502_abs_split_start
 4514 D1:D9E6 E5 -  -  -      push hl
 4515 D1:D9E7 50 -  -  -          ld  d,b
 4516 D1:D9E8 79 -  -  -          ld  a,c
 4517 D1:D9E9 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4518 D1:D9EB ED 4C -  -          mlt bc
 4519 D1:D9ED 21 00 40 D0         ld  hl,PAGETABLE
 4520 D1:D9F1 09 -  -  -          add hl,bc
 4521 D1:D9F2 ED 27 -  -          ld  hl,(hl)
 4522 D1:D9F4 06 00 -  -          ld  b,0
 4523 D1:D9F6 4F -  -  -          ld  c,a
 4524 D1:D9F7 09 -  -  -          add hl,bc   ;full address
 4525 D1:D9F8 CD 74 AE D1         READ_ACCESS
 4526 D1:D9FC CB 3F -  -          srl a
 4527 D1:D9FE 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4528 D1:D9FF -  -  -  -          ;Split oper
 4529 D1:D9FF DD 46 04 -          ld  b,(ix+REGSR)
 4530 D1:DA02 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4531 D1:DA08 DD AE 00 -          xor a,(ix+REGA)
 4532 D1:DA0B DD 77 00 -          ld  (ix+REGA),a
 4533 D1:DA0E CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4534 D1:DA14 87 -  -  -          add a,a
 4535 D1:DA15 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4536 D1:DA1B DD 70 04 -          ld  (ix+REGSR),b
 4537 D1:DA1E 41 -  -  -          ld  b,c
 4538 D1:DA1F CD 17 AF D1         WRITE_ACCESS
 4539 D1:DA23 E1 -  -  -      pop hl
 4540 D1:DA24 C3 F2 B6 D1     jp i6502NextLoad
 4541 D1:DA28 -  -  -  -  
 4542 D1:DA28 -  -  -  -  ;absolut,X	SRE oper,X	5F	3	7  	
 4543 D1:DA28 -  -  -  -  inst6502_sre_absx:
 4544 D1:DA28 ED 33 07 -      ADDCYC(7)
 4545 D1:DA2B CD FE B7 D1     PUSH_ABSXSPLIT_NODEP
 4546 D1:DA2F CD 74 AE D1         READ_ACCESS
 4547 D1:DA33 CB 3F -  -          srl a
 4548 D1:DA35 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4549 D1:DA36 -  -  -  -          ;Split oper
 4550 D1:DA36 DD 46 04 -          ld  b,(ix+REGSR)
 4551 D1:DA39 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4552 D1:DA3F DD AE 00 -          xor a,(ix+REGA)
 4553 D1:DA42 DD 77 00 -          ld  (ix+REGA),a
 4554 D1:DA45 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4555 D1:DA4B 87 -  -  -          add a,a
 4556 D1:DA4C CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4557 D1:DA52 DD 70 04 -          ld  (ix+REGSR),b
 4558 D1:DA55 41 -  -  -          ld  b,c
 4559 D1:DA56 CD 17 AF D1         WRITE_ACCESS
 4560 D1:DA5A E1 -  -  -      pop hl
 4561 D1:DA5B C3 F2 B6 D1     jp i6502NextLoad
 4562 D1:DA5F -  -  -  -  
 4563 D1:DA5F -  -  -  -  ;absolut,Y	SRE oper,Y	5B	3	7  	
 4564 D1:DA5F -  -  -  -  inst6502_sre_absy:
 4565 D1:DA5F ED 33 07 -      ADDCYC(7)
 4566 D1:DA62 CD F9 B7 D1     PUSH_ABSYSPLIT_NODEP
 4567 D1:DA66 CD 74 AE D1         READ_ACCESS
 4568 D1:DA6A CB 3F -  -          srl a
 4569 D1:DA6C 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4570 D1:DA6D -  -  -  -          ;Split oper
 4571 D1:DA6D DD 46 04 -          ld  b,(ix+REGSR)
 4572 D1:DA70 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4573 D1:DA76 DD AE 00 -          xor a,(ix+REGA)
 4574 D1:DA79 DD 77 00 -          ld  (ix+REGA),a
 4575 D1:DA7C CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4576 D1:DA82 87 -  -  -          add a,a
 4577 D1:DA83 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4578 D1:DA89 DD 70 04 -          ld  (ix+REGSR),b
 4579 D1:DA8C 41 -  -  -          ld  b,c
 4580 D1:DA8D CD 17 AF D1         WRITE_ACCESS
 4581 D1:DA91 E1 -  -  -      pop hl
 4582 D1:DA92 C3 F2 B6 D1     jp i6502NextLoad
 4583 D1:DA96 -  -  -  -  
 4584 D1:DA96 -  -  -  -  ;(indirect,X)	SRE (oper,X)	43	2	8  	
 4585 D1:DA96 -  -  -  -  isnt6502_sre_indx:
 4586 D1:DA96 ED 33 08 -      ADDCYC(8)
 4587 D1:DA99 E5 -  -  -      push hl
 4588 D1:DA9A 7E -  -  -          ld  a,(hl)
 4589 D1:DA9B 21 00 38 D0         ld  hl,ZEROPAGE
 4590 D1:DA9F 85 -  -  -          add a,L
 4591 D1:DAA0 DD 86 01 -          add a,(ix+REGX)
 4592 D1:DAA3 6F -  -  -          ld  L,a
 4593 D1:DAA4 7E -  -  -          ld  a,(hl)
 4594 D1:DAA5 2C -  -  -          inc L
 4595 D1:DAA6 56 -  -  -          ld  d,(hl)
 4596 D1:DAA7 42 -  -  -          ld  b,d
 4597 D1:DAA8 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4598 D1:DAAA ED 4C -  -          mlt bc
 4599 D1:DAAC 21 00 40 D0         ld  hl,PAGETABLE
 4600 D1:DAB0 09 -  -  -          add hl,bc
 4601 D1:DAB1 ED 27 -  -          ld  hl,(hl)
 4602 D1:DAB3 06 00 -  -          ld  b,0
 4603 D1:DAB5 4F -  -  -          ld  c,a
 4604 D1:DAB6 09 -  -  -          add hl,bc
 4605 D1:DAB7 CD 74 AE D1         READ_ACCESS
 4606 D1:DABB CB 3F -  -          srl a
 4607 D1:DABD 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4608 D1:DABE -  -  -  -          ;Split oper
 4609 D1:DABE DD 46 04 -          ld  b,(ix+REGSR)
 4610 D1:DAC1 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4611 D1:DAC7 DD AE 00 -          xor a,(ix+REGA)
 4612 D1:DACA DD 77 00 -          ld  (ix+REGA),a
 4613 D1:DACD CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4614 D1:DAD3 87 -  -  -          add a,a
 4615 D1:DAD4 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4616 D1:DADA DD 70 04 -          ld  (ix+REGSR),b
 4617 D1:DADD 41 -  -  -          ld  b,c
 4618 D1:DADE CD 17 AF D1         WRITE_ACCESS
 4619 D1:DAE2 E1 -  -  -      pop hl
 4620 D1:DAE3 C3 F2 B6 D1     jp  i6502NextLoad
 4621 D1:DAE7 -  -  -  -  
 4622 D1:DAE7 -  -  -  -  ;(indirect),Y	SRE (oper),Y	53	2	8  
 4623 D1:DAE7 -  -  -  -  inst6502_sre_indy:
 4624 D1:DAE7 ED 33 08 -      ADDCYC(8)
 4625 D1:DAEA E5 -  -  -      push hl
 4626 D1:DAEB 7E -  -  -          ld  a,(hl)
 4627 D1:DAEC 21 00 38 D0         ld  hl,ZEROPAGE
 4628 D1:DAF0 85 -  -  -          add a,L
 4629 D1:DAF1 6F -  -  -          ld  L,a
 4630 D1:DAF2 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4631 D1:DAF3 2C -  -  -          inc L
 4632 D1:DAF4 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4633 D1:DAF7 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4634 D1:DAF8 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4635 D1:DAFA 24 -  -  -          inc h
 4636 D1:DAFB 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4637 D1:DAFC 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4638 D1:DAFE ED 6C -  -          mlt hl          ;23.
 4639 D1:DB00 01 00 40 D0         ld  bc,PAGETABLE
 4640 D1:DB04 09 -  -  -          add hl,bc
 4641 D1:DB05 ED 27 -  -          ld  hl,(hl)     ;address get.
 4642 D1:DB07 01 00 00 00         ld  bc,0
 4643 D1:DB0B 4F -  -  -          ld  c,a
 4644 D1:DB0C 09 -  -  -          add hl,bc       ;Full address get.
 4645 D1:DB0D CD 74 AE D1         READ_ACCESS
 4646 D1:DB11 CB 3F -  -          srl a
 4647 D1:DB13 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4648 D1:DB14 -  -  -  -          ;Split oper
 4649 D1:DB14 DD 46 04 -          ld  b,(ix+REGSR)
 4650 D1:DB17 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4651 D1:DB1D DD AE 00 -          xor a,(ix+REGA)
 4652 D1:DB20 DD 77 00 -          ld  (ix+REGA),a
 4653 D1:DB23 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4654 D1:DB29 87 -  -  -          add a,a
 4655 D1:DB2A CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4656 D1:DB30 DD 70 04 -          ld  (ix+REGSR),b
 4657 D1:DB33 41 -  -  -          ld  b,c
 4658 D1:DB34 CD 17 AF D1         WRITE_ACCESS
 4659 D1:DB38 E1 -  -  -      pop hl
 4660 D1:DB39 C3 F2 B6 D1     jp  i6502NextLoad
 4661 D1:DB3D -  -  -  -  
 4662 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4663 D1:DB3D -  -  -  -  ;USBC (USBC)
 4664 D1:DB3D -  -  -  -  ;immediate	USBC #oper	EB	2	2  
 4665 D1:DB3D -  -  -  -  ;Map this to instruction $E9 (inst6502_sbc_imm)
 4666 D1:DB3D -  -  -  -  
 4667 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4668 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4669 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4670 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4671 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4672 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4673 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4674 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4675 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4676 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4677 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4678 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4679 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4680 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4681 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4682 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4683 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4684 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4685 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4686 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4687 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4688 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4689 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4690 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4691 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4692 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4693 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4694 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4695 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4696 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4697 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4698 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4699 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4700 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4701 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4702 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4703 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4704 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4705 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4706 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4707 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4708 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4709 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4710 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4711 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4712 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4713 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4714 D1:DB3D -  -  -  -  ;-----------------------------------------------------------------------------
 4715 D1:DB3D -  -  -  -  
 4716 D1:DB3D -  -  -  -  inst6502_instruction_set:
 4717 D1:DB3D 74 CD D1 -  .dl	inst6502_brk					;00
 4718 D1:DB40 1F C6 D1 -  .dl	inst6502_ora_indx				;01
 4719 D1:DB43 44 DE D1 -  .dl	inst6502_jam_02 				;02
 4720 D1:DB46 D3 D8 D1 -  .dl	isnt6502_slo_indx				;03
 4721 D1:DB49 12 CF D1 -  .dl	inst6502_nop_zp 				;04
 4722 D1:DB4C 3A C5 D1 -  .dl	inst6502_ora_zp					;05
 4723 D1:DB4F D7 C6 D1 -  .dl	inst6502_asl_zp					;06
 4724 D1:DB52 B7 D7 D1 -  .dl	inst6502_slo_zp 				;07
 4725 D1:DB55 60 BE D1 -  .dl	inst6502_php					;08
 4726 D1:DB58 18 C5 D1 -  .dl	inst6502_ora_imm				;09
 4727 D1:DB5B AE C6 D1 -  .dl	inst6502_asl					;0A
 4728 D1:DB5E 6B CF D1 -  .dl	instr6502_anc_imm				;0B
 4729 D1:DB61 20 CF D1 -  .dl	inst6502_nop_abs				;0C
 4730 D1:DB64 8F C5 D1 -  .dl	inst6502_ora_abs				;0D
 4731 D1:DB67 32 C7 D1 -  .dl	inst6502_asl_abs				;0E
 4732 D1:DB6A 1C D8 D1 -  .dl	inst6502_slo_abs				;0F
 4733 D1:DB6D 47 CD D1 -  .dl	inst6502_bpl					;10
 4734 D1:DB70 63 C6 D1 -  .dl	inst6502_ora_indy				;11
 4735 D1:DB73 3E DE D1 -  .dl	inst6502_jam_12_halt			;12 JAM. Used to halt emulation for inspection
 4736 D1:DB76 24 D9 D1 -  .dl	inst6502_slo_indy				;13
 4737 D1:DB79 19 CF D1 -  .dl	inst6502_nop_zpx				;14
 4738 D1:DB7C 63 C5 D1 -  .dl	inst6502_ora_zpx				;15
 4739 D1:DB7F 03 C7 D1 -  .dl	inst6502_asl_zpx				;16
 4740 D1:DB82 E8 D7 D1 -  .dl	inst6502_slo_zpx				;17
 4741 D1:DB85 B8 CA D1 -  .dl	inst6502_clc					;18
 4742 D1:DB88 F5 C5 D1 -  .dl	inst6502_ora_absy				;19
 4743 D1:DB8B 04 CF D1 -  .dl	inst6502_nop_implied    		;1A
 4744 D1:DB8E 9C D8 D1 -  .dl	inst6502_slo_absy				;1B
 4745 D1:DB91 31 CF D1 -  .dl	inst6502_nop_absx				;1C
 4746 D1:DB94 CB C5 D1 -  .dl	inst6502_ora_absx				;1D
 4747 D1:DB97 76 C7 D1 -  .dl	inst6502_asl_absx				;1E
 4748 D1:DB9A 65 D8 D1 -  .dl	inst6502_slo_absx				;1F
 4749 D1:DB9D 6C CE D1 -  .dl	inst6502_jsr					;20
 4750 D1:DBA0 F3 C2 D1 -  .dl	inst6502_and_indx				;21
 4751 D1:DBA3 44 DE D1 -  .dl	inst6502_jam_22 				;22
 4752 D1:DBA6 99 D4 D1 -  .dl	isnt6502_rla_indx				;23
 4753 D1:DBA9 B8 CE D1 -  .dl	inst6502_bit_zp					;24
 4754 D1:DBAC 0E C2 D1 -  .dl	inst6502_and_zp					;25
 4755 D1:DBAF CE C8 D1 -  .dl	inst6502_rol_zp					;26
 4756 D1:DBB2 6B D3 D1 -  .dl	inst6502_rla_zp 				;27
 4757 D1:DBB5 A2 BE D1 -  .dl	inst6502_plp					;28
 4758 D1:DBB8 EC C1 D1 -  .dl	inst6502_and_imm				;29
 4759 D1:DBBB A2 C8 D1 -  .dl	inst6502_rol					;2A
 4760 D1:DBBE 6B CF D1 -  .dl	instr6502_anc2_imm				;2B
 4761 D1:DBC1 DC CE D1 -  .dl	inst6502_bit_abs				;2C
 4762 D1:DBC4 63 C2 D1 -  .dl	inst6502_and_abs				;2D
 4763 D1:DBC7 2F C9 D1 -  .dl	inst6502_rol_abs				;2E
 4764 D1:DBCA D6 D3 D1 -  .dl	inst6502_rla_abs				;2F
 4765 D1:DBCD 29 CD D1 -  .dl	inst6502_bmi					;30
 4766 D1:DBD0 37 C3 D1 -  .dl	inst6502_and_indy				;31
 4767 D1:DBD3 44 DE D1 -  .dl	inst6502_jam_32 				;32
 4768 D1:DBD6 EE D4 D1 -  .dl	inst6502_rla_indy				;33
 4769 D1:DBD9 19 CF D1 -  .dl	inst6502_nop_zpx				;34
 4770 D1:DBDC 37 C2 D1 -  .dl	inst6502_and_zpx				;35
 4771 D1:DBDF FD C8 D1 -  .dl	inst6502_rol_zpx				;36
 4772 D1:DBE2 9F D3 D1 -  .dl	inst6502_rla_zpx				;37
 4773 D1:DBE5 E4 CA D1 -  .dl	inst6502_sec					;38
 4774 D1:DBE8 C9 C2 D1 -  .dl	inst6502_and_absy				;39
 4775 D1:DBEB 04 CF D1 -  .dl	inst6502_nop_implied			;3A
 4776 D1:DBEE 5E D4 D1 -  .dl	inst6502_rla_absy   			;3B
 4777 D1:DBF1 31 CF D1 -  .dl	inst6502_nop_absx   			;3C
 4778 D1:DBF4 9F C2 D1 -  .dl	inst6502_and_absx				;3D
 4779 D1:DBF7 77 C9 D1 -  .dl	inst6502_rol_absx				;3E
 4780 D1:DBFA 23 D4 D1 -  .dl	inst6502_rla_absx   			;3F
 4781 D1:DBFD B0 CD D1 -  .dl	inst6502_rti					;40
 4782 D1:DC00 89 C4 D1 -  .dl	inst6502_eor_indx				;41
 4783 D1:DC03 44 DE D1 -  .dl	inst6502_jam_42     			;42
 4784 D1:DC06 96 DA D1 -  .dl	isnt6502_sre_indx   			;43
 4785 D1:DC09 12 CF D1 -  .dl	inst6502_nop_zp     			;44
 4786 D1:DC0C A4 C3 D1 -  .dl	inst6502_eor_zp					;45
 4787 D1:DC0F D1 C7 D1 -  .dl	inst6502_lsr_zp					;46
 4788 D1:DC12 7A D9 D1 -  .dl	inst6502_sre_zp     			;47
 4789 D1:DC15 4A BE D1 -  .dl	inst6502_pha					;48
 4790 D1:DC18 82 C3 D1 -  .dl	inst6502_eor_imm				;49
 4791 D1:DC1B A8 C7 D1 -  .dl	inst6502_lsr					;4A
 4792 D1:DC1E 41 CF D1 -  .dl	inst6502_alr_imm    			;4B
 4793 D1:DC21 D5 CD D1 -  .dl	inst6052_jmp_abs				;4C
 4794 D1:DC24 F9 C3 D1 -  .dl	inst6502_eor_abs				;4D
 4795 D1:DC27 2C C8 D1 -  .dl	inst6502_lsr_abs				;4E
 4796 D1:DC2A DF D9 D1 -  .dl	inst6502_sre_abs    			;4F
 4797 D1:DC2D 56 CD D1 -  .dl	inst6502_bvc					;50
 4798 D1:DC30 CD C4 D1 -  .dl	inst6502_eor_indy				;51
 4799 D1:DC33 44 DE D1 -  .dl	inst6502_jam_52     			;52
 4800 D1:DC36 E7 DA D1 -  .dl	inst6502_sre_indy   			;53
 4801 D1:DC39 19 CF D1 -  .dl	inst6502_nop_zpx    			;54
 4802 D1:DC3C CD C3 D1 -  .dl	inst6502_eor_zpx				;55
 4803 D1:DC3F FD C7 D1 -  .dl	inst6502_lsr_zpx				;56
 4804 D1:DC42 AB D9 D1 -  .dl	inst6502_sre_zpx    			;57
 4805 D1:DC45 CE CA D1 -  .dl	inst6502_cli					;58
 4806 D1:DC48 5F C4 D1 -  .dl	inst6502_eor_absy				;59
 4807 D1:DC4B 04 CF D1 -  .dl	inst6502_nop_implied			;5A
 4808 D1:DC4E 5F DA D1 -  .dl	inst6502_sre_absy   			;5B
 4809 D1:DC51 31 CF D1 -  .dl	inst6502_nop_absx   			;5C
 4810 D1:DC54 35 C4 D1 -  .dl	inst6502_eor_absx				;5D
 4811 D1:DC57 70 C8 D1 -  .dl	inst6502_lsr_absx				;5E
 4812 D1:DC5A 28 DA D1 -  .dl	inst6502_sre_absx   			;5F
 4813 D1:DC5D 9E CE D1 -  .dl	inst6502_rts					;60
 4814 D1:DC60 C2 C0 D1 -  .dl	inst6502_adc_indx				;61
 4815 D1:DC63 44 DE D1 -  .dl	inst6502_jam_62     			;62
 4816 D1:DC66 15 D6 D1 -  .dl	isnt6502_rra_indx   			;63
 4817 D1:DC69 12 CF D1 -  .dl	inst6502_nop_zp     			;64
 4818 D1:DC6C 5A C0 D1 -  .dl	inst6502_adc_zp					;65
 4819 D1:DC6F D9 C9 D1 -  .dl	inst6502_ror_zp					;66
 4820 D1:DC72 48 D5 D1 -  .dl	inst6502_rra_zp     			;67
 4821 D1:DC75 78 BE D1 -  .dl	inst6502_pla					;68
 4822 D1:DC78 52 C0 D1 -  .dl	inst6502_adc_imm				;69
 4823 D1:DC7B AD C9 D1 -  .dl	inst6502_ror					;6A
 4824 D1:DC7E B8 CF D1 -  .dl	instr6502_arr_imm   			;6B
 4825 D1:DC81 22 CE D1 -  .dl	inst6502_jmp_indir				;6C
 4826 D1:DC84 7D C0 D1 -  .dl	inst6502_adc_abs				;6D
 4827 D1:DC87 3A CA D1 -  .dl	inst6502_ror_abs				;6E
 4828 D1:DC8A 8B D5 D1 -  .dl	inst6502_rra_abs    			;6F
 4829 D1:DC8D 65 CD D1 -  .dl	inst6502_bvs					;70
 4830 D1:DC90 ED C0 D1 -  .dl	inst6502_adc_indy				;71
 4831 D1:DC93 44 DE D1 -  .dl	inst6502_jam_72     			;72
 4832 D1:DC96 57 D6 D1 -  .dl	inst6502_rra_indy   			;73
 4833 D1:DC99 19 CF D1 -  .dl	inst6502_nop_zpx    			;74
 4834 D1:DC9C 6A C0 D1 -  .dl	inst6502_adc_zpx				;75
 4835 D1:DC9F 08 CA D1 -  .dl	inst6502_ror_zpx				;76
 4836 D1:DCA2 68 D5 D1 -  .dl	inst6502_rra_zpx    			;77
 4837 D1:DCA5 FA CA D1 -  .dl	inst6502_sei					;78
 4838 D1:DCA8 B1 C0 D1 -  .dl	inst6502_adc_absy				;79
 4839 D1:DCAB 04 CF D1 -  .dl	inst6502_nop_implied			;7A
 4840 D1:DCAE ED D5 D1 -  .dl	inst6502_rra_absy   			;7B
 4841 D1:DCB1 31 CF D1 -  .dl	inst6502_nop_absx   			;7C
 4842 D1:DCB4 A0 C0 D1 -  .dl	inst6502_adc_absx				;7D
 4843 D1:DCB7 82 CA D1 -  .dl	inst6502_ror_absx				;7E
 4844 D1:DCBA C5 D5 D1 -  .dl	inst6502_rra_absx   			;7F
 4845 D1:DCBD 0B CF D1 -  .dl	inst6502_nop_imm    			;80
 4846 D1:DCC0 A1 BC D1 -  .dl	inst6502_sta_indx				;81
 4847 D1:DCC3 0B CF D1 -  .dl	inst6502_nop_imm    			;82
 4848 D1:DCC6 F4 D6 D1 -  .dl	inst6502_sax_indx   			;83
 4849 D1:DCC9 4C BD D1 -  .dl	inst6502_sty_zp					;84
 4850 D1:DCCC 2F BC D1 -  .dl	inst6502_sta_zp					;85
 4851 D1:DCCF 00 BD D1 -  .dl	inst6502_stx_zp					;86
 4852 D1:DCD2 9E D6 D1 -  .dl	inst6502_sax_zp     			;87
 4853 D1:DCD5 90 BF D1 -  .dl	inst6502_dey					;88
 4854 D1:DCD8 0B CF D1 -  .dl	inst6502_nop_imm    			;89
 4855 D1:DCDB FB BD D1 -  .dl	inst6502_txa					;8A
 4856 D1:DCDE 91 CF D1 -  .dl	instr6502_ane_imm   			;8B
 4857 D1:DCE1 73 BD D1 -  .dl	inst6502_sty_abs				;8C
 4858 D1:DCE4 56 BC D1 -  .dl	inst6502_sta_abs				;8D
 4859 D1:DCE7 27 BD D1 -  .dl	inst6502_stx_abs				;8E
 4860 D1:DCEA CB D6 D1 -  .dl	inst6502_sax_abs    			;8F
 4861 D1:DCED FC CC D1 -  .dl	inst6502_bcc					;90
 4862 D1:DCF0 CE BC D1 -  .dl	inst6502_sta_indy				;91
 4863 D1:DCF3 44 DE D1 -  .dl	inst6502_jam_92     			;92
 4864 D1:DCF6 5C D7 D1 -  .dl	inst6502_sha_indy   			;93
 4865 D1:DCF9 5E BD D1 -  .dl	inst6502_sty_zpx				;94
 4866 D1:DCFC 41 BC D1 -  .dl	inst6502_sta_zpx				;95
 4867 D1:DCFF 12 BD D1 -  .dl	inst6502_stx_zpy				;96
 4868 D1:DD02 B3 D6 D1 -  .dl	inst6502_sax_zpy    			;97
 4869 D1:DD05 29 BE D1 -  .dl	inst6502_tya					;98
 4870 D1:DD08 8E BC D1 -  .dl	inst6502_sta_absy				;99
 4871 D1:DD0B 1C BE D1 -  .dl	inst6502_txs					;9A
 4872 D1:DD0E A9 D7 D1 -  .dl	inst6502_tas_absy   			;9B
 4873 D1:DD11 9B D7 D1 -  .dl	inst6502_shy_absx   			;9C
 4874 D1:DD14 7B BC D1 -  .dl	inst6502_sta_absx				;9D
 4875 D1:DD17 8D D7 D1 -  .dl	inst6502_shx_absy   			;9E
 4876 D1:DD1A 4E D7 D1 -  .dl	inst6502_sha_absy   			;9F
 4877 D1:DD1D 61 BB D1 -  .dl	inst6502_ldy_imm				;A0
 4878 D1:DD20 0A BA D1 -  .dl	inst6502_lda_indx				;A1
 4879 D1:DD23 93 BA D1 -  .dl	inst6502_ldx_imm				;A2
 4880 D1:DD26 B5 D2 D1 -  .dl	inst6502_lax_indx   			;A3
 4881 D1:DD29 80 BB D1 -  .dl	inst6502_ldy_zp					;A4
 4882 D1:DD2C 34 B9 D1 -  .dl	inst6502_lda_zp					;A5
 4883 D1:DD2F B2 BA D1 -  .dl	inst6502_ldx_zp					;A6
 4884 D1:DD32 FA D1 D1 -  .dl	inst6502_lax_zp     			;A7
 4885 D1:DD35 B9 BD D1 -  .dl	inst6502_tay					;A8
 4886 D1:DD38 15 B9 D1 -  .dl	inst6502_lda_imm				;A9
 4887 D1:DD3B 98 BD D1 -  .dl	inst6502_tax					;AA
 4888 D1:DD3E 44 D3 D1 -  .dl	inst6502_lxa        			;AB
 4889 D1:DD41 CF BB D1 -  .dl	inst6502_ldy_abs				;AC
 4890 D1:DD44 83 B9 D1 -  .dl	inst6502_lda_abs				;AD
 4891 D1:DD47 01 BB D1 -  .dl	inst6502_ldx_abs				;AE
 4892 D1:DD4A 4F D2 D1 -  .dl	inst6502_lax_abs    			;AF
 4893 D1:DD4D 0B CD D1 -  .dl	inst6502_bcs					;B0
 4894 D1:DD50 4B BA D1 -  .dl	inst6502_lda_indy				;B1
 4895 D1:DD53 44 DE D1 -  .dl	inst6502_jam_B2     			;B2
 4896 D1:DD56 F9 D2 D1 -  .dl	inst6502_lax_indy   			;B3
 4897 D1:DD59 A6 BB D1 -  .dl	inst6502_ldy_zpx				;B4
 4898 D1:DD5C 5A B9 D1 -  .dl	inst6502_lda_zpx				;B5
 4899 D1:DD5F D8 BA D1 -  .dl	inst6502_ldx_zpy				;B6
 4900 D1:DD62 23 D2 D1 -  .dl	inst6502_lax_zpy    			;B7
 4901 D1:DD65 D9 CA D1 -  .dl	inst6502_clv					;B8
 4902 D1:DD68 E3 B9 D1 -  .dl	inst6502_lda_absy				;B9
 4903 D1:DD6B DA BD D1 -  .dl	inst6502_tsx					;BA
 4904 D1:DD6E CA D1 D1 -  .dl	inst6502_las_absy   			;BB
 4905 D1:DD71 08 BC D1 -  .dl	inst6502_ldy_absx				;BC
 4906 D1:DD74 BC B9 D1 -  .dl	inst6502_lda_absx				;BD
 4907 D1:DD77 3A BB D1 -  .dl	inst6502_ldx_absy				;BE
 4908 D1:DD7A 8B D2 D1 -  .dl	inst6502_lax_absy   			;BF
 4909 D1:DD7D 65 CC D1 -  .dl	inst6502_cpy_imm				;C0
 4910 D1:DD80 73 CB D1 -  .dl	inst6502_cmp_indx				;C1
 4911 D1:DD83 0B CF D1 -  .dl	inst6502_nop_imm    			;C2
 4912 D1:DD86 72 D0 D1 -  .dl	inst6502_dcp_indx   			;C3
 4913 D1:DD89 8B CC D1 -  .dl	inst6502_cpy_zp					;C4
 4914 D1:DD8C 0D CB D1 -  .dl	inst6502_cmp_zp					;C5
 4915 D1:DD8F BF BE D1 -  .dl	inst6502_dec_zp					;C6
 4916 D1:DD92 F1 CF D1 -  .dl	inst6502_dcp_zp     			;C7
 4917 D1:DD95 9A BF D1 -  .dl	inst6502_iny					;C8
 4918 D1:DD98 05 CB D1 -  .dl	inst6502_cmp_imm				;C9
 4919 D1:DD9B 72 BF D1 -  .dl	inst6502_dex					;CA
 4920 D1:DD9E 25 D7 D1 -  .dl	inst6502_sbx_imm    			;CB
 4921 D1:DDA1 BA CC D1 -  .dl	inst6502_cpy_abs				;CC
 4922 D1:DDA4 2E CB D1 -  .dl	inst6502_cmp_abs				;CD
 4923 D1:DDA7 0C BF D1 -  .dl	inst6502_dec_abs				;CE
 4924 D1:DDAA 18 D0 D1 -  .dl	inst6502_dcp_abs    			;CF
 4925 D1:DDAD 38 CD D1 -  .dl	inst6502_bne					;D0
 4926 D1:DDB0 9E CB D1 -  .dl	inst6502_cmp_indy				;D1
 4927 D1:DDB3 44 DE D1 -  .dl	inst6502_jam_D2     			;D2
 4928 D1:DDB6 A4 D0 D1 -  .dl	inst6502_dcp_indy   			;D3
 4929 D1:DDB9 19 CF D1 -  .dl	inst6502_nop_zpx    			;D4
 4930 D1:DDBC 1B CB D1 -  .dl	inst6502_cmp_zpx				;D5
 4931 D1:DDBF E4 BE D1 -  .dl	inst6502_dec_zpx				;D6
 4932 D1:DDC2 03 D0 D1 -  .dl	inst6520_dcp_zpx    			;D7
 4933 D1:DDC5 C3 CA D1 -  .dl	inst6502_cld					;D8
 4934 D1:DDC8 62 CB D1 -  .dl	inst6502_cmp_absy				;D9
 4935 D1:DDCB 04 CF D1 -  .dl	inst6502_nop_implied			;DA
 4936 D1:DDCE 5A D0 D1 -  .dl	inst6502_dcp_absy   			;DB
 4937 D1:DDD1 31 CF D1 -  .dl	inst6502_nop_absx   			;DC
 4938 D1:DDD4 51 CB D1 -  .dl	inst6502_cmp_absx				;DD
 4939 D1:DDD7 48 BF D1 -  .dl	inst6502_dec_absx				;DE
 4940 D1:DDDA 42 D0 D1 -  .dl	inst6502_dcp_absx   			;DF
 4941 D1:DDDD D0 CB D1 -  .dl	inst6502_cpx_imm				;E0
 4942 D1:DDE0 8F C1 D1 -  .dl	inst6502_sbc_indx				;E1
 4943 D1:DDE3 0B CF D1 -  .dl	inst6502_nop_imm    			;E2
 4944 D1:DDE6 5F D1 D1 -  .dl	inst6502_isc_indx   			;E3
 4945 D1:DDE9 F6 CB D1 -  .dl	inst6502_cpx_zp					;E4
 4946 D1:DDEC 27 C1 D1 -  .dl	inst6502_sbc_zp					;E5
 4947 D1:DDEF 9F BF D1 -  .dl	inst6502_inc_zp					;E6
 4948 D1:DDF2 DB D0 D1 -  .dl	inst6502_isc_zp     			;E7
 4949 D1:DDF5 95 BF D1 -  .dl	inst6502_inx					;E8
 4950 D1:DDF8 1F C1 D1 -  .dl	inst6502_sbc_imm				;E9
 4951 D1:DDFB FD CE D1 -  .dl	inst6502_nop					;EA
 4952 D1:DDFE 1F C1 D1 -  .dl	inst6502_sbc_imm			    ;EB *DUPLICATE OF E9
 4953 D1:DE01 23 CC D1 -  .dl	inst6502_cpx_abs				;EC
 4954 D1:DE04 4A C1 D1 -  .dl	inst6502_sbc_abs				;ED
 4955 D1:DE07 EC BF D1 -  .dl	inst6502_inc_abs				;EE
 4956 D1:DE0A 02 D1 D1 -  .dl	inst6502_isc_abs    			;EF
 4957 D1:DE0D 1A CD D1 -  .dl	inst6502_beq					;F0
 4958 D1:DE10 BA C1 D1 -  .dl	inst6502_sbc_indy				;F1
 4959 D1:DE13 44 DE D1 -  .dl	inst6502_jam_F2     			;F2
 4960 D1:DE16 92 D1 D1 -  .dl	inst6502_isc_indy   			;F3
 4961 D1:DE19 19 CF D1 -  .dl	inst6502_nop_zpx    			;F4
 4962 D1:DE1C 37 C1 D1 -  .dl	inst6502_sbc_zpx				;F5
 4963 D1:DE1F C4 BF D1 -  .dl	inst6502_inc_zpx				;F6
 4964 D1:DE22 ED D0 D1 -  .dl	inst6520_isc_zpx    			;F7
 4965 D1:DE25 EF CA D1 -  .dl	inst6502_sed					;F8
 4966 D1:DE28 7E C1 D1 -  .dl	inst6502_sbc_absy				;F9
 4967 D1:DE2B 04 CF D1 -  .dl	inst6502_nop_implied			;FA
 4968 D1:DE2E 46 D1 D1 -  .dl	inst6502_isc_absy   			;FB
 4969 D1:DE31 31 CF D1 -  .dl	inst6502_nop_absx   			;FC
 4970 D1:DE34 6D C1 D1 -  .dl	inst6502_sbc_absx				;FD
 4971 D1:DE37 28 C0 D1 -  .dl	inst6502_inc_absx				;FE
 4972 D1:DE3A 2D D1 D1 -  .dl	inst6502_isc_absx   			;FF
 4973 D1:DE3D -  -  -  -  
 4974 D1:DE3D -  -  -  -  ;-----------------------------------------------------------------------------
 4975 D1:DE3D -  -  -  -  ;-----------------------------------------------------------------------------
 4976 D1:DE3D -  -  -  -  ;-----------------------------------------------------------------------------
 4977 D1:DE3D -  -  -  -  ;These instructions are located here because they perform a function outside
 4978 D1:DE3D -  -  -  -  ;the context of emulating instructions. These are mapped to instructions that
 4979 D1:DE3D -  -  -  -  ;would, on the real hardware, freeze the CPU and require a reset to continue.
 4980 D1:DE3D -  -  -  -  ;
 4981 D1:DE3D -  -  -  -  ;Here, they'll let us perform useful things. Like exiting the emulator.
 4982 D1:DE3D -  -  -  -  ;Or jamming in one spot. Or other things in the future. Debugging things.
 4983 D1:DE3D -  -  -  -  ;Future stuff like breakpoints and console output. That sorta thing.
 4984 D1:DE3D -  -  -  -  ;
 4985 D1:DE3D -  -  -  -  
 4986 D1:DE3D -  -  -  -  inst6502_:
 4987 D1:DE3D C9 -  -  -      ret
 4988 D1:DE3E -  -  -  -  
 4989 D1:DE3E -  -  -  -  inst6502_jam_12_halt:
 4990 D1:DE3E 18 FE -  -      jr $
 4991 D1:DE40 C3 0B B7 D1     jp i6502FinishLoad
 4992 D1:DE44 -  -  -  -  
 4993 D1:DE44 -  -  -  -  inst6502_jam_02:
 4994 D1:DE44 -  -  -  -  inst6502_jam_22:
 4995 D1:DE44 -  -  -  -  inst6502_jam_32:
 4996 D1:DE44 -  -  -  -  inst6502_jam_42:
 4997 D1:DE44 -  -  -  -  inst6502_jam_52:
 4998 D1:DE44 -  -  -  -  inst6502_jam_62:
 4999 D1:DE44 -  -  -  -  inst6502_jam_72:
 5000 D1:DE44 -  -  -  -  inst6502_jam_92:
 5001 D1:DE44 -  -  -  -  inst6502_jam_B2:
 5002 D1:DE44 -  -  -  -  inst6502_jam_D2:
 5003 D1:DE44 -  -  -  -  inst6502_jam_F2:
 5004 D1:DE44 C9 -  -  -      ret
 5005 D1:DE45 -  -  -  -  
 5006 D1:DE45 -  -  -  -  
 5007 D1:DE45 -  -  -  -  
 5008 D1:DE45 -  -  -  -  
 5009 D1:DE45 -  -  -  -  
 5010 D1:DE45 -  -  -  -  
 5011 D1:DE45 -  -  -  -  
 5012 D1:DE45 -  -  -  -  
 5013 D1:DE45 -  -  -  -  
 5014 D1:DE45 -  -  -  -  
 5015 D1:DE45 -  -  -  -  
 5016 D1:DE45 -  -  -  -  
 5017 D1:DE45 -  -  -  -  
Listing for file "main.z80"
  973 D1:DE45 -  -  -  -  #include "debug.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    1 D1:DE45 -  -  -  -  ;This has all the tables needed to drive the debugger.
    2 D1:DE45 -  -  -  -  #include "debug_itab.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug_itab.z80"
    1 D1:DE45 -  -  -  -  inst6502_opcode_width_table:
    2 D1:DE45 01 -  -  -  .db 1    ;0: 
    3 D1:DE46 02 -  -  -  .db 2    ;1: zpg,X
    4 D1:DE47 03 -  -  -  .db 3    ;2: ind
    5 D1:DE48 03 -  -  -  .db 3    ;3: abs
    6 D1:DE49 03 -  -  -  .db 3    ;4: abs,X
    7 D1:DE4A 02 -  -  -  .db 2    ;5: X,ind
    8 D1:DE4B 01 -  -  -  .db 1    ;6: A
    9 D1:DE4C 02 -  -  -  .db 2    ;7: zpg
   10 D1:DE4D 02 -  -  -  .db 2    ;8: rel
   11 D1:DE4E 02 -  -  -  .db 2    ;9: #
   12 D1:DE4F 01 -  -  -  .db 1    ;10: impl
   13 D1:DE50 02 -  -  -  .db 2    ;11: ind,Y
   14 D1:DE51 03 -  -  -  .db 3    ;12: abs,Y
   15 D1:DE52 02 -  -  -  .db 2    ;13: zpg,Y
   16 D1:DE53 -  -  -  -  
   17 D1:DE53 -  -  -  -  
   18 D1:DE53 -  -  -  -  ;Note: 1=1byteOper, 2=2byteOper, -=1byteRelOper. Other chrs are literal
   19 D1:DE53 -  -  -  -  
   20 D1:DE53 -  -  -  -  inst6502_disassembler:
   21 D1:DE53 01 -  -  -  .db 1,""  ;
   22 D1:DE54 04 31 2C 58 .db 4,"1,X"  ;
   23 D1:DE58 04 28 32 29 .db 4,"(2)"  ;
   24 D1:DE5C 02 32 -  -  .db 2,"2"  ;
   25 D1:DE5E 04 32 2C 58 .db 4,"2,X"  ;
   26 D1:DE62 06 28 31 2C 
              58 29 -  -  .db 6,"(1,X)"  ;
   27 D1:DE68 02 41 -  -  .db 2,"A"  ;
   28 D1:DE6A 02 31 -  -  .db 2,"1"  ;
   29 D1:DE6C 02 2D -  -  .db 2,"-"  ;
   30 D1:DE6E 03 23 31 -  .db 3,"#1"  ;
   31 D1:DE71 01 -  -  -  .db 1,""  ;
   32 D1:DE72 06 28 31 29 
              2C 59 -  -  .db 6,"(1),Y"  ;
   33 D1:DE78 04 32 2C 59 .db 4,"2,Y"  ;
   34 D1:DE7C 04 31 2C 59 .db 4,"1,Y"  ;
   35 D1:DE80 -  -  -  -  
   36 D1:DE80 -  -  -  -  inst6502_disassembly_table:
   37 D1:DE80 42 52 4B 0A .db "BRK", 10     ;0x00
   38 D1:DE84 4F 52 41 05 .db "ORA", 5     ;0x01
   39 D1:DE88 4A 41 4D 00 .db "JAM", 0     ;0x02
   40 D1:DE8C 53 4C 4F 05 .db "SLO", 5     ;0x03
   41 D1:DE90 4E 4F 50 07 .db "NOP", 7     ;0x04
   42 D1:DE94 4F 52 41 07 .db "ORA", 7     ;0x05
   43 D1:DE98 41 53 4C 07 .db "ASL", 7     ;0x06
   44 D1:DE9C 53 4C 4F 07 .db "SLO", 7     ;0x07
   45 D1:DEA0 50 48 50 0A .db "PHP", 10     ;0x08
   46 D1:DEA4 4F 52 41 09 .db "ORA", 9     ;0x09
   47 D1:DEA8 41 53 4C 06 .db "ASL", 6     ;0x0A
   48 D1:DEAC 41 4E 43 09 .db "ANC", 9     ;0x0B
   49 D1:DEB0 4E 4F 50 03 .db "NOP", 3     ;0x0C
   50 D1:DEB4 4F 52 41 03 .db "ORA", 3     ;0x0D
   51 D1:DEB8 41 53 4C 03 .db "ASL", 3     ;0x0E
   52 D1:DEBC 53 4C 4F 03 .db "SLO", 3     ;0x0F
   53 D1:DEC0 42 50 4C 08 .db "BPL", 8     ;0x10
   54 D1:DEC4 4F 52 41 0B .db "ORA", 11     ;0x11
   55 D1:DEC8 4A 41 4D 00 .db "JAM", 0     ;0x12
   56 D1:DECC 53 4C 4F 0B .db "SLO", 11     ;0x13
   57 D1:DED0 4E 4F 50 01 .db "NOP", 1     ;0x14
   58 D1:DED4 4F 52 41 01 .db "ORA", 1     ;0x15
   59 D1:DED8 41 53 4C 01 .db "ASL", 1     ;0x16
   60 D1:DEDC 53 4C 4F 01 .db "SLO", 1     ;0x17
   61 D1:DEE0 43 4C 43 0A .db "CLC", 10     ;0x18
   62 D1:DEE4 4F 52 41 0C .db "ORA", 12     ;0x19
   63 D1:DEE8 4E 4F 50 0A .db "NOP", 10     ;0x1A
   64 D1:DEEC 53 4C 4F 0C .db "SLO", 12     ;0x1B
   65 D1:DEF0 4E 4F 50 04 .db "NOP", 4     ;0x1C
   66 D1:DEF4 4F 52 41 04 .db "ORA", 4     ;0x1D
   67 D1:DEF8 41 53 4C 04 .db "ASL", 4     ;0x1E
   68 D1:DEFC 53 4C 4F 04 .db "SLO", 4     ;0x1F
   69 D1:DF00 4A 53 52 03 .db "JSR", 3     ;0x20
   70 D1:DF04 41 4E 44 05 .db "AND", 5     ;0x21
   71 D1:DF08 4A 41 4D 00 .db "JAM", 0     ;0x22
   72 D1:DF0C 52 4C 41 05 .db "RLA", 5     ;0x23
   73 D1:DF10 42 49 54 07 .db "BIT", 7     ;0x24
   74 D1:DF14 41 4E 44 07 .db "AND", 7     ;0x25
   75 D1:DF18 52 4F 4C 07 .db "ROL", 7     ;0x26
   76 D1:DF1C 52 4C 41 07 .db "RLA", 7     ;0x27
   77 D1:DF20 50 4C 50 0A .db "PLP", 10     ;0x28
   78 D1:DF24 41 4E 44 09 .db "AND", 9     ;0x29
   79 D1:DF28 52 4F 4C 06 .db "ROL", 6     ;0x2A
   80 D1:DF2C 41 4E 43 09 .db "ANC", 9     ;0x2B
   81 D1:DF30 42 49 54 03 .db "BIT", 3     ;0x2C
   82 D1:DF34 41 4E 44 03 .db "AND", 3     ;0x2D
   83 D1:DF38 52 4F 4C 03 .db "ROL", 3     ;0x2E
   84 D1:DF3C 52 4C 41 03 .db "RLA", 3     ;0x2F
   85 D1:DF40 42 4D 49 08 .db "BMI", 8     ;0x30
   86 D1:DF44 41 4E 44 0B .db "AND", 11     ;0x31
   87 D1:DF48 4A 41 4D 00 .db "JAM", 0     ;0x32
   88 D1:DF4C 52 4C 41 0B .db "RLA", 11     ;0x33
   89 D1:DF50 4E 4F 50 01 .db "NOP", 1     ;0x34
   90 D1:DF54 41 4E 44 01 .db "AND", 1     ;0x35
   91 D1:DF58 52 4F 4C 01 .db "ROL", 1     ;0x36
   92 D1:DF5C 52 4C 41 01 .db "RLA", 1     ;0x37
   93 D1:DF60 53 45 43 0A .db "SEC", 10     ;0x38
   94 D1:DF64 41 4E 44 0C .db "AND", 12     ;0x39
   95 D1:DF68 4E 4F 50 0A .db "NOP", 10     ;0x3A
   96 D1:DF6C 52 4C 41 0C .db "RLA", 12     ;0x3B
   97 D1:DF70 4E 4F 50 04 .db "NOP", 4     ;0x3C
   98 D1:DF74 41 4E 44 04 .db "AND", 4     ;0x3D
   99 D1:DF78 52 4F 4C 04 .db "ROL", 4     ;0x3E
  100 D1:DF7C 52 4C 41 04 .db "RLA", 4     ;0x3F
  101 D1:DF80 52 54 49 0A .db "RTI", 10     ;0x40
  102 D1:DF84 45 4F 52 05 .db "EOR", 5     ;0x41
  103 D1:DF88 4A 41 4D 00 .db "JAM", 0     ;0x42
  104 D1:DF8C 53 52 45 05 .db "SRE", 5     ;0x43
  105 D1:DF90 4E 4F 50 07 .db "NOP", 7     ;0x44
  106 D1:DF94 45 4F 52 07 .db "EOR", 7     ;0x45
  107 D1:DF98 4C 53 52 07 .db "LSR", 7     ;0x46
  108 D1:DF9C 53 52 45 07 .db "SRE", 7     ;0x47
  109 D1:DFA0 50 48 41 0A .db "PHA", 10     ;0x48
  110 D1:DFA4 45 4F 52 09 .db "EOR", 9     ;0x49
  111 D1:DFA8 4C 53 52 06 .db "LSR", 6     ;0x4A
  112 D1:DFAC 41 4C 52 09 .db "ALR", 9     ;0x4B
  113 D1:DFB0 4A 4D 50 03 .db "JMP", 3     ;0x4C
  114 D1:DFB4 45 4F 52 03 .db "EOR", 3     ;0x4D
  115 D1:DFB8 4C 53 52 03 .db "LSR", 3     ;0x4E
  116 D1:DFBC 53 52 45 03 .db "SRE", 3     ;0x4F
  117 D1:DFC0 42 56 43 08 .db "BVC", 8     ;0x50
  118 D1:DFC4 45 4F 52 0B .db "EOR", 11     ;0x51
  119 D1:DFC8 4A 41 4D 00 .db "JAM", 0     ;0x52
  120 D1:DFCC 53 52 45 0B .db "SRE", 11     ;0x53
  121 D1:DFD0 4E 4F 50 01 .db "NOP", 1     ;0x54
  122 D1:DFD4 45 4F 52 01 .db "EOR", 1     ;0x55
  123 D1:DFD8 4C 53 52 01 .db "LSR", 1     ;0x56
  124 D1:DFDC 53 52 45 01 .db "SRE", 1     ;0x57
  125 D1:DFE0 43 4C 49 0A .db "CLI", 10     ;0x58
  126 D1:DFE4 45 4F 52 0C .db "EOR", 12     ;0x59
  127 D1:DFE8 4E 4F 50 0A .db "NOP", 10     ;0x5A
  128 D1:DFEC 53 52 45 0C .db "SRE", 12     ;0x5B
  129 D1:DFF0 4E 4F 50 04 .db "NOP", 4     ;0x5C
  130 D1:DFF4 45 4F 52 04 .db "EOR", 4     ;0x5D
  131 D1:DFF8 4C 53 52 04 .db "LSR", 4     ;0x5E
  132 D1:DFFC 53 52 45 04 .db "SRE", 4     ;0x5F
  133 D1:E000 52 54 53 0A .db "RTS", 10     ;0x60
  134 D1:E004 41 44 43 05 .db "ADC", 5     ;0x61
  135 D1:E008 4A 41 4D 00 .db "JAM", 0     ;0x62
  136 D1:E00C 52 52 41 05 .db "RRA", 5     ;0x63
  137 D1:E010 4E 4F 50 07 .db "NOP", 7     ;0x64
  138 D1:E014 41 44 43 07 .db "ADC", 7     ;0x65
  139 D1:E018 52 4F 52 07 .db "ROR", 7     ;0x66
  140 D1:E01C 52 52 41 07 .db "RRA", 7     ;0x67
  141 D1:E020 50 4C 41 0A .db "PLA", 10     ;0x68
  142 D1:E024 41 44 43 09 .db "ADC", 9     ;0x69
  143 D1:E028 52 4F 52 06 .db "ROR", 6     ;0x6A
  144 D1:E02C 41 52 52 09 .db "ARR", 9     ;0x6B
  145 D1:E030 4A 4D 50 02 .db "JMP", 2     ;0x6C
  146 D1:E034 41 44 43 03 .db "ADC", 3     ;0x6D
  147 D1:E038 52 4F 52 03 .db "ROR", 3     ;0x6E
  148 D1:E03C 52 52 41 03 .db "RRA", 3     ;0x6F
  149 D1:E040 42 56 53 08 .db "BVS", 8     ;0x70
  150 D1:E044 41 44 43 0B .db "ADC", 11     ;0x71
  151 D1:E048 4A 41 4D 00 .db "JAM", 0     ;0x72
  152 D1:E04C 52 52 41 0B .db "RRA", 11     ;0x73
  153 D1:E050 4E 4F 50 01 .db "NOP", 1     ;0x74
  154 D1:E054 41 44 43 01 .db "ADC", 1     ;0x75
  155 D1:E058 52 4F 52 01 .db "ROR", 1     ;0x76
  156 D1:E05C 52 52 41 01 .db "RRA", 1     ;0x77
  157 D1:E060 53 45 49 0A .db "SEI", 10     ;0x78
  158 D1:E064 41 44 43 0C .db "ADC", 12     ;0x79
  159 D1:E068 4E 4F 50 0A .db "NOP", 10     ;0x7A
  160 D1:E06C 52 52 41 0C .db "RRA", 12     ;0x7B
  161 D1:E070 4E 4F 50 04 .db "NOP", 4     ;0x7C
  162 D1:E074 41 44 43 04 .db "ADC", 4     ;0x7D
  163 D1:E078 52 4F 52 04 .db "ROR", 4     ;0x7E
  164 D1:E07C 52 52 41 04 .db "RRA", 4     ;0x7F
  165 D1:E080 4E 4F 50 09 .db "NOP", 9     ;0x80
  166 D1:E084 53 54 41 05 .db "STA", 5     ;0x81
  167 D1:E088 4E 4F 50 09 .db "NOP", 9     ;0x82
  168 D1:E08C 53 41 58 05 .db "SAX", 5     ;0x83
  169 D1:E090 53 54 59 07 .db "STY", 7     ;0x84
  170 D1:E094 53 54 41 07 .db "STA", 7     ;0x85
  171 D1:E098 53 54 58 07 .db "STX", 7     ;0x86
  172 D1:E09C 53 41 58 07 .db "SAX", 7     ;0x87
  173 D1:E0A0 44 45 59 0A .db "DEY", 10     ;0x88
  174 D1:E0A4 4E 4F 50 09 .db "NOP", 9     ;0x89
  175 D1:E0A8 54 58 41 0A .db "TXA", 10     ;0x8A
  176 D1:E0AC 41 4E 45 09 .db "ANE", 9     ;0x8B
  177 D1:E0B0 53 54 59 03 .db "STY", 3     ;0x8C
  178 D1:E0B4 53 54 41 03 .db "STA", 3     ;0x8D
  179 D1:E0B8 53 54 58 03 .db "STX", 3     ;0x8E
  180 D1:E0BC 53 41 58 03 .db "SAX", 3     ;0x8F
  181 D1:E0C0 42 43 43 08 .db "BCC", 8     ;0x90
  182 D1:E0C4 53 54 41 0B .db "STA", 11     ;0x91
  183 D1:E0C8 4A 41 4D 00 .db "JAM", 0     ;0x92
  184 D1:E0CC 53 48 41 0B .db "SHA", 11     ;0x93
  185 D1:E0D0 53 54 59 01 .db "STY", 1     ;0x94
  186 D1:E0D4 53 54 41 01 .db "STA", 1     ;0x95
  187 D1:E0D8 53 54 58 0D .db "STX", 13     ;0x96
  188 D1:E0DC 53 41 58 0D .db "SAX", 13     ;0x97
  189 D1:E0E0 54 59 41 0A .db "TYA", 10     ;0x98
  190 D1:E0E4 53 54 41 0C .db "STA", 12     ;0x99
  191 D1:E0E8 54 58 53 0A .db "TXS", 10     ;0x9A
  192 D1:E0EC 54 41 53 0C .db "TAS", 12     ;0x9B
  193 D1:E0F0 53 48 59 04 .db "SHY", 4     ;0x9C
  194 D1:E0F4 53 54 41 04 .db "STA", 4     ;0x9D
  195 D1:E0F8 53 48 58 0C .db "SHX", 12     ;0x9E
  196 D1:E0FC 53 48 41 0C .db "SHA", 12     ;0x9F
  197 D1:E100 4C 44 59 09 .db "LDY", 9     ;0xA0
  198 D1:E104 4C 44 41 05 .db "LDA", 5     ;0xA1
  199 D1:E108 4C 44 58 09 .db "LDX", 9     ;0xA2
  200 D1:E10C 4C 41 58 05 .db "LAX", 5     ;0xA3
  201 D1:E110 4C 44 59 07 .db "LDY", 7     ;0xA4
  202 D1:E114 4C 44 41 07 .db "LDA", 7     ;0xA5
  203 D1:E118 4C 44 58 07 .db "LDX", 7     ;0xA6
  204 D1:E11C 4C 41 58 07 .db "LAX", 7     ;0xA7
  205 D1:E120 54 41 59 0A .db "TAY", 10     ;0xA8
  206 D1:E124 4C 44 41 09 .db "LDA", 9     ;0xA9
  207 D1:E128 54 41 58 0A .db "TAX", 10     ;0xAA
  208 D1:E12C 4C 58 41 09 .db "LXA", 9     ;0xAB
  209 D1:E130 4C 44 59 03 .db "LDY", 3     ;0xAC
  210 D1:E134 4C 44 41 03 .db "LDA", 3     ;0xAD
  211 D1:E138 4C 44 58 03 .db "LDX", 3     ;0xAE
  212 D1:E13C 4C 41 58 03 .db "LAX", 3     ;0xAF
  213 D1:E140 42 43 53 08 .db "BCS", 8     ;0xB0
  214 D1:E144 4C 44 41 0B .db "LDA", 11     ;0xB1
  215 D1:E148 4A 41 4D 00 .db "JAM", 0     ;0xB2
  216 D1:E14C 4C 41 58 0B .db "LAX", 11     ;0xB3
  217 D1:E150 4C 44 59 01 .db "LDY", 1     ;0xB4
  218 D1:E154 4C 44 41 01 .db "LDA", 1     ;0xB5
  219 D1:E158 4C 44 58 0D .db "LDX", 13     ;0xB6
  220 D1:E15C 4C 41 58 0D .db "LAX", 13     ;0xB7
  221 D1:E160 43 4C 56 0A .db "CLV", 10     ;0xB8
  222 D1:E164 4C 44 41 0C .db "LDA", 12     ;0xB9
  223 D1:E168 54 53 58 0A .db "TSX", 10     ;0xBA
  224 D1:E16C 4C 41 53 0C .db "LAS", 12     ;0xBB
  225 D1:E170 4C 44 59 04 .db "LDY", 4     ;0xBC
  226 D1:E174 4C 44 41 04 .db "LDA", 4     ;0xBD
  227 D1:E178 4C 44 58 0C .db "LDX", 12     ;0xBE
  228 D1:E17C 4C 41 58 0C .db "LAX", 12     ;0xBF
  229 D1:E180 43 50 59 09 .db "CPY", 9     ;0xC0
  230 D1:E184 43 4D 50 05 .db "CMP", 5     ;0xC1
  231 D1:E188 4E 4F 50 09 .db "NOP", 9     ;0xC2
  232 D1:E18C 44 43 50 05 .db "DCP", 5     ;0xC3
  233 D1:E190 43 50 59 07 .db "CPY", 7     ;0xC4
  234 D1:E194 43 4D 50 07 .db "CMP", 7     ;0xC5
  235 D1:E198 44 45 43 07 .db "DEC", 7     ;0xC6
  236 D1:E19C 44 43 50 07 .db "DCP", 7     ;0xC7
  237 D1:E1A0 49 4E 59 0A .db "INY", 10     ;0xC8
  238 D1:E1A4 43 4D 50 09 .db "CMP", 9     ;0xC9
  239 D1:E1A8 44 45 58 0A .db "DEX", 10     ;0xCA
  240 D1:E1AC 53 42 58 09 .db "SBX", 9     ;0xCB
  241 D1:E1B0 43 50 59 03 .db "CPY", 3     ;0xCC
  242 D1:E1B4 43 4D 50 03 .db "CMP", 3     ;0xCD
  243 D1:E1B8 44 45 43 03 .db "DEC", 3     ;0xCE
  244 D1:E1BC 44 43 50 03 .db "DCP", 3     ;0xCF
  245 D1:E1C0 42 4E 45 08 .db "BNE", 8     ;0xD0
  246 D1:E1C4 43 4D 50 0B .db "CMP", 11     ;0xD1
  247 D1:E1C8 4A 41 4D 00 .db "JAM", 0     ;0xD2
  248 D1:E1CC 44 43 50 0B .db "DCP", 11     ;0xD3
  249 D1:E1D0 4E 4F 50 01 .db "NOP", 1     ;0xD4
  250 D1:E1D4 43 4D 50 01 .db "CMP", 1     ;0xD5
  251 D1:E1D8 44 45 43 01 .db "DEC", 1     ;0xD6
  252 D1:E1DC 44 43 50 01 .db "DCP", 1     ;0xD7
  253 D1:E1E0 43 4C 44 0A .db "CLD", 10     ;0xD8
  254 D1:E1E4 43 4D 50 0C .db "CMP", 12     ;0xD9
  255 D1:E1E8 4E 4F 50 0A .db "NOP", 10     ;0xDA
  256 D1:E1EC 44 43 50 0C .db "DCP", 12     ;0xDB
  257 D1:E1F0 4E 4F 50 04 .db "NOP", 4     ;0xDC
  258 D1:E1F4 43 4D 50 04 .db "CMP", 4     ;0xDD
  259 D1:E1F8 44 45 43 04 .db "DEC", 4     ;0xDE
  260 D1:E1FC 44 43 50 04 .db "DCP", 4     ;0xDF
  261 D1:E200 43 50 58 09 .db "CPX", 9     ;0xE0
  262 D1:E204 53 42 43 05 .db "SBC", 5     ;0xE1
  263 D1:E208 4E 4F 50 09 .db "NOP", 9     ;0xE2
  264 D1:E20C 49 53 43 05 .db "ISC", 5     ;0xE3
  265 D1:E210 43 50 58 07 .db "CPX", 7     ;0xE4
  266 D1:E214 53 42 43 07 .db "SBC", 7     ;0xE5
  267 D1:E218 49 4E 43 07 .db "INC", 7     ;0xE6
  268 D1:E21C 49 53 43 07 .db "ISC", 7     ;0xE7
  269 D1:E220 49 4E 58 0A .db "INX", 10     ;0xE8
  270 D1:E224 53 42 43 09 .db "SBC", 9     ;0xE9
  271 D1:E228 4E 4F 50 0A .db "NOP", 10     ;0xEA
  272 D1:E22C 55 53 42 09 .db "USB", 9     ;0xEB
  273 D1:E230 43 50 58 03 .db "CPX", 3     ;0xEC
  274 D1:E234 53 42 43 03 .db "SBC", 3     ;0xED
  275 D1:E238 49 4E 43 03 .db "INC", 3     ;0xEE
  276 D1:E23C 49 53 43 03 .db "ISC", 3     ;0xEF
  277 D1:E240 42 45 51 08 .db "BEQ", 8     ;0xF0
  278 D1:E244 53 42 43 0B .db "SBC", 11     ;0xF1
  279 D1:E248 4A 41 4D 00 .db "JAM", 0     ;0xF2
  280 D1:E24C 49 53 43 0B .db "ISC", 11     ;0xF3
  281 D1:E250 4E 4F 50 01 .db "NOP", 1     ;0xF4
  282 D1:E254 53 42 43 01 .db "SBC", 1     ;0xF5
  283 D1:E258 49 4E 43 01 .db "INC", 1     ;0xF6
  284 D1:E25C 49 53 43 01 .db "ISC", 1     ;0xF7
  285 D1:E260 53 45 44 0A .db "SED", 10     ;0xF8
  286 D1:E264 53 42 43 0C .db "SBC", 12     ;0xF9
  287 D1:E268 4E 4F 50 0A .db "NOP", 10     ;0xFA
  288 D1:E26C 49 53 43 0C .db "ISC", 12     ;0xFB
  289 D1:E270 4E 4F 50 04 .db "NOP", 4     ;0xFC
  290 D1:E274 53 42 43 04 .db "SBC", 4     ;0xFD
  291 D1:E278 49 4E 43 04 .db "INC", 4     ;0xFE
  292 D1:E27C 49 53 43 04 .db "ISC", 4     ;0xFF
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    3 D1:E280 -  -  -  -  
    4 D1:E280 -  -  -  -  
    5 D1:E280 -  -  -  -  ;You must assign a print character routine.
    6 D1:E280 -  -  -  -  ;You must also write all opcode bytes to operbuf or map operbuf to where written
    7 D1:E280 -  -  -  -  dbg_printChr    = PrintBigFont
    8 D1:E280 -  -  -  -  operbuf         = debugram
    9 D1:E280 -  -  -  -  
   10 D1:E280 -  -  -  -  
   11 D1:E280 -  -  -  -  dbg_resetScreen:
   12 D1:E280 21 00 00 D4     ld  hl,screenBuf1
   13 D1:E284 11 01 00 D4     ld  de,screenBuf1+1
   14 D1:E288 01 FF 57 02     ld  bc,(2*240*320)-1
   15 D1:E28C 36 00 -  -      ld  (hl),$00
   16 D1:E28E ED B0 -  -      ldir
   17 D1:E290 AF -  -  -      xor a,a
   18 D1:E291 CD 65 B1 D1     call setLineStart
   19 D1:E295 CD 6E B1 D1     call setCurLine
   20 D1:E299 C9 -  -  -      ret
   21 D1:E29A -  -  -  -  
   22 D1:E29A -  -  -  -  dbg_prepNextLine:
   23 D1:E29A AF -  -  -      xor a,a
   24 D1:E29B 32 F6 31 D0     ld  (xPos),a
   25 D1:E29F CD 3B B2 D1     call calculateScreenPtr
   26 D1:E2A3 EB -  -  -      ex  de,hl
   27 D1:E2A4 21 FF 2B D5     ld  hl,screenBuf2-1
   28 D1:E2A8 B7 -  -  -      or  a,a
   29 D1:E2A9 ED 52 -  -      sbc hl,de
   30 D1:E2AB -  -  -  -  ;If C: DE in sb2. subtract to set in sb1.
   31 D1:E2AB -  -  -  -  ;If NC: DE in sb1. add to set in sb2.
   32 D1:E2AB 21 00 2C 01     ld  hl,320*240
   33 D1:E2AF 30 04 -  -      jr  nc,+_
   34 D1:E2B1 21 00 D4 FE     ld  hl,-(320*240)+0
   35 D1:E2B5 19 -  -  -  _:  add hl,de   ;HL set to other buffer. DE points to current buffer.
   36 D1:E2B6 01 00 0A 00     ld  bc,320*8    ;copy one line from other buffer to current buffer.
   37 D1:E2BA 7E -  -  -  _:  ld  a,(hl)
   38 D1:E2BB C6 01 -  -      add a,1     ;carry if $FF (white), NC if not
   39 D1:E2BD 9F -  -  -      sbc a,a     ;if carry, returns to $FF, else is black
   40 D1:E2BE 77 -  -  -      ld  (hl),a
   41 D1:E2BF ED A0 -  -      ldi
   42 D1:E2C1 EA BA E2 D1     jp  pe,-_
   43 D1:E2C5 3A F7 31 D0     ld  a,(yPos)
   44 D1:E2C9 FE 1D -  -      cp  a,29
   45 D1:E2CB 20 06 -  -      jr  nz,+_
   46 D1:E2CD 21 00 D4 FE     ld  hl,-(320*240)
   47 D1:E2D1 19 -  -  -      add hl,de
   48 D1:E2D2 EB -  -  -      ex de,hl        ;if bottom of screen, then reset DE to top of screen.
   49 D1:E2D3 D5 -  -  -  _:  push de
   50 D1:E2D4 E1 -  -  -      pop hl
   51 D1:E2D5 13 -  -  -      inc de
   52 D1:E2D6 71 -  -  -      ld  (hl),c
   53 D1:E2D7 01 BF 08 00     ld  bc,(320*7)-1    ;erase whole line below it to prepare for writing.
   54 D1:E2DB ED B0 -  -      ldir
   55 D1:E2DD C9 -  -  -      ret
   56 D1:E2DE -  -  -  -  
   57 D1:E2DE -  -  -  -  ;Input: ix = core_memory_ix 
   58 D1:E2DE -  -  -  -  ;Output: Text onscreen
   59 D1:E2DE -  -  -  -  dbg_printLine:
   60 D1:E2DE E5 C5 D5 DD 
              E5 FD E5 F5     push hl \ push bc \ push de \ push ix \ push iy \ push af
   61 D1:E2E6 ED 23 00 -      lea hl,iy+0
   62 D1:E2E9 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl
   63 D1:E2EC 11 00 00 00     ld  de,DEBUG_PRINT_START_CYCLE
   64 D1:E2F0 B7 -  -  -      or  a,a
   65 D1:E2F1 ED 52 -  -      sbc hl,de
   66 D1:E2F3 DA D7 E3 D1     jp  c,dbg_printLine_noPrint
   67 D1:E2F7 -  -  -  -  
   68 D1:E2F7 3E 1A -  -      ld  a,$1A   ;blue
   69 D1:E2F9 32 BD B1 D1     ld  (fontBGColor_var),a
   70 D1:E2FD 32 0A B2 D1     ld  (smallFontBGColor_var),a
   71 D1:E301 DD 27 0E -      ld  hl,(ix+CURRENT_OPCODES)
   72 D1:E304 22 F9 31 D0     ld  (operbuf),hl
   73 D1:E308 CD 9A E2 D1     call dbg_prepNextLine
   74 D1:E30C CD 79 B1 D1     call newLine
   75 D1:E310 DD 7E 06 -      ld  a,(ix+REGPC+1)
   76 D1:E313 CD D6 B1 D1     call printSmallNumPair
   77 D1:E317 DD 7E 05 -      ld  a,(ix+REGPC+0)
   78 D1:E31A CD D6 B1 D1     call printSmallNumPair
   79 D1:E31E 3E 20 -  -      ld  a,' '
   80 D1:E320 CD A6 B1 D1     call printBigFont
   81 D1:E324 -  -  -  -      ;
   82 D1:E324 3E 41 -  -      ld  a,'A'
   83 D1:E326 CD A6 B1 D1     call printBigFont
   84 D1:E32A DD 7E 00 -      ld  a,(ix+REGA)
   85 D1:E32D CD D6 B1 D1     call printSmallNumPair
   86 D1:E331 3E 20 -  -      ld  a,' '
   87 D1:E333 CD A6 B1 D1     call printBigFont
   88 D1:E337 -  -  -  -      ;
   89 D1:E337 3E 58 -  -      ld  a,'X'
   90 D1:E339 CD A6 B1 D1     call printBigFont
   91 D1:E33D DD 7E 01 -      ld  a,(ix+REGX)
   92 D1:E340 CD D6 B1 D1     call printSmallNumPair
   93 D1:E344 3E 20 -  -      ld  a,' '
   94 D1:E346 CD A6 B1 D1     call printBigFont
   95 D1:E34A -  -  -  -      ;
   96 D1:E34A 3E 59 -  -      ld  a,'Y'
   97 D1:E34C CD A6 B1 D1     call printBigFont
   98 D1:E350 DD 7E 02 -      ld  a,(ix+REGY)
   99 D1:E353 CD D6 B1 D1     call printSmallNumPair
  100 D1:E357 3E 20 -  -      ld  a,' '
  101 D1:E359 CD A6 B1 D1     call printBigFont
  102 D1:E35D -  -  -  -      ;
  103 D1:E35D 3E 53 -  -      ld  a,'S'
  104 D1:E35F CD A6 B1 D1     call printBigFont
  105 D1:E363 DD 7E 03 -      ld  a,(ix+REGSP)
  106 D1:E366 CD D6 B1 D1     call printSmallNumPair
  107 D1:E36A 3E 20 -  -      ld  a,' '
  108 D1:E36C CD A6 B1 D1     call printBigFont
  109 D1:E370 -  -  -  -      ;
  110 D1:E370 3E 50 -  -      ld  a,'P'
  111 D1:E372 CD A6 B1 D1     call printBigFont
  112 D1:E376 DD 7E 04 -      ld  a,(ix+REGSR)
  113 D1:E379 CD D6 B1 D1     call printSmallNumPair
  114 D1:E37D 3E 20 -  -      ld  a,' '
  115 D1:E37F CD A6 B1 D1     call printBigFont
  116 D1:E383 -  -  -  -  
  117 D1:E383 -  -  -  -      ;
  118 D1:E383 -  -  -  -  ;    ld  hl,dbg_printLine_str001
  119 D1:E383 -  -  -  -  ;    call printString
  120 D1:E383 -  -  -  -  ;    ld  b,5
  121 D1:E383 -  -  -  -  ;    lea hl,ix+0
  122 D1:E383 -  -  -  -  ;_:  ld  a,(hl)
  123 D1:E383 -  -  -  -  ;    inc hl
  124 D1:E383 -  -  -  -  ;    push bc
  125 D1:E383 -  -  -  -  ;        push hl
  126 D1:E383 -  -  -  -  ;            call printSmallNumPair
  127 D1:E383 -  -  -  -  ;            ld  a,' '
  128 D1:E383 -  -  -  -  ;            call printBigFont
  129 D1:E383 -  -  -  -  ;        pop hl
  130 D1:E383 -  -  -  -  ;    pop bc
  131 D1:E383 -  -  -  -  ;    djnz -_
  132 D1:E383 -  -  -  -  
  133 D1:E383 DD 7E 0D -      ld  a,(ix+CYCLES_CURRENT+2)
  134 D1:E386 CD D6 B1 D1     call printSmallNumPair
  135 D1:E38A DD 7E 0C -      ld  a,(ix+CYCLES_CURRENT+1)
  136 D1:E38D CD D6 B1 D1     call printSmallNumPair
  137 D1:E391 DD 7E 0B -      ld  a,(ix+CYCLES_CURRENT+0)
  138 D1:E394 CD D6 B1 D1     call printSmallNumPair
  139 D1:E398 3E 20 -  -      ld  a,' '
  140 D1:E39A CD A6 B1 D1     call printBigFont
  141 D1:E39E 2A F9 31 D0     ld  hl,(operbuf)
  142 D1:E3A2 DD 2F 0E -      ld  (ix+CURRENT_OPCODES),hl
  143 D1:E3A5 7D -  -  -      ld  a,L
  144 D1:E3A6 CD C7 E4 D1     call dbg_getInstSize
  145 D1:E3AA 06 03 -  -      ld  b,3
  146 D1:E3AC 4F -  -  -      ld  c,a
  147 D1:E3AD 0C -  -  -      inc c
  148 D1:E3AE ED 22 0E -      lea hl,ix+CURRENT_OPCODES
  149 D1:E3B1 7E -  -  -  _:  ld  a,(hl)
  150 D1:E3B2 23 -  -  -      inc hl
  151 D1:E3B3 E5 -  -  -      push hl
  152 D1:E3B4 0D -  -  -          dec c
  153 D1:E3B5 F2 BA E3 D1         jp p,+_
  154 D1:E3B9 0C -  -  -          inc c   ;never let c go below zero.
  155 D1:E3BA C5 -  -  -  _:      push bc
  156 D1:E3BB 28 06 -  -              jr  z,+_
  157 D1:E3BD CD D6 B1 D1             call printSmallNumPair
  158 D1:E3C1 18 06 -  -              jr ++_
  159 D1:E3C3 3E 20 -  -  _:          ld  a,' '
  160 D1:E3C5 CD A6 B1 D1             call printBigFont
  161 D1:E3C9 C1 -  -  -  _:      pop bc
  162 D1:E3CA E1 -  -  -      pop hl
  163 D1:E3CB 10 E4 -  -      djnz ----_
  164 D1:E3CD 3E 20 -  -      ld  a,' '
  165 D1:E3CF CD A6 B1 D1     call printBigFont
  166 D1:E3D3 CD DF E4 D1     call dbg_printDisassembly
  167 D1:E3D7 -  -  -  -  
  168 D1:E3D7 -  -  -  -      ;
  169 D1:E3D7 -  -  -  -      ;Remove section below when done testing nestest for timings
  170 D1:E3D7 -  -  -  -      ;
  171 D1:E3D7 -  -  -  -  dbg_printLine_noPrint:
  172 D1:E3D7 11 00 00 00     ld  de,0
  173 D1:E3DB 2A 4D 34 D0     ld  hl,(timings_base)
  174 D1:E3DF 5E -  -  -      ld  e,(hl)
  175 D1:E3E0 23 -  -  -      inc hl
  176 D1:E3E1 56 -  -  -      ld  d,(hl)
  177 D1:E3E2 23 -  -  -      inc hl
  178 D1:E3E3 22 4D 34 D0     ld  (timings_base),hl
  179 D1:E3E7 DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  180 D1:E3EA B7 -  -  -      or  a,a
  181 D1:E3EB ED 52 -  -      sbc hl,de
  182 D1:E3ED 28 17 -  -      jr  z,+_
  183 D1:E3EF 21 FF FF FF     ld  hl,-1
  184 D1:E3F3 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  185 D1:E3F6 CD 79 B1 D1     call newLine
  186 D1:E3FA 21 8A E4 D1     ld  hl,dbg_printLine_timeMismatch
  187 D1:E3FE CD 90 B1 D1     call printString
  188 D1:E402 DD 36 14 01     ld  (ix+CORE_ERROR_LEVEL),1
  189 D1:E406 2A 4D 34 D0 _:  ld  hl,(timings_base)
  190 D1:E40A 7E -  -  -      ld  a,(hl)
  191 D1:E40B 23 -  -  -      inc hl
  192 D1:E40C 22 4D 34 D0     ld  (timings_base),hl
  193 D1:E410 DD BE 04 -      cp  a,(ix+REGSR)
  194 D1:E413 28 17 -  -      jr  z,+_
  195 D1:E415 21 FF FF FF     ld  hl,-1
  196 D1:E419 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  197 D1:E41C CD 79 B1 D1     call newLine
  198 D1:E420 21 A4 E4 D1     ld  hl,dbg_printLine_statusRegisterMismatch
  199 D1:E424 CD 90 B1 D1     call printString
  200 D1:E428 DD 36 14 02     ld  (ix+CORE_ERROR_LEVEL),2
  201 D1:E42C -  -  -  -  _:
  202 D1:E42C -  -  -  -      ;
  203 D1:E42C -  -  -  -      ;End debug-debug section
  204 D1:E42C -  -  -  -      ;
  205 D1:E42C CD 9C B0 D1     call fastCopy
  206 D1:E430 AF -  -  -      xor a,a     ;black
  207 D1:E431 32 BD B1 D1     ld  (fontBGColor_var),a
  208 D1:E435 32 0A B2 D1     ld  (smallFontBGColor_var),a
  209 D1:E439 -  -  -  -  
  210 D1:E439 F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  211 D1:E441 -  -  -  -      ;push hl \ push bc \ push de \ push ix \ push iy \ push af
  212 D1:E441 C9 -  -  -      ret
  213 D1:E442 -  -  -  -  
  214 D1:E442 -  -  -  -  
  215 D1:E442 -  -  -  -      ;also remove this when done timing debugging
  216 D1:E442 11 00 00 00     ld  de,0
  217 D1:E446 2A 4D 34 D0     ld  hl,(timings_base)
  218 D1:E44A 5E -  -  -      ld  e,(hl)
  219 D1:E44B 23 -  -  -      inc hl
  220 D1:E44C 56 -  -  -      ld  d,(hl)
  221 D1:E44D 23 -  -  -      inc hl
  222 D1:E44E 22 4D 34 D0     ld  (timings_base),hl
  223 D1:E452 DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  224 D1:E455 B7 -  -  -      or  a,a
  225 D1:E456 ED 52 -  -      sbc hl,de
  226 D1:E458 28 13 -  -      jr  z,+_
  227 D1:E45A 21 FF FF FF     ld  hl,-1
  228 D1:E45E DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  229 D1:E461 CD 79 B1 D1     call newLine
  230 D1:E465 21 8A E4 D1     ld  hl,dbg_printLine_timeMismatch
  231 D1:E469 CD 90 B1 D1     call printString
  232 D1:E46D -  -  -  -  _:  ;
  233 D1:E46D -  -  -  -      ;End debug-debug section
  234 D1:E46D -  -  -  -      ;
  235 D1:E46D CD 9C B0 D1     call fastCopy
  236 D1:E471 AF -  -  -      xor a,a     ;black
  237 D1:E472 32 BD B1 D1     ld  (fontBGColor_var),a
  238 D1:E476 32 0A B2 D1     ld  (smallFontBGColor_var),a
  239 D1:E47A F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  240 D1:E482 C9 -  -  -      ret
  241 D1:E483 -  -  -  -  
  242 D1:E483 -  -  -  -  dbg_printLine_str001:
  243 D1:E483 41 58 59 53 
              50 20 00 -  .db "AXYSP ",0
  244 D1:E48A -  -  -  -  dbg_printLine_timeMismatch:
  245 D1:E48A 43 50 55 20 
              54 65 73 74 
              20 74 69 6D 
              69 6E 67 20 
              6D 69 73 6D 
              61 74 63 68 
              2E 00 -  -  .db "CPU Test timing mismatch.",0
  246 D1:E4A4 -  -  -  -  dbg_printLine_statusRegisterMismatch:
  247 D1:E4A4 -  -  -  -  ;    0123456789012345678901234567890123456789
  248 D1:E4A4 43 50 55 20 
              54 65 73 74 
              20 73 74 61 
              74 75 73 20 
              72 65 67 69 
              73 74 65 72 
              20 6D 69 73 
              6D 61 74 63 
              68 2E 00 -  .db "CPU Test status register mismatch.",0
  249 D1:E4C7 -  -  -  -  
  250 D1:E4C7 -  -  -  -  
  251 D1:E4C7 -  -  -  -  
  252 D1:E4C7 -  -  -  -  
  253 D1:E4C7 -  -  -  -  
  254 D1:E4C7 -  -  -  -  
  255 D1:E4C7 -  -  -  -  ;A=instruction. Returns: A=size
  256 D1:E4C7 -  -  -  -  dbg_getInstSize:
  257 D1:E4C7 E5 D5 -  -      push hl \ push de
  258 D1:E4C9 57 -  -  -          ld  d,a
  259 D1:E4CA 1E 04 -  -          ld  e,4
  260 D1:E4CC ED 5C -  -          mlt de
  261 D1:E4CE 21 83 DE D1         ld  hl,inst6502_disassembly_table+3
  262 D1:E4D2 19 -  -  -          add hl,de
  263 D1:E4D3 16 00 -  -          ld  d,0
  264 D1:E4D5 5E -  -  -          ld  e,(hl)
  265 D1:E4D6 21 45 DE D1         ld  hl,inst6502_opcode_width_table
  266 D1:E4DA 19 -  -  -          add hl,de
  267 D1:E4DB 7E -  -  -          ld  a,(hl)
  268 D1:E4DC D1 E1 -  -      pop de \ pop hl
  269 D1:E4DE C9 -  -  -      ret
  270 D1:E4DF -  -  -  -  
  271 D1:E4DF -  -  -  -  dbg_printDisassembly:
  272 D1:E4DF F5 C5 D5 E5 
              DD E5 -  -      push af \ push bc \ push de \ push hl \ push ix
  273 D1:E4E5 -  -  -  -      ;find entry in disassembly table
  274 D1:E4E5 2A F9 31 D0     ld  hl,(operbuf)
  275 D1:E4E9 26 04 -  -      ld  H,4
  276 D1:E4EB ED 6C -  -      mlt hl
  277 D1:E4ED 11 80 DE D1     ld  de,inst6502_disassembly_table
  278 D1:E4F1 19 -  -  -      add hl,de
  279 D1:E4F2 06 03 -  -      ld  b,3
  280 D1:E4F4 7E -  -  -  _:  ld  a,(hl)
  281 D1:E4F5 23 -  -  -      inc hl
  282 D1:E4F6 CD 7C E5 D1     call dbg_printC
  283 D1:E4FA 10 F8 -  -      djnz -_
  284 D1:E4FC 3E 20 -  -      ld  a,' '
  285 D1:E4FE CD 7C E5 D1     call dbg_printC
  286 D1:E502 46 -  -  -      ld  b,(hl)
  287 D1:E503 04 -  -  -      inc b
  288 D1:E504 -  -  -  -      ;Instruction addressing mode in B. Now find text for that address mode.
  289 D1:E504 21 53 DE D1     ld  hl,inst6502_disassembler
  290 D1:E508 11 00 00 00     ld  de,0
  291 D1:E50C 5E -  -  -  _:  ld  e,(hl)
  292 D1:E50D 19 -  -  -      add hl,de
  293 D1:E50E 10 FC -  -      djnz -_
  294 D1:E510 1D -  -  -      dec e
  295 D1:E511 28 29 -  -      jr  z,dbg_printDisassembly_end  ;stop if text is zero-sized
  296 D1:E513 ED 52 -  -      sbc hl,de   ;rewind to start of text part of instruction. E is text length.
  297 D1:E515 43 -  -  -      ld  b,e
  298 D1:E516 -  -  -  -  dbg_printDisassembly_printOperandLoop:
  299 D1:E516 7E -  -  -      ld  a,(hl)
  300 D1:E517 23 -  -  -      inc hl
  301 D1:E518 FE 31 -  -      cp  a,'1'
  302 D1:E51A 20 06 -  -      jr  nz,+_
  303 D1:E51C CD 60 E5 D1     call dbg_printOperand1
  304 D1:E520 18 18 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  305 D1:E522 FE 32 -  -  _:  cp  a,'2'
  306 D1:E524 20 06 -  -      jr  nz,+_
  307 D1:E526 CD 58 E5 D1     call dbg_printOperand2
  308 D1:E52A 18 0E -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  309 D1:E52C FE 2D -  -  _:  cp  a,'-'
  310 D1:E52E 20 06 -  -      jr  nz,+_
  311 D1:E530 CD 43 E5 D1     call dbg_printRel1
  312 D1:E534 18 04 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  313 D1:E536 CD 7C E5 D1 _:  call dbg_printC
  314 D1:E53A -  -  -  -  dbg_PrintDisassembly_printOperandFallthrough:
  315 D1:E53A 10 DA -  -      djnz dbg_printDisassembly_printOperandLoop
  316 D1:E53C -  -  -  -  dbg_printDisassembly_end:
  317 D1:E53C DD E1 E1 D1 
              C1 F1 -  -      pop ix \ pop hl \ pop de \ pop bc \ pop af
  318 D1:E542 C9 -  -  -      ret
  319 D1:E543 -  -  -  -  
  320 D1:E543 -  -  -  -  dbg_printRel1:
  321 D1:E543 3A FA 31 D0     ld  a,(operbuf+1)
  322 D1:E547 B7 -  -  -      or  a,a
  323 D1:E548 F2 56 E5 D1     jp  p,dbg_printRel1_skipNeg
  324 D1:E54C F5 -  -  -      push af
  325 D1:E54D 3E 2D -  -          ld   a,'-'
  326 D1:E54F CD 7C E5 D1         call dbg_printC
  327 D1:E553 F1 -  -  -      pop af
  328 D1:E554 ED 44 -  -      neg
  329 D1:E556 -  -  -  -  dbg_printRel1_skipNeg:
  330 D1:E556 18 0C -  -      jr dbg_printHex
  331 D1:E558 -  -  -  -  
  332 D1:E558 -  -  -  -  dbg_printOperand2:
  333 D1:E558 3A FB 31 D0     ld  a,(operbuf+2)
  334 D1:E55C CD 64 E5 D1     call dbg_printHex
  335 D1:E560 -  -  -  -  dbg_printOperand1:
  336 D1:E560 3A FA 31 D0     ld  a,(operbuf+1)
  337 D1:E564 -  -  -  -  dbg_printHex:
  338 D1:E564 CD 69 E5 D1     call dispAHex
  339 D1:E568 C9 -  -  -      ret
  340 D1:E569 -  -  -  -  
  341 D1:E569 -  -  -  -  dispAHex:
  342 D1:E569 F5 -  -  -      push af
  343 D1:E56A CD 71 E5 D1         call +_
  344 D1:E56E F1 -  -  -      pop af
  345 D1:E56F 18 04 -  -      jr  ++_
  346 D1:E571 1F -  -  -  _:  rra
  347 D1:E572 1F -  -  -      rra
  348 D1:E573 1F -  -  -      rra
  349 D1:E574 1F -  -  -      rra
  350 D1:E575 F6 F0 -  -  _:  or  a,$F0
  351 D1:E577 27 -  -  -      daa
  352 D1:E578 C6 A0 -  -      add a,$A0
  353 D1:E57A CE 40 -  -      adc a,$40
  354 D1:E57C -  -  -  -  dbg_printC:
  355 D1:E57C E5 -  -  -      push hl
  356 D1:E57D C5 -  -  -          push bc
  357 D1:E57E CD A6 B1 D1             call dbg_printChr
  358 D1:E582 C1 -  -  -          pop bc
  359 D1:E583 E1 -  -  -      pop hl
  360 D1:E584 C9 -  -  -      ret
Listing for file "main.z80"
  974 D1:E585 -  -  -  -  #include "ppu.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ppu.z80"
    1 D1:E585 -  -  -  -  ;PPU-related stuff is written here, though not all of it is localized in
    2 D1:E585 -  -  -  -  ;this file. Some of it will necessarily be located with the mapper code
    3 D1:E585 -  -  -  -  ;that handles PPU I/O.
    4 D1:E585 -  -  -  -  
    5 D1:E585 -  -  -  -  
    6 D1:E585 -  -  -  -      ;Do this before a lot of other things.
    7 D1:E585 -  -  -  -      ;Select current character rom banks from PPU settings.
    8 D1:E585 2A 46 34 D0     ld  hl,(chr_rom_base)
    9 D1:E589 01 00 10 00     ld  bc,$001000
   10 D1:E58D DD 7E E0 -      ld  a,(ix+PPU_CTRL)
   11 D1:E590 E5 -  -  -      push hl
   12 D1:E591 CB 67 -  -          bit 4,a     ;background pattern base offset
   13 D1:E593 28 01 -  -          jr  z,+_
   14 D1:E595 09 -  -  -          add hl,bc
   15 D1:E596 22 20 34 D0 _:      ld  (chr_rom_tiles),hl
   16 D1:E59A E1 -  -  -      pop hl
   17 D1:E59B CB 6F -  -      bit 5,a     ;sprite pattern base offset
   18 D1:E59D 28 01 -  -      jr  z,+_
   19 D1:E59F 09 -  -  -      add hl,bc
   20 D1:E5A0 22 24 34 D0 _:  ld  (chr_rom_sprites),hl
   21 D1:E5A4 -  -  -  -  
   22 D1:E5A4 -  -  -  -  
   23 D1:E5A4 -  -  -  -  
   24 D1:E5A4 -  -  -  -      ;B=Y, C=X. Obtain nametable address
   25 D1:E5A4 -  -  -  -      ;You must preserve BC yourself. Somehow. Or not depending on how you loop.
   26 D1:E5A4 -  -  -  -      ;B and C are modified to fit inside the nametable selected.
   27 D1:E5A4 21 80 06 1A     ld  hl,nametable00>>3
   28 D1:E5A8 78 -  -  -      ld  a,b
   29 D1:E5A9 D6 20 -  -      sub 32
   30 D1:E5AB 38 01 -  -      jr  c,+_
   31 D1:E5AD 78 -  -  -      ld  a,b
   32 D1:E5AE 47 -  -  -  _:  ld  b,a
   33 D1:E5AF 3F -  -  -      ccf
   34 D1:E5B0 ED 6A -  -      adc hl,hl
   35 D1:E5B2 79 -  -  -      ld  a,c
   36 D1:E5B3 D6 1E -  -      sub 30
   37 D1:E5B5 38 01 -  -      jr  c,+_
   38 D1:E5B7 79 -  -  -      ld  a,c
   39 D1:E5B8 4F -  -  -  _:  ld  c,a
   40 D1:E5B9 3F -  -  -      ccf
   41 D1:E5BA ED 6A -  -      adc hl,hl
   42 D1:E5BC 29 -  -  -      add hl,hl   ;HL is now a pointer. do ld hl,(hl) to get actual NT address.
   43 D1:E5BD -  -  -  -  
   44 D1:E5BD -  -  -  -  
   45 D1:E5BD -  -  -  -      ;Increment C=X, adjusting nametable pointer table in HL if crossover
   46 D1:E5BD 0C -  -  -      inc c
   47 D1:E5BE 79 -  -  -      ld  a,c
   48 D1:E5BF FE 20 -  -      cp  a,32
   49 D1:E5C1 38 06 -  -      jr  c,+_
   50 D1:E5C3 0E 00 -  -      ld  c,0
   51 D1:E5C5 7D -  -  -      ld  a,L
   52 D1:E5C6 EE 04 -  -      xor a,%00000100
   53 D1:E5C8 6F -  -  -      ld  L,a
   54 D1:E5C9 00 -  -  -  _:  nop
   55 D1:E5CA -  -  -  -  
   56 D1:E5CA -  -  -  -      ;Increment B=Y, adjusting nametable pointer table in HL if crossover
   57 D1:E5CA 04 -  -  -      inc b
   58 D1:E5CB 78 -  -  -      ld  a,b
   59 D1:E5CC FE 1E -  -      cp  a,30
   60 D1:E5CE 38 06 -  -      jr  c,+_
   61 D1:E5D0 06 00 -  -      ld  b,0
   62 D1:E5D2 7D -  -  -      ld  a,L
   63 D1:E5D3 EE 08 -  -      xor a,%00001000
   64 D1:E5D5 6F -  -  -      ld  L,a
   65 D1:E5D6 00 -  -  -  _:  nop
   66 D1:E5D7 -  -  -  -  
   67 D1:E5D7 -  -  -  -      ;Retrieves attribute byte from B=Y, C=X
   68 D1:E5D7 -  -  -  -      ;HL=nametable pointer table
   69 D1:E5D7 -  -  -  -      ;NTptr tab low byte fmt: %000TIIAA. T=attrib, I=ID, A=address bytes
   70 D1:E5D7 D5 -  -  -      push de
   71 D1:E5D8 79 -  -  -          ld  a,c
   72 D1:E5D9 CB 3F -  -          srl a
   73 D1:E5DB CB 3F -  -          srl a   ;change 0-30 to 0-7. Discards low 2 bits.
   74 D1:E5DD 5F -  -  -          ld  e,a
   75 D1:E5DE 78 -  -  -          ld  a,b
   76 D1:E5DF E6 03 -  -          and a,3 ;discard two lower bits
   77 D1:E5E1 87 -  -  -          add a,a ;But place remaining bits up higher
   78 D1:E5E2 83 -  -  -          add a,e ;A=%00YYYXXX
   79 D1:E5E3 CB E5 -  -          set 4,L ;swap to attrib
   80 D1:E5E5 ED 17 -  -          ld  de,(hl)
   81 D1:E5E7 CB A5 -  -          res 4,L ;swap back to main nametable pointers
   82 D1:E5E9 83 -  -  -          add a,e ;base is $C0. This will not produce a carry.
   83 D1:E5EA 5F -  -  -          ld  e,a
   84 D1:E5EB 1A -  -  -          ld  a,(de)
   85 D1:E5EC D1 -  -  -      pop de
   86 D1:E5ED -  -  -  -  
   87 D1:E5ED -  -  -  -      ;Selects attribute from A from B=Y, C=X in format %0000AA00
   88 D1:E5ED CB 48 -  -      bit 1,b
   89 D1:E5EF 28 04 -  -      jr  z,+_
   90 D1:E5F1 07 -  -  -      rlca    ;If not zero, shift upper nibble into lower nibble
   91 D1:E5F2 07 -  -  -      rlca    ;for further selection.
   92 D1:E5F3 07 -  -  -      rlca
   93 D1:E5F4 07 -  -  -      rlca
   94 D1:E5F5 CB 49 -  -  _:  bit 1,c
   95 D1:E5F7 20 02 -  -      jr  nz,+_   ;If not zero, upper 2 bits of lower nibble already in position
   96 D1:E5F9 07 -  -  -      rlca        ;Otherwise, move them into position
   97 D1:E5FA 07 -  -  -      rlca        
   98 D1:E5FB E6 0C -  -  _:  and a,%00001100
   99 D1:E5FD -  -  -  -  
  100 D1:E5FD -  -  -  -      ;Nametable/tilemap variant
  101 D1:E5FD -  -  -  -      ;Sets DE to current location in nametable wrt B=Y, C=X
  102 D1:E5FD -  -  -  -      ;HL=current nametable pointer
  103 D1:E5FD E5 -  -  -      push hl
  104 D1:E5FE ED 27 -  -          ld  hl,(hl)
  105 D1:E600 1E 20 -  -          ld  e,32
  106 D1:E602 50 -  -  -          ld  d,b
  107 D1:E603 ED 5C -  -          mlt de
  108 D1:E605 7B -  -  -          ld  a,e
  109 D1:E606 81 -  -  -          add a,c
  110 D1:E607 5F -  -  -          ld  e,a
  111 D1:E608 19 -  -  -          add hl,de
  112 D1:E609 -  -  -  -          ;ex  de,hl
  113 D1:E609 E1 -  -  -      pop hl
  114 D1:E60A -  -  -  -  
  115 D1:E60A -  -  -  -      ;TODO: Find way to link stuff above. The task set forth is the following:
  116 D1:E60A -  -  -  -      ;Create the main tile rendering loop. We must track the following:
  117 D1:E60A -  -  -  -      ;   Screen pointer, nametable position, loop parameters.
  118 D1:E60A -  -  -  -      ;With these, we will:
  119 D1:E60A -  -  -  -      ;1. Get tileID from nametable position
  120 D1:E60A -  -  -  -      ;2. Get attribute data associated with that tile.
  121 D1:E60A -  -  -  -      ;3. Retrieve CHR_ROM data and
  122 D1:E60A -  -  -  -      ;4. Combine it to retrieve color data, then write it to screen buffer.
  123 D1:E60A -  -  -  -      ;
  124 D1:E60A -  -  -  -      ;Later on, insert a cacheing step between 2 and 3. to selectively
  125 D1:E60A -  -  -  -      ;modify step 4.
  126 D1:E60A -  -  -  -      ;
  127 D1:E60A -  -  -  -      ; Do in the inlining thing later.
  128 D1:E60A -  -  -  -      ;
  129 D1:E60A -  -  -  -  
  130 D1:E60A -  -  -  -  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  131 D1:E60A -  -  -  -  ;    ***   *** ***** *   *  ***  *          *** ***** *   * ***** *****
  132 D1:E60A -  -  -  -  ;   *   * *      *   *   * *   * *         *      *   *   * *     *    
  133 D1:E60A -  -  -  -  ;   ***** *      *   *   * ***** *          ***   *   *   * ***   ***  
  134 D1:E60A -  -  -  -  ;   *   * *      *   *   * *   * *             *  *   *   * *     *    
  135 D1:E60A -  -  -  -  ;   *   *  ***   *    ***  *   * *****      ***   *    ***  *     *    
  136 D1:E60A -  -  -  -  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  137 D1:E60A -  -  -  -  
  138 D1:E60A -  -  -  -  
  139 D1:E60A -  -  -  -  
  140 D1:E60A -  -  -  -  ;
  141 D1:E60A -  -  -  -  ppu_init:
  142 D1:E60A -  -  -  -      ;
  143 D1:E60A DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
  144 D1:E60F ED 22 80 -      lea hl,ix-128
  145 D1:E612 ED 12 81 -      lea de,ix-127
  146 D1:E615 01 7E 00 00     ld  bc,126
  147 D1:E619 36 00 -  -      ld  (hl),$00
  148 D1:E61B ED B0 -  -      ldir
  149 D1:E61D -  -  -  -      ;
  150 D1:E61D 3E 55 -  -      ld  a,WREG_CONST
  151 D1:E61F DD 77 F4 -      ld  (ix+PPU_W),a
  152 D1:E622 -  -  -  -      ;
  153 D1:E622 11 00 02 E3     ld  de,mpLcdPalette
  154 D1:E626 21 F4 E8 D1     ld  hl,paletteData
  155 D1:E62A 01 80 00 00     ld  bc,64*2
  156 D1:E62E ED B0 -  -      ldir
  157 D1:E630 -  -  -  -      ;
  158 D1:E630 -  -  -  -  
  159 D1:E630 -  -  -  -  
  160 D1:E630 AF -  -  -      xor a,a
  161 D1:E631 32 60 34 D0     ld  (int_table_len),a
  162 D1:E635 11 46 E6 D1     ld  de,ppu_isr
  163 D1:E639 01 23 6D 00     ld  bc,27939
  164 D1:E63D CD 0E B6 D1     call int6502_insertISA  ;sets ix. ix before this unknown.
  165 D1:E641 DD 36 F1 02     ld  (ix+PPU_SUBCYCLE),2
  166 D1:E645 C9 -  -  -      ret
  167 D1:E646 -  -  -  -  
  168 D1:E646 -  -  -  -  
  169 D1:E646 -  -  -  -  
  170 D1:E646 -  -  -  -  ;Some bits of this is in "coreint.z80"
  171 D1:E646 -  -  -  -  ppu_isr:
  172 D1:E646 3A 20 00 F0     ld  a,($F00020)
  173 D1:E64A E6 01 -  -      and a,%0000001
  174 D1:E64C C2 83 A9 D1     jp  nz,endCurrentRun    ;stop execution when ON key is pressed
  175 D1:E650 -  -  -  -  
  176 D1:E650 DD 7E E0 -      ld  a,(ix+PPU_CTRL)
  177 D1:E653 E6 18 -  -      and a,%00011000     ;sprite and background. if zero, no rendering happens.
  178 D1:E655 -  -  -  -      ;jr  z,ppu_isr_nodraw
  179 D1:E655 -  -  -  -      ;perform the check that makes odd cycles one ppu cc shorter, but only if
  180 D1:E655 -  -  -  -      ;something is being rendered to the screen
  181 D1:E655 DD 7E F5 -      ld  a,(ix+PPU_FRAMECOUNT)
  182 D1:E658 0F -  -  -      rrca
  183 D1:E659 30 03 -  -      jr  nc,+_
  184 D1:E65B DD 35 F1 -      dec (ix+PPU_SUBCYCLE)
  185 D1:E65E -  -  -  -  _:  ;there... should be something else to do?
  186 D1:E65E -  -  -  -      ;call ppu_drawBGSprites
  187 D1:E65E FD E5 -  -      push iy
  188 D1:E660 CD AC E6 D1         call ppu_drawFrame
  189 D1:E664 FD E1 -  -      pop iy
  190 D1:E666 -  -  -  -      ;call ppu_drawFGSprites
  191 D1:E666 -  -  -  -  ppu_isr_nodraw:
  192 D1:E666 DD 34 F5 -      inc (ix+PPU_FRAMECOUNT)
  193 D1:E669 01 23 6D 00     ld  bc,27939
  194 D1:E66D DD 7E F1 -      ld  a,(ix+PPU_SUBCYCLE)
  195 D1:E670 C6 02 -  -      add a,2     ;add the 2/3rds cycle
  196 D1:E672 FE 03 -  -      cp  a,3     ;but is it more than 3? (0,1,2)
  197 D1:E674 38 03 -  -      jr  c,+_
  198 D1:E676 D6 03 -  -      sub a,3
  199 D1:E678 03 -  -  -      inc bc
  200 D1:E679 DD 77 F1 -  _:  ld  (ix+PPU_SUBCYCLE),a
  201 D1:E67C ED 23 00 -      lea hl,iy+0
  202 D1:E67F B7 -  -  -      or  a,a
  203 D1:E680 ED 42 -  -      sbc hl,bc
  204 D1:E682 E5 -  -  -      push hl
  205 D1:E683 FD E1 -  -      pop iy
  206 D1:E685 11 46 E6 D1     ld  de,ppu_isr
  207 D1:E689 CD B1 B5 D1     call int6502_adjustTimings
  208 D1:E68D CD D1 B5 D1     call int6502_pushISRAfterPop
  209 D1:E691 DD CB E2 FE     set 7,(ix+PPU_STATUS)
  210 D1:E695 2A 4A 34 D0     ld  hl,(ppu_smc_gate)
  211 D1:E699 36 00 -  -      ld  (hl),$00        ;nop out ret so writes no longer ignored.
  212 D1:E69B -  -  -  -      ;
  213 D1:E69B -  -  -  -      ; TODO: Figure this one out:
  214 D1:E69B -  -  -  -      ; Do we need something to unset VBlank active flag at the end of
  215 D1:E69B -  -  -  -      ; VBlank if left unread?
  216 D1:E69B -  -  -  -      ;
  217 D1:E69B DD CB E0 7E     bit 7,(ix+PPU_CTRL)     ;VBlank NMI enable flag
  218 D1:E69F CA D5 B6 D1     jp  z,i6502RetryFirstLoad
  219 D1:E6A3 3E FF -  -      ld  a,$FF
  220 D1:E6A5 DD 77 1E -      ld  (ix+NMI_TRIGGERED),a
  221 D1:E6A8 C3 74 CD D1     jp  inst6502_brk
  222 D1:E6AC -  -  -  -  
  223 D1:E6AC -  -  -  -  
  224 D1:E6AC -  -  -  -  
  225 D1:E6AC -  -  -  -  
  226 D1:E6AC -  -  -  -  
  227 D1:E6AC -  -  -  -  
  228 D1:E6AC -  -  -  -  ppu_drawFrame:
  229 D1:E6AC -  -  -  -  
  230 D1:E6AC -  -  -  -  ;backdrop color. Do not render the following if there are no
  231 D1:E6AC -  -  -  -  ;sprites to hide in the background.
  232 D1:E6AC 2A 28 34 D0     ld  hl,(curScreenBuf)
  233 D1:E6B0 01 00 2C 01     ld  bc,320*240
  234 D1:E6B4 09 -  -  -      add hl,bc
  235 D1:E6B5 ED 73 28 E7 
              D1 -  -  -      ld  (++_+1),sp
  236 D1:E6BA F9 -  -  -      ld  sp,hl
  237 D1:E6BB 06 00 -  -      ld  b,0
  238 D1:E6BD 11 00 00 00     ld  de,0
  239 D1:E6C1 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -  _:  push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  240 D1:E6CB D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  241 D1:E6D5 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  242 D1:E6DF D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  243 D1:E6E9 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  244 D1:E6F3 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  245 D1:E6FD D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  246 D1:E707 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  247 D1:E711 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  248 D1:E71B D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  249 D1:E725 10 9A -  -      djnz -_
  250 D1:E727 31 00 00 00 _:  ld  sp,0
  251 D1:E72B -  -  -  -  ;The following is a framecounter. Mask out if needed.
  252 D1:E72B 21 01 00 00     ld  hl,1
  253 D1:E72F 22 F6 31 D0     ld  (xPos),hl   
  254 D1:E733 DD 7E F5 -      ld  a,(ix+PPU_FRAMECOUNT)
  255 D1:E736 CD D6 B1 D1     call printSmallNumPair
  256 D1:E73A 3E 20 -  -      ld  a,' '
  257 D1:E73C CD A6 B1 D1     call printBigFont
  258 D1:E740 AF -  -  -      xor a,a
  259 D1:E741 ED 62 -  -      sbc hl,hl
  260 D1:E743 ED 5B 00 00 
              F2 -  -  -      ld  de,($F20000)
  261 D1:E748 7A -  -  -      ld  a,d
  262 D1:E749 B7 -  -  -      or  a,a     ;Framerate too large to bother calculating. Or far too small.
  263 D1:E74A 28 30 -  -      jr  z,ppu_noframerate
  264 D1:E74C 22 00 00 F2     ld  ($F20000),hl
  265 D1:E750 21 00 80 00     ld  hl,32768
  266 D1:E754 AF -  -  -      xor a,a
  267 D1:E755 3C -  -  -  _:  inc a
  268 D1:E756 ED 52 -  -      sbc hl,de
  269 D1:E758 30 FB -  -      jr  nc,-_
  270 D1:E75A 3D -  -  -      dec a
  271 D1:E75B B7 -  -  -      or  a,a ;clears necessary flags
  272 D1:E75C 27 -  -  -      daa
  273 D1:E75D D5 -  -  -      push de
  274 D1:E75E CD D6 B1 D1         call printSmallNumPair
  275 D1:E762 3E 2E -  -          ld  a,'.'
  276 D1:E764 CD A6 B1 D1         call printBigFont
  277 D1:E768 D1 -  -  -      pop de
  278 D1:E769 AF -  -  -      xor a,a
  279 D1:E76A 5A -  -  -      ld  e,d
  280 D1:E76B 57 -  -  -      ld  d,a
  281 D1:E76C 21 00 32 00     ld  hl,32768/256*100
  282 D1:E770 3C -  -  -  _:  inc a
  283 D1:E771 ED 52 -  -      sbc hl,de
  284 D1:E773 30 FB -  -      jr  nc,-_
  285 D1:E775 3D -  -  -      dec a
  286 D1:E776 B7 -  -  -      or  a,a ;clears necessary flags
  287 D1:E777 27 -  -  -      daa
  288 D1:E778 CD D6 B1 D1     call printSmallNumPair
  289 D1:E77C -  -  -  -  ppu_noframerate:
  290 D1:E77C CD 9C B0 D1     call fastCopy
  291 D1:E780 C9 -  -  -      ret
  292 D1:E781 -  -  -  -  
  293 D1:E781 -  -  -  -      
  294 D1:E781 -  -  -  -      
  295 D1:E781 -  -  -  -  
  296 D1:E781 -  -  -  -  
  297 D1:E781 -  -  -  -  
  298 D1:E781 -  -  -  -  
  299 D1:E781 -  -  -  -  
  300 D1:E781 -  -  -  -  
  301 D1:E781 -  -  -  -  
  302 D1:E781 -  -  -  -  
  303 D1:E781 -  -  -  -  
  304 D1:E781 -  -  -  -      ;set base rom addresses
  305 D1:E781 2A 46 34 D0     ld  hl,(chr_rom_base)
  306 D1:E785 01 00 10 00     ld  bc,$001000
  307 D1:E789 DD 7E E0 -      ld  a,(ix+PPU_CTRL)
  308 D1:E78C E5 -  -  -      push hl
  309 D1:E78D CB 67 -  -          bit 4,a     ;background pattern base offset
  310 D1:E78F 28 01 -  -          jr  z,+_
  311 D1:E791 09 -  -  -          add hl,bc
  312 D1:E792 22 20 34 D0 _:      ld  (chr_rom_tiles),hl
  313 D1:E796 E1 -  -  -      pop hl
  314 D1:E797 CB 6F -  -      bit 5,a     ;sprite pattern base offset
  315 D1:E799 28 01 -  -      jr  z,+_
  316 D1:E79B 09 -  -  -      add hl,bc
  317 D1:E79C 22 24 34 D0 _:  ld  (chr_rom_sprites),hl
  318 D1:E7A0 -  -  -  -      ;set coarse x,y scroll positions. B=Y, C=x
  319 D1:E7A0 DD 07 FC -      ld  bc,(ix+PPU_XSCROLL)
  320 D1:E7A3 CB 20 -  -      sla b
  321 D1:E7A5 CB 20 -  -      sla b
  322 D1:E7A7 CB 20 -  -      sla b
  323 D1:E7A9 CB 21 -  -      sla c
  324 D1:E7AB CB 21 -  -      sla c
  325 D1:E7AD CB 21 -  -      sla c
  326 D1:E7AF -  -  -  -      ;set base nametable addresses
  327 D1:E7AF 21 00 34 D0     ld  hl,nametable00
  328 D1:E7B3 DD 7E E0 -      ld  a,(ix+PPU_CTRL)
  329 D1:E7B6 E6 03 -  -      and a,3
  330 D1:E7B8 87 -  -  -      add a,a
  331 D1:E7B9 87 -  -  -      add a,a
  332 D1:E7BA 6F -  -  -      ld  L,a
  333 D1:E7BB DD 2F F6 -      ld  (ix+PPU_NAMETABLE_PTR),hl   ;yeah. let's cache this so we don't lose it
  334 D1:E7BE -  -  -  -      ;In-place setting of nametable address wrt X,Y
  335 D1:E7BE -  -  -  -      ;%------YY YYYXXXXX
  336 D1:E7BE ED 17 -  -      ld  de,(hl)
  337 D1:E7C0 79 -  -  -      ld  a,c
  338 D1:E7C1 07 -  -  -      rlca
  339 D1:E7C2 07 -  -  -      rlca
  340 D1:E7C3 07 -  -  -      rlca
  341 D1:E7C4 5F -  -  -      ld  e,a
  342 D1:E7C5 AA -  -  -      xor a,d
  343 D1:E7C6 E6 03 -  -      and a,%00000011
  344 D1:E7C8 AA -  -  -      xor a,d
  345 D1:E7C9 7B -  -  -      ld  a,e
  346 D1:E7CA A8 -  -  -      xor a,b
  347 D1:E7CB E6 E0 -  -      and %11100000
  348 D1:E7CD A8 -  -  -      xor a,b
  349 D1:E7CE 5F -  -  -      ld  e,a
  350 D1:E7CF -  -  -  -      ;Fetch first attribute byte from address
  351 D1:E7CF -  -  -  -      ;%------YY YYYXXXXX -> %------11 11YYYXXX
  352 D1:E7CF D5 -  -  -      push de
  353 D1:E7D0 7A -  -  -          ld  a,d
  354 D1:E7D1 1F -  -  -          rra
  355 D1:E7D2 CB 3B -  -          srl e
  356 D1:E7D4 1F -  -  -          rra
  357 D1:E7D5 CB 3B -  -          srl e       ;YYYYYXXX
  358 D1:E7D7 CB C2 -  -          set 0,d
  359 D1:E7D9 CB CA -  -          set 1,d
  360 D1:E7DB 7B -  -  -          ld  a,e
  361 D1:E7DC 07 -  -  -          rlca
  362 D1:E7DD 07 -  -  -          rlca
  363 D1:E7DE F6 C0 -  -          or  a,%11000000
  364 D1:E7E0 AB -  -  -          xor a,e
  365 D1:E7E1 E6 F8 -  -          and a,%11111000
  366 D1:E7E3 AB -  -  -          xor a,e
  367 D1:E7E4 5F -  -  -          ld  e,a
  368 D1:E7E5 1A -  -  -          ld  a,(de)
  369 D1:E7E6 D1 -  -  -      pop de
  370 D1:E7E7 -  -  -  -      ;Selects attribute from A from B=Y, C=X in format %0000AA00
  371 D1:E7E7 -  -  -  -      ;Let's instead use DE %------yy yYyxxxXx y: e6, x: e1
  372 D1:E7E7 CB 73 -  -      bit 6,e
  373 D1:E7E9 28 04 -  -      jr  z,+_
  374 D1:E7EB 07 -  -  -      rlca    ;If not zero, shift upper nibble into lower nibble
  375 D1:E7EC 07 -  -  -      rlca    ;for further selection.
  376 D1:E7ED 07 -  -  -      rlca
  377 D1:E7EE 07 -  -  -      rlca
  378 D1:E7EF CB 4B -  -  _:  bit 1,e
  379 D1:E7F1 20 02 -  -      jr  nz,+_   ;If not zero, upper 2 bits of lower nibble already in position
  380 D1:E7F3 07 -  -  -      rlca        ;Otherwise, move them into position
  381 D1:E7F4 07 -  -  -      rlca        
  382 D1:E7F5 E6 0C -  -  _:  and a,%00001100
  383 D1:E7F7 32 2D E8 D1     ld  (ppu_mainTileLoop_attribute_write),a
  384 D1:E7FB -  -  -  -  
  385 D1:E7FB DD 36 F9 1E     ld  (ix+PPU_VCOUNT),30
  386 D1:E7FF FD 2A 28 34 
              D0 -  -  -      ld  iy,(curScreenBuf)
  387 D1:E804 ED 33 20 -      lea iy,iy+32
  388 D1:E807 -  -  -  -  ppu_verticalLoop:
  389 D1:E807 DD 36 FA 20     ld  (ix+PPU_HCOUNT),32
  390 D1:E80B -  -  -  -  ppu_horizontalLoop:
  391 D1:E80B 1A -  -  -      ld  a,(de)
  392 D1:E80C E5 -  -  -      push hl
  393 D1:E80D D5 -  -  -          push de
  394 D1:E80E 2A 20 34 D0             ld  hl,(chr_rom_tiles)
  395 D1:E812 4F -  -  -              ld  c,a
  396 D1:E813 06 10 -  -              ld  b,16
  397 D1:E815 ED 4C -  -              mlt bc
  398 D1:E817 09 -  -  -              add hl,bc
  399 D1:E818 DD 36 FB 08             ld  (ix+PPU_TCOUNT),8
  400 D1:E81C ED 13 00 -              lea de,iy+0
  401 D1:E81F -  -  -  -  ppu_mainTileLoop:
  402 D1:E81F 7E -  -  -              ld  a,(hl)
  403 D1:E820 01 08 00 00             ld  bc,8
  404 D1:E824 09 -  -  -              add hl,bc
  405 D1:E825 46 -  -  -              ld  b,(hl)
  406 D1:E826 4F -  -  -              ld  c,a
  407 D1:E827 E5 -  -  -              push hl
  408 D1:E828 21 00 32 D0                 ld  hl,vram_palette
  409 D1:E82C -  -  -  -  ppu_mainTileLoop_attribute_write    .equ $+1
  410 D1:E82C 3E 00 -  -                  ld  a,0
  411 D1:E82E -  -  -  -                  ;Attrib to LSB of VRAM_PALETTE, shift CHR_ROM data to LSB to
  412 D1:E82E -  -  -  -                  ;form full address+offset. Copy from palette to buffer.
  413 D1:E82E 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;1/8 12b apiece
  414 D1:E83A 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;2/8
  415 D1:E846 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;3/8
  416 D1:E852 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;4/8
  417 D1:E85E 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;5/8
  418 D1:E86A 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;6/8
  419 D1:E876 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;7/8
  420 D1:E882 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;8/8 96b tot
  421 D1:E88E 21 38 01 00                 ld  hl,320-8
  422 D1:E892 19 -  -  -                  add hl,de
  423 D1:E893 EB -  -  -                  ex  de,hl
  424 D1:E894 E1 -  -  -              pop hl
  425 D1:E895 01 F9 FF FF             ld  bc,-7
  426 D1:E899 09 -  -  -              add hl,bc
  427 D1:E89A DD 35 FB -              dec (ix+PPU_TCOUNT)
  428 D1:E89D 20 80 -  -              jr  nz,ppu_mainTileLoop
  429 D1:E89F -  -  -  -              ;start wrapping up the horizontal loop
  430 D1:E89F D1 -  -  -          pop de
  431 D1:E8A0 E1 -  -  -      pop hl
  432 D1:E8A1 7B -  -  -      ld  a,e
  433 D1:E8A2 13 -  -  -      inc de
  434 D1:E8A3 AB -  -  -      xor a,e
  435 D1:E8A4 CB 6F -  -      bit 5,a     ;A carry in X would result in a change in bit 5
  436 D1:E8A6 28 14 -  -      jr  z,+_    ;Which means there's no crossover if no sign change
  437 D1:E8A8 1B -  -  -      dec de      ;revert those changes in case they cascaded past E
  438 D1:E8A9 1C -  -  -      inc e
  439 D1:E8AA E6 E0 -  -      and a,%11100000     ;The funny thing is that the XOR above...
  440 D1:E8AC AB -  -  -      xor a,e             ;... is still valid for this masking technique.
  441 D1:E8AD 4F -  -  -      ld  c,a     ;And now let's squirrel this and...
  442 D1:E8AE 42 -  -  -      ld  b,d     ;...D for later merge magic
  443 D1:E8AF 7C -  -  -      ld  a,h
  444 D1:E8B0 EE 04 -  -      xor a,%00000100 ;flip to the next horizontal buffer...
  445 D1:E8B2 67 -  -  -      ld  h,a
  446 D1:E8B3 ED 17 -  -      ld  de,(hl)
  447 D1:E8B5 59 -  -  -      ld  e,c
  448 D1:E8B6 78 -  -  -      ld  a,b
  449 D1:E8B7 AA -  -  -      xor d
  450 D1:E8B8 E6 03 -  -      and a,%00000011
  451 D1:E8BA AA -  -  -      xor d
  452 D1:E8BB 57 -  -  -      ld  d,a         ;and map coords into a new nametable
  453 D1:E8BC ED 33 08 -  _:  lea iy,iy+8     ;next position on the buffer.
  454 D1:E8BF DD 35 FA -      dec (ix+PPU_HCOUNT)
  455 D1:E8C2 C2 0B E8 D1     jp  nz,ppu_horizontalLoop
  456 D1:E8C6 -  -  -  -      ;the X buffer *will* have changed at some point and rolled around
  457 D1:E8C6 -  -  -  -      ;so there's no need to deal with X. Still gotta do Y first...
  458 D1:E8C6 EB -  -  -      ex  de,hl
  459 D1:E8C7 7C -  -  -      ld  a,h
  460 D1:E8C8 01 20 00 00     ld  bc,%00100000
  461 D1:E8CC 09 -  -  -      add hl,bc   ;%-----^yy yYyxxxXx
  462 D1:E8CD EB -  -  -      ex  de,hl
  463 D1:E8CE 4B -  -  -      ld  c,e     ;coordinate storage.
  464 D1:E8CF 42 -  -  -      ld  b,d
  465 D1:E8D0 AA -  -  -      xor a,d     ;detect sign change in bit 2
  466 D1:E8D1 CB 57 -  -      bit 2,a
  467 D1:E8D3 28 04 -  -      jr  z,+_
  468 D1:E8D5 7D -  -  -      ld  a,L
  469 D1:E8D6 EE 08 -  -      xor a,%00001000 ;flip to the next vertical buffer...
  470 D1:E8D8 6F -  -  -      ld  L,a
  471 D1:E8D9 7D -  -  -  _:  ld  a,L
  472 D1:E8DA EE 04 -  -      xor a,%00000100 ;flip back the horizontal buffer that must've been flipped.
  473 D1:E8DC 6F -  -  -      ld  L,a
  474 D1:E8DD ED 17 -  -      ld  de,(hl)
  475 D1:E8DF 59 -  -  -      ld  e,c
  476 D1:E8E0 78 -  -  -      ld  a,b
  477 D1:E8E1 AA -  -  -      xor d
  478 D1:E8E2 E6 03 -  -      and a,%00000011
  479 D1:E8E4 AA -  -  -      xor d
  480 D1:E8E5 57 -  -  -      ld  d,a         ;and map coords into a new nametable
  481 D1:E8E6 01 00 09 00     ld  bc,(320*7)+(320-256)
  482 D1:E8EA FD 09 -  -      add iy,bc       ;move cursor pointer to the next row
  483 D1:E8EC DD 35 F9 -      dec (ix+PPU_VCOUNT)
  484 D1:E8EF C2 07 E8 D1     jp  nz,ppu_verticalLoop
  485 D1:E8F3 C9 -  -  -      ret
  486 D1:E8F4 -  -  -  -  
  487 D1:E8F4 -  -  -  -  ;TODO: Test changes to the PPU and link together something in the mapper
  488 D1:E8F4 -  -  -  -  ;to perform controls. Also. Those freakin' interrupts. DO THEM.
  489 D1:E8F4 -  -  -  -  ;Might also want to implement a drawlist of sorts since writes to the ports
  490 D1:E8F4 -  -  -  -  ;ought to be timestamped. That way, we'll be able to tell what the hell is
  491 D1:E8F4 -  -  -  -  ;being done mid-frame and then make adjustments to such things as
  492 D1:E8F4 -  -  -  -  ;BG rendering mid-draw, if necessary. Or be able to detect such attempts as
  493 D1:E8F4 -  -  -  -  ;I don't think I want to deal with that. Only deal with stuff that should
  494 D1:E8F4 -  -  -  -  ;be occurring within the VBlank period.
  495 D1:E8F4 -  -  -  -  
  496 D1:E8F4 -  -  -  -  
  497 D1:E8F4 -  -  -  -  
  498 D1:E8F4 -  -  -  -  
  499 D1:E8F4 -  -  -  -  
  500 D1:E8F4 -  -  -  -  
  501 D1:E8F4 -  -  -  -  
  502 D1:E8F4 -  -  -  -  
  503 D1:E8F4 -  -  -  -  
  504 D1:E8F4 -  -  -  -  
  505 D1:E8F4 -  -  -  -  
Listing for file "main.z80"
  975 D1:E8F4 -  -  -  -  #include "palette.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\palette.z80"
    1 D1:E8F4 -  -  -  -  paletteData:
    2 D1:E8F4 8C B1 A0 BC 
              42 CC 06 CC 
              0A BC 0C A0 
              0C 80 6A 80 .dw $B18C, $BCA0, $CC42, $CC06, $BC0A, $A00C, $800C, $806A
    3 D1:E904 C6 80 02 81 
              20 81 20 81 
              00 A1 00 80 
              00 80 00 80 .dw $80C6, $8102, $8120, $8120, $A100, $8000, $8000, $8000
    4 D1:E914 B5 D6 82 E5 
              07 FD AD FC 
              73 E4 76 C0 
              B6 94 33 81 .dw $D6B5, $E582, $FD07, $FCAD, $E473, $C076, $94B6, $8133
    5 D1:E924 AD 81 07 82 
              22 82 20 96 
              E0 C1 00 80 
              00 80 00 80 .dw $81AD, $8207, $8222, $9620, $C1E0, $8000, $8000, $8000
    6 D1:E934 FF FF CC FE 
              51 FE F8 FD 
              BD FD BF E9 
              FF BD 7D 96 .dw $FFFF, $FECC, $FE51, $FDF8, $FDBD, $E9BF, $BDFF, $967D
    7 D1:E944 F8 82 51 83 
              8C 97 88 BF 
              28 EB 29 A5 
              00 80 00 80 .dw $82F8, $8351, $978C, $BF88, $EB28, $A529, $8000, $8000
    8 D1:E954 FF FF 97 FF 
              5A FF 3C FF 
              1E FF 1F F7 
              3F E7 5E D7 .dw $FFFF, $FF97, $FF5A, $FF3C, $FF1E, $F71F, $E73F, $D75E
    9 D1:E964 9C CB BA CB 
              D7 D7 D6 E7 
              B6 F7 F7 DE 
              00 80 00 80 .dw $CB9C, $CBBA, $D7D7, $E7D6, $F7B6, $DEF7, $8000, $8000
   10 D1:E974 0C A1 40 AC 
              02 BC 06 BC 
              0A B0 0C 98 
              0D 80 2A 80 .dw $A10C, $AC40, $BC02, $BC06, $B00A, $980C, $800D, $802A
   11 D1:E984 86 80 A2 80 
              C0 80 C0 80 
              80 90 00 80 
              00 80 00 80 .dw $8086, $80A2, $80C0, $80C0, $9080, $8000, $8000, $8000
   12 D1:E994 15 C2 02 D1 
              87 E4 4D E4 
              32 D4 55 B4 
              96 8C F3 80 .dw $C215, $D102, $E487, $E44D, $D432, $B455, $8C96, $80F3
   13 D1:E9A4 4E 81 88 81 
              A2 81 A0 85 
              40 AD 00 80 
              00 80 00 80 .dw $814E, $8188, $81A2, $85A0, $AD40, $8000, $8000, $8000
   14 D1:E9B4 3F E7 0C F6 
              B1 FD 78 FD 
              3D F9 5F D5 
              9F AD FD 89 .dw $E73F, $F60C, $FDB1, $FD78, $F93D, $D55F, $AD9F, $89FD
   15 D1:E9C4 58 82 B2 82 
              CC 86 C9 AA 
              69 D2 C9 98 
              00 80 00 80 .dw $8258, $82B2, $86CC, $AAC9, $D269, $98C9, $8000, $8000
   16 D1:E9D4 3F E7 D8 EE 
              9A F6 7C F6 
              7F EE 7F E2 
              9F D2 BF C2 .dw $E73F, $EED8, $F69A, $F67C, $EE7F, $E27F, $D29F, $C2BF
   17 D1:E9E4 FD BA 1A B7 
              18 BF 17 CF 
              F7 DE 57 C6 
              00 80 00 80 .dw $BAFD, $B71A, $BF18, $CF17, $DEF7, $C657, $8000, $8000
   18 D1:E9F4 68 99 80 A8 
              40 B8 03 B4 
              06 A4 08 8C 
              09 80 67 80 .dw $9968, $A880, $B840, $B403, $A406, $8C08, $8009, $8067
   19 D1:EA04 A4 80 00 81 
              20 81 20 81 
              E0 90 00 80 
              00 80 00 80 .dw $80A4, $8100, $8120, $8120, $90E0, $8000, $8000, $8000
   20 D1:EA14 8F B6 60 C9 
              E3 DC 88 DC 
              4D C4 70 A4 
              B0 80 0E 81 .dw $B68F, $C960, $DCE3, $DC88, $C44D, $A470, $80B0, $810E
   21 D1:EA24 89 81 E4 81 
              20 82 00 86 
              C0 A9 00 80 
              00 80 00 80 .dw $8189, $81E4, $8220, $8600, $A9C0, $8000, $8000, $8000
   22 D1:EA34 D8 DB A7 EE 
              2C FE B1 FD 
              96 E9 99 C5 
              D9 9D 57 82 .dw $DBD8, $EEA7, $FE2C, $FDB1, $E996, $C599, $9DD9, $8257
   23 D1:EA44 D2 82 2D 83 
              68 83 65 A3 
              04 CB 26 91 
              00 80 00 80 .dw $82D2, $832D, $8368, $A365, $CB04, $9126, $8000, $8000
   24 D1:EA54 D8 DB 51 E3 
              33 EB F5 EA 
              F7 DE F8 D2 
              19 C3 37 B3 .dw $DBD8, $E351, $EB33, $EAF5, $DEF7, $D2F8, $C319, $B337
   25 D1:EA64 76 AB 93 AB 
              B1 B7 B0 C3 
              90 D3 B0 BA 
              00 80 00 80 .dw $AB76, $AB93, $B7B1, $C3B0, $D390, $BAB0, $8000, $8000
   26 D1:EA74 08 99 40 A4 
              00 B0 03 B0 
              06 A4 09 8C 
              09 80 27 80 .dw $9908, $A440, $B000, $B003, $A406, $8C09, $8009, $8027
   27 D1:EA84 64 80 A0 80 
              C0 80 C0 80 
              80 90 00 80 
              00 80 00 80 .dw $8064, $80A0, $80C0, $80C0, $9080, $8000, $8000, $8000
   28 D1:EA94 10 B2 E0 C4 
              84 D4 49 D4 
              2D C4 30 A4 
              71 80 CE 80 .dw $B210, $C4E0, $D484, $D449, $C42D, $A430, $8071, $80CE
   29 D1:EAA4 2A 81 85 81 
              A1 81 80 81 
              40 A5 00 80 
              00 80 00 80 .dw $812A, $8185, $81A1, $8180, $A540, $8000, $8000, $8000
   30 D1:EAB4 39 D7 08 EA 
              AD F9 52 F9 
              36 E9 5A C5 
              9A 9D F7 81 .dw $D739, $EA08, $F9AD, $F952, $E936, $C55A, $9D9A, $81F7
   31 D1:EAC4 53 82 AD 82 
              C9 82 A6 9E 
              65 C6 C6 90 
              00 80 00 80 .dw $8253, $82AD, $82C9, $9EA6, $C665, $90C6, $8000, $8000
   32 D1:EAD4 39 D7 B2 DE 
              94 E2 76 E2 
              58 DE 79 CE 
              99 BE B8 B2 .dw $D739, $DEB2, $E294, $E276, $DE58, $CE79, $BE99, $B2B8
   33 D1:EAE4 D7 AA F4 AA 
              12 B3 11 BF 
              F1 CE 31 BA 
              00 80 00 80 .dw $AAD7, $AAF4, $B312, $BF11, $CEF1, $BA31, $8000, $8000
   34 D1:EAF4 29 B9 80 C0 
              21 D0 05 CC 
              08 C0 0A A4 
              09 88 27 80 .dw $B929, $C080, $D021, $CC05, $C008, $A40A, $8809, $8027
   35 D1:EB04 63 80 A0 80 
              E0 80 E0 88 
              C0 A4 00 80 
              00 80 00 80 .dw $8063, $80A0, $80E0, $88E0, $A4C0, $8000, $8000, $8000
   36 D1:EB14 31 E2 21 E9 
              C6 FC 6B FC 
              2F E8 32 C4 
              71 9C CE 80 .dw $E231, $E921, $FCC6, $FC6B, $E82F, $C432, $9C71, $80CE
   37 D1:EB24 29 81 84 81 
              C0 81 C0 9D 
              80 C9 00 84 
              00 80 00 80 .dw $8129, $8184, $81C0, $9DC0, $C980, $8400, $8000, $8000
   38 D1:EB34 5A FF 69 FE 
              EE FD 94 FD 
              59 FD 5B F1 
              9B C9 F8 A1 .dw $FF5A, $FE69, $FDEE, $FD94, $FD59, $F15B, $C99B, $A1F8
   39 D1:EB44 52 8E AD 8E 
              E8 A6 E5 CA 
              A6 F6 E7 AC 
              00 80 00 80 .dw $8E52, $8EAD, $A6E8, $CAE5, $F6A6, $ACE7, $8000, $8000
   40 D1:EB54 5A FF F3 FE 
              D5 FE 98 FE 
              99 FE 9B FE 
              9A F2 D9 E2 .dw $FF5A, $FEF3, $FED5, $FE98, $FE99, $FE9B, $F29A, $E2D9
   41 D1:EB64 F7 DA 15 DB 
              33 E7 32 F3 
              12 FF 52 EA 
              00 80 00 80 .dw $DAF7, $DB15, $E733, $F332, $FF12, $EA52, $8000, $8000
   42 D1:EB74 E9 A8 40 AC 
              01 BC 04 BC 
              08 B0 09 9C 
              09 80 07 80 .dw $A8E9, $AC40, $BC01, $BC04, $B008, $9C09, $8009, $8007
   43 D1:EB84 43 80 80 80 
              A0 80 A0 80 
              80 94 00 80 
              00 80 00 80 .dw $8043, $8080, $80A0, $80A0, $9480, $8000, $8000, $8000
   44 D1:EB94 D1 C9 E1 D0 
              86 E8 2B E8 
              0F D4 11 B8 
              51 94 AE 80 .dw $C9D1, $D0E1, $E886, $E82B, $D40F, $B811, $9451, $80AE
   45 D1:EBA4 09 81 44 81 
              80 81 60 8D 
              40 AD 00 80 
              00 80 00 80 .dw $8109, $8144, $8180, $8D60, $AD40, $8000, $8000, $8000
   46 D1:EBB4 FA EE E9 F9 
              8F FD 34 FD 
              18 FD 1B DD 
              5B B9 B8 91 .dw $EEFA, $F9E9, $FD8F, $FD34, $FD18, $DD1B, $B95B, $91B8
   47 D1:EBC4 12 82 6D 82 
              89 92 86 B2 
              46 D6 A7 9C 
              00 80 00 80 .dw $8212, $826D, $9289, $B286, $D646, $9CA7, $8000, $8000
   48 D1:EBD4 FA EE 93 F6 
              75 FE 58 FE 
              39 F6 3A EA 
              5A DA 79 CA .dw $EEFA, $F693, $FE75, $FE58, $F639, $EA3A, $DA5A, $CA79
   49 D1:EBE4 97 C2 B5 C2 
              D3 CA D2 D6 
              B2 E6 12 CE 
              00 80 00 80 .dw $C297, $C2B5, $CAD3, $D6D2, $E6B2, $CE12, $8000, $8000
   50 D1:EBF4 07 A5 60 AC 
              20 B8 02 B8 
              06 A8 08 94 
              08 80 26 80 .dw $A507, $AC60, $B820, $B802, $A806, $9408, $8008, $8026
   51 D1:EC04 63 80 A0 80 
              C0 80 C0 80 
              A0 98 00 80 
              00 80 00 80 .dw $8063, $80A0, $80C0, $80C0, $98A0, $8000, $8000, $8000
   52 D1:EC14 0E C2 20 D1 
              C3 E0 68 E0 
              2C C8 2F AC 
              6F 88 AC 80 .dw $C20E, $D120, $E0C3, $E068, $C82C, $AC2F, $886F, $80AC
   53 D1:EC24 08 81 83 81 
              A0 81 A0 8D 
              60 B1 00 80 
              00 80 00 80 .dw $8108, $8183, $81A0, $8DA0, $B160, $8000, $8000, $8000
   54 D1:EC34 36 EB 46 F6 
              CB FD 70 FD 
              35 F1 37 D1 
              77 AD D5 8D .dw $EB36, $F646, $FDCB, $FD70, $F135, $D137, $AD77, $8DD5
   55 D1:EC44 30 82 AB 82 
              E6 92 C4 B2 
              84 D6 C5 98 
              00 80 00 80 .dw $8230, $82AB, $92E6, $B2C4, $D684, $98C5, $8000, $8000
   56 D1:EC54 36 EB D0 EE 
              B2 F6 94 F6 
              76 EE 77 DE 
              97 D2 B6 C2 .dw $EB36, $EED0, $F6B2, $F694, $EE76, $DE77, $D297, $C2B6
   57 D1:EC64 D4 BA 12 BB 
              10 C7 0F D3 
              EF E2 4F CA 
              00 80 00 80 .dw $BAD4, $BB12, $C710, $D30F, $E2EF, $CA4F, $8000, $8000
   58 D1:EC74 E7 9C 40 A8 
              00 B4 03 B4 
              06 A8 08 90 
              08 80 06 80 .dw $9CE7, $A840, $B400, $B403, $A806, $9008, $8008, $8006
   59 D1:EC84 43 80 80 80 
              A0 80 A0 80 
              80 90 00 80 
              00 80 00 80 .dw $8043, $8080, $80A0, $80A0, $9080, $8000, $8000, $8000
   60 D1:EC94 CE B9 E0 C8 
              83 D8 28 D8 
              0C C8 0F A8 
              4F 84 AC 80 .dw $B9CE, $C8E0, $D883, $D828, $C80C, $A80F, $844F, $80AC
   61 D1:ECA4 08 81 43 81 
              80 81 60 85 
              40 A9 00 80 
              00 80 00 80 .dw $8108, $8143, $8180, $8560, $A940, $8000, $8000, $8000
   62 D1:ECB4 F7 DE E7 ED 
              8C FD 31 FD 
              15 ED 18 CD 
              58 A5 B5 85 .dw $DEF7, $EDE7, $FD8C, $FD31, $ED15, $CD18, $A558, $85B5
   63 D1:ECC4 11 82 6C 82 
              87 86 84 A6 
              44 CE A5 94 
              00 80 00 80 .dw $8211, $826C, $8687, $A684, $CE44, $94A5, $8000, $8000
   64 D1:ECD4 F7 DE 91 E6 
              72 EE 55 EE 
              36 E6 37 D6 
              57 CA 76 BA .dw $DEF7, $E691, $EE72, $EE55, $E636, $D637, $CA57, $BA76
   65 D1:ECE4 95 B2 B2 B2 
              D1 BA CF CA 
              AF D6 10 C2 
              00 80 00 80 .dw $B295, $B2B2, $BAD1, $CACF, $D6AF, $C210, $8000, $8000
Listing for file "main.z80"
  976 D1:ECF4 -  -  -  -  
  977 D1:ECF4 -  -  -  -  .echo "Main program size: ",$-programStart
