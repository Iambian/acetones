    1 00:0000 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "main.z80"
    2 00:0000 -  -  -  -  .org userMem-2
    3 D1:A87F EF 7B -  -  .db $EF, $7B
    4 D1:A881 -  -  -  -  
    5 D1:A881 -  -  -  -  ;SPASM help msg
    6 D1:A881 -  -  -  -  ;-E = Assemble eZ80 code
    7 D1:A881 -  -  -  -  ;-T = Generate code listing
    8 D1:A881 -  -  -  -  ;-C = Code counter mode
    9 D1:A881 -  -  -  -  ;-L = Symbol table mode
   10 D1:A881 -  -  -  -  ;-S = Stats mode
   11 D1:A881 -  -  -  -  ;-O = Don't write to output file
   12 D1:A881 -  -  -  -  ;-I [directory] = Add include directory
   13 D1:A881 -  -  -  -  ;-A = Labels are cAse-sensitive
   14 D1:A881 -  -  -  -  ;-D<name>[=value] = Create a define 'name' [with 'value']
   15 D1:A881 -  -  -  -  ;-N = Don't use colors for messages
   16 D1:A881 -  -  -  -  ;-V <Expression> = Pipe expression directly into assembly
   17 D1:A881 -  -  -  -  ;-H = Print this help message
   18 D1:A881 -  -  -  -  
   19 D1:A881 -  -  -  -  
   20 D1:A881 -  -  -  -  
   21 D1:A881 -  -  -  -  
   22 D1:A881 -  -  -  -  programStart:
   23 D1:A881 F3 -  -  -      di
   24 D1:A882 -  -  -  -      ;Continuous. Else it'd be possible for an NES ROM to tank the CPU
   25 D1:A882 -  -  -  -      ;performance by constantly polling the keyboard.
   26 D1:A882 21 00 00 F5     ld  hl,mpKeyMode
   27 D1:A886 36 03 -  -      ld  (hl),3      
   28 D1:A888 ED 73 FC 31 
              D0 -  -  -      ld  (save_spl),sp
   29 D1:A88D ED 6E -  -      ld  a,MB
   30 D1:A88F 32 FF 31 D0     ld  (save_mbase),a
   31 D1:A893 3E D0 -  -      ld  a,$D0
   32 D1:A895 ED 6D -  -      ld  MB,a
   33 D1:A897 CD 8A AF D1     call startGfx
   34 D1:A89B -  -  -  -      ;
   35 D1:A89B -  -  -  -      ; todo; write test 6502 program, map it into rom.
   36 D1:A89B -  -  -  -      ; map virtual screen device into ram too. 32x30 screen ascii display
   37 D1:A89B -  -  -  -      ; is probably looking nice right about now.
   38 D1:A89B -  -  -  -      ; Could probably map it into PPU space since we're not actually doing
   39 D1:A89B -  -  -  -      ; anything about that until long after we're done testing core integrity
   40 D1:A89B -  -  -  -      ; You'll probably want to create a mockup vector table then do some equate
   41 D1:A89B -  -  -  -      ; magic to offset it and map it to $FFXX such that the three vectors will
   42 D1:A89B -  -  -  -      ; magically line up with $FFFA-$FFFF. NMI, RES, and IRQ. In that order.
   43 D1:A89B -  -  -  -      ; The rest of the page won't need to matter. It could literally be the
   44 D1:A89B -  -  -  -      ; surrounding eZ80 data/code. Just... don't allow writes to it.
   45 D1:A89B -  -  -  -      ;
   46 D1:A89B -  -  -  -  
   47 D1:A89B 21 00 00 D4     ld  hl,screenBuf1
   48 D1:A89F 11 01 00 D4     ld  de,screenBuf1+1
   49 D1:A8A3 01 FF 57 02     ld  bc,(2*240*320)-1
   50 D1:A8A7 36 00 -  -      ld  (hl),$00
   51 D1:A8A9 ED B0 -  -      ldir
   52 D1:A8AB -  -  -  -  
   53 D1:A8AB -  -  -  -      ;Makes sure all non-ROM areas have a mapping
   54 D1:A8AB 21 00 33 D0     ld  hl,scrap_mapping
   55 D1:A8AF 01 01 80 00     ld  bc,$008001
   56 D1:A8B3 1E 00 -  -      ld  e,0
   57 D1:A8B5 CD 63 B6 D1     call i6502_map_pages
   58 D1:A8B9 -  -  -  -  
   59 D1:A8B9 -  -  -  -  
   60 D1:A8B9 -  -  -  -  
   61 D1:A8B9 -  -  -  -      ;load reset vectors
   62 D1:A8B9 21 DE A8 D1     ld  hl,testVectors
   63 D1:A8BD 01 01 01 00     ld  bc,$000101
   64 D1:A8C1 1E FF -  -      ld  e,$FF
   65 D1:A8C3 CD 63 B6 D1     call i6502_map_pages
   66 D1:A8C7 -  -  -  -      ;load program ROM to lowmem
   67 D1:A8C7 21 DE A9 D1     ld  hl,testCode
   68 D1:A8CB 01 08 20 00     ld  bc,$002008
   69 D1:A8CF 1E 80 -  -      ld  e,$80
   70 D1:A8D1 CD 63 B6 D1     call i6502_map_pages
   71 D1:A8D5 -  -  -  -      ;map nametable to writeable address space. Write routine to mirror this
   72 D1:A8D5 -  -  -  -      ;memory to screen.
   73 D1:A8D5 21 00 58 D0     ld  hl,NAMETABLE1
   74 D1:A8D9 01 04 20 00     ld  bc,$002004
   75 D1:A8DD 1E 40 -  -      ld  e,$40
   76 D1:A8DF CD 63 B6 D1     call i6502_map_pages
   77 D1:A8E3 -  -  -  -      ;Everything should be ready. Set up the debug environment and then
   78 D1:A8E3 -  -  -  -      ;start the emulation.
   79 D1:A8E3 -  -  -  -      ;jr $
   80 D1:A8E3 CD DD AF D1     call clearTextBuf
   81 D1:A8E7 3E 01 -  -      ld  a,1
   82 D1:A8E9 CD 2A B0 D1     call setLineStart
   83 D1:A8ED CD 33 B0 D1     call setCurLine
   84 D1:A8F1 21 37 AA D1     ld  hl,text001
   85 D1:A8F5 CD 55 B0 D1     call printString
   86 D1:A8F9 FD 21 A5 AA 
              D1 -  -  -      ld  iy,firstFileHeader
   87 D1:A8FE 01 00 00 00     ld  bc,0
   88 D1:A902 FD 4E FF -      ld  c,(iy-1)
   89 D1:A905 CD D8 AE D1     call vatTraverse
   90 D1:A909 DA C2 AA D1     jp  c,err_noContainersFound
   91 D1:A90D D5 -  -  -      push de
   92 D1:A90E 21 4E AA D1         ld  hl,text003
   93 D1:A912 CD 55 B0 D1         call printString
   94 D1:A916 DD 46 FA -          ld  b,(ix-6)
   95 D1:A919 ED 22 F9 -          lea hl,ix-7
   96 D1:A91C 7E -  -  -  _:      ld  a,(hl)
   97 D1:A91D 2B -  -  -          dec hl
   98 D1:A91E E5 -  -  -          push hl
   99 D1:A91F C5 -  -  -              push bc
  100 D1:A920 CD 6B B0 D1                 call PrintBigFont
  101 D1:A924 C1 -  -  -              pop bc
  102 D1:A925 E1 -  -  -          pop hl
  103 D1:A926 10 F4 -  -          djnz -_
  104 D1:A928 CD 3E B0 D1         call newLine
  105 D1:A92C D1 -  -  -      pop de
  106 D1:A92D CD DB AB D1     call loadROMFile
  107 D1:A931 -  -  -  -  
  108 D1:A931 -  -  -  -      ;REMOVE THE FOLLOWING BLOCK WHEN DONE TESTING NESTEST
  109 D1:A931 -  -  -  -      ;
  110 D1:A931 -  -  -  -      ;
  111 D1:A931 21 2E AA D1     ld  hl,timings_file
  112 D1:A935 CD 20 03 02     call _Mov9ToOP1
  113 D1:A939 CD 0C 05 02     call _ChkFindSym
  114 D1:A93D DA 9D A9 D1     jp  c,endCurrentRun
  115 D1:A941 CD 98 1F 02     call _ChkInRam
  116 D1:A945 EB -  -  -      ex  de,hl
  117 D1:A946 30 08 -  -      jr  nc,+_
  118 D1:A948 11 09 00 00     ld  de,9
  119 D1:A94C 19 -  -  -      add hl,de
  120 D1:A94D 5E -  -  -      ld  e,(hl)
  121 D1:A94E 19 -  -  -      add hl,de
  122 D1:A94F 23 -  -  -      inc hl
  123 D1:A950 5E -  -  -  _:  ld  e,(hl)
  124 D1:A951 23 -  -  -      inc hl
  125 D1:A952 56 -  -  -      ld  d,(hl)
  126 D1:A953 23 -  -  -      inc hl
  127 D1:A954 22 4D 34 D0     ld  (timings_base),hl
  128 D1:A958 -  -  -  -      ;
  129 D1:A958 -  -  -  -      ;
  130 D1:A958 -  -  -  -      ;
  131 D1:A958 -  -  -  -  
  132 D1:A958 -  -  -  -  
  133 D1:A958 21 5B AA D1     ld  hl,text004
  134 D1:A95C CD 55 B0 D1     call printString
  135 D1:A960 -  -  -  -  
  136 D1:A960 -  -  -  -      ;jr $
  137 D1:A960 -  -  -  -  #ifdef COREDEBUG
  138 D1:A960                 call dbg_resetScreen
  139 D1:A960             #endif
  140 D1:A960 DD 21 00 00 
              F2 -  -  -      ld  ix,$F20000
  141 D1:A965 DD 27 30 -      ld  hl,(ix+$30)
  142 D1:A968 CB 85 -  -      res 0,L ;turn off timer 0
  143 D1:A96A CB 8D -  -      res 1,L ;timer 0 uses CPU clock
  144 D1:A96C CB 95 -  -      res 2,L ;disables timer 0 interrupt generator
  145 D1:A96E CB CC -  -      set 1,H ;timer 0 counts upward
  146 D1:A970 DD 2F 30 -      ld  (ix+$30),hl
  147 D1:A973 -  -  -  -      
  148 D1:A973 AF -  -  -      xor a,a
  149 D1:A974 ED 62 -  -      sbc hl,hl
  150 D1:A976 DD 2F 00 -      ld  (ix+0),hl
  151 D1:A979 DD 77 03 -      ld  (ix+3),a
  152 D1:A97C -  -  -  -  
  153 D1:A97C CD 89 B4 D1     call int6502_init
  154 D1:A980 CD 4A B4 D1     call ppu_init
  155 D1:A984 CD 59 B5 D1     call i6502Init
  156 D1:A988 -  -  -  -  
  157 D1:A988 -  -  -  -  
  158 D1:A988 DD 21 00 00 
              F2 -  -  -      ld  ix,$F20000
  159 D1:A98D DD 7E 30 -      ld  a,(ix+$30)
  160 D1:A990 CB 87 -  -      res 0,a ;turn off timer 0
  161 D1:A992 CB CF -  -      set 1,a ;timer 0 uses 32768Hz clock
  162 D1:A994 CB 97 -  -      res 2,a ;disables timer 0 interrupt generator
  163 D1:A996 DD 77 30 -      ld  (ix+$30),a
  164 D1:A999 -  -  -  -      ;
  165 D1:A999 2A 00 00 F2     ld  hl,($F20000)
  166 D1:A99D -  -  -  -  
  167 D1:A99D -  -  -  -  endCurrentRun:
  168 D1:A99D CD 19 E1 D1     call dbg_prepNextLine
  169 D1:A9A1 CD 3E B0 D1     call newLine
  170 D1:A9A5 21 7D AA D1     ld  hl,text005
  171 D1:A9A9 CD 55 B0 D1     call printString
  172 D1:A9AD -  -  -  -  
  173 D1:A9AD -  -  -  -      ;call printTextBuf
  174 D1:A9AD CD 61 AF D1     call fastCopy
  175 D1:A9B1 00 -  -  -      nop
  176 D1:A9B2 CD 55 AF D1     call waituntilnewkeypress
  177 D1:A9B6 CD 4D AF D1     call waituntilkeyrelease
  178 D1:A9BA -  -  -  -  
  179 D1:A9BA -  -  -  -      ;
  180 D1:A9BA -  -  -  -      ;
  181 D1:A9BA -  -  -  -      ;
  182 D1:A9BA -  -  -  -  programExit:
  183 D1:A9BA CD 7C AF D1     call stopGfx
  184 D1:A9BE ED 7B FC 31 
              D0 -  -  -      ld  sp,(save_spl)
  185 D1:A9C3 3A FF 31 D0     ld  a,(save_mbase)
  186 D1:A9C7 ED 6D -  -      ld  MB,a
  187 D1:A9C9 FD 21 80 00 
              D0 -  -  -      ld  iy,flags
  188 D1:A9CE C9 -  -  -      ret
  189 D1:A9CF -  -  -  -  
  190 D1:A9CF -  -  -  -  
  191 D1:A9CF -  -  -  -  testFilename:
  192 D1:A9CF 15 4E 45 53 
              54 45 53 54 
              00 -  -  -  .db AppVarObj,"NESTEST",0
  193 D1:A9D8 -  -  -  -  
  194 D1:A9D8 -  -  -  -  
  195 D1:A9D8 -  -  -  -  ;NMI, RES, and IRQ. In that order.
  196 D1:A9D8 -  -  -  -  testVectors .equ $-(256-6)
  197 D1:A9D8 00 80 -  -  .dw $8000
  198 D1:A9DA 00 80 -  -  .dw $8000
  199 D1:A9DC 00 80 -  -  .dw $8000
  200 D1:A9DE -  -  -  -  testCode:
  201 D1:A9DE A9 00 AA A8 .db $A9,$00,$AA,$A8
  202 D1:A9E2 BD 14 80 -  .db $BD,$14,$80
  203 D1:A9E5 C9 00 -  -  .db $C9,$00
  204 D1:A9E7 F0 08 -  -  .db $F0,$08
  205 D1:A9E9 99 21 40 -  .db $99,$21,$40
  206 D1:A9EC E8 C8 -  -  .db $E8,$C8
  207 D1:A9EE -  -  -  -  ;.db $12
  208 D1:A9EE 4C 04 80 02 .db $4C,$04,$80,$02
  209 D1:A9F2 48 65 6C 6C 
              6F 2C 20 57 
              6F -  -  -  .db $48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F
  210 D1:A9FB 72 6C 64 21 
              00 -  -  -  .db $72,$6C,$64,$21,$00
  211 D1:AA00 -  -  -  -  
  212 D1:AA00 -  -  -  -  
  213 D1:AA00 A9 00 AA A8 
              BD 11 80 C9 
              00 F0 05 99 
              21 40 D0 -  .db $A9,$00,$AA,$A8,$BD,$11,$80,$C9,$00,$F0,$05,$99,$21,$40,$D0
  214 D1:AA0F F4 02 48 65 
              6C 6C 6F 2C 
              20 57 6F 72 
              6C 64 21 00 .db $F4,$02,$48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F,$72,$6C,$64,$21,$00
  215 D1:AA1F 02 -  -  -  .db $02     ;JAM. Emulator terminates on unsupported instructions or JAMs.
  216 D1:AA20 -  -  -  -  
  217 D1:AA20 -  -  -  -  helloWorld:
  218 D1:AA20 48 65 6C 6C 
              6F 2C 20 57 
              6F 72 6C 64 
              21 00 -  -  .db "Hello, World!",0
  219 D1:AA2E -  -  -  -  
  220 D1:AA2E -  -  -  -  timings_file:
  221 D1:AA2E 15 74 69 6D 
              69 6E 67 73 
              00 -  -  -  .db AppVarObj,"timings",0
  222 D1:AA37 -  -  -  -  
  223 D1:AA37 -  -  -  -  text001:
  224 D1:AA37 4C 6F 6F 6B 
              69 6E 67 20 
              75 70 20 6E 
              65 73 74 65 
              73 74 2E 2E 
              2E 0A 00 -  .db "Looking up nestest...\n",0
  225 D1:AA4E -  -  -  -  text003:
  226 D1:AA4E 46 69 6C 65 
              20 66 6F 75 
              6E 64 3A 20 
              00 -  -  -  .db "File found: ",0
  227 D1:AA5B -  -  -  -  text004:
  228 D1:AA5B 52 4F 4D 46 
              69 6C 65 20 
              6C 6F 61 64 
              65 64 20 61 
              6E 64 20 72 
              65 61 64 79 
              20 74 6F 20 
              72 75 6E 2E 
              0A 00 -  -  .db "ROMFile loaded and ready to run.\n",0
  229 D1:AA7D -  -  -  -  text005:
  230 D1:AA7D -  -  -  -  ;    0123456789012345678901234567890123456789
  231 D1:AA7D 43 50 55 20 
              45 78 65 63 
              75 74 69 6F 
              6E 20 48 61 
              6C 74 65 64 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 00 -  .db "CPU Execution Halted                  ",0
  232 D1:AAA4 -  -  -  -  text006:
  233 D1:AAA4 -  -  -  -  
  234 D1:AAA4 -  -  -  -  
  235 D1:AAA4 07 -  -  -  .db 7
  236 D1:AAA5 -  -  -  -  firstFileHeader:
  237 D1:AAA5 43 45 4E 52 
              4F 4D 00 -  .db "CENROM",0
  238 D1:AAAC -  -  -  -  
  239 D1:AAAC -  -  -  -  err_:
  240 D1:AAAC -  -  -  -  
  241 D1:AAAC -  -  -  -  err_err:
  242 D1:AAAC E1 -  -  -      pop hl
  243 D1:AAAD CD 55 B0 D1     call printString
  244 D1:AAB1 -  -  -  -  err_err_quit:
  245 D1:AAB1 CD 61 AF D1     call fastCopy
  246 D1:AAB5 00 -  -  -      nop
  247 D1:AAB6 CD 55 AF D1     call waituntilnewkeypress
  248 D1:AABA CD 4D AF D1     call waituntilkeyrelease
  249 D1:AABE C3 BA A9 D1     jp programExit
  250 D1:AAC2 -  -  -  -  
  251 D1:AAC2 -  -  -  -  err_noContainersFound:
  252 D1:AAC2 CD AC AA D1     call err_err
  253 D1:AAC6 54 72 61 76 
              65 72 73 65 
              20 66 6F 75 
              6E 64 20 6E 
              6F 20 63 61 
              6E 64 69 64 
              61 74 65 73 
              2E 0A 00 -  .db "Traverse found no candidates.\n",0
  254 D1:AAE5 -  -  -  -  
  255 D1:AAE5 -  -  -  -  err_missingFiles:
  256 D1:AAE5 F5 -  -  -      push af
  257 D1:AAE6 21 F7 AA D1         ld  hl,err_missingFiles_str
  258 D1:AAEA CD 55 B0 D1         call printString
  259 D1:AAEE F1 -  -  -      pop af
  260 D1:AAEF CD 9B B0 D1     call printSmallNumPair
  261 D1:AAF3 C3 B1 AA D1     jp err_err_quit
  262 D1:AAF7 -  -  -  -  err_missingFiles_str:
  263 D1:AAF7 4E 75 6D 62 
              65 72 20 6F 
              66 20 66 69 
              6C 65 73 20 
              6D 69 73 73 
              69 6E 67 3A 
              20 00 -  -  .db "Number of files missing: ",0
  264 D1:AB11 -  -  -  -  
  265 D1:AB11 -  -  -  -  err_tooManyFiles:
  266 D1:AB11 CD AC AA D1     call err_err
  267 D1:AB15 54 6F 6F 20 
              6D 61 6E 79 
              20 66 69 6C 
              65 73 20 66 
              6F 75 6E 64 
              2E 00 -  -  .db "Too many files found.",0
  268 D1:AB2B -  -  -  -  
  269 D1:AB2B -  -  -  -  err_PRGROMTooLarge:
  270 D1:AB2B CD AC AA D1     call err_err
  271 D1:AB2F 50 52 47 5F 
              52 4F 4D 20 
              74 6F 6F 20 
              6C 61 72 67 
              65 2E 00 -  .db "PRG_ROM too large.",0
  272 D1:AB42 -  -  -  -  err_CHRROMTooLarge:
  273 D1:AB42 CD AC AA D1     call err_err
  274 D1:AB46 43 48 52 5F 
              52 4F 4D 20 
              74 6F 6F 20 
              6C 61 72 67 
              65 2E 00 -  .db "CHR_ROM too large.",0
  275 D1:AB59 -  -  -  -  
  276 D1:AB59 -  -  -  -  err_missingROMDetected:
  277 D1:AB59 CD AC AA D1     call err_err
  278 D1:AB5D 50 52 47 2B 
              43 48 52 20 
              3E 20 41 63 
              74 75 61 6C 
              20 66 69 6C 
              65 20 64 61 
              74 61 2E 00 .db "PRG+CHR > Actual file data.",0
  279 D1:AB79 -  -  -  -  
  280 D1:AB79 -  -  -  -  err_ROMHeaderDamaged:
  281 D1:AB79 CD AC AA D1     call err_err
  282 D1:AB7D 49 4E 45 53 
              20 52 4F 4D 
              20 68 65 61 
              64 65 72 20 
              64 61 6D 61 
              67 65 64 2E 
              00 -  -  -  .db "INES ROM header damaged.",0
  283 D1:AB96 -  -  -  -  
  284 D1:AB96 -  -  -  -  err_MapperOutOfRange:
  285 D1:AB96 CD AC AA D1     call err_err
  286 D1:AB9A 4D 61 70 70 
              65 72 20 73 
              70 65 63 69 
              66 69 65 64 
              20 6F 75 74 
              20 6F 66 20 
              72 61 6E 67 
              65 2E 00 -  .db "Mapper specified out of range.",0
  287 D1:ABB9 -  -  -  -  
  288 D1:ABB9 -  -  -  -  err_CHRROMNotFound:
  289 D1:ABB9 CD AC AA D1     call err_err
  290 D1:ABBD 43 48 52 5F 
              52 4F 4D 20 
              6E 6F 74 20 
              66 6F 75 6E 
              64 20 69 6E 
              73 69 64 65 
              20 66 69 6C 
              65 00 -  -  .db "CHR_ROM not found inside file",0
  291 D1:ABDB -  -  -  -  
  292 D1:ABDB -  -  -  -  
  293 D1:ABDB -  -  -  -  ;Input: DE = Address of first file after the container header signature
  294 D1:ABDB -  -  -  -  ;Outputs: ROM vectors recorded and ready to map
  295 D1:ABDB -  -  -  -  ;Destroys: All registers.
  296 D1:ABDB -  -  -  -  loadROMFile:
  297 D1:ABDB EB -  -  -      ex  de,hl
  298 D1:ABDC AF -  -  -      xor a,a
  299 D1:ABDD 32 33 34 D0     ld  (missing_files),a
  300 D1:ABE1 BE -  -  -  _:  cp  (hl)    ;
  301 D1:ABE2 23 -  -  -      inc hl      ;
  302 D1:ABE3 20 FC -  -      jr  nz,-_   ;skips past zero-terminated string containing full ROM name
  303 D1:ABE5 22 30 34 D0     ld  (basefile_sig),hl
  304 D1:ABE9 01 10 00 00     ld  bc,SIZEOF_INTEGRITY_HASH
  305 D1:ABED 09 -  -  -      add hl,bc
  306 D1:ABEE 7E -  -  -      ld  a,(hl)
  307 D1:ABEF FE 01 -  -      cp  a,MAXNUMFILES
  308 D1:ABF1 D2 11 AB D1     jp  nc,err_tooManyFiles
  309 D1:ABF5 32 2F 34 D0     ld  (inputNumFiles),a
  310 D1:ABF9 47 -  -  -      ld  b,a
  311 D1:ABFA -  -  -  -  ;    ld  c,SIZEOF_INTEGRITY_HASH     ;c already set to this value from earlier.
  312 D1:ABFA ED 4C -  -      mlt bc
  313 D1:ABFC 23 -  -  -      inc hl
  314 D1:ABFD E5 -  -  -      push hl
  315 D1:ABFE 09 -  -  -          add hl,bc
  316 D1:ABFF FD 21 50 34 
              D0 -  -  -          ld  iy,FILETABLE
  317 D1:AC04 4E -  -  -          ld  c,(hl)
  318 D1:AC05 23 -  -  -          inc hl
  319 D1:AC06 46 -  -  -          ld  b,(hl)
  320 D1:AC07 23 -  -  -          inc hl
  321 D1:AC08 52 FD 0F 00         ld.s (iy+FILE_SIZE_OFFSET),bc
  322 D1:AC0C FD 2F 02 -          ld  (iy+FILE_ADR_OFFSET),hl
  323 D1:AC0F E1 -  -  -      pop hl
  324 D1:AC10 3C -  -  -      inc a
  325 D1:AC11 3D -  -  -      dec a
  326 D1:AC12 28 47 -  -      jr  z,loadROMFile_singleFileLoad
  327 D1:AC14 -  -  -  -      ;If more than one file, fill FILETABLE.
  328 D1:AC14 -  -  -  -      ;NOTE: For now, this machinery is disabled. Only a single file is allowed.
  329 D1:AC14 ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  330 D1:AC17 47 -  -  -      ld  b,a
  331 D1:AC18 -  -  -  -  loadROMFile_multiFileLoadLoop:
  332 D1:AC18 C5 -  -  -      push bc
  333 D1:AC19 FD 2F 05 -          ld  (iy+FILE_SIG_ADR_OFFSET),hl
  334 D1:AC1C 01 10 00 00         ld  bc,16
  335 D1:AC20 11 C8 AE D1         ld  de,loadROMFile_tempSigHash
  336 D1:AC24 ED B0 -  -          ldir
  337 D1:AC26 E5 -  -  -          push hl
  338 D1:AC27 FD E5 -  -              push iy
  339 D1:AC29 01 17 00 00                 ld  bc,23
  340 D1:AC2D FD 21 C1 AE 
              D1 -  -  -                  ld  iy,loadROMFile_tempSig
  341 D1:AC32 CD D8 AE D1                 call vatTraverse    ;returns DE @ datasection size if found
  342 D1:AC36 30 05 -  -                  jr  nc,+_
  343 D1:AC38 21 33 34 D0                 ld  hl,missing_files
  344 D1:AC3C 34 -  -  -                  inc (hl)
  345 D1:AC3D FD E1 -  -  _:          pop iy
  346 D1:AC3F EB -  -  -              ex  de,hl
  347 D1:AC40 5E -  -  -              ld  e,(hl)
  348 D1:AC41 23 -  -  -              inc hl
  349 D1:AC42 56 -  -  -              ld  d,(hl)
  350 D1:AC43 23 -  -  -              inc hl
  351 D1:AC44 52 FD 1F 00             ld.s (iy+FILE_SIZE_OFFSET),de
  352 D1:AC48 FD 2F 02 -              ld  (iy+FILE_ADR_OFFSET),hl
  353 D1:AC4B E1 -  -  -          pop hl
  354 D1:AC4C C1 -  -  -      pop bc
  355 D1:AC4D ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  356 D1:AC50 10 C6 -  -      djnz loadROMFile_multiFileLoadLoop
  357 D1:AC52 3A 33 34 D0     ld  a,(missing_files)
  358 D1:AC56 B7 -  -  -      or  a,a
  359 D1:AC57 C2 E5 AA D1     jp  nz,err_missingFiles
  360 D1:AC5B -  -  -  -  loadROMFile_singleFileLoad:
  361 D1:AC5B -  -  -  -      ;Compute size of ROM by summing filesizes, less INES header
  362 D1:AC5B 3A 2F 34 D0     ld  a,(inputNumFiles)
  363 D1:AC5F 3C -  -  -      inc a
  364 D1:AC60 47 -  -  -      ld  b,a
  365 D1:AC61 21 00 00 00     ld  hl,0
  366 D1:AC65 DD 21 50 34 
              D0 -  -  -      ld  ix,FILETABLE
  367 D1:AC6A 52 DD 17 00 _:  ld.s de,(ix+FILE_SIZE_OFFSET)
  368 D1:AC6E 19 -  -  -      add hl,de
  369 D1:AC6F ED 32 08 -      lea ix,ix+FILETABLE_STRIDE
  370 D1:AC72 10 F6 -  -      djnz -_
  371 D1:AC74 01 F0 FF FF     ld  bc,-16
  372 D1:AC78 09 -  -  -      add hl,bc   ;subtract INES header
  373 D1:AC79 22 34 34 D0     ld  (total_rom_size),hl
  374 D1:AC7D -  -  -  -      ;Verify that the file actually contains an INES header.
  375 D1:AC7D -  -  -  -      ;TODO: Do this at an earlier stage. Such as file selection.
  376 D1:AC7D DD 2A 52 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  377 D1:AC82 DD 27 00 -      ld  hl,(ix+0)
  378 D1:AC85 11 4E 45 53     ld  de,$53454E         ;4E 45 53 == "NES"
  379 D1:AC89 B7 -  -  -      or  a,a
  380 D1:AC8A ED 52 -  -      sbc hl,de   ;Note: add does not affect zero flag. Can't test this via -DE
  381 D1:AC8C C2 79 AB D1 _:  jp  nz,err_ROMHeaderDamaged
  382 D1:AC90 DD 7E 03 -      ld  a,(ix+3)
  383 D1:AC93 FE 1A -  -      cp  a,$1A
  384 D1:AC95 20 F5 -  -      jr  nz,-_   ;19
  385 D1:AC97 -  -  -  -      ;Compute ROM size by reading INES header. This should be equ or lt above.
  386 D1:AC97 -  -  -  -      ;Note: The below line is optimized from...
  387 D1:AC97 DD 2A 52 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  388 D1:AC9C -  -  -  -      ;... these lines. But the intent might not be perfectly clear. We'll keep
  389 D1:AC9C -  -  -  -      ;these here just in case there's ever a question about it.
  390 D1:AC9C -  -  -  -  ;    ld  ix,FILETABLE
  391 D1:AC9C -  -  -  -  ;    ld  ix,(ix+FILE_ADR_OFFSET)
  392 D1:AC9C DD 6E 04 -      ld  L,(ix+4)    ;PRG ROM count, low
  393 D1:AC9F DD 5E 05 -      ld  e,(ix+5)    ;CHR ROM count, low
  394 D1:ACA2 26 00 -  -      ld  h,0
  395 D1:ACA4 54 -  -  -      ld  d,h
  396 D1:ACA5 DD 7E 07 -      ld  a,(ix+7)    ;Check for INES2 bits
  397 D1:ACA8 E6 0C -  -      and a,%00001100
  398 D1:ACAA FE 08 -  -      cp  a,%00001000
  399 D1:ACAC 20 1B -  -      jr  nz,+_
  400 D1:ACAE DD 7E 09 -      ld  a,(ix+9)
  401 D1:ACB1 47 -  -  -      ld  b,a
  402 D1:ACB2 E6 0F -  -      and a,$0F
  403 D1:ACB4 FE 02 -  -      cp  a,MAXPRGROM_HINIB+1
  404 D1:ACB6 D2 2B AB D1     jp  nc,err_PRGROMTooLarge
  405 D1:ACBA 67 -  -  -      ld  h,a
  406 D1:ACBB 78 -  -  -      ld  a,b
  407 D1:ACBC E6 F0 -  -      and a,$F0
  408 D1:ACBE 07 -  -  -      rlca
  409 D1:ACBF 07 -  -  -      rlca
  410 D1:ACC0 07 -  -  -      rlca
  411 D1:ACC1 07 -  -  -      rlca
  412 D1:ACC2 FE 04 -  -      cp  a,MAXCHRROM_HINIB+1
  413 D1:ACC4 D2 42 AB D1     jp  nc,err_CHRROMTooLarge
  414 D1:ACC8 57 -  -  -      ld  d,a
  415 D1:ACC9 AF -  -  -  _:  xor a,a
  416 D1:ACCA 32 37 34 D0     ld  (prg_rom_size),a
  417 D1:ACCE 32 3A 34 D0     ld  (chr_rom_size),a
  418 D1:ACD2 29 -  -  -      add hl,hl   ;x2
  419 D1:ACD3 29 -  -  -      add hl,hl   ;x4
  420 D1:ACD4 29 -  -  -      add hl,hl   ;x8
  421 D1:ACD5 29 -  -  -      add hl,hl   ;x16
  422 D1:ACD6 29 -  -  -      add hl,hl   ;x32
  423 D1:ACD7 29 -  -  -      add hl,hl   ;x64
  424 D1:ACD8 52 22 38 34 
              D0 -  -  -      ld.s (prg_rom_size+1),hl    ;x64x256
  425 D1:ACDD EB -  -  -      ex  de,hl
  426 D1:ACDE 29 -  -  -      add hl,hl   ;x2
  427 D1:ACDF 29 -  -  -      add hl,hl   ;x4
  428 D1:ACE0 29 -  -  -      add hl,hl   ;x8
  429 D1:ACE1 29 -  -  -      add hl,hl   ;x16
  430 D1:ACE2 29 -  -  -      add hl,hl   ;x32
  431 D1:ACE3 52 22 3B 34 
              D0 -  -  -      ld.s (chr_rom_size+1),hl    ;x32x256
  432 D1:ACE8 2A 3A 34 D0     ld  hl,(chr_rom_size)
  433 D1:ACEC ED 5B 37 34 
              D0 -  -  -      ld  de,(prg_rom_size)
  434 D1:ACF1 19 -  -  -      add hl,de
  435 D1:ACF2 ED 5B 34 34 
              D0 -  -  -      ld  de,(total_rom_size)
  436 D1:ACF7 B7 -  -  -      or  a,a
  437 D1:ACF8 ED 52 -  -      sbc hl,de   ;declared-actual. declared must be equal to or smaller.
  438 D1:ACFA 28 04 -  -      jr  z,+_
  439 D1:ACFC D2 59 AB D1     jp  nc,err_missingROMDetected
  440 D1:AD00 -  -  -  -  _:  ;Find trainer, PRG, and CHR base addresses
  441 D1:AD00 ED 22 10 -      lea hl,ix+16
  442 D1:AD03 22 43 34 D0     ld  (trainer_base),hl   ;whether it exists or not.
  443 D1:AD07 11 00 00 00     ld  de,0
  444 D1:AD0B DD CB 06 56     bit 2,(ix+6)
  445 D1:AD0F 28 04 -  -      jr  z,+_
  446 D1:AD11 11 00 02 00     ld  de,512
  447 D1:AD15 19 -  -  -  _:  add hl,de
  448 D1:AD16 22 43 34 D0     ld  (prg_rom_base),hl
  449 D1:AD1A FD 21 50 34 
              D0 -  -  -      ld  iy,FILETABLE
  450 D1:AD1F 52 FD 27 00     ld.s hl,(iy+FILE_SIZE_OFFSET)
  451 D1:AD23 B7 -  -  -      or  a,a
  452 D1:AD24 ED 52 -  -      sbc hl,de   ;less possible trainer
  453 D1:AD26 11 10 00 00     ld  de,16
  454 D1:AD2A ED 52 -  -      sbc hl,de   ;less iNES header. Remaining is now size of current file.
  455 D1:AD2C EB -  -  -      ex  de,hl   ;curfilesize is now in DE
  456 D1:AD2D 2A 37 34 D0     ld  hl,(prg_rom_size)   ;keep subtracting filesize from this until carry.
  457 D1:AD31 B7 -  -  -      or  a,a
  458 D1:AD32 ED 52 -  -      sbc hl,de   ;if carry, prg_rom end is inside this file. Undo: HL is offset.
  459 D1:AD34 0E 00 -  -      ld  c,0     ;0th file current
  460 D1:AD36 38 1D -  -      jr  c,loadROMFile_locatedCHRROM
  461 D1:AD38 3A 2F 34 D0     ld  a,(inputNumFiles)
  462 D1:AD3C B7 -  -  -      or  a,a
  463 D1:AD3D 28 12 -  -      jr  z,loadROMFile_noCHRROMFound
  464 D1:AD3F 47 -  -  -      ld  b,a
  465 D1:AD40 ED 33 08 -  _:  lea iy,iy+FILETABLE_STRIDE
  466 D1:AD43 52 ED 5B 00 
              00 00 -  -      ld.s de,(FILE_SIZE_OFFSET)
  467 D1:AD49 0C -  -  -      inc c
  468 D1:AD4A B7 -  -  -      or  a,a
  469 D1:AD4B ED 52 -  -      sbc hl,de   ;
  470 D1:AD4D 38 06 -  -      jr  c,loadROMFile_locatedCHRROM
  471 D1:AD4F 10 EF -  -      djnz -_
  472 D1:AD51 -  -  -  -  loadROMFile_noCHRROMFound:
  473 D1:AD51 C3 B9 AB D1     jp  err_CHRROMNotFound
  474 D1:AD55 -  -  -  -  loadROMFile_locatedCHRROM:
  475 D1:AD55 19 -  -  -      add hl,de       ;Undid subtract. HL is now offset in current file
  476 D1:AD56 FD 17 02 -      ld  de,(iy+FILE_ADR_OFFSET) ;so get address inside that file.
  477 D1:AD59 19 -  -  -      add hl,de
  478 D1:AD5A 79 -  -  -      ld  a,c
  479 D1:AD5B 22 46 34 D0     ld  (chr_rom_base),hl
  480 D1:AD5F 32 49 34 D0     ld  (chr_rom_base_file),a
  481 D1:AD63 -  -  -  -      ;Detect mapper and run its initializer
  482 D1:AD63 DD 7E 06 -      ld  a,(ix+6)
  483 D1:AD66 DD 46 07 -      ld  b,(ix+7)
  484 D1:AD69 07 -  -  -      rlca
  485 D1:AD6A 07 -  -  -      rlca
  486 D1:AD6B 07 -  -  -      rlca
  487 D1:AD6C 07 -  -  -      rlca
  488 D1:AD6D A8 -  -  -      xor a,b
  489 D1:AD6E E6 0F -  -      and a,$0F
  490 D1:AD70 A8 -  -  -      xor a,b
  491 D1:AD71 52 EB -  -      ex.s de,hl  ;clears HLU,DEU
  492 D1:AD73 5F -  -  -      ld  e,a
  493 D1:AD74 21 3D 34 D0     ld  hl,submapper
  494 D1:AD78 36 00 -  -      ld  (hl),0
  495 D1:AD7A 78 -  -  -      ld  a,b
  496 D1:AD7B E6 0C -  -      and a,%00001100
  497 D1:AD7D FE 08 -  -      cp  a,%00001000
  498 D1:AD7F 3E 00 -  -      ld  a,0
  499 D1:AD81 20 0E -  -      jr  nz,+_
  500 D1:AD83 DD 46 08 -      ld  b,(ix+8)
  501 D1:AD86 78 -  -  -      ld  a,b
  502 D1:AD87 07 -  -  -      rlca
  503 D1:AD88 07 -  -  -      rlca
  504 D1:AD89 07 -  -  -      rlca
  505 D1:AD8A 07 -  -  -      rlca
  506 D1:AD8B E6 0F -  -      and a,$0F
  507 D1:AD8D 77 -  -  -      ld  (hl),a
  508 D1:AD8E 78 -  -  -      ld  a,b
  509 D1:AD8F E6 0F -  -      and a,$0F
  510 D1:AD91 57 -  -  -  _:  ld  d,a
  511 D1:AD92 ED 53 3F 34 
              D0 -  -  -      ld  (mapper_id),de
  512 D1:AD97 21 FF FF FF     ld  hl,-NUMBER_OF_MAPPERS
  513 D1:AD9B 19 -  -  -      add hl,de
  514 D1:AD9C DA 96 AB D1     jp  c,err_MapperOutOfRange
  515 D1:ADA0 ED 62 -  -      sbc hl,hl
  516 D1:ADA2 19 -  -  -      add hl,de               ;hl=de. both are mapper IDs
  517 D1:ADA3 2E 09 -  -      ld  L,MAPPER_STRIDE
  518 D1:ADA5 55 -  -  -      ld  d,L
  519 D1:ADA6 ED 6C -  -      mlt hl                  ;high byte multiply
  520 D1:ADA8 65 -  -  -      ld  h,L
  521 D1:ADA9 2E 00 -  -      ld  L,0
  522 D1:ADAB ED 5C -  -      mlt de                  ;low byte multiply
  523 D1:ADAD 19 -  -  -      add hl,de               ;This is the best 16bit * 8bit I know to do.
  524 D1:ADAE 11 BA AD D1     ld  de,mapper_table
  525 D1:ADB2 19 -  -  -      add hl,de
  526 D1:ADB3 22 40 34 D0     ld  (mapper_adr_base),hl
  527 D1:ADB7 ED 27 -  -      ld  hl,(hl)
  528 D1:ADB9 E9 -  -  -      jp  (hl)
  529 D1:ADBA -  -  -  -  
  530 D1:ADBA -  -  -  -  mapper_table:   ;entries 9 wide
  531 D1:ADBA C3 AD D1 -  .dl mapper0_init
  532 D1:ADBD 40 AE D1 -  .dl mapper0_read
  533 D1:ADC0 63 AE D1 -  .dl mapper0_write
  534 D1:ADC3 -  -  -  -  
  535 D1:ADC3 -  -  -  -  mapper0_init:
  536 D1:ADC3 -  -  -  -      ;map trainer, if exist
  537 D1:ADC3 DD CB 06 56     bit 2,(ix+6)
  538 D1:ADC7 28 0D -  -      jr  z,+_
  539 D1:ADC9 2A 43 34 D0     ld  hl,(trainer_base)
  540 D1:ADCD 1E 70 -  -      ld  e,$70
  541 D1:ADCF 0E 02 -  -      ld  c,2
  542 D1:ADD1 41 -  -  -      ld  b,c
  543 D1:ADD2 CD 63 B6 D1     call i6502_map_pages
  544 D1:ADD6 2A 37 34 D0 _:  ld  hl,(prg_rom_size)
  545 D1:ADDA 11 FF BF FF     ld  de,-(16384+1)
  546 D1:ADDE 19 -  -  -      add hl,de   ;carry if more than 1 16KB segment
  547 D1:ADDF 2A 43 34 D0     ld  hl,(prg_rom_base)
  548 D1:ADE3 -  -  -  -      ;jr  $
  549 D1:ADE3 06 80 -  -      ld  b,$80
  550 D1:ADE5 58 -  -  -      ld  e,b
  551 D1:ADE6 0E 40 -  -      ld  c,$40
  552 D1:ADE8 30 02 -  -      jr  nc,+_
  553 D1:ADEA CB 21 -  -      sla c
  554 D1:ADEC CD 63 B6 D1 _:  call i6502_map_pages
  555 D1:ADF0 -  -  -  -      ;map in nametable mirroring
  556 D1:ADF0 21 00 58 D0     ld  hl,NAMETABLE1
  557 D1:ADF4 11 00 5C D0     ld  de,NAMETABLE2
  558 D1:ADF8 22 00 34 D0     ld  (nametable00),hl
  559 D1:ADFC ED 53 0C 34 
              D0 -  -  -      ld  (nametable11),de
  560 D1:AE01 DD CB 06 46     bit 0,(ix+6)    ;nametable arrangement. Mapper 0 has no alternates.
  561 D1:AE05 28 01 -  -      jr  z,+_
  562 D1:AE07 EB -  -  -      ex  de,hl
  563 D1:AE08 22 04 34 D0 _:  ld  (nametable01),hl
  564 D1:AE0C ED 53 08 34 
              D0 -  -  -      ld  (nametable10),de
  565 D1:AE11 -  -  -  -      ;Fill out nametable attrib pointers
  566 D1:AE11 21 00 34 D0     ld  hl,nametable00
  567 D1:AE15 01 C0 03 00     ld  bc,960
  568 D1:AE19 3E 04 -  -      ld  a,4
  569 D1:AE1B ED 17 -  -  _:  ld  de,(hl)
  570 D1:AE1D CB E5 -  -      set 4,L
  571 D1:AE1F EB -  -  -      ex  de,hl
  572 D1:AE20 09 -  -  -      add hl,bc
  573 D1:AE21 EB -  -  -      ex  de,hl
  574 D1:AE22 ED 1F -  -      ld  (hl),de
  575 D1:AE24 CB A5 -  -      res 4,L
  576 D1:AE26 23 -  -  -      inc hl
  577 D1:AE27 23 -  -  -      inc hl
  578 D1:AE28 23 -  -  -      inc hl
  579 D1:AE29 23 -  -  -      inc hl
  580 D1:AE2A 3D -  -  -      dec a
  581 D1:AE2B 20 EE -  -      jr  nz,-_
  582 D1:AE2D -  -  -  -      ;initilize chr_rom current bank address.
  583 D1:AE2D -  -  -  -      ;This mapper does not allow any additional banks, but if it does, this
  584 D1:AE2D -  -  -  -      ;value must be recalculated from chr_rom_base
  585 D1:AE2D 2A 46 34 D0     ld  hl,(chr_rom_base)
  586 D1:AE31 22 2C 34 D0     ld  (chr_rom_curbank),hl
  587 D1:AE35 21 B6 AE D1     ld  hl,mapper0_ppu_write
  588 D1:AE39 22 4A 34 D0     ld  (ppu_smc_gate),hl
  589 D1:AE3D 36 C9 -  -      ld  (hl),$C9    ;ret. Will write nop here during first NMI handle
  590 D1:AE3F C9 -  -  -      ret
  591 D1:AE40 -  -  -  -  
  592 D1:AE40 -  -  -  -  
  593 D1:AE40 -  -  -  -  mapper0_read:
  594 D1:AE40 7A -  -  -      ld  a,d
  595 D1:AE41 87 -  -  -      add a,a
  596 D1:AE42 30 08 -  -      jr  nc,+_
  597 D1:AE44 7E -  -  -      ld  a,(hl)  ;is $8000 or above
  598 D1:AE45 C9 -  -  -      ret
  599 D1:AE46 FE 40 -  -      cp  a,$20*2
  600 D1:AE48 38 02 -  -      jr  c,+_
  601 D1:AE4A 7E -  -  -      ld  a,(hl)  ;is below $2000
  602 D1:AE4B C9 -  -  -      ret
  603 D1:AE4C 87 -  -  -  _:  add a,a
  604 D1:AE4D 30 12 -  -      jr  nc,mapper0_ppu_read     ;wasn't $4000 or higher.
  605 D1:AE4F 28 02 -  -      jr  z,mapper0_apu_read      ;high byte was exactly $40
  606 D1:AE51 7E -  -  -      ld  a,(hl)
  607 D1:AE52 C9 -  -  -      ret
  608 D1:AE53 -  -  -  -  mapper0_apu_read:
  609 D1:AE53 79 -  -  -      ld  a,c
  610 D1:AE54 FE 16 -  -      cp  a,$16
  611 D1:AE56 20 07 -  -      jr  nz,+_
  612 D1:AE58 AF -  -  -      xor a,a
  613 D1:AE59 DD CB FE 3E     srl (ix+APU_KEYPAD)
  614 D1:AE5D 8F -  -  -      adc a,a                 ;TODO: Open bus behavior on bits 5-7
  615 D1:AE5E C9 -  -  -      ret
  616 D1:AE5F 7E -  -  -  _:  ld  a,(hl)  ;hope that the dummy map page is good enough to not crash.
  617 D1:AE60 C9 -  -  -      ret
  618 D1:AE61 -  -  -  -  mapper0_ppu_read:
  619 D1:AE61 -  -  -  -      ;TODO: PPU SUPPORT
  620 D1:AE61 7E -  -  -      ld  a,(hl)
  621 D1:AE62 C9 -  -  -      ret
  622 D1:AE63 -  -  -  -  
  623 D1:AE63 -  -  -  -  
  624 D1:AE63 -  -  -  -  
  625 D1:AE63 -  -  -  -  mapper0_write:
  626 D1:AE63 7A -  -  -      ld  a,d
  627 D1:AE64 FE 20 -  -      cp  a,$20
  628 D1:AE66 30 02 -  -      jr  nc,+_
  629 D1:AE68 70 -  -  -      ld  (hl),b
  630 D1:AE69 C9 -  -  -      ret
  631 D1:AE6A FE 40 -  -  _:  cp  a,$40
  632 D1:AE6C 38 48 -  -      jr  c,mapper0_ppu_write
  633 D1:AE6E 28 04 -  -      jr  z,mapper0_apu_write
  634 D1:AE70 87 -  -  -      add a,a
  635 D1:AE71 D8 -  -  -      ret c       ;don't write anything to above $8000
  636 D1:AE72 70 -  -  -      ld  (hl),b  ;but allow it in $4100-$7FFF because it might be RAM.
  637 D1:AE73 C9 -  -  -      ret
  638 D1:AE74 -  -  -  -  mapper0_apu_write:
  639 D1:AE74 79 -  -  -      ld  a,c
  640 D1:AE75 FE 16 -  -      cp  a,$16
  641 D1:AE77 20 3B -  -      jr  nz,+_
  642 D1:AE79 DD 7E FF -      ld  a,(ix+APU_KEYLATCH)
  643 D1:AE7C A8 -  -  -      xor a,b     ;Bit 0 is set if we're trying to change controller poll state.
  644 D1:AE7D 0F -  -  -      rrca        ;And this is how we're going to get it.
  645 D1:AE7E D0 -  -  -      ret nc      ;Only support NES standard controller.
  646 D1:AE7F CB 40 -  -      bit 0,b     ;So... what are we changing it to?
  647 D1:AE81 DD 70 FF -      ld  (ix+APU_KEYLATCH),b
  648 D1:AE84 21 00 00 F5     ld  hl,mpKeyMode
  649 D1:AE88 28 06 -  -      jr  z,mapper0_apu_stop_keyboard
  650 D1:AE8A 7E -  -  -      ld  a,(hl)
  651 D1:AE8B FE 03 -  -      cp  a,3
  652 D1:AE8D C8 -  -  -      ret z       ;don't do anything to the keyboard if running continuous.
  653 D1:AE8E 77 -  -  -      ld  (hl),a  ;else set to continuous and keep going.
  654 D1:AE8F C9 -  -  -      ret
  655 D1:AE90 -  -  -  -  mapper0_apu_stop_keyboard:
  656 D1:AE90 2E 12 -  -      ld  L,$12   ;76543210 : del mode 2nd y= wind zoom trace graph
  657 D1:AE92 7E -  -  -      ld  a,(hl)
  658 D1:AE93 2E 1E -  -      ld  L,$1E   ;----3210 : up right left down
  659 D1:AE95 4E -  -  -      ld  c,(hl)
  660 D1:AE96 A9 -  -  -      xor a,c
  661 D1:AE97 E6 F0 -  -      and a,%11110000
  662 D1:AE99 A9 -  -  -      xor a,c     ;keymapping has changed. We need to further alter it.
  663 D1:AE9A -  -  -  -      ;[DE MO 2N Y= UP RI LE DO] maps to [SE, B, A, ST, UP, RI, LE, DO]
  664 D1:AE9A -  -  -  -      ;The above must be rearranged to become:
  665 D1:AE9A -  -  -  -      ;            [RI, LE, DO, UP, ST, SE, B , A ]
  666 D1:AE9A -  -  -  -      ;as compared to
  667 D1:AE9A -  -  -  -      ;            [SE, B , A , ST, UP, RI, LE, DO]
  668 D1:AE9A 07 -  -  -      rlca        ;[B , A , ST, UP, RI, LE, DO, SE]
  669 D1:AE9B 4F -  -  -      ld  c,a     ;b4  : UP is in correct position.
  670 D1:AE9C 07 -  -  -      rlca        ;[A , ST, UP, RI, LE, DO, SE, B ]
  671 D1:AE9D 07 -  -  -      rlca        ;[ST, UP, RI, LE, DO, SE, B , A ]
  672 D1:AE9E 47 -  -  -      ld  b,a     ;b0-2:SE, B , and A are in the correct position
  673 D1:AE9F 07 -  -  -      rlca        ;[UP, RI, LE, DO, SE, B , A , ST]
  674 D1:AEA0 07 -  -  -      rlca        ;[RI, LE, DO, SE, B , A , ST, UP]
  675 D1:AEA1 57 -  -  -      ld  d,a     ;b5-7: RI LE DO in correct position.
  676 D1:AEA2 07 -  -  -      rlca        ;[LE, DO, SE, B , A , ST, UP, RI]
  677 D1:AEA3 07 -  -  -      rlca        ;b3: ST is in the correct position.
  678 D1:AEA4 A9 -  -  -      xor a,c     ;
  679 D1:AEA5 E6 08 -  -      and a,%00001000 ;keep A3, merge others
  680 D1:AEA7 A9 -  -  -      xor a,c     ;Has: A3. Merge-in contains b4
  681 D1:AEA8 A8 -  -  -      xor a,b     ;
  682 D1:AEA9 E6 18 -  -      and a,%00011000 ;keep A3-4
  683 D1:AEAB A8 -  -  -      xor a,b     ;Merge-in contains b0-2
  684 D1:AEAC AA -  -  -      xor a,d     ;
  685 D1:AEAD E6 1F -  -      and a,%00011111 ;keep A0-4
  686 D1:AEAF AA -  -  -      xor a,d     ;Merge-in contains b5-7. Is complete.
  687 D1:AEB0 DD 77 FE -      ld  (ix+APU_KEYPAD),a
  688 D1:AEB3 C9 -  -  -      ret
  689 D1:AEB4 -  -  -  -  _:  ;not even going to try to emulate the second controller.
  690 D1:AEB4 70 -  -  -      ld  (hl),b
  691 D1:AEB5 C9 -  -  -      ret
  692 D1:AEB6 -  -  -  -  mapper0_ppu_write:
  693 D1:AEB6 C9 -  -  -      ret
  694 D1:AEB7 -  -  -  -      ;TODO: gate off access outside VBlank
  695 D1:AEB7 79 -  -  -      ld  a,c
  696 D1:AEB8 E6 07 -  -      and a,%00000111
  697 D1:AEBA FE 02 -  -      cp  $02
  698 D1:AEBC C8 -  -  -      ret z   ;read-only register. do not write to it.
  699 D1:AEBD 20 00 -  -      jr  nz,mapper0_ppu_write_skipCtrl
  700 D1:AEBF 70 -  -  -      ld  (hl),b
  701 D1:AEC0 C9 -  -  -      ret
  702 D1:AEC1 -  -  -  -  
  703 D1:AEC1 -  -  -  -  
  704 D1:AEC1 -  -  -  -  
  705 D1:AEC1 -  -  -  -  
  706 D1:AEC1 -  -  -  -  
  707 D1:AEC1 -  -  -  -  
  708 D1:AEC1 -  -  -  -  loadROMFile_tempSig:    ;total 23 bytes
  709 D1:AEC1 43 45 4E 52 
              4F 32 00 -  .db "CENRO2",0
  710 D1:AEC8 -  -  -  -  loadROMFile_tempSigHash:
  711 D1:AEC8 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;16 bytes for hash
  712 D1:AED8 -  -  -  -  
  713 D1:AED8 -  -  -  -  
  714 D1:AED8 -  -  -  -  ;Input: IY = locationOfSignature. 
  715 D1:AED8 -  -  -  -  ;       BC=size of signature (long load to clear BCU), still limited to 255.
  716 D1:AED8 -  -  -  -  ;Output: carry=1: Variable not found.
  717 D1:AED8 -  -  -  -  ;Output: carry=0: DE=address of variable data start after the signature
  718 D1:AED8 -  -  -  -  ;        IX=location of current variable's VAT location.
  719 D1:AED8 -  -  -  -  ;Destroys: All registers not in use.
  720 D1:AED8 -  -  -  -  ;NOTES: This routine is capable of resuming a search that has ended.
  721 D1:AED8 -  -  -  -  
  722 D1:AED8 -  -  -  -  ;To continue searching:
  723 D1:AED8 -  -  -  -  ;call vatTraverse_continue with the following inputs:
  724 D1:AED8 -  -  -  -  ;   IX preserved from a non-carry return of vatTraverse.
  725 D1:AED8 -  -  -  -  ;   BC = same as input for vatTraverse. vatTraverse does not destroy this reg.
  726 D1:AED8 -  -  -  -  ;   WARNING: DO NOT KEEP SEARCHING AFTER CALL RETURNS CARRY. START A NEW SEARCH.
  727 D1:AED8 -  -  -  -  vatTraverse:
  728 D1:AED8 -  -  -  -      ;progPtr = progvat start; ptemp = progvatend
  729 D1:AED8 DD 2A 9D 25 
              D0 -  -  -      ld  ix,(progPtr)
  730 D1:AEDD -  -  -  -  vatTraverse_loop:
  731 D1:AEDD 2A 9A 25 D0     ld  hl,(pTemp)
  732 D1:AEE1 ED 12 00 -      lea de,ix+0
  733 D1:AEE4 B7 -  -  -      or  a,a
  734 D1:AEE5 ED 52 -  -      sbc hl,de   ;HL<DE while in pVAT, else carry set.
  735 D1:AEE7 3F -  -  -      ccf
  736 D1:AEE8 D8 -  -  -      ret c
  737 D1:AEE9 1A -  -  -      ld  a,(de)
  738 D1:AEEA E6 1F -  -      and a,$1F
  739 D1:AEEC FE 15 -  -      cp  a,AppVarObj
  740 D1:AEEE 20 34 -  -      jr  nz,vatTraverse_skip
  741 D1:AEF0 DD 17 F9 -      ld  de,(ix-7)   ;puts "page" byte in DEU
  742 D1:AEF3 DD 5E FD -      ld  e,(ix-3)
  743 D1:AEF6 DD 56 FC -      ld  d,(ix-4)
  744 D1:AEF9 CD 98 1F 02     call _ChkInRam
  745 D1:AEFD EB -  -  -      ex  de,hl
  746 D1:AEFE 30 08 -  -      jr  nc,+_
  747 D1:AF00 11 09 00 00     ld  de,9
  748 D1:AF04 19 -  -  -      add hl,de
  749 D1:AF05 5E -  -  -      ld  e,(hl)
  750 D1:AF06 19 -  -  -      add hl,de
  751 D1:AF07 23 -  -  -      inc hl
  752 D1:AF08 5E -  -  -  _:  ld  e,(hl)
  753 D1:AF09 23 -  -  -      inc hl
  754 D1:AF0A 56 -  -  -      ld  d,(hl)
  755 D1:AF0B 23 -  -  -      inc hl
  756 D1:AF0C EB -  -  -      ex  de,hl
  757 D1:AF0D B7 -  -  -      or  a,a
  758 D1:AF0E ED 42 -  -      sbc hl,bc   ;varsize-entrysize. If carry, entry cannot possibly be in var.
  759 D1:AF10 38 12 -  -      jr  c,vatTraverse_skip
  760 D1:AF12 ED 23 00 -      lea hl,iy+0
  761 D1:AF15 C5 -  -  -      push bc
  762 D1:AF16 1A -  -  -  _:      ld  a,(de)
  763 D1:AF17 13 -  -  -          inc de
  764 D1:AF18 ED A1 -  -          cpi
  765 D1:AF1A 20 07 -  -          jr  nz,vatTraverse_sigNoMatch
  766 D1:AF1C EA 16 AF D1         jp  pe,-_
  767 D1:AF20 C1 -  -  -      pop bc
  768 D1:AF21 B7 -  -  -      or  a,a
  769 D1:AF22 C9 -  -  -      ret         ;NC. DE = past the signature.
  770 D1:AF23 -  -  -  -  vatTraverse_sigNoMatch:
  771 D1:AF23 C1 -  -  -      pop bc
  772 D1:AF24 -  -  -  -  vatTraverse_continue:
  773 D1:AF24 -  -  -  -  vatTraverse_skip:
  774 D1:AF24 3E 07 -  -      ld  a,7
  775 D1:AF26 11 FF FF FF     ld  de,-1
  776 D1:AF2A DD 86 FA -      add a,(ix-6)
  777 D1:AF2D ED 44 -  -      neg
  778 D1:AF2F 5F -  -  -      ld  e,a
  779 D1:AF30 DD 19 -  -      add ix,de   ;because "sbc ix,de" isn't a thing. Boo.
  780 D1:AF32 18 A9 -  -      jr  vatTraverse_loop
  781 D1:AF34 -  -  -  -  
  782 D1:AF34 -  -  -  -  ;Copied from my Falldown2 project. I didn't want to have to
  783 D1:AF34 -  -  -  -  ;find yet another hardware reference for something I already did.
  784 D1:AF34 -  -  -  -  ;But I'll have to do it again anyway because this isn't exactly
  785 D1:AF34 -  -  -  -  ;what we're looking for. Here, we output the same sort of
  786 D1:AF34 -  -  -  -  ;game keys that I've used basically all my programming life.
  787 D1:AF34 -  -  -  -  ;Anyhoo. We'll be using the following:
  788 D1:AF34 -  -  -  -  ;kbitDown	equ 00h
  789 D1:AF34 -  -  -  -  ;kbitLeft	equ 01h
  790 D1:AF34 -  -  -  -  ;kbitRight	equ 02h
  791 D1:AF34 -  -  -  -  ;kbitUp		equ 03h
  792 D1:AF34 -  -  -  -  ;kbitYequ equ 04h
  793 D1:AF34 -  -  -  -  ;kbit2nd		equ 05h
  794 D1:AF34 -  -  -  -  ;kbitMode	equ 06h
  795 D1:AF34 -  -  -  -  ;kbitDel		equ 07h
  796 D1:AF34 -  -  -  -  ;You can find the other defines approximately where I found the stuff above.
  797 D1:AF34 -  -  -  -  
  798 D1:AF34 -  -  -  -  getkbd_adl:
  799 D1:AF34 DD 21 00 00 
              F5 -  -  -  	ld  ix,mpKeyMode
  800 D1:AF39 ED 22 00 -  	lea hl,ix+0
  801 D1:AF3C 36 02 -  -  	ld  (hl),keyModeScanOnce
  802 D1:AF3E AF -  -  -  	xor a
  803 D1:AF3F BE -  -  -  _:  cp  (hl)
  804 D1:AF40 20 FD -  -  	jr  nz,-_
  805 D1:AF42 DD 7E 12 -  	ld  a,(ix+kbdG1-mpKeyRange)
  806 D1:AF45 DD 6E 1E -  	ld  l,(ix+kbdG7-mpKeyRange)
  807 D1:AF48 AD -  -  -  	xor L
  808 D1:AF49 E6 F0 -  -  	and 11110000b	;mask out lower bits to let me shove dpad bits in
  809 D1:AF4B AD -  -  -  	xor L
  810 D1:AF4C C9 -  -  -  	ret
  811 D1:AF4D -  -  -  -  
  812 D1:AF4D -  -  -  -  waituntilkeyrelease:
  813 D1:AF4D CD 34 AF D1     call getkbd_adl
  814 D1:AF51 B7 -  -  -      or  a,a
  815 D1:AF52 20 F9 -  -      jr  nz,waituntilkeyrelease
  816 D1:AF54 C9 -  -  -  	ret
  817 D1:AF55 -  -  -  -  
  818 D1:AF55 -  -  -  -  waituntilnewkeypress:
  819 D1:AF55 CD 4D AF D1     call waituntilkeyrelease
  820 D1:AF59 CD 34 AF D1 _:  call getkbd_adl
  821 D1:AF5D B7 -  -  -  	or  a,a
  822 D1:AF5E 28 F9 -  -  	jr  z,-_
  823 D1:AF60 C9 -  -  -      ret
  824 D1:AF61 -  -  -  -  
  825 D1:AF61 -  -  -  -  #include "lcd.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    1 D1:AF61 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 D1:AF61 -  -  -  -  ;TI-84 Plus CE Include File
    2 D1:AF61 -  -  -  -  
    3 D1:AF61 -  -  -  -  ;Various Parts Contributed by
    4 D1:AF61 -  -  -  -  ;- BrandonW
    5 D1:AF61 -  -  -  -  ;- calc84
    6 D1:AF61 -  -  -  -  ;- MateoConLechuga
    7 D1:AF61 -  -  -  -  ;- Runer112
    8 D1:AF61 -  -  -  -  ;- tr1p1ea
    9 D1:AF61 -  -  -  -  ;- Kerm Martian
   10 D1:AF61 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    2 D1:AF61 -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
    5 D1:AF61 -  -  -  -  ;
    6 D1:AF61 -  -  -  -  ;
    7 D1:AF61 -  -  -  -  ;
    8 D1:AF61 -  -  -  -  
    9 D1:AF61 -  -  -  -  ;Undefine this to speed up core process by losing debug state
   10 D1:AF61 -  -  -  -  ;#define COREDEBUG
   11 D1:AF61 -  -  -  -  
   12 D1:AF61 -  -  -  -  DEBUG_PRINT_START_CYCLE .equ 0
   13 D1:AF61 -  -  -  -  DEBUG_STEP_START_CYCLE  .equ 30000 ;26485
   14 D1:AF61 -  -  -  -  
   15 D1:AF61 -  -  -  -  
   16 D1:AF61 -  -  -  -  
   17 D1:AF61 -  -  -  -  FONTFGCOLOR .EQU $FF
   18 D1:AF61 -  -  -  -  FONTBGCOLOR .EQU $00
   19 D1:AF61 -  -  -  -  
   20 D1:AF61 -  -  -  -  screenBuf1      .equ vRam
   21 D1:AF61 -  -  -  -  screenBuf2      .equ vRam+(320*240)
   22 D1:AF61 -  -  -  -  ;DO NOT MOVE THESE.
   23 D1:AF61 -  -  -  -  xPos                .equ $D031F6
   24 D1:AF61 -  -  -  -  yPos                .equ $D031F7
   25 D1:AF61 -  -  -  -  slopPos             .equ $D031F8        ;extra byte here
   26 D1:AF61 -  -  -  -  debugram            .equ $D031F9        ;FA and FB occupied too.
   27 D1:AF61 -  -  -  -  save_spl            .equ $D031FC        ;FD and FE occupied too.
   28 D1:AF61 -  -  -  -  save_mbase          .equ $D031FF        ;
   29 D1:AF61 -  -  -  -  vram_palette        .equ $D03200        ;64 bytes of color. It looks like itself
   30 D1:AF61 -  -  -  -  core_memory_ix      .equ $D03280        ;IX range -128 to -64 already in use.
   31 D1:AF61 -  -  -  -  scrap_mapping       .equ $D03300        ;256 bytes. maps to nowhere important.
   32 D1:AF61 -  -  -  -  saferam1            .equ $D03400        ;1024 bytes available. Define later.
   33 D1:AF61 -  -  -  -  main_ram            .equ $D03800        ;$0800 bytes of main system memory
   34 D1:AF61 -  -  -  -  
   35 D1:AF61 -  -  -  -  ZEROPAGE            .equ main_ram+(0*256)
   36 D1:AF61 -  -  -  -  STACKBASE           .equ main_ram+(1*256)
   37 D1:AF61 -  -  -  -  
   38 D1:AF61 -  -  -  -  BASETABLE           .equ $D04000        ;variable size. 256*BASETABLE_STRIDE
   39 D1:AF61 -  -  -  -  BASETABLE_STRIDE    .equ 12
   40 D1:AF61 -  -  -  -  PAGETABLE_OFFSET    .equ 0
   41 D1:AF61 -  -  -  -  PAGETABLE           .equ BASETABLE+PAGETABLE_OFFSET
   42 D1:AF61 -  -  -  -  JUMPTABLE_OFFSET    .equ 4
   43 D1:AF61 -  -  -  -  JUMPTABLE           .equ BASETABLE+JUMPTABLE_OFFSET
   44 D1:AF61 -  -  -  -  USETABLE_OFFSET     .equ 8
   45 D1:AF61 -  -  -  -  USETABLE            .equ BASETABLE+USETABLE_OFFSET
   46 D1:AF61 -  -  -  -  
   47 D1:AF61 -  -  -  -  NAMETABLE1          .equ BASETABLE+(512*BASETABLE_STRIDE)
   48 D1:AF61 -  -  -  -  NAMETABLE2          .equ NAMETABLE1 + 1024
   49 D1:AF61 -  -  -  -  
   50 D1:AF61 -  -  -  -  ;
   51 D1:AF61 -  -  -  -  ;saferam1 1024 bytes storage
   52 D1:AF61 -  -  -  -  ;
   53 D1:AF61 -  -  -  -  nametable00         .equ saferam1           ;4b Do not move these vars
   54 D1:AF61 -  -  -  -  nametable01         .equ nametable00+4      ;4b
   55 D1:AF61 -  -  -  -  nametable10         .equ nametable01+4      ;4b
   56 D1:AF61 -  -  -  -  nametable11         .equ nametable10+4      ;4b
   57 D1:AF61 -  -  -  -  nametable00_attrib  .equ nametable11+4      ;4b
   58 D1:AF61 -  -  -  -  nametable01_attrib  .equ nametable00_attrib+4   ;4b
   59 D1:AF61 -  -  -  -  nametable10_attrib  .equ nametable01_attrib+4   ;4b
   60 D1:AF61 -  -  -  -  nametable11_attrib  .equ nametable10_attrib+4   ;4b
   61 D1:AF61 -  -  -  -  chr_rom_tiles       .equ nametable11_attrib+4   ;4b
   62 D1:AF61 -  -  -  -  chr_rom_sprites     .equ chr_rom_tiles+4    ;4b
   63 D1:AF61 -  -  -  -  curScreenBuf        .equ chr_rom_sprites+4  ;4b
   64 D1:AF61 -  -  -  -  linestart           .equ curScreenBuf+3     ;1b
   65 D1:AF61 -  -  -  -  chr_rom_curbank     .equ linestart+1        ;3b Base used for PPU stuff.
   66 D1:AF61 -  -  -  -  inputNumFiles       .equ chr_rom_curbank+3  ;1b
   67 D1:AF61 -  -  -  -  basefile_sig        .equ inputNumFiles+1    ;3b pointer to 16b hash
   68 D1:AF61 -  -  -  -  missing_files       .equ basefile_sig+3     ;1b
   69 D1:AF61 -  -  -  -  total_rom_size      .equ missing_files+1    ;3b
   70 D1:AF61 -  -  -  -  prg_rom_size        .equ total_rom_size+3   ;3b
   71 D1:AF61 -  -  -  -  chr_rom_size        .equ prg_rom_size+3     ;3b
   72 D1:AF61 -  -  -  -  submapper           .equ chr_rom_size+3     ;1b. iNES2 thing. Not often used.
   73 D1:AF61 -  -  -  -  ines_flag_6         .equ submapper+1        ;1b. Flags that a mapper may need.
   74 D1:AF61 -  -  -  -  mapper_id           .equ ines_flag_6+1      ;3b. Convenience load for 12 bits
   75 D1:AF61 -  -  -  -  mapper_adr_base     .equ mapper_id+1        ;3b. Used to load mapper
   76 D1:AF61 -  -  -  -  trainer_base        .equ mapper_adr_base+3  ;3b. If exist, starts here
   77 D1:AF61 -  -  -  -  prg_rom_base        .equ mapper_adr_base+3  ;3b. Adjusted in case of trainer.
   78 D1:AF61 -  -  -  -  chr_rom_base        .equ prg_rom_base+3     ;3b. Located somewhere.
   79 D1:AF61 -  -  -  -  chr_rom_base_file   .equ chr_rom_base+3     ;1b. Nonzero if not in first file.
   80 D1:AF61 -  -  -  -  ppu_smc_gate        .equ chr_rom_base_file+1 ;3b write address to ungate PPU
   81 D1:AF61 -  -  -  -  timings_base        .equ ppu_smc_gate+3    ;3b. Current pointer to timings
   82 D1:AF61 -  -  -  -  
   83 D1:AF61 -  -  -  -  SIZEOF_INTEGRITY_HASH    .equ 16
   84 D1:AF61 -  -  -  -  MAXPRGROM_HINIB     .equ 1
   85 D1:AF61 -  -  -  -  MAXCHRROM_HINIB     .equ 3
   86 D1:AF61 -  -  -  -  NUMBER_OF_MAPPERS   .equ 1
   87 D1:AF61 -  -  -  -  MAPPER_STRIDE       .equ 9
   88 D1:AF61 -  -  -  -  
   89 D1:AF61 -  -  -  -  MAXNUMFILES         .equ 1                  ;set to 32 later. that's like 1.5MB
   90 D1:AF61 -  -  -  -  FILETABLE_STRIDE    .equ 8
   91 D1:AF61 -  -  -  -  FILETABLE           .equ timings_base+3   ;(MAXNUMFILES*FILETABLE_STRIDE)b
   92 D1:AF61 -  -  -  -  FILE_SIZE_OFFSET    .equ 0
   93 D1:AF61 -  -  -  -  FILE_ADR_OFFSET     .equ 2
   94 D1:AF61 -  -  -  -  FILE_SIG_ADR_OFFSET .equ 5
   95 D1:AF61 -  -  -  -  
   96 D1:AF61 -  -  -  -  int_table_len       .equ FILETABLE+((MAXNUMFILES+1)*FILETABLE_STRIDE)
   97 D1:AF61 -  -  -  -  INT_TABLE           .equ int_table_len+1
   98 D1:AF61 -  -  -  -  INT_TABLE_MAXLEN    .equ 8
   99 D1:AF61 -  -  -  -  INT_TABLE_STRIDE    .equ 6
  100 D1:AF61 -  -  -  -  INT_ADDR_OFFSET     .equ 0
  101 D1:AF61 -  -  -  -  INT_CYCLE_OFFSET    .equ 3
  102 D1:AF61 -  -  -  -  
  103 D1:AF61 -  -  -  -  
  104 D1:AF61 -  -  -  -  
  105 D1:AF61 -  -  -  -  ;
  106 D1:AF61 -  -  -  -  ;
  107 D1:AF61 -  -  -  -  ;
  108 D1:AF61 -  -  -  -  ;
  109 D1:AF61 -  -  -  -  
  110 D1:AF61 -  -  -  -  ;PPU default locations. Some are not used
  111 D1:AF61 -  -  -  -  #define PPU_CTRL -32
  112 D1:AF61 -  -  -  -  #define PPU_MASK -31
  113 D1:AF61 -  -  -  -  #define PPU_STATUS -30
  114 D1:AF61 -  -  -  -  #define PPU_OAMADDR -29
  115 D1:AF61 -  -  -  -  #define PPU_OAMDATA -28
  116 D1:AF61 -  -  -  -  #define PPU_SCROLL -27
  117 D1:AF61 -  -  -  -  #define PPU_ADDR -26
  118 D1:AF61 -  -  -  -  #define PPU_DATA -25
  119 D1:AF61 -  -  -  -  ;PPU internal stuff
  120 D1:AF61 -  -  -  -  #define PPU_SUBCYCLE -15    ;0, 1, or 2.
  121 D1:AF61 -  -  -  -  #define PPU_V -14           ;USED TO STORE VRAM ADDRESS (PPU ADDRESS SPACE)
  122 D1:AF61 -  -  -  -  #define PPU_W -12           ;INTERNAL W REGISTER FOR HIGH/LOW BYTE PORT WRITES
  123 D1:AF61 -  -  -  -  #define PPU_FRAMECOUNT -11  ;USED FOR EVEN/ODD
  124 D1:AF61 -  -  -  -  #define PPU_NAMETABLE_PTR -10   ;Pointer cache
  125 D1:AF61 -  -  -  -  #define PPU_VCOUNT -7
  126 D1:AF61 -  -  -  -  #define PPU_HCOUNT -6
  127 D1:AF61 -  -  -  -  #define PPU_TCOUNT -5
  128 D1:AF61 -  -  -  -  #define PPU_XSCROLL -4  ;Should be constructed from PPU_SCROLL
  129 D1:AF61 -  -  -  -  #define PPU_YSCROLL -3  ;
  130 D1:AF61 -  -  -  -  #define APU_KEYPAD -2   ;First to last: A,B,SE,ST,UP,DO,LE,RI. 01234567.
  131 D1:AF61 -  -  -  -  #define APU_KEYLATCH -1
  132 D1:AF61 -  -  -  -  ;core memory
  133 D1:AF61 -  -  -  -  #define REGA 0
  134 D1:AF61 -  -  -  -  #define REGX 1
  135 D1:AF61 -  -  -  -  #define REGY 2
  136 D1:AF61 -  -  -  -  #define REGSP 3
  137 D1:AF61 -  -  -  -  #define REGSR 4
  138 D1:AF61 -  -  -  -  #define REGPC 5
  139 D1:AF61 -  -  -  -  #define CYCLES_REMAIN 8
  140 D1:AF61 -  -  -  -  #define CYCLES_CURRENT 11
  141 D1:AF61 -  -  -  -  #define CURRENT_OPCODES 14
  142 D1:AF61 -  -  -  -  #define CORE_STACK_BASE 17
  143 D1:AF61 -  -  -  -  #define CORE_ERROR_LEVEL 20
  144 D1:AF61 -  -  -  -  #define SCRAP_COUNTER 21
  145 D1:AF61 -  -  -  -  #define PORT_WRITE_TIMESTAMP 24
  146 D1:AF61 -  -  -  -  #define TEMP_MEMORY 27
  147 D1:AF61 -  -  -  -  #define NMI_TRIGGERED 30 
  148 D1:AF61 -  -  -  -  ;flag IDs
  149 D1:AF61 -  -  -  -  #define SF_NEG 7
  150 D1:AF61 -  -  -  -  #define SF_OVER 6 
  151 D1:AF61 -  -  -  -  #define SF_RESERVED 5 
  152 D1:AF61 -  -  -  -  #define SF_BRK 4
  153 D1:AF61 -  -  -  -  #define SF_DEC 3
  154 D1:AF61 -  -  -  -  #define SF_INT 2
  155 D1:AF61 -  -  -  -  #define SF_ZERO 1
  156 D1:AF61 -  -  -  -  #define SF_CARRY 0
  157 D1:AF61 -  -  -  -  
  158 D1:AF61 -  -  -  -  #macro ADDCYC(X)
  159 D1:AF61                 #if (x < 1)
  160 D1:AF61                     nop
  161 D1:AF61                 #elif (X = 1)
  162 D1:AF61                     inc iy
  163 D1:AF61                 #else
  164 D1:AF61                     lea iy,iy+X
  165 D1:AF61                 #endif
  166 D1:AF61             #endmacro
  167 D1:AF61 -  -  -  -  
  168 D1:AF61 -  -  -  -  ;
  169 D1:AF61 -  -  -  -  ;
  170 D1:AF61 -  -  -  -  ;
  171 D1:AF61 -  -  -  -  #endif
  172 D1:AF61 -  -  -  -  .list
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    3 D1:AF61 -  -  -  -  
    4 D1:AF61 -  -  -  -  ;Function list:
    5 D1:AF61 -  -  -  -  ; fastCopy - Swaps drawing buffer to display what is currently written there.
    6 D1:AF61 -  -  -  -  ; startGfx - Configures LCD to run in graphx mode. UNSAFE TO RUN MORE THAN ONCE
    7 D1:AF61 -  -  -  -  ; stopGfx - Restores LCD configuration to TI-OS default.
    8 D1:AF61 -  -  -  -  ; configureScreen - Swaps screen configuration betwen current and stored.
    9 D1:AF61 -  -  -  -  ; setDefaultPalette - Sets default (XLIBC) color palette.
   10 D1:AF61 -  -  -  -  ; clearTextBuf - no inputs. Sets text buffer to all spaces.
   11 D1:AF61 -  -  -  -  ; printTextBuf - no inputs. Mirrors buffer to screen.
   12 D1:AF61 -  -  -  -  ; setLineStart - A=xpos. Set xPos and linestart
   13 D1:AF61 -  -  -  -  ; setCurLine - A=ypos. Set yPos.
   14 D1:AF61 -  -  -  -  ; newLine - no inputs. sets linestart = xPos, increments yPos
   15 D1:AF61 -  -  -  -  ; newPage - no inputs. sets linestart = xPos, yPos = 0
   16 D1:AF61 -  -  -  -  ; printString - HL=address to string. destroys all.
   17 D1:AF61 -  -  -  -  ; printBigFont - A=ASCII char to print at xPos,yPos. Advances xPos by 1.
   18 D1:AF61 -  -  -  -  ; printSmallNumPair - A=0-255 to print at xPos,Ypos. Advances xPos by 1.
   19 D1:AF61 -  -  -  -  ; calculateScreenPtr - Converts xPos,yPos into HL= screen buffer address.
   20 D1:AF61 -  -  -  -  ; calculateScreenPtrDE - Converts E=xPos,D=yPos into HL= screen buffer address.
   21 D1:AF61 -  -  -  -  ;
   22 D1:AF61 -  -  -  -  ;
   23 D1:AF61 -  -  -  -  ;
   24 D1:AF61 -  -  -  -  ;
   25 D1:AF61 -  -  -  -  ;
   26 D1:AF61 -  -  -  -  ;
   27 D1:AF61 -  -  -  -  ;
   28 D1:AF61 -  -  -  -  
   29 D1:AF61 -  -  -  -  
   30 D1:AF61 -  -  -  -  
   31 D1:AF61 -  -  -  -  
   32 D1:AF61 -  -  -  -  ;-----------------------------------------------------------------------------
   33 D1:AF61 -  -  -  -  ;Screen hardware interface stuff
   34 D1:AF61 -  -  -  -  
   35 D1:AF61 -  -  -  -  ;It ought to be called "bufSwap" but I just can't. I won't.
   36 D1:AF61 -  -  -  -  fastCopy:
   37 D1:AF61 11 00 00 D4     ld  de,screenBuf1
   38 D1:AF65 2A 10 00 E3     ld  hl,(mpLcdBase)
   39 D1:AF69 22 28 34 D0     ld  (curScreenBuf),hl
   40 D1:AF6D B7 -  -  -      or  a,a
   41 D1:AF6E ED 52 -  -      sbc hl,de
   42 D1:AF70 EB -  -  -      ex  de,hl
   43 D1:AF71 20 04 -  -      jr  nz,+_
   44 D1:AF73 21 00 2C D5     ld  hl,screenBuf2
   45 D1:AF77 22 10 00 E3 _:  ld  (mpLcdBase),hl
   46 D1:AF7B C9 -  -  -      ret
   47 D1:AF7C -  -  -  -  
   48 D1:AF7C -  -  -  -  stopGfx:
   49 D1:AF7C CD 74 03 00     call _boot_ClearVRAM
   50 D1:AF80 11 2D 09 00     ld  de,lcdNormalMode
   51 D1:AF84 01 00 00 D4     ld  bc,screenBuf1
   52 D1:AF88 18 0C -  -      jr  configureScreen
   53 D1:AF8A -  -  -  -  
   54 D1:AF8A -  -  -  -  startGfx:
   55 D1:AF8A CD 74 03 00     call _boot_ClearVRAM
   56 D1:AF8E 11 27 39 01     ld  de,lcdWatermark+lcdIntFront+lcdPwr+lcdBgr+lcdBpp8
   57 D1:AF92 01 00 00 D4     ld  bc,screenBuf1
   58 D1:AF96 -  -  -  -  configureScreen:
   59 D1:AF96 21 10 00 E3     ld  hl,mpLcdBase
   60 D1:AF9A ED 0F -  -      ld  (hl),bc
   61 D1:AF9C 2E 18 -  -      ld  L,lcdCtrl
   62 D1:AF9E ED 1F -  -      ld  (hl),de
   63 D1:AFA0 2E 01 -  -      ld  L,lcdTiming0 + 1
   64 D1:AFA2 01 08 00 00     ld  bc,8
   65 D1:AFA6 11 D5 AF D1     ld  de,screenSettings
   66 D1:AFAA 1A -  -  -  _:  ld  a,(de)
   67 D1:AFAB ED A0 -  -      ldi
   68 D1:AFAD 2B -  -  -      dec hl
   69 D1:AFAE 77 -  -  -      ld  (hl),a
   70 D1:AFAF 23 -  -  -      inc hl
   71 D1:AFB0 EA AA AF D1     jp  pe,-_
   72 D1:AFB4 21 00 2C D5     ld  hl,screenBuf2
   73 D1:AFB8 22 28 34 D0     ld  (curScreenBuf),hl
   74 D1:AFBC -  -  -  -  ;Also copied from graphx
   75 D1:AFBC -  -  -  -  setDefaultPalette:
   76 D1:AFBC 11 00 02 E3 	ld	de,mpLcdPalette	    ; address of mmio palette
   77 D1:AFC0 43 -  -  -  	ld	b,e			        ; b = 0
   78 D1:AFC1 78 -  -  -  _:	ld	a,b
   79 D1:AFC2 0F -  -  -  	rrca
   80 D1:AFC3 A8 -  -  -  	xor	a,b
   81 D1:AFC4 E6 E0 -  -  	and	a,224
   82 D1:AFC6 A8 -  -  -  	xor	a,b
   83 D1:AFC7 12 -  -  -  	ld	(de),a
   84 D1:AFC8 13 -  -  -  	inc	de
   85 D1:AFC9 78 -  -  -  	ld	a,b
   86 D1:AFCA 17 -  -  -  	rla
   87 D1:AFCB 17 -  -  -  	rla
   88 D1:AFCC 17 -  -  -  	rla
   89 D1:AFCD 78 -  -  -  	ld	a,b
   90 D1:AFCE 1F -  -  -  	rra
   91 D1:AFCF 12 -  -  -  	ld	(de),a
   92 D1:AFD0 13 -  -  -  	inc	de
   93 D1:AFD1 04 -  -  -  	inc	b
   94 D1:AFD2 20 ED -  -  	jr	nz,-_		    ; loop for 256 times to fill palette
   95 D1:AFD4 C9 -  -  -  	ret
   96 D1:AFD5 -  -  -  -  
   97 D1:AFD5 -  -  -  -  screenSettings:
   98 D1:AFD5 -  -  -  -  ;Copied from my old Falldown2 project, which was also copied from graphx.asm
   99 D1:AFD5 -  -  -  -  ;	.db	14 shl 2			; PPL shl 2
  100 D1:AFD5 07 -  -  -  	.db	7					; HSW
  101 D1:AFD6 57 -  -  -  	.db	87					; HFP
  102 D1:AFD7 3F -  -  -  	.db	63					; HBP
  103 D1:AFD8 3F 01 -  -  	.dw	(0 >> 10)+319		; (VSW shl 10)+LPP
  104 D1:AFDA B3 -  -  -  	.db	179					; VFP
  105 D1:AFDB 00 -  -  -  	.db	0					; VBP
  106 D1:AFDC 00 -  -  -  	.db	(0 >> 6)+(0 >> 5)+0	; (ACB shl 6)+(CLKSEL shl 5)+PCD_LO
  107 D1:AFDD -  -  -  -  ;  H = ((PPL+1)*16)+(HSW+1)+(HFP+1)+(HBP+1) = 240+8+88+64 = 400
  108 D1:AFDD -  -  -  -  ;  V = (LPP+1)+(VSW+1)+VFP+VBP = 320+1+179+0 = 500
  109 D1:AFDD -  -  -  -  ; CC = H*V*PCD*2 = 400*500*2*2 = 800000
  110 D1:AFDD -  -  -  -  ; Hz = 48000000/CC = 60
  111 D1:AFDD -  -  -  -  
  112 D1:AFDD -  -  -  -  
  113 D1:AFDD -  -  -  -  ;-----------------------------------------------------------------------------
  114 D1:AFDD -  -  -  -  ; Text Rendering
  115 D1:AFDD -  -  -  -  
  116 D1:AFDD -  -  -  -  clearTextBuf:
  117 D1:AFDD 21 00 58 D0     ld  hl,NAMETABLE1
  118 D1:AFE1 11 01 58 D0     ld  de,NAMETABLE1+1
  119 D1:AFE5 01 FF 03 00     ld  bc,1023
  120 D1:AFE9 36 20 -  -      ld  (hl),' '
  121 D1:AFEB ED B0 -  -      ldir
  122 D1:AFED C9 -  -  -      ret
  123 D1:AFEE -  -  -  -  
  124 D1:AFEE -  -  -  -  printTextBuf:
  125 D1:AFEE 2A F6 31 D0     ld  hl,(xPos)
  126 D1:AFF2 22 22 B0 D1     ld  (printTextBuf_smcPosRecovery),hl
  127 D1:AFF6 21 00 58 D0     ld  hl,NAMETABLE1
  128 D1:AFFA AF -  -  -      xor a,a
  129 D1:AFFB 32 F7 31 D0     ld  (yPos),a
  130 D1:AFFF 0E 1E -  -      ld  c,30
  131 D1:B001 3E 08 -  -  _:  ld  a,8
  132 D1:B003 32 F6 31 D0     ld  (xPos),a
  133 D1:B007 06 20 -  -      ld  b,$20
  134 D1:B009 7E -  -  -  _:  ld  a,(hl)
  135 D1:B00A 23 -  -  -      inc hl
  136 D1:B00B C5 -  -  -      push bc
  137 D1:B00C E5 -  -  -          push hl
  138 D1:B00D CD 6B B0 D1             call printBigFont
  139 D1:B011 E1 -  -  -          pop hl
  140 D1:B012 C1 -  -  -      pop bc
  141 D1:B013 10 F4 -  -      djnz -_
  142 D1:B015 3A F7 31 D0     ld  a,(yPos)
  143 D1:B019 3C -  -  -      inc a
  144 D1:B01A 32 F7 31 D0     ld  (yPos),a
  145 D1:B01E 0D -  -  -      dec  c
  146 D1:B01F 20 E0 -  -      jr  nz,--_
  147 D1:B021 -  -  -  -  printTextBuf_smcPosRecovery .equ $+1
  148 D1:B021 21 00 00 00     ld  hl,0
  149 D1:B025 22 F6 31 D0     ld  (xPos),hl
  150 D1:B029 C9 -  -  -      ret
  151 D1:B02A -  -  -  -  
  152 D1:B02A -  -  -  -  ;A=column to start on
  153 D1:B02A -  -  -  -  setLineStart:
  154 D1:B02A 32 F6 31 D0     ld  (xPos),a
  155 D1:B02E 32 2B 34 D0     ld  (linestart),a
  156 D1:B032 C9 -  -  -      ret
  157 D1:B033 -  -  -  -  
  158 D1:B033 -  -  -  -  ;A=row to start on
  159 D1:B033 -  -  -  -  setCurLine:
  160 D1:B033 32 F7 31 D0     ld  (yPos),a
  161 D1:B037 C9 -  -  -      ret
  162 D1:B038 -  -  -  -  
  163 D1:B038 -  -  -  -  newPage:
  164 D1:B038 3E FF -  -      ld  a,$FF
  165 D1:B03A 32 F7 31 D0     ld  (yPos),a
  166 D1:B03E -  -  -  -  newLine:
  167 D1:B03E 3A 2B 34 D0     ld  a,(linestart)
  168 D1:B042 32 F6 31 D0     ld  (xPos),a
  169 D1:B046 3A F7 31 D0     ld  a,(yPos)
  170 D1:B04A 3C -  -  -      inc a
  171 D1:B04B FE 1E -  -      cp  30
  172 D1:B04D 38 01 -  -      jr  c,+_
  173 D1:B04F AF -  -  -      xor a,a
  174 D1:B050 32 F7 31 D0 _:  ld  (yPos),a
  175 D1:B054 C9 -  -  -      ret
  176 D1:B055 -  -  -  -  
  177 D1:B055 -  -  -  -      
  178 D1:B055 -  -  -  -      
  179 D1:B055 -  -  -  -  
  180 D1:B055 -  -  -  -  ;HL=address to string
  181 D1:B055 -  -  -  -  printString:
  182 D1:B055 7E -  -  -      ld  a,(hl)
  183 D1:B056 23 -  -  -      inc hl
  184 D1:B057 B7 -  -  -      or  a,a
  185 D1:B058 C8 -  -  -      ret z
  186 D1:B059 FE 0A -  -      cp  a,'\n'
  187 D1:B05B 20 06 -  -      jr nz,+_
  188 D1:B05D CD 3E B0 D1     call newLine
  189 D1:B061 18 F2 -  -      jr  printString
  190 D1:B063 E5 -  -  -  _:  push hl
  191 D1:B064 CD 6B B0 D1         call printBigFont
  192 D1:B068 E1 -  -  -      pop hl
  193 D1:B069 18 EA -  -      jr printString
  194 D1:B06B -  -  -  -  
  195 D1:B06B -  -  -  -  
  196 D1:B06B -  -  -  -  ;in: A=chrToPrint
  197 D1:B06B -  -  -  -  printBigFont:
  198 D1:B06B CD 00 B1 D1     call calculateScreenPtr
  199 D1:B06F EB -  -  -      ex  de,hl
  200 D1:B070 6F -  -  -      ld  L,a
  201 D1:B071 26 08 -  -      ld  H,8
  202 D1:B073 ED 6C -  -      mlt hl
  203 D1:B075 01 1A B0 D1     ld  bc,graphx_textdata
  204 D1:B079 09 -  -  -      add hl,bc
  205 D1:B07A EB -  -  -      ex  de,hl
  206 D1:B07B 0E 08 -  -      ld  c,8
  207 D1:B07D 06 08 -  -  _:  ld  b,8
  208 D1:B07F 1A -  -  -      ld  a,(de)
  209 D1:B080 87 -  -  -  _:  add a,a
  210 D1:B081 -  -  -  -  fontBGColor_var .equ $+1
  211 D1:B081 36 00 -  -      ld  (hl),FONTBGCOLOR
  212 D1:B083 30 02 -  -      jr  nc,$+4
  213 D1:B085 -  -  -  -  fontFGColor_var .equ $+1
  214 D1:B085 36 FF -  -      ld  (hl),FONTFGCOLOR
  215 D1:B087 23 -  -  -      inc hl
  216 D1:B088 10 F6 -  -      djnz -_
  217 D1:B08A 79 -  -  -      ld  a,c
  218 D1:B08B 01 38 01 00     ld  bc,320-8
  219 D1:B08F 09 -  -  -      add hl,bc
  220 D1:B090 4F -  -  -      ld  c,a
  221 D1:B091 13 -  -  -      inc de
  222 D1:B092 0D -  -  -      dec c
  223 D1:B093 20 E8 -  -      jr  nz,--_
  224 D1:B095 21 F6 31 D0     ld  hl,xPos
  225 D1:B099 34 -  -  -      inc (hl)
  226 D1:B09A C9 -  -  -      ret
  227 D1:B09B -  -  -  -  
  228 D1:B09B -  -  -  -  ;A= 0-255 numeric value to display as hex
  229 D1:B09B -  -  -  -  printSmallNumPair:
  230 D1:B09B CD 00 B1 D1     call calculateScreenPtr
  231 D1:B09F F5 -  -  -      push af
  232 D1:B0A0 1F -  -  -          rra
  233 D1:B0A1 1F -  -  -          rra
  234 D1:B0A2 1F -  -  -          rra
  235 D1:B0A3 1F -  -  -          rra
  236 D1:B0A4 CD B3 B0 D1         call +_
  237 D1:B0A8 F1 -  -  -      pop af
  238 D1:B0A9 CD B3 B0 D1     call +_
  239 D1:B0AD 21 F6 31 D0     ld  hl,xPos
  240 D1:B0B1 34 -  -  -      inc (hl)
  241 D1:B0B2 C9 -  -  -      ret
  242 D1:B0B3 E6 0F -  -  _:  and a,$0F
  243 D1:B0B5 01 40 01 00     ld  bc,320
  244 D1:B0B9 09 -  -  -      add hl,bc   ;drop height by one. These small chars are *short*
  245 D1:B0BA EB -  -  -      ex  de,hl
  246 D1:B0BB 6F -  -  -      ld  L,a
  247 D1:B0BC 26 03 -  -      ld  H,3
  248 D1:B0BE ED 6C -  -      mlt hl
  249 D1:B0C0 01 1A B4 D1     ld  bc,SmallHexFont
  250 D1:B0C4 09 -  -  -      add hl,bc
  251 D1:B0C5 EB -  -  -      ex  de,hl
  252 D1:B0C6 0E 03 -  -      ld  c,3
  253 D1:B0C8 18 14 -  -      jr  printSmallNumPair_2ndHalf
  254 D1:B0CA -  -  -  -  printSmallNumPair_1stHalf:
  255 D1:B0CA 1A -  -  -      ld  a,(de)
  256 D1:B0CB 06 04 -  -      ld  b,4
  257 D1:B0CD 87 -  -  -  _:  add a,a
  258 D1:B0CE -  -  -  -  smallFontBGColor_var .equ $+1
  259 D1:B0CE 36 00 -  -      ld  (hl),FONTBGCOLOR
  260 D1:B0D0 30 02 -  -      jr  nc,$+4
  261 D1:B0D2 -  -  -  -  smallFontFGColor_var .equ $+1
  262 D1:B0D2 36 FF -  -      ld  (hl),FONTFGCOLOR
  263 D1:B0D4 23 -  -  -      inc hl
  264 D1:B0D5 10 F6 -  -      djnz -_
  265 D1:B0D7 79 -  -  -      ld  a,c
  266 D1:B0D8 01 3C 01 00     ld  bc,320-4
  267 D1:B0DC 09 -  -  -      add hl,bc
  268 D1:B0DD 4F -  -  -      ld  c,a
  269 D1:B0DE -  -  -  -  printSmallNumPair_2ndHalf:
  270 D1:B0DE 1A -  -  -      ld  a,(de)
  271 D1:B0DF 07 -  -  -      rlca
  272 D1:B0E0 07 -  -  -      rlca
  273 D1:B0E1 07 -  -  -      rlca
  274 D1:B0E2 07 -  -  -      rlca
  275 D1:B0E3 06 04 -  -      ld  b,4
  276 D1:B0E5 87 -  -  -  _:  add a,a
  277 D1:B0E6 36 00 -  -      ld  (hl),FONTBGCOLOR
  278 D1:B0E8 30 02 -  -      jr  nc,$+4
  279 D1:B0EA 36 FF -  -      ld  (hl),FONTFGCOLOR
  280 D1:B0EC 23 -  -  -      inc hl
  281 D1:B0ED 10 F6 -  -      djnz -_
  282 D1:B0EF 13 -  -  -      inc de
  283 D1:B0F0 79 -  -  -      ld  a,c
  284 D1:B0F1 01 3C 01 00     ld  bc,320-4
  285 D1:B0F5 09 -  -  -      add hl,bc
  286 D1:B0F6 4F -  -  -      ld  c,a
  287 D1:B0F7 0D -  -  -      dec c
  288 D1:B0F8 20 D0 -  -      jr  nz,printSmallNumPair_1stHalf
  289 D1:B0FA 01 84 F8 FF     ld  bc,-(320*(1+5))+4
  290 D1:B0FE 09 -  -  -      add hl,bc
  291 D1:B0FF C9 -  -  -      ret
  292 D1:B100 -  -  -  -  
  293 D1:B100 -  -  -  -  calculateScreenPtr:
  294 D1:B100 -  -  -  -      ;xcoord: x * 8 
  295 D1:B100 -  -  -  -      ;ycoord: 320 * 8 * y
  296 D1:B100 -  -  -  -      ;coord: (8x)+320*8y -> 8(x+320y)
  297 D1:B100 ED 5B F6 31 
              D0 -  -  -      ld  de,(xPos)
  298 D1:B105 -  -  -  -  calculateScreenPtrDE:
  299 D1:B105 6A -  -  -      ld  L,d     ;yPos
  300 D1:B106 26 A0 -  -      ld  h,160
  301 D1:B108 ED 6C -  -      mlt hl
  302 D1:B10A 29 -  -  -      add hl,hl
  303 D1:B10B 16 01 -  -      ld  d,1
  304 D1:B10D ED 5C -  -      mlt de      ;DE=E. Clears high bytes.
  305 D1:B10F 19 -  -  -      add hl,de
  306 D1:B110 29 -  -  -      add hl,hl
  307 D1:B111 29 -  -  -      add hl,hl
  308 D1:B112 29 -  -  -      add hl,hl
  309 D1:B113 ED 5B 28 34 
              D0 -  -  -      ld  de,(curScreenBuf)
  310 D1:B118 19 -  -  -      add hl,de
  311 D1:B119 C9 -  -  -      ret
  312 D1:B11A -  -  -  -  
  313 D1:B11A -  -  -  -  
  314 D1:B11A -  -  -  -  
  315 D1:B11A -  -  -  -  
  316 D1:B11A -  -  -  -  
  317 D1:B11A -  -  -  -  
  318 D1:B11A -  -  -  -  
  319 D1:B11A -  -  -  -  
  320 D1:B11A -  -  -  -  
  321 D1:B11A -  -  -  -  ;-----------------------------------------------------------------------------
  322 D1:B11A -  -  -  -  ; Data Section
  323 D1:B11A -  -  -  -  
  324 D1:B11A -  -  -  -  graphx_textdata		.EQU $-(8*' ')		;points to what would be start of ASCII
  325 D1:B11A 00 00 00 00 
              00 00 00 00 .db	$00,$00,$00,$00,$00,$00,$00,$00 ;
  326 D1:B122 C0 C0 C0 C0 
              C0 00 C0 00 .db	$C0,$C0,$C0,$C0,$C0,$00,$C0,$00 ; !
  327 D1:B12A D8 D8 D8 00 
              00 00 00 00 .db	$D8,$D8,$D8,$00,$00,$00,$00,$00 ; "
  328 D1:B132 6C 6C FE 6C 
              FE 6C 6C 00 .db	$6C,$6C,$FE,$6C,$FE,$6C,$6C,$00 ; #
  329 D1:B13A 18 7E C0 7C 
              06 FC 18 00 .db	$18,$7E,$C0,$7C,$06,$FC,$18,$00 ; $
  330 D1:B142 00 C6 CC 18 
              30 66 C6 00 .db	$00,$C6,$CC,$18,$30,$66,$C6,$00 ; %
  331 D1:B14A 38 6C 38 76 
              DC CC 76 00 .db	$38,$6C,$38,$76,$DC,$CC,$76,$00 ; &
  332 D1:B152 30 30 60 00 
              00 00 00 00 .db	$30,$30,$60,$00,$00,$00,$00,$00 ; '
  333 D1:B15A 30 60 C0 C0 
              C0 60 30 00 .db	$30,$60,$C0,$C0,$C0,$60,$30,$00 ; (
  334 D1:B162 C0 60 30 30 
              30 60 C0 00 .db	$C0,$60,$30,$30,$30,$60,$C0,$00 ; )
  335 D1:B16A 00 66 3C FF 
              3C 66 00 00 .db	$00,$66,$3C,$FF,$3C,$66,$00,$00 ; *
  336 D1:B172 00 30 30 FC 
              FC 30 30 00 .db	$00,$30,$30,$FC,$FC,$30,$30,$00 ; +
  337 D1:B17A 00 00 00 00 
              00 60 60 C0 .db	$00,$00,$00,$00,$00,$60,$60,$C0 ; ,
  338 D1:B182 00 00 00 FC 
              00 00 00 00 .db	$00,$00,$00,$FC,$00,$00,$00,$00 ; -
  339 D1:B18A 00 00 00 00 
              00 C0 C0 00 .db	$00,$00,$00,$00,$00,$C0,$C0,$00 ; .
  340 D1:B192 06 0C 18 30 
              60 C0 80 00 .db	$06,$0C,$18,$30,$60,$C0,$80,$00 ; /
  341 D1:B19A 7C CE DE F6 
              E6 C6 7C 00 .db	$7C,$CE,$DE,$F6,$E6,$C6,$7C,$00 ; 0
  342 D1:B1A2 30 70 30 30 
              30 30 FC 00 .db	$30,$70,$30,$30,$30,$30,$FC,$00 ; 1
  343 D1:B1AA 7C C6 06 7C 
              C0 C0 FE 00 .db	$7C,$C6,$06,$7C,$C0,$C0,$FE,$00 ; 2
  344 D1:B1B2 FC 06 06 3C 
              06 06 FC 00 .db	$FC,$06,$06,$3C,$06,$06,$FC,$00 ; 3
  345 D1:B1BA 0C CC CC CC 
              FE 0C 0C 00 .db	$0C,$CC,$CC,$CC,$FE,$0C,$0C,$00 ; 4
  346 D1:B1C2 FE C0 FC 06 
              06 C6 7C 00 .db	$FE,$C0,$FC,$06,$06,$C6,$7C,$00 ; 5
  347 D1:B1CA 7C C0 C0 FC 
              C6 C6 7C 00 .db	$7C,$C0,$C0,$FC,$C6,$C6,$7C,$00 ; 6
  348 D1:B1D2 FE 06 06 0C 
              18 30 30 00 .db	$FE,$06,$06,$0C,$18,$30,$30,$00 ; 7
  349 D1:B1DA 7C C6 C6 7C 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$7C,$C6,$C6,$7C,$00 ; 8
  350 D1:B1E2 7C C6 C6 7E 
              06 06 7C 00 .db	$7C,$C6,$C6,$7E,$06,$06,$7C,$00 ; 9
  351 D1:B1EA 00 C0 C0 00 
              00 C0 C0 00 .db	$00,$C0,$C0,$00,$00,$C0,$C0,$00 ; :
  352 D1:B1F2 00 60 60 00 
              00 60 60 C0 .db	$00,$60,$60,$00,$00,$60,$60,$C0 ; ;
  353 D1:B1FA 18 30 60 C0 
              60 30 18 00 .db	$18,$30,$60,$C0,$60,$30,$18,$00 ; <
  354 D1:B202 00 00 FC 00 
              FC 00 00 00 .db	$00,$00,$FC,$00,$FC,$00,$00,$00 ; =
  355 D1:B20A C0 60 30 18 
              30 60 C0 00 .db	$C0,$60,$30,$18,$30,$60,$C0,$00 ; >
  356 D1:B212 78 CC 18 30 
              30 00 30 00 .db	$78,$CC,$18,$30,$30,$00,$30,$00 ; ?
  357 D1:B21A 7C C6 DE DE 
              DE C0 7E 00 .db	$7C,$C6,$DE,$DE,$DE,$C0,$7E,$00 ; @
  358 D1:B222 38 6C C6 C6 
              FE C6 C6 00 .db	$38,$6C,$C6,$C6,$FE,$C6,$C6,$00 ; A
  359 D1:B22A FC C6 C6 FC 
              C6 C6 FC 00 .db	$FC,$C6,$C6,$FC,$C6,$C6,$FC,$00 ; B
  360 D1:B232 7C C6 C0 C0 
              C0 C6 7C 00 .db	$7C,$C6,$C0,$C0,$C0,$C6,$7C,$00 ; C
  361 D1:B23A F8 CC C6 C6 
              C6 CC F8 00 .db	$F8,$CC,$C6,$C6,$C6,$CC,$F8,$00 ; D
  362 D1:B242 FE C0 C0 F8 
              C0 C0 FE 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$FE,$00 ; E
  363 D1:B24A FE C0 C0 F8 
              C0 C0 C0 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$C0,$00 ; F
  364 D1:B252 7C C6 C0 C0 
              CE C6 7C 00 .db	$7C,$C6,$C0,$C0,$CE,$C6,$7C,$00 ; G
  365 D1:B25A C6 C6 C6 FE 
              C6 C6 C6 00 .db	$C6,$C6,$C6,$FE,$C6,$C6,$C6,$00 ; H
  366 D1:B262 7E 18 18 18 
              18 18 7E 00 .db	$7E,$18,$18,$18,$18,$18,$7E,$00 ; I
  367 D1:B26A 06 06 06 06 
              06 C6 7C 00 .db	$06,$06,$06,$06,$06,$C6,$7C,$00 ; J
  368 D1:B272 C6 CC D8 F0 
              D8 CC C6 00 .db	$C6,$CC,$D8,$F0,$D8,$CC,$C6,$00 ; K
  369 D1:B27A C0 C0 C0 C0 
              C0 C0 FE 00 .db	$C0,$C0,$C0,$C0,$C0,$C0,$FE,$00 ; L
  370 D1:B282 C6 EE FE FE 
              D6 C6 C6 00 .db	$C6,$EE,$FE,$FE,$D6,$C6,$C6,$00 ; M
  371 D1:B28A C6 E6 F6 DE 
              CE C6 C6 00 .db	$C6,$E6,$F6,$DE,$CE,$C6,$C6,$00 ; N
  372 D1:B292 7C C6 C6 C6 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$C6,$C6,$C6,$7C,$00 ; O
  373 D1:B29A FC C6 C6 FC 
              C0 C0 C0 00 .db	$FC,$C6,$C6,$FC,$C0,$C0,$C0,$00 ; P
  374 D1:B2A2 7C C6 C6 C6 
              D6 DE 7C 06 .db	$7C,$C6,$C6,$C6,$D6,$DE,$7C,$06 ; Q
  375 D1:B2AA FC C6 C6 FC 
              D8 CC C6 00 .db	$FC,$C6,$C6,$FC,$D8,$CC,$C6,$00 ; R
  376 D1:B2B2 7C C6 C0 7C 
              06 C6 7C 00 .db	$7C,$C6,$C0,$7C,$06,$C6,$7C,$00 ; S
  377 D1:B2BA FF 18 18 18 
              18 18 18 00 .db	$FF,$18,$18,$18,$18,$18,$18,$00 ; T
  378 D1:B2C2 C6 C6 C6 C6 
              C6 C6 FE 00 .db	$C6,$C6,$C6,$C6,$C6,$C6,$FE,$00 ; U
  379 D1:B2CA C6 C6 C6 C6 
              C6 7C 38 00 .db	$C6,$C6,$C6,$C6,$C6,$7C,$38,$00 ; V
  380 D1:B2D2 C6 C6 C6 C6 
              D6 FE 6C 00 .db	$C6,$C6,$C6,$C6,$D6,$FE,$6C,$00 ; W
  381 D1:B2DA C6 C6 6C 38 
              6C C6 C6 00 .db	$C6,$C6,$6C,$38,$6C,$C6,$C6,$00 ; X
  382 D1:B2E2 C6 C6 C6 7C 
              18 30 E0 00 .db	$C6,$C6,$C6,$7C,$18,$30,$E0,$00 ; Y
  383 D1:B2EA FE 06 0C 18 
              30 60 FE 00 .db	$FE,$06,$0C,$18,$30,$60,$FE,$00 ; Z
  384 D1:B2F2 F0 C0 C0 C0 
              C0 C0 F0 00 .db	$F0,$C0,$C0,$C0,$C0,$C0,$F0,$00 ; [
  385 D1:B2FA C0 60 30 18 
              0C 06 02 00 .db	$C0,$60,$30,$18,$0C,$06,$02,$00 ; \
  386 D1:B302 F0 30 30 30 
              30 30 F0 00 .db	$F0,$30,$30,$30,$30,$30,$F0,$00 ; ]
  387 D1:B30A 10 38 6C C6 
              00 00 00 00 .db	$10,$38,$6C,$C6,$00,$00,$00,$00 ; ^
  388 D1:B312 00 00 00 00 
              00 00 00 FF .db	$00,$00,$00,$00,$00,$00,$00,$FF ; _
  389 D1:B31A C0 C0 60 00 
              00 00 00 00 .db	$C0,$C0,$60,$00,$00,$00,$00,$00 ; `
  390 D1:B322 00 00 7C 06 
              7E C6 7E 00 .db	$00,$00,$7C,$06,$7E,$C6,$7E,$00 ; a
  391 D1:B32A C0 C0 C0 FC 
              C6 C6 FC 00 .db	$C0,$C0,$C0,$FC,$C6,$C6,$FC,$00 ; b
  392 D1:B332 00 00 7C C6 
              C0 C6 7C 00 .db	$00,$00,$7C,$C6,$C0,$C6,$7C,$00 ; c
  393 D1:B33A 06 06 06 7E 
              C6 C6 7E 00 .db	$06,$06,$06,$7E,$C6,$C6,$7E,$00 ; d
  394 D1:B342 00 00 7C C6 
              FE C0 7C 00 .db	$00,$00,$7C,$C6,$FE,$C0,$7C,$00 ; e
  395 D1:B34A 1C 36 30 78 
              30 30 78 00 .db	$1C,$36,$30,$78,$30,$30,$78,$00 ; f
  396 D1:B352 00 00 7E C6 
              C6 7E 06 FC .db	$00,$00,$7E,$C6,$C6,$7E,$06,$FC ; g
  397 D1:B35A C0 C0 FC C6 
              C6 C6 C6 00 .db	$C0,$C0,$FC,$C6,$C6,$C6,$C6,$00 ; h
  398 D1:B362 18 00 38 18 
              18 18 3C 00 .db	$18,$00,$38,$18,$18,$18,$3C,$00 ; i
  399 D1:B36A 06 00 06 06 
              06 06 C6 7C .db	$06,$00,$06,$06,$06,$06,$C6,$7C ; j
  400 D1:B372 C0 C0 CC D8 
              F8 CC C6 00 .db	$C0,$C0,$CC,$D8,$F8,$CC,$C6,$00 ; k
  401 D1:B37A 38 18 18 18 
              18 18 3C 00 .db	$38,$18,$18,$18,$18,$18,$3C,$00 ; l
  402 D1:B382 00 00 CC FE 
              FE D6 D6 00 .db	$00,$00,$CC,$FE,$FE,$D6,$D6,$00 ; m
  403 D1:B38A 00 00 FC C6 
              C6 C6 C6 00 .db	$00,$00,$FC,$C6,$C6,$C6,$C6,$00 ; n
  404 D1:B392 00 00 7C C6 
              C6 C6 7C 00 .db	$00,$00,$7C,$C6,$C6,$C6,$7C,$00 ; o
  405 D1:B39A 00 00 FC C6 
              C6 FC C0 C0 .db	$00,$00,$FC,$C6,$C6,$FC,$C0,$C0 ; p
  406 D1:B3A2 00 00 7E C6 
              C6 7E 06 06 .db	$00,$00,$7E,$C6,$C6,$7E,$06,$06 ; q
  407 D1:B3AA 00 00 FC C6 
              C0 C0 C0 00 .db	$00,$00,$FC,$C6,$C0,$C0,$C0,$00 ; r
  408 D1:B3B2 00 00 7E C0 
              7C 06 FC 00 .db	$00,$00,$7E,$C0,$7C,$06,$FC,$00 ; s
  409 D1:B3BA 30 30 FC 30 
              30 30 1C 00 .db	$30,$30,$FC,$30,$30,$30,$1C,$00 ; t
  410 D1:B3C2 00 00 C6 C6 
              C6 C6 7E 00 .db	$00,$00,$C6,$C6,$C6,$C6,$7E,$00 ; u
  411 D1:B3CA 00 00 C6 C6 
              C6 7C 38 00 .db	$00,$00,$C6,$C6,$C6,$7C,$38,$00 ; v
  412 D1:B3D2 00 00 C6 C6 
              D6 FE 6C 00 .db	$00,$00,$C6,$C6,$D6,$FE,$6C,$00 ; w
  413 D1:B3DA 00 00 C6 6C 
              38 6C C6 00 .db	$00,$00,$C6,$6C,$38,$6C,$C6,$00 ; x
  414 D1:B3E2 00 00 C6 C6 
              C6 7E 06 FC .db	$00,$00,$C6,$C6,$C6,$7E,$06,$FC ; y
  415 D1:B3EA 00 00 FE 0C 
              38 60 FE 00 .db	$00,$00,$FE,$0C,$38,$60,$FE,$00 ; z
  416 D1:B3F2 1C 30 30 E0 
              30 30 1C 00 .db	$1C,$30,$30,$E0,$30,$30,$1C,$00 ; {
  417 D1:B3FA C0 C0 C0 00 
              C0 C0 C0 00 .db	$C0,$C0,$C0,$00,$C0,$C0,$C0,$00 ; |
  418 D1:B402 E0 30 30 1C 
              30 30 E0 00 .db	$E0,$30,$30,$1C,$30,$30,$E0,$00 ; }
  419 D1:B40A 76 DC 00 00 
              00 00 00 00 .db	$76,$DC,$00,$00,$00,$00,$00,$00 ; ~
  420 D1:B412 00 10 38 6C 
              C6 C6 FE 00 .db	$00,$10,$38,$6C,$C6,$C6,$FE,$00 ; △
  421 D1:B41A -  -  -  -  
  422 D1:B41A -  -  -  -  ;Copied from the Escheron: Twilight over Ragnoth project
  423 D1:B41A -  -  -  -  ;whose format was copied from a (then-)authorized source
  424 D1:B41A -  -  -  -  ;for DoorsCS (I think? The one for the 83+) by "Kerm Martian".
  425 D1:B41A -  -  -  -  SmallHexFont:
  426 D1:B41A 4E AA AE -  .db $4E,$AA,$AE				;zero
  427 D1:B41D 44 C4 4E -  .db $44,$C4,$4E				;one
  428 D1:B420 4C 24 8E -  .db $4C,$24,$8E				;two
  429 D1:B423 4C 24 2C -  .db $4C,$24,$2C				;three
  430 D1:B426 48 AE 22 -  .db $48,$AE,$22				;four
  431 D1:B429 4E 8C 2C -  .db $4E,$8C,$2C				;five
  432 D1:B42C 46 8E AE -  .db $46,$8E,$AE				;six
  433 D1:B42F 4E 24 88 -  .db $4E,$24,$88				;seven
  434 D1:B432 4E AE AE -  .db $4E,$AE,$AE				;eight
  435 D1:B435 4E AE 2C -  .db $4E,$AE,$2C				;nine
  436 D1:B438 44 AE AA -  .db $44,$AE,$AA				;A
  437 D1:B43B 4C AC AC -  .db $4C,$AC,$AC				;B
  438 D1:B43E 46 88 86 -  .db $46,$88,$86				;C
  439 D1:B441 4C AA AC -  .db $4C,$AA,$AC				;D
  440 D1:B444 4E 8C 8E -  .db $4E,$8C,$8E				;E
  441 D1:B447 4E 8C 88 -  .db $4E,$8C,$88				;F
  442 D1:B44A -  -  -  -  
  443 D1:B44A -  -  -  -  
  444 D1:B44A -  -  -  -  
Listing for file "main.z80"
  826 D1:B44A -  -  -  -  #include "coreint.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\coreint.z80"
    1 D1:B44A -  -  -  -  ; Code to handle interrup servicer. Note: This hinges on 
    2 D1:B44A -  -  -  -  ; PPU timing, so some of its initilization code will end up here too.
    3 D1:B44A -  -  -  -  ;
    4 D1:B44A -  -  -  -  
    5 D1:B44A -  -  -  -  
    6 D1:B44A -  -  -  -  
    7 D1:B44A -  -  -  -  ppu_init:
    8 D1:B44A -  -  -  -      ;ACTUALLY. PPU MEMORY DOESN'T REQUIRE INITIALIZATION. THAT'S TAKEN CARE OF
    9 D1:B44A -  -  -  -      ;DURING CORE INIT. THIS BEHAVIOR WON'T WORK ON FAMICOM EMULATION, BUT MEH.
   10 D1:B44A AF -  -  -      xor a,a
   11 D1:B44B 32 60 34 D0     ld  (int_table_len),a
   12 D1:B44F 11 89 E4 D1     ld  de,ppu_isr
   13 D1:B453 01 23 6D 00     ld  bc,27939
   14 D1:B457 CD D8 B4 D1     call int6502_insertISA  ;sets ix. ix before this unknown.
   15 D1:B45B DD 36 F1 02     ld  (ix+PPU_SUBCYCLE),2
   16 D1:B45F C9 -  -  -      ret
   17 D1:B460 -  -  -  -  
   18 D1:B460 -  -  -  -  
   19 D1:B460 -  -  -  -  int6502_updateIntCounter:
   20 D1:B460 21 60 34 D0     ld  hl,int_table_len
   21 D1:B464 7E -  -  -      ld  a,(hl)
   22 D1:B465 B7 -  -  -      or  a,a
   23 D1:B466 C8 -  -  -      ret z
   24 D1:B467 23 -  -  -      inc hl  ;advance to first pointer
   25 D1:B468 23 -  -  -      inc hl
   26 D1:B469 23 -  -  -      inc hl
   27 D1:B46A 23 -  -  -      inc hl  ;advanced to first time
   28 D1:B46B ED 27 -  -      ld  hl,(hl)
   29 D1:B46D -  -  -  -      ;neg hl
   30 D1:B46D DD 2F 1B -      ld  (ix+TEMP_MEMORY),hl
   31 D1:B470 DD 7E 1D -      ld  a,(ix+TEMP_MEMORY+2)
   32 D1:B473 2F -  -  -      cpl
   33 D1:B474 DD 77 1D -      ld  (ix+TEMP_MEMORY+2),a
   34 D1:B477 7D -  -  -      ld  a,l
   35 D1:B478 2F -  -  -      cpl
   36 D1:B479 6F -  -  -      ld  l,a
   37 D1:B47A 7C -  -  -      ld  a,h
   38 D1:B47B 2F -  -  -      cpl
   39 D1:B47C 67 -  -  -      ld  h,a
   40 D1:B47D 52 DD 2F 1B     ld.s (ix+TEMP_MEMORY),hl
   41 D1:B481 DD 27 1B -      ld  hl,(ix+TEMP_MEMORY)
   42 D1:B484 -  -  -  -      ;load to clock counter in "core.z80"
   43 D1:B484 22 17 B6 D1     ld  (i6502_interrupt_timer),hl
   44 D1:B488 C9 -  -  -      ret
   45 D1:B489 -  -  -  -  
   46 D1:B489 -  -  -  -  int6502_init:
   47 D1:B489 AF -  -  -      xor a,a
   48 D1:B48A 32 60 34 D0     ld  (int_table_len),a
   49 D1:B48E C9 -  -  -      ret
   50 D1:B48F -  -  -  -  
   51 D1:B48F -  -  -  -  ;DE=ISRToPush, BC=CallWhenThisClockIsPassed
   52 D1:B48F -  -  -  -  ;This routine is called in the ISR handler to both acknowledge the consumption
   53 D1:B48F -  -  -  -  ;of its turn at the ISR, and to (potentially) push another entry to the stack.
   54 D1:B48F -  -  -  -  ;This does not affect ths size of a table since this is a combined
   55 D1:B48F -  -  -  -  ;pop-and-insert operation
   56 D1:B48F -  -  -  -  int6502_pushISRAfterPop:
   57 D1:B48F DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
   58 D1:B494 DD 7E FF -      ld  a,(ix-1)        ;length of the table
   59 D1:B497 B7 -  -  -      or  a,a
   60 D1:B498 20 00 -  -      jr  nz,+_       ;Jump not taken: Push first and only entry
   61 D1:B49A DD 36 FF 01 _:  ld  (ix-1),1
   62 D1:B49E DD 1F 00 -      ld  (ix+0),de
   63 D1:B4A1 DD 0F 03 -      ld  (ix+3),bc
   64 D1:B4A4 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   65 D1:B4A9 C9 -  -  -      ret
   66 D1:B4AA 3D -  -  -  _:  dec a
   67 D1:B4AB 28 ED -  -      jr  z,--_       ;Jump taken: Replace first and only entry since we ate it.
   68 D1:B4AD -  -  -  -      ;Loop steps:
   69 D1:B4AD -  -  -  -      ;If not loopCounter or BC < ix[0].T:
   70 D1:B4AD -  -  -  -      ;   ix[-1] = DE,BC
   71 D1:B4AD -  -  -  -      ;   STOP.
   72 D1:B4AD -  -  -  -      ;Else:
   73 D1:B4AD -  -  -  -      ;   ix[-1] = ix[0]
   74 D1:B4AD -  -  -  -      ;   ix += STRIDE
   75 D1:B4AD -  -  -  -      ;   --loopCounter;
   76 D1:B4AD -  -  -  -  int6502_pushISRAfterPop_loop:
   77 D1:B4AD ED 32 06 -      lea ix,ix+INT_TABLE_STRIDE
   78 D1:B4B0 B7 -  -  -      or  a,a
   79 D1:B4B1 28 07 -  -      jr  z,+_
   80 D1:B4B3 DD 27 03 -      ld  hl,(ix+INT_CYCLE_OFFSET)
   81 D1:B4B6 ED 42 -  -      sbc hl,bc   ;C if ix[0]<BC
   82 D1:B4B8 30 0F -  -      jr  nc,++_
   83 D1:B4BA DD 1F 00 -  _:  ld  (ix+INT_ADDR_OFFSET),de
   84 D1:B4BD DD 0F 03 -      ld  (ix+INT_CYCLE_OFFSET),bc
   85 D1:B4C0 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   86 D1:B4C5 C3 60 B4 D1     jp  int6502_updateIntCounter
   87 D1:B4C9 DD 27 00 -  _:  ld  hl,(ix+INT_ADDR_OFFSET)
   88 D1:B4CC DD 2F FA -      ld  (ix+INT_ADDR_OFFSET-INT_TABLE_STRIDE),hl
   89 D1:B4CF DD 27 03 -      ld  hl,(ix+INT_CYCLE_OFFSET)
   90 D1:B4D2 DD 2F FD -      ld  (ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE),hl
   91 D1:B4D5 3D -  -  -      dec a
   92 D1:B4D6 18 D5 -  -      jr int6502_pushISRAfterPop_loop
   93 D1:B4D8 -  -  -  -      
   94 D1:B4D8 -  -  -  -  ;DE=ISRToPush, BC=CallWhenThisClockIsPassed
   95 D1:B4D8 -  -  -  -  ;This actually adds an entry to the stack.
   96 D1:B4D8 -  -  -  -  int6502_insertISA:
   97 D1:B4D8 DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
   98 D1:B4DD DD 7E FF -      ld  a,(ix-1)
   99 D1:B4E0 B7 -  -  -      or  a,a
  100 D1:B4E1 20 13 -  -      jr  nz,+_
  101 D1:B4E3 DD 36 FF 01     ld  (ix-1),1
  102 D1:B4E7 DD 1F 00 -      ld  (ix+0),de
  103 D1:B4EA DD 0F 03 -      ld  (ix+3),bc
  104 D1:B4ED DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
  105 D1:B4F2 C3 60 B4 D1     jp  int6502_updateIntCounter
  106 D1:B4F6 FE 08 -  -  _:  cp  a,INT_TABLE_MAXLEN
  107 D1:B4F8 C8 -  -  -      ret z       ;do not attempt to insert if table is maxed out
  108 D1:B4F9 C5 -  -  -      push bc
  109 D1:B4FA 47 -  -  -          ld  b,a
  110 D1:B4FB 0E 06 -  -          ld  c,INT_TABLE_STRIDE
  111 D1:B4FD ED 4C -  -          mlt bc
  112 D1:B4FF DD 09 -  -          add ix,bc   ;at end of table
  113 D1:B501 C1 -  -  -      pop bc
  114 D1:B502 -  -  -  -      ;Loop details. IX points at entry after last:
  115 D1:B502 -  -  -  -      ;if not loopCtr or ix[-1].T < BC:
  116 D1:B502 -  -  -  -      ;   ix[0] = DE,BC , STOP.
  117 D1:B502 -  -  -  -      ;else:
  118 D1:B502 -  -  -  -      ;   ix[0] = ix[-1], ix-=STRIDE, loopCtr--
  119 D1:B502 -  -  -  -  int6502_insertISA_Loop:
  120 D1:B502 B7 -  -  -      or  a,a
  121 D1:B503 28 07 -  -      jr  z,+_
  122 D1:B505 DD 27 FD -      ld  hl,(ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE)
  123 D1:B508 ED 42 -  -      sbc hl,bc   ;C if ix[-1]<BC
  124 D1:B50A 38 0F -  -      jr  c,++_
  125 D1:B50C DD 1F 00 -  _:  ld  (ix+INT_ADDR_OFFSET),de
  126 D1:B50F DD 0F 03 -      ld  (ix+INT_CYCLE_OFFSET),bc
  127 D1:B512 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
  128 D1:B517 C3 60 B4 D1     jp  int6502_updateIntCounter
  129 D1:B51B DD 27 FA -  _:  ld  hl,(ix+INT_ADDR_OFFSET-INT_TABLE_STRIDE)
  130 D1:B51E DD 2F 00 -      ld  (ix+INT_ADDR_OFFSET),hl
  131 D1:B521 DD 27 FD -      ld  hl,(ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE)
  132 D1:B524 DD 2F 03 -      ld  (ix+INT_CYCLE_OFFSET),hl
  133 D1:B527 ED 32 FA -      lea ix,ix-INT_TABLE_STRIDE
  134 D1:B52A 3D -  -  -      dec a
  135 D1:B52B 18 D5 -  -      jr int6502_insertISA_Loop
  136 D1:B52D -  -  -  -      
  137 D1:B52D -  -  -  -  
  138 D1:B52D -  -  -  -  int6502_removeTop:
  139 D1:B52D DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
  140 D1:B532 DD 7E FF -      ld  a,(ix-1)
  141 D1:B535 B7 -  -  -      or  a,a
  142 D1:B536 28 1B -  -      jr  z,+_
  143 D1:B538 DD 35 FF -      dec (ix-1)
  144 D1:B53B 4F -  -  -      ld  c,a
  145 D1:B53C 06 06 -  -      ld  b,INT_TABLE_STRIDE
  146 D1:B53E ED 4C -  -      mlt bc
  147 D1:B540 ED 32 06 -      lea ix,ix+INT_TABLE_STRIDE
  148 D1:B543 ED 12 FA -      lea de,ix-INT_TABLE_STRIDE
  149 D1:B546 ED 22 00 -      lea hl,ix+0
  150 D1:B549 ED B0 -  -      ldir
  151 D1:B54B D5 -  -  -      push de
  152 D1:B54C E1 -  -  -      pop hl
  153 D1:B54D 13 -  -  -      inc de
  154 D1:B54E 71 -  -  -      ld  (hl),c
  155 D1:B54F 0E 05 -  -      ld  c,INT_TABLE_STRIDE-1
  156 D1:B551 ED B0 -  -      ldir
  157 D1:B553 DD 21 80 32 
              D0 -  -  -  _:  ld ix,core_memory_ix
  158 D1:B558 C9 -  -  -      ret    
  159 D1:B559 -  -  -  -  
  160 D1:B559 -  -  -  -  
  161 D1:B559 -  -  -  -  
  162 D1:B559 -  -  -  -  
  163 D1:B559 -  -  -  -  
  164 D1:B559 -  -  -  -  
  165 D1:B559 -  -  -  -  
  166 D1:B559 -  -  -  -  
  167 D1:B559 -  -  -  -  
  168 D1:B559 -  -  -  -  
  169 D1:B559 -  -  -  -  
  170 D1:B559 -  -  -  -  
  171 D1:B559 -  -  -  -  
  172 D1:B559 -  -  -  -  
Listing for file "main.z80"
  827 D1:B559 -  -  -  -  #include "core.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    1 D1:B559 -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    2 D1:B559 -  -  -  -  
    3 D1:B559 -  -  -  -  ;TODO: DEFINE MEMORY ACCESS MACROS. ONE OR MORE FOR READ AND WRITE.
    4 D1:B559 -  -  -  -  ;FIGURE OUT HOW TO GET BOTH HIGH AND LOW BYTE OF ORIGINAL ADDRESS
    5 D1:B559 -  -  -  -  ;AND PERFORM ALTERNATE ACTIONS BASED ON WHAT HARDWARE WAS ACCESSED.
    6 D1:B559 -  -  -  -  ;NOTE: PATTERN SHOWS THAT D=MSB, C=LSB OF 6502 ADDRESS. USE THIS.
    7 D1:B559 -  -  -  -  ;
    8 D1:B559 -  -  -  -  ;THESE MACROS ARE PLACEHOLDERS. CHANGE THEM LATER ON TO REFLECT ACTUAL
    9 D1:B559 -  -  -  -  ;HARDWARE SHENANIGANS.
   10 D1:B559 -  -  -  -  ;
   11 D1:B559 -  -  -  -  ;NOTE: WRITE ACCESSES RELY ON KNOWING WHAT DATA TO WRITE. CAN'T STORE THAT IN A
   12 D1:B559 -  -  -  -  ;      SINCE WE NEED TO DO CONDITIONING. REGISTER B IS UNUSED SO LET'S USE THAT.
   13 D1:B559 -  -  -  -  ;
   14 D1:B559 -  -  -  -  #define READ_ACCESS call mapper0_read
   15 D1:B559 -  -  -  -  #define WRITE_ACCESS call mapper0_write
   16 D1:B559 -  -  -  -  ;Later, put in actual test. Z if not triggered, NZ if triggered. This
   17 D1:B559 -  -  -  -  ;alters the behavior of the BRK instruction.
   18 D1:B559 -  -  -  -  #define WAS_NMI_TRIGGERED bit 0,(ix+NMI_TRIGGERED)
   19 D1:B559 -  -  -  -  
   20 D1:B559 -  -  -  -  #define OPRFLG_C res SF_CARRY,b \ jr nc,$+4 \ set SF_CARRY,b
   21 D1:B559 -  -  -  -  #define OPRFLG_V res SF_OVER,b \ jp po,$+6 \ set SF_OVER,b
   22 D1:B559 -  -  -  -  #define OPRFLG_Z res SF_ZERO,b \ jr nz,$+4 \ set SF_ZERO,b
   23 D1:B559 -  -  -  -  #define OPRFLG_N res SF_NEG,b \ jr nc,$+4 \ set SF_NEG,b
   24 D1:B559 -  -  -  -  
   25 D1:B559 -  -  -  -  #define FLAGS_ZN ld b,(ix+REGSR) \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   26 D1:B559 -  -  -  -  #define FLAGS_CZN ld b,(ix+REGSR) \ OPRFLG_C \ rlc a  \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   27 D1:B559 -  -  -  -  #define FLAGS_VCZN ld b,(ix+REGSR) \ OPRFLG_V \ OPRFLG_C \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   28 D1:B559 -  -  -  -  
   29 D1:B559 -  -  -  -  
   30 D1:B559 -  -  -  -  ;Modify later to include provisions for hardware i/o based on page
   31 D1:B559 -  -  -  -  #define HW_READ(src_reg) ld a,(src_reg)
   32 D1:B559 -  -  -  -  #define HW_WRITE(dst_reg) ld (dst_reg),a
   33 D1:B559 -  -  -  -  
   34 D1:B559 -  -  -  -  
   35 D1:B559 -  -  -  -  
   36 D1:B559 -  -  -  -  
   37 D1:B559 -  -  -  -  ;=============================================================================
   38 D1:B559 -  -  -  -  ;=============================================================================
   39 D1:B559 -  -  -  -  ;=============================================================================
   40 D1:B559 -  -  -  -  ;=============================================================================
   41 D1:B559 -  -  -  -  ;You should have set up the mappings already. This is because
   42 D1:B559 -  -  -  -  ;mappings are program-dependant. Only $0000-$3FFF will be mapped in here
   43 D1:B559 -  -  -  -  ;more or less because I don't expect anything else to map that.
   44 D1:B559 -  -  -  -  i6502Init:
   45 D1:B559 -  -  -  -      ;
   46 D1:B559 -  -  -  -      ; At this point, you may need to randomize 2048 bytes at main_ram
   47 D1:B559 -  -  -  -      ;
   48 D1:B559 21 00 38 D0     ld  hl,main_ram
   49 D1:B55D 01 08 20 00     ld  bc,$002008
   50 D1:B561 1E 00 -  -      ld  e,$00
   51 D1:B563 CD 63 B6 D1     call i6502_map_pages
   52 D1:B567 21 00 33 D0     ld  hl,scrap_mapping
   53 D1:B56B 01 01 20 00     ld  bc,$002001
   54 D1:B56F 1E 20 -  -      ld  e,$20
   55 D1:B571 CD 63 B6 D1     call i6502_map_pages
   56 D1:B575 CD 4A B6 D1     call i6502_load_instruction_set
   57 D1:B579 -  -  -  -      ;
   58 D1:B579 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   59 D1:B57E FD 21 02 00 
              00 -  -  -      ld  iy,2    ;8 cycle startup. Hooking into inst6502_jsr for init
   60 D1:B583 ED 22 80 -      lea hl,ix-128
   61 D1:B586 ED 12 81 -      lea de,ix-127
   62 D1:B589 01 FF 00 00     ld  bc,255
   63 D1:B58D 36 00 -  -      ld  (hl),$00
   64 D1:B58F ED B0 -  -      ldir
   65 D1:B591 -  -  -  -      ;
   66 D1:B591 21 00 00 00     ld  hl,0
   67 D1:B595 39 -  -  -      add hl,sp
   68 D1:B596 DD 2F 11 -      ld  (ix+CORE_STACK_BASE),hl
   69 D1:B599 -  -  -  -  
   70 D1:B599 -  -  -  -      ;Note: SP may need initialization. So does SR for interrupts. Or somesuch.
   71 D1:B599 21 F4 4B D0     ld  hl,PAGETABLE+(255*BASETABLE_STRIDE)
   72 D1:B59D ED 27 -  -      ld  hl,(hl)
   73 D1:B59F 11 FC 00 00     ld  de,$0000FC
   74 D1:B5A3 19 -  -  -      add hl,de
   75 D1:B5A4 -  -  -  -      ;
   76 D1:B5A4 -  -  -  -      ;jp inst6502_jsr
   77 D1:B5A4 -  -  -  -      ;Manual loading below. Uncomment "jp inst6502_jsr" to return to original.
   78 D1:B5A4 -  -  -  -      ;Settings below is to run nestest CPU-only test. The reset vector above
   79 D1:B5A4 -  -  -  -      ;requires a working PPU (and probably APU) to be present.
   80 D1:B5A4 DD 36 04 24     ld  (ix+REGSR),$24      ;because that's what the log wants?
   81 D1:B5A8 21 00 C0 00     ld  hl,$C000
   82 D1:B5AC DD 2F 05 -      ld  (ix+REGPC),HL
   83 D1:B5AF FD 21 07 00 
              00 -  -  -      ld  iy,7
   84 D1:B5B4 DD 36 03 FD     ld  (ix+REGSP),$FD
   85 D1:B5B8 -  -  -  -      ;debug stuff
   86 D1:B5B8 3A 30 00 F2     ld  a,($F20030)
   87 D1:B5BC CB C7 -  -      set 0,a ;turn on timer 1
   88 D1:B5BE 32 30 00 F2     ld  ($F20030),a
   89 D1:B5C2 -  -  -  -  
   90 D1:B5C2 -  -  -  -  i6502RetryFirstLoad:    ;reentrant from ISR handler
   91 D1:B5C2 52 DD 17 05     ld.s de,(ix+REGPC)
   92 D1:B5C6 1B -  -  -      dec de
   93 D1:B5C7 18 04 -  -      jr +_
   94 D1:B5C9 -  -  -  -  i6502FirstLoad:
   95 D1:B5C9 52 DD 17 05     ld.s de,(ix+REGPC)
   96 D1:B5CD 7B -  -  -  _:  ld  a,e
   97 D1:B5CE 1E 0C -  -      ld  e,BASETABLE_STRIDE
   98 D1:B5D0 ED 5C -  -      mlt de
   99 D1:B5D2 21 00 40 D0     ld  hl,PAGETABLE
  100 D1:B5D6 19 -  -  -      add hl,de
  101 D1:B5D7 ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
  102 D1:B5D9 16 00 -  -      ld  d,0
  103 D1:B5DB 5F -  -  -      ld  e,a
  104 D1:B5DC 19 -  -  -      add hl,de       ;resolve final address
  105 D1:B5DD 18 19 -  -      jr  i6502FinishLoad
  106 D1:B5DF -  -  -  -  i6502NextLoad:
  107 D1:B5DF 23 -  -  -      inc hl
  108 D1:B5E0 1C -  -  -      inc e
  109 D1:B5E1 20 15 -  -      jr  nz,i6502FinishLoad
  110 D1:B5E3 DD 56 06 -      ld  d,(ix+REGPC+1)
  111 D1:B5E6 14 -  -  -      inc d
  112 D1:B5E7 52 DD 1F 05     ld.s (ix+REGPC),de
  113 D1:B5EB 1E 0C -  -      ld  e,BASETABLE_STRIDE
  114 D1:B5ED ED 5C -  -      mlt de
  115 D1:B5EF 21 00 40 D0     ld  hl,PAGETABLE
  116 D1:B5F3 19 -  -  -      add hl,de
  117 D1:B5F4 ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
  118 D1:B5F6 1E 00 -  -      ld  e,0         ;PCL known to be zero at this point.
  119 D1:B5F8 -  -  -  -  i6502FinishLoad:
  120 D1:B5F8 7E -  -  -      ld  a,(hl)
  121 D1:B5F9 -  -  -  -  
  122 D1:B5F9 -  -  -  -  #ifdef COREDEBUG
  123 D1:B5F9                 ld  (ix+CURRENT_OPCODES+0),a
  124 D1:B5F9                 ld  (ix+REGPC+0),e
  125 D1:B5F9             #endif
  126 D1:B5F9 23 -  -  -      inc hl
  127 D1:B5FA 1C -  -  -      inc e
  128 D1:B5FB 20 15 -  -      jr  nz,i6502PrepNextPage
  129 D1:B5FD DD 56 06 -      ld  d,(ix+REGPC+1)
  130 D1:B600 14 -  -  -      inc d
  131 D1:B601 52 DD 1F 05     ld.s (ix+REGPC),de
  132 D1:B605 1E 0C -  -      ld  e,BASETABLE_STRIDE
  133 D1:B607 ED 5C -  -      mlt de
  134 D1:B609 21 00 40 D0     ld  hl,PAGETABLE
  135 D1:B60D 19 -  -  -      add hl,de
  136 D1:B60E ED 27 -  -      ld  hl,(hl)
  137 D1:B610 1E 00 -  -      ld  e,0
  138 D1:B612 -  -  -  -  i6502PrepNextPage:
  139 D1:B612 -  -  -  -  #ifdef COREDEBUG
  140 D1:B612                 push af
  141 D1:B612                     ld  a,(hl)
  142 D1:B612                     ld  (ix+CURRENT_OPCODES+1),a
  143 D1:B612                     push de
  144 D1:B612                         push hl
  145 D1:B612                             push ix
  146 D1:B612                                 inc hl
  147 D1:B612                                 inc e
  148 D1:B612                                 jr  nz,+_
  149 D1:B612                                 ld  d,(ix+REGPC+1)
  150 D1:B612                                 inc d
  151 D1:B612                                 ld  e,BASETABLE_STRIDE
  152 D1:B612                                 mlt de
  153 D1:B612                                 ld  hl,PAGETABLE
  154 D1:B612                                 add hl,de
  155 D1:B612                                 ld  hl,(hl)
  156 D1:B612             _:                  ld  a,(hl)
  157 D1:B612                                 ld  (ix+CURRENT_OPCODES+2),a
  158 D1:B612                                 lea hl,ix
  159 D1:B612                                 ld  de,core_memory_ix
  160 D1:B612                                 or  a,a
  161 D1:B612                                 sbc hl,de
  162 D1:B612                                 jr  nz,$    ;halt program if IX is not core_memory_ix
  163 D1:B612                                 ;jr $
  164 D1:B612                                 push iy
  165 D1:B612                                     call dbg_printLine
  166 D1:B612                                 pop iy
  167 D1:B612                                 ld  a,(ix+CORE_ERROR_LEVEL)
  168 D1:B612                                 or  a,a
  169 D1:B612                                 jr  z,+_
  170 D1:B612                                 ld  hl,(ix+CORE_STACK_BASE)
  171 D1:B612                                 ld  sp,hl
  172 D1:B612                                 ret
  173 D1:B612             _:                  ld  iy,(ix+CYCLES_CURRENT)  ;remove when done with timings
  174 D1:B612                                 lea hl,iy+0
  175 D1:B612                                 ld  de,DEBUG_STEP_START_CYCLE
  176 D1:B612                                 or  a,a
  177 D1:B612                                 sbc hl,de
  178 D1:B612                                 call nc,waituntilnewkeypress
  179 D1:B612                             pop ix
  180 D1:B612                         pop hl
  181 D1:B612                     pop de
  182 D1:B612                 pop af
  183 D1:B612             #endif
  184 D1:B612 E5 -  -  -      push hl
  185 D1:B613 ED 23 00 -          lea hl,iy
  186 D1:B616 -  -  -  -  i6502_interrupt_timer   .equ $+1
  187 D1:B616 01 4C 98 FF         ld  bc,-26548
  188 D1:B61A 09 -  -  -          add hl,bc
  189 D1:B61B 38 1A -  -          jr  c,i6502_take_interrupt
  190 D1:B61D -  -  -  -  i6502_continue_instruction_fetch:
  191 D1:B61D 67 -  -  -          ld  h,a
  192 D1:B61E 2E 0C -  -          ld  l,BASETABLE_STRIDE
  193 D1:B620 ED 6C -  -          mlt hl
  194 D1:B622 01 04 40 D0         ld  bc,JUMPTABLE
  195 D1:B626 09 -  -  -          add hl,bc
  196 D1:B627 ED 27 -  -          ld  hl,(hl)     ;jumptable
  197 D1:B629 E3 -  -  -          ex  (sp),hl     ;exch with exec addr, jumpto-via-ret
  198 D1:B62A C9 -  -  -      ret
  199 D1:B62B -  -  -  -  
  200 D1:B62B -  -  -  -  i6502_no_interrupts:
  201 D1:B62B -  -  -  -          ;This is what happens when you let the core run without setting
  202 D1:B62B -  -  -  -          ;up interrupts. It'll be up to the hardware access subroutines
  203 D1:B62B -  -  -  -          ;to configure interrupts from now on. See "coreint.z80" for
  204 D1:B62B -  -  -  -          ;more information
  205 D1:B62B 21 00 00 80         ld  hl,$800000  ;INT_MIN. Prevent retry for as long as possible.
  206 D1:B62F 22 37 B6 D1         ld  (i6502_take_interrupt),hl
  207 D1:B633 C3 1D B6 D1         jp  i6502_continue_instruction_fetch
  208 D1:B637 -  -  -  -  
  209 D1:B637 -  -  -  -  i6502_take_interrupt:
  210 D1:B637 67 -  -  -          ld  h,a
  211 D1:B638 3A 60 34 D0         ld  a,(int_table_len)
  212 D1:B63C B7 -  -  -          or  a,a
  213 D1:B63D 7C -  -  -          ld  a,h
  214 D1:B63E 28 EB -  -          jr  z,i6502_no_interrupts
  215 D1:B640 E1 -  -  -      pop hl
  216 D1:B641 AF -  -  -      xor a,a
  217 D1:B642 DD 73 05 -      ld  (ix+REGPC+0),e
  218 D1:B645 2A 61 34 D0     ld  hl,(INT_TABLE)  ;Find the routines in "coreint.z80" that handles
  219 D1:B649 E9 -  -  -      jp  (hl)            ;and maintains the interrupt table being used here.
  220 D1:B64A -  -  -  -  
  221 D1:B64A -  -  -  -  
  222 D1:B64A -  -  -  -  ;Instructions one byte wide returns to the main loop via:
  223 D1:B64A -  -  -  -  ;   JP i6502FinishLoad
  224 D1:B64A -  -  -  -  ;Those with parameters have HL at the address in quetion, and is expected to
  225 D1:B64A -  -  -  -  ;advance HL and E at the end of the instruction. You return to main loop via:
  226 D1:B64A -  -  -  -  ;   JP i6502NextLoad
  227 D1:B64A -  -  -  -  ;Unless you manually advance the pointer to the next instruction.
  228 D1:B64A -  -  -  -  ;You really shouldn't but if you must do that, then also do this:
  229 D1:B64A -  -  -  -  ;   JP i6502FinishLoad
  230 D1:B64A -  -  -  -  ;Remember that register E is very important; it tells you about page boundaries.
  231 D1:B64A -  -  -  -  
  232 D1:B64A -  -  -  -  
  233 D1:B64A -  -  -  -  ;-----------------------------------------------------------------------------
  234 D1:B64A -  -  -  -  ;-----------------------------------------------------------------------------
  235 D1:B64A -  -  -  -  ;-----------------------------------------------------------------------------
  236 D1:B64A -  -  -  -  
  237 D1:B64A -  -  -  -  ;  ***  *   * ****  ****   ***  *   * ***** ***** **  * *****  ***  
  238 D1:B64A -  -  -  -  ; *     *   * *   * *   * *   * *   *   *     *   **  * *     *     
  239 D1:B64A -  -  -  -  ;  ***  *   * ****  ****  *   * *   *   *     *   * * * ***    ***  
  240 D1:B64A -  -  -  -  ;     * *   * *   * *   * *   * *   *   *     *   *  ** *         * 
  241 D1:B64A -  -  -  -  ;  ***   ***  ****  *   *  ***   ***    *   ***** *  ** *****  ***  
  242 D1:B64A -  -  -  -  
  243 D1:B64A -  -  -  -  ;-----------------------------------------------------------------------------
  244 D1:B64A -  -  -  -  
  245 D1:B64A -  -  -  -  i6502_load_instruction_set:
  246 D1:B64A DD 21 04 40 
              D0 -  -  -      ld  ix,JUMPTABLE
  247 D1:B64F 21 BC D9 D1     ld  hl,inst6502_instruction_set
  248 D1:B653 06 00 -  -      ld  b,0
  249 D1:B655 ED 17 -  -  _:  ld  de,(hl)
  250 D1:B657 DD 1F 00 -      ld  (ix+0),de
  251 D1:B65A 23 -  -  -      inc hl
  252 D1:B65B 23 -  -  -      inc hl
  253 D1:B65C 23 -  -  -      inc hl
  254 D1:B65D ED 32 0C -      lea ix,ix+BASETABLE_STRIDE
  255 D1:B660 10 F3 -  -      djnz -_
  256 D1:B662 C9 -  -  -      ret
  257 D1:B663 -  -  -  -  
  258 D1:B663 -  -  -  -  ;HL=Base_ez80_address, C=Numpages_in_map, B=numpages_in_space, E=starting_page
  259 D1:B663 -  -  -  -  ;Example: To map and mirror 2KB RAM at $D03800 inside first 8KB of 6502 space
  260 D1:B663 -  -  -  -  ;HL=$D03800, C=$08, B=$20, E=$00
  261 D1:B663 -  -  -  -  ;Note: B should be a power of two and evenly divisible by C.
  262 D1:B663 -  -  -  -  i6502_map_pages:
  263 D1:B663 16 0C -  -      ld  d,BASETABLE_STRIDE
  264 D1:B665 ED 5C -  -      mlt de
  265 D1:B667 DD 21 00 40 
              D0 -  -  -      ld  ix,PAGETABLE
  266 D1:B66C DD 19 -  -      add ix,de
  267 D1:B66E 78 -  -  -      ld  a,b     ;A = main counter for total number of pages in mapping space
  268 D1:B66F 11 00 01 00     ld  de,256
  269 D1:B673 E5 -  -  -      push hl
  270 D1:B674 FD E1 -  -      pop iy
  271 D1:B676 41 -  -  -  _:  ld  b,c     ;looping for number of pages to map
  272 D1:B677 DD 2F 00 -  _:  ld  (ix+0),hl
  273 D1:B67A 19 -  -  -      add hl,de                   ;next page z80
  274 D1:B67B ED 32 0C -      lea ix,ix+BASETABLE_STRIDE  ;next page entry
  275 D1:B67E 3D -  -  -      dec a
  276 D1:B67F C8 -  -  -      ret z
  277 D1:B680 10 F5 -  -      djnz -_
  278 D1:B682 ED 23 00 -      lea hl,iy+0     ;start z80 pages over again for mirroring
  279 D1:B685 18 EF -  -      jr --_
  280 D1:B687 -  -  -  -  
  281 D1:B687 -  -  -  -  
  282 D1:B687 -  -  -  -  subroutine6502_abs_split_start:
  283 D1:B687 4E -  -  -      ld  c,(hl)
  284 D1:B688 23 -  -  -      inc hl
  285 D1:B689 1C -  -  -      inc e
  286 D1:B68A 20 15 -  -      jr nz,+_
  287 D1:B68C DD 56 06 -      ld  d,(ix+REGPC+1)
  288 D1:B68F 14 -  -  -      inc d
  289 D1:B690 52 DD 1F 05     ld.s (ix+REGPC),de
  290 D1:B694 1E 0C -  -      ld  e,BASETABLE_STRIDE
  291 D1:B696 ED 5C -  -      mlt de
  292 D1:B698 21 00 40 D0     ld  hl,PAGETABLE
  293 D1:B69C 19 -  -  -      add hl,de
  294 D1:B69D ED 27 -  -      ld  hl,(hl) ;
  295 D1:B69F 1E 00 -  -      ld  e,0
  296 D1:B6A1 46 -  -  -  _:  ld  b,(hl)
  297 D1:B6A2 C9 -  -  -      ret
  298 D1:B6A3 -  -  -  -  
  299 D1:B6A3 -  -  -  -  #define PUSH_ABSXSPLIT call subroutine6502_absx_split_start
  300 D1:B6A3 -  -  -  -  #define PUSH_ABSXSPLIT_NODEP call subroutine6502_absx_ss_noDep
  301 D1:B6A3 -  -  -  -  #define PUSH_ABSYSPLIT call subroutine6502_absy_split_start
  302 D1:B6A3 -  -  -  -  #define PUSH_ABSYSPLIT_NODEP call subroutine6502_absy_ss_noDep
  303 D1:B6A3 -  -  -  -  
  304 D1:B6A3 -  -  -  -  subroutine6502_absy_split_start:
  305 D1:B6A3 DD 4E 02 -      ld  c,(ix+REGY)
  306 D1:B6A6 18 03 -  -      jr +_
  307 D1:B6A8 -  -  -  -  
  308 D1:B6A8 -  -  -  -  subroutine6502_absx_split_start:
  309 D1:B6A8 DD 4E 01 -      ld  c,(ix+REGX)
  310 D1:B6AB 7E -  -  -  _:  ld  a,(hl)
  311 D1:B6AC 23 -  -  -      inc hl
  312 D1:B6AD 1C -  -  -      inc e
  313 D1:B6AE 20 15 -  -      jr nz,+_
  314 D1:B6B0 DD 56 06 -      ld  d,(ix+REGPC+1)
  315 D1:B6B3 14 -  -  -      inc d
  316 D1:B6B4 52 DD 1F 05     ld.s (ix+REGPC),de
  317 D1:B6B8 1E 0C -  -      ld  e,BASETABLE_STRIDE
  318 D1:B6BA ED 5C -  -      mlt de
  319 D1:B6BC 21 00 40 D0     ld  hl,PAGETABLE
  320 D1:B6C0 19 -  -  -      add hl,de
  321 D1:B6C1 ED 27 -  -      ld  hl,(hl) ;
  322 D1:B6C3 1E 00 -  -      ld  e,0
  323 D1:B6C5 46 -  -  -  _:  ld  b,(hl)
  324 D1:B6C6 E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  325 D1:B6C7 E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  326 D1:B6C8 81 -  -  -          add a,c
  327 D1:B6C9 30 03 -  -          jr  nc,+_
  328 D1:B6CB FD 23 -  -          ADDCYC(1)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  329 D1:B6CD 04 -  -  -          inc b
  330 D1:B6CE 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  331 D1:B6CF 0E 0C -  -          ld  c,BASETABLE_STRIDE
  332 D1:B6D1 ED 4C -  -          mlt bc
  333 D1:B6D3 21 00 40 D0         ld  hl,PAGETABLE
  334 D1:B6D7 09 -  -  -          add hl,bc
  335 D1:B6D8 ED 27 -  -          ld  hl,(hl)
  336 D1:B6DA 06 00 -  -          ld  b,0
  337 D1:B6DC 4F -  -  -          ld  c,a
  338 D1:B6DD 09 -  -  -          add hl,bc
  339 D1:B6DE C9 -  -  -      ret
  340 D1:B6DF -  -  -  -      
  341 D1:B6DF -  -  -  -  subroutine6502_absy_ss_noDep:
  342 D1:B6DF DD 4E 02 -      ld  c,(ix+REGY)
  343 D1:B6E2 18 03 -  -      jr +_
  344 D1:B6E4 -  -  -  -  subroutine6502_absx_ss_noDep:
  345 D1:B6E4 DD 4E 01 -      ld  c,(ix+REGX)
  346 D1:B6E7 7E -  -  -  _:  ld  a,(hl)
  347 D1:B6E8 23 -  -  -      inc hl
  348 D1:B6E9 1C -  -  -      inc e
  349 D1:B6EA 20 15 -  -      jr nz,+_
  350 D1:B6EC DD 56 06 -      ld  d,(ix+REGPC+1)
  351 D1:B6EF 14 -  -  -      inc d
  352 D1:B6F0 52 DD 1F 05     ld.s (ix+REGPC),de
  353 D1:B6F4 1E 0C -  -      ld  e,BASETABLE_STRIDE
  354 D1:B6F6 ED 5C -  -      mlt de
  355 D1:B6F8 21 00 40 D0     ld  hl,PAGETABLE
  356 D1:B6FC 19 -  -  -      add hl,de
  357 D1:B6FD ED 27 -  -      ld  hl,(hl) ;
  358 D1:B6FF 1E 00 -  -      ld  e,0
  359 D1:B701 46 -  -  -  _:  ld  b,(hl)
  360 D1:B702 E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  361 D1:B703 E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  362 D1:B704 81 -  -  -          add a,c
  363 D1:B705 30 01 -  -          jr  nc,+_
  364 D1:B707 04 -  -  -          inc b
  365 D1:B708 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  366 D1:B709 0E 0C -  -          ld  c,BASETABLE_STRIDE
  367 D1:B70B ED 4C -  -          mlt bc
  368 D1:B70D 21 00 40 D0         ld  hl,PAGETABLE
  369 D1:B711 09 -  -  -          add hl,bc
  370 D1:B712 ED 27 -  -          ld  hl,(hl)
  371 D1:B714 06 00 -  -          ld  b,0
  372 D1:B716 4F -  -  -          ld  c,a
  373 D1:B717 09 -  -  -          add hl,bc
  374 D1:B718 C9 -  -  -      ret
  375 D1:B719 -  -  -  -  
  376 D1:B719 -  -  -  -  
  377 D1:B719 -  -  -  -  
  378 D1:B719 -  -  -  -  
  379 D1:B719 -  -  -  -  
  380 D1:B719 -  -  -  -  
  381 D1:B719 -  -  -  -  
  382 D1:B719 -  -  -  -  subroutine6502_adc_combined_end:
  383 D1:B719 DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  384 D1:B71C 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  385 D1:B71D DD 7E 00 -      ld  a,(ix+REGA)
  386 D1:B720 89 -  -  -      adc a,c
  387 D1:B721 DD 77 00 -      ld  (ix+REGA),a
  388 D1:B724 DD 46 04 CB 
              B0 E2 2F B7 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  389 D1:B746 C3 DF B5 D1     jp i6502NextLoad
  390 D1:B74A -  -  -  -  
  391 D1:B74A -  -  -  -  subroutine6502_sbc_combined_end:
  392 D1:B74A DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  393 D1:B74D 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  394 D1:B74E DD 7E 00 -      ld  a,(ix+REGA)
  395 D1:B751 3F -  -  -      ccf
  396 D1:B752 99 -  -  -      sbc a,c
  397 D1:B753 3F -  -  -      ccf
  398 D1:B754 DD 77 00 -      ld  (ix+REGA),a
  399 D1:B757 DD 46 04 CB 
              B0 E2 62 B7 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  400 D1:B779 C3 DF B5 D1     jp i6502NextLoad
  401 D1:B77D -  -  -  -  
  402 D1:B77D -  -  -  -  subroutine6502_cmp_combined_end:
  403 D1:B77D DD 7E 00 -      ld  a,(ix+REGA)
  404 D1:B780 90 -  -  -      sub a,b
  405 D1:B781 3F -  -  -      ccf     ;because the 6502 is strange like that.
  406 D1:B782 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  407 D1:B79C C3 DF B5 D1     jp i6502NextLoad
  408 D1:B7A0 -  -  -  -  
  409 D1:B7A0 -  -  -  -  subroutine6502_take_branch:
  410 D1:B7A0 FD 23 -  -      ADDCYC(1)
  411 D1:B7A2 7E -  -  -      ld  a,(hl)  ;offset byte
  412 D1:B7A3 6F -  -  -      ld  L,a
  413 D1:B7A4 87 -  -  -      add a,a
  414 D1:B7A5 9F -  -  -      sbc a,a
  415 D1:B7A6 67 -  -  -      ld  H,a     ;sign-extending offset byte
  416 D1:B7A7 DD 56 06 -      ld  d,(ix+REGPC+1)
  417 D1:B7AA 13 -  -  -      inc de
  418 D1:B7AB 52 19 -  -      add.s hl,de
  419 D1:B7AD 7C -  -  -      ld  a,h
  420 D1:B7AE BA -  -  -      cp  d       ;is high byte the same?
  421 D1:B7AF 28 02 -  -      jr  z,+_    ;if so, do not add another clock
  422 D1:B7B1 FD 23 -  -      ADDCYC(1)
  423 D1:B7B3 52 DD 2F 05 _:  ld.s (ix+REGPC),hl
  424 D1:B7B7 C3 C9 B5 D1     jp  i6502FirstLoad
  425 D1:B7BB -  -  -  -  
  426 D1:B7BB -  -  -  -  
  427 D1:B7BB -  -  -  -  ;-----------------------------------------------------------------------------
  428 D1:B7BB -  -  -  -  
  429 D1:B7BB -  -  -  -  ; *** **  *  *** ***** ***  *   *  *** ***** *** ***  **  *     ***  ***** *****                                                
  430 D1:B7BB -  -  -  -  ;  *  **  * *      *   *  * *   * *      *    * *   * **  *    *     *       *                   
  431 D1:B7BB -  -  -  -  ;  *  * * *  ***   *   ***  *   * *      *    * *   * * * *     ***  ***     *                          
  432 D1:B7BB -  -  -  -  ;  *  *  **     *  *   *  * *   * *      *    * *   * *  **        * *       *                   
  433 D1:B7BB -  -  -  -  ; *** *  **  ***   *   *  *  ***   ***   *   *** ***  *  **     ***  *****   *                                 
  434 D1:B7BB -  -  -  -  
  435 D1:B7BB -  -  -  -  ;-----------------------------------------------------------------------------
  436 D1:B7BB -  -  -  -  
  437 D1:B7BB -  -  -  -  ;-----------------------------------------------------------------------------
  438 D1:B7BB -  -  -  -  ;-----------------------------------------------------------------------------
  439 D1:B7BB -  -  -  -  ;-----------------------------------------------------------------------------
  440 D1:B7BB -  -  -  -  ;Instructions by type: Transfer Instructions
  441 D1:B7BB -  -  -  -  ;LDA - Load Accumulator with Memory
  442 D1:B7BB -  -  -  -  ;    M -> A
  443 D1:B7BB -  -  -  -  ;    N	Z	C	I	D	V
  444 D1:B7BB -  -  -  -  ;    +	+	-	-	-	-
  445 D1:B7BB -  -  -  -  
  446 D1:B7BB -  -  -  -  ;addressing	assembler	opc	bytes	cycles
  447 D1:B7BB -  -  -  -  ;immediate	LDA #oper	A9	2	2
  448 D1:B7BB -  -  -  -  inst6502_lda_imm:
  449 D1:B7BB 7E -  -  -      ld  a,(hl)
  450 D1:B7BC DD 77 00 -      ld  (ix+REGA),a
  451 D1:B7BF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  452 D1:B7D3 ED 33 02 -      ADDCYC(2)
  453 D1:B7D6 C3 DF B5 D1     jp i6502NextLoad
  454 D1:B7DA -  -  -  -  
  455 D1:B7DA -  -  -  -  ;zeropage	LDA oper	A5	2	3
  456 D1:B7DA -  -  -  -  inst6502_lda_zp:
  457 D1:B7DA 7E -  -  -      ld  a,(hl)
  458 D1:B7DB 01 00 38 D0     ld  bc,ZEROPAGE
  459 D1:B7DF 81 -  -  -      add a,c
  460 D1:B7E0 4F -  -  -      ld  c,a
  461 D1:B7E1 0A -  -  -      ld  a,(bc)
  462 D1:B7E2 DD 77 00 -      ld  (ix+REGA),a
  463 D1:B7E5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  464 D1:B7F9 ED 33 03 -      ADDCYC(3)
  465 D1:B7FC C3 DF B5 D1     jp i6502NextLoad
  466 D1:B800 -  -  -  -  
  467 D1:B800 -  -  -  -  ;zeropage,X	LDA oper,X	B5	2	4 
  468 D1:B800 -  -  -  -  inst6502_lda_zpx:
  469 D1:B800 7E -  -  -      ld  a,(hl)
  470 D1:B801 01 00 38 D0     ld  bc,ZEROPAGE
  471 D1:B805 81 -  -  -      add a,c
  472 D1:B806 DD 86 01 -      add a,(ix+REGX)
  473 D1:B809 4F -  -  -      ld  c,a
  474 D1:B80A 0A -  -  -      ld  a,(bc)
  475 D1:B80B DD 77 00 -      ld  (ix+REGA),a
  476 D1:B80E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  477 D1:B822 ED 33 04 -      ADDCYC(4)
  478 D1:B825 C3 DF B5 D1     jp i6502NextLoad
  479 D1:B829 -  -  -  -  
  480 D1:B829 -  -  -  -  ;absolute	LDA oper	AD	3	4
  481 D1:B829 -  -  -  -  inst6502_lda_abs:
  482 D1:B829 CD 87 B6 D1     call subroutine6502_abs_split_start
  483 D1:B82D E5 -  -  -      push hl
  484 D1:B82E 50 -  -  -          ld  d,b
  485 D1:B82F 79 -  -  -          ld  a,c
  486 D1:B830 0E 0C -  -          ld  c,BASETABLE_STRIDE
  487 D1:B832 ED 4C -  -          mlt bc
  488 D1:B834 21 00 40 D0         ld  hl,PAGETABLE
  489 D1:B838 09 -  -  -          add hl,bc
  490 D1:B839 ED 27 -  -          ld  hl,(hl)
  491 D1:B83B 06 00 -  -          ld  b,0
  492 D1:B83D 4F -  -  -          ld  c,a
  493 D1:B83E 09 -  -  -          add hl,bc   ;full address
  494 D1:B83F CD 40 AE D1         READ_ACCESS
  495 D1:B843 DD 77 00 -          ld (ix+REGA),a
  496 D1:B846 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  497 D1:B85A ED 33 04 -          ADDCYC(4)
  498 D1:B85D E1 -  -  -      pop hl
  499 D1:B85E C3 DF B5 D1     jp i6502NextLoad
  500 D1:B862 -  -  -  -  
  501 D1:B862 -  -  -  -  ;absolute,X	LDA oper,X	BD	3	4* 
  502 D1:B862 -  -  -  -  inst6502_lda_absx:
  503 D1:B862 ED 33 04 -      ADDCYC(4)
  504 D1:B865 CD A8 B6 D1     PUSH_ABSXSPLIT
  505 D1:B869 CD 40 AE D1         READ_ACCESS
  506 D1:B86D DD 77 00 -          ld (ix+REGA),a
  507 D1:B870 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  508 D1:B884 E1 -  -  -      pop hl
  509 D1:B885 C3 DF B5 D1     jp i6502NextLoad
  510 D1:B889 -  -  -  -  
  511 D1:B889 -  -  -  -  ;absolute,Y	LDA oper,Y	B9	3	4* 
  512 D1:B889 -  -  -  -  inst6502_lda_absy:
  513 D1:B889 ED 33 04 -      ADDCYC(4)
  514 D1:B88C CD A3 B6 D1     PUSH_ABSYSPLIT
  515 D1:B890 CD 40 AE D1         READ_ACCESS
  516 D1:B894 DD 77 00 -          ld (ix+REGA),a
  517 D1:B897 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  518 D1:B8AB E1 -  -  -      pop hl
  519 D1:B8AC C3 DF B5 D1     jp i6502NextLoad
  520 D1:B8B0 -  -  -  -  
  521 D1:B8B0 -  -  -  -  ;(indirect,X)	LDA (oper,X)	A1	2	6
  522 D1:B8B0 -  -  -  -  inst6502_lda_indx:
  523 D1:B8B0 E5 -  -  -      push hl
  524 D1:B8B1 7E -  -  -          ld  a,(hl)
  525 D1:B8B2 21 00 38 D0         ld  hl,ZEROPAGE
  526 D1:B8B6 85 -  -  -          add a,L
  527 D1:B8B7 DD 86 01 -          add a,(ix+REGX)
  528 D1:B8BA 6F -  -  -          ld  L,a
  529 D1:B8BB 7E -  -  -          ld  a,(hl)
  530 D1:B8BC 2C -  -  -          inc L
  531 D1:B8BD 56 -  -  -          ld  d,(hl)
  532 D1:B8BE 42 -  -  -          ld  b,d
  533 D1:B8BF 0E 0C -  -          ld  c,BASETABLE_STRIDE
  534 D1:B8C1 ED 4C -  -          mlt bc
  535 D1:B8C3 21 00 40 D0         ld  hl,PAGETABLE
  536 D1:B8C7 09 -  -  -          add hl,bc
  537 D1:B8C8 ED 27 -  -          ld  hl,(hl)
  538 D1:B8CA 06 00 -  -          ld  b,0
  539 D1:B8CC 4F -  -  -          ld  c,a
  540 D1:B8CD 09 -  -  -          add hl,bc
  541 D1:B8CE CD 40 AE D1         READ_ACCESS
  542 D1:B8D2 DD 77 00 -          ld (ix+REGA),a
  543 D1:B8D5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  544 D1:B8E9 ED 33 06 -          ADDCYC(6)
  545 D1:B8EC E1 -  -  -      pop hl
  546 D1:B8ED C3 DF B5 D1     jp i6502NextLoad
  547 D1:B8F1 -  -  -  -  
  548 D1:B8F1 -  -  -  -  ;(indirect),Y	LDA (oper),Y	B1	2	5*
  549 D1:B8F1 -  -  -  -  inst6502_lda_indy:
  550 D1:B8F1 E5 -  -  -      push hl
  551 D1:B8F2 7E -  -  -          ld  a,(hl)
  552 D1:B8F3 21 00 38 D0         ld  hl,ZEROPAGE
  553 D1:B8F7 85 -  -  -          add a,L
  554 D1:B8F8 6F -  -  -          ld  L,a
  555 D1:B8F9 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  556 D1:B8FA 2C -  -  -          inc L
  557 D1:B8FB DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  558 D1:B8FE 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  559 D1:B8FF 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  560 D1:B901 FD 23 -  -          ADDCYC(1)
  561 D1:B903 24 -  -  -          inc h
  562 D1:B904 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  563 D1:B905 2E 0C -  -          ld  L,BASETABLE_STRIDE
  564 D1:B907 ED 6C -  -          mlt hl          ;23.
  565 D1:B909 01 00 40 D0         ld  bc,PAGETABLE
  566 D1:B90D 09 -  -  -          add hl,bc
  567 D1:B90E ED 27 -  -          ld  hl,(hl)     ;address get.
  568 D1:B910 01 00 00 00         ld  bc,0
  569 D1:B914 4F -  -  -          ld  c,a
  570 D1:B915 09 -  -  -          add hl,bc       ;Full address get.
  571 D1:B916 CD 40 AE D1         READ_ACCESS
  572 D1:B91A DD 77 00 -          ld  (ix+REGA),a
  573 D1:B91D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  574 D1:B931 ED 33 05 -          ADDCYC(5)
  575 D1:B934 E1 -  -  -      pop hl
  576 D1:B935 C3 DF B5 D1     jp i6502NextLoad
  577 D1:B939 -  -  -  -  
  578 D1:B939 -  -  -  -  ;-----------------------------------------------------------------------------
  579 D1:B939 -  -  -  -  ;LDX - Load Index X with Memory
  580 D1:B939 -  -  -  -  ;    M -> X
  581 D1:B939 -  -  -  -  ;    N	Z	C	I	D	V
  582 D1:B939 -  -  -  -  ;    +	+	-	-	-	-
  583 D1:B939 -  -  -  -  
  584 D1:B939 -  -  -  -  ;immediate	LDX #oper	A2	2	2  
  585 D1:B939 -  -  -  -  inst6502_ldx_imm:
  586 D1:B939 7E -  -  -      ld  a,(hl)
  587 D1:B93A DD 77 01 -      ld  (ix+REGX),a
  588 D1:B93D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  589 D1:B951 ED 33 02 -      ADDCYC(2)
  590 D1:B954 C3 DF B5 D1     jp i6502NextLoad
  591 D1:B958 -  -  -  -  
  592 D1:B958 -  -  -  -  ;zeropage	LDX oper	A6	2	3 
  593 D1:B958 -  -  -  -  inst6502_ldx_zp:
  594 D1:B958 7E -  -  -      ld  a,(hl)
  595 D1:B959 01 00 38 D0     ld  bc,ZEROPAGE
  596 D1:B95D 81 -  -  -      add a,c
  597 D1:B95E 4F -  -  -      ld  c,a
  598 D1:B95F 0A -  -  -      ld  a,(bc)
  599 D1:B960 DD 77 01 -      ld  (ix+REGX),a
  600 D1:B963 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  601 D1:B977 ED 33 03 -      ADDCYC(3)
  602 D1:B97A C3 DF B5 D1     jp i6502NextLoad
  603 D1:B97E -  -  -  -  
  604 D1:B97E -  -  -  -  ;zeropage,Y	LDX oper,Y	B6	2	4  
  605 D1:B97E -  -  -  -  inst6502_ldx_zpy:
  606 D1:B97E 7E -  -  -      ld  a,(hl)
  607 D1:B97F 01 00 38 D0     ld  bc,ZEROPAGE
  608 D1:B983 81 -  -  -      add a,c
  609 D1:B984 DD 86 02 -      add a,(ix+REGY)
  610 D1:B987 4F -  -  -      ld  c,a
  611 D1:B988 0A -  -  -      ld  a,(bc)
  612 D1:B989 DD 77 01 -      ld  (ix+REGX),a
  613 D1:B98C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  614 D1:B9A0 ED 33 04 -      ADDCYC(4)
  615 D1:B9A3 C3 DF B5 D1     jp i6502NextLoad
  616 D1:B9A7 -  -  -  -  
  617 D1:B9A7 -  -  -  -  ;absolute	LDX oper	AE	3	4  
  618 D1:B9A7 -  -  -  -  inst6502_ldx_abs:
  619 D1:B9A7 CD 87 B6 D1     call subroutine6502_abs_split_start
  620 D1:B9AB E5 -  -  -      push hl
  621 D1:B9AC 50 -  -  -          ld  d,b
  622 D1:B9AD 79 -  -  -          ld  a,c
  623 D1:B9AE 0E 0C -  -          ld  c,BASETABLE_STRIDE
  624 D1:B9B0 ED 4C -  -          mlt bc
  625 D1:B9B2 21 00 40 D0         ld  hl,PAGETABLE
  626 D1:B9B6 09 -  -  -          add hl,bc
  627 D1:B9B7 ED 27 -  -          ld  hl,(hl)
  628 D1:B9B9 06 00 -  -          ld  b,0
  629 D1:B9BB 4F -  -  -          ld  c,a
  630 D1:B9BC 09 -  -  -          add hl,bc   ;full address
  631 D1:B9BD CD 40 AE D1         READ_ACCESS
  632 D1:B9C1 DD 77 01 -          ld (ix+REGX),a
  633 D1:B9C4 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  634 D1:B9D8 ED 33 04 -          ADDCYC(4)
  635 D1:B9DB E1 -  -  -      pop hl
  636 D1:B9DC C3 DF B5 D1     jp i6502NextLoad
  637 D1:B9E0 -  -  -  -  
  638 D1:B9E0 -  -  -  -  ;absolute,Y	LDX oper,Y	BE	3	4* 
  639 D1:B9E0 -  -  -  -  inst6502_ldx_absy:
  640 D1:B9E0 ED 33 04 -      ADDCYC(4)
  641 D1:B9E3 CD A3 B6 D1     PUSH_ABSYSPLIT
  642 D1:B9E7 CD 40 AE D1         READ_ACCESS
  643 D1:B9EB DD 77 01 -          ld (ix+REGX),a
  644 D1:B9EE DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  645 D1:BA02 E1 -  -  -      pop hl
  646 D1:BA03 C3 DF B5 D1     jp i6502NextLoad
  647 D1:BA07 -  -  -  -  
  648 D1:BA07 -  -  -  -  ;-----------------------------------------------------------------------------
  649 D1:BA07 -  -  -  -  ;LDY -  Load Index Y with Memory
  650 D1:BA07 -  -  -  -  ;    M -> Y
  651 D1:BA07 -  -  -  -  ;    N	Z	C	I	D	V
  652 D1:BA07 -  -  -  -  ;    +	+	-	-	-	-
  653 D1:BA07 -  -  -  -  
  654 D1:BA07 -  -  -  -  ;immediate	LDY #oper	A0	2	2  
  655 D1:BA07 -  -  -  -  inst6502_ldy_imm:
  656 D1:BA07 7E -  -  -      ld  a,(hl)
  657 D1:BA08 DD 77 02 -      ld  (ix+REGY),a
  658 D1:BA0B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  659 D1:BA1F ED 33 02 -      ADDCYC(2)
  660 D1:BA22 C3 DF B5 D1     jp i6502NextLoad
  661 D1:BA26 -  -  -  -  
  662 D1:BA26 -  -  -  -  ;zeropage	LDY oper	A4	2	3  
  663 D1:BA26 -  -  -  -  inst6502_ldy_zp:
  664 D1:BA26 7E -  -  -      ld  a,(hl)
  665 D1:BA27 01 00 38 D0     ld  bc,ZEROPAGE
  666 D1:BA2B 81 -  -  -      add a,c
  667 D1:BA2C 4F -  -  -      ld  c,a
  668 D1:BA2D 0A -  -  -      ld  a,(bc)
  669 D1:BA2E DD 77 02 -      ld  (ix+REGY),a
  670 D1:BA31 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  671 D1:BA45 ED 33 03 -      ADDCYC(3)
  672 D1:BA48 C3 DF B5 D1     jp i6502NextLoad
  673 D1:BA4C -  -  -  -  
  674 D1:BA4C -  -  -  -  ;zeropage,X	LDY oper,X	B4	2	4  
  675 D1:BA4C -  -  -  -  inst6502_ldy_zpx:
  676 D1:BA4C 7E -  -  -      ld  a,(hl)
  677 D1:BA4D 01 00 38 D0     ld  bc,ZEROPAGE
  678 D1:BA51 81 -  -  -      add a,c
  679 D1:BA52 DD 86 01 -      add a,(ix+REGX)
  680 D1:BA55 4F -  -  -      ld  c,a
  681 D1:BA56 0A -  -  -      ld  a,(bc)
  682 D1:BA57 DD 77 02 -      ld  (ix+REGY),a
  683 D1:BA5A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  684 D1:BA6E ED 33 04 -      ADDCYC(4)
  685 D1:BA71 C3 DF B5 D1     jp i6502NextLoad
  686 D1:BA75 -  -  -  -  
  687 D1:BA75 -  -  -  -  ;absolute	LDY oper	AC	3	4  
  688 D1:BA75 -  -  -  -  inst6502_ldy_abs:
  689 D1:BA75 CD 87 B6 D1     call subroutine6502_abs_split_start
  690 D1:BA79 E5 -  -  -      push hl
  691 D1:BA7A 50 -  -  -          ld  d,b
  692 D1:BA7B 79 -  -  -          ld  a,c
  693 D1:BA7C 0E 0C -  -          ld  c,BASETABLE_STRIDE
  694 D1:BA7E ED 4C -  -          mlt bc
  695 D1:BA80 21 00 40 D0         ld  hl,PAGETABLE
  696 D1:BA84 09 -  -  -          add hl,bc
  697 D1:BA85 ED 27 -  -          ld  hl,(hl)
  698 D1:BA87 06 00 -  -          ld  b,0
  699 D1:BA89 4F -  -  -          ld  c,a
  700 D1:BA8A 09 -  -  -          add hl,bc   ;full address
  701 D1:BA8B CD 40 AE D1         READ_ACCESS
  702 D1:BA8F DD 77 02 -          ld (ix+REGY),a
  703 D1:BA92 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  704 D1:BAA6 ED 33 04 -          ADDCYC(4)
  705 D1:BAA9 E1 -  -  -      pop hl
  706 D1:BAAA C3 DF B5 D1     jp i6502NextLoad
  707 D1:BAAE -  -  -  -  
  708 D1:BAAE -  -  -  -  ;absolute,X	LDY oper,X	BC	3	4* 
  709 D1:BAAE -  -  -  -  inst6502_ldy_absx:
  710 D1:BAAE ED 33 04 -      ADDCYC(4)
  711 D1:BAB1 CD A8 B6 D1     PUSH_ABSXSPLIT
  712 D1:BAB5 CD 40 AE D1         READ_ACCESS
  713 D1:BAB9 DD 77 02 -          ld (ix+REGY),a
  714 D1:BABC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  715 D1:BAD0 E1 -  -  -      pop hl
  716 D1:BAD1 C3 DF B5 D1     jp i6502NextLoad
  717 D1:BAD5 -  -  -  -  
  718 D1:BAD5 -  -  -  -  ;-----------------------------------------------------------------------------
  719 D1:BAD5 -  -  -  -  ;STA - Store Accumulator in Memory
  720 D1:BAD5 -  -  -  -  ;    A -> M
  721 D1:BAD5 -  -  -  -  ;    N	Z	C	I	D	V
  722 D1:BAD5 -  -  -  -  ;    -	-	-	-	-	-
  723 D1:BAD5 -  -  -  -  
  724 D1:BAD5 -  -  -  -  ;zeropage	STA oper	85	2	3  
  725 D1:BAD5 -  -  -  -  inst6502_sta_zp:
  726 D1:BAD5 7E -  -  -      ld  a,(hl)
  727 D1:BAD6 01 00 38 D0     ld  bc,ZEROPAGE
  728 D1:BADA 81 -  -  -      add a,c
  729 D1:BADB 4F -  -  -      ld  c,a
  730 D1:BADC DD 7E 00 -      ld  a,(ix+REGA)
  731 D1:BADF 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  732 D1:BAE0 ED 33 03 -      ADDCYC(3)
  733 D1:BAE3 C3 DF B5 D1     jp i6502NextLoad
  734 D1:BAE7 -  -  -  -  
  735 D1:BAE7 -  -  -  -  ;zeropage,X	STA oper,X	95	2	4  
  736 D1:BAE7 -  -  -  -  inst6502_sta_zpx:
  737 D1:BAE7 7E -  -  -      ld  a,(hl)
  738 D1:BAE8 01 00 38 D0     ld  bc,ZEROPAGE
  739 D1:BAEC 81 -  -  -      add a,c
  740 D1:BAED DD 86 01 -      add a,(ix+REGX)
  741 D1:BAF0 4F -  -  -      ld  c,a
  742 D1:BAF1 DD 7E 00 -      ld  a,(ix+REGA)
  743 D1:BAF4 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  744 D1:BAF5 ED 33 04 -      ADDCYC(4)
  745 D1:BAF8 C3 DF B5 D1     jp i6502NextLoad
  746 D1:BAFC -  -  -  -  
  747 D1:BAFC -  -  -  -  ;absolute	STA oper	8D	3	4
  748 D1:BAFC -  -  -  -  inst6502_sta_abs:
  749 D1:BAFC CD 87 B6 D1     call subroutine6502_abs_split_start
  750 D1:BB00 E5 -  -  -      push hl
  751 D1:BB01 50 -  -  -          ld  d,b
  752 D1:BB02 79 -  -  -          ld  a,c
  753 D1:BB03 0E 0C -  -          ld  c,BASETABLE_STRIDE
  754 D1:BB05 ED 4C -  -          mlt bc
  755 D1:BB07 21 00 40 D0         ld  hl,PAGETABLE
  756 D1:BB0B 09 -  -  -          add hl,bc
  757 D1:BB0C ED 27 -  -          ld  hl,(hl)
  758 D1:BB0E 06 00 -  -          ld  b,0
  759 D1:BB10 4F -  -  -          ld  c,a
  760 D1:BB11 09 -  -  -          add hl,bc   ;full address
  761 D1:BB12 DD 46 00 -          ld  b,(ix+REGA)
  762 D1:BB15 CD 63 AE D1         WRITE_ACCESS
  763 D1:BB19 ED 33 04 -          ADDCYC(4)
  764 D1:BB1C E1 -  -  -      pop hl
  765 D1:BB1D C3 DF B5 D1     jp i6502NextLoad
  766 D1:BB21 -  -  -  -  
  767 D1:BB21 -  -  -  -  ;absolute,X	STA oper,X	9D	3	5  
  768 D1:BB21 -  -  -  -  inst6502_sta_absx:
  769 D1:BB21 ED 33 05 -      ADDCYC(5)
  770 D1:BB24 CD E4 B6 D1     PUSH_ABSXSPLIT_NODEP
  771 D1:BB28 DD 46 00 -          ld  b,(ix+REGA)
  772 D1:BB2B CD 63 AE D1         WRITE_ACCESS
  773 D1:BB2F E1 -  -  -      pop hl
  774 D1:BB30 C3 DF B5 D1     jp i6502NextLoad
  775 D1:BB34 -  -  -  -  
  776 D1:BB34 -  -  -  -  ;absolute,Y	STA oper,Y	99	3	5  
  777 D1:BB34 -  -  -  -  inst6502_sta_absy:
  778 D1:BB34 ED 33 05 -      ADDCYC(5)
  779 D1:BB37 CD DF B6 D1     PUSH_ABSYSPLIT_NODEP
  780 D1:BB3B DD 46 00 -          ld  b,(ix+REGA)
  781 D1:BB3E CD 63 AE D1         WRITE_ACCESS
  782 D1:BB42 E1 -  -  -      pop hl
  783 D1:BB43 C3 DF B5 D1     jp i6502NextLoad
  784 D1:BB47 -  -  -  -  
  785 D1:BB47 -  -  -  -  ;(indirect,X)	STA (oper,X)	81	2	6  
  786 D1:BB47 -  -  -  -  inst6502_sta_indx:
  787 D1:BB47 E5 -  -  -      push hl
  788 D1:BB48 7E -  -  -          ld  a,(hl)
  789 D1:BB49 21 00 38 D0         ld  hl,ZEROPAGE
  790 D1:BB4D 85 -  -  -          add a,L
  791 D1:BB4E DD 86 01 -          add a,(ix+REGX)
  792 D1:BB51 6F -  -  -          ld  L,a
  793 D1:BB52 7E -  -  -          ld  a,(hl)
  794 D1:BB53 2C -  -  -          inc L
  795 D1:BB54 56 -  -  -          ld  d,(hl)
  796 D1:BB55 42 -  -  -          ld  b,d
  797 D1:BB56 0E 0C -  -          ld  c,BASETABLE_STRIDE
  798 D1:BB58 ED 4C -  -          mlt bc
  799 D1:BB5A 21 00 40 D0         ld  hl,PAGETABLE
  800 D1:BB5E 09 -  -  -          add hl,bc
  801 D1:BB5F ED 27 -  -          ld  hl,(hl)
  802 D1:BB61 06 00 -  -          ld  b,0
  803 D1:BB63 4F -  -  -          ld  c,a
  804 D1:BB64 09 -  -  -          add hl,bc
  805 D1:BB65 DD 46 00 -          ld  b,(ix+REGA)
  806 D1:BB68 CD 63 AE D1         WRITE_ACCESS
  807 D1:BB6C ED 33 06 -          ADDCYC(6)
  808 D1:BB6F E1 -  -  -      pop hl
  809 D1:BB70 C3 DF B5 D1     jp i6502NextLoad
  810 D1:BB74 -  -  -  -  
  811 D1:BB74 -  -  -  -  ;(indirect),Y	STA (oper),Y	91	2	6  
  812 D1:BB74 -  -  -  -  inst6502_sta_indy:
  813 D1:BB74 E5 -  -  -      push hl
  814 D1:BB75 7E -  -  -          ld  a,(hl)
  815 D1:BB76 21 00 38 D0         ld  hl,ZEROPAGE
  816 D1:BB7A 85 -  -  -          add a,L
  817 D1:BB7B 6F -  -  -          ld  L,a
  818 D1:BB7C 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  819 D1:BB7D 2C -  -  -          inc L
  820 D1:BB7E DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  821 D1:BB81 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  822 D1:BB82 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  823 D1:BB84 24 -  -  -          inc h
  824 D1:BB85 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  825 D1:BB86 2E 0C -  -          ld  L,BASETABLE_STRIDE
  826 D1:BB88 ED 6C -  -          mlt hl          ;23.
  827 D1:BB8A 01 00 40 D0         ld  bc,PAGETABLE
  828 D1:BB8E 09 -  -  -          add hl,bc
  829 D1:BB8F ED 27 -  -          ld  hl,(hl)     ;address get.
  830 D1:BB91 01 00 00 00         ld  bc,0
  831 D1:BB95 4F -  -  -          ld  c,a
  832 D1:BB96 09 -  -  -          add hl,bc       ;Full address get.
  833 D1:BB97 DD 46 00 -          ld  b,(ix+REGA)
  834 D1:BB9A CD 63 AE D1         WRITE_ACCESS
  835 D1:BB9E ED 33 06 -          ADDCYC(6)
  836 D1:BBA1 E1 -  -  -      pop hl
  837 D1:BBA2 C3 DF B5 D1     jp i6502NextLoad
  838 D1:BBA6 -  -  -  -  
  839 D1:BBA6 -  -  -  -  ;-----------------------------------------------------------------------------
  840 D1:BBA6 -  -  -  -  ;STX - Store Index X in Memory
  841 D1:BBA6 -  -  -  -  ;    X -> M
  842 D1:BBA6 -  -  -  -  ;    N	Z	C	I	D	V
  843 D1:BBA6 -  -  -  -  ;    -	-	-	-	-	-
  844 D1:BBA6 -  -  -  -  
  845 D1:BBA6 -  -  -  -  ;zeropage	STX oper	86	2	3  
  846 D1:BBA6 -  -  -  -  inst6502_stx_zp:
  847 D1:BBA6 7E -  -  -      ld  a,(hl)
  848 D1:BBA7 01 00 38 D0     ld  bc,ZEROPAGE
  849 D1:BBAB 81 -  -  -      add a,c
  850 D1:BBAC 4F -  -  -      ld  c,a
  851 D1:BBAD DD 7E 01 -      ld  a,(ix+REGX)
  852 D1:BBB0 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  853 D1:BBB1 ED 33 03 -      ADDCYC(3)
  854 D1:BBB4 C3 DF B5 D1     jp i6502NextLoad
  855 D1:BBB8 -  -  -  -  
  856 D1:BBB8 -  -  -  -  ;zeropage,Y	STX oper,Y	96	2	4  
  857 D1:BBB8 -  -  -  -  inst6502_stx_zpy:
  858 D1:BBB8 7E -  -  -      ld  a,(hl)
  859 D1:BBB9 01 00 38 D0     ld  bc,ZEROPAGE
  860 D1:BBBD 81 -  -  -      add a,c
  861 D1:BBBE DD 86 02 -      add a,(ix+REGY)
  862 D1:BBC1 4F -  -  -      ld  c,a
  863 D1:BBC2 DD 7E 01 -      ld  a,(ix+REGX)
  864 D1:BBC5 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  865 D1:BBC6 ED 33 04 -      ADDCYC(4)
  866 D1:BBC9 C3 DF B5 D1     jp i6502NextLoad
  867 D1:BBCD -  -  -  -  
  868 D1:BBCD -  -  -  -  ;absolute	STX oper	8E	3	4  
  869 D1:BBCD -  -  -  -  inst6502_stx_abs:
  870 D1:BBCD CD 87 B6 D1     call subroutine6502_abs_split_start
  871 D1:BBD1 E5 -  -  -      push hl
  872 D1:BBD2 50 -  -  -          ld  d,b
  873 D1:BBD3 79 -  -  -          ld  a,c
  874 D1:BBD4 0E 0C -  -          ld  c,BASETABLE_STRIDE
  875 D1:BBD6 ED 4C -  -          mlt bc
  876 D1:BBD8 21 00 40 D0         ld  hl,PAGETABLE
  877 D1:BBDC 09 -  -  -          add hl,bc
  878 D1:BBDD ED 27 -  -          ld  hl,(hl)
  879 D1:BBDF 06 00 -  -          ld  b,0
  880 D1:BBE1 4F -  -  -          ld  c,a
  881 D1:BBE2 09 -  -  -          add hl,bc   ;full address
  882 D1:BBE3 DD 46 01 -          ld  b,(ix+REGX)
  883 D1:BBE6 CD 63 AE D1         WRITE_ACCESS
  884 D1:BBEA ED 33 04 -          ADDCYC(4)
  885 D1:BBED E1 -  -  -      pop hl
  886 D1:BBEE C3 DF B5 D1     jp i6502NextLoad
  887 D1:BBF2 -  -  -  -  
  888 D1:BBF2 -  -  -  -  ;-----------------------------------------------------------------------------
  889 D1:BBF2 -  -  -  -  ;STY - Store Index Y in Memory
  890 D1:BBF2 -  -  -  -  ;    Y -> M
  891 D1:BBF2 -  -  -  -  ;    N	Z	C	I	D	V
  892 D1:BBF2 -  -  -  -  ;    -	-	-	-	-	-
  893 D1:BBF2 -  -  -  -  
  894 D1:BBF2 -  -  -  -  ;zeropage	STY oper	84	2	3  
  895 D1:BBF2 -  -  -  -  inst6502_sty_zp:
  896 D1:BBF2 7E -  -  -      ld  a,(hl)
  897 D1:BBF3 01 00 38 D0     ld  bc,ZEROPAGE
  898 D1:BBF7 81 -  -  -      add a,c
  899 D1:BBF8 4F -  -  -      ld  c,a
  900 D1:BBF9 DD 7E 02 -      ld  a,(ix+REGY)
  901 D1:BBFC 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  902 D1:BBFD ED 33 03 -      ADDCYC(3)
  903 D1:BC00 C3 DF B5 D1     jp i6502NextLoad
  904 D1:BC04 -  -  -  -  
  905 D1:BC04 -  -  -  -  ;zeropage,X	STY oper,X	94	2	4  
  906 D1:BC04 -  -  -  -  inst6502_sty_zpx:
  907 D1:BC04 7E -  -  -      ld  a,(hl)
  908 D1:BC05 01 00 38 D0     ld  bc,ZEROPAGE
  909 D1:BC09 81 -  -  -      add a,c
  910 D1:BC0A DD 86 01 -      add a,(ix+REGX)
  911 D1:BC0D 4F -  -  -      ld  c,a
  912 D1:BC0E DD 7E 02 -      ld  a,(ix+REGY)
  913 D1:BC11 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  914 D1:BC12 ED 33 04 -      ADDCYC(4)
  915 D1:BC15 C3 DF B5 D1     jp i6502NextLoad
  916 D1:BC19 -  -  -  -  
  917 D1:BC19 -  -  -  -  ;absolute	STY oper	8C	3	4  
  918 D1:BC19 -  -  -  -  inst6502_sty_abs:
  919 D1:BC19 CD 87 B6 D1     call subroutine6502_abs_split_start
  920 D1:BC1D E5 -  -  -      push hl
  921 D1:BC1E 50 -  -  -          ld  d,b
  922 D1:BC1F 79 -  -  -          ld  a,c
  923 D1:BC20 0E 0C -  -          ld  c,BASETABLE_STRIDE
  924 D1:BC22 ED 4C -  -          mlt bc
  925 D1:BC24 21 00 40 D0         ld  hl,PAGETABLE
  926 D1:BC28 09 -  -  -          add hl,bc
  927 D1:BC29 ED 27 -  -          ld  hl,(hl)
  928 D1:BC2B 06 00 -  -          ld  b,0
  929 D1:BC2D 4F -  -  -          ld  c,a
  930 D1:BC2E 09 -  -  -          add hl,bc   ;full address
  931 D1:BC2F DD 46 02 -          ld  b,(ix+REGY)
  932 D1:BC32 CD 63 AE D1         WRITE_ACCESS
  933 D1:BC36 ED 33 04 -          ADDCYC(4)
  934 D1:BC39 E1 -  -  -      pop hl
  935 D1:BC3A C3 DF B5 D1     jp i6502NextLoad
  936 D1:BC3E -  -  -  -  
  937 D1:BC3E -  -  -  -  ;-----------------------------------------------------------------------------
  938 D1:BC3E -  -  -  -  ;TAX - Transfer Accumulator to Index X [A -> X]
  939 D1:BC3E -  -  -  -  ;N	Z	C	I	D	V
  940 D1:BC3E -  -  -  -  ;+	+	-	-	-	-
  941 D1:BC3E -  -  -  -  ;implied	TAX	AA	1	2
  942 D1:BC3E -  -  -  -  inst6502_tax:
  943 D1:BC3E DD 7E 00 -      ld  a,(ix+REGA)
  944 D1:BC41 DD 77 01 -      ld  (ix+REGX),a
  945 D1:BC44 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  946 D1:BC58 ED 33 02 -      ADDCYC(2)
  947 D1:BC5B C3 F8 B5 D1     jp i6502FinishLoad
  948 D1:BC5F -  -  -  -  
  949 D1:BC5F -  -  -  -  ;TAY - Transfer Accumulator to Index Y [A -> Y]
  950 D1:BC5F -  -  -  -  ;N	Z	C	I	D	V
  951 D1:BC5F -  -  -  -  ;+	+	-	-	-	-
  952 D1:BC5F -  -  -  -  ;implied	TAY	A8	1	2
  953 D1:BC5F -  -  -  -  inst6502_tay:
  954 D1:BC5F DD 7E 00 -      ld  a,(ix+REGA)
  955 D1:BC62 DD 77 02 -      ld  (ix+REGY),a
  956 D1:BC65 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  957 D1:BC79 ED 33 02 -      ADDCYC(2)
  958 D1:BC7C C3 F8 B5 D1     jp i6502FinishLoad
  959 D1:BC80 -  -  -  -  
  960 D1:BC80 -  -  -  -  ;TSX - Transfer Stack Pointer to Index X [SP -> X]
  961 D1:BC80 -  -  -  -  ;N	Z	C	I	D	V
  962 D1:BC80 -  -  -  -  ;+	+	-	-	-	-
  963 D1:BC80 -  -  -  -  ;implied	TSX	BA	1	2
  964 D1:BC80 -  -  -  -  inst6502_tsx:
  965 D1:BC80 DD 7E 03 -      ld  a,(ix+REGSP)
  966 D1:BC83 DD 77 01 -      ld  (ix+REGX),a
  967 D1:BC86 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  968 D1:BC9A ED 33 02 -      ADDCYC(2)
  969 D1:BC9D C3 F8 B5 D1     jp i6502FinishLoad
  970 D1:BCA1 -  -  -  -  
  971 D1:BCA1 -  -  -  -  ;TXA - Transfer Index X to Accumulator [X -> A]
  972 D1:BCA1 -  -  -  -  ;N	Z	C	I	D	V
  973 D1:BCA1 -  -  -  -  ;+	+	-	-	-	-
  974 D1:BCA1 -  -  -  -  ;implied	TXA	8A	1	2
  975 D1:BCA1 -  -  -  -  inst6502_txa:
  976 D1:BCA1 DD 7E 01 -      ld  a,(ix+REGX)
  977 D1:BCA4 DD 77 00 -      ld  (ix+REGA),a
  978 D1:BCA7 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  979 D1:BCBB ED 33 02 -      ADDCYC(2)
  980 D1:BCBE C3 F8 B5 D1     jp i6502FinishLoad
  981 D1:BCC2 -  -  -  -  
  982 D1:BCC2 -  -  -  -  ;TXS - Transfer Index X to Stack Pointer [X -> SP]
  983 D1:BCC2 -  -  -  -  ;N	Z	C	I	D	V
  984 D1:BCC2 -  -  -  -  ;-	-	-	-	-	-
  985 D1:BCC2 -  -  -  -  ;implied	TXS	9A	1	2
  986 D1:BCC2 -  -  -  -  inst6502_txs:
  987 D1:BCC2 DD 7E 01 -      ld  a,(ix+REGX)
  988 D1:BCC5 DD 77 03 -      ld  (ix+REGSP),a
  989 D1:BCC8 ED 33 02 -      ADDCYC(2)
  990 D1:BCCB C3 F8 B5 D1     jp i6502FinishLoad
  991 D1:BCCF -  -  -  -  
  992 D1:BCCF -  -  -  -  ;TYA - Transfer Index Y to Accumulator [Y -> A]
  993 D1:BCCF -  -  -  -  ;N	Z	C	I	D	V
  994 D1:BCCF -  -  -  -  ;+	+	-	-	-	-
  995 D1:BCCF -  -  -  -  ;implied	TYA	98	1	2
  996 D1:BCCF -  -  -  -  inst6502_tya:
  997 D1:BCCF DD 7E 02 -      ld  a,(ix+REGY)
  998 D1:BCD2 DD 77 00 -      ld  (ix+REGA),a
  999 D1:BCD5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1000 D1:BCE9 ED 33 02 -      ADDCYC(2)
 1001 D1:BCEC C3 F8 B5 D1     jp i6502FinishLoad
 1002 D1:BCF0 -  -  -  -  
 1003 D1:BCF0 -  -  -  -  ;-----------------------------------------------------------------------------
 1004 D1:BCF0 -  -  -  -  ;-----------------------------------------------------------------------------
 1005 D1:BCF0 -  -  -  -  ;-----------------------------------------------------------------------------
 1006 D1:BCF0 -  -  -  -  ;Instructions by type: Stack Instructions
 1007 D1:BCF0 -  -  -  -  ;PHA - Push Accumulator on Stack
 1008 D1:BCF0 -  -  -  -  ;    push A
 1009 D1:BCF0 -  -  -  -  ;    N	Z	C	I	D	V
 1010 D1:BCF0 -  -  -  -  ;    -	-	-	-	-	-
 1011 D1:BCF0 -  -  -  -  ;implied	PHA	48	1	3 
 1012 D1:BCF0 -  -  -  -  inst6502_pha:
 1013 D1:BCF0 ED 33 03 -      ADDCYC(3)
 1014 D1:BCF3 DD 7E 00 -      ld  a,(ix+REGA)
 1015 D1:BCF6 01 00 39 D0     ld  bc,STACKBASE
 1016 D1:BCFA DD 4E 03 -      ld  c,(ix+REGSP)
 1017 D1:BCFD 02 -  -  -      ld  (bc),a
 1018 D1:BCFE 0D -  -  -      dec c
 1019 D1:BCFF DD 71 03 -      ld  (ix+REGSP),c
 1020 D1:BD02 C3 F8 B5 D1     jp i6502FinishLoad
 1021 D1:BD06 -  -  -  -  
 1022 D1:BD06 -  -  -  -  ;PHP - Push Processor Status on Stack
 1023 D1:BD06 -  -  -  -  ;    The status register will be pushed with the break
 1024 D1:BD06 -  -  -  -  ;    flag and bit 5 set to 1.
 1025 D1:BD06 -  -  -  -  ;    push SR
 1026 D1:BD06 -  -  -  -  ;    N	Z	C	I	D	V
 1027 D1:BD06 -  -  -  -  ;    -	-	-	-	-	-
 1028 D1:BD06 -  -  -  -  ;implied	PHP	08	1	3  
 1029 D1:BD06 -  -  -  -  inst6502_php:
 1030 D1:BD06 ED 33 03 -      ADDCYC(3)
 1031 D1:BD09 DD 7E 04 -      ld  a,(ix+REGSR)
 1032 D1:BD0C F6 30 -  -      or  a,%00110000
 1033 D1:BD0E 01 00 39 D0     ld  bc,STACKBASE
 1034 D1:BD12 DD 4E 03 -      ld  c,(ix+REGSP)
 1035 D1:BD15 02 -  -  -      ld  (bc),a
 1036 D1:BD16 0D -  -  -      dec c
 1037 D1:BD17 DD 71 03 -      ld  (ix+REGSP),c
 1038 D1:BD1A C3 F8 B5 D1     jp i6502FinishLoad
 1039 D1:BD1E -  -  -  -  
 1040 D1:BD1E -  -  -  -  
 1041 D1:BD1E -  -  -  -  
 1042 D1:BD1E -  -  -  -  ;PLA - Pull Accumulator from Stack
 1043 D1:BD1E -  -  -  -  ;    pull A
 1044 D1:BD1E -  -  -  -  ;    N	Z	C	I	D	V
 1045 D1:BD1E -  -  -  -  ;    +	+	-	-	-	-
 1046 D1:BD1E -  -  -  -  ;implied	PLA	68	1	4  
 1047 D1:BD1E -  -  -  -  inst6502_pla:
 1048 D1:BD1E ED 33 04 -      ADDCYC(4)
 1049 D1:BD21 01 00 39 D0     ld  bc,STACKBASE
 1050 D1:BD25 DD 4E 03 -      ld  c,(ix+REGSP)
 1051 D1:BD28 0C -  -  -      inc c
 1052 D1:BD29 0A -  -  -      ld  a,(bc)
 1053 D1:BD2A DD 71 03 -      ld  (ix+REGSP),c
 1054 D1:BD2D DD 77 00 -      ld  (ix+REGA),a
 1055 D1:BD30 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1056 D1:BD44 C3 F8 B5 D1     jp i6502FinishLoad
 1057 D1:BD48 -  -  -  -  
 1058 D1:BD48 -  -  -  -  ;PLP - Pull Processor Status from Stack
 1059 D1:BD48 -  -  -  -  ;    The status register will be pulled with the break
 1060 D1:BD48 -  -  -  -  ;    flag and bit 5 ignored.
 1061 D1:BD48 -  -  -  -  ;    pull SR
 1062 D1:BD48 -  -  -  -  ;    N	Z	C	I	D	V
 1063 D1:BD48 -  -  -  -  ;    from stack
 1064 D1:BD48 -  -  -  -  ;implied	PLP	28	1	4  
 1065 D1:BD48 -  -  -  -  inst6502_plp:
 1066 D1:BD48 ED 33 04 -      ADDCYC(4)
 1067 D1:BD4B 01 00 39 D0     ld  bc,STACKBASE
 1068 D1:BD4F DD 4E 03 -      ld  c,(ix+REGSP)
 1069 D1:BD52 0C -  -  -      inc c
 1070 D1:BD53 0A -  -  -      ld  a,(bc)
 1071 D1:BD54 DD 71 03 -      ld  (ix+REGSP),c
 1072 D1:BD57 DD 46 04 -      ld  b,(ix+REGSR)
 1073 D1:BD5A A8 -  -  -      xor a,b
 1074 D1:BD5B E6 CF -  -      and a,%11001111
 1075 D1:BD5D A8 -  -  -      xor a,b
 1076 D1:BD5E DD 77 04 -      ld  (ix+REGSR),a
 1077 D1:BD61 C3 F8 B5 D1     jp i6502FinishLoad
 1078 D1:BD65 -  -  -  -  
 1079 D1:BD65 -  -  -  -  
 1080 D1:BD65 -  -  -  -  ;-----------------------------------------------------------------------------
 1081 D1:BD65 -  -  -  -  ;-----------------------------------------------------------------------------
 1082 D1:BD65 -  -  -  -  ;-----------------------------------------------------------------------------
 1083 D1:BD65 -  -  -  -  ;Instructions by type: Decrements and Increments
 1084 D1:BD65 -  -  -  -  
 1085 D1:BD65 -  -  -  -  ;DEC -  Decrement Memory by One
 1086 D1:BD65 -  -  -  -  ;    M - 1 -> M
 1087 D1:BD65 -  -  -  -  ;    N	Z	C	I	D	V
 1088 D1:BD65 -  -  -  -  ;    +	+	-	-	-	-
 1089 D1:BD65 -  -  -  -  ;    addressing	assembler	opc	bytes	cycles
 1090 D1:BD65 -  -  -  -  
 1091 D1:BD65 -  -  -  -  ;    zeropage	DEC oper	C6	2	5  
 1092 D1:BD65 -  -  -  -  inst6502_dec_zp:
 1093 D1:BD65 7E -  -  -      ld  a,(hl)
 1094 D1:BD66 01 00 38 D0     ld  bc,ZEROPAGE
 1095 D1:BD6A 81 -  -  -      add a,c
 1096 D1:BD6B 4F -  -  -      ld  c,a
 1097 D1:BD6C 0A -  -  -      ld  a,(bc)
 1098 D1:BD6D 3D -  -  -      dec a
 1099 D1:BD6E 02 -  -  -      ld  (bc),a
 1100 D1:BD6F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1101 D1:BD83 ED 33 05 -      ADDCYC(5)
 1102 D1:BD86 C3 DF B5 D1     jp i6502NextLoad
 1103 D1:BD8A -  -  -  -  
 1104 D1:BD8A -  -  -  -  ;    zeropage,X	DEC oper,X	D6	2	6  
 1105 D1:BD8A -  -  -  -  inst6502_dec_zpx:
 1106 D1:BD8A 7E -  -  -      ld  a,(hl)
 1107 D1:BD8B 01 00 38 D0     ld  bc,ZEROPAGE
 1108 D1:BD8F 81 -  -  -      add a,c
 1109 D1:BD90 DD 86 01 -      add a,(ix+REGX)
 1110 D1:BD93 4F -  -  -      ld  c,a
 1111 D1:BD94 0A -  -  -      ld  a,(bc)
 1112 D1:BD95 3D -  -  -      dec a
 1113 D1:BD96 02 -  -  -      ld  (bc),a
 1114 D1:BD97 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1115 D1:BDAB ED 33 06 -      ADDCYC(6)
 1116 D1:BDAE C3 DF B5 D1     jp i6502NextLoad
 1117 D1:BDB2 -  -  -  -  
 1118 D1:BDB2 -  -  -  -  ;    absolute	DEC oper	CE	3	6  
 1119 D1:BDB2 -  -  -  -  inst6502_dec_abs:
 1120 D1:BDB2 CD 87 B6 D1     call subroutine6502_abs_split_start
 1121 D1:BDB6 E5 -  -  -      push hl
 1122 D1:BDB7 50 -  -  -          ld  d,b
 1123 D1:BDB8 79 -  -  -          ld  a,c
 1124 D1:BDB9 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1125 D1:BDBB ED 4C -  -          mlt bc
 1126 D1:BDBD 21 00 40 D0         ld  hl,PAGETABLE
 1127 D1:BDC1 09 -  -  -          add hl,bc
 1128 D1:BDC2 ED 27 -  -          ld  hl,(hl)
 1129 D1:BDC4 06 00 -  -          ld  b,0
 1130 D1:BDC6 4F -  -  -          ld  c,a
 1131 D1:BDC7 09 -  -  -          add hl,bc   ;full address
 1132 D1:BDC8 CD 40 AE D1         READ_ACCESS
 1133 D1:BDCC 3D -  -  -          dec a
 1134 D1:BDCD 47 -  -  -          ld  b,a
 1135 D1:BDCE -  -  -  -          ;
 1136 D1:BDCE DD 7E 04 -          ld  a,(ix+REGSR)
 1137 D1:BDD1 CB 8F -  -          res SF_ZERO,a
 1138 D1:BDD3 20 02 -  -          jr  nz,$+4
 1139 D1:BDD5 CB CF -  -          set SF_ZERO,a
 1140 D1:BDD7 CB BF -  -          res SF_NEG,a
 1141 D1:BDD9 F2 DF BD D1         jp  p,$+6
 1142 D1:BDDD CB FF -  -          set SF_NEG,a
 1143 D1:BDDF DD 77 04 -          ld  (ix+REGSR),a
 1144 D1:BDE2 -  -  -  -          ;
 1145 D1:BDE2 CD 63 AE D1         WRITE_ACCESS
 1146 D1:BDE6 ED 33 06 -          ADDCYC(6)
 1147 D1:BDE9 E1 -  -  -      pop hl
 1148 D1:BDEA C3 DF B5 D1     jp i6502NextLoad
 1149 D1:BDEE -  -  -  -  
 1150 D1:BDEE -  -  -  -  ;    absolute,X	DEC oper,X	DE	3	7  
 1151 D1:BDEE -  -  -  -  inst6502_dec_absx:
 1152 D1:BDEE ED 33 07 -      ADDCYC(7)
 1153 D1:BDF1 CD E4 B6 D1     PUSH_ABSXSPLIT_NODEP
 1154 D1:BDF5 CD 40 AE D1         READ_ACCESS
 1155 D1:BDF9 3D -  -  -          dec a
 1156 D1:BDFA 47 -  -  -          ld  b,a
 1157 D1:BDFB -  -  -  -          ;
 1158 D1:BDFB DD 7E 04 -          ld  a,(ix+REGSR)
 1159 D1:BDFE CB 8F -  -          res SF_ZERO,a
 1160 D1:BE00 20 02 -  -          jr  nz,$+4
 1161 D1:BE02 CB CF -  -          set SF_ZERO,a
 1162 D1:BE04 CB BF -  -          res SF_NEG,a
 1163 D1:BE06 F2 0C BE D1         jp  p,$+6
 1164 D1:BE0A CB FF -  -          set SF_NEG,a
 1165 D1:BE0C DD 77 04 -          ld  (ix+REGSR),a
 1166 D1:BE0F -  -  -  -          ;
 1167 D1:BE0F CD 63 AE D1         WRITE_ACCESS
 1168 D1:BE13 E1 -  -  -      pop hl
 1169 D1:BE14 C3 DF B5 D1     jp i6502NextLoad
 1170 D1:BE18 -  -  -  -  
 1171 D1:BE18 -  -  -  -  ;DEX - Decrement Index X by One [X - 1 -> X]
 1172 D1:BE18 -  -  -  -  ;Flags altered: NZ
 1173 D1:BE18 -  -  -  -  ;implied	DEX	CA	1	2  
 1174 D1:BE18 -  -  -  -  inst6502_dex:
 1175 D1:BE18 DD 35 01 -      dec (ix+REGX)
 1176 D1:BE1B DD 7E 04 -  _:  ld  a,(ix+REGSR)
 1177 D1:BE1E CB 8F -  -      res SF_ZERO,a
 1178 D1:BE20 20 02 -  -      jr  nz,$+4
 1179 D1:BE22 CB CF -  -      set SF_ZERO,a
 1180 D1:BE24 CB BF -  -      res SF_NEG,a
 1181 D1:BE26 F2 2C BE D1     jp  p,$+6
 1182 D1:BE2A CB FF -  -      set SF_NEG,a
 1183 D1:BE2C DD 77 04 -      ld  (ix+REGSR),a
 1184 D1:BE2F ED 33 02 -      ADDCYC(2)
 1185 D1:BE32 C3 F8 B5 D1     jp i6502FinishLoad
 1186 D1:BE36 -  -  -  -  
 1187 D1:BE36 -  -  -  -  ;DEY - Decrement Index Y by One [Y - 1 -> Y]
 1188 D1:BE36 -  -  -  -  ;Flags altered: NZ
 1189 D1:BE36 -  -  -  -  ;implied	DEY	88	1	2  
 1190 D1:BE36 -  -  -  -  inst6502_dey:
 1191 D1:BE36 DD 35 02 -      dec (ix+REGY)
 1192 D1:BE39 18 E0 -  -      jr  -_
 1193 D1:BE3B -  -  -  -  
 1194 D1:BE3B -  -  -  -  
 1195 D1:BE3B -  -  -  -  ;INX - Increment Index X by One [X + 1 -> X]
 1196 D1:BE3B -  -  -  -  ;Flags altered: NZ
 1197 D1:BE3B -  -  -  -  ;implied	INX	E8	1	2  
 1198 D1:BE3B -  -  -  -  inst6502_inx:
 1199 D1:BE3B DD 34 01 -      inc (ix+REGX)
 1200 D1:BE3E 18 DB -  -      jr  -_
 1201 D1:BE40 -  -  -  -  
 1202 D1:BE40 -  -  -  -  
 1203 D1:BE40 -  -  -  -  ;INY - Increment Index Y by One [Y + 1 -> Y]
 1204 D1:BE40 -  -  -  -  ;Flags altered: NZ
 1205 D1:BE40 -  -  -  -  ;implied	INY	C8	1	2  
 1206 D1:BE40 -  -  -  -  inst6502_iny:
 1207 D1:BE40 DD 34 02 -      inc (ix+REGY)
 1208 D1:BE43 18 D6 -  -      jr  -_
 1209 D1:BE45 -  -  -  -  
 1210 D1:BE45 -  -  -  -  
 1211 D1:BE45 -  -  -  -  ;INC - Increment Memory by One
 1212 D1:BE45 -  -  -  -  ;    M + 1 -> M
 1213 D1:BE45 -  -  -  -  ;    N	Z	C	I	D	V
 1214 D1:BE45 -  -  -  -  ;    +	+	-	-	-	-
 1215 D1:BE45 -  -  -  -  
 1216 D1:BE45 -  -  -  -  ;zeropage	INC oper	E6	2	5  
 1217 D1:BE45 -  -  -  -  inst6502_inc_zp:
 1218 D1:BE45 7E -  -  -      ld  a,(hl)
 1219 D1:BE46 01 00 38 D0     ld  bc,ZEROPAGE
 1220 D1:BE4A 81 -  -  -      add a,c
 1221 D1:BE4B 4F -  -  -      ld  c,a
 1222 D1:BE4C 0A -  -  -      ld  a,(bc)
 1223 D1:BE4D 3C -  -  -      inc a
 1224 D1:BE4E 02 -  -  -      ld  (bc),a
 1225 D1:BE4F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1226 D1:BE63 ED 33 05 -      ADDCYC(5)
 1227 D1:BE66 C3 DF B5 D1     jp i6502NextLoad
 1228 D1:BE6A -  -  -  -  
 1229 D1:BE6A -  -  -  -  ;zeropage,X	INC oper,X	F6	2	6  
 1230 D1:BE6A -  -  -  -  inst6502_inc_zpx:
 1231 D1:BE6A 7E -  -  -      ld  a,(hl)
 1232 D1:BE6B 01 00 38 D0     ld  bc,ZEROPAGE
 1233 D1:BE6F 81 -  -  -      add a,c
 1234 D1:BE70 DD 86 01 -      add a,(ix+REGX)
 1235 D1:BE73 4F -  -  -      ld  c,a
 1236 D1:BE74 0A -  -  -      ld  a,(bc)
 1237 D1:BE75 3C -  -  -      inc a
 1238 D1:BE76 02 -  -  -      ld  (bc),a
 1239 D1:BE77 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1240 D1:BE8B ED 33 06 -      ADDCYC(6)
 1241 D1:BE8E C3 DF B5 D1     jp i6502NextLoad
 1242 D1:BE92 -  -  -  -      
 1243 D1:BE92 -  -  -  -  ;absolute	INC oper	EE	3	6
 1244 D1:BE92 -  -  -  -  inst6502_inc_abs:
 1245 D1:BE92 CD 87 B6 D1     call subroutine6502_abs_split_start
 1246 D1:BE96 E5 -  -  -      push hl
 1247 D1:BE97 50 -  -  -          ld  d,b
 1248 D1:BE98 79 -  -  -          ld  a,c
 1249 D1:BE99 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1250 D1:BE9B ED 4C -  -          mlt bc
 1251 D1:BE9D 21 00 40 D0         ld  hl,PAGETABLE
 1252 D1:BEA1 09 -  -  -          add hl,bc
 1253 D1:BEA2 ED 27 -  -          ld  hl,(hl)
 1254 D1:BEA4 06 00 -  -          ld  b,0
 1255 D1:BEA6 4F -  -  -          ld  c,a
 1256 D1:BEA7 09 -  -  -          add hl,bc   ;full address
 1257 D1:BEA8 CD 40 AE D1         READ_ACCESS
 1258 D1:BEAC 3C -  -  -          inc a
 1259 D1:BEAD 47 -  -  -          ld  b,a
 1260 D1:BEAE -  -  -  -          ;
 1261 D1:BEAE DD 7E 04 -          ld  a,(ix+REGSR)
 1262 D1:BEB1 CB 8F -  -          res SF_ZERO,a
 1263 D1:BEB3 20 02 -  -          jr  nz,$+4
 1264 D1:BEB5 CB CF -  -          set SF_ZERO,a
 1265 D1:BEB7 CB BF -  -          res SF_NEG,a
 1266 D1:BEB9 F2 BF BE D1         jp  p,$+6
 1267 D1:BEBD CB FF -  -          set SF_NEG,a
 1268 D1:BEBF DD 77 04 -          ld  (ix+REGSR),a
 1269 D1:BEC2 -  -  -  -          ;
 1270 D1:BEC2 CD 63 AE D1         WRITE_ACCESS
 1271 D1:BEC6 ED 33 06 -          ADDCYC(6)
 1272 D1:BEC9 E1 -  -  -      pop hl
 1273 D1:BECA C3 DF B5 D1     jp i6502NextLoad
 1274 D1:BECE -  -  -  -  
 1275 D1:BECE -  -  -  -  ;absolute,X	INC oper,X	FE	3	7  
 1276 D1:BECE -  -  -  -  inst6502_inc_absx:
 1277 D1:BECE ED 33 07 -      ADDCYC(7)
 1278 D1:BED1 CD E4 B6 D1     PUSH_ABSXSPLIT_NODEP
 1279 D1:BED5 CD 40 AE D1         READ_ACCESS
 1280 D1:BED9 3C -  -  -          inc a
 1281 D1:BEDA 47 -  -  -          ld  b,a
 1282 D1:BEDB -  -  -  -          ;
 1283 D1:BEDB DD 7E 04 -          ld  a,(ix+REGSR)
 1284 D1:BEDE CB 8F -  -          res SF_ZERO,a
 1285 D1:BEE0 20 02 -  -          jr  nz,$+4
 1286 D1:BEE2 CB CF -  -          set SF_ZERO,a
 1287 D1:BEE4 CB BF -  -          res SF_NEG,a
 1288 D1:BEE6 F2 EC BE D1         jp  p,$+6
 1289 D1:BEEA CB FF -  -          set SF_NEG,a
 1290 D1:BEEC DD 77 04 -          ld  (ix+REGSR),a
 1291 D1:BEEF -  -  -  -          ;
 1292 D1:BEEF CD 63 AE D1         WRITE_ACCESS
 1293 D1:BEF3 E1 -  -  -      pop hl
 1294 D1:BEF4 C3 DF B5 D1     jp i6502NextLoad
 1295 D1:BEF8 -  -  -  -  
 1296 D1:BEF8 -  -  -  -  ;-----------------------------------------------------------------------------
 1297 D1:BEF8 -  -  -  -  ;-----------------------------------------------------------------------------
 1298 D1:BEF8 -  -  -  -  ;-----------------------------------------------------------------------------
 1299 D1:BEF8 -  -  -  -  ;Instructions by type: Arithmetic Operations
 1300 D1:BEF8 -  -  -  -  ;ADC - Add Memory to Accumulator with Carry  [A + M + C -> A, C]
 1301 D1:BEF8 -  -  -  -  ;    N	Z	C	I	D	V
 1302 D1:BEF8 -  -  -  -  ;    +	+	+	-	-	+
 1303 D1:BEF8 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1304 D1:BEF8 -  -  -  -  
 1305 D1:BEF8 -  -  -  -  ;immediate	ADC #oper	69	2	2  
 1306 D1:BEF8 -  -  -  -  inst6502_adc_imm:
 1307 D1:BEF8 ED 33 02 -      ADDCYC(2)
 1308 D1:BEFB 4E -  -  -      ld  c,(hl)
 1309 D1:BEFC C3 19 B7 D1     jp  subroutine6502_adc_combined_end
 1310 D1:BF00 -  -  -  -      
 1311 D1:BF00 -  -  -  -  
 1312 D1:BF00 -  -  -  -  ;zeropage	ADC oper	65	2	3
 1313 D1:BF00 -  -  -  -  inst6502_adc_zp:
 1314 D1:BF00 ED 33 03 -      ADDCYC(3)
 1315 D1:BF03 7E -  -  -      ld  a,(hl)
 1316 D1:BF04 01 00 38 D0     ld  bc,ZEROPAGE
 1317 D1:BF08 81 -  -  -      add a,c
 1318 D1:BF09 4F -  -  -      ld  c,a
 1319 D1:BF0A 0A -  -  -      ld  a,(bc)
 1320 D1:BF0B 4F -  -  -      ld  c,a
 1321 D1:BF0C C3 19 B7 D1     jp  subroutine6502_adc_combined_end
 1322 D1:BF10 -  -  -  -  
 1323 D1:BF10 -  -  -  -  ;zeropage,X	ADC oper,X	75	2	4  
 1324 D1:BF10 -  -  -  -  inst6502_adc_zpx:
 1325 D1:BF10 ED 33 04 -      ADDCYC(4)
 1326 D1:BF13 7E -  -  -      ld  a,(hl)
 1327 D1:BF14 DD 86 01 -      add a,(ix+REGX)
 1328 D1:BF17 01 00 38 D0     ld  bc,ZEROPAGE
 1329 D1:BF1B 81 -  -  -      add a,c
 1330 D1:BF1C 4F -  -  -      ld  c,a
 1331 D1:BF1D 0A -  -  -      ld  a,(bc)
 1332 D1:BF1E 4F -  -  -      ld  c,a
 1333 D1:BF1F C3 19 B7 D1     jp  subroutine6502_adc_combined_end
 1334 D1:BF23 -  -  -  -  
 1335 D1:BF23 -  -  -  -  ;absolute	ADC oper	6D	3	4  
 1336 D1:BF23 -  -  -  -  inst6502_adc_abs:
 1337 D1:BF23 ED 33 04 -      ADDCYC(4)
 1338 D1:BF26 CD 87 B6 D1     call subroutine6502_abs_split_start
 1339 D1:BF2A E5 -  -  -      push hl
 1340 D1:BF2B 50 -  -  -          ld  d,b
 1341 D1:BF2C 79 -  -  -          ld  a,c
 1342 D1:BF2D 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1343 D1:BF2F ED 4C -  -          mlt bc
 1344 D1:BF31 21 00 40 D0         ld  hl,PAGETABLE
 1345 D1:BF35 09 -  -  -          add hl,bc
 1346 D1:BF36 ED 27 -  -          ld  hl,(hl)
 1347 D1:BF38 06 00 -  -          ld  b,0
 1348 D1:BF3A 4F -  -  -          ld  c,a
 1349 D1:BF3B 09 -  -  -          add hl,bc   ;full address
 1350 D1:BF3C CD 40 AE D1         READ_ACCESS
 1351 D1:BF40 E1 -  -  -      pop hl
 1352 D1:BF41 4F -  -  -      ld  c,a
 1353 D1:BF42 C3 19 B7 D1     jp  subroutine6502_adc_combined_end
 1354 D1:BF46 -  -  -  -  
 1355 D1:BF46 -  -  -  -  ;absolute,X	ADC oper,X	7D	3	4* 
 1356 D1:BF46 -  -  -  -  inst6502_adc_absx:
 1357 D1:BF46 ED 33 04 -      ADDCYC(4)
 1358 D1:BF49 CD A8 B6 D1     PUSH_ABSXSPLIT
 1359 D1:BF4D CD 40 AE D1         READ_ACCESS
 1360 D1:BF51 E1 -  -  -      pop hl
 1361 D1:BF52 4F -  -  -      ld  c,a
 1362 D1:BF53 C3 19 B7 D1     jp  subroutine6502_adc_combined_end
 1363 D1:BF57 -  -  -  -  
 1364 D1:BF57 -  -  -  -  ;absolute,Y	ADC oper,Y	79	3	4*
 1365 D1:BF57 -  -  -  -  inst6502_adc_absy:
 1366 D1:BF57 ED 33 04 -      ADDCYC(4)
 1367 D1:BF5A CD A3 B6 D1     PUSH_ABSYSPLIT
 1368 D1:BF5E CD 40 AE D1         READ_ACCESS
 1369 D1:BF62 E1 -  -  -      pop hl
 1370 D1:BF63 4F -  -  -      ld  c,a
 1371 D1:BF64 C3 19 B7 D1     jp  subroutine6502_adc_combined_end
 1372 D1:BF68 -  -  -  -  
 1373 D1:BF68 -  -  -  -  ;(indirect,X)	ADC (oper,X)	61	2	6  
 1374 D1:BF68 -  -  -  -  inst6502_adc_indx:
 1375 D1:BF68 ED 33 06 -      ADDCYC(6)
 1376 D1:BF6B E5 -  -  -      push hl
 1377 D1:BF6C 7E -  -  -          ld  a,(hl)
 1378 D1:BF6D 21 00 38 D0         ld  hl,ZEROPAGE
 1379 D1:BF71 85 -  -  -          add a,L
 1380 D1:BF72 DD 86 01 -          add a,(ix+REGX)
 1381 D1:BF75 6F -  -  -          ld  L,a
 1382 D1:BF76 7E -  -  -          ld  a,(hl)
 1383 D1:BF77 2C -  -  -          inc L
 1384 D1:BF78 56 -  -  -          ld  d,(hl)
 1385 D1:BF79 42 -  -  -          ld  b,d
 1386 D1:BF7A 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1387 D1:BF7C ED 4C -  -          mlt bc
 1388 D1:BF7E 21 00 40 D0         ld  hl,PAGETABLE
 1389 D1:BF82 09 -  -  -          add hl,bc
 1390 D1:BF83 ED 27 -  -          ld  hl,(hl)
 1391 D1:BF85 06 00 -  -          ld  b,0
 1392 D1:BF87 4F -  -  -          ld  c,a
 1393 D1:BF88 09 -  -  -          add hl,bc
 1394 D1:BF89 CD 40 AE D1         READ_ACCESS
 1395 D1:BF8D E1 -  -  -      pop hl
 1396 D1:BF8E 4F -  -  -      ld  c,a
 1397 D1:BF8F C3 19 B7 D1     jp  subroutine6502_adc_combined_end
 1398 D1:BF93 -  -  -  -  
 1399 D1:BF93 -  -  -  -  ;(indirect),Y	ADC (oper),Y	71	2	5* 
 1400 D1:BF93 -  -  -  -  inst6502_adc_indy:
 1401 D1:BF93 ED 33 05 -      ADDCYC(5)
 1402 D1:BF96 E5 -  -  -      push hl
 1403 D1:BF97 7E -  -  -          ld  a,(hl)
 1404 D1:BF98 21 00 38 D0         ld  hl,ZEROPAGE
 1405 D1:BF9C 85 -  -  -          add a,L
 1406 D1:BF9D 6F -  -  -          ld  L,a
 1407 D1:BF9E 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1408 D1:BF9F 2C -  -  -          inc L
 1409 D1:BFA0 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1410 D1:BFA3 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1411 D1:BFA4 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1412 D1:BFA6 FD 23 -  -          ADDCYC(1)
 1413 D1:BFA8 24 -  -  -          inc h
 1414 D1:BFA9 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1415 D1:BFAA 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1416 D1:BFAC ED 6C -  -          mlt hl          ;23.
 1417 D1:BFAE 01 00 40 D0         ld  bc,PAGETABLE
 1418 D1:BFB2 09 -  -  -          add hl,bc
 1419 D1:BFB3 ED 27 -  -          ld  hl,(hl)     ;address get.
 1420 D1:BFB5 01 00 00 00         ld  bc,0
 1421 D1:BFB9 4F -  -  -          ld  c,a
 1422 D1:BFBA 09 -  -  -          add hl,bc       ;Full address get.
 1423 D1:BFBB CD 40 AE D1         READ_ACCESS
 1424 D1:BFBF E1 -  -  -      pop hl
 1425 D1:BFC0 4F -  -  -      ld  c,a
 1426 D1:BFC1 C3 19 B7 D1     jp  subroutine6502_adc_combined_end
 1427 D1:BFC5 -  -  -  -  
 1428 D1:BFC5 -  -  -  -  
 1429 D1:BFC5 -  -  -  -  ;SBC - Subtract Memory from Accumulator with Borrow
 1430 D1:BFC5 -  -  -  -  ;A - M - C̅ -> A
 1431 D1:BFC5 -  -  -  -  ;N	Z	C	I	D	V
 1432 D1:BFC5 -  -  -  -  ;+	+	+	-	-	+
 1433 D1:BFC5 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1434 D1:BFC5 -  -  -  -  
 1435 D1:BFC5 -  -  -  -  ;immediate	SBC #oper	E9	2	2  
 1436 D1:BFC5 -  -  -  -  inst6502_sbc_imm:
 1437 D1:BFC5 ED 33 02 -      ADDCYC(2)
 1438 D1:BFC8 4E -  -  -      ld  c,(hl)
 1439 D1:BFC9 C3 4A B7 D1     jp  subroutine6502_sbc_combined_end
 1440 D1:BFCD -  -  -  -  
 1441 D1:BFCD -  -  -  -  ;zeropage	SBC oper	E5	2	3  
 1442 D1:BFCD -  -  -  -  inst6502_sbc_zp:
 1443 D1:BFCD ED 33 03 -      ADDCYC(3)
 1444 D1:BFD0 7E -  -  -      ld  a,(hl)
 1445 D1:BFD1 01 00 38 D0     ld  bc,ZEROPAGE
 1446 D1:BFD5 81 -  -  -      add a,c
 1447 D1:BFD6 4F -  -  -      ld  c,a
 1448 D1:BFD7 0A -  -  -      ld  a,(bc)
 1449 D1:BFD8 4F -  -  -      ld  c,a
 1450 D1:BFD9 C3 4A B7 D1     jp  subroutine6502_sbc_combined_end
 1451 D1:BFDD -  -  -  -  
 1452 D1:BFDD -  -  -  -  ;zeropage,X	SBC oper,X	F5	2	4  
 1453 D1:BFDD -  -  -  -  inst6502_sbc_zpx:
 1454 D1:BFDD ED 33 04 -      ADDCYC(4)
 1455 D1:BFE0 7E -  -  -      ld  a,(hl)
 1456 D1:BFE1 DD 86 01 -      add a,(ix+REGX)
 1457 D1:BFE4 01 00 38 D0     ld  bc,ZEROPAGE
 1458 D1:BFE8 81 -  -  -      add a,c
 1459 D1:BFE9 4F -  -  -      ld  c,a
 1460 D1:BFEA 0A -  -  -      ld  a,(bc)
 1461 D1:BFEB 4F -  -  -      ld  c,a
 1462 D1:BFEC C3 4A B7 D1     jp  subroutine6502_sbc_combined_end
 1463 D1:BFF0 -  -  -  -  
 1464 D1:BFF0 -  -  -  -  ;absolute	SBC oper	ED	3	4  
 1465 D1:BFF0 -  -  -  -  inst6502_sbc_abs:
 1466 D1:BFF0 ED 33 04 -      ADDCYC(4)
 1467 D1:BFF3 CD 87 B6 D1     call subroutine6502_abs_split_start
 1468 D1:BFF7 E5 -  -  -      push hl
 1469 D1:BFF8 50 -  -  -          ld  d,b
 1470 D1:BFF9 79 -  -  -          ld  a,c
 1471 D1:BFFA 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1472 D1:BFFC ED 4C -  -          mlt bc
 1473 D1:BFFE 21 00 40 D0         ld  hl,PAGETABLE
 1474 D1:C002 09 -  -  -          add hl,bc
 1475 D1:C003 ED 27 -  -          ld  hl,(hl)
 1476 D1:C005 06 00 -  -          ld  b,0
 1477 D1:C007 4F -  -  -          ld  c,a
 1478 D1:C008 09 -  -  -          add hl,bc   ;full address
 1479 D1:C009 CD 40 AE D1         READ_ACCESS
 1480 D1:C00D E1 -  -  -      pop hl
 1481 D1:C00E 4F -  -  -      ld  c,a
 1482 D1:C00F C3 4A B7 D1     jp  subroutine6502_sbc_combined_end
 1483 D1:C013 -  -  -  -  
 1484 D1:C013 -  -  -  -  ;absolute,X	SBC oper,X	FD	3	4* 
 1485 D1:C013 -  -  -  -  inst6502_sbc_absx:
 1486 D1:C013 ED 33 04 -      ADDCYC(4)
 1487 D1:C016 CD A8 B6 D1     PUSH_ABSXSPLIT
 1488 D1:C01A CD 40 AE D1         READ_ACCESS
 1489 D1:C01E E1 -  -  -      pop hl
 1490 D1:C01F 4F -  -  -      ld  c,a
 1491 D1:C020 C3 4A B7 D1     jp  subroutine6502_sbc_combined_end
 1492 D1:C024 -  -  -  -  
 1493 D1:C024 -  -  -  -  ;absolute,Y	SBC oper,Y	F9	3	4* 
 1494 D1:C024 -  -  -  -  inst6502_sbc_absy:
 1495 D1:C024 ED 33 04 -      ADDCYC(4)
 1496 D1:C027 CD A3 B6 D1     PUSH_ABSYSPLIT
 1497 D1:C02B CD 40 AE D1         READ_ACCESS
 1498 D1:C02F E1 -  -  -      pop hl
 1499 D1:C030 4F -  -  -      ld  c,a
 1500 D1:C031 C3 4A B7 D1     jp  subroutine6502_sbc_combined_end
 1501 D1:C035 -  -  -  -  
 1502 D1:C035 -  -  -  -  ;(indirect,X)	SBC (oper,X)	E1	2	6  
 1503 D1:C035 -  -  -  -  inst6502_sbc_indx:
 1504 D1:C035 ED 33 06 -      ADDCYC(6)
 1505 D1:C038 E5 -  -  -      push hl
 1506 D1:C039 7E -  -  -          ld  a,(hl)
 1507 D1:C03A 21 00 38 D0         ld  hl,ZEROPAGE
 1508 D1:C03E 85 -  -  -          add a,L
 1509 D1:C03F DD 86 01 -          add a,(ix+REGX)
 1510 D1:C042 6F -  -  -          ld  L,a
 1511 D1:C043 7E -  -  -          ld  a,(hl)
 1512 D1:C044 2C -  -  -          inc L
 1513 D1:C045 56 -  -  -          ld  d,(hl)
 1514 D1:C046 42 -  -  -          ld  b,d
 1515 D1:C047 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1516 D1:C049 ED 4C -  -          mlt bc
 1517 D1:C04B 21 00 40 D0         ld  hl,PAGETABLE
 1518 D1:C04F 09 -  -  -          add hl,bc
 1519 D1:C050 ED 27 -  -          ld  hl,(hl)
 1520 D1:C052 06 00 -  -          ld  b,0
 1521 D1:C054 4F -  -  -          ld  c,a
 1522 D1:C055 09 -  -  -          add hl,bc
 1523 D1:C056 CD 40 AE D1         READ_ACCESS
 1524 D1:C05A E1 -  -  -      pop hl
 1525 D1:C05B 4F -  -  -      ld  c,a
 1526 D1:C05C C3 4A B7 D1     jp  subroutine6502_sbc_combined_end
 1527 D1:C060 -  -  -  -  
 1528 D1:C060 -  -  -  -  ;(indirect),Y	SBC (oper),Y	F1	2	5* 
 1529 D1:C060 -  -  -  -  inst6502_sbc_indy:
 1530 D1:C060 ED 33 05 -      ADDCYC(5)
 1531 D1:C063 E5 -  -  -      push hl
 1532 D1:C064 7E -  -  -          ld  a,(hl)
 1533 D1:C065 21 00 38 D0         ld  hl,ZEROPAGE
 1534 D1:C069 85 -  -  -          add a,L
 1535 D1:C06A 6F -  -  -          ld  L,a
 1536 D1:C06B 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1537 D1:C06C 2C -  -  -          inc L
 1538 D1:C06D DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1539 D1:C070 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1540 D1:C071 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1541 D1:C073 FD 23 -  -          ADDCYC(1)
 1542 D1:C075 24 -  -  -          inc h
 1543 D1:C076 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1544 D1:C077 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1545 D1:C079 ED 6C -  -          mlt hl          ;23.
 1546 D1:C07B 01 00 40 D0         ld  bc,PAGETABLE
 1547 D1:C07F 09 -  -  -          add hl,bc
 1548 D1:C080 ED 27 -  -          ld  hl,(hl)     ;address get.
 1549 D1:C082 01 00 00 00         ld  bc,0
 1550 D1:C086 4F -  -  -          ld  c,a
 1551 D1:C087 09 -  -  -          add hl,bc       ;Full address get.
 1552 D1:C088 CD 40 AE D1         READ_ACCESS
 1553 D1:C08C E1 -  -  -      pop hl
 1554 D1:C08D 4F -  -  -      ld  c,a
 1555 D1:C08E C3 4A B7 D1     jp  subroutine6502_sbc_combined_end
 1556 D1:C092 -  -  -  -  
 1557 D1:C092 -  -  -  -  
 1558 D1:C092 -  -  -  -  
 1559 D1:C092 -  -  -  -  ;-----------------------------------------------------------------------------
 1560 D1:C092 -  -  -  -  ;-----------------------------------------------------------------------------
 1561 D1:C092 -  -  -  -  ;-----------------------------------------------------------------------------
 1562 D1:C092 -  -  -  -  ;Instructions by type: Logical Operations
 1563 D1:C092 -  -  -  -  
 1564 D1:C092 -  -  -  -  ;AND - AND Memory with Accumulator
 1565 D1:C092 -  -  -  -  ;A AND M -> A
 1566 D1:C092 -  -  -  -  ;N	Z	C	I	D	V
 1567 D1:C092 -  -  -  -  ;+	+	-	-	-	-
 1568 D1:C092 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1569 D1:C092 -  -  -  -  
 1570 D1:C092 -  -  -  -  ;immediate	AND #oper	29	2	2  
 1571 D1:C092 -  -  -  -  inst6502_and_imm:
 1572 D1:C092 ED 33 02 -      ADDCYC(2)
 1573 D1:C095 7E -  -  -      ld  a,(hl)
 1574 D1:C096 DD A6 00 -      and a,(ix+REGA)
 1575 D1:C099 DD 77 00 -      ld  (ix+REGA),A
 1576 D1:C09C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1577 D1:C0B0 C3 DF B5 D1     jp i6502NextLoad
 1578 D1:C0B4 -  -  -  -  
 1579 D1:C0B4 -  -  -  -  ;zeropage	AND oper	25	2	3  
 1580 D1:C0B4 -  -  -  -  inst6502_and_zp:
 1581 D1:C0B4 ED 33 03 -      ADDCYC(3)
 1582 D1:C0B7 7E -  -  -      ld  a,(hl)
 1583 D1:C0B8 01 00 38 D0     ld  bc,ZEROPAGE
 1584 D1:C0BC 81 -  -  -      add a,c
 1585 D1:C0BD 4F -  -  -      ld  c,a
 1586 D1:C0BE 0A -  -  -      ld  a,(bc)
 1587 D1:C0BF DD A6 00 -      and a,(ix+REGA)
 1588 D1:C0C2 DD 77 00 -      ld  (ix+REGA),A
 1589 D1:C0C5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1590 D1:C0D9 C3 DF B5 D1     jp i6502NextLoad
 1591 D1:C0DD -  -  -  -  
 1592 D1:C0DD -  -  -  -  ;zeropage,X	AND oper,X	35	2	4  
 1593 D1:C0DD -  -  -  -  inst6502_and_zpx:
 1594 D1:C0DD ED 33 04 -      ADDCYC(4)
 1595 D1:C0E0 7E -  -  -      ld  a,(hl)
 1596 D1:C0E1 01 00 38 D0     ld  bc,ZEROPAGE
 1597 D1:C0E5 81 -  -  -      add a,c
 1598 D1:C0E6 DD 86 01 -      add a,(ix+REGX)
 1599 D1:C0E9 4F -  -  -      ld  c,a
 1600 D1:C0EA 0A -  -  -      ld  a,(bc)
 1601 D1:C0EB DD A6 00 -      and a,(ix+REGA)
 1602 D1:C0EE DD 77 00 -      ld  (ix+REGA),A
 1603 D1:C0F1 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1604 D1:C105 C3 DF B5 D1     jp i6502NextLoad
 1605 D1:C109 -  -  -  -  
 1606 D1:C109 -  -  -  -  ;absolute	AND oper	2D	3	4  
 1607 D1:C109 -  -  -  -  inst6502_and_abs:
 1608 D1:C109 ED 33 04 -      ADDCYC(4)
 1609 D1:C10C CD 87 B6 D1     call subroutine6502_abs_split_start
 1610 D1:C110 E5 -  -  -      push hl
 1611 D1:C111 50 -  -  -          ld  d,b
 1612 D1:C112 79 -  -  -          ld  a,c
 1613 D1:C113 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1614 D1:C115 ED 4C -  -          mlt bc
 1615 D1:C117 21 00 40 D0         ld  hl,PAGETABLE
 1616 D1:C11B 09 -  -  -          add hl,bc
 1617 D1:C11C ED 27 -  -          ld  hl,(hl)
 1618 D1:C11E 06 00 -  -          ld  b,0
 1619 D1:C120 4F -  -  -          ld  c,a
 1620 D1:C121 09 -  -  -          add hl,bc   ;full address
 1621 D1:C122 CD 40 AE D1         READ_ACCESS
 1622 D1:C126 E1 -  -  -      pop hl
 1623 D1:C127 DD A6 00 -      and a,(ix+REGA)
 1624 D1:C12A DD 77 00 -      ld  (ix+REGA),A
 1625 D1:C12D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1626 D1:C141 C3 DF B5 D1     jp i6502NextLoad
 1627 D1:C145 -  -  -  -  
 1628 D1:C145 -  -  -  -  ;absolute,X	AND oper,X	3D	3	4* 
 1629 D1:C145 -  -  -  -  inst6502_and_absx:
 1630 D1:C145 ED 33 04 -      ADDCYC(4)
 1631 D1:C148 CD A8 B6 D1     PUSH_ABSXSPLIT
 1632 D1:C14C CD 40 AE D1         READ_ACCESS
 1633 D1:C150 DD A6 00 -          and a,(ix+REGA)
 1634 D1:C153 DD 77 00 -          ld  (ix+REGA),A
 1635 D1:C156 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1636 D1:C16A E1 -  -  -      pop hl
 1637 D1:C16B C3 DF B5 D1     jp i6502NextLoad
 1638 D1:C16F -  -  -  -  
 1639 D1:C16F -  -  -  -  ;absolute,Y	AND oper,Y	39	3	4* 
 1640 D1:C16F -  -  -  -  inst6502_and_absy:
 1641 D1:C16F ED 33 04 -      ADDCYC(4)
 1642 D1:C172 CD A3 B6 D1     PUSH_ABSYSPLIT
 1643 D1:C176 CD 40 AE D1         READ_ACCESS
 1644 D1:C17A E1 -  -  -      pop hl
 1645 D1:C17B DD A6 00 -      and a,(ix+REGA)
 1646 D1:C17E DD 77 00 -      ld  (ix+REGA),A
 1647 D1:C181 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1648 D1:C195 C3 DF B5 D1     jp i6502NextLoad
 1649 D1:C199 -  -  -  -  
 1650 D1:C199 -  -  -  -  ;(indirect,X)	AND (oper,X)	21	2	6  
 1651 D1:C199 -  -  -  -  inst6502_and_indx:
 1652 D1:C199 ED 33 06 -      ADDCYC(6)
 1653 D1:C19C E5 -  -  -      push hl
 1654 D1:C19D 7E -  -  -          ld  a,(hl)
 1655 D1:C19E 21 00 38 D0         ld  hl,ZEROPAGE
 1656 D1:C1A2 85 -  -  -          add a,L
 1657 D1:C1A3 DD 86 01 -          add a,(ix+REGX)
 1658 D1:C1A6 6F -  -  -          ld  L,a
 1659 D1:C1A7 7E -  -  -          ld  a,(hl)
 1660 D1:C1A8 2C -  -  -          inc L
 1661 D1:C1A9 56 -  -  -          ld  d,(hl)
 1662 D1:C1AA 42 -  -  -          ld  b,d
 1663 D1:C1AB 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1664 D1:C1AD ED 4C -  -          mlt bc
 1665 D1:C1AF 21 00 40 D0         ld  hl,PAGETABLE
 1666 D1:C1B3 09 -  -  -          add hl,bc
 1667 D1:C1B4 ED 27 -  -          ld  hl,(hl)
 1668 D1:C1B6 06 00 -  -          ld  b,0
 1669 D1:C1B8 4F -  -  -          ld  c,a
 1670 D1:C1B9 09 -  -  -          add hl,bc
 1671 D1:C1BA CD 40 AE D1         READ_ACCESS
 1672 D1:C1BE E1 -  -  -      pop hl
 1673 D1:C1BF DD A6 00 -      and a,(ix+REGA)
 1674 D1:C1C2 DD 77 00 -      ld  (ix+REGA),A
 1675 D1:C1C5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1676 D1:C1D9 C3 DF B5 D1     jp i6502NextLoad
 1677 D1:C1DD -  -  -  -  
 1678 D1:C1DD -  -  -  -  ;(indirect),Y	AND (oper),Y	31	2	5* 
 1679 D1:C1DD -  -  -  -  inst6502_and_indy:
 1680 D1:C1DD ED 33 05 -      ADDCYC(5)
 1681 D1:C1E0 E5 -  -  -      push hl
 1682 D1:C1E1 7E -  -  -          ld  a,(hl)
 1683 D1:C1E2 21 00 38 D0         ld  hl,ZEROPAGE
 1684 D1:C1E6 85 -  -  -          add a,L
 1685 D1:C1E7 6F -  -  -          ld  L,a
 1686 D1:C1E8 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1687 D1:C1E9 2C -  -  -          inc L
 1688 D1:C1EA DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1689 D1:C1ED 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1690 D1:C1EE 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1691 D1:C1F0 24 -  -  -          inc h
 1692 D1:C1F1 FD 23 -  -          ADDCYC(1)
 1693 D1:C1F3 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1694 D1:C1F4 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1695 D1:C1F6 ED 6C -  -          mlt hl          ;23.
 1696 D1:C1F8 01 00 40 D0         ld  bc,PAGETABLE
 1697 D1:C1FC 09 -  -  -          add hl,bc
 1698 D1:C1FD ED 27 -  -          ld  hl,(hl)     ;address get.
 1699 D1:C1FF 01 00 00 00         ld  bc,0
 1700 D1:C203 4F -  -  -          ld  c,a
 1701 D1:C204 09 -  -  -          add hl,bc       ;Full address get.
 1702 D1:C205 CD 40 AE D1         READ_ACCESS
 1703 D1:C209 E1 -  -  -      pop hl
 1704 D1:C20A DD A6 00 -      and a,(ix+REGA)
 1705 D1:C20D DD 77 00 -      ld  (ix+REGA),A
 1706 D1:C210 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1707 D1:C224 C3 DF B5 D1     jp i6502NextLoad
 1708 D1:C228 -  -  -  -  
 1709 D1:C228 -  -  -  -  ;-----------------------------------------------------------------------------
 1710 D1:C228 -  -  -  -  ;EOR - Exclusive-OR Memory with Accumulator
 1711 D1:C228 -  -  -  -  ;A EOR M -> A
 1712 D1:C228 -  -  -  -  ;N	Z	C	I	D	V
 1713 D1:C228 -  -  -  -  ;+	+	-	-	-	-
 1714 D1:C228 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1715 D1:C228 -  -  -  -  
 1716 D1:C228 -  -  -  -  ;immediate	EOR #oper	49	2	2  
 1717 D1:C228 -  -  -  -  inst6502_eor_imm:
 1718 D1:C228 ED 33 02 -      ADDCYC(2)
 1719 D1:C22B 7E -  -  -      ld  a,(hl)
 1720 D1:C22C DD AE 00 -      xor a,(ix+REGA)
 1721 D1:C22F DD 77 00 -      ld  (ix+REGA),A
 1722 D1:C232 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1723 D1:C246 C3 DF B5 D1     jp i6502NextLoad
 1724 D1:C24A -  -  -  -  
 1725 D1:C24A -  -  -  -  ;zeropage	EOR oper	45	2	3  
 1726 D1:C24A -  -  -  -  inst6502_eor_zp:
 1727 D1:C24A ED 33 03 -      ADDCYC(3)
 1728 D1:C24D 7E -  -  -      ld  a,(hl)
 1729 D1:C24E 01 00 38 D0     ld  bc,ZEROPAGE
 1730 D1:C252 81 -  -  -      add a,c
 1731 D1:C253 4F -  -  -      ld  c,a
 1732 D1:C254 0A -  -  -      ld  a,(bc)
 1733 D1:C255 DD AE 00 -      xor a,(ix+REGA)
 1734 D1:C258 DD 77 00 -      ld  (ix+REGA),A
 1735 D1:C25B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1736 D1:C26F C3 DF B5 D1     jp i6502NextLoad
 1737 D1:C273 -  -  -  -  
 1738 D1:C273 -  -  -  -  
 1739 D1:C273 -  -  -  -  ;zeropage,X	EOR oper,X	55	2	4  
 1740 D1:C273 -  -  -  -  inst6502_eor_zpx:
 1741 D1:C273 ED 33 04 -      ADDCYC(4)
 1742 D1:C276 7E -  -  -      ld  a,(hl)
 1743 D1:C277 01 00 38 D0     ld  bc,ZEROPAGE
 1744 D1:C27B 81 -  -  -      add a,c
 1745 D1:C27C DD 86 01 -      add a,(ix+REGX)
 1746 D1:C27F 4F -  -  -      ld  c,a
 1747 D1:C280 0A -  -  -      ld  a,(bc)
 1748 D1:C281 DD AE 00 -      xor a,(ix+REGA)
 1749 D1:C284 DD 77 00 -      ld  (ix+REGA),A
 1750 D1:C287 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1751 D1:C29B C3 DF B5 D1     jp i6502NextLoad
 1752 D1:C29F -  -  -  -  
 1753 D1:C29F -  -  -  -  ;absolute	EOR oper	4D	3	4  
 1754 D1:C29F -  -  -  -  inst6502_eor_abs:
 1755 D1:C29F ED 33 04 -      ADDCYC(4)
 1756 D1:C2A2 CD 87 B6 D1     call subroutine6502_abs_split_start
 1757 D1:C2A6 E5 -  -  -      push hl
 1758 D1:C2A7 50 -  -  -          ld  d,b
 1759 D1:C2A8 79 -  -  -          ld  a,c
 1760 D1:C2A9 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1761 D1:C2AB ED 4C -  -          mlt bc
 1762 D1:C2AD 21 00 40 D0         ld  hl,PAGETABLE
 1763 D1:C2B1 09 -  -  -          add hl,bc
 1764 D1:C2B2 ED 27 -  -          ld  hl,(hl)
 1765 D1:C2B4 06 00 -  -          ld  b,0
 1766 D1:C2B6 4F -  -  -          ld  c,a
 1767 D1:C2B7 09 -  -  -          add hl,bc   ;full address
 1768 D1:C2B8 CD 40 AE D1         READ_ACCESS
 1769 D1:C2BC E1 -  -  -      pop hl
 1770 D1:C2BD DD AE 00 -      xor a,(ix+REGA)
 1771 D1:C2C0 DD 77 00 -      ld  (ix+REGA),A
 1772 D1:C2C3 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1773 D1:C2D7 C3 DF B5 D1     jp i6502NextLoad
 1774 D1:C2DB -  -  -  -  
 1775 D1:C2DB -  -  -  -  ;absolute,X	EOR oper,X	5D	3	4* 
 1776 D1:C2DB -  -  -  -  inst6502_eor_absx:
 1777 D1:C2DB ED 33 04 -      ADDCYC(4)
 1778 D1:C2DE CD A8 B6 D1     PUSH_ABSXSPLIT
 1779 D1:C2E2 CD 40 AE D1         READ_ACCESS
 1780 D1:C2E6 DD AE 00 -          xor a,(ix+REGA)
 1781 D1:C2E9 DD 77 00 -          ld  (ix+REGA),A
 1782 D1:C2EC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1783 D1:C300 E1 -  -  -      pop hl
 1784 D1:C301 C3 DF B5 D1     jp i6502NextLoad
 1785 D1:C305 -  -  -  -  
 1786 D1:C305 -  -  -  -  ;absolute,Y	EOR oper,Y	59	3	4* 
 1787 D1:C305 -  -  -  -  inst6502_eor_absy:
 1788 D1:C305 ED 33 04 -      ADDCYC(4)
 1789 D1:C308 CD A3 B6 D1     PUSH_ABSYSPLIT
 1790 D1:C30C CD 40 AE D1         READ_ACCESS
 1791 D1:C310 E1 -  -  -      pop hl
 1792 D1:C311 DD AE 00 -      xor a,(ix+REGA)
 1793 D1:C314 DD 77 00 -      ld  (ix+REGA),A
 1794 D1:C317 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1795 D1:C32B C3 DF B5 D1     jp i6502NextLoad
 1796 D1:C32F -  -  -  -  
 1797 D1:C32F -  -  -  -  ;(indirect,X)	EOR (oper,X)	41	2	6  
 1798 D1:C32F -  -  -  -  inst6502_eor_indx:
 1799 D1:C32F ED 33 06 -      ADDCYC(6)
 1800 D1:C332 E5 -  -  -      push hl
 1801 D1:C333 7E -  -  -          ld  a,(hl)
 1802 D1:C334 21 00 38 D0         ld  hl,ZEROPAGE
 1803 D1:C338 85 -  -  -          add a,L
 1804 D1:C339 DD 86 01 -          add a,(ix+REGX)
 1805 D1:C33C 6F -  -  -          ld  L,a
 1806 D1:C33D 7E -  -  -          ld  a,(hl)
 1807 D1:C33E 2C -  -  -          inc L
 1808 D1:C33F 56 -  -  -          ld  d,(hl)
 1809 D1:C340 42 -  -  -          ld  b,d
 1810 D1:C341 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1811 D1:C343 ED 4C -  -          mlt bc
 1812 D1:C345 21 00 40 D0         ld  hl,PAGETABLE
 1813 D1:C349 09 -  -  -          add hl,bc
 1814 D1:C34A ED 27 -  -          ld  hl,(hl)
 1815 D1:C34C 06 00 -  -          ld  b,0
 1816 D1:C34E 4F -  -  -          ld  c,a
 1817 D1:C34F 09 -  -  -          add hl,bc
 1818 D1:C350 CD 40 AE D1         READ_ACCESS
 1819 D1:C354 E1 -  -  -      pop hl
 1820 D1:C355 DD AE 00 -      xor a,(ix+REGA)
 1821 D1:C358 DD 77 00 -      ld  (ix+REGA),A
 1822 D1:C35B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1823 D1:C36F C3 DF B5 D1     jp i6502NextLoad
 1824 D1:C373 -  -  -  -  
 1825 D1:C373 -  -  -  -  ;(indirect),Y	EOR (oper),Y	51	2	5* 
 1826 D1:C373 -  -  -  -  inst6502_eor_indy:
 1827 D1:C373 ED 33 05 -      ADDCYC(5)
 1828 D1:C376 E5 -  -  -      push hl
 1829 D1:C377 7E -  -  -          ld  a,(hl)
 1830 D1:C378 21 00 38 D0         ld  hl,ZEROPAGE
 1831 D1:C37C 85 -  -  -          add a,L
 1832 D1:C37D 6F -  -  -          ld  L,a
 1833 D1:C37E 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1834 D1:C37F 2C -  -  -          inc L
 1835 D1:C380 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1836 D1:C383 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1837 D1:C384 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1838 D1:C386 24 -  -  -          inc h
 1839 D1:C387 FD 23 -  -          ADDCYC(1)
 1840 D1:C389 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1841 D1:C38A 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1842 D1:C38C ED 6C -  -          mlt hl          ;23.
 1843 D1:C38E 01 00 40 D0         ld  bc,PAGETABLE
 1844 D1:C392 09 -  -  -          add hl,bc
 1845 D1:C393 ED 27 -  -          ld  hl,(hl)     ;address get.
 1846 D1:C395 01 00 00 00         ld  bc,0
 1847 D1:C399 4F -  -  -          ld  c,a
 1848 D1:C39A 09 -  -  -          add hl,bc       ;Full address get.
 1849 D1:C39B CD 40 AE D1         READ_ACCESS
 1850 D1:C39F E1 -  -  -      pop hl
 1851 D1:C3A0 DD AE 00 -      xor a,(ix+REGA)
 1852 D1:C3A3 DD 77 00 -      ld  (ix+REGA),A
 1853 D1:C3A6 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1854 D1:C3BA C3 DF B5 D1     jp i6502NextLoad
 1855 D1:C3BE -  -  -  -  
 1856 D1:C3BE -  -  -  -  ;-----------------------------------------------------------------------------
 1857 D1:C3BE -  -  -  -  ;ORA - OR Memory with Accumulator
 1858 D1:C3BE -  -  -  -  ;A OR M -> A
 1859 D1:C3BE -  -  -  -  ;N	Z	C	I	D	V
 1860 D1:C3BE -  -  -  -  ;+	+	-	-	-	-
 1861 D1:C3BE -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1862 D1:C3BE -  -  -  -  
 1863 D1:C3BE -  -  -  -  ;immediate	ORA #oper	09	2	2  
 1864 D1:C3BE -  -  -  -  inst6502_ora_imm:
 1865 D1:C3BE ED 33 02 -      ADDCYC(2)
 1866 D1:C3C1 7E -  -  -      ld  a,(hl)
 1867 D1:C3C2 DD B6 00 -      or  a,(ix+REGA)
 1868 D1:C3C5 DD 77 00 -      ld  (ix+REGA),A
 1869 D1:C3C8 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1870 D1:C3DC C3 DF B5 D1     jp i6502NextLoad
 1871 D1:C3E0 -  -  -  -  
 1872 D1:C3E0 -  -  -  -  ;zeropage	ORA oper	05	2	3  
 1873 D1:C3E0 -  -  -  -  inst6502_ora_zp:
 1874 D1:C3E0 ED 33 03 -      ADDCYC(3)
 1875 D1:C3E3 7E -  -  -      ld  a,(hl)
 1876 D1:C3E4 01 00 38 D0     ld  bc,ZEROPAGE
 1877 D1:C3E8 81 -  -  -      add a,c
 1878 D1:C3E9 4F -  -  -      ld  c,a
 1879 D1:C3EA 0A -  -  -      ld  a,(bc)
 1880 D1:C3EB DD B6 00 -      or  a,(ix+REGA)
 1881 D1:C3EE DD 77 00 -      ld  (ix+REGA),A
 1882 D1:C3F1 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1883 D1:C405 C3 DF B5 D1     jp i6502NextLoad
 1884 D1:C409 -  -  -  -  
 1885 D1:C409 -  -  -  -  ;zeropage,X	ORA oper,X	15	2	4  
 1886 D1:C409 -  -  -  -  inst6502_ora_zpx:
 1887 D1:C409 ED 33 04 -      ADDCYC(4)
 1888 D1:C40C 7E -  -  -      ld  a,(hl)
 1889 D1:C40D 01 00 38 D0     ld  bc,ZEROPAGE
 1890 D1:C411 81 -  -  -      add a,c
 1891 D1:C412 DD 86 01 -      add a,(ix+REGX)
 1892 D1:C415 4F -  -  -      ld  c,a
 1893 D1:C416 0A -  -  -      ld  a,(bc)
 1894 D1:C417 DD B6 00 -      or  a,(ix+REGA)
 1895 D1:C41A DD 77 00 -      ld  (ix+REGA),A
 1896 D1:C41D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1897 D1:C431 C3 DF B5 D1     jp i6502NextLoad
 1898 D1:C435 -  -  -  -  
 1899 D1:C435 -  -  -  -  ;absolute	ORA oper	0D	3	4  
 1900 D1:C435 -  -  -  -  inst6502_ora_abs:
 1901 D1:C435 ED 33 04 -      ADDCYC(4)
 1902 D1:C438 CD 87 B6 D1     call subroutine6502_abs_split_start
 1903 D1:C43C E5 -  -  -      push hl
 1904 D1:C43D 50 -  -  -          ld  d,b
 1905 D1:C43E 79 -  -  -          ld  a,c
 1906 D1:C43F 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1907 D1:C441 ED 4C -  -          mlt bc
 1908 D1:C443 21 00 40 D0         ld  hl,PAGETABLE
 1909 D1:C447 09 -  -  -          add hl,bc
 1910 D1:C448 ED 27 -  -          ld  hl,(hl)
 1911 D1:C44A 06 00 -  -          ld  b,0
 1912 D1:C44C 4F -  -  -          ld  c,a
 1913 D1:C44D 09 -  -  -          add hl,bc   ;full address
 1914 D1:C44E CD 40 AE D1         READ_ACCESS
 1915 D1:C452 E1 -  -  -      pop hl
 1916 D1:C453 DD B6 00 -      or  a,(ix+REGA)
 1917 D1:C456 DD 77 00 -      ld  (ix+REGA),A
 1918 D1:C459 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1919 D1:C46D C3 DF B5 D1     jp i6502NextLoad
 1920 D1:C471 -  -  -  -  
 1921 D1:C471 -  -  -  -  ;absolute,X	ORA oper,X	1D	3	4* 
 1922 D1:C471 -  -  -  -  inst6502_ora_absx:
 1923 D1:C471 ED 33 04 -      ADDCYC(4)
 1924 D1:C474 CD A8 B6 D1     PUSH_ABSXSPLIT
 1925 D1:C478 CD 40 AE D1         READ_ACCESS
 1926 D1:C47C DD B6 00 -          or  a,(ix+REGA)
 1927 D1:C47F DD 77 00 -          ld  (ix+REGA),A
 1928 D1:C482 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1929 D1:C496 E1 -  -  -      pop hl
 1930 D1:C497 C3 DF B5 D1     jp i6502NextLoad
 1931 D1:C49B -  -  -  -  
 1932 D1:C49B -  -  -  -  ;absolute,Y	ORA oper,Y	19	3	4* 
 1933 D1:C49B -  -  -  -  inst6502_ora_absy:
 1934 D1:C49B ED 33 04 -      ADDCYC(4)
 1935 D1:C49E CD A3 B6 D1     PUSH_ABSYSPLIT
 1936 D1:C4A2 CD 40 AE D1         READ_ACCESS
 1937 D1:C4A6 E1 -  -  -      pop hl
 1938 D1:C4A7 DD B6 00 -      or  a,(ix+REGA)
 1939 D1:C4AA DD 77 00 -      ld  (ix+REGA),A
 1940 D1:C4AD DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1941 D1:C4C1 C3 DF B5 D1     jp i6502NextLoad
 1942 D1:C4C5 -  -  -  -  
 1943 D1:C4C5 -  -  -  -  ;(indirect,X)	ORA (oper,X)	01	2	6  
 1944 D1:C4C5 -  -  -  -  inst6502_ora_indx:
 1945 D1:C4C5 ED 33 06 -      ADDCYC(6)
 1946 D1:C4C8 E5 -  -  -      push hl
 1947 D1:C4C9 7E -  -  -          ld  a,(hl)
 1948 D1:C4CA 21 00 38 D0         ld  hl,ZEROPAGE
 1949 D1:C4CE 85 -  -  -          add a,L
 1950 D1:C4CF DD 86 01 -          add a,(ix+REGX)
 1951 D1:C4D2 6F -  -  -          ld  L,a
 1952 D1:C4D3 7E -  -  -          ld  a,(hl)
 1953 D1:C4D4 2C -  -  -          inc L
 1954 D1:C4D5 56 -  -  -          ld  d,(hl)
 1955 D1:C4D6 42 -  -  -          ld  b,d
 1956 D1:C4D7 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1957 D1:C4D9 ED 4C -  -          mlt bc
 1958 D1:C4DB 21 00 40 D0         ld  hl,PAGETABLE
 1959 D1:C4DF 09 -  -  -          add hl,bc
 1960 D1:C4E0 ED 27 -  -          ld  hl,(hl)
 1961 D1:C4E2 06 00 -  -          ld  b,0
 1962 D1:C4E4 4F -  -  -          ld  c,a
 1963 D1:C4E5 09 -  -  -          add hl,bc
 1964 D1:C4E6 CD 40 AE D1         READ_ACCESS
 1965 D1:C4EA E1 -  -  -      pop hl
 1966 D1:C4EB DD B6 00 -      or  a,(ix+REGA)
 1967 D1:C4EE DD 77 00 -      ld  (ix+REGA),A
 1968 D1:C4F1 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1969 D1:C505 C3 DF B5 D1     jp i6502NextLoad
 1970 D1:C509 -  -  -  -  
 1971 D1:C509 -  -  -  -  ;(indirect),Y	ORA (oper),Y	11	2	5* 
 1972 D1:C509 -  -  -  -  inst6502_ora_indy:
 1973 D1:C509 ED 33 05 -      ADDCYC(5)
 1974 D1:C50C E5 -  -  -      push hl
 1975 D1:C50D 7E -  -  -          ld  a,(hl)
 1976 D1:C50E 21 00 38 D0         ld  hl,ZEROPAGE
 1977 D1:C512 85 -  -  -          add a,L
 1978 D1:C513 6F -  -  -          ld  L,a
 1979 D1:C514 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1980 D1:C515 2C -  -  -          inc L
 1981 D1:C516 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1982 D1:C519 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1983 D1:C51A 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1984 D1:C51C 24 -  -  -          inc h
 1985 D1:C51D FD 23 -  -          ADDCYC(1)
 1986 D1:C51F 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1987 D1:C520 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1988 D1:C522 ED 6C -  -          mlt hl          ;23.
 1989 D1:C524 01 00 40 D0         ld  bc,PAGETABLE
 1990 D1:C528 09 -  -  -          add hl,bc
 1991 D1:C529 ED 27 -  -          ld  hl,(hl)     ;address get.
 1992 D1:C52B 01 00 00 00         ld  bc,0
 1993 D1:C52F 4F -  -  -          ld  c,a
 1994 D1:C530 09 -  -  -          add hl,bc       ;Full address get.
 1995 D1:C531 CD 40 AE D1         READ_ACCESS
 1996 D1:C535 E1 -  -  -      pop hl
 1997 D1:C536 DD B6 00 -      or  a,(ix+REGA)
 1998 D1:C539 DD 77 00 -      ld  (ix+REGA),A
 1999 D1:C53C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2000 D1:C550 C3 DF B5 D1     jp i6502NextLoad
 2001 D1:C554 -  -  -  -  
 2002 D1:C554 -  -  -  -  ;-----------------------------------------------------------------------------
 2003 D1:C554 -  -  -  -  ;-----------------------------------------------------------------------------
 2004 D1:C554 -  -  -  -  ;-----------------------------------------------------------------------------
 2005 D1:C554 -  -  -  -  ;Instructions by type: Shift & Rotate Instructions
 2006 D1:C554 -  -  -  -  ;ASL - Shift Left One Bit (Memory or Accumulator)
 2007 D1:C554 -  -  -  -  ;C <- [76543210] <- 0
 2008 D1:C554 -  -  -  -  ;N	Z	C	I	D	V
 2009 D1:C554 -  -  -  -  ;+	+	+	-	-	-
 2010 D1:C554 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2011 D1:C554 -  -  -  -  
 2012 D1:C554 -  -  -  -  ;accumulator	ASL A	0A	1	2  
 2013 D1:C554 -  -  -  -  inst6502_asl:
 2014 D1:C554 ED 33 02 -      ADDCYC(2)
 2015 D1:C557 DD 7E 00 -      ld  a,(ix+REGA)
 2016 D1:C55A CB 27 -  -      sla a
 2017 D1:C55C DD 77 00 -      ld  (ix+REGA),a
 2018 D1:C55F DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2019 D1:C579 C3 F8 B5 D1     jp i6502FinishLoad
 2020 D1:C57D -  -  -  -  
 2021 D1:C57D -  -  -  -  ;zeropage	ASL oper	06	2	5  
 2022 D1:C57D -  -  -  -  inst6502_asl_zp:
 2023 D1:C57D ED 33 05 -      ADDCYC(5)
 2024 D1:C580 7E -  -  -      ld  a,(hl)
 2025 D1:C581 01 00 38 D0     ld  bc,ZEROPAGE
 2026 D1:C585 81 -  -  -      add a,c
 2027 D1:C586 4F -  -  -      ld  c,a
 2028 D1:C587 0A -  -  -      ld  a,(bc)
 2029 D1:C588 CB 27 -  -      sla a
 2030 D1:C58A 02 -  -  -      ld  (bc),a
 2031 D1:C58B DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2032 D1:C5A5 C3 DF B5 D1     jp i6502NextLoad
 2033 D1:C5A9 -  -  -  -  
 2034 D1:C5A9 -  -  -  -  ;zeropage,X	ASL oper,X	16	2	6  
 2035 D1:C5A9 -  -  -  -  inst6502_asl_zpx:
 2036 D1:C5A9 ED 33 06 -      ADDCYC(6)
 2037 D1:C5AC 7E -  -  -      ld  a,(hl)
 2038 D1:C5AD 01 00 38 D0     ld  bc,ZEROPAGE
 2039 D1:C5B1 81 -  -  -      add a,c
 2040 D1:C5B2 DD 86 01 -      add a,(ix+REGX)
 2041 D1:C5B5 4F -  -  -      ld  c,a
 2042 D1:C5B6 0A -  -  -      ld  a,(bc)
 2043 D1:C5B7 CB 27 -  -      sla a
 2044 D1:C5B9 02 -  -  -      ld  (bc),a
 2045 D1:C5BA DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2046 D1:C5D4 C3 DF B5 D1     jp i6502NextLoad
 2047 D1:C5D8 -  -  -  -  
 2048 D1:C5D8 -  -  -  -  ;absolute	ASL oper	0E	3	6  
 2049 D1:C5D8 -  -  -  -  inst6502_asl_abs:
 2050 D1:C5D8 ED 33 06 -      ADDCYC(6)
 2051 D1:C5DB CD 87 B6 D1     call subroutine6502_abs_split_start
 2052 D1:C5DF E5 -  -  -      push hl
 2053 D1:C5E0 50 -  -  -          ld  d,b
 2054 D1:C5E1 79 -  -  -          ld  a,c
 2055 D1:C5E2 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2056 D1:C5E4 ED 4C -  -          mlt bc
 2057 D1:C5E6 21 00 40 D0         ld  hl,PAGETABLE
 2058 D1:C5EA 09 -  -  -          add hl,bc
 2059 D1:C5EB ED 27 -  -          ld  hl,(hl)
 2060 D1:C5ED 06 00 -  -          ld  b,0
 2061 D1:C5EF 4F -  -  -          ld  c,a
 2062 D1:C5F0 09 -  -  -          add hl,bc   ;full address
 2063 D1:C5F1 CD 40 AE D1         READ_ACCESS
 2064 D1:C5F5 CB 27 -  -          sla a
 2065 D1:C5F7 4F -  -  -          ld  c,a
 2066 D1:C5F8 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2067 D1:C612 41 -  -  -          ld  b,c
 2068 D1:C613 CD 63 AE D1         WRITE_ACCESS
 2069 D1:C617 E1 -  -  -      pop hl
 2070 D1:C618 C3 DF B5 D1     jp i6502NextLoad
 2071 D1:C61C -  -  -  -  
 2072 D1:C61C -  -  -  -  ;absolute,X	ASL oper,X	1E	3	7  
 2073 D1:C61C -  -  -  -  inst6502_asl_absx:
 2074 D1:C61C ED 33 07 -      ADDCYC(7)
 2075 D1:C61F CD E4 B6 D1     PUSH_ABSXSPLIT_NODEP
 2076 D1:C623 CD 40 AE D1         READ_ACCESS
 2077 D1:C627 CB 27 -  -          sla a
 2078 D1:C629 4F -  -  -          ld  c,a
 2079 D1:C62A DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2080 D1:C644 41 -  -  -          ld  b,c
 2081 D1:C645 CD 63 AE D1         WRITE_ACCESS
 2082 D1:C649 E1 -  -  -      pop hl
 2083 D1:C64A C3 DF B5 D1     jp i6502NextLoad
 2084 D1:C64E -  -  -  -  
 2085 D1:C64E -  -  -  -  ;-----------------------------------------------------------------------------
 2086 D1:C64E -  -  -  -  ;LSR - Shift One Bit Right (Memory or Accumulator)
 2087 D1:C64E -  -  -  -  ;0 -> [76543210] -> C
 2088 D1:C64E -  -  -  -  ;N	Z	C	I	D	V
 2089 D1:C64E -  -  -  -  ;0	+	+	-	-	-
 2090 D1:C64E -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2091 D1:C64E -  -  -  -  
 2092 D1:C64E -  -  -  -  ;accumulator	LSR A	4A	1	2  
 2093 D1:C64E -  -  -  -  inst6502_lsr:
 2094 D1:C64E ED 33 02 -      ADDCYC(2)
 2095 D1:C651 DD 7E 00 -      ld  a,(ix+REGA)
 2096 D1:C654 CB 3F -  -      srl a
 2097 D1:C656 DD 77 00 -      ld  (ix+REGA),a
 2098 D1:C659 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2099 D1:C673 C3 F8 B5 D1     jp i6502FinishLoad
 2100 D1:C677 -  -  -  -  
 2101 D1:C677 -  -  -  -  ;zeropage	LSR oper	46	2	5  
 2102 D1:C677 -  -  -  -  inst6502_lsr_zp:
 2103 D1:C677 ED 33 05 -      ADDCYC(5)
 2104 D1:C67A 7E -  -  -      ld  a,(hl)
 2105 D1:C67B 01 00 38 D0     ld  bc,ZEROPAGE
 2106 D1:C67F 81 -  -  -      add a,c
 2107 D1:C680 4F -  -  -      ld  c,a
 2108 D1:C681 0A -  -  -      ld  a,(bc)
 2109 D1:C682 CB 3F -  -      srl a
 2110 D1:C684 02 -  -  -      ld  (bc),a
 2111 D1:C685 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2112 D1:C69F C3 DF B5 D1     jp i6502NextLoad
 2113 D1:C6A3 -  -  -  -  
 2114 D1:C6A3 -  -  -  -  ;zeropage,X	LSR oper,X	56	2	6  
 2115 D1:C6A3 -  -  -  -  inst6502_lsr_zpx:
 2116 D1:C6A3 ED 33 06 -      ADDCYC(6)
 2117 D1:C6A6 7E -  -  -      ld  a,(hl)
 2118 D1:C6A7 01 00 38 D0     ld  bc,ZEROPAGE
 2119 D1:C6AB 81 -  -  -      add a,c
 2120 D1:C6AC DD 86 01 -      add a,(ix+REGX)
 2121 D1:C6AF 4F -  -  -      ld  c,a
 2122 D1:C6B0 0A -  -  -      ld  a,(bc)
 2123 D1:C6B1 CB 3F -  -      srl a
 2124 D1:C6B3 02 -  -  -      ld  (bc),a
 2125 D1:C6B4 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2126 D1:C6CE C3 DF B5 D1     jp i6502NextLoad
 2127 D1:C6D2 -  -  -  -      
 2128 D1:C6D2 -  -  -  -  ;absolute	LSR oper	4E	3	6  
 2129 D1:C6D2 -  -  -  -  inst6502_lsr_abs:
 2130 D1:C6D2 ED 33 06 -      ADDCYC(6)
 2131 D1:C6D5 CD 87 B6 D1     call subroutine6502_abs_split_start
 2132 D1:C6D9 E5 -  -  -      push hl
 2133 D1:C6DA 50 -  -  -          ld  d,b
 2134 D1:C6DB 79 -  -  -          ld  a,c
 2135 D1:C6DC 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2136 D1:C6DE ED 4C -  -          mlt bc
 2137 D1:C6E0 21 00 40 D0         ld  hl,PAGETABLE
 2138 D1:C6E4 09 -  -  -          add hl,bc
 2139 D1:C6E5 ED 27 -  -          ld  hl,(hl)
 2140 D1:C6E7 06 00 -  -          ld  b,0
 2141 D1:C6E9 4F -  -  -          ld  c,a
 2142 D1:C6EA 09 -  -  -          add hl,bc   ;full address
 2143 D1:C6EB CD 40 AE D1         READ_ACCESS
 2144 D1:C6EF CB 3F -  -          srl a
 2145 D1:C6F1 4F -  -  -          ld  c,a
 2146 D1:C6F2 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2147 D1:C70C 41 -  -  -          ld  b,c
 2148 D1:C70D CD 63 AE D1         WRITE_ACCESS
 2149 D1:C711 E1 -  -  -      pop hl
 2150 D1:C712 C3 DF B5 D1     jp i6502NextLoad
 2151 D1:C716 -  -  -  -  
 2152 D1:C716 -  -  -  -  ;absolute,X	LSR oper,X	5E	3	7  
 2153 D1:C716 -  -  -  -  inst6502_lsr_absx:
 2154 D1:C716 ED 33 07 -      ADDCYC(7)
 2155 D1:C719 CD E4 B6 D1     PUSH_ABSXSPLIT_NODEP
 2156 D1:C71D CD 40 AE D1         READ_ACCESS
 2157 D1:C721 CB 3F -  -          srl a
 2158 D1:C723 4F -  -  -          ld  c,a
 2159 D1:C724 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2160 D1:C73E 41 -  -  -          ld  b,c
 2161 D1:C73F CD 63 AE D1         WRITE_ACCESS
 2162 D1:C743 E1 -  -  -      pop hl
 2163 D1:C744 C3 DF B5 D1     jp i6502NextLoad
 2164 D1:C748 -  -  -  -  
 2165 D1:C748 -  -  -  -  ;-----------------------------------------------------------------------------
 2166 D1:C748 -  -  -  -  ;ROL - Rotate One Bit Left (Memory or Accumulator)
 2167 D1:C748 -  -  -  -  ;C <- [76543210] <- C
 2168 D1:C748 -  -  -  -  ;N	Z	C	I	D	V
 2169 D1:C748 -  -  -  -  ;+	+	+	-	-	-
 2170 D1:C748 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2171 D1:C748 -  -  -  -  
 2172 D1:C748 -  -  -  -  ;accumulator	ROL A	2A	1	2  
 2173 D1:C748 -  -  -  -  inst6502_rol:
 2174 D1:C748 ED 33 02 -      ADDCYC(2)
 2175 D1:C74B DD 7E 04 -      ld  a,(ix+REGSR)
 2176 D1:C74E 1F -  -  -      rra
 2177 D1:C74F DD CB 00 16     rl  (ix+REGA)
 2178 D1:C753 DD 7E 00 -      ld  a,(ix+REGA)
 2179 D1:C756 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2180 D1:C770 C3 F8 B5 D1     jp i6502FinishLoad
 2181 D1:C774 -  -  -  -  
 2182 D1:C774 -  -  -  -  ;zeropage	ROL oper	26	2	5  
 2183 D1:C774 -  -  -  -  inst6502_rol_zp:
 2184 D1:C774 ED 33 05 -      ADDCYC(5)
 2185 D1:C777 7E -  -  -      ld  a,(hl)
 2186 D1:C778 01 00 38 D0     ld  bc,ZEROPAGE
 2187 D1:C77C 81 -  -  -      add a,c
 2188 D1:C77D 4F -  -  -      ld  c,a
 2189 D1:C77E DD 7E 04 -      ld  a,(ix+REGSR)
 2190 D1:C781 1F -  -  -      rra
 2191 D1:C782 0A -  -  -      ld  a,(bc)
 2192 D1:C783 17 -  -  -      rla
 2193 D1:C784 02 -  -  -      ld  (bc),a
 2194 D1:C785 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2195 D1:C79F C3 DF B5 D1     jp i6502NextLoad
 2196 D1:C7A3 -  -  -  -  
 2197 D1:C7A3 -  -  -  -  ;zeropage,X	ROL oper,X	36	2	6  
 2198 D1:C7A3 -  -  -  -  inst6502_rol_zpx:
 2199 D1:C7A3 ED 33 06 -      ADDCYC(6)
 2200 D1:C7A6 7E -  -  -      ld  a,(hl)
 2201 D1:C7A7 01 00 38 D0     ld  bc,ZEROPAGE
 2202 D1:C7AB 81 -  -  -      add a,c
 2203 D1:C7AC DD 86 01 -      add a,(ix+REGX)
 2204 D1:C7AF 4F -  -  -      ld  c,a
 2205 D1:C7B0 DD 7E 04 -      ld  a,(ix+REGSR)
 2206 D1:C7B3 1F -  -  -      rra
 2207 D1:C7B4 0A -  -  -      ld  a,(bc)
 2208 D1:C7B5 17 -  -  -      rla
 2209 D1:C7B6 02 -  -  -      ld  (bc),a
 2210 D1:C7B7 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2211 D1:C7D1 C3 DF B5 D1     jp i6502NextLoad
 2212 D1:C7D5 -  -  -  -  
 2213 D1:C7D5 -  -  -  -  ;absolute	ROL oper	2E	3	6  
 2214 D1:C7D5 -  -  -  -  inst6502_rol_abs:
 2215 D1:C7D5 ED 33 06 -      ADDCYC(6)
 2216 D1:C7D8 CD 87 B6 D1     call subroutine6502_abs_split_start
 2217 D1:C7DC E5 -  -  -      push hl
 2218 D1:C7DD 50 -  -  -          ld  d,b
 2219 D1:C7DE 79 -  -  -          ld  a,c
 2220 D1:C7DF 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2221 D1:C7E1 ED 4C -  -          mlt bc
 2222 D1:C7E3 21 00 40 D0         ld  hl,PAGETABLE
 2223 D1:C7E7 09 -  -  -          add hl,bc
 2224 D1:C7E8 ED 27 -  -          ld  hl,(hl)
 2225 D1:C7EA 06 00 -  -          ld  b,0
 2226 D1:C7EC 4F -  -  -          ld  c,a
 2227 D1:C7ED 09 -  -  -          add hl,bc   ;full address
 2228 D1:C7EE CD 40 AE D1         READ_ACCESS
 2229 D1:C7F2 DD 46 04 -          ld  b,(ix+REGSR)
 2230 D1:C7F5 CB 18 -  -          rr b
 2231 D1:C7F7 17 -  -  -          rla
 2232 D1:C7F8 4F -  -  -          ld  c,a
 2233 D1:C7F9 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2234 D1:C813 41 -  -  -          ld  b,c
 2235 D1:C814 CD 63 AE D1         WRITE_ACCESS
 2236 D1:C818 E1 -  -  -      pop hl
 2237 D1:C819 C3 DF B5 D1     jp i6502NextLoad
 2238 D1:C81D -  -  -  -  
 2239 D1:C81D -  -  -  -  ;absolute,X	ROL oper,X	3E	3	7  
 2240 D1:C81D -  -  -  -  inst6502_rol_absx:
 2241 D1:C81D ED 33 07 -      ADDCYC(7)
 2242 D1:C820 CD E4 B6 D1     PUSH_ABSXSPLIT_NODEP
 2243 D1:C824 CD 40 AE D1         READ_ACCESS
 2244 D1:C828 DD 46 04 -          ld  b,(ix+REGSR)
 2245 D1:C82B CB 18 -  -          rr b
 2246 D1:C82D 17 -  -  -          rla
 2247 D1:C82E 4F -  -  -          ld  c,a
 2248 D1:C82F DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2249 D1:C849 41 -  -  -          ld  b,c
 2250 D1:C84A CD 63 AE D1         WRITE_ACCESS
 2251 D1:C84E E1 -  -  -      pop hl
 2252 D1:C84F C3 DF B5 D1     jp i6502NextLoad
 2253 D1:C853 -  -  -  -  
 2254 D1:C853 -  -  -  -  ;-----------------------------------------------------------------------------
 2255 D1:C853 -  -  -  -  ;ROR - Rotate One Bit Right (Memory or Accumulator)
 2256 D1:C853 -  -  -  -  ;C -> [76543210] -> C
 2257 D1:C853 -  -  -  -  ;N	Z	C	I	D	V
 2258 D1:C853 -  -  -  -  ;+	+	+	-	-	-
 2259 D1:C853 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2260 D1:C853 -  -  -  -  
 2261 D1:C853 -  -  -  -  ;accumulator	ROR A	6A	1	2  
 2262 D1:C853 -  -  -  -  inst6502_ror:
 2263 D1:C853 ED 33 02 -      ADDCYC(2)
 2264 D1:C856 DD 7E 04 -      ld  a,(ix+REGSR)
 2265 D1:C859 1F -  -  -      rra
 2266 D1:C85A DD CB 00 1E     rr  (ix+REGA)
 2267 D1:C85E DD 7E 00 -      ld  a,(ix+REGA)
 2268 D1:C861 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2269 D1:C87B C3 F8 B5 D1     jp i6502FinishLoad
 2270 D1:C87F -  -  -  -  
 2271 D1:C87F -  -  -  -  ;zeropage	ROR oper	66	2	5  
 2272 D1:C87F -  -  -  -  inst6502_ror_zp:
 2273 D1:C87F ED 33 05 -      ADDCYC(5)
 2274 D1:C882 7E -  -  -      ld  a,(hl)
 2275 D1:C883 01 00 38 D0     ld  bc,ZEROPAGE
 2276 D1:C887 81 -  -  -      add a,c
 2277 D1:C888 4F -  -  -      ld  c,a
 2278 D1:C889 DD 7E 04 -      ld  a,(ix+REGSR)
 2279 D1:C88C 1F -  -  -      rra
 2280 D1:C88D 0A -  -  -      ld  a,(bc)
 2281 D1:C88E 1F -  -  -      rra
 2282 D1:C88F 02 -  -  -      ld  (bc),a
 2283 D1:C890 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2284 D1:C8AA C3 DF B5 D1     jp i6502NextLoad
 2285 D1:C8AE -  -  -  -  
 2286 D1:C8AE -  -  -  -  ;zeropage,X	ROR oper,X	76	2	6  
 2287 D1:C8AE -  -  -  -  inst6502_ror_zpx:
 2288 D1:C8AE ED 33 06 -      ADDCYC(6)
 2289 D1:C8B1 7E -  -  -      ld  a,(hl)
 2290 D1:C8B2 01 00 38 D0     ld  bc,ZEROPAGE
 2291 D1:C8B6 81 -  -  -      add a,c
 2292 D1:C8B7 DD 86 01 -      add a,(ix+REGX)
 2293 D1:C8BA 4F -  -  -      ld  c,a
 2294 D1:C8BB DD 7E 04 -      ld  a,(ix+REGSR)
 2295 D1:C8BE 1F -  -  -      rra
 2296 D1:C8BF 0A -  -  -      ld  a,(bc)
 2297 D1:C8C0 1F -  -  -      rra
 2298 D1:C8C1 02 -  -  -      ld  (bc),a
 2299 D1:C8C2 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2300 D1:C8DC C3 DF B5 D1     jp i6502NextLoad
 2301 D1:C8E0 -  -  -  -  
 2302 D1:C8E0 -  -  -  -  ;absolute	ROR oper	6E	3	6  
 2303 D1:C8E0 -  -  -  -  inst6502_ror_abs:
 2304 D1:C8E0 ED 33 06 -      ADDCYC(6)
 2305 D1:C8E3 CD 87 B6 D1     call subroutine6502_abs_split_start
 2306 D1:C8E7 E5 -  -  -      push hl
 2307 D1:C8E8 50 -  -  -          ld  d,b
 2308 D1:C8E9 79 -  -  -          ld  a,c
 2309 D1:C8EA 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2310 D1:C8EC ED 4C -  -          mlt bc
 2311 D1:C8EE 21 00 40 D0         ld  hl,PAGETABLE
 2312 D1:C8F2 09 -  -  -          add hl,bc
 2313 D1:C8F3 ED 27 -  -          ld  hl,(hl)
 2314 D1:C8F5 06 00 -  -          ld  b,0
 2315 D1:C8F7 4F -  -  -          ld  c,a
 2316 D1:C8F8 09 -  -  -          add hl,bc   ;full address
 2317 D1:C8F9 CD 40 AE D1         READ_ACCESS
 2318 D1:C8FD DD 46 04 -          ld  b,(ix+REGSR)
 2319 D1:C900 CB 18 -  -          rr b
 2320 D1:C902 1F -  -  -          rra
 2321 D1:C903 4F -  -  -          ld  c,a
 2322 D1:C904 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2323 D1:C91E 41 -  -  -          ld  b,c
 2324 D1:C91F CD 63 AE D1         WRITE_ACCESS
 2325 D1:C923 E1 -  -  -      pop hl
 2326 D1:C924 C3 DF B5 D1     jp i6502NextLoad
 2327 D1:C928 -  -  -  -  
 2328 D1:C928 -  -  -  -  ;absolute,X	ROR oper,X	7E	3	7  
 2329 D1:C928 -  -  -  -  inst6502_ror_absx:
 2330 D1:C928 ED 33 07 -      ADDCYC(7)
 2331 D1:C92B CD E4 B6 D1     PUSH_ABSXSPLIT_NODEP
 2332 D1:C92F CD 40 AE D1         READ_ACCESS
 2333 D1:C933 DD 46 04 -          ld  b,(ix+REGSR)
 2334 D1:C936 CB 18 -  -          rr b
 2335 D1:C938 1F -  -  -          rra
 2336 D1:C939 4F -  -  -          ld  c,a
 2337 D1:C93A DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2338 D1:C954 41 -  -  -          ld  b,c
 2339 D1:C955 CD 63 AE D1         WRITE_ACCESS
 2340 D1:C959 E1 -  -  -      pop hl
 2341 D1:C95A C3 DF B5 D1     jp i6502NextLoad
 2342 D1:C95E -  -  -  -  
 2343 D1:C95E -  -  -  -  ;-----------------------------------------------------------------------------
 2344 D1:C95E -  -  -  -  ;-----------------------------------------------------------------------------
 2345 D1:C95E -  -  -  -  ;-----------------------------------------------------------------------------
 2346 D1:C95E -  -  -  -  ;Instructions by type: Flag Instructions
 2347 D1:C95E -  -  -  -  
 2348 D1:C95E -  -  -  -  ;CLC - Clear Carry Flag
 2349 D1:C95E -  -  -  -  ;0 -> C
 2350 D1:C95E -  -  -  -  ;N	Z	C	I	D	V
 2351 D1:C95E -  -  -  -  ;-	-	0	-	-	-
 2352 D1:C95E -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2353 D1:C95E -  -  -  -  ;implied	CLC	18	1	2  
 2354 D1:C95E -  -  -  -  inst6502_clc:
 2355 D1:C95E ED 33 02 -      ADDCYC(2)
 2356 D1:C961 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 2357 D1:C965 C3 F8 B5 D1     jp  i6502FinishLoad
 2358 D1:C969 -  -  -  -  
 2359 D1:C969 -  -  -  -  ;CLD - Clear Decimal Mode
 2360 D1:C969 -  -  -  -  ;0 -> D
 2361 D1:C969 -  -  -  -  ;N	Z	C	I	D	V
 2362 D1:C969 -  -  -  -  ;-	-	-	-	0	-
 2363 D1:C969 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2364 D1:C969 -  -  -  -  ;implied	CLD	D8	1	2  
 2365 D1:C969 -  -  -  -  inst6502_cld:
 2366 D1:C969 ED 33 02 -      ADDCYC(2)
 2367 D1:C96C DD CB 04 9E     res SF_DEC,(ix+REGSR)
 2368 D1:C970 C3 F8 B5 D1     jp  i6502FinishLoad
 2369 D1:C974 -  -  -  -  
 2370 D1:C974 -  -  -  -  ;CLI -  Clear Interrupt Disable Bit
 2371 D1:C974 -  -  -  -  ;0 -> I
 2372 D1:C974 -  -  -  -  ;N	Z	C	I	D	V
 2373 D1:C974 -  -  -  -  ;-	-	-	0	-	-
 2374 D1:C974 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2375 D1:C974 -  -  -  -  ;implied	CLI	58	1	2  
 2376 D1:C974 -  -  -  -  inst6502_cli:
 2377 D1:C974 ED 33 02 -      ADDCYC(2)
 2378 D1:C977 DD CB 04 96     res SF_INT,(ix+REGSR)
 2379 D1:C97B C3 F8 B5 D1     jp  i6502FinishLoad
 2380 D1:C97F -  -  -  -  
 2381 D1:C97F -  -  -  -  ;CLV - Clear Overflow Flag
 2382 D1:C97F -  -  -  -  ;0 -> V
 2383 D1:C97F -  -  -  -  ;N	Z	C	I	D	V
 2384 D1:C97F -  -  -  -  ;-	-	-	-	-	0
 2385 D1:C97F -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2386 D1:C97F -  -  -  -  ;implied	CLV	B8	1	2  
 2387 D1:C97F -  -  -  -  inst6502_clv:
 2388 D1:C97F ED 33 02 -      ADDCYC(2)
 2389 D1:C982 DD CB 04 B6     res SF_OVER,(ix+REGSR)
 2390 D1:C986 C3 F8 B5 D1     jp  i6502FinishLoad
 2391 D1:C98A -  -  -  -  
 2392 D1:C98A -  -  -  -  ;SEC - Set Carry Flag
 2393 D1:C98A -  -  -  -  ;1 -> C
 2394 D1:C98A -  -  -  -  ;N	Z	C	I	D	V
 2395 D1:C98A -  -  -  -  ;-	-	1	-	-	-
 2396 D1:C98A -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2397 D1:C98A -  -  -  -  ;implied	SEC	38	1	2  
 2398 D1:C98A -  -  -  -  inst6502_sec:
 2399 D1:C98A ED 33 02 -      ADDCYC(2)
 2400 D1:C98D DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 2401 D1:C991 C3 F8 B5 D1     jp  i6502FinishLoad
 2402 D1:C995 -  -  -  -  
 2403 D1:C995 -  -  -  -  ;SED - Set Decimal Flag
 2404 D1:C995 -  -  -  -  ;1 -> D
 2405 D1:C995 -  -  -  -  ;N	Z	C	I	D	V
 2406 D1:C995 -  -  -  -  ;-	-	-	-	1	-
 2407 D1:C995 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2408 D1:C995 -  -  -  -  ;implied	SED	F8	1	2  
 2409 D1:C995 -  -  -  -  inst6502_sed:
 2410 D1:C995 ED 33 02 -      ADDCYC(2)
 2411 D1:C998 DD CB 04 DE     set SF_DEC,(ix+REGSR)
 2412 D1:C99C C3 F8 B5 D1     jp  i6502FinishLoad
 2413 D1:C9A0 -  -  -  -  
 2414 D1:C9A0 -  -  -  -  ;SEI - Set Interrupt Disable Status
 2415 D1:C9A0 -  -  -  -  ;1 -> I
 2416 D1:C9A0 -  -  -  -  ;N	Z	C	I	D	V
 2417 D1:C9A0 -  -  -  -  ;-	-	-	1	-	-
 2418 D1:C9A0 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2419 D1:C9A0 -  -  -  -  ;implied	SEI	78	1	2  
 2420 D1:C9A0 -  -  -  -  inst6502_sei:
 2421 D1:C9A0 ED 33 02 -      ADDCYC(2)
 2422 D1:C9A3 DD CB 04 D6     set SF_INT,(ix+REGSR)
 2423 D1:C9A7 C3 F8 B5 D1     jp  i6502FinishLoad
 2424 D1:C9AB -  -  -  -  
 2425 D1:C9AB -  -  -  -  ;-----------------------------------------------------------------------------
 2426 D1:C9AB -  -  -  -  ;-----------------------------------------------------------------------------
 2427 D1:C9AB -  -  -  -  ;-----------------------------------------------------------------------------
 2428 D1:C9AB -  -  -  -  ;Instructions by type: Comparisons
 2429 D1:C9AB -  -  -  -  
 2430 D1:C9AB -  -  -  -  ;CMP - Compare Memory with Accumulator
 2431 D1:C9AB -  -  -  -  ;A - M
 2432 D1:C9AB -  -  -  -  ;N	Z	C	I	D	V
 2433 D1:C9AB -  -  -  -  ;+	+	+	-	-	-
 2434 D1:C9AB -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2435 D1:C9AB -  -  -  -  
 2436 D1:C9AB -  -  -  -  ;immediate	CMP #oper	C9	2	2  
 2437 D1:C9AB -  -  -  -  inst6502_cmp_imm:
 2438 D1:C9AB ED 33 02 -      ADDCYC(2)
 2439 D1:C9AE 46 -  -  -      ld  b,(hl)
 2440 D1:C9AF C3 7D B7 D1     jp  subroutine6502_cmp_combined_end
 2441 D1:C9B3 -  -  -  -  
 2442 D1:C9B3 -  -  -  -  ;zeropage	CMP oper	C5	2	3  
 2443 D1:C9B3 -  -  -  -  inst6502_cmp_zp:
 2444 D1:C9B3 ED 33 03 -      ADDCYC(3)
 2445 D1:C9B6 7E -  -  -      ld  a,(hl)
 2446 D1:C9B7 01 00 38 D0     ld  bc,ZEROPAGE
 2447 D1:C9BB 81 -  -  -      add a,c
 2448 D1:C9BC 4F -  -  -      ld  c,a
 2449 D1:C9BD 0A -  -  -      ld  a,(bc)
 2450 D1:C9BE 47 -  -  -      ld  b,a
 2451 D1:C9BF C3 7D B7 D1     jp  subroutine6502_cmp_combined_end
 2452 D1:C9C3 -  -  -  -  
 2453 D1:C9C3 -  -  -  -  ;zeropage,X	CMP oper,X	D5	2	4  
 2454 D1:C9C3 -  -  -  -  inst6502_cmp_zpx:
 2455 D1:C9C3 ED 33 04 -      ADDCYC(4)
 2456 D1:C9C6 7E -  -  -      ld  a,(hl)
 2457 D1:C9C7 01 00 38 D0     ld  bc,ZEROPAGE
 2458 D1:C9CB 81 -  -  -      add a,c
 2459 D1:C9CC DD 86 01 -      add a,(ix+REGX)
 2460 D1:C9CF 4F -  -  -      ld  c,a
 2461 D1:C9D0 0A -  -  -      ld  a,(bc)
 2462 D1:C9D1 47 -  -  -      ld  b,a
 2463 D1:C9D2 C3 7D B7 D1     jp  subroutine6502_cmp_combined_end
 2464 D1:C9D6 -  -  -  -  
 2465 D1:C9D6 -  -  -  -  ;absolute	CMP oper	CD	3	4  
 2466 D1:C9D6 -  -  -  -  inst6502_cmp_abs:
 2467 D1:C9D6 ED 33 04 -      ADDCYC(4)
 2468 D1:C9D9 CD 87 B6 D1     call subroutine6502_abs_split_start
 2469 D1:C9DD E5 -  -  -      push hl
 2470 D1:C9DE 50 -  -  -          ld  d,b
 2471 D1:C9DF 79 -  -  -          ld  a,c
 2472 D1:C9E0 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2473 D1:C9E2 ED 4C -  -          mlt bc
 2474 D1:C9E4 21 00 40 D0         ld  hl,PAGETABLE
 2475 D1:C9E8 09 -  -  -          add hl,bc
 2476 D1:C9E9 ED 27 -  -          ld  hl,(hl)
 2477 D1:C9EB 06 00 -  -          ld  b,0
 2478 D1:C9ED 4F -  -  -          ld  c,a
 2479 D1:C9EE 09 -  -  -          add hl,bc   ;full address
 2480 D1:C9EF CD 40 AE D1         READ_ACCESS
 2481 D1:C9F3 E1 -  -  -      pop hl
 2482 D1:C9F4 47 -  -  -      ld  b,a
 2483 D1:C9F5 C3 7D B7 D1     jp  subroutine6502_cmp_combined_end
 2484 D1:C9F9 -  -  -  -  
 2485 D1:C9F9 -  -  -  -  ;absolute,X	CMP oper,X	DD	3	4* 
 2486 D1:C9F9 -  -  -  -  inst6502_cmp_absx:
 2487 D1:C9F9 ED 33 04 -      ADDCYC(4)
 2488 D1:C9FC CD A8 B6 D1     PUSH_ABSXSPLIT
 2489 D1:CA00 CD 40 AE D1         READ_ACCESS
 2490 D1:CA04 E1 -  -  -      pop hl
 2491 D1:CA05 47 -  -  -      ld  b,a
 2492 D1:CA06 C3 7D B7 D1     jp  subroutine6502_cmp_combined_end
 2493 D1:CA0A -  -  -  -  
 2494 D1:CA0A -  -  -  -  ;absolute,Y	CMP oper,Y	D9	3	4* 
 2495 D1:CA0A -  -  -  -  inst6502_cmp_absy:
 2496 D1:CA0A ED 33 04 -      ADDCYC(4)
 2497 D1:CA0D CD A3 B6 D1     PUSH_ABSYSPLIT
 2498 D1:CA11 CD 40 AE D1         READ_ACCESS
 2499 D1:CA15 E1 -  -  -      pop hl
 2500 D1:CA16 47 -  -  -      ld  b,a
 2501 D1:CA17 C3 7D B7 D1     jp  subroutine6502_cmp_combined_end
 2502 D1:CA1B -  -  -  -  
 2503 D1:CA1B -  -  -  -  ;(indirect,X)	CMP (oper,X)	C1	2	6  
 2504 D1:CA1B -  -  -  -  inst6502_cmp_indx:
 2505 D1:CA1B ED 33 06 -      ADDCYC(6)
 2506 D1:CA1E E5 -  -  -      push hl
 2507 D1:CA1F 7E -  -  -          ld  a,(hl)
 2508 D1:CA20 21 00 38 D0         ld  hl,ZEROPAGE
 2509 D1:CA24 85 -  -  -          add a,L
 2510 D1:CA25 DD 86 01 -          add a,(ix+REGX)
 2511 D1:CA28 6F -  -  -          ld  L,a
 2512 D1:CA29 7E -  -  -          ld  a,(hl)
 2513 D1:CA2A 2C -  -  -          inc L
 2514 D1:CA2B 56 -  -  -          ld  d,(hl)
 2515 D1:CA2C 42 -  -  -          ld  b,d
 2516 D1:CA2D 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2517 D1:CA2F ED 4C -  -          mlt bc
 2518 D1:CA31 21 00 40 D0         ld  hl,PAGETABLE
 2519 D1:CA35 09 -  -  -          add hl,bc
 2520 D1:CA36 ED 27 -  -          ld  hl,(hl)
 2521 D1:CA38 06 00 -  -          ld  b,0
 2522 D1:CA3A 4F -  -  -          ld  c,a
 2523 D1:CA3B 09 -  -  -          add hl,bc
 2524 D1:CA3C CD 40 AE D1         READ_ACCESS
 2525 D1:CA40 E1 -  -  -      pop hl
 2526 D1:CA41 47 -  -  -      ld  b,a
 2527 D1:CA42 C3 7D B7 D1     jp  subroutine6502_cmp_combined_end
 2528 D1:CA46 -  -  -  -  
 2529 D1:CA46 -  -  -  -  ;(indirect),Y	CMP (oper),Y	D1	2	5* 
 2530 D1:CA46 -  -  -  -  inst6502_cmp_indy:
 2531 D1:CA46 ED 33 05 -      ADDCYC(5)
 2532 D1:CA49 E5 -  -  -      push hl
 2533 D1:CA4A 7E -  -  -          ld  a,(hl)
 2534 D1:CA4B 21 00 38 D0         ld  hl,ZEROPAGE
 2535 D1:CA4F 85 -  -  -          add a,L
 2536 D1:CA50 6F -  -  -          ld  L,a
 2537 D1:CA51 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 2538 D1:CA52 2C -  -  -          inc L
 2539 D1:CA53 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 2540 D1:CA56 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 2541 D1:CA57 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 2542 D1:CA59 24 -  -  -          inc h
 2543 D1:CA5A FD 23 -  -          ADDCYC(1)
 2544 D1:CA5C 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 2545 D1:CA5D 2E 0C -  -          ld  L,BASETABLE_STRIDE
 2546 D1:CA5F ED 6C -  -          mlt hl          ;23.
 2547 D1:CA61 01 00 40 D0         ld  bc,PAGETABLE
 2548 D1:CA65 09 -  -  -          add hl,bc
 2549 D1:CA66 ED 27 -  -          ld  hl,(hl)     ;address get.
 2550 D1:CA68 01 00 00 00         ld  bc,0
 2551 D1:CA6C 4F -  -  -          ld  c,a
 2552 D1:CA6D 09 -  -  -          add hl,bc       ;Full address get.
 2553 D1:CA6E CD 40 AE D1         READ_ACCESS
 2554 D1:CA72 E1 -  -  -      pop hl
 2555 D1:CA73 47 -  -  -      ld  b,a
 2556 D1:CA74 C3 7D B7 D1     jp  subroutine6502_cmp_combined_end
 2557 D1:CA78 -  -  -  -  
 2558 D1:CA78 -  -  -  -  ;-----------------------------------------------------------------------------
 2559 D1:CA78 -  -  -  -  ;CPX - Compare Memory and Index X
 2560 D1:CA78 -  -  -  -  ;X - M
 2561 D1:CA78 -  -  -  -  ;N	Z	C	I	D	V
 2562 D1:CA78 -  -  -  -  ;+	+	+	-	-	-
 2563 D1:CA78 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2564 D1:CA78 -  -  -  -  ;immediate	CPX #oper	E0	2	2  
 2565 D1:CA78 -  -  -  -  inst6502_cpx_imm:
 2566 D1:CA78 ED 33 02 -      ADDCYC(2)
 2567 D1:CA7B DD 7E 01 -      ld  a,(ix+REGX)
 2568 D1:CA7E 96 -  -  -      sub a,(hl)
 2569 D1:CA7F 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2570 D1:CA80 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2571 D1:CA9A C3 DF B5 D1     jp  i6502NextLoad
 2572 D1:CA9E -  -  -  -  
 2573 D1:CA9E -  -  -  -  ;zeropage	CPX oper	E4	2	3  
 2574 D1:CA9E -  -  -  -  inst6502_cpx_zp:
 2575 D1:CA9E ED 33 03 -      ADDCYC(3)
 2576 D1:CAA1 7E -  -  -      ld  a,(hl)
 2577 D1:CAA2 01 00 38 D0     ld  bc,ZEROPAGE
 2578 D1:CAA6 81 -  -  -      add a,c
 2579 D1:CAA7 4F -  -  -      ld  c,a
 2580 D1:CAA8 0A -  -  -      ld  a,(bc)
 2581 D1:CAA9 47 -  -  -      ld  b,a
 2582 D1:CAAA DD 7E 01 -      ld  a,(ix+REGX)
 2583 D1:CAAD 90 -  -  -      sub a,b
 2584 D1:CAAE 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2585 D1:CAAF DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2586 D1:CAC9 C3 DF B5 D1     jp i6502NextLoad
 2587 D1:CACD -  -  -  -  ;absolute	CPX oper	EC	3	4  
 2588 D1:CACD -  -  -  -  inst6502_cpx_abs:
 2589 D1:CACD ED 33 04 -      ADDCYC(4)
 2590 D1:CAD0 CD 87 B6 D1     call subroutine6502_abs_split_start
 2591 D1:CAD4 E5 -  -  -      push hl
 2592 D1:CAD5 50 -  -  -          ld  d,b
 2593 D1:CAD6 79 -  -  -          ld  a,c
 2594 D1:CAD7 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2595 D1:CAD9 ED 4C -  -          mlt bc
 2596 D1:CADB 21 00 40 D0         ld  hl,PAGETABLE
 2597 D1:CADF 09 -  -  -          add hl,bc
 2598 D1:CAE0 ED 27 -  -          ld  hl,(hl)
 2599 D1:CAE2 06 00 -  -          ld  b,0
 2600 D1:CAE4 4F -  -  -          ld  c,a
 2601 D1:CAE5 09 -  -  -          add hl,bc   ;full address
 2602 D1:CAE6 CD 40 AE D1         READ_ACCESS
 2603 D1:CAEA E1 -  -  -      pop hl
 2604 D1:CAEB 47 -  -  -      ld  b,a
 2605 D1:CAEC DD 7E 01 -      ld  a,(ix+REGX)
 2606 D1:CAEF 90 -  -  -      sub a,b
 2607 D1:CAF0 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2608 D1:CAF1 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2609 D1:CB0B C3 DF B5 D1     jp i6502NextLoad
 2610 D1:CB0F -  -  -  -  
 2611 D1:CB0F -  -  -  -  ;-----------------------------------------------------------------------------
 2612 D1:CB0F -  -  -  -  ;CPY - Compare Memory and Index Y
 2613 D1:CB0F -  -  -  -  ;Y - M
 2614 D1:CB0F -  -  -  -  ;N	Z	C	I	D	V
 2615 D1:CB0F -  -  -  -  ;+	+	+	-	-	-
 2616 D1:CB0F -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2617 D1:CB0F -  -  -  -  ;immediate	CPY #oper	C0	2	2  
 2618 D1:CB0F -  -  -  -  inst6502_cpy_imm:
 2619 D1:CB0F ED 33 02 -      ADDCYC(2)
 2620 D1:CB12 DD 7E 02 -      ld  a,(ix+REGY)
 2621 D1:CB15 96 -  -  -      sub a,(hl)
 2622 D1:CB16 3F -  -  -      ccf
 2623 D1:CB17 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2624 D1:CB31 C3 DF B5 D1     jp  i6502NextLoad
 2625 D1:CB35 -  -  -  -  
 2626 D1:CB35 -  -  -  -  ;zeropage	CPY oper	C4	2	3  
 2627 D1:CB35 -  -  -  -  inst6502_cpy_zp:
 2628 D1:CB35 ED 33 03 -      ADDCYC(3)
 2629 D1:CB38 7E -  -  -      ld  a,(hl)
 2630 D1:CB39 01 00 38 D0     ld  bc,ZEROPAGE
 2631 D1:CB3D 81 -  -  -      add a,c
 2632 D1:CB3E 4F -  -  -      ld  c,a
 2633 D1:CB3F 0A -  -  -      ld  a,(bc)
 2634 D1:CB40 47 -  -  -      ld  b,a
 2635 D1:CB41 DD 7E 02 -      ld  a,(ix+REGY)
 2636 D1:CB44 90 -  -  -      sub a,b
 2637 D1:CB45 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2638 D1:CB46 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2639 D1:CB60 C3 DF B5 D1     jp i6502NextLoad
 2640 D1:CB64 -  -  -  -  
 2641 D1:CB64 -  -  -  -  ;absolute	CPY oper	CC	3	4  
 2642 D1:CB64 -  -  -  -  inst6502_cpy_abs:
 2643 D1:CB64 ED 33 04 -      ADDCYC(4)
 2644 D1:CB67 CD 87 B6 D1     call subroutine6502_abs_split_start
 2645 D1:CB6B E5 -  -  -      push hl
 2646 D1:CB6C 50 -  -  -          ld  d,b
 2647 D1:CB6D 79 -  -  -          ld  a,c
 2648 D1:CB6E 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2649 D1:CB70 ED 4C -  -          mlt bc
 2650 D1:CB72 21 00 40 D0         ld  hl,PAGETABLE
 2651 D1:CB76 09 -  -  -          add hl,bc
 2652 D1:CB77 ED 27 -  -          ld  hl,(hl)
 2653 D1:CB79 06 00 -  -          ld  b,0
 2654 D1:CB7B 4F -  -  -          ld  c,a
 2655 D1:CB7C 09 -  -  -          add hl,bc   ;full address
 2656 D1:CB7D CD 40 AE D1         READ_ACCESS
 2657 D1:CB81 E1 -  -  -      pop hl
 2658 D1:CB82 47 -  -  -      ld  b,a
 2659 D1:CB83 DD 7E 02 -      ld  a,(ix+REGY)
 2660 D1:CB86 90 -  -  -      sub a,b
 2661 D1:CB87 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2662 D1:CB88 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2663 D1:CBA2 C3 DF B5 D1     jp i6502NextLoad
 2664 D1:CBA6 -  -  -  -  
 2665 D1:CBA6 -  -  -  -  
 2666 D1:CBA6 -  -  -  -  ;-----------------------------------------------------------------------------
 2667 D1:CBA6 -  -  -  -  ;-----------------------------------------------------------------------------
 2668 D1:CBA6 -  -  -  -  ;-----------------------------------------------------------------------------
 2669 D1:CBA6 -  -  -  -  ;Instructions by type: Conditional Branch Instructions
 2670 D1:CBA6 -  -  -  -  
 2671 D1:CBA6 -  -  -  -  ;branch on C=0
 2672 D1:CBA6 -  -  -  -  ;relative	BCC oper	90	2	2**
 2673 D1:CBA6 -  -  -  -  inst6502_bcc:
 2674 D1:CBA6 ED 33 02 -      ADDCYC(2)
 2675 D1:CBA9 DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2676 D1:CBAD C2 DF B5 D1     jp  nz,i6502NextLoad
 2677 D1:CBB1 C3 A0 B7 D1     jp  subroutine6502_take_branch
 2678 D1:CBB5 -  -  -  -  
 2679 D1:CBB5 -  -  -  -  ;branch on C=1
 2680 D1:CBB5 -  -  -  -  ;relative	BCS oper	B0	2	2**
 2681 D1:CBB5 -  -  -  -  inst6502_bcs:
 2682 D1:CBB5 ED 33 02 -      ADDCYC(2)
 2683 D1:CBB8 DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2684 D1:CBBC CA DF B5 D1     jp  z,i6502NextLoad
 2685 D1:CBC0 C3 A0 B7 D1     jp  subroutine6502_take_branch
 2686 D1:CBC4 -  -  -  -  
 2687 D1:CBC4 -  -  -  -  ;branch on Z=1
 2688 D1:CBC4 -  -  -  -  ;relative	BEQ oper	F0	2	2**
 2689 D1:CBC4 -  -  -  -  inst6502_beq:
 2690 D1:CBC4 ED 33 02 -      ADDCYC(2)
 2691 D1:CBC7 DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2692 D1:CBCB CA DF B5 D1     jp  z,i6502NextLoad
 2693 D1:CBCF C3 A0 B7 D1     jp  subroutine6502_take_branch
 2694 D1:CBD3 -  -  -  -  
 2695 D1:CBD3 -  -  -  -  ;branch on N=1
 2696 D1:CBD3 -  -  -  -  ;relative	BMI oper	30	2	2**
 2697 D1:CBD3 -  -  -  -  inst6502_bmi:
 2698 D1:CBD3 ED 33 02 -      ADDCYC(2)
 2699 D1:CBD6 DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2700 D1:CBDA CA DF B5 D1     jp  z,i6502NextLoad
 2701 D1:CBDE C3 A0 B7 D1     jp  subroutine6502_take_branch
 2702 D1:CBE2 -  -  -  -  
 2703 D1:CBE2 -  -  -  -  
 2704 D1:CBE2 -  -  -  -  ;branch on Z=0
 2705 D1:CBE2 -  -  -  -  ;relative	BNE oper	D0	2	2**
 2706 D1:CBE2 -  -  -  -  inst6502_bne:
 2707 D1:CBE2 ED 33 02 -      ADDCYC(2)
 2708 D1:CBE5 DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2709 D1:CBE9 C2 DF B5 D1     jp  nz,i6502NextLoad
 2710 D1:CBED C3 A0 B7 D1     jp  subroutine6502_take_branch
 2711 D1:CBF1 -  -  -  -  
 2712 D1:CBF1 -  -  -  -  ;branch on N=0
 2713 D1:CBF1 -  -  -  -  ;relative	BPL oper	10	2	2**
 2714 D1:CBF1 -  -  -  -  inst6502_bpl:
 2715 D1:CBF1 ED 33 02 -      ADDCYC(2)
 2716 D1:CBF4 DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2717 D1:CBF8 C2 DF B5 D1     jp  nz,i6502NextLoad
 2718 D1:CBFC C3 A0 B7 D1     jp  subroutine6502_take_branch
 2719 D1:CC00 -  -  -  -  
 2720 D1:CC00 -  -  -  -  ;branch on V=0
 2721 D1:CC00 -  -  -  -  ;relative	BVC oper	50	2	2**
 2722 D1:CC00 -  -  -  -  inst6502_bvc:
 2723 D1:CC00 ED 33 02 -      ADDCYC(2)
 2724 D1:CC03 DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2725 D1:CC07 C2 DF B5 D1     jp  nz,i6502NextLoad
 2726 D1:CC0B C3 A0 B7 D1     jp  subroutine6502_take_branch
 2727 D1:CC0F -  -  -  -  
 2728 D1:CC0F -  -  -  -  ;branch on V=1
 2729 D1:CC0F -  -  -  -  ;relative	BVS oper	70	2	2**
 2730 D1:CC0F -  -  -  -  inst6502_bvs:
 2731 D1:CC0F ED 33 02 -      ADDCYC(2)
 2732 D1:CC12 DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2733 D1:CC16 CA DF B5 D1     jp  z,i6502NextLoad
 2734 D1:CC1A C3 A0 B7 D1     jp  subroutine6502_take_branch
 2735 D1:CC1E -  -  -  -  
 2736 D1:CC1E -  -  -  -  ;-----------------------------------------------------------------------------
 2737 D1:CC1E -  -  -  -  ;-----------------------------------------------------------------------------
 2738 D1:CC1E -  -  -  -  ;-----------------------------------------------------------------------------
 2739 D1:CC1E -  -  -  -  ;Instructions by type: Interrupts
 2740 D1:CC1E -  -  -  -  
 2741 D1:CC1E -  -  -  -  ;BRK - Force Break
 2742 D1:CC1E -  -  -  -  ;BRK initiates a software interrupt similar to a hardware
 2743 D1:CC1E -  -  -  -  ;interrupt (IRQ). The return address pushed to the stack is
 2744 D1:CC1E -  -  -  -  ;PC+2, providing an extra byte of spacing for a break mark
 2745 D1:CC1E -  -  -  -  ;(identifying a reason for the break.)
 2746 D1:CC1E -  -  -  -  ;The status register will be pushed to the stack with the break
 2747 D1:CC1E -  -  -  -  ;flag set to 1. However, when retrieved during RTI or by a PLP
 2748 D1:CC1E -  -  -  -  ;instruction, the break flag will be ignored.
 2749 D1:CC1E -  -  -  -  ;The interrupt disable flag is not set automatically.
 2750 D1:CC1E -  -  -  -  ;
 2751 D1:CC1E -  -  -  -  ;interrupt,             N	Z	C	I	D	V
 2752 D1:CC1E -  -  -  -  ;push PC+2, push SR     -	-	-	1	-	-
 2753 D1:CC1E -  -  -  -  ;implied	BRK	00	1	7  
 2754 D1:CC1E -  -  -  -  inst6502_brk:
 2755 D1:CC1E ED 33 07 -      ADDCYC(7)
 2756 D1:CC21 21 00 39 D0     ld  hl,STACKBASE
 2757 D1:CC25 DD 6E 03 -      ld  L,(ix+REGSP)
 2758 D1:CC28 52 DD 17 05     ld.s de,(ix+REGPC)
 2759 D1:CC2C 13 -  -  -      inc de      ;that extra spacer.
 2760 D1:CC2D 72 -  -  -      ld  (hl),d
 2761 D1:CC2E 2D -  -  -      dec L
 2762 D1:CC2F 73 -  -  -      ld  (hl),e
 2763 D1:CC30 2D -  -  -      dec L
 2764 D1:CC31 DD 7E 04 -      ld  a,(ix+REGSR)
 2765 D1:CC34 CB D7 -  -      set SF_INT,a
 2766 D1:CC36 77 -  -  -      ld  (hl),a
 2767 D1:CC37 2D -  -  -      dec L
 2768 D1:CC38 DD 75 03 -      ld  (ix+REGSP),L
 2769 D1:CC3B DD CB 1E 46     WAS_NMI_TRIGGERED
 2770 D1:CC3F 01 FE 00 00     ld  bc,$FE  ;IRQ vector
 2771 D1:CC43 28 04 -  -      jr  z,+_
 2772 D1:CC45 01 FA 00 00     ld  bc,$FA  ;NMI vector, if NMI is hijacking this instruction.
 2773 D1:CC49 21 F4 4B D0 _:  ld  hl,(BASETABLE_STRIDE*$FF)+PAGETABLE
 2774 D1:CC4D ED 27 -  -      ld  hl,(hl)
 2775 D1:CC4F 09 -  -  -      add hl,bc
 2776 D1:CC50 ED 17 -  -      ld  de,(hl)
 2777 D1:CC52 52 DD 1F 05     ld.s (ix+REGPC),de
 2778 D1:CC56 C3 C9 B5 D1     jp  i6502FirstLoad
 2779 D1:CC5A -  -  -  -  
 2780 D1:CC5A -  -  -  -  ;RTI - Return from Interrupt
 2781 D1:CC5A -  -  -  -  ;The status register is pulled with the break flag
 2782 D1:CC5A -  -  -  -  ;and bit 5 ignored. Then PC is pulled from the stack.
 2783 D1:CC5A -  -  -  -  ;pull SR, pull PC      N Z C I D V
 2784 D1:CC5A -  -  -  -  ;                      from stack
 2785 D1:CC5A -  -  -  -  ;implied	RTI	40	1	6  
 2786 D1:CC5A -  -  -  -  inst6502_rti:
 2787 D1:CC5A 21 00 39 D0     ld  hl,STACKBASE
 2788 D1:CC5E DD 6E 03 -      ld  l,(ix+REGSP)
 2789 D1:CC61 2C -  -  -      inc l
 2790 D1:CC62 7E -  -  -      ld  a,(hl)
 2791 D1:CC63 2C -  -  -      inc l
 2792 D1:CC64 5E -  -  -      ld  e,(hl)
 2793 D1:CC65 2C -  -  -      inc l
 2794 D1:CC66 56 -  -  -      ld  d,(hl)
 2795 D1:CC67 DD 75 03 -      ld  (ix+REGSP),l
 2796 D1:CC6A 52 DD 1F 05     ld.s (ix+REGPC),de
 2797 D1:CC6E DD 46 04 -      ld  b,(ix+REGSR)
 2798 D1:CC71 A8 -  -  -      xor a,b
 2799 D1:CC72 E6 DF -  -      and a,%11011111
 2800 D1:CC74 A8 -  -  -      xor a,b
 2801 D1:CC75 DD 77 04 -      ld  (ix+REGSR),a
 2802 D1:CC78 ED 33 06 -      ADDCYC(6)
 2803 D1:CC7B C3 C9 B5 D1     jp  i6502FirstLoad
 2804 D1:CC7F -  -  -  -  
 2805 D1:CC7F -  -  -  -  
 2806 D1:CC7F -  -  -  -  
 2807 D1:CC7F -  -  -  -  ;-----------------------------------------------------------------------------
 2808 D1:CC7F -  -  -  -  ;-----------------------------------------------------------------------------
 2809 D1:CC7F -  -  -  -  ;-----------------------------------------------------------------------------
 2810 D1:CC7F -  -  -  -  ;Instructions by type: Jumps and Subroutines
 2811 D1:CC7F -  -  -  -  
 2812 D1:CC7F -  -  -  -  ;absolute	JMP oper	4C	3	3  
 2813 D1:CC7F -  -  -  -  inst6052_jmp_abs:
 2814 D1:CC7F 7E -  -  -      ld  a,(hl)
 2815 D1:CC80 23 -  -  -      inc hl
 2816 D1:CC81 1C -  -  -      inc e
 2817 D1:CC82 20 0F -  -      jr  nz,+_
 2818 D1:CC84 DD 56 06 -      ld  d,(ix+REGPC+1)
 2819 D1:CC87 14 -  -  -      inc d
 2820 D1:CC88 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2821 D1:CC8A ED 5C -  -      mlt de
 2822 D1:CC8C 21 00 40 D0     ld  hl,PAGETABLE
 2823 D1:CC90 19 -  -  -      add hl,de
 2824 D1:CC91 ED 27 -  -      ld  hl,(hl)
 2825 D1:CC93 DD 77 05 -  _:  ld  (ix+REGPC+0),a
 2826 D1:CC96 7E -  -  -      ld  a,(hl)
 2827 D1:CC97 DD 77 06 -      ld  (ix+REGPC+1),a
 2828 D1:CC9A ED 33 03 -      ADDCYC(3)
 2829 D1:CC9D C3 C9 B5 D1     jp i6502FirstLoad
 2830 D1:CCA1 -  -  -  -  
 2831 D1:CCA1 -  -  -  -  
 2832 D1:CCA1 -  -  -  -  ;Note: In earlier 6502 implementations, cross-page reads on indirect is bugged.
 2833 D1:CCA1 -  -  -  -  ;   The end effect would be that inst6502_jmp_indir_splitread would wrap around
 2834 D1:CCA1 -  -  -  -  ;   to the start of the current page rather than try to read the next page.
 2835 D1:CCA1 -  -  -  -  ;indirect	JMP (oper)	6C	3	5  
 2836 D1:CCA1 -  -  -  -  inst6502_jmp_indir:
 2837 D1:CCA1 ED 33 05 -      ADDCYC(5)
 2838 D1:CCA4 -  -  -  -      ;Doing much the same as abs_split_start below, except with fewer things
 2839 D1:CCA4 -  -  -  -      ;because we don't need to preserve any of the other stuff.
 2840 D1:CCA4 4E -  -  -      ld  c,(hl)
 2841 D1:CCA5 23 -  -  -      inc hl
 2842 D1:CCA6 1C -  -  -      inc e
 2843 D1:CCA7 20 0F -  -      jr  nz,+_
 2844 D1:CCA9 DD 56 06 -      ld  d,(ix+REGPC+1)
 2845 D1:CCAC 14 -  -  -      inc d
 2846 D1:CCAD 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2847 D1:CCAF ED 5C -  -      mlt de
 2848 D1:CCB1 21 00 40 D0     ld  hl,PAGETABLE
 2849 D1:CCB5 19 -  -  -      add hl,de
 2850 D1:CCB6 ED 27 -  -      ld  hl,(hl)
 2851 D1:CCB8 46 -  -  -  _:  ld  b,(hl)
 2852 D1:CCB9 79 -  -  -      ld  a,c
 2853 D1:CCBA 0C -  -  -      inc c   ;check if there will be a split read.
 2854 D1:CCBB 0E 0C -  -      ld  c,BASETABLE_STRIDE  ;Flags not affected
 2855 D1:CCBD ED 4C -  -      mlt bc                  ;Flags not affected
 2856 D1:CCBF 21 00 40 D0     ld  hl,PAGETABLE        ;Flags not affected
 2857 D1:CCC3 CA D8 CC D1     jp  z,inst6502_jmp_indir_splitRead
 2858 D1:CCC7 09 -  -  -      add hl,bc
 2859 D1:CCC8 ED 27 -  -      ld  hl,(hl)
 2860 D1:CCCA 06 00 -  -      ld  b,0
 2861 D1:CCCC 4F -  -  -      ld  c,a
 2862 D1:CCCD 09 -  -  -      add hl,bc
 2863 D1:CCCE ED 27 -  -      ld  hl,(hl)
 2864 D1:CCD0 52 DD 2F 05     ld.s (ix+REGPC),hl
 2865 D1:CCD4 C3 C9 B5 D1     jp  i6502FirstLoad
 2866 D1:CCD8 -  -  -  -  inst6502_jmp_indir_splitRead:
 2867 D1:CCD8 09 -  -  -      add hl,bc
 2868 D1:CCD9 ED 27 -  -      ld  hl,(hl)
 2869 D1:CCDB 7E -  -  -      ld  a,(hl)  ;high byte
 2870 D1:CCDC 01 FF 00 00     ld  bc,255
 2871 D1:CCE0 09 -  -  -      add hl,bc
 2872 D1:CCE1 4E -  -  -      ld  c,(hl)  ;low byte
 2873 D1:CCE2 47 -  -  -      ld  b,a
 2874 D1:CCE3 52 DD 0F 05     ld.s (ix+REGPC),bc
 2875 D1:CCE7 C3 C9 B5 D1     jp  i6502FirstLoad
 2876 D1:CCEB -  -  -  -  
 2877 D1:CCEB -  -  -  -  
 2878 D1:CCEB -  -  -  -  
 2879 D1:CCEB -  -  -  -  
 2880 D1:CCEB -  -  -  -  
 2881 D1:CCEB -  -  -  -  ;absolute	JSR oper	20	3	6  
 2882 D1:CCEB -  -  -  -  inst6502_jsr:
 2883 D1:CCEB DD 56 06 -      ld  d,(ix+REGPC+1)
 2884 D1:CCEE 4E -  -  -      ld  c,(hl)
 2885 D1:CCEF 23 -  -  -      inc hl
 2886 D1:CCF0 1C -  -  -      inc e
 2887 D1:CCF1 20 10 -  -      jr  nz,+_
 2888 D1:CCF3 14 -  -  -      inc d
 2889 D1:CCF4 7A -  -  -      ld  a,d
 2890 D1:CCF5 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2891 D1:CCF7 ED 5C -  -      mlt de
 2892 D1:CCF9 21 00 40 D0     ld  hl,PAGETABLE
 2893 D1:CCFD 19 -  -  -      add hl,de
 2894 D1:CCFE ED 27 -  -      ld  hl,(hl)
 2895 D1:CD00 57 -  -  -      ld  d,a
 2896 D1:CD01 1E 00 -  -      ld  e,0
 2897 D1:CD03 46 -  -  -  _:  ld  b,(hl)
 2898 D1:CD04 -  -  -  -      ;push de to 6502stack
 2899 D1:CD04 21 00 39 D0     ld  hl,STACKBASE
 2900 D1:CD08 DD 6E 03 -      ld  l,(ix+REGSP)
 2901 D1:CD0B 72 -  -  -      ld  (hl),d
 2902 D1:CD0C 2D -  -  -      dec l
 2903 D1:CD0D 73 -  -  -      ld  (hl),e
 2904 D1:CD0E 2D -  -  -      dec l
 2905 D1:CD0F DD 75 03 -      ld  (ix+REGSP),l
 2906 D1:CD12 52 DD 0F 05     ld.s (ix+REGPC),bc
 2907 D1:CD16 ED 33 06 -      ADDCYC(6)
 2908 D1:CD19 C3 C9 B5 D1     jp  i6502FirstLoad
 2909 D1:CD1D -  -  -  -  
 2910 D1:CD1D -  -  -  -  ;implied	RTS	60	1	6
 2911 D1:CD1D -  -  -  -  inst6502_rts:
 2912 D1:CD1D 21 00 39 D0     ld  hl,STACKBASE
 2913 D1:CD21 DD 6E 03 -      ld  l,(ix+REGSP)
 2914 D1:CD24 2C -  -  -      inc l
 2915 D1:CD25 5E -  -  -      ld  e,(hl)
 2916 D1:CD26 2C -  -  -      inc l
 2917 D1:CD27 56 -  -  -      ld  d,(hl)
 2918 D1:CD28 DD 75 03 -      ld  (ix+REGSP),l
 2919 D1:CD2B 13 -  -  -      inc de
 2920 D1:CD2C 52 DD 1F 05     ld.s (ix+REGPC),de
 2921 D1:CD30 ED 33 06 -      ADDCYC(6)
 2922 D1:CD33 C3 C9 B5 D1     jp  i6502FirstLoad
 2923 D1:CD37 -  -  -  -  
 2924 D1:CD37 -  -  -  -  
 2925 D1:CD37 -  -  -  -  ;-----------------------------------------------------------------------------
 2926 D1:CD37 -  -  -  -  ;-----------------------------------------------------------------------------
 2927 D1:CD37 -  -  -  -  ;-----------------------------------------------------------------------------
 2928 D1:CD37 -  -  -  -  ;Instructions by type: Miscellaneous
 2929 D1:CD37 -  -  -  -  ;BIT - Test Bits in Memory with Accumulator
 2930 D1:CD37 -  -  -  -  ;
 2931 D1:CD37 -  -  -  -  ;bits 7 and 6 of operand are transfered to bit 7 and 6 of SR (N,V);
 2932 D1:CD37 -  -  -  -  ;the zero-flag is set according to the result of the operand AND
 2933 D1:CD37 -  -  -  -  ;the accumulator (set, if the result is zero, unset otherwise).
 2934 D1:CD37 -  -  -  -  ;This allows a quick check of a few bits at once without affecting
 2935 D1:CD37 -  -  -  -  ;any of the registers, other than the status register (SR).
 2936 D1:CD37 -  -  -  -  
 2937 D1:CD37 -  -  -  -  ;A AND M -> Z, M7 -> N, M6 -> V             N	Z	C	I	D	V
 2938 D1:CD37 -  -  -  -  ;                                           M7	+	-	-	-	M6
 2939 D1:CD37 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2940 D1:CD37 -  -  -  -  ;zeropage	BIT oper	24	2	3  
 2941 D1:CD37 -  -  -  -  inst6502_bit_zp:
 2942 D1:CD37 ED 33 03 -      ADDCYC(3)
 2943 D1:CD3A 7E -  -  -      ld  a,(hl)
 2944 D1:CD3B 01 00 38 D0     ld  bc,ZEROPAGE
 2945 D1:CD3F 81 -  -  -      add a,c
 2946 D1:CD40 4F -  -  -      ld  c,a
 2947 D1:CD41 0A -  -  -      ld  a,(bc)
 2948 D1:CD42 4F -  -  -      ld  c,a
 2949 D1:CD43 DD A6 00 -  _:  and a,(ix+REGA)
 2950 D1:CD46 79 -  -  -      ld  a,c     ;discard result, get bits from OPERANDs
 2951 D1:CD47 CB 8F -  -      res SF_ZERO,a
 2952 D1:CD49 20 02 -  -      jr  nz,$+4
 2953 D1:CD4B CB CF -  -      set SF_ZERO,a
 2954 D1:CD4D DD 46 04 -      ld  b,(ix+REGSR)    ;keep bits in flag other than NZ and V
 2955 D1:CD50 A8 -  -  -      xor a,b
 2956 D1:CD51 E6 C2 -  -      and a,%11000010     ;1=keepA, 0=discardA,keepB
 2957 D1:CD53 A8 -  -  -      xor a,b
 2958 D1:CD54 DD 77 04 -      ld  (ix+REGSR),a
 2959 D1:CD57 C3 DF B5 D1     jp  i6502NextLoad
 2960 D1:CD5B -  -  -  -  
 2961 D1:CD5B -  -  -  -  ;absolute	BIT oper	2C	3	4  
 2962 D1:CD5B -  -  -  -  inst6502_bit_abs:
 2963 D1:CD5B ED 33 04 -      ADDCYC(4)
 2964 D1:CD5E CD 87 B6 D1     call subroutine6502_abs_split_start
 2965 D1:CD62 E5 -  -  -      push hl
 2966 D1:CD63 50 -  -  -          ld  d,b
 2967 D1:CD64 79 -  -  -          ld  a,c
 2968 D1:CD65 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2969 D1:CD67 ED 4C -  -          mlt bc
 2970 D1:CD69 21 00 40 D0         ld  hl,PAGETABLE
 2971 D1:CD6D 09 -  -  -          add hl,bc
 2972 D1:CD6E ED 27 -  -          ld  hl,(hl)
 2973 D1:CD70 06 00 -  -          ld  b,0
 2974 D1:CD72 4F -  -  -          ld  c,a
 2975 D1:CD73 09 -  -  -          add hl,bc   ;full address
 2976 D1:CD74 CD 40 AE D1         READ_ACCESS
 2977 D1:CD78 4F -  -  -          ld  c,a
 2978 D1:CD79 E1 -  -  -      pop hl
 2979 D1:CD7A 18 C7 -  -      jr  -_    
 2980 D1:CD7C -  -  -  -  
 2981 D1:CD7C -  -  -  -  ;NOP - No Operation
 2982 D1:CD7C -  -  -  -  ;implied	NOP	EA	1	2  
 2983 D1:CD7C -  -  -  -  inst6502_nop:
 2984 D1:CD7C ED 33 02 -      ADDCYC(2)
 2985 D1:CD7F C3 F8 B5 D1     jp  i6502FinishLoad
 2986 D1:CD83 -  -  -  -  
 2987 D1:CD83 -  -  -  -  
 2988 D1:CD83 -  -  -  -  
 2989 D1:CD83 -  -  -  -  ;##############################################################################
 2990 D1:CD83 -  -  -  -  ;##############################################################################
 2991 D1:CD83 -  -  -  -  ;##############################################################################
 2992 D1:CD83 -  -  -  -  ;##-----#-#####-#####-----##---###---##-########-----#--##-##---#-----#----####
 2993 D1:CD83 -  -  -  -  ;####-###-#####-#####-#####-#####-###-#-##########-###--##-#-######-###-###-###
 2994 D1:CD83 -  -  -  -  ;####-###-#####-#####---###-##--#-----#-##########-###-#-#-##---###-###-----###
 2995 D1:CD83 -  -  -  -  ;####-###-#####-#####-#####-###-#-###-#-##########-###-##--#####-##-###-##-####
 2996 D1:CD83 -  -  -  -  ;##-----#-----#-----#-----##----#-###-#-----####-----#-##--#----###-###-###-#-#
 2997 D1:CD83 -  -  -  -  ;##############################################################################
 2998 D1:CD83 -  -  -  -  ;##############################################################################
 2999 D1:CD83 -  -  -  -  ;##############################################################################
 3000 D1:CD83 -  -  -  -  ;Instructions by type: Illegal Instructions
 3001 D1:CD83 -  -  -  -  
 3002 D1:CD83 -  -  -  -  ;NOP - No operations. All the no-operations. Even the ones that are linked
 3003 D1:CD83 -  -  -  -  ;to the machinery that operates an addressing mode, but does nothing with it.
 3004 D1:CD83 -  -  -  -  ;A whole lotta nothing.
 3005 D1:CD83 -  -  -  -  
 3006 D1:CD83 -  -  -  -  ;Bytes:1, Cycles:2, Opcodes: 1A, 3A, 5A, 7A, DA, FA
 3007 D1:CD83 -  -  -  -  inst6502_nop_implied:
 3008 D1:CD83 ED 33 02 -      ADDCYC(2)
 3009 D1:CD86 C3 F8 B5 D1     jp  i6502FinishLoad
 3010 D1:CD8A -  -  -  -  
 3011 D1:CD8A -  -  -  -  ;Bytes:2, Cycles:2, Opcodes: 80, 82, 89, C2, E2
 3012 D1:CD8A -  -  -  -  inst6502_nop_imm:
 3013 D1:CD8A ED 33 02 -      ADDCYC(2)
 3014 D1:CD8D C3 DF B5 D1     jp  i6502NextLoad
 3015 D1:CD91 -  -  -  -  
 3016 D1:CD91 -  -  -  -  ;Bytes:2, Cycles:3, Opcodes: 04, 44, 64
 3017 D1:CD91 -  -  -  -  inst6502_nop_zp:
 3018 D1:CD91 ED 33 03 -      ADDCYC(3)
 3019 D1:CD94 C3 DF B5 D1     jp  i6502NextLoad
 3020 D1:CD98 -  -  -  -  
 3021 D1:CD98 -  -  -  -  ;Bytes:2, Cycles:4, Opcodes: 14, 34, 54, 74, D4, F4
 3022 D1:CD98 -  -  -  -  inst6502_nop_zpx:
 3023 D1:CD98 ED 33 04 -      ADDCYC(4)
 3024 D1:CD9B C3 DF B5 D1     jp  i6502NextLoad
 3025 D1:CD9F -  -  -  -  
 3026 D1:CD9F -  -  -  -  ;Bytes:3, Cycles:4, Opcode: 0C
 3027 D1:CD9F -  -  -  -  inst6502_nop_abs:
 3028 D1:CD9F ED 33 04 -      ADDCYC(4)
 3029 D1:CDA2 CD 87 B6 D1     call subroutine6502_abs_split_start
 3030 D1:CDA6 E5 -  -  -      push hl
 3031 D1:CDA7 CD 40 AE D1         READ_ACCESS
 3032 D1:CDAB E1 -  -  -      pop hl
 3033 D1:CDAC C3 DF B5 D1     jp  i6502NextLoad
 3034 D1:CDB0 -  -  -  -  
 3035 D1:CDB0 -  -  -  -  ;Note: This thing latches all over the place but does nothing. All these
 3036 D1:CDB0 -  -  -  -  ;READ_ACCESS thingies are in case the ROM wants to clear PPU flags or something
 3037 D1:CDB0 -  -  -  -  ;using these instructions. But the one below is noted to do the touchy-feelies
 3038 D1:CDB0 -  -  -  -  ;at ABS and (ABS+X)&0xFF
 3039 D1:CDB0 -  -  -  -  ;Bytes:3, Cycles:4*, Opcodes: 1C, 3C, 5C, 7C, DC, FC
 3040 D1:CDB0 -  -  -  -  inst6502_nop_absx:
 3041 D1:CDB0 ED 33 04 -      ADDCYC(4)
 3042 D1:CDB3 CD A8 B6 D1     PUSH_ABSXSPLIT
 3043 D1:CDB7 CD 40 AE D1         READ_ACCESS
 3044 D1:CDBB E1 -  -  -      pop hl
 3045 D1:CDBC C3 DF B5 D1     jp  i6502NextLoad
 3046 D1:CDC0 -  -  -  -  
 3047 D1:CDC0 -  -  -  -  ;-----------------------------------------------------------------------------
 3048 D1:CDC0 -  -  -  -  ;ALR (ASR) - AND oper + LSR
 3049 D1:CDC0 -  -  -  -  ;Affects CZN
 3050 D1:CDC0 -  -  -  -  
 3051 D1:CDC0 -  -  -  -  ;immediate	ALR #oper	4B	2	2 
 3052 D1:CDC0 -  -  -  -  inst6502_alr_imm:
 3053 D1:CDC0 ED 33 02 -      ADDCYC(2)
 3054 D1:CDC3 DD 7E 00 -      ld  a,(ix+REGA)
 3055 D1:CDC6 A6 -  -  -      and a,(hl)
 3056 D1:CDC7 CB 3F -  -      srl a   ;Must do it this way. A-optimized instr do not affect Z
 3057 D1:CDC9 DD 77 00 -      ld  (ix+REGA),a
 3058 D1:CDCC DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3059 D1:CDE6 C3 DF B5 D1     jp  i6502NextLoad
 3060 D1:CDEA -  -  -  -  
 3061 D1:CDEA -  -  -  -  ;-----------------------------------------------------------------------------
 3062 D1:CDEA -  -  -  -  
 3063 D1:CDEA -  -  -  -  ;ANC [ANC (ANC2)] - AND oper + set Carry as if ASL [ROL]
 3064 D1:CDEA -  -  -  -  
 3065 D1:CDEA -  -  -  -  ;immediate	ANC #oper	0B	2	2 
 3066 D1:CDEA -  -  -  -  ;immediate	ANC #oper	2B	2	2
 3067 D1:CDEA -  -  -  -  instr6502_anc_imm:
 3068 D1:CDEA -  -  -  -  instr6502_anc2_imm:
 3069 D1:CDEA ED 33 02 -      ADDCYC(2)
 3070 D1:CDED DD 7E 00 -      ld  a,(ix+REGA)
 3071 D1:CDF0 A6 -  -  -      and a,(hl)
 3072 D1:CDF1 DD 77 00 -      ld  (ix+REGA),a
 3073 D1:CDF4 CB 07 -  -      rlc a
 3074 D1:CDF6 DD 7E 04 -      ld  a,(ix+REGSR)
 3075 D1:CDF9 -  -  -  -      ;A small optimiztion here, letting us merge OPRFLG_C and OPRFLG_N
 3076 D1:CDF9 CB 87 -  -      res SF_CARRY,a
 3077 D1:CDFB CB BF -  -      res SF_NEG,a
 3078 D1:CDFD 30 04 -  -      jr  nc,+_
 3079 D1:CDFF CB C7 -  -      set SF_CARRY,a
 3080 D1:CE01 CB FF -  -      set SF_NEG,a
 3081 D1:CE03 CB 8F -  -  _:  res SF_ZERO,a
 3082 D1:CE05 20 02 -  -      jr  nz,$+4
 3083 D1:CE07 CB CF -  -      set SF_ZERO,a
 3084 D1:CE09 DD 77 04 -      ld  (ix+REGSR),a
 3085 D1:CE0C C3 DF B5 D1     jp  i6502NextLoad
 3086 D1:CE10 -  -  -  -  
 3087 D1:CE10 -  -  -  -  ;-----------------------------------------------------------------------------
 3088 D1:CE10 -  -  -  -  
 3089 D1:CE10 -  -  -  -  ;ANE (XAA) - (A OR ??) AND X AND oper -> A
 3090 D1:CE10 -  -  -  -  ;immediate	ANE #oper	8B	2	2  	††
 3091 D1:CE10 -  -  -  -  instr6502_ane_imm:
 3092 D1:CE10 ED 33 02 -      ADDCYC(2)
 3093 D1:CE13 ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3094 D1:CE15 DD B6 00 -      or  a,(ix+REGA)
 3095 D1:CE18 DD A6 01 -      and a,(ix+REGX)
 3096 D1:CE1B A6 -  -  -      and a,(hl)
 3097 D1:CE1C DD 77 00 -      ld  (ix+REGA),a
 3098 D1:CE1F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3099 D1:CE33 C3 DF B5 D1     jp  i6502NextLoad
 3100 D1:CE37 -  -  -  -  
 3101 D1:CE37 -  -  -  -  ;-----------------------------------------------------------------------------
 3102 D1:CE37 -  -  -  -  
 3103 D1:CE37 -  -  -  -  
 3104 D1:CE37 -  -  -  -  ;ARR - AND OPER + ROR
 3105 D1:CE37 -  -  -  -  ;Something hinky is going on with the flags. "This operation involves the adder"
 3106 D1:CE37 -  -  -  -  ;I need to get a better handle over what that might be.
 3107 D1:CE37 -  -  -  -  ;CVZN flags affected.
 3108 D1:CE37 -  -  -  -  ;
 3109 D1:CE37 -  -  -  -  ;Primary sources reads:
 3110 D1:CE37 -  -  -  -  ;----------------------
 3111 D1:CE37 -  -  -  -  ;This operation involves the adder:
 3112 D1:CE37 -  -  -  -  ;V-flag is set according to (A AND oper) + oper
 3113 D1:CE37 -  -  -  -  ;The carry is not set, but bit 7 (sign) is exchanged with the carry
 3114 D1:CE37 -  -  -  -  ;A AND oper, C -> [76543210] -> C
 3115 D1:CE37 -  -  -  -  ;
 3116 D1:CE37 -  -  -  -  ;Secondary source reads:
 3117 D1:CE37 -  -  -  -  ;-----------------------
 3118 D1:CE37 -  -  -  -  ;Similar to AND #i then ROR A, except sets the flags differently. 
 3119 D1:CE37 -  -  -  -  ;N and Z are normal, but C is bit 6 and V is bit 6 xor bit 5. 
 3120 D1:CE37 -  -  -  -  ;A fast way to perform signed division by 4 is: CMP #$80; ARR #$FF; ROR. 
 3121 D1:CE37 -  -  -  -  ;This can be extended to larger powers of two.
 3122 D1:CE37 -  -  -  -  
 3123 D1:CE37 -  -  -  -  ;immediate	ARR #oper	6B	2	2  
 3124 D1:CE37 -  -  -  -  instr6502_arr_imm:
 3125 D1:CE37 ED 33 02 -      ADDCYC(2)
 3126 D1:CE3A DD 7E 00 -      ld  a,(ix+REGA)
 3127 D1:CE3D A6 -  -  -      and a,(hl)
 3128 D1:CE3E 47 -  -  -      ld  b,a
 3129 D1:CE3F DD 7E 04 -      ld  a,(ix+REGSR)
 3130 D1:CE42 4F -  -  -      ld  c,a
 3131 D1:CE43 0F -  -  -      rrca    ;extract carry. This carry will go into sign bit of result
 3132 D1:CE44 CB B9 -  -      res SF_NEG,c
 3133 D1:CE46 30 02 -  -      jr  nc,$+4
 3134 D1:CE48 CB F9 -  -      set SF_NEG,c
 3135 D1:CE4A CB 18 -  -      rr b
 3136 D1:CE4C CB 89 -  -      res SF_ZERO,c
 3137 D1:CE4E 20 02 -  -      jr  nz,$+4
 3138 D1:CE50 CB C9 -  -      set SF_ZERO,c
 3139 D1:CE52 DD 70 00 -      ld  (ix+REGA),b
 3140 D1:CE55 78 -  -  -      ld  a,b
 3141 D1:CE56 E6 40 -  -      and a,%01000000
 3142 D1:CE58 CB 81 -  -      res SF_CARRY,c
 3143 D1:CE5A 28 02 -  -      jr  z,$+4
 3144 D1:CE5C CB C1 -  -      set SF_CARRY,c
 3145 D1:CE5E 0F -  -  -      rrca
 3146 D1:CE5F EE 20 -  -      xor a,%00100000
 3147 D1:CE61 E6 20 -  -      and a,%00100000
 3148 D1:CE63 CB B1 -  -      res SF_OVER,c
 3149 D1:CE65 28 02 -  -      jr  z,$+4
 3150 D1:CE67 CB F1 -  -      set SF_OVER,c
 3151 D1:CE69 DD 71 04 -      ld  (ix+REGSR),c
 3152 D1:CE6C -  -  -  -      ;TODO: Figure out a more efficient way to emulate this instruction.
 3153 D1:CE6C C3 DF B5 D1     jp  i6502NextLoad
 3154 D1:CE70 -  -  -  -  
 3155 D1:CE70 -  -  -  -  ;-----------------------------------------------------------------------------
 3156 D1:CE70 -  -  -  -  ;DCP (DCM) - DEC oper + CMP oper
 3157 D1:CE70 -  -  -  -  ;M-1->M, A-M. Affects CZN
 3158 D1:CE70 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3159 D1:CE70 -  -  -  -  
 3160 D1:CE70 -  -  -  -  ;zeropage	DCP oper	C7	2	5  	
 3161 D1:CE70 -  -  -  -  inst6502_dcp_zp:
 3162 D1:CE70 ED 33 05 -      ADDCYC(5)
 3163 D1:CE73 7E -  -  -      ld  a,(hl)
 3164 D1:CE74 01 00 38 D0     ld  bc,ZEROPAGE
 3165 D1:CE78 81 -  -  -      add a,c
 3166 D1:CE79 4F -  -  -      ld  c,a
 3167 D1:CE7A 0A -  -  -      ld  a,(bc)
 3168 D1:CE7B 3D -  -  -      dec a
 3169 D1:CE7C 02 -  -  -      ld  (bc),a
 3170 D1:CE7D 47 -  -  -      ld  b,a
 3171 D1:CE7E C3 7D B7 D1     jp  subroutine6502_cmp_combined_end
 3172 D1:CE82 -  -  -  -  
 3173 D1:CE82 -  -  -  -  ;zeropage,X	DCP oper,X	D7	2	6  	
 3174 D1:CE82 -  -  -  -  inst6520_dcp_zpx:
 3175 D1:CE82 ED 33 06 -      ADDCYC(6)
 3176 D1:CE85 7E -  -  -      ld  a,(hl)
 3177 D1:CE86 01 00 38 D0     ld  bc,ZEROPAGE
 3178 D1:CE8A 81 -  -  -      add a,c
 3179 D1:CE8B DD 86 01 -      add a,(ix+REGX)
 3180 D1:CE8E 4F -  -  -      ld  c,a
 3181 D1:CE8F 0A -  -  -      ld  a,(bc)
 3182 D1:CE90 3D -  -  -      dec a
 3183 D1:CE91 02 -  -  -      ld  (bc),a
 3184 D1:CE92 47 -  -  -      ld  b,a
 3185 D1:CE93 C3 7D B7 D1     jp  subroutine6502_cmp_combined_end
 3186 D1:CE97 -  -  -  -  
 3187 D1:CE97 -  -  -  -  ;absolute	DCP oper	CF	3	6  	
 3188 D1:CE97 -  -  -  -  inst6502_dcp_abs:
 3189 D1:CE97 ED 33 06 -      ADDCYC(6)
 3190 D1:CE9A CD 87 B6 D1     call subroutine6502_abs_split_start
 3191 D1:CE9E E5 -  -  -      push hl
 3192 D1:CE9F 50 -  -  -          ld  d,b
 3193 D1:CEA0 79 -  -  -          ld  a,c
 3194 D1:CEA1 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3195 D1:CEA3 ED 4C -  -          mlt bc
 3196 D1:CEA5 21 00 40 D0         ld  hl,PAGETABLE
 3197 D1:CEA9 09 -  -  -          add hl,bc
 3198 D1:CEAA ED 27 -  -          ld  hl,(hl)
 3199 D1:CEAC 06 00 -  -          ld  b,0
 3200 D1:CEAE 4F -  -  -          ld  c,a
 3201 D1:CEAF 09 -  -  -          add hl,bc   ;full address
 3202 D1:CEB0 CD 40 AE D1         READ_ACCESS
 3203 D1:CEB4 3D -  -  -          dec a
 3204 D1:CEB5 47 -  -  -          ld b,a
 3205 D1:CEB6 C5 -  -  -          push bc
 3206 D1:CEB7 CD 63 AE D1             WRITE_ACCESS
 3207 D1:CEBB C1 -  -  -          pop bc
 3208 D1:CEBC E1 -  -  -      pop hl
 3209 D1:CEBD C3 7D B7 D1     jp  subroutine6502_cmp_combined_end
 3210 D1:CEC1 -  -  -  -  
 3211 D1:CEC1 -  -  -  -  ;absolut,X	DCP oper,X	DF	3	7  	
 3212 D1:CEC1 -  -  -  -  inst6502_dcp_absx:
 3213 D1:CEC1 ED 33 07 -      ADDCYC(7)
 3214 D1:CEC4 CD E4 B6 D1     PUSH_ABSXSPLIT_NODEP
 3215 D1:CEC8 CD 40 AE D1         READ_ACCESS
 3216 D1:CECC 3D -  -  -          dec a
 3217 D1:CECD 47 -  -  -          ld  b,a
 3218 D1:CECE C5 -  -  -          push bc
 3219 D1:CECF CD 63 AE D1             WRITE_ACCESS
 3220 D1:CED3 C1 -  -  -          pop bc
 3221 D1:CED4 E1 -  -  -      pop hl
 3222 D1:CED5 C3 7D B7 D1     jp  subroutine6502_cmp_combined_end
 3223 D1:CED9 -  -  -  -  
 3224 D1:CED9 -  -  -  -  ;absolut,Y	DCP oper,Y	DB	3	7  	
 3225 D1:CED9 -  -  -  -  inst6502_dcp_absy:
 3226 D1:CED9 ED 33 07 -      ADDCYC(7)
 3227 D1:CEDC CD DF B6 D1     PUSH_ABSYSPLIT_NODEP
 3228 D1:CEE0 CD 40 AE D1         READ_ACCESS
 3229 D1:CEE4 3D -  -  -          dec a
 3230 D1:CEE5 47 -  -  -          ld  b,a
 3231 D1:CEE6 C5 -  -  -          push bc
 3232 D1:CEE7 CD 63 AE D1             WRITE_ACCESS
 3233 D1:CEEB C1 -  -  -          pop bc
 3234 D1:CEEC E1 -  -  -      pop hl
 3235 D1:CEED C3 7D B7 D1     jp  subroutine6502_cmp_combined_end
 3236 D1:CEF1 -  -  -  -  
 3237 D1:CEF1 -  -  -  -  ;(indirect,X)	DCP (oper,X)	C3	2	8  	
 3238 D1:CEF1 -  -  -  -  inst6502_dcp_indx:
 3239 D1:CEF1 ED 33 08 -      ADDCYC(8)
 3240 D1:CEF4 E5 -  -  -      push hl
 3241 D1:CEF5 7E -  -  -          ld  a,(hl)
 3242 D1:CEF6 21 00 38 D0         ld  hl,ZEROPAGE
 3243 D1:CEFA 85 -  -  -          add a,L
 3244 D1:CEFB DD 86 01 -          add a,(ix+REGX)
 3245 D1:CEFE 6F -  -  -          ld  L,a
 3246 D1:CEFF 7E -  -  -          ld  a,(hl)
 3247 D1:CF00 2C -  -  -          inc L
 3248 D1:CF01 56 -  -  -          ld  d,(hl)
 3249 D1:CF02 42 -  -  -          ld  b,d
 3250 D1:CF03 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3251 D1:CF05 ED 4C -  -          mlt bc
 3252 D1:CF07 21 00 40 D0         ld  hl,PAGETABLE
 3253 D1:CF0B 09 -  -  -          add hl,bc
 3254 D1:CF0C ED 27 -  -          ld  hl,(hl)
 3255 D1:CF0E 06 00 -  -          ld  b,0
 3256 D1:CF10 4F -  -  -          ld  c,a
 3257 D1:CF11 09 -  -  -          add hl,bc
 3258 D1:CF12 CD 40 AE D1         READ_ACCESS
 3259 D1:CF16 3D -  -  -          dec a
 3260 D1:CF17 47 -  -  -          ld  b,a
 3261 D1:CF18 C5 -  -  -          push bc
 3262 D1:CF19 CD 63 AE D1             WRITE_ACCESS
 3263 D1:CF1D C1 -  -  -          pop bc
 3264 D1:CF1E E1 -  -  -      pop hl
 3265 D1:CF1F C3 7D B7 D1     jp  subroutine6502_cmp_combined_end
 3266 D1:CF23 -  -  -  -  
 3267 D1:CF23 -  -  -  -  ;(indirect),Y	DCP (oper),Y	D3	2	8  
 3268 D1:CF23 -  -  -  -  inst6502_dcp_indy:
 3269 D1:CF23 ED 33 08 -      ADDCYC(8)
 3270 D1:CF26 E5 -  -  -      push hl
 3271 D1:CF27 7E -  -  -          ld  a,(hl)
 3272 D1:CF28 21 00 38 D0         ld  hl,ZEROPAGE
 3273 D1:CF2C 85 -  -  -          add a,L
 3274 D1:CF2D 6F -  -  -          ld  L,a
 3275 D1:CF2E 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3276 D1:CF2F 2C -  -  -          inc L
 3277 D1:CF30 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3278 D1:CF33 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3279 D1:CF34 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3280 D1:CF36 24 -  -  -          inc h
 3281 D1:CF37 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3282 D1:CF38 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3283 D1:CF3A ED 6C -  -          mlt hl          ;23.
 3284 D1:CF3C 01 00 40 D0         ld  bc,PAGETABLE
 3285 D1:CF40 09 -  -  -          add hl,bc
 3286 D1:CF41 ED 27 -  -          ld  hl,(hl)     ;address get.
 3287 D1:CF43 01 00 00 00         ld  bc,0
 3288 D1:CF47 4F -  -  -          ld  c,a
 3289 D1:CF48 09 -  -  -          add hl,bc       ;Full address get.
 3290 D1:CF49 CD 40 AE D1         READ_ACCESS
 3291 D1:CF4D 3D -  -  -          dec a
 3292 D1:CF4E 47 -  -  -          ld  b,a
 3293 D1:CF4F C5 -  -  -          push bc
 3294 D1:CF50 CD 63 AE D1             WRITE_ACCESS
 3295 D1:CF54 C1 -  -  -          pop bc
 3296 D1:CF55 E1 -  -  -      pop hl
 3297 D1:CF56 C3 7D B7 D1     jp  subroutine6502_cmp_combined_end
 3298 D1:CF5A -  -  -  -  
 3299 D1:CF5A -  -  -  -  ;-----------------------------------------------------------------------------
 3300 D1:CF5A -  -  -  -  ;ISC (ISB, INS) - INC oper + SBC oper
 3301 D1:CF5A -  -  -  -  ;M+1->M, A-M-not(C)->A, affects VCZN
 3302 D1:CF5A -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3303 D1:CF5A -  -  -  -  
 3304 D1:CF5A -  -  -  -  
 3305 D1:CF5A -  -  -  -  
 3306 D1:CF5A -  -  -  -  ;zeropage	ISC oper	E7	2	5  	
 3307 D1:CF5A -  -  -  -  inst6502_isc_zp:
 3308 D1:CF5A ED 33 05 -      ADDCYC(5)
 3309 D1:CF5D 7E -  -  -      ld  a,(hl)
 3310 D1:CF5E 01 00 38 D0     ld  bc,ZEROPAGE
 3311 D1:CF62 81 -  -  -      add a,c
 3312 D1:CF63 4F -  -  -      ld  c,a
 3313 D1:CF64 0A -  -  -      ld  a,(bc)
 3314 D1:CF65 3C -  -  -      inc a
 3315 D1:CF66 02 -  -  -      ld  (bc),a
 3316 D1:CF67 4F -  -  -      ld  c,a
 3317 D1:CF68 C3 4A B7 D1     jp  subroutine6502_sbc_combined_end
 3318 D1:CF6C -  -  -  -  
 3319 D1:CF6C -  -  -  -  ;zeropage,X	ISC oper,X	F7	2	6  
 3320 D1:CF6C -  -  -  -  inst6520_isc_zpx:
 3321 D1:CF6C ED 33 06 -      ADDCYC(6)
 3322 D1:CF6F 7E -  -  -      ld  a,(hl)
 3323 D1:CF70 01 00 38 D0     ld  bc,ZEROPAGE
 3324 D1:CF74 81 -  -  -      add a,c
 3325 D1:CF75 DD 86 01 -      add a,(ix+REGX)
 3326 D1:CF78 4F -  -  -      ld  c,a
 3327 D1:CF79 0A -  -  -      ld  a,(bc)
 3328 D1:CF7A 3C -  -  -      inc a
 3329 D1:CF7B 02 -  -  -      ld  (bc),a
 3330 D1:CF7C 4F -  -  -      ld  c,a
 3331 D1:CF7D C3 4A B7 D1     jp  subroutine6502_sbc_combined_end
 3332 D1:CF81 -  -  -  -  
 3333 D1:CF81 -  -  -  -  ;absolute	ISC oper	EF	3	6  	
 3334 D1:CF81 -  -  -  -  inst6502_isc_abs:
 3335 D1:CF81 ED 33 06 -      ADDCYC(6)
 3336 D1:CF84 CD 87 B6 D1     call subroutine6502_abs_split_start
 3337 D1:CF88 E5 -  -  -      push hl
 3338 D1:CF89 50 -  -  -          ld  d,b
 3339 D1:CF8A 79 -  -  -          ld  a,c
 3340 D1:CF8B 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3341 D1:CF8D ED 4C -  -          mlt bc
 3342 D1:CF8F 21 00 40 D0         ld  hl,PAGETABLE
 3343 D1:CF93 09 -  -  -          add hl,bc
 3344 D1:CF94 ED 27 -  -          ld  hl,(hl)
 3345 D1:CF96 06 00 -  -          ld  b,0
 3346 D1:CF98 4F -  -  -          ld  c,a
 3347 D1:CF99 09 -  -  -          add hl,bc   ;full address
 3348 D1:CF9A CD 40 AE D1         READ_ACCESS
 3349 D1:CF9E 3C -  -  -          inc a
 3350 D1:CF9F 47 -  -  -          ld b,a
 3351 D1:CFA0 4F -  -  -          ld c,a
 3352 D1:CFA1 C5 -  -  -          push bc
 3353 D1:CFA2 CD 63 AE D1             WRITE_ACCESS
 3354 D1:CFA6 C1 -  -  -          pop bc
 3355 D1:CFA7 E1 -  -  -      pop hl
 3356 D1:CFA8 C3 4A B7 D1     jp  subroutine6502_sbc_combined_end
 3357 D1:CFAC -  -  -  -  
 3358 D1:CFAC -  -  -  -  ;absolut,X	ISC oper,X	FF	3	7  	
 3359 D1:CFAC -  -  -  -  inst6502_isc_absx:
 3360 D1:CFAC ED 33 07 -      ADDCYC(7)
 3361 D1:CFAF CD E4 B6 D1     PUSH_ABSXSPLIT_NODEP
 3362 D1:CFB3 CD 40 AE D1         READ_ACCESS
 3363 D1:CFB7 3C -  -  -          inc a
 3364 D1:CFB8 47 -  -  -          ld  b,a
 3365 D1:CFB9 4F -  -  -          ld  c,a
 3366 D1:CFBA C5 -  -  -          push bc
 3367 D1:CFBB CD 63 AE D1             WRITE_ACCESS
 3368 D1:CFBF C1 -  -  -          pop bc
 3369 D1:CFC0 E1 -  -  -      pop hl
 3370 D1:CFC1 C3 4A B7 D1     jp  subroutine6502_sbc_combined_end
 3371 D1:CFC5 -  -  -  -  
 3372 D1:CFC5 -  -  -  -  ;absolut,Y	ISC oper,Y	FB	3	7  	
 3373 D1:CFC5 -  -  -  -  inst6502_isc_absy:
 3374 D1:CFC5 ED 33 07 -      ADDCYC(7)
 3375 D1:CFC8 CD DF B6 D1     PUSH_ABSYSPLIT_NODEP
 3376 D1:CFCC CD 40 AE D1         READ_ACCESS
 3377 D1:CFD0 3C -  -  -          inc a
 3378 D1:CFD1 47 -  -  -          ld  b,a
 3379 D1:CFD2 4F -  -  -          ld  c,a
 3380 D1:CFD3 C5 -  -  -          push bc
 3381 D1:CFD4 CD 63 AE D1             WRITE_ACCESS
 3382 D1:CFD8 C1 -  -  -          pop bc
 3383 D1:CFD9 E1 -  -  -      pop hl
 3384 D1:CFDA C3 4A B7 D1     jp  subroutine6502_sbc_combined_end
 3385 D1:CFDE -  -  -  -  
 3386 D1:CFDE -  -  -  -  ;(indirect,X)	ISC (oper,X)	E3	2	8  	
 3387 D1:CFDE -  -  -  -  inst6502_isc_indx:
 3388 D1:CFDE ED 33 08 -      ADDCYC(8)
 3389 D1:CFE1 E5 -  -  -      push hl
 3390 D1:CFE2 7E -  -  -          ld  a,(hl)
 3391 D1:CFE3 21 00 38 D0         ld  hl,ZEROPAGE
 3392 D1:CFE7 85 -  -  -          add a,L
 3393 D1:CFE8 DD 86 01 -          add a,(ix+REGX)
 3394 D1:CFEB 6F -  -  -          ld  L,a
 3395 D1:CFEC 7E -  -  -          ld  a,(hl)
 3396 D1:CFED 2C -  -  -          inc L
 3397 D1:CFEE 56 -  -  -          ld  d,(hl)
 3398 D1:CFEF 42 -  -  -          ld  b,d
 3399 D1:CFF0 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3400 D1:CFF2 ED 4C -  -          mlt bc
 3401 D1:CFF4 21 00 40 D0         ld  hl,PAGETABLE
 3402 D1:CFF8 09 -  -  -          add hl,bc
 3403 D1:CFF9 ED 27 -  -          ld  hl,(hl)
 3404 D1:CFFB 06 00 -  -          ld  b,0
 3405 D1:CFFD 4F -  -  -          ld  c,a
 3406 D1:CFFE 09 -  -  -          add hl,bc
 3407 D1:CFFF CD 40 AE D1         READ_ACCESS
 3408 D1:D003 3C -  -  -          inc a
 3409 D1:D004 47 -  -  -          ld  b,a
 3410 D1:D005 4F -  -  -          ld  c,a
 3411 D1:D006 C5 -  -  -          push bc
 3412 D1:D007 CD 63 AE D1             WRITE_ACCESS
 3413 D1:D00B C1 -  -  -          pop bc
 3414 D1:D00C E1 -  -  -      pop hl
 3415 D1:D00D C3 4A B7 D1     jp  subroutine6502_sbc_combined_end
 3416 D1:D011 -  -  -  -  
 3417 D1:D011 -  -  -  -  ;(indirect),Y	ISC (oper),Y	F3	2	8  
 3418 D1:D011 -  -  -  -  inst6502_isc_indy:
 3419 D1:D011 ED 33 08 -      ADDCYC(8)
 3420 D1:D014 E5 -  -  -      push hl
 3421 D1:D015 7E -  -  -          ld  a,(hl)
 3422 D1:D016 21 00 38 D0         ld  hl,ZEROPAGE
 3423 D1:D01A 85 -  -  -          add a,L
 3424 D1:D01B 6F -  -  -          ld  L,a
 3425 D1:D01C 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3426 D1:D01D 2C -  -  -          inc L
 3427 D1:D01E DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3428 D1:D021 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3429 D1:D022 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3430 D1:D024 24 -  -  -          inc h
 3431 D1:D025 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3432 D1:D026 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3433 D1:D028 ED 6C -  -          mlt hl          ;23.
 3434 D1:D02A 01 00 40 D0         ld  bc,PAGETABLE
 3435 D1:D02E 09 -  -  -          add hl,bc
 3436 D1:D02F ED 27 -  -          ld  hl,(hl)     ;address get.
 3437 D1:D031 01 00 00 00         ld  bc,0
 3438 D1:D035 4F -  -  -          ld  c,a
 3439 D1:D036 09 -  -  -          add hl,bc       ;Full address get.
 3440 D1:D037 CD 40 AE D1         READ_ACCESS
 3441 D1:D03B 3C -  -  -          inc a
 3442 D1:D03C 47 -  -  -          ld  b,a
 3443 D1:D03D 4F -  -  -          ld  c,a
 3444 D1:D03E C5 -  -  -          push bc
 3445 D1:D03F CD 63 AE D1             WRITE_ACCESS
 3446 D1:D043 C1 -  -  -          pop bc
 3447 D1:D044 E1 -  -  -      pop hl
 3448 D1:D045 C3 4A B7 D1     jp  subroutine6502_sbc_combined_end
 3449 D1:D049 -  -  -  -  ;-----------------------------------------------------------------------------
 3450 D1:D049 -  -  -  -  ;LAS (LAR) - LDA/TSX oper
 3451 D1:D049 -  -  -  -  ;M AND SP -> A, X, SP. Affects ZN
 3452 D1:D049 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3453 D1:D049 -  -  -  -  ;absolut,Y	LAS oper,Y	BB	3	4* 
 3454 D1:D049 -  -  -  -  inst6502_las_absy:
 3455 D1:D049 ED 33 04 -      ADDCYC(4)
 3456 D1:D04C CD A3 B6 D1     PUSH_ABSYSPLIT
 3457 D1:D050 CD 40 AE D1         READ_ACCESS
 3458 D1:D054 E1 -  -  -      pop hl
 3459 D1:D055 DD A6 03 -      and a,(ix+REGSP)
 3460 D1:D058 DD 77 00 -      ld  (ix+REGA),A
 3461 D1:D05B DD 77 01 -      ld  (ix+REGX),A
 3462 D1:D05E DD 77 03 -      ld  (ix+REGSP),A
 3463 D1:D061 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3464 D1:D075 C3 DF B5 D1     jp i6502NextLoad
 3465 D1:D079 -  -  -  -  
 3466 D1:D079 -  -  -  -  ;-----------------------------------------------------------------------------
 3467 D1:D079 -  -  -  -  ;LAX - LDA oper + LDX oper
 3468 D1:D079 -  -  -  -  ;M -> A -> X. Flags affected: ZN
 3469 D1:D079 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3470 D1:D079 -  -  -  -  ;zeropage	LAX oper	A7	2	3  	
 3471 D1:D079 -  -  -  -  inst6502_lax_zp:
 3472 D1:D079 ED 33 03 -      ADDCYC(3)
 3473 D1:D07C 7E -  -  -      ld  a,(hl)
 3474 D1:D07D 01 00 38 D0     ld  bc,ZEROPAGE
 3475 D1:D081 81 -  -  -      add a,c
 3476 D1:D082 4F -  -  -      ld  c,a
 3477 D1:D083 0A -  -  -      ld  a,(bc)
 3478 D1:D084 DD 77 00 -      ld  (ix+REGA),a
 3479 D1:D087 DD 77 01 -      ld  (ix+REGX),a
 3480 D1:D08A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3481 D1:D09E C3 DF B5 D1     jp i6502NextLoad
 3482 D1:D0A2 -  -  -  -  
 3483 D1:D0A2 -  -  -  -  ;zeropage,Y	LAX oper,Y	B7	2	4  	
 3484 D1:D0A2 -  -  -  -  inst6502_lax_zpy:
 3485 D1:D0A2 ED 33 04 -      ADDCYC(4)
 3486 D1:D0A5 7E -  -  -      ld  a,(hl)
 3487 D1:D0A6 01 00 38 D0     ld  bc,ZEROPAGE
 3488 D1:D0AA 81 -  -  -      add a,c
 3489 D1:D0AB DD 86 02 -      add a,(ix+REGY)
 3490 D1:D0AE 4F -  -  -      ld  c,a
 3491 D1:D0AF 0A -  -  -      ld  a,(bc)
 3492 D1:D0B0 DD 77 00 -      ld  (ix+REGA),a
 3493 D1:D0B3 DD 77 01 -      ld  (ix+REGX),a
 3494 D1:D0B6 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3495 D1:D0CA C3 DF B5 D1     jp i6502NextLoad
 3496 D1:D0CE -  -  -  -  
 3497 D1:D0CE -  -  -  -  ;absolute	LAX oper	AF	3	4  	
 3498 D1:D0CE -  -  -  -  inst6502_lax_abs:
 3499 D1:D0CE ED 33 04 -      ADDCYC(4)
 3500 D1:D0D1 CD 87 B6 D1     call subroutine6502_abs_split_start
 3501 D1:D0D5 E5 -  -  -      push hl
 3502 D1:D0D6 50 -  -  -          ld  d,b
 3503 D1:D0D7 79 -  -  -          ld  a,c
 3504 D1:D0D8 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3505 D1:D0DA ED 4C -  -          mlt bc
 3506 D1:D0DC 21 00 40 D0         ld  hl,PAGETABLE
 3507 D1:D0E0 09 -  -  -          add hl,bc
 3508 D1:D0E1 ED 27 -  -          ld  hl,(hl)
 3509 D1:D0E3 06 00 -  -          ld  b,0
 3510 D1:D0E5 4F -  -  -          ld  c,a
 3511 D1:D0E6 09 -  -  -          add hl,bc   ;full address
 3512 D1:D0E7 CD 40 AE D1         READ_ACCESS
 3513 D1:D0EB DD 77 00 -          ld (ix+REGA),a
 3514 D1:D0EE DD 77 01 -          ld (ix+REGX),a
 3515 D1:D0F1 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3516 D1:D105 E1 -  -  -      pop hl
 3517 D1:D106 C3 DF B5 D1     jp i6502NextLoad
 3518 D1:D10A -  -  -  -  
 3519 D1:D10A -  -  -  -  ;absolut,Y	LAX oper,Y	BF	3	4* 	
 3520 D1:D10A -  -  -  -  inst6502_lax_absy:
 3521 D1:D10A ED 33 04 -      ADDCYC(4)
 3522 D1:D10D CD A3 B6 D1     PUSH_ABSYSPLIT
 3523 D1:D111 CD 40 AE D1         READ_ACCESS
 3524 D1:D115 DD 77 00 -          ld (ix+REGA),a
 3525 D1:D118 DD 77 01 -          ld (ix+REGX),a
 3526 D1:D11B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3527 D1:D12F E1 -  -  -      pop hl
 3528 D1:D130 C3 DF B5 D1     jp i6502NextLoad
 3529 D1:D134 -  -  -  -  
 3530 D1:D134 -  -  -  -  ;(indirect,X)	LAX (oper,X)	A3	2	6  	
 3531 D1:D134 -  -  -  -  inst6502_lax_indx:
 3532 D1:D134 ED 33 06 -      ADDCYC(6)
 3533 D1:D137 E5 -  -  -      push hl
 3534 D1:D138 7E -  -  -          ld  a,(hl)
 3535 D1:D139 21 00 38 D0         ld  hl,ZEROPAGE
 3536 D1:D13D 85 -  -  -          add a,L
 3537 D1:D13E DD 86 01 -          add a,(ix+REGX)
 3538 D1:D141 6F -  -  -          ld  L,a
 3539 D1:D142 7E -  -  -          ld  a,(hl)
 3540 D1:D143 2C -  -  -          inc L
 3541 D1:D144 56 -  -  -          ld  d,(hl)
 3542 D1:D145 42 -  -  -          ld  b,d
 3543 D1:D146 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3544 D1:D148 ED 4C -  -          mlt bc
 3545 D1:D14A 21 00 40 D0         ld  hl,PAGETABLE
 3546 D1:D14E 09 -  -  -          add hl,bc
 3547 D1:D14F ED 27 -  -          ld  hl,(hl)
 3548 D1:D151 06 00 -  -          ld  b,0
 3549 D1:D153 4F -  -  -          ld  c,a
 3550 D1:D154 09 -  -  -          add hl,bc
 3551 D1:D155 CD 40 AE D1         READ_ACCESS
 3552 D1:D159 DD 77 00 -          ld (ix+REGA),a
 3553 D1:D15C DD 77 01 -          ld (ix+REGX),a
 3554 D1:D15F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3555 D1:D173 E1 -  -  -      pop hl
 3556 D1:D174 C3 DF B5 D1     jp i6502NextLoad
 3557 D1:D178 -  -  -  -  
 3558 D1:D178 -  -  -  -  ;(indirect),Y	LAX (oper),Y	B3	2	5* 
 3559 D1:D178 -  -  -  -  inst6502_lax_indy:
 3560 D1:D178 ED 33 05 -      ADDCYC(5)
 3561 D1:D17B E5 -  -  -      push hl
 3562 D1:D17C 7E -  -  -          ld  a,(hl)
 3563 D1:D17D 21 00 38 D0         ld  hl,ZEROPAGE
 3564 D1:D181 85 -  -  -          add a,L
 3565 D1:D182 6F -  -  -          ld  L,a
 3566 D1:D183 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3567 D1:D184 2C -  -  -          inc L
 3568 D1:D185 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3569 D1:D188 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3570 D1:D189 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3571 D1:D18B FD 23 -  -          ADDCYC(1)
 3572 D1:D18D 24 -  -  -          inc h
 3573 D1:D18E 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3574 D1:D18F 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3575 D1:D191 ED 6C -  -          mlt hl          ;23.
 3576 D1:D193 01 00 40 D0         ld  bc,PAGETABLE
 3577 D1:D197 09 -  -  -          add hl,bc
 3578 D1:D198 ED 27 -  -          ld  hl,(hl)     ;address get.
 3579 D1:D19A 01 00 00 00         ld  bc,0
 3580 D1:D19E 4F -  -  -          ld  c,a
 3581 D1:D19F 09 -  -  -          add hl,bc       ;Full address get.
 3582 D1:D1A0 CD 40 AE D1         READ_ACCESS
 3583 D1:D1A4 DD 77 00 -          ld  (ix+REGA),a
 3584 D1:D1A7 DD 77 01 -          ld  (ix+REGX),a
 3585 D1:D1AA DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3586 D1:D1BE E1 -  -  -      pop hl
 3587 D1:D1BF C3 DF B5 D1     jp i6502NextLoad
 3588 D1:D1C3 -  -  -  -  
 3589 D1:D1C3 -  -  -  -  ;-----------------------------------------------------------------------------
 3590 D1:D1C3 -  -  -  -  ;LXA (LAX immediate)
 3591 D1:D1C3 -  -  -  -  ;Store * AND oper in A and X
 3592 D1:D1C3 -  -  -  -  ;Highly unstable, involves a 'magic' constant, see ANE
 3593 D1:D1C3 -  -  -  -  ;(A OR CONST) AND oper -> A -> X
 3594 D1:D1C3 -  -  -  -  ;immediate	LXA #oper	AB	2	2  	††
 3595 D1:D1C3 -  -  -  -  inst6502_lxa:
 3596 D1:D1C3 ED 33 02 -      ADDCYC(2)
 3597 D1:D1C6 ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3598 D1:D1C8 DD B6 00 -      or  a,(ix+REGA)
 3599 D1:D1CB A6 -  -  -      and a,(hl)
 3600 D1:D1CC DD 77 00 -      ld  (ix+REGA),a
 3601 D1:D1CF DD 77 01 -      ld  (ix+REGX),a
 3602 D1:D1D2 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3603 D1:D1E6 C3 DF B5 D1     jp  i6502NextLoad
 3604 D1:D1EA -  -  -  -  
 3605 D1:D1EA -  -  -  -  ;-----------------------------------------------------------------------------
 3606 D1:D1EA -  -  -  -  ;RLA - ROL oper + AND oper
 3607 D1:D1EA -  -  -  -  ;M = C <- [76543210] <- C, A AND M -> A. flags CZN
 3608 D1:D1EA -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3609 D1:D1EA -  -  -  -  ;zeropage	RLA oper	27	2	5  	
 3610 D1:D1EA -  -  -  -  inst6502_rla_zp:
 3611 D1:D1EA ED 33 05 -      ADDCYC(5)
 3612 D1:D1ED 7E -  -  -      ld  a,(hl)
 3613 D1:D1EE 01 00 38 D0     ld  bc,ZEROPAGE
 3614 D1:D1F2 81 -  -  -      add a,c
 3615 D1:D1F3 4F -  -  -      ld  c,a
 3616 D1:D1F4 DD 7E 04 -      ld  a,(ix+REGSR)
 3617 D1:D1F7 1F -  -  -      rra
 3618 D1:D1F8 0A -  -  -      ld  a,(bc)
 3619 D1:D1F9 17 -  -  -      rla
 3620 D1:D1FA 02 -  -  -      ld  (bc),a
 3621 D1:D1FB -  -  -  -      ;Flag breakdown to optimize for split operation
 3622 D1:D1FB DD 46 04 -      ld  b,(ix+REGSR)
 3623 D1:D1FE CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3624 D1:D204 DD A6 00 -      and a,(ix+REGA)
 3625 D1:D207 DD 77 00 -      ld  (ix+REGA),a
 3626 D1:D20A CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3627 D1:D210 87 -  -  -      add a,a
 3628 D1:D211 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3629 D1:D217 DD 70 04 -      ld  (ix+REGSR),b
 3630 D1:D21A C3 DF B5 D1     jp i6502NextLoad
 3631 D1:D21E -  -  -  -  
 3632 D1:D21E -  -  -  -  ;zeropage,X	RLA oper,X	37	2	6  	
 3633 D1:D21E -  -  -  -  inst6502_rla_zpx:
 3634 D1:D21E ED 33 06 -      ADDCYC(6)
 3635 D1:D221 7E -  -  -      ld  a,(hl)
 3636 D1:D222 01 00 38 D0     ld  bc,ZEROPAGE
 3637 D1:D226 81 -  -  -      add a,c
 3638 D1:D227 DD 86 01 -      add a,(ix+REGX)
 3639 D1:D22A 4F -  -  -      ld  c,a
 3640 D1:D22B DD 7E 04 -      ld  a,(ix+REGSR)
 3641 D1:D22E 1F -  -  -      rra
 3642 D1:D22F 0A -  -  -      ld  a,(bc)
 3643 D1:D230 17 -  -  -      rla
 3644 D1:D231 02 -  -  -      ld  (bc),a
 3645 D1:D232 -  -  -  -      ;Flag breakdown to optimize for split operation
 3646 D1:D232 DD 46 04 -      ld  b,(ix+REGSR)
 3647 D1:D235 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3648 D1:D23B DD A6 00 -      and a,(ix+REGA)
 3649 D1:D23E DD 77 00 -      ld  (ix+REGA),a
 3650 D1:D241 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3651 D1:D247 87 -  -  -      add a,a
 3652 D1:D248 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3653 D1:D24E DD 70 04 -      ld  (ix+REGSR),b
 3654 D1:D251 C3 DF B5 D1     jp i6502NextLoad
 3655 D1:D255 -  -  -  -  
 3656 D1:D255 -  -  -  -  ;absolute	RLA oper	2F	3	6  	
 3657 D1:D255 -  -  -  -  inst6502_rla_abs:
 3658 D1:D255 ED 33 06 -      ADDCYC(6)
 3659 D1:D258 CD 87 B6 D1     call subroutine6502_abs_split_start
 3660 D1:D25C E5 -  -  -      push hl
 3661 D1:D25D 50 -  -  -          ld  d,b
 3662 D1:D25E 79 -  -  -          ld  a,c
 3663 D1:D25F 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3664 D1:D261 ED 4C -  -          mlt bc
 3665 D1:D263 21 00 40 D0         ld  hl,PAGETABLE
 3666 D1:D267 09 -  -  -          add hl,bc
 3667 D1:D268 ED 27 -  -          ld  hl,(hl)
 3668 D1:D26A 06 00 -  -          ld  b,0
 3669 D1:D26C 4F -  -  -          ld  c,a
 3670 D1:D26D 09 -  -  -          add hl,bc   ;full address
 3671 D1:D26E CD 40 AE D1         READ_ACCESS
 3672 D1:D272 DD 46 04 -          ld  b,(ix+REGSR)
 3673 D1:D275 CB 18 -  -          rr b
 3674 D1:D277 17 -  -  -          rla
 3675 D1:D278 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3676 D1:D279 -  -  -  -          ;Split oper
 3677 D1:D279 DD 46 04 -          ld  b,(ix+REGSR)
 3678 D1:D27C CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3679 D1:D282 DD A6 00 -          and a,(ix+REGA)
 3680 D1:D285 DD 77 00 -          ld  (ix+REGA),a
 3681 D1:D288 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3682 D1:D28E 87 -  -  -          add a,a
 3683 D1:D28F CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3684 D1:D295 DD 70 04 -          ld  (ix+REGSR),b
 3685 D1:D298 41 -  -  -          ld  b,c
 3686 D1:D299 CD 63 AE D1         WRITE_ACCESS
 3687 D1:D29D E1 -  -  -      pop hl
 3688 D1:D29E C3 DF B5 D1     jp i6502NextLoad
 3689 D1:D2A2 -  -  -  -  
 3690 D1:D2A2 -  -  -  -  ;absolut,X	RLA oper,X	3F	3	7  	
 3691 D1:D2A2 -  -  -  -  inst6502_rla_absx:
 3692 D1:D2A2 ED 33 07 -      ADDCYC(7)
 3693 D1:D2A5 CD E4 B6 D1     PUSH_ABSXSPLIT_NODEP
 3694 D1:D2A9 CD 40 AE D1         READ_ACCESS
 3695 D1:D2AD DD 46 04 -          ld  b,(ix+REGSR)
 3696 D1:D2B0 CB 18 -  -          rr b
 3697 D1:D2B2 17 -  -  -          rla
 3698 D1:D2B3 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3699 D1:D2B4 -  -  -  -          ;Split oper
 3700 D1:D2B4 DD 46 04 -          ld  b,(ix+REGSR)
 3701 D1:D2B7 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3702 D1:D2BD DD A6 00 -          and a,(ix+REGA)
 3703 D1:D2C0 DD 77 00 -          ld  (ix+REGA),a
 3704 D1:D2C3 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3705 D1:D2C9 87 -  -  -          add a,a
 3706 D1:D2CA CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3707 D1:D2D0 DD 70 04 -          ld  (ix+REGSR),b
 3708 D1:D2D3 41 -  -  -          ld  b,c
 3709 D1:D2D4 CD 63 AE D1         WRITE_ACCESS
 3710 D1:D2D8 E1 -  -  -      pop hl
 3711 D1:D2D9 C3 DF B5 D1     jp i6502NextLoad
 3712 D1:D2DD -  -  -  -  
 3713 D1:D2DD -  -  -  -  ;absolut,Y	RLA oper,Y	3B	3	7  	
 3714 D1:D2DD -  -  -  -  inst6502_rla_absy:
 3715 D1:D2DD ED 33 07 -      ADDCYC(7)
 3716 D1:D2E0 CD DF B6 D1     PUSH_ABSYSPLIT_NODEP
 3717 D1:D2E4 CD 40 AE D1         READ_ACCESS
 3718 D1:D2E8 DD 46 04 -          ld  b,(ix+REGSR)
 3719 D1:D2EB CB 18 -  -          rr b
 3720 D1:D2ED 17 -  -  -          rla
 3721 D1:D2EE 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3722 D1:D2EF -  -  -  -          ;Split oper
 3723 D1:D2EF DD 46 04 -          ld  b,(ix+REGSR)
 3724 D1:D2F2 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3725 D1:D2F8 DD A6 00 -          and a,(ix+REGA)
 3726 D1:D2FB DD 77 00 -          ld  (ix+REGA),a
 3727 D1:D2FE CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3728 D1:D304 87 -  -  -          add a,a
 3729 D1:D305 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3730 D1:D30B DD 70 04 -          ld  (ix+REGSR),b
 3731 D1:D30E 41 -  -  -          ld  b,c
 3732 D1:D30F CD 63 AE D1         WRITE_ACCESS
 3733 D1:D313 E1 -  -  -      pop hl
 3734 D1:D314 C3 DF B5 D1     jp i6502NextLoad
 3735 D1:D318 -  -  -  -  
 3736 D1:D318 -  -  -  -  ;(indirect,X)	RLA (oper,X)	23	2	8  	
 3737 D1:D318 -  -  -  -  isnt6502_rla_indx:
 3738 D1:D318 ED 33 08 -      ADDCYC(8)
 3739 D1:D31B E5 -  -  -      push hl
 3740 D1:D31C 7E -  -  -          ld  a,(hl)
 3741 D1:D31D 21 00 38 D0         ld  hl,ZEROPAGE
 3742 D1:D321 85 -  -  -          add a,L
 3743 D1:D322 DD 86 01 -          add a,(ix+REGX)
 3744 D1:D325 6F -  -  -          ld  L,a
 3745 D1:D326 7E -  -  -          ld  a,(hl)
 3746 D1:D327 2C -  -  -          inc L
 3747 D1:D328 56 -  -  -          ld  d,(hl)
 3748 D1:D329 42 -  -  -          ld  b,d
 3749 D1:D32A 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3750 D1:D32C ED 4C -  -          mlt bc
 3751 D1:D32E 21 00 40 D0         ld  hl,PAGETABLE
 3752 D1:D332 09 -  -  -          add hl,bc
 3753 D1:D333 ED 27 -  -          ld  hl,(hl)
 3754 D1:D335 06 00 -  -          ld  b,0
 3755 D1:D337 4F -  -  -          ld  c,a
 3756 D1:D338 09 -  -  -          add hl,bc
 3757 D1:D339 CD 40 AE D1         READ_ACCESS
 3758 D1:D33D DD 46 04 -          ld  b,(ix+REGSR)
 3759 D1:D340 CB 18 -  -          rr b
 3760 D1:D342 17 -  -  -          rla
 3761 D1:D343 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3762 D1:D344 -  -  -  -          ;Split oper
 3763 D1:D344 DD 46 04 -          ld  b,(ix+REGSR)
 3764 D1:D347 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3765 D1:D34D DD A6 00 -          and a,(ix+REGA)
 3766 D1:D350 DD 77 00 -          ld  (ix+REGA),a
 3767 D1:D353 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3768 D1:D359 87 -  -  -          add a,a
 3769 D1:D35A CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3770 D1:D360 DD 70 04 -          ld  (ix+REGSR),b
 3771 D1:D363 41 -  -  -          ld  b,c
 3772 D1:D364 CD 63 AE D1         WRITE_ACCESS
 3773 D1:D368 E1 -  -  -      pop hl
 3774 D1:D369 C3 DF B5 D1     jp  i6502NextLoad
 3775 D1:D36D -  -  -  -  
 3776 D1:D36D -  -  -  -  ;(indirect),Y	RLA (oper),Y	33	2	8  
 3777 D1:D36D -  -  -  -  inst6502_rla_indy:
 3778 D1:D36D ED 33 08 -      ADDCYC(8)
 3779 D1:D370 E5 -  -  -      push hl
 3780 D1:D371 7E -  -  -          ld  a,(hl)
 3781 D1:D372 21 00 38 D0         ld  hl,ZEROPAGE
 3782 D1:D376 85 -  -  -          add a,L
 3783 D1:D377 6F -  -  -          ld  L,a
 3784 D1:D378 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3785 D1:D379 2C -  -  -          inc L
 3786 D1:D37A DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3787 D1:D37D 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3788 D1:D37E 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3789 D1:D380 24 -  -  -          inc h
 3790 D1:D381 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3791 D1:D382 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3792 D1:D384 ED 6C -  -          mlt hl          ;23.
 3793 D1:D386 01 00 40 D0         ld  bc,PAGETABLE
 3794 D1:D38A 09 -  -  -          add hl,bc
 3795 D1:D38B ED 27 -  -          ld  hl,(hl)     ;address get.
 3796 D1:D38D 01 00 00 00         ld  bc,0
 3797 D1:D391 4F -  -  -          ld  c,a
 3798 D1:D392 09 -  -  -          add hl,bc       ;Full address get.
 3799 D1:D393 CD 40 AE D1         READ_ACCESS
 3800 D1:D397 DD 46 04 -          ld  b,(ix+REGSR)
 3801 D1:D39A CB 18 -  -          rr b
 3802 D1:D39C 17 -  -  -          rla
 3803 D1:D39D 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3804 D1:D39E -  -  -  -          ;Split oper
 3805 D1:D39E DD 46 04 -          ld  b,(ix+REGSR)
 3806 D1:D3A1 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3807 D1:D3A7 DD A6 00 -          and a,(ix+REGA)
 3808 D1:D3AA DD 77 00 -          ld  (ix+REGA),a
 3809 D1:D3AD CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3810 D1:D3B3 87 -  -  -          add a,a
 3811 D1:D3B4 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3812 D1:D3BA DD 70 04 -          ld  (ix+REGSR),b
 3813 D1:D3BD 41 -  -  -          ld  b,c
 3814 D1:D3BE CD 63 AE D1         WRITE_ACCESS
 3815 D1:D3C2 E1 -  -  -      pop hl
 3816 D1:D3C3 C3 DF B5 D1     jp  i6502NextLoad
 3817 D1:D3C7 -  -  -  -  
 3818 D1:D3C7 -  -  -  -  ;-----------------------------------------------------------------------------
 3819 D1:D3C7 -  -  -  -  ;RRA
 3820 D1:D3C7 -  -  -  -  ;ROR oper + ADC oper
 3821 D1:D3C7 -  -  -  -  ;M = C -> [76543210] -> C, A + M + C -> A, C. Affects VCZN
 3822 D1:D3C7 -  -  -  -  
 3823 D1:D3C7 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3824 D1:D3C7 -  -  -  -  ;zeropage	RRA oper	67	2	5  	
 3825 D1:D3C7 -  -  -  -  inst6502_rra_zp:
 3826 D1:D3C7 ED 33 05 -      ADDCYC(5)
 3827 D1:D3CA 7E -  -  -      ld  a,(hl)
 3828 D1:D3CB 01 00 38 D0     ld  bc,ZEROPAGE
 3829 D1:D3CF 81 -  -  -      add a,c
 3830 D1:D3D0 4F -  -  -      ld  c,a
 3831 D1:D3D1 DD 7E 04 -      ld  a,(ix+REGSR)
 3832 D1:D3D4 1F -  -  -      rra
 3833 D1:D3D5 0A -  -  -      ld  a,(bc)
 3834 D1:D3D6 1F -  -  -      rra
 3835 D1:D3D7 02 -  -  -      ld  (bc),a
 3836 D1:D3D8 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 3837 D1:D3DC 30 04 -  -      jr nc,$+6
 3838 D1:D3DE DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 3839 D1:D3E2 4F -  -  -      ld  c,a
 3840 D1:D3E3 C3 19 B7 D1     jp  subroutine6502_adc_combined_end
 3841 D1:D3E7 -  -  -  -  
 3842 D1:D3E7 -  -  -  -  ;zeropage,X	RRA oper,X	77	2	6  	
 3843 D1:D3E7 -  -  -  -  inst6502_rra_zpx:
 3844 D1:D3E7 ED 33 06 -      ADDCYC(6)
 3845 D1:D3EA 7E -  -  -      ld  a,(hl)
 3846 D1:D3EB 01 00 38 D0     ld  bc,ZEROPAGE
 3847 D1:D3EF 81 -  -  -      add a,c
 3848 D1:D3F0 DD 86 01 -      add a,(ix+REGX)
 3849 D1:D3F3 4F -  -  -      ld  c,a
 3850 D1:D3F4 DD 7E 04 -      ld  a,(ix+REGSR)
 3851 D1:D3F7 1F -  -  -      rra
 3852 D1:D3F8 0A -  -  -      ld  a,(bc)
 3853 D1:D3F9 1F -  -  -      rra
 3854 D1:D3FA 02 -  -  -      ld  (bc),a
 3855 D1:D3FB DD CB 04 86     res SF_CARRY,(ix+REGSR)
 3856 D1:D3FF 30 04 -  -      jr nc,$+6
 3857 D1:D401 DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 3858 D1:D405 4F -  -  -      ld  c,a
 3859 D1:D406 C3 19 B7 D1     jp  subroutine6502_adc_combined_end
 3860 D1:D40A -  -  -  -  
 3861 D1:D40A -  -  -  -  ;absolute	RRA oper	6F	3	6  	
 3862 D1:D40A -  -  -  -  inst6502_rra_abs:
 3863 D1:D40A ED 33 06 -      ADDCYC(6)
 3864 D1:D40D CD 87 B6 D1     call subroutine6502_abs_split_start
 3865 D1:D411 E5 -  -  -      push hl
 3866 D1:D412 50 -  -  -          ld  d,b
 3867 D1:D413 79 -  -  -          ld  a,c
 3868 D1:D414 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3869 D1:D416 ED 4C -  -          mlt bc
 3870 D1:D418 21 00 40 D0         ld  hl,PAGETABLE
 3871 D1:D41C 09 -  -  -          add hl,bc
 3872 D1:D41D ED 27 -  -          ld  hl,(hl)
 3873 D1:D41F 06 00 -  -          ld  b,0
 3874 D1:D421 4F -  -  -          ld  c,a
 3875 D1:D422 09 -  -  -          add hl,bc   ;full address
 3876 D1:D423 CD 40 AE D1         READ_ACCESS
 3877 D1:D427 DD 46 04 -          ld  b,(ix+REGSR)
 3878 D1:D42A CB 18 -  -          rr b
 3879 D1:D42C 1F -  -  -          rra
 3880 D1:D42D DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3881 D1:D431 30 04 -  -          jr nc,$+6
 3882 D1:D433 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3883 D1:D437 47 -  -  -          ld  b,a
 3884 D1:D438 C5 -  -  -          push bc
 3885 D1:D439 CD 63 AE D1             WRITE_ACCESS
 3886 D1:D43D C1 -  -  -          pop bc
 3887 D1:D43E 48 -  -  -          ld c,b
 3888 D1:D43F E1 -  -  -      pop hl
 3889 D1:D440 C3 19 B7 D1     jp  subroutine6502_adc_combined_end
 3890 D1:D444 -  -  -  -  
 3891 D1:D444 -  -  -  -  ;absolut,X	RRA oper,X	7F	3	7  	
 3892 D1:D444 -  -  -  -  inst6502_rra_absx:
 3893 D1:D444 ED 33 07 -      ADDCYC(7)
 3894 D1:D447 CD E4 B6 D1     PUSH_ABSXSPLIT_NODEP
 3895 D1:D44B CD 40 AE D1         READ_ACCESS
 3896 D1:D44F DD 46 04 -          ld  b,(ix+REGSR)
 3897 D1:D452 CB 18 -  -          rr b
 3898 D1:D454 1F -  -  -          rra
 3899 D1:D455 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3900 D1:D459 30 04 -  -          jr nc,$+6
 3901 D1:D45B DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3902 D1:D45F 47 -  -  -          ld  b,a
 3903 D1:D460 C5 -  -  -          push bc
 3904 D1:D461 CD 63 AE D1             WRITE_ACCESS
 3905 D1:D465 C1 -  -  -          pop bc
 3906 D1:D466 48 -  -  -          ld c,b
 3907 D1:D467 E1 -  -  -      pop hl
 3908 D1:D468 C3 19 B7 D1     jp  subroutine6502_adc_combined_end
 3909 D1:D46C -  -  -  -  
 3910 D1:D46C -  -  -  -  ;absolut,Y	RRA oper,Y	7B	3	7  	
 3911 D1:D46C -  -  -  -  inst6502_rra_absy:
 3912 D1:D46C ED 33 07 -      ADDCYC(7)
 3913 D1:D46F CD DF B6 D1     PUSH_ABSYSPLIT_NODEP
 3914 D1:D473 CD 40 AE D1         READ_ACCESS
 3915 D1:D477 DD 46 04 -          ld  b,(ix+REGSR)
 3916 D1:D47A CB 18 -  -          rr b
 3917 D1:D47C 1F -  -  -          rra
 3918 D1:D47D DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3919 D1:D481 30 04 -  -          jr nc,$+6
 3920 D1:D483 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3921 D1:D487 47 -  -  -          ld  b,a
 3922 D1:D488 C5 -  -  -          push bc
 3923 D1:D489 CD 63 AE D1             WRITE_ACCESS
 3924 D1:D48D C1 -  -  -          pop bc
 3925 D1:D48E 48 -  -  -          ld c,b
 3926 D1:D48F E1 -  -  -      pop hl
 3927 D1:D490 C3 19 B7 D1     jp  subroutine6502_adc_combined_end
 3928 D1:D494 -  -  -  -  
 3929 D1:D494 -  -  -  -  ;(indirect,X)	RRA (oper,X)	63	2	8  	
 3930 D1:D494 -  -  -  -  isnt6502_rra_indx:
 3931 D1:D494 ED 33 08 -      ADDCYC(8)
 3932 D1:D497 E5 -  -  -      push hl
 3933 D1:D498 7E -  -  -          ld  a,(hl)
 3934 D1:D499 21 00 38 D0         ld  hl,ZEROPAGE
 3935 D1:D49D 85 -  -  -          add a,L
 3936 D1:D49E DD 86 01 -          add a,(ix+REGX)
 3937 D1:D4A1 6F -  -  -          ld  L,a
 3938 D1:D4A2 7E -  -  -          ld  a,(hl)
 3939 D1:D4A3 2C -  -  -          inc L
 3940 D1:D4A4 56 -  -  -          ld  d,(hl)
 3941 D1:D4A5 42 -  -  -          ld  b,d
 3942 D1:D4A6 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3943 D1:D4A8 ED 4C -  -          mlt bc
 3944 D1:D4AA 21 00 40 D0         ld  hl,PAGETABLE
 3945 D1:D4AE 09 -  -  -          add hl,bc
 3946 D1:D4AF ED 27 -  -          ld  hl,(hl)
 3947 D1:D4B1 06 00 -  -          ld  b,0
 3948 D1:D4B3 4F -  -  -          ld  c,a
 3949 D1:D4B4 09 -  -  -          add hl,bc
 3950 D1:D4B5 CD 40 AE D1         READ_ACCESS
 3951 D1:D4B9 DD 46 04 -          ld  b,(ix+REGSR)
 3952 D1:D4BC CB 18 -  -          rr b
 3953 D1:D4BE 1F -  -  -          rra
 3954 D1:D4BF DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3955 D1:D4C3 30 04 -  -          jr nc,$+6
 3956 D1:D4C5 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3957 D1:D4C9 47 -  -  -          ld  b,a
 3958 D1:D4CA C5 -  -  -          push bc
 3959 D1:D4CB CD 63 AE D1             WRITE_ACCESS
 3960 D1:D4CF C1 -  -  -          pop bc
 3961 D1:D4D0 48 -  -  -          ld c,b
 3962 D1:D4D1 E1 -  -  -      pop hl
 3963 D1:D4D2 C3 19 B7 D1     jp  subroutine6502_adc_combined_end
 3964 D1:D4D6 -  -  -  -  
 3965 D1:D4D6 -  -  -  -  ;(indirect),Y	RRA (oper),Y	73	2	8  
 3966 D1:D4D6 -  -  -  -  inst6502_rra_indy:
 3967 D1:D4D6 ED 33 08 -      ADDCYC(8)
 3968 D1:D4D9 E5 -  -  -      push hl
 3969 D1:D4DA 7E -  -  -          ld  a,(hl)
 3970 D1:D4DB 21 00 38 D0         ld  hl,ZEROPAGE
 3971 D1:D4DF 85 -  -  -          add a,L
 3972 D1:D4E0 6F -  -  -          ld  L,a
 3973 D1:D4E1 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3974 D1:D4E2 2C -  -  -          inc L
 3975 D1:D4E3 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3976 D1:D4E6 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3977 D1:D4E7 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3978 D1:D4E9 24 -  -  -          inc h
 3979 D1:D4EA 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3980 D1:D4EB 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3981 D1:D4ED ED 6C -  -          mlt hl          ;23.
 3982 D1:D4EF 01 00 40 D0         ld  bc,PAGETABLE
 3983 D1:D4F3 09 -  -  -          add hl,bc
 3984 D1:D4F4 ED 27 -  -          ld  hl,(hl)     ;address get.
 3985 D1:D4F6 01 00 00 00         ld  bc,0
 3986 D1:D4FA 4F -  -  -          ld  c,a
 3987 D1:D4FB 09 -  -  -          add hl,bc       ;Full address get.
 3988 D1:D4FC CD 40 AE D1         READ_ACCESS
 3989 D1:D500 DD 46 04 -          ld  b,(ix+REGSR)
 3990 D1:D503 CB 18 -  -          rr b
 3991 D1:D505 1F -  -  -          rra
 3992 D1:D506 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3993 D1:D50A 30 04 -  -          jr nc,$+6
 3994 D1:D50C DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3995 D1:D510 47 -  -  -          ld  b,a
 3996 D1:D511 C5 -  -  -          push bc
 3997 D1:D512 CD 63 AE D1             WRITE_ACCESS
 3998 D1:D516 C1 -  -  -          pop bc
 3999 D1:D517 48 -  -  -          ld c,b
 4000 D1:D518 E1 -  -  -      pop hl
 4001 D1:D519 C3 19 B7 D1     jp  subroutine6502_adc_combined_end
 4002 D1:D51D -  -  -  -  
 4003 D1:D51D -  -  -  -  ;-----------------------------------------------------------------------------
 4004 D1:D51D -  -  -  -  ;SAX (AXS, AAX) - A AND X -> M
 4005 D1:D51D -  -  -  -  ;A and X are put on the bus at the same time (resulting effectively in an 
 4006 D1:D51D -  -  -  -  ;AND operation) and stored in M. Flags not affected.
 4007 D1:D51D -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4008 D1:D51D -  -  -  -  ;zeropage	SAX oper	87	2	3  	
 4009 D1:D51D -  -  -  -  inst6502_sax_zp:
 4010 D1:D51D ED 33 03 -      ADDCYC(3)
 4011 D1:D520 7E -  -  -      ld  a,(hl)
 4012 D1:D521 01 00 38 D0     ld  bc,ZEROPAGE
 4013 D1:D525 81 -  -  -      add a,c
 4014 D1:D526 4F -  -  -      ld  c,a
 4015 D1:D527 DD 7E 00 -      ld  a,(ix+REGA)
 4016 D1:D52A DD A6 01 -      and a,(ix+REGX)
 4017 D1:D52D 02 -  -  -      ld  (bc),a
 4018 D1:D52E C3 DF B5 D1     jp i6502NextLoad
 4019 D1:D532 -  -  -  -  
 4020 D1:D532 -  -  -  -  
 4021 D1:D532 -  -  -  -  ;zeropage,Y	SAX oper,Y	97	2	4  	
 4022 D1:D532 -  -  -  -  inst6502_sax_zpy:
 4023 D1:D532 ED 33 04 -      ADDCYC(4)
 4024 D1:D535 7E -  -  -      ld  a,(hl)
 4025 D1:D536 01 00 38 D0     ld  bc,ZEROPAGE
 4026 D1:D53A 81 -  -  -      add a,c
 4027 D1:D53B DD 86 02 -      add a,(ix+REGY)
 4028 D1:D53E 4F -  -  -      ld  c,a
 4029 D1:D53F DD 7E 00 -      ld  a,(ix+REGA)
 4030 D1:D542 DD A6 01 -      and a,(ix+REGX)
 4031 D1:D545 02 -  -  -      ld  (bc),a
 4032 D1:D546 C3 DF B5 D1     jp i6502NextLoad
 4033 D1:D54A -  -  -  -  
 4034 D1:D54A -  -  -  -  
 4035 D1:D54A -  -  -  -  ;absolute	SAX oper	8F	3	4  	
 4036 D1:D54A -  -  -  -  inst6502_sax_abs:
 4037 D1:D54A ED 33 04 -      ADDCYC(4)
 4038 D1:D54D CD 87 B6 D1     call subroutine6502_abs_split_start
 4039 D1:D551 E5 -  -  -      push hl
 4040 D1:D552 50 -  -  -          ld  d,b
 4041 D1:D553 79 -  -  -          ld  a,c
 4042 D1:D554 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4043 D1:D556 ED 4C -  -          mlt bc
 4044 D1:D558 21 00 40 D0         ld  hl,PAGETABLE
 4045 D1:D55C 09 -  -  -          add hl,bc
 4046 D1:D55D ED 27 -  -          ld  hl,(hl)
 4047 D1:D55F 06 00 -  -          ld  b,0
 4048 D1:D561 4F -  -  -          ld  c,a
 4049 D1:D562 09 -  -  -          add hl,bc   ;full address
 4050 D1:D563 DD 7E 00 -          ld  a,(ix+REGA)
 4051 D1:D566 DD A6 01 -          and a,(ix+REGX)
 4052 D1:D569 47 -  -  -          ld  b,a
 4053 D1:D56A CD 63 AE D1         WRITE_ACCESS
 4054 D1:D56E E1 -  -  -      pop hl
 4055 D1:D56F C3 DF B5 D1     jp i6502NextLoad
 4056 D1:D573 -  -  -  -  
 4057 D1:D573 -  -  -  -  ;(indirect,X)	SAX (oper,X)	83	2	6  
 4058 D1:D573 -  -  -  -  inst6502_sax_indx:
 4059 D1:D573 ED 33 06 -      ADDCYC(6)
 4060 D1:D576 E5 -  -  -      push hl
 4061 D1:D577 7E -  -  -          ld  a,(hl)
 4062 D1:D578 21 00 38 D0         ld  hl,ZEROPAGE
 4063 D1:D57C 85 -  -  -          add a,L
 4064 D1:D57D DD 86 01 -          add a,(ix+REGX)
 4065 D1:D580 6F -  -  -          ld  L,a
 4066 D1:D581 7E -  -  -          ld  a,(hl)
 4067 D1:D582 2C -  -  -          inc L
 4068 D1:D583 56 -  -  -          ld  d,(hl)
 4069 D1:D584 42 -  -  -          ld  b,d
 4070 D1:D585 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4071 D1:D587 ED 4C -  -          mlt bc
 4072 D1:D589 21 00 40 D0         ld  hl,PAGETABLE
 4073 D1:D58D 09 -  -  -          add hl,bc
 4074 D1:D58E ED 27 -  -          ld  hl,(hl)
 4075 D1:D590 06 00 -  -          ld  b,0
 4076 D1:D592 4F -  -  -          ld  c,a
 4077 D1:D593 09 -  -  -          add hl,bc
 4078 D1:D594 DD 7E 00 -          ld  a,(ix+REGA)
 4079 D1:D597 DD A6 01 -          and a,(ix+REGX)
 4080 D1:D59A 47 -  -  -          ld  b,a
 4081 D1:D59B CD 63 AE D1         WRITE_ACCESS
 4082 D1:D59F E1 -  -  -      pop hl
 4083 D1:D5A0 C3 DF B5 D1     jp i6502NextLoad
 4084 D1:D5A4 -  -  -  -  
 4085 D1:D5A4 -  -  -  -  ;-----------------------------------------------------------------------------
 4086 D1:D5A4 -  -  -  -  ;SBX (AXS, SAX) - CMP and DEX at once, sets flags like CMP
 4087 D1:D5A4 -  -  -  -  ;(A AND X) - oper -> X.  Flags affected: CZN
 4088 D1:D5A4 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4089 D1:D5A4 -  -  -  -  ;immediate	SBX #oper	CB	2	2  
 4090 D1:D5A4 -  -  -  -  inst6502_sbx_imm:
 4091 D1:D5A4 DD 7E 00 -      ld  a,(ix+REGA)
 4092 D1:D5A7 DD A6 01 -      and a,(ix+REGX)
 4093 D1:D5AA 96 -  -  -      sub a,(hl)
 4094 D1:D5AB DD 77 01 -      ld  (ix+REGX),a
 4095 D1:D5AE 3F -  -  -      ccf
 4096 D1:D5AF DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 4097 D1:D5C9 C3 DF B5 D1     jp  i6502NextLoad
 4098 D1:D5CD -  -  -  -  
 4099 D1:D5CD -  -  -  -  ;-----------------------------------------------------------------------------
 4100 D1:D5CD -  -  -  -  ;SHA (AHX, AXA) - Stores A AND X AND (high-byte of addr. + 1) at addr.
 4101 D1:D5CD -  -  -  -  ;unstable: sometimes 'AND (H+1)' is dropped, 
 4102 D1:D5CD -  -  -  -  ;page boundary crossings may not work 
 4103 D1:D5CD -  -  -  -  ;(with the high-byte of the value used as the high-byte of the address)
 4104 D1:D5CD -  -  -  -  ;A AND X AND (H+1) -> M
 4105 D1:D5CD -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4106 D1:D5CD -  -  -  -  ;
 4107 D1:D5CD -  -  -  -  ;NOTE: NOT GOING TO IMPLEMENT THESE. THEY'LL ADVANCE THE 6502 PC IN THE CORRECT
 4108 D1:D5CD -  -  -  -  ;MANNER BUT NOTHING MORE. THE CPU WILL HALT WHEN ENCOUNTERING ONE OF THESE.
 4109 D1:D5CD -  -  -  -  ;
 4110 D1:D5CD -  -  -  -  ;absolut,Y	SHA oper,Y	9F	3	5  	†
 4111 D1:D5CD -  -  -  -  inst6502_sha_absy:
 4112 D1:D5CD ED 33 05 -      ADDCYC(5)
 4113 D1:D5D0 CD A3 B6 D1     PUSH_ABSYSPLIT
 4114 D1:D5D4 18 FE -  -          jr $
 4115 D1:D5D6 E1 -  -  -      pop hl
 4116 D1:D5D7 C3 DF B5 D1     jp i6502NextLoad
 4117 D1:D5DB -  -  -  -  
 4118 D1:D5DB -  -  -  -  ;(indirect),Y	SHA (oper),Y	93	2	6  	†
 4119 D1:D5DB -  -  -  -  inst6502_sha_indy:
 4120 D1:D5DB ED 33 06 -      ADDCYC(6)
 4121 D1:D5DE E5 -  -  -      push hl
 4122 D1:D5DF 7E -  -  -          ld  a,(hl)
 4123 D1:D5E0 21 00 38 D0         ld  hl,ZEROPAGE
 4124 D1:D5E4 85 -  -  -          add a,L
 4125 D1:D5E5 6F -  -  -          ld  L,a
 4126 D1:D5E6 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4127 D1:D5E7 2C -  -  -          inc L
 4128 D1:D5E8 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4129 D1:D5EB 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4130 D1:D5EC 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4131 D1:D5EE 24 -  -  -          inc h
 4132 D1:D5EF 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4133 D1:D5F0 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4134 D1:D5F2 ED 6C -  -          mlt hl          ;23.
 4135 D1:D5F4 01 00 40 D0         ld  bc,PAGETABLE
 4136 D1:D5F8 09 -  -  -          add hl,bc
 4137 D1:D5F9 ED 27 -  -          ld  hl,(hl)     ;address get.
 4138 D1:D5FB 01 00 00 00         ld  bc,0
 4139 D1:D5FF 4F -  -  -          ld  c,a
 4140 D1:D600 09 -  -  -          add hl,bc       ;Full address get.
 4141 D1:D601 CD 40 AE D1         READ_ACCESS
 4142 D1:D605 18 FE -  -          jr $
 4143 D1:D607 E1 -  -  -      pop hl
 4144 D1:D608 C3 DF B5 D1     jp i6502NextLoad
 4145 D1:D60C -  -  -  -  
 4146 D1:D60C -  -  -  -  ;-----------------------------------------------------------------------------
 4147 D1:D60C -  -  -  -  ;SHX (A11, SXA, XAS)
 4148 D1:D60C -  -  -  -  ;SHY (A11, SYA, SAY)
 4149 D1:D60C -  -  -  -  ;TAS (XAS, SHS)
 4150 D1:D60C -  -  -  -  ;Not going to implement these, but they'll still get the program
 4151 D1:D60C -  -  -  -  ;counter to make the correct noises. Right before locking up the core.
 4152 D1:D60C -  -  -  -  ;All of these instructions are marked as "unstable" in that they'll sometimes
 4153 D1:D60C -  -  -  -  ;drop the high byte, and page crossings sometimes won't work.
 4154 D1:D60C -  -  -  -  
 4155 D1:D60C -  -  -  -  ;absolut,Y	SHX oper,Y	9E	3	5  	†
 4156 D1:D60C -  -  -  -  inst6502_shx_absy:
 4157 D1:D60C ED 33 05 -      ADDCYC(5)
 4158 D1:D60F CD DF B6 D1     PUSH_ABSYSPLIT_NODEP
 4159 D1:D613 18 FE -  -          jr $
 4160 D1:D615 E1 -  -  -      pop hl
 4161 D1:D616 C3 DF B5 D1     jp i6502NextLoad
 4162 D1:D61A -  -  -  -  
 4163 D1:D61A -  -  -  -  ;absolut,X	SHY oper,X	9C	3	5  	†
 4164 D1:D61A -  -  -  -  inst6502_shy_absx:
 4165 D1:D61A ED 33 05 -      ADDCYC(5)
 4166 D1:D61D CD E4 B6 D1     PUSH_ABSXSPLIT_NODEP
 4167 D1:D621 18 FE -  -          jr $
 4168 D1:D623 E1 -  -  -      pop hl
 4169 D1:D624 C3 DF B5 D1     jp i6502NextLoad
 4170 D1:D628 -  -  -  -  
 4171 D1:D628 -  -  -  -  ;absolut,Y	TAS oper,Y	9B	3	5  	†
 4172 D1:D628 -  -  -  -  inst6502_tas_absy:
 4173 D1:D628 ED 33 05 -      ADDCYC(5)
 4174 D1:D62B CD DF B6 D1     PUSH_ABSYSPLIT_NODEP
 4175 D1:D62F 18 FE -  -          jr $
 4176 D1:D631 E1 -  -  -      pop hl
 4177 D1:D632 C3 DF B5 D1     jp i6502NextLoad
 4178 D1:D636 -  -  -  -  
 4179 D1:D636 -  -  -  -  ;-----------------------------------------------------------------------------
 4180 D1:D636 -  -  -  -  ;SLO (ASO) - ASL oper + ORA oper
 4181 D1:D636 -  -  -  -  ;M = C <- [76543210] <- 0, A OR M -> A. Affects: CZN
 4182 D1:D636 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4183 D1:D636 -  -  -  -  
 4184 D1:D636 -  -  -  -  ;zeropage	SLO oper	07	2	5  	
 4185 D1:D636 -  -  -  -  inst6502_slo_zp:
 4186 D1:D636 ED 33 05 -      ADDCYC(5)
 4187 D1:D639 7E -  -  -      ld  a,(hl)
 4188 D1:D63A 01 00 38 D0     ld  bc,ZEROPAGE
 4189 D1:D63E 81 -  -  -      add a,c
 4190 D1:D63F 4F -  -  -      ld  c,a
 4191 D1:D640 0A -  -  -      ld  a,(bc)
 4192 D1:D641 CB 27 -  -      sla a
 4193 D1:D643 02 -  -  -      ld  (bc),a
 4194 D1:D644 -  -  -  -      ;Flag breakdown to optimize for split operation
 4195 D1:D644 DD 46 04 -      ld  b,(ix+REGSR)
 4196 D1:D647 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4197 D1:D64D DD B6 00 -      or  a,(ix+REGA)
 4198 D1:D650 DD 77 00 -      ld  (ix+REGA),a
 4199 D1:D653 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4200 D1:D659 87 -  -  -      add a,a
 4201 D1:D65A CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4202 D1:D660 DD 70 04 -      ld  (ix+REGSR),b
 4203 D1:D663 C3 DF B5 D1     jp i6502NextLoad
 4204 D1:D667 -  -  -  -  
 4205 D1:D667 -  -  -  -  ;zeropage,X	SLO oper,X	17	2	6  	
 4206 D1:D667 -  -  -  -  inst6502_slo_zpx:
 4207 D1:D667 ED 33 06 -      ADDCYC(6)
 4208 D1:D66A 7E -  -  -      ld  a,(hl)
 4209 D1:D66B 01 00 38 D0     ld  bc,ZEROPAGE
 4210 D1:D66F 81 -  -  -      add a,c
 4211 D1:D670 DD 86 01 -      add a,(ix+REGX)
 4212 D1:D673 4F -  -  -      ld  c,a
 4213 D1:D674 0A -  -  -      ld  a,(bc)
 4214 D1:D675 CB 27 -  -      sla a
 4215 D1:D677 02 -  -  -      ld  (bc),a
 4216 D1:D678 -  -  -  -      ;Flag breakdown to optimize for split operation
 4217 D1:D678 DD 46 04 -      ld  b,(ix+REGSR)
 4218 D1:D67B CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4219 D1:D681 DD B6 00 -      or  a,(ix+REGA)
 4220 D1:D684 DD 77 00 -      ld  (ix+REGA),a
 4221 D1:D687 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4222 D1:D68D 87 -  -  -      add a,a
 4223 D1:D68E CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4224 D1:D694 DD 70 04 -      ld  (ix+REGSR),b
 4225 D1:D697 C3 DF B5 D1     jp i6502NextLoad
 4226 D1:D69B -  -  -  -  
 4227 D1:D69B -  -  -  -  ;absolute	SLO oper	0F	3	6  	
 4228 D1:D69B -  -  -  -  inst6502_slo_abs:
 4229 D1:D69B ED 33 06 -      ADDCYC(6)
 4230 D1:D69E CD 87 B6 D1     call subroutine6502_abs_split_start
 4231 D1:D6A2 E5 -  -  -      push hl
 4232 D1:D6A3 50 -  -  -          ld  d,b
 4233 D1:D6A4 79 -  -  -          ld  a,c
 4234 D1:D6A5 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4235 D1:D6A7 ED 4C -  -          mlt bc
 4236 D1:D6A9 21 00 40 D0         ld  hl,PAGETABLE
 4237 D1:D6AD 09 -  -  -          add hl,bc
 4238 D1:D6AE ED 27 -  -          ld  hl,(hl)
 4239 D1:D6B0 06 00 -  -          ld  b,0
 4240 D1:D6B2 4F -  -  -          ld  c,a
 4241 D1:D6B3 09 -  -  -          add hl,bc   ;full address
 4242 D1:D6B4 CD 40 AE D1         READ_ACCESS
 4243 D1:D6B8 CB 27 -  -          sla a
 4244 D1:D6BA 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4245 D1:D6BB -  -  -  -          ;Split oper
 4246 D1:D6BB DD 46 04 -          ld  b,(ix+REGSR)
 4247 D1:D6BE CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4248 D1:D6C4 DD B6 00 -          or  a,(ix+REGA)
 4249 D1:D6C7 DD 77 00 -          ld  (ix+REGA),a
 4250 D1:D6CA CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4251 D1:D6D0 87 -  -  -          add a,a
 4252 D1:D6D1 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4253 D1:D6D7 DD 70 04 -          ld  (ix+REGSR),b
 4254 D1:D6DA 41 -  -  -          ld  b,c
 4255 D1:D6DB CD 63 AE D1         WRITE_ACCESS
 4256 D1:D6DF E1 -  -  -      pop hl
 4257 D1:D6E0 C3 DF B5 D1     jp i6502NextLoad
 4258 D1:D6E4 -  -  -  -  
 4259 D1:D6E4 -  -  -  -  ;absolut,X	SLO oper,X	1F	3	7  	
 4260 D1:D6E4 -  -  -  -  inst6502_slo_absx:
 4261 D1:D6E4 ED 33 07 -      ADDCYC(7)
 4262 D1:D6E7 CD E4 B6 D1     PUSH_ABSXSPLIT_NODEP
 4263 D1:D6EB CD 40 AE D1         READ_ACCESS
 4264 D1:D6EF CB 27 -  -          sla a
 4265 D1:D6F1 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4266 D1:D6F2 -  -  -  -          ;Split oper
 4267 D1:D6F2 DD 46 04 -          ld  b,(ix+REGSR)
 4268 D1:D6F5 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4269 D1:D6FB DD B6 00 -          or  a,(ix+REGA)
 4270 D1:D6FE DD 77 00 -          ld  (ix+REGA),a
 4271 D1:D701 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4272 D1:D707 87 -  -  -          add a,a
 4273 D1:D708 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4274 D1:D70E DD 70 04 -          ld  (ix+REGSR),b
 4275 D1:D711 41 -  -  -          ld  b,c
 4276 D1:D712 CD 63 AE D1         WRITE_ACCESS
 4277 D1:D716 E1 -  -  -      pop hl
 4278 D1:D717 C3 DF B5 D1     jp i6502NextLoad
 4279 D1:D71B -  -  -  -  
 4280 D1:D71B -  -  -  -  ;absolut,Y	SLO oper,Y	1B	3	7  	
 4281 D1:D71B -  -  -  -  inst6502_slo_absy:
 4282 D1:D71B ED 33 07 -      ADDCYC(7)
 4283 D1:D71E CD DF B6 D1     PUSH_ABSYSPLIT_NODEP
 4284 D1:D722 CD 40 AE D1         READ_ACCESS
 4285 D1:D726 CB 27 -  -          sla a
 4286 D1:D728 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4287 D1:D729 -  -  -  -          ;Split oper
 4288 D1:D729 DD 46 04 -          ld  b,(ix+REGSR)
 4289 D1:D72C CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4290 D1:D732 DD B6 00 -          or  a,(ix+REGA)
 4291 D1:D735 DD 77 00 -          ld  (ix+REGA),a
 4292 D1:D738 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4293 D1:D73E 87 -  -  -          add a,a
 4294 D1:D73F CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4295 D1:D745 DD 70 04 -          ld  (ix+REGSR),b
 4296 D1:D748 41 -  -  -          ld  b,c
 4297 D1:D749 CD 63 AE D1         WRITE_ACCESS
 4298 D1:D74D E1 -  -  -      pop hl
 4299 D1:D74E C3 DF B5 D1     jp i6502NextLoad
 4300 D1:D752 -  -  -  -  
 4301 D1:D752 -  -  -  -  ;(indirect,X)	SLO (oper,X)	03	2	8  	
 4302 D1:D752 -  -  -  -  isnt6502_slo_indx:
 4303 D1:D752 ED 33 08 -      ADDCYC(8)
 4304 D1:D755 E5 -  -  -      push hl
 4305 D1:D756 7E -  -  -          ld  a,(hl)
 4306 D1:D757 21 00 38 D0         ld  hl,ZEROPAGE
 4307 D1:D75B 85 -  -  -          add a,L
 4308 D1:D75C DD 86 01 -          add a,(ix+REGX)
 4309 D1:D75F 6F -  -  -          ld  L,a
 4310 D1:D760 7E -  -  -          ld  a,(hl)
 4311 D1:D761 2C -  -  -          inc L
 4312 D1:D762 56 -  -  -          ld  d,(hl)
 4313 D1:D763 42 -  -  -          ld  b,d
 4314 D1:D764 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4315 D1:D766 ED 4C -  -          mlt bc
 4316 D1:D768 21 00 40 D0         ld  hl,PAGETABLE
 4317 D1:D76C 09 -  -  -          add hl,bc
 4318 D1:D76D ED 27 -  -          ld  hl,(hl)
 4319 D1:D76F 06 00 -  -          ld  b,0
 4320 D1:D771 4F -  -  -          ld  c,a
 4321 D1:D772 09 -  -  -          add hl,bc
 4322 D1:D773 CD 40 AE D1         READ_ACCESS
 4323 D1:D777 CB 27 -  -          sla a
 4324 D1:D779 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4325 D1:D77A -  -  -  -          ;Split oper
 4326 D1:D77A DD 46 04 -          ld  b,(ix+REGSR)
 4327 D1:D77D CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4328 D1:D783 DD B6 00 -          or  a,(ix+REGA)
 4329 D1:D786 DD 77 00 -          ld  (ix+REGA),a
 4330 D1:D789 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4331 D1:D78F 87 -  -  -          add a,a
 4332 D1:D790 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4333 D1:D796 DD 70 04 -          ld  (ix+REGSR),b
 4334 D1:D799 41 -  -  -          ld  b,c
 4335 D1:D79A CD 63 AE D1         WRITE_ACCESS
 4336 D1:D79E E1 -  -  -      pop hl
 4337 D1:D79F C3 DF B5 D1     jp  i6502NextLoad
 4338 D1:D7A3 -  -  -  -  
 4339 D1:D7A3 -  -  -  -  ;(indirect),Y	SLO (oper),Y	13	2	8  
 4340 D1:D7A3 -  -  -  -  inst6502_slo_indy:
 4341 D1:D7A3 ED 33 08 -      ADDCYC(8)
 4342 D1:D7A6 E5 -  -  -      push hl
 4343 D1:D7A7 7E -  -  -          ld  a,(hl)
 4344 D1:D7A8 21 00 38 D0         ld  hl,ZEROPAGE
 4345 D1:D7AC 85 -  -  -          add a,L
 4346 D1:D7AD 6F -  -  -          ld  L,a
 4347 D1:D7AE 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4348 D1:D7AF 2C -  -  -          inc L
 4349 D1:D7B0 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4350 D1:D7B3 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4351 D1:D7B4 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4352 D1:D7B6 24 -  -  -          inc h
 4353 D1:D7B7 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4354 D1:D7B8 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4355 D1:D7BA ED 6C -  -          mlt hl          ;23.
 4356 D1:D7BC 01 00 40 D0         ld  bc,PAGETABLE
 4357 D1:D7C0 09 -  -  -          add hl,bc
 4358 D1:D7C1 ED 27 -  -          ld  hl,(hl)     ;address get.
 4359 D1:D7C3 01 00 00 00         ld  bc,0
 4360 D1:D7C7 4F -  -  -          ld  c,a
 4361 D1:D7C8 09 -  -  -          add hl,bc       ;Full address get.
 4362 D1:D7C9 CD 40 AE D1         READ_ACCESS
 4363 D1:D7CD CB 27 -  -          sla a
 4364 D1:D7CF 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4365 D1:D7D0 -  -  -  -          ;Split oper
 4366 D1:D7D0 DD 46 04 -          ld  b,(ix+REGSR)
 4367 D1:D7D3 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4368 D1:D7D9 DD B6 00 -          or  a,(ix+REGA)
 4369 D1:D7DC DD 77 00 -          ld  (ix+REGA),a
 4370 D1:D7DF CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4371 D1:D7E5 87 -  -  -          add a,a
 4372 D1:D7E6 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4373 D1:D7EC DD 70 04 -          ld  (ix+REGSR),b
 4374 D1:D7EF 41 -  -  -          ld  b,c
 4375 D1:D7F0 CD 63 AE D1         WRITE_ACCESS
 4376 D1:D7F4 E1 -  -  -      pop hl
 4377 D1:D7F5 C3 DF B5 D1     jp  i6502NextLoad
 4378 D1:D7F9 -  -  -  -  
 4379 D1:D7F9 -  -  -  -  ;-----------------------------------------------------------------------------
 4380 D1:D7F9 -  -  -  -  ;SRE (LSE) - LSR oper + EOR oper
 4381 D1:D7F9 -  -  -  -  ;M = 0 -> [76543210] -> C, A EOR M -> A. Affects: CZN
 4382 D1:D7F9 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4383 D1:D7F9 -  -  -  -  
 4384 D1:D7F9 -  -  -  -  ;zeropage	SRE oper	47	2	5  	
 4385 D1:D7F9 -  -  -  -  inst6502_sre_zp:
 4386 D1:D7F9 ED 33 05 -      ADDCYC(5)
 4387 D1:D7FC 7E -  -  -      ld  a,(hl)
 4388 D1:D7FD 01 00 38 D0     ld  bc,ZEROPAGE
 4389 D1:D801 81 -  -  -      add a,c
 4390 D1:D802 4F -  -  -      ld  c,a
 4391 D1:D803 0A -  -  -      ld  a,(bc)
 4392 D1:D804 CB 3F -  -      srl a
 4393 D1:D806 02 -  -  -      ld  (bc),a
 4394 D1:D807 -  -  -  -      ;Flag breakdown to optimize for split operation
 4395 D1:D807 DD 46 04 -      ld  b,(ix+REGSR)
 4396 D1:D80A CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4397 D1:D810 DD AE 00 -      xor a,(ix+REGA)
 4398 D1:D813 DD 77 00 -      ld  (ix+REGA),a
 4399 D1:D816 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4400 D1:D81C 87 -  -  -      add a,a
 4401 D1:D81D CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4402 D1:D823 DD 70 04 -      ld  (ix+REGSR),b
 4403 D1:D826 C3 DF B5 D1     jp i6502NextLoad
 4404 D1:D82A -  -  -  -  
 4405 D1:D82A -  -  -  -  ;zeropage,X	SRE oper,X	57	2	6  	
 4406 D1:D82A -  -  -  -  inst6502_sre_zpx:
 4407 D1:D82A ED 33 06 -      ADDCYC(6)
 4408 D1:D82D 7E -  -  -      ld  a,(hl)
 4409 D1:D82E 01 00 38 D0     ld  bc,ZEROPAGE
 4410 D1:D832 81 -  -  -      add a,c
 4411 D1:D833 DD 86 01 -      add a,(ix+REGX)
 4412 D1:D836 4F -  -  -      ld  c,a
 4413 D1:D837 0A -  -  -      ld  a,(bc)
 4414 D1:D838 CB 3F -  -      srl a
 4415 D1:D83A 02 -  -  -      ld  (bc),a
 4416 D1:D83B -  -  -  -      ;Flag breakdown to optimize for split operation
 4417 D1:D83B DD 46 04 -      ld  b,(ix+REGSR)
 4418 D1:D83E CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4419 D1:D844 DD AE 00 -      xor a,(ix+REGA)
 4420 D1:D847 DD 77 00 -      ld  (ix+REGA),a
 4421 D1:D84A CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4422 D1:D850 87 -  -  -      add a,a
 4423 D1:D851 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4424 D1:D857 DD 70 04 -      ld  (ix+REGSR),b
 4425 D1:D85A C3 DF B5 D1     jp i6502NextLoad
 4426 D1:D85E -  -  -  -  
 4427 D1:D85E -  -  -  -  ;absolute	SRE oper	4F	3	6  	
 4428 D1:D85E -  -  -  -  inst6502_sre_abs:
 4429 D1:D85E ED 33 06 -      ADDCYC(6)
 4430 D1:D861 CD 87 B6 D1     call subroutine6502_abs_split_start
 4431 D1:D865 E5 -  -  -      push hl
 4432 D1:D866 50 -  -  -          ld  d,b
 4433 D1:D867 79 -  -  -          ld  a,c
 4434 D1:D868 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4435 D1:D86A ED 4C -  -          mlt bc
 4436 D1:D86C 21 00 40 D0         ld  hl,PAGETABLE
 4437 D1:D870 09 -  -  -          add hl,bc
 4438 D1:D871 ED 27 -  -          ld  hl,(hl)
 4439 D1:D873 06 00 -  -          ld  b,0
 4440 D1:D875 4F -  -  -          ld  c,a
 4441 D1:D876 09 -  -  -          add hl,bc   ;full address
 4442 D1:D877 CD 40 AE D1         READ_ACCESS
 4443 D1:D87B CB 3F -  -          srl a
 4444 D1:D87D 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4445 D1:D87E -  -  -  -          ;Split oper
 4446 D1:D87E DD 46 04 -          ld  b,(ix+REGSR)
 4447 D1:D881 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4448 D1:D887 DD AE 00 -          xor a,(ix+REGA)
 4449 D1:D88A DD 77 00 -          ld  (ix+REGA),a
 4450 D1:D88D CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4451 D1:D893 87 -  -  -          add a,a
 4452 D1:D894 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4453 D1:D89A DD 70 04 -          ld  (ix+REGSR),b
 4454 D1:D89D 41 -  -  -          ld  b,c
 4455 D1:D89E CD 63 AE D1         WRITE_ACCESS
 4456 D1:D8A2 E1 -  -  -      pop hl
 4457 D1:D8A3 C3 DF B5 D1     jp i6502NextLoad
 4458 D1:D8A7 -  -  -  -  
 4459 D1:D8A7 -  -  -  -  ;absolut,X	SRE oper,X	5F	3	7  	
 4460 D1:D8A7 -  -  -  -  inst6502_sre_absx:
 4461 D1:D8A7 ED 33 07 -      ADDCYC(7)
 4462 D1:D8AA CD E4 B6 D1     PUSH_ABSXSPLIT_NODEP
 4463 D1:D8AE CD 40 AE D1         READ_ACCESS
 4464 D1:D8B2 CB 3F -  -          srl a
 4465 D1:D8B4 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4466 D1:D8B5 -  -  -  -          ;Split oper
 4467 D1:D8B5 DD 46 04 -          ld  b,(ix+REGSR)
 4468 D1:D8B8 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4469 D1:D8BE DD AE 00 -          xor a,(ix+REGA)
 4470 D1:D8C1 DD 77 00 -          ld  (ix+REGA),a
 4471 D1:D8C4 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4472 D1:D8CA 87 -  -  -          add a,a
 4473 D1:D8CB CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4474 D1:D8D1 DD 70 04 -          ld  (ix+REGSR),b
 4475 D1:D8D4 41 -  -  -          ld  b,c
 4476 D1:D8D5 CD 63 AE D1         WRITE_ACCESS
 4477 D1:D8D9 E1 -  -  -      pop hl
 4478 D1:D8DA C3 DF B5 D1     jp i6502NextLoad
 4479 D1:D8DE -  -  -  -  
 4480 D1:D8DE -  -  -  -  ;absolut,Y	SRE oper,Y	5B	3	7  	
 4481 D1:D8DE -  -  -  -  inst6502_sre_absy:
 4482 D1:D8DE ED 33 07 -      ADDCYC(7)
 4483 D1:D8E1 CD DF B6 D1     PUSH_ABSYSPLIT_NODEP
 4484 D1:D8E5 CD 40 AE D1         READ_ACCESS
 4485 D1:D8E9 CB 3F -  -          srl a
 4486 D1:D8EB 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4487 D1:D8EC -  -  -  -          ;Split oper
 4488 D1:D8EC DD 46 04 -          ld  b,(ix+REGSR)
 4489 D1:D8EF CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4490 D1:D8F5 DD AE 00 -          xor a,(ix+REGA)
 4491 D1:D8F8 DD 77 00 -          ld  (ix+REGA),a
 4492 D1:D8FB CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4493 D1:D901 87 -  -  -          add a,a
 4494 D1:D902 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4495 D1:D908 DD 70 04 -          ld  (ix+REGSR),b
 4496 D1:D90B 41 -  -  -          ld  b,c
 4497 D1:D90C CD 63 AE D1         WRITE_ACCESS
 4498 D1:D910 E1 -  -  -      pop hl
 4499 D1:D911 C3 DF B5 D1     jp i6502NextLoad
 4500 D1:D915 -  -  -  -  
 4501 D1:D915 -  -  -  -  ;(indirect,X)	SRE (oper,X)	43	2	8  	
 4502 D1:D915 -  -  -  -  isnt6502_sre_indx:
 4503 D1:D915 ED 33 08 -      ADDCYC(8)
 4504 D1:D918 E5 -  -  -      push hl
 4505 D1:D919 7E -  -  -          ld  a,(hl)
 4506 D1:D91A 21 00 38 D0         ld  hl,ZEROPAGE
 4507 D1:D91E 85 -  -  -          add a,L
 4508 D1:D91F DD 86 01 -          add a,(ix+REGX)
 4509 D1:D922 6F -  -  -          ld  L,a
 4510 D1:D923 7E -  -  -          ld  a,(hl)
 4511 D1:D924 2C -  -  -          inc L
 4512 D1:D925 56 -  -  -          ld  d,(hl)
 4513 D1:D926 42 -  -  -          ld  b,d
 4514 D1:D927 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4515 D1:D929 ED 4C -  -          mlt bc
 4516 D1:D92B 21 00 40 D0         ld  hl,PAGETABLE
 4517 D1:D92F 09 -  -  -          add hl,bc
 4518 D1:D930 ED 27 -  -          ld  hl,(hl)
 4519 D1:D932 06 00 -  -          ld  b,0
 4520 D1:D934 4F -  -  -          ld  c,a
 4521 D1:D935 09 -  -  -          add hl,bc
 4522 D1:D936 CD 40 AE D1         READ_ACCESS
 4523 D1:D93A CB 3F -  -          srl a
 4524 D1:D93C 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4525 D1:D93D -  -  -  -          ;Split oper
 4526 D1:D93D DD 46 04 -          ld  b,(ix+REGSR)
 4527 D1:D940 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4528 D1:D946 DD AE 00 -          xor a,(ix+REGA)
 4529 D1:D949 DD 77 00 -          ld  (ix+REGA),a
 4530 D1:D94C CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4531 D1:D952 87 -  -  -          add a,a
 4532 D1:D953 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4533 D1:D959 DD 70 04 -          ld  (ix+REGSR),b
 4534 D1:D95C 41 -  -  -          ld  b,c
 4535 D1:D95D CD 63 AE D1         WRITE_ACCESS
 4536 D1:D961 E1 -  -  -      pop hl
 4537 D1:D962 C3 DF B5 D1     jp  i6502NextLoad
 4538 D1:D966 -  -  -  -  
 4539 D1:D966 -  -  -  -  ;(indirect),Y	SRE (oper),Y	53	2	8  
 4540 D1:D966 -  -  -  -  inst6502_sre_indy:
 4541 D1:D966 ED 33 08 -      ADDCYC(8)
 4542 D1:D969 E5 -  -  -      push hl
 4543 D1:D96A 7E -  -  -          ld  a,(hl)
 4544 D1:D96B 21 00 38 D0         ld  hl,ZEROPAGE
 4545 D1:D96F 85 -  -  -          add a,L
 4546 D1:D970 6F -  -  -          ld  L,a
 4547 D1:D971 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4548 D1:D972 2C -  -  -          inc L
 4549 D1:D973 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4550 D1:D976 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4551 D1:D977 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4552 D1:D979 24 -  -  -          inc h
 4553 D1:D97A 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4554 D1:D97B 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4555 D1:D97D ED 6C -  -          mlt hl          ;23.
 4556 D1:D97F 01 00 40 D0         ld  bc,PAGETABLE
 4557 D1:D983 09 -  -  -          add hl,bc
 4558 D1:D984 ED 27 -  -          ld  hl,(hl)     ;address get.
 4559 D1:D986 01 00 00 00         ld  bc,0
 4560 D1:D98A 4F -  -  -          ld  c,a
 4561 D1:D98B 09 -  -  -          add hl,bc       ;Full address get.
 4562 D1:D98C CD 40 AE D1         READ_ACCESS
 4563 D1:D990 CB 3F -  -          srl a
 4564 D1:D992 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4565 D1:D993 -  -  -  -          ;Split oper
 4566 D1:D993 DD 46 04 -          ld  b,(ix+REGSR)
 4567 D1:D996 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4568 D1:D99C DD AE 00 -          xor a,(ix+REGA)
 4569 D1:D99F DD 77 00 -          ld  (ix+REGA),a
 4570 D1:D9A2 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4571 D1:D9A8 87 -  -  -          add a,a
 4572 D1:D9A9 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4573 D1:D9AF DD 70 04 -          ld  (ix+REGSR),b
 4574 D1:D9B2 41 -  -  -          ld  b,c
 4575 D1:D9B3 CD 63 AE D1         WRITE_ACCESS
 4576 D1:D9B7 E1 -  -  -      pop hl
 4577 D1:D9B8 C3 DF B5 D1     jp  i6502NextLoad
 4578 D1:D9BC -  -  -  -  
 4579 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4580 D1:D9BC -  -  -  -  ;USBC (USBC)
 4581 D1:D9BC -  -  -  -  ;immediate	USBC #oper	EB	2	2  
 4582 D1:D9BC -  -  -  -  ;Map this to instruction $E9 (inst6502_sbc_imm)
 4583 D1:D9BC -  -  -  -  
 4584 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4585 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4586 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4587 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4588 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4589 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4590 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4591 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4592 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4593 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4594 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4595 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4596 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4597 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4598 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4599 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4600 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4601 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4602 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4603 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4604 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4605 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4606 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4607 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4608 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4609 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4610 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4611 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4612 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4613 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4614 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4615 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4616 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4617 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4618 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4619 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4620 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4621 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4622 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4623 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4624 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4625 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4626 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4627 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4628 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4629 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4630 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4631 D1:D9BC -  -  -  -  ;-----------------------------------------------------------------------------
 4632 D1:D9BC -  -  -  -  
 4633 D1:D9BC -  -  -  -  inst6502_instruction_set:
 4634 D1:D9BC 1E CC D1 -  .dl	inst6502_brk					;00
 4635 D1:D9BF C5 C4 D1 -  .dl	inst6502_ora_indx				;01
 4636 D1:D9C2 C3 DC D1 -  .dl	inst6502_jam_02 				;02
 4637 D1:D9C5 52 D7 D1 -  .dl	isnt6502_slo_indx				;03
 4638 D1:D9C8 91 CD D1 -  .dl	inst6502_nop_zp 				;04
 4639 D1:D9CB E0 C3 D1 -  .dl	inst6502_ora_zp					;05
 4640 D1:D9CE 7D C5 D1 -  .dl	inst6502_asl_zp					;06
 4641 D1:D9D1 36 D6 D1 -  .dl	inst6502_slo_zp 				;07
 4642 D1:D9D4 06 BD D1 -  .dl	inst6502_php					;08
 4643 D1:D9D7 BE C3 D1 -  .dl	inst6502_ora_imm				;09
 4644 D1:D9DA 54 C5 D1 -  .dl	inst6502_asl					;0A
 4645 D1:D9DD EA CD D1 -  .dl	instr6502_anc_imm				;0B
 4646 D1:D9E0 9F CD D1 -  .dl	inst6502_nop_abs				;0C
 4647 D1:D9E3 35 C4 D1 -  .dl	inst6502_ora_abs				;0D
 4648 D1:D9E6 D8 C5 D1 -  .dl	inst6502_asl_abs				;0E
 4649 D1:D9E9 9B D6 D1 -  .dl	inst6502_slo_abs				;0F
 4650 D1:D9EC F1 CB D1 -  .dl	inst6502_bpl					;10
 4651 D1:D9EF 09 C5 D1 -  .dl	inst6502_ora_indy				;11
 4652 D1:D9F2 BD DC D1 -  .dl	inst6502_jam_12_halt			;12 JAM. Used to halt emulation for inspection
 4653 D1:D9F5 A3 D7 D1 -  .dl	inst6502_slo_indy				;13
 4654 D1:D9F8 98 CD D1 -  .dl	inst6502_nop_zpx				;14
 4655 D1:D9FB 09 C4 D1 -  .dl	inst6502_ora_zpx				;15
 4656 D1:D9FE A9 C5 D1 -  .dl	inst6502_asl_zpx				;16
 4657 D1:DA01 67 D6 D1 -  .dl	inst6502_slo_zpx				;17
 4658 D1:DA04 5E C9 D1 -  .dl	inst6502_clc					;18
 4659 D1:DA07 9B C4 D1 -  .dl	inst6502_ora_absy				;19
 4660 D1:DA0A 83 CD D1 -  .dl	inst6502_nop_implied    		;1A
 4661 D1:DA0D 1B D7 D1 -  .dl	inst6502_slo_absy				;1B
 4662 D1:DA10 B0 CD D1 -  .dl	inst6502_nop_absx				;1C
 4663 D1:DA13 71 C4 D1 -  .dl	inst6502_ora_absx				;1D
 4664 D1:DA16 1C C6 D1 -  .dl	inst6502_asl_absx				;1E
 4665 D1:DA19 E4 D6 D1 -  .dl	inst6502_slo_absx				;1F
 4666 D1:DA1C EB CC D1 -  .dl	inst6502_jsr					;20
 4667 D1:DA1F 99 C1 D1 -  .dl	inst6502_and_indx				;21
 4668 D1:DA22 C3 DC D1 -  .dl	inst6502_jam_22 				;22
 4669 D1:DA25 18 D3 D1 -  .dl	isnt6502_rla_indx				;23
 4670 D1:DA28 37 CD D1 -  .dl	inst6502_bit_zp					;24
 4671 D1:DA2B B4 C0 D1 -  .dl	inst6502_and_zp					;25
 4672 D1:DA2E 74 C7 D1 -  .dl	inst6502_rol_zp					;26
 4673 D1:DA31 EA D1 D1 -  .dl	inst6502_rla_zp 				;27
 4674 D1:DA34 48 BD D1 -  .dl	inst6502_plp					;28
 4675 D1:DA37 92 C0 D1 -  .dl	inst6502_and_imm				;29
 4676 D1:DA3A 48 C7 D1 -  .dl	inst6502_rol					;2A
 4677 D1:DA3D EA CD D1 -  .dl	instr6502_anc2_imm				;2B
 4678 D1:DA40 5B CD D1 -  .dl	inst6502_bit_abs				;2C
 4679 D1:DA43 09 C1 D1 -  .dl	inst6502_and_abs				;2D
 4680 D1:DA46 D5 C7 D1 -  .dl	inst6502_rol_abs				;2E
 4681 D1:DA49 55 D2 D1 -  .dl	inst6502_rla_abs				;2F
 4682 D1:DA4C D3 CB D1 -  .dl	inst6502_bmi					;30
 4683 D1:DA4F DD C1 D1 -  .dl	inst6502_and_indy				;31
 4684 D1:DA52 C3 DC D1 -  .dl	inst6502_jam_32 				;32
 4685 D1:DA55 6D D3 D1 -  .dl	inst6502_rla_indy				;33
 4686 D1:DA58 98 CD D1 -  .dl	inst6502_nop_zpx				;34
 4687 D1:DA5B DD C0 D1 -  .dl	inst6502_and_zpx				;35
 4688 D1:DA5E A3 C7 D1 -  .dl	inst6502_rol_zpx				;36
 4689 D1:DA61 1E D2 D1 -  .dl	inst6502_rla_zpx				;37
 4690 D1:DA64 8A C9 D1 -  .dl	inst6502_sec					;38
 4691 D1:DA67 6F C1 D1 -  .dl	inst6502_and_absy				;39
 4692 D1:DA6A 83 CD D1 -  .dl	inst6502_nop_implied			;3A
 4693 D1:DA6D DD D2 D1 -  .dl	inst6502_rla_absy   			;3B
 4694 D1:DA70 B0 CD D1 -  .dl	inst6502_nop_absx   			;3C
 4695 D1:DA73 45 C1 D1 -  .dl	inst6502_and_absx				;3D
 4696 D1:DA76 1D C8 D1 -  .dl	inst6502_rol_absx				;3E
 4697 D1:DA79 A2 D2 D1 -  .dl	inst6502_rla_absx   			;3F
 4698 D1:DA7C 5A CC D1 -  .dl	inst6502_rti					;40
 4699 D1:DA7F 2F C3 D1 -  .dl	inst6502_eor_indx				;41
 4700 D1:DA82 C3 DC D1 -  .dl	inst6502_jam_42     			;42
 4701 D1:DA85 15 D9 D1 -  .dl	isnt6502_sre_indx   			;43
 4702 D1:DA88 91 CD D1 -  .dl	inst6502_nop_zp     			;44
 4703 D1:DA8B 4A C2 D1 -  .dl	inst6502_eor_zp					;45
 4704 D1:DA8E 77 C6 D1 -  .dl	inst6502_lsr_zp					;46
 4705 D1:DA91 F9 D7 D1 -  .dl	inst6502_sre_zp     			;47
 4706 D1:DA94 F0 BC D1 -  .dl	inst6502_pha					;48
 4707 D1:DA97 28 C2 D1 -  .dl	inst6502_eor_imm				;49
 4708 D1:DA9A 4E C6 D1 -  .dl	inst6502_lsr					;4A
 4709 D1:DA9D C0 CD D1 -  .dl	inst6502_alr_imm    			;4B
 4710 D1:DAA0 7F CC D1 -  .dl	inst6052_jmp_abs				;4C
 4711 D1:DAA3 9F C2 D1 -  .dl	inst6502_eor_abs				;4D
 4712 D1:DAA6 D2 C6 D1 -  .dl	inst6502_lsr_abs				;4E
 4713 D1:DAA9 5E D8 D1 -  .dl	inst6502_sre_abs    			;4F
 4714 D1:DAAC 00 CC D1 -  .dl	inst6502_bvc					;50
 4715 D1:DAAF 73 C3 D1 -  .dl	inst6502_eor_indy				;51
 4716 D1:DAB2 C3 DC D1 -  .dl	inst6502_jam_52     			;52
 4717 D1:DAB5 66 D9 D1 -  .dl	inst6502_sre_indy   			;53
 4718 D1:DAB8 98 CD D1 -  .dl	inst6502_nop_zpx    			;54
 4719 D1:DABB 73 C2 D1 -  .dl	inst6502_eor_zpx				;55
 4720 D1:DABE A3 C6 D1 -  .dl	inst6502_lsr_zpx				;56
 4721 D1:DAC1 2A D8 D1 -  .dl	inst6502_sre_zpx    			;57
 4722 D1:DAC4 74 C9 D1 -  .dl	inst6502_cli					;58
 4723 D1:DAC7 05 C3 D1 -  .dl	inst6502_eor_absy				;59
 4724 D1:DACA 83 CD D1 -  .dl	inst6502_nop_implied			;5A
 4725 D1:DACD DE D8 D1 -  .dl	inst6502_sre_absy   			;5B
 4726 D1:DAD0 B0 CD D1 -  .dl	inst6502_nop_absx   			;5C
 4727 D1:DAD3 DB C2 D1 -  .dl	inst6502_eor_absx				;5D
 4728 D1:DAD6 16 C7 D1 -  .dl	inst6502_lsr_absx				;5E
 4729 D1:DAD9 A7 D8 D1 -  .dl	inst6502_sre_absx   			;5F
 4730 D1:DADC 1D CD D1 -  .dl	inst6502_rts					;60
 4731 D1:DADF 68 BF D1 -  .dl	inst6502_adc_indx				;61
 4732 D1:DAE2 C3 DC D1 -  .dl	inst6502_jam_62     			;62
 4733 D1:DAE5 94 D4 D1 -  .dl	isnt6502_rra_indx   			;63
 4734 D1:DAE8 91 CD D1 -  .dl	inst6502_nop_zp     			;64
 4735 D1:DAEB 00 BF D1 -  .dl	inst6502_adc_zp					;65
 4736 D1:DAEE 7F C8 D1 -  .dl	inst6502_ror_zp					;66
 4737 D1:DAF1 C7 D3 D1 -  .dl	inst6502_rra_zp     			;67
 4738 D1:DAF4 1E BD D1 -  .dl	inst6502_pla					;68
 4739 D1:DAF7 F8 BE D1 -  .dl	inst6502_adc_imm				;69
 4740 D1:DAFA 53 C8 D1 -  .dl	inst6502_ror					;6A
 4741 D1:DAFD 37 CE D1 -  .dl	instr6502_arr_imm   			;6B
 4742 D1:DB00 A1 CC D1 -  .dl	inst6502_jmp_indir				;6C
 4743 D1:DB03 23 BF D1 -  .dl	inst6502_adc_abs				;6D
 4744 D1:DB06 E0 C8 D1 -  .dl	inst6502_ror_abs				;6E
 4745 D1:DB09 0A D4 D1 -  .dl	inst6502_rra_abs    			;6F
 4746 D1:DB0C 0F CC D1 -  .dl	inst6502_bvs					;70
 4747 D1:DB0F 93 BF D1 -  .dl	inst6502_adc_indy				;71
 4748 D1:DB12 C3 DC D1 -  .dl	inst6502_jam_72     			;72
 4749 D1:DB15 D6 D4 D1 -  .dl	inst6502_rra_indy   			;73
 4750 D1:DB18 98 CD D1 -  .dl	inst6502_nop_zpx    			;74
 4751 D1:DB1B 10 BF D1 -  .dl	inst6502_adc_zpx				;75
 4752 D1:DB1E AE C8 D1 -  .dl	inst6502_ror_zpx				;76
 4753 D1:DB21 E7 D3 D1 -  .dl	inst6502_rra_zpx    			;77
 4754 D1:DB24 A0 C9 D1 -  .dl	inst6502_sei					;78
 4755 D1:DB27 57 BF D1 -  .dl	inst6502_adc_absy				;79
 4756 D1:DB2A 83 CD D1 -  .dl	inst6502_nop_implied			;7A
 4757 D1:DB2D 6C D4 D1 -  .dl	inst6502_rra_absy   			;7B
 4758 D1:DB30 B0 CD D1 -  .dl	inst6502_nop_absx   			;7C
 4759 D1:DB33 46 BF D1 -  .dl	inst6502_adc_absx				;7D
 4760 D1:DB36 28 C9 D1 -  .dl	inst6502_ror_absx				;7E
 4761 D1:DB39 44 D4 D1 -  .dl	inst6502_rra_absx   			;7F
 4762 D1:DB3C 8A CD D1 -  .dl	inst6502_nop_imm    			;80
 4763 D1:DB3F 47 BB D1 -  .dl	inst6502_sta_indx				;81
 4764 D1:DB42 8A CD D1 -  .dl	inst6502_nop_imm    			;82
 4765 D1:DB45 73 D5 D1 -  .dl	inst6502_sax_indx   			;83
 4766 D1:DB48 F2 BB D1 -  .dl	inst6502_sty_zp					;84
 4767 D1:DB4B D5 BA D1 -  .dl	inst6502_sta_zp					;85
 4768 D1:DB4E A6 BB D1 -  .dl	inst6502_stx_zp					;86
 4769 D1:DB51 1D D5 D1 -  .dl	inst6502_sax_zp     			;87
 4770 D1:DB54 36 BE D1 -  .dl	inst6502_dey					;88
 4771 D1:DB57 8A CD D1 -  .dl	inst6502_nop_imm    			;89
 4772 D1:DB5A A1 BC D1 -  .dl	inst6502_txa					;8A
 4773 D1:DB5D 10 CE D1 -  .dl	instr6502_ane_imm   			;8B
 4774 D1:DB60 19 BC D1 -  .dl	inst6502_sty_abs				;8C
 4775 D1:DB63 FC BA D1 -  .dl	inst6502_sta_abs				;8D
 4776 D1:DB66 CD BB D1 -  .dl	inst6502_stx_abs				;8E
 4777 D1:DB69 4A D5 D1 -  .dl	inst6502_sax_abs    			;8F
 4778 D1:DB6C A6 CB D1 -  .dl	inst6502_bcc					;90
 4779 D1:DB6F 74 BB D1 -  .dl	inst6502_sta_indy				;91
 4780 D1:DB72 C3 DC D1 -  .dl	inst6502_jam_92     			;92
 4781 D1:DB75 DB D5 D1 -  .dl	inst6502_sha_indy   			;93
 4782 D1:DB78 04 BC D1 -  .dl	inst6502_sty_zpx				;94
 4783 D1:DB7B E7 BA D1 -  .dl	inst6502_sta_zpx				;95
 4784 D1:DB7E B8 BB D1 -  .dl	inst6502_stx_zpy				;96
 4785 D1:DB81 32 D5 D1 -  .dl	inst6502_sax_zpy    			;97
 4786 D1:DB84 CF BC D1 -  .dl	inst6502_tya					;98
 4787 D1:DB87 34 BB D1 -  .dl	inst6502_sta_absy				;99
 4788 D1:DB8A C2 BC D1 -  .dl	inst6502_txs					;9A
 4789 D1:DB8D 28 D6 D1 -  .dl	inst6502_tas_absy   			;9B
 4790 D1:DB90 1A D6 D1 -  .dl	inst6502_shy_absx   			;9C
 4791 D1:DB93 21 BB D1 -  .dl	inst6502_sta_absx				;9D
 4792 D1:DB96 0C D6 D1 -  .dl	inst6502_shx_absy   			;9E
 4793 D1:DB99 CD D5 D1 -  .dl	inst6502_sha_absy   			;9F
 4794 D1:DB9C 07 BA D1 -  .dl	inst6502_ldy_imm				;A0
 4795 D1:DB9F B0 B8 D1 -  .dl	inst6502_lda_indx				;A1
 4796 D1:DBA2 39 B9 D1 -  .dl	inst6502_ldx_imm				;A2
 4797 D1:DBA5 34 D1 D1 -  .dl	inst6502_lax_indx   			;A3
 4798 D1:DBA8 26 BA D1 -  .dl	inst6502_ldy_zp					;A4
 4799 D1:DBAB DA B7 D1 -  .dl	inst6502_lda_zp					;A5
 4800 D1:DBAE 58 B9 D1 -  .dl	inst6502_ldx_zp					;A6
 4801 D1:DBB1 79 D0 D1 -  .dl	inst6502_lax_zp     			;A7
 4802 D1:DBB4 5F BC D1 -  .dl	inst6502_tay					;A8
 4803 D1:DBB7 BB B7 D1 -  .dl	inst6502_lda_imm				;A9
 4804 D1:DBBA 3E BC D1 -  .dl	inst6502_tax					;AA
 4805 D1:DBBD C3 D1 D1 -  .dl	inst6502_lxa        			;AB
 4806 D1:DBC0 75 BA D1 -  .dl	inst6502_ldy_abs				;AC
 4807 D1:DBC3 29 B8 D1 -  .dl	inst6502_lda_abs				;AD
 4808 D1:DBC6 A7 B9 D1 -  .dl	inst6502_ldx_abs				;AE
 4809 D1:DBC9 CE D0 D1 -  .dl	inst6502_lax_abs    			;AF
 4810 D1:DBCC B5 CB D1 -  .dl	inst6502_bcs					;B0
 4811 D1:DBCF F1 B8 D1 -  .dl	inst6502_lda_indy				;B1
 4812 D1:DBD2 C3 DC D1 -  .dl	inst6502_jam_B2     			;B2
 4813 D1:DBD5 78 D1 D1 -  .dl	inst6502_lax_indy   			;B3
 4814 D1:DBD8 4C BA D1 -  .dl	inst6502_ldy_zpx				;B4
 4815 D1:DBDB 00 B8 D1 -  .dl	inst6502_lda_zpx				;B5
 4816 D1:DBDE 7E B9 D1 -  .dl	inst6502_ldx_zpy				;B6
 4817 D1:DBE1 A2 D0 D1 -  .dl	inst6502_lax_zpy    			;B7
 4818 D1:DBE4 7F C9 D1 -  .dl	inst6502_clv					;B8
 4819 D1:DBE7 89 B8 D1 -  .dl	inst6502_lda_absy				;B9
 4820 D1:DBEA 80 BC D1 -  .dl	inst6502_tsx					;BA
 4821 D1:DBED 49 D0 D1 -  .dl	inst6502_las_absy   			;BB
 4822 D1:DBF0 AE BA D1 -  .dl	inst6502_ldy_absx				;BC
 4823 D1:DBF3 62 B8 D1 -  .dl	inst6502_lda_absx				;BD
 4824 D1:DBF6 E0 B9 D1 -  .dl	inst6502_ldx_absy				;BE
 4825 D1:DBF9 0A D1 D1 -  .dl	inst6502_lax_absy   			;BF
 4826 D1:DBFC 0F CB D1 -  .dl	inst6502_cpy_imm				;C0
 4827 D1:DBFF 1B CA D1 -  .dl	inst6502_cmp_indx				;C1
 4828 D1:DC02 8A CD D1 -  .dl	inst6502_nop_imm    			;C2
 4829 D1:DC05 F1 CE D1 -  .dl	inst6502_dcp_indx   			;C3
 4830 D1:DC08 35 CB D1 -  .dl	inst6502_cpy_zp					;C4
 4831 D1:DC0B B3 C9 D1 -  .dl	inst6502_cmp_zp					;C5
 4832 D1:DC0E 65 BD D1 -  .dl	inst6502_dec_zp					;C6
 4833 D1:DC11 70 CE D1 -  .dl	inst6502_dcp_zp     			;C7
 4834 D1:DC14 40 BE D1 -  .dl	inst6502_iny					;C8
 4835 D1:DC17 AB C9 D1 -  .dl	inst6502_cmp_imm				;C9
 4836 D1:DC1A 18 BE D1 -  .dl	inst6502_dex					;CA
 4837 D1:DC1D A4 D5 D1 -  .dl	inst6502_sbx_imm    			;CB
 4838 D1:DC20 64 CB D1 -  .dl	inst6502_cpy_abs				;CC
 4839 D1:DC23 D6 C9 D1 -  .dl	inst6502_cmp_abs				;CD
 4840 D1:DC26 B2 BD D1 -  .dl	inst6502_dec_abs				;CE
 4841 D1:DC29 97 CE D1 -  .dl	inst6502_dcp_abs    			;CF
 4842 D1:DC2C E2 CB D1 -  .dl	inst6502_bne					;D0
 4843 D1:DC2F 46 CA D1 -  .dl	inst6502_cmp_indy				;D1
 4844 D1:DC32 C3 DC D1 -  .dl	inst6502_jam_D2     			;D2
 4845 D1:DC35 23 CF D1 -  .dl	inst6502_dcp_indy   			;D3
 4846 D1:DC38 98 CD D1 -  .dl	inst6502_nop_zpx    			;D4
 4847 D1:DC3B C3 C9 D1 -  .dl	inst6502_cmp_zpx				;D5
 4848 D1:DC3E 8A BD D1 -  .dl	inst6502_dec_zpx				;D6
 4849 D1:DC41 82 CE D1 -  .dl	inst6520_dcp_zpx    			;D7
 4850 D1:DC44 69 C9 D1 -  .dl	inst6502_cld					;D8
 4851 D1:DC47 0A CA D1 -  .dl	inst6502_cmp_absy				;D9
 4852 D1:DC4A 83 CD D1 -  .dl	inst6502_nop_implied			;DA
 4853 D1:DC4D D9 CE D1 -  .dl	inst6502_dcp_absy   			;DB
 4854 D1:DC50 B0 CD D1 -  .dl	inst6502_nop_absx   			;DC
 4855 D1:DC53 F9 C9 D1 -  .dl	inst6502_cmp_absx				;DD
 4856 D1:DC56 EE BD D1 -  .dl	inst6502_dec_absx				;DE
 4857 D1:DC59 C1 CE D1 -  .dl	inst6502_dcp_absx   			;DF
 4858 D1:DC5C 78 CA D1 -  .dl	inst6502_cpx_imm				;E0
 4859 D1:DC5F 35 C0 D1 -  .dl	inst6502_sbc_indx				;E1
 4860 D1:DC62 8A CD D1 -  .dl	inst6502_nop_imm    			;E2
 4861 D1:DC65 DE CF D1 -  .dl	inst6502_isc_indx   			;E3
 4862 D1:DC68 9E CA D1 -  .dl	inst6502_cpx_zp					;E4
 4863 D1:DC6B CD BF D1 -  .dl	inst6502_sbc_zp					;E5
 4864 D1:DC6E 45 BE D1 -  .dl	inst6502_inc_zp					;E6
 4865 D1:DC71 5A CF D1 -  .dl	inst6502_isc_zp     			;E7
 4866 D1:DC74 3B BE D1 -  .dl	inst6502_inx					;E8
 4867 D1:DC77 C5 BF D1 -  .dl	inst6502_sbc_imm				;E9
 4868 D1:DC7A 7C CD D1 -  .dl	inst6502_nop					;EA
 4869 D1:DC7D C5 BF D1 -  .dl	inst6502_sbc_imm			    ;EB *DUPLICATE OF E9
 4870 D1:DC80 CD CA D1 -  .dl	inst6502_cpx_abs				;EC
 4871 D1:DC83 F0 BF D1 -  .dl	inst6502_sbc_abs				;ED
 4872 D1:DC86 92 BE D1 -  .dl	inst6502_inc_abs				;EE
 4873 D1:DC89 81 CF D1 -  .dl	inst6502_isc_abs    			;EF
 4874 D1:DC8C C4 CB D1 -  .dl	inst6502_beq					;F0
 4875 D1:DC8F 60 C0 D1 -  .dl	inst6502_sbc_indy				;F1
 4876 D1:DC92 C3 DC D1 -  .dl	inst6502_jam_F2     			;F2
 4877 D1:DC95 11 D0 D1 -  .dl	inst6502_isc_indy   			;F3
 4878 D1:DC98 98 CD D1 -  .dl	inst6502_nop_zpx    			;F4
 4879 D1:DC9B DD BF D1 -  .dl	inst6502_sbc_zpx				;F5
 4880 D1:DC9E 6A BE D1 -  .dl	inst6502_inc_zpx				;F6
 4881 D1:DCA1 6C CF D1 -  .dl	inst6520_isc_zpx    			;F7
 4882 D1:DCA4 95 C9 D1 -  .dl	inst6502_sed					;F8
 4883 D1:DCA7 24 C0 D1 -  .dl	inst6502_sbc_absy				;F9
 4884 D1:DCAA 83 CD D1 -  .dl	inst6502_nop_implied			;FA
 4885 D1:DCAD C5 CF D1 -  .dl	inst6502_isc_absy   			;FB
 4886 D1:DCB0 B0 CD D1 -  .dl	inst6502_nop_absx   			;FC
 4887 D1:DCB3 13 C0 D1 -  .dl	inst6502_sbc_absx				;FD
 4888 D1:DCB6 CE BE D1 -  .dl	inst6502_inc_absx				;FE
 4889 D1:DCB9 AC CF D1 -  .dl	inst6502_isc_absx   			;FF
 4890 D1:DCBC -  -  -  -  
 4891 D1:DCBC -  -  -  -  ;-----------------------------------------------------------------------------
 4892 D1:DCBC -  -  -  -  ;-----------------------------------------------------------------------------
 4893 D1:DCBC -  -  -  -  ;-----------------------------------------------------------------------------
 4894 D1:DCBC -  -  -  -  ;These instructions are located here because they perform a function outside
 4895 D1:DCBC -  -  -  -  ;the context of emulating instructions. These are mapped to instructions that
 4896 D1:DCBC -  -  -  -  ;would, on the real hardware, freeze the CPU and require a reset to continue.
 4897 D1:DCBC -  -  -  -  ;
 4898 D1:DCBC -  -  -  -  ;Here, they'll let us perform useful things. Like exiting the emulator.
 4899 D1:DCBC -  -  -  -  ;Or jamming in one spot. Or other things in the future. Debugging things.
 4900 D1:DCBC -  -  -  -  ;Future stuff like breakpoints and console output. That sorta thing.
 4901 D1:DCBC -  -  -  -  ;
 4902 D1:DCBC -  -  -  -  
 4903 D1:DCBC -  -  -  -  inst6502_:
 4904 D1:DCBC C9 -  -  -      ret
 4905 D1:DCBD -  -  -  -  
 4906 D1:DCBD -  -  -  -  inst6502_jam_12_halt:
 4907 D1:DCBD 18 FE -  -      jr $
 4908 D1:DCBF C3 F8 B5 D1     jp i6502FinishLoad
 4909 D1:DCC3 -  -  -  -  
 4910 D1:DCC3 -  -  -  -  inst6502_jam_02:
 4911 D1:DCC3 -  -  -  -  inst6502_jam_22:
 4912 D1:DCC3 -  -  -  -  inst6502_jam_32:
 4913 D1:DCC3 -  -  -  -  inst6502_jam_42:
 4914 D1:DCC3 -  -  -  -  inst6502_jam_52:
 4915 D1:DCC3 -  -  -  -  inst6502_jam_62:
 4916 D1:DCC3 -  -  -  -  inst6502_jam_72:
 4917 D1:DCC3 -  -  -  -  inst6502_jam_92:
 4918 D1:DCC3 -  -  -  -  inst6502_jam_B2:
 4919 D1:DCC3 -  -  -  -  inst6502_jam_D2:
 4920 D1:DCC3 -  -  -  -  inst6502_jam_F2:
 4921 D1:DCC3 C9 -  -  -      ret
 4922 D1:DCC4 -  -  -  -  
 4923 D1:DCC4 -  -  -  -  
 4924 D1:DCC4 -  -  -  -  
 4925 D1:DCC4 -  -  -  -  
 4926 D1:DCC4 -  -  -  -  
 4927 D1:DCC4 -  -  -  -  
 4928 D1:DCC4 -  -  -  -  
 4929 D1:DCC4 -  -  -  -  
 4930 D1:DCC4 -  -  -  -  
 4931 D1:DCC4 -  -  -  -  
 4932 D1:DCC4 -  -  -  -  
 4933 D1:DCC4 -  -  -  -  
 4934 D1:DCC4 -  -  -  -  
Listing for file "main.z80"
  828 D1:DCC4 -  -  -  -  #include "debug.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    1 D1:DCC4 -  -  -  -  ;This has all the tables needed to drive the debugger.
    2 D1:DCC4 -  -  -  -  #include "debug_itab.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug_itab.z80"
    1 D1:DCC4 -  -  -  -  inst6502_opcode_width_table:
    2 D1:DCC4 01 -  -  -  .db 1    ;0: 
    3 D1:DCC5 02 -  -  -  .db 2    ;1: zpg,X
    4 D1:DCC6 03 -  -  -  .db 3    ;2: ind
    5 D1:DCC7 03 -  -  -  .db 3    ;3: abs
    6 D1:DCC8 03 -  -  -  .db 3    ;4: abs,X
    7 D1:DCC9 02 -  -  -  .db 2    ;5: X,ind
    8 D1:DCCA 01 -  -  -  .db 1    ;6: A
    9 D1:DCCB 02 -  -  -  .db 2    ;7: zpg
   10 D1:DCCC 02 -  -  -  .db 2    ;8: rel
   11 D1:DCCD 02 -  -  -  .db 2    ;9: #
   12 D1:DCCE 01 -  -  -  .db 1    ;10: impl
   13 D1:DCCF 02 -  -  -  .db 2    ;11: ind,Y
   14 D1:DCD0 03 -  -  -  .db 3    ;12: abs,Y
   15 D1:DCD1 02 -  -  -  .db 2    ;13: zpg,Y
   16 D1:DCD2 -  -  -  -  
   17 D1:DCD2 -  -  -  -  
   18 D1:DCD2 -  -  -  -  ;Note: 1=1byteOper, 2=2byteOper, -=1byteRelOper. Other chrs are literal
   19 D1:DCD2 -  -  -  -  
   20 D1:DCD2 -  -  -  -  inst6502_disassembler:
   21 D1:DCD2 01 -  -  -  .db 1,""  ;
   22 D1:DCD3 04 31 2C 58 .db 4,"1,X"  ;
   23 D1:DCD7 04 28 32 29 .db 4,"(2)"  ;
   24 D1:DCDB 02 32 -  -  .db 2,"2"  ;
   25 D1:DCDD 04 32 2C 58 .db 4,"2,X"  ;
   26 D1:DCE1 06 28 31 2C 
              58 29 -  -  .db 6,"(1,X)"  ;
   27 D1:DCE7 02 41 -  -  .db 2,"A"  ;
   28 D1:DCE9 02 31 -  -  .db 2,"1"  ;
   29 D1:DCEB 02 2D -  -  .db 2,"-"  ;
   30 D1:DCED 03 23 31 -  .db 3,"#1"  ;
   31 D1:DCF0 01 -  -  -  .db 1,""  ;
   32 D1:DCF1 06 28 31 29 
              2C 59 -  -  .db 6,"(1),Y"  ;
   33 D1:DCF7 04 32 2C 59 .db 4,"2,Y"  ;
   34 D1:DCFB 04 31 2C 59 .db 4,"1,Y"  ;
   35 D1:DCFF -  -  -  -  
   36 D1:DCFF -  -  -  -  inst6502_disassembly_table:
   37 D1:DCFF 42 52 4B 0A .db "BRK", 10     ;0x00
   38 D1:DD03 4F 52 41 05 .db "ORA", 5     ;0x01
   39 D1:DD07 4A 41 4D 00 .db "JAM", 0     ;0x02
   40 D1:DD0B 53 4C 4F 05 .db "SLO", 5     ;0x03
   41 D1:DD0F 4E 4F 50 07 .db "NOP", 7     ;0x04
   42 D1:DD13 4F 52 41 07 .db "ORA", 7     ;0x05
   43 D1:DD17 41 53 4C 07 .db "ASL", 7     ;0x06
   44 D1:DD1B 53 4C 4F 07 .db "SLO", 7     ;0x07
   45 D1:DD1F 50 48 50 0A .db "PHP", 10     ;0x08
   46 D1:DD23 4F 52 41 09 .db "ORA", 9     ;0x09
   47 D1:DD27 41 53 4C 06 .db "ASL", 6     ;0x0A
   48 D1:DD2B 41 4E 43 09 .db "ANC", 9     ;0x0B
   49 D1:DD2F 4E 4F 50 03 .db "NOP", 3     ;0x0C
   50 D1:DD33 4F 52 41 03 .db "ORA", 3     ;0x0D
   51 D1:DD37 41 53 4C 03 .db "ASL", 3     ;0x0E
   52 D1:DD3B 53 4C 4F 03 .db "SLO", 3     ;0x0F
   53 D1:DD3F 42 50 4C 08 .db "BPL", 8     ;0x10
   54 D1:DD43 4F 52 41 0B .db "ORA", 11     ;0x11
   55 D1:DD47 4A 41 4D 00 .db "JAM", 0     ;0x12
   56 D1:DD4B 53 4C 4F 0B .db "SLO", 11     ;0x13
   57 D1:DD4F 4E 4F 50 01 .db "NOP", 1     ;0x14
   58 D1:DD53 4F 52 41 01 .db "ORA", 1     ;0x15
   59 D1:DD57 41 53 4C 01 .db "ASL", 1     ;0x16
   60 D1:DD5B 53 4C 4F 01 .db "SLO", 1     ;0x17
   61 D1:DD5F 43 4C 43 0A .db "CLC", 10     ;0x18
   62 D1:DD63 4F 52 41 0C .db "ORA", 12     ;0x19
   63 D1:DD67 4E 4F 50 0A .db "NOP", 10     ;0x1A
   64 D1:DD6B 53 4C 4F 0C .db "SLO", 12     ;0x1B
   65 D1:DD6F 4E 4F 50 04 .db "NOP", 4     ;0x1C
   66 D1:DD73 4F 52 41 04 .db "ORA", 4     ;0x1D
   67 D1:DD77 41 53 4C 04 .db "ASL", 4     ;0x1E
   68 D1:DD7B 53 4C 4F 04 .db "SLO", 4     ;0x1F
   69 D1:DD7F 4A 53 52 03 .db "JSR", 3     ;0x20
   70 D1:DD83 41 4E 44 05 .db "AND", 5     ;0x21
   71 D1:DD87 4A 41 4D 00 .db "JAM", 0     ;0x22
   72 D1:DD8B 52 4C 41 05 .db "RLA", 5     ;0x23
   73 D1:DD8F 42 49 54 07 .db "BIT", 7     ;0x24
   74 D1:DD93 41 4E 44 07 .db "AND", 7     ;0x25
   75 D1:DD97 52 4F 4C 07 .db "ROL", 7     ;0x26
   76 D1:DD9B 52 4C 41 07 .db "RLA", 7     ;0x27
   77 D1:DD9F 50 4C 50 0A .db "PLP", 10     ;0x28
   78 D1:DDA3 41 4E 44 09 .db "AND", 9     ;0x29
   79 D1:DDA7 52 4F 4C 06 .db "ROL", 6     ;0x2A
   80 D1:DDAB 41 4E 43 09 .db "ANC", 9     ;0x2B
   81 D1:DDAF 42 49 54 03 .db "BIT", 3     ;0x2C
   82 D1:DDB3 41 4E 44 03 .db "AND", 3     ;0x2D
   83 D1:DDB7 52 4F 4C 03 .db "ROL", 3     ;0x2E
   84 D1:DDBB 52 4C 41 03 .db "RLA", 3     ;0x2F
   85 D1:DDBF 42 4D 49 08 .db "BMI", 8     ;0x30
   86 D1:DDC3 41 4E 44 0B .db "AND", 11     ;0x31
   87 D1:DDC7 4A 41 4D 00 .db "JAM", 0     ;0x32
   88 D1:DDCB 52 4C 41 0B .db "RLA", 11     ;0x33
   89 D1:DDCF 4E 4F 50 01 .db "NOP", 1     ;0x34
   90 D1:DDD3 41 4E 44 01 .db "AND", 1     ;0x35
   91 D1:DDD7 52 4F 4C 01 .db "ROL", 1     ;0x36
   92 D1:DDDB 52 4C 41 01 .db "RLA", 1     ;0x37
   93 D1:DDDF 53 45 43 0A .db "SEC", 10     ;0x38
   94 D1:DDE3 41 4E 44 0C .db "AND", 12     ;0x39
   95 D1:DDE7 4E 4F 50 0A .db "NOP", 10     ;0x3A
   96 D1:DDEB 52 4C 41 0C .db "RLA", 12     ;0x3B
   97 D1:DDEF 4E 4F 50 04 .db "NOP", 4     ;0x3C
   98 D1:DDF3 41 4E 44 04 .db "AND", 4     ;0x3D
   99 D1:DDF7 52 4F 4C 04 .db "ROL", 4     ;0x3E
  100 D1:DDFB 52 4C 41 04 .db "RLA", 4     ;0x3F
  101 D1:DDFF 52 54 49 0A .db "RTI", 10     ;0x40
  102 D1:DE03 45 4F 52 05 .db "EOR", 5     ;0x41
  103 D1:DE07 4A 41 4D 00 .db "JAM", 0     ;0x42
  104 D1:DE0B 53 52 45 05 .db "SRE", 5     ;0x43
  105 D1:DE0F 4E 4F 50 07 .db "NOP", 7     ;0x44
  106 D1:DE13 45 4F 52 07 .db "EOR", 7     ;0x45
  107 D1:DE17 4C 53 52 07 .db "LSR", 7     ;0x46
  108 D1:DE1B 53 52 45 07 .db "SRE", 7     ;0x47
  109 D1:DE1F 50 48 41 0A .db "PHA", 10     ;0x48
  110 D1:DE23 45 4F 52 09 .db "EOR", 9     ;0x49
  111 D1:DE27 4C 53 52 06 .db "LSR", 6     ;0x4A
  112 D1:DE2B 41 4C 52 09 .db "ALR", 9     ;0x4B
  113 D1:DE2F 4A 4D 50 03 .db "JMP", 3     ;0x4C
  114 D1:DE33 45 4F 52 03 .db "EOR", 3     ;0x4D
  115 D1:DE37 4C 53 52 03 .db "LSR", 3     ;0x4E
  116 D1:DE3B 53 52 45 03 .db "SRE", 3     ;0x4F
  117 D1:DE3F 42 56 43 08 .db "BVC", 8     ;0x50
  118 D1:DE43 45 4F 52 0B .db "EOR", 11     ;0x51
  119 D1:DE47 4A 41 4D 00 .db "JAM", 0     ;0x52
  120 D1:DE4B 53 52 45 0B .db "SRE", 11     ;0x53
  121 D1:DE4F 4E 4F 50 01 .db "NOP", 1     ;0x54
  122 D1:DE53 45 4F 52 01 .db "EOR", 1     ;0x55
  123 D1:DE57 4C 53 52 01 .db "LSR", 1     ;0x56
  124 D1:DE5B 53 52 45 01 .db "SRE", 1     ;0x57
  125 D1:DE5F 43 4C 49 0A .db "CLI", 10     ;0x58
  126 D1:DE63 45 4F 52 0C .db "EOR", 12     ;0x59
  127 D1:DE67 4E 4F 50 0A .db "NOP", 10     ;0x5A
  128 D1:DE6B 53 52 45 0C .db "SRE", 12     ;0x5B
  129 D1:DE6F 4E 4F 50 04 .db "NOP", 4     ;0x5C
  130 D1:DE73 45 4F 52 04 .db "EOR", 4     ;0x5D
  131 D1:DE77 4C 53 52 04 .db "LSR", 4     ;0x5E
  132 D1:DE7B 53 52 45 04 .db "SRE", 4     ;0x5F
  133 D1:DE7F 52 54 53 0A .db "RTS", 10     ;0x60
  134 D1:DE83 41 44 43 05 .db "ADC", 5     ;0x61
  135 D1:DE87 4A 41 4D 00 .db "JAM", 0     ;0x62
  136 D1:DE8B 52 52 41 05 .db "RRA", 5     ;0x63
  137 D1:DE8F 4E 4F 50 07 .db "NOP", 7     ;0x64
  138 D1:DE93 41 44 43 07 .db "ADC", 7     ;0x65
  139 D1:DE97 52 4F 52 07 .db "ROR", 7     ;0x66
  140 D1:DE9B 52 52 41 07 .db "RRA", 7     ;0x67
  141 D1:DE9F 50 4C 41 0A .db "PLA", 10     ;0x68
  142 D1:DEA3 41 44 43 09 .db "ADC", 9     ;0x69
  143 D1:DEA7 52 4F 52 06 .db "ROR", 6     ;0x6A
  144 D1:DEAB 41 52 52 09 .db "ARR", 9     ;0x6B
  145 D1:DEAF 4A 4D 50 02 .db "JMP", 2     ;0x6C
  146 D1:DEB3 41 44 43 03 .db "ADC", 3     ;0x6D
  147 D1:DEB7 52 4F 52 03 .db "ROR", 3     ;0x6E
  148 D1:DEBB 52 52 41 03 .db "RRA", 3     ;0x6F
  149 D1:DEBF 42 56 53 08 .db "BVS", 8     ;0x70
  150 D1:DEC3 41 44 43 0B .db "ADC", 11     ;0x71
  151 D1:DEC7 4A 41 4D 00 .db "JAM", 0     ;0x72
  152 D1:DECB 52 52 41 0B .db "RRA", 11     ;0x73
  153 D1:DECF 4E 4F 50 01 .db "NOP", 1     ;0x74
  154 D1:DED3 41 44 43 01 .db "ADC", 1     ;0x75
  155 D1:DED7 52 4F 52 01 .db "ROR", 1     ;0x76
  156 D1:DEDB 52 52 41 01 .db "RRA", 1     ;0x77
  157 D1:DEDF 53 45 49 0A .db "SEI", 10     ;0x78
  158 D1:DEE3 41 44 43 0C .db "ADC", 12     ;0x79
  159 D1:DEE7 4E 4F 50 0A .db "NOP", 10     ;0x7A
  160 D1:DEEB 52 52 41 0C .db "RRA", 12     ;0x7B
  161 D1:DEEF 4E 4F 50 04 .db "NOP", 4     ;0x7C
  162 D1:DEF3 41 44 43 04 .db "ADC", 4     ;0x7D
  163 D1:DEF7 52 4F 52 04 .db "ROR", 4     ;0x7E
  164 D1:DEFB 52 52 41 04 .db "RRA", 4     ;0x7F
  165 D1:DEFF 4E 4F 50 09 .db "NOP", 9     ;0x80
  166 D1:DF03 53 54 41 05 .db "STA", 5     ;0x81
  167 D1:DF07 4E 4F 50 09 .db "NOP", 9     ;0x82
  168 D1:DF0B 53 41 58 05 .db "SAX", 5     ;0x83
  169 D1:DF0F 53 54 59 07 .db "STY", 7     ;0x84
  170 D1:DF13 53 54 41 07 .db "STA", 7     ;0x85
  171 D1:DF17 53 54 58 07 .db "STX", 7     ;0x86
  172 D1:DF1B 53 41 58 07 .db "SAX", 7     ;0x87
  173 D1:DF1F 44 45 59 0A .db "DEY", 10     ;0x88
  174 D1:DF23 4E 4F 50 09 .db "NOP", 9     ;0x89
  175 D1:DF27 54 58 41 0A .db "TXA", 10     ;0x8A
  176 D1:DF2B 41 4E 45 09 .db "ANE", 9     ;0x8B
  177 D1:DF2F 53 54 59 03 .db "STY", 3     ;0x8C
  178 D1:DF33 53 54 41 03 .db "STA", 3     ;0x8D
  179 D1:DF37 53 54 58 03 .db "STX", 3     ;0x8E
  180 D1:DF3B 53 41 58 03 .db "SAX", 3     ;0x8F
  181 D1:DF3F 42 43 43 08 .db "BCC", 8     ;0x90
  182 D1:DF43 53 54 41 0B .db "STA", 11     ;0x91
  183 D1:DF47 4A 41 4D 00 .db "JAM", 0     ;0x92
  184 D1:DF4B 53 48 41 0B .db "SHA", 11     ;0x93
  185 D1:DF4F 53 54 59 01 .db "STY", 1     ;0x94
  186 D1:DF53 53 54 41 01 .db "STA", 1     ;0x95
  187 D1:DF57 53 54 58 0D .db "STX", 13     ;0x96
  188 D1:DF5B 53 41 58 0D .db "SAX", 13     ;0x97
  189 D1:DF5F 54 59 41 0A .db "TYA", 10     ;0x98
  190 D1:DF63 53 54 41 0C .db "STA", 12     ;0x99
  191 D1:DF67 54 58 53 0A .db "TXS", 10     ;0x9A
  192 D1:DF6B 54 41 53 0C .db "TAS", 12     ;0x9B
  193 D1:DF6F 53 48 59 04 .db "SHY", 4     ;0x9C
  194 D1:DF73 53 54 41 04 .db "STA", 4     ;0x9D
  195 D1:DF77 53 48 58 0C .db "SHX", 12     ;0x9E
  196 D1:DF7B 53 48 41 0C .db "SHA", 12     ;0x9F
  197 D1:DF7F 4C 44 59 09 .db "LDY", 9     ;0xA0
  198 D1:DF83 4C 44 41 05 .db "LDA", 5     ;0xA1
  199 D1:DF87 4C 44 58 09 .db "LDX", 9     ;0xA2
  200 D1:DF8B 4C 41 58 05 .db "LAX", 5     ;0xA3
  201 D1:DF8F 4C 44 59 07 .db "LDY", 7     ;0xA4
  202 D1:DF93 4C 44 41 07 .db "LDA", 7     ;0xA5
  203 D1:DF97 4C 44 58 07 .db "LDX", 7     ;0xA6
  204 D1:DF9B 4C 41 58 07 .db "LAX", 7     ;0xA7
  205 D1:DF9F 54 41 59 0A .db "TAY", 10     ;0xA8
  206 D1:DFA3 4C 44 41 09 .db "LDA", 9     ;0xA9
  207 D1:DFA7 54 41 58 0A .db "TAX", 10     ;0xAA
  208 D1:DFAB 4C 58 41 09 .db "LXA", 9     ;0xAB
  209 D1:DFAF 4C 44 59 03 .db "LDY", 3     ;0xAC
  210 D1:DFB3 4C 44 41 03 .db "LDA", 3     ;0xAD
  211 D1:DFB7 4C 44 58 03 .db "LDX", 3     ;0xAE
  212 D1:DFBB 4C 41 58 03 .db "LAX", 3     ;0xAF
  213 D1:DFBF 42 43 53 08 .db "BCS", 8     ;0xB0
  214 D1:DFC3 4C 44 41 0B .db "LDA", 11     ;0xB1
  215 D1:DFC7 4A 41 4D 00 .db "JAM", 0     ;0xB2
  216 D1:DFCB 4C 41 58 0B .db "LAX", 11     ;0xB3
  217 D1:DFCF 4C 44 59 01 .db "LDY", 1     ;0xB4
  218 D1:DFD3 4C 44 41 01 .db "LDA", 1     ;0xB5
  219 D1:DFD7 4C 44 58 0D .db "LDX", 13     ;0xB6
  220 D1:DFDB 4C 41 58 0D .db "LAX", 13     ;0xB7
  221 D1:DFDF 43 4C 56 0A .db "CLV", 10     ;0xB8
  222 D1:DFE3 4C 44 41 0C .db "LDA", 12     ;0xB9
  223 D1:DFE7 54 53 58 0A .db "TSX", 10     ;0xBA
  224 D1:DFEB 4C 41 53 0C .db "LAS", 12     ;0xBB
  225 D1:DFEF 4C 44 59 04 .db "LDY", 4     ;0xBC
  226 D1:DFF3 4C 44 41 04 .db "LDA", 4     ;0xBD
  227 D1:DFF7 4C 44 58 0C .db "LDX", 12     ;0xBE
  228 D1:DFFB 4C 41 58 0C .db "LAX", 12     ;0xBF
  229 D1:DFFF 43 50 59 09 .db "CPY", 9     ;0xC0
  230 D1:E003 43 4D 50 05 .db "CMP", 5     ;0xC1
  231 D1:E007 4E 4F 50 09 .db "NOP", 9     ;0xC2
  232 D1:E00B 44 43 50 05 .db "DCP", 5     ;0xC3
  233 D1:E00F 43 50 59 07 .db "CPY", 7     ;0xC4
  234 D1:E013 43 4D 50 07 .db "CMP", 7     ;0xC5
  235 D1:E017 44 45 43 07 .db "DEC", 7     ;0xC6
  236 D1:E01B 44 43 50 07 .db "DCP", 7     ;0xC7
  237 D1:E01F 49 4E 59 0A .db "INY", 10     ;0xC8
  238 D1:E023 43 4D 50 09 .db "CMP", 9     ;0xC9
  239 D1:E027 44 45 58 0A .db "DEX", 10     ;0xCA
  240 D1:E02B 53 42 58 09 .db "SBX", 9     ;0xCB
  241 D1:E02F 43 50 59 03 .db "CPY", 3     ;0xCC
  242 D1:E033 43 4D 50 03 .db "CMP", 3     ;0xCD
  243 D1:E037 44 45 43 03 .db "DEC", 3     ;0xCE
  244 D1:E03B 44 43 50 03 .db "DCP", 3     ;0xCF
  245 D1:E03F 42 4E 45 08 .db "BNE", 8     ;0xD0
  246 D1:E043 43 4D 50 0B .db "CMP", 11     ;0xD1
  247 D1:E047 4A 41 4D 00 .db "JAM", 0     ;0xD2
  248 D1:E04B 44 43 50 0B .db "DCP", 11     ;0xD3
  249 D1:E04F 4E 4F 50 01 .db "NOP", 1     ;0xD4
  250 D1:E053 43 4D 50 01 .db "CMP", 1     ;0xD5
  251 D1:E057 44 45 43 01 .db "DEC", 1     ;0xD6
  252 D1:E05B 44 43 50 01 .db "DCP", 1     ;0xD7
  253 D1:E05F 43 4C 44 0A .db "CLD", 10     ;0xD8
  254 D1:E063 43 4D 50 0C .db "CMP", 12     ;0xD9
  255 D1:E067 4E 4F 50 0A .db "NOP", 10     ;0xDA
  256 D1:E06B 44 43 50 0C .db "DCP", 12     ;0xDB
  257 D1:E06F 4E 4F 50 04 .db "NOP", 4     ;0xDC
  258 D1:E073 43 4D 50 04 .db "CMP", 4     ;0xDD
  259 D1:E077 44 45 43 04 .db "DEC", 4     ;0xDE
  260 D1:E07B 44 43 50 04 .db "DCP", 4     ;0xDF
  261 D1:E07F 43 50 58 09 .db "CPX", 9     ;0xE0
  262 D1:E083 53 42 43 05 .db "SBC", 5     ;0xE1
  263 D1:E087 4E 4F 50 09 .db "NOP", 9     ;0xE2
  264 D1:E08B 49 53 43 05 .db "ISC", 5     ;0xE3
  265 D1:E08F 43 50 58 07 .db "CPX", 7     ;0xE4
  266 D1:E093 53 42 43 07 .db "SBC", 7     ;0xE5
  267 D1:E097 49 4E 43 07 .db "INC", 7     ;0xE6
  268 D1:E09B 49 53 43 07 .db "ISC", 7     ;0xE7
  269 D1:E09F 49 4E 58 0A .db "INX", 10     ;0xE8
  270 D1:E0A3 53 42 43 09 .db "SBC", 9     ;0xE9
  271 D1:E0A7 4E 4F 50 0A .db "NOP", 10     ;0xEA
  272 D1:E0AB 55 53 42 09 .db "USB", 9     ;0xEB
  273 D1:E0AF 43 50 58 03 .db "CPX", 3     ;0xEC
  274 D1:E0B3 53 42 43 03 .db "SBC", 3     ;0xED
  275 D1:E0B7 49 4E 43 03 .db "INC", 3     ;0xEE
  276 D1:E0BB 49 53 43 03 .db "ISC", 3     ;0xEF
  277 D1:E0BF 42 45 51 08 .db "BEQ", 8     ;0xF0
  278 D1:E0C3 53 42 43 0B .db "SBC", 11     ;0xF1
  279 D1:E0C7 4A 41 4D 00 .db "JAM", 0     ;0xF2
  280 D1:E0CB 49 53 43 0B .db "ISC", 11     ;0xF3
  281 D1:E0CF 4E 4F 50 01 .db "NOP", 1     ;0xF4
  282 D1:E0D3 53 42 43 01 .db "SBC", 1     ;0xF5
  283 D1:E0D7 49 4E 43 01 .db "INC", 1     ;0xF6
  284 D1:E0DB 49 53 43 01 .db "ISC", 1     ;0xF7
  285 D1:E0DF 53 45 44 0A .db "SED", 10     ;0xF8
  286 D1:E0E3 53 42 43 0C .db "SBC", 12     ;0xF9
  287 D1:E0E7 4E 4F 50 0A .db "NOP", 10     ;0xFA
  288 D1:E0EB 49 53 43 0C .db "ISC", 12     ;0xFB
  289 D1:E0EF 4E 4F 50 04 .db "NOP", 4     ;0xFC
  290 D1:E0F3 53 42 43 04 .db "SBC", 4     ;0xFD
  291 D1:E0F7 49 4E 43 04 .db "INC", 4     ;0xFE
  292 D1:E0FB 49 53 43 04 .db "ISC", 4     ;0xFF
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    3 D1:E0FF -  -  -  -  
    4 D1:E0FF -  -  -  -  
    5 D1:E0FF -  -  -  -  ;You must assign a print character routine.
    6 D1:E0FF -  -  -  -  ;You must also write all opcode bytes to operbuf or map operbuf to where written
    7 D1:E0FF -  -  -  -  dbg_printChr    = PrintBigFont
    8 D1:E0FF -  -  -  -  operbuf         = debugram
    9 D1:E0FF -  -  -  -  
   10 D1:E0FF -  -  -  -  
   11 D1:E0FF -  -  -  -  dbg_resetScreen:
   12 D1:E0FF 21 00 00 D4     ld  hl,screenBuf1
   13 D1:E103 11 01 00 D4     ld  de,screenBuf1+1
   14 D1:E107 01 FF 57 02     ld  bc,(2*240*320)-1
   15 D1:E10B 36 00 -  -      ld  (hl),$00
   16 D1:E10D ED B0 -  -      ldir
   17 D1:E10F AF -  -  -      xor a,a
   18 D1:E110 CD 2A B0 D1     call setLineStart
   19 D1:E114 CD 33 B0 D1     call setCurLine
   20 D1:E118 C9 -  -  -      ret
   21 D1:E119 -  -  -  -  
   22 D1:E119 -  -  -  -  dbg_prepNextLine:
   23 D1:E119 AF -  -  -      xor a,a
   24 D1:E11A 32 F6 31 D0     ld  (xPos),a
   25 D1:E11E CD 00 B1 D1     call calculateScreenPtr
   26 D1:E122 EB -  -  -      ex  de,hl
   27 D1:E123 21 FF 2B D5     ld  hl,screenBuf2-1
   28 D1:E127 B7 -  -  -      or  a,a
   29 D1:E128 ED 52 -  -      sbc hl,de
   30 D1:E12A -  -  -  -  ;If C: DE in sb2. subtract to set in sb1.
   31 D1:E12A -  -  -  -  ;If NC: DE in sb1. add to set in sb2.
   32 D1:E12A 21 00 2C 01     ld  hl,320*240
   33 D1:E12E 30 04 -  -      jr  nc,+_
   34 D1:E130 21 00 D4 FE     ld  hl,-(320*240)+0
   35 D1:E134 19 -  -  -  _:  add hl,de   ;HL set to other buffer. DE points to current buffer.
   36 D1:E135 01 00 0A 00     ld  bc,320*8    ;copy one line from other buffer to current buffer.
   37 D1:E139 7E -  -  -  _:  ld  a,(hl)
   38 D1:E13A C6 01 -  -      add a,1     ;carry if $FF (white), NC if not
   39 D1:E13C 9F -  -  -      sbc a,a     ;if carry, returns to $FF, else is black
   40 D1:E13D 77 -  -  -      ld  (hl),a
   41 D1:E13E ED A0 -  -      ldi
   42 D1:E140 EA 39 E1 D1     jp  pe,-_
   43 D1:E144 3A F7 31 D0     ld  a,(yPos)
   44 D1:E148 FE 1D -  -      cp  a,29
   45 D1:E14A 20 06 -  -      jr  nz,+_
   46 D1:E14C 21 00 D4 FE     ld  hl,-(320*240)
   47 D1:E150 19 -  -  -      add hl,de
   48 D1:E151 EB -  -  -      ex de,hl        ;if bottom of screen, then reset DE to top of screen.
   49 D1:E152 D5 -  -  -  _:  push de
   50 D1:E153 E1 -  -  -      pop hl
   51 D1:E154 13 -  -  -      inc de
   52 D1:E155 71 -  -  -      ld  (hl),c
   53 D1:E156 01 BF 08 00     ld  bc,(320*7)-1    ;erase whole line below it to prepare for writing.
   54 D1:E15A ED B0 -  -      ldir
   55 D1:E15C C9 -  -  -      ret
   56 D1:E15D -  -  -  -  
   57 D1:E15D -  -  -  -  ;Input: ix = core_memory_ix 
   58 D1:E15D -  -  -  -  ;Output: Text onscreen
   59 D1:E15D -  -  -  -  dbg_printLine:
   60 D1:E15D E5 C5 D5 DD 
              E5 FD E5 F5     push hl \ push bc \ push de \ push ix \ push iy \ push af
   61 D1:E165 ED 23 00 -      lea hl,iy+0
   62 D1:E168 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl
   63 D1:E16B 11 00 00 00     ld  de,DEBUG_PRINT_START_CYCLE
   64 D1:E16F B7 -  -  -      or  a,a
   65 D1:E170 ED 52 -  -      sbc hl,de
   66 D1:E172 DA 56 E2 D1     jp  c,dbg_printLine_noPrint
   67 D1:E176 -  -  -  -  
   68 D1:E176 3E 1A -  -      ld  a,$1A   ;blue
   69 D1:E178 32 82 B0 D1     ld  (fontBGColor_var),a
   70 D1:E17C 32 CF B0 D1     ld  (smallFontBGColor_var),a
   71 D1:E180 DD 27 0E -      ld  hl,(ix+CURRENT_OPCODES)
   72 D1:E183 22 F9 31 D0     ld  (operbuf),hl
   73 D1:E187 CD 19 E1 D1     call dbg_prepNextLine
   74 D1:E18B CD 3E B0 D1     call newLine
   75 D1:E18F DD 7E 06 -      ld  a,(ix+REGPC+1)
   76 D1:E192 CD 9B B0 D1     call printSmallNumPair
   77 D1:E196 DD 7E 05 -      ld  a,(ix+REGPC+0)
   78 D1:E199 CD 9B B0 D1     call printSmallNumPair
   79 D1:E19D 3E 20 -  -      ld  a,' '
   80 D1:E19F CD 6B B0 D1     call printBigFont
   81 D1:E1A3 -  -  -  -      ;
   82 D1:E1A3 3E 41 -  -      ld  a,'A'
   83 D1:E1A5 CD 6B B0 D1     call printBigFont
   84 D1:E1A9 DD 7E 00 -      ld  a,(ix+REGA)
   85 D1:E1AC CD 9B B0 D1     call printSmallNumPair
   86 D1:E1B0 3E 20 -  -      ld  a,' '
   87 D1:E1B2 CD 6B B0 D1     call printBigFont
   88 D1:E1B6 -  -  -  -      ;
   89 D1:E1B6 3E 58 -  -      ld  a,'X'
   90 D1:E1B8 CD 6B B0 D1     call printBigFont
   91 D1:E1BC DD 7E 01 -      ld  a,(ix+REGX)
   92 D1:E1BF CD 9B B0 D1     call printSmallNumPair
   93 D1:E1C3 3E 20 -  -      ld  a,' '
   94 D1:E1C5 CD 6B B0 D1     call printBigFont
   95 D1:E1C9 -  -  -  -      ;
   96 D1:E1C9 3E 59 -  -      ld  a,'Y'
   97 D1:E1CB CD 6B B0 D1     call printBigFont
   98 D1:E1CF DD 7E 02 -      ld  a,(ix+REGY)
   99 D1:E1D2 CD 9B B0 D1     call printSmallNumPair
  100 D1:E1D6 3E 20 -  -      ld  a,' '
  101 D1:E1D8 CD 6B B0 D1     call printBigFont
  102 D1:E1DC -  -  -  -      ;
  103 D1:E1DC 3E 53 -  -      ld  a,'S'
  104 D1:E1DE CD 6B B0 D1     call printBigFont
  105 D1:E1E2 DD 7E 03 -      ld  a,(ix+REGSP)
  106 D1:E1E5 CD 9B B0 D1     call printSmallNumPair
  107 D1:E1E9 3E 20 -  -      ld  a,' '
  108 D1:E1EB CD 6B B0 D1     call printBigFont
  109 D1:E1EF -  -  -  -      ;
  110 D1:E1EF 3E 50 -  -      ld  a,'P'
  111 D1:E1F1 CD 6B B0 D1     call printBigFont
  112 D1:E1F5 DD 7E 04 -      ld  a,(ix+REGSR)
  113 D1:E1F8 CD 9B B0 D1     call printSmallNumPair
  114 D1:E1FC 3E 20 -  -      ld  a,' '
  115 D1:E1FE CD 6B B0 D1     call printBigFont
  116 D1:E202 -  -  -  -  
  117 D1:E202 -  -  -  -      ;
  118 D1:E202 -  -  -  -  ;    ld  hl,dbg_printLine_str001
  119 D1:E202 -  -  -  -  ;    call printString
  120 D1:E202 -  -  -  -  ;    ld  b,5
  121 D1:E202 -  -  -  -  ;    lea hl,ix+0
  122 D1:E202 -  -  -  -  ;_:  ld  a,(hl)
  123 D1:E202 -  -  -  -  ;    inc hl
  124 D1:E202 -  -  -  -  ;    push bc
  125 D1:E202 -  -  -  -  ;        push hl
  126 D1:E202 -  -  -  -  ;            call printSmallNumPair
  127 D1:E202 -  -  -  -  ;            ld  a,' '
  128 D1:E202 -  -  -  -  ;            call printBigFont
  129 D1:E202 -  -  -  -  ;        pop hl
  130 D1:E202 -  -  -  -  ;    pop bc
  131 D1:E202 -  -  -  -  ;    djnz -_
  132 D1:E202 -  -  -  -  
  133 D1:E202 DD 7E 0D -      ld  a,(ix+CYCLES_CURRENT+2)
  134 D1:E205 CD 9B B0 D1     call printSmallNumPair
  135 D1:E209 DD 7E 0C -      ld  a,(ix+CYCLES_CURRENT+1)
  136 D1:E20C CD 9B B0 D1     call printSmallNumPair
  137 D1:E210 DD 7E 0B -      ld  a,(ix+CYCLES_CURRENT+0)
  138 D1:E213 CD 9B B0 D1     call printSmallNumPair
  139 D1:E217 3E 20 -  -      ld  a,' '
  140 D1:E219 CD 6B B0 D1     call printBigFont
  141 D1:E21D 2A F9 31 D0     ld  hl,(operbuf)
  142 D1:E221 DD 2F 0E -      ld  (ix+CURRENT_OPCODES),hl
  143 D1:E224 7D -  -  -      ld  a,L
  144 D1:E225 CD 46 E3 D1     call dbg_getInstSize
  145 D1:E229 06 03 -  -      ld  b,3
  146 D1:E22B 4F -  -  -      ld  c,a
  147 D1:E22C 0C -  -  -      inc c
  148 D1:E22D ED 22 0E -      lea hl,ix+CURRENT_OPCODES
  149 D1:E230 7E -  -  -  _:  ld  a,(hl)
  150 D1:E231 23 -  -  -      inc hl
  151 D1:E232 E5 -  -  -      push hl
  152 D1:E233 0D -  -  -          dec c
  153 D1:E234 F2 39 E2 D1         jp p,+_
  154 D1:E238 0C -  -  -          inc c   ;never let c go below zero.
  155 D1:E239 C5 -  -  -  _:      push bc
  156 D1:E23A 28 06 -  -              jr  z,+_
  157 D1:E23C CD 9B B0 D1             call printSmallNumPair
  158 D1:E240 18 06 -  -              jr ++_
  159 D1:E242 3E 20 -  -  _:          ld  a,' '
  160 D1:E244 CD 6B B0 D1             call printBigFont
  161 D1:E248 C1 -  -  -  _:      pop bc
  162 D1:E249 E1 -  -  -      pop hl
  163 D1:E24A 10 E4 -  -      djnz ----_
  164 D1:E24C 3E 20 -  -      ld  a,' '
  165 D1:E24E CD 6B B0 D1     call printBigFont
  166 D1:E252 CD 5E E3 D1     call dbg_printDisassembly
  167 D1:E256 -  -  -  -  
  168 D1:E256 -  -  -  -      ;
  169 D1:E256 -  -  -  -      ;Remove section below when done testing nestest for timings
  170 D1:E256 -  -  -  -      ;
  171 D1:E256 -  -  -  -  dbg_printLine_noPrint:
  172 D1:E256 11 00 00 00     ld  de,0
  173 D1:E25A 2A 4D 34 D0     ld  hl,(timings_base)
  174 D1:E25E 5E -  -  -      ld  e,(hl)
  175 D1:E25F 23 -  -  -      inc hl
  176 D1:E260 56 -  -  -      ld  d,(hl)
  177 D1:E261 23 -  -  -      inc hl
  178 D1:E262 22 4D 34 D0     ld  (timings_base),hl
  179 D1:E266 DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  180 D1:E269 B7 -  -  -      or  a,a
  181 D1:E26A ED 52 -  -      sbc hl,de
  182 D1:E26C 28 17 -  -      jr  z,+_
  183 D1:E26E 21 FF FF FF     ld  hl,-1
  184 D1:E272 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  185 D1:E275 CD 3E B0 D1     call newLine
  186 D1:E279 21 09 E3 D1     ld  hl,dbg_printLine_timeMismatch
  187 D1:E27D CD 55 B0 D1     call printString
  188 D1:E281 DD 36 14 01     ld  (ix+CORE_ERROR_LEVEL),1
  189 D1:E285 2A 4D 34 D0 _:  ld  hl,(timings_base)
  190 D1:E289 7E -  -  -      ld  a,(hl)
  191 D1:E28A 23 -  -  -      inc hl
  192 D1:E28B 22 4D 34 D0     ld  (timings_base),hl
  193 D1:E28F DD BE 04 -      cp  a,(ix+REGSR)
  194 D1:E292 28 17 -  -      jr  z,+_
  195 D1:E294 21 FF FF FF     ld  hl,-1
  196 D1:E298 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  197 D1:E29B CD 3E B0 D1     call newLine
  198 D1:E29F 21 23 E3 D1     ld  hl,dbg_printLine_statusRegisterMismatch
  199 D1:E2A3 CD 55 B0 D1     call printString
  200 D1:E2A7 DD 36 14 02     ld  (ix+CORE_ERROR_LEVEL),2
  201 D1:E2AB -  -  -  -  _:
  202 D1:E2AB -  -  -  -      ;
  203 D1:E2AB -  -  -  -      ;End debug-debug section
  204 D1:E2AB -  -  -  -      ;
  205 D1:E2AB CD 61 AF D1     call fastCopy
  206 D1:E2AF AF -  -  -      xor a,a     ;black
  207 D1:E2B0 32 82 B0 D1     ld  (fontBGColor_var),a
  208 D1:E2B4 32 CF B0 D1     ld  (smallFontBGColor_var),a
  209 D1:E2B8 -  -  -  -  
  210 D1:E2B8 F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  211 D1:E2C0 -  -  -  -      ;push hl \ push bc \ push de \ push ix \ push iy \ push af
  212 D1:E2C0 C9 -  -  -      ret
  213 D1:E2C1 -  -  -  -  
  214 D1:E2C1 -  -  -  -  
  215 D1:E2C1 -  -  -  -      ;also remove this when done timing debugging
  216 D1:E2C1 11 00 00 00     ld  de,0
  217 D1:E2C5 2A 4D 34 D0     ld  hl,(timings_base)
  218 D1:E2C9 5E -  -  -      ld  e,(hl)
  219 D1:E2CA 23 -  -  -      inc hl
  220 D1:E2CB 56 -  -  -      ld  d,(hl)
  221 D1:E2CC 23 -  -  -      inc hl
  222 D1:E2CD 22 4D 34 D0     ld  (timings_base),hl
  223 D1:E2D1 DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  224 D1:E2D4 B7 -  -  -      or  a,a
  225 D1:E2D5 ED 52 -  -      sbc hl,de
  226 D1:E2D7 28 13 -  -      jr  z,+_
  227 D1:E2D9 21 FF FF FF     ld  hl,-1
  228 D1:E2DD DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  229 D1:E2E0 CD 3E B0 D1     call newLine
  230 D1:E2E4 21 09 E3 D1     ld  hl,dbg_printLine_timeMismatch
  231 D1:E2E8 CD 55 B0 D1     call printString
  232 D1:E2EC -  -  -  -  _:  ;
  233 D1:E2EC -  -  -  -      ;End debug-debug section
  234 D1:E2EC -  -  -  -      ;
  235 D1:E2EC CD 61 AF D1     call fastCopy
  236 D1:E2F0 AF -  -  -      xor a,a     ;black
  237 D1:E2F1 32 82 B0 D1     ld  (fontBGColor_var),a
  238 D1:E2F5 32 CF B0 D1     ld  (smallFontBGColor_var),a
  239 D1:E2F9 F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  240 D1:E301 C9 -  -  -      ret
  241 D1:E302 -  -  -  -  
  242 D1:E302 -  -  -  -  dbg_printLine_str001:
  243 D1:E302 41 58 59 53 
              50 20 00 -  .db "AXYSP ",0
  244 D1:E309 -  -  -  -  dbg_printLine_timeMismatch:
  245 D1:E309 43 50 55 20 
              54 65 73 74 
              20 74 69 6D 
              69 6E 67 20 
              6D 69 73 6D 
              61 74 63 68 
              2E 00 -  -  .db "CPU Test timing mismatch.",0
  246 D1:E323 -  -  -  -  dbg_printLine_statusRegisterMismatch:
  247 D1:E323 -  -  -  -  ;    0123456789012345678901234567890123456789
  248 D1:E323 43 50 55 20 
              54 65 73 74 
              20 73 74 61 
              74 75 73 20 
              72 65 67 69 
              73 74 65 72 
              20 6D 69 73 
              6D 61 74 63 
              68 2E 00 -  .db "CPU Test status register mismatch.",0
  249 D1:E346 -  -  -  -  
  250 D1:E346 -  -  -  -  
  251 D1:E346 -  -  -  -  
  252 D1:E346 -  -  -  -  
  253 D1:E346 -  -  -  -  
  254 D1:E346 -  -  -  -  
  255 D1:E346 -  -  -  -  ;A=instruction. Returns: A=size
  256 D1:E346 -  -  -  -  dbg_getInstSize:
  257 D1:E346 E5 D5 -  -      push hl \ push de
  258 D1:E348 57 -  -  -          ld  d,a
  259 D1:E349 1E 04 -  -          ld  e,4
  260 D1:E34B ED 5C -  -          mlt de
  261 D1:E34D 21 02 DD D1         ld  hl,inst6502_disassembly_table+3
  262 D1:E351 19 -  -  -          add hl,de
  263 D1:E352 16 00 -  -          ld  d,0
  264 D1:E354 5E -  -  -          ld  e,(hl)
  265 D1:E355 21 C4 DC D1         ld  hl,inst6502_opcode_width_table
  266 D1:E359 19 -  -  -          add hl,de
  267 D1:E35A 7E -  -  -          ld  a,(hl)
  268 D1:E35B D1 E1 -  -      pop de \ pop hl
  269 D1:E35D C9 -  -  -      ret
  270 D1:E35E -  -  -  -  
  271 D1:E35E -  -  -  -  dbg_printDisassembly:
  272 D1:E35E F5 C5 D5 E5 
              DD E5 -  -      push af \ push bc \ push de \ push hl \ push ix
  273 D1:E364 -  -  -  -      ;find entry in disassembly table
  274 D1:E364 2A F9 31 D0     ld  hl,(operbuf)
  275 D1:E368 26 04 -  -      ld  H,4
  276 D1:E36A ED 6C -  -      mlt hl
  277 D1:E36C 11 FF DC D1     ld  de,inst6502_disassembly_table
  278 D1:E370 19 -  -  -      add hl,de
  279 D1:E371 06 03 -  -      ld  b,3
  280 D1:E373 7E -  -  -  _:  ld  a,(hl)
  281 D1:E374 23 -  -  -      inc hl
  282 D1:E375 CD FB E3 D1     call dbg_printC
  283 D1:E379 10 F8 -  -      djnz -_
  284 D1:E37B 3E 20 -  -      ld  a,' '
  285 D1:E37D CD FB E3 D1     call dbg_printC
  286 D1:E381 46 -  -  -      ld  b,(hl)
  287 D1:E382 04 -  -  -      inc b
  288 D1:E383 -  -  -  -      ;Instruction addressing mode in B. Now find text for that address mode.
  289 D1:E383 21 D2 DC D1     ld  hl,inst6502_disassembler
  290 D1:E387 11 00 00 00     ld  de,0
  291 D1:E38B 5E -  -  -  _:  ld  e,(hl)
  292 D1:E38C 19 -  -  -      add hl,de
  293 D1:E38D 10 FC -  -      djnz -_
  294 D1:E38F 1D -  -  -      dec e
  295 D1:E390 28 29 -  -      jr  z,dbg_printDisassembly_end  ;stop if text is zero-sized
  296 D1:E392 ED 52 -  -      sbc hl,de   ;rewind to start of text part of instruction. E is text length.
  297 D1:E394 43 -  -  -      ld  b,e
  298 D1:E395 -  -  -  -  dbg_printDisassembly_printOperandLoop:
  299 D1:E395 7E -  -  -      ld  a,(hl)
  300 D1:E396 23 -  -  -      inc hl
  301 D1:E397 FE 31 -  -      cp  a,'1'
  302 D1:E399 20 06 -  -      jr  nz,+_
  303 D1:E39B CD DF E3 D1     call dbg_printOperand1
  304 D1:E39F 18 18 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  305 D1:E3A1 FE 32 -  -  _:  cp  a,'2'
  306 D1:E3A3 20 06 -  -      jr  nz,+_
  307 D1:E3A5 CD D7 E3 D1     call dbg_printOperand2
  308 D1:E3A9 18 0E -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  309 D1:E3AB FE 2D -  -  _:  cp  a,'-'
  310 D1:E3AD 20 06 -  -      jr  nz,+_
  311 D1:E3AF CD C2 E3 D1     call dbg_printRel1
  312 D1:E3B3 18 04 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  313 D1:E3B5 CD FB E3 D1 _:  call dbg_printC
  314 D1:E3B9 -  -  -  -  dbg_PrintDisassembly_printOperandFallthrough:
  315 D1:E3B9 10 DA -  -      djnz dbg_printDisassembly_printOperandLoop
  316 D1:E3BB -  -  -  -  dbg_printDisassembly_end:
  317 D1:E3BB DD E1 E1 D1 
              C1 F1 -  -      pop ix \ pop hl \ pop de \ pop bc \ pop af
  318 D1:E3C1 C9 -  -  -      ret
  319 D1:E3C2 -  -  -  -  
  320 D1:E3C2 -  -  -  -  dbg_printRel1:
  321 D1:E3C2 3A FA 31 D0     ld  a,(operbuf+1)
  322 D1:E3C6 B7 -  -  -      or  a,a
  323 D1:E3C7 F2 D5 E3 D1     jp  p,dbg_printRel1_skipNeg
  324 D1:E3CB F5 -  -  -      push af
  325 D1:E3CC 3E 2D -  -          ld   a,'-'
  326 D1:E3CE CD FB E3 D1         call dbg_printC
  327 D1:E3D2 F1 -  -  -      pop af
  328 D1:E3D3 ED 44 -  -      neg
  329 D1:E3D5 -  -  -  -  dbg_printRel1_skipNeg:
  330 D1:E3D5 18 0C -  -      jr dbg_printHex
  331 D1:E3D7 -  -  -  -  
  332 D1:E3D7 -  -  -  -  dbg_printOperand2:
  333 D1:E3D7 3A FB 31 D0     ld  a,(operbuf+2)
  334 D1:E3DB CD E3 E3 D1     call dbg_printHex
  335 D1:E3DF -  -  -  -  dbg_printOperand1:
  336 D1:E3DF 3A FA 31 D0     ld  a,(operbuf+1)
  337 D1:E3E3 -  -  -  -  dbg_printHex:
  338 D1:E3E3 CD E8 E3 D1     call dispAHex
  339 D1:E3E7 C9 -  -  -      ret
  340 D1:E3E8 -  -  -  -  
  341 D1:E3E8 -  -  -  -  dispAHex:
  342 D1:E3E8 F5 -  -  -      push af
  343 D1:E3E9 CD F0 E3 D1         call +_
  344 D1:E3ED F1 -  -  -      pop af
  345 D1:E3EE 18 04 -  -      jr  ++_
  346 D1:E3F0 1F -  -  -  _:  rra
  347 D1:E3F1 1F -  -  -      rra
  348 D1:E3F2 1F -  -  -      rra
  349 D1:E3F3 1F -  -  -      rra
  350 D1:E3F4 F6 F0 -  -  _:  or  a,$F0
  351 D1:E3F6 27 -  -  -      daa
  352 D1:E3F7 C6 A0 -  -      add a,$A0
  353 D1:E3F9 CE 40 -  -      adc a,$40
  354 D1:E3FB -  -  -  -  dbg_printC:
  355 D1:E3FB E5 -  -  -      push hl
  356 D1:E3FC C5 -  -  -          push bc
  357 D1:E3FD CD 6B B0 D1             call dbg_printChr
  358 D1:E401 C1 -  -  -          pop bc
  359 D1:E402 E1 -  -  -      pop hl
  360 D1:E403 C9 -  -  -      ret
Listing for file "main.z80"
  829 D1:E404 -  -  -  -  #include "ppu.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ppu.z80"
    1 D1:E404 -  -  -  -  ;PPU-related stuff is written here, though not all of it is localized in
    2 D1:E404 -  -  -  -  ;this file. Some of it will necessarily be located with the mapper code
    3 D1:E404 -  -  -  -  ;that handles PPU I/O.
    4 D1:E404 -  -  -  -  
    5 D1:E404 -  -  -  -  
    6 D1:E404 -  -  -  -      ;Do this before a lot of other things.
    7 D1:E404 -  -  -  -      ;Select current character rom banks from PPU settings.
    8 D1:E404 2A 46 34 D0     ld  hl,(chr_rom_base)
    9 D1:E408 01 00 10 00     ld  bc,$001000
   10 D1:E40C DD 7E E0 -      ld  a,(ix+PPU_CTRL)
   11 D1:E40F E5 -  -  -      push hl
   12 D1:E410 CB 67 -  -          bit 4,a     ;background pattern base offset
   13 D1:E412 28 01 -  -          jr  z,+_
   14 D1:E414 09 -  -  -          add hl,bc
   15 D1:E415 22 20 34 D0 _:      ld  (chr_rom_tiles),hl
   16 D1:E419 E1 -  -  -      pop hl
   17 D1:E41A CB 6F -  -      bit 5,a     ;sprite pattern base offset
   18 D1:E41C 28 01 -  -      jr  z,+_
   19 D1:E41E 09 -  -  -      add hl,bc
   20 D1:E41F 22 24 34 D0 _:  ld  (chr_rom_sprites),hl
   21 D1:E423 -  -  -  -  
   22 D1:E423 -  -  -  -  
   23 D1:E423 -  -  -  -  
   24 D1:E423 -  -  -  -      ;B=Y, C=X. Obtain nametable address
   25 D1:E423 -  -  -  -      ;You must preserve BC yourself. Somehow. Or not depending on how you loop.
   26 D1:E423 -  -  -  -      ;B and C are modified to fit inside the nametable selected.
   27 D1:E423 21 80 06 1A     ld  hl,nametable00>>3
   28 D1:E427 78 -  -  -      ld  a,b
   29 D1:E428 D6 20 -  -      sub 32
   30 D1:E42A 38 01 -  -      jr  c,+_
   31 D1:E42C 78 -  -  -      ld  a,b
   32 D1:E42D 47 -  -  -  _:  ld  b,a
   33 D1:E42E 3F -  -  -      ccf
   34 D1:E42F ED 6A -  -      adc hl,hl
   35 D1:E431 79 -  -  -      ld  a,c
   36 D1:E432 D6 1E -  -      sub 30
   37 D1:E434 38 01 -  -      jr  c,+_
   38 D1:E436 79 -  -  -      ld  a,c
   39 D1:E437 4F -  -  -  _:  ld  c,a
   40 D1:E438 3F -  -  -      ccf
   41 D1:E439 ED 6A -  -      adc hl,hl
   42 D1:E43B 29 -  -  -      add hl,hl   ;HL is now a pointer. do ld hl,(hl) to get actual NT address.
   43 D1:E43C -  -  -  -  
   44 D1:E43C -  -  -  -  
   45 D1:E43C -  -  -  -      ;Increment C=X, adjusting nametable pointer table in HL if crossover
   46 D1:E43C 0C -  -  -      inc c
   47 D1:E43D 79 -  -  -      ld  a,c
   48 D1:E43E FE 20 -  -      cp  a,32
   49 D1:E440 38 06 -  -      jr  c,+_
   50 D1:E442 0E 00 -  -      ld  c,0
   51 D1:E444 7D -  -  -      ld  a,L
   52 D1:E445 EE 04 -  -      xor a,%00000100
   53 D1:E447 6F -  -  -      ld  L,a
   54 D1:E448 00 -  -  -  _:  nop
   55 D1:E449 -  -  -  -  
   56 D1:E449 -  -  -  -      ;Increment B=Y, adjusting nametable pointer table in HL if crossover
   57 D1:E449 04 -  -  -      inc b
   58 D1:E44A 78 -  -  -      ld  a,b
   59 D1:E44B FE 1E -  -      cp  a,30
   60 D1:E44D 38 06 -  -      jr  c,+_
   61 D1:E44F 06 00 -  -      ld  b,0
   62 D1:E451 7D -  -  -      ld  a,L
   63 D1:E452 EE 08 -  -      xor a,%00001000
   64 D1:E454 6F -  -  -      ld  L,a
   65 D1:E455 00 -  -  -  _:  nop
   66 D1:E456 -  -  -  -  
   67 D1:E456 -  -  -  -      ;Retrieves attribute byte from B=Y, C=X
   68 D1:E456 -  -  -  -      ;HL=nametable pointer table
   69 D1:E456 -  -  -  -      ;NTptr tab low byte fmt: %000TIIAA. T=attrib, I=ID, A=address bytes
   70 D1:E456 D5 -  -  -      push de
   71 D1:E457 79 -  -  -          ld  a,c
   72 D1:E458 CB 3F -  -          srl a
   73 D1:E45A CB 3F -  -          srl a   ;change 0-30 to 0-7. Discards low 2 bits.
   74 D1:E45C 5F -  -  -          ld  e,a
   75 D1:E45D 78 -  -  -          ld  a,b
   76 D1:E45E E6 03 -  -          and a,3 ;discard two lower bits
   77 D1:E460 87 -  -  -          add a,a ;But place remaining bits up higher
   78 D1:E461 83 -  -  -          add a,e ;A=%00YYYXXX
   79 D1:E462 CB E5 -  -          set 4,L ;swap to attrib
   80 D1:E464 ED 17 -  -          ld  de,(hl)
   81 D1:E466 CB A5 -  -          res 4,L ;swap back to main nametable pointers
   82 D1:E468 83 -  -  -          add a,e ;base is $C0. This will not produce a carry.
   83 D1:E469 5F -  -  -          ld  e,a
   84 D1:E46A 1A -  -  -          ld  a,(de)
   85 D1:E46B D1 -  -  -      pop de
   86 D1:E46C -  -  -  -  
   87 D1:E46C -  -  -  -      ;Selects attribute from A from B=Y, C=X in format %0000AA00
   88 D1:E46C CB 48 -  -      bit 1,b
   89 D1:E46E 28 04 -  -      jr  z,+_
   90 D1:E470 07 -  -  -      rlca    ;If not zero, shift upper nibble into lower nibble
   91 D1:E471 07 -  -  -      rlca    ;for further selection.
   92 D1:E472 07 -  -  -      rlca
   93 D1:E473 07 -  -  -      rlca
   94 D1:E474 CB 49 -  -  _:  bit 1,c
   95 D1:E476 20 02 -  -      jr  nz,+_   ;If not zero, upper 2 bits of lower nibble already in position
   96 D1:E478 07 -  -  -      rlca        ;Otherwise, move them into position
   97 D1:E479 07 -  -  -      rlca        
   98 D1:E47A E6 0C -  -  _:  and a,%00001100
   99 D1:E47C -  -  -  -  
  100 D1:E47C -  -  -  -      ;Nametable/tilemap variant
  101 D1:E47C -  -  -  -      ;Sets DE to current location in nametable wrt B=Y, C=X
  102 D1:E47C -  -  -  -      ;HL=current nametable pointer
  103 D1:E47C E5 -  -  -      push hl
  104 D1:E47D ED 27 -  -          ld  hl,(hl)
  105 D1:E47F 1E 20 -  -          ld  e,32
  106 D1:E481 50 -  -  -          ld  d,b
  107 D1:E482 ED 5C -  -          mlt de
  108 D1:E484 7B -  -  -          ld  a,e
  109 D1:E485 81 -  -  -          add a,c
  110 D1:E486 5F -  -  -          ld  e,a
  111 D1:E487 19 -  -  -          add hl,de
  112 D1:E488 -  -  -  -          ;ex  de,hl
  113 D1:E488 E1 -  -  -      pop hl
  114 D1:E489 -  -  -  -  
  115 D1:E489 -  -  -  -      ;TODO: Find way to link stuff above. The task set forth is the following:
  116 D1:E489 -  -  -  -      ;Create the main tile rendering loop. We must track the following:
  117 D1:E489 -  -  -  -      ;   Screen pointer, nametable position, loop parameters.
  118 D1:E489 -  -  -  -      ;With these, we will:
  119 D1:E489 -  -  -  -      ;1. Get tileID from nametable position
  120 D1:E489 -  -  -  -      ;2. Get attribute data associated with that tile.
  121 D1:E489 -  -  -  -      ;3. Retrieve CHR_ROM data and
  122 D1:E489 -  -  -  -      ;4. Combine it to retrieve color data, then write it to screen buffer.
  123 D1:E489 -  -  -  -      ;
  124 D1:E489 -  -  -  -      ;Later on, insert a cacheing step between 2 and 3. to selectively
  125 D1:E489 -  -  -  -      ;modify step 4.
  126 D1:E489 -  -  -  -      ;
  127 D1:E489 -  -  -  -      ; Do in the inlining thing later.
  128 D1:E489 -  -  -  -      ;
  129 D1:E489 -  -  -  -  
  130 D1:E489 -  -  -  -  ;Some bits of this is in "coreint.z80"
  131 D1:E489 -  -  -  -  ppu_isr:
  132 D1:E489 DD 7E E0 -      ld  a,(ix+PPU_CTRL)
  133 D1:E48C E6 18 -  -      and a,%00011000     ;sprite and background. if zero, no rendering happens.
  134 D1:E48E 28 0D -  -      jr  z,ppu_isr_nodraw
  135 D1:E490 -  -  -  -      ;perform the check that makes odd cycles one ppu cc shorter, but only if
  136 D1:E490 -  -  -  -      ;something is being rendered to the screen
  137 D1:E490 DD 7E F5 -      ld  a,(ix+PPU_FRAMECOUNT)
  138 D1:E493 0F -  -  -      rrca
  139 D1:E494 30 03 -  -      jr  nc,+_
  140 D1:E496 DD 35 F1 -      dec (ix+PPU_SUBCYCLE)
  141 D1:E499 -  -  -  -  _:  ;there... should be something else to do?
  142 D1:E499 -  -  -  -      ;call ppu_drawBGSprites
  143 D1:E499 CD D3 E4 D1     call ppu_drawBG
  144 D1:E49D -  -  -  -      ;call ppu_drawFGSprites
  145 D1:E49D -  -  -  -  ppu_isr_nodraw:
  146 D1:E49D 01 23 6D 00     ld  bc,27939
  147 D1:E4A1 DD 7E F1 -      ld  a,(ix+PPU_SUBCYCLE)
  148 D1:E4A4 C6 02 -  -      add a,2     ;add the 2/3rds cycle
  149 D1:E4A6 FE 03 -  -      cp  a,3     ;but is it more than 3? (0,1,2)
  150 D1:E4A8 38 03 -  -      jr  c,+_
  151 D1:E4AA D6 03 -  -      sub a,3
  152 D1:E4AC 03 -  -  -      inc bc
  153 D1:E4AD DD 77 F1 -  _:  ld  (ix+PPU_SUBCYCLE),a
  154 D1:E4B0 11 89 E4 D1     ld  de,ppu_isr
  155 D1:E4B4 CD 8F B4 D1     call int6502_pushISRAfterPop
  156 D1:E4B8 DD CB E2 FE     set 7,(ix+PPU_STATUS)
  157 D1:E4BC 2A 4A 34 D0     ld  hl,(ppu_smc_gate)
  158 D1:E4C0 36 00 -  -      ld  (hl),$00        ;nop out ret so writes no longer ignored.
  159 D1:E4C2 -  -  -  -      ;
  160 D1:E4C2 -  -  -  -      ; TODO: Figure this one out:
  161 D1:E4C2 -  -  -  -      ; Do we need something to unset VBlank active flag at the end of
  162 D1:E4C2 -  -  -  -      ; VBlank if left unread?
  163 D1:E4C2 -  -  -  -      ;
  164 D1:E4C2 DD CB E0 7E     bit 7,(ix+PPU_CTRL)     ;VBlank NMI enable flag
  165 D1:E4C6 CA C2 B5 D1     jp  z,i6502RetryFirstLoad
  166 D1:E4CA 3E FF -  -      ld  a,$FF
  167 D1:E4CC DD 77 1E -      ld  (ix+NMI_TRIGGERED),a
  168 D1:E4CF C3 1E CC D1     jp  inst6502_brk
  169 D1:E4D3 -  -  -  -  
  170 D1:E4D3 -  -  -  -  
  171 D1:E4D3 -  -  -  -  
  172 D1:E4D3 -  -  -  -  
  173 D1:E4D3 -  -  -  -  
  174 D1:E4D3 -  -  -  -  
  175 D1:E4D3 -  -  -  -  ppu_drawBG:
  176 D1:E4D3 -  -  -  -      ;set base rom addresses
  177 D1:E4D3 2A 46 34 D0     ld  hl,(chr_rom_base)
  178 D1:E4D7 01 00 10 00     ld  bc,$001000
  179 D1:E4DB DD 7E E0 -      ld  a,(ix+PPU_CTRL)
  180 D1:E4DE E5 -  -  -      push hl
  181 D1:E4DF CB 67 -  -          bit 4,a     ;background pattern base offset
  182 D1:E4E1 28 01 -  -          jr  z,+_
  183 D1:E4E3 09 -  -  -          add hl,bc
  184 D1:E4E4 22 20 34 D0 _:      ld  (chr_rom_tiles),hl
  185 D1:E4E8 E1 -  -  -      pop hl
  186 D1:E4E9 CB 6F -  -      bit 5,a     ;sprite pattern base offset
  187 D1:E4EB 28 01 -  -      jr  z,+_
  188 D1:E4ED 09 -  -  -      add hl,bc
  189 D1:E4EE 22 24 34 D0 _:  ld  (chr_rom_sprites),hl
  190 D1:E4F2 -  -  -  -      ;set coarse x,y scroll positions. B=Y, C=x
  191 D1:E4F2 DD 07 FC -      ld  bc,(ix+PPU_XSCROLL)
  192 D1:E4F5 CB 20 -  -      sla b
  193 D1:E4F7 CB 20 -  -      sla b
  194 D1:E4F9 CB 20 -  -      sla b
  195 D1:E4FB CB 21 -  -      sla c
  196 D1:E4FD CB 21 -  -      sla c
  197 D1:E4FF CB 21 -  -      sla c
  198 D1:E501 -  -  -  -      ;set base nametable addresses
  199 D1:E501 21 00 34 D0     ld  hl,nametable00
  200 D1:E505 DD 7E E0 -      ld  a,(ix+PPU_CTRL)
  201 D1:E508 E6 03 -  -      and a,3
  202 D1:E50A 87 -  -  -      add a,a
  203 D1:E50B 87 -  -  -      add a,a
  204 D1:E50C 6F -  -  -      ld  L,a
  205 D1:E50D DD 2F F6 -      ld  (ix+PPU_NAMETABLE_PTR),hl   ;yeah. let's cache this so we don't lose it
  206 D1:E510 -  -  -  -      ;In-place setting of nametable address wrt X,Y
  207 D1:E510 -  -  -  -      ;%------YY YYYXXXXX
  208 D1:E510 ED 17 -  -      ld  de,(hl)
  209 D1:E512 79 -  -  -      ld  a,c
  210 D1:E513 07 -  -  -      rlca
  211 D1:E514 07 -  -  -      rlca
  212 D1:E515 07 -  -  -      rlca
  213 D1:E516 5F -  -  -      ld  e,a
  214 D1:E517 AA -  -  -      xor a,d
  215 D1:E518 E6 03 -  -      and a,%00000011
  216 D1:E51A AA -  -  -      xor a,d
  217 D1:E51B 7B -  -  -      ld  a,e
  218 D1:E51C A8 -  -  -      xor a,b
  219 D1:E51D E6 E0 -  -      and %11100000
  220 D1:E51F A8 -  -  -      xor a,b
  221 D1:E520 5F -  -  -      ld  e,a
  222 D1:E521 -  -  -  -      ;Fetch first attribute byte from address
  223 D1:E521 -  -  -  -      ;%------YY YYYXXXXX -> %------11 11YYYXXX
  224 D1:E521 D5 -  -  -      push de
  225 D1:E522 7A -  -  -          ld  a,d
  226 D1:E523 1F -  -  -          rra
  227 D1:E524 CB 3B -  -          srl e
  228 D1:E526 1F -  -  -          rra
  229 D1:E527 CB 3B -  -          srl e       ;YYYYYXXX
  230 D1:E529 CB C2 -  -          set 0,d
  231 D1:E52B CB CA -  -          set 1,d
  232 D1:E52D 7B -  -  -          ld  a,e
  233 D1:E52E 07 -  -  -          rlca
  234 D1:E52F 07 -  -  -          rlca
  235 D1:E530 F6 C0 -  -          or  a,%11000000
  236 D1:E532 AB -  -  -          xor a,e
  237 D1:E533 E6 F8 -  -          and a,%11111000
  238 D1:E535 AB -  -  -          xor a,e
  239 D1:E536 5F -  -  -          ld  e,a
  240 D1:E537 1A -  -  -          ld  a,(de)
  241 D1:E538 D1 -  -  -      pop de
  242 D1:E539 -  -  -  -      ;Selects attribute from A from B=Y, C=X in format %0000AA00
  243 D1:E539 -  -  -  -      ;Let's instead use DE %------yy yYyxxxXx y: e6, x: e1
  244 D1:E539 CB 73 -  -      bit 6,e
  245 D1:E53B 28 04 -  -      jr  z,+_
  246 D1:E53D 07 -  -  -      rlca    ;If not zero, shift upper nibble into lower nibble
  247 D1:E53E 07 -  -  -      rlca    ;for further selection.
  248 D1:E53F 07 -  -  -      rlca
  249 D1:E540 07 -  -  -      rlca
  250 D1:E541 CB 4B -  -  _:  bit 1,e
  251 D1:E543 20 02 -  -      jr  nz,+_   ;If not zero, upper 2 bits of lower nibble already in position
  252 D1:E545 07 -  -  -      rlca        ;Otherwise, move them into position
  253 D1:E546 07 -  -  -      rlca        
  254 D1:E547 E6 0C -  -  _:  and a,%00001100
  255 D1:E549 32 7B E5 D1     ld  (ppu_mainTileLoop_attribute_write),a
  256 D1:E54D -  -  -  -  
  257 D1:E54D DD 36 F9 1E     ld  (ix+PPU_VCOUNT),30
  258 D1:E551 FD 2A 28 34 
              D0 -  -  -      ld  iy,(curScreenBuf)
  259 D1:E556 ED 33 20 -      lea iy,iy+32
  260 D1:E559 -  -  -  -  ppu_verticalLoop:
  261 D1:E559 DD 36 FA 20     ld  (ix+PPU_HCOUNT),32
  262 D1:E55D -  -  -  -  ppu_horizontalLoop:
  263 D1:E55D 1A -  -  -      ld  a,(de)
  264 D1:E55E E5 -  -  -      push hl
  265 D1:E55F D5 -  -  -          push de
  266 D1:E560 2A 20 34 D0             ld  hl,(chr_rom_tiles)
  267 D1:E564 4F -  -  -              ld  c,a
  268 D1:E565 06 10 -  -              ld  b,16
  269 D1:E567 ED 4C -  -              mlt bc
  270 D1:E569 09 -  -  -              add hl,bc
  271 D1:E56A DD 36 FB 08             ld  (ix+PPU_TCOUNT),8
  272 D1:E56E ED 13 00 -              lea de,iy+0
  273 D1:E571 -  -  -  -  ppu_mainTileLoop:
  274 D1:E571 4E -  -  -              ld  c,(hl)
  275 D1:E572 23 -  -  -              inc hl
  276 D1:E573 46 -  -  -              ld  b,(hl)
  277 D1:E574 23 -  -  -              inc hl
  278 D1:E575 E5 -  -  -              push hl
  279 D1:E576 21 00 32 D0                 ld  hl,vram_palette
  280 D1:E57A -  -  -  -  ppu_mainTileLoop_attribute_write    .equ $+1
  281 D1:E57A 3E 00 -  -                  ld  a,0
  282 D1:E57C -  -  -  -                  ;Attrib to LSB of VRAM_PALETTE, shift CHR_ROM data to LSB to
  283 D1:E57C -  -  -  -                  ;form full address+offset. Copy from palette to buffer.
  284 D1:E57C 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;1/8 12b apiece
  285 D1:E588 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;2/8
  286 D1:E594 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;3/8
  287 D1:E5A0 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;4/8
  288 D1:E5AC 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;5/8
  289 D1:E5B8 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;6/8
  290 D1:E5C4 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;7/8
  291 D1:E5D0 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;8/8 96b tot
  292 D1:E5DC 21 38 01 00                 ld  hl,320-8
  293 D1:E5E0 19 -  -  -                  add hl,de
  294 D1:E5E1 EB -  -  -                  ex  de,hl
  295 D1:E5E2 E1 -  -  -              pop hl
  296 D1:E5E3 DD 35 FB -              dec (ix+PPU_TCOUNT)
  297 D1:E5E6 20 89 -  -              jr  nz,ppu_mainTileLoop
  298 D1:E5E8 -  -  -  -              ;start wrapping up the horizontal loop
  299 D1:E5E8 D1 -  -  -          pop de
  300 D1:E5E9 E1 -  -  -      pop hl
  301 D1:E5EA 7B -  -  -      ld  a,e
  302 D1:E5EB 13 -  -  -      inc de
  303 D1:E5EC AB -  -  -      xor a,e
  304 D1:E5ED CB 6F -  -      bit 5,a     ;A carry in X would result in a change in bit 5
  305 D1:E5EF 28 14 -  -      jr  z,+_    ;Which means there's no crossover if no sign change
  306 D1:E5F1 1B -  -  -      dec de      ;revert those changes in case they cascaded past E
  307 D1:E5F2 1C -  -  -      inc e
  308 D1:E5F3 E6 E0 -  -      and a,%11100000     ;The funny thing is that the XOR above...
  309 D1:E5F5 AB -  -  -      xor a,e             ;... is still valid for this masking technique.
  310 D1:E5F6 4F -  -  -      ld  c,a     ;And now let's squirrel this and...
  311 D1:E5F7 42 -  -  -      ld  b,d     ;...D for later merge magic
  312 D1:E5F8 7C -  -  -      ld  a,h
  313 D1:E5F9 EE 04 -  -      xor a,%00000100 ;flip to the next horizontal buffer...
  314 D1:E5FB 67 -  -  -      ld  h,a
  315 D1:E5FC ED 17 -  -      ld  de,(hl)
  316 D1:E5FE 59 -  -  -      ld  e,c
  317 D1:E5FF 78 -  -  -      ld  a,b
  318 D1:E600 AA -  -  -      xor d
  319 D1:E601 E6 03 -  -      and a,%00000011
  320 D1:E603 AA -  -  -      xor d
  321 D1:E604 57 -  -  -      ld  d,a         ;and map coords into a new nametable
  322 D1:E605 ED 33 08 -  _:  lea iy,iy+8     ;next position on the buffer.
  323 D1:E608 DD 35 FA -      dec (ix+PPU_HCOUNT)
  324 D1:E60B C2 5D E5 D1     jp  nz,ppu_horizontalLoop
  325 D1:E60F -  -  -  -      ;the X buffer *will* have changed at some point and rolled around
  326 D1:E60F -  -  -  -      ;so there's no need to deal with X. Still gotta do Y first...
  327 D1:E60F EB -  -  -      ex  de,hl
  328 D1:E610 7C -  -  -      ld  a,h
  329 D1:E611 01 20 00 00     ld  bc,%00100000
  330 D1:E615 09 -  -  -      add hl,bc   ;%-----^yy yYyxxxXx
  331 D1:E616 EB -  -  -      ex  de,hl
  332 D1:E617 4B -  -  -      ld  c,e     ;coordinate storage.
  333 D1:E618 42 -  -  -      ld  b,d
  334 D1:E619 AA -  -  -      xor a,d     ;detect sign change in bit 2
  335 D1:E61A CB 57 -  -      bit 2,a
  336 D1:E61C 28 04 -  -      jr  z,+_
  337 D1:E61E 7D -  -  -      ld  a,L
  338 D1:E61F EE 08 -  -      xor a,%00001000 ;flip to the next vertical buffer...
  339 D1:E621 6F -  -  -      ld  L,a
  340 D1:E622 7D -  -  -  _:  ld  a,L
  341 D1:E623 EE 04 -  -      xor a,%00000100 ;flip back the horizontal buffer that must've been flipped.
  342 D1:E625 6F -  -  -      ld  L,a
  343 D1:E626 ED 17 -  -      ld  de,(hl)
  344 D1:E628 59 -  -  -      ld  e,c
  345 D1:E629 78 -  -  -      ld  a,b
  346 D1:E62A AA -  -  -      xor d
  347 D1:E62B E6 03 -  -      and a,%00000011
  348 D1:E62D AA -  -  -      xor d
  349 D1:E62E 57 -  -  -      ld  d,a         ;and map coords into a new nametable
  350 D1:E62F 01 00 09 00     ld  bc,(320*7)+(320-256)
  351 D1:E633 FD 09 -  -      add iy,bc       ;move cursor pointer to the next row
  352 D1:E635 DD 35 F9 -      dec (ix+PPU_VCOUNT)
  353 D1:E638 C2 59 E5 D1     jp  nz,ppu_verticalLoop
  354 D1:E63C C9 -  -  -      ret
  355 D1:E63D -  -  -  -  
  356 D1:E63D -  -  -  -  ;TODO: Test changes to the PPU and link together something in the mapper
  357 D1:E63D -  -  -  -  ;to perform controls. Also. Those freakin' interrupts. DO THEM.
  358 D1:E63D -  -  -  -  ;Might also want to implement a drawlist of sorts since writes to the ports
  359 D1:E63D -  -  -  -  ;ought to be timestamped. That way, we'll be able to tell what the hell is
  360 D1:E63D -  -  -  -  ;being done mid-frame and then make adjustments to such things as
  361 D1:E63D -  -  -  -  ;BG rendering mid-draw, if necessary. Or be able to detect such attempts as
  362 D1:E63D -  -  -  -  ;I don't think I want to deal with that. Only deal with stuff that should
  363 D1:E63D -  -  -  -  ;be occurring within the VBlank period.
  364 D1:E63D -  -  -  -  
  365 D1:E63D -  -  -  -  
  366 D1:E63D -  -  -  -  
  367 D1:E63D -  -  -  -  
  368 D1:E63D -  -  -  -  
  369 D1:E63D -  -  -  -  
  370 D1:E63D -  -  -  -  
  371 D1:E63D -  -  -  -  
  372 D1:E63D -  -  -  -  
  373 D1:E63D -  -  -  -  
  374 D1:E63D -  -  -  -  
Listing for file "main.z80"
  830 D1:E63D -  -  -  -  .echo "Main program size: ",$-programStart
