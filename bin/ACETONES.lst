    1 00:0000 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "main.z80"
    2 00:0000 -  -  -  -  .org userMem-2
    3 D1:A87F EF 7B -  -  .db $EF, $7B
    4 D1:A881 -  -  -  -  
    5 D1:A881 -  -  -  -  ;SPASM help msg
    6 D1:A881 -  -  -  -  ;-E = Assemble eZ80 code
    7 D1:A881 -  -  -  -  ;-T = Generate code listing
    8 D1:A881 -  -  -  -  ;-C = Code counter mode
    9 D1:A881 -  -  -  -  ;-L = Symbol table mode
   10 D1:A881 -  -  -  -  ;-S = Stats mode
   11 D1:A881 -  -  -  -  ;-O = Don't write to output file
   12 D1:A881 -  -  -  -  ;-I [directory] = Add include directory
   13 D1:A881 -  -  -  -  ;-A = Labels are cAse-sensitive
   14 D1:A881 -  -  -  -  ;-D<name>[=value] = Create a define 'name' [with 'value']
   15 D1:A881 -  -  -  -  ;-N = Don't use colors for messages
   16 D1:A881 -  -  -  -  ;-V <Expression> = Pipe expression directly into assembly
   17 D1:A881 -  -  -  -  ;-H = Print this help message
   18 D1:A881 -  -  -  -  
   19 D1:A881 -  -  -  -  
   20 D1:A881 -  -  -  -  
   21 D1:A881 -  -  -  -  
   22 D1:A881 -  -  -  -  programStart:
   23 D1:A881 F3 -  -  -      di
   24 D1:A882 -  -  -  -      ;Continuous. Else it'd be possible for an NES ROM to tank the CPU
   25 D1:A882 -  -  -  -      ;performance by constantly polling the keyboard.
   26 D1:A882 21 00 00 F5     ld  hl,mpKeyMode
   27 D1:A886 36 03 -  -      ld  (hl),3      
   28 D1:A888 ED 73 FC 31 
              D0 -  -  -      ld  (save_spl),sp
   29 D1:A88D ED 6E -  -      ld  a,MB
   30 D1:A88F 32 FF 31 D0     ld  (save_mbase),a
   31 D1:A893 3E D0 -  -      ld  a,$D0
   32 D1:A895 ED 6D -  -      ld  MB,a
   33 D1:A897 CD 77 AF D1     call startGfx
   34 D1:A89B -  -  -  -      ;
   35 D1:A89B -  -  -  -      ; todo; write test 6502 program, map it into rom.
   36 D1:A89B -  -  -  -      ; map virtual screen device into ram too. 32x30 screen ascii display
   37 D1:A89B -  -  -  -      ; is probably looking nice right about now.
   38 D1:A89B -  -  -  -      ; Could probably map it into PPU space since we're not actually doing
   39 D1:A89B -  -  -  -      ; anything about that until long after we're done testing core integrity
   40 D1:A89B -  -  -  -      ; You'll probably want to create a mockup vector table then do some equate
   41 D1:A89B -  -  -  -      ; magic to offset it and map it to $FFXX such that the three vectors will
   42 D1:A89B -  -  -  -      ; magically line up with $FFFA-$FFFF. NMI, RES, and IRQ. In that order.
   43 D1:A89B -  -  -  -      ; The rest of the page won't need to matter. It could literally be the
   44 D1:A89B -  -  -  -      ; surrounding eZ80 data/code. Just... don't allow writes to it.
   45 D1:A89B -  -  -  -      ;
   46 D1:A89B -  -  -  -  
   47 D1:A89B 21 00 00 D4     ld  hl,screenBuf1
   48 D1:A89F 11 01 00 D4     ld  de,screenBuf1+1
   49 D1:A8A3 01 FF 57 02     ld  bc,(2*240*320)-1
   50 D1:A8A7 36 00 -  -      ld  (hl),$00
   51 D1:A8A9 ED B0 -  -      ldir
   52 D1:A8AB -  -  -  -  
   53 D1:A8AB -  -  -  -      ;Makes sure all non-ROM areas have a mapping
   54 D1:A8AB 21 00 33 D0     ld  hl,scrap_mapping
   55 D1:A8AF 01 01 80 00     ld  bc,$008001
   56 D1:A8B3 1E 00 -  -      ld  e,0
   57 D1:A8B5 CD 50 B6 D1     call i6502_map_pages
   58 D1:A8B9 -  -  -  -  
   59 D1:A8B9 -  -  -  -  
   60 D1:A8B9 -  -  -  -  
   61 D1:A8B9 -  -  -  -      ;load reset vectors
   62 D1:A8B9 21 DE A8 D1     ld  hl,testVectors
   63 D1:A8BD 01 01 01 00     ld  bc,$000101
   64 D1:A8C1 1E FF -  -      ld  e,$FF
   65 D1:A8C3 CD 50 B6 D1     call i6502_map_pages
   66 D1:A8C7 -  -  -  -      ;load program ROM to lowmem
   67 D1:A8C7 21 DE A9 D1     ld  hl,testCode
   68 D1:A8CB 01 08 20 00     ld  bc,$002008
   69 D1:A8CF 1E 80 -  -      ld  e,$80
   70 D1:A8D1 CD 50 B6 D1     call i6502_map_pages
   71 D1:A8D5 -  -  -  -      ;map nametable to writeable address space. Write routine to mirror this
   72 D1:A8D5 -  -  -  -      ;memory to screen.
   73 D1:A8D5 21 00 58 D0     ld  hl,NAMETABLE1
   74 D1:A8D9 01 04 20 00     ld  bc,$002004
   75 D1:A8DD 1E 40 -  -      ld  e,$40
   76 D1:A8DF CD 50 B6 D1     call i6502_map_pages
   77 D1:A8E3 -  -  -  -      ;Everything should be ready. Set up the debug environment and then
   78 D1:A8E3 -  -  -  -      ;start the emulation.
   79 D1:A8E3 -  -  -  -      ;jr $
   80 D1:A8E3 CD CA AF D1     call clearTextBuf
   81 D1:A8E7 3E 01 -  -      ld  a,1
   82 D1:A8E9 CD 17 B0 D1     call setLineStart
   83 D1:A8ED CD 20 B0 D1     call setCurLine
   84 D1:A8F1 21 37 AA D1     ld  hl,text001
   85 D1:A8F5 CD 42 B0 D1     call printString
   86 D1:A8F9 FD 21 A5 AA 
              D1 -  -  -      ld  iy,firstFileHeader
   87 D1:A8FE 01 00 00 00     ld  bc,0
   88 D1:A902 FD 4E FF -      ld  c,(iy-1)
   89 D1:A905 CD C5 AE D1     call vatTraverse
   90 D1:A909 DA C2 AA D1     jp  c,err_noContainersFound
   91 D1:A90D D5 -  -  -      push de
   92 D1:A90E 21 4E AA D1         ld  hl,text003
   93 D1:A912 CD 42 B0 D1         call printString
   94 D1:A916 DD 46 FA -          ld  b,(ix-6)
   95 D1:A919 ED 22 F9 -          lea hl,ix-7
   96 D1:A91C 7E -  -  -  _:      ld  a,(hl)
   97 D1:A91D 2B -  -  -          dec hl
   98 D1:A91E E5 -  -  -          push hl
   99 D1:A91F C5 -  -  -              push bc
  100 D1:A920 CD 58 B0 D1                 call PrintBigFont
  101 D1:A924 C1 -  -  -              pop bc
  102 D1:A925 E1 -  -  -          pop hl
  103 D1:A926 10 F4 -  -          djnz -_
  104 D1:A928 CD 2B B0 D1         call newLine
  105 D1:A92C D1 -  -  -      pop de
  106 D1:A92D CD DB AB D1     call loadROMFile
  107 D1:A931 -  -  -  -  
  108 D1:A931 -  -  -  -      ;REMOVE THE FOLLOWING BLOCK WHEN DONE TESTING NESTEST
  109 D1:A931 -  -  -  -      ;
  110 D1:A931 -  -  -  -      ;
  111 D1:A931 21 2E AA D1     ld  hl,timings_file
  112 D1:A935 CD 20 03 02     call _Mov9ToOP1
  113 D1:A939 CD 0C 05 02     call _ChkFindSym
  114 D1:A93D DA 9D A9 D1     jp  c,endCurrentRun
  115 D1:A941 CD 98 1F 02     call _ChkInRam
  116 D1:A945 EB -  -  -      ex  de,hl
  117 D1:A946 30 08 -  -      jr  nc,+_
  118 D1:A948 11 09 00 00     ld  de,9
  119 D1:A94C 19 -  -  -      add hl,de
  120 D1:A94D 5E -  -  -      ld  e,(hl)
  121 D1:A94E 19 -  -  -      add hl,de
  122 D1:A94F 23 -  -  -      inc hl
  123 D1:A950 5E -  -  -  _:  ld  e,(hl)
  124 D1:A951 23 -  -  -      inc hl
  125 D1:A952 56 -  -  -      ld  d,(hl)
  126 D1:A953 23 -  -  -      inc hl
  127 D1:A954 22 4A 34 D0     ld  (timings_base),hl
  128 D1:A958 -  -  -  -      ;
  129 D1:A958 -  -  -  -      ;
  130 D1:A958 -  -  -  -      ;
  131 D1:A958 -  -  -  -  
  132 D1:A958 -  -  -  -  
  133 D1:A958 21 5B AA D1     ld  hl,text004
  134 D1:A95C CD 42 B0 D1     call printString
  135 D1:A960 -  -  -  -  
  136 D1:A960 -  -  -  -      ;jr $
  137 D1:A960 -  -  -  -  #ifdef COREDEBUG
  138 D1:A960                 call dbg_resetScreen
  139 D1:A960             #endif
  140 D1:A960 DD 21 00 00 
              F2 -  -  -      ld  ix,$F20000
  141 D1:A965 DD 27 30 -      ld  hl,(ix+$30)
  142 D1:A968 CB 85 -  -      res 0,L ;turn off timer 0
  143 D1:A96A CB 8D -  -      res 1,L ;timer 0 uses CPU clock
  144 D1:A96C CB 95 -  -      res 2,L ;disables timer 0 interrupt generator
  145 D1:A96E CB CC -  -      set 1,H ;timer 0 counts upward
  146 D1:A970 DD 2F 30 -      ld  (ix+$30),hl
  147 D1:A973 -  -  -  -      
  148 D1:A973 AF -  -  -      xor a,a
  149 D1:A974 ED 62 -  -      sbc hl,hl
  150 D1:A976 DD 2F 00 -      ld  (ix+0),hl
  151 D1:A979 DD 77 03 -      ld  (ix+3),a
  152 D1:A97C -  -  -  -  
  153 D1:A97C CD 76 B4 D1     call int6502_init
  154 D1:A980 CD 37 B4 D1     call ppu_init
  155 D1:A984 CD 46 B5 D1     call i6502Init
  156 D1:A988 -  -  -  -  
  157 D1:A988 -  -  -  -  
  158 D1:A988 DD 21 00 00 
              F2 -  -  -      ld  ix,$F20000
  159 D1:A98D DD 7E 30 -      ld  a,(ix+$30)
  160 D1:A990 CB 87 -  -      res 0,a ;turn off timer 0
  161 D1:A992 CB CF -  -      set 1,a ;timer 0 uses 32768Hz clock
  162 D1:A994 CB 97 -  -      res 2,a ;disables timer 0 interrupt generator
  163 D1:A996 DD 77 30 -      ld  (ix+$30),a
  164 D1:A999 -  -  -  -      ;
  165 D1:A999 2A 00 00 F2     ld  hl,($F20000)
  166 D1:A99D -  -  -  -  
  167 D1:A99D -  -  -  -  endCurrentRun:
  168 D1:A99D CD 06 E1 D1     call dbg_prepNextLine
  169 D1:A9A1 CD 2B B0 D1     call newLine
  170 D1:A9A5 21 7D AA D1     ld  hl,text005
  171 D1:A9A9 CD 42 B0 D1     call printString
  172 D1:A9AD -  -  -  -  
  173 D1:A9AD -  -  -  -      ;call printTextBuf
  174 D1:A9AD CD 4E AF D1     call fastCopy
  175 D1:A9B1 00 -  -  -      nop
  176 D1:A9B2 CD 42 AF D1     call waituntilnewkeypress
  177 D1:A9B6 CD 3A AF D1     call waituntilkeyrelease
  178 D1:A9BA -  -  -  -  
  179 D1:A9BA -  -  -  -      ;
  180 D1:A9BA -  -  -  -      ;
  181 D1:A9BA -  -  -  -      ;
  182 D1:A9BA -  -  -  -  programExit:
  183 D1:A9BA CD 69 AF D1     call stopGfx
  184 D1:A9BE ED 7B FC 31 
              D0 -  -  -      ld  sp,(save_spl)
  185 D1:A9C3 3A FF 31 D0     ld  a,(save_mbase)
  186 D1:A9C7 ED 6D -  -      ld  MB,a
  187 D1:A9C9 FD 21 80 00 
              D0 -  -  -      ld  iy,flags
  188 D1:A9CE C9 -  -  -      ret
  189 D1:A9CF -  -  -  -  
  190 D1:A9CF -  -  -  -  
  191 D1:A9CF -  -  -  -  testFilename:
  192 D1:A9CF 15 4E 45 53 
              54 45 53 54 
              00 -  -  -  .db AppVarObj,"NESTEST",0
  193 D1:A9D8 -  -  -  -  
  194 D1:A9D8 -  -  -  -  
  195 D1:A9D8 -  -  -  -  ;NMI, RES, and IRQ. In that order.
  196 D1:A9D8 -  -  -  -  testVectors .equ $-(256-6)
  197 D1:A9D8 00 80 -  -  .dw $8000
  198 D1:A9DA 00 80 -  -  .dw $8000
  199 D1:A9DC 00 80 -  -  .dw $8000
  200 D1:A9DE -  -  -  -  testCode:
  201 D1:A9DE A9 00 AA A8 .db $A9,$00,$AA,$A8
  202 D1:A9E2 BD 14 80 -  .db $BD,$14,$80
  203 D1:A9E5 C9 00 -  -  .db $C9,$00
  204 D1:A9E7 F0 08 -  -  .db $F0,$08
  205 D1:A9E9 99 21 40 -  .db $99,$21,$40
  206 D1:A9EC E8 C8 -  -  .db $E8,$C8
  207 D1:A9EE -  -  -  -  ;.db $12
  208 D1:A9EE 4C 04 80 02 .db $4C,$04,$80,$02
  209 D1:A9F2 48 65 6C 6C 
              6F 2C 20 57 
              6F -  -  -  .db $48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F
  210 D1:A9FB 72 6C 64 21 
              00 -  -  -  .db $72,$6C,$64,$21,$00
  211 D1:AA00 -  -  -  -  
  212 D1:AA00 -  -  -  -  
  213 D1:AA00 A9 00 AA A8 
              BD 11 80 C9 
              00 F0 05 99 
              21 40 D0 -  .db $A9,$00,$AA,$A8,$BD,$11,$80,$C9,$00,$F0,$05,$99,$21,$40,$D0
  214 D1:AA0F F4 02 48 65 
              6C 6C 6F 2C 
              20 57 6F 72 
              6C 64 21 00 .db $F4,$02,$48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F,$72,$6C,$64,$21,$00
  215 D1:AA1F 02 -  -  -  .db $02     ;JAM. Emulator terminates on unsupported instructions or JAMs.
  216 D1:AA20 -  -  -  -  
  217 D1:AA20 -  -  -  -  helloWorld:
  218 D1:AA20 48 65 6C 6C 
              6F 2C 20 57 
              6F 72 6C 64 
              21 00 -  -  .db "Hello, World!",0
  219 D1:AA2E -  -  -  -  
  220 D1:AA2E -  -  -  -  timings_file:
  221 D1:AA2E 15 74 69 6D 
              69 6E 67 73 
              00 -  -  -  .db AppVarObj,"timings",0
  222 D1:AA37 -  -  -  -  
  223 D1:AA37 -  -  -  -  text001:
  224 D1:AA37 4C 6F 6F 6B 
              69 6E 67 20 
              75 70 20 6E 
              65 73 74 65 
              73 74 2E 2E 
              2E 0A 00 -  .db "Looking up nestest...\n",0
  225 D1:AA4E -  -  -  -  text003:
  226 D1:AA4E 46 69 6C 65 
              20 66 6F 75 
              6E 64 3A 20 
              00 -  -  -  .db "File found: ",0
  227 D1:AA5B -  -  -  -  text004:
  228 D1:AA5B 52 4F 4D 46 
              69 6C 65 20 
              6C 6F 61 64 
              65 64 20 61 
              6E 64 20 72 
              65 61 64 79 
              20 74 6F 20 
              72 75 6E 2E 
              0A 00 -  -  .db "ROMFile loaded and ready to run.\n",0
  229 D1:AA7D -  -  -  -  text005:
  230 D1:AA7D -  -  -  -  ;    0123456789012345678901234567890123456789
  231 D1:AA7D 43 50 55 20 
              45 78 65 63 
              75 74 69 6F 
              6E 20 48 61 
              6C 74 65 64 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 00 -  .db "CPU Execution Halted                  ",0
  232 D1:AAA4 -  -  -  -  text006:
  233 D1:AAA4 -  -  -  -  
  234 D1:AAA4 -  -  -  -  
  235 D1:AAA4 07 -  -  -  .db 7
  236 D1:AAA5 -  -  -  -  firstFileHeader:
  237 D1:AAA5 43 45 4E 52 
              4F 4D 00 -  .db "CENROM",0
  238 D1:AAAC -  -  -  -  
  239 D1:AAAC -  -  -  -  err_:
  240 D1:AAAC -  -  -  -  
  241 D1:AAAC -  -  -  -  err_err:
  242 D1:AAAC E1 -  -  -      pop hl
  243 D1:AAAD CD 42 B0 D1     call printString
  244 D1:AAB1 -  -  -  -  err_err_quit:
  245 D1:AAB1 CD 4E AF D1     call fastCopy
  246 D1:AAB5 00 -  -  -      nop
  247 D1:AAB6 CD 42 AF D1     call waituntilnewkeypress
  248 D1:AABA CD 3A AF D1     call waituntilkeyrelease
  249 D1:AABE C3 BA A9 D1     jp programExit
  250 D1:AAC2 -  -  -  -  
  251 D1:AAC2 -  -  -  -  err_noContainersFound:
  252 D1:AAC2 CD AC AA D1     call err_err
  253 D1:AAC6 54 72 61 76 
              65 72 73 65 
              20 66 6F 75 
              6E 64 20 6E 
              6F 20 63 61 
              6E 64 69 64 
              61 74 65 73 
              2E 0A 00 -  .db "Traverse found no candidates.\n",0
  254 D1:AAE5 -  -  -  -  
  255 D1:AAE5 -  -  -  -  err_missingFiles:
  256 D1:AAE5 F5 -  -  -      push af
  257 D1:AAE6 21 F7 AA D1         ld  hl,err_missingFiles_str
  258 D1:AAEA CD 42 B0 D1         call printString
  259 D1:AAEE F1 -  -  -      pop af
  260 D1:AAEF CD 88 B0 D1     call printSmallNumPair
  261 D1:AAF3 C3 B1 AA D1     jp err_err_quit
  262 D1:AAF7 -  -  -  -  err_missingFiles_str:
  263 D1:AAF7 4E 75 6D 62 
              65 72 20 6F 
              66 20 66 69 
              6C 65 73 20 
              6D 69 73 73 
              69 6E 67 3A 
              20 00 -  -  .db "Number of files missing: ",0
  264 D1:AB11 -  -  -  -  
  265 D1:AB11 -  -  -  -  err_tooManyFiles:
  266 D1:AB11 CD AC AA D1     call err_err
  267 D1:AB15 54 6F 6F 20 
              6D 61 6E 79 
              20 66 69 6C 
              65 73 20 66 
              6F 75 6E 64 
              2E 00 -  -  .db "Too many files found.",0
  268 D1:AB2B -  -  -  -  
  269 D1:AB2B -  -  -  -  err_PRGROMTooLarge:
  270 D1:AB2B CD AC AA D1     call err_err
  271 D1:AB2F 50 52 47 5F 
              52 4F 4D 20 
              74 6F 6F 20 
              6C 61 72 67 
              65 2E 00 -  .db "PRG_ROM too large.",0
  272 D1:AB42 -  -  -  -  err_CHRROMTooLarge:
  273 D1:AB42 CD AC AA D1     call err_err
  274 D1:AB46 43 48 52 5F 
              52 4F 4D 20 
              74 6F 6F 20 
              6C 61 72 67 
              65 2E 00 -  .db "CHR_ROM too large.",0
  275 D1:AB59 -  -  -  -  
  276 D1:AB59 -  -  -  -  err_missingROMDetected:
  277 D1:AB59 CD AC AA D1     call err_err
  278 D1:AB5D 50 52 47 2B 
              43 48 52 20 
              3E 20 41 63 
              74 75 61 6C 
              20 66 69 6C 
              65 20 64 61 
              74 61 2E 00 .db "PRG+CHR > Actual file data.",0
  279 D1:AB79 -  -  -  -  
  280 D1:AB79 -  -  -  -  err_ROMHeaderDamaged:
  281 D1:AB79 CD AC AA D1     call err_err
  282 D1:AB7D 49 4E 45 53 
              20 52 4F 4D 
              20 68 65 61 
              64 65 72 20 
              64 61 6D 61 
              67 65 64 2E 
              00 -  -  -  .db "INES ROM header damaged.",0
  283 D1:AB96 -  -  -  -  
  284 D1:AB96 -  -  -  -  err_MapperOutOfRange:
  285 D1:AB96 CD AC AA D1     call err_err
  286 D1:AB9A 4D 61 70 70 
              65 72 20 73 
              70 65 63 69 
              66 69 65 64 
              20 6F 75 74 
              20 6F 66 20 
              72 61 6E 67 
              65 2E 00 -  .db "Mapper specified out of range.",0
  287 D1:ABB9 -  -  -  -  
  288 D1:ABB9 -  -  -  -  err_CHRROMNotFound:
  289 D1:ABB9 CD AC AA D1     call err_err
  290 D1:ABBD 43 48 52 5F 
              52 4F 4D 20 
              6E 6F 74 20 
              66 6F 75 6E 
              64 20 69 6E 
              73 69 64 65 
              20 66 69 6C 
              65 00 -  -  .db "CHR_ROM not found inside file",0
  291 D1:ABDB -  -  -  -  
  292 D1:ABDB -  -  -  -  
  293 D1:ABDB -  -  -  -  ;Input: DE = Address of first file after the container header signature
  294 D1:ABDB -  -  -  -  ;Outputs: ROM vectors recorded and ready to map
  295 D1:ABDB -  -  -  -  ;Destroys: All registers.
  296 D1:ABDB -  -  -  -  loadROMFile:
  297 D1:ABDB EB -  -  -      ex  de,hl
  298 D1:ABDC AF -  -  -      xor a,a
  299 D1:ABDD 32 33 34 D0     ld  (missing_files),a
  300 D1:ABE1 BE -  -  -  _:  cp  (hl)    ;
  301 D1:ABE2 23 -  -  -      inc hl      ;
  302 D1:ABE3 20 FC -  -      jr  nz,-_   ;skips past zero-terminated string containing full ROM name
  303 D1:ABE5 22 30 34 D0     ld  (basefile_sig),hl
  304 D1:ABE9 01 10 00 00     ld  bc,SIZEOF_INTEGRITY_HASH
  305 D1:ABED 09 -  -  -      add hl,bc
  306 D1:ABEE 7E -  -  -      ld  a,(hl)
  307 D1:ABEF FE 01 -  -      cp  a,MAXNUMFILES
  308 D1:ABF1 D2 11 AB D1     jp  nc,err_tooManyFiles
  309 D1:ABF5 32 2F 34 D0     ld  (inputNumFiles),a
  310 D1:ABF9 47 -  -  -      ld  b,a
  311 D1:ABFA -  -  -  -  ;    ld  c,SIZEOF_INTEGRITY_HASH     ;c already set to this value from earlier.
  312 D1:ABFA ED 4C -  -      mlt bc
  313 D1:ABFC 23 -  -  -      inc hl
  314 D1:ABFD E5 -  -  -      push hl
  315 D1:ABFE 09 -  -  -          add hl,bc
  316 D1:ABFF FD 21 4D 34 
              D0 -  -  -          ld  iy,FILETABLE
  317 D1:AC04 4E -  -  -          ld  c,(hl)
  318 D1:AC05 23 -  -  -          inc hl
  319 D1:AC06 46 -  -  -          ld  b,(hl)
  320 D1:AC07 23 -  -  -          inc hl
  321 D1:AC08 52 FD 0F 00         ld.s (iy+FILE_SIZE_OFFSET),bc
  322 D1:AC0C FD 2F 02 -          ld  (iy+FILE_ADR_OFFSET),hl
  323 D1:AC0F E1 -  -  -      pop hl
  324 D1:AC10 3C -  -  -      inc a
  325 D1:AC11 3D -  -  -      dec a
  326 D1:AC12 28 47 -  -      jr  z,loadROMFile_singleFileLoad
  327 D1:AC14 -  -  -  -      ;If more than one file, fill FILETABLE.
  328 D1:AC14 -  -  -  -      ;NOTE: For now, this machinery is disabled. Only a single file is allowed.
  329 D1:AC14 ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  330 D1:AC17 47 -  -  -      ld  b,a
  331 D1:AC18 -  -  -  -  loadROMFile_multiFileLoadLoop:
  332 D1:AC18 C5 -  -  -      push bc
  333 D1:AC19 FD 2F 05 -          ld  (iy+FILE_SIG_ADR_OFFSET),hl
  334 D1:AC1C 01 10 00 00         ld  bc,16
  335 D1:AC20 11 B5 AE D1         ld  de,loadROMFile_tempSigHash
  336 D1:AC24 ED B0 -  -          ldir
  337 D1:AC26 E5 -  -  -          push hl
  338 D1:AC27 FD E5 -  -              push iy
  339 D1:AC29 01 17 00 00                 ld  bc,23
  340 D1:AC2D FD 21 AE AE 
              D1 -  -  -                  ld  iy,loadROMFile_tempSig
  341 D1:AC32 CD C5 AE D1                 call vatTraverse    ;returns DE @ datasection size if found
  342 D1:AC36 30 05 -  -                  jr  nc,+_
  343 D1:AC38 21 33 34 D0                 ld  hl,missing_files
  344 D1:AC3C 34 -  -  -                  inc (hl)
  345 D1:AC3D FD E1 -  -  _:          pop iy
  346 D1:AC3F EB -  -  -              ex  de,hl
  347 D1:AC40 5E -  -  -              ld  e,(hl)
  348 D1:AC41 23 -  -  -              inc hl
  349 D1:AC42 56 -  -  -              ld  d,(hl)
  350 D1:AC43 23 -  -  -              inc hl
  351 D1:AC44 52 FD 1F 00             ld.s (iy+FILE_SIZE_OFFSET),de
  352 D1:AC48 FD 2F 02 -              ld  (iy+FILE_ADR_OFFSET),hl
  353 D1:AC4B E1 -  -  -          pop hl
  354 D1:AC4C C1 -  -  -      pop bc
  355 D1:AC4D ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  356 D1:AC50 10 C6 -  -      djnz loadROMFile_multiFileLoadLoop
  357 D1:AC52 3A 33 34 D0     ld  a,(missing_files)
  358 D1:AC56 B7 -  -  -      or  a,a
  359 D1:AC57 C2 E5 AA D1     jp  nz,err_missingFiles
  360 D1:AC5B -  -  -  -  loadROMFile_singleFileLoad:
  361 D1:AC5B -  -  -  -      ;Compute size of ROM by summing filesizes, less INES header
  362 D1:AC5B 3A 2F 34 D0     ld  a,(inputNumFiles)
  363 D1:AC5F 3C -  -  -      inc a
  364 D1:AC60 47 -  -  -      ld  b,a
  365 D1:AC61 21 00 00 00     ld  hl,0
  366 D1:AC65 DD 21 4D 34 
              D0 -  -  -      ld  ix,FILETABLE
  367 D1:AC6A 52 DD 17 00 _:  ld.s de,(ix+FILE_SIZE_OFFSET)
  368 D1:AC6E 19 -  -  -      add hl,de
  369 D1:AC6F ED 32 08 -      lea ix,ix+FILETABLE_STRIDE
  370 D1:AC72 10 F6 -  -      djnz -_
  371 D1:AC74 01 F0 FF FF     ld  bc,-16
  372 D1:AC78 09 -  -  -      add hl,bc   ;subtract INES header
  373 D1:AC79 22 34 34 D0     ld  (total_rom_size),hl
  374 D1:AC7D -  -  -  -      ;Verify that the file actually contains an INES header.
  375 D1:AC7D -  -  -  -      ;TODO: Do this at an earlier stage. Such as file selection.
  376 D1:AC7D DD 2A 4F 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  377 D1:AC82 DD 27 00 -      ld  hl,(ix+0)
  378 D1:AC85 11 4E 45 53     ld  de,$53454E         ;4E 45 53 == "NES"
  379 D1:AC89 B7 -  -  -      or  a,a
  380 D1:AC8A ED 52 -  -      sbc hl,de   ;Note: add does not affect zero flag. Can't test this via -DE
  381 D1:AC8C C2 79 AB D1 _:  jp  nz,err_ROMHeaderDamaged
  382 D1:AC90 DD 7E 03 -      ld  a,(ix+3)
  383 D1:AC93 FE 1A -  -      cp  a,$1A
  384 D1:AC95 20 F5 -  -      jr  nz,-_   ;19
  385 D1:AC97 -  -  -  -      ;Compute ROM size by reading INES header. This should be equ or lt above.
  386 D1:AC97 -  -  -  -      ;Note: The below line is optimized from...
  387 D1:AC97 DD 2A 4F 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  388 D1:AC9C -  -  -  -      ;... these lines. But the intent might not be perfectly clear. We'll keep
  389 D1:AC9C -  -  -  -      ;these here just in case there's ever a question about it.
  390 D1:AC9C -  -  -  -  ;    ld  ix,FILETABLE
  391 D1:AC9C -  -  -  -  ;    ld  ix,(ix+FILE_ADR_OFFSET)
  392 D1:AC9C DD 6E 04 -      ld  L,(ix+4)    ;PRG ROM count, low
  393 D1:AC9F DD 5E 05 -      ld  e,(ix+5)    ;CHR ROM count, low
  394 D1:ACA2 26 00 -  -      ld  h,0
  395 D1:ACA4 54 -  -  -      ld  d,h
  396 D1:ACA5 DD 7E 07 -      ld  a,(ix+7)    ;Check for INES2 bits
  397 D1:ACA8 E6 0C -  -      and a,%00001100
  398 D1:ACAA FE 08 -  -      cp  a,%00001000
  399 D1:ACAC 20 1B -  -      jr  nz,+_
  400 D1:ACAE DD 7E 09 -      ld  a,(ix+9)
  401 D1:ACB1 47 -  -  -      ld  b,a
  402 D1:ACB2 E6 0F -  -      and a,$0F
  403 D1:ACB4 FE 02 -  -      cp  a,MAXPRGROM_HINIB+1
  404 D1:ACB6 D2 2B AB D1     jp  nc,err_PRGROMTooLarge
  405 D1:ACBA 67 -  -  -      ld  h,a
  406 D1:ACBB 78 -  -  -      ld  a,b
  407 D1:ACBC E6 F0 -  -      and a,$F0
  408 D1:ACBE 07 -  -  -      rlca
  409 D1:ACBF 07 -  -  -      rlca
  410 D1:ACC0 07 -  -  -      rlca
  411 D1:ACC1 07 -  -  -      rlca
  412 D1:ACC2 FE 04 -  -      cp  a,MAXCHRROM_HINIB+1
  413 D1:ACC4 D2 42 AB D1     jp  nc,err_CHRROMTooLarge
  414 D1:ACC8 57 -  -  -      ld  d,a
  415 D1:ACC9 AF -  -  -  _:  xor a,a
  416 D1:ACCA 32 37 34 D0     ld  (prg_rom_size),a
  417 D1:ACCE 32 3A 34 D0     ld  (chr_rom_size),a
  418 D1:ACD2 29 -  -  -      add hl,hl   ;x2
  419 D1:ACD3 29 -  -  -      add hl,hl   ;x4
  420 D1:ACD4 29 -  -  -      add hl,hl   ;x8
  421 D1:ACD5 29 -  -  -      add hl,hl   ;x16
  422 D1:ACD6 29 -  -  -      add hl,hl   ;x32
  423 D1:ACD7 29 -  -  -      add hl,hl   ;x64
  424 D1:ACD8 52 22 38 34 
              D0 -  -  -      ld.s (prg_rom_size+1),hl    ;x64x256
  425 D1:ACDD EB -  -  -      ex  de,hl
  426 D1:ACDE 29 -  -  -      add hl,hl   ;x2
  427 D1:ACDF 29 -  -  -      add hl,hl   ;x4
  428 D1:ACE0 29 -  -  -      add hl,hl   ;x8
  429 D1:ACE1 29 -  -  -      add hl,hl   ;x16
  430 D1:ACE2 29 -  -  -      add hl,hl   ;x32
  431 D1:ACE3 52 22 3B 34 
              D0 -  -  -      ld.s (chr_rom_size+1),hl    ;x32x256
  432 D1:ACE8 2A 3A 34 D0     ld  hl,(chr_rom_size)
  433 D1:ACEC ED 5B 37 34 
              D0 -  -  -      ld  de,(prg_rom_size)
  434 D1:ACF1 19 -  -  -      add hl,de
  435 D1:ACF2 ED 5B 34 34 
              D0 -  -  -      ld  de,(total_rom_size)
  436 D1:ACF7 B7 -  -  -      or  a,a
  437 D1:ACF8 ED 52 -  -      sbc hl,de   ;declared-actual. declared must be equal to or smaller.
  438 D1:ACFA 28 04 -  -      jr  z,+_
  439 D1:ACFC D2 59 AB D1     jp  nc,err_missingROMDetected
  440 D1:AD00 -  -  -  -  _:  ;Find trainer, PRG, and CHR base addresses
  441 D1:AD00 ED 22 10 -      lea hl,ix+16
  442 D1:AD03 22 43 34 D0     ld  (trainer_base),hl   ;whether it exists or not.
  443 D1:AD07 11 00 00 00     ld  de,0
  444 D1:AD0B DD CB 06 56     bit 2,(ix+6)
  445 D1:AD0F 28 04 -  -      jr  z,+_
  446 D1:AD11 11 00 02 00     ld  de,512
  447 D1:AD15 19 -  -  -  _:  add hl,de
  448 D1:AD16 22 43 34 D0     ld  (prg_rom_base),hl
  449 D1:AD1A FD 21 4D 34 
              D0 -  -  -      ld  iy,FILETABLE
  450 D1:AD1F 52 FD 27 00     ld.s hl,(iy+FILE_SIZE_OFFSET)
  451 D1:AD23 B7 -  -  -      or  a,a
  452 D1:AD24 ED 52 -  -      sbc hl,de   ;less possible trainer
  453 D1:AD26 11 10 00 00     ld  de,16
  454 D1:AD2A ED 52 -  -      sbc hl,de   ;less iNES header. Remaining is now size of current file.
  455 D1:AD2C EB -  -  -      ex  de,hl   ;curfilesize is now in DE
  456 D1:AD2D 2A 37 34 D0     ld  hl,(prg_rom_size)   ;keep subtracting filesize from this until carry.
  457 D1:AD31 B7 -  -  -      or  a,a
  458 D1:AD32 ED 52 -  -      sbc hl,de   ;if carry, prg_rom end is inside this file. Undo: HL is offset.
  459 D1:AD34 0E 00 -  -      ld  c,0     ;0th file current
  460 D1:AD36 38 1D -  -      jr  c,loadROMFile_locatedCHRROM
  461 D1:AD38 3A 2F 34 D0     ld  a,(inputNumFiles)
  462 D1:AD3C B7 -  -  -      or  a,a
  463 D1:AD3D 28 12 -  -      jr  z,loadROMFile_noCHRROMFound
  464 D1:AD3F 47 -  -  -      ld  b,a
  465 D1:AD40 ED 33 08 -  _:  lea iy,iy+FILETABLE_STRIDE
  466 D1:AD43 52 ED 5B 00 
              00 00 -  -      ld.s de,(FILE_SIZE_OFFSET)
  467 D1:AD49 0C -  -  -      inc c
  468 D1:AD4A B7 -  -  -      or  a,a
  469 D1:AD4B ED 52 -  -      sbc hl,de   ;
  470 D1:AD4D 38 06 -  -      jr  c,loadROMFile_locatedCHRROM
  471 D1:AD4F 10 EF -  -      djnz -_
  472 D1:AD51 -  -  -  -  loadROMFile_noCHRROMFound:
  473 D1:AD51 C3 B9 AB D1     jp  err_CHRROMNotFound
  474 D1:AD55 -  -  -  -  loadROMFile_locatedCHRROM:
  475 D1:AD55 19 -  -  -      add hl,de       ;Undid subtract. HL is now offset in current file
  476 D1:AD56 FD 17 02 -      ld  de,(iy+FILE_ADR_OFFSET) ;so get address inside that file.
  477 D1:AD59 19 -  -  -      add hl,de
  478 D1:AD5A 79 -  -  -      ld  a,c
  479 D1:AD5B 22 46 34 D0     ld  (chr_rom_base),hl
  480 D1:AD5F 32 49 34 D0     ld  (chr_rom_base_file),a
  481 D1:AD63 -  -  -  -      ;Detect mapper and run its initializer
  482 D1:AD63 DD 7E 06 -      ld  a,(ix+6)
  483 D1:AD66 DD 46 07 -      ld  b,(ix+7)
  484 D1:AD69 07 -  -  -      rlca
  485 D1:AD6A 07 -  -  -      rlca
  486 D1:AD6B 07 -  -  -      rlca
  487 D1:AD6C 07 -  -  -      rlca
  488 D1:AD6D A8 -  -  -      xor a,b
  489 D1:AD6E E6 0F -  -      and a,$0F
  490 D1:AD70 A8 -  -  -      xor a,b
  491 D1:AD71 52 EB -  -      ex.s de,hl  ;clears HLU,DEU
  492 D1:AD73 5F -  -  -      ld  e,a
  493 D1:AD74 21 3D 34 D0     ld  hl,submapper
  494 D1:AD78 36 00 -  -      ld  (hl),0
  495 D1:AD7A 78 -  -  -      ld  a,b
  496 D1:AD7B E6 0C -  -      and a,%00001100
  497 D1:AD7D FE 08 -  -      cp  a,%00001000
  498 D1:AD7F 3E 00 -  -      ld  a,0
  499 D1:AD81 20 0E -  -      jr  nz,+_
  500 D1:AD83 DD 46 08 -      ld  b,(ix+8)
  501 D1:AD86 78 -  -  -      ld  a,b
  502 D1:AD87 07 -  -  -      rlca
  503 D1:AD88 07 -  -  -      rlca
  504 D1:AD89 07 -  -  -      rlca
  505 D1:AD8A 07 -  -  -      rlca
  506 D1:AD8B E6 0F -  -      and a,$0F
  507 D1:AD8D 77 -  -  -      ld  (hl),a
  508 D1:AD8E 78 -  -  -      ld  a,b
  509 D1:AD8F E6 0F -  -      and a,$0F
  510 D1:AD91 57 -  -  -  _:  ld  d,a
  511 D1:AD92 ED 53 3F 34 
              D0 -  -  -      ld  (mapper_id),de
  512 D1:AD97 21 FF FF FF     ld  hl,-NUMBER_OF_MAPPERS
  513 D1:AD9B 19 -  -  -      add hl,de
  514 D1:AD9C DA 96 AB D1     jp  c,err_MapperOutOfRange
  515 D1:ADA0 ED 62 -  -      sbc hl,hl
  516 D1:ADA2 19 -  -  -      add hl,de               ;hl=de. both are mapper IDs
  517 D1:ADA3 2E 09 -  -      ld  L,MAPPER_STRIDE
  518 D1:ADA5 55 -  -  -      ld  d,L
  519 D1:ADA6 ED 6C -  -      mlt hl                  ;high byte multiply
  520 D1:ADA8 65 -  -  -      ld  h,L
  521 D1:ADA9 2E 00 -  -      ld  L,0
  522 D1:ADAB ED 5C -  -      mlt de                  ;low byte multiply
  523 D1:ADAD 19 -  -  -      add hl,de               ;This is the best 16bit * 8bit I know to do.
  524 D1:ADAE 11 BA AD D1     ld  de,mapper_table
  525 D1:ADB2 19 -  -  -      add hl,de
  526 D1:ADB3 22 40 34 D0     ld  (mapper_adr_base),hl
  527 D1:ADB7 ED 27 -  -      ld  hl,(hl)
  528 D1:ADB9 E9 -  -  -      jp  (hl)
  529 D1:ADBA -  -  -  -  
  530 D1:ADBA -  -  -  -  mapper_table:   ;entries 9 wide
  531 D1:ADBA C3 AD D1 -  .dl mapper0_init
  532 D1:ADBD 36 AE D1 -  .dl mapper0_read
  533 D1:ADC0 59 AE D1 -  .dl mapper0_write
  534 D1:ADC3 -  -  -  -  
  535 D1:ADC3 -  -  -  -  mapper0_init:
  536 D1:ADC3 -  -  -  -      ;map trainer, if exist
  537 D1:ADC3 DD CB 06 56     bit 2,(ix+6)
  538 D1:ADC7 28 0D -  -      jr  z,+_
  539 D1:ADC9 2A 43 34 D0     ld  hl,(trainer_base)
  540 D1:ADCD 1E 70 -  -      ld  e,$70
  541 D1:ADCF 0E 02 -  -      ld  c,2
  542 D1:ADD1 41 -  -  -      ld  b,c
  543 D1:ADD2 CD 50 B6 D1     call i6502_map_pages
  544 D1:ADD6 2A 37 34 D0 _:  ld  hl,(prg_rom_size)
  545 D1:ADDA 11 FF BF FF     ld  de,-(16384+1)
  546 D1:ADDE 19 -  -  -      add hl,de   ;carry if more than 1 16KB segment
  547 D1:ADDF 2A 43 34 D0     ld  hl,(prg_rom_base)
  548 D1:ADE3 -  -  -  -      ;jr  $
  549 D1:ADE3 06 80 -  -      ld  b,$80
  550 D1:ADE5 58 -  -  -      ld  e,b
  551 D1:ADE6 0E 40 -  -      ld  c,$40
  552 D1:ADE8 30 02 -  -      jr  nc,+_
  553 D1:ADEA CB 21 -  -      sla c
  554 D1:ADEC CD 50 B6 D1 _:  call i6502_map_pages
  555 D1:ADF0 -  -  -  -      ;map in nametable mirroring
  556 D1:ADF0 21 00 58 D0     ld  hl,NAMETABLE1
  557 D1:ADF4 11 00 5C D0     ld  de,NAMETABLE2
  558 D1:ADF8 22 00 34 D0     ld  (nametable00),hl
  559 D1:ADFC ED 53 0C 34 
              D0 -  -  -      ld  (nametable11),de
  560 D1:AE01 DD CB 06 46     bit 0,(ix+6)    ;nametable arrangement. Mapper 0 has no alternates.
  561 D1:AE05 28 01 -  -      jr  z,+_
  562 D1:AE07 EB -  -  -      ex  de,hl
  563 D1:AE08 22 04 34 D0 _:  ld  (nametable01),hl
  564 D1:AE0C ED 53 08 34 
              D0 -  -  -      ld  (nametable10),de
  565 D1:AE11 -  -  -  -      ;Fill out nametable attrib pointers
  566 D1:AE11 21 00 34 D0     ld  hl,nametable00
  567 D1:AE15 01 C0 03 00     ld  bc,960
  568 D1:AE19 3E 04 -  -      ld  a,4
  569 D1:AE1B ED 17 -  -  _:  ld  de,(hl)
  570 D1:AE1D CB E5 -  -      set 4,L
  571 D1:AE1F EB -  -  -      ex  de,hl
  572 D1:AE20 09 -  -  -      add hl,bc
  573 D1:AE21 EB -  -  -      ex  de,hl
  574 D1:AE22 ED 1F -  -      ld  (hl),de
  575 D1:AE24 CB A5 -  -      res 4,L
  576 D1:AE26 23 -  -  -      inc hl
  577 D1:AE27 23 -  -  -      inc hl
  578 D1:AE28 23 -  -  -      inc hl
  579 D1:AE29 23 -  -  -      inc hl
  580 D1:AE2A 3D -  -  -      dec a
  581 D1:AE2B 20 EE -  -      jr  nz,-_
  582 D1:AE2D -  -  -  -      ;initilize chr_rom current bank address.
  583 D1:AE2D -  -  -  -      ;This mapper does not allow any additional banks, but if it does, this
  584 D1:AE2D -  -  -  -      ;value must be recalculated from chr_rom_base
  585 D1:AE2D 2A 46 34 D0     ld  hl,(chr_rom_base)
  586 D1:AE31 22 2C 34 D0     ld  (chr_rom_curbank),hl
  587 D1:AE35 C9 -  -  -      ret
  588 D1:AE36 -  -  -  -  
  589 D1:AE36 -  -  -  -  
  590 D1:AE36 -  -  -  -  mapper0_read:
  591 D1:AE36 7A -  -  -      ld  a,d
  592 D1:AE37 87 -  -  -      add a,a
  593 D1:AE38 30 08 -  -      jr  nc,+_
  594 D1:AE3A 7E -  -  -      ld  a,(hl)  ;is $8000 or above
  595 D1:AE3B C9 -  -  -      ret
  596 D1:AE3C FE 40 -  -      cp  a,$20*2
  597 D1:AE3E 38 02 -  -      jr  c,+_
  598 D1:AE40 7E -  -  -      ld  a,(hl)  ;is below $2000
  599 D1:AE41 C9 -  -  -      ret
  600 D1:AE42 87 -  -  -  _:  add a,a
  601 D1:AE43 30 12 -  -      jr  nc,mapper0_ppu_read     ;wasn't $4000 or higher.
  602 D1:AE45 28 02 -  -      jr  z,mapper0_apu_read      ;high byte was exactly $40
  603 D1:AE47 7E -  -  -      ld  a,(hl)
  604 D1:AE48 C9 -  -  -      ret
  605 D1:AE49 -  -  -  -  mapper0_apu_read:
  606 D1:AE49 7B -  -  -      ld  a,e
  607 D1:AE4A FE 16 -  -      cp  a,$16
  608 D1:AE4C 20 07 -  -      jr  nz,+_
  609 D1:AE4E AF -  -  -      xor a,a
  610 D1:AE4F DD CB FE 3E     srl (ix+APU_KEYPAD)
  611 D1:AE53 8F -  -  -      adc a,a                 ;TODO: Open bus behavior on bits 5-7
  612 D1:AE54 C9 -  -  -      ret
  613 D1:AE55 7E -  -  -  _:  ld  a,(hl)  ;hope that the dummy map page is good enough to not crash.
  614 D1:AE56 C9 -  -  -      ret
  615 D1:AE57 -  -  -  -  mapper0_ppu_read:
  616 D1:AE57 -  -  -  -      ;TODO: PPU SUPPORT
  617 D1:AE57 7E -  -  -      ld  a,(hl)
  618 D1:AE58 C9 -  -  -      ret
  619 D1:AE59 -  -  -  -  
  620 D1:AE59 -  -  -  -  
  621 D1:AE59 -  -  -  -  
  622 D1:AE59 -  -  -  -  mapper0_write:
  623 D1:AE59 7A -  -  -      ld  a,d
  624 D1:AE5A FE 20 -  -      cp  a,$20
  625 D1:AE5C 30 02 -  -      jr  nc,+_
  626 D1:AE5E 70 -  -  -      ld  (hl),b
  627 D1:AE5F C9 -  -  -      ret
  628 D1:AE60 FE 40 -  -  _:  cp  a,$40
  629 D1:AE62 38 48 -  -      jr  c,mapper0_ppu_write
  630 D1:AE64 28 04 -  -      jr  z,mapper0_apu_write
  631 D1:AE66 87 -  -  -      add a,a
  632 D1:AE67 D8 -  -  -      ret c       ;don't write anything to above $8000
  633 D1:AE68 70 -  -  -      ld  (hl),b  ;but allow it in $4100-$7FFF because it might be RAM.
  634 D1:AE69 C9 -  -  -      ret
  635 D1:AE6A -  -  -  -  mapper0_apu_write:
  636 D1:AE6A 7B -  -  -      ld  a,e
  637 D1:AE6B FE 16 -  -      cp  a,$16
  638 D1:AE6D 20 3B -  -      jr  nz,+_
  639 D1:AE6F DD 7E FF -      ld  a,(ix+APU_KEYLATCH)
  640 D1:AE72 A8 -  -  -      xor a,b     ;Bit 0 is set if we're trying to change controller poll state.
  641 D1:AE73 0F -  -  -      rrca        ;And this is how we're going to get it.
  642 D1:AE74 D0 -  -  -      ret nc      ;Only support NES standard controller.
  643 D1:AE75 CB 40 -  -      bit 0,b     ;So... what are we changing it to?
  644 D1:AE77 DD 70 FF -      ld  (ix+APU_KEYLATCH),b
  645 D1:AE7A 21 00 00 F5     ld  hl,mpKeyMode
  646 D1:AE7E 28 06 -  -      jr  z,mapper0_apu_stop_keyboard
  647 D1:AE80 7E -  -  -      ld  a,(hl)
  648 D1:AE81 FE 03 -  -      cp  a,3
  649 D1:AE83 C8 -  -  -      ret z       ;don't do anything to the keyboard if running continuous.
  650 D1:AE84 77 -  -  -      ld  (hl),a  ;else set to continuous and keep going.
  651 D1:AE85 C9 -  -  -      ret
  652 D1:AE86 -  -  -  -  mapper0_apu_stop_keyboard:
  653 D1:AE86 2E 12 -  -      ld  L,$12   ;76543210 : del mode 2nd y= wind zoom trace graph
  654 D1:AE88 7E -  -  -      ld  a,(hl)
  655 D1:AE89 2E 1E -  -      ld  L,$1E   ;----3210 : up right left down
  656 D1:AE8B 4E -  -  -      ld  c,(hl)
  657 D1:AE8C A9 -  -  -      xor a,c
  658 D1:AE8D E6 F0 -  -      and a,%11110000
  659 D1:AE8F A9 -  -  -      xor a,c     ;keymapping has changed. We need to further alter it.
  660 D1:AE90 -  -  -  -      ;[DE MO 2N Y= UP RI LE DO] maps to [SE, B, A, ST, UP, RI, LE, DO]
  661 D1:AE90 -  -  -  -      ;The above must be rearranged to become:
  662 D1:AE90 -  -  -  -      ;            [RI, LE, DO, UP, ST, SE, B , A ]
  663 D1:AE90 -  -  -  -      ;as compared to
  664 D1:AE90 -  -  -  -      ;            [SE, B , A , ST, UP, RI, LE, DO]
  665 D1:AE90 07 -  -  -      rlca        ;[B , A , ST, UP, RI, LE, DO, SE]
  666 D1:AE91 4F -  -  -      ld  c,a     ;b4  : UP is in correct position.
  667 D1:AE92 07 -  -  -      rlca        ;[A , ST, UP, RI, LE, DO, SE, B ]
  668 D1:AE93 07 -  -  -      rlca        ;[ST, UP, RI, LE, DO, SE, B , A ]
  669 D1:AE94 47 -  -  -      ld  b,a     ;b0-2:SE, B , and A are in the correct position
  670 D1:AE95 07 -  -  -      rlca        ;[UP, RI, LE, DO, SE, B , A , ST]
  671 D1:AE96 07 -  -  -      rlca        ;[RI, LE, DO, SE, B , A , ST, UP]
  672 D1:AE97 57 -  -  -      ld  d,a     ;b5-7: RI LE DO in correct position.
  673 D1:AE98 07 -  -  -      rlca        ;[LE, DO, SE, B , A , ST, UP, RI]
  674 D1:AE99 07 -  -  -      rlca        ;b3: ST is in the correct position.
  675 D1:AE9A A9 -  -  -      xor a,c     ;
  676 D1:AE9B E6 08 -  -      and a,%00001000 ;keep A3, merge others
  677 D1:AE9D A9 -  -  -      xor a,c     ;Has: A3. Merge-in contains b4
  678 D1:AE9E A8 -  -  -      xor a,b     ;
  679 D1:AE9F E6 18 -  -      and a,%00011000 ;keep A3-4
  680 D1:AEA1 A8 -  -  -      xor a,b     ;Merge-in contains b0-2
  681 D1:AEA2 AA -  -  -      xor a,d     ;
  682 D1:AEA3 E6 1F -  -      and a,%00011111 ;keep A0-4
  683 D1:AEA5 AA -  -  -      xor a,d     ;Merge-in contains b5-7. Is complete.
  684 D1:AEA6 DD 77 FE -      ld  (ix+APU_KEYPAD),a
  685 D1:AEA9 C9 -  -  -      ret
  686 D1:AEAA -  -  -  -  _:  ;not even going to try to emulate the second controller.
  687 D1:AEAA 70 -  -  -      ld  (hl),b
  688 D1:AEAB C9 -  -  -      ret
  689 D1:AEAC -  -  -  -  mapper0_ppu_write:
  690 D1:AEAC 70 -  -  -      ld  (hl),b
  691 D1:AEAD C9 -  -  -      ret
  692 D1:AEAE -  -  -  -  
  693 D1:AEAE -  -  -  -  
  694 D1:AEAE -  -  -  -  
  695 D1:AEAE -  -  -  -  
  696 D1:AEAE -  -  -  -  
  697 D1:AEAE -  -  -  -  
  698 D1:AEAE -  -  -  -  loadROMFile_tempSig:    ;total 23 bytes
  699 D1:AEAE 43 45 4E 52 
              4F 32 00 -  .db "CENRO2",0
  700 D1:AEB5 -  -  -  -  loadROMFile_tempSigHash:
  701 D1:AEB5 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;16 bytes for hash
  702 D1:AEC5 -  -  -  -  
  703 D1:AEC5 -  -  -  -  
  704 D1:AEC5 -  -  -  -  ;Input: IY = locationOfSignature. 
  705 D1:AEC5 -  -  -  -  ;       BC=size of signature (long load to clear BCU), still limited to 255.
  706 D1:AEC5 -  -  -  -  ;Output: carry=1: Variable not found.
  707 D1:AEC5 -  -  -  -  ;Output: carry=0: DE=address of variable data start after the signature
  708 D1:AEC5 -  -  -  -  ;        IX=location of current variable's VAT location.
  709 D1:AEC5 -  -  -  -  ;Destroys: All registers not in use.
  710 D1:AEC5 -  -  -  -  ;NOTES: This routine is capable of resuming a search that has ended.
  711 D1:AEC5 -  -  -  -  
  712 D1:AEC5 -  -  -  -  ;To continue searching:
  713 D1:AEC5 -  -  -  -  ;call vatTraverse_continue with the following inputs:
  714 D1:AEC5 -  -  -  -  ;   IX preserved from a non-carry return of vatTraverse.
  715 D1:AEC5 -  -  -  -  ;   BC = same as input for vatTraverse. vatTraverse does not destroy this reg.
  716 D1:AEC5 -  -  -  -  ;   WARNING: DO NOT KEEP SEARCHING AFTER CALL RETURNS CARRY. START A NEW SEARCH.
  717 D1:AEC5 -  -  -  -  vatTraverse:
  718 D1:AEC5 -  -  -  -      ;progPtr = progvat start; ptemp = progvatend
  719 D1:AEC5 DD 2A 9D 25 
              D0 -  -  -      ld  ix,(progPtr)
  720 D1:AECA -  -  -  -  vatTraverse_loop:
  721 D1:AECA 2A 9A 25 D0     ld  hl,(pTemp)
  722 D1:AECE ED 12 00 -      lea de,ix+0
  723 D1:AED1 B7 -  -  -      or  a,a
  724 D1:AED2 ED 52 -  -      sbc hl,de   ;HL<DE while in pVAT, else carry set.
  725 D1:AED4 3F -  -  -      ccf
  726 D1:AED5 D8 -  -  -      ret c
  727 D1:AED6 1A -  -  -      ld  a,(de)
  728 D1:AED7 E6 1F -  -      and a,$1F
  729 D1:AED9 FE 15 -  -      cp  a,AppVarObj
  730 D1:AEDB 20 34 -  -      jr  nz,vatTraverse_skip
  731 D1:AEDD DD 17 F9 -      ld  de,(ix-7)   ;puts "page" byte in DEU
  732 D1:AEE0 DD 5E FD -      ld  e,(ix-3)
  733 D1:AEE3 DD 56 FC -      ld  d,(ix-4)
  734 D1:AEE6 CD 98 1F 02     call _ChkInRam
  735 D1:AEEA EB -  -  -      ex  de,hl
  736 D1:AEEB 30 08 -  -      jr  nc,+_
  737 D1:AEED 11 09 00 00     ld  de,9
  738 D1:AEF1 19 -  -  -      add hl,de
  739 D1:AEF2 5E -  -  -      ld  e,(hl)
  740 D1:AEF3 19 -  -  -      add hl,de
  741 D1:AEF4 23 -  -  -      inc hl
  742 D1:AEF5 5E -  -  -  _:  ld  e,(hl)
  743 D1:AEF6 23 -  -  -      inc hl
  744 D1:AEF7 56 -  -  -      ld  d,(hl)
  745 D1:AEF8 23 -  -  -      inc hl
  746 D1:AEF9 EB -  -  -      ex  de,hl
  747 D1:AEFA B7 -  -  -      or  a,a
  748 D1:AEFB ED 42 -  -      sbc hl,bc   ;varsize-entrysize. If carry, entry cannot possibly be in var.
  749 D1:AEFD 38 12 -  -      jr  c,vatTraverse_skip
  750 D1:AEFF ED 23 00 -      lea hl,iy+0
  751 D1:AF02 C5 -  -  -      push bc
  752 D1:AF03 1A -  -  -  _:      ld  a,(de)
  753 D1:AF04 13 -  -  -          inc de
  754 D1:AF05 ED A1 -  -          cpi
  755 D1:AF07 20 07 -  -          jr  nz,vatTraverse_sigNoMatch
  756 D1:AF09 EA 03 AF D1         jp  pe,-_
  757 D1:AF0D C1 -  -  -      pop bc
  758 D1:AF0E B7 -  -  -      or  a,a
  759 D1:AF0F C9 -  -  -      ret         ;NC. DE = past the signature.
  760 D1:AF10 -  -  -  -  vatTraverse_sigNoMatch:
  761 D1:AF10 C1 -  -  -      pop bc
  762 D1:AF11 -  -  -  -  vatTraverse_continue:
  763 D1:AF11 -  -  -  -  vatTraverse_skip:
  764 D1:AF11 3E 07 -  -      ld  a,7
  765 D1:AF13 11 FF FF FF     ld  de,-1
  766 D1:AF17 DD 86 FA -      add a,(ix-6)
  767 D1:AF1A ED 44 -  -      neg
  768 D1:AF1C 5F -  -  -      ld  e,a
  769 D1:AF1D DD 19 -  -      add ix,de   ;because "sbc ix,de" isn't a thing. Boo.
  770 D1:AF1F 18 A9 -  -      jr  vatTraverse_loop
  771 D1:AF21 -  -  -  -  
  772 D1:AF21 -  -  -  -  ;Copied from my Falldown2 project. I didn't want to have to
  773 D1:AF21 -  -  -  -  ;find yet another hardware reference for something I already did.
  774 D1:AF21 -  -  -  -  ;But I'll have to do it again anyway because this isn't exactly
  775 D1:AF21 -  -  -  -  ;what we're looking for. Here, we output the same sort of
  776 D1:AF21 -  -  -  -  ;game keys that I've used basically all my programming life.
  777 D1:AF21 -  -  -  -  ;Anyhoo. We'll be using the following:
  778 D1:AF21 -  -  -  -  ;kbitDown	equ 00h
  779 D1:AF21 -  -  -  -  ;kbitLeft	equ 01h
  780 D1:AF21 -  -  -  -  ;kbitRight	equ 02h
  781 D1:AF21 -  -  -  -  ;kbitUp		equ 03h
  782 D1:AF21 -  -  -  -  ;kbitYequ equ 04h
  783 D1:AF21 -  -  -  -  ;kbit2nd		equ 05h
  784 D1:AF21 -  -  -  -  ;kbitMode	equ 06h
  785 D1:AF21 -  -  -  -  ;kbitDel		equ 07h
  786 D1:AF21 -  -  -  -  ;You can find the other defines approximately where I found the stuff above.
  787 D1:AF21 -  -  -  -  
  788 D1:AF21 -  -  -  -  getkbd_adl:
  789 D1:AF21 DD 21 00 00 
              F5 -  -  -  	ld  ix,mpKeyMode
  790 D1:AF26 ED 22 00 -  	lea hl,ix+0
  791 D1:AF29 36 02 -  -  	ld  (hl),keyModeScanOnce
  792 D1:AF2B AF -  -  -  	xor a
  793 D1:AF2C BE -  -  -  _:  cp  (hl)
  794 D1:AF2D 20 FD -  -  	jr  nz,-_
  795 D1:AF2F DD 7E 12 -  	ld  a,(ix+kbdG1-mpKeyRange)
  796 D1:AF32 DD 6E 1E -  	ld  l,(ix+kbdG7-mpKeyRange)
  797 D1:AF35 AD -  -  -  	xor L
  798 D1:AF36 E6 F0 -  -  	and 11110000b	;mask out lower bits to let me shove dpad bits in
  799 D1:AF38 AD -  -  -  	xor L
  800 D1:AF39 C9 -  -  -  	ret
  801 D1:AF3A -  -  -  -  
  802 D1:AF3A -  -  -  -  waituntilkeyrelease:
  803 D1:AF3A CD 21 AF D1     call getkbd_adl
  804 D1:AF3E B7 -  -  -      or  a,a
  805 D1:AF3F 20 F9 -  -      jr  nz,waituntilkeyrelease
  806 D1:AF41 C9 -  -  -  	ret
  807 D1:AF42 -  -  -  -  
  808 D1:AF42 -  -  -  -  waituntilnewkeypress:
  809 D1:AF42 CD 3A AF D1     call waituntilkeyrelease
  810 D1:AF46 CD 21 AF D1 _:  call getkbd_adl
  811 D1:AF4A B7 -  -  -  	or  a,a
  812 D1:AF4B 28 F9 -  -  	jr  z,-_
  813 D1:AF4D C9 -  -  -      ret
  814 D1:AF4E -  -  -  -  
  815 D1:AF4E -  -  -  -  #include "lcd.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    1 D1:AF4E -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 D1:AF4E -  -  -  -  ;TI-84 Plus CE Include File
    2 D1:AF4E -  -  -  -  
    3 D1:AF4E -  -  -  -  ;Various Parts Contributed by
    4 D1:AF4E -  -  -  -  ;- BrandonW
    5 D1:AF4E -  -  -  -  ;- calc84
    6 D1:AF4E -  -  -  -  ;- MateoConLechuga
    7 D1:AF4E -  -  -  -  ;- Runer112
    8 D1:AF4E -  -  -  -  ;- tr1p1ea
    9 D1:AF4E -  -  -  -  ;- Kerm Martian
   10 D1:AF4E -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    2 D1:AF4E -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
    5 D1:AF4E -  -  -  -  ;
    6 D1:AF4E -  -  -  -  ;
    7 D1:AF4E -  -  -  -  ;
    8 D1:AF4E -  -  -  -  
    9 D1:AF4E -  -  -  -  ;Undefine this to speed up core process by losing debug state
   10 D1:AF4E -  -  -  -  ;#define COREDEBUG
   11 D1:AF4E -  -  -  -  
   12 D1:AF4E -  -  -  -  DEBUG_PRINT_START_CYCLE .equ 0
   13 D1:AF4E -  -  -  -  DEBUG_STEP_START_CYCLE  .equ 30000 ;26485
   14 D1:AF4E -  -  -  -  
   15 D1:AF4E -  -  -  -  
   16 D1:AF4E -  -  -  -  
   17 D1:AF4E -  -  -  -  FONTFGCOLOR .EQU $FF
   18 D1:AF4E -  -  -  -  FONTBGCOLOR .EQU $00
   19 D1:AF4E -  -  -  -  
   20 D1:AF4E -  -  -  -  screenBuf1      .equ vRam
   21 D1:AF4E -  -  -  -  screenBuf2      .equ vRam+(320*240)
   22 D1:AF4E -  -  -  -  ;DO NOT MOVE THESE.
   23 D1:AF4E -  -  -  -  xPos                .equ $D031F6
   24 D1:AF4E -  -  -  -  yPos                .equ $D031F7
   25 D1:AF4E -  -  -  -  slopPos             .equ $D031F8        ;extra byte here
   26 D1:AF4E -  -  -  -  debugram            .equ $D031F9        ;FA and FB occupied too.
   27 D1:AF4E -  -  -  -  save_spl            .equ $D031FC        ;FD and FE occupied too.
   28 D1:AF4E -  -  -  -  save_mbase          .equ $D031FF        ;
   29 D1:AF4E -  -  -  -  vram_palette        .equ $D03200        ;64 bytes of color. It looks like itself
   30 D1:AF4E -  -  -  -  core_memory_ix      .equ $D03280        ;IX range -128 to -64 already in use.
   31 D1:AF4E -  -  -  -  scrap_mapping       .equ $D03300        ;256 bytes. maps to nowhere important.
   32 D1:AF4E -  -  -  -  saferam1            .equ $D03400        ;1024 bytes available. Define later.
   33 D1:AF4E -  -  -  -  main_ram            .equ $D03800        ;$0800 bytes of main system memory
   34 D1:AF4E -  -  -  -  
   35 D1:AF4E -  -  -  -  ZEROPAGE            .equ main_ram+(0*256)
   36 D1:AF4E -  -  -  -  STACKBASE           .equ main_ram+(1*256)
   37 D1:AF4E -  -  -  -  
   38 D1:AF4E -  -  -  -  BASETABLE           .equ $D04000        ;variable size. 256*BASETABLE_STRIDE
   39 D1:AF4E -  -  -  -  BASETABLE_STRIDE    .equ 12
   40 D1:AF4E -  -  -  -  PAGETABLE_OFFSET    .equ 0
   41 D1:AF4E -  -  -  -  PAGETABLE           .equ BASETABLE+PAGETABLE_OFFSET
   42 D1:AF4E -  -  -  -  JUMPTABLE_OFFSET    .equ 4
   43 D1:AF4E -  -  -  -  JUMPTABLE           .equ BASETABLE+JUMPTABLE_OFFSET
   44 D1:AF4E -  -  -  -  USETABLE_OFFSET     .equ 8
   45 D1:AF4E -  -  -  -  USETABLE            .equ BASETABLE+USETABLE_OFFSET
   46 D1:AF4E -  -  -  -  
   47 D1:AF4E -  -  -  -  NAMETABLE1          .equ BASETABLE+(512*BASETABLE_STRIDE)
   48 D1:AF4E -  -  -  -  NAMETABLE2          .equ NAMETABLE1 + 1024
   49 D1:AF4E -  -  -  -  
   50 D1:AF4E -  -  -  -  ;
   51 D1:AF4E -  -  -  -  ;saferam1 1024 bytes storage
   52 D1:AF4E -  -  -  -  ;
   53 D1:AF4E -  -  -  -  nametable00         .equ saferam1           ;4b Do not move these vars
   54 D1:AF4E -  -  -  -  nametable01         .equ nametable00+4      ;4b
   55 D1:AF4E -  -  -  -  nametable10         .equ nametable01+4      ;4b
   56 D1:AF4E -  -  -  -  nametable11         .equ nametable10+4      ;4b
   57 D1:AF4E -  -  -  -  nametable00_attrib  .equ nametable11+4      ;4b
   58 D1:AF4E -  -  -  -  nametable01_attrib  .equ nametable00_attrib+4   ;4b
   59 D1:AF4E -  -  -  -  nametable10_attrib  .equ nametable01_attrib+4   ;4b
   60 D1:AF4E -  -  -  -  nametable11_attrib  .equ nametable10_attrib+4   ;4b
   61 D1:AF4E -  -  -  -  chr_rom_tiles       .equ nametable11_attrib+4   ;4b
   62 D1:AF4E -  -  -  -  chr_rom_sprites     .equ chr_rom_tiles+4    ;4b
   63 D1:AF4E -  -  -  -  curScreenBuf        .equ chr_rom_sprites+4  ;4b
   64 D1:AF4E -  -  -  -  linestart           .equ curScreenBuf+3     ;1b
   65 D1:AF4E -  -  -  -  chr_rom_curbank     .equ linestart+1        ;3b Base used for PPU stuff.
   66 D1:AF4E -  -  -  -  inputNumFiles       .equ chr_rom_curbank+3  ;1b
   67 D1:AF4E -  -  -  -  basefile_sig        .equ inputNumFiles+1    ;3b pointer to 16b hash
   68 D1:AF4E -  -  -  -  missing_files       .equ basefile_sig+3     ;1b
   69 D1:AF4E -  -  -  -  total_rom_size      .equ missing_files+1    ;3b
   70 D1:AF4E -  -  -  -  prg_rom_size        .equ total_rom_size+3   ;3b
   71 D1:AF4E -  -  -  -  chr_rom_size        .equ prg_rom_size+3     ;3b
   72 D1:AF4E -  -  -  -  submapper           .equ chr_rom_size+3     ;1b. iNES2 thing. Not often used.
   73 D1:AF4E -  -  -  -  ines_flag_6         .equ submapper+1        ;1b. Flags that a mapper may need.
   74 D1:AF4E -  -  -  -  mapper_id           .equ ines_flag_6+1      ;3b. Convenience load for 12 bits
   75 D1:AF4E -  -  -  -  mapper_adr_base     .equ mapper_id+1        ;3b. Used to load mapper
   76 D1:AF4E -  -  -  -  trainer_base        .equ mapper_adr_base+3  ;3b. If exist, starts here
   77 D1:AF4E -  -  -  -  prg_rom_base        .equ mapper_adr_base+3  ;3b. Adjusted in case of trainer.
   78 D1:AF4E -  -  -  -  chr_rom_base        .equ prg_rom_base+3     ;3b. Located somewhere.
   79 D1:AF4E -  -  -  -  chr_rom_base_file   .equ chr_rom_base+3     ;1b. Nonzero if not in first file.
   80 D1:AF4E -  -  -  -  timings_base        .equ chr_rom_base_file+1    ;3b. Current pointer to timings
   81 D1:AF4E -  -  -  -  
   82 D1:AF4E -  -  -  -  SIZEOF_INTEGRITY_HASH    .equ 16
   83 D1:AF4E -  -  -  -  MAXPRGROM_HINIB     .equ 1
   84 D1:AF4E -  -  -  -  MAXCHRROM_HINIB     .equ 3
   85 D1:AF4E -  -  -  -  NUMBER_OF_MAPPERS   .equ 1
   86 D1:AF4E -  -  -  -  MAPPER_STRIDE       .equ 9
   87 D1:AF4E -  -  -  -  
   88 D1:AF4E -  -  -  -  MAXNUMFILES         .equ 1                  ;set to 32 later. that's like 1.5MB
   89 D1:AF4E -  -  -  -  FILETABLE_STRIDE    .equ 8
   90 D1:AF4E -  -  -  -  FILETABLE           .equ timings_base+3   ;(MAXNUMFILES*FILETABLE_STRIDE)b
   91 D1:AF4E -  -  -  -  FILE_SIZE_OFFSET    .equ 0
   92 D1:AF4E -  -  -  -  FILE_ADR_OFFSET     .equ 2
   93 D1:AF4E -  -  -  -  FILE_SIG_ADR_OFFSET .equ 5
   94 D1:AF4E -  -  -  -  
   95 D1:AF4E -  -  -  -  int_table_len       .equ FILETABLE+((MAXNUMFILES+1)*FILETABLE_STRIDE)
   96 D1:AF4E -  -  -  -  INT_TABLE           .equ int_table_len+1
   97 D1:AF4E -  -  -  -  INT_TABLE_MAXLEN    .equ 8
   98 D1:AF4E -  -  -  -  INT_TABLE_STRIDE    .equ 6
   99 D1:AF4E -  -  -  -  INT_ADDR_OFFSET     .equ 0
  100 D1:AF4E -  -  -  -  INT_CYCLE_OFFSET    .equ 3
  101 D1:AF4E -  -  -  -  
  102 D1:AF4E -  -  -  -  
  103 D1:AF4E -  -  -  -  
  104 D1:AF4E -  -  -  -  ;
  105 D1:AF4E -  -  -  -  ;
  106 D1:AF4E -  -  -  -  #define PPU_SUBCYCLE -19    ;0, 1, or 2.
  107 D1:AF4E -  -  -  -  #define PPU_OAMADDRESS -18  ;1B POINTER WITHIN OAM
  108 D1:AF4E -  -  -  -  #define PPU_ADDRESS -17     ;I/O PTR FOR PPU ADDRESS SPACE $0000-$3FFF.
  109 D1:AF4E -  -  -  -  #define PPU_W -15           ;INTERNAL W REGISTER FOR HIGH/LOW BYTE PORT WRITES
  110 D1:AF4E -  -  -  -  #define PPU_FRAMECOUNT -14  ;USED FOR EVEN/ODD
  111 D1:AF4E -  -  -  -  #define PPU_MASK -13        ;$2001 PPUMASK
  112 D1:AF4E -  -  -  -  #define PPU_STATUS -12      ;$2002 PPUSTATUS
  113 D1:AF4E -  -  -  -  #define PPU_NAMETABLE_PTR -11
  114 D1:AF4E -  -  -  -  #define PPU_VCOUNT -8
  115 D1:AF4E -  -  -  -  #define PPU_HCOUNT -7
  116 D1:AF4E -  -  -  -  #define PPU_TCOUNT -6
  117 D1:AF4E -  -  -  -  #define PPU_CTRL -5     ;I guess an alternate name for this???
  118 D1:AF4E -  -  -  -  #define PPU_CONFIG -5   ;6502 write at $2000.
  119 D1:AF4E -  -  -  -  #define PPU_XSCROLL -4
  120 D1:AF4E -  -  -  -  #define PPU_YSCROLL -3
  121 D1:AF4E -  -  -  -  #define APU_KEYPAD -2   ;First to last: A,B,SE,ST,UP,DO,LE,RI. 01234567.
  122 D1:AF4E -  -  -  -  #define APU_KEYLATCH -1
  123 D1:AF4E -  -  -  -  ;core memory
  124 D1:AF4E -  -  -  -  #define REGA 0
  125 D1:AF4E -  -  -  -  #define REGX 1
  126 D1:AF4E -  -  -  -  #define REGY 2
  127 D1:AF4E -  -  -  -  #define REGSP 3
  128 D1:AF4E -  -  -  -  #define REGSR 4
  129 D1:AF4E -  -  -  -  #define REGPC 5
  130 D1:AF4E -  -  -  -  #define CYCLES_REMAIN 8
  131 D1:AF4E -  -  -  -  #define CYCLES_CURRENT 11
  132 D1:AF4E -  -  -  -  #define CURRENT_OPCODES 14
  133 D1:AF4E -  -  -  -  #define CORE_STACK_BASE 17
  134 D1:AF4E -  -  -  -  #define CORE_ERROR_LEVEL 20
  135 D1:AF4E -  -  -  -  #define SCRAP_COUNTER 21
  136 D1:AF4E -  -  -  -  #define PORT_WRITE_TIMESTAMP 24
  137 D1:AF4E -  -  -  -  #define TEMP_MEMORY 27
  138 D1:AF4E -  -  -  -  #define NMI_TRIGGERED 30 
  139 D1:AF4E -  -  -  -  ;flag IDs
  140 D1:AF4E -  -  -  -  #define SF_NEG 7
  141 D1:AF4E -  -  -  -  #define SF_OVER 6 
  142 D1:AF4E -  -  -  -  #define SF_RESERVED 5 
  143 D1:AF4E -  -  -  -  #define SF_BRK 4
  144 D1:AF4E -  -  -  -  #define SF_DEC 3
  145 D1:AF4E -  -  -  -  #define SF_INT 2
  146 D1:AF4E -  -  -  -  #define SF_ZERO 1
  147 D1:AF4E -  -  -  -  #define SF_CARRY 0
  148 D1:AF4E -  -  -  -  
  149 D1:AF4E -  -  -  -  #macro ADDCYC(X)
  150 D1:AF4E                 #if (x < 1)
  151 D1:AF4E                     nop
  152 D1:AF4E                 #elif (X = 1)
  153 D1:AF4E                     inc iy
  154 D1:AF4E                 #else
  155 D1:AF4E                     lea iy,iy+X
  156 D1:AF4E                 #endif
  157 D1:AF4E             #endmacro
  158 D1:AF4E -  -  -  -  
  159 D1:AF4E -  -  -  -  ;
  160 D1:AF4E -  -  -  -  ;
  161 D1:AF4E -  -  -  -  ;
  162 D1:AF4E -  -  -  -  #endif
  163 D1:AF4E -  -  -  -  .list
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    3 D1:AF4E -  -  -  -  
    4 D1:AF4E -  -  -  -  ;Function list:
    5 D1:AF4E -  -  -  -  ; fastCopy - Swaps drawing buffer to display what is currently written there.
    6 D1:AF4E -  -  -  -  ; startGfx - Configures LCD to run in graphx mode. UNSAFE TO RUN MORE THAN ONCE
    7 D1:AF4E -  -  -  -  ; stopGfx - Restores LCD configuration to TI-OS default.
    8 D1:AF4E -  -  -  -  ; configureScreen - Swaps screen configuration betwen current and stored.
    9 D1:AF4E -  -  -  -  ; setDefaultPalette - Sets default (XLIBC) color palette.
   10 D1:AF4E -  -  -  -  ; clearTextBuf - no inputs. Sets text buffer to all spaces.
   11 D1:AF4E -  -  -  -  ; printTextBuf - no inputs. Mirrors buffer to screen.
   12 D1:AF4E -  -  -  -  ; setLineStart - A=xpos. Set xPos and linestart
   13 D1:AF4E -  -  -  -  ; setCurLine - A=ypos. Set yPos.
   14 D1:AF4E -  -  -  -  ; newLine - no inputs. sets linestart = xPos, increments yPos
   15 D1:AF4E -  -  -  -  ; newPage - no inputs. sets linestart = xPos, yPos = 0
   16 D1:AF4E -  -  -  -  ; printString - HL=address to string. destroys all.
   17 D1:AF4E -  -  -  -  ; printBigFont - A=ASCII char to print at xPos,yPos. Advances xPos by 1.
   18 D1:AF4E -  -  -  -  ; printSmallNumPair - A=0-255 to print at xPos,Ypos. Advances xPos by 1.
   19 D1:AF4E -  -  -  -  ; calculateScreenPtr - Converts xPos,yPos into HL= screen buffer address.
   20 D1:AF4E -  -  -  -  ; calculateScreenPtrDE - Converts E=xPos,D=yPos into HL= screen buffer address.
   21 D1:AF4E -  -  -  -  ;
   22 D1:AF4E -  -  -  -  ;
   23 D1:AF4E -  -  -  -  ;
   24 D1:AF4E -  -  -  -  ;
   25 D1:AF4E -  -  -  -  ;
   26 D1:AF4E -  -  -  -  ;
   27 D1:AF4E -  -  -  -  ;
   28 D1:AF4E -  -  -  -  
   29 D1:AF4E -  -  -  -  
   30 D1:AF4E -  -  -  -  
   31 D1:AF4E -  -  -  -  
   32 D1:AF4E -  -  -  -  ;-----------------------------------------------------------------------------
   33 D1:AF4E -  -  -  -  ;Screen hardware interface stuff
   34 D1:AF4E -  -  -  -  
   35 D1:AF4E -  -  -  -  ;It ought to be called "bufSwap" but I just can't. I won't.
   36 D1:AF4E -  -  -  -  fastCopy:
   37 D1:AF4E 11 00 00 D4     ld  de,screenBuf1
   38 D1:AF52 2A 10 00 E3     ld  hl,(mpLcdBase)
   39 D1:AF56 22 28 34 D0     ld  (curScreenBuf),hl
   40 D1:AF5A B7 -  -  -      or  a,a
   41 D1:AF5B ED 52 -  -      sbc hl,de
   42 D1:AF5D EB -  -  -      ex  de,hl
   43 D1:AF5E 20 04 -  -      jr  nz,+_
   44 D1:AF60 21 00 2C D5     ld  hl,screenBuf2
   45 D1:AF64 22 10 00 E3 _:  ld  (mpLcdBase),hl
   46 D1:AF68 C9 -  -  -      ret
   47 D1:AF69 -  -  -  -  
   48 D1:AF69 -  -  -  -  stopGfx:
   49 D1:AF69 CD 74 03 00     call _boot_ClearVRAM
   50 D1:AF6D 11 2D 09 00     ld  de,lcdNormalMode
   51 D1:AF71 01 00 00 D4     ld  bc,screenBuf1
   52 D1:AF75 18 0C -  -      jr  configureScreen
   53 D1:AF77 -  -  -  -  
   54 D1:AF77 -  -  -  -  startGfx:
   55 D1:AF77 CD 74 03 00     call _boot_ClearVRAM
   56 D1:AF7B 11 27 39 01     ld  de,lcdWatermark+lcdIntFront+lcdPwr+lcdBgr+lcdBpp8
   57 D1:AF7F 01 00 00 D4     ld  bc,screenBuf1
   58 D1:AF83 -  -  -  -  configureScreen:
   59 D1:AF83 21 10 00 E3     ld  hl,mpLcdBase
   60 D1:AF87 ED 0F -  -      ld  (hl),bc
   61 D1:AF89 2E 18 -  -      ld  L,lcdCtrl
   62 D1:AF8B ED 1F -  -      ld  (hl),de
   63 D1:AF8D 2E 01 -  -      ld  L,lcdTiming0 + 1
   64 D1:AF8F 01 08 00 00     ld  bc,8
   65 D1:AF93 11 C2 AF D1     ld  de,screenSettings
   66 D1:AF97 1A -  -  -  _:  ld  a,(de)
   67 D1:AF98 ED A0 -  -      ldi
   68 D1:AF9A 2B -  -  -      dec hl
   69 D1:AF9B 77 -  -  -      ld  (hl),a
   70 D1:AF9C 23 -  -  -      inc hl
   71 D1:AF9D EA 97 AF D1     jp  pe,-_
   72 D1:AFA1 21 00 2C D5     ld  hl,screenBuf2
   73 D1:AFA5 22 28 34 D0     ld  (curScreenBuf),hl
   74 D1:AFA9 -  -  -  -  ;Also copied from graphx
   75 D1:AFA9 -  -  -  -  setDefaultPalette:
   76 D1:AFA9 11 00 02 E3 	ld	de,mpLcdPalette	    ; address of mmio palette
   77 D1:AFAD 43 -  -  -  	ld	b,e			        ; b = 0
   78 D1:AFAE 78 -  -  -  _:	ld	a,b
   79 D1:AFAF 0F -  -  -  	rrca
   80 D1:AFB0 A8 -  -  -  	xor	a,b
   81 D1:AFB1 E6 E0 -  -  	and	a,224
   82 D1:AFB3 A8 -  -  -  	xor	a,b
   83 D1:AFB4 12 -  -  -  	ld	(de),a
   84 D1:AFB5 13 -  -  -  	inc	de
   85 D1:AFB6 78 -  -  -  	ld	a,b
   86 D1:AFB7 17 -  -  -  	rla
   87 D1:AFB8 17 -  -  -  	rla
   88 D1:AFB9 17 -  -  -  	rla
   89 D1:AFBA 78 -  -  -  	ld	a,b
   90 D1:AFBB 1F -  -  -  	rra
   91 D1:AFBC 12 -  -  -  	ld	(de),a
   92 D1:AFBD 13 -  -  -  	inc	de
   93 D1:AFBE 04 -  -  -  	inc	b
   94 D1:AFBF 20 ED -  -  	jr	nz,-_		    ; loop for 256 times to fill palette
   95 D1:AFC1 C9 -  -  -  	ret
   96 D1:AFC2 -  -  -  -  
   97 D1:AFC2 -  -  -  -  screenSettings:
   98 D1:AFC2 -  -  -  -  ;Copied from my old Falldown2 project, which was also copied from graphx.asm
   99 D1:AFC2 -  -  -  -  ;	.db	14 shl 2			; PPL shl 2
  100 D1:AFC2 07 -  -  -  	.db	7					; HSW
  101 D1:AFC3 57 -  -  -  	.db	87					; HFP
  102 D1:AFC4 3F -  -  -  	.db	63					; HBP
  103 D1:AFC5 3F 01 -  -  	.dw	(0 >> 10)+319		; (VSW shl 10)+LPP
  104 D1:AFC7 B3 -  -  -  	.db	179					; VFP
  105 D1:AFC8 00 -  -  -  	.db	0					; VBP
  106 D1:AFC9 00 -  -  -  	.db	(0 >> 6)+(0 >> 5)+0	; (ACB shl 6)+(CLKSEL shl 5)+PCD_LO
  107 D1:AFCA -  -  -  -  ;  H = ((PPL+1)*16)+(HSW+1)+(HFP+1)+(HBP+1) = 240+8+88+64 = 400
  108 D1:AFCA -  -  -  -  ;  V = (LPP+1)+(VSW+1)+VFP+VBP = 320+1+179+0 = 500
  109 D1:AFCA -  -  -  -  ; CC = H*V*PCD*2 = 400*500*2*2 = 800000
  110 D1:AFCA -  -  -  -  ; Hz = 48000000/CC = 60
  111 D1:AFCA -  -  -  -  
  112 D1:AFCA -  -  -  -  
  113 D1:AFCA -  -  -  -  ;-----------------------------------------------------------------------------
  114 D1:AFCA -  -  -  -  ; Text Rendering
  115 D1:AFCA -  -  -  -  
  116 D1:AFCA -  -  -  -  clearTextBuf:
  117 D1:AFCA 21 00 58 D0     ld  hl,NAMETABLE1
  118 D1:AFCE 11 01 58 D0     ld  de,NAMETABLE1+1
  119 D1:AFD2 01 FF 03 00     ld  bc,1023
  120 D1:AFD6 36 20 -  -      ld  (hl),' '
  121 D1:AFD8 ED B0 -  -      ldir
  122 D1:AFDA C9 -  -  -      ret
  123 D1:AFDB -  -  -  -  
  124 D1:AFDB -  -  -  -  printTextBuf:
  125 D1:AFDB 2A F6 31 D0     ld  hl,(xPos)
  126 D1:AFDF 22 0F B0 D1     ld  (printTextBuf_smcPosRecovery),hl
  127 D1:AFE3 21 00 58 D0     ld  hl,NAMETABLE1
  128 D1:AFE7 AF -  -  -      xor a,a
  129 D1:AFE8 32 F7 31 D0     ld  (yPos),a
  130 D1:AFEC 0E 1E -  -      ld  c,30
  131 D1:AFEE 3E 08 -  -  _:  ld  a,8
  132 D1:AFF0 32 F6 31 D0     ld  (xPos),a
  133 D1:AFF4 06 20 -  -      ld  b,$20
  134 D1:AFF6 7E -  -  -  _:  ld  a,(hl)
  135 D1:AFF7 23 -  -  -      inc hl
  136 D1:AFF8 C5 -  -  -      push bc
  137 D1:AFF9 E5 -  -  -          push hl
  138 D1:AFFA CD 58 B0 D1             call printBigFont
  139 D1:AFFE E1 -  -  -          pop hl
  140 D1:AFFF C1 -  -  -      pop bc
  141 D1:B000 10 F4 -  -      djnz -_
  142 D1:B002 3A F7 31 D0     ld  a,(yPos)
  143 D1:B006 3C -  -  -      inc a
  144 D1:B007 32 F7 31 D0     ld  (yPos),a
  145 D1:B00B 0D -  -  -      dec  c
  146 D1:B00C 20 E0 -  -      jr  nz,--_
  147 D1:B00E -  -  -  -  printTextBuf_smcPosRecovery .equ $+1
  148 D1:B00E 21 00 00 00     ld  hl,0
  149 D1:B012 22 F6 31 D0     ld  (xPos),hl
  150 D1:B016 C9 -  -  -      ret
  151 D1:B017 -  -  -  -  
  152 D1:B017 -  -  -  -  ;A=column to start on
  153 D1:B017 -  -  -  -  setLineStart:
  154 D1:B017 32 F6 31 D0     ld  (xPos),a
  155 D1:B01B 32 2B 34 D0     ld  (linestart),a
  156 D1:B01F C9 -  -  -      ret
  157 D1:B020 -  -  -  -  
  158 D1:B020 -  -  -  -  ;A=row to start on
  159 D1:B020 -  -  -  -  setCurLine:
  160 D1:B020 32 F7 31 D0     ld  (yPos),a
  161 D1:B024 C9 -  -  -      ret
  162 D1:B025 -  -  -  -  
  163 D1:B025 -  -  -  -  newPage:
  164 D1:B025 3E FF -  -      ld  a,$FF
  165 D1:B027 32 F7 31 D0     ld  (yPos),a
  166 D1:B02B -  -  -  -  newLine:
  167 D1:B02B 3A 2B 34 D0     ld  a,(linestart)
  168 D1:B02F 32 F6 31 D0     ld  (xPos),a
  169 D1:B033 3A F7 31 D0     ld  a,(yPos)
  170 D1:B037 3C -  -  -      inc a
  171 D1:B038 FE 1E -  -      cp  30
  172 D1:B03A 38 01 -  -      jr  c,+_
  173 D1:B03C AF -  -  -      xor a,a
  174 D1:B03D 32 F7 31 D0 _:  ld  (yPos),a
  175 D1:B041 C9 -  -  -      ret
  176 D1:B042 -  -  -  -  
  177 D1:B042 -  -  -  -      
  178 D1:B042 -  -  -  -      
  179 D1:B042 -  -  -  -  
  180 D1:B042 -  -  -  -  ;HL=address to string
  181 D1:B042 -  -  -  -  printString:
  182 D1:B042 7E -  -  -      ld  a,(hl)
  183 D1:B043 23 -  -  -      inc hl
  184 D1:B044 B7 -  -  -      or  a,a
  185 D1:B045 C8 -  -  -      ret z
  186 D1:B046 FE 0A -  -      cp  a,'\n'
  187 D1:B048 20 06 -  -      jr nz,+_
  188 D1:B04A CD 2B B0 D1     call newLine
  189 D1:B04E 18 F2 -  -      jr  printString
  190 D1:B050 E5 -  -  -  _:  push hl
  191 D1:B051 CD 58 B0 D1         call printBigFont
  192 D1:B055 E1 -  -  -      pop hl
  193 D1:B056 18 EA -  -      jr printString
  194 D1:B058 -  -  -  -  
  195 D1:B058 -  -  -  -  
  196 D1:B058 -  -  -  -  ;in: A=chrToPrint
  197 D1:B058 -  -  -  -  printBigFont:
  198 D1:B058 CD ED B0 D1     call calculateScreenPtr
  199 D1:B05C EB -  -  -      ex  de,hl
  200 D1:B05D 6F -  -  -      ld  L,a
  201 D1:B05E 26 08 -  -      ld  H,8
  202 D1:B060 ED 6C -  -      mlt hl
  203 D1:B062 01 07 B0 D1     ld  bc,graphx_textdata
  204 D1:B066 09 -  -  -      add hl,bc
  205 D1:B067 EB -  -  -      ex  de,hl
  206 D1:B068 0E 08 -  -      ld  c,8
  207 D1:B06A 06 08 -  -  _:  ld  b,8
  208 D1:B06C 1A -  -  -      ld  a,(de)
  209 D1:B06D 87 -  -  -  _:  add a,a
  210 D1:B06E -  -  -  -  fontBGColor_var .equ $+1
  211 D1:B06E 36 00 -  -      ld  (hl),FONTBGCOLOR
  212 D1:B070 30 02 -  -      jr  nc,$+4
  213 D1:B072 -  -  -  -  fontFGColor_var .equ $+1
  214 D1:B072 36 FF -  -      ld  (hl),FONTFGCOLOR
  215 D1:B074 23 -  -  -      inc hl
  216 D1:B075 10 F6 -  -      djnz -_
  217 D1:B077 79 -  -  -      ld  a,c
  218 D1:B078 01 38 01 00     ld  bc,320-8
  219 D1:B07C 09 -  -  -      add hl,bc
  220 D1:B07D 4F -  -  -      ld  c,a
  221 D1:B07E 13 -  -  -      inc de
  222 D1:B07F 0D -  -  -      dec c
  223 D1:B080 20 E8 -  -      jr  nz,--_
  224 D1:B082 21 F6 31 D0     ld  hl,xPos
  225 D1:B086 34 -  -  -      inc (hl)
  226 D1:B087 C9 -  -  -      ret
  227 D1:B088 -  -  -  -  
  228 D1:B088 -  -  -  -  ;A= 0-255 numeric value to display as hex
  229 D1:B088 -  -  -  -  printSmallNumPair:
  230 D1:B088 CD ED B0 D1     call calculateScreenPtr
  231 D1:B08C F5 -  -  -      push af
  232 D1:B08D 1F -  -  -          rra
  233 D1:B08E 1F -  -  -          rra
  234 D1:B08F 1F -  -  -          rra
  235 D1:B090 1F -  -  -          rra
  236 D1:B091 CD A0 B0 D1         call +_
  237 D1:B095 F1 -  -  -      pop af
  238 D1:B096 CD A0 B0 D1     call +_
  239 D1:B09A 21 F6 31 D0     ld  hl,xPos
  240 D1:B09E 34 -  -  -      inc (hl)
  241 D1:B09F C9 -  -  -      ret
  242 D1:B0A0 E6 0F -  -  _:  and a,$0F
  243 D1:B0A2 01 40 01 00     ld  bc,320
  244 D1:B0A6 09 -  -  -      add hl,bc   ;drop height by one. These small chars are *short*
  245 D1:B0A7 EB -  -  -      ex  de,hl
  246 D1:B0A8 6F -  -  -      ld  L,a
  247 D1:B0A9 26 03 -  -      ld  H,3
  248 D1:B0AB ED 6C -  -      mlt hl
  249 D1:B0AD 01 07 B4 D1     ld  bc,SmallHexFont
  250 D1:B0B1 09 -  -  -      add hl,bc
  251 D1:B0B2 EB -  -  -      ex  de,hl
  252 D1:B0B3 0E 03 -  -      ld  c,3
  253 D1:B0B5 18 14 -  -      jr  printSmallNumPair_2ndHalf
  254 D1:B0B7 -  -  -  -  printSmallNumPair_1stHalf:
  255 D1:B0B7 1A -  -  -      ld  a,(de)
  256 D1:B0B8 06 04 -  -      ld  b,4
  257 D1:B0BA 87 -  -  -  _:  add a,a
  258 D1:B0BB -  -  -  -  smallFontBGColor_var .equ $+1
  259 D1:B0BB 36 00 -  -      ld  (hl),FONTBGCOLOR
  260 D1:B0BD 30 02 -  -      jr  nc,$+4
  261 D1:B0BF -  -  -  -  smallFontFGColor_var .equ $+1
  262 D1:B0BF 36 FF -  -      ld  (hl),FONTFGCOLOR
  263 D1:B0C1 23 -  -  -      inc hl
  264 D1:B0C2 10 F6 -  -      djnz -_
  265 D1:B0C4 79 -  -  -      ld  a,c
  266 D1:B0C5 01 3C 01 00     ld  bc,320-4
  267 D1:B0C9 09 -  -  -      add hl,bc
  268 D1:B0CA 4F -  -  -      ld  c,a
  269 D1:B0CB -  -  -  -  printSmallNumPair_2ndHalf:
  270 D1:B0CB 1A -  -  -      ld  a,(de)
  271 D1:B0CC 07 -  -  -      rlca
  272 D1:B0CD 07 -  -  -      rlca
  273 D1:B0CE 07 -  -  -      rlca
  274 D1:B0CF 07 -  -  -      rlca
  275 D1:B0D0 06 04 -  -      ld  b,4
  276 D1:B0D2 87 -  -  -  _:  add a,a
  277 D1:B0D3 36 00 -  -      ld  (hl),FONTBGCOLOR
  278 D1:B0D5 30 02 -  -      jr  nc,$+4
  279 D1:B0D7 36 FF -  -      ld  (hl),FONTFGCOLOR
  280 D1:B0D9 23 -  -  -      inc hl
  281 D1:B0DA 10 F6 -  -      djnz -_
  282 D1:B0DC 13 -  -  -      inc de
  283 D1:B0DD 79 -  -  -      ld  a,c
  284 D1:B0DE 01 3C 01 00     ld  bc,320-4
  285 D1:B0E2 09 -  -  -      add hl,bc
  286 D1:B0E3 4F -  -  -      ld  c,a
  287 D1:B0E4 0D -  -  -      dec c
  288 D1:B0E5 20 D0 -  -      jr  nz,printSmallNumPair_1stHalf
  289 D1:B0E7 01 84 F8 FF     ld  bc,-(320*(1+5))+4
  290 D1:B0EB 09 -  -  -      add hl,bc
  291 D1:B0EC C9 -  -  -      ret
  292 D1:B0ED -  -  -  -  
  293 D1:B0ED -  -  -  -  calculateScreenPtr:
  294 D1:B0ED -  -  -  -      ;xcoord: x * 8 
  295 D1:B0ED -  -  -  -      ;ycoord: 320 * 8 * y
  296 D1:B0ED -  -  -  -      ;coord: (8x)+320*8y -> 8(x+320y)
  297 D1:B0ED ED 5B F6 31 
              D0 -  -  -      ld  de,(xPos)
  298 D1:B0F2 -  -  -  -  calculateScreenPtrDE:
  299 D1:B0F2 6A -  -  -      ld  L,d     ;yPos
  300 D1:B0F3 26 A0 -  -      ld  h,160
  301 D1:B0F5 ED 6C -  -      mlt hl
  302 D1:B0F7 29 -  -  -      add hl,hl
  303 D1:B0F8 16 01 -  -      ld  d,1
  304 D1:B0FA ED 5C -  -      mlt de      ;DE=E. Clears high bytes.
  305 D1:B0FC 19 -  -  -      add hl,de
  306 D1:B0FD 29 -  -  -      add hl,hl
  307 D1:B0FE 29 -  -  -      add hl,hl
  308 D1:B0FF 29 -  -  -      add hl,hl
  309 D1:B100 ED 5B 28 34 
              D0 -  -  -      ld  de,(curScreenBuf)
  310 D1:B105 19 -  -  -      add hl,de
  311 D1:B106 C9 -  -  -      ret
  312 D1:B107 -  -  -  -  
  313 D1:B107 -  -  -  -  
  314 D1:B107 -  -  -  -  
  315 D1:B107 -  -  -  -  
  316 D1:B107 -  -  -  -  
  317 D1:B107 -  -  -  -  
  318 D1:B107 -  -  -  -  
  319 D1:B107 -  -  -  -  
  320 D1:B107 -  -  -  -  
  321 D1:B107 -  -  -  -  ;-----------------------------------------------------------------------------
  322 D1:B107 -  -  -  -  ; Data Section
  323 D1:B107 -  -  -  -  
  324 D1:B107 -  -  -  -  graphx_textdata		.EQU $-(8*' ')		;points to what would be start of ASCII
  325 D1:B107 00 00 00 00 
              00 00 00 00 .db	$00,$00,$00,$00,$00,$00,$00,$00 ;
  326 D1:B10F C0 C0 C0 C0 
              C0 00 C0 00 .db	$C0,$C0,$C0,$C0,$C0,$00,$C0,$00 ; !
  327 D1:B117 D8 D8 D8 00 
              00 00 00 00 .db	$D8,$D8,$D8,$00,$00,$00,$00,$00 ; "
  328 D1:B11F 6C 6C FE 6C 
              FE 6C 6C 00 .db	$6C,$6C,$FE,$6C,$FE,$6C,$6C,$00 ; #
  329 D1:B127 18 7E C0 7C 
              06 FC 18 00 .db	$18,$7E,$C0,$7C,$06,$FC,$18,$00 ; $
  330 D1:B12F 00 C6 CC 18 
              30 66 C6 00 .db	$00,$C6,$CC,$18,$30,$66,$C6,$00 ; %
  331 D1:B137 38 6C 38 76 
              DC CC 76 00 .db	$38,$6C,$38,$76,$DC,$CC,$76,$00 ; &
  332 D1:B13F 30 30 60 00 
              00 00 00 00 .db	$30,$30,$60,$00,$00,$00,$00,$00 ; '
  333 D1:B147 30 60 C0 C0 
              C0 60 30 00 .db	$30,$60,$C0,$C0,$C0,$60,$30,$00 ; (
  334 D1:B14F C0 60 30 30 
              30 60 C0 00 .db	$C0,$60,$30,$30,$30,$60,$C0,$00 ; )
  335 D1:B157 00 66 3C FF 
              3C 66 00 00 .db	$00,$66,$3C,$FF,$3C,$66,$00,$00 ; *
  336 D1:B15F 00 30 30 FC 
              FC 30 30 00 .db	$00,$30,$30,$FC,$FC,$30,$30,$00 ; +
  337 D1:B167 00 00 00 00 
              00 60 60 C0 .db	$00,$00,$00,$00,$00,$60,$60,$C0 ; ,
  338 D1:B16F 00 00 00 FC 
              00 00 00 00 .db	$00,$00,$00,$FC,$00,$00,$00,$00 ; -
  339 D1:B177 00 00 00 00 
              00 C0 C0 00 .db	$00,$00,$00,$00,$00,$C0,$C0,$00 ; .
  340 D1:B17F 06 0C 18 30 
              60 C0 80 00 .db	$06,$0C,$18,$30,$60,$C0,$80,$00 ; /
  341 D1:B187 7C CE DE F6 
              E6 C6 7C 00 .db	$7C,$CE,$DE,$F6,$E6,$C6,$7C,$00 ; 0
  342 D1:B18F 30 70 30 30 
              30 30 FC 00 .db	$30,$70,$30,$30,$30,$30,$FC,$00 ; 1
  343 D1:B197 7C C6 06 7C 
              C0 C0 FE 00 .db	$7C,$C6,$06,$7C,$C0,$C0,$FE,$00 ; 2
  344 D1:B19F FC 06 06 3C 
              06 06 FC 00 .db	$FC,$06,$06,$3C,$06,$06,$FC,$00 ; 3
  345 D1:B1A7 0C CC CC CC 
              FE 0C 0C 00 .db	$0C,$CC,$CC,$CC,$FE,$0C,$0C,$00 ; 4
  346 D1:B1AF FE C0 FC 06 
              06 C6 7C 00 .db	$FE,$C0,$FC,$06,$06,$C6,$7C,$00 ; 5
  347 D1:B1B7 7C C0 C0 FC 
              C6 C6 7C 00 .db	$7C,$C0,$C0,$FC,$C6,$C6,$7C,$00 ; 6
  348 D1:B1BF FE 06 06 0C 
              18 30 30 00 .db	$FE,$06,$06,$0C,$18,$30,$30,$00 ; 7
  349 D1:B1C7 7C C6 C6 7C 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$7C,$C6,$C6,$7C,$00 ; 8
  350 D1:B1CF 7C C6 C6 7E 
              06 06 7C 00 .db	$7C,$C6,$C6,$7E,$06,$06,$7C,$00 ; 9
  351 D1:B1D7 00 C0 C0 00 
              00 C0 C0 00 .db	$00,$C0,$C0,$00,$00,$C0,$C0,$00 ; :
  352 D1:B1DF 00 60 60 00 
              00 60 60 C0 .db	$00,$60,$60,$00,$00,$60,$60,$C0 ; ;
  353 D1:B1E7 18 30 60 C0 
              60 30 18 00 .db	$18,$30,$60,$C0,$60,$30,$18,$00 ; <
  354 D1:B1EF 00 00 FC 00 
              FC 00 00 00 .db	$00,$00,$FC,$00,$FC,$00,$00,$00 ; =
  355 D1:B1F7 C0 60 30 18 
              30 60 C0 00 .db	$C0,$60,$30,$18,$30,$60,$C0,$00 ; >
  356 D1:B1FF 78 CC 18 30 
              30 00 30 00 .db	$78,$CC,$18,$30,$30,$00,$30,$00 ; ?
  357 D1:B207 7C C6 DE DE 
              DE C0 7E 00 .db	$7C,$C6,$DE,$DE,$DE,$C0,$7E,$00 ; @
  358 D1:B20F 38 6C C6 C6 
              FE C6 C6 00 .db	$38,$6C,$C6,$C6,$FE,$C6,$C6,$00 ; A
  359 D1:B217 FC C6 C6 FC 
              C6 C6 FC 00 .db	$FC,$C6,$C6,$FC,$C6,$C6,$FC,$00 ; B
  360 D1:B21F 7C C6 C0 C0 
              C0 C6 7C 00 .db	$7C,$C6,$C0,$C0,$C0,$C6,$7C,$00 ; C
  361 D1:B227 F8 CC C6 C6 
              C6 CC F8 00 .db	$F8,$CC,$C6,$C6,$C6,$CC,$F8,$00 ; D
  362 D1:B22F FE C0 C0 F8 
              C0 C0 FE 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$FE,$00 ; E
  363 D1:B237 FE C0 C0 F8 
              C0 C0 C0 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$C0,$00 ; F
  364 D1:B23F 7C C6 C0 C0 
              CE C6 7C 00 .db	$7C,$C6,$C0,$C0,$CE,$C6,$7C,$00 ; G
  365 D1:B247 C6 C6 C6 FE 
              C6 C6 C6 00 .db	$C6,$C6,$C6,$FE,$C6,$C6,$C6,$00 ; H
  366 D1:B24F 7E 18 18 18 
              18 18 7E 00 .db	$7E,$18,$18,$18,$18,$18,$7E,$00 ; I
  367 D1:B257 06 06 06 06 
              06 C6 7C 00 .db	$06,$06,$06,$06,$06,$C6,$7C,$00 ; J
  368 D1:B25F C6 CC D8 F0 
              D8 CC C6 00 .db	$C6,$CC,$D8,$F0,$D8,$CC,$C6,$00 ; K
  369 D1:B267 C0 C0 C0 C0 
              C0 C0 FE 00 .db	$C0,$C0,$C0,$C0,$C0,$C0,$FE,$00 ; L
  370 D1:B26F C6 EE FE FE 
              D6 C6 C6 00 .db	$C6,$EE,$FE,$FE,$D6,$C6,$C6,$00 ; M
  371 D1:B277 C6 E6 F6 DE 
              CE C6 C6 00 .db	$C6,$E6,$F6,$DE,$CE,$C6,$C6,$00 ; N
  372 D1:B27F 7C C6 C6 C6 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$C6,$C6,$C6,$7C,$00 ; O
  373 D1:B287 FC C6 C6 FC 
              C0 C0 C0 00 .db	$FC,$C6,$C6,$FC,$C0,$C0,$C0,$00 ; P
  374 D1:B28F 7C C6 C6 C6 
              D6 DE 7C 06 .db	$7C,$C6,$C6,$C6,$D6,$DE,$7C,$06 ; Q
  375 D1:B297 FC C6 C6 FC 
              D8 CC C6 00 .db	$FC,$C6,$C6,$FC,$D8,$CC,$C6,$00 ; R
  376 D1:B29F 7C C6 C0 7C 
              06 C6 7C 00 .db	$7C,$C6,$C0,$7C,$06,$C6,$7C,$00 ; S
  377 D1:B2A7 FF 18 18 18 
              18 18 18 00 .db	$FF,$18,$18,$18,$18,$18,$18,$00 ; T
  378 D1:B2AF C6 C6 C6 C6 
              C6 C6 FE 00 .db	$C6,$C6,$C6,$C6,$C6,$C6,$FE,$00 ; U
  379 D1:B2B7 C6 C6 C6 C6 
              C6 7C 38 00 .db	$C6,$C6,$C6,$C6,$C6,$7C,$38,$00 ; V
  380 D1:B2BF C6 C6 C6 C6 
              D6 FE 6C 00 .db	$C6,$C6,$C6,$C6,$D6,$FE,$6C,$00 ; W
  381 D1:B2C7 C6 C6 6C 38 
              6C C6 C6 00 .db	$C6,$C6,$6C,$38,$6C,$C6,$C6,$00 ; X
  382 D1:B2CF C6 C6 C6 7C 
              18 30 E0 00 .db	$C6,$C6,$C6,$7C,$18,$30,$E0,$00 ; Y
  383 D1:B2D7 FE 06 0C 18 
              30 60 FE 00 .db	$FE,$06,$0C,$18,$30,$60,$FE,$00 ; Z
  384 D1:B2DF F0 C0 C0 C0 
              C0 C0 F0 00 .db	$F0,$C0,$C0,$C0,$C0,$C0,$F0,$00 ; [
  385 D1:B2E7 C0 60 30 18 
              0C 06 02 00 .db	$C0,$60,$30,$18,$0C,$06,$02,$00 ; \
  386 D1:B2EF F0 30 30 30 
              30 30 F0 00 .db	$F0,$30,$30,$30,$30,$30,$F0,$00 ; ]
  387 D1:B2F7 10 38 6C C6 
              00 00 00 00 .db	$10,$38,$6C,$C6,$00,$00,$00,$00 ; ^
  388 D1:B2FF 00 00 00 00 
              00 00 00 FF .db	$00,$00,$00,$00,$00,$00,$00,$FF ; _
  389 D1:B307 C0 C0 60 00 
              00 00 00 00 .db	$C0,$C0,$60,$00,$00,$00,$00,$00 ; `
  390 D1:B30F 00 00 7C 06 
              7E C6 7E 00 .db	$00,$00,$7C,$06,$7E,$C6,$7E,$00 ; a
  391 D1:B317 C0 C0 C0 FC 
              C6 C6 FC 00 .db	$C0,$C0,$C0,$FC,$C6,$C6,$FC,$00 ; b
  392 D1:B31F 00 00 7C C6 
              C0 C6 7C 00 .db	$00,$00,$7C,$C6,$C0,$C6,$7C,$00 ; c
  393 D1:B327 06 06 06 7E 
              C6 C6 7E 00 .db	$06,$06,$06,$7E,$C6,$C6,$7E,$00 ; d
  394 D1:B32F 00 00 7C C6 
              FE C0 7C 00 .db	$00,$00,$7C,$C6,$FE,$C0,$7C,$00 ; e
  395 D1:B337 1C 36 30 78 
              30 30 78 00 .db	$1C,$36,$30,$78,$30,$30,$78,$00 ; f
  396 D1:B33F 00 00 7E C6 
              C6 7E 06 FC .db	$00,$00,$7E,$C6,$C6,$7E,$06,$FC ; g
  397 D1:B347 C0 C0 FC C6 
              C6 C6 C6 00 .db	$C0,$C0,$FC,$C6,$C6,$C6,$C6,$00 ; h
  398 D1:B34F 18 00 38 18 
              18 18 3C 00 .db	$18,$00,$38,$18,$18,$18,$3C,$00 ; i
  399 D1:B357 06 00 06 06 
              06 06 C6 7C .db	$06,$00,$06,$06,$06,$06,$C6,$7C ; j
  400 D1:B35F C0 C0 CC D8 
              F8 CC C6 00 .db	$C0,$C0,$CC,$D8,$F8,$CC,$C6,$00 ; k
  401 D1:B367 38 18 18 18 
              18 18 3C 00 .db	$38,$18,$18,$18,$18,$18,$3C,$00 ; l
  402 D1:B36F 00 00 CC FE 
              FE D6 D6 00 .db	$00,$00,$CC,$FE,$FE,$D6,$D6,$00 ; m
  403 D1:B377 00 00 FC C6 
              C6 C6 C6 00 .db	$00,$00,$FC,$C6,$C6,$C6,$C6,$00 ; n
  404 D1:B37F 00 00 7C C6 
              C6 C6 7C 00 .db	$00,$00,$7C,$C6,$C6,$C6,$7C,$00 ; o
  405 D1:B387 00 00 FC C6 
              C6 FC C0 C0 .db	$00,$00,$FC,$C6,$C6,$FC,$C0,$C0 ; p
  406 D1:B38F 00 00 7E C6 
              C6 7E 06 06 .db	$00,$00,$7E,$C6,$C6,$7E,$06,$06 ; q
  407 D1:B397 00 00 FC C6 
              C0 C0 C0 00 .db	$00,$00,$FC,$C6,$C0,$C0,$C0,$00 ; r
  408 D1:B39F 00 00 7E C0 
              7C 06 FC 00 .db	$00,$00,$7E,$C0,$7C,$06,$FC,$00 ; s
  409 D1:B3A7 30 30 FC 30 
              30 30 1C 00 .db	$30,$30,$FC,$30,$30,$30,$1C,$00 ; t
  410 D1:B3AF 00 00 C6 C6 
              C6 C6 7E 00 .db	$00,$00,$C6,$C6,$C6,$C6,$7E,$00 ; u
  411 D1:B3B7 00 00 C6 C6 
              C6 7C 38 00 .db	$00,$00,$C6,$C6,$C6,$7C,$38,$00 ; v
  412 D1:B3BF 00 00 C6 C6 
              D6 FE 6C 00 .db	$00,$00,$C6,$C6,$D6,$FE,$6C,$00 ; w
  413 D1:B3C7 00 00 C6 6C 
              38 6C C6 00 .db	$00,$00,$C6,$6C,$38,$6C,$C6,$00 ; x
  414 D1:B3CF 00 00 C6 C6 
              C6 7E 06 FC .db	$00,$00,$C6,$C6,$C6,$7E,$06,$FC ; y
  415 D1:B3D7 00 00 FE 0C 
              38 60 FE 00 .db	$00,$00,$FE,$0C,$38,$60,$FE,$00 ; z
  416 D1:B3DF 1C 30 30 E0 
              30 30 1C 00 .db	$1C,$30,$30,$E0,$30,$30,$1C,$00 ; {
  417 D1:B3E7 C0 C0 C0 00 
              C0 C0 C0 00 .db	$C0,$C0,$C0,$00,$C0,$C0,$C0,$00 ; |
  418 D1:B3EF E0 30 30 1C 
              30 30 E0 00 .db	$E0,$30,$30,$1C,$30,$30,$E0,$00 ; }
  419 D1:B3F7 76 DC 00 00 
              00 00 00 00 .db	$76,$DC,$00,$00,$00,$00,$00,$00 ; ~
  420 D1:B3FF 00 10 38 6C 
              C6 C6 FE 00 .db	$00,$10,$38,$6C,$C6,$C6,$FE,$00 ; △
  421 D1:B407 -  -  -  -  
  422 D1:B407 -  -  -  -  ;Copied from the Escheron: Twilight over Ragnoth project
  423 D1:B407 -  -  -  -  ;whose format was copied from a (then-)authorized source
  424 D1:B407 -  -  -  -  ;for DoorsCS (I think? The one for the 83+) by "Kerm Martian".
  425 D1:B407 -  -  -  -  SmallHexFont:
  426 D1:B407 4E AA AE -  .db $4E,$AA,$AE				;zero
  427 D1:B40A 44 C4 4E -  .db $44,$C4,$4E				;one
  428 D1:B40D 4C 24 8E -  .db $4C,$24,$8E				;two
  429 D1:B410 4C 24 2C -  .db $4C,$24,$2C				;three
  430 D1:B413 48 AE 22 -  .db $48,$AE,$22				;four
  431 D1:B416 4E 8C 2C -  .db $4E,$8C,$2C				;five
  432 D1:B419 46 8E AE -  .db $46,$8E,$AE				;six
  433 D1:B41C 4E 24 88 -  .db $4E,$24,$88				;seven
  434 D1:B41F 4E AE AE -  .db $4E,$AE,$AE				;eight
  435 D1:B422 4E AE 2C -  .db $4E,$AE,$2C				;nine
  436 D1:B425 44 AE AA -  .db $44,$AE,$AA				;A
  437 D1:B428 4C AC AC -  .db $4C,$AC,$AC				;B
  438 D1:B42B 46 88 86 -  .db $46,$88,$86				;C
  439 D1:B42E 4C AA AC -  .db $4C,$AA,$AC				;D
  440 D1:B431 4E 8C 8E -  .db $4E,$8C,$8E				;E
  441 D1:B434 4E 8C 88 -  .db $4E,$8C,$88				;F
  442 D1:B437 -  -  -  -  
  443 D1:B437 -  -  -  -  
  444 D1:B437 -  -  -  -  
Listing for file "main.z80"
  816 D1:B437 -  -  -  -  #include "coreint.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\coreint.z80"
    1 D1:B437 -  -  -  -  ; Code to handle interrup servicer. Note: This hinges on 
    2 D1:B437 -  -  -  -  ; PPU timing, so some of its initilization code will end up here too.
    3 D1:B437 -  -  -  -  ;
    4 D1:B437 -  -  -  -  
    5 D1:B437 -  -  -  -  
    6 D1:B437 -  -  -  -  
    7 D1:B437 -  -  -  -  ppu_init:
    8 D1:B437 -  -  -  -      ;ACTUALLY. PPU MEMORY DOESN'T REQUIRE INITIALIZATION. THAT'S TAKEN CARE OF
    9 D1:B437 -  -  -  -      ;DURING CORE INIT. THIS BEHAVIOR WON'T WORK ON FAMICOM EMULATION, BUT MEH.
   10 D1:B437 AF -  -  -      xor a,a
   11 D1:B438 32 5D 34 D0     ld  (int_table_len),a
   12 D1:B43C 11 76 E4 D1     ld  de,ppu_isr
   13 D1:B440 01 23 6D 00     ld  bc,27939
   14 D1:B444 CD C5 B4 D1     call int6502_insertISA  ;sets ix. ix before this unknown.
   15 D1:B448 DD 36 ED 02     ld  (ix+PPU_SUBCYCLE),2
   16 D1:B44C C9 -  -  -      ret
   17 D1:B44D -  -  -  -  
   18 D1:B44D -  -  -  -  
   19 D1:B44D -  -  -  -  
   20 D1:B44D -  -  -  -  
   21 D1:B44D -  -  -  -  
   22 D1:B44D -  -  -  -  int6502_updateIntCounter:
   23 D1:B44D 21 5D 34 D0     ld  hl,int_table_len
   24 D1:B451 7E -  -  -      ld  a,(hl)
   25 D1:B452 B7 -  -  -      or  a,a
   26 D1:B453 C8 -  -  -      ret z
   27 D1:B454 23 -  -  -      inc hl  ;advance to first pointer
   28 D1:B455 23 -  -  -      inc hl
   29 D1:B456 23 -  -  -      inc hl
   30 D1:B457 23 -  -  -      inc hl  ;advanced to first time
   31 D1:B458 ED 27 -  -      ld  hl,(hl)
   32 D1:B45A -  -  -  -      ;neg hl
   33 D1:B45A DD 2F 1B -      ld  (ix+TEMP_MEMORY),hl
   34 D1:B45D DD 7E 1D -      ld  a,(ix+TEMP_MEMORY+2)
   35 D1:B460 2F -  -  -      cpl
   36 D1:B461 DD 77 1D -      ld  (ix+TEMP_MEMORY+2),a
   37 D1:B464 7D -  -  -      ld  a,l
   38 D1:B465 2F -  -  -      cpl
   39 D1:B466 6F -  -  -      ld  l,a
   40 D1:B467 7C -  -  -      ld  a,h
   41 D1:B468 2F -  -  -      cpl
   42 D1:B469 67 -  -  -      ld  h,a
   43 D1:B46A 52 DD 2F 1B     ld.s (ix+TEMP_MEMORY),hl
   44 D1:B46E DD 27 1B -      ld  hl,(ix+TEMP_MEMORY)
   45 D1:B471 -  -  -  -      ;load to clock counter in "core.z80"
   46 D1:B471 22 04 B6 D1     ld  (i6502_interrupt_timer),hl
   47 D1:B475 C9 -  -  -      ret
   48 D1:B476 -  -  -  -  
   49 D1:B476 -  -  -  -  int6502_init:
   50 D1:B476 AF -  -  -      xor a,a
   51 D1:B477 32 5D 34 D0     ld  (int_table_len),a
   52 D1:B47B C9 -  -  -      ret
   53 D1:B47C -  -  -  -  
   54 D1:B47C -  -  -  -  ;DE=ISRToPush, BC=CallWhenThisClockIsPassed
   55 D1:B47C -  -  -  -  ;This routine is called in the ISR handler to both acknowledge the consumption
   56 D1:B47C -  -  -  -  ;of its turn at the ISR, and to (potentially) push another entry to the stack.
   57 D1:B47C -  -  -  -  ;This does not affect ths size of a table since this is a combined
   58 D1:B47C -  -  -  -  ;pop-and-insert operation
   59 D1:B47C -  -  -  -  int6502_pushISRAfterPop:
   60 D1:B47C DD 21 5E 34 
              D0 -  -  -      ld  ix,INT_TABLE
   61 D1:B481 DD 7E FF -      ld  a,(ix-1)        ;length of the table
   62 D1:B484 B7 -  -  -      or  a,a
   63 D1:B485 20 00 -  -      jr  nz,+_       ;Jump not taken: Push first and only entry
   64 D1:B487 DD 36 FF 01 _:  ld  (ix-1),1
   65 D1:B48B DD 1F 00 -      ld  (ix+0),de
   66 D1:B48E DD 0F 03 -      ld  (ix+3),bc
   67 D1:B491 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   68 D1:B496 C9 -  -  -      ret
   69 D1:B497 3D -  -  -  _:  dec a
   70 D1:B498 28 ED -  -      jr  z,--_       ;Jump taken: Replace first and only entry since we ate it.
   71 D1:B49A -  -  -  -      ;Loop steps:
   72 D1:B49A -  -  -  -      ;If not loopCounter or BC < ix[0].T:
   73 D1:B49A -  -  -  -      ;   ix[-1] = DE,BC
   74 D1:B49A -  -  -  -      ;   STOP.
   75 D1:B49A -  -  -  -      ;Else:
   76 D1:B49A -  -  -  -      ;   ix[-1] = ix[0]
   77 D1:B49A -  -  -  -      ;   ix += STRIDE
   78 D1:B49A -  -  -  -      ;   --loopCounter;
   79 D1:B49A -  -  -  -  int6502_pushISRAfterPop_loop:
   80 D1:B49A ED 32 06 -      lea ix,ix+INT_TABLE_STRIDE
   81 D1:B49D B7 -  -  -      or  a,a
   82 D1:B49E 28 07 -  -      jr  z,+_
   83 D1:B4A0 DD 27 03 -      ld  hl,(ix+INT_CYCLE_OFFSET)
   84 D1:B4A3 ED 42 -  -      sbc hl,bc   ;C if ix[0]<BC
   85 D1:B4A5 30 0F -  -      jr  nc,++_
   86 D1:B4A7 DD 1F 00 -  _:  ld  (ix+INT_ADDR_OFFSET),de
   87 D1:B4AA DD 0F 03 -      ld  (ix+INT_CYCLE_OFFSET),bc
   88 D1:B4AD DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   89 D1:B4B2 C3 4D B4 D1     jp  int6502_updateIntCounter
   90 D1:B4B6 DD 27 00 -  _:  ld  hl,(ix+INT_ADDR_OFFSET)
   91 D1:B4B9 DD 2F FA -      ld  (ix+INT_ADDR_OFFSET-INT_TABLE_STRIDE),hl
   92 D1:B4BC DD 27 03 -      ld  hl,(ix+INT_CYCLE_OFFSET)
   93 D1:B4BF DD 2F FD -      ld  (ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE),hl
   94 D1:B4C2 3D -  -  -      dec a
   95 D1:B4C3 18 D5 -  -      jr int6502_pushISRAfterPop_loop
   96 D1:B4C5 -  -  -  -      
   97 D1:B4C5 -  -  -  -  ;DE=ISRToPush, BC=CallWhenThisClockIsPassed
   98 D1:B4C5 -  -  -  -  ;This actually adds an entry to the stack.
   99 D1:B4C5 -  -  -  -  int6502_insertISA:
  100 D1:B4C5 DD 21 5E 34 
              D0 -  -  -      ld  ix,INT_TABLE
  101 D1:B4CA DD 7E FF -      ld  a,(ix-1)
  102 D1:B4CD B7 -  -  -      or  a,a
  103 D1:B4CE 20 13 -  -      jr  nz,+_
  104 D1:B4D0 DD 36 FF 01     ld  (ix-1),1
  105 D1:B4D4 DD 1F 00 -      ld  (ix+0),de
  106 D1:B4D7 DD 0F 03 -      ld  (ix+3),bc
  107 D1:B4DA DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
  108 D1:B4DF C3 4D B4 D1     jp  int6502_updateIntCounter
  109 D1:B4E3 FE 08 -  -  _:  cp  a,INT_TABLE_MAXLEN
  110 D1:B4E5 C8 -  -  -      ret z       ;do not attempt to insert if table is maxed out
  111 D1:B4E6 C5 -  -  -      push bc
  112 D1:B4E7 47 -  -  -          ld  b,a
  113 D1:B4E8 0E 06 -  -          ld  c,INT_TABLE_STRIDE
  114 D1:B4EA ED 4C -  -          mlt bc
  115 D1:B4EC DD 09 -  -          add ix,bc   ;at end of table
  116 D1:B4EE C1 -  -  -      pop bc
  117 D1:B4EF -  -  -  -      ;Loop details. IX points at entry after last:
  118 D1:B4EF -  -  -  -      ;if not loopCtr or ix[-1].T < BC:
  119 D1:B4EF -  -  -  -      ;   ix[0] = DE,BC , STOP.
  120 D1:B4EF -  -  -  -      ;else:
  121 D1:B4EF -  -  -  -      ;   ix[0] = ix[-1], ix-=STRIDE, loopCtr--
  122 D1:B4EF -  -  -  -  int6502_insertISA_Loop:
  123 D1:B4EF B7 -  -  -      or  a,a
  124 D1:B4F0 28 07 -  -      jr  z,+_
  125 D1:B4F2 DD 27 FD -      ld  hl,(ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE)
  126 D1:B4F5 ED 42 -  -      sbc hl,bc   ;C if ix[-1]<BC
  127 D1:B4F7 38 0F -  -      jr  c,++_
  128 D1:B4F9 DD 1F 00 -  _:  ld  (ix+INT_ADDR_OFFSET),de
  129 D1:B4FC DD 0F 03 -      ld  (ix+INT_CYCLE_OFFSET),bc
  130 D1:B4FF DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
  131 D1:B504 C3 4D B4 D1     jp  int6502_updateIntCounter
  132 D1:B508 DD 27 FA -  _:  ld  hl,(ix+INT_ADDR_OFFSET-INT_TABLE_STRIDE)
  133 D1:B50B DD 2F 00 -      ld  (ix+INT_ADDR_OFFSET),hl
  134 D1:B50E DD 27 FD -      ld  hl,(ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE)
  135 D1:B511 DD 2F 03 -      ld  (ix+INT_CYCLE_OFFSET),hl
  136 D1:B514 ED 32 FA -      lea ix,ix-INT_TABLE_STRIDE
  137 D1:B517 3D -  -  -      dec a
  138 D1:B518 18 D5 -  -      jr int6502_insertISA_Loop
  139 D1:B51A -  -  -  -      
  140 D1:B51A -  -  -  -  
  141 D1:B51A -  -  -  -  int6502_removeTop:
  142 D1:B51A DD 21 5E 34 
              D0 -  -  -      ld  ix,INT_TABLE
  143 D1:B51F DD 7E FF -      ld  a,(ix-1)
  144 D1:B522 B7 -  -  -      or  a,a
  145 D1:B523 28 1B -  -      jr  z,+_
  146 D1:B525 DD 35 FF -      dec (ix-1)
  147 D1:B528 4F -  -  -      ld  c,a
  148 D1:B529 06 06 -  -      ld  b,INT_TABLE_STRIDE
  149 D1:B52B ED 4C -  -      mlt bc
  150 D1:B52D ED 32 06 -      lea ix,ix+INT_TABLE_STRIDE
  151 D1:B530 ED 12 FA -      lea de,ix-INT_TABLE_STRIDE
  152 D1:B533 ED 22 00 -      lea hl,ix+0
  153 D1:B536 ED B0 -  -      ldir
  154 D1:B538 D5 -  -  -      push de
  155 D1:B539 E1 -  -  -      pop hl
  156 D1:B53A 13 -  -  -      inc de
  157 D1:B53B 71 -  -  -      ld  (hl),c
  158 D1:B53C 0E 05 -  -      ld  c,INT_TABLE_STRIDE-1
  159 D1:B53E ED B0 -  -      ldir
  160 D1:B540 DD 21 80 32 
              D0 -  -  -  _:  ld ix,core_memory_ix
  161 D1:B545 C9 -  -  -      ret    
  162 D1:B546 -  -  -  -  
  163 D1:B546 -  -  -  -  
  164 D1:B546 -  -  -  -  
  165 D1:B546 -  -  -  -  
  166 D1:B546 -  -  -  -  
  167 D1:B546 -  -  -  -  
  168 D1:B546 -  -  -  -  
  169 D1:B546 -  -  -  -  
  170 D1:B546 -  -  -  -  
  171 D1:B546 -  -  -  -  
  172 D1:B546 -  -  -  -  
  173 D1:B546 -  -  -  -  
  174 D1:B546 -  -  -  -  
  175 D1:B546 -  -  -  -  
Listing for file "main.z80"
  817 D1:B546 -  -  -  -  #include "core.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    1 D1:B546 -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    2 D1:B546 -  -  -  -  
    3 D1:B546 -  -  -  -  ;TODO: DEFINE MEMORY ACCESS MACROS. ONE OR MORE FOR READ AND WRITE.
    4 D1:B546 -  -  -  -  ;FIGURE OUT HOW TO GET BOTH HIGH AND LOW BYTE OF ORIGINAL ADDRESS
    5 D1:B546 -  -  -  -  ;AND PERFORM ALTERNATE ACTIONS BASED ON WHAT HARDWARE WAS ACCESSED.
    6 D1:B546 -  -  -  -  ;NOTE: PATTERN SHOWS THAT D=MSB, C=LSB OF 6502 ADDRESS. USE THIS.
    7 D1:B546 -  -  -  -  ;
    8 D1:B546 -  -  -  -  ;THESE MACROS ARE PLACEHOLDERS. CHANGE THEM LATER ON TO REFLECT ACTUAL
    9 D1:B546 -  -  -  -  ;HARDWARE SHENANIGANS.
   10 D1:B546 -  -  -  -  ;
   11 D1:B546 -  -  -  -  ;NOTE: WRITE ACCESSES RELY ON KNOWING WHAT DATA TO WRITE. CAN'T STORE THAT IN A
   12 D1:B546 -  -  -  -  ;      SINCE WE NEED TO DO CONDITIONING. REGISTER B IS UNUSED SO LET'S USE THAT.
   13 D1:B546 -  -  -  -  ;
   14 D1:B546 -  -  -  -  #define READ_ACCESS call mapper0_read
   15 D1:B546 -  -  -  -  #define WRITE_ACCESS call mapper0_write
   16 D1:B546 -  -  -  -  ;Later, put in actual test. Z if not triggered, NZ if triggered. This
   17 D1:B546 -  -  -  -  ;alters the behavior of the BRK instruction.
   18 D1:B546 -  -  -  -  #define WAS_NMI_TRIGGERED bit 0,(ix+NMI_TRIGGERED)
   19 D1:B546 -  -  -  -  
   20 D1:B546 -  -  -  -  #define OPRFLG_C res SF_CARRY,b \ jr nc,$+4 \ set SF_CARRY,b
   21 D1:B546 -  -  -  -  #define OPRFLG_V res SF_OVER,b \ jp po,$+6 \ set SF_OVER,b
   22 D1:B546 -  -  -  -  #define OPRFLG_Z res SF_ZERO,b \ jr nz,$+4 \ set SF_ZERO,b
   23 D1:B546 -  -  -  -  #define OPRFLG_N res SF_NEG,b \ jr nc,$+4 \ set SF_NEG,b
   24 D1:B546 -  -  -  -  
   25 D1:B546 -  -  -  -  #define FLAGS_ZN ld b,(ix+REGSR) \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   26 D1:B546 -  -  -  -  #define FLAGS_CZN ld b,(ix+REGSR) \ OPRFLG_C \ rlc a  \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   27 D1:B546 -  -  -  -  #define FLAGS_VCZN ld b,(ix+REGSR) \ OPRFLG_V \ OPRFLG_C \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   28 D1:B546 -  -  -  -  
   29 D1:B546 -  -  -  -  
   30 D1:B546 -  -  -  -  ;Modify later to include provisions for hardware i/o based on page
   31 D1:B546 -  -  -  -  #define HW_READ(src_reg) ld a,(src_reg)
   32 D1:B546 -  -  -  -  #define HW_WRITE(dst_reg) ld (dst_reg),a
   33 D1:B546 -  -  -  -  
   34 D1:B546 -  -  -  -  
   35 D1:B546 -  -  -  -  
   36 D1:B546 -  -  -  -  
   37 D1:B546 -  -  -  -  ;=============================================================================
   38 D1:B546 -  -  -  -  ;=============================================================================
   39 D1:B546 -  -  -  -  ;=============================================================================
   40 D1:B546 -  -  -  -  ;=============================================================================
   41 D1:B546 -  -  -  -  ;You should have set up the mappings already. This is because
   42 D1:B546 -  -  -  -  ;mappings are program-dependant. Only $0000-$3FFF will be mapped in here
   43 D1:B546 -  -  -  -  ;more or less because I don't expect anything else to map that.
   44 D1:B546 -  -  -  -  i6502Init:
   45 D1:B546 -  -  -  -      ;
   46 D1:B546 -  -  -  -      ; At this point, you may need to randomize 2048 bytes at main_ram
   47 D1:B546 -  -  -  -      ;
   48 D1:B546 21 00 38 D0     ld  hl,main_ram
   49 D1:B54A 01 08 20 00     ld  bc,$002008
   50 D1:B54E 1E 00 -  -      ld  e,$00
   51 D1:B550 CD 50 B6 D1     call i6502_map_pages
   52 D1:B554 21 00 33 D0     ld  hl,scrap_mapping
   53 D1:B558 01 01 20 00     ld  bc,$002001
   54 D1:B55C 1E 20 -  -      ld  e,$20
   55 D1:B55E CD 50 B6 D1     call i6502_map_pages
   56 D1:B562 CD 37 B6 D1     call i6502_load_instruction_set
   57 D1:B566 -  -  -  -      ;
   58 D1:B566 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   59 D1:B56B FD 21 02 00 
              00 -  -  -      ld  iy,2    ;8 cycle startup. Hooking into inst6502_jsr for init
   60 D1:B570 ED 22 80 -      lea hl,ix-128
   61 D1:B573 ED 12 81 -      lea de,ix-127
   62 D1:B576 01 FF 00 00     ld  bc,255
   63 D1:B57A 36 00 -  -      ld  (hl),$00
   64 D1:B57C ED B0 -  -      ldir
   65 D1:B57E -  -  -  -      ;
   66 D1:B57E 21 00 00 00     ld  hl,0
   67 D1:B582 39 -  -  -      add hl,sp
   68 D1:B583 DD 2F 11 -      ld  (ix+CORE_STACK_BASE),hl
   69 D1:B586 -  -  -  -  
   70 D1:B586 -  -  -  -      ;Note: SP may need initialization. So does SR for interrupts. Or somesuch.
   71 D1:B586 21 F4 4B D0     ld  hl,PAGETABLE+(255*BASETABLE_STRIDE)
   72 D1:B58A ED 27 -  -      ld  hl,(hl)
   73 D1:B58C 11 FC 00 00     ld  de,$0000FC
   74 D1:B590 19 -  -  -      add hl,de
   75 D1:B591 -  -  -  -      ;
   76 D1:B591 -  -  -  -      ;jp inst6502_jsr
   77 D1:B591 -  -  -  -      ;Manual loading below. Uncomment "jp inst6502_jsr" to return to original.
   78 D1:B591 -  -  -  -      ;Settings below is to run nestest CPU-only test. The reset vector above
   79 D1:B591 -  -  -  -      ;requires a working PPU (and probably APU) to be present.
   80 D1:B591 DD 36 04 24     ld  (ix+REGSR),$24      ;because that's what the log wants?
   81 D1:B595 21 00 C0 00     ld  hl,$C000
   82 D1:B599 DD 2F 05 -      ld  (ix+REGPC),HL
   83 D1:B59C FD 21 07 00 
              00 -  -  -      ld  iy,7
   84 D1:B5A1 DD 36 03 FD     ld  (ix+REGSP),$FD
   85 D1:B5A5 -  -  -  -      ;debug stuff
   86 D1:B5A5 3A 30 00 F2     ld  a,($F20030)
   87 D1:B5A9 CB C7 -  -      set 0,a ;turn on timer 1
   88 D1:B5AB 32 30 00 F2     ld  ($F20030),a
   89 D1:B5AF -  -  -  -  
   90 D1:B5AF -  -  -  -  i6502RetryFirstLoad:    ;reentrant from ISR handler
   91 D1:B5AF 52 DD 17 05     ld.s de,(ix+REGPC)
   92 D1:B5B3 1B -  -  -      dec de
   93 D1:B5B4 18 04 -  -      jr +_
   94 D1:B5B6 -  -  -  -  i6502FirstLoad:
   95 D1:B5B6 52 DD 17 05     ld.s de,(ix+REGPC)
   96 D1:B5BA 7B -  -  -  _:  ld  a,e
   97 D1:B5BB 1E 0C -  -      ld  e,BASETABLE_STRIDE
   98 D1:B5BD ED 5C -  -      mlt de
   99 D1:B5BF 21 00 40 D0     ld  hl,PAGETABLE
  100 D1:B5C3 19 -  -  -      add hl,de
  101 D1:B5C4 ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
  102 D1:B5C6 16 00 -  -      ld  d,0
  103 D1:B5C8 5F -  -  -      ld  e,a
  104 D1:B5C9 19 -  -  -      add hl,de       ;resolve final address
  105 D1:B5CA 18 19 -  -      jr  i6502FinishLoad
  106 D1:B5CC -  -  -  -  i6502NextLoad:
  107 D1:B5CC 23 -  -  -      inc hl
  108 D1:B5CD 1C -  -  -      inc e
  109 D1:B5CE 20 15 -  -      jr  nz,i6502FinishLoad
  110 D1:B5D0 DD 56 06 -      ld  d,(ix+REGPC+1)
  111 D1:B5D3 14 -  -  -      inc d
  112 D1:B5D4 52 DD 1F 05     ld.s (ix+REGPC),de
  113 D1:B5D8 1E 0C -  -      ld  e,BASETABLE_STRIDE
  114 D1:B5DA ED 5C -  -      mlt de
  115 D1:B5DC 21 00 40 D0     ld  hl,PAGETABLE
  116 D1:B5E0 19 -  -  -      add hl,de
  117 D1:B5E1 ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
  118 D1:B5E3 1E 00 -  -      ld  e,0         ;PCL known to be zero at this point.
  119 D1:B5E5 -  -  -  -  i6502FinishLoad:
  120 D1:B5E5 7E -  -  -      ld  a,(hl)
  121 D1:B5E6 -  -  -  -  
  122 D1:B5E6 -  -  -  -  #ifdef COREDEBUG
  123 D1:B5E6                 ld  (ix+CURRENT_OPCODES+0),a
  124 D1:B5E6                 ld  (ix+REGPC+0),e
  125 D1:B5E6             #endif
  126 D1:B5E6 23 -  -  -      inc hl
  127 D1:B5E7 1C -  -  -      inc e
  128 D1:B5E8 20 15 -  -      jr  nz,i6502PrepNextPage
  129 D1:B5EA DD 56 06 -      ld  d,(ix+REGPC+1)
  130 D1:B5ED 14 -  -  -      inc d
  131 D1:B5EE 52 DD 1F 05     ld.s (ix+REGPC),de
  132 D1:B5F2 1E 0C -  -      ld  e,BASETABLE_STRIDE
  133 D1:B5F4 ED 5C -  -      mlt de
  134 D1:B5F6 21 00 40 D0     ld  hl,PAGETABLE
  135 D1:B5FA 19 -  -  -      add hl,de
  136 D1:B5FB ED 27 -  -      ld  hl,(hl)
  137 D1:B5FD 1E 00 -  -      ld  e,0
  138 D1:B5FF -  -  -  -  i6502PrepNextPage:
  139 D1:B5FF -  -  -  -  #ifdef COREDEBUG
  140 D1:B5FF                 push af
  141 D1:B5FF                     ld  a,(hl)
  142 D1:B5FF                     ld  (ix+CURRENT_OPCODES+1),a
  143 D1:B5FF                     push de
  144 D1:B5FF                         push hl
  145 D1:B5FF                             push ix
  146 D1:B5FF                                 inc hl
  147 D1:B5FF                                 inc e
  148 D1:B5FF                                 jr  nz,+_
  149 D1:B5FF                                 ld  d,(ix+REGPC+1)
  150 D1:B5FF                                 inc d
  151 D1:B5FF                                 ld  e,BASETABLE_STRIDE
  152 D1:B5FF                                 mlt de
  153 D1:B5FF                                 ld  hl,PAGETABLE
  154 D1:B5FF                                 add hl,de
  155 D1:B5FF                                 ld  hl,(hl)
  156 D1:B5FF             _:                  ld  a,(hl)
  157 D1:B5FF                                 ld  (ix+CURRENT_OPCODES+2),a
  158 D1:B5FF                                 lea hl,ix
  159 D1:B5FF                                 ld  de,core_memory_ix
  160 D1:B5FF                                 or  a,a
  161 D1:B5FF                                 sbc hl,de
  162 D1:B5FF                                 jr  nz,$    ;halt program if IX is not core_memory_ix
  163 D1:B5FF                                 ;jr $
  164 D1:B5FF                                 push iy
  165 D1:B5FF                                     call dbg_printLine
  166 D1:B5FF                                 pop iy
  167 D1:B5FF                                 ld  a,(ix+CORE_ERROR_LEVEL)
  168 D1:B5FF                                 or  a,a
  169 D1:B5FF                                 jr  z,+_
  170 D1:B5FF                                 ld  hl,(ix+CORE_STACK_BASE)
  171 D1:B5FF                                 ld  sp,hl
  172 D1:B5FF                                 ret
  173 D1:B5FF             _:                  ld  iy,(ix+CYCLES_CURRENT)  ;remove when done with timings
  174 D1:B5FF                                 lea hl,iy+0
  175 D1:B5FF                                 ld  de,DEBUG_STEP_START_CYCLE
  176 D1:B5FF                                 or  a,a
  177 D1:B5FF                                 sbc hl,de
  178 D1:B5FF                                 call nc,waituntilnewkeypress
  179 D1:B5FF                             pop ix
  180 D1:B5FF                         pop hl
  181 D1:B5FF                     pop de
  182 D1:B5FF                 pop af
  183 D1:B5FF             #endif
  184 D1:B5FF E5 -  -  -      push hl
  185 D1:B600 ED 23 00 -          lea hl,iy
  186 D1:B603 -  -  -  -  i6502_interrupt_timer   .equ $+1
  187 D1:B603 01 4C 98 FF         ld  bc,-26548
  188 D1:B607 09 -  -  -          add hl,bc
  189 D1:B608 38 1A -  -          jr  c,i6502_take_interrupt
  190 D1:B60A -  -  -  -  i6502_continue_instruction_fetch:
  191 D1:B60A 67 -  -  -          ld  h,a
  192 D1:B60B 2E 0C -  -          ld  l,BASETABLE_STRIDE
  193 D1:B60D ED 6C -  -          mlt hl
  194 D1:B60F 01 04 40 D0         ld  bc,JUMPTABLE
  195 D1:B613 09 -  -  -          add hl,bc
  196 D1:B614 ED 27 -  -          ld  hl,(hl)     ;jumptable
  197 D1:B616 E3 -  -  -          ex  (sp),hl     ;exch with exec addr, jumpto-via-ret
  198 D1:B617 C9 -  -  -      ret
  199 D1:B618 -  -  -  -  
  200 D1:B618 -  -  -  -  i6502_no_interrupts:
  201 D1:B618 -  -  -  -          ;This is what happens when you let the core run without setting
  202 D1:B618 -  -  -  -          ;up interrupts. It'll be up to the hardware access subroutines
  203 D1:B618 -  -  -  -          ;to configure interrupts from now on. See "coreint.z80" for
  204 D1:B618 -  -  -  -          ;more information
  205 D1:B618 21 00 00 80         ld  hl,$800000  ;INT_MIN. Prevent retry for as long as possible.
  206 D1:B61C 22 24 B6 D1         ld  (i6502_take_interrupt),hl
  207 D1:B620 C3 0A B6 D1         jp  i6502_continue_instruction_fetch
  208 D1:B624 -  -  -  -  
  209 D1:B624 -  -  -  -  i6502_take_interrupt:
  210 D1:B624 67 -  -  -          ld  h,a
  211 D1:B625 3A 5D 34 D0         ld  a,(int_table_len)
  212 D1:B629 B7 -  -  -          or  a,a
  213 D1:B62A 7C -  -  -          ld  a,h
  214 D1:B62B 28 EB -  -          jr  z,i6502_no_interrupts
  215 D1:B62D E1 -  -  -      pop hl
  216 D1:B62E AF -  -  -      xor a,a
  217 D1:B62F DD 73 05 -      ld  (ix+REGPC+0),e
  218 D1:B632 2A 5E 34 D0     ld  hl,(INT_TABLE)  ;Find the routines in "coreint.z80" that handles
  219 D1:B636 E9 -  -  -      jp  (hl)            ;and maintains the interrupt table being used here.
  220 D1:B637 -  -  -  -  
  221 D1:B637 -  -  -  -  
  222 D1:B637 -  -  -  -  ;Instructions one byte wide returns to the main loop via:
  223 D1:B637 -  -  -  -  ;   JP i6502FinishLoad
  224 D1:B637 -  -  -  -  ;Those with parameters have HL at the address in quetion, and is expected to
  225 D1:B637 -  -  -  -  ;advance HL and E at the end of the instruction. You return to main loop via:
  226 D1:B637 -  -  -  -  ;   JP i6502NextLoad
  227 D1:B637 -  -  -  -  ;Unless you manually advance the pointer to the next instruction.
  228 D1:B637 -  -  -  -  ;You really shouldn't but if you must do that, then also do this:
  229 D1:B637 -  -  -  -  ;   JP i6502FinishLoad
  230 D1:B637 -  -  -  -  ;Remember that register E is very important; it tells you about page boundaries.
  231 D1:B637 -  -  -  -  
  232 D1:B637 -  -  -  -  
  233 D1:B637 -  -  -  -  ;-----------------------------------------------------------------------------
  234 D1:B637 -  -  -  -  ;-----------------------------------------------------------------------------
  235 D1:B637 -  -  -  -  ;-----------------------------------------------------------------------------
  236 D1:B637 -  -  -  -  
  237 D1:B637 -  -  -  -  ;  ***  *   * ****  ****   ***  *   * ***** ***** **  * *****  ***  
  238 D1:B637 -  -  -  -  ; *     *   * *   * *   * *   * *   *   *     *   **  * *     *     
  239 D1:B637 -  -  -  -  ;  ***  *   * ****  ****  *   * *   *   *     *   * * * ***    ***  
  240 D1:B637 -  -  -  -  ;     * *   * *   * *   * *   * *   *   *     *   *  ** *         * 
  241 D1:B637 -  -  -  -  ;  ***   ***  ****  *   *  ***   ***    *   ***** *  ** *****  ***  
  242 D1:B637 -  -  -  -  
  243 D1:B637 -  -  -  -  ;-----------------------------------------------------------------------------
  244 D1:B637 -  -  -  -  
  245 D1:B637 -  -  -  -  i6502_load_instruction_set:
  246 D1:B637 DD 21 04 40 
              D0 -  -  -      ld  ix,JUMPTABLE
  247 D1:B63C 21 A9 D9 D1     ld  hl,inst6502_instruction_set
  248 D1:B640 06 00 -  -      ld  b,0
  249 D1:B642 ED 17 -  -  _:  ld  de,(hl)
  250 D1:B644 DD 1F 00 -      ld  (ix+0),de
  251 D1:B647 23 -  -  -      inc hl
  252 D1:B648 23 -  -  -      inc hl
  253 D1:B649 23 -  -  -      inc hl
  254 D1:B64A ED 32 0C -      lea ix,ix+BASETABLE_STRIDE
  255 D1:B64D 10 F3 -  -      djnz -_
  256 D1:B64F C9 -  -  -      ret
  257 D1:B650 -  -  -  -  
  258 D1:B650 -  -  -  -  ;HL=Base_ez80_address, C=Numpages_in_map, B=numpages_in_space, E=starting_page
  259 D1:B650 -  -  -  -  ;Example: To map and mirror 2KB RAM at $D03800 inside first 8KB of 6502 space
  260 D1:B650 -  -  -  -  ;HL=$D03800, C=$08, B=$20, E=$00
  261 D1:B650 -  -  -  -  ;Note: B should be a power of two and evenly divisible by C.
  262 D1:B650 -  -  -  -  i6502_map_pages:
  263 D1:B650 16 0C -  -      ld  d,BASETABLE_STRIDE
  264 D1:B652 ED 5C -  -      mlt de
  265 D1:B654 DD 21 00 40 
              D0 -  -  -      ld  ix,PAGETABLE
  266 D1:B659 DD 19 -  -      add ix,de
  267 D1:B65B 78 -  -  -      ld  a,b     ;A = main counter for total number of pages in mapping space
  268 D1:B65C 11 00 01 00     ld  de,256
  269 D1:B660 E5 -  -  -      push hl
  270 D1:B661 FD E1 -  -      pop iy
  271 D1:B663 41 -  -  -  _:  ld  b,c     ;looping for number of pages to map
  272 D1:B664 DD 2F 00 -  _:  ld  (ix+0),hl
  273 D1:B667 19 -  -  -      add hl,de                   ;next page z80
  274 D1:B668 ED 32 0C -      lea ix,ix+BASETABLE_STRIDE  ;next page entry
  275 D1:B66B 3D -  -  -      dec a
  276 D1:B66C C8 -  -  -      ret z
  277 D1:B66D 10 F5 -  -      djnz -_
  278 D1:B66F ED 23 00 -      lea hl,iy+0     ;start z80 pages over again for mirroring
  279 D1:B672 18 EF -  -      jr --_
  280 D1:B674 -  -  -  -  
  281 D1:B674 -  -  -  -  
  282 D1:B674 -  -  -  -  subroutine6502_abs_split_start:
  283 D1:B674 4E -  -  -      ld  c,(hl)
  284 D1:B675 23 -  -  -      inc hl
  285 D1:B676 1C -  -  -      inc e
  286 D1:B677 20 15 -  -      jr nz,+_
  287 D1:B679 DD 56 06 -      ld  d,(ix+REGPC+1)
  288 D1:B67C 14 -  -  -      inc d
  289 D1:B67D 52 DD 1F 05     ld.s (ix+REGPC),de
  290 D1:B681 1E 0C -  -      ld  e,BASETABLE_STRIDE
  291 D1:B683 ED 5C -  -      mlt de
  292 D1:B685 21 00 40 D0     ld  hl,PAGETABLE
  293 D1:B689 19 -  -  -      add hl,de
  294 D1:B68A ED 27 -  -      ld  hl,(hl) ;
  295 D1:B68C 1E 00 -  -      ld  e,0
  296 D1:B68E 46 -  -  -  _:  ld  b,(hl)
  297 D1:B68F C9 -  -  -      ret
  298 D1:B690 -  -  -  -  
  299 D1:B690 -  -  -  -  #define PUSH_ABSXSPLIT call subroutine6502_absx_split_start
  300 D1:B690 -  -  -  -  #define PUSH_ABSXSPLIT_NODEP call subroutine6502_absx_ss_noDep
  301 D1:B690 -  -  -  -  #define PUSH_ABSYSPLIT call subroutine6502_absy_split_start
  302 D1:B690 -  -  -  -  #define PUSH_ABSYSPLIT_NODEP call subroutine6502_absy_ss_noDep
  303 D1:B690 -  -  -  -  
  304 D1:B690 -  -  -  -  subroutine6502_absy_split_start:
  305 D1:B690 DD 4E 02 -      ld  c,(ix+REGY)
  306 D1:B693 18 03 -  -      jr +_
  307 D1:B695 -  -  -  -  
  308 D1:B695 -  -  -  -  subroutine6502_absx_split_start:
  309 D1:B695 DD 4E 01 -      ld  c,(ix+REGX)
  310 D1:B698 7E -  -  -  _:  ld  a,(hl)
  311 D1:B699 23 -  -  -      inc hl
  312 D1:B69A 1C -  -  -      inc e
  313 D1:B69B 20 15 -  -      jr nz,+_
  314 D1:B69D DD 56 06 -      ld  d,(ix+REGPC+1)
  315 D1:B6A0 14 -  -  -      inc d
  316 D1:B6A1 52 DD 1F 05     ld.s (ix+REGPC),de
  317 D1:B6A5 1E 0C -  -      ld  e,BASETABLE_STRIDE
  318 D1:B6A7 ED 5C -  -      mlt de
  319 D1:B6A9 21 00 40 D0     ld  hl,PAGETABLE
  320 D1:B6AD 19 -  -  -      add hl,de
  321 D1:B6AE ED 27 -  -      ld  hl,(hl) ;
  322 D1:B6B0 1E 00 -  -      ld  e,0
  323 D1:B6B2 46 -  -  -  _:  ld  b,(hl)
  324 D1:B6B3 E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  325 D1:B6B4 E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  326 D1:B6B5 81 -  -  -          add a,c
  327 D1:B6B6 30 03 -  -          jr  nc,+_
  328 D1:B6B8 FD 23 -  -          ADDCYC(1)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  329 D1:B6BA 04 -  -  -          inc b
  330 D1:B6BB 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  331 D1:B6BC 0E 0C -  -          ld  c,BASETABLE_STRIDE
  332 D1:B6BE ED 4C -  -          mlt bc
  333 D1:B6C0 21 00 40 D0         ld  hl,PAGETABLE
  334 D1:B6C4 09 -  -  -          add hl,bc
  335 D1:B6C5 ED 27 -  -          ld  hl,(hl)
  336 D1:B6C7 06 00 -  -          ld  b,0
  337 D1:B6C9 4F -  -  -          ld  c,a
  338 D1:B6CA 09 -  -  -          add hl,bc
  339 D1:B6CB C9 -  -  -      ret
  340 D1:B6CC -  -  -  -      
  341 D1:B6CC -  -  -  -  subroutine6502_absy_ss_noDep:
  342 D1:B6CC DD 4E 02 -      ld  c,(ix+REGY)
  343 D1:B6CF 18 03 -  -      jr +_
  344 D1:B6D1 -  -  -  -  subroutine6502_absx_ss_noDep:
  345 D1:B6D1 DD 4E 01 -      ld  c,(ix+REGX)
  346 D1:B6D4 7E -  -  -  _:  ld  a,(hl)
  347 D1:B6D5 23 -  -  -      inc hl
  348 D1:B6D6 1C -  -  -      inc e
  349 D1:B6D7 20 15 -  -      jr nz,+_
  350 D1:B6D9 DD 56 06 -      ld  d,(ix+REGPC+1)
  351 D1:B6DC 14 -  -  -      inc d
  352 D1:B6DD 52 DD 1F 05     ld.s (ix+REGPC),de
  353 D1:B6E1 1E 0C -  -      ld  e,BASETABLE_STRIDE
  354 D1:B6E3 ED 5C -  -      mlt de
  355 D1:B6E5 21 00 40 D0     ld  hl,PAGETABLE
  356 D1:B6E9 19 -  -  -      add hl,de
  357 D1:B6EA ED 27 -  -      ld  hl,(hl) ;
  358 D1:B6EC 1E 00 -  -      ld  e,0
  359 D1:B6EE 46 -  -  -  _:  ld  b,(hl)
  360 D1:B6EF E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  361 D1:B6F0 E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  362 D1:B6F1 81 -  -  -          add a,c
  363 D1:B6F2 30 01 -  -          jr  nc,+_
  364 D1:B6F4 04 -  -  -          inc b
  365 D1:B6F5 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  366 D1:B6F6 0E 0C -  -          ld  c,BASETABLE_STRIDE
  367 D1:B6F8 ED 4C -  -          mlt bc
  368 D1:B6FA 21 00 40 D0         ld  hl,PAGETABLE
  369 D1:B6FE 09 -  -  -          add hl,bc
  370 D1:B6FF ED 27 -  -          ld  hl,(hl)
  371 D1:B701 06 00 -  -          ld  b,0
  372 D1:B703 4F -  -  -          ld  c,a
  373 D1:B704 09 -  -  -          add hl,bc
  374 D1:B705 C9 -  -  -      ret
  375 D1:B706 -  -  -  -  
  376 D1:B706 -  -  -  -  
  377 D1:B706 -  -  -  -  
  378 D1:B706 -  -  -  -  
  379 D1:B706 -  -  -  -  
  380 D1:B706 -  -  -  -  
  381 D1:B706 -  -  -  -  
  382 D1:B706 -  -  -  -  subroutine6502_adc_combined_end:
  383 D1:B706 DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  384 D1:B709 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  385 D1:B70A DD 7E 00 -      ld  a,(ix+REGA)
  386 D1:B70D 89 -  -  -      adc a,c
  387 D1:B70E DD 77 00 -      ld  (ix+REGA),a
  388 D1:B711 DD 46 04 CB 
              B0 E2 1C B7 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  389 D1:B733 C3 CC B5 D1     jp i6502NextLoad
  390 D1:B737 -  -  -  -  
  391 D1:B737 -  -  -  -  subroutine6502_sbc_combined_end:
  392 D1:B737 DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  393 D1:B73A 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  394 D1:B73B DD 7E 00 -      ld  a,(ix+REGA)
  395 D1:B73E 3F -  -  -      ccf
  396 D1:B73F 99 -  -  -      sbc a,c
  397 D1:B740 3F -  -  -      ccf
  398 D1:B741 DD 77 00 -      ld  (ix+REGA),a
  399 D1:B744 DD 46 04 CB 
              B0 E2 4F B7 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  400 D1:B766 C3 CC B5 D1     jp i6502NextLoad
  401 D1:B76A -  -  -  -  
  402 D1:B76A -  -  -  -  subroutine6502_cmp_combined_end:
  403 D1:B76A DD 7E 00 -      ld  a,(ix+REGA)
  404 D1:B76D 90 -  -  -      sub a,b
  405 D1:B76E 3F -  -  -      ccf     ;because the 6502 is strange like that.
  406 D1:B76F DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  407 D1:B789 C3 CC B5 D1     jp i6502NextLoad
  408 D1:B78D -  -  -  -  
  409 D1:B78D -  -  -  -  subroutine6502_take_branch:
  410 D1:B78D FD 23 -  -      ADDCYC(1)
  411 D1:B78F 7E -  -  -      ld  a,(hl)  ;offset byte
  412 D1:B790 6F -  -  -      ld  L,a
  413 D1:B791 87 -  -  -      add a,a
  414 D1:B792 9F -  -  -      sbc a,a
  415 D1:B793 67 -  -  -      ld  H,a     ;sign-extending offset byte
  416 D1:B794 DD 56 06 -      ld  d,(ix+REGPC+1)
  417 D1:B797 13 -  -  -      inc de
  418 D1:B798 52 19 -  -      add.s hl,de
  419 D1:B79A 7C -  -  -      ld  a,h
  420 D1:B79B BA -  -  -      cp  d       ;is high byte the same?
  421 D1:B79C 28 02 -  -      jr  z,+_    ;if so, do not add another clock
  422 D1:B79E FD 23 -  -      ADDCYC(1)
  423 D1:B7A0 52 DD 2F 05 _:  ld.s (ix+REGPC),hl
  424 D1:B7A4 C3 B6 B5 D1     jp  i6502FirstLoad
  425 D1:B7A8 -  -  -  -  
  426 D1:B7A8 -  -  -  -  
  427 D1:B7A8 -  -  -  -  ;-----------------------------------------------------------------------------
  428 D1:B7A8 -  -  -  -  
  429 D1:B7A8 -  -  -  -  ; *** **  *  *** ***** ***  *   *  *** ***** *** ***  **  *     ***  ***** *****                                                
  430 D1:B7A8 -  -  -  -  ;  *  **  * *      *   *  * *   * *      *    * *   * **  *    *     *       *                   
  431 D1:B7A8 -  -  -  -  ;  *  * * *  ***   *   ***  *   * *      *    * *   * * * *     ***  ***     *                          
  432 D1:B7A8 -  -  -  -  ;  *  *  **     *  *   *  * *   * *      *    * *   * *  **        * *       *                   
  433 D1:B7A8 -  -  -  -  ; *** *  **  ***   *   *  *  ***   ***   *   *** ***  *  **     ***  *****   *                                 
  434 D1:B7A8 -  -  -  -  
  435 D1:B7A8 -  -  -  -  ;-----------------------------------------------------------------------------
  436 D1:B7A8 -  -  -  -  
  437 D1:B7A8 -  -  -  -  ;-----------------------------------------------------------------------------
  438 D1:B7A8 -  -  -  -  ;-----------------------------------------------------------------------------
  439 D1:B7A8 -  -  -  -  ;-----------------------------------------------------------------------------
  440 D1:B7A8 -  -  -  -  ;Instructions by type: Transfer Instructions
  441 D1:B7A8 -  -  -  -  ;LDA - Load Accumulator with Memory
  442 D1:B7A8 -  -  -  -  ;    M -> A
  443 D1:B7A8 -  -  -  -  ;    N	Z	C	I	D	V
  444 D1:B7A8 -  -  -  -  ;    +	+	-	-	-	-
  445 D1:B7A8 -  -  -  -  
  446 D1:B7A8 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
  447 D1:B7A8 -  -  -  -  ;immediate	LDA #oper	A9	2	2
  448 D1:B7A8 -  -  -  -  inst6502_lda_imm:
  449 D1:B7A8 7E -  -  -      ld  a,(hl)
  450 D1:B7A9 DD 77 00 -      ld  (ix+REGA),a
  451 D1:B7AC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  452 D1:B7C0 ED 33 02 -      ADDCYC(2)
  453 D1:B7C3 C3 CC B5 D1     jp i6502NextLoad
  454 D1:B7C7 -  -  -  -  
  455 D1:B7C7 -  -  -  -  ;zeropage	LDA oper	A5	2	3
  456 D1:B7C7 -  -  -  -  inst6502_lda_zp:
  457 D1:B7C7 7E -  -  -      ld  a,(hl)
  458 D1:B7C8 01 00 38 D0     ld  bc,ZEROPAGE
  459 D1:B7CC 81 -  -  -      add a,c
  460 D1:B7CD 4F -  -  -      ld  c,a
  461 D1:B7CE 0A -  -  -      ld  a,(bc)
  462 D1:B7CF DD 77 00 -      ld  (ix+REGA),a
  463 D1:B7D2 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  464 D1:B7E6 ED 33 03 -      ADDCYC(3)
  465 D1:B7E9 C3 CC B5 D1     jp i6502NextLoad
  466 D1:B7ED -  -  -  -  
  467 D1:B7ED -  -  -  -  ;zeropage,X	LDA oper,X	B5	2	4 
  468 D1:B7ED -  -  -  -  inst6502_lda_zpx:
  469 D1:B7ED 7E -  -  -      ld  a,(hl)
  470 D1:B7EE 01 00 38 D0     ld  bc,ZEROPAGE
  471 D1:B7F2 81 -  -  -      add a,c
  472 D1:B7F3 DD 86 01 -      add a,(ix+REGX)
  473 D1:B7F6 4F -  -  -      ld  c,a
  474 D1:B7F7 0A -  -  -      ld  a,(bc)
  475 D1:B7F8 DD 77 00 -      ld  (ix+REGA),a
  476 D1:B7FB DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  477 D1:B80F ED 33 04 -      ADDCYC(4)
  478 D1:B812 C3 CC B5 D1     jp i6502NextLoad
  479 D1:B816 -  -  -  -  
  480 D1:B816 -  -  -  -  ;absolute	LDA oper	AD	3	4
  481 D1:B816 -  -  -  -  inst6502_lda_abs:
  482 D1:B816 CD 74 B6 D1     call subroutine6502_abs_split_start
  483 D1:B81A E5 -  -  -      push hl
  484 D1:B81B 50 -  -  -          ld  d,b
  485 D1:B81C 79 -  -  -          ld  a,c
  486 D1:B81D 0E 0C -  -          ld  c,BASETABLE_STRIDE
  487 D1:B81F ED 4C -  -          mlt bc
  488 D1:B821 21 00 40 D0         ld  hl,PAGETABLE
  489 D1:B825 09 -  -  -          add hl,bc
  490 D1:B826 ED 27 -  -          ld  hl,(hl)
  491 D1:B828 06 00 -  -          ld  b,0
  492 D1:B82A 4F -  -  -          ld  c,a
  493 D1:B82B 09 -  -  -          add hl,bc   ;full address
  494 D1:B82C CD 36 AE D1         READ_ACCESS
  495 D1:B830 DD 77 00 -          ld (ix+REGA),a
  496 D1:B833 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  497 D1:B847 ED 33 04 -          ADDCYC(4)
  498 D1:B84A E1 -  -  -      pop hl
  499 D1:B84B C3 CC B5 D1     jp i6502NextLoad
  500 D1:B84F -  -  -  -  
  501 D1:B84F -  -  -  -  ;absolute,X	LDA oper,X	BD	3	4* 
  502 D1:B84F -  -  -  -  inst6502_lda_absx:
  503 D1:B84F ED 33 04 -      ADDCYC(4)
  504 D1:B852 CD 95 B6 D1     PUSH_ABSXSPLIT
  505 D1:B856 CD 36 AE D1         READ_ACCESS
  506 D1:B85A DD 77 00 -          ld (ix+REGA),a
  507 D1:B85D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  508 D1:B871 E1 -  -  -      pop hl
  509 D1:B872 C3 CC B5 D1     jp i6502NextLoad
  510 D1:B876 -  -  -  -  
  511 D1:B876 -  -  -  -  ;absolute,Y	LDA oper,Y	B9	3	4* 
  512 D1:B876 -  -  -  -  inst6502_lda_absy:
  513 D1:B876 ED 33 04 -      ADDCYC(4)
  514 D1:B879 CD 90 B6 D1     PUSH_ABSYSPLIT
  515 D1:B87D CD 36 AE D1         READ_ACCESS
  516 D1:B881 DD 77 00 -          ld (ix+REGA),a
  517 D1:B884 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  518 D1:B898 E1 -  -  -      pop hl
  519 D1:B899 C3 CC B5 D1     jp i6502NextLoad
  520 D1:B89D -  -  -  -  
  521 D1:B89D -  -  -  -  ;(indirect,X)	LDA (oper,X)	A1	2	6
  522 D1:B89D -  -  -  -  inst6502_lda_indx:
  523 D1:B89D E5 -  -  -      push hl
  524 D1:B89E 7E -  -  -          ld  a,(hl)
  525 D1:B89F 21 00 38 D0         ld  hl,ZEROPAGE
  526 D1:B8A3 85 -  -  -          add a,L
  527 D1:B8A4 DD 86 01 -          add a,(ix+REGX)
  528 D1:B8A7 6F -  -  -          ld  L,a
  529 D1:B8A8 7E -  -  -          ld  a,(hl)
  530 D1:B8A9 2C -  -  -          inc L
  531 D1:B8AA 56 -  -  -          ld  d,(hl)
  532 D1:B8AB 42 -  -  -          ld  b,d
  533 D1:B8AC 0E 0C -  -          ld  c,BASETABLE_STRIDE
  534 D1:B8AE ED 4C -  -          mlt bc
  535 D1:B8B0 21 00 40 D0         ld  hl,PAGETABLE
  536 D1:B8B4 09 -  -  -          add hl,bc
  537 D1:B8B5 ED 27 -  -          ld  hl,(hl)
  538 D1:B8B7 06 00 -  -          ld  b,0
  539 D1:B8B9 4F -  -  -          ld  c,a
  540 D1:B8BA 09 -  -  -          add hl,bc
  541 D1:B8BB CD 36 AE D1         READ_ACCESS
  542 D1:B8BF DD 77 00 -          ld (ix+REGA),a
  543 D1:B8C2 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  544 D1:B8D6 ED 33 06 -          ADDCYC(6)
  545 D1:B8D9 E1 -  -  -      pop hl
  546 D1:B8DA C3 CC B5 D1     jp i6502NextLoad
  547 D1:B8DE -  -  -  -  
  548 D1:B8DE -  -  -  -  ;(indirect),Y	LDA (oper),Y	B1	2	5*
  549 D1:B8DE -  -  -  -  inst6502_lda_indy:
  550 D1:B8DE E5 -  -  -      push hl
  551 D1:B8DF 7E -  -  -          ld  a,(hl)
  552 D1:B8E0 21 00 38 D0         ld  hl,ZEROPAGE
  553 D1:B8E4 85 -  -  -          add a,L
  554 D1:B8E5 6F -  -  -          ld  L,a
  555 D1:B8E6 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  556 D1:B8E7 2C -  -  -          inc L
  557 D1:B8E8 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  558 D1:B8EB 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  559 D1:B8EC 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  560 D1:B8EE FD 23 -  -          ADDCYC(1)
  561 D1:B8F0 24 -  -  -          inc h
  562 D1:B8F1 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  563 D1:B8F2 2E 0C -  -          ld  L,BASETABLE_STRIDE
  564 D1:B8F4 ED 6C -  -          mlt hl          ;23.
  565 D1:B8F6 01 00 40 D0         ld  bc,PAGETABLE
  566 D1:B8FA 09 -  -  -          add hl,bc
  567 D1:B8FB ED 27 -  -          ld  hl,(hl)     ;address get.
  568 D1:B8FD 01 00 00 00         ld  bc,0
  569 D1:B901 4F -  -  -          ld  c,a
  570 D1:B902 09 -  -  -          add hl,bc       ;Full address get.
  571 D1:B903 CD 36 AE D1         READ_ACCESS
  572 D1:B907 DD 77 00 -          ld  (ix+REGA),a
  573 D1:B90A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  574 D1:B91E ED 33 05 -          ADDCYC(5)
  575 D1:B921 E1 -  -  -      pop hl
  576 D1:B922 C3 CC B5 D1     jp i6502NextLoad
  577 D1:B926 -  -  -  -  
  578 D1:B926 -  -  -  -  ;-----------------------------------------------------------------------------
  579 D1:B926 -  -  -  -  ;LDX - Load Index X with Memory
  580 D1:B926 -  -  -  -  ;    M -> X
  581 D1:B926 -  -  -  -  ;    N	Z	C	I	D	V
  582 D1:B926 -  -  -  -  ;    +	+	-	-	-	-
  583 D1:B926 -  -  -  -  
  584 D1:B926 -  -  -  -  ;immediate	LDX #oper	A2	2	2  
  585 D1:B926 -  -  -  -  inst6502_ldx_imm:
  586 D1:B926 7E -  -  -      ld  a,(hl)
  587 D1:B927 DD 77 01 -      ld  (ix+REGX),a
  588 D1:B92A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  589 D1:B93E ED 33 02 -      ADDCYC(2)
  590 D1:B941 C3 CC B5 D1     jp i6502NextLoad
  591 D1:B945 -  -  -  -  
  592 D1:B945 -  -  -  -  ;zeropage	LDX oper	A6	2	3 
  593 D1:B945 -  -  -  -  inst6502_ldx_zp:
  594 D1:B945 7E -  -  -      ld  a,(hl)
  595 D1:B946 01 00 38 D0     ld  bc,ZEROPAGE
  596 D1:B94A 81 -  -  -      add a,c
  597 D1:B94B 4F -  -  -      ld  c,a
  598 D1:B94C 0A -  -  -      ld  a,(bc)
  599 D1:B94D DD 77 01 -      ld  (ix+REGX),a
  600 D1:B950 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  601 D1:B964 ED 33 03 -      ADDCYC(3)
  602 D1:B967 C3 CC B5 D1     jp i6502NextLoad
  603 D1:B96B -  -  -  -  
  604 D1:B96B -  -  -  -  ;zeropage,Y	LDX oper,Y	B6	2	4  
  605 D1:B96B -  -  -  -  inst6502_ldx_zpy:
  606 D1:B96B 7E -  -  -      ld  a,(hl)
  607 D1:B96C 01 00 38 D0     ld  bc,ZEROPAGE
  608 D1:B970 81 -  -  -      add a,c
  609 D1:B971 DD 86 02 -      add a,(ix+REGY)
  610 D1:B974 4F -  -  -      ld  c,a
  611 D1:B975 0A -  -  -      ld  a,(bc)
  612 D1:B976 DD 77 01 -      ld  (ix+REGX),a
  613 D1:B979 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  614 D1:B98D ED 33 04 -      ADDCYC(4)
  615 D1:B990 C3 CC B5 D1     jp i6502NextLoad
  616 D1:B994 -  -  -  -  
  617 D1:B994 -  -  -  -  ;absolute	LDX oper	AE	3	4  
  618 D1:B994 -  -  -  -  inst6502_ldx_abs:
  619 D1:B994 CD 74 B6 D1     call subroutine6502_abs_split_start
  620 D1:B998 E5 -  -  -      push hl
  621 D1:B999 50 -  -  -          ld  d,b
  622 D1:B99A 79 -  -  -          ld  a,c
  623 D1:B99B 0E 0C -  -          ld  c,BASETABLE_STRIDE
  624 D1:B99D ED 4C -  -          mlt bc
  625 D1:B99F 21 00 40 D0         ld  hl,PAGETABLE
  626 D1:B9A3 09 -  -  -          add hl,bc
  627 D1:B9A4 ED 27 -  -          ld  hl,(hl)
  628 D1:B9A6 06 00 -  -          ld  b,0
  629 D1:B9A8 4F -  -  -          ld  c,a
  630 D1:B9A9 09 -  -  -          add hl,bc   ;full address
  631 D1:B9AA CD 36 AE D1         READ_ACCESS
  632 D1:B9AE DD 77 01 -          ld (ix+REGX),a
  633 D1:B9B1 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  634 D1:B9C5 ED 33 04 -          ADDCYC(4)
  635 D1:B9C8 E1 -  -  -      pop hl
  636 D1:B9C9 C3 CC B5 D1     jp i6502NextLoad
  637 D1:B9CD -  -  -  -  
  638 D1:B9CD -  -  -  -  ;absolute,Y	LDX oper,Y	BE	3	4* 
  639 D1:B9CD -  -  -  -  inst6502_ldx_absy:
  640 D1:B9CD ED 33 04 -      ADDCYC(4)
  641 D1:B9D0 CD 90 B6 D1     PUSH_ABSYSPLIT
  642 D1:B9D4 CD 36 AE D1         READ_ACCESS
  643 D1:B9D8 DD 77 01 -          ld (ix+REGX),a
  644 D1:B9DB DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  645 D1:B9EF E1 -  -  -      pop hl
  646 D1:B9F0 C3 CC B5 D1     jp i6502NextLoad
  647 D1:B9F4 -  -  -  -  
  648 D1:B9F4 -  -  -  -  ;-----------------------------------------------------------------------------
  649 D1:B9F4 -  -  -  -  ;LDY -  Load Index Y with Memory
  650 D1:B9F4 -  -  -  -  ;    M -> Y
  651 D1:B9F4 -  -  -  -  ;    N	Z	C	I	D	V
  652 D1:B9F4 -  -  -  -  ;    +	+	-	-	-	-
  653 D1:B9F4 -  -  -  -  
  654 D1:B9F4 -  -  -  -  ;immediate	LDY #oper	A0	2	2  
  655 D1:B9F4 -  -  -  -  inst6502_ldy_imm:
  656 D1:B9F4 7E -  -  -      ld  a,(hl)
  657 D1:B9F5 DD 77 02 -      ld  (ix+REGY),a
  658 D1:B9F8 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  659 D1:BA0C ED 33 02 -      ADDCYC(2)
  660 D1:BA0F C3 CC B5 D1     jp i6502NextLoad
  661 D1:BA13 -  -  -  -  
  662 D1:BA13 -  -  -  -  ;zeropage	LDY oper	A4	2	3  
  663 D1:BA13 -  -  -  -  inst6502_ldy_zp:
  664 D1:BA13 7E -  -  -      ld  a,(hl)
  665 D1:BA14 01 00 38 D0     ld  bc,ZEROPAGE
  666 D1:BA18 81 -  -  -      add a,c
  667 D1:BA19 4F -  -  -      ld  c,a
  668 D1:BA1A 0A -  -  -      ld  a,(bc)
  669 D1:BA1B DD 77 02 -      ld  (ix+REGY),a
  670 D1:BA1E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  671 D1:BA32 ED 33 03 -      ADDCYC(3)
  672 D1:BA35 C3 CC B5 D1     jp i6502NextLoad
  673 D1:BA39 -  -  -  -  
  674 D1:BA39 -  -  -  -  ;zeropage,X	LDY oper,X	B4	2	4  
  675 D1:BA39 -  -  -  -  inst6502_ldy_zpx:
  676 D1:BA39 7E -  -  -      ld  a,(hl)
  677 D1:BA3A 01 00 38 D0     ld  bc,ZEROPAGE
  678 D1:BA3E 81 -  -  -      add a,c
  679 D1:BA3F DD 86 01 -      add a,(ix+REGX)
  680 D1:BA42 4F -  -  -      ld  c,a
  681 D1:BA43 0A -  -  -      ld  a,(bc)
  682 D1:BA44 DD 77 02 -      ld  (ix+REGY),a
  683 D1:BA47 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  684 D1:BA5B ED 33 04 -      ADDCYC(4)
  685 D1:BA5E C3 CC B5 D1     jp i6502NextLoad
  686 D1:BA62 -  -  -  -  
  687 D1:BA62 -  -  -  -  ;absolute	LDY oper	AC	3	4  
  688 D1:BA62 -  -  -  -  inst6502_ldy_abs:
  689 D1:BA62 CD 74 B6 D1     call subroutine6502_abs_split_start
  690 D1:BA66 E5 -  -  -      push hl
  691 D1:BA67 50 -  -  -          ld  d,b
  692 D1:BA68 79 -  -  -          ld  a,c
  693 D1:BA69 0E 0C -  -          ld  c,BASETABLE_STRIDE
  694 D1:BA6B ED 4C -  -          mlt bc
  695 D1:BA6D 21 00 40 D0         ld  hl,PAGETABLE
  696 D1:BA71 09 -  -  -          add hl,bc
  697 D1:BA72 ED 27 -  -          ld  hl,(hl)
  698 D1:BA74 06 00 -  -          ld  b,0
  699 D1:BA76 4F -  -  -          ld  c,a
  700 D1:BA77 09 -  -  -          add hl,bc   ;full address
  701 D1:BA78 CD 36 AE D1         READ_ACCESS
  702 D1:BA7C DD 77 02 -          ld (ix+REGY),a
  703 D1:BA7F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  704 D1:BA93 ED 33 04 -          ADDCYC(4)
  705 D1:BA96 E1 -  -  -      pop hl
  706 D1:BA97 C3 CC B5 D1     jp i6502NextLoad
  707 D1:BA9B -  -  -  -  
  708 D1:BA9B -  -  -  -  ;absolute,X	LDY oper,X	BC	3	4* 
  709 D1:BA9B -  -  -  -  inst6502_ldy_absx:
  710 D1:BA9B ED 33 04 -      ADDCYC(4)
  711 D1:BA9E CD 95 B6 D1     PUSH_ABSXSPLIT
  712 D1:BAA2 CD 36 AE D1         READ_ACCESS
  713 D1:BAA6 DD 77 02 -          ld (ix+REGY),a
  714 D1:BAA9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  715 D1:BABD E1 -  -  -      pop hl
  716 D1:BABE C3 CC B5 D1     jp i6502NextLoad
  717 D1:BAC2 -  -  -  -  
  718 D1:BAC2 -  -  -  -  ;-----------------------------------------------------------------------------
  719 D1:BAC2 -  -  -  -  ;STA - Store Accumulator in Memory
  720 D1:BAC2 -  -  -  -  ;    A -> M
  721 D1:BAC2 -  -  -  -  ;    N	Z	C	I	D	V
  722 D1:BAC2 -  -  -  -  ;    -	-	-	-	-	-
  723 D1:BAC2 -  -  -  -  
  724 D1:BAC2 -  -  -  -  ;zeropage	STA oper	85	2	3  
  725 D1:BAC2 -  -  -  -  inst6502_sta_zp:
  726 D1:BAC2 7E -  -  -      ld  a,(hl)
  727 D1:BAC3 01 00 38 D0     ld  bc,ZEROPAGE
  728 D1:BAC7 81 -  -  -      add a,c
  729 D1:BAC8 4F -  -  -      ld  c,a
  730 D1:BAC9 DD 7E 00 -      ld  a,(ix+REGA)
  731 D1:BACC 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  732 D1:BACD ED 33 03 -      ADDCYC(3)
  733 D1:BAD0 C3 CC B5 D1     jp i6502NextLoad
  734 D1:BAD4 -  -  -  -  
  735 D1:BAD4 -  -  -  -  ;zeropage,X	STA oper,X	95	2	4  
  736 D1:BAD4 -  -  -  -  inst6502_sta_zpx:
  737 D1:BAD4 7E -  -  -      ld  a,(hl)
  738 D1:BAD5 01 00 38 D0     ld  bc,ZEROPAGE
  739 D1:BAD9 81 -  -  -      add a,c
  740 D1:BADA DD 86 01 -      add a,(ix+REGX)
  741 D1:BADD 4F -  -  -      ld  c,a
  742 D1:BADE DD 7E 00 -      ld  a,(ix+REGA)
  743 D1:BAE1 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  744 D1:BAE2 ED 33 04 -      ADDCYC(4)
  745 D1:BAE5 C3 CC B5 D1     jp i6502NextLoad
  746 D1:BAE9 -  -  -  -  
  747 D1:BAE9 -  -  -  -  ;absolute	STA oper	8D	3	4
  748 D1:BAE9 -  -  -  -  inst6502_sta_abs:
  749 D1:BAE9 CD 74 B6 D1     call subroutine6502_abs_split_start
  750 D1:BAED E5 -  -  -      push hl
  751 D1:BAEE 50 -  -  -          ld  d,b
  752 D1:BAEF 79 -  -  -          ld  a,c
  753 D1:BAF0 0E 0C -  -          ld  c,BASETABLE_STRIDE
  754 D1:BAF2 ED 4C -  -          mlt bc
  755 D1:BAF4 21 00 40 D0         ld  hl,PAGETABLE
  756 D1:BAF8 09 -  -  -          add hl,bc
  757 D1:BAF9 ED 27 -  -          ld  hl,(hl)
  758 D1:BAFB 06 00 -  -          ld  b,0
  759 D1:BAFD 4F -  -  -          ld  c,a
  760 D1:BAFE 09 -  -  -          add hl,bc   ;full address
  761 D1:BAFF DD 46 00 -          ld  b,(ix+REGA)
  762 D1:BB02 CD 59 AE D1         WRITE_ACCESS
  763 D1:BB06 ED 33 04 -          ADDCYC(4)
  764 D1:BB09 E1 -  -  -      pop hl
  765 D1:BB0A C3 CC B5 D1     jp i6502NextLoad
  766 D1:BB0E -  -  -  -  
  767 D1:BB0E -  -  -  -  ;absolute,X	STA oper,X	9D	3	5  
  768 D1:BB0E -  -  -  -  inst6502_sta_absx:
  769 D1:BB0E ED 33 05 -      ADDCYC(5)
  770 D1:BB11 CD D1 B6 D1     PUSH_ABSXSPLIT_NODEP
  771 D1:BB15 DD 46 00 -          ld  b,(ix+REGA)
  772 D1:BB18 CD 59 AE D1         WRITE_ACCESS
  773 D1:BB1C E1 -  -  -      pop hl
  774 D1:BB1D C3 CC B5 D1     jp i6502NextLoad
  775 D1:BB21 -  -  -  -  
  776 D1:BB21 -  -  -  -  ;absolute,Y	STA oper,Y	99	3	5  
  777 D1:BB21 -  -  -  -  inst6502_sta_absy:
  778 D1:BB21 ED 33 05 -      ADDCYC(5)
  779 D1:BB24 CD CC B6 D1     PUSH_ABSYSPLIT_NODEP
  780 D1:BB28 DD 46 00 -          ld  b,(ix+REGA)
  781 D1:BB2B CD 59 AE D1         WRITE_ACCESS
  782 D1:BB2F E1 -  -  -      pop hl
  783 D1:BB30 C3 CC B5 D1     jp i6502NextLoad
  784 D1:BB34 -  -  -  -  
  785 D1:BB34 -  -  -  -  ;(indirect,X)	STA (oper,X)	81	2	6  
  786 D1:BB34 -  -  -  -  inst6502_sta_indx:
  787 D1:BB34 E5 -  -  -      push hl
  788 D1:BB35 7E -  -  -          ld  a,(hl)
  789 D1:BB36 21 00 38 D0         ld  hl,ZEROPAGE
  790 D1:BB3A 85 -  -  -          add a,L
  791 D1:BB3B DD 86 01 -          add a,(ix+REGX)
  792 D1:BB3E 6F -  -  -          ld  L,a
  793 D1:BB3F 7E -  -  -          ld  a,(hl)
  794 D1:BB40 2C -  -  -          inc L
  795 D1:BB41 56 -  -  -          ld  d,(hl)
  796 D1:BB42 42 -  -  -          ld  b,d
  797 D1:BB43 0E 0C -  -          ld  c,BASETABLE_STRIDE
  798 D1:BB45 ED 4C -  -          mlt bc
  799 D1:BB47 21 00 40 D0         ld  hl,PAGETABLE
  800 D1:BB4B 09 -  -  -          add hl,bc
  801 D1:BB4C ED 27 -  -          ld  hl,(hl)
  802 D1:BB4E 06 00 -  -          ld  b,0
  803 D1:BB50 4F -  -  -          ld  c,a
  804 D1:BB51 09 -  -  -          add hl,bc
  805 D1:BB52 DD 46 00 -          ld  b,(ix+REGA)
  806 D1:BB55 CD 59 AE D1         WRITE_ACCESS
  807 D1:BB59 ED 33 06 -          ADDCYC(6)
  808 D1:BB5C E1 -  -  -      pop hl
  809 D1:BB5D C3 CC B5 D1     jp i6502NextLoad
  810 D1:BB61 -  -  -  -  
  811 D1:BB61 -  -  -  -  ;(indirect),Y	STA (oper),Y	91	2	6  
  812 D1:BB61 -  -  -  -  inst6502_sta_indy:
  813 D1:BB61 E5 -  -  -      push hl
  814 D1:BB62 7E -  -  -          ld  a,(hl)
  815 D1:BB63 21 00 38 D0         ld  hl,ZEROPAGE
  816 D1:BB67 85 -  -  -          add a,L
  817 D1:BB68 6F -  -  -          ld  L,a
  818 D1:BB69 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  819 D1:BB6A 2C -  -  -          inc L
  820 D1:BB6B DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  821 D1:BB6E 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  822 D1:BB6F 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  823 D1:BB71 24 -  -  -          inc h
  824 D1:BB72 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  825 D1:BB73 2E 0C -  -          ld  L,BASETABLE_STRIDE
  826 D1:BB75 ED 6C -  -          mlt hl          ;23.
  827 D1:BB77 01 00 40 D0         ld  bc,PAGETABLE
  828 D1:BB7B 09 -  -  -          add hl,bc
  829 D1:BB7C ED 27 -  -          ld  hl,(hl)     ;address get.
  830 D1:BB7E 01 00 00 00         ld  bc,0
  831 D1:BB82 4F -  -  -          ld  c,a
  832 D1:BB83 09 -  -  -          add hl,bc       ;Full address get.
  833 D1:BB84 DD 46 00 -          ld  b,(ix+REGA)
  834 D1:BB87 CD 59 AE D1         WRITE_ACCESS
  835 D1:BB8B ED 33 06 -          ADDCYC(6)
  836 D1:BB8E E1 -  -  -      pop hl
  837 D1:BB8F C3 CC B5 D1     jp i6502NextLoad
  838 D1:BB93 -  -  -  -  
  839 D1:BB93 -  -  -  -  ;-----------------------------------------------------------------------------
  840 D1:BB93 -  -  -  -  ;STX - Store Index X in Memory
  841 D1:BB93 -  -  -  -  ;    X -> M
  842 D1:BB93 -  -  -  -  ;    N	Z	C	I	D	V
  843 D1:BB93 -  -  -  -  ;    -	-	-	-	-	-
  844 D1:BB93 -  -  -  -  
  845 D1:BB93 -  -  -  -  ;zeropage	STX oper	86	2	3  
  846 D1:BB93 -  -  -  -  inst6502_stx_zp:
  847 D1:BB93 7E -  -  -      ld  a,(hl)
  848 D1:BB94 01 00 38 D0     ld  bc,ZEROPAGE
  849 D1:BB98 81 -  -  -      add a,c
  850 D1:BB99 4F -  -  -      ld  c,a
  851 D1:BB9A DD 7E 01 -      ld  a,(ix+REGX)
  852 D1:BB9D 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  853 D1:BB9E ED 33 03 -      ADDCYC(3)
  854 D1:BBA1 C3 CC B5 D1     jp i6502NextLoad
  855 D1:BBA5 -  -  -  -  
  856 D1:BBA5 -  -  -  -  ;zeropage,Y	STX oper,Y	96	2	4  
  857 D1:BBA5 -  -  -  -  inst6502_stx_zpy:
  858 D1:BBA5 7E -  -  -      ld  a,(hl)
  859 D1:BBA6 01 00 38 D0     ld  bc,ZEROPAGE
  860 D1:BBAA 81 -  -  -      add a,c
  861 D1:BBAB DD 86 02 -      add a,(ix+REGY)
  862 D1:BBAE 4F -  -  -      ld  c,a
  863 D1:BBAF DD 7E 01 -      ld  a,(ix+REGX)
  864 D1:BBB2 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  865 D1:BBB3 ED 33 04 -      ADDCYC(4)
  866 D1:BBB6 C3 CC B5 D1     jp i6502NextLoad
  867 D1:BBBA -  -  -  -  
  868 D1:BBBA -  -  -  -  ;absolute	STX oper	8E	3	4  
  869 D1:BBBA -  -  -  -  inst6502_stx_abs:
  870 D1:BBBA CD 74 B6 D1     call subroutine6502_abs_split_start
  871 D1:BBBE E5 -  -  -      push hl
  872 D1:BBBF 50 -  -  -          ld  d,b
  873 D1:BBC0 79 -  -  -          ld  a,c
  874 D1:BBC1 0E 0C -  -          ld  c,BASETABLE_STRIDE
  875 D1:BBC3 ED 4C -  -          mlt bc
  876 D1:BBC5 21 00 40 D0         ld  hl,PAGETABLE
  877 D1:BBC9 09 -  -  -          add hl,bc
  878 D1:BBCA ED 27 -  -          ld  hl,(hl)
  879 D1:BBCC 06 00 -  -          ld  b,0
  880 D1:BBCE 4F -  -  -          ld  c,a
  881 D1:BBCF 09 -  -  -          add hl,bc   ;full address
  882 D1:BBD0 DD 46 01 -          ld  b,(ix+REGX)
  883 D1:BBD3 CD 59 AE D1         WRITE_ACCESS
  884 D1:BBD7 ED 33 04 -          ADDCYC(4)
  885 D1:BBDA E1 -  -  -      pop hl
  886 D1:BBDB C3 CC B5 D1     jp i6502NextLoad
  887 D1:BBDF -  -  -  -  
  888 D1:BBDF -  -  -  -  ;-----------------------------------------------------------------------------
  889 D1:BBDF -  -  -  -  ;STY - Store Index Y in Memory
  890 D1:BBDF -  -  -  -  ;    Y -> M
  891 D1:BBDF -  -  -  -  ;    N	Z	C	I	D	V
  892 D1:BBDF -  -  -  -  ;    -	-	-	-	-	-
  893 D1:BBDF -  -  -  -  
  894 D1:BBDF -  -  -  -  ;zeropage	STY oper	84	2	3  
  895 D1:BBDF -  -  -  -  inst6502_sty_zp:
  896 D1:BBDF 7E -  -  -      ld  a,(hl)
  897 D1:BBE0 01 00 38 D0     ld  bc,ZEROPAGE
  898 D1:BBE4 81 -  -  -      add a,c
  899 D1:BBE5 4F -  -  -      ld  c,a
  900 D1:BBE6 DD 7E 02 -      ld  a,(ix+REGY)
  901 D1:BBE9 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  902 D1:BBEA ED 33 03 -      ADDCYC(3)
  903 D1:BBED C3 CC B5 D1     jp i6502NextLoad
  904 D1:BBF1 -  -  -  -  
  905 D1:BBF1 -  -  -  -  ;zeropage,X	STY oper,X	94	2	4  
  906 D1:BBF1 -  -  -  -  inst6502_sty_zpx:
  907 D1:BBF1 7E -  -  -      ld  a,(hl)
  908 D1:BBF2 01 00 38 D0     ld  bc,ZEROPAGE
  909 D1:BBF6 81 -  -  -      add a,c
  910 D1:BBF7 DD 86 01 -      add a,(ix+REGX)
  911 D1:BBFA 4F -  -  -      ld  c,a
  912 D1:BBFB DD 7E 02 -      ld  a,(ix+REGY)
  913 D1:BBFE 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  914 D1:BBFF ED 33 04 -      ADDCYC(4)
  915 D1:BC02 C3 CC B5 D1     jp i6502NextLoad
  916 D1:BC06 -  -  -  -  
  917 D1:BC06 -  -  -  -  ;absolute	STY oper	8C	3	4  
  918 D1:BC06 -  -  -  -  inst6502_sty_abs:
  919 D1:BC06 CD 74 B6 D1     call subroutine6502_abs_split_start
  920 D1:BC0A E5 -  -  -      push hl
  921 D1:BC0B 50 -  -  -          ld  d,b
  922 D1:BC0C 79 -  -  -          ld  a,c
  923 D1:BC0D 0E 0C -  -          ld  c,BASETABLE_STRIDE
  924 D1:BC0F ED 4C -  -          mlt bc
  925 D1:BC11 21 00 40 D0         ld  hl,PAGETABLE
  926 D1:BC15 09 -  -  -          add hl,bc
  927 D1:BC16 ED 27 -  -          ld  hl,(hl)
  928 D1:BC18 06 00 -  -          ld  b,0
  929 D1:BC1A 4F -  -  -          ld  c,a
  930 D1:BC1B 09 -  -  -          add hl,bc   ;full address
  931 D1:BC1C DD 46 02 -          ld  b,(ix+REGY)
  932 D1:BC1F CD 59 AE D1         WRITE_ACCESS
  933 D1:BC23 ED 33 04 -          ADDCYC(4)
  934 D1:BC26 E1 -  -  -      pop hl
  935 D1:BC27 C3 CC B5 D1     jp i6502NextLoad
  936 D1:BC2B -  -  -  -  
  937 D1:BC2B -  -  -  -  ;-----------------------------------------------------------------------------
  938 D1:BC2B -  -  -  -  ;TAX - Transfer Accumulator to Index X [A -> X]
  939 D1:BC2B -  -  -  -  ;N	Z	C	I	D	V
  940 D1:BC2B -  -  -  -  ;+	+	-	-	-	-
  941 D1:BC2B -  -  -  -  ;implied	TAX	AA	1	2
  942 D1:BC2B -  -  -  -  inst6502_tax:
  943 D1:BC2B DD 7E 00 -      ld  a,(ix+REGA)
  944 D1:BC2E DD 77 01 -      ld  (ix+REGX),a
  945 D1:BC31 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  946 D1:BC45 ED 33 02 -      ADDCYC(2)
  947 D1:BC48 C3 E5 B5 D1     jp i6502FinishLoad
  948 D1:BC4C -  -  -  -  
  949 D1:BC4C -  -  -  -  ;TAY - Transfer Accumulator to Index Y [A -> Y]
  950 D1:BC4C -  -  -  -  ;N	Z	C	I	D	V
  951 D1:BC4C -  -  -  -  ;+	+	-	-	-	-
  952 D1:BC4C -  -  -  -  ;implied	TAY	A8	1	2
  953 D1:BC4C -  -  -  -  inst6502_tay:
  954 D1:BC4C DD 7E 00 -      ld  a,(ix+REGA)
  955 D1:BC4F DD 77 02 -      ld  (ix+REGY),a
  956 D1:BC52 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  957 D1:BC66 ED 33 02 -      ADDCYC(2)
  958 D1:BC69 C3 E5 B5 D1     jp i6502FinishLoad
  959 D1:BC6D -  -  -  -  
  960 D1:BC6D -  -  -  -  ;TSX - Transfer Stack Pointer to Index X [SP -> X]
  961 D1:BC6D -  -  -  -  ;N	Z	C	I	D	V
  962 D1:BC6D -  -  -  -  ;+	+	-	-	-	-
  963 D1:BC6D -  -  -  -  ;implied	TSX	BA	1	2
  964 D1:BC6D -  -  -  -  inst6502_tsx:
  965 D1:BC6D DD 7E 03 -      ld  a,(ix+REGSP)
  966 D1:BC70 DD 77 01 -      ld  (ix+REGX),a
  967 D1:BC73 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  968 D1:BC87 ED 33 02 -      ADDCYC(2)
  969 D1:BC8A C3 E5 B5 D1     jp i6502FinishLoad
  970 D1:BC8E -  -  -  -  
  971 D1:BC8E -  -  -  -  ;TXA - Transfer Index X to Accumulator [X -> A]
  972 D1:BC8E -  -  -  -  ;N	Z	C	I	D	V
  973 D1:BC8E -  -  -  -  ;+	+	-	-	-	-
  974 D1:BC8E -  -  -  -  ;implied	TXA	8A	1	2
  975 D1:BC8E -  -  -  -  inst6502_txa:
  976 D1:BC8E DD 7E 01 -      ld  a,(ix+REGX)
  977 D1:BC91 DD 77 00 -      ld  (ix+REGA),a
  978 D1:BC94 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  979 D1:BCA8 ED 33 02 -      ADDCYC(2)
  980 D1:BCAB C3 E5 B5 D1     jp i6502FinishLoad
  981 D1:BCAF -  -  -  -  
  982 D1:BCAF -  -  -  -  ;TXS - Transfer Index X to Stack Pointer [X -> SP]
  983 D1:BCAF -  -  -  -  ;N	Z	C	I	D	V
  984 D1:BCAF -  -  -  -  ;-	-	-	-	-	-
  985 D1:BCAF -  -  -  -  ;implied	TXS	9A	1	2
  986 D1:BCAF -  -  -  -  inst6502_txs:
  987 D1:BCAF DD 7E 01 -      ld  a,(ix+REGX)
  988 D1:BCB2 DD 77 03 -      ld  (ix+REGSP),a
  989 D1:BCB5 ED 33 02 -      ADDCYC(2)
  990 D1:BCB8 C3 E5 B5 D1     jp i6502FinishLoad
  991 D1:BCBC -  -  -  -  
  992 D1:BCBC -  -  -  -  ;TYA - Transfer Index Y to Accumulator [Y -> A]
  993 D1:BCBC -  -  -  -  ;N	Z	C	I	D	V
  994 D1:BCBC -  -  -  -  ;+	+	-	-	-	-
  995 D1:BCBC -  -  -  -  ;implied	TYA	98	1	2
  996 D1:BCBC -  -  -  -  inst6502_tya:
  997 D1:BCBC DD 7E 02 -      ld  a,(ix+REGY)
  998 D1:BCBF DD 77 00 -      ld  (ix+REGA),a
  999 D1:BCC2 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1000 D1:BCD6 ED 33 02 -      ADDCYC(2)
 1001 D1:BCD9 C3 E5 B5 D1     jp i6502FinishLoad
 1002 D1:BCDD -  -  -  -  
 1003 D1:BCDD -  -  -  -  ;-----------------------------------------------------------------------------
 1004 D1:BCDD -  -  -  -  ;-----------------------------------------------------------------------------
 1005 D1:BCDD -  -  -  -  ;-----------------------------------------------------------------------------
 1006 D1:BCDD -  -  -  -  ;Instructions by type: Stack Instructions
 1007 D1:BCDD -  -  -  -  ;PHA - Push Accumulator on Stack
 1008 D1:BCDD -  -  -  -  ;    push A
 1009 D1:BCDD -  -  -  -  ;    N	Z	C	I	D	V
 1010 D1:BCDD -  -  -  -  ;    -	-	-	-	-	-
 1011 D1:BCDD -  -  -  -  ;implied	PHA	48	1	3 
 1012 D1:BCDD -  -  -  -  inst6502_pha:
 1013 D1:BCDD ED 33 03 -      ADDCYC(3)
 1014 D1:BCE0 DD 7E 00 -      ld  a,(ix+REGA)
 1015 D1:BCE3 01 00 39 D0     ld  bc,STACKBASE
 1016 D1:BCE7 DD 4E 03 -      ld  c,(ix+REGSP)
 1017 D1:BCEA 02 -  -  -      ld  (bc),a
 1018 D1:BCEB 0D -  -  -      dec c
 1019 D1:BCEC DD 71 03 -      ld  (ix+REGSP),c
 1020 D1:BCEF C3 E5 B5 D1     jp i6502FinishLoad
 1021 D1:BCF3 -  -  -  -  
 1022 D1:BCF3 -  -  -  -  ;PHP - Push Processor Status on Stack
 1023 D1:BCF3 -  -  -  -  ;    The status register will be pushed with the break
 1024 D1:BCF3 -  -  -  -  ;    flag and bit 5 set to 1.
 1025 D1:BCF3 -  -  -  -  ;    push SR
 1026 D1:BCF3 -  -  -  -  ;    N	Z	C	I	D	V
 1027 D1:BCF3 -  -  -  -  ;    -	-	-	-	-	-
 1028 D1:BCF3 -  -  -  -  ;implied	PHP	08	1	3  
 1029 D1:BCF3 -  -  -  -  inst6502_php:
 1030 D1:BCF3 ED 33 03 -      ADDCYC(3)
 1031 D1:BCF6 DD 7E 04 -      ld  a,(ix+REGSR)
 1032 D1:BCF9 F6 30 -  -      or  a,%00110000
 1033 D1:BCFB 01 00 39 D0     ld  bc,STACKBASE
 1034 D1:BCFF DD 4E 03 -      ld  c,(ix+REGSP)
 1035 D1:BD02 02 -  -  -      ld  (bc),a
 1036 D1:BD03 0D -  -  -      dec c
 1037 D1:BD04 DD 71 03 -      ld  (ix+REGSP),c
 1038 D1:BD07 C3 E5 B5 D1     jp i6502FinishLoad
 1039 D1:BD0B -  -  -  -  
 1040 D1:BD0B -  -  -  -  
 1041 D1:BD0B -  -  -  -  
 1042 D1:BD0B -  -  -  -  ;PLA - Pull Accumulator from Stack
 1043 D1:BD0B -  -  -  -  ;    pull A
 1044 D1:BD0B -  -  -  -  ;    N	Z	C	I	D	V
 1045 D1:BD0B -  -  -  -  ;    +	+	-	-	-	-
 1046 D1:BD0B -  -  -  -  ;implied	PLA	68	1	4  
 1047 D1:BD0B -  -  -  -  inst6502_pla:
 1048 D1:BD0B ED 33 04 -      ADDCYC(4)
 1049 D1:BD0E 01 00 39 D0     ld  bc,STACKBASE
 1050 D1:BD12 DD 4E 03 -      ld  c,(ix+REGSP)
 1051 D1:BD15 0C -  -  -      inc c
 1052 D1:BD16 0A -  -  -      ld  a,(bc)
 1053 D1:BD17 DD 71 03 -      ld  (ix+REGSP),c
 1054 D1:BD1A DD 77 00 -      ld  (ix+REGA),a
 1055 D1:BD1D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1056 D1:BD31 C3 E5 B5 D1     jp i6502FinishLoad
 1057 D1:BD35 -  -  -  -  
 1058 D1:BD35 -  -  -  -  ;PLP - Pull Processor Status from Stack
 1059 D1:BD35 -  -  -  -  ;    The status register will be pulled with the break
 1060 D1:BD35 -  -  -  -  ;    flag and bit 5 ignored.
 1061 D1:BD35 -  -  -  -  ;    pull SR
 1062 D1:BD35 -  -  -  -  ;    N	Z	C	I	D	V
 1063 D1:BD35 -  -  -  -  ;    from stack
 1064 D1:BD35 -  -  -  -  ;implied	PLP	28	1	4  
 1065 D1:BD35 -  -  -  -  inst6502_plp:
 1066 D1:BD35 ED 33 04 -      ADDCYC(4)
 1067 D1:BD38 01 00 39 D0     ld  bc,STACKBASE
 1068 D1:BD3C DD 4E 03 -      ld  c,(ix+REGSP)
 1069 D1:BD3F 0C -  -  -      inc c
 1070 D1:BD40 0A -  -  -      ld  a,(bc)
 1071 D1:BD41 DD 71 03 -      ld  (ix+REGSP),c
 1072 D1:BD44 DD 46 04 -      ld  b,(ix+REGSR)
 1073 D1:BD47 A8 -  -  -      xor a,b
 1074 D1:BD48 E6 CF -  -      and a,%11001111
 1075 D1:BD4A A8 -  -  -      xor a,b
 1076 D1:BD4B DD 77 04 -      ld  (ix+REGSR),a
 1077 D1:BD4E C3 E5 B5 D1     jp i6502FinishLoad
 1078 D1:BD52 -  -  -  -  
 1079 D1:BD52 -  -  -  -  
 1080 D1:BD52 -  -  -  -  ;-----------------------------------------------------------------------------
 1081 D1:BD52 -  -  -  -  ;-----------------------------------------------------------------------------
 1082 D1:BD52 -  -  -  -  ;-----------------------------------------------------------------------------
 1083 D1:BD52 -  -  -  -  ;Instructions by type: Decrements and Increments
 1084 D1:BD52 -  -  -  -  
 1085 D1:BD52 -  -  -  -  ;DEC -  Decrement Memory by One
 1086 D1:BD52 -  -  -  -  ;    M - 1 -> M
 1087 D1:BD52 -  -  -  -  ;    N	Z	C	I	D	V
 1088 D1:BD52 -  -  -  -  ;    +	+	-	-	-	-
 1089 D1:BD52 -  -  -  -  ;    addressing	assembler	opc	bytes	cycles
 1090 D1:BD52 -  -  -  -  
 1091 D1:BD52 -  -  -  -  ;    zeropage	DEC oper	C6	2	5  
 1092 D1:BD52 -  -  -  -  inst6502_dec_zp:
 1093 D1:BD52 7E -  -  -      ld  a,(hl)
 1094 D1:BD53 01 00 38 D0     ld  bc,ZEROPAGE
 1095 D1:BD57 81 -  -  -      add a,c
 1096 D1:BD58 4F -  -  -      ld  c,a
 1097 D1:BD59 0A -  -  -      ld  a,(bc)
 1098 D1:BD5A 3D -  -  -      dec a
 1099 D1:BD5B 02 -  -  -      ld  (bc),a
 1100 D1:BD5C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1101 D1:BD70 ED 33 05 -      ADDCYC(5)
 1102 D1:BD73 C3 CC B5 D1     jp i6502NextLoad
 1103 D1:BD77 -  -  -  -  
 1104 D1:BD77 -  -  -  -  ;    zeropage,X	DEC oper,X	D6	2	6  
 1105 D1:BD77 -  -  -  -  inst6502_dec_zpx:
 1106 D1:BD77 7E -  -  -      ld  a,(hl)
 1107 D1:BD78 01 00 38 D0     ld  bc,ZEROPAGE
 1108 D1:BD7C 81 -  -  -      add a,c
 1109 D1:BD7D DD 86 01 -      add a,(ix+REGX)
 1110 D1:BD80 4F -  -  -      ld  c,a
 1111 D1:BD81 0A -  -  -      ld  a,(bc)
 1112 D1:BD82 3D -  -  -      dec a
 1113 D1:BD83 02 -  -  -      ld  (bc),a
 1114 D1:BD84 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1115 D1:BD98 ED 33 06 -      ADDCYC(6)
 1116 D1:BD9B C3 CC B5 D1     jp i6502NextLoad
 1117 D1:BD9F -  -  -  -  
 1118 D1:BD9F -  -  -  -  ;    absolute	DEC oper	CE	3	6  
 1119 D1:BD9F -  -  -  -  inst6502_dec_abs:
 1120 D1:BD9F CD 74 B6 D1     call subroutine6502_abs_split_start
 1121 D1:BDA3 E5 -  -  -      push hl
 1122 D1:BDA4 50 -  -  -          ld  d,b
 1123 D1:BDA5 79 -  -  -          ld  a,c
 1124 D1:BDA6 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1125 D1:BDA8 ED 4C -  -          mlt bc
 1126 D1:BDAA 21 00 40 D0         ld  hl,PAGETABLE
 1127 D1:BDAE 09 -  -  -          add hl,bc
 1128 D1:BDAF ED 27 -  -          ld  hl,(hl)
 1129 D1:BDB1 06 00 -  -          ld  b,0
 1130 D1:BDB3 4F -  -  -          ld  c,a
 1131 D1:BDB4 09 -  -  -          add hl,bc   ;full address
 1132 D1:BDB5 CD 36 AE D1         READ_ACCESS
 1133 D1:BDB9 3D -  -  -          dec a
 1134 D1:BDBA 47 -  -  -          ld  b,a
 1135 D1:BDBB -  -  -  -          ;
 1136 D1:BDBB DD 7E 04 -          ld  a,(ix+REGSR)
 1137 D1:BDBE CB 8F -  -          res SF_ZERO,a
 1138 D1:BDC0 20 02 -  -          jr  nz,$+4
 1139 D1:BDC2 CB CF -  -          set SF_ZERO,a
 1140 D1:BDC4 CB BF -  -          res SF_NEG,a
 1141 D1:BDC6 F2 CC BD D1         jp  p,$+6
 1142 D1:BDCA CB FF -  -          set SF_NEG,a
 1143 D1:BDCC DD 77 04 -          ld  (ix+REGSR),a
 1144 D1:BDCF -  -  -  -          ;
 1145 D1:BDCF CD 59 AE D1         WRITE_ACCESS
 1146 D1:BDD3 ED 33 06 -          ADDCYC(6)
 1147 D1:BDD6 E1 -  -  -      pop hl
 1148 D1:BDD7 C3 CC B5 D1     jp i6502NextLoad
 1149 D1:BDDB -  -  -  -  
 1150 D1:BDDB -  -  -  -  ;    absolute,X	DEC oper,X	DE	3	7  
 1151 D1:BDDB -  -  -  -  inst6502_dec_absx:
 1152 D1:BDDB ED 33 07 -      ADDCYC(7)
 1153 D1:BDDE CD D1 B6 D1     PUSH_ABSXSPLIT_NODEP
 1154 D1:BDE2 CD 36 AE D1         READ_ACCESS
 1155 D1:BDE6 3D -  -  -          dec a
 1156 D1:BDE7 47 -  -  -          ld  b,a
 1157 D1:BDE8 -  -  -  -          ;
 1158 D1:BDE8 DD 7E 04 -          ld  a,(ix+REGSR)
 1159 D1:BDEB CB 8F -  -          res SF_ZERO,a
 1160 D1:BDED 20 02 -  -          jr  nz,$+4
 1161 D1:BDEF CB CF -  -          set SF_ZERO,a
 1162 D1:BDF1 CB BF -  -          res SF_NEG,a
 1163 D1:BDF3 F2 F9 BD D1         jp  p,$+6
 1164 D1:BDF7 CB FF -  -          set SF_NEG,a
 1165 D1:BDF9 DD 77 04 -          ld  (ix+REGSR),a
 1166 D1:BDFC -  -  -  -          ;
 1167 D1:BDFC CD 59 AE D1         WRITE_ACCESS
 1168 D1:BE00 E1 -  -  -      pop hl
 1169 D1:BE01 C3 CC B5 D1     jp i6502NextLoad
 1170 D1:BE05 -  -  -  -  
 1171 D1:BE05 -  -  -  -  ;DEX - Decrement Index X by One [X - 1 -> X]
 1172 D1:BE05 -  -  -  -  ;Flags altered: NZ
 1173 D1:BE05 -  -  -  -  ;implied	DEX	CA	1	2  
 1174 D1:BE05 -  -  -  -  inst6502_dex:
 1175 D1:BE05 DD 35 01 -      dec (ix+REGX)
 1176 D1:BE08 DD 7E 04 -  _:  ld  a,(ix+REGSR)
 1177 D1:BE0B CB 8F -  -      res SF_ZERO,a
 1178 D1:BE0D 20 02 -  -      jr  nz,$+4
 1179 D1:BE0F CB CF -  -      set SF_ZERO,a
 1180 D1:BE11 CB BF -  -      res SF_NEG,a
 1181 D1:BE13 F2 19 BE D1     jp  p,$+6
 1182 D1:BE17 CB FF -  -      set SF_NEG,a
 1183 D1:BE19 DD 77 04 -      ld  (ix+REGSR),a
 1184 D1:BE1C ED 33 02 -      ADDCYC(2)
 1185 D1:BE1F C3 E5 B5 D1     jp i6502FinishLoad
 1186 D1:BE23 -  -  -  -  
 1187 D1:BE23 -  -  -  -  ;DEY - Decrement Index Y by One [Y - 1 -> Y]
 1188 D1:BE23 -  -  -  -  ;Flags altered: NZ
 1189 D1:BE23 -  -  -  -  ;implied	DEY	88	1	2  
 1190 D1:BE23 -  -  -  -  inst6502_dey:
 1191 D1:BE23 DD 35 02 -      dec (ix+REGY)
 1192 D1:BE26 18 E0 -  -      jr  -_
 1193 D1:BE28 -  -  -  -  
 1194 D1:BE28 -  -  -  -  
 1195 D1:BE28 -  -  -  -  ;INX - Increment Index X by One [X + 1 -> X]
 1196 D1:BE28 -  -  -  -  ;Flags altered: NZ
 1197 D1:BE28 -  -  -  -  ;implied	INX	E8	1	2  
 1198 D1:BE28 -  -  -  -  inst6502_inx:
 1199 D1:BE28 DD 34 01 -      inc (ix+REGX)
 1200 D1:BE2B 18 DB -  -      jr  -_
 1201 D1:BE2D -  -  -  -  
 1202 D1:BE2D -  -  -  -  
 1203 D1:BE2D -  -  -  -  ;INY - Increment Index Y by One [Y + 1 -> Y]
 1204 D1:BE2D -  -  -  -  ;Flags altered: NZ
 1205 D1:BE2D -  -  -  -  ;implied	INY	C8	1	2  
 1206 D1:BE2D -  -  -  -  inst6502_iny:
 1207 D1:BE2D DD 34 02 -      inc (ix+REGY)
 1208 D1:BE30 18 D6 -  -      jr  -_
 1209 D1:BE32 -  -  -  -  
 1210 D1:BE32 -  -  -  -  
 1211 D1:BE32 -  -  -  -  ;INC - Increment Memory by One
 1212 D1:BE32 -  -  -  -  ;    M + 1 -> M
 1213 D1:BE32 -  -  -  -  ;    N	Z	C	I	D	V
 1214 D1:BE32 -  -  -  -  ;    +	+	-	-	-	-
 1215 D1:BE32 -  -  -  -  
 1216 D1:BE32 -  -  -  -  ;zeropage	INC oper	E6	2	5  
 1217 D1:BE32 -  -  -  -  inst6502_inc_zp:
 1218 D1:BE32 7E -  -  -      ld  a,(hl)
 1219 D1:BE33 01 00 38 D0     ld  bc,ZEROPAGE
 1220 D1:BE37 81 -  -  -      add a,c
 1221 D1:BE38 4F -  -  -      ld  c,a
 1222 D1:BE39 0A -  -  -      ld  a,(bc)
 1223 D1:BE3A 3C -  -  -      inc a
 1224 D1:BE3B 02 -  -  -      ld  (bc),a
 1225 D1:BE3C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1226 D1:BE50 ED 33 05 -      ADDCYC(5)
 1227 D1:BE53 C3 CC B5 D1     jp i6502NextLoad
 1228 D1:BE57 -  -  -  -  
 1229 D1:BE57 -  -  -  -  ;zeropage,X	INC oper,X	F6	2	6  
 1230 D1:BE57 -  -  -  -  inst6502_inc_zpx:
 1231 D1:BE57 7E -  -  -      ld  a,(hl)
 1232 D1:BE58 01 00 38 D0     ld  bc,ZEROPAGE
 1233 D1:BE5C 81 -  -  -      add a,c
 1234 D1:BE5D DD 86 01 -      add a,(ix+REGX)
 1235 D1:BE60 4F -  -  -      ld  c,a
 1236 D1:BE61 0A -  -  -      ld  a,(bc)
 1237 D1:BE62 3C -  -  -      inc a
 1238 D1:BE63 02 -  -  -      ld  (bc),a
 1239 D1:BE64 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1240 D1:BE78 ED 33 06 -      ADDCYC(6)
 1241 D1:BE7B C3 CC B5 D1     jp i6502NextLoad
 1242 D1:BE7F -  -  -  -      
 1243 D1:BE7F -  -  -  -  ;absolute	INC oper	EE	3	6
 1244 D1:BE7F -  -  -  -  inst6502_inc_abs:
 1245 D1:BE7F CD 74 B6 D1     call subroutine6502_abs_split_start
 1246 D1:BE83 E5 -  -  -      push hl
 1247 D1:BE84 50 -  -  -          ld  d,b
 1248 D1:BE85 79 -  -  -          ld  a,c
 1249 D1:BE86 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1250 D1:BE88 ED 4C -  -          mlt bc
 1251 D1:BE8A 21 00 40 D0         ld  hl,PAGETABLE
 1252 D1:BE8E 09 -  -  -          add hl,bc
 1253 D1:BE8F ED 27 -  -          ld  hl,(hl)
 1254 D1:BE91 06 00 -  -          ld  b,0
 1255 D1:BE93 4F -  -  -          ld  c,a
 1256 D1:BE94 09 -  -  -          add hl,bc   ;full address
 1257 D1:BE95 CD 36 AE D1         READ_ACCESS
 1258 D1:BE99 3C -  -  -          inc a
 1259 D1:BE9A 47 -  -  -          ld  b,a
 1260 D1:BE9B -  -  -  -          ;
 1261 D1:BE9B DD 7E 04 -          ld  a,(ix+REGSR)
 1262 D1:BE9E CB 8F -  -          res SF_ZERO,a
 1263 D1:BEA0 20 02 -  -          jr  nz,$+4
 1264 D1:BEA2 CB CF -  -          set SF_ZERO,a
 1265 D1:BEA4 CB BF -  -          res SF_NEG,a
 1266 D1:BEA6 F2 AC BE D1         jp  p,$+6
 1267 D1:BEAA CB FF -  -          set SF_NEG,a
 1268 D1:BEAC DD 77 04 -          ld  (ix+REGSR),a
 1269 D1:BEAF -  -  -  -          ;
 1270 D1:BEAF CD 59 AE D1         WRITE_ACCESS
 1271 D1:BEB3 ED 33 06 -          ADDCYC(6)
 1272 D1:BEB6 E1 -  -  -      pop hl
 1273 D1:BEB7 C3 CC B5 D1     jp i6502NextLoad
 1274 D1:BEBB -  -  -  -  
 1275 D1:BEBB -  -  -  -  ;absolute,X	INC oper,X	FE	3	7  
 1276 D1:BEBB -  -  -  -  inst6502_inc_absx:
 1277 D1:BEBB ED 33 07 -      ADDCYC(7)
 1278 D1:BEBE CD D1 B6 D1     PUSH_ABSXSPLIT_NODEP
 1279 D1:BEC2 CD 36 AE D1         READ_ACCESS
 1280 D1:BEC6 3C -  -  -          inc a
 1281 D1:BEC7 47 -  -  -          ld  b,a
 1282 D1:BEC8 -  -  -  -          ;
 1283 D1:BEC8 DD 7E 04 -          ld  a,(ix+REGSR)
 1284 D1:BECB CB 8F -  -          res SF_ZERO,a
 1285 D1:BECD 20 02 -  -          jr  nz,$+4
 1286 D1:BECF CB CF -  -          set SF_ZERO,a
 1287 D1:BED1 CB BF -  -          res SF_NEG,a
 1288 D1:BED3 F2 D9 BE D1         jp  p,$+6
 1289 D1:BED7 CB FF -  -          set SF_NEG,a
 1290 D1:BED9 DD 77 04 -          ld  (ix+REGSR),a
 1291 D1:BEDC -  -  -  -          ;
 1292 D1:BEDC CD 59 AE D1         WRITE_ACCESS
 1293 D1:BEE0 E1 -  -  -      pop hl
 1294 D1:BEE1 C3 CC B5 D1     jp i6502NextLoad
 1295 D1:BEE5 -  -  -  -  
 1296 D1:BEE5 -  -  -  -  ;-----------------------------------------------------------------------------
 1297 D1:BEE5 -  -  -  -  ;-----------------------------------------------------------------------------
 1298 D1:BEE5 -  -  -  -  ;-----------------------------------------------------------------------------
 1299 D1:BEE5 -  -  -  -  ;Instructions by type: Arithmetic Operations
 1300 D1:BEE5 -  -  -  -  ;ADC - Add Memory to Accumulator with Carry  [A + M + C -> A, C]
 1301 D1:BEE5 -  -  -  -  ;    N	Z	C	I	D	V
 1302 D1:BEE5 -  -  -  -  ;    +	+	+	-	-	+
 1303 D1:BEE5 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1304 D1:BEE5 -  -  -  -  
 1305 D1:BEE5 -  -  -  -  ;immediate	ADC #oper	69	2	2  
 1306 D1:BEE5 -  -  -  -  inst6502_adc_imm:
 1307 D1:BEE5 ED 33 02 -      ADDCYC(2)
 1308 D1:BEE8 4E -  -  -      ld  c,(hl)
 1309 D1:BEE9 C3 06 B7 D1     jp  subroutine6502_adc_combined_end
 1310 D1:BEED -  -  -  -      
 1311 D1:BEED -  -  -  -  
 1312 D1:BEED -  -  -  -  ;zeropage	ADC oper	65	2	3
 1313 D1:BEED -  -  -  -  inst6502_adc_zp:
 1314 D1:BEED ED 33 03 -      ADDCYC(3)
 1315 D1:BEF0 7E -  -  -      ld  a,(hl)
 1316 D1:BEF1 01 00 38 D0     ld  bc,ZEROPAGE
 1317 D1:BEF5 81 -  -  -      add a,c
 1318 D1:BEF6 4F -  -  -      ld  c,a
 1319 D1:BEF7 0A -  -  -      ld  a,(bc)
 1320 D1:BEF8 4F -  -  -      ld  c,a
 1321 D1:BEF9 C3 06 B7 D1     jp  subroutine6502_adc_combined_end
 1322 D1:BEFD -  -  -  -  
 1323 D1:BEFD -  -  -  -  ;zeropage,X	ADC oper,X	75	2	4  
 1324 D1:BEFD -  -  -  -  inst6502_adc_zpx:
 1325 D1:BEFD ED 33 04 -      ADDCYC(4)
 1326 D1:BF00 7E -  -  -      ld  a,(hl)
 1327 D1:BF01 DD 86 01 -      add a,(ix+REGX)
 1328 D1:BF04 01 00 38 D0     ld  bc,ZEROPAGE
 1329 D1:BF08 81 -  -  -      add a,c
 1330 D1:BF09 4F -  -  -      ld  c,a
 1331 D1:BF0A 0A -  -  -      ld  a,(bc)
 1332 D1:BF0B 4F -  -  -      ld  c,a
 1333 D1:BF0C C3 06 B7 D1     jp  subroutine6502_adc_combined_end
 1334 D1:BF10 -  -  -  -  
 1335 D1:BF10 -  -  -  -  ;absolute	ADC oper	6D	3	4  
 1336 D1:BF10 -  -  -  -  inst6502_adc_abs:
 1337 D1:BF10 ED 33 04 -      ADDCYC(4)
 1338 D1:BF13 CD 74 B6 D1     call subroutine6502_abs_split_start
 1339 D1:BF17 E5 -  -  -      push hl
 1340 D1:BF18 50 -  -  -          ld  d,b
 1341 D1:BF19 79 -  -  -          ld  a,c
 1342 D1:BF1A 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1343 D1:BF1C ED 4C -  -          mlt bc
 1344 D1:BF1E 21 00 40 D0         ld  hl,PAGETABLE
 1345 D1:BF22 09 -  -  -          add hl,bc
 1346 D1:BF23 ED 27 -  -          ld  hl,(hl)
 1347 D1:BF25 06 00 -  -          ld  b,0
 1348 D1:BF27 4F -  -  -          ld  c,a
 1349 D1:BF28 09 -  -  -          add hl,bc   ;full address
 1350 D1:BF29 CD 36 AE D1         READ_ACCESS
 1351 D1:BF2D E1 -  -  -      pop hl
 1352 D1:BF2E 4F -  -  -      ld  c,a
 1353 D1:BF2F C3 06 B7 D1     jp  subroutine6502_adc_combined_end
 1354 D1:BF33 -  -  -  -  
 1355 D1:BF33 -  -  -  -  ;absolute,X	ADC oper,X	7D	3	4* 
 1356 D1:BF33 -  -  -  -  inst6502_adc_absx:
 1357 D1:BF33 ED 33 04 -      ADDCYC(4)
 1358 D1:BF36 CD 95 B6 D1     PUSH_ABSXSPLIT
 1359 D1:BF3A CD 36 AE D1         READ_ACCESS
 1360 D1:BF3E E1 -  -  -      pop hl
 1361 D1:BF3F 4F -  -  -      ld  c,a
 1362 D1:BF40 C3 06 B7 D1     jp  subroutine6502_adc_combined_end
 1363 D1:BF44 -  -  -  -  
 1364 D1:BF44 -  -  -  -  ;absolute,Y	ADC oper,Y	79	3	4*
 1365 D1:BF44 -  -  -  -  inst6502_adc_absy:
 1366 D1:BF44 ED 33 04 -      ADDCYC(4)
 1367 D1:BF47 CD 90 B6 D1     PUSH_ABSYSPLIT
 1368 D1:BF4B CD 36 AE D1         READ_ACCESS
 1369 D1:BF4F E1 -  -  -      pop hl
 1370 D1:BF50 4F -  -  -      ld  c,a
 1371 D1:BF51 C3 06 B7 D1     jp  subroutine6502_adc_combined_end
 1372 D1:BF55 -  -  -  -  
 1373 D1:BF55 -  -  -  -  ;(indirect,X)	ADC (oper,X)	61	2	6  
 1374 D1:BF55 -  -  -  -  inst6502_adc_indx:
 1375 D1:BF55 ED 33 06 -      ADDCYC(6)
 1376 D1:BF58 E5 -  -  -      push hl
 1377 D1:BF59 7E -  -  -          ld  a,(hl)
 1378 D1:BF5A 21 00 38 D0         ld  hl,ZEROPAGE
 1379 D1:BF5E 85 -  -  -          add a,L
 1380 D1:BF5F DD 86 01 -          add a,(ix+REGX)
 1381 D1:BF62 6F -  -  -          ld  L,a
 1382 D1:BF63 7E -  -  -          ld  a,(hl)
 1383 D1:BF64 2C -  -  -          inc L
 1384 D1:BF65 56 -  -  -          ld  d,(hl)
 1385 D1:BF66 42 -  -  -          ld  b,d
 1386 D1:BF67 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1387 D1:BF69 ED 4C -  -          mlt bc
 1388 D1:BF6B 21 00 40 D0         ld  hl,PAGETABLE
 1389 D1:BF6F 09 -  -  -          add hl,bc
 1390 D1:BF70 ED 27 -  -          ld  hl,(hl)
 1391 D1:BF72 06 00 -  -          ld  b,0
 1392 D1:BF74 4F -  -  -          ld  c,a
 1393 D1:BF75 09 -  -  -          add hl,bc
 1394 D1:BF76 CD 36 AE D1         READ_ACCESS
 1395 D1:BF7A E1 -  -  -      pop hl
 1396 D1:BF7B 4F -  -  -      ld  c,a
 1397 D1:BF7C C3 06 B7 D1     jp  subroutine6502_adc_combined_end
 1398 D1:BF80 -  -  -  -  
 1399 D1:BF80 -  -  -  -  ;(indirect),Y	ADC (oper),Y	71	2	5* 
 1400 D1:BF80 -  -  -  -  inst6502_adc_indy:
 1401 D1:BF80 ED 33 05 -      ADDCYC(5)
 1402 D1:BF83 E5 -  -  -      push hl
 1403 D1:BF84 7E -  -  -          ld  a,(hl)
 1404 D1:BF85 21 00 38 D0         ld  hl,ZEROPAGE
 1405 D1:BF89 85 -  -  -          add a,L
 1406 D1:BF8A 6F -  -  -          ld  L,a
 1407 D1:BF8B 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1408 D1:BF8C 2C -  -  -          inc L
 1409 D1:BF8D DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1410 D1:BF90 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1411 D1:BF91 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1412 D1:BF93 FD 23 -  -          ADDCYC(1)
 1413 D1:BF95 24 -  -  -          inc h
 1414 D1:BF96 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1415 D1:BF97 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1416 D1:BF99 ED 6C -  -          mlt hl          ;23.
 1417 D1:BF9B 01 00 40 D0         ld  bc,PAGETABLE
 1418 D1:BF9F 09 -  -  -          add hl,bc
 1419 D1:BFA0 ED 27 -  -          ld  hl,(hl)     ;address get.
 1420 D1:BFA2 01 00 00 00         ld  bc,0
 1421 D1:BFA6 4F -  -  -          ld  c,a
 1422 D1:BFA7 09 -  -  -          add hl,bc       ;Full address get.
 1423 D1:BFA8 CD 36 AE D1         READ_ACCESS
 1424 D1:BFAC E1 -  -  -      pop hl
 1425 D1:BFAD 4F -  -  -      ld  c,a
 1426 D1:BFAE C3 06 B7 D1     jp  subroutine6502_adc_combined_end
 1427 D1:BFB2 -  -  -  -  
 1428 D1:BFB2 -  -  -  -  
 1429 D1:BFB2 -  -  -  -  ;SBC - Subtract Memory from Accumulator with Borrow
 1430 D1:BFB2 -  -  -  -  ;A - M - C̅ -> A
 1431 D1:BFB2 -  -  -  -  ;N	Z	C	I	D	V
 1432 D1:BFB2 -  -  -  -  ;+	+	+	-	-	+
 1433 D1:BFB2 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1434 D1:BFB2 -  -  -  -  
 1435 D1:BFB2 -  -  -  -  ;immediate	SBC #oper	E9	2	2  
 1436 D1:BFB2 -  -  -  -  inst6502_sbc_imm:
 1437 D1:BFB2 ED 33 02 -      ADDCYC(2)
 1438 D1:BFB5 4E -  -  -      ld  c,(hl)
 1439 D1:BFB6 C3 37 B7 D1     jp  subroutine6502_sbc_combined_end
 1440 D1:BFBA -  -  -  -  
 1441 D1:BFBA -  -  -  -  ;zeropage	SBC oper	E5	2	3  
 1442 D1:BFBA -  -  -  -  inst6502_sbc_zp:
 1443 D1:BFBA ED 33 03 -      ADDCYC(3)
 1444 D1:BFBD 7E -  -  -      ld  a,(hl)
 1445 D1:BFBE 01 00 38 D0     ld  bc,ZEROPAGE
 1446 D1:BFC2 81 -  -  -      add a,c
 1447 D1:BFC3 4F -  -  -      ld  c,a
 1448 D1:BFC4 0A -  -  -      ld  a,(bc)
 1449 D1:BFC5 4F -  -  -      ld  c,a
 1450 D1:BFC6 C3 37 B7 D1     jp  subroutine6502_sbc_combined_end
 1451 D1:BFCA -  -  -  -  
 1452 D1:BFCA -  -  -  -  ;zeropage,X	SBC oper,X	F5	2	4  
 1453 D1:BFCA -  -  -  -  inst6502_sbc_zpx:
 1454 D1:BFCA ED 33 04 -      ADDCYC(4)
 1455 D1:BFCD 7E -  -  -      ld  a,(hl)
 1456 D1:BFCE DD 86 01 -      add a,(ix+REGX)
 1457 D1:BFD1 01 00 38 D0     ld  bc,ZEROPAGE
 1458 D1:BFD5 81 -  -  -      add a,c
 1459 D1:BFD6 4F -  -  -      ld  c,a
 1460 D1:BFD7 0A -  -  -      ld  a,(bc)
 1461 D1:BFD8 4F -  -  -      ld  c,a
 1462 D1:BFD9 C3 37 B7 D1     jp  subroutine6502_sbc_combined_end
 1463 D1:BFDD -  -  -  -  
 1464 D1:BFDD -  -  -  -  ;absolute	SBC oper	ED	3	4  
 1465 D1:BFDD -  -  -  -  inst6502_sbc_abs:
 1466 D1:BFDD ED 33 04 -      ADDCYC(4)
 1467 D1:BFE0 CD 74 B6 D1     call subroutine6502_abs_split_start
 1468 D1:BFE4 E5 -  -  -      push hl
 1469 D1:BFE5 50 -  -  -          ld  d,b
 1470 D1:BFE6 79 -  -  -          ld  a,c
 1471 D1:BFE7 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1472 D1:BFE9 ED 4C -  -          mlt bc
 1473 D1:BFEB 21 00 40 D0         ld  hl,PAGETABLE
 1474 D1:BFEF 09 -  -  -          add hl,bc
 1475 D1:BFF0 ED 27 -  -          ld  hl,(hl)
 1476 D1:BFF2 06 00 -  -          ld  b,0
 1477 D1:BFF4 4F -  -  -          ld  c,a
 1478 D1:BFF5 09 -  -  -          add hl,bc   ;full address
 1479 D1:BFF6 CD 36 AE D1         READ_ACCESS
 1480 D1:BFFA E1 -  -  -      pop hl
 1481 D1:BFFB 4F -  -  -      ld  c,a
 1482 D1:BFFC C3 37 B7 D1     jp  subroutine6502_sbc_combined_end
 1483 D1:C000 -  -  -  -  
 1484 D1:C000 -  -  -  -  ;absolute,X	SBC oper,X	FD	3	4* 
 1485 D1:C000 -  -  -  -  inst6502_sbc_absx:
 1486 D1:C000 ED 33 04 -      ADDCYC(4)
 1487 D1:C003 CD 95 B6 D1     PUSH_ABSXSPLIT
 1488 D1:C007 CD 36 AE D1         READ_ACCESS
 1489 D1:C00B E1 -  -  -      pop hl
 1490 D1:C00C 4F -  -  -      ld  c,a
 1491 D1:C00D C3 37 B7 D1     jp  subroutine6502_sbc_combined_end
 1492 D1:C011 -  -  -  -  
 1493 D1:C011 -  -  -  -  ;absolute,Y	SBC oper,Y	F9	3	4* 
 1494 D1:C011 -  -  -  -  inst6502_sbc_absy:
 1495 D1:C011 ED 33 04 -      ADDCYC(4)
 1496 D1:C014 CD 90 B6 D1     PUSH_ABSYSPLIT
 1497 D1:C018 CD 36 AE D1         READ_ACCESS
 1498 D1:C01C E1 -  -  -      pop hl
 1499 D1:C01D 4F -  -  -      ld  c,a
 1500 D1:C01E C3 37 B7 D1     jp  subroutine6502_sbc_combined_end
 1501 D1:C022 -  -  -  -  
 1502 D1:C022 -  -  -  -  ;(indirect,X)	SBC (oper,X)	E1	2	6  
 1503 D1:C022 -  -  -  -  inst6502_sbc_indx:
 1504 D1:C022 ED 33 06 -      ADDCYC(6)
 1505 D1:C025 E5 -  -  -      push hl
 1506 D1:C026 7E -  -  -          ld  a,(hl)
 1507 D1:C027 21 00 38 D0         ld  hl,ZEROPAGE
 1508 D1:C02B 85 -  -  -          add a,L
 1509 D1:C02C DD 86 01 -          add a,(ix+REGX)
 1510 D1:C02F 6F -  -  -          ld  L,a
 1511 D1:C030 7E -  -  -          ld  a,(hl)
 1512 D1:C031 2C -  -  -          inc L
 1513 D1:C032 56 -  -  -          ld  d,(hl)
 1514 D1:C033 42 -  -  -          ld  b,d
 1515 D1:C034 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1516 D1:C036 ED 4C -  -          mlt bc
 1517 D1:C038 21 00 40 D0         ld  hl,PAGETABLE
 1518 D1:C03C 09 -  -  -          add hl,bc
 1519 D1:C03D ED 27 -  -          ld  hl,(hl)
 1520 D1:C03F 06 00 -  -          ld  b,0
 1521 D1:C041 4F -  -  -          ld  c,a
 1522 D1:C042 09 -  -  -          add hl,bc
 1523 D1:C043 CD 36 AE D1         READ_ACCESS
 1524 D1:C047 E1 -  -  -      pop hl
 1525 D1:C048 4F -  -  -      ld  c,a
 1526 D1:C049 C3 37 B7 D1     jp  subroutine6502_sbc_combined_end
 1527 D1:C04D -  -  -  -  
 1528 D1:C04D -  -  -  -  ;(indirect),Y	SBC (oper),Y	F1	2	5* 
 1529 D1:C04D -  -  -  -  inst6502_sbc_indy:
 1530 D1:C04D ED 33 05 -      ADDCYC(5)
 1531 D1:C050 E5 -  -  -      push hl
 1532 D1:C051 7E -  -  -          ld  a,(hl)
 1533 D1:C052 21 00 38 D0         ld  hl,ZEROPAGE
 1534 D1:C056 85 -  -  -          add a,L
 1535 D1:C057 6F -  -  -          ld  L,a
 1536 D1:C058 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1537 D1:C059 2C -  -  -          inc L
 1538 D1:C05A DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1539 D1:C05D 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1540 D1:C05E 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1541 D1:C060 FD 23 -  -          ADDCYC(1)
 1542 D1:C062 24 -  -  -          inc h
 1543 D1:C063 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1544 D1:C064 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1545 D1:C066 ED 6C -  -          mlt hl          ;23.
 1546 D1:C068 01 00 40 D0         ld  bc,PAGETABLE
 1547 D1:C06C 09 -  -  -          add hl,bc
 1548 D1:C06D ED 27 -  -          ld  hl,(hl)     ;address get.
 1549 D1:C06F 01 00 00 00         ld  bc,0
 1550 D1:C073 4F -  -  -          ld  c,a
 1551 D1:C074 09 -  -  -          add hl,bc       ;Full address get.
 1552 D1:C075 CD 36 AE D1         READ_ACCESS
 1553 D1:C079 E1 -  -  -      pop hl
 1554 D1:C07A 4F -  -  -      ld  c,a
 1555 D1:C07B C3 37 B7 D1     jp  subroutine6502_sbc_combined_end
 1556 D1:C07F -  -  -  -  
 1557 D1:C07F -  -  -  -  
 1558 D1:C07F -  -  -  -  
 1559 D1:C07F -  -  -  -  ;-----------------------------------------------------------------------------
 1560 D1:C07F -  -  -  -  ;-----------------------------------------------------------------------------
 1561 D1:C07F -  -  -  -  ;-----------------------------------------------------------------------------
 1562 D1:C07F -  -  -  -  ;Instructions by type: Logical Operations
 1563 D1:C07F -  -  -  -  
 1564 D1:C07F -  -  -  -  ;AND - AND Memory with Accumulator
 1565 D1:C07F -  -  -  -  ;A AND M -> A
 1566 D1:C07F -  -  -  -  ;N	Z	C	I	D	V
 1567 D1:C07F -  -  -  -  ;+	+	-	-	-	-
 1568 D1:C07F -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1569 D1:C07F -  -  -  -  
 1570 D1:C07F -  -  -  -  ;immediate	AND #oper	29	2	2  
 1571 D1:C07F -  -  -  -  inst6502_and_imm:
 1572 D1:C07F ED 33 02 -      ADDCYC(2)
 1573 D1:C082 7E -  -  -      ld  a,(hl)
 1574 D1:C083 DD A6 00 -      and a,(ix+REGA)
 1575 D1:C086 DD 77 00 -      ld  (ix+REGA),A
 1576 D1:C089 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1577 D1:C09D C3 CC B5 D1     jp i6502NextLoad
 1578 D1:C0A1 -  -  -  -  
 1579 D1:C0A1 -  -  -  -  ;zeropage	AND oper	25	2	3  
 1580 D1:C0A1 -  -  -  -  inst6502_and_zp:
 1581 D1:C0A1 ED 33 03 -      ADDCYC(3)
 1582 D1:C0A4 7E -  -  -      ld  a,(hl)
 1583 D1:C0A5 01 00 38 D0     ld  bc,ZEROPAGE
 1584 D1:C0A9 81 -  -  -      add a,c
 1585 D1:C0AA 4F -  -  -      ld  c,a
 1586 D1:C0AB 0A -  -  -      ld  a,(bc)
 1587 D1:C0AC DD A6 00 -      and a,(ix+REGA)
 1588 D1:C0AF DD 77 00 -      ld  (ix+REGA),A
 1589 D1:C0B2 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1590 D1:C0C6 C3 CC B5 D1     jp i6502NextLoad
 1591 D1:C0CA -  -  -  -  
 1592 D1:C0CA -  -  -  -  ;zeropage,X	AND oper,X	35	2	4  
 1593 D1:C0CA -  -  -  -  inst6502_and_zpx:
 1594 D1:C0CA ED 33 04 -      ADDCYC(4)
 1595 D1:C0CD 7E -  -  -      ld  a,(hl)
 1596 D1:C0CE 01 00 38 D0     ld  bc,ZEROPAGE
 1597 D1:C0D2 81 -  -  -      add a,c
 1598 D1:C0D3 DD 86 01 -      add a,(ix+REGX)
 1599 D1:C0D6 4F -  -  -      ld  c,a
 1600 D1:C0D7 0A -  -  -      ld  a,(bc)
 1601 D1:C0D8 DD A6 00 -      and a,(ix+REGA)
 1602 D1:C0DB DD 77 00 -      ld  (ix+REGA),A
 1603 D1:C0DE DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1604 D1:C0F2 C3 CC B5 D1     jp i6502NextLoad
 1605 D1:C0F6 -  -  -  -  
 1606 D1:C0F6 -  -  -  -  ;absolute	AND oper	2D	3	4  
 1607 D1:C0F6 -  -  -  -  inst6502_and_abs:
 1608 D1:C0F6 ED 33 04 -      ADDCYC(4)
 1609 D1:C0F9 CD 74 B6 D1     call subroutine6502_abs_split_start
 1610 D1:C0FD E5 -  -  -      push hl
 1611 D1:C0FE 50 -  -  -          ld  d,b
 1612 D1:C0FF 79 -  -  -          ld  a,c
 1613 D1:C100 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1614 D1:C102 ED 4C -  -          mlt bc
 1615 D1:C104 21 00 40 D0         ld  hl,PAGETABLE
 1616 D1:C108 09 -  -  -          add hl,bc
 1617 D1:C109 ED 27 -  -          ld  hl,(hl)
 1618 D1:C10B 06 00 -  -          ld  b,0
 1619 D1:C10D 4F -  -  -          ld  c,a
 1620 D1:C10E 09 -  -  -          add hl,bc   ;full address
 1621 D1:C10F CD 36 AE D1         READ_ACCESS
 1622 D1:C113 E1 -  -  -      pop hl
 1623 D1:C114 DD A6 00 -      and a,(ix+REGA)
 1624 D1:C117 DD 77 00 -      ld  (ix+REGA),A
 1625 D1:C11A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1626 D1:C12E C3 CC B5 D1     jp i6502NextLoad
 1627 D1:C132 -  -  -  -  
 1628 D1:C132 -  -  -  -  ;absolute,X	AND oper,X	3D	3	4* 
 1629 D1:C132 -  -  -  -  inst6502_and_absx:
 1630 D1:C132 ED 33 04 -      ADDCYC(4)
 1631 D1:C135 CD 95 B6 D1     PUSH_ABSXSPLIT
 1632 D1:C139 CD 36 AE D1         READ_ACCESS
 1633 D1:C13D DD A6 00 -          and a,(ix+REGA)
 1634 D1:C140 DD 77 00 -          ld  (ix+REGA),A
 1635 D1:C143 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1636 D1:C157 E1 -  -  -      pop hl
 1637 D1:C158 C3 CC B5 D1     jp i6502NextLoad
 1638 D1:C15C -  -  -  -  
 1639 D1:C15C -  -  -  -  ;absolute,Y	AND oper,Y	39	3	4* 
 1640 D1:C15C -  -  -  -  inst6502_and_absy:
 1641 D1:C15C ED 33 04 -      ADDCYC(4)
 1642 D1:C15F CD 90 B6 D1     PUSH_ABSYSPLIT
 1643 D1:C163 CD 36 AE D1         READ_ACCESS
 1644 D1:C167 E1 -  -  -      pop hl
 1645 D1:C168 DD A6 00 -      and a,(ix+REGA)
 1646 D1:C16B DD 77 00 -      ld  (ix+REGA),A
 1647 D1:C16E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1648 D1:C182 C3 CC B5 D1     jp i6502NextLoad
 1649 D1:C186 -  -  -  -  
 1650 D1:C186 -  -  -  -  ;(indirect,X)	AND (oper,X)	21	2	6  
 1651 D1:C186 -  -  -  -  inst6502_and_indx:
 1652 D1:C186 ED 33 06 -      ADDCYC(6)
 1653 D1:C189 E5 -  -  -      push hl
 1654 D1:C18A 7E -  -  -          ld  a,(hl)
 1655 D1:C18B 21 00 38 D0         ld  hl,ZEROPAGE
 1656 D1:C18F 85 -  -  -          add a,L
 1657 D1:C190 DD 86 01 -          add a,(ix+REGX)
 1658 D1:C193 6F -  -  -          ld  L,a
 1659 D1:C194 7E -  -  -          ld  a,(hl)
 1660 D1:C195 2C -  -  -          inc L
 1661 D1:C196 56 -  -  -          ld  d,(hl)
 1662 D1:C197 42 -  -  -          ld  b,d
 1663 D1:C198 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1664 D1:C19A ED 4C -  -          mlt bc
 1665 D1:C19C 21 00 40 D0         ld  hl,PAGETABLE
 1666 D1:C1A0 09 -  -  -          add hl,bc
 1667 D1:C1A1 ED 27 -  -          ld  hl,(hl)
 1668 D1:C1A3 06 00 -  -          ld  b,0
 1669 D1:C1A5 4F -  -  -          ld  c,a
 1670 D1:C1A6 09 -  -  -          add hl,bc
 1671 D1:C1A7 CD 36 AE D1         READ_ACCESS
 1672 D1:C1AB E1 -  -  -      pop hl
 1673 D1:C1AC DD A6 00 -      and a,(ix+REGA)
 1674 D1:C1AF DD 77 00 -      ld  (ix+REGA),A
 1675 D1:C1B2 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1676 D1:C1C6 C3 CC B5 D1     jp i6502NextLoad
 1677 D1:C1CA -  -  -  -  
 1678 D1:C1CA -  -  -  -  ;(indirect),Y	AND (oper),Y	31	2	5* 
 1679 D1:C1CA -  -  -  -  inst6502_and_indy:
 1680 D1:C1CA ED 33 05 -      ADDCYC(5)
 1681 D1:C1CD E5 -  -  -      push hl
 1682 D1:C1CE 7E -  -  -          ld  a,(hl)
 1683 D1:C1CF 21 00 38 D0         ld  hl,ZEROPAGE
 1684 D1:C1D3 85 -  -  -          add a,L
 1685 D1:C1D4 6F -  -  -          ld  L,a
 1686 D1:C1D5 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1687 D1:C1D6 2C -  -  -          inc L
 1688 D1:C1D7 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1689 D1:C1DA 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1690 D1:C1DB 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1691 D1:C1DD 24 -  -  -          inc h
 1692 D1:C1DE FD 23 -  -          ADDCYC(1)
 1693 D1:C1E0 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1694 D1:C1E1 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1695 D1:C1E3 ED 6C -  -          mlt hl          ;23.
 1696 D1:C1E5 01 00 40 D0         ld  bc,PAGETABLE
 1697 D1:C1E9 09 -  -  -          add hl,bc
 1698 D1:C1EA ED 27 -  -          ld  hl,(hl)     ;address get.
 1699 D1:C1EC 01 00 00 00         ld  bc,0
 1700 D1:C1F0 4F -  -  -          ld  c,a
 1701 D1:C1F1 09 -  -  -          add hl,bc       ;Full address get.
 1702 D1:C1F2 CD 36 AE D1         READ_ACCESS
 1703 D1:C1F6 E1 -  -  -      pop hl
 1704 D1:C1F7 DD A6 00 -      and a,(ix+REGA)
 1705 D1:C1FA DD 77 00 -      ld  (ix+REGA),A
 1706 D1:C1FD DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1707 D1:C211 C3 CC B5 D1     jp i6502NextLoad
 1708 D1:C215 -  -  -  -  
 1709 D1:C215 -  -  -  -  ;-----------------------------------------------------------------------------
 1710 D1:C215 -  -  -  -  ;EOR - Exclusive-OR Memory with Accumulator
 1711 D1:C215 -  -  -  -  ;A EOR M -> A
 1712 D1:C215 -  -  -  -  ;N	Z	C	I	D	V
 1713 D1:C215 -  -  -  -  ;+	+	-	-	-	-
 1714 D1:C215 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1715 D1:C215 -  -  -  -  
 1716 D1:C215 -  -  -  -  ;immediate	EOR #oper	49	2	2  
 1717 D1:C215 -  -  -  -  inst6502_eor_imm:
 1718 D1:C215 ED 33 02 -      ADDCYC(2)
 1719 D1:C218 7E -  -  -      ld  a,(hl)
 1720 D1:C219 DD AE 00 -      xor a,(ix+REGA)
 1721 D1:C21C DD 77 00 -      ld  (ix+REGA),A
 1722 D1:C21F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1723 D1:C233 C3 CC B5 D1     jp i6502NextLoad
 1724 D1:C237 -  -  -  -  
 1725 D1:C237 -  -  -  -  ;zeropage	EOR oper	45	2	3  
 1726 D1:C237 -  -  -  -  inst6502_eor_zp:
 1727 D1:C237 ED 33 03 -      ADDCYC(3)
 1728 D1:C23A 7E -  -  -      ld  a,(hl)
 1729 D1:C23B 01 00 38 D0     ld  bc,ZEROPAGE
 1730 D1:C23F 81 -  -  -      add a,c
 1731 D1:C240 4F -  -  -      ld  c,a
 1732 D1:C241 0A -  -  -      ld  a,(bc)
 1733 D1:C242 DD AE 00 -      xor a,(ix+REGA)
 1734 D1:C245 DD 77 00 -      ld  (ix+REGA),A
 1735 D1:C248 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1736 D1:C25C C3 CC B5 D1     jp i6502NextLoad
 1737 D1:C260 -  -  -  -  
 1738 D1:C260 -  -  -  -  
 1739 D1:C260 -  -  -  -  ;zeropage,X	EOR oper,X	55	2	4  
 1740 D1:C260 -  -  -  -  inst6502_eor_zpx:
 1741 D1:C260 ED 33 04 -      ADDCYC(4)
 1742 D1:C263 7E -  -  -      ld  a,(hl)
 1743 D1:C264 01 00 38 D0     ld  bc,ZEROPAGE
 1744 D1:C268 81 -  -  -      add a,c
 1745 D1:C269 DD 86 01 -      add a,(ix+REGX)
 1746 D1:C26C 4F -  -  -      ld  c,a
 1747 D1:C26D 0A -  -  -      ld  a,(bc)
 1748 D1:C26E DD AE 00 -      xor a,(ix+REGA)
 1749 D1:C271 DD 77 00 -      ld  (ix+REGA),A
 1750 D1:C274 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1751 D1:C288 C3 CC B5 D1     jp i6502NextLoad
 1752 D1:C28C -  -  -  -  
 1753 D1:C28C -  -  -  -  ;absolute	EOR oper	4D	3	4  
 1754 D1:C28C -  -  -  -  inst6502_eor_abs:
 1755 D1:C28C ED 33 04 -      ADDCYC(4)
 1756 D1:C28F CD 74 B6 D1     call subroutine6502_abs_split_start
 1757 D1:C293 E5 -  -  -      push hl
 1758 D1:C294 50 -  -  -          ld  d,b
 1759 D1:C295 79 -  -  -          ld  a,c
 1760 D1:C296 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1761 D1:C298 ED 4C -  -          mlt bc
 1762 D1:C29A 21 00 40 D0         ld  hl,PAGETABLE
 1763 D1:C29E 09 -  -  -          add hl,bc
 1764 D1:C29F ED 27 -  -          ld  hl,(hl)
 1765 D1:C2A1 06 00 -  -          ld  b,0
 1766 D1:C2A3 4F -  -  -          ld  c,a
 1767 D1:C2A4 09 -  -  -          add hl,bc   ;full address
 1768 D1:C2A5 CD 36 AE D1         READ_ACCESS
 1769 D1:C2A9 E1 -  -  -      pop hl
 1770 D1:C2AA DD AE 00 -      xor a,(ix+REGA)
 1771 D1:C2AD DD 77 00 -      ld  (ix+REGA),A
 1772 D1:C2B0 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1773 D1:C2C4 C3 CC B5 D1     jp i6502NextLoad
 1774 D1:C2C8 -  -  -  -  
 1775 D1:C2C8 -  -  -  -  ;absolute,X	EOR oper,X	5D	3	4* 
 1776 D1:C2C8 -  -  -  -  inst6502_eor_absx:
 1777 D1:C2C8 ED 33 04 -      ADDCYC(4)
 1778 D1:C2CB CD 95 B6 D1     PUSH_ABSXSPLIT
 1779 D1:C2CF CD 36 AE D1         READ_ACCESS
 1780 D1:C2D3 DD AE 00 -          xor a,(ix+REGA)
 1781 D1:C2D6 DD 77 00 -          ld  (ix+REGA),A
 1782 D1:C2D9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1783 D1:C2ED E1 -  -  -      pop hl
 1784 D1:C2EE C3 CC B5 D1     jp i6502NextLoad
 1785 D1:C2F2 -  -  -  -  
 1786 D1:C2F2 -  -  -  -  ;absolute,Y	EOR oper,Y	59	3	4* 
 1787 D1:C2F2 -  -  -  -  inst6502_eor_absy:
 1788 D1:C2F2 ED 33 04 -      ADDCYC(4)
 1789 D1:C2F5 CD 90 B6 D1     PUSH_ABSYSPLIT
 1790 D1:C2F9 CD 36 AE D1         READ_ACCESS
 1791 D1:C2FD E1 -  -  -      pop hl
 1792 D1:C2FE DD AE 00 -      xor a,(ix+REGA)
 1793 D1:C301 DD 77 00 -      ld  (ix+REGA),A
 1794 D1:C304 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1795 D1:C318 C3 CC B5 D1     jp i6502NextLoad
 1796 D1:C31C -  -  -  -  
 1797 D1:C31C -  -  -  -  ;(indirect,X)	EOR (oper,X)	41	2	6  
 1798 D1:C31C -  -  -  -  inst6502_eor_indx:
 1799 D1:C31C ED 33 06 -      ADDCYC(6)
 1800 D1:C31F E5 -  -  -      push hl
 1801 D1:C320 7E -  -  -          ld  a,(hl)
 1802 D1:C321 21 00 38 D0         ld  hl,ZEROPAGE
 1803 D1:C325 85 -  -  -          add a,L
 1804 D1:C326 DD 86 01 -          add a,(ix+REGX)
 1805 D1:C329 6F -  -  -          ld  L,a
 1806 D1:C32A 7E -  -  -          ld  a,(hl)
 1807 D1:C32B 2C -  -  -          inc L
 1808 D1:C32C 56 -  -  -          ld  d,(hl)
 1809 D1:C32D 42 -  -  -          ld  b,d
 1810 D1:C32E 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1811 D1:C330 ED 4C -  -          mlt bc
 1812 D1:C332 21 00 40 D0         ld  hl,PAGETABLE
 1813 D1:C336 09 -  -  -          add hl,bc
 1814 D1:C337 ED 27 -  -          ld  hl,(hl)
 1815 D1:C339 06 00 -  -          ld  b,0
 1816 D1:C33B 4F -  -  -          ld  c,a
 1817 D1:C33C 09 -  -  -          add hl,bc
 1818 D1:C33D CD 36 AE D1         READ_ACCESS
 1819 D1:C341 E1 -  -  -      pop hl
 1820 D1:C342 DD AE 00 -      xor a,(ix+REGA)
 1821 D1:C345 DD 77 00 -      ld  (ix+REGA),A
 1822 D1:C348 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1823 D1:C35C C3 CC B5 D1     jp i6502NextLoad
 1824 D1:C360 -  -  -  -  
 1825 D1:C360 -  -  -  -  ;(indirect),Y	EOR (oper),Y	51	2	5* 
 1826 D1:C360 -  -  -  -  inst6502_eor_indy:
 1827 D1:C360 ED 33 05 -      ADDCYC(5)
 1828 D1:C363 E5 -  -  -      push hl
 1829 D1:C364 7E -  -  -          ld  a,(hl)
 1830 D1:C365 21 00 38 D0         ld  hl,ZEROPAGE
 1831 D1:C369 85 -  -  -          add a,L
 1832 D1:C36A 6F -  -  -          ld  L,a
 1833 D1:C36B 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1834 D1:C36C 2C -  -  -          inc L
 1835 D1:C36D DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1836 D1:C370 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1837 D1:C371 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1838 D1:C373 24 -  -  -          inc h
 1839 D1:C374 FD 23 -  -          ADDCYC(1)
 1840 D1:C376 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1841 D1:C377 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1842 D1:C379 ED 6C -  -          mlt hl          ;23.
 1843 D1:C37B 01 00 40 D0         ld  bc,PAGETABLE
 1844 D1:C37F 09 -  -  -          add hl,bc
 1845 D1:C380 ED 27 -  -          ld  hl,(hl)     ;address get.
 1846 D1:C382 01 00 00 00         ld  bc,0
 1847 D1:C386 4F -  -  -          ld  c,a
 1848 D1:C387 09 -  -  -          add hl,bc       ;Full address get.
 1849 D1:C388 CD 36 AE D1         READ_ACCESS
 1850 D1:C38C E1 -  -  -      pop hl
 1851 D1:C38D DD AE 00 -      xor a,(ix+REGA)
 1852 D1:C390 DD 77 00 -      ld  (ix+REGA),A
 1853 D1:C393 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1854 D1:C3A7 C3 CC B5 D1     jp i6502NextLoad
 1855 D1:C3AB -  -  -  -  
 1856 D1:C3AB -  -  -  -  ;-----------------------------------------------------------------------------
 1857 D1:C3AB -  -  -  -  ;ORA - OR Memory with Accumulator
 1858 D1:C3AB -  -  -  -  ;A OR M -> A
 1859 D1:C3AB -  -  -  -  ;N	Z	C	I	D	V
 1860 D1:C3AB -  -  -  -  ;+	+	-	-	-	-
 1861 D1:C3AB -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1862 D1:C3AB -  -  -  -  
 1863 D1:C3AB -  -  -  -  ;immediate	ORA #oper	09	2	2  
 1864 D1:C3AB -  -  -  -  inst6502_ora_imm:
 1865 D1:C3AB ED 33 02 -      ADDCYC(2)
 1866 D1:C3AE 7E -  -  -      ld  a,(hl)
 1867 D1:C3AF DD B6 00 -      or  a,(ix+REGA)
 1868 D1:C3B2 DD 77 00 -      ld  (ix+REGA),A
 1869 D1:C3B5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1870 D1:C3C9 C3 CC B5 D1     jp i6502NextLoad
 1871 D1:C3CD -  -  -  -  
 1872 D1:C3CD -  -  -  -  ;zeropage	ORA oper	05	2	3  
 1873 D1:C3CD -  -  -  -  inst6502_ora_zp:
 1874 D1:C3CD ED 33 03 -      ADDCYC(3)
 1875 D1:C3D0 7E -  -  -      ld  a,(hl)
 1876 D1:C3D1 01 00 38 D0     ld  bc,ZEROPAGE
 1877 D1:C3D5 81 -  -  -      add a,c
 1878 D1:C3D6 4F -  -  -      ld  c,a
 1879 D1:C3D7 0A -  -  -      ld  a,(bc)
 1880 D1:C3D8 DD B6 00 -      or  a,(ix+REGA)
 1881 D1:C3DB DD 77 00 -      ld  (ix+REGA),A
 1882 D1:C3DE DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1883 D1:C3F2 C3 CC B5 D1     jp i6502NextLoad
 1884 D1:C3F6 -  -  -  -  
 1885 D1:C3F6 -  -  -  -  ;zeropage,X	ORA oper,X	15	2	4  
 1886 D1:C3F6 -  -  -  -  inst6502_ora_zpx:
 1887 D1:C3F6 ED 33 04 -      ADDCYC(4)
 1888 D1:C3F9 7E -  -  -      ld  a,(hl)
 1889 D1:C3FA 01 00 38 D0     ld  bc,ZEROPAGE
 1890 D1:C3FE 81 -  -  -      add a,c
 1891 D1:C3FF DD 86 01 -      add a,(ix+REGX)
 1892 D1:C402 4F -  -  -      ld  c,a
 1893 D1:C403 0A -  -  -      ld  a,(bc)
 1894 D1:C404 DD B6 00 -      or  a,(ix+REGA)
 1895 D1:C407 DD 77 00 -      ld  (ix+REGA),A
 1896 D1:C40A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1897 D1:C41E C3 CC B5 D1     jp i6502NextLoad
 1898 D1:C422 -  -  -  -  
 1899 D1:C422 -  -  -  -  ;absolute	ORA oper	0D	3	4  
 1900 D1:C422 -  -  -  -  inst6502_ora_abs:
 1901 D1:C422 ED 33 04 -      ADDCYC(4)
 1902 D1:C425 CD 74 B6 D1     call subroutine6502_abs_split_start
 1903 D1:C429 E5 -  -  -      push hl
 1904 D1:C42A 50 -  -  -          ld  d,b
 1905 D1:C42B 79 -  -  -          ld  a,c
 1906 D1:C42C 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1907 D1:C42E ED 4C -  -          mlt bc
 1908 D1:C430 21 00 40 D0         ld  hl,PAGETABLE
 1909 D1:C434 09 -  -  -          add hl,bc
 1910 D1:C435 ED 27 -  -          ld  hl,(hl)
 1911 D1:C437 06 00 -  -          ld  b,0
 1912 D1:C439 4F -  -  -          ld  c,a
 1913 D1:C43A 09 -  -  -          add hl,bc   ;full address
 1914 D1:C43B CD 36 AE D1         READ_ACCESS
 1915 D1:C43F E1 -  -  -      pop hl
 1916 D1:C440 DD B6 00 -      or  a,(ix+REGA)
 1917 D1:C443 DD 77 00 -      ld  (ix+REGA),A
 1918 D1:C446 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1919 D1:C45A C3 CC B5 D1     jp i6502NextLoad
 1920 D1:C45E -  -  -  -  
 1921 D1:C45E -  -  -  -  ;absolute,X	ORA oper,X	1D	3	4* 
 1922 D1:C45E -  -  -  -  inst6502_ora_absx:
 1923 D1:C45E ED 33 04 -      ADDCYC(4)
 1924 D1:C461 CD 95 B6 D1     PUSH_ABSXSPLIT
 1925 D1:C465 CD 36 AE D1         READ_ACCESS
 1926 D1:C469 DD B6 00 -          or  a,(ix+REGA)
 1927 D1:C46C DD 77 00 -          ld  (ix+REGA),A
 1928 D1:C46F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1929 D1:C483 E1 -  -  -      pop hl
 1930 D1:C484 C3 CC B5 D1     jp i6502NextLoad
 1931 D1:C488 -  -  -  -  
 1932 D1:C488 -  -  -  -  ;absolute,Y	ORA oper,Y	19	3	4* 
 1933 D1:C488 -  -  -  -  inst6502_ora_absy:
 1934 D1:C488 ED 33 04 -      ADDCYC(4)
 1935 D1:C48B CD 90 B6 D1     PUSH_ABSYSPLIT
 1936 D1:C48F CD 36 AE D1         READ_ACCESS
 1937 D1:C493 E1 -  -  -      pop hl
 1938 D1:C494 DD B6 00 -      or  a,(ix+REGA)
 1939 D1:C497 DD 77 00 -      ld  (ix+REGA),A
 1940 D1:C49A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1941 D1:C4AE C3 CC B5 D1     jp i6502NextLoad
 1942 D1:C4B2 -  -  -  -  
 1943 D1:C4B2 -  -  -  -  ;(indirect,X)	ORA (oper,X)	01	2	6  
 1944 D1:C4B2 -  -  -  -  inst6502_ora_indx:
 1945 D1:C4B2 ED 33 06 -      ADDCYC(6)
 1946 D1:C4B5 E5 -  -  -      push hl
 1947 D1:C4B6 7E -  -  -          ld  a,(hl)
 1948 D1:C4B7 21 00 38 D0         ld  hl,ZEROPAGE
 1949 D1:C4BB 85 -  -  -          add a,L
 1950 D1:C4BC DD 86 01 -          add a,(ix+REGX)
 1951 D1:C4BF 6F -  -  -          ld  L,a
 1952 D1:C4C0 7E -  -  -          ld  a,(hl)
 1953 D1:C4C1 2C -  -  -          inc L
 1954 D1:C4C2 56 -  -  -          ld  d,(hl)
 1955 D1:C4C3 42 -  -  -          ld  b,d
 1956 D1:C4C4 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1957 D1:C4C6 ED 4C -  -          mlt bc
 1958 D1:C4C8 21 00 40 D0         ld  hl,PAGETABLE
 1959 D1:C4CC 09 -  -  -          add hl,bc
 1960 D1:C4CD ED 27 -  -          ld  hl,(hl)
 1961 D1:C4CF 06 00 -  -          ld  b,0
 1962 D1:C4D1 4F -  -  -          ld  c,a
 1963 D1:C4D2 09 -  -  -          add hl,bc
 1964 D1:C4D3 CD 36 AE D1         READ_ACCESS
 1965 D1:C4D7 E1 -  -  -      pop hl
 1966 D1:C4D8 DD B6 00 -      or  a,(ix+REGA)
 1967 D1:C4DB DD 77 00 -      ld  (ix+REGA),A
 1968 D1:C4DE DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1969 D1:C4F2 C3 CC B5 D1     jp i6502NextLoad
 1970 D1:C4F6 -  -  -  -  
 1971 D1:C4F6 -  -  -  -  ;(indirect),Y	ORA (oper),Y	11	2	5* 
 1972 D1:C4F6 -  -  -  -  inst6502_ora_indy:
 1973 D1:C4F6 ED 33 05 -      ADDCYC(5)
 1974 D1:C4F9 E5 -  -  -      push hl
 1975 D1:C4FA 7E -  -  -          ld  a,(hl)
 1976 D1:C4FB 21 00 38 D0         ld  hl,ZEROPAGE
 1977 D1:C4FF 85 -  -  -          add a,L
 1978 D1:C500 6F -  -  -          ld  L,a
 1979 D1:C501 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1980 D1:C502 2C -  -  -          inc L
 1981 D1:C503 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1982 D1:C506 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1983 D1:C507 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1984 D1:C509 24 -  -  -          inc h
 1985 D1:C50A FD 23 -  -          ADDCYC(1)
 1986 D1:C50C 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1987 D1:C50D 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1988 D1:C50F ED 6C -  -          mlt hl          ;23.
 1989 D1:C511 01 00 40 D0         ld  bc,PAGETABLE
 1990 D1:C515 09 -  -  -          add hl,bc
 1991 D1:C516 ED 27 -  -          ld  hl,(hl)     ;address get.
 1992 D1:C518 01 00 00 00         ld  bc,0
 1993 D1:C51C 4F -  -  -          ld  c,a
 1994 D1:C51D 09 -  -  -          add hl,bc       ;Full address get.
 1995 D1:C51E CD 36 AE D1         READ_ACCESS
 1996 D1:C522 E1 -  -  -      pop hl
 1997 D1:C523 DD B6 00 -      or  a,(ix+REGA)
 1998 D1:C526 DD 77 00 -      ld  (ix+REGA),A
 1999 D1:C529 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2000 D1:C53D C3 CC B5 D1     jp i6502NextLoad
 2001 D1:C541 -  -  -  -  
 2002 D1:C541 -  -  -  -  ;-----------------------------------------------------------------------------
 2003 D1:C541 -  -  -  -  ;-----------------------------------------------------------------------------
 2004 D1:C541 -  -  -  -  ;-----------------------------------------------------------------------------
 2005 D1:C541 -  -  -  -  ;Instructions by type: Shift & Rotate Instructions
 2006 D1:C541 -  -  -  -  ;ASL - Shift Left One Bit (Memory or Accumulator)
 2007 D1:C541 -  -  -  -  ;C <- [76543210] <- 0
 2008 D1:C541 -  -  -  -  ;N	Z	C	I	D	V
 2009 D1:C541 -  -  -  -  ;+	+	+	-	-	-
 2010 D1:C541 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2011 D1:C541 -  -  -  -  
 2012 D1:C541 -  -  -  -  ;accumulator	ASL A	0A	1	2  
 2013 D1:C541 -  -  -  -  inst6502_asl:
 2014 D1:C541 ED 33 02 -      ADDCYC(2)
 2015 D1:C544 DD 7E 00 -      ld  a,(ix+REGA)
 2016 D1:C547 CB 27 -  -      sla a
 2017 D1:C549 DD 77 00 -      ld  (ix+REGA),a
 2018 D1:C54C DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2019 D1:C566 C3 E5 B5 D1     jp i6502FinishLoad
 2020 D1:C56A -  -  -  -  
 2021 D1:C56A -  -  -  -  ;zeropage	ASL oper	06	2	5  
 2022 D1:C56A -  -  -  -  inst6502_asl_zp:
 2023 D1:C56A ED 33 05 -      ADDCYC(5)
 2024 D1:C56D 7E -  -  -      ld  a,(hl)
 2025 D1:C56E 01 00 38 D0     ld  bc,ZEROPAGE
 2026 D1:C572 81 -  -  -      add a,c
 2027 D1:C573 4F -  -  -      ld  c,a
 2028 D1:C574 0A -  -  -      ld  a,(bc)
 2029 D1:C575 CB 27 -  -      sla a
 2030 D1:C577 02 -  -  -      ld  (bc),a
 2031 D1:C578 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2032 D1:C592 C3 CC B5 D1     jp i6502NextLoad
 2033 D1:C596 -  -  -  -  
 2034 D1:C596 -  -  -  -  ;zeropage,X	ASL oper,X	16	2	6  
 2035 D1:C596 -  -  -  -  inst6502_asl_zpx:
 2036 D1:C596 ED 33 06 -      ADDCYC(6)
 2037 D1:C599 7E -  -  -      ld  a,(hl)
 2038 D1:C59A 01 00 38 D0     ld  bc,ZEROPAGE
 2039 D1:C59E 81 -  -  -      add a,c
 2040 D1:C59F DD 86 01 -      add a,(ix+REGX)
 2041 D1:C5A2 4F -  -  -      ld  c,a
 2042 D1:C5A3 0A -  -  -      ld  a,(bc)
 2043 D1:C5A4 CB 27 -  -      sla a
 2044 D1:C5A6 02 -  -  -      ld  (bc),a
 2045 D1:C5A7 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2046 D1:C5C1 C3 CC B5 D1     jp i6502NextLoad
 2047 D1:C5C5 -  -  -  -  
 2048 D1:C5C5 -  -  -  -  ;absolute	ASL oper	0E	3	6  
 2049 D1:C5C5 -  -  -  -  inst6502_asl_abs:
 2050 D1:C5C5 ED 33 06 -      ADDCYC(6)
 2051 D1:C5C8 CD 74 B6 D1     call subroutine6502_abs_split_start
 2052 D1:C5CC E5 -  -  -      push hl
 2053 D1:C5CD 50 -  -  -          ld  d,b
 2054 D1:C5CE 79 -  -  -          ld  a,c
 2055 D1:C5CF 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2056 D1:C5D1 ED 4C -  -          mlt bc
 2057 D1:C5D3 21 00 40 D0         ld  hl,PAGETABLE
 2058 D1:C5D7 09 -  -  -          add hl,bc
 2059 D1:C5D8 ED 27 -  -          ld  hl,(hl)
 2060 D1:C5DA 06 00 -  -          ld  b,0
 2061 D1:C5DC 4F -  -  -          ld  c,a
 2062 D1:C5DD 09 -  -  -          add hl,bc   ;full address
 2063 D1:C5DE CD 36 AE D1         READ_ACCESS
 2064 D1:C5E2 CB 27 -  -          sla a
 2065 D1:C5E4 4F -  -  -          ld  c,a
 2066 D1:C5E5 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2067 D1:C5FF 41 -  -  -          ld  b,c
 2068 D1:C600 CD 59 AE D1         WRITE_ACCESS
 2069 D1:C604 E1 -  -  -      pop hl
 2070 D1:C605 C3 CC B5 D1     jp i6502NextLoad
 2071 D1:C609 -  -  -  -  
 2072 D1:C609 -  -  -  -  ;absolute,X	ASL oper,X	1E	3	7  
 2073 D1:C609 -  -  -  -  inst6502_asl_absx:
 2074 D1:C609 ED 33 07 -      ADDCYC(7)
 2075 D1:C60C CD D1 B6 D1     PUSH_ABSXSPLIT_NODEP
 2076 D1:C610 CD 36 AE D1         READ_ACCESS
 2077 D1:C614 CB 27 -  -          sla a
 2078 D1:C616 4F -  -  -          ld  c,a
 2079 D1:C617 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2080 D1:C631 41 -  -  -          ld  b,c
 2081 D1:C632 CD 59 AE D1         WRITE_ACCESS
 2082 D1:C636 E1 -  -  -      pop hl
 2083 D1:C637 C3 CC B5 D1     jp i6502NextLoad
 2084 D1:C63B -  -  -  -  
 2085 D1:C63B -  -  -  -  ;-----------------------------------------------------------------------------
 2086 D1:C63B -  -  -  -  ;LSR - Shift One Bit Right (Memory or Accumulator)
 2087 D1:C63B -  -  -  -  ;0 -> [76543210] -> C
 2088 D1:C63B -  -  -  -  ;N	Z	C	I	D	V
 2089 D1:C63B -  -  -  -  ;0	+	+	-	-	-
 2090 D1:C63B -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2091 D1:C63B -  -  -  -  
 2092 D1:C63B -  -  -  -  ;accumulator	LSR A	4A	1	2  
 2093 D1:C63B -  -  -  -  inst6502_lsr:
 2094 D1:C63B ED 33 02 -      ADDCYC(2)
 2095 D1:C63E DD 7E 00 -      ld  a,(ix+REGA)
 2096 D1:C641 CB 3F -  -      srl a
 2097 D1:C643 DD 77 00 -      ld  (ix+REGA),a
 2098 D1:C646 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2099 D1:C660 C3 E5 B5 D1     jp i6502FinishLoad
 2100 D1:C664 -  -  -  -  
 2101 D1:C664 -  -  -  -  ;zeropage	LSR oper	46	2	5  
 2102 D1:C664 -  -  -  -  inst6502_lsr_zp:
 2103 D1:C664 ED 33 05 -      ADDCYC(5)
 2104 D1:C667 7E -  -  -      ld  a,(hl)
 2105 D1:C668 01 00 38 D0     ld  bc,ZEROPAGE
 2106 D1:C66C 81 -  -  -      add a,c
 2107 D1:C66D 4F -  -  -      ld  c,a
 2108 D1:C66E 0A -  -  -      ld  a,(bc)
 2109 D1:C66F CB 3F -  -      srl a
 2110 D1:C671 02 -  -  -      ld  (bc),a
 2111 D1:C672 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2112 D1:C68C C3 CC B5 D1     jp i6502NextLoad
 2113 D1:C690 -  -  -  -  
 2114 D1:C690 -  -  -  -  ;zeropage,X	LSR oper,X	56	2	6  
 2115 D1:C690 -  -  -  -  inst6502_lsr_zpx:
 2116 D1:C690 ED 33 06 -      ADDCYC(6)
 2117 D1:C693 7E -  -  -      ld  a,(hl)
 2118 D1:C694 01 00 38 D0     ld  bc,ZEROPAGE
 2119 D1:C698 81 -  -  -      add a,c
 2120 D1:C699 DD 86 01 -      add a,(ix+REGX)
 2121 D1:C69C 4F -  -  -      ld  c,a
 2122 D1:C69D 0A -  -  -      ld  a,(bc)
 2123 D1:C69E CB 3F -  -      srl a
 2124 D1:C6A0 02 -  -  -      ld  (bc),a
 2125 D1:C6A1 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2126 D1:C6BB C3 CC B5 D1     jp i6502NextLoad
 2127 D1:C6BF -  -  -  -      
 2128 D1:C6BF -  -  -  -  ;absolute	LSR oper	4E	3	6  
 2129 D1:C6BF -  -  -  -  inst6502_lsr_abs:
 2130 D1:C6BF ED 33 06 -      ADDCYC(6)
 2131 D1:C6C2 CD 74 B6 D1     call subroutine6502_abs_split_start
 2132 D1:C6C6 E5 -  -  -      push hl
 2133 D1:C6C7 50 -  -  -          ld  d,b
 2134 D1:C6C8 79 -  -  -          ld  a,c
 2135 D1:C6C9 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2136 D1:C6CB ED 4C -  -          mlt bc
 2137 D1:C6CD 21 00 40 D0         ld  hl,PAGETABLE
 2138 D1:C6D1 09 -  -  -          add hl,bc
 2139 D1:C6D2 ED 27 -  -          ld  hl,(hl)
 2140 D1:C6D4 06 00 -  -          ld  b,0
 2141 D1:C6D6 4F -  -  -          ld  c,a
 2142 D1:C6D7 09 -  -  -          add hl,bc   ;full address
 2143 D1:C6D8 CD 36 AE D1         READ_ACCESS
 2144 D1:C6DC CB 3F -  -          srl a
 2145 D1:C6DE 4F -  -  -          ld  c,a
 2146 D1:C6DF DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2147 D1:C6F9 41 -  -  -          ld  b,c
 2148 D1:C6FA CD 59 AE D1         WRITE_ACCESS
 2149 D1:C6FE E1 -  -  -      pop hl
 2150 D1:C6FF C3 CC B5 D1     jp i6502NextLoad
 2151 D1:C703 -  -  -  -  
 2152 D1:C703 -  -  -  -  ;absolute,X	LSR oper,X	5E	3	7  
 2153 D1:C703 -  -  -  -  inst6502_lsr_absx:
 2154 D1:C703 ED 33 07 -      ADDCYC(7)
 2155 D1:C706 CD D1 B6 D1     PUSH_ABSXSPLIT_NODEP
 2156 D1:C70A CD 36 AE D1         READ_ACCESS
 2157 D1:C70E CB 3F -  -          srl a
 2158 D1:C710 4F -  -  -          ld  c,a
 2159 D1:C711 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2160 D1:C72B 41 -  -  -          ld  b,c
 2161 D1:C72C CD 59 AE D1         WRITE_ACCESS
 2162 D1:C730 E1 -  -  -      pop hl
 2163 D1:C731 C3 CC B5 D1     jp i6502NextLoad
 2164 D1:C735 -  -  -  -  
 2165 D1:C735 -  -  -  -  ;-----------------------------------------------------------------------------
 2166 D1:C735 -  -  -  -  ;ROL - Rotate One Bit Left (Memory or Accumulator)
 2167 D1:C735 -  -  -  -  ;C <- [76543210] <- C
 2168 D1:C735 -  -  -  -  ;N	Z	C	I	D	V
 2169 D1:C735 -  -  -  -  ;+	+	+	-	-	-
 2170 D1:C735 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2171 D1:C735 -  -  -  -  
 2172 D1:C735 -  -  -  -  ;accumulator	ROL A	2A	1	2  
 2173 D1:C735 -  -  -  -  inst6502_rol:
 2174 D1:C735 ED 33 02 -      ADDCYC(2)
 2175 D1:C738 DD 7E 04 -      ld  a,(ix+REGSR)
 2176 D1:C73B 1F -  -  -      rra
 2177 D1:C73C DD CB 00 16     rl  (ix+REGA)
 2178 D1:C740 DD 7E 00 -      ld  a,(ix+REGA)
 2179 D1:C743 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2180 D1:C75D C3 E5 B5 D1     jp i6502FinishLoad
 2181 D1:C761 -  -  -  -  
 2182 D1:C761 -  -  -  -  ;zeropage	ROL oper	26	2	5  
 2183 D1:C761 -  -  -  -  inst6502_rol_zp:
 2184 D1:C761 ED 33 05 -      ADDCYC(5)
 2185 D1:C764 7E -  -  -      ld  a,(hl)
 2186 D1:C765 01 00 38 D0     ld  bc,ZEROPAGE
 2187 D1:C769 81 -  -  -      add a,c
 2188 D1:C76A 4F -  -  -      ld  c,a
 2189 D1:C76B DD 7E 04 -      ld  a,(ix+REGSR)
 2190 D1:C76E 1F -  -  -      rra
 2191 D1:C76F 0A -  -  -      ld  a,(bc)
 2192 D1:C770 17 -  -  -      rla
 2193 D1:C771 02 -  -  -      ld  (bc),a
 2194 D1:C772 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2195 D1:C78C C3 CC B5 D1     jp i6502NextLoad
 2196 D1:C790 -  -  -  -  
 2197 D1:C790 -  -  -  -  ;zeropage,X	ROL oper,X	36	2	6  
 2198 D1:C790 -  -  -  -  inst6502_rol_zpx:
 2199 D1:C790 ED 33 06 -      ADDCYC(6)
 2200 D1:C793 7E -  -  -      ld  a,(hl)
 2201 D1:C794 01 00 38 D0     ld  bc,ZEROPAGE
 2202 D1:C798 81 -  -  -      add a,c
 2203 D1:C799 DD 86 01 -      add a,(ix+REGX)
 2204 D1:C79C 4F -  -  -      ld  c,a
 2205 D1:C79D DD 7E 04 -      ld  a,(ix+REGSR)
 2206 D1:C7A0 1F -  -  -      rra
 2207 D1:C7A1 0A -  -  -      ld  a,(bc)
 2208 D1:C7A2 17 -  -  -      rla
 2209 D1:C7A3 02 -  -  -      ld  (bc),a
 2210 D1:C7A4 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2211 D1:C7BE C3 CC B5 D1     jp i6502NextLoad
 2212 D1:C7C2 -  -  -  -  
 2213 D1:C7C2 -  -  -  -  ;absolute	ROL oper	2E	3	6  
 2214 D1:C7C2 -  -  -  -  inst6502_rol_abs:
 2215 D1:C7C2 ED 33 06 -      ADDCYC(6)
 2216 D1:C7C5 CD 74 B6 D1     call subroutine6502_abs_split_start
 2217 D1:C7C9 E5 -  -  -      push hl
 2218 D1:C7CA 50 -  -  -          ld  d,b
 2219 D1:C7CB 79 -  -  -          ld  a,c
 2220 D1:C7CC 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2221 D1:C7CE ED 4C -  -          mlt bc
 2222 D1:C7D0 21 00 40 D0         ld  hl,PAGETABLE
 2223 D1:C7D4 09 -  -  -          add hl,bc
 2224 D1:C7D5 ED 27 -  -          ld  hl,(hl)
 2225 D1:C7D7 06 00 -  -          ld  b,0
 2226 D1:C7D9 4F -  -  -          ld  c,a
 2227 D1:C7DA 09 -  -  -          add hl,bc   ;full address
 2228 D1:C7DB CD 36 AE D1         READ_ACCESS
 2229 D1:C7DF DD 46 04 -          ld  b,(ix+REGSR)
 2230 D1:C7E2 CB 18 -  -          rr b
 2231 D1:C7E4 17 -  -  -          rla
 2232 D1:C7E5 4F -  -  -          ld  c,a
 2233 D1:C7E6 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2234 D1:C800 41 -  -  -          ld  b,c
 2235 D1:C801 CD 59 AE D1         WRITE_ACCESS
 2236 D1:C805 E1 -  -  -      pop hl
 2237 D1:C806 C3 CC B5 D1     jp i6502NextLoad
 2238 D1:C80A -  -  -  -  
 2239 D1:C80A -  -  -  -  ;absolute,X	ROL oper,X	3E	3	7  
 2240 D1:C80A -  -  -  -  inst6502_rol_absx:
 2241 D1:C80A ED 33 07 -      ADDCYC(7)
 2242 D1:C80D CD D1 B6 D1     PUSH_ABSXSPLIT_NODEP
 2243 D1:C811 CD 36 AE D1         READ_ACCESS
 2244 D1:C815 DD 46 04 -          ld  b,(ix+REGSR)
 2245 D1:C818 CB 18 -  -          rr b
 2246 D1:C81A 17 -  -  -          rla
 2247 D1:C81B 4F -  -  -          ld  c,a
 2248 D1:C81C DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2249 D1:C836 41 -  -  -          ld  b,c
 2250 D1:C837 CD 59 AE D1         WRITE_ACCESS
 2251 D1:C83B E1 -  -  -      pop hl
 2252 D1:C83C C3 CC B5 D1     jp i6502NextLoad
 2253 D1:C840 -  -  -  -  
 2254 D1:C840 -  -  -  -  ;-----------------------------------------------------------------------------
 2255 D1:C840 -  -  -  -  ;ROR - Rotate One Bit Right (Memory or Accumulator)
 2256 D1:C840 -  -  -  -  ;C -> [76543210] -> C
 2257 D1:C840 -  -  -  -  ;N	Z	C	I	D	V
 2258 D1:C840 -  -  -  -  ;+	+	+	-	-	-
 2259 D1:C840 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2260 D1:C840 -  -  -  -  
 2261 D1:C840 -  -  -  -  ;accumulator	ROR A	6A	1	2  
 2262 D1:C840 -  -  -  -  inst6502_ror:
 2263 D1:C840 ED 33 02 -      ADDCYC(2)
 2264 D1:C843 DD 7E 04 -      ld  a,(ix+REGSR)
 2265 D1:C846 1F -  -  -      rra
 2266 D1:C847 DD CB 00 1E     rr  (ix+REGA)
 2267 D1:C84B DD 7E 00 -      ld  a,(ix+REGA)
 2268 D1:C84E DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2269 D1:C868 C3 E5 B5 D1     jp i6502FinishLoad
 2270 D1:C86C -  -  -  -  
 2271 D1:C86C -  -  -  -  ;zeropage	ROR oper	66	2	5  
 2272 D1:C86C -  -  -  -  inst6502_ror_zp:
 2273 D1:C86C ED 33 05 -      ADDCYC(5)
 2274 D1:C86F 7E -  -  -      ld  a,(hl)
 2275 D1:C870 01 00 38 D0     ld  bc,ZEROPAGE
 2276 D1:C874 81 -  -  -      add a,c
 2277 D1:C875 4F -  -  -      ld  c,a
 2278 D1:C876 DD 7E 04 -      ld  a,(ix+REGSR)
 2279 D1:C879 1F -  -  -      rra
 2280 D1:C87A 0A -  -  -      ld  a,(bc)
 2281 D1:C87B 1F -  -  -      rra
 2282 D1:C87C 02 -  -  -      ld  (bc),a
 2283 D1:C87D DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2284 D1:C897 C3 CC B5 D1     jp i6502NextLoad
 2285 D1:C89B -  -  -  -  
 2286 D1:C89B -  -  -  -  ;zeropage,X	ROR oper,X	76	2	6  
 2287 D1:C89B -  -  -  -  inst6502_ror_zpx:
 2288 D1:C89B ED 33 06 -      ADDCYC(6)
 2289 D1:C89E 7E -  -  -      ld  a,(hl)
 2290 D1:C89F 01 00 38 D0     ld  bc,ZEROPAGE
 2291 D1:C8A3 81 -  -  -      add a,c
 2292 D1:C8A4 DD 86 01 -      add a,(ix+REGX)
 2293 D1:C8A7 4F -  -  -      ld  c,a
 2294 D1:C8A8 DD 7E 04 -      ld  a,(ix+REGSR)
 2295 D1:C8AB 1F -  -  -      rra
 2296 D1:C8AC 0A -  -  -      ld  a,(bc)
 2297 D1:C8AD 1F -  -  -      rra
 2298 D1:C8AE 02 -  -  -      ld  (bc),a
 2299 D1:C8AF DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2300 D1:C8C9 C3 CC B5 D1     jp i6502NextLoad
 2301 D1:C8CD -  -  -  -  
 2302 D1:C8CD -  -  -  -  ;absolute	ROR oper	6E	3	6  
 2303 D1:C8CD -  -  -  -  inst6502_ror_abs:
 2304 D1:C8CD ED 33 06 -      ADDCYC(6)
 2305 D1:C8D0 CD 74 B6 D1     call subroutine6502_abs_split_start
 2306 D1:C8D4 E5 -  -  -      push hl
 2307 D1:C8D5 50 -  -  -          ld  d,b
 2308 D1:C8D6 79 -  -  -          ld  a,c
 2309 D1:C8D7 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2310 D1:C8D9 ED 4C -  -          mlt bc
 2311 D1:C8DB 21 00 40 D0         ld  hl,PAGETABLE
 2312 D1:C8DF 09 -  -  -          add hl,bc
 2313 D1:C8E0 ED 27 -  -          ld  hl,(hl)
 2314 D1:C8E2 06 00 -  -          ld  b,0
 2315 D1:C8E4 4F -  -  -          ld  c,a
 2316 D1:C8E5 09 -  -  -          add hl,bc   ;full address
 2317 D1:C8E6 CD 36 AE D1         READ_ACCESS
 2318 D1:C8EA DD 46 04 -          ld  b,(ix+REGSR)
 2319 D1:C8ED CB 18 -  -          rr b
 2320 D1:C8EF 1F -  -  -          rra
 2321 D1:C8F0 4F -  -  -          ld  c,a
 2322 D1:C8F1 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2323 D1:C90B 41 -  -  -          ld  b,c
 2324 D1:C90C CD 59 AE D1         WRITE_ACCESS
 2325 D1:C910 E1 -  -  -      pop hl
 2326 D1:C911 C3 CC B5 D1     jp i6502NextLoad
 2327 D1:C915 -  -  -  -  
 2328 D1:C915 -  -  -  -  ;absolute,X	ROR oper,X	7E	3	7  
 2329 D1:C915 -  -  -  -  inst6502_ror_absx:
 2330 D1:C915 ED 33 07 -      ADDCYC(7)
 2331 D1:C918 CD D1 B6 D1     PUSH_ABSXSPLIT_NODEP
 2332 D1:C91C CD 36 AE D1         READ_ACCESS
 2333 D1:C920 DD 46 04 -          ld  b,(ix+REGSR)
 2334 D1:C923 CB 18 -  -          rr b
 2335 D1:C925 1F -  -  -          rra
 2336 D1:C926 4F -  -  -          ld  c,a
 2337 D1:C927 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2338 D1:C941 41 -  -  -          ld  b,c
 2339 D1:C942 CD 59 AE D1         WRITE_ACCESS
 2340 D1:C946 E1 -  -  -      pop hl
 2341 D1:C947 C3 CC B5 D1     jp i6502NextLoad
 2342 D1:C94B -  -  -  -  
 2343 D1:C94B -  -  -  -  ;-----------------------------------------------------------------------------
 2344 D1:C94B -  -  -  -  ;-----------------------------------------------------------------------------
 2345 D1:C94B -  -  -  -  ;-----------------------------------------------------------------------------
 2346 D1:C94B -  -  -  -  ;Instructions by type: Flag Instructions
 2347 D1:C94B -  -  -  -  
 2348 D1:C94B -  -  -  -  ;CLC - Clear Carry Flag
 2349 D1:C94B -  -  -  -  ;0 -> C
 2350 D1:C94B -  -  -  -  ;N	Z	C	I	D	V
 2351 D1:C94B -  -  -  -  ;-	-	0	-	-	-
 2352 D1:C94B -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2353 D1:C94B -  -  -  -  ;implied	CLC	18	1	2  
 2354 D1:C94B -  -  -  -  inst6502_clc:
 2355 D1:C94B ED 33 02 -      ADDCYC(2)
 2356 D1:C94E DD CB 04 86     res SF_CARRY,(ix+REGSR)
 2357 D1:C952 C3 E5 B5 D1     jp  i6502FinishLoad
 2358 D1:C956 -  -  -  -  
 2359 D1:C956 -  -  -  -  ;CLD - Clear Decimal Mode
 2360 D1:C956 -  -  -  -  ;0 -> D
 2361 D1:C956 -  -  -  -  ;N	Z	C	I	D	V
 2362 D1:C956 -  -  -  -  ;-	-	-	-	0	-
 2363 D1:C956 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2364 D1:C956 -  -  -  -  ;implied	CLD	D8	1	2  
 2365 D1:C956 -  -  -  -  inst6502_cld:
 2366 D1:C956 ED 33 02 -      ADDCYC(2)
 2367 D1:C959 DD CB 04 9E     res SF_DEC,(ix+REGSR)
 2368 D1:C95D C3 E5 B5 D1     jp  i6502FinishLoad
 2369 D1:C961 -  -  -  -  
 2370 D1:C961 -  -  -  -  ;CLI -  Clear Interrupt Disable Bit
 2371 D1:C961 -  -  -  -  ;0 -> I
 2372 D1:C961 -  -  -  -  ;N	Z	C	I	D	V
 2373 D1:C961 -  -  -  -  ;-	-	-	0	-	-
 2374 D1:C961 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2375 D1:C961 -  -  -  -  ;implied	CLI	58	1	2  
 2376 D1:C961 -  -  -  -  inst6502_cli:
 2377 D1:C961 ED 33 02 -      ADDCYC(2)
 2378 D1:C964 DD CB 04 96     res SF_INT,(ix+REGSR)
 2379 D1:C968 C3 E5 B5 D1     jp  i6502FinishLoad
 2380 D1:C96C -  -  -  -  
 2381 D1:C96C -  -  -  -  ;CLV - Clear Overflow Flag
 2382 D1:C96C -  -  -  -  ;0 -> V
 2383 D1:C96C -  -  -  -  ;N	Z	C	I	D	V
 2384 D1:C96C -  -  -  -  ;-	-	-	-	-	0
 2385 D1:C96C -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2386 D1:C96C -  -  -  -  ;implied	CLV	B8	1	2  
 2387 D1:C96C -  -  -  -  inst6502_clv:
 2388 D1:C96C ED 33 02 -      ADDCYC(2)
 2389 D1:C96F DD CB 04 B6     res SF_OVER,(ix+REGSR)
 2390 D1:C973 C3 E5 B5 D1     jp  i6502FinishLoad
 2391 D1:C977 -  -  -  -  
 2392 D1:C977 -  -  -  -  ;SEC - Set Carry Flag
 2393 D1:C977 -  -  -  -  ;1 -> C
 2394 D1:C977 -  -  -  -  ;N	Z	C	I	D	V
 2395 D1:C977 -  -  -  -  ;-	-	1	-	-	-
 2396 D1:C977 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2397 D1:C977 -  -  -  -  ;implied	SEC	38	1	2  
 2398 D1:C977 -  -  -  -  inst6502_sec:
 2399 D1:C977 ED 33 02 -      ADDCYC(2)
 2400 D1:C97A DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 2401 D1:C97E C3 E5 B5 D1     jp  i6502FinishLoad
 2402 D1:C982 -  -  -  -  
 2403 D1:C982 -  -  -  -  ;SED - Set Decimal Flag
 2404 D1:C982 -  -  -  -  ;1 -> D
 2405 D1:C982 -  -  -  -  ;N	Z	C	I	D	V
 2406 D1:C982 -  -  -  -  ;-	-	-	-	1	-
 2407 D1:C982 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2408 D1:C982 -  -  -  -  ;implied	SED	F8	1	2  
 2409 D1:C982 -  -  -  -  inst6502_sed:
 2410 D1:C982 ED 33 02 -      ADDCYC(2)
 2411 D1:C985 DD CB 04 DE     set SF_DEC,(ix+REGSR)
 2412 D1:C989 C3 E5 B5 D1     jp  i6502FinishLoad
 2413 D1:C98D -  -  -  -  
 2414 D1:C98D -  -  -  -  ;SEI - Set Interrupt Disable Status
 2415 D1:C98D -  -  -  -  ;1 -> I
 2416 D1:C98D -  -  -  -  ;N	Z	C	I	D	V
 2417 D1:C98D -  -  -  -  ;-	-	-	1	-	-
 2418 D1:C98D -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2419 D1:C98D -  -  -  -  ;implied	SEI	78	1	2  
 2420 D1:C98D -  -  -  -  inst6502_sei:
 2421 D1:C98D ED 33 02 -      ADDCYC(2)
 2422 D1:C990 DD CB 04 D6     set SF_INT,(ix+REGSR)
 2423 D1:C994 C3 E5 B5 D1     jp  i6502FinishLoad
 2424 D1:C998 -  -  -  -  
 2425 D1:C998 -  -  -  -  ;-----------------------------------------------------------------------------
 2426 D1:C998 -  -  -  -  ;-----------------------------------------------------------------------------
 2427 D1:C998 -  -  -  -  ;-----------------------------------------------------------------------------
 2428 D1:C998 -  -  -  -  ;Instructions by type: Comparisons
 2429 D1:C998 -  -  -  -  
 2430 D1:C998 -  -  -  -  ;CMP - Compare Memory with Accumulator
 2431 D1:C998 -  -  -  -  ;A - M
 2432 D1:C998 -  -  -  -  ;N	Z	C	I	D	V
 2433 D1:C998 -  -  -  -  ;+	+	+	-	-	-
 2434 D1:C998 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2435 D1:C998 -  -  -  -  
 2436 D1:C998 -  -  -  -  ;immediate	CMP #oper	C9	2	2  
 2437 D1:C998 -  -  -  -  inst6502_cmp_imm:
 2438 D1:C998 ED 33 02 -      ADDCYC(2)
 2439 D1:C99B 46 -  -  -      ld  b,(hl)
 2440 D1:C99C C3 6A B7 D1     jp  subroutine6502_cmp_combined_end
 2441 D1:C9A0 -  -  -  -  
 2442 D1:C9A0 -  -  -  -  ;zeropage	CMP oper	C5	2	3  
 2443 D1:C9A0 -  -  -  -  inst6502_cmp_zp:
 2444 D1:C9A0 ED 33 03 -      ADDCYC(3)
 2445 D1:C9A3 7E -  -  -      ld  a,(hl)
 2446 D1:C9A4 01 00 38 D0     ld  bc,ZEROPAGE
 2447 D1:C9A8 81 -  -  -      add a,c
 2448 D1:C9A9 4F -  -  -      ld  c,a
 2449 D1:C9AA 0A -  -  -      ld  a,(bc)
 2450 D1:C9AB 47 -  -  -      ld  b,a
 2451 D1:C9AC C3 6A B7 D1     jp  subroutine6502_cmp_combined_end
 2452 D1:C9B0 -  -  -  -  
 2453 D1:C9B0 -  -  -  -  ;zeropage,X	CMP oper,X	D5	2	4  
 2454 D1:C9B0 -  -  -  -  inst6502_cmp_zpx:
 2455 D1:C9B0 ED 33 04 -      ADDCYC(4)
 2456 D1:C9B3 7E -  -  -      ld  a,(hl)
 2457 D1:C9B4 01 00 38 D0     ld  bc,ZEROPAGE
 2458 D1:C9B8 81 -  -  -      add a,c
 2459 D1:C9B9 DD 86 01 -      add a,(ix+REGX)
 2460 D1:C9BC 4F -  -  -      ld  c,a
 2461 D1:C9BD 0A -  -  -      ld  a,(bc)
 2462 D1:C9BE 47 -  -  -      ld  b,a
 2463 D1:C9BF C3 6A B7 D1     jp  subroutine6502_cmp_combined_end
 2464 D1:C9C3 -  -  -  -  
 2465 D1:C9C3 -  -  -  -  ;absolute	CMP oper	CD	3	4  
 2466 D1:C9C3 -  -  -  -  inst6502_cmp_abs:
 2467 D1:C9C3 ED 33 04 -      ADDCYC(4)
 2468 D1:C9C6 CD 74 B6 D1     call subroutine6502_abs_split_start
 2469 D1:C9CA E5 -  -  -      push hl
 2470 D1:C9CB 50 -  -  -          ld  d,b
 2471 D1:C9CC 79 -  -  -          ld  a,c
 2472 D1:C9CD 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2473 D1:C9CF ED 4C -  -          mlt bc
 2474 D1:C9D1 21 00 40 D0         ld  hl,PAGETABLE
 2475 D1:C9D5 09 -  -  -          add hl,bc
 2476 D1:C9D6 ED 27 -  -          ld  hl,(hl)
 2477 D1:C9D8 06 00 -  -          ld  b,0
 2478 D1:C9DA 4F -  -  -          ld  c,a
 2479 D1:C9DB 09 -  -  -          add hl,bc   ;full address
 2480 D1:C9DC CD 36 AE D1         READ_ACCESS
 2481 D1:C9E0 E1 -  -  -      pop hl
 2482 D1:C9E1 47 -  -  -      ld  b,a
 2483 D1:C9E2 C3 6A B7 D1     jp  subroutine6502_cmp_combined_end
 2484 D1:C9E6 -  -  -  -  
 2485 D1:C9E6 -  -  -  -  ;absolute,X	CMP oper,X	DD	3	4* 
 2486 D1:C9E6 -  -  -  -  inst6502_cmp_absx:
 2487 D1:C9E6 ED 33 04 -      ADDCYC(4)
 2488 D1:C9E9 CD 95 B6 D1     PUSH_ABSXSPLIT
 2489 D1:C9ED CD 36 AE D1         READ_ACCESS
 2490 D1:C9F1 E1 -  -  -      pop hl
 2491 D1:C9F2 47 -  -  -      ld  b,a
 2492 D1:C9F3 C3 6A B7 D1     jp  subroutine6502_cmp_combined_end
 2493 D1:C9F7 -  -  -  -  
 2494 D1:C9F7 -  -  -  -  ;absolute,Y	CMP oper,Y	D9	3	4* 
 2495 D1:C9F7 -  -  -  -  inst6502_cmp_absy:
 2496 D1:C9F7 ED 33 04 -      ADDCYC(4)
 2497 D1:C9FA CD 90 B6 D1     PUSH_ABSYSPLIT
 2498 D1:C9FE CD 36 AE D1         READ_ACCESS
 2499 D1:CA02 E1 -  -  -      pop hl
 2500 D1:CA03 47 -  -  -      ld  b,a
 2501 D1:CA04 C3 6A B7 D1     jp  subroutine6502_cmp_combined_end
 2502 D1:CA08 -  -  -  -  
 2503 D1:CA08 -  -  -  -  ;(indirect,X)	CMP (oper,X)	C1	2	6  
 2504 D1:CA08 -  -  -  -  inst6502_cmp_indx:
 2505 D1:CA08 ED 33 06 -      ADDCYC(6)
 2506 D1:CA0B E5 -  -  -      push hl
 2507 D1:CA0C 7E -  -  -          ld  a,(hl)
 2508 D1:CA0D 21 00 38 D0         ld  hl,ZEROPAGE
 2509 D1:CA11 85 -  -  -          add a,L
 2510 D1:CA12 DD 86 01 -          add a,(ix+REGX)
 2511 D1:CA15 6F -  -  -          ld  L,a
 2512 D1:CA16 7E -  -  -          ld  a,(hl)
 2513 D1:CA17 2C -  -  -          inc L
 2514 D1:CA18 56 -  -  -          ld  d,(hl)
 2515 D1:CA19 42 -  -  -          ld  b,d
 2516 D1:CA1A 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2517 D1:CA1C ED 4C -  -          mlt bc
 2518 D1:CA1E 21 00 40 D0         ld  hl,PAGETABLE
 2519 D1:CA22 09 -  -  -          add hl,bc
 2520 D1:CA23 ED 27 -  -          ld  hl,(hl)
 2521 D1:CA25 06 00 -  -          ld  b,0
 2522 D1:CA27 4F -  -  -          ld  c,a
 2523 D1:CA28 09 -  -  -          add hl,bc
 2524 D1:CA29 CD 36 AE D1         READ_ACCESS
 2525 D1:CA2D E1 -  -  -      pop hl
 2526 D1:CA2E 47 -  -  -      ld  b,a
 2527 D1:CA2F C3 6A B7 D1     jp  subroutine6502_cmp_combined_end
 2528 D1:CA33 -  -  -  -  
 2529 D1:CA33 -  -  -  -  ;(indirect),Y	CMP (oper),Y	D1	2	5* 
 2530 D1:CA33 -  -  -  -  inst6502_cmp_indy:
 2531 D1:CA33 ED 33 05 -      ADDCYC(5)
 2532 D1:CA36 E5 -  -  -      push hl
 2533 D1:CA37 7E -  -  -          ld  a,(hl)
 2534 D1:CA38 21 00 38 D0         ld  hl,ZEROPAGE
 2535 D1:CA3C 85 -  -  -          add a,L
 2536 D1:CA3D 6F -  -  -          ld  L,a
 2537 D1:CA3E 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 2538 D1:CA3F 2C -  -  -          inc L
 2539 D1:CA40 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 2540 D1:CA43 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 2541 D1:CA44 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 2542 D1:CA46 24 -  -  -          inc h
 2543 D1:CA47 FD 23 -  -          ADDCYC(1)
 2544 D1:CA49 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 2545 D1:CA4A 2E 0C -  -          ld  L,BASETABLE_STRIDE
 2546 D1:CA4C ED 6C -  -          mlt hl          ;23.
 2547 D1:CA4E 01 00 40 D0         ld  bc,PAGETABLE
 2548 D1:CA52 09 -  -  -          add hl,bc
 2549 D1:CA53 ED 27 -  -          ld  hl,(hl)     ;address get.
 2550 D1:CA55 01 00 00 00         ld  bc,0
 2551 D1:CA59 4F -  -  -          ld  c,a
 2552 D1:CA5A 09 -  -  -          add hl,bc       ;Full address get.
 2553 D1:CA5B CD 36 AE D1         READ_ACCESS
 2554 D1:CA5F E1 -  -  -      pop hl
 2555 D1:CA60 47 -  -  -      ld  b,a
 2556 D1:CA61 C3 6A B7 D1     jp  subroutine6502_cmp_combined_end
 2557 D1:CA65 -  -  -  -  
 2558 D1:CA65 -  -  -  -  ;-----------------------------------------------------------------------------
 2559 D1:CA65 -  -  -  -  ;CPX - Compare Memory and Index X
 2560 D1:CA65 -  -  -  -  ;X - M
 2561 D1:CA65 -  -  -  -  ;N	Z	C	I	D	V
 2562 D1:CA65 -  -  -  -  ;+	+	+	-	-	-
 2563 D1:CA65 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2564 D1:CA65 -  -  -  -  ;immediate	CPX #oper	E0	2	2  
 2565 D1:CA65 -  -  -  -  inst6502_cpx_imm:
 2566 D1:CA65 ED 33 02 -      ADDCYC(2)
 2567 D1:CA68 DD 7E 01 -      ld  a,(ix+REGX)
 2568 D1:CA6B 96 -  -  -      sub a,(hl)
 2569 D1:CA6C 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2570 D1:CA6D DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2571 D1:CA87 C3 CC B5 D1     jp  i6502NextLoad
 2572 D1:CA8B -  -  -  -  
 2573 D1:CA8B -  -  -  -  ;zeropage	CPX oper	E4	2	3  
 2574 D1:CA8B -  -  -  -  inst6502_cpx_zp:
 2575 D1:CA8B ED 33 03 -      ADDCYC(3)
 2576 D1:CA8E 7E -  -  -      ld  a,(hl)
 2577 D1:CA8F 01 00 38 D0     ld  bc,ZEROPAGE
 2578 D1:CA93 81 -  -  -      add a,c
 2579 D1:CA94 4F -  -  -      ld  c,a
 2580 D1:CA95 0A -  -  -      ld  a,(bc)
 2581 D1:CA96 47 -  -  -      ld  b,a
 2582 D1:CA97 DD 7E 01 -      ld  a,(ix+REGX)
 2583 D1:CA9A 90 -  -  -      sub a,b
 2584 D1:CA9B 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2585 D1:CA9C DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2586 D1:CAB6 C3 CC B5 D1     jp i6502NextLoad
 2587 D1:CABA -  -  -  -  ;absolute	CPX oper	EC	3	4  
 2588 D1:CABA -  -  -  -  inst6502_cpx_abs:
 2589 D1:CABA ED 33 04 -      ADDCYC(4)
 2590 D1:CABD CD 74 B6 D1     call subroutine6502_abs_split_start
 2591 D1:CAC1 E5 -  -  -      push hl
 2592 D1:CAC2 50 -  -  -          ld  d,b
 2593 D1:CAC3 79 -  -  -          ld  a,c
 2594 D1:CAC4 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2595 D1:CAC6 ED 4C -  -          mlt bc
 2596 D1:CAC8 21 00 40 D0         ld  hl,PAGETABLE
 2597 D1:CACC 09 -  -  -          add hl,bc
 2598 D1:CACD ED 27 -  -          ld  hl,(hl)
 2599 D1:CACF 06 00 -  -          ld  b,0
 2600 D1:CAD1 4F -  -  -          ld  c,a
 2601 D1:CAD2 09 -  -  -          add hl,bc   ;full address
 2602 D1:CAD3 CD 36 AE D1         READ_ACCESS
 2603 D1:CAD7 E1 -  -  -      pop hl
 2604 D1:CAD8 47 -  -  -      ld  b,a
 2605 D1:CAD9 DD 7E 01 -      ld  a,(ix+REGX)
 2606 D1:CADC 90 -  -  -      sub a,b
 2607 D1:CADD 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2608 D1:CADE DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2609 D1:CAF8 C3 CC B5 D1     jp i6502NextLoad
 2610 D1:CAFC -  -  -  -  
 2611 D1:CAFC -  -  -  -  ;-----------------------------------------------------------------------------
 2612 D1:CAFC -  -  -  -  ;CPY - Compare Memory and Index Y
 2613 D1:CAFC -  -  -  -  ;Y - M
 2614 D1:CAFC -  -  -  -  ;N	Z	C	I	D	V
 2615 D1:CAFC -  -  -  -  ;+	+	+	-	-	-
 2616 D1:CAFC -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2617 D1:CAFC -  -  -  -  ;immediate	CPY #oper	C0	2	2  
 2618 D1:CAFC -  -  -  -  inst6502_cpy_imm:
 2619 D1:CAFC ED 33 02 -      ADDCYC(2)
 2620 D1:CAFF DD 7E 02 -      ld  a,(ix+REGY)
 2621 D1:CB02 96 -  -  -      sub a,(hl)
 2622 D1:CB03 3F -  -  -      ccf
 2623 D1:CB04 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2624 D1:CB1E C3 CC B5 D1     jp  i6502NextLoad
 2625 D1:CB22 -  -  -  -  
 2626 D1:CB22 -  -  -  -  ;zeropage	CPY oper	C4	2	3  
 2627 D1:CB22 -  -  -  -  inst6502_cpy_zp:
 2628 D1:CB22 ED 33 03 -      ADDCYC(3)
 2629 D1:CB25 7E -  -  -      ld  a,(hl)
 2630 D1:CB26 01 00 38 D0     ld  bc,ZEROPAGE
 2631 D1:CB2A 81 -  -  -      add a,c
 2632 D1:CB2B 4F -  -  -      ld  c,a
 2633 D1:CB2C 0A -  -  -      ld  a,(bc)
 2634 D1:CB2D 47 -  -  -      ld  b,a
 2635 D1:CB2E DD 7E 02 -      ld  a,(ix+REGY)
 2636 D1:CB31 90 -  -  -      sub a,b
 2637 D1:CB32 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2638 D1:CB33 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2639 D1:CB4D C3 CC B5 D1     jp i6502NextLoad
 2640 D1:CB51 -  -  -  -  
 2641 D1:CB51 -  -  -  -  ;absolute	CPY oper	CC	3	4  
 2642 D1:CB51 -  -  -  -  inst6502_cpy_abs:
 2643 D1:CB51 ED 33 04 -      ADDCYC(4)
 2644 D1:CB54 CD 74 B6 D1     call subroutine6502_abs_split_start
 2645 D1:CB58 E5 -  -  -      push hl
 2646 D1:CB59 50 -  -  -          ld  d,b
 2647 D1:CB5A 79 -  -  -          ld  a,c
 2648 D1:CB5B 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2649 D1:CB5D ED 4C -  -          mlt bc
 2650 D1:CB5F 21 00 40 D0         ld  hl,PAGETABLE
 2651 D1:CB63 09 -  -  -          add hl,bc
 2652 D1:CB64 ED 27 -  -          ld  hl,(hl)
 2653 D1:CB66 06 00 -  -          ld  b,0
 2654 D1:CB68 4F -  -  -          ld  c,a
 2655 D1:CB69 09 -  -  -          add hl,bc   ;full address
 2656 D1:CB6A CD 36 AE D1         READ_ACCESS
 2657 D1:CB6E E1 -  -  -      pop hl
 2658 D1:CB6F 47 -  -  -      ld  b,a
 2659 D1:CB70 DD 7E 02 -      ld  a,(ix+REGY)
 2660 D1:CB73 90 -  -  -      sub a,b
 2661 D1:CB74 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2662 D1:CB75 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2663 D1:CB8F C3 CC B5 D1     jp i6502NextLoad
 2664 D1:CB93 -  -  -  -  
 2665 D1:CB93 -  -  -  -  
 2666 D1:CB93 -  -  -  -  ;-----------------------------------------------------------------------------
 2667 D1:CB93 -  -  -  -  ;-----------------------------------------------------------------------------
 2668 D1:CB93 -  -  -  -  ;-----------------------------------------------------------------------------
 2669 D1:CB93 -  -  -  -  ;Instructions by type: Conditional Branch Instructions
 2670 D1:CB93 -  -  -  -  
 2671 D1:CB93 -  -  -  -  ;branch on C=0
 2672 D1:CB93 -  -  -  -  ;relative	BCC oper	90	2	2**
 2673 D1:CB93 -  -  -  -  inst6502_bcc:
 2674 D1:CB93 ED 33 02 -      ADDCYC(2)
 2675 D1:CB96 DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2676 D1:CB9A C2 CC B5 D1     jp  nz,i6502NextLoad
 2677 D1:CB9E C3 8D B7 D1     jp  subroutine6502_take_branch
 2678 D1:CBA2 -  -  -  -  
 2679 D1:CBA2 -  -  -  -  ;branch on C=1
 2680 D1:CBA2 -  -  -  -  ;relative	BCS oper	B0	2	2**
 2681 D1:CBA2 -  -  -  -  inst6502_bcs:
 2682 D1:CBA2 ED 33 02 -      ADDCYC(2)
 2683 D1:CBA5 DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2684 D1:CBA9 CA CC B5 D1     jp  z,i6502NextLoad
 2685 D1:CBAD C3 8D B7 D1     jp  subroutine6502_take_branch
 2686 D1:CBB1 -  -  -  -  
 2687 D1:CBB1 -  -  -  -  ;branch on Z=1
 2688 D1:CBB1 -  -  -  -  ;relative	BEQ oper	F0	2	2**
 2689 D1:CBB1 -  -  -  -  inst6502_beq:
 2690 D1:CBB1 ED 33 02 -      ADDCYC(2)
 2691 D1:CBB4 DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2692 D1:CBB8 CA CC B5 D1     jp  z,i6502NextLoad
 2693 D1:CBBC C3 8D B7 D1     jp  subroutine6502_take_branch
 2694 D1:CBC0 -  -  -  -  
 2695 D1:CBC0 -  -  -  -  ;branch on N=1
 2696 D1:CBC0 -  -  -  -  ;relative	BMI oper	30	2	2**
 2697 D1:CBC0 -  -  -  -  inst6502_bmi:
 2698 D1:CBC0 ED 33 02 -      ADDCYC(2)
 2699 D1:CBC3 DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2700 D1:CBC7 CA CC B5 D1     jp  z,i6502NextLoad
 2701 D1:CBCB C3 8D B7 D1     jp  subroutine6502_take_branch
 2702 D1:CBCF -  -  -  -  
 2703 D1:CBCF -  -  -  -  
 2704 D1:CBCF -  -  -  -  ;branch on Z=0
 2705 D1:CBCF -  -  -  -  ;relative	BNE oper	D0	2	2**
 2706 D1:CBCF -  -  -  -  inst6502_bne:
 2707 D1:CBCF ED 33 02 -      ADDCYC(2)
 2708 D1:CBD2 DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2709 D1:CBD6 C2 CC B5 D1     jp  nz,i6502NextLoad
 2710 D1:CBDA C3 8D B7 D1     jp  subroutine6502_take_branch
 2711 D1:CBDE -  -  -  -  
 2712 D1:CBDE -  -  -  -  ;branch on N=0
 2713 D1:CBDE -  -  -  -  ;relative	BPL oper	10	2	2**
 2714 D1:CBDE -  -  -  -  inst6502_bpl:
 2715 D1:CBDE ED 33 02 -      ADDCYC(2)
 2716 D1:CBE1 DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2717 D1:CBE5 C2 CC B5 D1     jp  nz,i6502NextLoad
 2718 D1:CBE9 C3 8D B7 D1     jp  subroutine6502_take_branch
 2719 D1:CBED -  -  -  -  
 2720 D1:CBED -  -  -  -  ;branch on V=0
 2721 D1:CBED -  -  -  -  ;relative	BVC oper	50	2	2**
 2722 D1:CBED -  -  -  -  inst6502_bvc:
 2723 D1:CBED ED 33 02 -      ADDCYC(2)
 2724 D1:CBF0 DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2725 D1:CBF4 C2 CC B5 D1     jp  nz,i6502NextLoad
 2726 D1:CBF8 C3 8D B7 D1     jp  subroutine6502_take_branch
 2727 D1:CBFC -  -  -  -  
 2728 D1:CBFC -  -  -  -  ;branch on V=1
 2729 D1:CBFC -  -  -  -  ;relative	BVS oper	70	2	2**
 2730 D1:CBFC -  -  -  -  inst6502_bvs:
 2731 D1:CBFC ED 33 02 -      ADDCYC(2)
 2732 D1:CBFF DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2733 D1:CC03 CA CC B5 D1     jp  z,i6502NextLoad
 2734 D1:CC07 C3 8D B7 D1     jp  subroutine6502_take_branch
 2735 D1:CC0B -  -  -  -  
 2736 D1:CC0B -  -  -  -  ;-----------------------------------------------------------------------------
 2737 D1:CC0B -  -  -  -  ;-----------------------------------------------------------------------------
 2738 D1:CC0B -  -  -  -  ;-----------------------------------------------------------------------------
 2739 D1:CC0B -  -  -  -  ;Instructions by type: Interrupts
 2740 D1:CC0B -  -  -  -  
 2741 D1:CC0B -  -  -  -  ;BRK - Force Break
 2742 D1:CC0B -  -  -  -  ;BRK initiates a software interrupt similar to a hardware
 2743 D1:CC0B -  -  -  -  ;interrupt (IRQ). The return address pushed to the stack is
 2744 D1:CC0B -  -  -  -  ;PC+2, providing an extra byte of spacing for a break mark
 2745 D1:CC0B -  -  -  -  ;(identifying a reason for the break.)
 2746 D1:CC0B -  -  -  -  ;The status register will be pushed to the stack with the break
 2747 D1:CC0B -  -  -  -  ;flag set to 1. However, when retrieved during RTI or by a PLP
 2748 D1:CC0B -  -  -  -  ;instruction, the break flag will be ignored.
 2749 D1:CC0B -  -  -  -  ;The interrupt disable flag is not set automatically.
 2750 D1:CC0B -  -  -  -  ;
 2751 D1:CC0B -  -  -  -  ;interrupt,             N	Z	C	I	D	V
 2752 D1:CC0B -  -  -  -  ;push PC+2, push SR     -	-	-	1	-	-
 2753 D1:CC0B -  -  -  -  ;implied	BRK	00	1	7  
 2754 D1:CC0B -  -  -  -  inst6502_brk:
 2755 D1:CC0B ED 33 07 -      ADDCYC(7)
 2756 D1:CC0E 21 00 39 D0     ld  hl,STACKBASE
 2757 D1:CC12 DD 6E 03 -      ld  L,(ix+REGSP)
 2758 D1:CC15 52 DD 17 05     ld.s de,(ix+REGPC)
 2759 D1:CC19 13 -  -  -      inc de      ;that extra spacer.
 2760 D1:CC1A 72 -  -  -      ld  (hl),d
 2761 D1:CC1B 2D -  -  -      dec L
 2762 D1:CC1C 73 -  -  -      ld  (hl),e
 2763 D1:CC1D 2D -  -  -      dec L
 2764 D1:CC1E DD 7E 04 -      ld  a,(ix+REGSR)
 2765 D1:CC21 CB D7 -  -      set SF_INT,a
 2766 D1:CC23 77 -  -  -      ld  (hl),a
 2767 D1:CC24 2D -  -  -      dec L
 2768 D1:CC25 DD 75 03 -      ld  (ix+REGSP),L
 2769 D1:CC28 DD CB 1E 46     WAS_NMI_TRIGGERED
 2770 D1:CC2C 01 FE 00 00     ld  bc,$FE  ;IRQ vector
 2771 D1:CC30 28 04 -  -      jr  z,+_
 2772 D1:CC32 01 FA 00 00     ld  bc,$FA  ;NMI vector, if NMI is hijacking this instruction.
 2773 D1:CC36 21 F4 4B D0 _:  ld  hl,(BASETABLE_STRIDE*$FF)+PAGETABLE
 2774 D1:CC3A ED 27 -  -      ld  hl,(hl)
 2775 D1:CC3C 09 -  -  -      add hl,bc
 2776 D1:CC3D ED 17 -  -      ld  de,(hl)
 2777 D1:CC3F 52 DD 1F 05     ld.s (ix+REGPC),de
 2778 D1:CC43 C3 B6 B5 D1     jp  i6502FirstLoad
 2779 D1:CC47 -  -  -  -  
 2780 D1:CC47 -  -  -  -  ;RTI - Return from Interrupt
 2781 D1:CC47 -  -  -  -  ;The status register is pulled with the break flag
 2782 D1:CC47 -  -  -  -  ;and bit 5 ignored. Then PC is pulled from the stack.
 2783 D1:CC47 -  -  -  -  ;pull SR, pull PC      N Z C I D V
 2784 D1:CC47 -  -  -  -  ;                      from stack
 2785 D1:CC47 -  -  -  -  ;implied	RTI	40	1	6  
 2786 D1:CC47 -  -  -  -  inst6502_rti:
 2787 D1:CC47 21 00 39 D0     ld  hl,STACKBASE
 2788 D1:CC4B DD 6E 03 -      ld  l,(ix+REGSP)
 2789 D1:CC4E 2C -  -  -      inc l
 2790 D1:CC4F 7E -  -  -      ld  a,(hl)
 2791 D1:CC50 2C -  -  -      inc l
 2792 D1:CC51 5E -  -  -      ld  e,(hl)
 2793 D1:CC52 2C -  -  -      inc l
 2794 D1:CC53 56 -  -  -      ld  d,(hl)
 2795 D1:CC54 DD 75 03 -      ld  (ix+REGSP),l
 2796 D1:CC57 52 DD 1F 05     ld.s (ix+REGPC),de
 2797 D1:CC5B DD 46 04 -      ld  b,(ix+REGSR)
 2798 D1:CC5E A8 -  -  -      xor a,b
 2799 D1:CC5F E6 DF -  -      and a,%11011111
 2800 D1:CC61 A8 -  -  -      xor a,b
 2801 D1:CC62 DD 77 04 -      ld  (ix+REGSR),a
 2802 D1:CC65 ED 33 06 -      ADDCYC(6)
 2803 D1:CC68 C3 B6 B5 D1     jp  i6502FirstLoad
 2804 D1:CC6C -  -  -  -  
 2805 D1:CC6C -  -  -  -  
 2806 D1:CC6C -  -  -  -  
 2807 D1:CC6C -  -  -  -  ;-----------------------------------------------------------------------------
 2808 D1:CC6C -  -  -  -  ;-----------------------------------------------------------------------------
 2809 D1:CC6C -  -  -  -  ;-----------------------------------------------------------------------------
 2810 D1:CC6C -  -  -  -  ;Instructions by type: Jumps and Subroutines
 2811 D1:CC6C -  -  -  -  
 2812 D1:CC6C -  -  -  -  ;absolute	JMP oper	4C	3	3  
 2813 D1:CC6C -  -  -  -  inst6052_jmp_abs:
 2814 D1:CC6C 7E -  -  -      ld  a,(hl)
 2815 D1:CC6D 23 -  -  -      inc hl
 2816 D1:CC6E 1C -  -  -      inc e
 2817 D1:CC6F 20 0F -  -      jr  nz,+_
 2818 D1:CC71 DD 56 06 -      ld  d,(ix+REGPC+1)
 2819 D1:CC74 14 -  -  -      inc d
 2820 D1:CC75 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2821 D1:CC77 ED 5C -  -      mlt de
 2822 D1:CC79 21 00 40 D0     ld  hl,PAGETABLE
 2823 D1:CC7D 19 -  -  -      add hl,de
 2824 D1:CC7E ED 27 -  -      ld  hl,(hl)
 2825 D1:CC80 DD 77 05 -  _:  ld  (ix+REGPC+0),a
 2826 D1:CC83 7E -  -  -      ld  a,(hl)
 2827 D1:CC84 DD 77 06 -      ld  (ix+REGPC+1),a
 2828 D1:CC87 ED 33 03 -      ADDCYC(3)
 2829 D1:CC8A C3 B6 B5 D1     jp i6502FirstLoad
 2830 D1:CC8E -  -  -  -  
 2831 D1:CC8E -  -  -  -  
 2832 D1:CC8E -  -  -  -  ;Note: In earlier 6502 implementations, cross-page reads on indirect is bugged.
 2833 D1:CC8E -  -  -  -  ;   The end effect would be that inst6502_jmp_indir_splitread would wrap around
 2834 D1:CC8E -  -  -  -  ;   to the start of the current page rather than try to read the next page.
 2835 D1:CC8E -  -  -  -  ;indirect	JMP (oper)	6C	3	5  
 2836 D1:CC8E -  -  -  -  inst6502_jmp_indir:
 2837 D1:CC8E ED 33 05 -      ADDCYC(5)
 2838 D1:CC91 -  -  -  -      ;Doing much the same as abs_split_start below, except with fewer things
 2839 D1:CC91 -  -  -  -      ;because we don't need to preserve any of the other stuff.
 2840 D1:CC91 4E -  -  -      ld  c,(hl)
 2841 D1:CC92 23 -  -  -      inc hl
 2842 D1:CC93 1C -  -  -      inc e
 2843 D1:CC94 20 0F -  -      jr  nz,+_
 2844 D1:CC96 DD 56 06 -      ld  d,(ix+REGPC+1)
 2845 D1:CC99 14 -  -  -      inc d
 2846 D1:CC9A 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2847 D1:CC9C ED 5C -  -      mlt de
 2848 D1:CC9E 21 00 40 D0     ld  hl,PAGETABLE
 2849 D1:CCA2 19 -  -  -      add hl,de
 2850 D1:CCA3 ED 27 -  -      ld  hl,(hl)
 2851 D1:CCA5 46 -  -  -  _:  ld  b,(hl)
 2852 D1:CCA6 79 -  -  -      ld  a,c
 2853 D1:CCA7 0C -  -  -      inc c   ;check if there will be a split read.
 2854 D1:CCA8 0E 0C -  -      ld  c,BASETABLE_STRIDE  ;Flags not affected
 2855 D1:CCAA ED 4C -  -      mlt bc                  ;Flags not affected
 2856 D1:CCAC 21 00 40 D0     ld  hl,PAGETABLE        ;Flags not affected
 2857 D1:CCB0 CA C5 CC D1     jp  z,inst6502_jmp_indir_splitRead
 2858 D1:CCB4 09 -  -  -      add hl,bc
 2859 D1:CCB5 ED 27 -  -      ld  hl,(hl)
 2860 D1:CCB7 06 00 -  -      ld  b,0
 2861 D1:CCB9 4F -  -  -      ld  c,a
 2862 D1:CCBA 09 -  -  -      add hl,bc
 2863 D1:CCBB ED 27 -  -      ld  hl,(hl)
 2864 D1:CCBD 52 DD 2F 05     ld.s (ix+REGPC),hl
 2865 D1:CCC1 C3 B6 B5 D1     jp  i6502FirstLoad
 2866 D1:CCC5 -  -  -  -  inst6502_jmp_indir_splitRead:
 2867 D1:CCC5 09 -  -  -      add hl,bc
 2868 D1:CCC6 ED 27 -  -      ld  hl,(hl)
 2869 D1:CCC8 7E -  -  -      ld  a,(hl)  ;high byte
 2870 D1:CCC9 01 FF 00 00     ld  bc,255
 2871 D1:CCCD 09 -  -  -      add hl,bc
 2872 D1:CCCE 4E -  -  -      ld  c,(hl)  ;low byte
 2873 D1:CCCF 47 -  -  -      ld  b,a
 2874 D1:CCD0 52 DD 0F 05     ld.s (ix+REGPC),bc
 2875 D1:CCD4 C3 B6 B5 D1     jp  i6502FirstLoad
 2876 D1:CCD8 -  -  -  -  
 2877 D1:CCD8 -  -  -  -  
 2878 D1:CCD8 -  -  -  -  
 2879 D1:CCD8 -  -  -  -  
 2880 D1:CCD8 -  -  -  -  
 2881 D1:CCD8 -  -  -  -  ;absolute	JSR oper	20	3	6  
 2882 D1:CCD8 -  -  -  -  inst6502_jsr:
 2883 D1:CCD8 DD 56 06 -      ld  d,(ix+REGPC+1)
 2884 D1:CCDB 4E -  -  -      ld  c,(hl)
 2885 D1:CCDC 23 -  -  -      inc hl
 2886 D1:CCDD 1C -  -  -      inc e
 2887 D1:CCDE 20 10 -  -      jr  nz,+_
 2888 D1:CCE0 14 -  -  -      inc d
 2889 D1:CCE1 7A -  -  -      ld  a,d
 2890 D1:CCE2 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2891 D1:CCE4 ED 5C -  -      mlt de
 2892 D1:CCE6 21 00 40 D0     ld  hl,PAGETABLE
 2893 D1:CCEA 19 -  -  -      add hl,de
 2894 D1:CCEB ED 27 -  -      ld  hl,(hl)
 2895 D1:CCED 57 -  -  -      ld  d,a
 2896 D1:CCEE 1E 00 -  -      ld  e,0
 2897 D1:CCF0 46 -  -  -  _:  ld  b,(hl)
 2898 D1:CCF1 -  -  -  -      ;push de to 6502stack
 2899 D1:CCF1 21 00 39 D0     ld  hl,STACKBASE
 2900 D1:CCF5 DD 6E 03 -      ld  l,(ix+REGSP)
 2901 D1:CCF8 72 -  -  -      ld  (hl),d
 2902 D1:CCF9 2D -  -  -      dec l
 2903 D1:CCFA 73 -  -  -      ld  (hl),e
 2904 D1:CCFB 2D -  -  -      dec l
 2905 D1:CCFC DD 75 03 -      ld  (ix+REGSP),l
 2906 D1:CCFF 52 DD 0F 05     ld.s (ix+REGPC),bc
 2907 D1:CD03 ED 33 06 -      ADDCYC(6)
 2908 D1:CD06 C3 B6 B5 D1     jp  i6502FirstLoad
 2909 D1:CD0A -  -  -  -  
 2910 D1:CD0A -  -  -  -  ;implied	RTS	60	1	6
 2911 D1:CD0A -  -  -  -  inst6502_rts:
 2912 D1:CD0A 21 00 39 D0     ld  hl,STACKBASE
 2913 D1:CD0E DD 6E 03 -      ld  l,(ix+REGSP)
 2914 D1:CD11 2C -  -  -      inc l
 2915 D1:CD12 5E -  -  -      ld  e,(hl)
 2916 D1:CD13 2C -  -  -      inc l
 2917 D1:CD14 56 -  -  -      ld  d,(hl)
 2918 D1:CD15 DD 75 03 -      ld  (ix+REGSP),l
 2919 D1:CD18 13 -  -  -      inc de
 2920 D1:CD19 52 DD 1F 05     ld.s (ix+REGPC),de
 2921 D1:CD1D ED 33 06 -      ADDCYC(6)
 2922 D1:CD20 C3 B6 B5 D1     jp  i6502FirstLoad
 2923 D1:CD24 -  -  -  -  
 2924 D1:CD24 -  -  -  -  
 2925 D1:CD24 -  -  -  -  ;-----------------------------------------------------------------------------
 2926 D1:CD24 -  -  -  -  ;-----------------------------------------------------------------------------
 2927 D1:CD24 -  -  -  -  ;-----------------------------------------------------------------------------
 2928 D1:CD24 -  -  -  -  ;Instructions by type: Miscellaneous
 2929 D1:CD24 -  -  -  -  ;BIT - Test Bits in Memory with Accumulator
 2930 D1:CD24 -  -  -  -  ;
 2931 D1:CD24 -  -  -  -  ;bits 7 and 6 of operand are transfered to bit 7 and 6 of SR (N,V);
 2932 D1:CD24 -  -  -  -  ;the zero-flag is set according to the result of the operand AND
 2933 D1:CD24 -  -  -  -  ;the accumulator (set, if the result is zero, unset otherwise).
 2934 D1:CD24 -  -  -  -  ;This allows a quick check of a few bits at once without affecting
 2935 D1:CD24 -  -  -  -  ;any of the registers, other than the status register (SR).
 2936 D1:CD24 -  -  -  -  
 2937 D1:CD24 -  -  -  -  ;A AND M -> Z, M7 -> N, M6 -> V             N	Z	C	I	D	V
 2938 D1:CD24 -  -  -  -  ;                                           M7	+	-	-	-	M6
 2939 D1:CD24 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2940 D1:CD24 -  -  -  -  ;zeropage	BIT oper	24	2	3  
 2941 D1:CD24 -  -  -  -  inst6502_bit_zp:
 2942 D1:CD24 ED 33 03 -      ADDCYC(3)
 2943 D1:CD27 7E -  -  -      ld  a,(hl)
 2944 D1:CD28 01 00 38 D0     ld  bc,ZEROPAGE
 2945 D1:CD2C 81 -  -  -      add a,c
 2946 D1:CD2D 4F -  -  -      ld  c,a
 2947 D1:CD2E 0A -  -  -      ld  a,(bc)
 2948 D1:CD2F 4F -  -  -      ld  c,a
 2949 D1:CD30 DD A6 00 -  _:  and a,(ix+REGA)
 2950 D1:CD33 79 -  -  -      ld  a,c     ;discard result, get bits from OPERANDs
 2951 D1:CD34 CB 8F -  -      res SF_ZERO,a
 2952 D1:CD36 20 02 -  -      jr  nz,$+4
 2953 D1:CD38 CB CF -  -      set SF_ZERO,a
 2954 D1:CD3A DD 46 04 -      ld  b,(ix+REGSR)    ;keep bits in flag other than NZ and V
 2955 D1:CD3D A8 -  -  -      xor a,b
 2956 D1:CD3E E6 C2 -  -      and a,%11000010     ;1=keepA, 0=discardA,keepB
 2957 D1:CD40 A8 -  -  -      xor a,b
 2958 D1:CD41 DD 77 04 -      ld  (ix+REGSR),a
 2959 D1:CD44 C3 CC B5 D1     jp  i6502NextLoad
 2960 D1:CD48 -  -  -  -  
 2961 D1:CD48 -  -  -  -  ;absolute	BIT oper	2C	3	4  
 2962 D1:CD48 -  -  -  -  inst6502_bit_abs:
 2963 D1:CD48 ED 33 04 -      ADDCYC(4)
 2964 D1:CD4B CD 74 B6 D1     call subroutine6502_abs_split_start
 2965 D1:CD4F E5 -  -  -      push hl
 2966 D1:CD50 50 -  -  -          ld  d,b
 2967 D1:CD51 79 -  -  -          ld  a,c
 2968 D1:CD52 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2969 D1:CD54 ED 4C -  -          mlt bc
 2970 D1:CD56 21 00 40 D0         ld  hl,PAGETABLE
 2971 D1:CD5A 09 -  -  -          add hl,bc
 2972 D1:CD5B ED 27 -  -          ld  hl,(hl)
 2973 D1:CD5D 06 00 -  -          ld  b,0
 2974 D1:CD5F 4F -  -  -          ld  c,a
 2975 D1:CD60 09 -  -  -          add hl,bc   ;full address
 2976 D1:CD61 CD 36 AE D1         READ_ACCESS
 2977 D1:CD65 4F -  -  -          ld  c,a
 2978 D1:CD66 E1 -  -  -      pop hl
 2979 D1:CD67 18 C7 -  -      jr  -_    
 2980 D1:CD69 -  -  -  -  
 2981 D1:CD69 -  -  -  -  ;NOP - No Operation
 2982 D1:CD69 -  -  -  -  ;implied	NOP	EA	1	2  
 2983 D1:CD69 -  -  -  -  inst6502_nop:
 2984 D1:CD69 ED 33 02 -      ADDCYC(2)
 2985 D1:CD6C C3 E5 B5 D1     jp  i6502FinishLoad
 2986 D1:CD70 -  -  -  -  
 2987 D1:CD70 -  -  -  -  
 2988 D1:CD70 -  -  -  -  
 2989 D1:CD70 -  -  -  -  ;##############################################################################
 2990 D1:CD70 -  -  -  -  ;##############################################################################
 2991 D1:CD70 -  -  -  -  ;##############################################################################
 2992 D1:CD70 -  -  -  -  ;##-----#-#####-#####-----##---###---##-########-----#--##-##---#-----#----####
 2993 D1:CD70 -  -  -  -  ;####-###-#####-#####-#####-#####-###-#-##########-###--##-#-######-###-###-###
 2994 D1:CD70 -  -  -  -  ;####-###-#####-#####---###-##--#-----#-##########-###-#-#-##---###-###-----###
 2995 D1:CD70 -  -  -  -  ;####-###-#####-#####-#####-###-#-###-#-##########-###-##--#####-##-###-##-####
 2996 D1:CD70 -  -  -  -  ;##-----#-----#-----#-----##----#-###-#-----####-----#-##--#----###-###-###-#-#
 2997 D1:CD70 -  -  -  -  ;##############################################################################
 2998 D1:CD70 -  -  -  -  ;##############################################################################
 2999 D1:CD70 -  -  -  -  ;##############################################################################
 3000 D1:CD70 -  -  -  -  ;Instructions by type: Illegal Instructions
 3001 D1:CD70 -  -  -  -  
 3002 D1:CD70 -  -  -  -  ;NOP - No operations. All the no-operations. Even the ones that are linked
 3003 D1:CD70 -  -  -  -  ;to the machinery that operates an addressing mode, but does nothing with it.
 3004 D1:CD70 -  -  -  -  ;A whole lotta nothing.
 3005 D1:CD70 -  -  -  -  
 3006 D1:CD70 -  -  -  -  ;Bytes:1, Cycles:2, Opcodes: 1A, 3A, 5A, 7A, DA, FA
 3007 D1:CD70 -  -  -  -  inst6502_nop_implied:
 3008 D1:CD70 ED 33 02 -      ADDCYC(2)
 3009 D1:CD73 C3 E5 B5 D1     jp  i6502FinishLoad
 3010 D1:CD77 -  -  -  -  
 3011 D1:CD77 -  -  -  -  ;Bytes:2, Cycles:2, Opcodes: 80, 82, 89, C2, E2
 3012 D1:CD77 -  -  -  -  inst6502_nop_imm:
 3013 D1:CD77 ED 33 02 -      ADDCYC(2)
 3014 D1:CD7A C3 CC B5 D1     jp  i6502NextLoad
 3015 D1:CD7E -  -  -  -  
 3016 D1:CD7E -  -  -  -  ;Bytes:2, Cycles:3, Opcodes: 04, 44, 64
 3017 D1:CD7E -  -  -  -  inst6502_nop_zp:
 3018 D1:CD7E ED 33 03 -      ADDCYC(3)
 3019 D1:CD81 C3 CC B5 D1     jp  i6502NextLoad
 3020 D1:CD85 -  -  -  -  
 3021 D1:CD85 -  -  -  -  ;Bytes:2, Cycles:4, Opcodes: 14, 34, 54, 74, D4, F4
 3022 D1:CD85 -  -  -  -  inst6502_nop_zpx:
 3023 D1:CD85 ED 33 04 -      ADDCYC(4)
 3024 D1:CD88 C3 CC B5 D1     jp  i6502NextLoad
 3025 D1:CD8C -  -  -  -  
 3026 D1:CD8C -  -  -  -  ;Bytes:3, Cycles:4, Opcode: 0C
 3027 D1:CD8C -  -  -  -  inst6502_nop_abs:
 3028 D1:CD8C ED 33 04 -      ADDCYC(4)
 3029 D1:CD8F CD 74 B6 D1     call subroutine6502_abs_split_start
 3030 D1:CD93 E5 -  -  -      push hl
 3031 D1:CD94 CD 36 AE D1         READ_ACCESS
 3032 D1:CD98 E1 -  -  -      pop hl
 3033 D1:CD99 C3 CC B5 D1     jp  i6502NextLoad
 3034 D1:CD9D -  -  -  -  
 3035 D1:CD9D -  -  -  -  ;Note: This thing latches all over the place but does nothing. All these
 3036 D1:CD9D -  -  -  -  ;READ_ACCESS thingies are in case the ROM wants to clear PPU flags or something
 3037 D1:CD9D -  -  -  -  ;using these instructions. But the one below is noted to do the touchy-feelies
 3038 D1:CD9D -  -  -  -  ;at ABS and (ABS+X)&0xFF
 3039 D1:CD9D -  -  -  -  ;Bytes:3, Cycles:4*, Opcodes: 1C, 3C, 5C, 7C, DC, FC
 3040 D1:CD9D -  -  -  -  inst6502_nop_absx:
 3041 D1:CD9D ED 33 04 -      ADDCYC(4)
 3042 D1:CDA0 CD 95 B6 D1     PUSH_ABSXSPLIT
 3043 D1:CDA4 CD 36 AE D1         READ_ACCESS
 3044 D1:CDA8 E1 -  -  -      pop hl
 3045 D1:CDA9 C3 CC B5 D1     jp  i6502NextLoad
 3046 D1:CDAD -  -  -  -  
 3047 D1:CDAD -  -  -  -  ;-----------------------------------------------------------------------------
 3048 D1:CDAD -  -  -  -  ;ALR (ASR) - AND oper + LSR
 3049 D1:CDAD -  -  -  -  ;Affects CZN
 3050 D1:CDAD -  -  -  -  
 3051 D1:CDAD -  -  -  -  ;immediate	ALR #oper	4B	2	2 
 3052 D1:CDAD -  -  -  -  inst6502_alr_imm:
 3053 D1:CDAD ED 33 02 -      ADDCYC(2)
 3054 D1:CDB0 DD 7E 00 -      ld  a,(ix+REGA)
 3055 D1:CDB3 A6 -  -  -      and a,(hl)
 3056 D1:CDB4 CB 3F -  -      srl a   ;Must do it this way. A-optimized instr do not affect Z
 3057 D1:CDB6 DD 77 00 -      ld  (ix+REGA),a
 3058 D1:CDB9 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3059 D1:CDD3 C3 CC B5 D1     jp  i6502NextLoad
 3060 D1:CDD7 -  -  -  -  
 3061 D1:CDD7 -  -  -  -  ;-----------------------------------------------------------------------------
 3062 D1:CDD7 -  -  -  -  
 3063 D1:CDD7 -  -  -  -  ;ANC [ANC (ANC2)] - AND oper + set Carry as if ASL [ROL]
 3064 D1:CDD7 -  -  -  -  
 3065 D1:CDD7 -  -  -  -  ;immediate	ANC #oper	0B	2	2 
 3066 D1:CDD7 -  -  -  -  ;immediate	ANC #oper	2B	2	2
 3067 D1:CDD7 -  -  -  -  instr6502_anc_imm:
 3068 D1:CDD7 -  -  -  -  instr6502_anc2_imm:
 3069 D1:CDD7 ED 33 02 -      ADDCYC(2)
 3070 D1:CDDA DD 7E 00 -      ld  a,(ix+REGA)
 3071 D1:CDDD A6 -  -  -      and a,(hl)
 3072 D1:CDDE DD 77 00 -      ld  (ix+REGA),a
 3073 D1:CDE1 CB 07 -  -      rlc a
 3074 D1:CDE3 DD 7E 04 -      ld  a,(ix+REGSR)
 3075 D1:CDE6 -  -  -  -      ;A small optimiztion here, letting us merge OPRFLG_C and OPRFLG_N
 3076 D1:CDE6 CB 87 -  -      res SF_CARRY,a
 3077 D1:CDE8 CB BF -  -      res SF_NEG,a
 3078 D1:CDEA 30 04 -  -      jr  nc,+_
 3079 D1:CDEC CB C7 -  -      set SF_CARRY,a
 3080 D1:CDEE CB FF -  -      set SF_NEG,a
 3081 D1:CDF0 CB 8F -  -  _:  res SF_ZERO,a
 3082 D1:CDF2 20 02 -  -      jr  nz,$+4
 3083 D1:CDF4 CB CF -  -      set SF_ZERO,a
 3084 D1:CDF6 DD 77 04 -      ld  (ix+REGSR),a
 3085 D1:CDF9 C3 CC B5 D1     jp  i6502NextLoad
 3086 D1:CDFD -  -  -  -  
 3087 D1:CDFD -  -  -  -  ;-----------------------------------------------------------------------------
 3088 D1:CDFD -  -  -  -  
 3089 D1:CDFD -  -  -  -  ;ANE (XAA) - (A OR ??) AND X AND oper -> A
 3090 D1:CDFD -  -  -  -  ;immediate	ANE #oper	8B	2	2  	††
 3091 D1:CDFD -  -  -  -  instr6502_ane_imm:
 3092 D1:CDFD ED 33 02 -      ADDCYC(2)
 3093 D1:CE00 ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3094 D1:CE02 DD B6 00 -      or  a,(ix+REGA)
 3095 D1:CE05 DD A6 01 -      and a,(ix+REGX)
 3096 D1:CE08 A6 -  -  -      and a,(hl)
 3097 D1:CE09 DD 77 00 -      ld  (ix+REGA),a
 3098 D1:CE0C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3099 D1:CE20 C3 CC B5 D1     jp  i6502NextLoad
 3100 D1:CE24 -  -  -  -  
 3101 D1:CE24 -  -  -  -  ;-----------------------------------------------------------------------------
 3102 D1:CE24 -  -  -  -  
 3103 D1:CE24 -  -  -  -  
 3104 D1:CE24 -  -  -  -  ;ARR - AND OPER + ROR
 3105 D1:CE24 -  -  -  -  ;Something hinky is going on with the flags. "This operation involves the adder"
 3106 D1:CE24 -  -  -  -  ;I need to get a better handle over what that might be.
 3107 D1:CE24 -  -  -  -  ;CVZN flags affected.
 3108 D1:CE24 -  -  -  -  ;
 3109 D1:CE24 -  -  -  -  ;Primary sources reads:
 3110 D1:CE24 -  -  -  -  ;----------------------
 3111 D1:CE24 -  -  -  -  ;This operation involves the adder:
 3112 D1:CE24 -  -  -  -  ;V-flag is set according to (A AND oper) + oper
 3113 D1:CE24 -  -  -  -  ;The carry is not set, but bit 7 (sign) is exchanged with the carry
 3114 D1:CE24 -  -  -  -  ;A AND oper, C -> [76543210] -> C
 3115 D1:CE24 -  -  -  -  ;
 3116 D1:CE24 -  -  -  -  ;Secondary source reads:
 3117 D1:CE24 -  -  -  -  ;-----------------------
 3118 D1:CE24 -  -  -  -  ;Similar to AND #i then ROR A, except sets the flags differently. 
 3119 D1:CE24 -  -  -  -  ;N and Z are normal, but C is bit 6 and V is bit 6 xor bit 5. 
 3120 D1:CE24 -  -  -  -  ;A fast way to perform signed division by 4 is: CMP #$80; ARR #$FF; ROR. 
 3121 D1:CE24 -  -  -  -  ;This can be extended to larger powers of two.
 3122 D1:CE24 -  -  -  -  
 3123 D1:CE24 -  -  -  -  ;immediate	ARR #oper	6B	2	2  
 3124 D1:CE24 -  -  -  -  instr6502_arr_imm:
 3125 D1:CE24 ED 33 02 -      ADDCYC(2)
 3126 D1:CE27 DD 7E 00 -      ld  a,(ix+REGA)
 3127 D1:CE2A A6 -  -  -      and a,(hl)
 3128 D1:CE2B 47 -  -  -      ld  b,a
 3129 D1:CE2C DD 7E 04 -      ld  a,(ix+REGSR)
 3130 D1:CE2F 4F -  -  -      ld  c,a
 3131 D1:CE30 0F -  -  -      rrca    ;extract carry. This carry will go into sign bit of result
 3132 D1:CE31 CB B9 -  -      res SF_NEG,c
 3133 D1:CE33 30 02 -  -      jr  nc,$+4
 3134 D1:CE35 CB F9 -  -      set SF_NEG,c
 3135 D1:CE37 CB 18 -  -      rr b
 3136 D1:CE39 CB 89 -  -      res SF_ZERO,c
 3137 D1:CE3B 20 02 -  -      jr  nz,$+4
 3138 D1:CE3D CB C9 -  -      set SF_ZERO,c
 3139 D1:CE3F DD 70 00 -      ld  (ix+REGA),b
 3140 D1:CE42 78 -  -  -      ld  a,b
 3141 D1:CE43 E6 40 -  -      and a,%01000000
 3142 D1:CE45 CB 81 -  -      res SF_CARRY,c
 3143 D1:CE47 28 02 -  -      jr  z,$+4
 3144 D1:CE49 CB C1 -  -      set SF_CARRY,c
 3145 D1:CE4B 0F -  -  -      rrca
 3146 D1:CE4C EE 20 -  -      xor a,%00100000
 3147 D1:CE4E E6 20 -  -      and a,%00100000
 3148 D1:CE50 CB B1 -  -      res SF_OVER,c
 3149 D1:CE52 28 02 -  -      jr  z,$+4
 3150 D1:CE54 CB F1 -  -      set SF_OVER,c
 3151 D1:CE56 DD 71 04 -      ld  (ix+REGSR),c
 3152 D1:CE59 -  -  -  -      ;TODO: Figure out a more efficient way to emulate this instruction.
 3153 D1:CE59 C3 CC B5 D1     jp  i6502NextLoad
 3154 D1:CE5D -  -  -  -  
 3155 D1:CE5D -  -  -  -  ;-----------------------------------------------------------------------------
 3156 D1:CE5D -  -  -  -  ;DCP (DCM) - DEC oper + CMP oper
 3157 D1:CE5D -  -  -  -  ;M-1->M, A-M. Affects CZN
 3158 D1:CE5D -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3159 D1:CE5D -  -  -  -  
 3160 D1:CE5D -  -  -  -  ;zeropage	DCP oper	C7	2	5  	
 3161 D1:CE5D -  -  -  -  inst6502_dcp_zp:
 3162 D1:CE5D ED 33 05 -      ADDCYC(5)
 3163 D1:CE60 7E -  -  -      ld  a,(hl)
 3164 D1:CE61 01 00 38 D0     ld  bc,ZEROPAGE
 3165 D1:CE65 81 -  -  -      add a,c
 3166 D1:CE66 4F -  -  -      ld  c,a
 3167 D1:CE67 0A -  -  -      ld  a,(bc)
 3168 D1:CE68 3D -  -  -      dec a
 3169 D1:CE69 02 -  -  -      ld  (bc),a
 3170 D1:CE6A 47 -  -  -      ld  b,a
 3171 D1:CE6B C3 6A B7 D1     jp  subroutine6502_cmp_combined_end
 3172 D1:CE6F -  -  -  -  
 3173 D1:CE6F -  -  -  -  ;zeropage,X	DCP oper,X	D7	2	6  	
 3174 D1:CE6F -  -  -  -  inst6520_dcp_zpx:
 3175 D1:CE6F ED 33 06 -      ADDCYC(6)
 3176 D1:CE72 7E -  -  -      ld  a,(hl)
 3177 D1:CE73 01 00 38 D0     ld  bc,ZEROPAGE
 3178 D1:CE77 81 -  -  -      add a,c
 3179 D1:CE78 DD 86 01 -      add a,(ix+REGX)
 3180 D1:CE7B 4F -  -  -      ld  c,a
 3181 D1:CE7C 0A -  -  -      ld  a,(bc)
 3182 D1:CE7D 3D -  -  -      dec a
 3183 D1:CE7E 02 -  -  -      ld  (bc),a
 3184 D1:CE7F 47 -  -  -      ld  b,a
 3185 D1:CE80 C3 6A B7 D1     jp  subroutine6502_cmp_combined_end
 3186 D1:CE84 -  -  -  -  
 3187 D1:CE84 -  -  -  -  ;absolute	DCP oper	CF	3	6  	
 3188 D1:CE84 -  -  -  -  inst6502_dcp_abs:
 3189 D1:CE84 ED 33 06 -      ADDCYC(6)
 3190 D1:CE87 CD 74 B6 D1     call subroutine6502_abs_split_start
 3191 D1:CE8B E5 -  -  -      push hl
 3192 D1:CE8C 50 -  -  -          ld  d,b
 3193 D1:CE8D 79 -  -  -          ld  a,c
 3194 D1:CE8E 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3195 D1:CE90 ED 4C -  -          mlt bc
 3196 D1:CE92 21 00 40 D0         ld  hl,PAGETABLE
 3197 D1:CE96 09 -  -  -          add hl,bc
 3198 D1:CE97 ED 27 -  -          ld  hl,(hl)
 3199 D1:CE99 06 00 -  -          ld  b,0
 3200 D1:CE9B 4F -  -  -          ld  c,a
 3201 D1:CE9C 09 -  -  -          add hl,bc   ;full address
 3202 D1:CE9D CD 36 AE D1         READ_ACCESS
 3203 D1:CEA1 3D -  -  -          dec a
 3204 D1:CEA2 47 -  -  -          ld b,a
 3205 D1:CEA3 C5 -  -  -          push bc
 3206 D1:CEA4 CD 59 AE D1             WRITE_ACCESS
 3207 D1:CEA8 C1 -  -  -          pop bc
 3208 D1:CEA9 E1 -  -  -      pop hl
 3209 D1:CEAA C3 6A B7 D1     jp  subroutine6502_cmp_combined_end
 3210 D1:CEAE -  -  -  -  
 3211 D1:CEAE -  -  -  -  ;absolut,X	DCP oper,X	DF	3	7  	
 3212 D1:CEAE -  -  -  -  inst6502_dcp_absx:
 3213 D1:CEAE ED 33 07 -      ADDCYC(7)
 3214 D1:CEB1 CD D1 B6 D1     PUSH_ABSXSPLIT_NODEP
 3215 D1:CEB5 CD 36 AE D1         READ_ACCESS
 3216 D1:CEB9 3D -  -  -          dec a
 3217 D1:CEBA 47 -  -  -          ld  b,a
 3218 D1:CEBB C5 -  -  -          push bc
 3219 D1:CEBC CD 59 AE D1             WRITE_ACCESS
 3220 D1:CEC0 C1 -  -  -          pop bc
 3221 D1:CEC1 E1 -  -  -      pop hl
 3222 D1:CEC2 C3 6A B7 D1     jp  subroutine6502_cmp_combined_end
 3223 D1:CEC6 -  -  -  -  
 3224 D1:CEC6 -  -  -  -  ;absolut,Y	DCP oper,Y	DB	3	7  	
 3225 D1:CEC6 -  -  -  -  inst6502_dcp_absy:
 3226 D1:CEC6 ED 33 07 -      ADDCYC(7)
 3227 D1:CEC9 CD CC B6 D1     PUSH_ABSYSPLIT_NODEP
 3228 D1:CECD CD 36 AE D1         READ_ACCESS
 3229 D1:CED1 3D -  -  -          dec a
 3230 D1:CED2 47 -  -  -          ld  b,a
 3231 D1:CED3 C5 -  -  -          push bc
 3232 D1:CED4 CD 59 AE D1             WRITE_ACCESS
 3233 D1:CED8 C1 -  -  -          pop bc
 3234 D1:CED9 E1 -  -  -      pop hl
 3235 D1:CEDA C3 6A B7 D1     jp  subroutine6502_cmp_combined_end
 3236 D1:CEDE -  -  -  -  
 3237 D1:CEDE -  -  -  -  ;(indirect,X)	DCP (oper,X)	C3	2	8  	
 3238 D1:CEDE -  -  -  -  inst6502_dcp_indx:
 3239 D1:CEDE ED 33 08 -      ADDCYC(8)
 3240 D1:CEE1 E5 -  -  -      push hl
 3241 D1:CEE2 7E -  -  -          ld  a,(hl)
 3242 D1:CEE3 21 00 38 D0         ld  hl,ZEROPAGE
 3243 D1:CEE7 85 -  -  -          add a,L
 3244 D1:CEE8 DD 86 01 -          add a,(ix+REGX)
 3245 D1:CEEB 6F -  -  -          ld  L,a
 3246 D1:CEEC 7E -  -  -          ld  a,(hl)
 3247 D1:CEED 2C -  -  -          inc L
 3248 D1:CEEE 56 -  -  -          ld  d,(hl)
 3249 D1:CEEF 42 -  -  -          ld  b,d
 3250 D1:CEF0 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3251 D1:CEF2 ED 4C -  -          mlt bc
 3252 D1:CEF4 21 00 40 D0         ld  hl,PAGETABLE
 3253 D1:CEF8 09 -  -  -          add hl,bc
 3254 D1:CEF9 ED 27 -  -          ld  hl,(hl)
 3255 D1:CEFB 06 00 -  -          ld  b,0
 3256 D1:CEFD 4F -  -  -          ld  c,a
 3257 D1:CEFE 09 -  -  -          add hl,bc
 3258 D1:CEFF CD 36 AE D1         READ_ACCESS
 3259 D1:CF03 3D -  -  -          dec a
 3260 D1:CF04 47 -  -  -          ld  b,a
 3261 D1:CF05 C5 -  -  -          push bc
 3262 D1:CF06 CD 59 AE D1             WRITE_ACCESS
 3263 D1:CF0A C1 -  -  -          pop bc
 3264 D1:CF0B E1 -  -  -      pop hl
 3265 D1:CF0C C3 6A B7 D1     jp  subroutine6502_cmp_combined_end
 3266 D1:CF10 -  -  -  -  
 3267 D1:CF10 -  -  -  -  ;(indirect),Y	DCP (oper),Y	D3	2	8  
 3268 D1:CF10 -  -  -  -  inst6502_dcp_indy:
 3269 D1:CF10 ED 33 08 -      ADDCYC(8)
 3270 D1:CF13 E5 -  -  -      push hl
 3271 D1:CF14 7E -  -  -          ld  a,(hl)
 3272 D1:CF15 21 00 38 D0         ld  hl,ZEROPAGE
 3273 D1:CF19 85 -  -  -          add a,L
 3274 D1:CF1A 6F -  -  -          ld  L,a
 3275 D1:CF1B 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3276 D1:CF1C 2C -  -  -          inc L
 3277 D1:CF1D DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3278 D1:CF20 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3279 D1:CF21 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3280 D1:CF23 24 -  -  -          inc h
 3281 D1:CF24 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3282 D1:CF25 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3283 D1:CF27 ED 6C -  -          mlt hl          ;23.
 3284 D1:CF29 01 00 40 D0         ld  bc,PAGETABLE
 3285 D1:CF2D 09 -  -  -          add hl,bc
 3286 D1:CF2E ED 27 -  -          ld  hl,(hl)     ;address get.
 3287 D1:CF30 01 00 00 00         ld  bc,0
 3288 D1:CF34 4F -  -  -          ld  c,a
 3289 D1:CF35 09 -  -  -          add hl,bc       ;Full address get.
 3290 D1:CF36 CD 36 AE D1         READ_ACCESS
 3291 D1:CF3A 3D -  -  -          dec a
 3292 D1:CF3B 47 -  -  -          ld  b,a
 3293 D1:CF3C C5 -  -  -          push bc
 3294 D1:CF3D CD 59 AE D1             WRITE_ACCESS
 3295 D1:CF41 C1 -  -  -          pop bc
 3296 D1:CF42 E1 -  -  -      pop hl
 3297 D1:CF43 C3 6A B7 D1     jp  subroutine6502_cmp_combined_end
 3298 D1:CF47 -  -  -  -  
 3299 D1:CF47 -  -  -  -  ;-----------------------------------------------------------------------------
 3300 D1:CF47 -  -  -  -  ;ISC (ISB, INS) - INC oper + SBC oper
 3301 D1:CF47 -  -  -  -  ;M+1->M, A-M-not(C)->A, affects VCZN
 3302 D1:CF47 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3303 D1:CF47 -  -  -  -  
 3304 D1:CF47 -  -  -  -  
 3305 D1:CF47 -  -  -  -  
 3306 D1:CF47 -  -  -  -  ;zeropage	ISC oper	E7	2	5  	
 3307 D1:CF47 -  -  -  -  inst6502_isc_zp:
 3308 D1:CF47 ED 33 05 -      ADDCYC(5)
 3309 D1:CF4A 7E -  -  -      ld  a,(hl)
 3310 D1:CF4B 01 00 38 D0     ld  bc,ZEROPAGE
 3311 D1:CF4F 81 -  -  -      add a,c
 3312 D1:CF50 4F -  -  -      ld  c,a
 3313 D1:CF51 0A -  -  -      ld  a,(bc)
 3314 D1:CF52 3C -  -  -      inc a
 3315 D1:CF53 02 -  -  -      ld  (bc),a
 3316 D1:CF54 4F -  -  -      ld  c,a
 3317 D1:CF55 C3 37 B7 D1     jp  subroutine6502_sbc_combined_end
 3318 D1:CF59 -  -  -  -  
 3319 D1:CF59 -  -  -  -  ;zeropage,X	ISC oper,X	F7	2	6  
 3320 D1:CF59 -  -  -  -  inst6520_isc_zpx:
 3321 D1:CF59 ED 33 06 -      ADDCYC(6)
 3322 D1:CF5C 7E -  -  -      ld  a,(hl)
 3323 D1:CF5D 01 00 38 D0     ld  bc,ZEROPAGE
 3324 D1:CF61 81 -  -  -      add a,c
 3325 D1:CF62 DD 86 01 -      add a,(ix+REGX)
 3326 D1:CF65 4F -  -  -      ld  c,a
 3327 D1:CF66 0A -  -  -      ld  a,(bc)
 3328 D1:CF67 3C -  -  -      inc a
 3329 D1:CF68 02 -  -  -      ld  (bc),a
 3330 D1:CF69 4F -  -  -      ld  c,a
 3331 D1:CF6A C3 37 B7 D1     jp  subroutine6502_sbc_combined_end
 3332 D1:CF6E -  -  -  -  
 3333 D1:CF6E -  -  -  -  ;absolute	ISC oper	EF	3	6  	
 3334 D1:CF6E -  -  -  -  inst6502_isc_abs:
 3335 D1:CF6E ED 33 06 -      ADDCYC(6)
 3336 D1:CF71 CD 74 B6 D1     call subroutine6502_abs_split_start
 3337 D1:CF75 E5 -  -  -      push hl
 3338 D1:CF76 50 -  -  -          ld  d,b
 3339 D1:CF77 79 -  -  -          ld  a,c
 3340 D1:CF78 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3341 D1:CF7A ED 4C -  -          mlt bc
 3342 D1:CF7C 21 00 40 D0         ld  hl,PAGETABLE
 3343 D1:CF80 09 -  -  -          add hl,bc
 3344 D1:CF81 ED 27 -  -          ld  hl,(hl)
 3345 D1:CF83 06 00 -  -          ld  b,0
 3346 D1:CF85 4F -  -  -          ld  c,a
 3347 D1:CF86 09 -  -  -          add hl,bc   ;full address
 3348 D1:CF87 CD 36 AE D1         READ_ACCESS
 3349 D1:CF8B 3C -  -  -          inc a
 3350 D1:CF8C 47 -  -  -          ld b,a
 3351 D1:CF8D 4F -  -  -          ld c,a
 3352 D1:CF8E C5 -  -  -          push bc
 3353 D1:CF8F CD 59 AE D1             WRITE_ACCESS
 3354 D1:CF93 C1 -  -  -          pop bc
 3355 D1:CF94 E1 -  -  -      pop hl
 3356 D1:CF95 C3 37 B7 D1     jp  subroutine6502_sbc_combined_end
 3357 D1:CF99 -  -  -  -  
 3358 D1:CF99 -  -  -  -  ;absolut,X	ISC oper,X	FF	3	7  	
 3359 D1:CF99 -  -  -  -  inst6502_isc_absx:
 3360 D1:CF99 ED 33 07 -      ADDCYC(7)
 3361 D1:CF9C CD D1 B6 D1     PUSH_ABSXSPLIT_NODEP
 3362 D1:CFA0 CD 36 AE D1         READ_ACCESS
 3363 D1:CFA4 3C -  -  -          inc a
 3364 D1:CFA5 47 -  -  -          ld  b,a
 3365 D1:CFA6 4F -  -  -          ld  c,a
 3366 D1:CFA7 C5 -  -  -          push bc
 3367 D1:CFA8 CD 59 AE D1             WRITE_ACCESS
 3368 D1:CFAC C1 -  -  -          pop bc
 3369 D1:CFAD E1 -  -  -      pop hl
 3370 D1:CFAE C3 37 B7 D1     jp  subroutine6502_sbc_combined_end
 3371 D1:CFB2 -  -  -  -  
 3372 D1:CFB2 -  -  -  -  ;absolut,Y	ISC oper,Y	FB	3	7  	
 3373 D1:CFB2 -  -  -  -  inst6502_isc_absy:
 3374 D1:CFB2 ED 33 07 -      ADDCYC(7)
 3375 D1:CFB5 CD CC B6 D1     PUSH_ABSYSPLIT_NODEP
 3376 D1:CFB9 CD 36 AE D1         READ_ACCESS
 3377 D1:CFBD 3C -  -  -          inc a
 3378 D1:CFBE 47 -  -  -          ld  b,a
 3379 D1:CFBF 4F -  -  -          ld  c,a
 3380 D1:CFC0 C5 -  -  -          push bc
 3381 D1:CFC1 CD 59 AE D1             WRITE_ACCESS
 3382 D1:CFC5 C1 -  -  -          pop bc
 3383 D1:CFC6 E1 -  -  -      pop hl
 3384 D1:CFC7 C3 37 B7 D1     jp  subroutine6502_sbc_combined_end
 3385 D1:CFCB -  -  -  -  
 3386 D1:CFCB -  -  -  -  ;(indirect,X)	ISC (oper,X)	E3	2	8  	
 3387 D1:CFCB -  -  -  -  inst6502_isc_indx:
 3388 D1:CFCB ED 33 08 -      ADDCYC(8)
 3389 D1:CFCE E5 -  -  -      push hl
 3390 D1:CFCF 7E -  -  -          ld  a,(hl)
 3391 D1:CFD0 21 00 38 D0         ld  hl,ZEROPAGE
 3392 D1:CFD4 85 -  -  -          add a,L
 3393 D1:CFD5 DD 86 01 -          add a,(ix+REGX)
 3394 D1:CFD8 6F -  -  -          ld  L,a
 3395 D1:CFD9 7E -  -  -          ld  a,(hl)
 3396 D1:CFDA 2C -  -  -          inc L
 3397 D1:CFDB 56 -  -  -          ld  d,(hl)
 3398 D1:CFDC 42 -  -  -          ld  b,d
 3399 D1:CFDD 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3400 D1:CFDF ED 4C -  -          mlt bc
 3401 D1:CFE1 21 00 40 D0         ld  hl,PAGETABLE
 3402 D1:CFE5 09 -  -  -          add hl,bc
 3403 D1:CFE6 ED 27 -  -          ld  hl,(hl)
 3404 D1:CFE8 06 00 -  -          ld  b,0
 3405 D1:CFEA 4F -  -  -          ld  c,a
 3406 D1:CFEB 09 -  -  -          add hl,bc
 3407 D1:CFEC CD 36 AE D1         READ_ACCESS
 3408 D1:CFF0 3C -  -  -          inc a
 3409 D1:CFF1 47 -  -  -          ld  b,a
 3410 D1:CFF2 4F -  -  -          ld  c,a
 3411 D1:CFF3 C5 -  -  -          push bc
 3412 D1:CFF4 CD 59 AE D1             WRITE_ACCESS
 3413 D1:CFF8 C1 -  -  -          pop bc
 3414 D1:CFF9 E1 -  -  -      pop hl
 3415 D1:CFFA C3 37 B7 D1     jp  subroutine6502_sbc_combined_end
 3416 D1:CFFE -  -  -  -  
 3417 D1:CFFE -  -  -  -  ;(indirect),Y	ISC (oper),Y	F3	2	8  
 3418 D1:CFFE -  -  -  -  inst6502_isc_indy:
 3419 D1:CFFE ED 33 08 -      ADDCYC(8)
 3420 D1:D001 E5 -  -  -      push hl
 3421 D1:D002 7E -  -  -          ld  a,(hl)
 3422 D1:D003 21 00 38 D0         ld  hl,ZEROPAGE
 3423 D1:D007 85 -  -  -          add a,L
 3424 D1:D008 6F -  -  -          ld  L,a
 3425 D1:D009 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3426 D1:D00A 2C -  -  -          inc L
 3427 D1:D00B DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3428 D1:D00E 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3429 D1:D00F 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3430 D1:D011 24 -  -  -          inc h
 3431 D1:D012 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3432 D1:D013 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3433 D1:D015 ED 6C -  -          mlt hl          ;23.
 3434 D1:D017 01 00 40 D0         ld  bc,PAGETABLE
 3435 D1:D01B 09 -  -  -          add hl,bc
 3436 D1:D01C ED 27 -  -          ld  hl,(hl)     ;address get.
 3437 D1:D01E 01 00 00 00         ld  bc,0
 3438 D1:D022 4F -  -  -          ld  c,a
 3439 D1:D023 09 -  -  -          add hl,bc       ;Full address get.
 3440 D1:D024 CD 36 AE D1         READ_ACCESS
 3441 D1:D028 3C -  -  -          inc a
 3442 D1:D029 47 -  -  -          ld  b,a
 3443 D1:D02A 4F -  -  -          ld  c,a
 3444 D1:D02B C5 -  -  -          push bc
 3445 D1:D02C CD 59 AE D1             WRITE_ACCESS
 3446 D1:D030 C1 -  -  -          pop bc
 3447 D1:D031 E1 -  -  -      pop hl
 3448 D1:D032 C3 37 B7 D1     jp  subroutine6502_sbc_combined_end
 3449 D1:D036 -  -  -  -  ;-----------------------------------------------------------------------------
 3450 D1:D036 -  -  -  -  ;LAS (LAR) - LDA/TSX oper
 3451 D1:D036 -  -  -  -  ;M AND SP -> A, X, SP. Affects ZN
 3452 D1:D036 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3453 D1:D036 -  -  -  -  ;absolut,Y	LAS oper,Y	BB	3	4* 
 3454 D1:D036 -  -  -  -  inst6502_las_absy:
 3455 D1:D036 ED 33 04 -      ADDCYC(4)
 3456 D1:D039 CD 90 B6 D1     PUSH_ABSYSPLIT
 3457 D1:D03D CD 36 AE D1         READ_ACCESS
 3458 D1:D041 E1 -  -  -      pop hl
 3459 D1:D042 DD A6 03 -      and a,(ix+REGSP)
 3460 D1:D045 DD 77 00 -      ld  (ix+REGA),A
 3461 D1:D048 DD 77 01 -      ld  (ix+REGX),A
 3462 D1:D04B DD 77 03 -      ld  (ix+REGSP),A
 3463 D1:D04E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3464 D1:D062 C3 CC B5 D1     jp i6502NextLoad
 3465 D1:D066 -  -  -  -  
 3466 D1:D066 -  -  -  -  ;-----------------------------------------------------------------------------
 3467 D1:D066 -  -  -  -  ;LAX - LDA oper + LDX oper
 3468 D1:D066 -  -  -  -  ;M -> A -> X. Flags affected: ZN
 3469 D1:D066 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3470 D1:D066 -  -  -  -  ;zeropage	LAX oper	A7	2	3  	
 3471 D1:D066 -  -  -  -  inst6502_lax_zp:
 3472 D1:D066 ED 33 03 -      ADDCYC(3)
 3473 D1:D069 7E -  -  -      ld  a,(hl)
 3474 D1:D06A 01 00 38 D0     ld  bc,ZEROPAGE
 3475 D1:D06E 81 -  -  -      add a,c
 3476 D1:D06F 4F -  -  -      ld  c,a
 3477 D1:D070 0A -  -  -      ld  a,(bc)
 3478 D1:D071 DD 77 00 -      ld  (ix+REGA),a
 3479 D1:D074 DD 77 01 -      ld  (ix+REGX),a
 3480 D1:D077 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3481 D1:D08B C3 CC B5 D1     jp i6502NextLoad
 3482 D1:D08F -  -  -  -  
 3483 D1:D08F -  -  -  -  ;zeropage,Y	LAX oper,Y	B7	2	4  	
 3484 D1:D08F -  -  -  -  inst6502_lax_zpy:
 3485 D1:D08F ED 33 04 -      ADDCYC(4)
 3486 D1:D092 7E -  -  -      ld  a,(hl)
 3487 D1:D093 01 00 38 D0     ld  bc,ZEROPAGE
 3488 D1:D097 81 -  -  -      add a,c
 3489 D1:D098 DD 86 02 -      add a,(ix+REGY)
 3490 D1:D09B 4F -  -  -      ld  c,a
 3491 D1:D09C 0A -  -  -      ld  a,(bc)
 3492 D1:D09D DD 77 00 -      ld  (ix+REGA),a
 3493 D1:D0A0 DD 77 01 -      ld  (ix+REGX),a
 3494 D1:D0A3 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3495 D1:D0B7 C3 CC B5 D1     jp i6502NextLoad
 3496 D1:D0BB -  -  -  -  
 3497 D1:D0BB -  -  -  -  ;absolute	LAX oper	AF	3	4  	
 3498 D1:D0BB -  -  -  -  inst6502_lax_abs:
 3499 D1:D0BB ED 33 04 -      ADDCYC(4)
 3500 D1:D0BE CD 74 B6 D1     call subroutine6502_abs_split_start
 3501 D1:D0C2 E5 -  -  -      push hl
 3502 D1:D0C3 50 -  -  -          ld  d,b
 3503 D1:D0C4 79 -  -  -          ld  a,c
 3504 D1:D0C5 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3505 D1:D0C7 ED 4C -  -          mlt bc
 3506 D1:D0C9 21 00 40 D0         ld  hl,PAGETABLE
 3507 D1:D0CD 09 -  -  -          add hl,bc
 3508 D1:D0CE ED 27 -  -          ld  hl,(hl)
 3509 D1:D0D0 06 00 -  -          ld  b,0
 3510 D1:D0D2 4F -  -  -          ld  c,a
 3511 D1:D0D3 09 -  -  -          add hl,bc   ;full address
 3512 D1:D0D4 CD 36 AE D1         READ_ACCESS
 3513 D1:D0D8 DD 77 00 -          ld (ix+REGA),a
 3514 D1:D0DB DD 77 01 -          ld (ix+REGX),a
 3515 D1:D0DE DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3516 D1:D0F2 E1 -  -  -      pop hl
 3517 D1:D0F3 C3 CC B5 D1     jp i6502NextLoad
 3518 D1:D0F7 -  -  -  -  
 3519 D1:D0F7 -  -  -  -  ;absolut,Y	LAX oper,Y	BF	3	4* 	
 3520 D1:D0F7 -  -  -  -  inst6502_lax_absy:
 3521 D1:D0F7 ED 33 04 -      ADDCYC(4)
 3522 D1:D0FA CD 90 B6 D1     PUSH_ABSYSPLIT
 3523 D1:D0FE CD 36 AE D1         READ_ACCESS
 3524 D1:D102 DD 77 00 -          ld (ix+REGA),a
 3525 D1:D105 DD 77 01 -          ld (ix+REGX),a
 3526 D1:D108 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3527 D1:D11C E1 -  -  -      pop hl
 3528 D1:D11D C3 CC B5 D1     jp i6502NextLoad
 3529 D1:D121 -  -  -  -  
 3530 D1:D121 -  -  -  -  ;(indirect,X)	LAX (oper,X)	A3	2	6  	
 3531 D1:D121 -  -  -  -  inst6502_lax_indx:
 3532 D1:D121 ED 33 06 -      ADDCYC(6)
 3533 D1:D124 E5 -  -  -      push hl
 3534 D1:D125 7E -  -  -          ld  a,(hl)
 3535 D1:D126 21 00 38 D0         ld  hl,ZEROPAGE
 3536 D1:D12A 85 -  -  -          add a,L
 3537 D1:D12B DD 86 01 -          add a,(ix+REGX)
 3538 D1:D12E 6F -  -  -          ld  L,a
 3539 D1:D12F 7E -  -  -          ld  a,(hl)
 3540 D1:D130 2C -  -  -          inc L
 3541 D1:D131 56 -  -  -          ld  d,(hl)
 3542 D1:D132 42 -  -  -          ld  b,d
 3543 D1:D133 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3544 D1:D135 ED 4C -  -          mlt bc
 3545 D1:D137 21 00 40 D0         ld  hl,PAGETABLE
 3546 D1:D13B 09 -  -  -          add hl,bc
 3547 D1:D13C ED 27 -  -          ld  hl,(hl)
 3548 D1:D13E 06 00 -  -          ld  b,0
 3549 D1:D140 4F -  -  -          ld  c,a
 3550 D1:D141 09 -  -  -          add hl,bc
 3551 D1:D142 CD 36 AE D1         READ_ACCESS
 3552 D1:D146 DD 77 00 -          ld (ix+REGA),a
 3553 D1:D149 DD 77 01 -          ld (ix+REGX),a
 3554 D1:D14C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3555 D1:D160 E1 -  -  -      pop hl
 3556 D1:D161 C3 CC B5 D1     jp i6502NextLoad
 3557 D1:D165 -  -  -  -  
 3558 D1:D165 -  -  -  -  ;(indirect),Y	LAX (oper),Y	B3	2	5* 
 3559 D1:D165 -  -  -  -  inst6502_lax_indy:
 3560 D1:D165 ED 33 05 -      ADDCYC(5)
 3561 D1:D168 E5 -  -  -      push hl
 3562 D1:D169 7E -  -  -          ld  a,(hl)
 3563 D1:D16A 21 00 38 D0         ld  hl,ZEROPAGE
 3564 D1:D16E 85 -  -  -          add a,L
 3565 D1:D16F 6F -  -  -          ld  L,a
 3566 D1:D170 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3567 D1:D171 2C -  -  -          inc L
 3568 D1:D172 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3569 D1:D175 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3570 D1:D176 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3571 D1:D178 FD 23 -  -          ADDCYC(1)
 3572 D1:D17A 24 -  -  -          inc h
 3573 D1:D17B 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3574 D1:D17C 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3575 D1:D17E ED 6C -  -          mlt hl          ;23.
 3576 D1:D180 01 00 40 D0         ld  bc,PAGETABLE
 3577 D1:D184 09 -  -  -          add hl,bc
 3578 D1:D185 ED 27 -  -          ld  hl,(hl)     ;address get.
 3579 D1:D187 01 00 00 00         ld  bc,0
 3580 D1:D18B 4F -  -  -          ld  c,a
 3581 D1:D18C 09 -  -  -          add hl,bc       ;Full address get.
 3582 D1:D18D CD 36 AE D1         READ_ACCESS
 3583 D1:D191 DD 77 00 -          ld  (ix+REGA),a
 3584 D1:D194 DD 77 01 -          ld  (ix+REGX),a
 3585 D1:D197 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3586 D1:D1AB E1 -  -  -      pop hl
 3587 D1:D1AC C3 CC B5 D1     jp i6502NextLoad
 3588 D1:D1B0 -  -  -  -  
 3589 D1:D1B0 -  -  -  -  ;-----------------------------------------------------------------------------
 3590 D1:D1B0 -  -  -  -  ;LXA (LAX immediate)
 3591 D1:D1B0 -  -  -  -  ;Store * AND oper in A and X
 3592 D1:D1B0 -  -  -  -  ;Highly unstable, involves a 'magic' constant, see ANE
 3593 D1:D1B0 -  -  -  -  ;(A OR CONST) AND oper -> A -> X
 3594 D1:D1B0 -  -  -  -  ;immediate	LXA #oper	AB	2	2  	††
 3595 D1:D1B0 -  -  -  -  inst6502_lxa:
 3596 D1:D1B0 ED 33 02 -      ADDCYC(2)
 3597 D1:D1B3 ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3598 D1:D1B5 DD B6 00 -      or  a,(ix+REGA)
 3599 D1:D1B8 A6 -  -  -      and a,(hl)
 3600 D1:D1B9 DD 77 00 -      ld  (ix+REGA),a
 3601 D1:D1BC DD 77 01 -      ld  (ix+REGX),a
 3602 D1:D1BF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3603 D1:D1D3 C3 CC B5 D1     jp  i6502NextLoad
 3604 D1:D1D7 -  -  -  -  
 3605 D1:D1D7 -  -  -  -  ;-----------------------------------------------------------------------------
 3606 D1:D1D7 -  -  -  -  ;RLA - ROL oper + AND oper
 3607 D1:D1D7 -  -  -  -  ;M = C <- [76543210] <- C, A AND M -> A. flags CZN
 3608 D1:D1D7 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3609 D1:D1D7 -  -  -  -  ;zeropage	RLA oper	27	2	5  	
 3610 D1:D1D7 -  -  -  -  inst6502_rla_zp:
 3611 D1:D1D7 ED 33 05 -      ADDCYC(5)
 3612 D1:D1DA 7E -  -  -      ld  a,(hl)
 3613 D1:D1DB 01 00 38 D0     ld  bc,ZEROPAGE
 3614 D1:D1DF 81 -  -  -      add a,c
 3615 D1:D1E0 4F -  -  -      ld  c,a
 3616 D1:D1E1 DD 7E 04 -      ld  a,(ix+REGSR)
 3617 D1:D1E4 1F -  -  -      rra
 3618 D1:D1E5 0A -  -  -      ld  a,(bc)
 3619 D1:D1E6 17 -  -  -      rla
 3620 D1:D1E7 02 -  -  -      ld  (bc),a
 3621 D1:D1E8 -  -  -  -      ;Flag breakdown to optimize for split operation
 3622 D1:D1E8 DD 46 04 -      ld  b,(ix+REGSR)
 3623 D1:D1EB CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3624 D1:D1F1 DD A6 00 -      and a,(ix+REGA)
 3625 D1:D1F4 DD 77 00 -      ld  (ix+REGA),a
 3626 D1:D1F7 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3627 D1:D1FD 87 -  -  -      add a,a
 3628 D1:D1FE CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3629 D1:D204 DD 70 04 -      ld  (ix+REGSR),b
 3630 D1:D207 C3 CC B5 D1     jp i6502NextLoad
 3631 D1:D20B -  -  -  -  
 3632 D1:D20B -  -  -  -  ;zeropage,X	RLA oper,X	37	2	6  	
 3633 D1:D20B -  -  -  -  inst6502_rla_zpx:
 3634 D1:D20B ED 33 06 -      ADDCYC(6)
 3635 D1:D20E 7E -  -  -      ld  a,(hl)
 3636 D1:D20F 01 00 38 D0     ld  bc,ZEROPAGE
 3637 D1:D213 81 -  -  -      add a,c
 3638 D1:D214 DD 86 01 -      add a,(ix+REGX)
 3639 D1:D217 4F -  -  -      ld  c,a
 3640 D1:D218 DD 7E 04 -      ld  a,(ix+REGSR)
 3641 D1:D21B 1F -  -  -      rra
 3642 D1:D21C 0A -  -  -      ld  a,(bc)
 3643 D1:D21D 17 -  -  -      rla
 3644 D1:D21E 02 -  -  -      ld  (bc),a
 3645 D1:D21F -  -  -  -      ;Flag breakdown to optimize for split operation
 3646 D1:D21F DD 46 04 -      ld  b,(ix+REGSR)
 3647 D1:D222 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3648 D1:D228 DD A6 00 -      and a,(ix+REGA)
 3649 D1:D22B DD 77 00 -      ld  (ix+REGA),a
 3650 D1:D22E CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3651 D1:D234 87 -  -  -      add a,a
 3652 D1:D235 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3653 D1:D23B DD 70 04 -      ld  (ix+REGSR),b
 3654 D1:D23E C3 CC B5 D1     jp i6502NextLoad
 3655 D1:D242 -  -  -  -  
 3656 D1:D242 -  -  -  -  ;absolute	RLA oper	2F	3	6  	
 3657 D1:D242 -  -  -  -  inst6502_rla_abs:
 3658 D1:D242 ED 33 06 -      ADDCYC(6)
 3659 D1:D245 CD 74 B6 D1     call subroutine6502_abs_split_start
 3660 D1:D249 E5 -  -  -      push hl
 3661 D1:D24A 50 -  -  -          ld  d,b
 3662 D1:D24B 79 -  -  -          ld  a,c
 3663 D1:D24C 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3664 D1:D24E ED 4C -  -          mlt bc
 3665 D1:D250 21 00 40 D0         ld  hl,PAGETABLE
 3666 D1:D254 09 -  -  -          add hl,bc
 3667 D1:D255 ED 27 -  -          ld  hl,(hl)
 3668 D1:D257 06 00 -  -          ld  b,0
 3669 D1:D259 4F -  -  -          ld  c,a
 3670 D1:D25A 09 -  -  -          add hl,bc   ;full address
 3671 D1:D25B CD 36 AE D1         READ_ACCESS
 3672 D1:D25F DD 46 04 -          ld  b,(ix+REGSR)
 3673 D1:D262 CB 18 -  -          rr b
 3674 D1:D264 17 -  -  -          rla
 3675 D1:D265 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3676 D1:D266 -  -  -  -          ;Split oper
 3677 D1:D266 DD 46 04 -          ld  b,(ix+REGSR)
 3678 D1:D269 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3679 D1:D26F DD A6 00 -          and a,(ix+REGA)
 3680 D1:D272 DD 77 00 -          ld  (ix+REGA),a
 3681 D1:D275 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3682 D1:D27B 87 -  -  -          add a,a
 3683 D1:D27C CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3684 D1:D282 DD 70 04 -          ld  (ix+REGSR),b
 3685 D1:D285 41 -  -  -          ld  b,c
 3686 D1:D286 CD 59 AE D1         WRITE_ACCESS
 3687 D1:D28A E1 -  -  -      pop hl
 3688 D1:D28B C3 CC B5 D1     jp i6502NextLoad
 3689 D1:D28F -  -  -  -  
 3690 D1:D28F -  -  -  -  ;absolut,X	RLA oper,X	3F	3	7  	
 3691 D1:D28F -  -  -  -  inst6502_rla_absx:
 3692 D1:D28F ED 33 07 -      ADDCYC(7)
 3693 D1:D292 CD D1 B6 D1     PUSH_ABSXSPLIT_NODEP
 3694 D1:D296 CD 36 AE D1         READ_ACCESS
 3695 D1:D29A DD 46 04 -          ld  b,(ix+REGSR)
 3696 D1:D29D CB 18 -  -          rr b
 3697 D1:D29F 17 -  -  -          rla
 3698 D1:D2A0 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3699 D1:D2A1 -  -  -  -          ;Split oper
 3700 D1:D2A1 DD 46 04 -          ld  b,(ix+REGSR)
 3701 D1:D2A4 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3702 D1:D2AA DD A6 00 -          and a,(ix+REGA)
 3703 D1:D2AD DD 77 00 -          ld  (ix+REGA),a
 3704 D1:D2B0 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3705 D1:D2B6 87 -  -  -          add a,a
 3706 D1:D2B7 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3707 D1:D2BD DD 70 04 -          ld  (ix+REGSR),b
 3708 D1:D2C0 41 -  -  -          ld  b,c
 3709 D1:D2C1 CD 59 AE D1         WRITE_ACCESS
 3710 D1:D2C5 E1 -  -  -      pop hl
 3711 D1:D2C6 C3 CC B5 D1     jp i6502NextLoad
 3712 D1:D2CA -  -  -  -  
 3713 D1:D2CA -  -  -  -  ;absolut,Y	RLA oper,Y	3B	3	7  	
 3714 D1:D2CA -  -  -  -  inst6502_rla_absy:
 3715 D1:D2CA ED 33 07 -      ADDCYC(7)
 3716 D1:D2CD CD CC B6 D1     PUSH_ABSYSPLIT_NODEP
 3717 D1:D2D1 CD 36 AE D1         READ_ACCESS
 3718 D1:D2D5 DD 46 04 -          ld  b,(ix+REGSR)
 3719 D1:D2D8 CB 18 -  -          rr b
 3720 D1:D2DA 17 -  -  -          rla
 3721 D1:D2DB 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3722 D1:D2DC -  -  -  -          ;Split oper
 3723 D1:D2DC DD 46 04 -          ld  b,(ix+REGSR)
 3724 D1:D2DF CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3725 D1:D2E5 DD A6 00 -          and a,(ix+REGA)
 3726 D1:D2E8 DD 77 00 -          ld  (ix+REGA),a
 3727 D1:D2EB CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3728 D1:D2F1 87 -  -  -          add a,a
 3729 D1:D2F2 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3730 D1:D2F8 DD 70 04 -          ld  (ix+REGSR),b
 3731 D1:D2FB 41 -  -  -          ld  b,c
 3732 D1:D2FC CD 59 AE D1         WRITE_ACCESS
 3733 D1:D300 E1 -  -  -      pop hl
 3734 D1:D301 C3 CC B5 D1     jp i6502NextLoad
 3735 D1:D305 -  -  -  -  
 3736 D1:D305 -  -  -  -  ;(indirect,X)	RLA (oper,X)	23	2	8  	
 3737 D1:D305 -  -  -  -  isnt6502_rla_indx:
 3738 D1:D305 ED 33 08 -      ADDCYC(8)
 3739 D1:D308 E5 -  -  -      push hl
 3740 D1:D309 7E -  -  -          ld  a,(hl)
 3741 D1:D30A 21 00 38 D0         ld  hl,ZEROPAGE
 3742 D1:D30E 85 -  -  -          add a,L
 3743 D1:D30F DD 86 01 -          add a,(ix+REGX)
 3744 D1:D312 6F -  -  -          ld  L,a
 3745 D1:D313 7E -  -  -          ld  a,(hl)
 3746 D1:D314 2C -  -  -          inc L
 3747 D1:D315 56 -  -  -          ld  d,(hl)
 3748 D1:D316 42 -  -  -          ld  b,d
 3749 D1:D317 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3750 D1:D319 ED 4C -  -          mlt bc
 3751 D1:D31B 21 00 40 D0         ld  hl,PAGETABLE
 3752 D1:D31F 09 -  -  -          add hl,bc
 3753 D1:D320 ED 27 -  -          ld  hl,(hl)
 3754 D1:D322 06 00 -  -          ld  b,0
 3755 D1:D324 4F -  -  -          ld  c,a
 3756 D1:D325 09 -  -  -          add hl,bc
 3757 D1:D326 CD 36 AE D1         READ_ACCESS
 3758 D1:D32A DD 46 04 -          ld  b,(ix+REGSR)
 3759 D1:D32D CB 18 -  -          rr b
 3760 D1:D32F 17 -  -  -          rla
 3761 D1:D330 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3762 D1:D331 -  -  -  -          ;Split oper
 3763 D1:D331 DD 46 04 -          ld  b,(ix+REGSR)
 3764 D1:D334 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3765 D1:D33A DD A6 00 -          and a,(ix+REGA)
 3766 D1:D33D DD 77 00 -          ld  (ix+REGA),a
 3767 D1:D340 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3768 D1:D346 87 -  -  -          add a,a
 3769 D1:D347 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3770 D1:D34D DD 70 04 -          ld  (ix+REGSR),b
 3771 D1:D350 41 -  -  -          ld  b,c
 3772 D1:D351 CD 59 AE D1         WRITE_ACCESS
 3773 D1:D355 E1 -  -  -      pop hl
 3774 D1:D356 C3 CC B5 D1     jp  i6502NextLoad
 3775 D1:D35A -  -  -  -  
 3776 D1:D35A -  -  -  -  ;(indirect),Y	RLA (oper),Y	33	2	8  
 3777 D1:D35A -  -  -  -  inst6502_rla_indy:
 3778 D1:D35A ED 33 08 -      ADDCYC(8)
 3779 D1:D35D E5 -  -  -      push hl
 3780 D1:D35E 7E -  -  -          ld  a,(hl)
 3781 D1:D35F 21 00 38 D0         ld  hl,ZEROPAGE
 3782 D1:D363 85 -  -  -          add a,L
 3783 D1:D364 6F -  -  -          ld  L,a
 3784 D1:D365 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3785 D1:D366 2C -  -  -          inc L
 3786 D1:D367 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3787 D1:D36A 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3788 D1:D36B 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3789 D1:D36D 24 -  -  -          inc h
 3790 D1:D36E 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3791 D1:D36F 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3792 D1:D371 ED 6C -  -          mlt hl          ;23.
 3793 D1:D373 01 00 40 D0         ld  bc,PAGETABLE
 3794 D1:D377 09 -  -  -          add hl,bc
 3795 D1:D378 ED 27 -  -          ld  hl,(hl)     ;address get.
 3796 D1:D37A 01 00 00 00         ld  bc,0
 3797 D1:D37E 4F -  -  -          ld  c,a
 3798 D1:D37F 09 -  -  -          add hl,bc       ;Full address get.
 3799 D1:D380 CD 36 AE D1         READ_ACCESS
 3800 D1:D384 DD 46 04 -          ld  b,(ix+REGSR)
 3801 D1:D387 CB 18 -  -          rr b
 3802 D1:D389 17 -  -  -          rla
 3803 D1:D38A 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3804 D1:D38B -  -  -  -          ;Split oper
 3805 D1:D38B DD 46 04 -          ld  b,(ix+REGSR)
 3806 D1:D38E CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3807 D1:D394 DD A6 00 -          and a,(ix+REGA)
 3808 D1:D397 DD 77 00 -          ld  (ix+REGA),a
 3809 D1:D39A CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3810 D1:D3A0 87 -  -  -          add a,a
 3811 D1:D3A1 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3812 D1:D3A7 DD 70 04 -          ld  (ix+REGSR),b
 3813 D1:D3AA 41 -  -  -          ld  b,c
 3814 D1:D3AB CD 59 AE D1         WRITE_ACCESS
 3815 D1:D3AF E1 -  -  -      pop hl
 3816 D1:D3B0 C3 CC B5 D1     jp  i6502NextLoad
 3817 D1:D3B4 -  -  -  -  
 3818 D1:D3B4 -  -  -  -  ;-----------------------------------------------------------------------------
 3819 D1:D3B4 -  -  -  -  ;RRA
 3820 D1:D3B4 -  -  -  -  ;ROR oper + ADC oper
 3821 D1:D3B4 -  -  -  -  ;M = C -> [76543210] -> C, A + M + C -> A, C. Affects VCZN
 3822 D1:D3B4 -  -  -  -  
 3823 D1:D3B4 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3824 D1:D3B4 -  -  -  -  ;zeropage	RRA oper	67	2	5  	
 3825 D1:D3B4 -  -  -  -  inst6502_rra_zp:
 3826 D1:D3B4 ED 33 05 -      ADDCYC(5)
 3827 D1:D3B7 7E -  -  -      ld  a,(hl)
 3828 D1:D3B8 01 00 38 D0     ld  bc,ZEROPAGE
 3829 D1:D3BC 81 -  -  -      add a,c
 3830 D1:D3BD 4F -  -  -      ld  c,a
 3831 D1:D3BE DD 7E 04 -      ld  a,(ix+REGSR)
 3832 D1:D3C1 1F -  -  -      rra
 3833 D1:D3C2 0A -  -  -      ld  a,(bc)
 3834 D1:D3C3 1F -  -  -      rra
 3835 D1:D3C4 02 -  -  -      ld  (bc),a
 3836 D1:D3C5 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 3837 D1:D3C9 30 04 -  -      jr nc,$+6
 3838 D1:D3CB DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 3839 D1:D3CF 4F -  -  -      ld  c,a
 3840 D1:D3D0 C3 06 B7 D1     jp  subroutine6502_adc_combined_end
 3841 D1:D3D4 -  -  -  -  
 3842 D1:D3D4 -  -  -  -  ;zeropage,X	RRA oper,X	77	2	6  	
 3843 D1:D3D4 -  -  -  -  inst6502_rra_zpx:
 3844 D1:D3D4 ED 33 06 -      ADDCYC(6)
 3845 D1:D3D7 7E -  -  -      ld  a,(hl)
 3846 D1:D3D8 01 00 38 D0     ld  bc,ZEROPAGE
 3847 D1:D3DC 81 -  -  -      add a,c
 3848 D1:D3DD DD 86 01 -      add a,(ix+REGX)
 3849 D1:D3E0 4F -  -  -      ld  c,a
 3850 D1:D3E1 DD 7E 04 -      ld  a,(ix+REGSR)
 3851 D1:D3E4 1F -  -  -      rra
 3852 D1:D3E5 0A -  -  -      ld  a,(bc)
 3853 D1:D3E6 1F -  -  -      rra
 3854 D1:D3E7 02 -  -  -      ld  (bc),a
 3855 D1:D3E8 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 3856 D1:D3EC 30 04 -  -      jr nc,$+6
 3857 D1:D3EE DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 3858 D1:D3F2 4F -  -  -      ld  c,a
 3859 D1:D3F3 C3 06 B7 D1     jp  subroutine6502_adc_combined_end
 3860 D1:D3F7 -  -  -  -  
 3861 D1:D3F7 -  -  -  -  ;absolute	RRA oper	6F	3	6  	
 3862 D1:D3F7 -  -  -  -  inst6502_rra_abs:
 3863 D1:D3F7 ED 33 06 -      ADDCYC(6)
 3864 D1:D3FA CD 74 B6 D1     call subroutine6502_abs_split_start
 3865 D1:D3FE E5 -  -  -      push hl
 3866 D1:D3FF 50 -  -  -          ld  d,b
 3867 D1:D400 79 -  -  -          ld  a,c
 3868 D1:D401 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3869 D1:D403 ED 4C -  -          mlt bc
 3870 D1:D405 21 00 40 D0         ld  hl,PAGETABLE
 3871 D1:D409 09 -  -  -          add hl,bc
 3872 D1:D40A ED 27 -  -          ld  hl,(hl)
 3873 D1:D40C 06 00 -  -          ld  b,0
 3874 D1:D40E 4F -  -  -          ld  c,a
 3875 D1:D40F 09 -  -  -          add hl,bc   ;full address
 3876 D1:D410 CD 36 AE D1         READ_ACCESS
 3877 D1:D414 DD 46 04 -          ld  b,(ix+REGSR)
 3878 D1:D417 CB 18 -  -          rr b
 3879 D1:D419 1F -  -  -          rra
 3880 D1:D41A DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3881 D1:D41E 30 04 -  -          jr nc,$+6
 3882 D1:D420 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3883 D1:D424 47 -  -  -          ld  b,a
 3884 D1:D425 C5 -  -  -          push bc
 3885 D1:D426 CD 59 AE D1             WRITE_ACCESS
 3886 D1:D42A C1 -  -  -          pop bc
 3887 D1:D42B 48 -  -  -          ld c,b
 3888 D1:D42C E1 -  -  -      pop hl
 3889 D1:D42D C3 06 B7 D1     jp  subroutine6502_adc_combined_end
 3890 D1:D431 -  -  -  -  
 3891 D1:D431 -  -  -  -  ;absolut,X	RRA oper,X	7F	3	7  	
 3892 D1:D431 -  -  -  -  inst6502_rra_absx:
 3893 D1:D431 ED 33 07 -      ADDCYC(7)
 3894 D1:D434 CD D1 B6 D1     PUSH_ABSXSPLIT_NODEP
 3895 D1:D438 CD 36 AE D1         READ_ACCESS
 3896 D1:D43C DD 46 04 -          ld  b,(ix+REGSR)
 3897 D1:D43F CB 18 -  -          rr b
 3898 D1:D441 1F -  -  -          rra
 3899 D1:D442 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3900 D1:D446 30 04 -  -          jr nc,$+6
 3901 D1:D448 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3902 D1:D44C 47 -  -  -          ld  b,a
 3903 D1:D44D C5 -  -  -          push bc
 3904 D1:D44E CD 59 AE D1             WRITE_ACCESS
 3905 D1:D452 C1 -  -  -          pop bc
 3906 D1:D453 48 -  -  -          ld c,b
 3907 D1:D454 E1 -  -  -      pop hl
 3908 D1:D455 C3 06 B7 D1     jp  subroutine6502_adc_combined_end
 3909 D1:D459 -  -  -  -  
 3910 D1:D459 -  -  -  -  ;absolut,Y	RRA oper,Y	7B	3	7  	
 3911 D1:D459 -  -  -  -  inst6502_rra_absy:
 3912 D1:D459 ED 33 07 -      ADDCYC(7)
 3913 D1:D45C CD CC B6 D1     PUSH_ABSYSPLIT_NODEP
 3914 D1:D460 CD 36 AE D1         READ_ACCESS
 3915 D1:D464 DD 46 04 -          ld  b,(ix+REGSR)
 3916 D1:D467 CB 18 -  -          rr b
 3917 D1:D469 1F -  -  -          rra
 3918 D1:D46A DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3919 D1:D46E 30 04 -  -          jr nc,$+6
 3920 D1:D470 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3921 D1:D474 47 -  -  -          ld  b,a
 3922 D1:D475 C5 -  -  -          push bc
 3923 D1:D476 CD 59 AE D1             WRITE_ACCESS
 3924 D1:D47A C1 -  -  -          pop bc
 3925 D1:D47B 48 -  -  -          ld c,b
 3926 D1:D47C E1 -  -  -      pop hl
 3927 D1:D47D C3 06 B7 D1     jp  subroutine6502_adc_combined_end
 3928 D1:D481 -  -  -  -  
 3929 D1:D481 -  -  -  -  ;(indirect,X)	RRA (oper,X)	63	2	8  	
 3930 D1:D481 -  -  -  -  isnt6502_rra_indx:
 3931 D1:D481 ED 33 08 -      ADDCYC(8)
 3932 D1:D484 E5 -  -  -      push hl
 3933 D1:D485 7E -  -  -          ld  a,(hl)
 3934 D1:D486 21 00 38 D0         ld  hl,ZEROPAGE
 3935 D1:D48A 85 -  -  -          add a,L
 3936 D1:D48B DD 86 01 -          add a,(ix+REGX)
 3937 D1:D48E 6F -  -  -          ld  L,a
 3938 D1:D48F 7E -  -  -          ld  a,(hl)
 3939 D1:D490 2C -  -  -          inc L
 3940 D1:D491 56 -  -  -          ld  d,(hl)
 3941 D1:D492 42 -  -  -          ld  b,d
 3942 D1:D493 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3943 D1:D495 ED 4C -  -          mlt bc
 3944 D1:D497 21 00 40 D0         ld  hl,PAGETABLE
 3945 D1:D49B 09 -  -  -          add hl,bc
 3946 D1:D49C ED 27 -  -          ld  hl,(hl)
 3947 D1:D49E 06 00 -  -          ld  b,0
 3948 D1:D4A0 4F -  -  -          ld  c,a
 3949 D1:D4A1 09 -  -  -          add hl,bc
 3950 D1:D4A2 CD 36 AE D1         READ_ACCESS
 3951 D1:D4A6 DD 46 04 -          ld  b,(ix+REGSR)
 3952 D1:D4A9 CB 18 -  -          rr b
 3953 D1:D4AB 1F -  -  -          rra
 3954 D1:D4AC DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3955 D1:D4B0 30 04 -  -          jr nc,$+6
 3956 D1:D4B2 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3957 D1:D4B6 47 -  -  -          ld  b,a
 3958 D1:D4B7 C5 -  -  -          push bc
 3959 D1:D4B8 CD 59 AE D1             WRITE_ACCESS
 3960 D1:D4BC C1 -  -  -          pop bc
 3961 D1:D4BD 48 -  -  -          ld c,b
 3962 D1:D4BE E1 -  -  -      pop hl
 3963 D1:D4BF C3 06 B7 D1     jp  subroutine6502_adc_combined_end
 3964 D1:D4C3 -  -  -  -  
 3965 D1:D4C3 -  -  -  -  ;(indirect),Y	RRA (oper),Y	73	2	8  
 3966 D1:D4C3 -  -  -  -  inst6502_rra_indy:
 3967 D1:D4C3 ED 33 08 -      ADDCYC(8)
 3968 D1:D4C6 E5 -  -  -      push hl
 3969 D1:D4C7 7E -  -  -          ld  a,(hl)
 3970 D1:D4C8 21 00 38 D0         ld  hl,ZEROPAGE
 3971 D1:D4CC 85 -  -  -          add a,L
 3972 D1:D4CD 6F -  -  -          ld  L,a
 3973 D1:D4CE 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3974 D1:D4CF 2C -  -  -          inc L
 3975 D1:D4D0 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3976 D1:D4D3 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3977 D1:D4D4 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3978 D1:D4D6 24 -  -  -          inc h
 3979 D1:D4D7 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3980 D1:D4D8 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3981 D1:D4DA ED 6C -  -          mlt hl          ;23.
 3982 D1:D4DC 01 00 40 D0         ld  bc,PAGETABLE
 3983 D1:D4E0 09 -  -  -          add hl,bc
 3984 D1:D4E1 ED 27 -  -          ld  hl,(hl)     ;address get.
 3985 D1:D4E3 01 00 00 00         ld  bc,0
 3986 D1:D4E7 4F -  -  -          ld  c,a
 3987 D1:D4E8 09 -  -  -          add hl,bc       ;Full address get.
 3988 D1:D4E9 CD 36 AE D1         READ_ACCESS
 3989 D1:D4ED DD 46 04 -          ld  b,(ix+REGSR)
 3990 D1:D4F0 CB 18 -  -          rr b
 3991 D1:D4F2 1F -  -  -          rra
 3992 D1:D4F3 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3993 D1:D4F7 30 04 -  -          jr nc,$+6
 3994 D1:D4F9 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3995 D1:D4FD 47 -  -  -          ld  b,a
 3996 D1:D4FE C5 -  -  -          push bc
 3997 D1:D4FF CD 59 AE D1             WRITE_ACCESS
 3998 D1:D503 C1 -  -  -          pop bc
 3999 D1:D504 48 -  -  -          ld c,b
 4000 D1:D505 E1 -  -  -      pop hl
 4001 D1:D506 C3 06 B7 D1     jp  subroutine6502_adc_combined_end
 4002 D1:D50A -  -  -  -  
 4003 D1:D50A -  -  -  -  ;-----------------------------------------------------------------------------
 4004 D1:D50A -  -  -  -  ;SAX (AXS, AAX) - A AND X -> M
 4005 D1:D50A -  -  -  -  ;A and X are put on the bus at the same time (resulting effectively in an 
 4006 D1:D50A -  -  -  -  ;AND operation) and stored in M. Flags not affected.
 4007 D1:D50A -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4008 D1:D50A -  -  -  -  ;zeropage	SAX oper	87	2	3  	
 4009 D1:D50A -  -  -  -  inst6502_sax_zp:
 4010 D1:D50A ED 33 03 -      ADDCYC(3)
 4011 D1:D50D 7E -  -  -      ld  a,(hl)
 4012 D1:D50E 01 00 38 D0     ld  bc,ZEROPAGE
 4013 D1:D512 81 -  -  -      add a,c
 4014 D1:D513 4F -  -  -      ld  c,a
 4015 D1:D514 DD 7E 00 -      ld  a,(ix+REGA)
 4016 D1:D517 DD A6 01 -      and a,(ix+REGX)
 4017 D1:D51A 02 -  -  -      ld  (bc),a
 4018 D1:D51B C3 CC B5 D1     jp i6502NextLoad
 4019 D1:D51F -  -  -  -  
 4020 D1:D51F -  -  -  -  
 4021 D1:D51F -  -  -  -  ;zeropage,Y	SAX oper,Y	97	2	4  	
 4022 D1:D51F -  -  -  -  inst6502_sax_zpy:
 4023 D1:D51F ED 33 04 -      ADDCYC(4)
 4024 D1:D522 7E -  -  -      ld  a,(hl)
 4025 D1:D523 01 00 38 D0     ld  bc,ZEROPAGE
 4026 D1:D527 81 -  -  -      add a,c
 4027 D1:D528 DD 86 02 -      add a,(ix+REGY)
 4028 D1:D52B 4F -  -  -      ld  c,a
 4029 D1:D52C DD 7E 00 -      ld  a,(ix+REGA)
 4030 D1:D52F DD A6 01 -      and a,(ix+REGX)
 4031 D1:D532 02 -  -  -      ld  (bc),a
 4032 D1:D533 C3 CC B5 D1     jp i6502NextLoad
 4033 D1:D537 -  -  -  -  
 4034 D1:D537 -  -  -  -  
 4035 D1:D537 -  -  -  -  ;absolute	SAX oper	8F	3	4  	
 4036 D1:D537 -  -  -  -  inst6502_sax_abs:
 4037 D1:D537 ED 33 04 -      ADDCYC(4)
 4038 D1:D53A CD 74 B6 D1     call subroutine6502_abs_split_start
 4039 D1:D53E E5 -  -  -      push hl
 4040 D1:D53F 50 -  -  -          ld  d,b
 4041 D1:D540 79 -  -  -          ld  a,c
 4042 D1:D541 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4043 D1:D543 ED 4C -  -          mlt bc
 4044 D1:D545 21 00 40 D0         ld  hl,PAGETABLE
 4045 D1:D549 09 -  -  -          add hl,bc
 4046 D1:D54A ED 27 -  -          ld  hl,(hl)
 4047 D1:D54C 06 00 -  -          ld  b,0
 4048 D1:D54E 4F -  -  -          ld  c,a
 4049 D1:D54F 09 -  -  -          add hl,bc   ;full address
 4050 D1:D550 DD 7E 00 -          ld  a,(ix+REGA)
 4051 D1:D553 DD A6 01 -          and a,(ix+REGX)
 4052 D1:D556 47 -  -  -          ld  b,a
 4053 D1:D557 CD 59 AE D1         WRITE_ACCESS
 4054 D1:D55B E1 -  -  -      pop hl
 4055 D1:D55C C3 CC B5 D1     jp i6502NextLoad
 4056 D1:D560 -  -  -  -  
 4057 D1:D560 -  -  -  -  ;(indirect,X)	SAX (oper,X)	83	2	6  
 4058 D1:D560 -  -  -  -  inst6502_sax_indx:
 4059 D1:D560 ED 33 06 -      ADDCYC(6)
 4060 D1:D563 E5 -  -  -      push hl
 4061 D1:D564 7E -  -  -          ld  a,(hl)
 4062 D1:D565 21 00 38 D0         ld  hl,ZEROPAGE
 4063 D1:D569 85 -  -  -          add a,L
 4064 D1:D56A DD 86 01 -          add a,(ix+REGX)
 4065 D1:D56D 6F -  -  -          ld  L,a
 4066 D1:D56E 7E -  -  -          ld  a,(hl)
 4067 D1:D56F 2C -  -  -          inc L
 4068 D1:D570 56 -  -  -          ld  d,(hl)
 4069 D1:D571 42 -  -  -          ld  b,d
 4070 D1:D572 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4071 D1:D574 ED 4C -  -          mlt bc
 4072 D1:D576 21 00 40 D0         ld  hl,PAGETABLE
 4073 D1:D57A 09 -  -  -          add hl,bc
 4074 D1:D57B ED 27 -  -          ld  hl,(hl)
 4075 D1:D57D 06 00 -  -          ld  b,0
 4076 D1:D57F 4F -  -  -          ld  c,a
 4077 D1:D580 09 -  -  -          add hl,bc
 4078 D1:D581 DD 7E 00 -          ld  a,(ix+REGA)
 4079 D1:D584 DD A6 01 -          and a,(ix+REGX)
 4080 D1:D587 47 -  -  -          ld  b,a
 4081 D1:D588 CD 59 AE D1         WRITE_ACCESS
 4082 D1:D58C E1 -  -  -      pop hl
 4083 D1:D58D C3 CC B5 D1     jp i6502NextLoad
 4084 D1:D591 -  -  -  -  
 4085 D1:D591 -  -  -  -  ;-----------------------------------------------------------------------------
 4086 D1:D591 -  -  -  -  ;SBX (AXS, SAX) - CMP and DEX at once, sets flags like CMP
 4087 D1:D591 -  -  -  -  ;(A AND X) - oper -> X.  Flags affected: CZN
 4088 D1:D591 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4089 D1:D591 -  -  -  -  ;immediate	SBX #oper	CB	2	2  
 4090 D1:D591 -  -  -  -  inst6502_sbx_imm:
 4091 D1:D591 DD 7E 00 -      ld  a,(ix+REGA)
 4092 D1:D594 DD A6 01 -      and a,(ix+REGX)
 4093 D1:D597 96 -  -  -      sub a,(hl)
 4094 D1:D598 DD 77 01 -      ld  (ix+REGX),a
 4095 D1:D59B 3F -  -  -      ccf
 4096 D1:D59C DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 4097 D1:D5B6 C3 CC B5 D1     jp  i6502NextLoad
 4098 D1:D5BA -  -  -  -  
 4099 D1:D5BA -  -  -  -  ;-----------------------------------------------------------------------------
 4100 D1:D5BA -  -  -  -  ;SHA (AHX, AXA) - Stores A AND X AND (high-byte of addr. + 1) at addr.
 4101 D1:D5BA -  -  -  -  ;unstable: sometimes 'AND (H+1)' is dropped, 
 4102 D1:D5BA -  -  -  -  ;page boundary crossings may not work 
 4103 D1:D5BA -  -  -  -  ;(with the high-byte of the value used as the high-byte of the address)
 4104 D1:D5BA -  -  -  -  ;A AND X AND (H+1) -> M
 4105 D1:D5BA -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4106 D1:D5BA -  -  -  -  ;
 4107 D1:D5BA -  -  -  -  ;NOTE: NOT GOING TO IMPLEMENT THESE. THEY'LL ADVANCE THE 6502 PC IN THE CORRECT
 4108 D1:D5BA -  -  -  -  ;MANNER BUT NOTHING MORE. THE CPU WILL HALT WHEN ENCOUNTERING ONE OF THESE.
 4109 D1:D5BA -  -  -  -  ;
 4110 D1:D5BA -  -  -  -  ;absolut,Y	SHA oper,Y	9F	3	5  	†
 4111 D1:D5BA -  -  -  -  inst6502_sha_absy:
 4112 D1:D5BA ED 33 05 -      ADDCYC(5)
 4113 D1:D5BD CD 90 B6 D1     PUSH_ABSYSPLIT
 4114 D1:D5C1 18 FE -  -          jr $
 4115 D1:D5C3 E1 -  -  -      pop hl
 4116 D1:D5C4 C3 CC B5 D1     jp i6502NextLoad
 4117 D1:D5C8 -  -  -  -  
 4118 D1:D5C8 -  -  -  -  ;(indirect),Y	SHA (oper),Y	93	2	6  	†
 4119 D1:D5C8 -  -  -  -  inst6502_sha_indy:
 4120 D1:D5C8 ED 33 06 -      ADDCYC(6)
 4121 D1:D5CB E5 -  -  -      push hl
 4122 D1:D5CC 7E -  -  -          ld  a,(hl)
 4123 D1:D5CD 21 00 38 D0         ld  hl,ZEROPAGE
 4124 D1:D5D1 85 -  -  -          add a,L
 4125 D1:D5D2 6F -  -  -          ld  L,a
 4126 D1:D5D3 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4127 D1:D5D4 2C -  -  -          inc L
 4128 D1:D5D5 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4129 D1:D5D8 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4130 D1:D5D9 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4131 D1:D5DB 24 -  -  -          inc h
 4132 D1:D5DC 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4133 D1:D5DD 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4134 D1:D5DF ED 6C -  -          mlt hl          ;23.
 4135 D1:D5E1 01 00 40 D0         ld  bc,PAGETABLE
 4136 D1:D5E5 09 -  -  -          add hl,bc
 4137 D1:D5E6 ED 27 -  -          ld  hl,(hl)     ;address get.
 4138 D1:D5E8 01 00 00 00         ld  bc,0
 4139 D1:D5EC 4F -  -  -          ld  c,a
 4140 D1:D5ED 09 -  -  -          add hl,bc       ;Full address get.
 4141 D1:D5EE CD 36 AE D1         READ_ACCESS
 4142 D1:D5F2 18 FE -  -          jr $
 4143 D1:D5F4 E1 -  -  -      pop hl
 4144 D1:D5F5 C3 CC B5 D1     jp i6502NextLoad
 4145 D1:D5F9 -  -  -  -  
 4146 D1:D5F9 -  -  -  -  ;-----------------------------------------------------------------------------
 4147 D1:D5F9 -  -  -  -  ;SHX (A11, SXA, XAS)
 4148 D1:D5F9 -  -  -  -  ;SHY (A11, SYA, SAY)
 4149 D1:D5F9 -  -  -  -  ;TAS (XAS, SHS)
 4150 D1:D5F9 -  -  -  -  ;Not going to implement these, but they'll still get the program
 4151 D1:D5F9 -  -  -  -  ;counter to make the correct noises. Right before locking up the core.
 4152 D1:D5F9 -  -  -  -  ;All of these instructions are marked as "unstable" in that they'll sometimes
 4153 D1:D5F9 -  -  -  -  ;drop the high byte, and page crossings sometimes won't work.
 4154 D1:D5F9 -  -  -  -  
 4155 D1:D5F9 -  -  -  -  ;absolut,Y	SHX oper,Y	9E	3	5  	†
 4156 D1:D5F9 -  -  -  -  inst6502_shx_absy:
 4157 D1:D5F9 ED 33 05 -      ADDCYC(5)
 4158 D1:D5FC CD CC B6 D1     PUSH_ABSYSPLIT_NODEP
 4159 D1:D600 18 FE -  -          jr $
 4160 D1:D602 E1 -  -  -      pop hl
 4161 D1:D603 C3 CC B5 D1     jp i6502NextLoad
 4162 D1:D607 -  -  -  -  
 4163 D1:D607 -  -  -  -  ;absolut,X	SHY oper,X	9C	3	5  	†
 4164 D1:D607 -  -  -  -  inst6502_shy_absx:
 4165 D1:D607 ED 33 05 -      ADDCYC(5)
 4166 D1:D60A CD D1 B6 D1     PUSH_ABSXSPLIT_NODEP
 4167 D1:D60E 18 FE -  -          jr $
 4168 D1:D610 E1 -  -  -      pop hl
 4169 D1:D611 C3 CC B5 D1     jp i6502NextLoad
 4170 D1:D615 -  -  -  -  
 4171 D1:D615 -  -  -  -  ;absolut,Y	TAS oper,Y	9B	3	5  	†
 4172 D1:D615 -  -  -  -  inst6502_tas_absy:
 4173 D1:D615 ED 33 05 -      ADDCYC(5)
 4174 D1:D618 CD CC B6 D1     PUSH_ABSYSPLIT_NODEP
 4175 D1:D61C 18 FE -  -          jr $
 4176 D1:D61E E1 -  -  -      pop hl
 4177 D1:D61F C3 CC B5 D1     jp i6502NextLoad
 4178 D1:D623 -  -  -  -  
 4179 D1:D623 -  -  -  -  ;-----------------------------------------------------------------------------
 4180 D1:D623 -  -  -  -  ;SLO (ASO) - ASL oper + ORA oper
 4181 D1:D623 -  -  -  -  ;M = C <- [76543210] <- 0, A OR M -> A. Affects: CZN
 4182 D1:D623 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4183 D1:D623 -  -  -  -  
 4184 D1:D623 -  -  -  -  ;zeropage	SLO oper	07	2	5  	
 4185 D1:D623 -  -  -  -  inst6502_slo_zp:
 4186 D1:D623 ED 33 05 -      ADDCYC(5)
 4187 D1:D626 7E -  -  -      ld  a,(hl)
 4188 D1:D627 01 00 38 D0     ld  bc,ZEROPAGE
 4189 D1:D62B 81 -  -  -      add a,c
 4190 D1:D62C 4F -  -  -      ld  c,a
 4191 D1:D62D 0A -  -  -      ld  a,(bc)
 4192 D1:D62E CB 27 -  -      sla a
 4193 D1:D630 02 -  -  -      ld  (bc),a
 4194 D1:D631 -  -  -  -      ;Flag breakdown to optimize for split operation
 4195 D1:D631 DD 46 04 -      ld  b,(ix+REGSR)
 4196 D1:D634 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4197 D1:D63A DD B6 00 -      or  a,(ix+REGA)
 4198 D1:D63D DD 77 00 -      ld  (ix+REGA),a
 4199 D1:D640 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4200 D1:D646 87 -  -  -      add a,a
 4201 D1:D647 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4202 D1:D64D DD 70 04 -      ld  (ix+REGSR),b
 4203 D1:D650 C3 CC B5 D1     jp i6502NextLoad
 4204 D1:D654 -  -  -  -  
 4205 D1:D654 -  -  -  -  ;zeropage,X	SLO oper,X	17	2	6  	
 4206 D1:D654 -  -  -  -  inst6502_slo_zpx:
 4207 D1:D654 ED 33 06 -      ADDCYC(6)
 4208 D1:D657 7E -  -  -      ld  a,(hl)
 4209 D1:D658 01 00 38 D0     ld  bc,ZEROPAGE
 4210 D1:D65C 81 -  -  -      add a,c
 4211 D1:D65D DD 86 01 -      add a,(ix+REGX)
 4212 D1:D660 4F -  -  -      ld  c,a
 4213 D1:D661 0A -  -  -      ld  a,(bc)
 4214 D1:D662 CB 27 -  -      sla a
 4215 D1:D664 02 -  -  -      ld  (bc),a
 4216 D1:D665 -  -  -  -      ;Flag breakdown to optimize for split operation
 4217 D1:D665 DD 46 04 -      ld  b,(ix+REGSR)
 4218 D1:D668 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4219 D1:D66E DD B6 00 -      or  a,(ix+REGA)
 4220 D1:D671 DD 77 00 -      ld  (ix+REGA),a
 4221 D1:D674 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4222 D1:D67A 87 -  -  -      add a,a
 4223 D1:D67B CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4224 D1:D681 DD 70 04 -      ld  (ix+REGSR),b
 4225 D1:D684 C3 CC B5 D1     jp i6502NextLoad
 4226 D1:D688 -  -  -  -  
 4227 D1:D688 -  -  -  -  ;absolute	SLO oper	0F	3	6  	
 4228 D1:D688 -  -  -  -  inst6502_slo_abs:
 4229 D1:D688 ED 33 06 -      ADDCYC(6)
 4230 D1:D68B CD 74 B6 D1     call subroutine6502_abs_split_start
 4231 D1:D68F E5 -  -  -      push hl
 4232 D1:D690 50 -  -  -          ld  d,b
 4233 D1:D691 79 -  -  -          ld  a,c
 4234 D1:D692 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4235 D1:D694 ED 4C -  -          mlt bc
 4236 D1:D696 21 00 40 D0         ld  hl,PAGETABLE
 4237 D1:D69A 09 -  -  -          add hl,bc
 4238 D1:D69B ED 27 -  -          ld  hl,(hl)
 4239 D1:D69D 06 00 -  -          ld  b,0
 4240 D1:D69F 4F -  -  -          ld  c,a
 4241 D1:D6A0 09 -  -  -          add hl,bc   ;full address
 4242 D1:D6A1 CD 36 AE D1         READ_ACCESS
 4243 D1:D6A5 CB 27 -  -          sla a
 4244 D1:D6A7 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4245 D1:D6A8 -  -  -  -          ;Split oper
 4246 D1:D6A8 DD 46 04 -          ld  b,(ix+REGSR)
 4247 D1:D6AB CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4248 D1:D6B1 DD B6 00 -          or  a,(ix+REGA)
 4249 D1:D6B4 DD 77 00 -          ld  (ix+REGA),a
 4250 D1:D6B7 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4251 D1:D6BD 87 -  -  -          add a,a
 4252 D1:D6BE CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4253 D1:D6C4 DD 70 04 -          ld  (ix+REGSR),b
 4254 D1:D6C7 41 -  -  -          ld  b,c
 4255 D1:D6C8 CD 59 AE D1         WRITE_ACCESS
 4256 D1:D6CC E1 -  -  -      pop hl
 4257 D1:D6CD C3 CC B5 D1     jp i6502NextLoad
 4258 D1:D6D1 -  -  -  -  
 4259 D1:D6D1 -  -  -  -  ;absolut,X	SLO oper,X	1F	3	7  	
 4260 D1:D6D1 -  -  -  -  inst6502_slo_absx:
 4261 D1:D6D1 ED 33 07 -      ADDCYC(7)
 4262 D1:D6D4 CD D1 B6 D1     PUSH_ABSXSPLIT_NODEP
 4263 D1:D6D8 CD 36 AE D1         READ_ACCESS
 4264 D1:D6DC CB 27 -  -          sla a
 4265 D1:D6DE 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4266 D1:D6DF -  -  -  -          ;Split oper
 4267 D1:D6DF DD 46 04 -          ld  b,(ix+REGSR)
 4268 D1:D6E2 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4269 D1:D6E8 DD B6 00 -          or  a,(ix+REGA)
 4270 D1:D6EB DD 77 00 -          ld  (ix+REGA),a
 4271 D1:D6EE CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4272 D1:D6F4 87 -  -  -          add a,a
 4273 D1:D6F5 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4274 D1:D6FB DD 70 04 -          ld  (ix+REGSR),b
 4275 D1:D6FE 41 -  -  -          ld  b,c
 4276 D1:D6FF CD 59 AE D1         WRITE_ACCESS
 4277 D1:D703 E1 -  -  -      pop hl
 4278 D1:D704 C3 CC B5 D1     jp i6502NextLoad
 4279 D1:D708 -  -  -  -  
 4280 D1:D708 -  -  -  -  ;absolut,Y	SLO oper,Y	1B	3	7  	
 4281 D1:D708 -  -  -  -  inst6502_slo_absy:
 4282 D1:D708 ED 33 07 -      ADDCYC(7)
 4283 D1:D70B CD CC B6 D1     PUSH_ABSYSPLIT_NODEP
 4284 D1:D70F CD 36 AE D1         READ_ACCESS
 4285 D1:D713 CB 27 -  -          sla a
 4286 D1:D715 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4287 D1:D716 -  -  -  -          ;Split oper
 4288 D1:D716 DD 46 04 -          ld  b,(ix+REGSR)
 4289 D1:D719 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4290 D1:D71F DD B6 00 -          or  a,(ix+REGA)
 4291 D1:D722 DD 77 00 -          ld  (ix+REGA),a
 4292 D1:D725 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4293 D1:D72B 87 -  -  -          add a,a
 4294 D1:D72C CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4295 D1:D732 DD 70 04 -          ld  (ix+REGSR),b
 4296 D1:D735 41 -  -  -          ld  b,c
 4297 D1:D736 CD 59 AE D1         WRITE_ACCESS
 4298 D1:D73A E1 -  -  -      pop hl
 4299 D1:D73B C3 CC B5 D1     jp i6502NextLoad
 4300 D1:D73F -  -  -  -  
 4301 D1:D73F -  -  -  -  ;(indirect,X)	SLO (oper,X)	03	2	8  	
 4302 D1:D73F -  -  -  -  isnt6502_slo_indx:
 4303 D1:D73F ED 33 08 -      ADDCYC(8)
 4304 D1:D742 E5 -  -  -      push hl
 4305 D1:D743 7E -  -  -          ld  a,(hl)
 4306 D1:D744 21 00 38 D0         ld  hl,ZEROPAGE
 4307 D1:D748 85 -  -  -          add a,L
 4308 D1:D749 DD 86 01 -          add a,(ix+REGX)
 4309 D1:D74C 6F -  -  -          ld  L,a
 4310 D1:D74D 7E -  -  -          ld  a,(hl)
 4311 D1:D74E 2C -  -  -          inc L
 4312 D1:D74F 56 -  -  -          ld  d,(hl)
 4313 D1:D750 42 -  -  -          ld  b,d
 4314 D1:D751 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4315 D1:D753 ED 4C -  -          mlt bc
 4316 D1:D755 21 00 40 D0         ld  hl,PAGETABLE
 4317 D1:D759 09 -  -  -          add hl,bc
 4318 D1:D75A ED 27 -  -          ld  hl,(hl)
 4319 D1:D75C 06 00 -  -          ld  b,0
 4320 D1:D75E 4F -  -  -          ld  c,a
 4321 D1:D75F 09 -  -  -          add hl,bc
 4322 D1:D760 CD 36 AE D1         READ_ACCESS
 4323 D1:D764 CB 27 -  -          sla a
 4324 D1:D766 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4325 D1:D767 -  -  -  -          ;Split oper
 4326 D1:D767 DD 46 04 -          ld  b,(ix+REGSR)
 4327 D1:D76A CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4328 D1:D770 DD B6 00 -          or  a,(ix+REGA)
 4329 D1:D773 DD 77 00 -          ld  (ix+REGA),a
 4330 D1:D776 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4331 D1:D77C 87 -  -  -          add a,a
 4332 D1:D77D CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4333 D1:D783 DD 70 04 -          ld  (ix+REGSR),b
 4334 D1:D786 41 -  -  -          ld  b,c
 4335 D1:D787 CD 59 AE D1         WRITE_ACCESS
 4336 D1:D78B E1 -  -  -      pop hl
 4337 D1:D78C C3 CC B5 D1     jp  i6502NextLoad
 4338 D1:D790 -  -  -  -  
 4339 D1:D790 -  -  -  -  ;(indirect),Y	SLO (oper),Y	13	2	8  
 4340 D1:D790 -  -  -  -  inst6502_slo_indy:
 4341 D1:D790 ED 33 08 -      ADDCYC(8)
 4342 D1:D793 E5 -  -  -      push hl
 4343 D1:D794 7E -  -  -          ld  a,(hl)
 4344 D1:D795 21 00 38 D0         ld  hl,ZEROPAGE
 4345 D1:D799 85 -  -  -          add a,L
 4346 D1:D79A 6F -  -  -          ld  L,a
 4347 D1:D79B 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4348 D1:D79C 2C -  -  -          inc L
 4349 D1:D79D DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4350 D1:D7A0 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4351 D1:D7A1 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4352 D1:D7A3 24 -  -  -          inc h
 4353 D1:D7A4 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4354 D1:D7A5 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4355 D1:D7A7 ED 6C -  -          mlt hl          ;23.
 4356 D1:D7A9 01 00 40 D0         ld  bc,PAGETABLE
 4357 D1:D7AD 09 -  -  -          add hl,bc
 4358 D1:D7AE ED 27 -  -          ld  hl,(hl)     ;address get.
 4359 D1:D7B0 01 00 00 00         ld  bc,0
 4360 D1:D7B4 4F -  -  -          ld  c,a
 4361 D1:D7B5 09 -  -  -          add hl,bc       ;Full address get.
 4362 D1:D7B6 CD 36 AE D1         READ_ACCESS
 4363 D1:D7BA CB 27 -  -          sla a
 4364 D1:D7BC 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4365 D1:D7BD -  -  -  -          ;Split oper
 4366 D1:D7BD DD 46 04 -          ld  b,(ix+REGSR)
 4367 D1:D7C0 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4368 D1:D7C6 DD B6 00 -          or  a,(ix+REGA)
 4369 D1:D7C9 DD 77 00 -          ld  (ix+REGA),a
 4370 D1:D7CC CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4371 D1:D7D2 87 -  -  -          add a,a
 4372 D1:D7D3 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4373 D1:D7D9 DD 70 04 -          ld  (ix+REGSR),b
 4374 D1:D7DC 41 -  -  -          ld  b,c
 4375 D1:D7DD CD 59 AE D1         WRITE_ACCESS
 4376 D1:D7E1 E1 -  -  -      pop hl
 4377 D1:D7E2 C3 CC B5 D1     jp  i6502NextLoad
 4378 D1:D7E6 -  -  -  -  
 4379 D1:D7E6 -  -  -  -  ;-----------------------------------------------------------------------------
 4380 D1:D7E6 -  -  -  -  ;SRE (LSE) - LSR oper + EOR oper
 4381 D1:D7E6 -  -  -  -  ;M = 0 -> [76543210] -> C, A EOR M -> A. Affects: CZN
 4382 D1:D7E6 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4383 D1:D7E6 -  -  -  -  
 4384 D1:D7E6 -  -  -  -  ;zeropage	SRE oper	47	2	5  	
 4385 D1:D7E6 -  -  -  -  inst6502_sre_zp:
 4386 D1:D7E6 ED 33 05 -      ADDCYC(5)
 4387 D1:D7E9 7E -  -  -      ld  a,(hl)
 4388 D1:D7EA 01 00 38 D0     ld  bc,ZEROPAGE
 4389 D1:D7EE 81 -  -  -      add a,c
 4390 D1:D7EF 4F -  -  -      ld  c,a
 4391 D1:D7F0 0A -  -  -      ld  a,(bc)
 4392 D1:D7F1 CB 3F -  -      srl a
 4393 D1:D7F3 02 -  -  -      ld  (bc),a
 4394 D1:D7F4 -  -  -  -      ;Flag breakdown to optimize for split operation
 4395 D1:D7F4 DD 46 04 -      ld  b,(ix+REGSR)
 4396 D1:D7F7 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4397 D1:D7FD DD AE 00 -      xor a,(ix+REGA)
 4398 D1:D800 DD 77 00 -      ld  (ix+REGA),a
 4399 D1:D803 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4400 D1:D809 87 -  -  -      add a,a
 4401 D1:D80A CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4402 D1:D810 DD 70 04 -      ld  (ix+REGSR),b
 4403 D1:D813 C3 CC B5 D1     jp i6502NextLoad
 4404 D1:D817 -  -  -  -  
 4405 D1:D817 -  -  -  -  ;zeropage,X	SRE oper,X	57	2	6  	
 4406 D1:D817 -  -  -  -  inst6502_sre_zpx:
 4407 D1:D817 ED 33 06 -      ADDCYC(6)
 4408 D1:D81A 7E -  -  -      ld  a,(hl)
 4409 D1:D81B 01 00 38 D0     ld  bc,ZEROPAGE
 4410 D1:D81F 81 -  -  -      add a,c
 4411 D1:D820 DD 86 01 -      add a,(ix+REGX)
 4412 D1:D823 4F -  -  -      ld  c,a
 4413 D1:D824 0A -  -  -      ld  a,(bc)
 4414 D1:D825 CB 3F -  -      srl a
 4415 D1:D827 02 -  -  -      ld  (bc),a
 4416 D1:D828 -  -  -  -      ;Flag breakdown to optimize for split operation
 4417 D1:D828 DD 46 04 -      ld  b,(ix+REGSR)
 4418 D1:D82B CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4419 D1:D831 DD AE 00 -      xor a,(ix+REGA)
 4420 D1:D834 DD 77 00 -      ld  (ix+REGA),a
 4421 D1:D837 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4422 D1:D83D 87 -  -  -      add a,a
 4423 D1:D83E CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4424 D1:D844 DD 70 04 -      ld  (ix+REGSR),b
 4425 D1:D847 C3 CC B5 D1     jp i6502NextLoad
 4426 D1:D84B -  -  -  -  
 4427 D1:D84B -  -  -  -  ;absolute	SRE oper	4F	3	6  	
 4428 D1:D84B -  -  -  -  inst6502_sre_abs:
 4429 D1:D84B ED 33 06 -      ADDCYC(6)
 4430 D1:D84E CD 74 B6 D1     call subroutine6502_abs_split_start
 4431 D1:D852 E5 -  -  -      push hl
 4432 D1:D853 50 -  -  -          ld  d,b
 4433 D1:D854 79 -  -  -          ld  a,c
 4434 D1:D855 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4435 D1:D857 ED 4C -  -          mlt bc
 4436 D1:D859 21 00 40 D0         ld  hl,PAGETABLE
 4437 D1:D85D 09 -  -  -          add hl,bc
 4438 D1:D85E ED 27 -  -          ld  hl,(hl)
 4439 D1:D860 06 00 -  -          ld  b,0
 4440 D1:D862 4F -  -  -          ld  c,a
 4441 D1:D863 09 -  -  -          add hl,bc   ;full address
 4442 D1:D864 CD 36 AE D1         READ_ACCESS
 4443 D1:D868 CB 3F -  -          srl a
 4444 D1:D86A 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4445 D1:D86B -  -  -  -          ;Split oper
 4446 D1:D86B DD 46 04 -          ld  b,(ix+REGSR)
 4447 D1:D86E CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4448 D1:D874 DD AE 00 -          xor a,(ix+REGA)
 4449 D1:D877 DD 77 00 -          ld  (ix+REGA),a
 4450 D1:D87A CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4451 D1:D880 87 -  -  -          add a,a
 4452 D1:D881 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4453 D1:D887 DD 70 04 -          ld  (ix+REGSR),b
 4454 D1:D88A 41 -  -  -          ld  b,c
 4455 D1:D88B CD 59 AE D1         WRITE_ACCESS
 4456 D1:D88F E1 -  -  -      pop hl
 4457 D1:D890 C3 CC B5 D1     jp i6502NextLoad
 4458 D1:D894 -  -  -  -  
 4459 D1:D894 -  -  -  -  ;absolut,X	SRE oper,X	5F	3	7  	
 4460 D1:D894 -  -  -  -  inst6502_sre_absx:
 4461 D1:D894 ED 33 07 -      ADDCYC(7)
 4462 D1:D897 CD D1 B6 D1     PUSH_ABSXSPLIT_NODEP
 4463 D1:D89B CD 36 AE D1         READ_ACCESS
 4464 D1:D89F CB 3F -  -          srl a
 4465 D1:D8A1 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4466 D1:D8A2 -  -  -  -          ;Split oper
 4467 D1:D8A2 DD 46 04 -          ld  b,(ix+REGSR)
 4468 D1:D8A5 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4469 D1:D8AB DD AE 00 -          xor a,(ix+REGA)
 4470 D1:D8AE DD 77 00 -          ld  (ix+REGA),a
 4471 D1:D8B1 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4472 D1:D8B7 87 -  -  -          add a,a
 4473 D1:D8B8 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4474 D1:D8BE DD 70 04 -          ld  (ix+REGSR),b
 4475 D1:D8C1 41 -  -  -          ld  b,c
 4476 D1:D8C2 CD 59 AE D1         WRITE_ACCESS
 4477 D1:D8C6 E1 -  -  -      pop hl
 4478 D1:D8C7 C3 CC B5 D1     jp i6502NextLoad
 4479 D1:D8CB -  -  -  -  
 4480 D1:D8CB -  -  -  -  ;absolut,Y	SRE oper,Y	5B	3	7  	
 4481 D1:D8CB -  -  -  -  inst6502_sre_absy:
 4482 D1:D8CB ED 33 07 -      ADDCYC(7)
 4483 D1:D8CE CD CC B6 D1     PUSH_ABSYSPLIT_NODEP
 4484 D1:D8D2 CD 36 AE D1         READ_ACCESS
 4485 D1:D8D6 CB 3F -  -          srl a
 4486 D1:D8D8 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4487 D1:D8D9 -  -  -  -          ;Split oper
 4488 D1:D8D9 DD 46 04 -          ld  b,(ix+REGSR)
 4489 D1:D8DC CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4490 D1:D8E2 DD AE 00 -          xor a,(ix+REGA)
 4491 D1:D8E5 DD 77 00 -          ld  (ix+REGA),a
 4492 D1:D8E8 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4493 D1:D8EE 87 -  -  -          add a,a
 4494 D1:D8EF CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4495 D1:D8F5 DD 70 04 -          ld  (ix+REGSR),b
 4496 D1:D8F8 41 -  -  -          ld  b,c
 4497 D1:D8F9 CD 59 AE D1         WRITE_ACCESS
 4498 D1:D8FD E1 -  -  -      pop hl
 4499 D1:D8FE C3 CC B5 D1     jp i6502NextLoad
 4500 D1:D902 -  -  -  -  
 4501 D1:D902 -  -  -  -  ;(indirect,X)	SRE (oper,X)	43	2	8  	
 4502 D1:D902 -  -  -  -  isnt6502_sre_indx:
 4503 D1:D902 ED 33 08 -      ADDCYC(8)
 4504 D1:D905 E5 -  -  -      push hl
 4505 D1:D906 7E -  -  -          ld  a,(hl)
 4506 D1:D907 21 00 38 D0         ld  hl,ZEROPAGE
 4507 D1:D90B 85 -  -  -          add a,L
 4508 D1:D90C DD 86 01 -          add a,(ix+REGX)
 4509 D1:D90F 6F -  -  -          ld  L,a
 4510 D1:D910 7E -  -  -          ld  a,(hl)
 4511 D1:D911 2C -  -  -          inc L
 4512 D1:D912 56 -  -  -          ld  d,(hl)
 4513 D1:D913 42 -  -  -          ld  b,d
 4514 D1:D914 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4515 D1:D916 ED 4C -  -          mlt bc
 4516 D1:D918 21 00 40 D0         ld  hl,PAGETABLE
 4517 D1:D91C 09 -  -  -          add hl,bc
 4518 D1:D91D ED 27 -  -          ld  hl,(hl)
 4519 D1:D91F 06 00 -  -          ld  b,0
 4520 D1:D921 4F -  -  -          ld  c,a
 4521 D1:D922 09 -  -  -          add hl,bc
 4522 D1:D923 CD 36 AE D1         READ_ACCESS
 4523 D1:D927 CB 3F -  -          srl a
 4524 D1:D929 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4525 D1:D92A -  -  -  -          ;Split oper
 4526 D1:D92A DD 46 04 -          ld  b,(ix+REGSR)
 4527 D1:D92D CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4528 D1:D933 DD AE 00 -          xor a,(ix+REGA)
 4529 D1:D936 DD 77 00 -          ld  (ix+REGA),a
 4530 D1:D939 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4531 D1:D93F 87 -  -  -          add a,a
 4532 D1:D940 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4533 D1:D946 DD 70 04 -          ld  (ix+REGSR),b
 4534 D1:D949 41 -  -  -          ld  b,c
 4535 D1:D94A CD 59 AE D1         WRITE_ACCESS
 4536 D1:D94E E1 -  -  -      pop hl
 4537 D1:D94F C3 CC B5 D1     jp  i6502NextLoad
 4538 D1:D953 -  -  -  -  
 4539 D1:D953 -  -  -  -  ;(indirect),Y	SRE (oper),Y	53	2	8  
 4540 D1:D953 -  -  -  -  inst6502_sre_indy:
 4541 D1:D953 ED 33 08 -      ADDCYC(8)
 4542 D1:D956 E5 -  -  -      push hl
 4543 D1:D957 7E -  -  -          ld  a,(hl)
 4544 D1:D958 21 00 38 D0         ld  hl,ZEROPAGE
 4545 D1:D95C 85 -  -  -          add a,L
 4546 D1:D95D 6F -  -  -          ld  L,a
 4547 D1:D95E 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4548 D1:D95F 2C -  -  -          inc L
 4549 D1:D960 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4550 D1:D963 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4551 D1:D964 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4552 D1:D966 24 -  -  -          inc h
 4553 D1:D967 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4554 D1:D968 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4555 D1:D96A ED 6C -  -          mlt hl          ;23.
 4556 D1:D96C 01 00 40 D0         ld  bc,PAGETABLE
 4557 D1:D970 09 -  -  -          add hl,bc
 4558 D1:D971 ED 27 -  -          ld  hl,(hl)     ;address get.
 4559 D1:D973 01 00 00 00         ld  bc,0
 4560 D1:D977 4F -  -  -          ld  c,a
 4561 D1:D978 09 -  -  -          add hl,bc       ;Full address get.
 4562 D1:D979 CD 36 AE D1         READ_ACCESS
 4563 D1:D97D CB 3F -  -          srl a
 4564 D1:D97F 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4565 D1:D980 -  -  -  -          ;Split oper
 4566 D1:D980 DD 46 04 -          ld  b,(ix+REGSR)
 4567 D1:D983 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4568 D1:D989 DD AE 00 -          xor a,(ix+REGA)
 4569 D1:D98C DD 77 00 -          ld  (ix+REGA),a
 4570 D1:D98F CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4571 D1:D995 87 -  -  -          add a,a
 4572 D1:D996 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4573 D1:D99C DD 70 04 -          ld  (ix+REGSR),b
 4574 D1:D99F 41 -  -  -          ld  b,c
 4575 D1:D9A0 CD 59 AE D1         WRITE_ACCESS
 4576 D1:D9A4 E1 -  -  -      pop hl
 4577 D1:D9A5 C3 CC B5 D1     jp  i6502NextLoad
 4578 D1:D9A9 -  -  -  -  
 4579 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4580 D1:D9A9 -  -  -  -  ;USBC (USBC)
 4581 D1:D9A9 -  -  -  -  ;immediate	USBC #oper	EB	2	2  
 4582 D1:D9A9 -  -  -  -  ;Map this to instruction $E9 (inst6502_sbc_imm)
 4583 D1:D9A9 -  -  -  -  
 4584 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4585 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4586 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4587 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4588 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4589 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4590 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4591 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4592 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4593 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4594 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4595 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4596 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4597 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4598 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4599 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4600 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4601 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4602 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4603 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4604 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4605 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4606 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4607 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4608 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4609 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4610 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4611 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4612 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4613 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4614 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4615 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4616 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4617 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4618 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4619 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4620 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4621 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4622 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4623 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4624 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4625 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4626 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4627 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4628 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4629 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4630 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4631 D1:D9A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4632 D1:D9A9 -  -  -  -  
 4633 D1:D9A9 -  -  -  -  inst6502_instruction_set:
 4634 D1:D9A9 0B CC D1 -  .dl	inst6502_brk					;00
 4635 D1:D9AC B2 C4 D1 -  .dl	inst6502_ora_indx				;01
 4636 D1:D9AF B0 DC D1 -  .dl	inst6502_jam_02 				;02
 4637 D1:D9B2 3F D7 D1 -  .dl	isnt6502_slo_indx				;03
 4638 D1:D9B5 7E CD D1 -  .dl	inst6502_nop_zp 				;04
 4639 D1:D9B8 CD C3 D1 -  .dl	inst6502_ora_zp					;05
 4640 D1:D9BB 6A C5 D1 -  .dl	inst6502_asl_zp					;06
 4641 D1:D9BE 23 D6 D1 -  .dl	inst6502_slo_zp 				;07
 4642 D1:D9C1 F3 BC D1 -  .dl	inst6502_php					;08
 4643 D1:D9C4 AB C3 D1 -  .dl	inst6502_ora_imm				;09
 4644 D1:D9C7 41 C5 D1 -  .dl	inst6502_asl					;0A
 4645 D1:D9CA D7 CD D1 -  .dl	instr6502_anc_imm				;0B
 4646 D1:D9CD 8C CD D1 -  .dl	inst6502_nop_abs				;0C
 4647 D1:D9D0 22 C4 D1 -  .dl	inst6502_ora_abs				;0D
 4648 D1:D9D3 C5 C5 D1 -  .dl	inst6502_asl_abs				;0E
 4649 D1:D9D6 88 D6 D1 -  .dl	inst6502_slo_abs				;0F
 4650 D1:D9D9 DE CB D1 -  .dl	inst6502_bpl					;10
 4651 D1:D9DC F6 C4 D1 -  .dl	inst6502_ora_indy				;11
 4652 D1:D9DF AA DC D1 -  .dl	inst6502_jam_12_halt			;12 JAM. Used to halt emulation for inspection
 4653 D1:D9E2 90 D7 D1 -  .dl	inst6502_slo_indy				;13
 4654 D1:D9E5 85 CD D1 -  .dl	inst6502_nop_zpx				;14
 4655 D1:D9E8 F6 C3 D1 -  .dl	inst6502_ora_zpx				;15
 4656 D1:D9EB 96 C5 D1 -  .dl	inst6502_asl_zpx				;16
 4657 D1:D9EE 54 D6 D1 -  .dl	inst6502_slo_zpx				;17
 4658 D1:D9F1 4B C9 D1 -  .dl	inst6502_clc					;18
 4659 D1:D9F4 88 C4 D1 -  .dl	inst6502_ora_absy				;19
 4660 D1:D9F7 70 CD D1 -  .dl	inst6502_nop_implied    		;1A
 4661 D1:D9FA 08 D7 D1 -  .dl	inst6502_slo_absy				;1B
 4662 D1:D9FD 9D CD D1 -  .dl	inst6502_nop_absx				;1C
 4663 D1:DA00 5E C4 D1 -  .dl	inst6502_ora_absx				;1D
 4664 D1:DA03 09 C6 D1 -  .dl	inst6502_asl_absx				;1E
 4665 D1:DA06 D1 D6 D1 -  .dl	inst6502_slo_absx				;1F
 4666 D1:DA09 D8 CC D1 -  .dl	inst6502_jsr					;20
 4667 D1:DA0C 86 C1 D1 -  .dl	inst6502_and_indx				;21
 4668 D1:DA0F B0 DC D1 -  .dl	inst6502_jam_22 				;22
 4669 D1:DA12 05 D3 D1 -  .dl	isnt6502_rla_indx				;23
 4670 D1:DA15 24 CD D1 -  .dl	inst6502_bit_zp					;24
 4671 D1:DA18 A1 C0 D1 -  .dl	inst6502_and_zp					;25
 4672 D1:DA1B 61 C7 D1 -  .dl	inst6502_rol_zp					;26
 4673 D1:DA1E D7 D1 D1 -  .dl	inst6502_rla_zp 				;27
 4674 D1:DA21 35 BD D1 -  .dl	inst6502_plp					;28
 4675 D1:DA24 7F C0 D1 -  .dl	inst6502_and_imm				;29
 4676 D1:DA27 35 C7 D1 -  .dl	inst6502_rol					;2A
 4677 D1:DA2A D7 CD D1 -  .dl	instr6502_anc2_imm				;2B
 4678 D1:DA2D 48 CD D1 -  .dl	inst6502_bit_abs				;2C
 4679 D1:DA30 F6 C0 D1 -  .dl	inst6502_and_abs				;2D
 4680 D1:DA33 C2 C7 D1 -  .dl	inst6502_rol_abs				;2E
 4681 D1:DA36 42 D2 D1 -  .dl	inst6502_rla_abs				;2F
 4682 D1:DA39 C0 CB D1 -  .dl	inst6502_bmi					;30
 4683 D1:DA3C CA C1 D1 -  .dl	inst6502_and_indy				;31
 4684 D1:DA3F B0 DC D1 -  .dl	inst6502_jam_32 				;32
 4685 D1:DA42 5A D3 D1 -  .dl	inst6502_rla_indy				;33
 4686 D1:DA45 85 CD D1 -  .dl	inst6502_nop_zpx				;34
 4687 D1:DA48 CA C0 D1 -  .dl	inst6502_and_zpx				;35
 4688 D1:DA4B 90 C7 D1 -  .dl	inst6502_rol_zpx				;36
 4689 D1:DA4E 0B D2 D1 -  .dl	inst6502_rla_zpx				;37
 4690 D1:DA51 77 C9 D1 -  .dl	inst6502_sec					;38
 4691 D1:DA54 5C C1 D1 -  .dl	inst6502_and_absy				;39
 4692 D1:DA57 70 CD D1 -  .dl	inst6502_nop_implied			;3A
 4693 D1:DA5A CA D2 D1 -  .dl	inst6502_rla_absy   			;3B
 4694 D1:DA5D 9D CD D1 -  .dl	inst6502_nop_absx   			;3C
 4695 D1:DA60 32 C1 D1 -  .dl	inst6502_and_absx				;3D
 4696 D1:DA63 0A C8 D1 -  .dl	inst6502_rol_absx				;3E
 4697 D1:DA66 8F D2 D1 -  .dl	inst6502_rla_absx   			;3F
 4698 D1:DA69 47 CC D1 -  .dl	inst6502_rti					;40
 4699 D1:DA6C 1C C3 D1 -  .dl	inst6502_eor_indx				;41
 4700 D1:DA6F B0 DC D1 -  .dl	inst6502_jam_42     			;42
 4701 D1:DA72 02 D9 D1 -  .dl	isnt6502_sre_indx   			;43
 4702 D1:DA75 7E CD D1 -  .dl	inst6502_nop_zp     			;44
 4703 D1:DA78 37 C2 D1 -  .dl	inst6502_eor_zp					;45
 4704 D1:DA7B 64 C6 D1 -  .dl	inst6502_lsr_zp					;46
 4705 D1:DA7E E6 D7 D1 -  .dl	inst6502_sre_zp     			;47
 4706 D1:DA81 DD BC D1 -  .dl	inst6502_pha					;48
 4707 D1:DA84 15 C2 D1 -  .dl	inst6502_eor_imm				;49
 4708 D1:DA87 3B C6 D1 -  .dl	inst6502_lsr					;4A
 4709 D1:DA8A AD CD D1 -  .dl	inst6502_alr_imm    			;4B
 4710 D1:DA8D 6C CC D1 -  .dl	inst6052_jmp_abs				;4C
 4711 D1:DA90 8C C2 D1 -  .dl	inst6502_eor_abs				;4D
 4712 D1:DA93 BF C6 D1 -  .dl	inst6502_lsr_abs				;4E
 4713 D1:DA96 4B D8 D1 -  .dl	inst6502_sre_abs    			;4F
 4714 D1:DA99 ED CB D1 -  .dl	inst6502_bvc					;50
 4715 D1:DA9C 60 C3 D1 -  .dl	inst6502_eor_indy				;51
 4716 D1:DA9F B0 DC D1 -  .dl	inst6502_jam_52     			;52
 4717 D1:DAA2 53 D9 D1 -  .dl	inst6502_sre_indy   			;53
 4718 D1:DAA5 85 CD D1 -  .dl	inst6502_nop_zpx    			;54
 4719 D1:DAA8 60 C2 D1 -  .dl	inst6502_eor_zpx				;55
 4720 D1:DAAB 90 C6 D1 -  .dl	inst6502_lsr_zpx				;56
 4721 D1:DAAE 17 D8 D1 -  .dl	inst6502_sre_zpx    			;57
 4722 D1:DAB1 61 C9 D1 -  .dl	inst6502_cli					;58
 4723 D1:DAB4 F2 C2 D1 -  .dl	inst6502_eor_absy				;59
 4724 D1:DAB7 70 CD D1 -  .dl	inst6502_nop_implied			;5A
 4725 D1:DABA CB D8 D1 -  .dl	inst6502_sre_absy   			;5B
 4726 D1:DABD 9D CD D1 -  .dl	inst6502_nop_absx   			;5C
 4727 D1:DAC0 C8 C2 D1 -  .dl	inst6502_eor_absx				;5D
 4728 D1:DAC3 03 C7 D1 -  .dl	inst6502_lsr_absx				;5E
 4729 D1:DAC6 94 D8 D1 -  .dl	inst6502_sre_absx   			;5F
 4730 D1:DAC9 0A CD D1 -  .dl	inst6502_rts					;60
 4731 D1:DACC 55 BF D1 -  .dl	inst6502_adc_indx				;61
 4732 D1:DACF B0 DC D1 -  .dl	inst6502_jam_62     			;62
 4733 D1:DAD2 81 D4 D1 -  .dl	isnt6502_rra_indx   			;63
 4734 D1:DAD5 7E CD D1 -  .dl	inst6502_nop_zp     			;64
 4735 D1:DAD8 ED BE D1 -  .dl	inst6502_adc_zp					;65
 4736 D1:DADB 6C C8 D1 -  .dl	inst6502_ror_zp					;66
 4737 D1:DADE B4 D3 D1 -  .dl	inst6502_rra_zp     			;67
 4738 D1:DAE1 0B BD D1 -  .dl	inst6502_pla					;68
 4739 D1:DAE4 E5 BE D1 -  .dl	inst6502_adc_imm				;69
 4740 D1:DAE7 40 C8 D1 -  .dl	inst6502_ror					;6A
 4741 D1:DAEA 24 CE D1 -  .dl	instr6502_arr_imm   			;6B
 4742 D1:DAED 8E CC D1 -  .dl	inst6502_jmp_indir				;6C
 4743 D1:DAF0 10 BF D1 -  .dl	inst6502_adc_abs				;6D
 4744 D1:DAF3 CD C8 D1 -  .dl	inst6502_ror_abs				;6E
 4745 D1:DAF6 F7 D3 D1 -  .dl	inst6502_rra_abs    			;6F
 4746 D1:DAF9 FC CB D1 -  .dl	inst6502_bvs					;70
 4747 D1:DAFC 80 BF D1 -  .dl	inst6502_adc_indy				;71
 4748 D1:DAFF B0 DC D1 -  .dl	inst6502_jam_72     			;72
 4749 D1:DB02 C3 D4 D1 -  .dl	inst6502_rra_indy   			;73
 4750 D1:DB05 85 CD D1 -  .dl	inst6502_nop_zpx    			;74
 4751 D1:DB08 FD BE D1 -  .dl	inst6502_adc_zpx				;75
 4752 D1:DB0B 9B C8 D1 -  .dl	inst6502_ror_zpx				;76
 4753 D1:DB0E D4 D3 D1 -  .dl	inst6502_rra_zpx    			;77
 4754 D1:DB11 8D C9 D1 -  .dl	inst6502_sei					;78
 4755 D1:DB14 44 BF D1 -  .dl	inst6502_adc_absy				;79
 4756 D1:DB17 70 CD D1 -  .dl	inst6502_nop_implied			;7A
 4757 D1:DB1A 59 D4 D1 -  .dl	inst6502_rra_absy   			;7B
 4758 D1:DB1D 9D CD D1 -  .dl	inst6502_nop_absx   			;7C
 4759 D1:DB20 33 BF D1 -  .dl	inst6502_adc_absx				;7D
 4760 D1:DB23 15 C9 D1 -  .dl	inst6502_ror_absx				;7E
 4761 D1:DB26 31 D4 D1 -  .dl	inst6502_rra_absx   			;7F
 4762 D1:DB29 77 CD D1 -  .dl	inst6502_nop_imm    			;80
 4763 D1:DB2C 34 BB D1 -  .dl	inst6502_sta_indx				;81
 4764 D1:DB2F 77 CD D1 -  .dl	inst6502_nop_imm    			;82
 4765 D1:DB32 60 D5 D1 -  .dl	inst6502_sax_indx   			;83
 4766 D1:DB35 DF BB D1 -  .dl	inst6502_sty_zp					;84
 4767 D1:DB38 C2 BA D1 -  .dl	inst6502_sta_zp					;85
 4768 D1:DB3B 93 BB D1 -  .dl	inst6502_stx_zp					;86
 4769 D1:DB3E 0A D5 D1 -  .dl	inst6502_sax_zp     			;87
 4770 D1:DB41 23 BE D1 -  .dl	inst6502_dey					;88
 4771 D1:DB44 77 CD D1 -  .dl	inst6502_nop_imm    			;89
 4772 D1:DB47 8E BC D1 -  .dl	inst6502_txa					;8A
 4773 D1:DB4A FD CD D1 -  .dl	instr6502_ane_imm   			;8B
 4774 D1:DB4D 06 BC D1 -  .dl	inst6502_sty_abs				;8C
 4775 D1:DB50 E9 BA D1 -  .dl	inst6502_sta_abs				;8D
 4776 D1:DB53 BA BB D1 -  .dl	inst6502_stx_abs				;8E
 4777 D1:DB56 37 D5 D1 -  .dl	inst6502_sax_abs    			;8F
 4778 D1:DB59 93 CB D1 -  .dl	inst6502_bcc					;90
 4779 D1:DB5C 61 BB D1 -  .dl	inst6502_sta_indy				;91
 4780 D1:DB5F B0 DC D1 -  .dl	inst6502_jam_92     			;92
 4781 D1:DB62 C8 D5 D1 -  .dl	inst6502_sha_indy   			;93
 4782 D1:DB65 F1 BB D1 -  .dl	inst6502_sty_zpx				;94
 4783 D1:DB68 D4 BA D1 -  .dl	inst6502_sta_zpx				;95
 4784 D1:DB6B A5 BB D1 -  .dl	inst6502_stx_zpy				;96
 4785 D1:DB6E 1F D5 D1 -  .dl	inst6502_sax_zpy    			;97
 4786 D1:DB71 BC BC D1 -  .dl	inst6502_tya					;98
 4787 D1:DB74 21 BB D1 -  .dl	inst6502_sta_absy				;99
 4788 D1:DB77 AF BC D1 -  .dl	inst6502_txs					;9A
 4789 D1:DB7A 15 D6 D1 -  .dl	inst6502_tas_absy   			;9B
 4790 D1:DB7D 07 D6 D1 -  .dl	inst6502_shy_absx   			;9C
 4791 D1:DB80 0E BB D1 -  .dl	inst6502_sta_absx				;9D
 4792 D1:DB83 F9 D5 D1 -  .dl	inst6502_shx_absy   			;9E
 4793 D1:DB86 BA D5 D1 -  .dl	inst6502_sha_absy   			;9F
 4794 D1:DB89 F4 B9 D1 -  .dl	inst6502_ldy_imm				;A0
 4795 D1:DB8C 9D B8 D1 -  .dl	inst6502_lda_indx				;A1
 4796 D1:DB8F 26 B9 D1 -  .dl	inst6502_ldx_imm				;A2
 4797 D1:DB92 21 D1 D1 -  .dl	inst6502_lax_indx   			;A3
 4798 D1:DB95 13 BA D1 -  .dl	inst6502_ldy_zp					;A4
 4799 D1:DB98 C7 B7 D1 -  .dl	inst6502_lda_zp					;A5
 4800 D1:DB9B 45 B9 D1 -  .dl	inst6502_ldx_zp					;A6
 4801 D1:DB9E 66 D0 D1 -  .dl	inst6502_lax_zp     			;A7
 4802 D1:DBA1 4C BC D1 -  .dl	inst6502_tay					;A8
 4803 D1:DBA4 A8 B7 D1 -  .dl	inst6502_lda_imm				;A9
 4804 D1:DBA7 2B BC D1 -  .dl	inst6502_tax					;AA
 4805 D1:DBAA B0 D1 D1 -  .dl	inst6502_lxa        			;AB
 4806 D1:DBAD 62 BA D1 -  .dl	inst6502_ldy_abs				;AC
 4807 D1:DBB0 16 B8 D1 -  .dl	inst6502_lda_abs				;AD
 4808 D1:DBB3 94 B9 D1 -  .dl	inst6502_ldx_abs				;AE
 4809 D1:DBB6 BB D0 D1 -  .dl	inst6502_lax_abs    			;AF
 4810 D1:DBB9 A2 CB D1 -  .dl	inst6502_bcs					;B0
 4811 D1:DBBC DE B8 D1 -  .dl	inst6502_lda_indy				;B1
 4812 D1:DBBF B0 DC D1 -  .dl	inst6502_jam_B2     			;B2
 4813 D1:DBC2 65 D1 D1 -  .dl	inst6502_lax_indy   			;B3
 4814 D1:DBC5 39 BA D1 -  .dl	inst6502_ldy_zpx				;B4
 4815 D1:DBC8 ED B7 D1 -  .dl	inst6502_lda_zpx				;B5
 4816 D1:DBCB 6B B9 D1 -  .dl	inst6502_ldx_zpy				;B6
 4817 D1:DBCE 8F D0 D1 -  .dl	inst6502_lax_zpy    			;B7
 4818 D1:DBD1 6C C9 D1 -  .dl	inst6502_clv					;B8
 4819 D1:DBD4 76 B8 D1 -  .dl	inst6502_lda_absy				;B9
 4820 D1:DBD7 6D BC D1 -  .dl	inst6502_tsx					;BA
 4821 D1:DBDA 36 D0 D1 -  .dl	inst6502_las_absy   			;BB
 4822 D1:DBDD 9B BA D1 -  .dl	inst6502_ldy_absx				;BC
 4823 D1:DBE0 4F B8 D1 -  .dl	inst6502_lda_absx				;BD
 4824 D1:DBE3 CD B9 D1 -  .dl	inst6502_ldx_absy				;BE
 4825 D1:DBE6 F7 D0 D1 -  .dl	inst6502_lax_absy   			;BF
 4826 D1:DBE9 FC CA D1 -  .dl	inst6502_cpy_imm				;C0
 4827 D1:DBEC 08 CA D1 -  .dl	inst6502_cmp_indx				;C1
 4828 D1:DBEF 77 CD D1 -  .dl	inst6502_nop_imm    			;C2
 4829 D1:DBF2 DE CE D1 -  .dl	inst6502_dcp_indx   			;C3
 4830 D1:DBF5 22 CB D1 -  .dl	inst6502_cpy_zp					;C4
 4831 D1:DBF8 A0 C9 D1 -  .dl	inst6502_cmp_zp					;C5
 4832 D1:DBFB 52 BD D1 -  .dl	inst6502_dec_zp					;C6
 4833 D1:DBFE 5D CE D1 -  .dl	inst6502_dcp_zp     			;C7
 4834 D1:DC01 2D BE D1 -  .dl	inst6502_iny					;C8
 4835 D1:DC04 98 C9 D1 -  .dl	inst6502_cmp_imm				;C9
 4836 D1:DC07 05 BE D1 -  .dl	inst6502_dex					;CA
 4837 D1:DC0A 91 D5 D1 -  .dl	inst6502_sbx_imm    			;CB
 4838 D1:DC0D 51 CB D1 -  .dl	inst6502_cpy_abs				;CC
 4839 D1:DC10 C3 C9 D1 -  .dl	inst6502_cmp_abs				;CD
 4840 D1:DC13 9F BD D1 -  .dl	inst6502_dec_abs				;CE
 4841 D1:DC16 84 CE D1 -  .dl	inst6502_dcp_abs    			;CF
 4842 D1:DC19 CF CB D1 -  .dl	inst6502_bne					;D0
 4843 D1:DC1C 33 CA D1 -  .dl	inst6502_cmp_indy				;D1
 4844 D1:DC1F B0 DC D1 -  .dl	inst6502_jam_D2     			;D2
 4845 D1:DC22 10 CF D1 -  .dl	inst6502_dcp_indy   			;D3
 4846 D1:DC25 85 CD D1 -  .dl	inst6502_nop_zpx    			;D4
 4847 D1:DC28 B0 C9 D1 -  .dl	inst6502_cmp_zpx				;D5
 4848 D1:DC2B 77 BD D1 -  .dl	inst6502_dec_zpx				;D6
 4849 D1:DC2E 6F CE D1 -  .dl	inst6520_dcp_zpx    			;D7
 4850 D1:DC31 56 C9 D1 -  .dl	inst6502_cld					;D8
 4851 D1:DC34 F7 C9 D1 -  .dl	inst6502_cmp_absy				;D9
 4852 D1:DC37 70 CD D1 -  .dl	inst6502_nop_implied			;DA
 4853 D1:DC3A C6 CE D1 -  .dl	inst6502_dcp_absy   			;DB
 4854 D1:DC3D 9D CD D1 -  .dl	inst6502_nop_absx   			;DC
 4855 D1:DC40 E6 C9 D1 -  .dl	inst6502_cmp_absx				;DD
 4856 D1:DC43 DB BD D1 -  .dl	inst6502_dec_absx				;DE
 4857 D1:DC46 AE CE D1 -  .dl	inst6502_dcp_absx   			;DF
 4858 D1:DC49 65 CA D1 -  .dl	inst6502_cpx_imm				;E0
 4859 D1:DC4C 22 C0 D1 -  .dl	inst6502_sbc_indx				;E1
 4860 D1:DC4F 77 CD D1 -  .dl	inst6502_nop_imm    			;E2
 4861 D1:DC52 CB CF D1 -  .dl	inst6502_isc_indx   			;E3
 4862 D1:DC55 8B CA D1 -  .dl	inst6502_cpx_zp					;E4
 4863 D1:DC58 BA BF D1 -  .dl	inst6502_sbc_zp					;E5
 4864 D1:DC5B 32 BE D1 -  .dl	inst6502_inc_zp					;E6
 4865 D1:DC5E 47 CF D1 -  .dl	inst6502_isc_zp     			;E7
 4866 D1:DC61 28 BE D1 -  .dl	inst6502_inx					;E8
 4867 D1:DC64 B2 BF D1 -  .dl	inst6502_sbc_imm				;E9
 4868 D1:DC67 69 CD D1 -  .dl	inst6502_nop					;EA
 4869 D1:DC6A B2 BF D1 -  .dl	inst6502_sbc_imm			    ;EB *DUPLICATE OF E9
 4870 D1:DC6D BA CA D1 -  .dl	inst6502_cpx_abs				;EC
 4871 D1:DC70 DD BF D1 -  .dl	inst6502_sbc_abs				;ED
 4872 D1:DC73 7F BE D1 -  .dl	inst6502_inc_abs				;EE
 4873 D1:DC76 6E CF D1 -  .dl	inst6502_isc_abs    			;EF
 4874 D1:DC79 B1 CB D1 -  .dl	inst6502_beq					;F0
 4875 D1:DC7C 4D C0 D1 -  .dl	inst6502_sbc_indy				;F1
 4876 D1:DC7F B0 DC D1 -  .dl	inst6502_jam_F2     			;F2
 4877 D1:DC82 FE CF D1 -  .dl	inst6502_isc_indy   			;F3
 4878 D1:DC85 85 CD D1 -  .dl	inst6502_nop_zpx    			;F4
 4879 D1:DC88 CA BF D1 -  .dl	inst6502_sbc_zpx				;F5
 4880 D1:DC8B 57 BE D1 -  .dl	inst6502_inc_zpx				;F6
 4881 D1:DC8E 59 CF D1 -  .dl	inst6520_isc_zpx    			;F7
 4882 D1:DC91 82 C9 D1 -  .dl	inst6502_sed					;F8
 4883 D1:DC94 11 C0 D1 -  .dl	inst6502_sbc_absy				;F9
 4884 D1:DC97 70 CD D1 -  .dl	inst6502_nop_implied			;FA
 4885 D1:DC9A B2 CF D1 -  .dl	inst6502_isc_absy   			;FB
 4886 D1:DC9D 9D CD D1 -  .dl	inst6502_nop_absx   			;FC
 4887 D1:DCA0 00 C0 D1 -  .dl	inst6502_sbc_absx				;FD
 4888 D1:DCA3 BB BE D1 -  .dl	inst6502_inc_absx				;FE
 4889 D1:DCA6 99 CF D1 -  .dl	inst6502_isc_absx   			;FF
 4890 D1:DCA9 -  -  -  -  
 4891 D1:DCA9 -  -  -  -  ;-----------------------------------------------------------------------------
 4892 D1:DCA9 -  -  -  -  ;-----------------------------------------------------------------------------
 4893 D1:DCA9 -  -  -  -  ;-----------------------------------------------------------------------------
 4894 D1:DCA9 -  -  -  -  ;These instructions are located here because they perform a function outside
 4895 D1:DCA9 -  -  -  -  ;the context of emulating instructions. These are mapped to instructions that
 4896 D1:DCA9 -  -  -  -  ;would, on the real hardware, freeze the CPU and require a reset to continue.
 4897 D1:DCA9 -  -  -  -  ;
 4898 D1:DCA9 -  -  -  -  ;Here, they'll let us perform useful things. Like exiting the emulator.
 4899 D1:DCA9 -  -  -  -  ;Or jamming in one spot. Or other things in the future. Debugging things.
 4900 D1:DCA9 -  -  -  -  ;Future stuff like breakpoints and console output. That sorta thing.
 4901 D1:DCA9 -  -  -  -  ;
 4902 D1:DCA9 -  -  -  -  
 4903 D1:DCA9 -  -  -  -  inst6502_:
 4904 D1:DCA9 C9 -  -  -      ret
 4905 D1:DCAA -  -  -  -  
 4906 D1:DCAA -  -  -  -  inst6502_jam_12_halt:
 4907 D1:DCAA 18 FE -  -      jr $
 4908 D1:DCAC C3 E5 B5 D1     jp i6502FinishLoad
 4909 D1:DCB0 -  -  -  -  
 4910 D1:DCB0 -  -  -  -  inst6502_jam_02:
 4911 D1:DCB0 -  -  -  -  inst6502_jam_22:
 4912 D1:DCB0 -  -  -  -  inst6502_jam_32:
 4913 D1:DCB0 -  -  -  -  inst6502_jam_42:
 4914 D1:DCB0 -  -  -  -  inst6502_jam_52:
 4915 D1:DCB0 -  -  -  -  inst6502_jam_62:
 4916 D1:DCB0 -  -  -  -  inst6502_jam_72:
 4917 D1:DCB0 -  -  -  -  inst6502_jam_92:
 4918 D1:DCB0 -  -  -  -  inst6502_jam_B2:
 4919 D1:DCB0 -  -  -  -  inst6502_jam_D2:
 4920 D1:DCB0 -  -  -  -  inst6502_jam_F2:
 4921 D1:DCB0 C9 -  -  -      ret
 4922 D1:DCB1 -  -  -  -  
 4923 D1:DCB1 -  -  -  -  
 4924 D1:DCB1 -  -  -  -  
 4925 D1:DCB1 -  -  -  -  
 4926 D1:DCB1 -  -  -  -  
 4927 D1:DCB1 -  -  -  -  
 4928 D1:DCB1 -  -  -  -  
 4929 D1:DCB1 -  -  -  -  
 4930 D1:DCB1 -  -  -  -  
 4931 D1:DCB1 -  -  -  -  
 4932 D1:DCB1 -  -  -  -  
 4933 D1:DCB1 -  -  -  -  
 4934 D1:DCB1 -  -  -  -  
Listing for file "main.z80"
  818 D1:DCB1 -  -  -  -  #include "debug.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    1 D1:DCB1 -  -  -  -  ;This has all the tables needed to drive the debugger.
    2 D1:DCB1 -  -  -  -  #include "debug_itab.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug_itab.z80"
    1 D1:DCB1 -  -  -  -  inst6502_opcode_width_table:
    2 D1:DCB1 01 -  -  -  .db 1    ;0: 
    3 D1:DCB2 02 -  -  -  .db 2    ;1: zpg,X
    4 D1:DCB3 03 -  -  -  .db 3    ;2: ind
    5 D1:DCB4 03 -  -  -  .db 3    ;3: abs
    6 D1:DCB5 03 -  -  -  .db 3    ;4: abs,X
    7 D1:DCB6 02 -  -  -  .db 2    ;5: X,ind
    8 D1:DCB7 01 -  -  -  .db 1    ;6: A
    9 D1:DCB8 02 -  -  -  .db 2    ;7: zpg
   10 D1:DCB9 02 -  -  -  .db 2    ;8: rel
   11 D1:DCBA 02 -  -  -  .db 2    ;9: #
   12 D1:DCBB 01 -  -  -  .db 1    ;10: impl
   13 D1:DCBC 02 -  -  -  .db 2    ;11: ind,Y
   14 D1:DCBD 03 -  -  -  .db 3    ;12: abs,Y
   15 D1:DCBE 02 -  -  -  .db 2    ;13: zpg,Y
   16 D1:DCBF -  -  -  -  
   17 D1:DCBF -  -  -  -  
   18 D1:DCBF -  -  -  -  ;Note: 1=1byteOper, 2=2byteOper, -=1byteRelOper. Other chrs are literal
   19 D1:DCBF -  -  -  -  
   20 D1:DCBF -  -  -  -  inst6502_disassembler:
   21 D1:DCBF 01 -  -  -  .db 1,""  ;
   22 D1:DCC0 04 31 2C 58 .db 4,"1,X"  ;
   23 D1:DCC4 04 28 32 29 .db 4,"(2)"  ;
   24 D1:DCC8 02 32 -  -  .db 2,"2"  ;
   25 D1:DCCA 04 32 2C 58 .db 4,"2,X"  ;
   26 D1:DCCE 06 28 31 2C 
              58 29 -  -  .db 6,"(1,X)"  ;
   27 D1:DCD4 02 41 -  -  .db 2,"A"  ;
   28 D1:DCD6 02 31 -  -  .db 2,"1"  ;
   29 D1:DCD8 02 2D -  -  .db 2,"-"  ;
   30 D1:DCDA 03 23 31 -  .db 3,"#1"  ;
   31 D1:DCDD 01 -  -  -  .db 1,""  ;
   32 D1:DCDE 06 28 31 29 
              2C 59 -  -  .db 6,"(1),Y"  ;
   33 D1:DCE4 04 32 2C 59 .db 4,"2,Y"  ;
   34 D1:DCE8 04 31 2C 59 .db 4,"1,Y"  ;
   35 D1:DCEC -  -  -  -  
   36 D1:DCEC -  -  -  -  inst6502_disassembly_table:
   37 D1:DCEC 42 52 4B 0A .db "BRK", 10     ;0x00
   38 D1:DCF0 4F 52 41 05 .db "ORA", 5     ;0x01
   39 D1:DCF4 4A 41 4D 00 .db "JAM", 0     ;0x02
   40 D1:DCF8 53 4C 4F 05 .db "SLO", 5     ;0x03
   41 D1:DCFC 4E 4F 50 07 .db "NOP", 7     ;0x04
   42 D1:DD00 4F 52 41 07 .db "ORA", 7     ;0x05
   43 D1:DD04 41 53 4C 07 .db "ASL", 7     ;0x06
   44 D1:DD08 53 4C 4F 07 .db "SLO", 7     ;0x07
   45 D1:DD0C 50 48 50 0A .db "PHP", 10     ;0x08
   46 D1:DD10 4F 52 41 09 .db "ORA", 9     ;0x09
   47 D1:DD14 41 53 4C 06 .db "ASL", 6     ;0x0A
   48 D1:DD18 41 4E 43 09 .db "ANC", 9     ;0x0B
   49 D1:DD1C 4E 4F 50 03 .db "NOP", 3     ;0x0C
   50 D1:DD20 4F 52 41 03 .db "ORA", 3     ;0x0D
   51 D1:DD24 41 53 4C 03 .db "ASL", 3     ;0x0E
   52 D1:DD28 53 4C 4F 03 .db "SLO", 3     ;0x0F
   53 D1:DD2C 42 50 4C 08 .db "BPL", 8     ;0x10
   54 D1:DD30 4F 52 41 0B .db "ORA", 11     ;0x11
   55 D1:DD34 4A 41 4D 00 .db "JAM", 0     ;0x12
   56 D1:DD38 53 4C 4F 0B .db "SLO", 11     ;0x13
   57 D1:DD3C 4E 4F 50 01 .db "NOP", 1     ;0x14
   58 D1:DD40 4F 52 41 01 .db "ORA", 1     ;0x15
   59 D1:DD44 41 53 4C 01 .db "ASL", 1     ;0x16
   60 D1:DD48 53 4C 4F 01 .db "SLO", 1     ;0x17
   61 D1:DD4C 43 4C 43 0A .db "CLC", 10     ;0x18
   62 D1:DD50 4F 52 41 0C .db "ORA", 12     ;0x19
   63 D1:DD54 4E 4F 50 0A .db "NOP", 10     ;0x1A
   64 D1:DD58 53 4C 4F 0C .db "SLO", 12     ;0x1B
   65 D1:DD5C 4E 4F 50 04 .db "NOP", 4     ;0x1C
   66 D1:DD60 4F 52 41 04 .db "ORA", 4     ;0x1D
   67 D1:DD64 41 53 4C 04 .db "ASL", 4     ;0x1E
   68 D1:DD68 53 4C 4F 04 .db "SLO", 4     ;0x1F
   69 D1:DD6C 4A 53 52 03 .db "JSR", 3     ;0x20
   70 D1:DD70 41 4E 44 05 .db "AND", 5     ;0x21
   71 D1:DD74 4A 41 4D 00 .db "JAM", 0     ;0x22
   72 D1:DD78 52 4C 41 05 .db "RLA", 5     ;0x23
   73 D1:DD7C 42 49 54 07 .db "BIT", 7     ;0x24
   74 D1:DD80 41 4E 44 07 .db "AND", 7     ;0x25
   75 D1:DD84 52 4F 4C 07 .db "ROL", 7     ;0x26
   76 D1:DD88 52 4C 41 07 .db "RLA", 7     ;0x27
   77 D1:DD8C 50 4C 50 0A .db "PLP", 10     ;0x28
   78 D1:DD90 41 4E 44 09 .db "AND", 9     ;0x29
   79 D1:DD94 52 4F 4C 06 .db "ROL", 6     ;0x2A
   80 D1:DD98 41 4E 43 09 .db "ANC", 9     ;0x2B
   81 D1:DD9C 42 49 54 03 .db "BIT", 3     ;0x2C
   82 D1:DDA0 41 4E 44 03 .db "AND", 3     ;0x2D
   83 D1:DDA4 52 4F 4C 03 .db "ROL", 3     ;0x2E
   84 D1:DDA8 52 4C 41 03 .db "RLA", 3     ;0x2F
   85 D1:DDAC 42 4D 49 08 .db "BMI", 8     ;0x30
   86 D1:DDB0 41 4E 44 0B .db "AND", 11     ;0x31
   87 D1:DDB4 4A 41 4D 00 .db "JAM", 0     ;0x32
   88 D1:DDB8 52 4C 41 0B .db "RLA", 11     ;0x33
   89 D1:DDBC 4E 4F 50 01 .db "NOP", 1     ;0x34
   90 D1:DDC0 41 4E 44 01 .db "AND", 1     ;0x35
   91 D1:DDC4 52 4F 4C 01 .db "ROL", 1     ;0x36
   92 D1:DDC8 52 4C 41 01 .db "RLA", 1     ;0x37
   93 D1:DDCC 53 45 43 0A .db "SEC", 10     ;0x38
   94 D1:DDD0 41 4E 44 0C .db "AND", 12     ;0x39
   95 D1:DDD4 4E 4F 50 0A .db "NOP", 10     ;0x3A
   96 D1:DDD8 52 4C 41 0C .db "RLA", 12     ;0x3B
   97 D1:DDDC 4E 4F 50 04 .db "NOP", 4     ;0x3C
   98 D1:DDE0 41 4E 44 04 .db "AND", 4     ;0x3D
   99 D1:DDE4 52 4F 4C 04 .db "ROL", 4     ;0x3E
  100 D1:DDE8 52 4C 41 04 .db "RLA", 4     ;0x3F
  101 D1:DDEC 52 54 49 0A .db "RTI", 10     ;0x40
  102 D1:DDF0 45 4F 52 05 .db "EOR", 5     ;0x41
  103 D1:DDF4 4A 41 4D 00 .db "JAM", 0     ;0x42
  104 D1:DDF8 53 52 45 05 .db "SRE", 5     ;0x43
  105 D1:DDFC 4E 4F 50 07 .db "NOP", 7     ;0x44
  106 D1:DE00 45 4F 52 07 .db "EOR", 7     ;0x45
  107 D1:DE04 4C 53 52 07 .db "LSR", 7     ;0x46
  108 D1:DE08 53 52 45 07 .db "SRE", 7     ;0x47
  109 D1:DE0C 50 48 41 0A .db "PHA", 10     ;0x48
  110 D1:DE10 45 4F 52 09 .db "EOR", 9     ;0x49
  111 D1:DE14 4C 53 52 06 .db "LSR", 6     ;0x4A
  112 D1:DE18 41 4C 52 09 .db "ALR", 9     ;0x4B
  113 D1:DE1C 4A 4D 50 03 .db "JMP", 3     ;0x4C
  114 D1:DE20 45 4F 52 03 .db "EOR", 3     ;0x4D
  115 D1:DE24 4C 53 52 03 .db "LSR", 3     ;0x4E
  116 D1:DE28 53 52 45 03 .db "SRE", 3     ;0x4F
  117 D1:DE2C 42 56 43 08 .db "BVC", 8     ;0x50
  118 D1:DE30 45 4F 52 0B .db "EOR", 11     ;0x51
  119 D1:DE34 4A 41 4D 00 .db "JAM", 0     ;0x52
  120 D1:DE38 53 52 45 0B .db "SRE", 11     ;0x53
  121 D1:DE3C 4E 4F 50 01 .db "NOP", 1     ;0x54
  122 D1:DE40 45 4F 52 01 .db "EOR", 1     ;0x55
  123 D1:DE44 4C 53 52 01 .db "LSR", 1     ;0x56
  124 D1:DE48 53 52 45 01 .db "SRE", 1     ;0x57
  125 D1:DE4C 43 4C 49 0A .db "CLI", 10     ;0x58
  126 D1:DE50 45 4F 52 0C .db "EOR", 12     ;0x59
  127 D1:DE54 4E 4F 50 0A .db "NOP", 10     ;0x5A
  128 D1:DE58 53 52 45 0C .db "SRE", 12     ;0x5B
  129 D1:DE5C 4E 4F 50 04 .db "NOP", 4     ;0x5C
  130 D1:DE60 45 4F 52 04 .db "EOR", 4     ;0x5D
  131 D1:DE64 4C 53 52 04 .db "LSR", 4     ;0x5E
  132 D1:DE68 53 52 45 04 .db "SRE", 4     ;0x5F
  133 D1:DE6C 52 54 53 0A .db "RTS", 10     ;0x60
  134 D1:DE70 41 44 43 05 .db "ADC", 5     ;0x61
  135 D1:DE74 4A 41 4D 00 .db "JAM", 0     ;0x62
  136 D1:DE78 52 52 41 05 .db "RRA", 5     ;0x63
  137 D1:DE7C 4E 4F 50 07 .db "NOP", 7     ;0x64
  138 D1:DE80 41 44 43 07 .db "ADC", 7     ;0x65
  139 D1:DE84 52 4F 52 07 .db "ROR", 7     ;0x66
  140 D1:DE88 52 52 41 07 .db "RRA", 7     ;0x67
  141 D1:DE8C 50 4C 41 0A .db "PLA", 10     ;0x68
  142 D1:DE90 41 44 43 09 .db "ADC", 9     ;0x69
  143 D1:DE94 52 4F 52 06 .db "ROR", 6     ;0x6A
  144 D1:DE98 41 52 52 09 .db "ARR", 9     ;0x6B
  145 D1:DE9C 4A 4D 50 02 .db "JMP", 2     ;0x6C
  146 D1:DEA0 41 44 43 03 .db "ADC", 3     ;0x6D
  147 D1:DEA4 52 4F 52 03 .db "ROR", 3     ;0x6E
  148 D1:DEA8 52 52 41 03 .db "RRA", 3     ;0x6F
  149 D1:DEAC 42 56 53 08 .db "BVS", 8     ;0x70
  150 D1:DEB0 41 44 43 0B .db "ADC", 11     ;0x71
  151 D1:DEB4 4A 41 4D 00 .db "JAM", 0     ;0x72
  152 D1:DEB8 52 52 41 0B .db "RRA", 11     ;0x73
  153 D1:DEBC 4E 4F 50 01 .db "NOP", 1     ;0x74
  154 D1:DEC0 41 44 43 01 .db "ADC", 1     ;0x75
  155 D1:DEC4 52 4F 52 01 .db "ROR", 1     ;0x76
  156 D1:DEC8 52 52 41 01 .db "RRA", 1     ;0x77
  157 D1:DECC 53 45 49 0A .db "SEI", 10     ;0x78
  158 D1:DED0 41 44 43 0C .db "ADC", 12     ;0x79
  159 D1:DED4 4E 4F 50 0A .db "NOP", 10     ;0x7A
  160 D1:DED8 52 52 41 0C .db "RRA", 12     ;0x7B
  161 D1:DEDC 4E 4F 50 04 .db "NOP", 4     ;0x7C
  162 D1:DEE0 41 44 43 04 .db "ADC", 4     ;0x7D
  163 D1:DEE4 52 4F 52 04 .db "ROR", 4     ;0x7E
  164 D1:DEE8 52 52 41 04 .db "RRA", 4     ;0x7F
  165 D1:DEEC 4E 4F 50 09 .db "NOP", 9     ;0x80
  166 D1:DEF0 53 54 41 05 .db "STA", 5     ;0x81
  167 D1:DEF4 4E 4F 50 09 .db "NOP", 9     ;0x82
  168 D1:DEF8 53 41 58 05 .db "SAX", 5     ;0x83
  169 D1:DEFC 53 54 59 07 .db "STY", 7     ;0x84
  170 D1:DF00 53 54 41 07 .db "STA", 7     ;0x85
  171 D1:DF04 53 54 58 07 .db "STX", 7     ;0x86
  172 D1:DF08 53 41 58 07 .db "SAX", 7     ;0x87
  173 D1:DF0C 44 45 59 0A .db "DEY", 10     ;0x88
  174 D1:DF10 4E 4F 50 09 .db "NOP", 9     ;0x89
  175 D1:DF14 54 58 41 0A .db "TXA", 10     ;0x8A
  176 D1:DF18 41 4E 45 09 .db "ANE", 9     ;0x8B
  177 D1:DF1C 53 54 59 03 .db "STY", 3     ;0x8C
  178 D1:DF20 53 54 41 03 .db "STA", 3     ;0x8D
  179 D1:DF24 53 54 58 03 .db "STX", 3     ;0x8E
  180 D1:DF28 53 41 58 03 .db "SAX", 3     ;0x8F
  181 D1:DF2C 42 43 43 08 .db "BCC", 8     ;0x90
  182 D1:DF30 53 54 41 0B .db "STA", 11     ;0x91
  183 D1:DF34 4A 41 4D 00 .db "JAM", 0     ;0x92
  184 D1:DF38 53 48 41 0B .db "SHA", 11     ;0x93
  185 D1:DF3C 53 54 59 01 .db "STY", 1     ;0x94
  186 D1:DF40 53 54 41 01 .db "STA", 1     ;0x95
  187 D1:DF44 53 54 58 0D .db "STX", 13     ;0x96
  188 D1:DF48 53 41 58 0D .db "SAX", 13     ;0x97
  189 D1:DF4C 54 59 41 0A .db "TYA", 10     ;0x98
  190 D1:DF50 53 54 41 0C .db "STA", 12     ;0x99
  191 D1:DF54 54 58 53 0A .db "TXS", 10     ;0x9A
  192 D1:DF58 54 41 53 0C .db "TAS", 12     ;0x9B
  193 D1:DF5C 53 48 59 04 .db "SHY", 4     ;0x9C
  194 D1:DF60 53 54 41 04 .db "STA", 4     ;0x9D
  195 D1:DF64 53 48 58 0C .db "SHX", 12     ;0x9E
  196 D1:DF68 53 48 41 0C .db "SHA", 12     ;0x9F
  197 D1:DF6C 4C 44 59 09 .db "LDY", 9     ;0xA0
  198 D1:DF70 4C 44 41 05 .db "LDA", 5     ;0xA1
  199 D1:DF74 4C 44 58 09 .db "LDX", 9     ;0xA2
  200 D1:DF78 4C 41 58 05 .db "LAX", 5     ;0xA3
  201 D1:DF7C 4C 44 59 07 .db "LDY", 7     ;0xA4
  202 D1:DF80 4C 44 41 07 .db "LDA", 7     ;0xA5
  203 D1:DF84 4C 44 58 07 .db "LDX", 7     ;0xA6
  204 D1:DF88 4C 41 58 07 .db "LAX", 7     ;0xA7
  205 D1:DF8C 54 41 59 0A .db "TAY", 10     ;0xA8
  206 D1:DF90 4C 44 41 09 .db "LDA", 9     ;0xA9
  207 D1:DF94 54 41 58 0A .db "TAX", 10     ;0xAA
  208 D1:DF98 4C 58 41 09 .db "LXA", 9     ;0xAB
  209 D1:DF9C 4C 44 59 03 .db "LDY", 3     ;0xAC
  210 D1:DFA0 4C 44 41 03 .db "LDA", 3     ;0xAD
  211 D1:DFA4 4C 44 58 03 .db "LDX", 3     ;0xAE
  212 D1:DFA8 4C 41 58 03 .db "LAX", 3     ;0xAF
  213 D1:DFAC 42 43 53 08 .db "BCS", 8     ;0xB0
  214 D1:DFB0 4C 44 41 0B .db "LDA", 11     ;0xB1
  215 D1:DFB4 4A 41 4D 00 .db "JAM", 0     ;0xB2
  216 D1:DFB8 4C 41 58 0B .db "LAX", 11     ;0xB3
  217 D1:DFBC 4C 44 59 01 .db "LDY", 1     ;0xB4
  218 D1:DFC0 4C 44 41 01 .db "LDA", 1     ;0xB5
  219 D1:DFC4 4C 44 58 0D .db "LDX", 13     ;0xB6
  220 D1:DFC8 4C 41 58 0D .db "LAX", 13     ;0xB7
  221 D1:DFCC 43 4C 56 0A .db "CLV", 10     ;0xB8
  222 D1:DFD0 4C 44 41 0C .db "LDA", 12     ;0xB9
  223 D1:DFD4 54 53 58 0A .db "TSX", 10     ;0xBA
  224 D1:DFD8 4C 41 53 0C .db "LAS", 12     ;0xBB
  225 D1:DFDC 4C 44 59 04 .db "LDY", 4     ;0xBC
  226 D1:DFE0 4C 44 41 04 .db "LDA", 4     ;0xBD
  227 D1:DFE4 4C 44 58 0C .db "LDX", 12     ;0xBE
  228 D1:DFE8 4C 41 58 0C .db "LAX", 12     ;0xBF
  229 D1:DFEC 43 50 59 09 .db "CPY", 9     ;0xC0
  230 D1:DFF0 43 4D 50 05 .db "CMP", 5     ;0xC1
  231 D1:DFF4 4E 4F 50 09 .db "NOP", 9     ;0xC2
  232 D1:DFF8 44 43 50 05 .db "DCP", 5     ;0xC3
  233 D1:DFFC 43 50 59 07 .db "CPY", 7     ;0xC4
  234 D1:E000 43 4D 50 07 .db "CMP", 7     ;0xC5
  235 D1:E004 44 45 43 07 .db "DEC", 7     ;0xC6
  236 D1:E008 44 43 50 07 .db "DCP", 7     ;0xC7
  237 D1:E00C 49 4E 59 0A .db "INY", 10     ;0xC8
  238 D1:E010 43 4D 50 09 .db "CMP", 9     ;0xC9
  239 D1:E014 44 45 58 0A .db "DEX", 10     ;0xCA
  240 D1:E018 53 42 58 09 .db "SBX", 9     ;0xCB
  241 D1:E01C 43 50 59 03 .db "CPY", 3     ;0xCC
  242 D1:E020 43 4D 50 03 .db "CMP", 3     ;0xCD
  243 D1:E024 44 45 43 03 .db "DEC", 3     ;0xCE
  244 D1:E028 44 43 50 03 .db "DCP", 3     ;0xCF
  245 D1:E02C 42 4E 45 08 .db "BNE", 8     ;0xD0
  246 D1:E030 43 4D 50 0B .db "CMP", 11     ;0xD1
  247 D1:E034 4A 41 4D 00 .db "JAM", 0     ;0xD2
  248 D1:E038 44 43 50 0B .db "DCP", 11     ;0xD3
  249 D1:E03C 4E 4F 50 01 .db "NOP", 1     ;0xD4
  250 D1:E040 43 4D 50 01 .db "CMP", 1     ;0xD5
  251 D1:E044 44 45 43 01 .db "DEC", 1     ;0xD6
  252 D1:E048 44 43 50 01 .db "DCP", 1     ;0xD7
  253 D1:E04C 43 4C 44 0A .db "CLD", 10     ;0xD8
  254 D1:E050 43 4D 50 0C .db "CMP", 12     ;0xD9
  255 D1:E054 4E 4F 50 0A .db "NOP", 10     ;0xDA
  256 D1:E058 44 43 50 0C .db "DCP", 12     ;0xDB
  257 D1:E05C 4E 4F 50 04 .db "NOP", 4     ;0xDC
  258 D1:E060 43 4D 50 04 .db "CMP", 4     ;0xDD
  259 D1:E064 44 45 43 04 .db "DEC", 4     ;0xDE
  260 D1:E068 44 43 50 04 .db "DCP", 4     ;0xDF
  261 D1:E06C 43 50 58 09 .db "CPX", 9     ;0xE0
  262 D1:E070 53 42 43 05 .db "SBC", 5     ;0xE1
  263 D1:E074 4E 4F 50 09 .db "NOP", 9     ;0xE2
  264 D1:E078 49 53 43 05 .db "ISC", 5     ;0xE3
  265 D1:E07C 43 50 58 07 .db "CPX", 7     ;0xE4
  266 D1:E080 53 42 43 07 .db "SBC", 7     ;0xE5
  267 D1:E084 49 4E 43 07 .db "INC", 7     ;0xE6
  268 D1:E088 49 53 43 07 .db "ISC", 7     ;0xE7
  269 D1:E08C 49 4E 58 0A .db "INX", 10     ;0xE8
  270 D1:E090 53 42 43 09 .db "SBC", 9     ;0xE9
  271 D1:E094 4E 4F 50 0A .db "NOP", 10     ;0xEA
  272 D1:E098 55 53 42 09 .db "USB", 9     ;0xEB
  273 D1:E09C 43 50 58 03 .db "CPX", 3     ;0xEC
  274 D1:E0A0 53 42 43 03 .db "SBC", 3     ;0xED
  275 D1:E0A4 49 4E 43 03 .db "INC", 3     ;0xEE
  276 D1:E0A8 49 53 43 03 .db "ISC", 3     ;0xEF
  277 D1:E0AC 42 45 51 08 .db "BEQ", 8     ;0xF0
  278 D1:E0B0 53 42 43 0B .db "SBC", 11     ;0xF1
  279 D1:E0B4 4A 41 4D 00 .db "JAM", 0     ;0xF2
  280 D1:E0B8 49 53 43 0B .db "ISC", 11     ;0xF3
  281 D1:E0BC 4E 4F 50 01 .db "NOP", 1     ;0xF4
  282 D1:E0C0 53 42 43 01 .db "SBC", 1     ;0xF5
  283 D1:E0C4 49 4E 43 01 .db "INC", 1     ;0xF6
  284 D1:E0C8 49 53 43 01 .db "ISC", 1     ;0xF7
  285 D1:E0CC 53 45 44 0A .db "SED", 10     ;0xF8
  286 D1:E0D0 53 42 43 0C .db "SBC", 12     ;0xF9
  287 D1:E0D4 4E 4F 50 0A .db "NOP", 10     ;0xFA
  288 D1:E0D8 49 53 43 0C .db "ISC", 12     ;0xFB
  289 D1:E0DC 4E 4F 50 04 .db "NOP", 4     ;0xFC
  290 D1:E0E0 53 42 43 04 .db "SBC", 4     ;0xFD
  291 D1:E0E4 49 4E 43 04 .db "INC", 4     ;0xFE
  292 D1:E0E8 49 53 43 04 .db "ISC", 4     ;0xFF
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    3 D1:E0EC -  -  -  -  
    4 D1:E0EC -  -  -  -  
    5 D1:E0EC -  -  -  -  ;You must assign a print character routine.
    6 D1:E0EC -  -  -  -  ;You must also write all opcode bytes to operbuf or map operbuf to where written
    7 D1:E0EC -  -  -  -  dbg_printChr    = PrintBigFont
    8 D1:E0EC -  -  -  -  operbuf         = debugram
    9 D1:E0EC -  -  -  -  
   10 D1:E0EC -  -  -  -  
   11 D1:E0EC -  -  -  -  dbg_resetScreen:
   12 D1:E0EC 21 00 00 D4     ld  hl,screenBuf1
   13 D1:E0F0 11 01 00 D4     ld  de,screenBuf1+1
   14 D1:E0F4 01 FF 57 02     ld  bc,(2*240*320)-1
   15 D1:E0F8 36 00 -  -      ld  (hl),$00
   16 D1:E0FA ED B0 -  -      ldir
   17 D1:E0FC AF -  -  -      xor a,a
   18 D1:E0FD CD 17 B0 D1     call setLineStart
   19 D1:E101 CD 20 B0 D1     call setCurLine
   20 D1:E105 C9 -  -  -      ret
   21 D1:E106 -  -  -  -  
   22 D1:E106 -  -  -  -  dbg_prepNextLine:
   23 D1:E106 AF -  -  -      xor a,a
   24 D1:E107 32 F6 31 D0     ld  (xPos),a
   25 D1:E10B CD ED B0 D1     call calculateScreenPtr
   26 D1:E10F EB -  -  -      ex  de,hl
   27 D1:E110 21 FF 2B D5     ld  hl,screenBuf2-1
   28 D1:E114 B7 -  -  -      or  a,a
   29 D1:E115 ED 52 -  -      sbc hl,de
   30 D1:E117 -  -  -  -  ;If C: DE in sb2. subtract to set in sb1.
   31 D1:E117 -  -  -  -  ;If NC: DE in sb1. add to set in sb2.
   32 D1:E117 21 00 2C 01     ld  hl,320*240
   33 D1:E11B 30 04 -  -      jr  nc,+_
   34 D1:E11D 21 00 D4 FE     ld  hl,-(320*240)+0
   35 D1:E121 19 -  -  -  _:  add hl,de   ;HL set to other buffer. DE points to current buffer.
   36 D1:E122 01 00 0A 00     ld  bc,320*8    ;copy one line from other buffer to current buffer.
   37 D1:E126 7E -  -  -  _:  ld  a,(hl)
   38 D1:E127 C6 01 -  -      add a,1     ;carry if $FF (white), NC if not
   39 D1:E129 9F -  -  -      sbc a,a     ;if carry, returns to $FF, else is black
   40 D1:E12A 77 -  -  -      ld  (hl),a
   41 D1:E12B ED A0 -  -      ldi
   42 D1:E12D EA 26 E1 D1     jp  pe,-_
   43 D1:E131 3A F7 31 D0     ld  a,(yPos)
   44 D1:E135 FE 1D -  -      cp  a,29
   45 D1:E137 20 06 -  -      jr  nz,+_
   46 D1:E139 21 00 D4 FE     ld  hl,-(320*240)
   47 D1:E13D 19 -  -  -      add hl,de
   48 D1:E13E EB -  -  -      ex de,hl        ;if bottom of screen, then reset DE to top of screen.
   49 D1:E13F D5 -  -  -  _:  push de
   50 D1:E140 E1 -  -  -      pop hl
   51 D1:E141 13 -  -  -      inc de
   52 D1:E142 71 -  -  -      ld  (hl),c
   53 D1:E143 01 BF 08 00     ld  bc,(320*7)-1    ;erase whole line below it to prepare for writing.
   54 D1:E147 ED B0 -  -      ldir
   55 D1:E149 C9 -  -  -      ret
   56 D1:E14A -  -  -  -  
   57 D1:E14A -  -  -  -  ;Input: ix = core_memory_ix 
   58 D1:E14A -  -  -  -  ;Output: Text onscreen
   59 D1:E14A -  -  -  -  dbg_printLine:
   60 D1:E14A E5 C5 D5 DD 
              E5 FD E5 F5     push hl \ push bc \ push de \ push ix \ push iy \ push af
   61 D1:E152 ED 23 00 -      lea hl,iy+0
   62 D1:E155 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl
   63 D1:E158 11 00 00 00     ld  de,DEBUG_PRINT_START_CYCLE
   64 D1:E15C B7 -  -  -      or  a,a
   65 D1:E15D ED 52 -  -      sbc hl,de
   66 D1:E15F DA 43 E2 D1     jp  c,dbg_printLine_noPrint
   67 D1:E163 -  -  -  -  
   68 D1:E163 3E 1A -  -      ld  a,$1A   ;blue
   69 D1:E165 32 6F B0 D1     ld  (fontBGColor_var),a
   70 D1:E169 32 BC B0 D1     ld  (smallFontBGColor_var),a
   71 D1:E16D DD 27 0E -      ld  hl,(ix+CURRENT_OPCODES)
   72 D1:E170 22 F9 31 D0     ld  (operbuf),hl
   73 D1:E174 CD 06 E1 D1     call dbg_prepNextLine
   74 D1:E178 CD 2B B0 D1     call newLine
   75 D1:E17C DD 7E 06 -      ld  a,(ix+REGPC+1)
   76 D1:E17F CD 88 B0 D1     call printSmallNumPair
   77 D1:E183 DD 7E 05 -      ld  a,(ix+REGPC+0)
   78 D1:E186 CD 88 B0 D1     call printSmallNumPair
   79 D1:E18A 3E 20 -  -      ld  a,' '
   80 D1:E18C CD 58 B0 D1     call printBigFont
   81 D1:E190 -  -  -  -      ;
   82 D1:E190 3E 41 -  -      ld  a,'A'
   83 D1:E192 CD 58 B0 D1     call printBigFont
   84 D1:E196 DD 7E 00 -      ld  a,(ix+REGA)
   85 D1:E199 CD 88 B0 D1     call printSmallNumPair
   86 D1:E19D 3E 20 -  -      ld  a,' '
   87 D1:E19F CD 58 B0 D1     call printBigFont
   88 D1:E1A3 -  -  -  -      ;
   89 D1:E1A3 3E 58 -  -      ld  a,'X'
   90 D1:E1A5 CD 58 B0 D1     call printBigFont
   91 D1:E1A9 DD 7E 01 -      ld  a,(ix+REGX)
   92 D1:E1AC CD 88 B0 D1     call printSmallNumPair
   93 D1:E1B0 3E 20 -  -      ld  a,' '
   94 D1:E1B2 CD 58 B0 D1     call printBigFont
   95 D1:E1B6 -  -  -  -      ;
   96 D1:E1B6 3E 59 -  -      ld  a,'Y'
   97 D1:E1B8 CD 58 B0 D1     call printBigFont
   98 D1:E1BC DD 7E 02 -      ld  a,(ix+REGY)
   99 D1:E1BF CD 88 B0 D1     call printSmallNumPair
  100 D1:E1C3 3E 20 -  -      ld  a,' '
  101 D1:E1C5 CD 58 B0 D1     call printBigFont
  102 D1:E1C9 -  -  -  -      ;
  103 D1:E1C9 3E 53 -  -      ld  a,'S'
  104 D1:E1CB CD 58 B0 D1     call printBigFont
  105 D1:E1CF DD 7E 03 -      ld  a,(ix+REGSP)
  106 D1:E1D2 CD 88 B0 D1     call printSmallNumPair
  107 D1:E1D6 3E 20 -  -      ld  a,' '
  108 D1:E1D8 CD 58 B0 D1     call printBigFont
  109 D1:E1DC -  -  -  -      ;
  110 D1:E1DC 3E 50 -  -      ld  a,'P'
  111 D1:E1DE CD 58 B0 D1     call printBigFont
  112 D1:E1E2 DD 7E 04 -      ld  a,(ix+REGSR)
  113 D1:E1E5 CD 88 B0 D1     call printSmallNumPair
  114 D1:E1E9 3E 20 -  -      ld  a,' '
  115 D1:E1EB CD 58 B0 D1     call printBigFont
  116 D1:E1EF -  -  -  -  
  117 D1:E1EF -  -  -  -      ;
  118 D1:E1EF -  -  -  -  ;    ld  hl,dbg_printLine_str001
  119 D1:E1EF -  -  -  -  ;    call printString
  120 D1:E1EF -  -  -  -  ;    ld  b,5
  121 D1:E1EF -  -  -  -  ;    lea hl,ix+0
  122 D1:E1EF -  -  -  -  ;_:  ld  a,(hl)
  123 D1:E1EF -  -  -  -  ;    inc hl
  124 D1:E1EF -  -  -  -  ;    push bc
  125 D1:E1EF -  -  -  -  ;        push hl
  126 D1:E1EF -  -  -  -  ;            call printSmallNumPair
  127 D1:E1EF -  -  -  -  ;            ld  a,' '
  128 D1:E1EF -  -  -  -  ;            call printBigFont
  129 D1:E1EF -  -  -  -  ;        pop hl
  130 D1:E1EF -  -  -  -  ;    pop bc
  131 D1:E1EF -  -  -  -  ;    djnz -_
  132 D1:E1EF -  -  -  -  
  133 D1:E1EF DD 7E 0D -      ld  a,(ix+CYCLES_CURRENT+2)
  134 D1:E1F2 CD 88 B0 D1     call printSmallNumPair
  135 D1:E1F6 DD 7E 0C -      ld  a,(ix+CYCLES_CURRENT+1)
  136 D1:E1F9 CD 88 B0 D1     call printSmallNumPair
  137 D1:E1FD DD 7E 0B -      ld  a,(ix+CYCLES_CURRENT+0)
  138 D1:E200 CD 88 B0 D1     call printSmallNumPair
  139 D1:E204 3E 20 -  -      ld  a,' '
  140 D1:E206 CD 58 B0 D1     call printBigFont
  141 D1:E20A 2A F9 31 D0     ld  hl,(operbuf)
  142 D1:E20E DD 2F 0E -      ld  (ix+CURRENT_OPCODES),hl
  143 D1:E211 7D -  -  -      ld  a,L
  144 D1:E212 CD 33 E3 D1     call dbg_getInstSize
  145 D1:E216 06 03 -  -      ld  b,3
  146 D1:E218 4F -  -  -      ld  c,a
  147 D1:E219 0C -  -  -      inc c
  148 D1:E21A ED 22 0E -      lea hl,ix+CURRENT_OPCODES
  149 D1:E21D 7E -  -  -  _:  ld  a,(hl)
  150 D1:E21E 23 -  -  -      inc hl
  151 D1:E21F E5 -  -  -      push hl
  152 D1:E220 0D -  -  -          dec c
  153 D1:E221 F2 26 E2 D1         jp p,+_
  154 D1:E225 0C -  -  -          inc c   ;never let c go below zero.
  155 D1:E226 C5 -  -  -  _:      push bc
  156 D1:E227 28 06 -  -              jr  z,+_
  157 D1:E229 CD 88 B0 D1             call printSmallNumPair
  158 D1:E22D 18 06 -  -              jr ++_
  159 D1:E22F 3E 20 -  -  _:          ld  a,' '
  160 D1:E231 CD 58 B0 D1             call printBigFont
  161 D1:E235 C1 -  -  -  _:      pop bc
  162 D1:E236 E1 -  -  -      pop hl
  163 D1:E237 10 E4 -  -      djnz ----_
  164 D1:E239 3E 20 -  -      ld  a,' '
  165 D1:E23B CD 58 B0 D1     call printBigFont
  166 D1:E23F CD 4B E3 D1     call dbg_printDisassembly
  167 D1:E243 -  -  -  -  
  168 D1:E243 -  -  -  -      ;
  169 D1:E243 -  -  -  -      ;Remove section below when done testing nestest for timings
  170 D1:E243 -  -  -  -      ;
  171 D1:E243 -  -  -  -  dbg_printLine_noPrint:
  172 D1:E243 11 00 00 00     ld  de,0
  173 D1:E247 2A 4A 34 D0     ld  hl,(timings_base)
  174 D1:E24B 5E -  -  -      ld  e,(hl)
  175 D1:E24C 23 -  -  -      inc hl
  176 D1:E24D 56 -  -  -      ld  d,(hl)
  177 D1:E24E 23 -  -  -      inc hl
  178 D1:E24F 22 4A 34 D0     ld  (timings_base),hl
  179 D1:E253 DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  180 D1:E256 B7 -  -  -      or  a,a
  181 D1:E257 ED 52 -  -      sbc hl,de
  182 D1:E259 28 17 -  -      jr  z,+_
  183 D1:E25B 21 FF FF FF     ld  hl,-1
  184 D1:E25F DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  185 D1:E262 CD 2B B0 D1     call newLine
  186 D1:E266 21 F6 E2 D1     ld  hl,dbg_printLine_timeMismatch
  187 D1:E26A CD 42 B0 D1     call printString
  188 D1:E26E DD 36 14 01     ld  (ix+CORE_ERROR_LEVEL),1
  189 D1:E272 2A 4A 34 D0 _:  ld  hl,(timings_base)
  190 D1:E276 7E -  -  -      ld  a,(hl)
  191 D1:E277 23 -  -  -      inc hl
  192 D1:E278 22 4A 34 D0     ld  (timings_base),hl
  193 D1:E27C DD BE 04 -      cp  a,(ix+REGSR)
  194 D1:E27F 28 17 -  -      jr  z,+_
  195 D1:E281 21 FF FF FF     ld  hl,-1
  196 D1:E285 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  197 D1:E288 CD 2B B0 D1     call newLine
  198 D1:E28C 21 10 E3 D1     ld  hl,dbg_printLine_statusRegisterMismatch
  199 D1:E290 CD 42 B0 D1     call printString
  200 D1:E294 DD 36 14 02     ld  (ix+CORE_ERROR_LEVEL),2
  201 D1:E298 -  -  -  -  _:
  202 D1:E298 -  -  -  -      ;
  203 D1:E298 -  -  -  -      ;End debug-debug section
  204 D1:E298 -  -  -  -      ;
  205 D1:E298 CD 4E AF D1     call fastCopy
  206 D1:E29C AF -  -  -      xor a,a     ;black
  207 D1:E29D 32 6F B0 D1     ld  (fontBGColor_var),a
  208 D1:E2A1 32 BC B0 D1     ld  (smallFontBGColor_var),a
  209 D1:E2A5 -  -  -  -  
  210 D1:E2A5 F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  211 D1:E2AD -  -  -  -      ;push hl \ push bc \ push de \ push ix \ push iy \ push af
  212 D1:E2AD C9 -  -  -      ret
  213 D1:E2AE -  -  -  -  
  214 D1:E2AE -  -  -  -  
  215 D1:E2AE -  -  -  -      ;also remove this when done timing debugging
  216 D1:E2AE 11 00 00 00     ld  de,0
  217 D1:E2B2 2A 4A 34 D0     ld  hl,(timings_base)
  218 D1:E2B6 5E -  -  -      ld  e,(hl)
  219 D1:E2B7 23 -  -  -      inc hl
  220 D1:E2B8 56 -  -  -      ld  d,(hl)
  221 D1:E2B9 23 -  -  -      inc hl
  222 D1:E2BA 22 4A 34 D0     ld  (timings_base),hl
  223 D1:E2BE DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  224 D1:E2C1 B7 -  -  -      or  a,a
  225 D1:E2C2 ED 52 -  -      sbc hl,de
  226 D1:E2C4 28 13 -  -      jr  z,+_
  227 D1:E2C6 21 FF FF FF     ld  hl,-1
  228 D1:E2CA DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  229 D1:E2CD CD 2B B0 D1     call newLine
  230 D1:E2D1 21 F6 E2 D1     ld  hl,dbg_printLine_timeMismatch
  231 D1:E2D5 CD 42 B0 D1     call printString
  232 D1:E2D9 -  -  -  -  _:  ;
  233 D1:E2D9 -  -  -  -      ;End debug-debug section
  234 D1:E2D9 -  -  -  -      ;
  235 D1:E2D9 CD 4E AF D1     call fastCopy
  236 D1:E2DD AF -  -  -      xor a,a     ;black
  237 D1:E2DE 32 6F B0 D1     ld  (fontBGColor_var),a
  238 D1:E2E2 32 BC B0 D1     ld  (smallFontBGColor_var),a
  239 D1:E2E6 F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  240 D1:E2EE C9 -  -  -      ret
  241 D1:E2EF -  -  -  -  
  242 D1:E2EF -  -  -  -  dbg_printLine_str001:
  243 D1:E2EF 41 58 59 53 
              50 20 00 -  .db "AXYSP ",0
  244 D1:E2F6 -  -  -  -  dbg_printLine_timeMismatch:
  245 D1:E2F6 43 50 55 20 
              54 65 73 74 
              20 74 69 6D 
              69 6E 67 20 
              6D 69 73 6D 
              61 74 63 68 
              2E 00 -  -  .db "CPU Test timing mismatch.",0
  246 D1:E310 -  -  -  -  dbg_printLine_statusRegisterMismatch:
  247 D1:E310 -  -  -  -  ;    0123456789012345678901234567890123456789
  248 D1:E310 43 50 55 20 
              54 65 73 74 
              20 73 74 61 
              74 75 73 20 
              72 65 67 69 
              73 74 65 72 
              20 6D 69 73 
              6D 61 74 63 
              68 2E 00 -  .db "CPU Test status register mismatch.",0
  249 D1:E333 -  -  -  -  
  250 D1:E333 -  -  -  -  
  251 D1:E333 -  -  -  -  
  252 D1:E333 -  -  -  -  
  253 D1:E333 -  -  -  -  
  254 D1:E333 -  -  -  -  
  255 D1:E333 -  -  -  -  ;A=instruction. Returns: A=size
  256 D1:E333 -  -  -  -  dbg_getInstSize:
  257 D1:E333 E5 D5 -  -      push hl \ push de
  258 D1:E335 57 -  -  -          ld  d,a
  259 D1:E336 1E 04 -  -          ld  e,4
  260 D1:E338 ED 5C -  -          mlt de
  261 D1:E33A 21 EF DC D1         ld  hl,inst6502_disassembly_table+3
  262 D1:E33E 19 -  -  -          add hl,de
  263 D1:E33F 16 00 -  -          ld  d,0
  264 D1:E341 5E -  -  -          ld  e,(hl)
  265 D1:E342 21 B1 DC D1         ld  hl,inst6502_opcode_width_table
  266 D1:E346 19 -  -  -          add hl,de
  267 D1:E347 7E -  -  -          ld  a,(hl)
  268 D1:E348 D1 E1 -  -      pop de \ pop hl
  269 D1:E34A C9 -  -  -      ret
  270 D1:E34B -  -  -  -  
  271 D1:E34B -  -  -  -  dbg_printDisassembly:
  272 D1:E34B F5 C5 D5 E5 
              DD E5 -  -      push af \ push bc \ push de \ push hl \ push ix
  273 D1:E351 -  -  -  -      ;find entry in disassembly table
  274 D1:E351 2A F9 31 D0     ld  hl,(operbuf)
  275 D1:E355 26 04 -  -      ld  H,4
  276 D1:E357 ED 6C -  -      mlt hl
  277 D1:E359 11 EC DC D1     ld  de,inst6502_disassembly_table
  278 D1:E35D 19 -  -  -      add hl,de
  279 D1:E35E 06 03 -  -      ld  b,3
  280 D1:E360 7E -  -  -  _:  ld  a,(hl)
  281 D1:E361 23 -  -  -      inc hl
  282 D1:E362 CD E8 E3 D1     call dbg_printC
  283 D1:E366 10 F8 -  -      djnz -_
  284 D1:E368 3E 20 -  -      ld  a,' '
  285 D1:E36A CD E8 E3 D1     call dbg_printC
  286 D1:E36E 46 -  -  -      ld  b,(hl)
  287 D1:E36F 04 -  -  -      inc b
  288 D1:E370 -  -  -  -      ;Instruction addressing mode in B. Now find text for that address mode.
  289 D1:E370 21 BF DC D1     ld  hl,inst6502_disassembler
  290 D1:E374 11 00 00 00     ld  de,0
  291 D1:E378 5E -  -  -  _:  ld  e,(hl)
  292 D1:E379 19 -  -  -      add hl,de
  293 D1:E37A 10 FC -  -      djnz -_
  294 D1:E37C 1D -  -  -      dec e
  295 D1:E37D 28 29 -  -      jr  z,dbg_printDisassembly_end  ;stop if text is zero-sized
  296 D1:E37F ED 52 -  -      sbc hl,de   ;rewind to start of text part of instruction. E is text length.
  297 D1:E381 43 -  -  -      ld  b,e
  298 D1:E382 -  -  -  -  dbg_printDisassembly_printOperandLoop:
  299 D1:E382 7E -  -  -      ld  a,(hl)
  300 D1:E383 23 -  -  -      inc hl
  301 D1:E384 FE 31 -  -      cp  a,'1'
  302 D1:E386 20 06 -  -      jr  nz,+_
  303 D1:E388 CD CC E3 D1     call dbg_printOperand1
  304 D1:E38C 18 18 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  305 D1:E38E FE 32 -  -  _:  cp  a,'2'
  306 D1:E390 20 06 -  -      jr  nz,+_
  307 D1:E392 CD C4 E3 D1     call dbg_printOperand2
  308 D1:E396 18 0E -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  309 D1:E398 FE 2D -  -  _:  cp  a,'-'
  310 D1:E39A 20 06 -  -      jr  nz,+_
  311 D1:E39C CD AF E3 D1     call dbg_printRel1
  312 D1:E3A0 18 04 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  313 D1:E3A2 CD E8 E3 D1 _:  call dbg_printC
  314 D1:E3A6 -  -  -  -  dbg_PrintDisassembly_printOperandFallthrough:
  315 D1:E3A6 10 DA -  -      djnz dbg_printDisassembly_printOperandLoop
  316 D1:E3A8 -  -  -  -  dbg_printDisassembly_end:
  317 D1:E3A8 DD E1 E1 D1 
              C1 F1 -  -      pop ix \ pop hl \ pop de \ pop bc \ pop af
  318 D1:E3AE C9 -  -  -      ret
  319 D1:E3AF -  -  -  -  
  320 D1:E3AF -  -  -  -  dbg_printRel1:
  321 D1:E3AF 3A FA 31 D0     ld  a,(operbuf+1)
  322 D1:E3B3 B7 -  -  -      or  a,a
  323 D1:E3B4 F2 C2 E3 D1     jp  p,dbg_printRel1_skipNeg
  324 D1:E3B8 F5 -  -  -      push af
  325 D1:E3B9 3E 2D -  -          ld   a,'-'
  326 D1:E3BB CD E8 E3 D1         call dbg_printC
  327 D1:E3BF F1 -  -  -      pop af
  328 D1:E3C0 ED 44 -  -      neg
  329 D1:E3C2 -  -  -  -  dbg_printRel1_skipNeg:
  330 D1:E3C2 18 0C -  -      jr dbg_printHex
  331 D1:E3C4 -  -  -  -  
  332 D1:E3C4 -  -  -  -  dbg_printOperand2:
  333 D1:E3C4 3A FB 31 D0     ld  a,(operbuf+2)
  334 D1:E3C8 CD D0 E3 D1     call dbg_printHex
  335 D1:E3CC -  -  -  -  dbg_printOperand1:
  336 D1:E3CC 3A FA 31 D0     ld  a,(operbuf+1)
  337 D1:E3D0 -  -  -  -  dbg_printHex:
  338 D1:E3D0 CD D5 E3 D1     call dispAHex
  339 D1:E3D4 C9 -  -  -      ret
  340 D1:E3D5 -  -  -  -  
  341 D1:E3D5 -  -  -  -  dispAHex:
  342 D1:E3D5 F5 -  -  -      push af
  343 D1:E3D6 CD DD E3 D1         call +_
  344 D1:E3DA F1 -  -  -      pop af
  345 D1:E3DB 18 04 -  -      jr  ++_
  346 D1:E3DD 1F -  -  -  _:  rra
  347 D1:E3DE 1F -  -  -      rra
  348 D1:E3DF 1F -  -  -      rra
  349 D1:E3E0 1F -  -  -      rra
  350 D1:E3E1 F6 F0 -  -  _:  or  a,$F0
  351 D1:E3E3 27 -  -  -      daa
  352 D1:E3E4 C6 A0 -  -      add a,$A0
  353 D1:E3E6 CE 40 -  -      adc a,$40
  354 D1:E3E8 -  -  -  -  dbg_printC:
  355 D1:E3E8 E5 -  -  -      push hl
  356 D1:E3E9 C5 -  -  -          push bc
  357 D1:E3EA CD 58 B0 D1             call dbg_printChr
  358 D1:E3EE C1 -  -  -          pop bc
  359 D1:E3EF E1 -  -  -      pop hl
  360 D1:E3F0 C9 -  -  -      ret
Listing for file "main.z80"
  819 D1:E3F1 -  -  -  -  #include "ppu.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ppu.z80"
    1 D1:E3F1 -  -  -  -  ;PPU-related stuff is written here, though not all of it is localized in
    2 D1:E3F1 -  -  -  -  ;this file. Some of it will necessarily be located with the mapper code
    3 D1:E3F1 -  -  -  -  ;that handles PPU I/O.
    4 D1:E3F1 -  -  -  -  
    5 D1:E3F1 -  -  -  -  
    6 D1:E3F1 -  -  -  -      ;Do this before a lot of other things.
    7 D1:E3F1 -  -  -  -      ;Select current character rom banks from PPU settings.
    8 D1:E3F1 2A 46 34 D0     ld  hl,(chr_rom_base)
    9 D1:E3F5 01 00 10 00     ld  bc,$001000
   10 D1:E3F9 DD 7E FB -      ld  a,(ix+PPU_CONFIG)
   11 D1:E3FC E5 -  -  -      push hl
   12 D1:E3FD CB 67 -  -          bit 4,a     ;background pattern base offset
   13 D1:E3FF 28 01 -  -          jr  z,+_
   14 D1:E401 09 -  -  -          add hl,bc
   15 D1:E402 22 20 34 D0 _:      ld  (chr_rom_tiles),hl
   16 D1:E406 E1 -  -  -      pop hl
   17 D1:E407 CB 6F -  -      bit 5,a     ;sprite pattern base offset
   18 D1:E409 28 01 -  -      jr  z,+_
   19 D1:E40B 09 -  -  -      add hl,bc
   20 D1:E40C 22 24 34 D0 _:  ld  (chr_rom_sprites),hl
   21 D1:E410 -  -  -  -  
   22 D1:E410 -  -  -  -  
   23 D1:E410 -  -  -  -  
   24 D1:E410 -  -  -  -      ;B=Y, C=X. Obtain nametable address
   25 D1:E410 -  -  -  -      ;You must preserve BC yourself. Somehow. Or not depending on how you loop.
   26 D1:E410 -  -  -  -      ;B and C are modified to fit inside the nametable selected.
   27 D1:E410 21 80 06 1A     ld  hl,nametable00>>3
   28 D1:E414 78 -  -  -      ld  a,b
   29 D1:E415 D6 20 -  -      sub 32
   30 D1:E417 38 01 -  -      jr  c,+_
   31 D1:E419 78 -  -  -      ld  a,b
   32 D1:E41A 47 -  -  -  _:  ld  b,a
   33 D1:E41B 3F -  -  -      ccf
   34 D1:E41C ED 6A -  -      adc hl,hl
   35 D1:E41E 79 -  -  -      ld  a,c
   36 D1:E41F D6 1E -  -      sub 30
   37 D1:E421 38 01 -  -      jr  c,+_
   38 D1:E423 79 -  -  -      ld  a,c
   39 D1:E424 4F -  -  -  _:  ld  c,a
   40 D1:E425 3F -  -  -      ccf
   41 D1:E426 ED 6A -  -      adc hl,hl
   42 D1:E428 29 -  -  -      add hl,hl   ;HL is now a pointer. do ld hl,(hl) to get actual NT address.
   43 D1:E429 -  -  -  -  
   44 D1:E429 -  -  -  -  
   45 D1:E429 -  -  -  -      ;Increment C=X, adjusting nametable pointer table in HL if crossover
   46 D1:E429 0C -  -  -      inc c
   47 D1:E42A 79 -  -  -      ld  a,c
   48 D1:E42B FE 20 -  -      cp  a,32
   49 D1:E42D 38 06 -  -      jr  c,+_
   50 D1:E42F 0E 00 -  -      ld  c,0
   51 D1:E431 7D -  -  -      ld  a,L
   52 D1:E432 EE 04 -  -      xor a,%00000100
   53 D1:E434 6F -  -  -      ld  L,a
   54 D1:E435 00 -  -  -  _:  nop
   55 D1:E436 -  -  -  -  
   56 D1:E436 -  -  -  -      ;Increment B=Y, adjusting nametable pointer table in HL if crossover
   57 D1:E436 04 -  -  -      inc b
   58 D1:E437 78 -  -  -      ld  a,b
   59 D1:E438 FE 1E -  -      cp  a,30
   60 D1:E43A 38 06 -  -      jr  c,+_
   61 D1:E43C 06 00 -  -      ld  b,0
   62 D1:E43E 7D -  -  -      ld  a,L
   63 D1:E43F EE 08 -  -      xor a,%00001000
   64 D1:E441 6F -  -  -      ld  L,a
   65 D1:E442 00 -  -  -  _:  nop
   66 D1:E443 -  -  -  -  
   67 D1:E443 -  -  -  -      ;Retrieves attribute byte from B=Y, C=X
   68 D1:E443 -  -  -  -      ;HL=nametable pointer table
   69 D1:E443 -  -  -  -      ;NTptr tab low byte fmt: %000TIIAA. T=attrib, I=ID, A=address bytes
   70 D1:E443 D5 -  -  -      push de
   71 D1:E444 79 -  -  -          ld  a,c
   72 D1:E445 CB 3F -  -          srl a
   73 D1:E447 CB 3F -  -          srl a   ;change 0-30 to 0-7. Discards low 2 bits.
   74 D1:E449 5F -  -  -          ld  e,a
   75 D1:E44A 78 -  -  -          ld  a,b
   76 D1:E44B E6 03 -  -          and a,3 ;discard two lower bits
   77 D1:E44D 87 -  -  -          add a,a ;But place remaining bits up higher
   78 D1:E44E 83 -  -  -          add a,e ;A=%00YYYXXX
   79 D1:E44F CB E5 -  -          set 4,L ;swap to attrib
   80 D1:E451 ED 17 -  -          ld  de,(hl)
   81 D1:E453 CB A5 -  -          res 4,L ;swap back to main nametable pointers
   82 D1:E455 83 -  -  -          add a,e ;base is $C0. This will not produce a carry.
   83 D1:E456 5F -  -  -          ld  e,a
   84 D1:E457 1A -  -  -          ld  a,(de)
   85 D1:E458 D1 -  -  -      pop de
   86 D1:E459 -  -  -  -  
   87 D1:E459 -  -  -  -      ;Selects attribute from A from B=Y, C=X in format %0000AA00
   88 D1:E459 CB 48 -  -      bit 1,b
   89 D1:E45B 28 04 -  -      jr  z,+_
   90 D1:E45D 07 -  -  -      rlca    ;If not zero, shift upper nibble into lower nibble
   91 D1:E45E 07 -  -  -      rlca    ;for further selection.
   92 D1:E45F 07 -  -  -      rlca
   93 D1:E460 07 -  -  -      rlca
   94 D1:E461 CB 49 -  -  _:  bit 1,c
   95 D1:E463 20 02 -  -      jr  nz,+_   ;If not zero, upper 2 bits of lower nibble already in position
   96 D1:E465 07 -  -  -      rlca        ;Otherwise, move them into position
   97 D1:E466 07 -  -  -      rlca        
   98 D1:E467 E6 0C -  -  _:  and a,%00001100
   99 D1:E469 -  -  -  -  
  100 D1:E469 -  -  -  -      ;Nametable/tilemap variant
  101 D1:E469 -  -  -  -      ;Sets DE to current location in nametable wrt B=Y, C=X
  102 D1:E469 -  -  -  -      ;HL=current nametable pointer
  103 D1:E469 E5 -  -  -      push hl
  104 D1:E46A ED 27 -  -          ld  hl,(hl)
  105 D1:E46C 1E 20 -  -          ld  e,32
  106 D1:E46E 50 -  -  -          ld  d,b
  107 D1:E46F ED 5C -  -          mlt de
  108 D1:E471 7B -  -  -          ld  a,e
  109 D1:E472 81 -  -  -          add a,c
  110 D1:E473 5F -  -  -          ld  e,a
  111 D1:E474 19 -  -  -          add hl,de
  112 D1:E475 -  -  -  -          ;ex  de,hl
  113 D1:E475 E1 -  -  -      pop hl
  114 D1:E476 -  -  -  -  
  115 D1:E476 -  -  -  -      ;TODO: Find way to link stuff above. The task set forth is the following:
  116 D1:E476 -  -  -  -      ;Create the main tile rendering loop. We must track the following:
  117 D1:E476 -  -  -  -      ;   Screen pointer, nametable position, loop parameters.
  118 D1:E476 -  -  -  -      ;With these, we will:
  119 D1:E476 -  -  -  -      ;1. Get tileID from nametable position
  120 D1:E476 -  -  -  -      ;2. Get attribute data associated with that tile.
  121 D1:E476 -  -  -  -      ;3. Retrieve CHR_ROM data and
  122 D1:E476 -  -  -  -      ;4. Combine it to retrieve color data, then write it to screen buffer.
  123 D1:E476 -  -  -  -      ;
  124 D1:E476 -  -  -  -      ;Later on, insert a cacheing step between 2 and 3. to selectively
  125 D1:E476 -  -  -  -      ;modify step 4.
  126 D1:E476 -  -  -  -      ;
  127 D1:E476 -  -  -  -      ; Do in the inlining thing later.
  128 D1:E476 -  -  -  -      ;
  129 D1:E476 -  -  -  -  
  130 D1:E476 -  -  -  -  ;Some bits of this is in "coreint.z80"
  131 D1:E476 -  -  -  -  ppu_isr:
  132 D1:E476 DD 7E FB -      ld  a,(ix+PPU_CTRL)
  133 D1:E479 E6 18 -  -      and a,%00011000     ;sprite and background. if zero, no rendering happens.
  134 D1:E47B 28 0D -  -      jr  z,ppu_isr_nodraw
  135 D1:E47D -  -  -  -      ;perform the check that makes odd cycles one ppu cc shorter, but only if
  136 D1:E47D -  -  -  -      ;something is being rendered to the screen
  137 D1:E47D DD 7E F2 -      ld  a,(ix+PPU_FRAMECOUNT)
  138 D1:E480 0F -  -  -      rrca
  139 D1:E481 30 03 -  -      jr  nc,+_
  140 D1:E483 DD 35 ED -      dec (ix+PPU_SUBCYCLE)
  141 D1:E486 -  -  -  -  _:  ;there... should be something else to do?
  142 D1:E486 -  -  -  -      ;call ppu_drawBGSprites
  143 D1:E486 CD BA E4 D1     call ppu_drawBG
  144 D1:E48A -  -  -  -      ;call ppu_drawFGSprites
  145 D1:E48A -  -  -  -  ppu_isr_nodraw:
  146 D1:E48A 01 23 6D 00     ld  bc,27939
  147 D1:E48E DD 7E ED -      ld  a,(ix+PPU_SUBCYCLE)
  148 D1:E491 C6 02 -  -      add a,2     ;add the 2/3rds cycle
  149 D1:E493 FE 03 -  -      cp  a,3     ;but is it more than 3? (0,1,2)
  150 D1:E495 38 03 -  -      jr  c,+_
  151 D1:E497 D6 03 -  -      sub a,3
  152 D1:E499 03 -  -  -      inc bc
  153 D1:E49A DD 77 ED -  _:  ld  (ix+PPU_SUBCYCLE),a
  154 D1:E49D 11 76 E4 D1     ld  de,ppu_isr
  155 D1:E4A1 CD 7C B4 D1     call int6502_pushISRAfterPop
  156 D1:E4A5 DD CB F4 FE     set 7,(ix+PPU_STATUS)
  157 D1:E4A9 -  -  -  -      ;
  158 D1:E4A9 -  -  -  -      ; TODO: Figure this one out:
  159 D1:E4A9 -  -  -  -      ; Do we need something to unset VBlank active flag at the end of
  160 D1:E4A9 -  -  -  -      ; VBlank if left unread?
  161 D1:E4A9 -  -  -  -      ;
  162 D1:E4A9 DD CB FB 7E     bit 7,(ix+PPU_CTRL)     ;VBlank NMI enable flag
  163 D1:E4AD CA AF B5 D1     jp  z,i6502RetryFirstLoad
  164 D1:E4B1 3E FF -  -      ld  a,$FF
  165 D1:E4B3 DD 77 1E -      ld  (ix+NMI_TRIGGERED),a
  166 D1:E4B6 C3 0B CC D1     jp  inst6502_brk
  167 D1:E4BA -  -  -  -  
  168 D1:E4BA -  -  -  -  
  169 D1:E4BA -  -  -  -  
  170 D1:E4BA -  -  -  -  
  171 D1:E4BA -  -  -  -  
  172 D1:E4BA -  -  -  -  
  173 D1:E4BA -  -  -  -  ppu_drawBG:
  174 D1:E4BA -  -  -  -      ;set base rom addresses
  175 D1:E4BA 2A 46 34 D0     ld  hl,(chr_rom_base)
  176 D1:E4BE 01 00 10 00     ld  bc,$001000
  177 D1:E4C2 DD 7E FB -      ld  a,(ix+PPU_CONFIG)
  178 D1:E4C5 E5 -  -  -      push hl
  179 D1:E4C6 CB 67 -  -          bit 4,a     ;background pattern base offset
  180 D1:E4C8 28 01 -  -          jr  z,+_
  181 D1:E4CA 09 -  -  -          add hl,bc
  182 D1:E4CB 22 20 34 D0 _:      ld  (chr_rom_tiles),hl
  183 D1:E4CF E1 -  -  -      pop hl
  184 D1:E4D0 CB 6F -  -      bit 5,a     ;sprite pattern base offset
  185 D1:E4D2 28 01 -  -      jr  z,+_
  186 D1:E4D4 09 -  -  -      add hl,bc
  187 D1:E4D5 22 24 34 D0 _:  ld  (chr_rom_sprites),hl
  188 D1:E4D9 -  -  -  -      ;set coarse x,y scroll positions. B=Y, C=x
  189 D1:E4D9 DD 07 FC -      ld  bc,(ix+PPU_XSCROLL)
  190 D1:E4DC CB 20 -  -      sla b
  191 D1:E4DE CB 20 -  -      sla b
  192 D1:E4E0 CB 20 -  -      sla b
  193 D1:E4E2 CB 21 -  -      sla c
  194 D1:E4E4 CB 21 -  -      sla c
  195 D1:E4E6 CB 21 -  -      sla c
  196 D1:E4E8 -  -  -  -      ;set base nametable addresses
  197 D1:E4E8 21 00 34 D0     ld  hl,nametable00
  198 D1:E4EC DD 7E FB -      ld  a,(ix+PPU_CONFIG)
  199 D1:E4EF E6 03 -  -      and a,3
  200 D1:E4F1 87 -  -  -      add a,a
  201 D1:E4F2 87 -  -  -      add a,a
  202 D1:E4F3 6F -  -  -      ld  L,a
  203 D1:E4F4 DD 2F F5 -      ld  (ix+PPU_NAMETABLE_PTR),hl   ;yeah. let's cache this so we don't lose it
  204 D1:E4F7 -  -  -  -      ;In-place setting of nametable address wrt X,Y
  205 D1:E4F7 -  -  -  -      ;%------YY YYYXXXXX
  206 D1:E4F7 ED 17 -  -      ld  de,(hl)
  207 D1:E4F9 79 -  -  -      ld  a,c
  208 D1:E4FA 07 -  -  -      rlca
  209 D1:E4FB 07 -  -  -      rlca
  210 D1:E4FC 07 -  -  -      rlca
  211 D1:E4FD 5F -  -  -      ld  e,a
  212 D1:E4FE AA -  -  -      xor a,d
  213 D1:E4FF E6 03 -  -      and a,%00000011
  214 D1:E501 AA -  -  -      xor a,d
  215 D1:E502 7B -  -  -      ld  a,e
  216 D1:E503 A8 -  -  -      xor a,b
  217 D1:E504 E6 E0 -  -      and %11100000
  218 D1:E506 A8 -  -  -      xor a,b
  219 D1:E507 5F -  -  -      ld  e,a
  220 D1:E508 -  -  -  -      ;Fetch first attribute byte from address
  221 D1:E508 -  -  -  -      ;%------YY YYYXXXXX -> %------11 11YYYXXX
  222 D1:E508 D5 -  -  -      push de
  223 D1:E509 7A -  -  -          ld  a,d
  224 D1:E50A 1F -  -  -          rra
  225 D1:E50B CB 3B -  -          srl e
  226 D1:E50D 1F -  -  -          rra
  227 D1:E50E CB 3B -  -          srl e       ;YYYYYXXX
  228 D1:E510 CB C2 -  -          set 0,d
  229 D1:E512 CB CA -  -          set 1,d
  230 D1:E514 7B -  -  -          ld  a,e
  231 D1:E515 07 -  -  -          rlca
  232 D1:E516 07 -  -  -          rlca
  233 D1:E517 F6 C0 -  -          or  a,%11000000
  234 D1:E519 AB -  -  -          xor a,e
  235 D1:E51A E6 F8 -  -          and a,%11111000
  236 D1:E51C AB -  -  -          xor a,e
  237 D1:E51D 5F -  -  -          ld  e,a
  238 D1:E51E 1A -  -  -          ld  a,(de)
  239 D1:E51F D1 -  -  -      pop de
  240 D1:E520 -  -  -  -      ;Selects attribute from A from B=Y, C=X in format %0000AA00
  241 D1:E520 -  -  -  -      ;Let's instead use DE %------yy yYyxxxXx y: e6, x: e1
  242 D1:E520 CB 73 -  -      bit 6,e
  243 D1:E522 28 04 -  -      jr  z,+_
  244 D1:E524 07 -  -  -      rlca    ;If not zero, shift upper nibble into lower nibble
  245 D1:E525 07 -  -  -      rlca    ;for further selection.
  246 D1:E526 07 -  -  -      rlca
  247 D1:E527 07 -  -  -      rlca
  248 D1:E528 CB 4B -  -  _:  bit 1,e
  249 D1:E52A 20 02 -  -      jr  nz,+_   ;If not zero, upper 2 bits of lower nibble already in position
  250 D1:E52C 07 -  -  -      rlca        ;Otherwise, move them into position
  251 D1:E52D 07 -  -  -      rlca        
  252 D1:E52E E6 0C -  -  _:  and a,%00001100
  253 D1:E530 32 62 E5 D1     ld  (ppu_mainTileLoop_attribute_write),a
  254 D1:E534 -  -  -  -  
  255 D1:E534 DD 36 F8 1E     ld  (ix+PPU_VCOUNT),30
  256 D1:E538 FD 2A 28 34 
              D0 -  -  -      ld  iy,(curScreenBuf)
  257 D1:E53D ED 33 20 -      lea iy,iy+32
  258 D1:E540 -  -  -  -  ppu_verticalLoop:
  259 D1:E540 DD 36 F9 20     ld  (ix+PPU_HCOUNT),32
  260 D1:E544 -  -  -  -  ppu_horizontalLoop:
  261 D1:E544 1A -  -  -      ld  a,(de)
  262 D1:E545 E5 -  -  -      push hl
  263 D1:E546 D5 -  -  -          push de
  264 D1:E547 2A 20 34 D0             ld  hl,(chr_rom_tiles)
  265 D1:E54B 4F -  -  -              ld  c,a
  266 D1:E54C 06 10 -  -              ld  b,16
  267 D1:E54E ED 4C -  -              mlt bc
  268 D1:E550 09 -  -  -              add hl,bc
  269 D1:E551 DD 36 FA 08             ld  (ix+PPU_TCOUNT),8
  270 D1:E555 ED 13 00 -              lea de,iy+0
  271 D1:E558 -  -  -  -  ppu_mainTileLoop:
  272 D1:E558 4E -  -  -              ld  c,(hl)
  273 D1:E559 23 -  -  -              inc hl
  274 D1:E55A 46 -  -  -              ld  b,(hl)
  275 D1:E55B 23 -  -  -              inc hl
  276 D1:E55C E5 -  -  -              push hl
  277 D1:E55D 21 00 32 D0                 ld  hl,vram_palette
  278 D1:E561 -  -  -  -  ppu_mainTileLoop_attribute_write    .equ $+1
  279 D1:E561 3E 00 -  -                  ld  a,0
  280 D1:E563 -  -  -  -                  ;Attrib to LSB of VRAM_PALETTE, shift CHR_ROM data to LSB to
  281 D1:E563 -  -  -  -                  ;form full address+offset. Copy from palette to buffer.
  282 D1:E563 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;1/8 12b apiece
  283 D1:E56F 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;2/8
  284 D1:E57B 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;3/8
  285 D1:E587 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;4/8
  286 D1:E593 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;5/8
  287 D1:E59F 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;6/8
  288 D1:E5AB 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;7/8
  289 D1:E5B7 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;8/8 96b tot
  290 D1:E5C3 21 38 01 00                 ld  hl,320-8
  291 D1:E5C7 19 -  -  -                  add hl,de
  292 D1:E5C8 EB -  -  -                  ex  de,hl
  293 D1:E5C9 E1 -  -  -              pop hl
  294 D1:E5CA DD 35 FA -              dec (ix+PPU_TCOUNT)
  295 D1:E5CD 20 89 -  -              jr  nz,ppu_mainTileLoop
  296 D1:E5CF -  -  -  -              ;start wrapping up the horizontal loop
  297 D1:E5CF D1 -  -  -          pop de
  298 D1:E5D0 E1 -  -  -      pop hl
  299 D1:E5D1 7B -  -  -      ld  a,e
  300 D1:E5D2 13 -  -  -      inc de
  301 D1:E5D3 AB -  -  -      xor a,e
  302 D1:E5D4 CB 6F -  -      bit 5,a     ;A carry in X would result in a change in bit 5
  303 D1:E5D6 28 14 -  -      jr  z,+_    ;Which means there's no crossover if no sign change
  304 D1:E5D8 1B -  -  -      dec de      ;revert those changes in case they cascaded past E
  305 D1:E5D9 1C -  -  -      inc e
  306 D1:E5DA E6 E0 -  -      and a,%11100000     ;The funny thing is that the XOR above...
  307 D1:E5DC AB -  -  -      xor a,e             ;... is still valid for this masking technique.
  308 D1:E5DD 4F -  -  -      ld  c,a     ;And now let's squirrel this and...
  309 D1:E5DE 42 -  -  -      ld  b,d     ;...D for later merge magic
  310 D1:E5DF 7C -  -  -      ld  a,h
  311 D1:E5E0 EE 04 -  -      xor a,%00000100 ;flip to the next horizontal buffer...
  312 D1:E5E2 67 -  -  -      ld  h,a
  313 D1:E5E3 ED 17 -  -      ld  de,(hl)
  314 D1:E5E5 59 -  -  -      ld  e,c
  315 D1:E5E6 78 -  -  -      ld  a,b
  316 D1:E5E7 AA -  -  -      xor d
  317 D1:E5E8 E6 03 -  -      and a,%00000011
  318 D1:E5EA AA -  -  -      xor d
  319 D1:E5EB 57 -  -  -      ld  d,a         ;and map coords into a new nametable
  320 D1:E5EC ED 33 08 -  _:  lea iy,iy+8     ;next position on the buffer.
  321 D1:E5EF DD 35 F9 -      dec (ix+PPU_HCOUNT)
  322 D1:E5F2 C2 44 E5 D1     jp  nz,ppu_horizontalLoop
  323 D1:E5F6 -  -  -  -      ;the X buffer *will* have changed at some point and rolled around
  324 D1:E5F6 -  -  -  -      ;so there's no need to deal with X. Still gotta do Y first...
  325 D1:E5F6 EB -  -  -      ex  de,hl
  326 D1:E5F7 7C -  -  -      ld  a,h
  327 D1:E5F8 01 20 00 00     ld  bc,%00100000
  328 D1:E5FC 09 -  -  -      add hl,bc   ;%-----^yy yYyxxxXx
  329 D1:E5FD EB -  -  -      ex  de,hl
  330 D1:E5FE 4B -  -  -      ld  c,e     ;coordinate storage.
  331 D1:E5FF 42 -  -  -      ld  b,d
  332 D1:E600 AA -  -  -      xor a,d     ;detect sign change in bit 2
  333 D1:E601 CB 57 -  -      bit 2,a
  334 D1:E603 28 04 -  -      jr  z,+_
  335 D1:E605 7D -  -  -      ld  a,L
  336 D1:E606 EE 08 -  -      xor a,%00001000 ;flip to the next vertical buffer...
  337 D1:E608 6F -  -  -      ld  L,a
  338 D1:E609 7D -  -  -  _:  ld  a,L
  339 D1:E60A EE 04 -  -      xor a,%00000100 ;flip back the horizontal buffer that must've been flipped.
  340 D1:E60C 6F -  -  -      ld  L,a
  341 D1:E60D ED 17 -  -      ld  de,(hl)
  342 D1:E60F 59 -  -  -      ld  e,c
  343 D1:E610 78 -  -  -      ld  a,b
  344 D1:E611 AA -  -  -      xor d
  345 D1:E612 E6 03 -  -      and a,%00000011
  346 D1:E614 AA -  -  -      xor d
  347 D1:E615 57 -  -  -      ld  d,a         ;and map coords into a new nametable
  348 D1:E616 01 00 09 00     ld  bc,(320*7)+(320-256)
  349 D1:E61A FD 09 -  -      add iy,bc       ;move cursor pointer to the next row
  350 D1:E61C DD 35 F8 -      dec (ix+PPU_VCOUNT)
  351 D1:E61F C2 40 E5 D1     jp  nz,ppu_verticalLoop
  352 D1:E623 C9 -  -  -      ret
  353 D1:E624 -  -  -  -  
  354 D1:E624 -  -  -  -  ;TODO: Test changes to the PPU and link together something in the mapper
  355 D1:E624 -  -  -  -  ;to perform controls. Also. Those freakin' interrupts. DO THEM.
  356 D1:E624 -  -  -  -  ;Might also want to implement a drawlist of sorts since writes to the ports
  357 D1:E624 -  -  -  -  ;ought to be timestamped. That way, we'll be able to tell what the hell is
  358 D1:E624 -  -  -  -  ;being done mid-frame and then make adjustments to such things as
  359 D1:E624 -  -  -  -  ;BG rendering mid-draw, if necessary. Or be able to detect such attempts as
  360 D1:E624 -  -  -  -  ;I don't think I want to deal with that. Only deal with stuff that should
  361 D1:E624 -  -  -  -  ;be occurring within the VBlank period.
  362 D1:E624 -  -  -  -  
  363 D1:E624 -  -  -  -  
  364 D1:E624 -  -  -  -  
  365 D1:E624 -  -  -  -  
  366 D1:E624 -  -  -  -  
  367 D1:E624 -  -  -  -  
  368 D1:E624 -  -  -  -  
  369 D1:E624 -  -  -  -  
  370 D1:E624 -  -  -  -  
  371 D1:E624 -  -  -  -  
  372 D1:E624 -  -  -  -  
Listing for file "main.z80"
  820 D1:E624 -  -  -  -  .echo "Main program size: ",$-programStart
