    1 00:0000 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "main.z80"
    2 00:0000 -  -  -  -  .org userMem-2
    3 D1:A87F EF 7B -  -  .db $EF, $7B
    4 D1:A881 -  -  -  -  
    5 D1:A881 -  -  -  -  ;SPASM help msg
    6 D1:A881 -  -  -  -  ;-E = Assemble eZ80 code
    7 D1:A881 -  -  -  -  ;-T = Generate code listing
    8 D1:A881 -  -  -  -  ;-C = Code counter mode
    9 D1:A881 -  -  -  -  ;-L = Symbol table mode
   10 D1:A881 -  -  -  -  ;-S = Stats mode
   11 D1:A881 -  -  -  -  ;-O = Don't write to output file
   12 D1:A881 -  -  -  -  ;-I [directory] = Add include directory
   13 D1:A881 -  -  -  -  ;-A = Labels are cAse-sensitive
   14 D1:A881 -  -  -  -  ;-D<name>[=value] = Create a define 'name' [with 'value']
   15 D1:A881 -  -  -  -  ;-N = Don't use colors for messages
   16 D1:A881 -  -  -  -  ;-V <Expression> = Pipe expression directly into assembly
   17 D1:A881 -  -  -  -  ;-H = Print this help message
   18 D1:A881 -  -  -  -  
   19 D1:A881 -  -  -  -  
   20 D1:A881 -  -  -  -  
   21 D1:A881 -  -  -  -  
   22 D1:A881 -  -  -  -  programStart:
   23 D1:A881 F3 -  -  -      di
   24 D1:A882 DD 21 00 00 
              F0 -  -  -      ld  ix,$F00000
   25 D1:A887 DD CB 2C C6     set 0,(ix+$2C)      ;Enable ON latch
   26 D1:A88B DD 36 28 01     ld  (ix+$28),1      ;If latch was set, clear it.
   27 D1:A88F -  -  -  -  
   28 D1:A88F -  -  -  -      ;Continuous. Else it'd be possible for an NES ROM to tank the CPU
   29 D1:A88F -  -  -  -      ;performance by constantly polling the keyboard.
   30 D1:A88F 21 00 00 F5     ld  hl,mpKeyMode
   31 D1:A893 36 03 -  -      ld  (hl),3      
   32 D1:A895 ED 73 FC 31 
              D0 -  -  -      ld  (save_spl),sp
   33 D1:A89A ED 6E -  -      ld  a,MB
   34 D1:A89C 32 FF 31 D0     ld  (save_mbase),a
   35 D1:A8A0 3E D0 -  -      ld  a,$D0
   36 D1:A8A2 ED 6D -  -      ld  MB,a
   37 D1:A8A4 CD CE B0 D1     call startGfx
   38 D1:A8A8 -  -  -  -  
   39 D1:A8A8 -  -  -  -  
   40 D1:A8A8 -  -  -  -  
   41 D1:A8A8 -  -  -  -  
   42 D1:A8A8 -  -  -  -  
   43 D1:A8A8 -  -  -  -  
   44 D1:A8A8 -  -  -  -  
   45 D1:A8A8 -  -  -  -  
   46 D1:A8A8 -  -  -  -  
   47 D1:A8A8 -  -  -  -  
   48 D1:A8A8 -  -  -  -  
   49 D1:A8A8 -  -  -  -      ;
   50 D1:A8A8 -  -  -  -      ; todo; write test 6502 program, map it into rom.
   51 D1:A8A8 -  -  -  -      ; map virtual screen device into ram too. 32x30 screen ascii display
   52 D1:A8A8 -  -  -  -      ; is probably looking nice right about now.
   53 D1:A8A8 -  -  -  -      ; Could probably map it into PPU space since we're not actually doing
   54 D1:A8A8 -  -  -  -      ; anything about that until long after we're done testing core integrity
   55 D1:A8A8 -  -  -  -      ; You'll probably want to create a mockup vector table then do some equate
   56 D1:A8A8 -  -  -  -      ; magic to offset it and map it to $FFXX such that the three vectors will
   57 D1:A8A8 -  -  -  -      ; magically line up with $FFFA-$FFFF. NMI, RES, and IRQ. In that order.
   58 D1:A8A8 -  -  -  -      ; The rest of the page won't need to matter. It could literally be the
   59 D1:A8A8 -  -  -  -      ; surrounding eZ80 data/code. Just... don't allow writes to it.
   60 D1:A8A8 -  -  -  -      ;
   61 D1:A8A8 -  -  -  -  
   62 D1:A8A8 21 00 00 D4     ld  hl,screenBuf1
   63 D1:A8AC 11 01 00 D4     ld  de,screenBuf1+1
   64 D1:A8B0 01 FF 57 02     ld  bc,(2*240*320)-1
   65 D1:A8B4 36 00 -  -      ld  (hl),$00
   66 D1:A8B6 ED B0 -  -      ldir
   67 D1:A8B8 -  -  -  -  
   68 D1:A8B8 -  -  -  -      ;Makes sure all non-ROM areas have a mapping
   69 D1:A8B8 21 00 33 D0     ld  hl,scrap_mapping
   70 D1:A8BC 01 01 80 00     ld  bc,$008001
   71 D1:A8C0 1E 00 -  -      ld  e,0
   72 D1:A8C2 CD 86 B7 D1     call i6502_map_pages
   73 D1:A8C6 -  -  -  -  
   74 D1:A8C6 -  -  -  -  
   75 D1:A8C6 -  -  -  -  
   76 D1:A8C6 -  -  -  -      ;load reset vectors
   77 D1:A8C6 21 D1 A8 D1     ld  hl,testVectors
   78 D1:A8CA 01 01 01 00     ld  bc,$000101
   79 D1:A8CE 1E FF -  -      ld  e,$FF
   80 D1:A8D0 CD 86 B7 D1     call i6502_map_pages
   81 D1:A8D4 -  -  -  -      ;load program ROM to lowmem
   82 D1:A8D4 21 D1 A9 D1     ld  hl,testCode
   83 D1:A8D8 01 08 20 00     ld  bc,$002008
   84 D1:A8DC 1E 80 -  -      ld  e,$80
   85 D1:A8DE CD 86 B7 D1     call i6502_map_pages
   86 D1:A8E2 -  -  -  -      ;map nametable to writeable address space. Write routine to mirror this
   87 D1:A8E2 -  -  -  -      ;memory to screen.
   88 D1:A8E2 21 00 58 D0     ld  hl,NAMETABLE1
   89 D1:A8E6 01 04 20 00     ld  bc,$002004
   90 D1:A8EA 1E 40 -  -      ld  e,$40
   91 D1:A8EC CD 86 B7 D1     call i6502_map_pages
   92 D1:A8F0 -  -  -  -      ;Default mappings have been mapped. Let's search for and load a ROM file
   93 D1:A8F0 -  -  -  -      ;to acquire additional mappings. And maybe load in something that'll run.
   94 D1:A8F0 CD 21 B1 D1     call clearTextBuf
   95 D1:A8F4 3E 01 -  -      ld  a,1
   96 D1:A8F6 CD 6E B1 D1     call setLineStart
   97 D1:A8FA CD 77 B1 D1     call setCurLine
   98 D1:A8FE 21 2A AA D1     ld  hl,text001
   99 D1:A902 CD 99 B1 D1     call printString
  100 D1:A906 FD 21 A1 AA 
              D1 -  -  -      ld  iy,firstFileHeader
  101 D1:A90B 01 00 00 00     ld  bc,0
  102 D1:A90F FD 4E FF -      ld  c,(iy-1)
  103 D1:A912 CD 1C B0 D1     call vatTraverse
  104 D1:A916 DA BE AA D1     jp  c,err_noContainersFound
  105 D1:A91A D5 -  -  -      push de
  106 D1:A91B 21 4A AA D1         ld  hl,text003
  107 D1:A91F CD 99 B1 D1         call printString
  108 D1:A923 DD 46 FA -          ld  b,(ix-6)
  109 D1:A926 ED 22 F9 -          lea hl,ix-7
  110 D1:A929 7E -  -  -  _:      ld  a,(hl)
  111 D1:A92A 2B -  -  -          dec hl
  112 D1:A92B E5 -  -  -          push hl
  113 D1:A92C C5 -  -  -              push bc
  114 D1:A92D CD AF B1 D1                 call PrintBigFont
  115 D1:A931 C1 -  -  -              pop bc
  116 D1:A932 E1 -  -  -          pop hl
  117 D1:A933 10 F4 -  -          djnz -_
  118 D1:A935 CD 82 B1 D1         call newLine
  119 D1:A939 D1 -  -  -      pop de
  120 D1:A93A CD 18 AC D1     call loadROMFile
  121 D1:A93E -  -  -  -  
  122 D1:A93E 21 57 AA D1     ld  hl,text004
  123 D1:A942 CD 99 B1 D1     call printString
  124 D1:A946 -  -  -  -  
  125 D1:A946 -  -  -  -      ;load perf timers
  126 D1:A946 -  -  -  -  
  127 D1:A946 DD 21 00 00 
              F2 -  -  -      ld  ix,$F20000
  128 D1:A94B DD 27 30 -      ld  hl,(ix+$30)
  129 D1:A94E CB 85 -  -      res 0,L ;turn off timer 0
  130 D1:A950 CB CD -  -      set 1,L ;timer 0 uses 32KHz clock
  131 D1:A952 CB 95 -  -      res 2,L ;disables timer 0 interrupt generator
  132 D1:A954 CB CC -  -      set 1,H ;timer 0 counts upward
  133 D1:A956 DD 2F 30 -      ld  (ix+$30),hl
  134 D1:A959 -  -  -  -      
  135 D1:A959 AF -  -  -      xor a,a
  136 D1:A95A ED 62 -  -      sbc hl,hl
  137 D1:A95C DD 2F 00 -      ld  (ix+0),hl
  138 D1:A95F DD 77 03 -      ld  (ix+3),a
  139 D1:A962 -  -  -  -  
  140 D1:A962 -  -  -  -      ;Initialize all (additional) state machines,
  141 D1:A962 -  -  -  -      ;then initialize/start the emulation core
  142 D1:A962 -  -  -  -  
  143 D1:A962 CD B4 B5 D1     call int6502_init
  144 D1:A966 CD 13 E6 D1     call ppu_init
  145 D1:A96A CD 79 B6 D1     call i6502Init
  146 D1:A96E -  -  -  -  
  147 D1:A96E -  -  -  -      ;Performance timer disable and read.
  148 D1:A96E -  -  -  -  
  149 D1:A96E DD 21 00 00 
              F2 -  -  -      ld  ix,$F20000
  150 D1:A973 DD 7E 30 -      ld  a,(ix+$30)
  151 D1:A976 CB 87 -  -      res 0,a ;turn off timer 0
  152 D1:A978 CB CF -  -      set 1,a ;timer 0 uses 32768Hz clock
  153 D1:A97A CB 97 -  -      res 2,a ;disables timer 0 interrupt generator
  154 D1:A97C DD 77 30 -      ld  (ix+$30),a
  155 D1:A97F -  -  -  -      ;
  156 D1:A97F 2A 00 00 F2     ld  hl,($F20000)
  157 D1:A983 -  -  -  -  
  158 D1:A983 -  -  -  -  endCurrentRun:
  159 D1:A983 -  -  -  -      ;call dbg_prepNextLine
  160 D1:A983 -  -  -  -      ;call newLine
  161 D1:A983 21 79 AA D1     ld  hl,text005
  162 D1:A987 CD 99 B1 D1     call printString
  163 D1:A98B -  -  -  -  
  164 D1:A98B -  -  -  -      ;call printTextBuf
  165 D1:A98B CD A5 B0 D1     call fastCopy
  166 D1:A98F -  -  -  -  
  167 D1:A98F DD 21 00 00 
              F0 -  -  -  _:  ld  ix,$F00000
  168 D1:A994 DD 36 28 01     ld  (ix+$28),1      ;If latch was set, clear it.
  169 D1:A998 DD 7E 20 -      ld  a,(ix+$20)      ;Check state of latch.
  170 D1:A99B E6 01 -  -      and a,%00000001
  171 D1:A99D C2 8F A9 D1     jp  nz,-_           ;wait until ON key is released.
  172 D1:A9A1 DD 21 00 00 
              F0 -  -  -      ld  ix,$F00000
  173 D1:A9A6 DD CB 2C 86     res 0,(ix+$2C)      ;Disable ON latch
  174 D1:A9AA DD 36 28 01     ld  (ix+$28),1      ;If latch was set, clear it.
  175 D1:A9AE -  -  -  -  
  176 D1:A9AE -  -  -  -  ;    nop
  177 D1:A9AE CD 99 B0 D1     call waituntilnewkeypress
  178 D1:A9B2 CD 91 B0 D1     call waituntilkeyrelease
  179 D1:A9B6 -  -  -  -  
  180 D1:A9B6 -  -  -  -      ;
  181 D1:A9B6 -  -  -  -      ;
  182 D1:A9B6 -  -  -  -      ;
  183 D1:A9B6 -  -  -  -  programExit:
  184 D1:A9B6 CD C0 B0 D1     call stopGfx
  185 D1:A9BA ED 7B FC 31 
              D0 -  -  -      ld  sp,(save_spl)
  186 D1:A9BF 3A FF 31 D0     ld  a,(save_mbase)
  187 D1:A9C3 ED 6D -  -      ld  MB,a
  188 D1:A9C5 FD 21 80 00 
              D0 -  -  -      ld  iy,flags
  189 D1:A9CA C9 -  -  -      ret
  190 D1:A9CB -  -  -  -  
  191 D1:A9CB -  -  -  -  ;NMI, RES, and IRQ. In that order.
  192 D1:A9CB -  -  -  -  testVectors .equ $-(256-6)
  193 D1:A9CB 00 80 -  -  .dw $8000
  194 D1:A9CD 00 80 -  -  .dw $8000
  195 D1:A9CF 00 80 -  -  .dw $8000
  196 D1:A9D1 -  -  -  -  testCode:
  197 D1:A9D1 A9 00 AA A8 .db $A9,$00,$AA,$A8
  198 D1:A9D5 BD 14 80 -  .db $BD,$14,$80
  199 D1:A9D8 C9 00 -  -  .db $C9,$00
  200 D1:A9DA F0 08 -  -  .db $F0,$08
  201 D1:A9DC 99 21 40 -  .db $99,$21,$40
  202 D1:A9DF E8 C8 -  -  .db $E8,$C8
  203 D1:A9E1 -  -  -  -  ;.db $12
  204 D1:A9E1 4C 04 80 02 .db $4C,$04,$80,$02
  205 D1:A9E5 48 65 6C 6C 
              6F 2C 20 57 
              6F -  -  -  .db $48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F
  206 D1:A9EE 72 6C 64 21 
              00 -  -  -  .db $72,$6C,$64,$21,$00
  207 D1:A9F3 -  -  -  -  
  208 D1:A9F3 -  -  -  -  
  209 D1:A9F3 A9 00 AA A8 
              BD 11 80 C9 
              00 F0 05 99 
              21 40 D0 -  .db $A9,$00,$AA,$A8,$BD,$11,$80,$C9,$00,$F0,$05,$99,$21,$40,$D0
  210 D1:AA02 F4 02 48 65 
              6C 6C 6F 2C 
              20 57 6F 72 
              6C 64 21 00 .db $F4,$02,$48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F,$72,$6C,$64,$21,$00
  211 D1:AA12 02 -  -  -  .db $02     ;JAM. Emulator terminates on unsupported instructions or JAMs.
  212 D1:AA13 -  -  -  -  
  213 D1:AA13 -  -  -  -  helloWorld:
  214 D1:AA13 48 65 6C 6C 
              6F 2C 20 57 
              6F 72 6C 64 
              21 00 -  -  .db "Hello, World!",0
  215 D1:AA21 -  -  -  -  
  216 D1:AA21 -  -  -  -  timings_file:
  217 D1:AA21 15 74 69 6D 
              69 6E 67 73 
              00 -  -  -  .db AppVarObj,"timings",0
  218 D1:AA2A -  -  -  -  
  219 D1:AA2A -  -  -  -  text001:
  220 D1:AA2A 4C 6F 6F 6B 
              69 6E 67 20 
              75 70 20 6E 
              65 61 72 65 
              73 74 20 52 
              4F 4D 20 66 
              69 6C 65 2E 
              2E 2E 0A 00 .db "Looking up nearest ROM file...\n",0
  221 D1:AA4A -  -  -  -  text003:
  222 D1:AA4A 46 69 6C 65 
              20 66 6F 75 
              6E 64 3A 20 
              00 -  -  -  .db "File found: ",0
  223 D1:AA57 -  -  -  -  text004:
  224 D1:AA57 52 4F 4D 46 
              69 6C 65 20 
              6C 6F 61 64 
              65 64 20 61 
              6E 64 20 72 
              65 61 64 79 
              20 74 6F 20 
              72 75 6E 2E 
              0A 00 -  -  .db "ROMFile loaded and ready to run.\n",0
  225 D1:AA79 -  -  -  -  text005:
  226 D1:AA79 -  -  -  -  ;    0123456789012345678901234567890123456789
  227 D1:AA79 43 50 55 20 
              45 78 65 63 
              75 74 69 6F 
              6E 20 48 61 
              6C 74 65 64 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 00 -  .db "CPU Execution Halted                  ",0
  228 D1:AAA0 -  -  -  -  text006:
  229 D1:AAA0 -  -  -  -  
  230 D1:AAA0 -  -  -  -  
  231 D1:AAA0 07 -  -  -  .db 7
  232 D1:AAA1 -  -  -  -  firstFileHeader:
  233 D1:AAA1 43 45 4E 52 
              4F 4D 00 -  .db "CENROM",0
  234 D1:AAA8 -  -  -  -  
  235 D1:AAA8 -  -  -  -  err_:
  236 D1:AAA8 -  -  -  -  
  237 D1:AAA8 -  -  -  -  err_err:
  238 D1:AAA8 E1 -  -  -      pop hl
  239 D1:AAA9 CD 99 B1 D1     call printString
  240 D1:AAAD -  -  -  -  err_err_quit:
  241 D1:AAAD CD A5 B0 D1     call fastCopy
  242 D1:AAB1 00 -  -  -      nop
  243 D1:AAB2 CD 99 B0 D1     call waituntilnewkeypress
  244 D1:AAB6 CD 91 B0 D1     call waituntilkeyrelease
  245 D1:AABA C3 B6 A9 D1     jp programExit
  246 D1:AABE -  -  -  -  
  247 D1:AABE -  -  -  -  err_noContainersFound:
  248 D1:AABE CD A8 AA D1     call err_err
  249 D1:AAC2 -  -  -  -      ;0123456789012345678901234567890123456789
  250 D1:AAC2 54 72 61 76 
              65 72 73 65 
              20 66 6F 75 
              6E 64 20 6E 
              6F 20 63 61 
              6E 64 69 64 
              61 74 65 20 
              52 4F 4D 53 
              2E 0A 00 -  .db "Traverse found no candidate ROMS.\n",0
  251 D1:AAE5 -  -  -  -  
  252 D1:AAE5 -  -  -  -  err_missingFiles:
  253 D1:AAE5 F5 -  -  -      push af
  254 D1:AAE6 21 F7 AA D1         ld  hl,err_missingFiles_str
  255 D1:AAEA CD 99 B1 D1         call printString
  256 D1:AAEE F1 -  -  -      pop af
  257 D1:AAEF CD DF B1 D1     call printSmallNumPair
  258 D1:AAF3 C3 AD AA D1     jp err_err_quit
  259 D1:AAF7 -  -  -  -  err_missingFiles_str:
  260 D1:AAF7 4E 75 6D 62 
              65 72 20 6F 
              66 20 66 69 
              6C 65 73 20 
              6D 69 73 73 
              69 6E 67 3A 
              20 00 -  -  .db "Number of files missing: ",0
  261 D1:AB11 -  -  -  -  
  262 D1:AB11 -  -  -  -  err_tooManyFiles:
  263 D1:AB11 CD A8 AA D1     call err_err
  264 D1:AB15 -  -  -  -      ;0123456789012345678901234567890123456789
  265 D1:AB15 4D 61 78 20 
              66 69 6C 65 
              20 63 6F 75 
              6E 74 20 70 
              65 72 20 52 
              4F 4D 20 69 
              6D 61 67 65 
              20 65 78 63 
              65 65 64 65 
              64 2E 00 -  .db "Max file count per ROM image exceeded.",0
  266 D1:AB3C -  -  -  -  
  267 D1:AB3C -  -  -  -  err_PRGROMTooLarge:
  268 D1:AB3C CD A8 AA D1     call err_err
  269 D1:AB40 4D 61 78 69 
              6D 75 6D 20 
              73 75 70 70 
              6F 72 74 65 
              64 20 50 52 
              47 5F 52 4F 
              4D 20 65 78 
              63 65 65 64 
              65 64 2E 00 .db "Maximum supported PRG_ROM exceeded.",0
  270 D1:AB64 -  -  -  -  err_CHRROMTooLarge:
  271 D1:AB64 CD A8 AA D1     call err_err
  272 D1:AB68 4D 61 78 69 
              6D 75 6D 20 
              73 75 70 70 
              6F 72 74 65 
              64 20 43 48 
              52 5F 52 4F 
              4D 20 65 78 
              63 65 65 64 
              65 64 2E 00 .db "Maximum supported CHR_ROM exceeded.",0
  273 D1:AB8C -  -  -  -  
  274 D1:AB8C -  -  -  -  err_missingROMDetected:
  275 D1:AB8C CD A8 AA D1     call err_err
  276 D1:AB90 46 69 6C 65 
              20 74 6F 6F 
              20 73 6D 61 
              6C 6C 20 74 
              6F 20 68 6F 
              6C 64 20 64 
              65 63 6C 61 
              72 65 64 20 
              50 52 47 2B 
              43 48 52 00 .db "File too small to hold declared PRG+CHR",0
  277 D1:ABB8 -  -  -  -  
  278 D1:ABB8 -  -  -  -  err_ROMHeaderDamaged:
  279 D1:ABB8 CD A8 AA D1     call err_err
  280 D1:ABBC 69 4E 45 53 
              20 52 4F 4D 
              20 68 65 61 
              64 65 72 20 
              64 61 6D 61 
              67 65 64 2E 
              00 -  -  -  .db "iNES ROM header damaged.",0
  281 D1:ABD5 -  -  -  -  
  282 D1:ABD5 -  -  -  -  err_MapperOutOfRange:
  283 D1:ABD5 CD A8 AA D1     call err_err
  284 D1:ABD9 55 6E 73 75 
              70 70 6F 72 
              74 65 64 20 
              6D 61 70 70 
              65 72 20 64 
              65 74 65 63 
              74 65 64 2E 
              00 -  -  -  .db "Unsupported mapper detected.",0
  285 D1:ABF6 -  -  -  -  
  286 D1:ABF6 -  -  -  -  err_CHRROMNotFound:
  287 D1:ABF6 CD A8 AA D1     call err_err
  288 D1:ABFA 43 48 52 5F 
              52 4F 4D 20 
              6E 6F 74 20 
              66 6F 75 6E 
              64 20 69 6E 
              73 69 64 65 
              20 66 69 6C 
              65 00 -  -  .db "CHR_ROM not found inside file",0
  289 D1:AC18 -  -  -  -  
  290 D1:AC18 -  -  -  -  
  291 D1:AC18 -  -  -  -  ;Input: DE = Address of first file after the container header signature
  292 D1:AC18 -  -  -  -  ;Outputs: ROM vectors recorded and ready to map
  293 D1:AC18 -  -  -  -  ;Destroys: All registers.
  294 D1:AC18 -  -  -  -  loadROMFile:
  295 D1:AC18 EB -  -  -      ex  de,hl
  296 D1:AC19 AF -  -  -      xor a,a
  297 D1:AC1A 32 33 34 D0     ld  (missing_files),a
  298 D1:AC1E BE -  -  -  _:  cp  (hl)    ;
  299 D1:AC1F 23 -  -  -      inc hl      ;
  300 D1:AC20 20 FC -  -      jr  nz,-_   ;skips past zero-terminated string containing full ROM name
  301 D1:AC22 22 30 34 D0     ld  (basefile_sig),hl
  302 D1:AC26 01 10 00 00     ld  bc,SIZEOF_INTEGRITY_HASH
  303 D1:AC2A 09 -  -  -      add hl,bc
  304 D1:AC2B 7E -  -  -      ld  a,(hl)
  305 D1:AC2C FE 01 -  -      cp  a,MAXNUMFILES
  306 D1:AC2E D2 11 AB D1     jp  nc,err_tooManyFiles
  307 D1:AC32 32 2F 34 D0     ld  (inputNumFiles),a
  308 D1:AC36 47 -  -  -      ld  b,a
  309 D1:AC37 -  -  -  -  ;    ld  c,SIZEOF_INTEGRITY_HASH     ;c already set to this value from earlier.
  310 D1:AC37 ED 4C -  -      mlt bc
  311 D1:AC39 23 -  -  -      inc hl
  312 D1:AC3A E5 -  -  -      push hl
  313 D1:AC3B 09 -  -  -          add hl,bc
  314 D1:AC3C FD 21 50 34 
              D0 -  -  -          ld  iy,FILETABLE
  315 D1:AC41 4E -  -  -          ld  c,(hl)
  316 D1:AC42 23 -  -  -          inc hl
  317 D1:AC43 46 -  -  -          ld  b,(hl)
  318 D1:AC44 23 -  -  -          inc hl
  319 D1:AC45 52 FD 0F 00         ld.s (iy+FILE_SIZE_OFFSET),bc
  320 D1:AC49 FD 2F 02 -          ld  (iy+FILE_ADR_OFFSET),hl
  321 D1:AC4C E1 -  -  -      pop hl
  322 D1:AC4D 3C -  -  -      inc a
  323 D1:AC4E 3D -  -  -      dec a
  324 D1:AC4F 28 47 -  -      jr  z,loadROMFile_singleFileLoad
  325 D1:AC51 -  -  -  -      ;If more than one file, fill FILETABLE.
  326 D1:AC51 -  -  -  -      ;NOTE: For now, this machinery is disabled. Only a single file is allowed.
  327 D1:AC51 ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  328 D1:AC54 47 -  -  -      ld  b,a
  329 D1:AC55 -  -  -  -  loadROMFile_multiFileLoadLoop:
  330 D1:AC55 C5 -  -  -      push bc
  331 D1:AC56 FD 2F 05 -          ld  (iy+FILE_SIG_ADR_OFFSET),hl
  332 D1:AC59 01 10 00 00         ld  bc,16
  333 D1:AC5D 11 0C B0 D1         ld  de,loadROMFile_tempSigHash
  334 D1:AC61 ED B0 -  -          ldir
  335 D1:AC63 E5 -  -  -          push hl
  336 D1:AC64 FD E5 -  -              push iy
  337 D1:AC66 01 17 00 00                 ld  bc,23
  338 D1:AC6A FD 21 05 B0 
              D1 -  -  -                  ld  iy,loadROMFile_tempSig
  339 D1:AC6F CD 1C B0 D1                 call vatTraverse    ;returns DE @ datasection size if found
  340 D1:AC73 30 05 -  -                  jr  nc,+_
  341 D1:AC75 21 33 34 D0                 ld  hl,missing_files
  342 D1:AC79 34 -  -  -                  inc (hl)
  343 D1:AC7A FD E1 -  -  _:          pop iy
  344 D1:AC7C EB -  -  -              ex  de,hl
  345 D1:AC7D 5E -  -  -              ld  e,(hl)
  346 D1:AC7E 23 -  -  -              inc hl
  347 D1:AC7F 56 -  -  -              ld  d,(hl)
  348 D1:AC80 23 -  -  -              inc hl
  349 D1:AC81 52 FD 1F 00             ld.s (iy+FILE_SIZE_OFFSET),de
  350 D1:AC85 FD 2F 02 -              ld  (iy+FILE_ADR_OFFSET),hl
  351 D1:AC88 E1 -  -  -          pop hl
  352 D1:AC89 C1 -  -  -      pop bc
  353 D1:AC8A ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  354 D1:AC8D 10 C6 -  -      djnz loadROMFile_multiFileLoadLoop
  355 D1:AC8F 3A 33 34 D0     ld  a,(missing_files)
  356 D1:AC93 B7 -  -  -      or  a,a
  357 D1:AC94 C2 E5 AA D1     jp  nz,err_missingFiles
  358 D1:AC98 -  -  -  -  loadROMFile_singleFileLoad:
  359 D1:AC98 -  -  -  -      ;Compute size of ROM by summing filesizes, less INES header
  360 D1:AC98 3A 2F 34 D0     ld  a,(inputNumFiles)
  361 D1:AC9C 3C -  -  -      inc a
  362 D1:AC9D 47 -  -  -      ld  b,a
  363 D1:AC9E 21 00 00 00     ld  hl,0
  364 D1:ACA2 DD 21 50 34 
              D0 -  -  -      ld  ix,FILETABLE
  365 D1:ACA7 52 DD 17 00 _:  ld.s de,(ix+FILE_SIZE_OFFSET)
  366 D1:ACAB 19 -  -  -      add hl,de
  367 D1:ACAC ED 32 08 -      lea ix,ix+FILETABLE_STRIDE
  368 D1:ACAF 10 F6 -  -      djnz -_
  369 D1:ACB1 01 F0 FF FF     ld  bc,-16
  370 D1:ACB5 09 -  -  -      add hl,bc   ;subtract INES header
  371 D1:ACB6 22 34 34 D0     ld  (total_rom_size),hl
  372 D1:ACBA -  -  -  -      ;Verify that the file actually contains an INES header.
  373 D1:ACBA -  -  -  -      ;TODO: Do this at an earlier stage. Such as file selection.
  374 D1:ACBA DD 2A 52 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  375 D1:ACBF DD 27 00 -      ld  hl,(ix+0)
  376 D1:ACC2 11 4E 45 53     ld  de,$53454E         ;4E 45 53 == "NES"
  377 D1:ACC6 B7 -  -  -      or  a,a
  378 D1:ACC7 ED 52 -  -      sbc hl,de   ;Note: add does not affect zero flag. Can't test this via -DE
  379 D1:ACC9 C2 B8 AB D1 _:  jp  nz,err_ROMHeaderDamaged
  380 D1:ACCD DD 7E 03 -      ld  a,(ix+3)
  381 D1:ACD0 FE 1A -  -      cp  a,$1A
  382 D1:ACD2 20 F5 -  -      jr  nz,-_   ;19
  383 D1:ACD4 -  -  -  -      ;Compute ROM size by reading INES header. This should be equ or lt above.
  384 D1:ACD4 -  -  -  -      ;Note: The below line is optimized from...
  385 D1:ACD4 DD 2A 52 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  386 D1:ACD9 -  -  -  -      ;... these lines. But the intent might not be perfectly clear. We'll keep
  387 D1:ACD9 -  -  -  -      ;these here just in case there's ever a question about it.
  388 D1:ACD9 -  -  -  -  ;    ld  ix,FILETABLE
  389 D1:ACD9 -  -  -  -  ;    ld  ix,(ix+FILE_ADR_OFFSET)
  390 D1:ACD9 DD 6E 04 -      ld  L,(ix+4)    ;PRG ROM count, low
  391 D1:ACDC DD 5E 05 -      ld  e,(ix+5)    ;CHR ROM count, low
  392 D1:ACDF 26 00 -  -      ld  h,0
  393 D1:ACE1 54 -  -  -      ld  d,h
  394 D1:ACE2 DD 7E 07 -      ld  a,(ix+7)    ;Check for INES2 bits
  395 D1:ACE5 E6 0C -  -      and a,%00001100
  396 D1:ACE7 FE 08 -  -      cp  a,%00001000
  397 D1:ACE9 20 1B -  -      jr  nz,+_
  398 D1:ACEB DD 7E 09 -      ld  a,(ix+9)
  399 D1:ACEE 47 -  -  -      ld  b,a
  400 D1:ACEF E6 0F -  -      and a,$0F
  401 D1:ACF1 FE 02 -  -      cp  a,MAXPRGROM_HINIB+1
  402 D1:ACF3 D2 3C AB D1     jp  nc,err_PRGROMTooLarge
  403 D1:ACF7 67 -  -  -      ld  h,a
  404 D1:ACF8 78 -  -  -      ld  a,b
  405 D1:ACF9 E6 F0 -  -      and a,$F0
  406 D1:ACFB 07 -  -  -      rlca
  407 D1:ACFC 07 -  -  -      rlca
  408 D1:ACFD 07 -  -  -      rlca
  409 D1:ACFE 07 -  -  -      rlca
  410 D1:ACFF FE 04 -  -      cp  a,MAXCHRROM_HINIB+1
  411 D1:AD01 D2 64 AB D1     jp  nc,err_CHRROMTooLarge
  412 D1:AD05 57 -  -  -      ld  d,a
  413 D1:AD06 AF -  -  -  _:  xor a,a
  414 D1:AD07 32 37 34 D0     ld  (prg_rom_size),a
  415 D1:AD0B 32 3A 34 D0     ld  (chr_rom_size),a
  416 D1:AD0F 29 -  -  -      add hl,hl   ;x2
  417 D1:AD10 29 -  -  -      add hl,hl   ;x4
  418 D1:AD11 29 -  -  -      add hl,hl   ;x8
  419 D1:AD12 29 -  -  -      add hl,hl   ;x16
  420 D1:AD13 29 -  -  -      add hl,hl   ;x32
  421 D1:AD14 29 -  -  -      add hl,hl   ;x64
  422 D1:AD15 52 22 38 34 
              D0 -  -  -      ld.s (prg_rom_size+1),hl    ;x64x256
  423 D1:AD1A EB -  -  -      ex  de,hl
  424 D1:AD1B 29 -  -  -      add hl,hl   ;x2
  425 D1:AD1C 29 -  -  -      add hl,hl   ;x4
  426 D1:AD1D 29 -  -  -      add hl,hl   ;x8
  427 D1:AD1E 29 -  -  -      add hl,hl   ;x16
  428 D1:AD1F 29 -  -  -      add hl,hl   ;x32
  429 D1:AD20 52 22 3B 34 
              D0 -  -  -      ld.s (chr_rom_size+1),hl    ;x32x256
  430 D1:AD25 2A 3A 34 D0     ld  hl,(chr_rom_size)
  431 D1:AD29 ED 5B 37 34 
              D0 -  -  -      ld  de,(prg_rom_size)
  432 D1:AD2E 19 -  -  -      add hl,de
  433 D1:AD2F ED 5B 34 34 
              D0 -  -  -      ld  de,(total_rom_size)
  434 D1:AD34 B7 -  -  -      or  a,a
  435 D1:AD35 ED 52 -  -      sbc hl,de   ;declared-actual. declared must be equal to or smaller.
  436 D1:AD37 28 04 -  -      jr  z,+_
  437 D1:AD39 D2 8C AB D1     jp  nc,err_missingROMDetected
  438 D1:AD3D -  -  -  -  _:  ;Find trainer, PRG, and CHR base addresses
  439 D1:AD3D ED 22 10 -      lea hl,ix+16
  440 D1:AD40 22 43 34 D0     ld  (trainer_base),hl   ;whether it exists or not.
  441 D1:AD44 11 00 00 00     ld  de,0
  442 D1:AD48 DD CB 06 56     bit 2,(ix+6)
  443 D1:AD4C 28 04 -  -      jr  z,+_
  444 D1:AD4E 11 00 02 00     ld  de,512
  445 D1:AD52 19 -  -  -  _:  add hl,de
  446 D1:AD53 22 43 34 D0     ld  (prg_rom_base),hl
  447 D1:AD57 FD 21 50 34 
              D0 -  -  -      ld  iy,FILETABLE
  448 D1:AD5C 52 FD 27 00     ld.s hl,(iy+FILE_SIZE_OFFSET)
  449 D1:AD60 B7 -  -  -      or  a,a
  450 D1:AD61 ED 52 -  -      sbc hl,de   ;less possible trainer
  451 D1:AD63 11 10 00 00     ld  de,16
  452 D1:AD67 ED 52 -  -      sbc hl,de   ;less iNES header. Remaining is now size of current file.
  453 D1:AD69 EB -  -  -      ex  de,hl   ;curfilesize is now in DE
  454 D1:AD6A 2A 37 34 D0     ld  hl,(prg_rom_size)   ;keep subtracting filesize from this until carry.
  455 D1:AD6E B7 -  -  -      or  a,a
  456 D1:AD6F ED 52 -  -      sbc hl,de   ;if carry, prg_rom end is inside this file. Undo: HL is offset.
  457 D1:AD71 0E 00 -  -      ld  c,0     ;0th file current
  458 D1:AD73 38 1D -  -      jr  c,loadROMFile_locatedCHRROM
  459 D1:AD75 3A 2F 34 D0     ld  a,(inputNumFiles)
  460 D1:AD79 B7 -  -  -      or  a,a
  461 D1:AD7A 28 12 -  -      jr  z,loadROMFile_noCHRROMFound
  462 D1:AD7C 47 -  -  -      ld  b,a
  463 D1:AD7D ED 33 08 -  _:  lea iy,iy+FILETABLE_STRIDE
  464 D1:AD80 52 ED 5B 00 
              00 00 -  -      ld.s de,(FILE_SIZE_OFFSET)
  465 D1:AD86 0C -  -  -      inc c
  466 D1:AD87 B7 -  -  -      or  a,a
  467 D1:AD88 ED 52 -  -      sbc hl,de   ;
  468 D1:AD8A 38 06 -  -      jr  c,loadROMFile_locatedCHRROM
  469 D1:AD8C 10 EF -  -      djnz -_
  470 D1:AD8E -  -  -  -  loadROMFile_noCHRROMFound:
  471 D1:AD8E C3 F6 AB D1     jp  err_CHRROMNotFound
  472 D1:AD92 -  -  -  -  loadROMFile_locatedCHRROM:
  473 D1:AD92 19 -  -  -      add hl,de       ;Undid subtract. HL is now offset in current file
  474 D1:AD93 FD 17 02 -      ld  de,(iy+FILE_ADR_OFFSET) ;so get address inside that file.
  475 D1:AD96 19 -  -  -      add hl,de
  476 D1:AD97 79 -  -  -      ld  a,c
  477 D1:AD98 22 46 34 D0     ld  (chr_rom_base),hl
  478 D1:AD9C 32 49 34 D0     ld  (chr_rom_base_file),a
  479 D1:ADA0 -  -  -  -      ;Detect mapper and run its initializer
  480 D1:ADA0 DD 7E 06 -      ld  a,(ix+6)
  481 D1:ADA3 DD 46 07 -      ld  b,(ix+7)
  482 D1:ADA6 07 -  -  -      rlca
  483 D1:ADA7 07 -  -  -      rlca
  484 D1:ADA8 07 -  -  -      rlca
  485 D1:ADA9 07 -  -  -      rlca
  486 D1:ADAA A8 -  -  -      xor a,b
  487 D1:ADAB E6 0F -  -      and a,$0F
  488 D1:ADAD A8 -  -  -      xor a,b
  489 D1:ADAE 52 EB -  -      ex.s de,hl  ;clears HLU,DEU
  490 D1:ADB0 5F -  -  -      ld  e,a
  491 D1:ADB1 21 3D 34 D0     ld  hl,submapper
  492 D1:ADB5 36 00 -  -      ld  (hl),0
  493 D1:ADB7 78 -  -  -      ld  a,b
  494 D1:ADB8 E6 0C -  -      and a,%00001100
  495 D1:ADBA FE 08 -  -      cp  a,%00001000
  496 D1:ADBC 3E 00 -  -      ld  a,0
  497 D1:ADBE 20 0E -  -      jr  nz,+_
  498 D1:ADC0 DD 46 08 -      ld  b,(ix+8)
  499 D1:ADC3 78 -  -  -      ld  a,b
  500 D1:ADC4 07 -  -  -      rlca
  501 D1:ADC5 07 -  -  -      rlca
  502 D1:ADC6 07 -  -  -      rlca
  503 D1:ADC7 07 -  -  -      rlca
  504 D1:ADC8 E6 0F -  -      and a,$0F
  505 D1:ADCA 77 -  -  -      ld  (hl),a
  506 D1:ADCB 78 -  -  -      ld  a,b
  507 D1:ADCC E6 0F -  -      and a,$0F
  508 D1:ADCE 57 -  -  -  _:  ld  d,a
  509 D1:ADCF ED 53 3F 34 
              D0 -  -  -      ld  (mapper_id),de
  510 D1:ADD4 21 FF FF FF     ld  hl,-NUMBER_OF_MAPPERS
  511 D1:ADD8 19 -  -  -      add hl,de
  512 D1:ADD9 DA D5 AB D1     jp  c,err_MapperOutOfRange
  513 D1:ADDD ED 62 -  -      sbc hl,hl
  514 D1:ADDF 19 -  -  -      add hl,de               ;hl=de. both are mapper IDs
  515 D1:ADE0 2E 09 -  -      ld  L,MAPPER_STRIDE
  516 D1:ADE2 55 -  -  -      ld  d,L
  517 D1:ADE3 ED 6C -  -      mlt hl                  ;high byte multiply
  518 D1:ADE5 65 -  -  -      ld  h,L
  519 D1:ADE6 2E 00 -  -      ld  L,0
  520 D1:ADE8 ED 5C -  -      mlt de                  ;low byte multiply
  521 D1:ADEA 19 -  -  -      add hl,de               ;This is the best 16bit * 8bit I know to do.
  522 D1:ADEB 11 F7 AD D1     ld  de,mapper_table
  523 D1:ADEF 19 -  -  -      add hl,de
  524 D1:ADF0 22 40 34 D0     ld  (mapper_adr_base),hl
  525 D1:ADF4 ED 27 -  -      ld  hl,(hl)
  526 D1:ADF6 E9 -  -  -      jp  (hl)
  527 D1:ADF7 -  -  -  -  
  528 D1:ADF7 -  -  -  -  mapper_table:   ;entries 9 wide
  529 D1:ADF7 00 AE D1 -  .dl mapper0_init
  530 D1:ADFA 7D AE D1 -  .dl mapper0_read
  531 D1:ADFD 20 AF D1 -  .dl mapper0_write
  532 D1:AE00 -  -  -  -  
  533 D1:AE00 -  -  -  -  mapper0_init:
  534 D1:AE00 -  -  -  -      ;map trainer, if exist
  535 D1:AE00 DD CB 06 56     bit 2,(ix+6)
  536 D1:AE04 28 0D -  -      jr  z,+_
  537 D1:AE06 2A 43 34 D0     ld  hl,(trainer_base)
  538 D1:AE0A 1E 70 -  -      ld  e,$70
  539 D1:AE0C 0E 02 -  -      ld  c,2
  540 D1:AE0E 41 -  -  -      ld  b,c
  541 D1:AE0F CD 86 B7 D1     call i6502_map_pages
  542 D1:AE13 2A 37 34 D0 _:  ld  hl,(prg_rom_size)
  543 D1:AE17 11 FF BF FF     ld  de,-(16384+1)
  544 D1:AE1B 19 -  -  -      add hl,de   ;carry if more than 1 16KB segment
  545 D1:AE1C 2A 43 34 D0     ld  hl,(prg_rom_base)
  546 D1:AE20 -  -  -  -      ;jr  $
  547 D1:AE20 06 80 -  -      ld  b,$80
  548 D1:AE22 58 -  -  -      ld  e,b
  549 D1:AE23 0E 40 -  -      ld  c,$40
  550 D1:AE25 30 02 -  -      jr  nc,+_
  551 D1:AE27 CB 21 -  -      sla c
  552 D1:AE29 CD 86 B7 D1 _:  call i6502_map_pages
  553 D1:AE2D -  -  -  -      ;map in nametable mirroring
  554 D1:AE2D 21 00 58 D0     ld  hl,NAMETABLE1
  555 D1:AE31 11 00 5C D0     ld  de,NAMETABLE2
  556 D1:AE35 22 00 34 D0     ld  (nametable00),hl
  557 D1:AE39 ED 53 0C 34 
              D0 -  -  -      ld  (nametable11),de
  558 D1:AE3E DD CB 06 46     bit 0,(ix+6)    ;nametable arrangement. Mapper 0 has no alternates.
  559 D1:AE42 28 01 -  -      jr  z,+_
  560 D1:AE44 EB -  -  -      ex  de,hl
  561 D1:AE45 22 04 34 D0 _:  ld  (nametable01),hl
  562 D1:AE49 ED 53 08 34 
              D0 -  -  -      ld  (nametable10),de
  563 D1:AE4E -  -  -  -      ;Fill out nametable attrib pointers
  564 D1:AE4E 21 00 34 D0     ld  hl,nametable00
  565 D1:AE52 01 C0 03 00     ld  bc,960
  566 D1:AE56 3E 04 -  -      ld  a,4
  567 D1:AE58 ED 17 -  -  _:  ld  de,(hl)
  568 D1:AE5A CB E5 -  -      set 4,L
  569 D1:AE5C EB -  -  -      ex  de,hl
  570 D1:AE5D 09 -  -  -      add hl,bc
  571 D1:AE5E EB -  -  -      ex  de,hl
  572 D1:AE5F ED 1F -  -      ld  (hl),de
  573 D1:AE61 CB A5 -  -      res 4,L
  574 D1:AE63 23 -  -  -      inc hl
  575 D1:AE64 23 -  -  -      inc hl
  576 D1:AE65 23 -  -  -      inc hl
  577 D1:AE66 23 -  -  -      inc hl
  578 D1:AE67 3D -  -  -      dec a
  579 D1:AE68 20 EE -  -      jr  nz,-_
  580 D1:AE6A -  -  -  -      ;initilize chr_rom current bank address.
  581 D1:AE6A -  -  -  -      ;This mapper does not allow any additional banks, but if it does, this
  582 D1:AE6A -  -  -  -      ;value must be recalculated from chr_rom_base
  583 D1:AE6A 2A 46 34 D0     ld  hl,(chr_rom_base)
  584 D1:AE6E 22 2C 34 D0     ld  (chr_rom_curbank),hl
  585 D1:AE72 21 93 AF D1     ld  hl,mapper0_ppu_write
  586 D1:AE76 22 4A 34 D0     ld  (ppu_smc_gate),hl
  587 D1:AE7A 36 C9 -  -      ld  (hl),$C9    ;ret. Will write nop here during first NMI handle
  588 D1:AE7C C9 -  -  -      ret
  589 D1:AE7D -  -  -  -  
  590 D1:AE7D -  -  -  -  
  591 D1:AE7D -  -  -  -  mapper0_read:
  592 D1:AE7D 7A -  -  -      ld  a,d
  593 D1:AE7E 87 -  -  -      add a,a
  594 D1:AE7F 30 08 -  -      jr  nc,+_
  595 D1:AE81 7E -  -  -      ld  a,(hl)  ;is $8000 or above
  596 D1:AE82 C9 -  -  -      ret
  597 D1:AE83 FE 40 -  -      cp  a,$20*2
  598 D1:AE85 38 02 -  -      jr  c,+_
  599 D1:AE87 7E -  -  -      ld  a,(hl)  ;is below $2000
  600 D1:AE88 C9 -  -  -      ret
  601 D1:AE89 87 -  -  -  _:  add a,a
  602 D1:AE8A 30 13 -  -      jr  nc,mapper0_ppu_read     ;wasn't $4000 or higher.
  603 D1:AE8C 28 02 -  -      jr  z,mapper0_apu_read      ;high byte was exactly $40
  604 D1:AE8E 7E -  -  -      ld  a,(hl)
  605 D1:AE8F C9 -  -  -      ret
  606 D1:AE90 -  -  -  -  mapper0_apu_read:
  607 D1:AE90 79 -  -  -      ld  a,c
  608 D1:AE91 FE 16 -  -      cp  a,$16
  609 D1:AE93 20 08 -  -      jr  nz,+_
  610 D1:AE95 37 -  -  -      scf
  611 D1:AE96 DD CB FE 1E     rr  (ix+APU_KEYPAD)     ;after bits are exhausted, should read '1'
  612 D1:AE9A CE 40 -  -      adc a,$40               ;Simulate open bus behavior
  613 D1:AE9C C9 -  -  -      ret
  614 D1:AE9D 7E -  -  -  _:  ld  a,(hl)  ;hope that the dummy map page is good enough to not crash.
  615 D1:AE9E C9 -  -  -      ret
  616 D1:AE9F -  -  -  -  mapper0_ppu_read:
  617 D1:AE9F 79 -  -  -      ld  a,c
  618 D1:AEA0 E6 07 -  -      and a,%00000111
  619 D1:AEA2 FE 07 -  -      cp  a,$07
  620 D1:AEA4 28 17 -  -      jr  z,mapper0_ppu_read_ppudata
  621 D1:AEA6 FE 04 -  -      cp  a,$04
  622 D1:AEA8 28 6D -  -      jr  z,mapper0_ppu_read_oamdata
  623 D1:AEAA FE 02 -  -      cp  a,$02   ;gotta break this out since reading ppustatus does other stuff
  624 D1:AEAC 28 08 -  -      jr  z,mapper0_ppu_read_ppustatus
  625 D1:AEAE -  -  -  -      ;We should ignore reads from write-only registers but i'm sure nothing
  626 D1:AEAE -  -  -  -      ;will come of allowing it.
  627 D1:AEAE ED 22 E0 -  _:  lea hl,ix+PPU_CTRL
  628 D1:AEB1 7D -  -  -      ld  a,l
  629 D1:AEB2 81 -  -  -      add a,c
  630 D1:AEB3 6F -  -  -      ld  l,a
  631 D1:AEB4 7E -  -  -      ld  a,(hl)  
  632 D1:AEB5 C9 -  -  -      ret
  633 D1:AEB6 -  -  -  -  mapper0_ppu_read_ppustatus:
  634 D1:AEB6 -  -  -  -      ;reading ppustatus does additional things.
  635 D1:AEB6 3E 55 -  -      ld  a,WREG_CONST
  636 D1:AEB8 DD 77 F4 -      ld  (ix+PPU_W),a
  637 D1:AEBB 18 F1 -  -      jr -_
  638 D1:AEBD -  -  -  -  mapper0_ppu_read_ppudata:
  639 D1:AEBD DD 7E F3 -      ld  a,(ix+PPU_V+1)
  640 D1:AEC0 4F -  -  -      ld  c,a
  641 D1:AEC1 E6 3F -  -      and a,%00111111
  642 D1:AEC3 FE 20 -  -      cp  a,$20
  643 D1:AEC5 30 0F -  -      jr  nc,+_   ;skip reading from CHR_ROM
  644 D1:AEC7 D5 -  -  -      push de
  645 D1:AEC8 52 EB -  -          ex.s de,hl  ;clears DEU
  646 D1:AECA 2A 2C 34 D0         ld  hl,(chr_rom_curbank)
  647 D1:AECE 57 -  -  -          ld  d,a
  648 D1:AECF DD 5E F2 -          ld  e,(ix+PPU_V+0)
  649 D1:AED2 19 -  -  -          add hl,de
  650 D1:AED3 D1 -  -  -      pop de
  651 D1:AED4 7E -  -  -      ld  a,(hl)
  652 D1:AED5 C9 -  -  -      ret
  653 D1:AED6 FE 3F -  -  _:  cp  a,$3F
  654 D1:AED8 20 0C -  -      jr  nz,+_
  655 D1:AEDA DD 7E F2 -      ld  a,(ix+PPU_V+0)
  656 D1:AEDD E6 3F -  -      and a,%00111111
  657 D1:AEDF 21 00 32 D0     ld  hl,vram_palette
  658 D1:AEE3 6F -  -  -      ld  L,a
  659 D1:AEE4 7E -  -  -      ld  a,(hl)
  660 D1:AEE5 C9 -  -  -      ret
  661 D1:AEE6 E6 0C -  -  _:  and a,%00001100     ;%00ZZTTaa Z:00,01=CHR,02=NT,03=PAL; T:WhichNT; a:adrHI
  662 D1:AEE8 21 00 34 D0     ld  hl,nametable00
  663 D1:AEEC 6F -  -  -      ld  L,a             ;bits already in position to index the table
  664 D1:AEED ED 27 -  -      ld  hl,(hl)
  665 D1:AEEF DD 6E F2 -      ld  L,(ix+PPU_V+0)
  666 D1:AEF2 DD 7E F3 -      ld  a,(ix+PPU_V+1)
  667 D1:AEF5 AC -  -  -      xor a,h     ;
  668 D1:AEF6 E6 03 -  -      and a,%00000011 ;keep low bits of address in A. H keep is location-specific.
  669 D1:AEF8 AC -  -  -      xor a,h
  670 D1:AEF9 67 -  -  -      ld  h,a
  671 D1:AEFA DD CB E0 56     bit 2,(ix+PPU_CTRL) ;VRAM cursor direction
  672 D1:AEFE 3E 01 -  -      ld  a,1
  673 D1:AF00 28 02 -  -      jr  z,+_
  674 D1:AF02 C6 1F -  -      add a,31
  675 D1:AF04 DD 86 F2 -  _:  add a,(ix+PPU_V)
  676 D1:AF07 DD 77 F2 -      ld  (ix+PPU_V),a
  677 D1:AF0A 30 03 -  -      jr  nc,+_
  678 D1:AF0C DD 34 F3 -      inc (ix+PPU_V+1)
  679 D1:AF0F DD 7E E7 -  _:  ld  a,(ix+PPU_DATA) ;following dance simulates delayed buffer read
  680 D1:AF12 46 -  -  -      ld  b,(hl)
  681 D1:AF13 DD 70 E7 -      ld  (ix+PPU_DATA),b
  682 D1:AF16 C9 -  -  -      ret
  683 D1:AF17 -  -  -  -  mapper0_ppu_read_oamdata:
  684 D1:AF17 -  -  -  -      ;this needs to be more complex than this. But I'm not. I won't.
  685 D1:AF17 -  -  -  -      ;Not now. Not going to play Micro Machines. I don't wanna.
  686 D1:AF17 21 00 60 D0     ld  hl,OBJECT_ATTRIB_MEM
  687 D1:AF1B DD 6E E3 -      ld  L,(ix+PPU_OAMADDR)
  688 D1:AF1E 7E -  -  -      ld  a,(hl)
  689 D1:AF1F C9 -  -  -      ret
  690 D1:AF20 -  -  -  -  
  691 D1:AF20 -  -  -  -  
  692 D1:AF20 -  -  -  -  mapper0_write:
  693 D1:AF20 7A -  -  -      ld  a,d
  694 D1:AF21 FE 20 -  -      cp  a,$20
  695 D1:AF23 30 02 -  -      jr  nc,+_
  696 D1:AF25 70 -  -  -      ld  (hl),b
  697 D1:AF26 C9 -  -  -      ret
  698 D1:AF27 FE 40 -  -  _:  cp  a,$40
  699 D1:AF29 38 68 -  -      jr  c,mapper0_ppu_write
  700 D1:AF2B 28 04 -  -      jr  z,mapper0_apu_write
  701 D1:AF2D 87 -  -  -      add a,a
  702 D1:AF2E D8 -  -  -      ret c       ;don't write anything to above $8000
  703 D1:AF2F 70 -  -  -      ld  (hl),b  ;but allow it in $4100-$7FFF because it might be RAM.
  704 D1:AF30 C9 -  -  -      ret
  705 D1:AF31 -  -  -  -  mapper0_apu_write:
  706 D1:AF31 79 -  -  -      ld  a,c
  707 D1:AF32 FE 16 -  -      cp  a,$16
  708 D1:AF34 20 3B -  -      jr  nz,+_
  709 D1:AF36 DD 7E FF -      ld  a,(ix+APU_KEYLATCH)
  710 D1:AF39 A8 -  -  -      xor a,b     ;Bit 0 is set if we're trying to change controller poll state.
  711 D1:AF3A 0F -  -  -      rrca        ;And this is how we're going to get it.
  712 D1:AF3B D0 -  -  -      ret nc      ;Only support NES standard controller.
  713 D1:AF3C CB 40 -  -      bit 0,b     ;So... what are we changing it to?
  714 D1:AF3E DD 70 FF -      ld  (ix+APU_KEYLATCH),b
  715 D1:AF41 21 00 00 F5     ld  hl,mpKeyMode
  716 D1:AF45 28 06 -  -      jr  z,mapper0_apu_stop_keyboard ;jump to strobe stop
  717 D1:AF47 7E -  -  -      ld  a,(hl)
  718 D1:AF48 FE 03 -  -      cp  a,3
  719 D1:AF4A C8 -  -  -      ret z       ;don't do anything to the keyboard if running continuous.
  720 D1:AF4B 77 -  -  -      ld  (hl),a  ;else set to continuous and keep going.
  721 D1:AF4C C9 -  -  -      ret
  722 D1:AF4D -  -  -  -  mapper0_apu_stop_keyboard:
  723 D1:AF4D 2E 12 -  -      ld  L,$12   ;76543210 : del mode 2nd y= wind zoom trace graph
  724 D1:AF4F 7E -  -  -      ld  a,(hl)
  725 D1:AF50 2E 1E -  -      ld  L,$1E   ;----3210 : up right left down
  726 D1:AF52 4E -  -  -      ld  c,(hl)
  727 D1:AF53 A9 -  -  -      xor a,c
  728 D1:AF54 E6 F0 -  -      and a,%11110000
  729 D1:AF56 A9 -  -  -      xor a,c     ;keymapping has changed. We need to further alter it.
  730 D1:AF57 -  -  -  -      ;[DE MO 2N Y= UP RI LE DO] maps to [SE, B, A, ST, UP, RI, LE, DO]
  731 D1:AF57 -  -  -  -      ;The above must be rearranged to become:
  732 D1:AF57 -  -  -  -      ;            [RI, LE, DO, UP, ST, SE, B , A ]
  733 D1:AF57 -  -  -  -      ;as compared to
  734 D1:AF57 -  -  -  -      ;            [SE, B , A , ST, UP, RI, LE, DO]
  735 D1:AF57 07 -  -  -      rlca        ;[B , A , ST, UP, RI, LE, DO, SE]
  736 D1:AF58 4F -  -  -      ld  c,a     ;b4  : UP is in correct position.
  737 D1:AF59 07 -  -  -      rlca        ;[A , ST, UP, RI, LE, DO, SE, B ]
  738 D1:AF5A 07 -  -  -      rlca        ;[ST, UP, RI, LE, DO, SE, B , A ]
  739 D1:AF5B 47 -  -  -      ld  b,a     ;b0-2:SE, B , and A are in the correct position
  740 D1:AF5C 07 -  -  -      rlca        ;[UP, RI, LE, DO, SE, B , A , ST]
  741 D1:AF5D 07 -  -  -      rlca        ;[RI, LE, DO, SE, B , A , ST, UP]
  742 D1:AF5E 57 -  -  -      ld  d,a     ;b5-7: RI LE DO in correct position.
  743 D1:AF5F 07 -  -  -      rlca        ;[LE, DO, SE, B , A , ST, UP, RI]
  744 D1:AF60 07 -  -  -      rlca        ;b3: ST is in the correct position.
  745 D1:AF61 A9 -  -  -      xor a,c     ;
  746 D1:AF62 E6 08 -  -      and a,%00001000 ;keep A3, merge others
  747 D1:AF64 A9 -  -  -      xor a,c     ;Has: A3. Merge-in contains b4
  748 D1:AF65 A8 -  -  -      xor a,b     ;
  749 D1:AF66 E6 18 -  -      and a,%00011000 ;keep A3-4
  750 D1:AF68 A8 -  -  -      xor a,b     ;Merge-in contains b0-2
  751 D1:AF69 AA -  -  -      xor a,d     ;
  752 D1:AF6A E6 1F -  -      and a,%00011111 ;keep A0-4
  753 D1:AF6C AA -  -  -      xor a,d     ;Merge-in contains b5-7. Is complete.
  754 D1:AF6D DD 77 FE -      ld  (ix+APU_KEYPAD),a
  755 D1:AF70 C9 -  -  -      ret
  756 D1:AF71 FE 14 -  -  _:  cp  a,$14   ;OAM DMA
  757 D1:AF73 20 1C -  -      jr  nz,+_
  758 D1:AF75 C5 -  -  -      push bc
  759 D1:AF76 D5 -  -  -          push de
  760 D1:AF77 11 01 02 00             ld  de,513  ;or 514. Not going to emulate put/get cycles
  761 D1:AF7B FD 19 -  -              add iy,de
  762 D1:AF7D 0E 0C -  -              ld  c,BASETABLE_STRIDE
  763 D1:AF7F 21 00 40 D0             ld  hl,PAGETABLE
  764 D1:AF83 09 -  -  -              add hl,bc
  765 D1:AF84 11 00 60 D0             ld  de,OBJECT_ATTRIB_MEM
  766 D1:AF88 01 00 01 00             ld  bc,256
  767 D1:AF8C ED B0 -  -              ldir
  768 D1:AF8E D1 -  -  -          pop de
  769 D1:AF8F C1 -  -  -      pop bc
  770 D1:AF90 C9 -  -  -      ret
  771 D1:AF91 70 -  -  -  _:  ld  (hl),b
  772 D1:AF92 C9 -  -  -      ret
  773 D1:AF93 -  -  -  -  mapper0_ppu_write:
  774 D1:AF93 C9 -  -  -      ret
  775 D1:AF94 -  -  -  -      ;TODO: gate off access outside VBlank
  776 D1:AF94 -  -  -  -      ;TODO: Replace cp/jr chain with DJNZ chain for more optimal branching.
  777 D1:AF94 79 -  -  -      ld  a,c
  778 D1:AF95 E6 07 -  -      and a,%00000111
  779 D1:AF97 -  -  -  -  ;    cp  a,$01  ;Once midframe is supported, uncomment this.
  780 D1:AF97 -  -  -  -  ;    jr  z,mapper0_ppu_write_ppumask
  781 D1:AF97 FE 02 -  -      cp  a,$02
  782 D1:AF99 C8 -  -  -      ret z   ;read-only register. do not write to it.
  783 D1:AF9A FE 04 -  -      cp  a,$04
  784 D1:AF9C 28 08 -  -      jr  z,mapper0_ppu_write_oamdata
  785 D1:AF9E FE 06 -  -      cp a,$06
  786 D1:AFA0 28 0D -  -      jr  z,mapper0_ppu_write_ppuaddr
  787 D1:AFA2 FE 07 -  -      cp  a,$07
  788 D1:AFA4 28 17 -  -      jr  z,mapper0_ppu_write_ppudata
  789 D1:AFA6 -  -  -  -  ;    cp  a,$05  ;Once midframe is supported, uncomment this.
  790 D1:AFA6 -  -  -  -  ;    jr  z,mapper0_ppu_write_ppuscroll
  791 D1:AFA6 -  -  -  -  
  792 D1:AFA6 -  -  -  -  
  793 D1:AFA6 -  -  -  -  mapper0_ppu_write_oamdata:
  794 D1:AFA6 -  -  -  -      ;Doesn't check anything. So sad.
  795 D1:AFA6 21 00 60 D0     ld  hl,OBJECT_ATTRIB_MEM
  796 D1:AFAA DD 6E E3 -      ld  L,(ix+PPU_OAMADDR)
  797 D1:AFAD 70 -  -  -      ld  (hl),b
  798 D1:AFAE C9 -  -  -      ret
  799 D1:AFAF -  -  -  -  mapper0_ppu_write_ppuaddr:
  800 D1:AFAF DD CB F4 0E     rrc (ix+PPU_W)
  801 D1:AFB3 38 04 -  -      jr  c,+_
  802 D1:AFB5 DD 70 F2 -      ld  (ix+PPU_V+0),b
  803 D1:AFB8 C9 -  -  -      ret
  804 D1:AFB9 DD 70 F3 -  _:  ld  (ix+PPU_V+1),b
  805 D1:AFBC C9 -  -  -      ret
  806 D1:AFBD -  -  -  -  
  807 D1:AFBD -  -  -  -  mapper0_ppu_write_ppudata:
  808 D1:AFBD DD 7E F3 -      ld  a,(ix+PPU_V+1)
  809 D1:AFC0 4F -  -  -      ld  c,a
  810 D1:AFC1 E6 3F -  -      and a,%00111111
  811 D1:AFC3 FE 20 -  -      cp  a,$20
  812 D1:AFC5 D8 -  -  -      ret c   ;Mapper 0 does not allow writing to CHR_ROM
  813 D1:AFC6 FE 3F -  -      cp  a,$3F
  814 D1:AFC8 28 2B -  -      jr  z,+++_    ;write to palette table
  815 D1:AFCA E6 0C -  -      and a,%00001100     ;%00ZZTTaa Z:00,01=CHR,02=NT,03=PAL; T:WhichNT; a:adrHI
  816 D1:AFCC 21 00 34 D0     ld  hl,nametable00
  817 D1:AFD0 6F -  -  -      ld  L,a             ;bits already in position to index the table
  818 D1:AFD1 ED 27 -  -      ld  hl,(hl)
  819 D1:AFD3 DD 6E F2 -      ld  L,(ix+PPU_V+0)
  820 D1:AFD6 DD 7E F3 -      ld  a,(ix+PPU_V+1)
  821 D1:AFD9 AC -  -  -      xor a,h     ;
  822 D1:AFDA E6 03 -  -      and a,%00000011 ;keep low bits of address in A. H keep is location-specific.
  823 D1:AFDC AC -  -  -      xor a,h
  824 D1:AFDD 67 -  -  -      ld  h,a
  825 D1:AFDE 70 -  -  -      ld  (hl),b
  826 D1:AFDF DD CB E0 56     bit 2,(ix+PPU_CTRL) ;VRAM cursor direction
  827 D1:AFE3 3E 01 -  -      ld  a,1
  828 D1:AFE5 28 02 -  -      jr  z,+_
  829 D1:AFE7 C6 1F -  -      add a,31
  830 D1:AFE9 DD 86 F2 -  _:  add a,(ix+PPU_V)
  831 D1:AFEC DD 77 F2 -      ld  (ix+PPU_V),a
  832 D1:AFEF 30 03 -  -      jr  nc,+_
  833 D1:AFF1 DD 34 F3 -      inc (ix+PPU_V+1)
  834 D1:AFF4 C9 -  -  -  _:  ret
  835 D1:AFF5 21 00 32 D0 _:  ld  hl,vram_palette
  836 D1:AFF9 DD 7E F2 -      ld  a,(ix+PPU_V+0)
  837 D1:AFFC E6 3F -  -      and a,%00111111
  838 D1:AFFE 6F -  -  -      ld  L,a
  839 D1:AFFF 70 -  -  -      ld  (hl),b
  840 D1:B000 C9 -  -  -      ret
  841 D1:B001 -  -  -  -  
  842 D1:B001 -  -  -  -  mapper0_ppu_write_ppumask:
  843 D1:B001 -  -  -  -      ;TODO: Allow queueing for midframe writes.
  844 D1:B001 70 -  -  -      ld  (hl),b
  845 D1:B002 C9 -  -  -      ret
  846 D1:B003 -  -  -  -  mapper0_ppu_write_ppuscroll:
  847 D1:B003 -  -  -  -      ;TODO: Allow queueing for midframe writes. Often used in conjunction
  848 D1:B003 -  -  -  -      ;with Sprite0 hits for status bar rendering.
  849 D1:B003 70 -  -  -      ld  (hl),b
  850 D1:B004 C9 -  -  -      ret
  851 D1:B005 -  -  -  -  
  852 D1:B005 -  -  -  -  
  853 D1:B005 -  -  -  -  loadROMFile_tempSig:    ;total 23 bytes
  854 D1:B005 43 45 4E 52 
              4F 32 00 -  .db "CENRO2",0
  855 D1:B00C -  -  -  -  loadROMFile_tempSigHash:
  856 D1:B00C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;16 bytes for hash
  857 D1:B01C -  -  -  -  
  858 D1:B01C -  -  -  -  
  859 D1:B01C -  -  -  -  ;Input: IY = locationOfSignature. 
  860 D1:B01C -  -  -  -  ;       BC=size of signature (long load to clear BCU), still limited to 255.
  861 D1:B01C -  -  -  -  ;Output: carry=1: Variable not found.
  862 D1:B01C -  -  -  -  ;Output: carry=0: DE=address of variable data start after the signature
  863 D1:B01C -  -  -  -  ;        IX=location of current variable's VAT location.
  864 D1:B01C -  -  -  -  ;Destroys: All registers not in use.
  865 D1:B01C -  -  -  -  ;NOTES: This routine is capable of resuming a search that has ended.
  866 D1:B01C -  -  -  -  
  867 D1:B01C -  -  -  -  ;To continue searching:
  868 D1:B01C -  -  -  -  ;call vatTraverse_continue with the following inputs:
  869 D1:B01C -  -  -  -  ;   IX preserved from a non-carry return of vatTraverse.
  870 D1:B01C -  -  -  -  ;   BC = same as input for vatTraverse. vatTraverse does not destroy this reg.
  871 D1:B01C -  -  -  -  ;   WARNING: DO NOT KEEP SEARCHING AFTER CALL RETURNS CARRY. START A NEW SEARCH.
  872 D1:B01C -  -  -  -  vatTraverse:
  873 D1:B01C -  -  -  -      ;progPtr = progvat start; ptemp = progvatend
  874 D1:B01C DD 2A 9D 25 
              D0 -  -  -      ld  ix,(progPtr)
  875 D1:B021 -  -  -  -  vatTraverse_loop:
  876 D1:B021 2A 9A 25 D0     ld  hl,(pTemp)
  877 D1:B025 ED 12 00 -      lea de,ix+0
  878 D1:B028 B7 -  -  -      or  a,a
  879 D1:B029 ED 52 -  -      sbc hl,de   ;HL<DE while in pVAT, else carry set.
  880 D1:B02B 3F -  -  -      ccf
  881 D1:B02C D8 -  -  -      ret c
  882 D1:B02D 1A -  -  -      ld  a,(de)
  883 D1:B02E E6 1F -  -      and a,$1F
  884 D1:B030 FE 15 -  -      cp  a,AppVarObj
  885 D1:B032 20 34 -  -      jr  nz,vatTraverse_skip
  886 D1:B034 DD 17 F9 -      ld  de,(ix-7)   ;puts "page" byte in DEU
  887 D1:B037 DD 5E FD -      ld  e,(ix-3)
  888 D1:B03A DD 56 FC -      ld  d,(ix-4)
  889 D1:B03D CD 98 1F 02     call _ChkInRam
  890 D1:B041 EB -  -  -      ex  de,hl
  891 D1:B042 30 08 -  -      jr  nc,+_
  892 D1:B044 11 09 00 00     ld  de,9
  893 D1:B048 19 -  -  -      add hl,de
  894 D1:B049 5E -  -  -      ld  e,(hl)
  895 D1:B04A 19 -  -  -      add hl,de
  896 D1:B04B 23 -  -  -      inc hl
  897 D1:B04C 5E -  -  -  _:  ld  e,(hl)
  898 D1:B04D 23 -  -  -      inc hl
  899 D1:B04E 56 -  -  -      ld  d,(hl)
  900 D1:B04F 23 -  -  -      inc hl
  901 D1:B050 EB -  -  -      ex  de,hl
  902 D1:B051 B7 -  -  -      or  a,a
  903 D1:B052 ED 42 -  -      sbc hl,bc   ;varsize-entrysize. If carry, entry cannot possibly be in var.
  904 D1:B054 38 12 -  -      jr  c,vatTraverse_skip
  905 D1:B056 ED 23 00 -      lea hl,iy+0
  906 D1:B059 C5 -  -  -      push bc
  907 D1:B05A 1A -  -  -  _:      ld  a,(de)
  908 D1:B05B 13 -  -  -          inc de
  909 D1:B05C ED A1 -  -          cpi
  910 D1:B05E 20 07 -  -          jr  nz,vatTraverse_sigNoMatch
  911 D1:B060 EA 5A B0 D1         jp  pe,-_
  912 D1:B064 C1 -  -  -      pop bc
  913 D1:B065 B7 -  -  -      or  a,a
  914 D1:B066 C9 -  -  -      ret         ;NC. DE = past the signature.
  915 D1:B067 -  -  -  -  vatTraverse_sigNoMatch:
  916 D1:B067 C1 -  -  -      pop bc
  917 D1:B068 -  -  -  -  vatTraverse_continue:
  918 D1:B068 -  -  -  -  vatTraverse_skip:
  919 D1:B068 3E 07 -  -      ld  a,7
  920 D1:B06A 11 FF FF FF     ld  de,-1
  921 D1:B06E DD 86 FA -      add a,(ix-6)
  922 D1:B071 ED 44 -  -      neg
  923 D1:B073 5F -  -  -      ld  e,a
  924 D1:B074 DD 19 -  -      add ix,de   ;because "sbc ix,de" isn't a thing. Boo.
  925 D1:B076 18 A9 -  -      jr  vatTraverse_loop
  926 D1:B078 -  -  -  -  
  927 D1:B078 -  -  -  -  ;Copied from my Falldown2 project. I didn't want to have to
  928 D1:B078 -  -  -  -  ;find yet another hardware reference for something I already did.
  929 D1:B078 -  -  -  -  ;But I'll have to do it again anyway because this isn't exactly
  930 D1:B078 -  -  -  -  ;what we're looking for. Here, we output the same sort of
  931 D1:B078 -  -  -  -  ;game keys that I've used basically all my programming life.
  932 D1:B078 -  -  -  -  ;Anyhoo. We'll be using the following:
  933 D1:B078 -  -  -  -  ;kbitDown	equ 00h
  934 D1:B078 -  -  -  -  ;kbitLeft	equ 01h
  935 D1:B078 -  -  -  -  ;kbitRight	equ 02h
  936 D1:B078 -  -  -  -  ;kbitUp		equ 03h
  937 D1:B078 -  -  -  -  ;kbitYequ equ 04h
  938 D1:B078 -  -  -  -  ;kbit2nd		equ 05h
  939 D1:B078 -  -  -  -  ;kbitMode	equ 06h
  940 D1:B078 -  -  -  -  ;kbitDel		equ 07h
  941 D1:B078 -  -  -  -  ;You can find the other defines approximately where I found the stuff above.
  942 D1:B078 -  -  -  -  
  943 D1:B078 -  -  -  -  getkbd_adl:
  944 D1:B078 DD 21 00 00 
              F5 -  -  -  	ld  ix,mpKeyMode
  945 D1:B07D ED 22 00 -  	lea hl,ix+0
  946 D1:B080 36 02 -  -  	ld  (hl),keyModeScanOnce
  947 D1:B082 AF -  -  -  	xor a
  948 D1:B083 BE -  -  -  _:  cp  (hl)
  949 D1:B084 20 FD -  -  	jr  nz,-_
  950 D1:B086 DD 7E 12 -  	ld  a,(ix+kbdG1-mpKeyRange)
  951 D1:B089 DD 6E 1E -  	ld  l,(ix+kbdG7-mpKeyRange)
  952 D1:B08C AD -  -  -  	xor L
  953 D1:B08D E6 F0 -  -  	and 11110000b	;mask out lower bits to let me shove dpad bits in
  954 D1:B08F AD -  -  -  	xor L
  955 D1:B090 C9 -  -  -  	ret
  956 D1:B091 -  -  -  -  
  957 D1:B091 -  -  -  -  waituntilkeyrelease:
  958 D1:B091 CD 78 B0 D1     call getkbd_adl
  959 D1:B095 B7 -  -  -      or  a,a
  960 D1:B096 20 F9 -  -      jr  nz,waituntilkeyrelease
  961 D1:B098 C9 -  -  -  	ret
  962 D1:B099 -  -  -  -  
  963 D1:B099 -  -  -  -  waituntilnewkeypress:
  964 D1:B099 CD 91 B0 D1     call waituntilkeyrelease
  965 D1:B09D CD 78 B0 D1 _:  call getkbd_adl
  966 D1:B0A1 B7 -  -  -  	or  a,a
  967 D1:B0A2 28 F9 -  -  	jr  z,-_
  968 D1:B0A4 C9 -  -  -      ret
  969 D1:B0A5 -  -  -  -  
  970 D1:B0A5 -  -  -  -  #include "lcd.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    1 D1:B0A5 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 D1:B0A5 -  -  -  -  ;TI-84 Plus CE Include File
    2 D1:B0A5 -  -  -  -  
    3 D1:B0A5 -  -  -  -  ;Various Parts Contributed by
    4 D1:B0A5 -  -  -  -  ;- BrandonW
    5 D1:B0A5 -  -  -  -  ;- calc84
    6 D1:B0A5 -  -  -  -  ;- MateoConLechuga
    7 D1:B0A5 -  -  -  -  ;- Runer112
    8 D1:B0A5 -  -  -  -  ;- tr1p1ea
    9 D1:B0A5 -  -  -  -  ;- Kerm Martian
   10 D1:B0A5 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    2 D1:B0A5 -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
    5 D1:B0A5 -  -  -  -  ;
    6 D1:B0A5 -  -  -  -  ;
    7 D1:B0A5 -  -  -  -  ;
    8 D1:B0A5 -  -  -  -  
    9 D1:B0A5 -  -  -  -  ;Undefine this to speed up core process by losing debug state
   10 D1:B0A5 -  -  -  -  ;#define COREDEBUG
   11 D1:B0A5 -  -  -  -  
   12 D1:B0A5 -  -  -  -  DEBUG_PRINT_START_CYCLE .equ 0
   13 D1:B0A5 -  -  -  -  DEBUG_STEP_START_CYCLE  .equ 30000 ;26485
   14 D1:B0A5 -  -  -  -  
   15 D1:B0A5 -  -  -  -  
   16 D1:B0A5 -  -  -  -  
   17 D1:B0A5 -  -  -  -  FONTFGCOLOR .EQU $FF ;$29
   18 D1:B0A5 -  -  -  -  FONTBGCOLOR .EQU $00
   19 D1:B0A5 -  -  -  -  
   20 D1:B0A5 -  -  -  -  screenBuf1      .equ vRam
   21 D1:B0A5 -  -  -  -  screenBuf2      .equ vRam+(320*240)
   22 D1:B0A5 -  -  -  -  ;DO NOT MOVE THESE.
   23 D1:B0A5 -  -  -  -  xPos                .equ $D031F6
   24 D1:B0A5 -  -  -  -  yPos                .equ $D031F7
   25 D1:B0A5 -  -  -  -  slopPos             .equ $D031F8        ;extra byte here
   26 D1:B0A5 -  -  -  -  debugram            .equ $D031F9        ;FA and FB occupied too.
   27 D1:B0A5 -  -  -  -  save_spl            .equ $D031FC        ;FD and FE occupied too.
   28 D1:B0A5 -  -  -  -  save_mbase          .equ $D031FF        ;
   29 D1:B0A5 -  -  -  -  vram_palette        .equ $D03200        ;64 bytes of color. It looks like itself
   30 D1:B0A5 -  -  -  -  core_memory_ix      .equ $D03280        ;IX range -128 to -64 already in use.
   31 D1:B0A5 -  -  -  -  scrap_mapping       .equ $D03300        ;256 bytes. maps to nowhere important.
   32 D1:B0A5 -  -  -  -  saferam1            .equ $D03400        ;1024 bytes available. Define later.
   33 D1:B0A5 -  -  -  -  main_ram            .equ $D03800        ;$0800 bytes of main system memory
   34 D1:B0A5 -  -  -  -  
   35 D1:B0A5 -  -  -  -  ZEROPAGE            .equ main_ram+(0*256)
   36 D1:B0A5 -  -  -  -  STACKBASE           .equ main_ram+(1*256)
   37 D1:B0A5 -  -  -  -  
   38 D1:B0A5 -  -  -  -  BASETABLE           .equ $D04000        ;variable size. 256*BASETABLE_STRIDE
   39 D1:B0A5 -  -  -  -  BASETABLE_STRIDE    .equ 12
   40 D1:B0A5 -  -  -  -  PAGETABLE_OFFSET    .equ 0
   41 D1:B0A5 -  -  -  -  PAGETABLE           .equ BASETABLE+PAGETABLE_OFFSET
   42 D1:B0A5 -  -  -  -  JUMPTABLE_OFFSET    .equ 4
   43 D1:B0A5 -  -  -  -  JUMPTABLE           .equ BASETABLE+JUMPTABLE_OFFSET
   44 D1:B0A5 -  -  -  -  USETABLE_OFFSET     .equ 8
   45 D1:B0A5 -  -  -  -  USETABLE            .equ BASETABLE+USETABLE_OFFSET
   46 D1:B0A5 -  -  -  -  
   47 D1:B0A5 -  -  -  -  NAMETABLE1          .equ BASETABLE+(512*BASETABLE_STRIDE)
   48 D1:B0A5 -  -  -  -  NAMETABLE2          .equ NAMETABLE1 + 1024  ;1024 BYTES
   49 D1:B0A5 -  -  -  -  OBJECT_ATTRIB_MEM   .equ NAMETABLE2 + 1024  ;256 BYTES
   50 D1:B0A5 -  -  -  -  
   51 D1:B0A5 -  -  -  -  ;
   52 D1:B0A5 -  -  -  -  ;saferam1 1024 bytes storage
   53 D1:B0A5 -  -  -  -  ;
   54 D1:B0A5 -  -  -  -  nametable00         .equ saferam1           ;4b Do not move these vars
   55 D1:B0A5 -  -  -  -  nametable01         .equ nametable00+4      ;4b
   56 D1:B0A5 -  -  -  -  nametable10         .equ nametable01+4      ;4b
   57 D1:B0A5 -  -  -  -  nametable11         .equ nametable10+4      ;4b
   58 D1:B0A5 -  -  -  -  nametable00_attrib  .equ nametable11+4      ;4b
   59 D1:B0A5 -  -  -  -  nametable01_attrib  .equ nametable00_attrib+4   ;4b
   60 D1:B0A5 -  -  -  -  nametable10_attrib  .equ nametable01_attrib+4   ;4b
   61 D1:B0A5 -  -  -  -  nametable11_attrib  .equ nametable10_attrib+4   ;4b
   62 D1:B0A5 -  -  -  -  chr_rom_tiles       .equ nametable11_attrib+4   ;4b
   63 D1:B0A5 -  -  -  -  chr_rom_sprites     .equ chr_rom_tiles+4    ;4b
   64 D1:B0A5 -  -  -  -  curScreenBuf        .equ chr_rom_sprites+4  ;4b
   65 D1:B0A5 -  -  -  -  linestart           .equ curScreenBuf+3     ;1b
   66 D1:B0A5 -  -  -  -  chr_rom_curbank     .equ linestart+1        ;3b Base used for PPU stuff.
   67 D1:B0A5 -  -  -  -  inputNumFiles       .equ chr_rom_curbank+3  ;1b
   68 D1:B0A5 -  -  -  -  basefile_sig        .equ inputNumFiles+1    ;3b pointer to 16b hash
   69 D1:B0A5 -  -  -  -  missing_files       .equ basefile_sig+3     ;1b
   70 D1:B0A5 -  -  -  -  total_rom_size      .equ missing_files+1    ;3b
   71 D1:B0A5 -  -  -  -  prg_rom_size        .equ total_rom_size+3   ;3b
   72 D1:B0A5 -  -  -  -  chr_rom_size        .equ prg_rom_size+3     ;3b
   73 D1:B0A5 -  -  -  -  submapper           .equ chr_rom_size+3     ;1b. iNES2 thing. Not often used.
   74 D1:B0A5 -  -  -  -  ines_flag_6         .equ submapper+1        ;1b. Flags that a mapper may need.
   75 D1:B0A5 -  -  -  -  mapper_id           .equ ines_flag_6+1      ;3b. Convenience load for 12 bits
   76 D1:B0A5 -  -  -  -  mapper_adr_base     .equ mapper_id+1        ;3b. Used to load mapper
   77 D1:B0A5 -  -  -  -  trainer_base        .equ mapper_adr_base+3  ;3b. If exist, starts here
   78 D1:B0A5 -  -  -  -  prg_rom_base        .equ mapper_adr_base+3  ;3b. Adjusted in case of trainer.
   79 D1:B0A5 -  -  -  -  chr_rom_base        .equ prg_rom_base+3     ;3b. Located somewhere.
   80 D1:B0A5 -  -  -  -  chr_rom_base_file   .equ chr_rom_base+3     ;1b. Nonzero if not in first file.
   81 D1:B0A5 -  -  -  -  ppu_smc_gate        .equ chr_rom_base_file+1 ;3b write address to ungate PPU
   82 D1:B0A5 -  -  -  -  timings_base        .equ ppu_smc_gate+3    ;3b. Current pointer to timings
   83 D1:B0A5 -  -  -  -  
   84 D1:B0A5 -  -  -  -  SIZEOF_INTEGRITY_HASH    .equ 16
   85 D1:B0A5 -  -  -  -  MAXPRGROM_HINIB     .equ 1
   86 D1:B0A5 -  -  -  -  MAXCHRROM_HINIB     .equ 3
   87 D1:B0A5 -  -  -  -  NUMBER_OF_MAPPERS   .equ 1
   88 D1:B0A5 -  -  -  -  MAPPER_STRIDE       .equ 9
   89 D1:B0A5 -  -  -  -  
   90 D1:B0A5 -  -  -  -  MAXNUMFILES         .equ 1                  ;set to 32 later. that's like 1.5MB
   91 D1:B0A5 -  -  -  -  FILETABLE_STRIDE    .equ 8
   92 D1:B0A5 -  -  -  -  FILETABLE           .equ timings_base+3   ;(MAXNUMFILES*FILETABLE_STRIDE)b
   93 D1:B0A5 -  -  -  -  FILE_SIZE_OFFSET    .equ 0
   94 D1:B0A5 -  -  -  -  FILE_ADR_OFFSET     .equ 2
   95 D1:B0A5 -  -  -  -  FILE_SIG_ADR_OFFSET .equ 5
   96 D1:B0A5 -  -  -  -  
   97 D1:B0A5 -  -  -  -  int_table_len       .equ FILETABLE+((MAXNUMFILES+1)*FILETABLE_STRIDE)
   98 D1:B0A5 -  -  -  -  INT_TABLE           .equ int_table_len+1
   99 D1:B0A5 -  -  -  -  INT_TABLE_MAXLEN    .equ 8
  100 D1:B0A5 -  -  -  -  INT_TABLE_STRIDE    .equ 6
  101 D1:B0A5 -  -  -  -  INT_ADDR_OFFSET     .equ 0
  102 D1:B0A5 -  -  -  -  INT_CYCLE_OFFSET    .equ 3
  103 D1:B0A5 -  -  -  -  
  104 D1:B0A5 -  -  -  -  
  105 D1:B0A5 -  -  -  -  
  106 D1:B0A5 -  -  -  -  ;
  107 D1:B0A5 -  -  -  -  ;
  108 D1:B0A5 -  -  -  -  ;
  109 D1:B0A5 -  -  -  -  ;
  110 D1:B0A5 -  -  -  -  #define WREG_CONST %01010101
  111 D1:B0A5 -  -  -  -  
  112 D1:B0A5 -  -  -  -  ;PPU default locations. Some are not used
  113 D1:B0A5 -  -  -  -  #define DEBUGCONTROL ($40-$80)
  114 D1:B0A5 -  -  -  -  #define PPU_CTRL -32
  115 D1:B0A5 -  -  -  -  #define PPU_MASK -31
  116 D1:B0A5 -  -  -  -  #define PPU_STATUS -30
  117 D1:B0A5 -  -  -  -  #define PPU_OAMADDR -29
  118 D1:B0A5 -  -  -  -  #define PPU_OAMDATA -28
  119 D1:B0A5 -  -  -  -  #define PPU_SCROLL -27
  120 D1:B0A5 -  -  -  -  #define PPU_ADDR -26
  121 D1:B0A5 -  -  -  -  #define PPU_DATA -25
  122 D1:B0A5 -  -  -  -  ;PPU internal stuff
  123 D1:B0A5 -  -  -  -  #define PPU_SUBCYCLE -15    ;0, 1, or 2.
  124 D1:B0A5 -  -  -  -  #define PPU_V -14           ;USED TO STORE VRAM ADDRESS (PPU ADDRESS SPACE)
  125 D1:B0A5 -  -  -  -  #define PPU_W -12           ;INTERNAL W REGISTER FOR HIGH/LOW BYTE PORT WRITES
  126 D1:B0A5 -  -  -  -  #define PPU_FRAMECOUNT -11  ;USED FOR EVEN/ODD
  127 D1:B0A5 -  -  -  -  #define PPU_NAMETABLE_PTR -10   ;Pointer cache
  128 D1:B0A5 -  -  -  -  #define PPU_VCOUNT -7
  129 D1:B0A5 -  -  -  -  #define PPU_HCOUNT -6
  130 D1:B0A5 -  -  -  -  #define PPU_TCOUNT -5
  131 D1:B0A5 -  -  -  -  #define PPU_XSCROLL -4  ;Should be constructed from PPU_SCROLL
  132 D1:B0A5 -  -  -  -  #define PPU_YSCROLL -3  ;
  133 D1:B0A5 -  -  -  -  #define APU_KEYPAD -2   ;First to last: A,B,SE,ST,UP,DO,LE,RI. 01234567.
  134 D1:B0A5 -  -  -  -  #define APU_KEYLATCH -1
  135 D1:B0A5 -  -  -  -  ;core memory
  136 D1:B0A5 -  -  -  -  #define REGA 0
  137 D1:B0A5 -  -  -  -  #define REGX 1
  138 D1:B0A5 -  -  -  -  #define REGY 2
  139 D1:B0A5 -  -  -  -  #define REGSP 3
  140 D1:B0A5 -  -  -  -  #define REGSR 4
  141 D1:B0A5 -  -  -  -  #define REGPC 5
  142 D1:B0A5 -  -  -  -  #define CYCLES_REMAIN 8
  143 D1:B0A5 -  -  -  -  #define CYCLES_CURRENT 11
  144 D1:B0A5 -  -  -  -  #define CURRENT_OPCODES 14
  145 D1:B0A5 -  -  -  -  #define CORE_STACK_BASE 17
  146 D1:B0A5 -  -  -  -  #define CORE_ERROR_LEVEL 20
  147 D1:B0A5 -  -  -  -  #define SCRAP_COUNTER 21
  148 D1:B0A5 -  -  -  -  #define PORT_WRITE_TIMESTAMP 24
  149 D1:B0A5 -  -  -  -  #define TEMP_MEMORY 27
  150 D1:B0A5 -  -  -  -  #define NMI_TRIGGERED 30 
  151 D1:B0A5 -  -  -  -  #define PREV_INSTR 31
  152 D1:B0A5 -  -  -  -  ;flag IDs
  153 D1:B0A5 -  -  -  -  #define SF_NEG 7
  154 D1:B0A5 -  -  -  -  #define SF_OVER 6 
  155 D1:B0A5 -  -  -  -  #define SF_RESERVED 5 
  156 D1:B0A5 -  -  -  -  #define SF_BRK 4
  157 D1:B0A5 -  -  -  -  #define SF_DEC 3
  158 D1:B0A5 -  -  -  -  #define SF_INT 2
  159 D1:B0A5 -  -  -  -  #define SF_ZERO 1
  160 D1:B0A5 -  -  -  -  #define SF_CARRY 0
  161 D1:B0A5 -  -  -  -  
  162 D1:B0A5 -  -  -  -  #macro ADDCYC(X)
  163 D1:B0A5                 #if (x < 1)
  164 D1:B0A5                     nop
  165 D1:B0A5                 #elif (X = 1)
  166 D1:B0A5                     inc iy
  167 D1:B0A5                 #else
  168 D1:B0A5                     lea iy,iy+X
  169 D1:B0A5                 #endif
  170 D1:B0A5             #endmacro
  171 D1:B0A5 -  -  -  -  
  172 D1:B0A5 -  -  -  -  ;
  173 D1:B0A5 -  -  -  -  ;
  174 D1:B0A5 -  -  -  -  ;
  175 D1:B0A5 -  -  -  -  #endif
  176 D1:B0A5 -  -  -  -  .list
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    3 D1:B0A5 -  -  -  -  
    4 D1:B0A5 -  -  -  -  ;Function list:
    5 D1:B0A5 -  -  -  -  ; fastCopy - Swaps drawing buffer to display what is currently written there.
    6 D1:B0A5 -  -  -  -  ; startGfx - Configures LCD to run in graphx mode. UNSAFE TO RUN MORE THAN ONCE
    7 D1:B0A5 -  -  -  -  ; stopGfx - Restores LCD configuration to TI-OS default.
    8 D1:B0A5 -  -  -  -  ; configureScreen - Swaps screen configuration betwen current and stored.
    9 D1:B0A5 -  -  -  -  ; setDefaultPalette - Sets default (XLIBC) color palette.
   10 D1:B0A5 -  -  -  -  ; clearTextBuf - no inputs. Sets text buffer to all spaces.
   11 D1:B0A5 -  -  -  -  ; printTextBuf - no inputs. Mirrors buffer to screen.
   12 D1:B0A5 -  -  -  -  ; setLineStart - A=xpos. Set xPos and linestart
   13 D1:B0A5 -  -  -  -  ; setCurLine - A=ypos. Set yPos.
   14 D1:B0A5 -  -  -  -  ; newLine - no inputs. sets linestart = xPos, increments yPos
   15 D1:B0A5 -  -  -  -  ; newPage - no inputs. sets linestart = xPos, yPos = 0
   16 D1:B0A5 -  -  -  -  ; printString - HL=address to string. destroys all.
   17 D1:B0A5 -  -  -  -  ; printBigFont - A=ASCII char to print at xPos,yPos. Advances xPos by 1.
   18 D1:B0A5 -  -  -  -  ; printSmallNumPair - A=0-255 to print at xPos,Ypos. Advances xPos by 1.
   19 D1:B0A5 -  -  -  -  ; calculateScreenPtr - Converts xPos,yPos into HL= screen buffer address.
   20 D1:B0A5 -  -  -  -  ; calculateScreenPtrDE - Converts E=xPos,D=yPos into HL= screen buffer address.
   21 D1:B0A5 -  -  -  -  ;
   22 D1:B0A5 -  -  -  -  ;
   23 D1:B0A5 -  -  -  -  ;
   24 D1:B0A5 -  -  -  -  ;
   25 D1:B0A5 -  -  -  -  ;
   26 D1:B0A5 -  -  -  -  ;
   27 D1:B0A5 -  -  -  -  ;
   28 D1:B0A5 -  -  -  -  
   29 D1:B0A5 -  -  -  -  
   30 D1:B0A5 -  -  -  -  
   31 D1:B0A5 -  -  -  -  
   32 D1:B0A5 -  -  -  -  ;-----------------------------------------------------------------------------
   33 D1:B0A5 -  -  -  -  ;Screen hardware interface stuff
   34 D1:B0A5 -  -  -  -  
   35 D1:B0A5 -  -  -  -  ;It ought to be called "bufSwap" but I just can't. I won't.
   36 D1:B0A5 -  -  -  -  fastCopy:
   37 D1:B0A5 11 00 00 D4     ld  de,screenBuf1
   38 D1:B0A9 2A 10 00 E3     ld  hl,(mpLcdBase)
   39 D1:B0AD 22 28 34 D0     ld  (curScreenBuf),hl
   40 D1:B0B1 B7 -  -  -      or  a,a
   41 D1:B0B2 ED 52 -  -      sbc hl,de
   42 D1:B0B4 EB -  -  -      ex  de,hl
   43 D1:B0B5 20 04 -  -      jr  nz,+_
   44 D1:B0B7 21 00 2C D5     ld  hl,screenBuf2
   45 D1:B0BB 22 10 00 E3 _:  ld  (mpLcdBase),hl
   46 D1:B0BF C9 -  -  -      ret
   47 D1:B0C0 -  -  -  -  
   48 D1:B0C0 -  -  -  -  stopGfx:
   49 D1:B0C0 CD 74 03 00     call _boot_ClearVRAM
   50 D1:B0C4 11 2D 09 00     ld  de,lcdNormalMode
   51 D1:B0C8 01 00 00 D4     ld  bc,screenBuf1
   52 D1:B0CC 18 0C -  -      jr  configureScreen
   53 D1:B0CE -  -  -  -  
   54 D1:B0CE -  -  -  -  startGfx:
   55 D1:B0CE CD 74 03 00     call _boot_ClearVRAM
   56 D1:B0D2 11 27 38 01     ld  de,lcdWatermark+lcdIntFront+lcdPwr+lcdBpp8 ;+lcdBgr
   57 D1:B0D6 01 00 00 D4     ld  bc,screenBuf1
   58 D1:B0DA -  -  -  -  configureScreen:
   59 D1:B0DA 21 10 00 E3     ld  hl,mpLcdBase
   60 D1:B0DE ED 0F -  -      ld  (hl),bc
   61 D1:B0E0 2E 18 -  -      ld  L,lcdCtrl
   62 D1:B0E2 ED 1F -  -      ld  (hl),de
   63 D1:B0E4 2E 01 -  -      ld  L,lcdTiming0 + 1
   64 D1:B0E6 01 08 00 00     ld  bc,8
   65 D1:B0EA 11 19 B1 D1     ld  de,screenSettings
   66 D1:B0EE 1A -  -  -  _:  ld  a,(de)
   67 D1:B0EF ED A0 -  -      ldi
   68 D1:B0F1 2B -  -  -      dec hl
   69 D1:B0F2 77 -  -  -      ld  (hl),a
   70 D1:B0F3 23 -  -  -      inc hl
   71 D1:B0F4 EA EE B0 D1     jp  pe,-_
   72 D1:B0F8 21 00 2C D5     ld  hl,screenBuf2
   73 D1:B0FC 22 28 34 D0     ld  (curScreenBuf),hl
   74 D1:B100 -  -  -  -  ;Also copied from graphx
   75 D1:B100 -  -  -  -  setDefaultPalette:
   76 D1:B100 11 00 02 E3 	ld	de,mpLcdPalette	    ; address of mmio palette
   77 D1:B104 43 -  -  -  	ld	b,e			        ; b = 0
   78 D1:B105 78 -  -  -  _:	ld	a,b
   79 D1:B106 0F -  -  -  	rrca
   80 D1:B107 A8 -  -  -  	xor	a,b
   81 D1:B108 E6 E0 -  -  	and	a,224
   82 D1:B10A A8 -  -  -  	xor	a,b
   83 D1:B10B 12 -  -  -  	ld	(de),a
   84 D1:B10C 13 -  -  -  	inc	de
   85 D1:B10D 78 -  -  -  	ld	a,b
   86 D1:B10E 17 -  -  -  	rla
   87 D1:B10F 17 -  -  -  	rla
   88 D1:B110 17 -  -  -  	rla
   89 D1:B111 78 -  -  -  	ld	a,b
   90 D1:B112 1F -  -  -  	rra
   91 D1:B113 12 -  -  -  	ld	(de),a
   92 D1:B114 13 -  -  -  	inc	de
   93 D1:B115 04 -  -  -  	inc	b
   94 D1:B116 20 ED -  -  	jr	nz,-_		    ; loop for 256 times to fill palette
   95 D1:B118 C9 -  -  -  	ret
   96 D1:B119 -  -  -  -  
   97 D1:B119 -  -  -  -  screenSettings:
   98 D1:B119 -  -  -  -  ;Copied from my old Falldown2 project, which was also copied from graphx.asm
   99 D1:B119 -  -  -  -  ;	.db	14 shl 2			; PPL shl 2
  100 D1:B119 07 -  -  -  	.db	7					; HSW
  101 D1:B11A 57 -  -  -  	.db	87					; HFP
  102 D1:B11B 3F -  -  -  	.db	63					; HBP
  103 D1:B11C 3F 01 -  -  	.dw	(0 >> 10)+319		; (VSW shl 10)+LPP
  104 D1:B11E B3 -  -  -  	.db	179					; VFP
  105 D1:B11F 00 -  -  -  	.db	0					; VBP
  106 D1:B120 00 -  -  -  	.db	(0 >> 6)+(0 >> 5)+0	; (ACB shl 6)+(CLKSEL shl 5)+PCD_LO
  107 D1:B121 -  -  -  -  ;  H = ((PPL+1)*16)+(HSW+1)+(HFP+1)+(HBP+1) = 240+8+88+64 = 400
  108 D1:B121 -  -  -  -  ;  V = (LPP+1)+(VSW+1)+VFP+VBP = 320+1+179+0 = 500
  109 D1:B121 -  -  -  -  ; CC = H*V*PCD*2 = 400*500*2*2 = 800000
  110 D1:B121 -  -  -  -  ; Hz = 48000000/CC = 60
  111 D1:B121 -  -  -  -  
  112 D1:B121 -  -  -  -  
  113 D1:B121 -  -  -  -  ;-----------------------------------------------------------------------------
  114 D1:B121 -  -  -  -  ; Text Rendering
  115 D1:B121 -  -  -  -  
  116 D1:B121 -  -  -  -  clearTextBuf:
  117 D1:B121 21 00 58 D0     ld  hl,NAMETABLE1
  118 D1:B125 11 01 58 D0     ld  de,NAMETABLE1+1
  119 D1:B129 01 FF 03 00     ld  bc,1023
  120 D1:B12D 36 20 -  -      ld  (hl),' '
  121 D1:B12F ED B0 -  -      ldir
  122 D1:B131 C9 -  -  -      ret
  123 D1:B132 -  -  -  -  
  124 D1:B132 -  -  -  -  printTextBuf:
  125 D1:B132 2A F6 31 D0     ld  hl,(xPos)
  126 D1:B136 22 66 B1 D1     ld  (printTextBuf_smcPosRecovery),hl
  127 D1:B13A 21 00 58 D0     ld  hl,NAMETABLE1
  128 D1:B13E AF -  -  -      xor a,a
  129 D1:B13F 32 F7 31 D0     ld  (yPos),a
  130 D1:B143 0E 1E -  -      ld  c,30
  131 D1:B145 3E 08 -  -  _:  ld  a,8
  132 D1:B147 32 F6 31 D0     ld  (xPos),a
  133 D1:B14B 06 20 -  -      ld  b,$20
  134 D1:B14D 7E -  -  -  _:  ld  a,(hl)
  135 D1:B14E 23 -  -  -      inc hl
  136 D1:B14F C5 -  -  -      push bc
  137 D1:B150 E5 -  -  -          push hl
  138 D1:B151 CD AF B1 D1             call printBigFont
  139 D1:B155 E1 -  -  -          pop hl
  140 D1:B156 C1 -  -  -      pop bc
  141 D1:B157 10 F4 -  -      djnz -_
  142 D1:B159 3A F7 31 D0     ld  a,(yPos)
  143 D1:B15D 3C -  -  -      inc a
  144 D1:B15E 32 F7 31 D0     ld  (yPos),a
  145 D1:B162 0D -  -  -      dec  c
  146 D1:B163 20 E0 -  -      jr  nz,--_
  147 D1:B165 -  -  -  -  printTextBuf_smcPosRecovery .equ $+1
  148 D1:B165 21 00 00 00     ld  hl,0
  149 D1:B169 22 F6 31 D0     ld  (xPos),hl
  150 D1:B16D C9 -  -  -      ret
  151 D1:B16E -  -  -  -  
  152 D1:B16E -  -  -  -  ;A=column to start on
  153 D1:B16E -  -  -  -  setLineStart:
  154 D1:B16E 32 F6 31 D0     ld  (xPos),a
  155 D1:B172 32 2B 34 D0     ld  (linestart),a
  156 D1:B176 C9 -  -  -      ret
  157 D1:B177 -  -  -  -  
  158 D1:B177 -  -  -  -  ;A=row to start on
  159 D1:B177 -  -  -  -  setCurLine:
  160 D1:B177 32 F7 31 D0     ld  (yPos),a
  161 D1:B17B C9 -  -  -      ret
  162 D1:B17C -  -  -  -  
  163 D1:B17C -  -  -  -  newPage:
  164 D1:B17C 3E FF -  -      ld  a,$FF
  165 D1:B17E 32 F7 31 D0     ld  (yPos),a
  166 D1:B182 -  -  -  -  newLine:
  167 D1:B182 3A 2B 34 D0     ld  a,(linestart)
  168 D1:B186 32 F6 31 D0     ld  (xPos),a
  169 D1:B18A 3A F7 31 D0     ld  a,(yPos)
  170 D1:B18E 3C -  -  -      inc a
  171 D1:B18F FE 1E -  -      cp  30
  172 D1:B191 38 01 -  -      jr  c,+_
  173 D1:B193 AF -  -  -      xor a,a
  174 D1:B194 32 F7 31 D0 _:  ld  (yPos),a
  175 D1:B198 C9 -  -  -      ret
  176 D1:B199 -  -  -  -  
  177 D1:B199 -  -  -  -      
  178 D1:B199 -  -  -  -      
  179 D1:B199 -  -  -  -  
  180 D1:B199 -  -  -  -  ;HL=address to string
  181 D1:B199 -  -  -  -  printString:
  182 D1:B199 7E -  -  -      ld  a,(hl)
  183 D1:B19A 23 -  -  -      inc hl
  184 D1:B19B B7 -  -  -      or  a,a
  185 D1:B19C C8 -  -  -      ret z
  186 D1:B19D FE 0A -  -      cp  a,'\n'
  187 D1:B19F 20 06 -  -      jr nz,+_
  188 D1:B1A1 CD 82 B1 D1     call newLine
  189 D1:B1A5 18 F2 -  -      jr  printString
  190 D1:B1A7 E5 -  -  -  _:  push hl
  191 D1:B1A8 CD AF B1 D1         call printBigFont
  192 D1:B1AC E1 -  -  -      pop hl
  193 D1:B1AD 18 EA -  -      jr printString
  194 D1:B1AF -  -  -  -  
  195 D1:B1AF -  -  -  -  
  196 D1:B1AF -  -  -  -  ;in: A=chrToPrint
  197 D1:B1AF -  -  -  -  printBigFont:
  198 D1:B1AF CD 44 B2 D1     call calculateScreenPtr
  199 D1:B1B3 EB -  -  -      ex  de,hl
  200 D1:B1B4 6F -  -  -      ld  L,a
  201 D1:B1B5 26 08 -  -      ld  H,8
  202 D1:B1B7 ED 6C -  -      mlt hl
  203 D1:B1B9 01 5E B1 D1     ld  bc,graphx_textdata
  204 D1:B1BD 09 -  -  -      add hl,bc
  205 D1:B1BE EB -  -  -      ex  de,hl
  206 D1:B1BF 0E 08 -  -      ld  c,8
  207 D1:B1C1 06 08 -  -  _:  ld  b,8
  208 D1:B1C3 1A -  -  -      ld  a,(de)
  209 D1:B1C4 87 -  -  -  _:  add a,a
  210 D1:B1C5 -  -  -  -  fontBGColor_var .equ $+1
  211 D1:B1C5 36 00 -  -      ld  (hl),FONTBGCOLOR
  212 D1:B1C7 30 02 -  -      jr  nc,$+4
  213 D1:B1C9 -  -  -  -  fontFGColor_var .equ $+1
  214 D1:B1C9 36 FF -  -      ld  (hl),FONTFGCOLOR
  215 D1:B1CB 23 -  -  -      inc hl
  216 D1:B1CC 10 F6 -  -      djnz -_
  217 D1:B1CE 79 -  -  -      ld  a,c
  218 D1:B1CF 01 38 01 00     ld  bc,320-8
  219 D1:B1D3 09 -  -  -      add hl,bc
  220 D1:B1D4 4F -  -  -      ld  c,a
  221 D1:B1D5 13 -  -  -      inc de
  222 D1:B1D6 0D -  -  -      dec c
  223 D1:B1D7 20 E8 -  -      jr  nz,--_
  224 D1:B1D9 21 F6 31 D0     ld  hl,xPos
  225 D1:B1DD 34 -  -  -      inc (hl)
  226 D1:B1DE C9 -  -  -      ret
  227 D1:B1DF -  -  -  -  
  228 D1:B1DF -  -  -  -  ;A= 0-255 numeric value to display as hex
  229 D1:B1DF -  -  -  -  printSmallNumPair:
  230 D1:B1DF CD 44 B2 D1     call calculateScreenPtr
  231 D1:B1E3 F5 -  -  -      push af
  232 D1:B1E4 1F -  -  -          rra
  233 D1:B1E5 1F -  -  -          rra
  234 D1:B1E6 1F -  -  -          rra
  235 D1:B1E7 1F -  -  -          rra
  236 D1:B1E8 CD F7 B1 D1         call +_
  237 D1:B1EC F1 -  -  -      pop af
  238 D1:B1ED CD F7 B1 D1     call +_
  239 D1:B1F1 21 F6 31 D0     ld  hl,xPos
  240 D1:B1F5 34 -  -  -      inc (hl)
  241 D1:B1F6 C9 -  -  -      ret
  242 D1:B1F7 E6 0F -  -  _:  and a,$0F
  243 D1:B1F9 01 40 01 00     ld  bc,320
  244 D1:B1FD 09 -  -  -      add hl,bc   ;drop height by one. These small chars are *short*
  245 D1:B1FE EB -  -  -      ex  de,hl
  246 D1:B1FF 6F -  -  -      ld  L,a
  247 D1:B200 26 03 -  -      ld  H,3
  248 D1:B202 ED 6C -  -      mlt hl
  249 D1:B204 01 5E B5 D1     ld  bc,SmallHexFont
  250 D1:B208 09 -  -  -      add hl,bc
  251 D1:B209 EB -  -  -      ex  de,hl
  252 D1:B20A 0E 03 -  -      ld  c,3
  253 D1:B20C 18 14 -  -      jr  printSmallNumPair_2ndHalf
  254 D1:B20E -  -  -  -  printSmallNumPair_1stHalf:
  255 D1:B20E 1A -  -  -      ld  a,(de)
  256 D1:B20F 06 04 -  -      ld  b,4
  257 D1:B211 87 -  -  -  _:  add a,a
  258 D1:B212 -  -  -  -  smallFontBGColor_var .equ $+1
  259 D1:B212 36 00 -  -      ld  (hl),FONTBGCOLOR
  260 D1:B214 30 02 -  -      jr  nc,$+4
  261 D1:B216 -  -  -  -  smallFontFGColor_var .equ $+1
  262 D1:B216 36 FF -  -      ld  (hl),FONTFGCOLOR
  263 D1:B218 23 -  -  -      inc hl
  264 D1:B219 10 F6 -  -      djnz -_
  265 D1:B21B 79 -  -  -      ld  a,c
  266 D1:B21C 01 3C 01 00     ld  bc,320-4
  267 D1:B220 09 -  -  -      add hl,bc
  268 D1:B221 4F -  -  -      ld  c,a
  269 D1:B222 -  -  -  -  printSmallNumPair_2ndHalf:
  270 D1:B222 1A -  -  -      ld  a,(de)
  271 D1:B223 07 -  -  -      rlca
  272 D1:B224 07 -  -  -      rlca
  273 D1:B225 07 -  -  -      rlca
  274 D1:B226 07 -  -  -      rlca
  275 D1:B227 06 04 -  -      ld  b,4
  276 D1:B229 87 -  -  -  _:  add a,a
  277 D1:B22A 36 00 -  -      ld  (hl),FONTBGCOLOR
  278 D1:B22C 30 02 -  -      jr  nc,$+4
  279 D1:B22E 36 FF -  -      ld  (hl),FONTFGCOLOR
  280 D1:B230 23 -  -  -      inc hl
  281 D1:B231 10 F6 -  -      djnz -_
  282 D1:B233 13 -  -  -      inc de
  283 D1:B234 79 -  -  -      ld  a,c
  284 D1:B235 01 3C 01 00     ld  bc,320-4
  285 D1:B239 09 -  -  -      add hl,bc
  286 D1:B23A 4F -  -  -      ld  c,a
  287 D1:B23B 0D -  -  -      dec c
  288 D1:B23C 20 D0 -  -      jr  nz,printSmallNumPair_1stHalf
  289 D1:B23E 01 84 F8 FF     ld  bc,-(320*(1+5))+4
  290 D1:B242 09 -  -  -      add hl,bc
  291 D1:B243 C9 -  -  -      ret
  292 D1:B244 -  -  -  -  
  293 D1:B244 -  -  -  -  calculateScreenPtr:
  294 D1:B244 -  -  -  -      ;xcoord: x * 8 
  295 D1:B244 -  -  -  -      ;ycoord: 320 * 8 * y
  296 D1:B244 -  -  -  -      ;coord: (8x)+320*8y -> 8(x+320y)
  297 D1:B244 ED 5B F6 31 
              D0 -  -  -      ld  de,(xPos)
  298 D1:B249 -  -  -  -  calculateScreenPtrDE:
  299 D1:B249 6A -  -  -      ld  L,d     ;yPos
  300 D1:B24A 26 A0 -  -      ld  h,160
  301 D1:B24C ED 6C -  -      mlt hl
  302 D1:B24E 29 -  -  -      add hl,hl
  303 D1:B24F 16 01 -  -      ld  d,1
  304 D1:B251 ED 5C -  -      mlt de      ;DE=E. Clears high bytes.
  305 D1:B253 19 -  -  -      add hl,de
  306 D1:B254 29 -  -  -      add hl,hl
  307 D1:B255 29 -  -  -      add hl,hl
  308 D1:B256 29 -  -  -      add hl,hl
  309 D1:B257 ED 5B 28 34 
              D0 -  -  -      ld  de,(curScreenBuf)
  310 D1:B25C 19 -  -  -      add hl,de
  311 D1:B25D C9 -  -  -      ret
  312 D1:B25E -  -  -  -  
  313 D1:B25E -  -  -  -  
  314 D1:B25E -  -  -  -  
  315 D1:B25E -  -  -  -  
  316 D1:B25E -  -  -  -  
  317 D1:B25E -  -  -  -  
  318 D1:B25E -  -  -  -  
  319 D1:B25E -  -  -  -  
  320 D1:B25E -  -  -  -  
  321 D1:B25E -  -  -  -  ;-----------------------------------------------------------------------------
  322 D1:B25E -  -  -  -  ; Data Section
  323 D1:B25E -  -  -  -  
  324 D1:B25E -  -  -  -  graphx_textdata		.EQU $-(8*' ')		;points to what would be start of ASCII
  325 D1:B25E 00 00 00 00 
              00 00 00 00 .db	$00,$00,$00,$00,$00,$00,$00,$00 ;
  326 D1:B266 C0 C0 C0 C0 
              C0 00 C0 00 .db	$C0,$C0,$C0,$C0,$C0,$00,$C0,$00 ; !
  327 D1:B26E D8 D8 D8 00 
              00 00 00 00 .db	$D8,$D8,$D8,$00,$00,$00,$00,$00 ; "
  328 D1:B276 6C 6C FE 6C 
              FE 6C 6C 00 .db	$6C,$6C,$FE,$6C,$FE,$6C,$6C,$00 ; #
  329 D1:B27E 18 7E C0 7C 
              06 FC 18 00 .db	$18,$7E,$C0,$7C,$06,$FC,$18,$00 ; $
  330 D1:B286 00 C6 CC 18 
              30 66 C6 00 .db	$00,$C6,$CC,$18,$30,$66,$C6,$00 ; %
  331 D1:B28E 38 6C 38 76 
              DC CC 76 00 .db	$38,$6C,$38,$76,$DC,$CC,$76,$00 ; &
  332 D1:B296 30 30 60 00 
              00 00 00 00 .db	$30,$30,$60,$00,$00,$00,$00,$00 ; '
  333 D1:B29E 30 60 C0 C0 
              C0 60 30 00 .db	$30,$60,$C0,$C0,$C0,$60,$30,$00 ; (
  334 D1:B2A6 C0 60 30 30 
              30 60 C0 00 .db	$C0,$60,$30,$30,$30,$60,$C0,$00 ; )
  335 D1:B2AE 00 66 3C FF 
              3C 66 00 00 .db	$00,$66,$3C,$FF,$3C,$66,$00,$00 ; *
  336 D1:B2B6 00 30 30 FC 
              FC 30 30 00 .db	$00,$30,$30,$FC,$FC,$30,$30,$00 ; +
  337 D1:B2BE 00 00 00 00 
              00 60 60 C0 .db	$00,$00,$00,$00,$00,$60,$60,$C0 ; ,
  338 D1:B2C6 00 00 00 FC 
              00 00 00 00 .db	$00,$00,$00,$FC,$00,$00,$00,$00 ; -
  339 D1:B2CE 00 00 00 00 
              00 C0 C0 00 .db	$00,$00,$00,$00,$00,$C0,$C0,$00 ; .
  340 D1:B2D6 06 0C 18 30 
              60 C0 80 00 .db	$06,$0C,$18,$30,$60,$C0,$80,$00 ; /
  341 D1:B2DE 7C CE DE F6 
              E6 C6 7C 00 .db	$7C,$CE,$DE,$F6,$E6,$C6,$7C,$00 ; 0
  342 D1:B2E6 30 70 30 30 
              30 30 FC 00 .db	$30,$70,$30,$30,$30,$30,$FC,$00 ; 1
  343 D1:B2EE 7C C6 06 7C 
              C0 C0 FE 00 .db	$7C,$C6,$06,$7C,$C0,$C0,$FE,$00 ; 2
  344 D1:B2F6 FC 06 06 3C 
              06 06 FC 00 .db	$FC,$06,$06,$3C,$06,$06,$FC,$00 ; 3
  345 D1:B2FE 0C CC CC CC 
              FE 0C 0C 00 .db	$0C,$CC,$CC,$CC,$FE,$0C,$0C,$00 ; 4
  346 D1:B306 FE C0 FC 06 
              06 C6 7C 00 .db	$FE,$C0,$FC,$06,$06,$C6,$7C,$00 ; 5
  347 D1:B30E 7C C0 C0 FC 
              C6 C6 7C 00 .db	$7C,$C0,$C0,$FC,$C6,$C6,$7C,$00 ; 6
  348 D1:B316 FE 06 06 0C 
              18 30 30 00 .db	$FE,$06,$06,$0C,$18,$30,$30,$00 ; 7
  349 D1:B31E 7C C6 C6 7C 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$7C,$C6,$C6,$7C,$00 ; 8
  350 D1:B326 7C C6 C6 7E 
              06 06 7C 00 .db	$7C,$C6,$C6,$7E,$06,$06,$7C,$00 ; 9
  351 D1:B32E 00 C0 C0 00 
              00 C0 C0 00 .db	$00,$C0,$C0,$00,$00,$C0,$C0,$00 ; :
  352 D1:B336 00 60 60 00 
              00 60 60 C0 .db	$00,$60,$60,$00,$00,$60,$60,$C0 ; ;
  353 D1:B33E 18 30 60 C0 
              60 30 18 00 .db	$18,$30,$60,$C0,$60,$30,$18,$00 ; <
  354 D1:B346 00 00 FC 00 
              FC 00 00 00 .db	$00,$00,$FC,$00,$FC,$00,$00,$00 ; =
  355 D1:B34E C0 60 30 18 
              30 60 C0 00 .db	$C0,$60,$30,$18,$30,$60,$C0,$00 ; >
  356 D1:B356 78 CC 18 30 
              30 00 30 00 .db	$78,$CC,$18,$30,$30,$00,$30,$00 ; ?
  357 D1:B35E 7C C6 DE DE 
              DE C0 7E 00 .db	$7C,$C6,$DE,$DE,$DE,$C0,$7E,$00 ; @
  358 D1:B366 38 6C C6 C6 
              FE C6 C6 00 .db	$38,$6C,$C6,$C6,$FE,$C6,$C6,$00 ; A
  359 D1:B36E FC C6 C6 FC 
              C6 C6 FC 00 .db	$FC,$C6,$C6,$FC,$C6,$C6,$FC,$00 ; B
  360 D1:B376 7C C6 C0 C0 
              C0 C6 7C 00 .db	$7C,$C6,$C0,$C0,$C0,$C6,$7C,$00 ; C
  361 D1:B37E F8 CC C6 C6 
              C6 CC F8 00 .db	$F8,$CC,$C6,$C6,$C6,$CC,$F8,$00 ; D
  362 D1:B386 FE C0 C0 F8 
              C0 C0 FE 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$FE,$00 ; E
  363 D1:B38E FE C0 C0 F8 
              C0 C0 C0 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$C0,$00 ; F
  364 D1:B396 7C C6 C0 C0 
              CE C6 7C 00 .db	$7C,$C6,$C0,$C0,$CE,$C6,$7C,$00 ; G
  365 D1:B39E C6 C6 C6 FE 
              C6 C6 C6 00 .db	$C6,$C6,$C6,$FE,$C6,$C6,$C6,$00 ; H
  366 D1:B3A6 7E 18 18 18 
              18 18 7E 00 .db	$7E,$18,$18,$18,$18,$18,$7E,$00 ; I
  367 D1:B3AE 06 06 06 06 
              06 C6 7C 00 .db	$06,$06,$06,$06,$06,$C6,$7C,$00 ; J
  368 D1:B3B6 C6 CC D8 F0 
              D8 CC C6 00 .db	$C6,$CC,$D8,$F0,$D8,$CC,$C6,$00 ; K
  369 D1:B3BE C0 C0 C0 C0 
              C0 C0 FE 00 .db	$C0,$C0,$C0,$C0,$C0,$C0,$FE,$00 ; L
  370 D1:B3C6 C6 EE FE FE 
              D6 C6 C6 00 .db	$C6,$EE,$FE,$FE,$D6,$C6,$C6,$00 ; M
  371 D1:B3CE C6 E6 F6 DE 
              CE C6 C6 00 .db	$C6,$E6,$F6,$DE,$CE,$C6,$C6,$00 ; N
  372 D1:B3D6 7C C6 C6 C6 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$C6,$C6,$C6,$7C,$00 ; O
  373 D1:B3DE FC C6 C6 FC 
              C0 C0 C0 00 .db	$FC,$C6,$C6,$FC,$C0,$C0,$C0,$00 ; P
  374 D1:B3E6 7C C6 C6 C6 
              D6 DE 7C 06 .db	$7C,$C6,$C6,$C6,$D6,$DE,$7C,$06 ; Q
  375 D1:B3EE FC C6 C6 FC 
              D8 CC C6 00 .db	$FC,$C6,$C6,$FC,$D8,$CC,$C6,$00 ; R
  376 D1:B3F6 7C C6 C0 7C 
              06 C6 7C 00 .db	$7C,$C6,$C0,$7C,$06,$C6,$7C,$00 ; S
  377 D1:B3FE FF 18 18 18 
              18 18 18 00 .db	$FF,$18,$18,$18,$18,$18,$18,$00 ; T
  378 D1:B406 C6 C6 C6 C6 
              C6 C6 FE 00 .db	$C6,$C6,$C6,$C6,$C6,$C6,$FE,$00 ; U
  379 D1:B40E C6 C6 C6 C6 
              C6 7C 38 00 .db	$C6,$C6,$C6,$C6,$C6,$7C,$38,$00 ; V
  380 D1:B416 C6 C6 C6 C6 
              D6 FE 6C 00 .db	$C6,$C6,$C6,$C6,$D6,$FE,$6C,$00 ; W
  381 D1:B41E C6 C6 6C 38 
              6C C6 C6 00 .db	$C6,$C6,$6C,$38,$6C,$C6,$C6,$00 ; X
  382 D1:B426 C6 C6 C6 7C 
              18 30 E0 00 .db	$C6,$C6,$C6,$7C,$18,$30,$E0,$00 ; Y
  383 D1:B42E FE 06 0C 18 
              30 60 FE 00 .db	$FE,$06,$0C,$18,$30,$60,$FE,$00 ; Z
  384 D1:B436 F0 C0 C0 C0 
              C0 C0 F0 00 .db	$F0,$C0,$C0,$C0,$C0,$C0,$F0,$00 ; [
  385 D1:B43E C0 60 30 18 
              0C 06 02 00 .db	$C0,$60,$30,$18,$0C,$06,$02,$00 ; \
  386 D1:B446 F0 30 30 30 
              30 30 F0 00 .db	$F0,$30,$30,$30,$30,$30,$F0,$00 ; ]
  387 D1:B44E 10 38 6C C6 
              00 00 00 00 .db	$10,$38,$6C,$C6,$00,$00,$00,$00 ; ^
  388 D1:B456 00 00 00 00 
              00 00 00 FF .db	$00,$00,$00,$00,$00,$00,$00,$FF ; _
  389 D1:B45E C0 C0 60 00 
              00 00 00 00 .db	$C0,$C0,$60,$00,$00,$00,$00,$00 ; `
  390 D1:B466 00 00 7C 06 
              7E C6 7E 00 .db	$00,$00,$7C,$06,$7E,$C6,$7E,$00 ; a
  391 D1:B46E C0 C0 C0 FC 
              C6 C6 FC 00 .db	$C0,$C0,$C0,$FC,$C6,$C6,$FC,$00 ; b
  392 D1:B476 00 00 7C C6 
              C0 C6 7C 00 .db	$00,$00,$7C,$C6,$C0,$C6,$7C,$00 ; c
  393 D1:B47E 06 06 06 7E 
              C6 C6 7E 00 .db	$06,$06,$06,$7E,$C6,$C6,$7E,$00 ; d
  394 D1:B486 00 00 7C C6 
              FE C0 7C 00 .db	$00,$00,$7C,$C6,$FE,$C0,$7C,$00 ; e
  395 D1:B48E 1C 36 30 78 
              30 30 78 00 .db	$1C,$36,$30,$78,$30,$30,$78,$00 ; f
  396 D1:B496 00 00 7E C6 
              C6 7E 06 FC .db	$00,$00,$7E,$C6,$C6,$7E,$06,$FC ; g
  397 D1:B49E C0 C0 FC C6 
              C6 C6 C6 00 .db	$C0,$C0,$FC,$C6,$C6,$C6,$C6,$00 ; h
  398 D1:B4A6 18 00 38 18 
              18 18 3C 00 .db	$18,$00,$38,$18,$18,$18,$3C,$00 ; i
  399 D1:B4AE 06 00 06 06 
              06 06 C6 7C .db	$06,$00,$06,$06,$06,$06,$C6,$7C ; j
  400 D1:B4B6 C0 C0 CC D8 
              F8 CC C6 00 .db	$C0,$C0,$CC,$D8,$F8,$CC,$C6,$00 ; k
  401 D1:B4BE 38 18 18 18 
              18 18 3C 00 .db	$38,$18,$18,$18,$18,$18,$3C,$00 ; l
  402 D1:B4C6 00 00 CC FE 
              FE D6 D6 00 .db	$00,$00,$CC,$FE,$FE,$D6,$D6,$00 ; m
  403 D1:B4CE 00 00 FC C6 
              C6 C6 C6 00 .db	$00,$00,$FC,$C6,$C6,$C6,$C6,$00 ; n
  404 D1:B4D6 00 00 7C C6 
              C6 C6 7C 00 .db	$00,$00,$7C,$C6,$C6,$C6,$7C,$00 ; o
  405 D1:B4DE 00 00 FC C6 
              C6 FC C0 C0 .db	$00,$00,$FC,$C6,$C6,$FC,$C0,$C0 ; p
  406 D1:B4E6 00 00 7E C6 
              C6 7E 06 06 .db	$00,$00,$7E,$C6,$C6,$7E,$06,$06 ; q
  407 D1:B4EE 00 00 FC C6 
              C0 C0 C0 00 .db	$00,$00,$FC,$C6,$C0,$C0,$C0,$00 ; r
  408 D1:B4F6 00 00 7E C0 
              7C 06 FC 00 .db	$00,$00,$7E,$C0,$7C,$06,$FC,$00 ; s
  409 D1:B4FE 30 30 FC 30 
              30 30 1C 00 .db	$30,$30,$FC,$30,$30,$30,$1C,$00 ; t
  410 D1:B506 00 00 C6 C6 
              C6 C6 7E 00 .db	$00,$00,$C6,$C6,$C6,$C6,$7E,$00 ; u
  411 D1:B50E 00 00 C6 C6 
              C6 7C 38 00 .db	$00,$00,$C6,$C6,$C6,$7C,$38,$00 ; v
  412 D1:B516 00 00 C6 C6 
              D6 FE 6C 00 .db	$00,$00,$C6,$C6,$D6,$FE,$6C,$00 ; w
  413 D1:B51E 00 00 C6 6C 
              38 6C C6 00 .db	$00,$00,$C6,$6C,$38,$6C,$C6,$00 ; x
  414 D1:B526 00 00 C6 C6 
              C6 7E 06 FC .db	$00,$00,$C6,$C6,$C6,$7E,$06,$FC ; y
  415 D1:B52E 00 00 FE 0C 
              38 60 FE 00 .db	$00,$00,$FE,$0C,$38,$60,$FE,$00 ; z
  416 D1:B536 1C 30 30 E0 
              30 30 1C 00 .db	$1C,$30,$30,$E0,$30,$30,$1C,$00 ; {
  417 D1:B53E C0 C0 C0 00 
              C0 C0 C0 00 .db	$C0,$C0,$C0,$00,$C0,$C0,$C0,$00 ; |
  418 D1:B546 E0 30 30 1C 
              30 30 E0 00 .db	$E0,$30,$30,$1C,$30,$30,$E0,$00 ; }
  419 D1:B54E 76 DC 00 00 
              00 00 00 00 .db	$76,$DC,$00,$00,$00,$00,$00,$00 ; ~
  420 D1:B556 00 10 38 6C 
              C6 C6 FE 00 .db	$00,$10,$38,$6C,$C6,$C6,$FE,$00 ; △
  421 D1:B55E -  -  -  -  
  422 D1:B55E -  -  -  -  ;Copied from the Escheron: Twilight over Ragnoth project
  423 D1:B55E -  -  -  -  ;whose format was copied from a (then-)authorized source
  424 D1:B55E -  -  -  -  ;for DoorsCS (I think? The one for the 83+) by "Kerm Martian".
  425 D1:B55E -  -  -  -  SmallHexFont:
  426 D1:B55E 4E AA AE -  .db $4E,$AA,$AE				;zero
  427 D1:B561 44 C4 4E -  .db $44,$C4,$4E				;one
  428 D1:B564 4C 24 8E -  .db $4C,$24,$8E				;two
  429 D1:B567 4C 24 2C -  .db $4C,$24,$2C				;three
  430 D1:B56A 48 AE 22 -  .db $48,$AE,$22				;four
  431 D1:B56D 4E 8C 2C -  .db $4E,$8C,$2C				;five
  432 D1:B570 46 8E AE -  .db $46,$8E,$AE				;six
  433 D1:B573 4E 24 88 -  .db $4E,$24,$88				;seven
  434 D1:B576 4E AE AE -  .db $4E,$AE,$AE				;eight
  435 D1:B579 4E AE 2C -  .db $4E,$AE,$2C				;nine
  436 D1:B57C 44 AE AA -  .db $44,$AE,$AA				;A
  437 D1:B57F 4C AC AC -  .db $4C,$AC,$AC				;B
  438 D1:B582 46 88 86 -  .db $46,$88,$86				;C
  439 D1:B585 4C AA AC -  .db $4C,$AA,$AC				;D
  440 D1:B588 4E 8C 8E -  .db $4E,$8C,$8E				;E
  441 D1:B58B 4E 8C 88 -  .db $4E,$8C,$88				;F
  442 D1:B58E -  -  -  -  
  443 D1:B58E -  -  -  -  
  444 D1:B58E -  -  -  -  
Listing for file "main.z80"
  971 D1:B58E -  -  -  -  #include "coreint.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\coreint.z80"
    1 D1:B58E -  -  -  -  ; Code to handle interrup servicer. Note: This hinges on 
    2 D1:B58E -  -  -  -  ; PPU timing, so some of its initilization code will end up here too.
    3 D1:B58E -  -  -  -  ;
    4 D1:B58E -  -  -  -  
    5 D1:B58E -  -  -  -  
    6 D1:B58E -  -  -  -  ;This routine is called after the end of every insert/push/pop operation
    7 D1:B58E -  -  -  -  int6502_updateIntCounter:
    8 D1:B58E 21 60 34 D0     ld  hl,int_table_len
    9 D1:B592 7E -  -  -      ld  a,(hl)
   10 D1:B593 B7 -  -  -      or  a,a
   11 D1:B594 C8 -  -  -      ret z
   12 D1:B595 23 -  -  -      inc hl  ;advance to first pointer
   13 D1:B596 23 -  -  -      inc hl
   14 D1:B597 23 -  -  -      inc hl
   15 D1:B598 23 -  -  -      inc hl  ;advanced to first time
   16 D1:B599 ED 27 -  -      ld  hl,(hl)
   17 D1:B59B -  -  -  -      ;neg hl
   18 D1:B59B DD 2F 1B -      ld  (ix+TEMP_MEMORY),hl
   19 D1:B59E DD 7E 1D -      ld  a,(ix+TEMP_MEMORY+2)
   20 D1:B5A1 2F -  -  -      cpl
   21 D1:B5A2 DD 77 1D -      ld  (ix+TEMP_MEMORY+2),a
   22 D1:B5A5 DD 27 1B -      ld  hl,(ix+TEMP_MEMORY)
   23 D1:B5A8 7D -  -  -      ld  a,l
   24 D1:B5A9 2F -  -  -      cpl
   25 D1:B5AA 6F -  -  -      ld  l,a
   26 D1:B5AB 7C -  -  -      ld  a,h
   27 D1:B5AC 2F -  -  -      cpl
   28 D1:B5AD 67 -  -  -      ld  h,a
   29 D1:B5AE 23 -  -  -      inc hl
   30 D1:B5AF -  -  -  -      ;load to clock counter in "core.z80"
   31 D1:B5AF 22 35 B7 D1     ld  (i6502_interrupt_timer),hl
   32 D1:B5B3 C9 -  -  -      ret
   33 D1:B5B4 -  -  -  -  
   34 D1:B5B4 -  -  -  -  int6502_init:
   35 D1:B5B4 AF -  -  -      xor a,a
   36 D1:B5B5 32 60 34 D0     ld  (int_table_len),a
   37 D1:B5B9 C9 -  -  -      ret
   38 D1:B5BA -  -  -  -  
   39 D1:B5BA -  -  -  -  
   40 D1:B5BA -  -  -  -  ;Only call this inside the NMI handler, since that is the routine that adjusts
   41 D1:B5BA -  -  -  -  ;the cycle counter downard. All entries that remain on the table will by
   42 D1:B5BA -  -  -  -  ;have a higher count than the NMI. The table's probably empty, though.
   43 D1:B5BA -  -  -  -  ;BC=timeToAdjust IX=thing
   44 D1:B5BA -  -  -  -  int6502_adjustTimings:
   45 D1:B5BA DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
   46 D1:B5BF DD 7E FF -      ld  a,(ix-1)
   47 D1:B5C2 B7 -  -  -      or  a,a
   48 D1:B5C3 20 0F -  -      jr  nz,int6502_adjustTimings_noAdjust
   49 D1:B5C5 -  -  -  -  int6502_adjustTimings_loop:
   50 D1:B5C5 DD 27 03 -      ld  hl,(ix+INT_CYCLE_OFFSET)
   51 D1:B5C8 B7 -  -  -      or  a,a
   52 D1:B5C9 ED 42 -  -      sbc hl,bc
   53 D1:B5CB DD 2F 03 -      ld  (ix+INT_CYCLE_OFFSET),hl
   54 D1:B5CE ED 32 06 -      lea ix,ix+INT_TABLE_STRIDE
   55 D1:B5D1 3D -  -  -      dec a
   56 D1:B5D2 20 F1 -  -      jr  nz,int6502_adjustTimings_loop
   57 D1:B5D4 -  -  -  -  int6502_adjustTimings_noAdjust:
   58 D1:B5D4 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   59 D1:B5D9 C9 -  -  -      ret
   60 D1:B5DA -  -  -  -  
   61 D1:B5DA -  -  -  -  ;DE=ISRToPush, BC=CallWhenThisClockIsPassed
   62 D1:B5DA -  -  -  -  ;This routine is called in the ISR handler to both acknowledge the consumption
   63 D1:B5DA -  -  -  -  ;of its turn at the ISR, and to (potentially) push another entry to the stack.
   64 D1:B5DA -  -  -  -  ;This does not affect ths size of a table since this is a combined
   65 D1:B5DA -  -  -  -  ;pop-and-insert operation
   66 D1:B5DA -  -  -  -  int6502_pushISRAfterPop:
   67 D1:B5DA DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
   68 D1:B5DF DD 7E FF -      ld  a,(ix-1)        ;length of the table
   69 D1:B5E2 B7 -  -  -      or  a,a
   70 D1:B5E3 20 13 -  -      jr  nz,int6502_pushISRAfterPop_keepChecking
   71 D1:B5E5 -  -  -  -  int6502_pushISRAfterPop_writeFirstEntry:
   72 D1:B5E5 DD 36 FF 01     ld  (ix-1),1
   73 D1:B5E9 -  -  -  -  int6502_pushISRAfterPop_writeEntry:
   74 D1:B5E9 DD 1F 00 -      ld  (ix+0),de
   75 D1:B5EC DD 0F 03 -      ld  (ix+3),bc
   76 D1:B5EF DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   77 D1:B5F4 C3 8E B5 D1     jp  int6502_updateIntCounter
   78 D1:B5F8 -  -  -  -  int6502_pushISRAfterPop_keepChecking:
   79 D1:B5F8 3D -  -  -      dec a
   80 D1:B5F9 28 EA -  -      jr  z,int6502_pushISRAfterPop_writeFirstEntry
   81 D1:B5FB -  -  -  -      ;Loop steps:
   82 D1:B5FB -  -  -  -      ;If not loopCounter or BC < ix[0].T:
   83 D1:B5FB -  -  -  -      ;   ix[-1] = DE,BC
   84 D1:B5FB -  -  -  -      ;   STOP.
   85 D1:B5FB -  -  -  -      ;Else:
   86 D1:B5FB -  -  -  -      ;   ix[-1] = ix[0]
   87 D1:B5FB -  -  -  -      ;   ix += STRIDE
   88 D1:B5FB -  -  -  -      ;   --loopCounter;
   89 D1:B5FB -  -  -  -  int6502_pushISRAfterPop_loop:
   90 D1:B5FB ED 32 06 -      lea ix,ix+INT_TABLE_STRIDE
   91 D1:B5FE B7 -  -  -      or  a,a
   92 D1:B5FF 28 E8 -  -      jr  z,int6502_pushISRAfterPop_writeEntry
   93 D1:B601 DD 27 03 -      ld  hl,(ix+INT_CYCLE_OFFSET)
   94 D1:B604 ED 42 -  -      sbc hl,bc   ;C if ix[0]<BC
   95 D1:B606 38 E1 -  -      jr  c,int6502_pushISRAfterPop_writeEntry
   96 D1:B608 DD 27 00 -      ld  hl,(ix+INT_ADDR_OFFSET)
   97 D1:B60B DD 2F FA -      ld  (ix+INT_ADDR_OFFSET-INT_TABLE_STRIDE),hl
   98 D1:B60E DD 27 03 -      ld  hl,(ix+INT_CYCLE_OFFSET)
   99 D1:B611 DD 2F FD -      ld  (ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE),hl
  100 D1:B614 3D -  -  -      dec a
  101 D1:B615 18 E4 -  -      jr int6502_pushISRAfterPop_loop
  102 D1:B617 -  -  -  -      
  103 D1:B617 -  -  -  -  ;DE=ISRToPush, BC=CallWhenThisClockIsPassed
  104 D1:B617 -  -  -  -  ;This actually adds an entry to the stack.
  105 D1:B617 -  -  -  -  int6502_insertISA:
  106 D1:B617 DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
  107 D1:B61C DD 7E FF -      ld  a,(ix-1)
  108 D1:B61F B7 -  -  -      or  a,a
  109 D1:B620 28 C3 -  -      jr  z,int6502_pushISRAfterPop_writeFirstEntry
  110 D1:B622 FE 08 -  -      cp  a,INT_TABLE_MAXLEN
  111 D1:B624 C8 -  -  -      ret z       ;do not attempt to insert if table is maxed out
  112 D1:B625 C5 -  -  -      push bc
  113 D1:B626 47 -  -  -          ld  b,a
  114 D1:B627 0E 06 -  -          ld  c,INT_TABLE_STRIDE
  115 D1:B629 ED 4C -  -          mlt bc
  116 D1:B62B DD 09 -  -          add ix,bc   ;at end of table
  117 D1:B62D C1 -  -  -      pop bc
  118 D1:B62E -  -  -  -      ;Loop details. IX points at entry after last:
  119 D1:B62E -  -  -  -      ;if not loopCtr or ix[-1].T < BC:
  120 D1:B62E -  -  -  -      ;   ix[0] = DE,BC , STOP.
  121 D1:B62E -  -  -  -      ;else:
  122 D1:B62E -  -  -  -      ;   ix[0] = ix[-1], ix-=STRIDE, loopCtr--
  123 D1:B62E -  -  -  -  int6502_insertISA_Loop:
  124 D1:B62E B7 -  -  -      or  a,a
  125 D1:B62F 28 B4 -  -      jr  z,int6502_pushISRAfterPop_writeFirstEntry
  126 D1:B631 DD 27 FD -      ld  hl,(ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE)
  127 D1:B634 ED 42 -  -      sbc hl,bc   ;C if ix[-1]<BC
  128 D1:B636 30 AD -  -      jr  nc,int6502_pushISRAfterPop_writeFirstEntry
  129 D1:B638 DD 27 FA -      ld  hl,(ix+INT_ADDR_OFFSET-INT_TABLE_STRIDE)
  130 D1:B63B DD 2F 00 -      ld  (ix+INT_ADDR_OFFSET),hl
  131 D1:B63E DD 27 FD -      ld  hl,(ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE)
  132 D1:B641 DD 2F 03 -      ld  (ix+INT_CYCLE_OFFSET),hl
  133 D1:B644 ED 32 FA -      lea ix,ix-INT_TABLE_STRIDE
  134 D1:B647 3D -  -  -      dec a
  135 D1:B648 18 E4 -  -      jr int6502_insertISA_Loop
  136 D1:B64A -  -  -  -      
  137 D1:B64A -  -  -  -  
  138 D1:B64A -  -  -  -  int6502_removeTop:
  139 D1:B64A DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
  140 D1:B64F DD 7E FF -      ld  a,(ix-1)
  141 D1:B652 B7 -  -  -      or  a,a
  142 D1:B653 28 1B -  -      jr  z,+_
  143 D1:B655 DD 35 FF -      dec (ix-1)
  144 D1:B658 4F -  -  -      ld  c,a
  145 D1:B659 06 06 -  -      ld  b,INT_TABLE_STRIDE
  146 D1:B65B ED 4C -  -      mlt bc
  147 D1:B65D ED 32 06 -      lea ix,ix+INT_TABLE_STRIDE
  148 D1:B660 ED 12 FA -      lea de,ix-INT_TABLE_STRIDE
  149 D1:B663 ED 22 00 -      lea hl,ix+0
  150 D1:B666 ED B0 -  -      ldir
  151 D1:B668 D5 -  -  -      push de
  152 D1:B669 E1 -  -  -      pop hl
  153 D1:B66A 13 -  -  -      inc de
  154 D1:B66B 71 -  -  -      ld  (hl),c
  155 D1:B66C 0E 05 -  -      ld  c,INT_TABLE_STRIDE-1
  156 D1:B66E ED B0 -  -      ldir
  157 D1:B670 DD 21 80 32 
              D0 -  -  -  _:  ld ix,core_memory_ix
  158 D1:B675 C3 8E B5 D1     jp int6502_updateIntCounter
  159 D1:B679 -  -  -  -  
  160 D1:B679 -  -  -  -  
  161 D1:B679 -  -  -  -  
  162 D1:B679 -  -  -  -  
  163 D1:B679 -  -  -  -  
  164 D1:B679 -  -  -  -  
  165 D1:B679 -  -  -  -  
  166 D1:B679 -  -  -  -  
  167 D1:B679 -  -  -  -  
  168 D1:B679 -  -  -  -  
  169 D1:B679 -  -  -  -  
  170 D1:B679 -  -  -  -  
  171 D1:B679 -  -  -  -  
  172 D1:B679 -  -  -  -  
Listing for file "main.z80"
  972 D1:B679 -  -  -  -  #include "core.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    1 D1:B679 -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    2 D1:B679 -  -  -  -  
    3 D1:B679 -  -  -  -  ;TODO: DEFINE MEMORY ACCESS MACROS. ONE OR MORE FOR READ AND WRITE.
    4 D1:B679 -  -  -  -  ;FIGURE OUT HOW TO GET BOTH HIGH AND LOW BYTE OF ORIGINAL ADDRESS
    5 D1:B679 -  -  -  -  ;AND PERFORM ALTERNATE ACTIONS BASED ON WHAT HARDWARE WAS ACCESSED.
    6 D1:B679 -  -  -  -  ;NOTE: PATTERN SHOWS THAT D=MSB, C=LSB OF 6502 ADDRESS. USE THIS.
    7 D1:B679 -  -  -  -  ;
    8 D1:B679 -  -  -  -  ;THESE MACROS ARE PLACEHOLDERS. CHANGE THEM LATER ON TO REFLECT ACTUAL
    9 D1:B679 -  -  -  -  ;HARDWARE SHENANIGANS.
   10 D1:B679 -  -  -  -  ;
   11 D1:B679 -  -  -  -  ;NOTE: WRITE ACCESSES RELY ON KNOWING WHAT DATA TO WRITE. CAN'T STORE THAT IN A
   12 D1:B679 -  -  -  -  ;      SINCE WE NEED TO DO CONDITIONING. REGISTER B IS UNUSED SO LET'S USE THAT.
   13 D1:B679 -  -  -  -  ;
   14 D1:B679 -  -  -  -  #define READ_ACCESS call mapper0_read
   15 D1:B679 -  -  -  -  #define WRITE_ACCESS call mapper0_write
   16 D1:B679 -  -  -  -  ;Later, put in actual test. Z if not triggered, NZ if triggered. This
   17 D1:B679 -  -  -  -  ;alters the behavior of the BRK instruction.
   18 D1:B679 -  -  -  -  #define WAS_NMI_TRIGGERED bit 0,(ix+NMI_TRIGGERED)
   19 D1:B679 -  -  -  -  
   20 D1:B679 -  -  -  -  #define OPRFLG_C res SF_CARRY,b \ jr nc,$+4 \ set SF_CARRY,b
   21 D1:B679 -  -  -  -  #define OPRFLG_V res SF_OVER,b \ jp po,$+6 \ set SF_OVER,b
   22 D1:B679 -  -  -  -  #define OPRFLG_Z res SF_ZERO,b \ jr nz,$+4 \ set SF_ZERO,b
   23 D1:B679 -  -  -  -  #define OPRFLG_N res SF_NEG,b \ jr nc,$+4 \ set SF_NEG,b
   24 D1:B679 -  -  -  -  
   25 D1:B679 -  -  -  -  #define FLAGS_ZN ld b,(ix+REGSR) \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   26 D1:B679 -  -  -  -  #define FLAGS_CZN ld b,(ix+REGSR) \ OPRFLG_C \ rlc a  \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   27 D1:B679 -  -  -  -  #define FLAGS_VCZN ld b,(ix+REGSR) \ OPRFLG_V \ OPRFLG_C \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   28 D1:B679 -  -  -  -  
   29 D1:B679 -  -  -  -  
   30 D1:B679 -  -  -  -  ;Modify later to include provisions for hardware i/o based on page
   31 D1:B679 -  -  -  -  #define HW_READ(src_reg) ld a,(src_reg)
   32 D1:B679 -  -  -  -  #define HW_WRITE(dst_reg) ld (dst_reg),a
   33 D1:B679 -  -  -  -  
   34 D1:B679 -  -  -  -  
   35 D1:B679 -  -  -  -  
   36 D1:B679 -  -  -  -  
   37 D1:B679 -  -  -  -  ;=============================================================================
   38 D1:B679 -  -  -  -  ;=============================================================================
   39 D1:B679 -  -  -  -  ;=============================================================================
   40 D1:B679 -  -  -  -  ;=============================================================================
   41 D1:B679 -  -  -  -  ;You should have set up the mappings already. This is because
   42 D1:B679 -  -  -  -  ;mappings are program-dependant. Only $0000-$3FFF will be mapped in here
   43 D1:B679 -  -  -  -  ;more or less because I don't expect anything else to map that.
   44 D1:B679 -  -  -  -  i6502Init:
   45 D1:B679 -  -  -  -      ;
   46 D1:B679 -  -  -  -      ; At this point, you may need to randomize 2048 bytes at main_ram
   47 D1:B679 -  -  -  -      ;
   48 D1:B679 21 00 38 D0     ld  hl,main_ram
   49 D1:B67D 01 08 20 00     ld  bc,$002008
   50 D1:B681 1E 00 -  -      ld  e,$00
   51 D1:B683 CD 86 B7 D1     call i6502_map_pages
   52 D1:B687 21 00 33 D0     ld  hl,scrap_mapping
   53 D1:B68B 01 01 20 00     ld  bc,$002001
   54 D1:B68F 1E 20 -  -      ld  e,$20
   55 D1:B691 CD 86 B7 D1     call i6502_map_pages
   56 D1:B695 CD 6D B7 D1     call i6502_load_instruction_set
   57 D1:B699 -  -  -  -      ;
   58 D1:B699 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   59 D1:B69E FD 21 08 00 
              00 -  -  -      ld  iy,8    ;8 cycle startup. Hooking into inst6502_jsr for init
   60 D1:B6A3 ED 22 00 -      lea hl,ix
   61 D1:B6A6 ED 12 01 -      lea de,ix+1
   62 D1:B6A9 01 7E 00 00     ld  bc,126
   63 D1:B6AD 36 00 -  -      ld  (hl),$00
   64 D1:B6AF ED B0 -  -      ldir
   65 D1:B6B1 -  -  -  -      ;
   66 D1:B6B1 21 00 00 00     ld  hl,0
   67 D1:B6B5 39 -  -  -      add hl,sp
   68 D1:B6B6 DD 2F 11 -      ld  (ix+CORE_STACK_BASE),hl
   69 D1:B6B9 -  -  -  -      ;
   70 D1:B6B9 DD 36 03 FD     ld  (ix+REGSP),$FD  ;init does a BRK-like action without the actual pushes.
   71 D1:B6BD DD 36 04 24     ld  (ix+REGSR),$24  ;Presumably, this is what status register starts with?
   72 D1:B6C1 21 F4 4B D0     ld  hl,PAGETABLE+(255*BASETABLE_STRIDE)
   73 D1:B6C5 ED 27 -  -      ld  hl,(hl)
   74 D1:B6C7 11 FC 00 00     ld  de,$0000FC
   75 D1:B6CB 19 -  -  -      add hl,de
   76 D1:B6CC ED 27 -  -      ld  hl,(hl) ;get RST vector
   77 D1:B6CE 52 DD 2F 05     ld.s (ix+REGPC),hl
   78 D1:B6D2 -  -  -  -      ;-- debug stuff. Timer things.
   79 D1:B6D2 3A 30 00 F2     ld  a,($F20030)
   80 D1:B6D6 CB C7 -  -      set 0,a ;turn on timer 1
   81 D1:B6D8 32 30 00 F2     ld  ($F20030),a
   82 D1:B6DC -  -  -  -      ; Core initialized. Begin fetching instructions
   83 D1:B6DC 18 07 -  -      jr  i6502FirstLoad
   84 D1:B6DE -  -  -  -  
   85 D1:B6DE -  -  -  -  i6502RetryFirstLoad:    ;reentrant from ISR handler
   86 D1:B6DE 52 DD 17 05     ld.s de,(ix+REGPC)
   87 D1:B6E2 1B -  -  -      dec de
   88 D1:B6E3 18 04 -  -      jr +_
   89 D1:B6E5 -  -  -  -  i6502FirstLoad:
   90 D1:B6E5 52 DD 17 05     ld.s de,(ix+REGPC)
   91 D1:B6E9 7B -  -  -  _:  ld  a,e
   92 D1:B6EA 1E 0C -  -      ld  e,BASETABLE_STRIDE
   93 D1:B6EC ED 5C -  -      mlt de
   94 D1:B6EE 21 00 40 D0     ld  hl,PAGETABLE
   95 D1:B6F2 19 -  -  -      add hl,de
   96 D1:B6F3 ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
   97 D1:B6F5 16 00 -  -      ld  d,0
   98 D1:B6F7 5F -  -  -      ld  e,a
   99 D1:B6F8 19 -  -  -      add hl,de       ;resolve final address
  100 D1:B6F9 18 19 -  -      jr  i6502FinishLoad
  101 D1:B6FB -  -  -  -  i6502NextLoad:
  102 D1:B6FB 23 -  -  -      inc hl
  103 D1:B6FC 1C -  -  -      inc e
  104 D1:B6FD 20 15 -  -      jr  nz,i6502FinishLoad
  105 D1:B6FF DD 56 06 -      ld  d,(ix+REGPC+1)
  106 D1:B702 14 -  -  -      inc d
  107 D1:B703 52 DD 1F 05     ld.s (ix+REGPC),de
  108 D1:B707 1E 0C -  -      ld  e,BASETABLE_STRIDE
  109 D1:B709 ED 5C -  -      mlt de
  110 D1:B70B 21 00 40 D0     ld  hl,PAGETABLE
  111 D1:B70F 19 -  -  -      add hl,de
  112 D1:B710 ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
  113 D1:B712 1E 00 -  -      ld  e,0         ;PCL known to be zero at this point.
  114 D1:B714 -  -  -  -  i6502FinishLoad:
  115 D1:B714 7E -  -  -      ld  a,(hl)
  116 D1:B715 -  -  -  -  
  117 D1:B715 -  -  -  -  #ifdef COREDEBUG
  118 D1:B715                 ld  (ix+CURRENT_OPCODES+0),a
  119 D1:B715                 ld  (ix+REGPC+0),e
  120 D1:B715             #endif
  121 D1:B715 23 -  -  -      inc hl
  122 D1:B716 1C -  -  -      inc e
  123 D1:B717 20 15 -  -      jr  nz,i6502PrepNextPage
  124 D1:B719 DD 56 06 -      ld  d,(ix+REGPC+1)
  125 D1:B71C 14 -  -  -      inc d
  126 D1:B71D 52 DD 1F 05     ld.s (ix+REGPC),de
  127 D1:B721 1E 0C -  -      ld  e,BASETABLE_STRIDE
  128 D1:B723 ED 5C -  -      mlt de
  129 D1:B725 21 00 40 D0     ld  hl,PAGETABLE
  130 D1:B729 19 -  -  -      add hl,de
  131 D1:B72A ED 27 -  -      ld  hl,(hl)
  132 D1:B72C 1E 00 -  -      ld  e,0
  133 D1:B72E -  -  -  -  i6502PrepNextPage:
  134 D1:B72E -  -  -  -  #ifdef COREDEBUG
  135 D1:B72E                 push af
  136 D1:B72E                     ld  a,(hl)
  137 D1:B72E                     ld  (ix+CURRENT_OPCODES+1),a
  138 D1:B72E                     push de
  139 D1:B72E                         push hl
  140 D1:B72E                             push ix
  141 D1:B72E                                 inc hl
  142 D1:B72E                                 inc e
  143 D1:B72E                                 jr  nz,+_
  144 D1:B72E                                 ld  d,(ix+REGPC+1)
  145 D1:B72E                                 inc d
  146 D1:B72E                                 ld  e,BASETABLE_STRIDE
  147 D1:B72E                                 mlt de
  148 D1:B72E                                 ld  hl,PAGETABLE
  149 D1:B72E                                 add hl,de
  150 D1:B72E                                 ld  hl,(hl)
  151 D1:B72E             _:                  ld  a,(hl)
  152 D1:B72E                                 ld  (ix+CURRENT_OPCODES+2),a
  153 D1:B72E                                 lea hl,ix
  154 D1:B72E                                 ld  de,core_memory_ix
  155 D1:B72E                                 or  a,a
  156 D1:B72E                                 sbc hl,de
  157 D1:B72E                                 jr  nz,$    ;halt program if IX is not core_memory_ix
  158 D1:B72E                                 ;jr $
  159 D1:B72E                                 push iy
  160 D1:B72E                                     call dbg_printLine
  161 D1:B72E                                 pop iy
  162 D1:B72E                                 ld  a,(ix+CORE_ERROR_LEVEL)
  163 D1:B72E                                 or  a,a
  164 D1:B72E                                 jr  z,+_
  165 D1:B72E                                 ld  hl,(ix+CORE_STACK_BASE)
  166 D1:B72E                                 ld  sp,hl
  167 D1:B72E                                 ret
  168 D1:B72E             _:                  ld  iy,(ix+CYCLES_CURRENT)  ;remove when done with timings
  169 D1:B72E                                 lea hl,iy+0
  170 D1:B72E                                 ld  de,DEBUG_STEP_START_CYCLE
  171 D1:B72E                                 or  a,a
  172 D1:B72E                                 sbc hl,de
  173 D1:B72E                                 call nc,waituntilnewkeypress
  174 D1:B72E                             pop ix
  175 D1:B72E                         pop hl
  176 D1:B72E                     pop de
  177 D1:B72E                 pop af
  178 D1:B72E             #endif
  179 D1:B72E E5 -  -  -      push hl
  180 D1:B72F F5 -  -  -          push af
  181 D1:B730 -  -  -  -              ;ld  a,(ix+PPU_FRAMECOUNT)
  182 D1:B730 -  -  -  -              ;or  a,a
  183 D1:B730 -  -  -  -              ;cp  a,$20
  184 D1:B730 -  -  -  -              ;jr  c,+_
  185 D1:B730 -  -  -  -              ;ld  bc,-25000
  186 D1:B730 -  -  -  -              ;lea hl,iy
  187 D1:B730 -  -  -  -              ;add hl,bc
  188 D1:B730 -  -  -  -              ;jr  c,$
  189 D1:B730 F1 -  -  -  _:      pop af
  190 D1:B731 ED 23 00 -          lea hl,iy
  191 D1:B734 -  -  -  -  i6502_interrupt_timer   .equ $+1
  192 D1:B734 01 DD 92 FF         ld  bc,-27939
  193 D1:B738 09 -  -  -          add hl,bc
  194 D1:B739 38 1A -  -          jr  c,i6502_take_interrupt
  195 D1:B73B -  -  -  -  i6502_continue_instruction_fetch:
  196 D1:B73B 67 -  -  -          ld  h,a
  197 D1:B73C 2E 0C -  -          ld  l,BASETABLE_STRIDE
  198 D1:B73E ED 6C -  -          mlt hl
  199 D1:B740 01 04 40 D0         ld  bc,JUMPTABLE
  200 D1:B744 09 -  -  -          add hl,bc
  201 D1:B745 ED 27 -  -          ld  hl,(hl)     ;jumptable
  202 D1:B747 E3 -  -  -          ex  (sp),hl     ;exch with exec addr, jumpto-via-ret
  203 D1:B748 C9 -  -  -      ret
  204 D1:B749 -  -  -  -  
  205 D1:B749 -  -  -  -  i6502_no_interrupts:
  206 D1:B749 -  -  -  -          ;This is what happens when you let the core run without setting
  207 D1:B749 -  -  -  -          ;up interrupts. It'll be up to the hardware access subroutines
  208 D1:B749 -  -  -  -          ;to configure interrupts from now on. See "coreint.z80" for
  209 D1:B749 -  -  -  -          ;more information
  210 D1:B749 21 00 00 80         ld  hl,$800000  ;INT_MIN. Prevent retry for as long as possible.
  211 D1:B74D 22 55 B7 D1         ld  (i6502_take_interrupt),hl
  212 D1:B751 C3 3B B7 D1         jp  i6502_continue_instruction_fetch
  213 D1:B755 -  -  -  -  
  214 D1:B755 -  -  -  -  i6502_take_interrupt:
  215 D1:B755 29 -  -  -          add hl,hl   ;Check sign bit. Keep going if neg result. Fit inside timer
  216 D1:B756 DA 3B B7 D1         jp  c,i6502_continue_instruction_fetch
  217 D1:B75A 67 -  -  -          ld  h,a
  218 D1:B75B 3A 60 34 D0         ld  a,(int_table_len)
  219 D1:B75F B7 -  -  -          or  a,a
  220 D1:B760 7C -  -  -          ld  a,h
  221 D1:B761 28 E6 -  -          jr  z,i6502_no_interrupts
  222 D1:B763 E1 -  -  -      pop hl
  223 D1:B764 AF -  -  -      xor a,a
  224 D1:B765 DD 73 05 -      ld  (ix+REGPC+0),e
  225 D1:B768 2A 61 34 D0     ld  hl,(INT_TABLE)  ;Find the routines in "coreint.z80" that handles
  226 D1:B76C E9 -  -  -      jp  (hl)            ;and maintains the interrupt table being used here.
  227 D1:B76D -  -  -  -  
  228 D1:B76D -  -  -  -  
  229 D1:B76D -  -  -  -  ;Instructions one byte wide returns to the main loop via:
  230 D1:B76D -  -  -  -  ;   JP i6502FinishLoad
  231 D1:B76D -  -  -  -  ;Those with parameters have HL at the address in quetion, and is expected to
  232 D1:B76D -  -  -  -  ;advance HL and E at the end of the instruction. You return to main loop via:
  233 D1:B76D -  -  -  -  ;   JP i6502NextLoad
  234 D1:B76D -  -  -  -  ;Unless you manually advance the pointer to the next instruction.
  235 D1:B76D -  -  -  -  ;You really shouldn't but if you must do that, then also do this:
  236 D1:B76D -  -  -  -  ;   JP i6502FinishLoad
  237 D1:B76D -  -  -  -  ;Remember that register E is very important; it tells you about page boundaries.
  238 D1:B76D -  -  -  -  
  239 D1:B76D -  -  -  -  
  240 D1:B76D -  -  -  -  ;-----------------------------------------------------------------------------
  241 D1:B76D -  -  -  -  ;-----------------------------------------------------------------------------
  242 D1:B76D -  -  -  -  ;-----------------------------------------------------------------------------
  243 D1:B76D -  -  -  -  
  244 D1:B76D -  -  -  -  ;  ***  *   * ****  ****   ***  *   * ***** ***** **  * *****  ***  
  245 D1:B76D -  -  -  -  ; *     *   * *   * *   * *   * *   *   *     *   **  * *     *     
  246 D1:B76D -  -  -  -  ;  ***  *   * ****  ****  *   * *   *   *     *   * * * ***    ***  
  247 D1:B76D -  -  -  -  ;     * *   * *   * *   * *   * *   *   *     *   *  ** *         * 
  248 D1:B76D -  -  -  -  ;  ***   ***  ****  *   *  ***   ***    *   ***** *  ** *****  ***  
  249 D1:B76D -  -  -  -  
  250 D1:B76D -  -  -  -  ;-----------------------------------------------------------------------------
  251 D1:B76D -  -  -  -  
  252 D1:B76D -  -  -  -  i6502_load_instruction_set:
  253 D1:B76D DD 21 04 40 
              D0 -  -  -      ld  ix,JUMPTABLE
  254 D1:B772 21 46 DB D1     ld  hl,inst6502_instruction_set
  255 D1:B776 06 00 -  -      ld  b,0
  256 D1:B778 ED 17 -  -  _:  ld  de,(hl)
  257 D1:B77A DD 1F 00 -      ld  (ix+0),de
  258 D1:B77D 23 -  -  -      inc hl
  259 D1:B77E 23 -  -  -      inc hl
  260 D1:B77F 23 -  -  -      inc hl
  261 D1:B780 ED 32 0C -      lea ix,ix+BASETABLE_STRIDE
  262 D1:B783 10 F3 -  -      djnz -_
  263 D1:B785 C9 -  -  -      ret
  264 D1:B786 -  -  -  -  
  265 D1:B786 -  -  -  -  ;HL=Base_ez80_address, C=Numpages_in_map, B=numpages_in_space, E=starting_page
  266 D1:B786 -  -  -  -  ;Example: To map and mirror 2KB RAM at $D03800 inside first 8KB of 6502 space
  267 D1:B786 -  -  -  -  ;HL=$D03800, C=$08, B=$20, E=$00
  268 D1:B786 -  -  -  -  ;Note: B should be a power of two and evenly divisible by C.
  269 D1:B786 -  -  -  -  i6502_map_pages:
  270 D1:B786 16 0C -  -      ld  d,BASETABLE_STRIDE
  271 D1:B788 ED 5C -  -      mlt de
  272 D1:B78A DD 21 00 40 
              D0 -  -  -      ld  ix,PAGETABLE
  273 D1:B78F DD 19 -  -      add ix,de
  274 D1:B791 78 -  -  -      ld  a,b     ;A = main counter for total number of pages in mapping space
  275 D1:B792 11 00 01 00     ld  de,256
  276 D1:B796 E5 -  -  -      push hl
  277 D1:B797 FD E1 -  -      pop iy
  278 D1:B799 41 -  -  -  _:  ld  b,c     ;looping for number of pages to map
  279 D1:B79A DD 2F 00 -  _:  ld  (ix+0),hl
  280 D1:B79D 19 -  -  -      add hl,de                   ;next page z80
  281 D1:B79E ED 32 0C -      lea ix,ix+BASETABLE_STRIDE  ;next page entry
  282 D1:B7A1 3D -  -  -      dec a
  283 D1:B7A2 C8 -  -  -      ret z
  284 D1:B7A3 10 F5 -  -      djnz -_
  285 D1:B7A5 ED 23 00 -      lea hl,iy+0     ;start z80 pages over again for mirroring
  286 D1:B7A8 18 EF -  -      jr --_
  287 D1:B7AA -  -  -  -  
  288 D1:B7AA -  -  -  -  
  289 D1:B7AA -  -  -  -  subroutine6502_abs_split_start:
  290 D1:B7AA 4E -  -  -      ld  c,(hl)
  291 D1:B7AB 23 -  -  -      inc hl
  292 D1:B7AC 1C -  -  -      inc e
  293 D1:B7AD 20 15 -  -      jr nz,+_
  294 D1:B7AF DD 56 06 -      ld  d,(ix+REGPC+1)
  295 D1:B7B2 14 -  -  -      inc d
  296 D1:B7B3 52 DD 1F 05     ld.s (ix+REGPC),de
  297 D1:B7B7 1E 0C -  -      ld  e,BASETABLE_STRIDE
  298 D1:B7B9 ED 5C -  -      mlt de
  299 D1:B7BB 21 00 40 D0     ld  hl,PAGETABLE
  300 D1:B7BF 19 -  -  -      add hl,de
  301 D1:B7C0 ED 27 -  -      ld  hl,(hl) ;
  302 D1:B7C2 1E 00 -  -      ld  e,0
  303 D1:B7C4 46 -  -  -  _:  ld  b,(hl)
  304 D1:B7C5 C9 -  -  -      ret
  305 D1:B7C6 -  -  -  -  
  306 D1:B7C6 -  -  -  -  #define PUSH_ABSXSPLIT call subroutine6502_absx_split_start
  307 D1:B7C6 -  -  -  -  #define PUSH_ABSXSPLIT_NODEP call subroutine6502_absx_ss_noDep
  308 D1:B7C6 -  -  -  -  #define PUSH_ABSYSPLIT call subroutine6502_absy_split_start
  309 D1:B7C6 -  -  -  -  #define PUSH_ABSYSPLIT_NODEP call subroutine6502_absy_ss_noDep
  310 D1:B7C6 -  -  -  -  
  311 D1:B7C6 -  -  -  -  subroutine6502_absy_split_start:
  312 D1:B7C6 DD 4E 02 -      ld  c,(ix+REGY)
  313 D1:B7C9 18 03 -  -      jr +_
  314 D1:B7CB -  -  -  -  
  315 D1:B7CB -  -  -  -  subroutine6502_absx_split_start:
  316 D1:B7CB DD 4E 01 -      ld  c,(ix+REGX)
  317 D1:B7CE 7E -  -  -  _:  ld  a,(hl)
  318 D1:B7CF 23 -  -  -      inc hl
  319 D1:B7D0 1C -  -  -      inc e
  320 D1:B7D1 20 15 -  -      jr nz,+_
  321 D1:B7D3 DD 56 06 -      ld  d,(ix+REGPC+1)
  322 D1:B7D6 14 -  -  -      inc d
  323 D1:B7D7 52 DD 1F 05     ld.s (ix+REGPC),de
  324 D1:B7DB 1E 0C -  -      ld  e,BASETABLE_STRIDE
  325 D1:B7DD ED 5C -  -      mlt de
  326 D1:B7DF 21 00 40 D0     ld  hl,PAGETABLE
  327 D1:B7E3 19 -  -  -      add hl,de
  328 D1:B7E4 ED 27 -  -      ld  hl,(hl) ;
  329 D1:B7E6 1E 00 -  -      ld  e,0
  330 D1:B7E8 46 -  -  -  _:  ld  b,(hl)
  331 D1:B7E9 E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  332 D1:B7EA E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  333 D1:B7EB 81 -  -  -          add a,c
  334 D1:B7EC 30 03 -  -          jr  nc,+_
  335 D1:B7EE FD 23 -  -          ADDCYC(1)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  336 D1:B7F0 04 -  -  -          inc b
  337 D1:B7F1 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  338 D1:B7F2 0E 0C -  -          ld  c,BASETABLE_STRIDE
  339 D1:B7F4 ED 4C -  -          mlt bc
  340 D1:B7F6 21 00 40 D0         ld  hl,PAGETABLE
  341 D1:B7FA 09 -  -  -          add hl,bc
  342 D1:B7FB ED 27 -  -          ld  hl,(hl)
  343 D1:B7FD 06 00 -  -          ld  b,0
  344 D1:B7FF 4F -  -  -          ld  c,a
  345 D1:B800 09 -  -  -          add hl,bc
  346 D1:B801 C9 -  -  -      ret
  347 D1:B802 -  -  -  -      
  348 D1:B802 -  -  -  -  subroutine6502_absy_ss_noDep:
  349 D1:B802 DD 4E 02 -      ld  c,(ix+REGY)
  350 D1:B805 18 03 -  -      jr +_
  351 D1:B807 -  -  -  -  subroutine6502_absx_ss_noDep:
  352 D1:B807 DD 4E 01 -      ld  c,(ix+REGX)
  353 D1:B80A 7E -  -  -  _:  ld  a,(hl)
  354 D1:B80B 23 -  -  -      inc hl
  355 D1:B80C 1C -  -  -      inc e
  356 D1:B80D 20 15 -  -      jr nz,+_
  357 D1:B80F DD 56 06 -      ld  d,(ix+REGPC+1)
  358 D1:B812 14 -  -  -      inc d
  359 D1:B813 52 DD 1F 05     ld.s (ix+REGPC),de
  360 D1:B817 1E 0C -  -      ld  e,BASETABLE_STRIDE
  361 D1:B819 ED 5C -  -      mlt de
  362 D1:B81B 21 00 40 D0     ld  hl,PAGETABLE
  363 D1:B81F 19 -  -  -      add hl,de
  364 D1:B820 ED 27 -  -      ld  hl,(hl) ;
  365 D1:B822 1E 00 -  -      ld  e,0
  366 D1:B824 46 -  -  -  _:  ld  b,(hl)
  367 D1:B825 E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  368 D1:B826 E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  369 D1:B827 81 -  -  -          add a,c
  370 D1:B828 30 01 -  -          jr  nc,+_
  371 D1:B82A 04 -  -  -          inc b
  372 D1:B82B 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  373 D1:B82C 0E 0C -  -          ld  c,BASETABLE_STRIDE
  374 D1:B82E ED 4C -  -          mlt bc
  375 D1:B830 21 00 40 D0         ld  hl,PAGETABLE
  376 D1:B834 09 -  -  -          add hl,bc
  377 D1:B835 ED 27 -  -          ld  hl,(hl)
  378 D1:B837 06 00 -  -          ld  b,0
  379 D1:B839 4F -  -  -          ld  c,a
  380 D1:B83A 09 -  -  -          add hl,bc
  381 D1:B83B C9 -  -  -      ret
  382 D1:B83C -  -  -  -  
  383 D1:B83C -  -  -  -  
  384 D1:B83C -  -  -  -  
  385 D1:B83C -  -  -  -  
  386 D1:B83C -  -  -  -  
  387 D1:B83C -  -  -  -  
  388 D1:B83C -  -  -  -  
  389 D1:B83C -  -  -  -  subroutine6502_adc_combined_end:
  390 D1:B83C DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  391 D1:B83F 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  392 D1:B840 DD 7E 00 -      ld  a,(ix+REGA)
  393 D1:B843 89 -  -  -      adc a,c
  394 D1:B844 DD 77 00 -      ld  (ix+REGA),a
  395 D1:B847 DD 46 04 CB 
              B0 E2 52 B8 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  396 D1:B869 C3 FB B6 D1     jp i6502NextLoad
  397 D1:B86D -  -  -  -  
  398 D1:B86D -  -  -  -  subroutine6502_sbc_combined_end:
  399 D1:B86D DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  400 D1:B870 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  401 D1:B871 DD 7E 00 -      ld  a,(ix+REGA)
  402 D1:B874 3F -  -  -      ccf
  403 D1:B875 99 -  -  -      sbc a,c
  404 D1:B876 3F -  -  -      ccf
  405 D1:B877 DD 77 00 -      ld  (ix+REGA),a
  406 D1:B87A DD 46 04 CB 
              B0 E2 85 B8 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  407 D1:B89C C3 FB B6 D1     jp i6502NextLoad
  408 D1:B8A0 -  -  -  -  
  409 D1:B8A0 -  -  -  -  subroutine6502_cmp_combined_end:
  410 D1:B8A0 DD 7E 00 -      ld  a,(ix+REGA)
  411 D1:B8A3 90 -  -  -      sub a,b
  412 D1:B8A4 3F -  -  -      ccf     ;because the 6502 is strange like that.
  413 D1:B8A5 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  414 D1:B8BF C3 FB B6 D1     jp i6502NextLoad
  415 D1:B8C3 -  -  -  -  
  416 D1:B8C3 -  -  -  -  subroutine6502_take_branch:
  417 D1:B8C3 FD 23 -  -      ADDCYC(1)
  418 D1:B8C5 7E -  -  -      ld  a,(hl)  ;offset byte
  419 D1:B8C6 6F -  -  -      ld  L,a
  420 D1:B8C7 87 -  -  -      add a,a
  421 D1:B8C8 9F -  -  -      sbc a,a
  422 D1:B8C9 67 -  -  -      ld  H,a     ;sign-extending offset byte
  423 D1:B8CA DD 56 06 -      ld  d,(ix+REGPC+1)
  424 D1:B8CD 13 -  -  -      inc de
  425 D1:B8CE 52 19 -  -      add.s hl,de
  426 D1:B8D0 7C -  -  -      ld  a,h
  427 D1:B8D1 BA -  -  -      cp  d       ;is high byte the same?
  428 D1:B8D2 28 02 -  -      jr  z,+_    ;if so, do not add another clock
  429 D1:B8D4 FD 23 -  -      ADDCYC(1)
  430 D1:B8D6 52 DD 2F 05 _:  ld.s (ix+REGPC),hl
  431 D1:B8DA C3 E5 B6 D1     jp  i6502FirstLoad
  432 D1:B8DE -  -  -  -  
  433 D1:B8DE -  -  -  -  subroutine6502_take_branch_waitloop_detect:
  434 D1:B8DE 7E -  -  -      ld  a,(hl)      ;offset byte
  435 D1:B8DF 4F -  -  -      ld  c,a         ;keep that offset byte for now. We'll need it later.
  436 D1:B8E0 6F -  -  -      ld  l,a
  437 D1:B8E1 87 -  -  -      add a,a
  438 D1:B8E2 9F -  -  -      sbc a,a
  439 D1:B8E3 67 -  -  -      ld  h,a         ;sign-extend into HL
  440 D1:B8E4 DD 56 06 -      ld  d,(ix+REGPC+1)
  441 D1:B8E7 13 -  -  -      inc de
  442 D1:B8E8 19 -  -  -      add hl,de           ;HLU unimportant for any further checks
  443 D1:B8E9 52 DD 2F 05     ld.s (ix+REGPC),hl  ;since we aren't going to store it anyway
  444 D1:B8ED 5C -  -  -      ld  e,h             ;D=newMSB, E=oldMSB
  445 D1:B8EE -  -  -  -      ;Now we have to check the instruction we landed on to see 
  446 D1:B8EE 79 -  -  -      ld  a,c             ;Check offset byte if in range for waitloop things
  447 D1:B8EF FE FC -  -      cp  a,-2-2          ;-2 to reach back to itself, and -2 for the inst before
  448 D1:B8F1 28 0C -  -      jr  z,subroutine6502_tbwd_2bcheck
  449 D1:B8F3 -  -  -  -      ;insert other offset-based checks here
  450 D1:B8F3 -  -  -  -  subroutine6502_tbwd_check_failed:
  451 D1:B8F3 FD 23 -  -      ADDCYC(1)
  452 D1:B8F5 7B -  -  -      ld  a,e
  453 D1:B8F6 BA -  -  -      cp  a,d     ;Check if high byte changed. If so, it's a page crossing.
  454 D1:B8F7 28 02 -  -      jr  z,+_
  455 D1:B8F9 FD 23 -  -      ADDCYC(1)
  456 D1:B8FB C3 E5 B6 D1 _:  jp  i6502FirstLoad
  457 D1:B8FF -  -  -  -  ;Note: By the time we're checking for waitloop status, the jump's already
  458 D1:B8FF -  -  -  -  ;been recorded for next execution. Thus, when the next interrupt occurs,
  459 D1:B8FF -  -  -  -  ;that instruction will be retried and the loop will fall through, preventing
  460 D1:B8FF -  -  -  -  ;the sort of lockup that would've needed additional flags to handle.
  461 D1:B8FF -  -  -  -  subroutine6502_tbwd_2bcheck:
  462 D1:B8FF ED 33 FE -      lea iy,iy-2     ;undo the first addcyc
  463 D1:B902 7D -  -  -      ld  a,L         ;preserve LSB for later thingies.
  464 D1:B903 44 -  -  -      ld  b,h
  465 D1:B904 0E 0C -  -      ld  c,BASETABLE_STRIDE
  466 D1:B906 ED 4C -  -      mlt bc
  467 D1:B908 21 00 40 D0     ld  hl,PAGETABLE
  468 D1:B90C 09 -  -  -      add hl,bc
  469 D1:B90D ED 27 -  -      ld  hl,(hl)
  470 D1:B90F 06 00 -  -      ld  b,0
  471 D1:B911 4F -  -  -      ld  c,a
  472 D1:B912 09 -  -  -      add hl,bc       ;Address to prior instruction reconstructed.
  473 D1:B913 7E -  -  -      ld  a,(hl)
  474 D1:B914 FE C5 -  -      cp  a,$C5       ;CMP_ZP, seen in Nestest
  475 D1:B916 28 02 -  -      jr  z,subroutine6502_tbwd_waitloop
  476 D1:B918 18 D9 -  -      jr  subroutine6502_tbwd_check_failed
  477 D1:B91A -  -  -  -  
  478 D1:B91A -  -  -  -  subroutine6502_tbwd_waitloop:
  479 D1:B91A -  -  -  -  ;I don't particularly care about timing consistency here. 3 or more ccs per
  480 D1:B91A -  -  -  -  ;iteration, I'll fix that later if it ever truly becomes a problem.
  481 D1:B91A C3 09 CE D1     jp  inst6052_jmp_abs_inf_loop   
  482 D1:B91E -  -  -  -  
  483 D1:B91E -  -  -  -  ;-----------------------------------------------------------------------------
  484 D1:B91E -  -  -  -  
  485 D1:B91E -  -  -  -  ; *** **  *  *** ***** ***  *   *  *** ***** *** ***  **  *     ***  ***** *****                                                
  486 D1:B91E -  -  -  -  ;  *  **  * *      *   *  * *   * *      *    * *   * **  *    *     *       *                   
  487 D1:B91E -  -  -  -  ;  *  * * *  ***   *   ***  *   * *      *    * *   * * * *     ***  ***     *                          
  488 D1:B91E -  -  -  -  ;  *  *  **     *  *   *  * *   * *      *    * *   * *  **        * *       *                   
  489 D1:B91E -  -  -  -  ; *** *  **  ***   *   *  *  ***   ***   *   *** ***  *  **     ***  *****   *                                 
  490 D1:B91E -  -  -  -  
  491 D1:B91E -  -  -  -  ;-----------------------------------------------------------------------------
  492 D1:B91E -  -  -  -  
  493 D1:B91E -  -  -  -  ;-----------------------------------------------------------------------------
  494 D1:B91E -  -  -  -  ;-----------------------------------------------------------------------------
  495 D1:B91E -  -  -  -  ;-----------------------------------------------------------------------------
  496 D1:B91E -  -  -  -  ;Instructions by type: Transfer Instructions
  497 D1:B91E -  -  -  -  ;LDA - Load Accumulator with Memory
  498 D1:B91E -  -  -  -  ;    M -> A
  499 D1:B91E -  -  -  -  ;    N	Z	C	I	D	V
  500 D1:B91E -  -  -  -  ;    +	+	-	-	-	-
  501 D1:B91E -  -  -  -  
  502 D1:B91E -  -  -  -  ;addressing	assembler	opc	bytes	cycles
  503 D1:B91E -  -  -  -  ;immediate	LDA #oper	A9	2	2
  504 D1:B91E -  -  -  -  inst6502_lda_imm:
  505 D1:B91E 7E -  -  -      ld  a,(hl)
  506 D1:B91F DD 77 00 -      ld  (ix+REGA),a
  507 D1:B922 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  508 D1:B936 ED 33 02 -      ADDCYC(2)
  509 D1:B939 C3 FB B6 D1     jp i6502NextLoad
  510 D1:B93D -  -  -  -  
  511 D1:B93D -  -  -  -  ;zeropage	LDA oper	A5	2	3
  512 D1:B93D -  -  -  -  inst6502_lda_zp:
  513 D1:B93D 7E -  -  -      ld  a,(hl)
  514 D1:B93E 01 00 38 D0     ld  bc,ZEROPAGE
  515 D1:B942 81 -  -  -      add a,c
  516 D1:B943 4F -  -  -      ld  c,a
  517 D1:B944 0A -  -  -      ld  a,(bc)
  518 D1:B945 DD 77 00 -      ld  (ix+REGA),a
  519 D1:B948 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  520 D1:B95C ED 33 03 -      ADDCYC(3)
  521 D1:B95F C3 FB B6 D1     jp i6502NextLoad
  522 D1:B963 -  -  -  -  
  523 D1:B963 -  -  -  -  ;zeropage,X	LDA oper,X	B5	2	4 
  524 D1:B963 -  -  -  -  inst6502_lda_zpx:
  525 D1:B963 7E -  -  -      ld  a,(hl)
  526 D1:B964 01 00 38 D0     ld  bc,ZEROPAGE
  527 D1:B968 81 -  -  -      add a,c
  528 D1:B969 DD 86 01 -      add a,(ix+REGX)
  529 D1:B96C 4F -  -  -      ld  c,a
  530 D1:B96D 0A -  -  -      ld  a,(bc)
  531 D1:B96E DD 77 00 -      ld  (ix+REGA),a
  532 D1:B971 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  533 D1:B985 ED 33 04 -      ADDCYC(4)
  534 D1:B988 C3 FB B6 D1     jp i6502NextLoad
  535 D1:B98C -  -  -  -  
  536 D1:B98C -  -  -  -  ;absolute	LDA oper	AD	3	4
  537 D1:B98C -  -  -  -  inst6502_lda_abs:
  538 D1:B98C CD AA B7 D1     call subroutine6502_abs_split_start
  539 D1:B990 E5 -  -  -      push hl
  540 D1:B991 50 -  -  -          ld  d,b
  541 D1:B992 79 -  -  -          ld  a,c
  542 D1:B993 0E 0C -  -          ld  c,BASETABLE_STRIDE
  543 D1:B995 ED 4C -  -          mlt bc
  544 D1:B997 21 00 40 D0         ld  hl,PAGETABLE
  545 D1:B99B 09 -  -  -          add hl,bc
  546 D1:B99C ED 27 -  -          ld  hl,(hl)
  547 D1:B99E 06 00 -  -          ld  b,0
  548 D1:B9A0 4F -  -  -          ld  c,a
  549 D1:B9A1 09 -  -  -          add hl,bc   ;full address
  550 D1:B9A2 CD 7D AE D1         READ_ACCESS
  551 D1:B9A6 DD 77 00 -          ld (ix+REGA),a
  552 D1:B9A9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  553 D1:B9BD ED 33 04 -          ADDCYC(4)
  554 D1:B9C0 E1 -  -  -      pop hl
  555 D1:B9C1 C3 FB B6 D1     jp i6502NextLoad
  556 D1:B9C5 -  -  -  -  
  557 D1:B9C5 -  -  -  -  ;absolute,X	LDA oper,X	BD	3	4* 
  558 D1:B9C5 -  -  -  -  inst6502_lda_absx:
  559 D1:B9C5 ED 33 04 -      ADDCYC(4)
  560 D1:B9C8 CD CB B7 D1     PUSH_ABSXSPLIT
  561 D1:B9CC CD 7D AE D1         READ_ACCESS
  562 D1:B9D0 DD 77 00 -          ld (ix+REGA),a
  563 D1:B9D3 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  564 D1:B9E7 E1 -  -  -      pop hl
  565 D1:B9E8 C3 FB B6 D1     jp i6502NextLoad
  566 D1:B9EC -  -  -  -  
  567 D1:B9EC -  -  -  -  ;absolute,Y	LDA oper,Y	B9	3	4* 
  568 D1:B9EC -  -  -  -  inst6502_lda_absy:
  569 D1:B9EC ED 33 04 -      ADDCYC(4)
  570 D1:B9EF CD C6 B7 D1     PUSH_ABSYSPLIT
  571 D1:B9F3 CD 7D AE D1         READ_ACCESS
  572 D1:B9F7 DD 77 00 -          ld (ix+REGA),a
  573 D1:B9FA DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  574 D1:BA0E E1 -  -  -      pop hl
  575 D1:BA0F C3 FB B6 D1     jp i6502NextLoad
  576 D1:BA13 -  -  -  -  
  577 D1:BA13 -  -  -  -  ;(indirect,X)	LDA (oper,X)	A1	2	6
  578 D1:BA13 -  -  -  -  inst6502_lda_indx:
  579 D1:BA13 E5 -  -  -      push hl
  580 D1:BA14 7E -  -  -          ld  a,(hl)
  581 D1:BA15 21 00 38 D0         ld  hl,ZEROPAGE
  582 D1:BA19 85 -  -  -          add a,L
  583 D1:BA1A DD 86 01 -          add a,(ix+REGX)
  584 D1:BA1D 6F -  -  -          ld  L,a
  585 D1:BA1E 7E -  -  -          ld  a,(hl)
  586 D1:BA1F 2C -  -  -          inc L
  587 D1:BA20 56 -  -  -          ld  d,(hl)
  588 D1:BA21 42 -  -  -          ld  b,d
  589 D1:BA22 0E 0C -  -          ld  c,BASETABLE_STRIDE
  590 D1:BA24 ED 4C -  -          mlt bc
  591 D1:BA26 21 00 40 D0         ld  hl,PAGETABLE
  592 D1:BA2A 09 -  -  -          add hl,bc
  593 D1:BA2B ED 27 -  -          ld  hl,(hl)
  594 D1:BA2D 06 00 -  -          ld  b,0
  595 D1:BA2F 4F -  -  -          ld  c,a
  596 D1:BA30 09 -  -  -          add hl,bc
  597 D1:BA31 CD 7D AE D1         READ_ACCESS
  598 D1:BA35 DD 77 00 -          ld (ix+REGA),a
  599 D1:BA38 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  600 D1:BA4C ED 33 06 -          ADDCYC(6)
  601 D1:BA4F E1 -  -  -      pop hl
  602 D1:BA50 C3 FB B6 D1     jp i6502NextLoad
  603 D1:BA54 -  -  -  -  
  604 D1:BA54 -  -  -  -  ;(indirect),Y	LDA (oper),Y	B1	2	5*
  605 D1:BA54 -  -  -  -  inst6502_lda_indy:
  606 D1:BA54 E5 -  -  -      push hl
  607 D1:BA55 7E -  -  -          ld  a,(hl)
  608 D1:BA56 21 00 38 D0         ld  hl,ZEROPAGE
  609 D1:BA5A 85 -  -  -          add a,L
  610 D1:BA5B 6F -  -  -          ld  L,a
  611 D1:BA5C 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  612 D1:BA5D 2C -  -  -          inc L
  613 D1:BA5E DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  614 D1:BA61 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  615 D1:BA62 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  616 D1:BA64 FD 23 -  -          ADDCYC(1)
  617 D1:BA66 24 -  -  -          inc h
  618 D1:BA67 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  619 D1:BA68 2E 0C -  -          ld  L,BASETABLE_STRIDE
  620 D1:BA6A ED 6C -  -          mlt hl          ;23.
  621 D1:BA6C 01 00 40 D0         ld  bc,PAGETABLE
  622 D1:BA70 09 -  -  -          add hl,bc
  623 D1:BA71 ED 27 -  -          ld  hl,(hl)     ;address get.
  624 D1:BA73 01 00 00 00         ld  bc,0
  625 D1:BA77 4F -  -  -          ld  c,a
  626 D1:BA78 09 -  -  -          add hl,bc       ;Full address get.
  627 D1:BA79 CD 7D AE D1         READ_ACCESS
  628 D1:BA7D DD 77 00 -          ld  (ix+REGA),a
  629 D1:BA80 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  630 D1:BA94 ED 33 05 -          ADDCYC(5)
  631 D1:BA97 E1 -  -  -      pop hl
  632 D1:BA98 C3 FB B6 D1     jp i6502NextLoad
  633 D1:BA9C -  -  -  -  
  634 D1:BA9C -  -  -  -  ;-----------------------------------------------------------------------------
  635 D1:BA9C -  -  -  -  ;LDX - Load Index X with Memory
  636 D1:BA9C -  -  -  -  ;    M -> X
  637 D1:BA9C -  -  -  -  ;    N	Z	C	I	D	V
  638 D1:BA9C -  -  -  -  ;    +	+	-	-	-	-
  639 D1:BA9C -  -  -  -  
  640 D1:BA9C -  -  -  -  ;immediate	LDX #oper	A2	2	2  
  641 D1:BA9C -  -  -  -  inst6502_ldx_imm:
  642 D1:BA9C 7E -  -  -      ld  a,(hl)
  643 D1:BA9D DD 77 01 -      ld  (ix+REGX),a
  644 D1:BAA0 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  645 D1:BAB4 ED 33 02 -      ADDCYC(2)
  646 D1:BAB7 C3 FB B6 D1     jp i6502NextLoad
  647 D1:BABB -  -  -  -  
  648 D1:BABB -  -  -  -  ;zeropage	LDX oper	A6	2	3 
  649 D1:BABB -  -  -  -  inst6502_ldx_zp:
  650 D1:BABB 7E -  -  -      ld  a,(hl)
  651 D1:BABC 01 00 38 D0     ld  bc,ZEROPAGE
  652 D1:BAC0 81 -  -  -      add a,c
  653 D1:BAC1 4F -  -  -      ld  c,a
  654 D1:BAC2 0A -  -  -      ld  a,(bc)
  655 D1:BAC3 DD 77 01 -      ld  (ix+REGX),a
  656 D1:BAC6 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  657 D1:BADA ED 33 03 -      ADDCYC(3)
  658 D1:BADD C3 FB B6 D1     jp i6502NextLoad
  659 D1:BAE1 -  -  -  -  
  660 D1:BAE1 -  -  -  -  ;zeropage,Y	LDX oper,Y	B6	2	4  
  661 D1:BAE1 -  -  -  -  inst6502_ldx_zpy:
  662 D1:BAE1 7E -  -  -      ld  a,(hl)
  663 D1:BAE2 01 00 38 D0     ld  bc,ZEROPAGE
  664 D1:BAE6 81 -  -  -      add a,c
  665 D1:BAE7 DD 86 02 -      add a,(ix+REGY)
  666 D1:BAEA 4F -  -  -      ld  c,a
  667 D1:BAEB 0A -  -  -      ld  a,(bc)
  668 D1:BAEC DD 77 01 -      ld  (ix+REGX),a
  669 D1:BAEF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  670 D1:BB03 ED 33 04 -      ADDCYC(4)
  671 D1:BB06 C3 FB B6 D1     jp i6502NextLoad
  672 D1:BB0A -  -  -  -  
  673 D1:BB0A -  -  -  -  ;absolute	LDX oper	AE	3	4  
  674 D1:BB0A -  -  -  -  inst6502_ldx_abs:
  675 D1:BB0A CD AA B7 D1     call subroutine6502_abs_split_start
  676 D1:BB0E E5 -  -  -      push hl
  677 D1:BB0F 50 -  -  -          ld  d,b
  678 D1:BB10 79 -  -  -          ld  a,c
  679 D1:BB11 0E 0C -  -          ld  c,BASETABLE_STRIDE
  680 D1:BB13 ED 4C -  -          mlt bc
  681 D1:BB15 21 00 40 D0         ld  hl,PAGETABLE
  682 D1:BB19 09 -  -  -          add hl,bc
  683 D1:BB1A ED 27 -  -          ld  hl,(hl)
  684 D1:BB1C 06 00 -  -          ld  b,0
  685 D1:BB1E 4F -  -  -          ld  c,a
  686 D1:BB1F 09 -  -  -          add hl,bc   ;full address
  687 D1:BB20 CD 7D AE D1         READ_ACCESS
  688 D1:BB24 DD 77 01 -          ld (ix+REGX),a
  689 D1:BB27 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  690 D1:BB3B ED 33 04 -          ADDCYC(4)
  691 D1:BB3E E1 -  -  -      pop hl
  692 D1:BB3F C3 FB B6 D1     jp i6502NextLoad
  693 D1:BB43 -  -  -  -  
  694 D1:BB43 -  -  -  -  ;absolute,Y	LDX oper,Y	BE	3	4* 
  695 D1:BB43 -  -  -  -  inst6502_ldx_absy:
  696 D1:BB43 ED 33 04 -      ADDCYC(4)
  697 D1:BB46 CD C6 B7 D1     PUSH_ABSYSPLIT
  698 D1:BB4A CD 7D AE D1         READ_ACCESS
  699 D1:BB4E DD 77 01 -          ld (ix+REGX),a
  700 D1:BB51 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  701 D1:BB65 E1 -  -  -      pop hl
  702 D1:BB66 C3 FB B6 D1     jp i6502NextLoad
  703 D1:BB6A -  -  -  -  
  704 D1:BB6A -  -  -  -  ;-----------------------------------------------------------------------------
  705 D1:BB6A -  -  -  -  ;LDY -  Load Index Y with Memory
  706 D1:BB6A -  -  -  -  ;    M -> Y
  707 D1:BB6A -  -  -  -  ;    N	Z	C	I	D	V
  708 D1:BB6A -  -  -  -  ;    +	+	-	-	-	-
  709 D1:BB6A -  -  -  -  
  710 D1:BB6A -  -  -  -  ;immediate	LDY #oper	A0	2	2  
  711 D1:BB6A -  -  -  -  inst6502_ldy_imm:
  712 D1:BB6A 7E -  -  -      ld  a,(hl)
  713 D1:BB6B DD 77 02 -      ld  (ix+REGY),a
  714 D1:BB6E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  715 D1:BB82 ED 33 02 -      ADDCYC(2)
  716 D1:BB85 C3 FB B6 D1     jp i6502NextLoad
  717 D1:BB89 -  -  -  -  
  718 D1:BB89 -  -  -  -  ;zeropage	LDY oper	A4	2	3  
  719 D1:BB89 -  -  -  -  inst6502_ldy_zp:
  720 D1:BB89 7E -  -  -      ld  a,(hl)
  721 D1:BB8A 01 00 38 D0     ld  bc,ZEROPAGE
  722 D1:BB8E 81 -  -  -      add a,c
  723 D1:BB8F 4F -  -  -      ld  c,a
  724 D1:BB90 0A -  -  -      ld  a,(bc)
  725 D1:BB91 DD 77 02 -      ld  (ix+REGY),a
  726 D1:BB94 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  727 D1:BBA8 ED 33 03 -      ADDCYC(3)
  728 D1:BBAB C3 FB B6 D1     jp i6502NextLoad
  729 D1:BBAF -  -  -  -  
  730 D1:BBAF -  -  -  -  ;zeropage,X	LDY oper,X	B4	2	4  
  731 D1:BBAF -  -  -  -  inst6502_ldy_zpx:
  732 D1:BBAF 7E -  -  -      ld  a,(hl)
  733 D1:BBB0 01 00 38 D0     ld  bc,ZEROPAGE
  734 D1:BBB4 81 -  -  -      add a,c
  735 D1:BBB5 DD 86 01 -      add a,(ix+REGX)
  736 D1:BBB8 4F -  -  -      ld  c,a
  737 D1:BBB9 0A -  -  -      ld  a,(bc)
  738 D1:BBBA DD 77 02 -      ld  (ix+REGY),a
  739 D1:BBBD DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  740 D1:BBD1 ED 33 04 -      ADDCYC(4)
  741 D1:BBD4 C3 FB B6 D1     jp i6502NextLoad
  742 D1:BBD8 -  -  -  -  
  743 D1:BBD8 -  -  -  -  ;absolute	LDY oper	AC	3	4  
  744 D1:BBD8 -  -  -  -  inst6502_ldy_abs:
  745 D1:BBD8 CD AA B7 D1     call subroutine6502_abs_split_start
  746 D1:BBDC E5 -  -  -      push hl
  747 D1:BBDD 50 -  -  -          ld  d,b
  748 D1:BBDE 79 -  -  -          ld  a,c
  749 D1:BBDF 0E 0C -  -          ld  c,BASETABLE_STRIDE
  750 D1:BBE1 ED 4C -  -          mlt bc
  751 D1:BBE3 21 00 40 D0         ld  hl,PAGETABLE
  752 D1:BBE7 09 -  -  -          add hl,bc
  753 D1:BBE8 ED 27 -  -          ld  hl,(hl)
  754 D1:BBEA 06 00 -  -          ld  b,0
  755 D1:BBEC 4F -  -  -          ld  c,a
  756 D1:BBED 09 -  -  -          add hl,bc   ;full address
  757 D1:BBEE CD 7D AE D1         READ_ACCESS
  758 D1:BBF2 DD 77 02 -          ld (ix+REGY),a
  759 D1:BBF5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  760 D1:BC09 ED 33 04 -          ADDCYC(4)
  761 D1:BC0C E1 -  -  -      pop hl
  762 D1:BC0D C3 FB B6 D1     jp i6502NextLoad
  763 D1:BC11 -  -  -  -  
  764 D1:BC11 -  -  -  -  ;absolute,X	LDY oper,X	BC	3	4* 
  765 D1:BC11 -  -  -  -  inst6502_ldy_absx:
  766 D1:BC11 ED 33 04 -      ADDCYC(4)
  767 D1:BC14 CD CB B7 D1     PUSH_ABSXSPLIT
  768 D1:BC18 CD 7D AE D1         READ_ACCESS
  769 D1:BC1C DD 77 02 -          ld (ix+REGY),a
  770 D1:BC1F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  771 D1:BC33 E1 -  -  -      pop hl
  772 D1:BC34 C3 FB B6 D1     jp i6502NextLoad
  773 D1:BC38 -  -  -  -  
  774 D1:BC38 -  -  -  -  ;-----------------------------------------------------------------------------
  775 D1:BC38 -  -  -  -  ;STA - Store Accumulator in Memory
  776 D1:BC38 -  -  -  -  ;    A -> M
  777 D1:BC38 -  -  -  -  ;    N	Z	C	I	D	V
  778 D1:BC38 -  -  -  -  ;    -	-	-	-	-	-
  779 D1:BC38 -  -  -  -  
  780 D1:BC38 -  -  -  -  ;zeropage	STA oper	85	2	3  
  781 D1:BC38 -  -  -  -  inst6502_sta_zp:
  782 D1:BC38 7E -  -  -      ld  a,(hl)
  783 D1:BC39 01 00 38 D0     ld  bc,ZEROPAGE
  784 D1:BC3D 81 -  -  -      add a,c
  785 D1:BC3E 4F -  -  -      ld  c,a
  786 D1:BC3F DD 7E 00 -      ld  a,(ix+REGA)
  787 D1:BC42 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  788 D1:BC43 ED 33 03 -      ADDCYC(3)
  789 D1:BC46 C3 FB B6 D1     jp i6502NextLoad
  790 D1:BC4A -  -  -  -  
  791 D1:BC4A -  -  -  -  ;zeropage,X	STA oper,X	95	2	4  
  792 D1:BC4A -  -  -  -  inst6502_sta_zpx:
  793 D1:BC4A 7E -  -  -      ld  a,(hl)
  794 D1:BC4B 01 00 38 D0     ld  bc,ZEROPAGE
  795 D1:BC4F 81 -  -  -      add a,c
  796 D1:BC50 DD 86 01 -      add a,(ix+REGX)
  797 D1:BC53 4F -  -  -      ld  c,a
  798 D1:BC54 DD 7E 00 -      ld  a,(ix+REGA)
  799 D1:BC57 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  800 D1:BC58 ED 33 04 -      ADDCYC(4)
  801 D1:BC5B C3 FB B6 D1     jp i6502NextLoad
  802 D1:BC5F -  -  -  -  
  803 D1:BC5F -  -  -  -  ;absolute	STA oper	8D	3	4
  804 D1:BC5F -  -  -  -  inst6502_sta_abs:
  805 D1:BC5F CD AA B7 D1     call subroutine6502_abs_split_start
  806 D1:BC63 E5 -  -  -      push hl
  807 D1:BC64 50 -  -  -          ld  d,b
  808 D1:BC65 79 -  -  -          ld  a,c
  809 D1:BC66 0E 0C -  -          ld  c,BASETABLE_STRIDE
  810 D1:BC68 ED 4C -  -          mlt bc
  811 D1:BC6A 21 00 40 D0         ld  hl,PAGETABLE
  812 D1:BC6E 09 -  -  -          add hl,bc
  813 D1:BC6F ED 27 -  -          ld  hl,(hl)
  814 D1:BC71 06 00 -  -          ld  b,0
  815 D1:BC73 4F -  -  -          ld  c,a
  816 D1:BC74 09 -  -  -          add hl,bc   ;full address
  817 D1:BC75 DD 46 00 -          ld  b,(ix+REGA)
  818 D1:BC78 CD 20 AF D1         WRITE_ACCESS
  819 D1:BC7C ED 33 04 -          ADDCYC(4)
  820 D1:BC7F E1 -  -  -      pop hl
  821 D1:BC80 C3 FB B6 D1     jp i6502NextLoad
  822 D1:BC84 -  -  -  -  
  823 D1:BC84 -  -  -  -  ;absolute,X	STA oper,X	9D	3	5  
  824 D1:BC84 -  -  -  -  inst6502_sta_absx:
  825 D1:BC84 ED 33 05 -      ADDCYC(5)
  826 D1:BC87 CD 07 B8 D1     PUSH_ABSXSPLIT_NODEP
  827 D1:BC8B DD 46 00 -          ld  b,(ix+REGA)
  828 D1:BC8E CD 20 AF D1         WRITE_ACCESS
  829 D1:BC92 E1 -  -  -      pop hl
  830 D1:BC93 C3 FB B6 D1     jp i6502NextLoad
  831 D1:BC97 -  -  -  -  
  832 D1:BC97 -  -  -  -  ;absolute,Y	STA oper,Y	99	3	5  
  833 D1:BC97 -  -  -  -  inst6502_sta_absy:
  834 D1:BC97 ED 33 05 -      ADDCYC(5)
  835 D1:BC9A CD 02 B8 D1     PUSH_ABSYSPLIT_NODEP
  836 D1:BC9E DD 46 00 -          ld  b,(ix+REGA)
  837 D1:BCA1 CD 20 AF D1         WRITE_ACCESS
  838 D1:BCA5 E1 -  -  -      pop hl
  839 D1:BCA6 C3 FB B6 D1     jp i6502NextLoad
  840 D1:BCAA -  -  -  -  
  841 D1:BCAA -  -  -  -  ;(indirect,X)	STA (oper,X)	81	2	6  
  842 D1:BCAA -  -  -  -  inst6502_sta_indx:
  843 D1:BCAA E5 -  -  -      push hl
  844 D1:BCAB 7E -  -  -          ld  a,(hl)
  845 D1:BCAC 21 00 38 D0         ld  hl,ZEROPAGE
  846 D1:BCB0 85 -  -  -          add a,L
  847 D1:BCB1 DD 86 01 -          add a,(ix+REGX)
  848 D1:BCB4 6F -  -  -          ld  L,a
  849 D1:BCB5 7E -  -  -          ld  a,(hl)
  850 D1:BCB6 2C -  -  -          inc L
  851 D1:BCB7 56 -  -  -          ld  d,(hl)
  852 D1:BCB8 42 -  -  -          ld  b,d
  853 D1:BCB9 0E 0C -  -          ld  c,BASETABLE_STRIDE
  854 D1:BCBB ED 4C -  -          mlt bc
  855 D1:BCBD 21 00 40 D0         ld  hl,PAGETABLE
  856 D1:BCC1 09 -  -  -          add hl,bc
  857 D1:BCC2 ED 27 -  -          ld  hl,(hl)
  858 D1:BCC4 06 00 -  -          ld  b,0
  859 D1:BCC6 4F -  -  -          ld  c,a
  860 D1:BCC7 09 -  -  -          add hl,bc
  861 D1:BCC8 DD 46 00 -          ld  b,(ix+REGA)
  862 D1:BCCB CD 20 AF D1         WRITE_ACCESS
  863 D1:BCCF ED 33 06 -          ADDCYC(6)
  864 D1:BCD2 E1 -  -  -      pop hl
  865 D1:BCD3 C3 FB B6 D1     jp i6502NextLoad
  866 D1:BCD7 -  -  -  -  
  867 D1:BCD7 -  -  -  -  ;(indirect),Y	STA (oper),Y	91	2	6  
  868 D1:BCD7 -  -  -  -  inst6502_sta_indy:
  869 D1:BCD7 E5 -  -  -      push hl
  870 D1:BCD8 7E -  -  -          ld  a,(hl)
  871 D1:BCD9 21 00 38 D0         ld  hl,ZEROPAGE
  872 D1:BCDD 85 -  -  -          add a,L
  873 D1:BCDE 6F -  -  -          ld  L,a
  874 D1:BCDF 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  875 D1:BCE0 2C -  -  -          inc L
  876 D1:BCE1 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  877 D1:BCE4 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  878 D1:BCE5 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  879 D1:BCE7 24 -  -  -          inc h
  880 D1:BCE8 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  881 D1:BCE9 2E 0C -  -          ld  L,BASETABLE_STRIDE
  882 D1:BCEB ED 6C -  -          mlt hl          ;23.
  883 D1:BCED 01 00 40 D0         ld  bc,PAGETABLE
  884 D1:BCF1 09 -  -  -          add hl,bc
  885 D1:BCF2 ED 27 -  -          ld  hl,(hl)     ;address get.
  886 D1:BCF4 01 00 00 00         ld  bc,0
  887 D1:BCF8 4F -  -  -          ld  c,a
  888 D1:BCF9 09 -  -  -          add hl,bc       ;Full address get.
  889 D1:BCFA DD 46 00 -          ld  b,(ix+REGA)
  890 D1:BCFD CD 20 AF D1         WRITE_ACCESS
  891 D1:BD01 ED 33 06 -          ADDCYC(6)
  892 D1:BD04 E1 -  -  -      pop hl
  893 D1:BD05 C3 FB B6 D1     jp i6502NextLoad
  894 D1:BD09 -  -  -  -  
  895 D1:BD09 -  -  -  -  ;-----------------------------------------------------------------------------
  896 D1:BD09 -  -  -  -  ;STX - Store Index X in Memory
  897 D1:BD09 -  -  -  -  ;    X -> M
  898 D1:BD09 -  -  -  -  ;    N	Z	C	I	D	V
  899 D1:BD09 -  -  -  -  ;    -	-	-	-	-	-
  900 D1:BD09 -  -  -  -  
  901 D1:BD09 -  -  -  -  ;zeropage	STX oper	86	2	3  
  902 D1:BD09 -  -  -  -  inst6502_stx_zp:
  903 D1:BD09 7E -  -  -      ld  a,(hl)
  904 D1:BD0A 01 00 38 D0     ld  bc,ZEROPAGE
  905 D1:BD0E 81 -  -  -      add a,c
  906 D1:BD0F 4F -  -  -      ld  c,a
  907 D1:BD10 DD 7E 01 -      ld  a,(ix+REGX)
  908 D1:BD13 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  909 D1:BD14 ED 33 03 -      ADDCYC(3)
  910 D1:BD17 C3 FB B6 D1     jp i6502NextLoad
  911 D1:BD1B -  -  -  -  
  912 D1:BD1B -  -  -  -  ;zeropage,Y	STX oper,Y	96	2	4  
  913 D1:BD1B -  -  -  -  inst6502_stx_zpy:
  914 D1:BD1B 7E -  -  -      ld  a,(hl)
  915 D1:BD1C 01 00 38 D0     ld  bc,ZEROPAGE
  916 D1:BD20 81 -  -  -      add a,c
  917 D1:BD21 DD 86 02 -      add a,(ix+REGY)
  918 D1:BD24 4F -  -  -      ld  c,a
  919 D1:BD25 DD 7E 01 -      ld  a,(ix+REGX)
  920 D1:BD28 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  921 D1:BD29 ED 33 04 -      ADDCYC(4)
  922 D1:BD2C C3 FB B6 D1     jp i6502NextLoad
  923 D1:BD30 -  -  -  -  
  924 D1:BD30 -  -  -  -  ;absolute	STX oper	8E	3	4  
  925 D1:BD30 -  -  -  -  inst6502_stx_abs:
  926 D1:BD30 CD AA B7 D1     call subroutine6502_abs_split_start
  927 D1:BD34 E5 -  -  -      push hl
  928 D1:BD35 50 -  -  -          ld  d,b
  929 D1:BD36 79 -  -  -          ld  a,c
  930 D1:BD37 0E 0C -  -          ld  c,BASETABLE_STRIDE
  931 D1:BD39 ED 4C -  -          mlt bc
  932 D1:BD3B 21 00 40 D0         ld  hl,PAGETABLE
  933 D1:BD3F 09 -  -  -          add hl,bc
  934 D1:BD40 ED 27 -  -          ld  hl,(hl)
  935 D1:BD42 06 00 -  -          ld  b,0
  936 D1:BD44 4F -  -  -          ld  c,a
  937 D1:BD45 09 -  -  -          add hl,bc   ;full address
  938 D1:BD46 DD 46 01 -          ld  b,(ix+REGX)
  939 D1:BD49 CD 20 AF D1         WRITE_ACCESS
  940 D1:BD4D ED 33 04 -          ADDCYC(4)
  941 D1:BD50 E1 -  -  -      pop hl
  942 D1:BD51 C3 FB B6 D1     jp i6502NextLoad
  943 D1:BD55 -  -  -  -  
  944 D1:BD55 -  -  -  -  ;-----------------------------------------------------------------------------
  945 D1:BD55 -  -  -  -  ;STY - Store Index Y in Memory
  946 D1:BD55 -  -  -  -  ;    Y -> M
  947 D1:BD55 -  -  -  -  ;    N	Z	C	I	D	V
  948 D1:BD55 -  -  -  -  ;    -	-	-	-	-	-
  949 D1:BD55 -  -  -  -  
  950 D1:BD55 -  -  -  -  ;zeropage	STY oper	84	2	3  
  951 D1:BD55 -  -  -  -  inst6502_sty_zp:
  952 D1:BD55 7E -  -  -      ld  a,(hl)
  953 D1:BD56 01 00 38 D0     ld  bc,ZEROPAGE
  954 D1:BD5A 81 -  -  -      add a,c
  955 D1:BD5B 4F -  -  -      ld  c,a
  956 D1:BD5C DD 7E 02 -      ld  a,(ix+REGY)
  957 D1:BD5F 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  958 D1:BD60 ED 33 03 -      ADDCYC(3)
  959 D1:BD63 C3 FB B6 D1     jp i6502NextLoad
  960 D1:BD67 -  -  -  -  
  961 D1:BD67 -  -  -  -  ;zeropage,X	STY oper,X	94	2	4  
  962 D1:BD67 -  -  -  -  inst6502_sty_zpx:
  963 D1:BD67 7E -  -  -      ld  a,(hl)
  964 D1:BD68 01 00 38 D0     ld  bc,ZEROPAGE
  965 D1:BD6C 81 -  -  -      add a,c
  966 D1:BD6D DD 86 01 -      add a,(ix+REGX)
  967 D1:BD70 4F -  -  -      ld  c,a
  968 D1:BD71 DD 7E 02 -      ld  a,(ix+REGY)
  969 D1:BD74 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  970 D1:BD75 ED 33 04 -      ADDCYC(4)
  971 D1:BD78 C3 FB B6 D1     jp i6502NextLoad
  972 D1:BD7C -  -  -  -  
  973 D1:BD7C -  -  -  -  ;absolute	STY oper	8C	3	4  
  974 D1:BD7C -  -  -  -  inst6502_sty_abs:
  975 D1:BD7C CD AA B7 D1     call subroutine6502_abs_split_start
  976 D1:BD80 E5 -  -  -      push hl
  977 D1:BD81 50 -  -  -          ld  d,b
  978 D1:BD82 79 -  -  -          ld  a,c
  979 D1:BD83 0E 0C -  -          ld  c,BASETABLE_STRIDE
  980 D1:BD85 ED 4C -  -          mlt bc
  981 D1:BD87 21 00 40 D0         ld  hl,PAGETABLE
  982 D1:BD8B 09 -  -  -          add hl,bc
  983 D1:BD8C ED 27 -  -          ld  hl,(hl)
  984 D1:BD8E 06 00 -  -          ld  b,0
  985 D1:BD90 4F -  -  -          ld  c,a
  986 D1:BD91 09 -  -  -          add hl,bc   ;full address
  987 D1:BD92 DD 46 02 -          ld  b,(ix+REGY)
  988 D1:BD95 CD 20 AF D1         WRITE_ACCESS
  989 D1:BD99 ED 33 04 -          ADDCYC(4)
  990 D1:BD9C E1 -  -  -      pop hl
  991 D1:BD9D C3 FB B6 D1     jp i6502NextLoad
  992 D1:BDA1 -  -  -  -  
  993 D1:BDA1 -  -  -  -  ;-----------------------------------------------------------------------------
  994 D1:BDA1 -  -  -  -  ;TAX - Transfer Accumulator to Index X [A -> X]
  995 D1:BDA1 -  -  -  -  ;N	Z	C	I	D	V
  996 D1:BDA1 -  -  -  -  ;+	+	-	-	-	-
  997 D1:BDA1 -  -  -  -  ;implied	TAX	AA	1	2
  998 D1:BDA1 -  -  -  -  inst6502_tax:
  999 D1:BDA1 DD 7E 00 -      ld  a,(ix+REGA)
 1000 D1:BDA4 DD 77 01 -      ld  (ix+REGX),a
 1001 D1:BDA7 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1002 D1:BDBB ED 33 02 -      ADDCYC(2)
 1003 D1:BDBE C3 14 B7 D1     jp i6502FinishLoad
 1004 D1:BDC2 -  -  -  -  
 1005 D1:BDC2 -  -  -  -  ;TAY - Transfer Accumulator to Index Y [A -> Y]
 1006 D1:BDC2 -  -  -  -  ;N	Z	C	I	D	V
 1007 D1:BDC2 -  -  -  -  ;+	+	-	-	-	-
 1008 D1:BDC2 -  -  -  -  ;implied	TAY	A8	1	2
 1009 D1:BDC2 -  -  -  -  inst6502_tay:
 1010 D1:BDC2 DD 7E 00 -      ld  a,(ix+REGA)
 1011 D1:BDC5 DD 77 02 -      ld  (ix+REGY),a
 1012 D1:BDC8 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1013 D1:BDDC ED 33 02 -      ADDCYC(2)
 1014 D1:BDDF C3 14 B7 D1     jp i6502FinishLoad
 1015 D1:BDE3 -  -  -  -  
 1016 D1:BDE3 -  -  -  -  ;TSX - Transfer Stack Pointer to Index X [SP -> X]
 1017 D1:BDE3 -  -  -  -  ;N	Z	C	I	D	V
 1018 D1:BDE3 -  -  -  -  ;+	+	-	-	-	-
 1019 D1:BDE3 -  -  -  -  ;implied	TSX	BA	1	2
 1020 D1:BDE3 -  -  -  -  inst6502_tsx:
 1021 D1:BDE3 DD 7E 03 -      ld  a,(ix+REGSP)
 1022 D1:BDE6 DD 77 01 -      ld  (ix+REGX),a
 1023 D1:BDE9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1024 D1:BDFD ED 33 02 -      ADDCYC(2)
 1025 D1:BE00 C3 14 B7 D1     jp i6502FinishLoad
 1026 D1:BE04 -  -  -  -  
 1027 D1:BE04 -  -  -  -  ;TXA - Transfer Index X to Accumulator [X -> A]
 1028 D1:BE04 -  -  -  -  ;N	Z	C	I	D	V
 1029 D1:BE04 -  -  -  -  ;+	+	-	-	-	-
 1030 D1:BE04 -  -  -  -  ;implied	TXA	8A	1	2
 1031 D1:BE04 -  -  -  -  inst6502_txa:
 1032 D1:BE04 DD 7E 01 -      ld  a,(ix+REGX)
 1033 D1:BE07 DD 77 00 -      ld  (ix+REGA),a
 1034 D1:BE0A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1035 D1:BE1E ED 33 02 -      ADDCYC(2)
 1036 D1:BE21 C3 14 B7 D1     jp i6502FinishLoad
 1037 D1:BE25 -  -  -  -  
 1038 D1:BE25 -  -  -  -  ;TXS - Transfer Index X to Stack Pointer [X -> SP]
 1039 D1:BE25 -  -  -  -  ;N	Z	C	I	D	V
 1040 D1:BE25 -  -  -  -  ;-	-	-	-	-	-
 1041 D1:BE25 -  -  -  -  ;implied	TXS	9A	1	2
 1042 D1:BE25 -  -  -  -  inst6502_txs:
 1043 D1:BE25 DD 7E 01 -      ld  a,(ix+REGX)
 1044 D1:BE28 DD 77 03 -      ld  (ix+REGSP),a
 1045 D1:BE2B ED 33 02 -      ADDCYC(2)
 1046 D1:BE2E C3 14 B7 D1     jp i6502FinishLoad
 1047 D1:BE32 -  -  -  -  
 1048 D1:BE32 -  -  -  -  ;TYA - Transfer Index Y to Accumulator [Y -> A]
 1049 D1:BE32 -  -  -  -  ;N	Z	C	I	D	V
 1050 D1:BE32 -  -  -  -  ;+	+	-	-	-	-
 1051 D1:BE32 -  -  -  -  ;implied	TYA	98	1	2
 1052 D1:BE32 -  -  -  -  inst6502_tya:
 1053 D1:BE32 DD 7E 02 -      ld  a,(ix+REGY)
 1054 D1:BE35 DD 77 00 -      ld  (ix+REGA),a
 1055 D1:BE38 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1056 D1:BE4C ED 33 02 -      ADDCYC(2)
 1057 D1:BE4F C3 14 B7 D1     jp i6502FinishLoad
 1058 D1:BE53 -  -  -  -  
 1059 D1:BE53 -  -  -  -  ;-----------------------------------------------------------------------------
 1060 D1:BE53 -  -  -  -  ;-----------------------------------------------------------------------------
 1061 D1:BE53 -  -  -  -  ;-----------------------------------------------------------------------------
 1062 D1:BE53 -  -  -  -  ;Instructions by type: Stack Instructions
 1063 D1:BE53 -  -  -  -  ;PHA - Push Accumulator on Stack
 1064 D1:BE53 -  -  -  -  ;    push A
 1065 D1:BE53 -  -  -  -  ;    N	Z	C	I	D	V
 1066 D1:BE53 -  -  -  -  ;    -	-	-	-	-	-
 1067 D1:BE53 -  -  -  -  ;implied	PHA	48	1	3 
 1068 D1:BE53 -  -  -  -  inst6502_pha:
 1069 D1:BE53 ED 33 03 -      ADDCYC(3)
 1070 D1:BE56 DD 7E 00 -      ld  a,(ix+REGA)
 1071 D1:BE59 01 00 39 D0     ld  bc,STACKBASE
 1072 D1:BE5D DD 4E 03 -      ld  c,(ix+REGSP)
 1073 D1:BE60 02 -  -  -      ld  (bc),a
 1074 D1:BE61 0D -  -  -      dec c
 1075 D1:BE62 DD 71 03 -      ld  (ix+REGSP),c
 1076 D1:BE65 C3 14 B7 D1     jp i6502FinishLoad
 1077 D1:BE69 -  -  -  -  
 1078 D1:BE69 -  -  -  -  ;PHP - Push Processor Status on Stack
 1079 D1:BE69 -  -  -  -  ;    The status register will be pushed with the break
 1080 D1:BE69 -  -  -  -  ;    flag and bit 5 set to 1.
 1081 D1:BE69 -  -  -  -  ;    push SR
 1082 D1:BE69 -  -  -  -  ;    N	Z	C	I	D	V
 1083 D1:BE69 -  -  -  -  ;    -	-	-	-	-	-
 1084 D1:BE69 -  -  -  -  ;implied	PHP	08	1	3  
 1085 D1:BE69 -  -  -  -  inst6502_php:
 1086 D1:BE69 ED 33 03 -      ADDCYC(3)
 1087 D1:BE6C DD 7E 04 -      ld  a,(ix+REGSR)
 1088 D1:BE6F F6 30 -  -      or  a,%00110000
 1089 D1:BE71 01 00 39 D0     ld  bc,STACKBASE
 1090 D1:BE75 DD 4E 03 -      ld  c,(ix+REGSP)
 1091 D1:BE78 02 -  -  -      ld  (bc),a
 1092 D1:BE79 0D -  -  -      dec c
 1093 D1:BE7A DD 71 03 -      ld  (ix+REGSP),c
 1094 D1:BE7D C3 14 B7 D1     jp i6502FinishLoad
 1095 D1:BE81 -  -  -  -  
 1096 D1:BE81 -  -  -  -  
 1097 D1:BE81 -  -  -  -  
 1098 D1:BE81 -  -  -  -  ;PLA - Pull Accumulator from Stack
 1099 D1:BE81 -  -  -  -  ;    pull A
 1100 D1:BE81 -  -  -  -  ;    N	Z	C	I	D	V
 1101 D1:BE81 -  -  -  -  ;    +	+	-	-	-	-
 1102 D1:BE81 -  -  -  -  ;implied	PLA	68	1	4  
 1103 D1:BE81 -  -  -  -  inst6502_pla:
 1104 D1:BE81 ED 33 04 -      ADDCYC(4)
 1105 D1:BE84 01 00 39 D0     ld  bc,STACKBASE
 1106 D1:BE88 DD 4E 03 -      ld  c,(ix+REGSP)
 1107 D1:BE8B 0C -  -  -      inc c
 1108 D1:BE8C 0A -  -  -      ld  a,(bc)
 1109 D1:BE8D DD 71 03 -      ld  (ix+REGSP),c
 1110 D1:BE90 DD 77 00 -      ld  (ix+REGA),a
 1111 D1:BE93 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1112 D1:BEA7 C3 14 B7 D1     jp i6502FinishLoad
 1113 D1:BEAB -  -  -  -  
 1114 D1:BEAB -  -  -  -  ;PLP - Pull Processor Status from Stack
 1115 D1:BEAB -  -  -  -  ;    The status register will be pulled with the break
 1116 D1:BEAB -  -  -  -  ;    flag and bit 5 ignored.
 1117 D1:BEAB -  -  -  -  ;    pull SR
 1118 D1:BEAB -  -  -  -  ;    N	Z	C	I	D	V
 1119 D1:BEAB -  -  -  -  ;    from stack
 1120 D1:BEAB -  -  -  -  ;implied	PLP	28	1	4  
 1121 D1:BEAB -  -  -  -  inst6502_plp:
 1122 D1:BEAB ED 33 04 -      ADDCYC(4)
 1123 D1:BEAE 01 00 39 D0     ld  bc,STACKBASE
 1124 D1:BEB2 DD 4E 03 -      ld  c,(ix+REGSP)
 1125 D1:BEB5 0C -  -  -      inc c
 1126 D1:BEB6 0A -  -  -      ld  a,(bc)
 1127 D1:BEB7 DD 71 03 -      ld  (ix+REGSP),c
 1128 D1:BEBA DD 46 04 -      ld  b,(ix+REGSR)
 1129 D1:BEBD A8 -  -  -      xor a,b
 1130 D1:BEBE E6 CF -  -      and a,%11001111
 1131 D1:BEC0 A8 -  -  -      xor a,b
 1132 D1:BEC1 DD 77 04 -      ld  (ix+REGSR),a
 1133 D1:BEC4 C3 14 B7 D1     jp i6502FinishLoad
 1134 D1:BEC8 -  -  -  -  
 1135 D1:BEC8 -  -  -  -  
 1136 D1:BEC8 -  -  -  -  ;-----------------------------------------------------------------------------
 1137 D1:BEC8 -  -  -  -  ;-----------------------------------------------------------------------------
 1138 D1:BEC8 -  -  -  -  ;-----------------------------------------------------------------------------
 1139 D1:BEC8 -  -  -  -  ;Instructions by type: Decrements and Increments
 1140 D1:BEC8 -  -  -  -  
 1141 D1:BEC8 -  -  -  -  ;DEC -  Decrement Memory by One
 1142 D1:BEC8 -  -  -  -  ;    M - 1 -> M
 1143 D1:BEC8 -  -  -  -  ;    N	Z	C	I	D	V
 1144 D1:BEC8 -  -  -  -  ;    +	+	-	-	-	-
 1145 D1:BEC8 -  -  -  -  ;    addressing	assembler	opc	bytes	cycles
 1146 D1:BEC8 -  -  -  -  
 1147 D1:BEC8 -  -  -  -  ;    zeropage	DEC oper	C6	2	5  
 1148 D1:BEC8 -  -  -  -  inst6502_dec_zp:
 1149 D1:BEC8 7E -  -  -      ld  a,(hl)
 1150 D1:BEC9 01 00 38 D0     ld  bc,ZEROPAGE
 1151 D1:BECD 81 -  -  -      add a,c
 1152 D1:BECE 4F -  -  -      ld  c,a
 1153 D1:BECF 0A -  -  -      ld  a,(bc)
 1154 D1:BED0 3D -  -  -      dec a
 1155 D1:BED1 02 -  -  -      ld  (bc),a
 1156 D1:BED2 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1157 D1:BEE6 ED 33 05 -      ADDCYC(5)
 1158 D1:BEE9 C3 FB B6 D1     jp i6502NextLoad
 1159 D1:BEED -  -  -  -  
 1160 D1:BEED -  -  -  -  ;    zeropage,X	DEC oper,X	D6	2	6  
 1161 D1:BEED -  -  -  -  inst6502_dec_zpx:
 1162 D1:BEED 7E -  -  -      ld  a,(hl)
 1163 D1:BEEE 01 00 38 D0     ld  bc,ZEROPAGE
 1164 D1:BEF2 81 -  -  -      add a,c
 1165 D1:BEF3 DD 86 01 -      add a,(ix+REGX)
 1166 D1:BEF6 4F -  -  -      ld  c,a
 1167 D1:BEF7 0A -  -  -      ld  a,(bc)
 1168 D1:BEF8 3D -  -  -      dec a
 1169 D1:BEF9 02 -  -  -      ld  (bc),a
 1170 D1:BEFA DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1171 D1:BF0E ED 33 06 -      ADDCYC(6)
 1172 D1:BF11 C3 FB B6 D1     jp i6502NextLoad
 1173 D1:BF15 -  -  -  -  
 1174 D1:BF15 -  -  -  -  ;    absolute	DEC oper	CE	3	6  
 1175 D1:BF15 -  -  -  -  inst6502_dec_abs:
 1176 D1:BF15 CD AA B7 D1     call subroutine6502_abs_split_start
 1177 D1:BF19 E5 -  -  -      push hl
 1178 D1:BF1A 50 -  -  -          ld  d,b
 1179 D1:BF1B 79 -  -  -          ld  a,c
 1180 D1:BF1C 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1181 D1:BF1E ED 4C -  -          mlt bc
 1182 D1:BF20 21 00 40 D0         ld  hl,PAGETABLE
 1183 D1:BF24 09 -  -  -          add hl,bc
 1184 D1:BF25 ED 27 -  -          ld  hl,(hl)
 1185 D1:BF27 06 00 -  -          ld  b,0
 1186 D1:BF29 4F -  -  -          ld  c,a
 1187 D1:BF2A 09 -  -  -          add hl,bc   ;full address
 1188 D1:BF2B CD 7D AE D1         READ_ACCESS
 1189 D1:BF2F 3D -  -  -          dec a
 1190 D1:BF30 47 -  -  -          ld  b,a
 1191 D1:BF31 -  -  -  -          ;
 1192 D1:BF31 DD 7E 04 -          ld  a,(ix+REGSR)
 1193 D1:BF34 CB 8F -  -          res SF_ZERO,a
 1194 D1:BF36 20 02 -  -          jr  nz,$+4
 1195 D1:BF38 CB CF -  -          set SF_ZERO,a
 1196 D1:BF3A CB BF -  -          res SF_NEG,a
 1197 D1:BF3C F2 42 BF D1         jp  p,$+6
 1198 D1:BF40 CB FF -  -          set SF_NEG,a
 1199 D1:BF42 DD 77 04 -          ld  (ix+REGSR),a
 1200 D1:BF45 -  -  -  -          ;
 1201 D1:BF45 CD 20 AF D1         WRITE_ACCESS
 1202 D1:BF49 ED 33 06 -          ADDCYC(6)
 1203 D1:BF4C E1 -  -  -      pop hl
 1204 D1:BF4D C3 FB B6 D1     jp i6502NextLoad
 1205 D1:BF51 -  -  -  -  
 1206 D1:BF51 -  -  -  -  ;    absolute,X	DEC oper,X	DE	3	7  
 1207 D1:BF51 -  -  -  -  inst6502_dec_absx:
 1208 D1:BF51 ED 33 07 -      ADDCYC(7)
 1209 D1:BF54 CD 07 B8 D1     PUSH_ABSXSPLIT_NODEP
 1210 D1:BF58 CD 7D AE D1         READ_ACCESS
 1211 D1:BF5C 3D -  -  -          dec a
 1212 D1:BF5D 47 -  -  -          ld  b,a
 1213 D1:BF5E -  -  -  -          ;
 1214 D1:BF5E DD 7E 04 -          ld  a,(ix+REGSR)
 1215 D1:BF61 CB 8F -  -          res SF_ZERO,a
 1216 D1:BF63 20 02 -  -          jr  nz,$+4
 1217 D1:BF65 CB CF -  -          set SF_ZERO,a
 1218 D1:BF67 CB BF -  -          res SF_NEG,a
 1219 D1:BF69 F2 6F BF D1         jp  p,$+6
 1220 D1:BF6D CB FF -  -          set SF_NEG,a
 1221 D1:BF6F DD 77 04 -          ld  (ix+REGSR),a
 1222 D1:BF72 -  -  -  -          ;
 1223 D1:BF72 CD 20 AF D1         WRITE_ACCESS
 1224 D1:BF76 E1 -  -  -      pop hl
 1225 D1:BF77 C3 FB B6 D1     jp i6502NextLoad
 1226 D1:BF7B -  -  -  -  
 1227 D1:BF7B -  -  -  -  ;DEX - Decrement Index X by One [X - 1 -> X]
 1228 D1:BF7B -  -  -  -  ;Flags altered: NZ
 1229 D1:BF7B -  -  -  -  ;implied	DEX	CA	1	2  
 1230 D1:BF7B -  -  -  -  inst6502_dex:
 1231 D1:BF7B DD 35 01 -      dec (ix+REGX)
 1232 D1:BF7E DD 7E 04 -  _:  ld  a,(ix+REGSR)
 1233 D1:BF81 CB 8F -  -      res SF_ZERO,a
 1234 D1:BF83 20 02 -  -      jr  nz,$+4
 1235 D1:BF85 CB CF -  -      set SF_ZERO,a
 1236 D1:BF87 CB BF -  -      res SF_NEG,a
 1237 D1:BF89 F2 8F BF D1     jp  p,$+6
 1238 D1:BF8D CB FF -  -      set SF_NEG,a
 1239 D1:BF8F DD 77 04 -      ld  (ix+REGSR),a
 1240 D1:BF92 ED 33 02 -      ADDCYC(2)
 1241 D1:BF95 C3 14 B7 D1     jp i6502FinishLoad
 1242 D1:BF99 -  -  -  -  
 1243 D1:BF99 -  -  -  -  ;DEY - Decrement Index Y by One [Y - 1 -> Y]
 1244 D1:BF99 -  -  -  -  ;Flags altered: NZ
 1245 D1:BF99 -  -  -  -  ;implied	DEY	88	1	2  
 1246 D1:BF99 -  -  -  -  inst6502_dey:
 1247 D1:BF99 DD 35 02 -      dec (ix+REGY)
 1248 D1:BF9C 18 E0 -  -      jr  -_
 1249 D1:BF9E -  -  -  -  
 1250 D1:BF9E -  -  -  -  
 1251 D1:BF9E -  -  -  -  ;INX - Increment Index X by One [X + 1 -> X]
 1252 D1:BF9E -  -  -  -  ;Flags altered: NZ
 1253 D1:BF9E -  -  -  -  ;implied	INX	E8	1	2  
 1254 D1:BF9E -  -  -  -  inst6502_inx:
 1255 D1:BF9E DD 34 01 -      inc (ix+REGX)
 1256 D1:BFA1 18 DB -  -      jr  -_
 1257 D1:BFA3 -  -  -  -  
 1258 D1:BFA3 -  -  -  -  
 1259 D1:BFA3 -  -  -  -  ;INY - Increment Index Y by One [Y + 1 -> Y]
 1260 D1:BFA3 -  -  -  -  ;Flags altered: NZ
 1261 D1:BFA3 -  -  -  -  ;implied	INY	C8	1	2  
 1262 D1:BFA3 -  -  -  -  inst6502_iny:
 1263 D1:BFA3 DD 34 02 -      inc (ix+REGY)
 1264 D1:BFA6 18 D6 -  -      jr  -_
 1265 D1:BFA8 -  -  -  -  
 1266 D1:BFA8 -  -  -  -  
 1267 D1:BFA8 -  -  -  -  ;INC - Increment Memory by One
 1268 D1:BFA8 -  -  -  -  ;    M + 1 -> M
 1269 D1:BFA8 -  -  -  -  ;    N	Z	C	I	D	V
 1270 D1:BFA8 -  -  -  -  ;    +	+	-	-	-	-
 1271 D1:BFA8 -  -  -  -  
 1272 D1:BFA8 -  -  -  -  ;zeropage	INC oper	E6	2	5  
 1273 D1:BFA8 -  -  -  -  inst6502_inc_zp:
 1274 D1:BFA8 7E -  -  -      ld  a,(hl)
 1275 D1:BFA9 01 00 38 D0     ld  bc,ZEROPAGE
 1276 D1:BFAD 81 -  -  -      add a,c
 1277 D1:BFAE 4F -  -  -      ld  c,a
 1278 D1:BFAF 0A -  -  -      ld  a,(bc)
 1279 D1:BFB0 3C -  -  -      inc a
 1280 D1:BFB1 02 -  -  -      ld  (bc),a
 1281 D1:BFB2 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1282 D1:BFC6 ED 33 05 -      ADDCYC(5)
 1283 D1:BFC9 C3 FB B6 D1     jp i6502NextLoad
 1284 D1:BFCD -  -  -  -  
 1285 D1:BFCD -  -  -  -  ;zeropage,X	INC oper,X	F6	2	6  
 1286 D1:BFCD -  -  -  -  inst6502_inc_zpx:
 1287 D1:BFCD 7E -  -  -      ld  a,(hl)
 1288 D1:BFCE 01 00 38 D0     ld  bc,ZEROPAGE
 1289 D1:BFD2 81 -  -  -      add a,c
 1290 D1:BFD3 DD 86 01 -      add a,(ix+REGX)
 1291 D1:BFD6 4F -  -  -      ld  c,a
 1292 D1:BFD7 0A -  -  -      ld  a,(bc)
 1293 D1:BFD8 3C -  -  -      inc a
 1294 D1:BFD9 02 -  -  -      ld  (bc),a
 1295 D1:BFDA DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1296 D1:BFEE ED 33 06 -      ADDCYC(6)
 1297 D1:BFF1 C3 FB B6 D1     jp i6502NextLoad
 1298 D1:BFF5 -  -  -  -      
 1299 D1:BFF5 -  -  -  -  ;absolute	INC oper	EE	3	6
 1300 D1:BFF5 -  -  -  -  inst6502_inc_abs:
 1301 D1:BFF5 CD AA B7 D1     call subroutine6502_abs_split_start
 1302 D1:BFF9 E5 -  -  -      push hl
 1303 D1:BFFA 50 -  -  -          ld  d,b
 1304 D1:BFFB 79 -  -  -          ld  a,c
 1305 D1:BFFC 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1306 D1:BFFE ED 4C -  -          mlt bc
 1307 D1:C000 21 00 40 D0         ld  hl,PAGETABLE
 1308 D1:C004 09 -  -  -          add hl,bc
 1309 D1:C005 ED 27 -  -          ld  hl,(hl)
 1310 D1:C007 06 00 -  -          ld  b,0
 1311 D1:C009 4F -  -  -          ld  c,a
 1312 D1:C00A 09 -  -  -          add hl,bc   ;full address
 1313 D1:C00B CD 7D AE D1         READ_ACCESS
 1314 D1:C00F 3C -  -  -          inc a
 1315 D1:C010 47 -  -  -          ld  b,a
 1316 D1:C011 -  -  -  -          ;
 1317 D1:C011 DD 7E 04 -          ld  a,(ix+REGSR)
 1318 D1:C014 CB 8F -  -          res SF_ZERO,a
 1319 D1:C016 20 02 -  -          jr  nz,$+4
 1320 D1:C018 CB CF -  -          set SF_ZERO,a
 1321 D1:C01A CB BF -  -          res SF_NEG,a
 1322 D1:C01C F2 22 C0 D1         jp  p,$+6
 1323 D1:C020 CB FF -  -          set SF_NEG,a
 1324 D1:C022 DD 77 04 -          ld  (ix+REGSR),a
 1325 D1:C025 -  -  -  -          ;
 1326 D1:C025 CD 20 AF D1         WRITE_ACCESS
 1327 D1:C029 ED 33 06 -          ADDCYC(6)
 1328 D1:C02C E1 -  -  -      pop hl
 1329 D1:C02D C3 FB B6 D1     jp i6502NextLoad
 1330 D1:C031 -  -  -  -  
 1331 D1:C031 -  -  -  -  ;absolute,X	INC oper,X	FE	3	7  
 1332 D1:C031 -  -  -  -  inst6502_inc_absx:
 1333 D1:C031 ED 33 07 -      ADDCYC(7)
 1334 D1:C034 CD 07 B8 D1     PUSH_ABSXSPLIT_NODEP
 1335 D1:C038 CD 7D AE D1         READ_ACCESS
 1336 D1:C03C 3C -  -  -          inc a
 1337 D1:C03D 47 -  -  -          ld  b,a
 1338 D1:C03E -  -  -  -          ;
 1339 D1:C03E DD 7E 04 -          ld  a,(ix+REGSR)
 1340 D1:C041 CB 8F -  -          res SF_ZERO,a
 1341 D1:C043 20 02 -  -          jr  nz,$+4
 1342 D1:C045 CB CF -  -          set SF_ZERO,a
 1343 D1:C047 CB BF -  -          res SF_NEG,a
 1344 D1:C049 F2 4F C0 D1         jp  p,$+6
 1345 D1:C04D CB FF -  -          set SF_NEG,a
 1346 D1:C04F DD 77 04 -          ld  (ix+REGSR),a
 1347 D1:C052 -  -  -  -          ;
 1348 D1:C052 CD 20 AF D1         WRITE_ACCESS
 1349 D1:C056 E1 -  -  -      pop hl
 1350 D1:C057 C3 FB B6 D1     jp i6502NextLoad
 1351 D1:C05B -  -  -  -  
 1352 D1:C05B -  -  -  -  ;-----------------------------------------------------------------------------
 1353 D1:C05B -  -  -  -  ;-----------------------------------------------------------------------------
 1354 D1:C05B -  -  -  -  ;-----------------------------------------------------------------------------
 1355 D1:C05B -  -  -  -  ;Instructions by type: Arithmetic Operations
 1356 D1:C05B -  -  -  -  ;ADC - Add Memory to Accumulator with Carry  [A + M + C -> A, C]
 1357 D1:C05B -  -  -  -  ;    N	Z	C	I	D	V
 1358 D1:C05B -  -  -  -  ;    +	+	+	-	-	+
 1359 D1:C05B -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1360 D1:C05B -  -  -  -  
 1361 D1:C05B -  -  -  -  ;immediate	ADC #oper	69	2	2  
 1362 D1:C05B -  -  -  -  inst6502_adc_imm:
 1363 D1:C05B ED 33 02 -      ADDCYC(2)
 1364 D1:C05E 4E -  -  -      ld  c,(hl)
 1365 D1:C05F C3 3C B8 D1     jp  subroutine6502_adc_combined_end
 1366 D1:C063 -  -  -  -      
 1367 D1:C063 -  -  -  -  
 1368 D1:C063 -  -  -  -  ;zeropage	ADC oper	65	2	3
 1369 D1:C063 -  -  -  -  inst6502_adc_zp:
 1370 D1:C063 ED 33 03 -      ADDCYC(3)
 1371 D1:C066 7E -  -  -      ld  a,(hl)
 1372 D1:C067 01 00 38 D0     ld  bc,ZEROPAGE
 1373 D1:C06B 81 -  -  -      add a,c
 1374 D1:C06C 4F -  -  -      ld  c,a
 1375 D1:C06D 0A -  -  -      ld  a,(bc)
 1376 D1:C06E 4F -  -  -      ld  c,a
 1377 D1:C06F C3 3C B8 D1     jp  subroutine6502_adc_combined_end
 1378 D1:C073 -  -  -  -  
 1379 D1:C073 -  -  -  -  ;zeropage,X	ADC oper,X	75	2	4  
 1380 D1:C073 -  -  -  -  inst6502_adc_zpx:
 1381 D1:C073 ED 33 04 -      ADDCYC(4)
 1382 D1:C076 7E -  -  -      ld  a,(hl)
 1383 D1:C077 DD 86 01 -      add a,(ix+REGX)
 1384 D1:C07A 01 00 38 D0     ld  bc,ZEROPAGE
 1385 D1:C07E 81 -  -  -      add a,c
 1386 D1:C07F 4F -  -  -      ld  c,a
 1387 D1:C080 0A -  -  -      ld  a,(bc)
 1388 D1:C081 4F -  -  -      ld  c,a
 1389 D1:C082 C3 3C B8 D1     jp  subroutine6502_adc_combined_end
 1390 D1:C086 -  -  -  -  
 1391 D1:C086 -  -  -  -  ;absolute	ADC oper	6D	3	4  
 1392 D1:C086 -  -  -  -  inst6502_adc_abs:
 1393 D1:C086 ED 33 04 -      ADDCYC(4)
 1394 D1:C089 CD AA B7 D1     call subroutine6502_abs_split_start
 1395 D1:C08D E5 -  -  -      push hl
 1396 D1:C08E 50 -  -  -          ld  d,b
 1397 D1:C08F 79 -  -  -          ld  a,c
 1398 D1:C090 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1399 D1:C092 ED 4C -  -          mlt bc
 1400 D1:C094 21 00 40 D0         ld  hl,PAGETABLE
 1401 D1:C098 09 -  -  -          add hl,bc
 1402 D1:C099 ED 27 -  -          ld  hl,(hl)
 1403 D1:C09B 06 00 -  -          ld  b,0
 1404 D1:C09D 4F -  -  -          ld  c,a
 1405 D1:C09E 09 -  -  -          add hl,bc   ;full address
 1406 D1:C09F CD 7D AE D1         READ_ACCESS
 1407 D1:C0A3 E1 -  -  -      pop hl
 1408 D1:C0A4 4F -  -  -      ld  c,a
 1409 D1:C0A5 C3 3C B8 D1     jp  subroutine6502_adc_combined_end
 1410 D1:C0A9 -  -  -  -  
 1411 D1:C0A9 -  -  -  -  ;absolute,X	ADC oper,X	7D	3	4* 
 1412 D1:C0A9 -  -  -  -  inst6502_adc_absx:
 1413 D1:C0A9 ED 33 04 -      ADDCYC(4)
 1414 D1:C0AC CD CB B7 D1     PUSH_ABSXSPLIT
 1415 D1:C0B0 CD 7D AE D1         READ_ACCESS
 1416 D1:C0B4 E1 -  -  -      pop hl
 1417 D1:C0B5 4F -  -  -      ld  c,a
 1418 D1:C0B6 C3 3C B8 D1     jp  subroutine6502_adc_combined_end
 1419 D1:C0BA -  -  -  -  
 1420 D1:C0BA -  -  -  -  ;absolute,Y	ADC oper,Y	79	3	4*
 1421 D1:C0BA -  -  -  -  inst6502_adc_absy:
 1422 D1:C0BA ED 33 04 -      ADDCYC(4)
 1423 D1:C0BD CD C6 B7 D1     PUSH_ABSYSPLIT
 1424 D1:C0C1 CD 7D AE D1         READ_ACCESS
 1425 D1:C0C5 E1 -  -  -      pop hl
 1426 D1:C0C6 4F -  -  -      ld  c,a
 1427 D1:C0C7 C3 3C B8 D1     jp  subroutine6502_adc_combined_end
 1428 D1:C0CB -  -  -  -  
 1429 D1:C0CB -  -  -  -  ;(indirect,X)	ADC (oper,X)	61	2	6  
 1430 D1:C0CB -  -  -  -  inst6502_adc_indx:
 1431 D1:C0CB ED 33 06 -      ADDCYC(6)
 1432 D1:C0CE E5 -  -  -      push hl
 1433 D1:C0CF 7E -  -  -          ld  a,(hl)
 1434 D1:C0D0 21 00 38 D0         ld  hl,ZEROPAGE
 1435 D1:C0D4 85 -  -  -          add a,L
 1436 D1:C0D5 DD 86 01 -          add a,(ix+REGX)
 1437 D1:C0D8 6F -  -  -          ld  L,a
 1438 D1:C0D9 7E -  -  -          ld  a,(hl)
 1439 D1:C0DA 2C -  -  -          inc L
 1440 D1:C0DB 56 -  -  -          ld  d,(hl)
 1441 D1:C0DC 42 -  -  -          ld  b,d
 1442 D1:C0DD 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1443 D1:C0DF ED 4C -  -          mlt bc
 1444 D1:C0E1 21 00 40 D0         ld  hl,PAGETABLE
 1445 D1:C0E5 09 -  -  -          add hl,bc
 1446 D1:C0E6 ED 27 -  -          ld  hl,(hl)
 1447 D1:C0E8 06 00 -  -          ld  b,0
 1448 D1:C0EA 4F -  -  -          ld  c,a
 1449 D1:C0EB 09 -  -  -          add hl,bc
 1450 D1:C0EC CD 7D AE D1         READ_ACCESS
 1451 D1:C0F0 E1 -  -  -      pop hl
 1452 D1:C0F1 4F -  -  -      ld  c,a
 1453 D1:C0F2 C3 3C B8 D1     jp  subroutine6502_adc_combined_end
 1454 D1:C0F6 -  -  -  -  
 1455 D1:C0F6 -  -  -  -  ;(indirect),Y	ADC (oper),Y	71	2	5* 
 1456 D1:C0F6 -  -  -  -  inst6502_adc_indy:
 1457 D1:C0F6 ED 33 05 -      ADDCYC(5)
 1458 D1:C0F9 E5 -  -  -      push hl
 1459 D1:C0FA 7E -  -  -          ld  a,(hl)
 1460 D1:C0FB 21 00 38 D0         ld  hl,ZEROPAGE
 1461 D1:C0FF 85 -  -  -          add a,L
 1462 D1:C100 6F -  -  -          ld  L,a
 1463 D1:C101 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1464 D1:C102 2C -  -  -          inc L
 1465 D1:C103 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1466 D1:C106 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1467 D1:C107 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1468 D1:C109 FD 23 -  -          ADDCYC(1)
 1469 D1:C10B 24 -  -  -          inc h
 1470 D1:C10C 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1471 D1:C10D 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1472 D1:C10F ED 6C -  -          mlt hl          ;23.
 1473 D1:C111 01 00 40 D0         ld  bc,PAGETABLE
 1474 D1:C115 09 -  -  -          add hl,bc
 1475 D1:C116 ED 27 -  -          ld  hl,(hl)     ;address get.
 1476 D1:C118 01 00 00 00         ld  bc,0
 1477 D1:C11C 4F -  -  -          ld  c,a
 1478 D1:C11D 09 -  -  -          add hl,bc       ;Full address get.
 1479 D1:C11E CD 7D AE D1         READ_ACCESS
 1480 D1:C122 E1 -  -  -      pop hl
 1481 D1:C123 4F -  -  -      ld  c,a
 1482 D1:C124 C3 3C B8 D1     jp  subroutine6502_adc_combined_end
 1483 D1:C128 -  -  -  -  
 1484 D1:C128 -  -  -  -  
 1485 D1:C128 -  -  -  -  ;SBC - Subtract Memory from Accumulator with Borrow
 1486 D1:C128 -  -  -  -  ;A - M - C̅ -> A
 1487 D1:C128 -  -  -  -  ;N	Z	C	I	D	V
 1488 D1:C128 -  -  -  -  ;+	+	+	-	-	+
 1489 D1:C128 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1490 D1:C128 -  -  -  -  
 1491 D1:C128 -  -  -  -  ;immediate	SBC #oper	E9	2	2  
 1492 D1:C128 -  -  -  -  inst6502_sbc_imm:
 1493 D1:C128 ED 33 02 -      ADDCYC(2)
 1494 D1:C12B 4E -  -  -      ld  c,(hl)
 1495 D1:C12C C3 6D B8 D1     jp  subroutine6502_sbc_combined_end
 1496 D1:C130 -  -  -  -  
 1497 D1:C130 -  -  -  -  ;zeropage	SBC oper	E5	2	3  
 1498 D1:C130 -  -  -  -  inst6502_sbc_zp:
 1499 D1:C130 ED 33 03 -      ADDCYC(3)
 1500 D1:C133 7E -  -  -      ld  a,(hl)
 1501 D1:C134 01 00 38 D0     ld  bc,ZEROPAGE
 1502 D1:C138 81 -  -  -      add a,c
 1503 D1:C139 4F -  -  -      ld  c,a
 1504 D1:C13A 0A -  -  -      ld  a,(bc)
 1505 D1:C13B 4F -  -  -      ld  c,a
 1506 D1:C13C C3 6D B8 D1     jp  subroutine6502_sbc_combined_end
 1507 D1:C140 -  -  -  -  
 1508 D1:C140 -  -  -  -  ;zeropage,X	SBC oper,X	F5	2	4  
 1509 D1:C140 -  -  -  -  inst6502_sbc_zpx:
 1510 D1:C140 ED 33 04 -      ADDCYC(4)
 1511 D1:C143 7E -  -  -      ld  a,(hl)
 1512 D1:C144 DD 86 01 -      add a,(ix+REGX)
 1513 D1:C147 01 00 38 D0     ld  bc,ZEROPAGE
 1514 D1:C14B 81 -  -  -      add a,c
 1515 D1:C14C 4F -  -  -      ld  c,a
 1516 D1:C14D 0A -  -  -      ld  a,(bc)
 1517 D1:C14E 4F -  -  -      ld  c,a
 1518 D1:C14F C3 6D B8 D1     jp  subroutine6502_sbc_combined_end
 1519 D1:C153 -  -  -  -  
 1520 D1:C153 -  -  -  -  ;absolute	SBC oper	ED	3	4  
 1521 D1:C153 -  -  -  -  inst6502_sbc_abs:
 1522 D1:C153 ED 33 04 -      ADDCYC(4)
 1523 D1:C156 CD AA B7 D1     call subroutine6502_abs_split_start
 1524 D1:C15A E5 -  -  -      push hl
 1525 D1:C15B 50 -  -  -          ld  d,b
 1526 D1:C15C 79 -  -  -          ld  a,c
 1527 D1:C15D 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1528 D1:C15F ED 4C -  -          mlt bc
 1529 D1:C161 21 00 40 D0         ld  hl,PAGETABLE
 1530 D1:C165 09 -  -  -          add hl,bc
 1531 D1:C166 ED 27 -  -          ld  hl,(hl)
 1532 D1:C168 06 00 -  -          ld  b,0
 1533 D1:C16A 4F -  -  -          ld  c,a
 1534 D1:C16B 09 -  -  -          add hl,bc   ;full address
 1535 D1:C16C CD 7D AE D1         READ_ACCESS
 1536 D1:C170 E1 -  -  -      pop hl
 1537 D1:C171 4F -  -  -      ld  c,a
 1538 D1:C172 C3 6D B8 D1     jp  subroutine6502_sbc_combined_end
 1539 D1:C176 -  -  -  -  
 1540 D1:C176 -  -  -  -  ;absolute,X	SBC oper,X	FD	3	4* 
 1541 D1:C176 -  -  -  -  inst6502_sbc_absx:
 1542 D1:C176 ED 33 04 -      ADDCYC(4)
 1543 D1:C179 CD CB B7 D1     PUSH_ABSXSPLIT
 1544 D1:C17D CD 7D AE D1         READ_ACCESS
 1545 D1:C181 E1 -  -  -      pop hl
 1546 D1:C182 4F -  -  -      ld  c,a
 1547 D1:C183 C3 6D B8 D1     jp  subroutine6502_sbc_combined_end
 1548 D1:C187 -  -  -  -  
 1549 D1:C187 -  -  -  -  ;absolute,Y	SBC oper,Y	F9	3	4* 
 1550 D1:C187 -  -  -  -  inst6502_sbc_absy:
 1551 D1:C187 ED 33 04 -      ADDCYC(4)
 1552 D1:C18A CD C6 B7 D1     PUSH_ABSYSPLIT
 1553 D1:C18E CD 7D AE D1         READ_ACCESS
 1554 D1:C192 E1 -  -  -      pop hl
 1555 D1:C193 4F -  -  -      ld  c,a
 1556 D1:C194 C3 6D B8 D1     jp  subroutine6502_sbc_combined_end
 1557 D1:C198 -  -  -  -  
 1558 D1:C198 -  -  -  -  ;(indirect,X)	SBC (oper,X)	E1	2	6  
 1559 D1:C198 -  -  -  -  inst6502_sbc_indx:
 1560 D1:C198 ED 33 06 -      ADDCYC(6)
 1561 D1:C19B E5 -  -  -      push hl
 1562 D1:C19C 7E -  -  -          ld  a,(hl)
 1563 D1:C19D 21 00 38 D0         ld  hl,ZEROPAGE
 1564 D1:C1A1 85 -  -  -          add a,L
 1565 D1:C1A2 DD 86 01 -          add a,(ix+REGX)
 1566 D1:C1A5 6F -  -  -          ld  L,a
 1567 D1:C1A6 7E -  -  -          ld  a,(hl)
 1568 D1:C1A7 2C -  -  -          inc L
 1569 D1:C1A8 56 -  -  -          ld  d,(hl)
 1570 D1:C1A9 42 -  -  -          ld  b,d
 1571 D1:C1AA 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1572 D1:C1AC ED 4C -  -          mlt bc
 1573 D1:C1AE 21 00 40 D0         ld  hl,PAGETABLE
 1574 D1:C1B2 09 -  -  -          add hl,bc
 1575 D1:C1B3 ED 27 -  -          ld  hl,(hl)
 1576 D1:C1B5 06 00 -  -          ld  b,0
 1577 D1:C1B7 4F -  -  -          ld  c,a
 1578 D1:C1B8 09 -  -  -          add hl,bc
 1579 D1:C1B9 CD 7D AE D1         READ_ACCESS
 1580 D1:C1BD E1 -  -  -      pop hl
 1581 D1:C1BE 4F -  -  -      ld  c,a
 1582 D1:C1BF C3 6D B8 D1     jp  subroutine6502_sbc_combined_end
 1583 D1:C1C3 -  -  -  -  
 1584 D1:C1C3 -  -  -  -  ;(indirect),Y	SBC (oper),Y	F1	2	5* 
 1585 D1:C1C3 -  -  -  -  inst6502_sbc_indy:
 1586 D1:C1C3 ED 33 05 -      ADDCYC(5)
 1587 D1:C1C6 E5 -  -  -      push hl
 1588 D1:C1C7 7E -  -  -          ld  a,(hl)
 1589 D1:C1C8 21 00 38 D0         ld  hl,ZEROPAGE
 1590 D1:C1CC 85 -  -  -          add a,L
 1591 D1:C1CD 6F -  -  -          ld  L,a
 1592 D1:C1CE 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1593 D1:C1CF 2C -  -  -          inc L
 1594 D1:C1D0 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1595 D1:C1D3 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1596 D1:C1D4 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1597 D1:C1D6 FD 23 -  -          ADDCYC(1)
 1598 D1:C1D8 24 -  -  -          inc h
 1599 D1:C1D9 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1600 D1:C1DA 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1601 D1:C1DC ED 6C -  -          mlt hl          ;23.
 1602 D1:C1DE 01 00 40 D0         ld  bc,PAGETABLE
 1603 D1:C1E2 09 -  -  -          add hl,bc
 1604 D1:C1E3 ED 27 -  -          ld  hl,(hl)     ;address get.
 1605 D1:C1E5 01 00 00 00         ld  bc,0
 1606 D1:C1E9 4F -  -  -          ld  c,a
 1607 D1:C1EA 09 -  -  -          add hl,bc       ;Full address get.
 1608 D1:C1EB CD 7D AE D1         READ_ACCESS
 1609 D1:C1EF E1 -  -  -      pop hl
 1610 D1:C1F0 4F -  -  -      ld  c,a
 1611 D1:C1F1 C3 6D B8 D1     jp  subroutine6502_sbc_combined_end
 1612 D1:C1F5 -  -  -  -  
 1613 D1:C1F5 -  -  -  -  
 1614 D1:C1F5 -  -  -  -  
 1615 D1:C1F5 -  -  -  -  ;-----------------------------------------------------------------------------
 1616 D1:C1F5 -  -  -  -  ;-----------------------------------------------------------------------------
 1617 D1:C1F5 -  -  -  -  ;-----------------------------------------------------------------------------
 1618 D1:C1F5 -  -  -  -  ;Instructions by type: Logical Operations
 1619 D1:C1F5 -  -  -  -  
 1620 D1:C1F5 -  -  -  -  ;AND - AND Memory with Accumulator
 1621 D1:C1F5 -  -  -  -  ;A AND M -> A
 1622 D1:C1F5 -  -  -  -  ;N	Z	C	I	D	V
 1623 D1:C1F5 -  -  -  -  ;+	+	-	-	-	-
 1624 D1:C1F5 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1625 D1:C1F5 -  -  -  -  
 1626 D1:C1F5 -  -  -  -  ;immediate	AND #oper	29	2	2  
 1627 D1:C1F5 -  -  -  -  inst6502_and_imm:
 1628 D1:C1F5 ED 33 02 -      ADDCYC(2)
 1629 D1:C1F8 7E -  -  -      ld  a,(hl)
 1630 D1:C1F9 DD A6 00 -      and a,(ix+REGA)
 1631 D1:C1FC DD 77 00 -      ld  (ix+REGA),A
 1632 D1:C1FF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1633 D1:C213 C3 FB B6 D1     jp i6502NextLoad
 1634 D1:C217 -  -  -  -  
 1635 D1:C217 -  -  -  -  ;zeropage	AND oper	25	2	3  
 1636 D1:C217 -  -  -  -  inst6502_and_zp:
 1637 D1:C217 ED 33 03 -      ADDCYC(3)
 1638 D1:C21A 7E -  -  -      ld  a,(hl)
 1639 D1:C21B 01 00 38 D0     ld  bc,ZEROPAGE
 1640 D1:C21F 81 -  -  -      add a,c
 1641 D1:C220 4F -  -  -      ld  c,a
 1642 D1:C221 0A -  -  -      ld  a,(bc)
 1643 D1:C222 DD A6 00 -      and a,(ix+REGA)
 1644 D1:C225 DD 77 00 -      ld  (ix+REGA),A
 1645 D1:C228 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1646 D1:C23C C3 FB B6 D1     jp i6502NextLoad
 1647 D1:C240 -  -  -  -  
 1648 D1:C240 -  -  -  -  ;zeropage,X	AND oper,X	35	2	4  
 1649 D1:C240 -  -  -  -  inst6502_and_zpx:
 1650 D1:C240 ED 33 04 -      ADDCYC(4)
 1651 D1:C243 7E -  -  -      ld  a,(hl)
 1652 D1:C244 01 00 38 D0     ld  bc,ZEROPAGE
 1653 D1:C248 81 -  -  -      add a,c
 1654 D1:C249 DD 86 01 -      add a,(ix+REGX)
 1655 D1:C24C 4F -  -  -      ld  c,a
 1656 D1:C24D 0A -  -  -      ld  a,(bc)
 1657 D1:C24E DD A6 00 -      and a,(ix+REGA)
 1658 D1:C251 DD 77 00 -      ld  (ix+REGA),A
 1659 D1:C254 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1660 D1:C268 C3 FB B6 D1     jp i6502NextLoad
 1661 D1:C26C -  -  -  -  
 1662 D1:C26C -  -  -  -  ;absolute	AND oper	2D	3	4  
 1663 D1:C26C -  -  -  -  inst6502_and_abs:
 1664 D1:C26C ED 33 04 -      ADDCYC(4)
 1665 D1:C26F CD AA B7 D1     call subroutine6502_abs_split_start
 1666 D1:C273 E5 -  -  -      push hl
 1667 D1:C274 50 -  -  -          ld  d,b
 1668 D1:C275 79 -  -  -          ld  a,c
 1669 D1:C276 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1670 D1:C278 ED 4C -  -          mlt bc
 1671 D1:C27A 21 00 40 D0         ld  hl,PAGETABLE
 1672 D1:C27E 09 -  -  -          add hl,bc
 1673 D1:C27F ED 27 -  -          ld  hl,(hl)
 1674 D1:C281 06 00 -  -          ld  b,0
 1675 D1:C283 4F -  -  -          ld  c,a
 1676 D1:C284 09 -  -  -          add hl,bc   ;full address
 1677 D1:C285 CD 7D AE D1         READ_ACCESS
 1678 D1:C289 E1 -  -  -      pop hl
 1679 D1:C28A DD A6 00 -      and a,(ix+REGA)
 1680 D1:C28D DD 77 00 -      ld  (ix+REGA),A
 1681 D1:C290 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1682 D1:C2A4 C3 FB B6 D1     jp i6502NextLoad
 1683 D1:C2A8 -  -  -  -  
 1684 D1:C2A8 -  -  -  -  ;absolute,X	AND oper,X	3D	3	4* 
 1685 D1:C2A8 -  -  -  -  inst6502_and_absx:
 1686 D1:C2A8 ED 33 04 -      ADDCYC(4)
 1687 D1:C2AB CD CB B7 D1     PUSH_ABSXSPLIT
 1688 D1:C2AF CD 7D AE D1         READ_ACCESS
 1689 D1:C2B3 DD A6 00 -          and a,(ix+REGA)
 1690 D1:C2B6 DD 77 00 -          ld  (ix+REGA),A
 1691 D1:C2B9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1692 D1:C2CD E1 -  -  -      pop hl
 1693 D1:C2CE C3 FB B6 D1     jp i6502NextLoad
 1694 D1:C2D2 -  -  -  -  
 1695 D1:C2D2 -  -  -  -  ;absolute,Y	AND oper,Y	39	3	4* 
 1696 D1:C2D2 -  -  -  -  inst6502_and_absy:
 1697 D1:C2D2 ED 33 04 -      ADDCYC(4)
 1698 D1:C2D5 CD C6 B7 D1     PUSH_ABSYSPLIT
 1699 D1:C2D9 CD 7D AE D1         READ_ACCESS
 1700 D1:C2DD E1 -  -  -      pop hl
 1701 D1:C2DE DD A6 00 -      and a,(ix+REGA)
 1702 D1:C2E1 DD 77 00 -      ld  (ix+REGA),A
 1703 D1:C2E4 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1704 D1:C2F8 C3 FB B6 D1     jp i6502NextLoad
 1705 D1:C2FC -  -  -  -  
 1706 D1:C2FC -  -  -  -  ;(indirect,X)	AND (oper,X)	21	2	6  
 1707 D1:C2FC -  -  -  -  inst6502_and_indx:
 1708 D1:C2FC ED 33 06 -      ADDCYC(6)
 1709 D1:C2FF E5 -  -  -      push hl
 1710 D1:C300 7E -  -  -          ld  a,(hl)
 1711 D1:C301 21 00 38 D0         ld  hl,ZEROPAGE
 1712 D1:C305 85 -  -  -          add a,L
 1713 D1:C306 DD 86 01 -          add a,(ix+REGX)
 1714 D1:C309 6F -  -  -          ld  L,a
 1715 D1:C30A 7E -  -  -          ld  a,(hl)
 1716 D1:C30B 2C -  -  -          inc L
 1717 D1:C30C 56 -  -  -          ld  d,(hl)
 1718 D1:C30D 42 -  -  -          ld  b,d
 1719 D1:C30E 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1720 D1:C310 ED 4C -  -          mlt bc
 1721 D1:C312 21 00 40 D0         ld  hl,PAGETABLE
 1722 D1:C316 09 -  -  -          add hl,bc
 1723 D1:C317 ED 27 -  -          ld  hl,(hl)
 1724 D1:C319 06 00 -  -          ld  b,0
 1725 D1:C31B 4F -  -  -          ld  c,a
 1726 D1:C31C 09 -  -  -          add hl,bc
 1727 D1:C31D CD 7D AE D1         READ_ACCESS
 1728 D1:C321 E1 -  -  -      pop hl
 1729 D1:C322 DD A6 00 -      and a,(ix+REGA)
 1730 D1:C325 DD 77 00 -      ld  (ix+REGA),A
 1731 D1:C328 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1732 D1:C33C C3 FB B6 D1     jp i6502NextLoad
 1733 D1:C340 -  -  -  -  
 1734 D1:C340 -  -  -  -  ;(indirect),Y	AND (oper),Y	31	2	5* 
 1735 D1:C340 -  -  -  -  inst6502_and_indy:
 1736 D1:C340 ED 33 05 -      ADDCYC(5)
 1737 D1:C343 E5 -  -  -      push hl
 1738 D1:C344 7E -  -  -          ld  a,(hl)
 1739 D1:C345 21 00 38 D0         ld  hl,ZEROPAGE
 1740 D1:C349 85 -  -  -          add a,L
 1741 D1:C34A 6F -  -  -          ld  L,a
 1742 D1:C34B 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1743 D1:C34C 2C -  -  -          inc L
 1744 D1:C34D DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1745 D1:C350 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1746 D1:C351 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1747 D1:C353 24 -  -  -          inc h
 1748 D1:C354 FD 23 -  -          ADDCYC(1)
 1749 D1:C356 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1750 D1:C357 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1751 D1:C359 ED 6C -  -          mlt hl          ;23.
 1752 D1:C35B 01 00 40 D0         ld  bc,PAGETABLE
 1753 D1:C35F 09 -  -  -          add hl,bc
 1754 D1:C360 ED 27 -  -          ld  hl,(hl)     ;address get.
 1755 D1:C362 01 00 00 00         ld  bc,0
 1756 D1:C366 4F -  -  -          ld  c,a
 1757 D1:C367 09 -  -  -          add hl,bc       ;Full address get.
 1758 D1:C368 CD 7D AE D1         READ_ACCESS
 1759 D1:C36C E1 -  -  -      pop hl
 1760 D1:C36D DD A6 00 -      and a,(ix+REGA)
 1761 D1:C370 DD 77 00 -      ld  (ix+REGA),A
 1762 D1:C373 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1763 D1:C387 C3 FB B6 D1     jp i6502NextLoad
 1764 D1:C38B -  -  -  -  
 1765 D1:C38B -  -  -  -  ;-----------------------------------------------------------------------------
 1766 D1:C38B -  -  -  -  ;EOR - Exclusive-OR Memory with Accumulator
 1767 D1:C38B -  -  -  -  ;A EOR M -> A
 1768 D1:C38B -  -  -  -  ;N	Z	C	I	D	V
 1769 D1:C38B -  -  -  -  ;+	+	-	-	-	-
 1770 D1:C38B -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1771 D1:C38B -  -  -  -  
 1772 D1:C38B -  -  -  -  ;immediate	EOR #oper	49	2	2  
 1773 D1:C38B -  -  -  -  inst6502_eor_imm:
 1774 D1:C38B ED 33 02 -      ADDCYC(2)
 1775 D1:C38E 7E -  -  -      ld  a,(hl)
 1776 D1:C38F DD AE 00 -      xor a,(ix+REGA)
 1777 D1:C392 DD 77 00 -      ld  (ix+REGA),A
 1778 D1:C395 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1779 D1:C3A9 C3 FB B6 D1     jp i6502NextLoad
 1780 D1:C3AD -  -  -  -  
 1781 D1:C3AD -  -  -  -  ;zeropage	EOR oper	45	2	3  
 1782 D1:C3AD -  -  -  -  inst6502_eor_zp:
 1783 D1:C3AD ED 33 03 -      ADDCYC(3)
 1784 D1:C3B0 7E -  -  -      ld  a,(hl)
 1785 D1:C3B1 01 00 38 D0     ld  bc,ZEROPAGE
 1786 D1:C3B5 81 -  -  -      add a,c
 1787 D1:C3B6 4F -  -  -      ld  c,a
 1788 D1:C3B7 0A -  -  -      ld  a,(bc)
 1789 D1:C3B8 DD AE 00 -      xor a,(ix+REGA)
 1790 D1:C3BB DD 77 00 -      ld  (ix+REGA),A
 1791 D1:C3BE DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1792 D1:C3D2 C3 FB B6 D1     jp i6502NextLoad
 1793 D1:C3D6 -  -  -  -  
 1794 D1:C3D6 -  -  -  -  
 1795 D1:C3D6 -  -  -  -  ;zeropage,X	EOR oper,X	55	2	4  
 1796 D1:C3D6 -  -  -  -  inst6502_eor_zpx:
 1797 D1:C3D6 ED 33 04 -      ADDCYC(4)
 1798 D1:C3D9 7E -  -  -      ld  a,(hl)
 1799 D1:C3DA 01 00 38 D0     ld  bc,ZEROPAGE
 1800 D1:C3DE 81 -  -  -      add a,c
 1801 D1:C3DF DD 86 01 -      add a,(ix+REGX)
 1802 D1:C3E2 4F -  -  -      ld  c,a
 1803 D1:C3E3 0A -  -  -      ld  a,(bc)
 1804 D1:C3E4 DD AE 00 -      xor a,(ix+REGA)
 1805 D1:C3E7 DD 77 00 -      ld  (ix+REGA),A
 1806 D1:C3EA DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1807 D1:C3FE C3 FB B6 D1     jp i6502NextLoad
 1808 D1:C402 -  -  -  -  
 1809 D1:C402 -  -  -  -  ;absolute	EOR oper	4D	3	4  
 1810 D1:C402 -  -  -  -  inst6502_eor_abs:
 1811 D1:C402 ED 33 04 -      ADDCYC(4)
 1812 D1:C405 CD AA B7 D1     call subroutine6502_abs_split_start
 1813 D1:C409 E5 -  -  -      push hl
 1814 D1:C40A 50 -  -  -          ld  d,b
 1815 D1:C40B 79 -  -  -          ld  a,c
 1816 D1:C40C 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1817 D1:C40E ED 4C -  -          mlt bc
 1818 D1:C410 21 00 40 D0         ld  hl,PAGETABLE
 1819 D1:C414 09 -  -  -          add hl,bc
 1820 D1:C415 ED 27 -  -          ld  hl,(hl)
 1821 D1:C417 06 00 -  -          ld  b,0
 1822 D1:C419 4F -  -  -          ld  c,a
 1823 D1:C41A 09 -  -  -          add hl,bc   ;full address
 1824 D1:C41B CD 7D AE D1         READ_ACCESS
 1825 D1:C41F E1 -  -  -      pop hl
 1826 D1:C420 DD AE 00 -      xor a,(ix+REGA)
 1827 D1:C423 DD 77 00 -      ld  (ix+REGA),A
 1828 D1:C426 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1829 D1:C43A C3 FB B6 D1     jp i6502NextLoad
 1830 D1:C43E -  -  -  -  
 1831 D1:C43E -  -  -  -  ;absolute,X	EOR oper,X	5D	3	4* 
 1832 D1:C43E -  -  -  -  inst6502_eor_absx:
 1833 D1:C43E ED 33 04 -      ADDCYC(4)
 1834 D1:C441 CD CB B7 D1     PUSH_ABSXSPLIT
 1835 D1:C445 CD 7D AE D1         READ_ACCESS
 1836 D1:C449 DD AE 00 -          xor a,(ix+REGA)
 1837 D1:C44C DD 77 00 -          ld  (ix+REGA),A
 1838 D1:C44F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1839 D1:C463 E1 -  -  -      pop hl
 1840 D1:C464 C3 FB B6 D1     jp i6502NextLoad
 1841 D1:C468 -  -  -  -  
 1842 D1:C468 -  -  -  -  ;absolute,Y	EOR oper,Y	59	3	4* 
 1843 D1:C468 -  -  -  -  inst6502_eor_absy:
 1844 D1:C468 ED 33 04 -      ADDCYC(4)
 1845 D1:C46B CD C6 B7 D1     PUSH_ABSYSPLIT
 1846 D1:C46F CD 7D AE D1         READ_ACCESS
 1847 D1:C473 E1 -  -  -      pop hl
 1848 D1:C474 DD AE 00 -      xor a,(ix+REGA)
 1849 D1:C477 DD 77 00 -      ld  (ix+REGA),A
 1850 D1:C47A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1851 D1:C48E C3 FB B6 D1     jp i6502NextLoad
 1852 D1:C492 -  -  -  -  
 1853 D1:C492 -  -  -  -  ;(indirect,X)	EOR (oper,X)	41	2	6  
 1854 D1:C492 -  -  -  -  inst6502_eor_indx:
 1855 D1:C492 ED 33 06 -      ADDCYC(6)
 1856 D1:C495 E5 -  -  -      push hl
 1857 D1:C496 7E -  -  -          ld  a,(hl)
 1858 D1:C497 21 00 38 D0         ld  hl,ZEROPAGE
 1859 D1:C49B 85 -  -  -          add a,L
 1860 D1:C49C DD 86 01 -          add a,(ix+REGX)
 1861 D1:C49F 6F -  -  -          ld  L,a
 1862 D1:C4A0 7E -  -  -          ld  a,(hl)
 1863 D1:C4A1 2C -  -  -          inc L
 1864 D1:C4A2 56 -  -  -          ld  d,(hl)
 1865 D1:C4A3 42 -  -  -          ld  b,d
 1866 D1:C4A4 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1867 D1:C4A6 ED 4C -  -          mlt bc
 1868 D1:C4A8 21 00 40 D0         ld  hl,PAGETABLE
 1869 D1:C4AC 09 -  -  -          add hl,bc
 1870 D1:C4AD ED 27 -  -          ld  hl,(hl)
 1871 D1:C4AF 06 00 -  -          ld  b,0
 1872 D1:C4B1 4F -  -  -          ld  c,a
 1873 D1:C4B2 09 -  -  -          add hl,bc
 1874 D1:C4B3 CD 7D AE D1         READ_ACCESS
 1875 D1:C4B7 E1 -  -  -      pop hl
 1876 D1:C4B8 DD AE 00 -      xor a,(ix+REGA)
 1877 D1:C4BB DD 77 00 -      ld  (ix+REGA),A
 1878 D1:C4BE DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1879 D1:C4D2 C3 FB B6 D1     jp i6502NextLoad
 1880 D1:C4D6 -  -  -  -  
 1881 D1:C4D6 -  -  -  -  ;(indirect),Y	EOR (oper),Y	51	2	5* 
 1882 D1:C4D6 -  -  -  -  inst6502_eor_indy:
 1883 D1:C4D6 ED 33 05 -      ADDCYC(5)
 1884 D1:C4D9 E5 -  -  -      push hl
 1885 D1:C4DA 7E -  -  -          ld  a,(hl)
 1886 D1:C4DB 21 00 38 D0         ld  hl,ZEROPAGE
 1887 D1:C4DF 85 -  -  -          add a,L
 1888 D1:C4E0 6F -  -  -          ld  L,a
 1889 D1:C4E1 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1890 D1:C4E2 2C -  -  -          inc L
 1891 D1:C4E3 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1892 D1:C4E6 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1893 D1:C4E7 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1894 D1:C4E9 24 -  -  -          inc h
 1895 D1:C4EA FD 23 -  -          ADDCYC(1)
 1896 D1:C4EC 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1897 D1:C4ED 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1898 D1:C4EF ED 6C -  -          mlt hl          ;23.
 1899 D1:C4F1 01 00 40 D0         ld  bc,PAGETABLE
 1900 D1:C4F5 09 -  -  -          add hl,bc
 1901 D1:C4F6 ED 27 -  -          ld  hl,(hl)     ;address get.
 1902 D1:C4F8 01 00 00 00         ld  bc,0
 1903 D1:C4FC 4F -  -  -          ld  c,a
 1904 D1:C4FD 09 -  -  -          add hl,bc       ;Full address get.
 1905 D1:C4FE CD 7D AE D1         READ_ACCESS
 1906 D1:C502 E1 -  -  -      pop hl
 1907 D1:C503 DD AE 00 -      xor a,(ix+REGA)
 1908 D1:C506 DD 77 00 -      ld  (ix+REGA),A
 1909 D1:C509 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1910 D1:C51D C3 FB B6 D1     jp i6502NextLoad
 1911 D1:C521 -  -  -  -  
 1912 D1:C521 -  -  -  -  ;-----------------------------------------------------------------------------
 1913 D1:C521 -  -  -  -  ;ORA - OR Memory with Accumulator
 1914 D1:C521 -  -  -  -  ;A OR M -> A
 1915 D1:C521 -  -  -  -  ;N	Z	C	I	D	V
 1916 D1:C521 -  -  -  -  ;+	+	-	-	-	-
 1917 D1:C521 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1918 D1:C521 -  -  -  -  
 1919 D1:C521 -  -  -  -  ;immediate	ORA #oper	09	2	2  
 1920 D1:C521 -  -  -  -  inst6502_ora_imm:
 1921 D1:C521 ED 33 02 -      ADDCYC(2)
 1922 D1:C524 7E -  -  -      ld  a,(hl)
 1923 D1:C525 DD B6 00 -      or  a,(ix+REGA)
 1924 D1:C528 DD 77 00 -      ld  (ix+REGA),A
 1925 D1:C52B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1926 D1:C53F C3 FB B6 D1     jp i6502NextLoad
 1927 D1:C543 -  -  -  -  
 1928 D1:C543 -  -  -  -  ;zeropage	ORA oper	05	2	3  
 1929 D1:C543 -  -  -  -  inst6502_ora_zp:
 1930 D1:C543 ED 33 03 -      ADDCYC(3)
 1931 D1:C546 7E -  -  -      ld  a,(hl)
 1932 D1:C547 01 00 38 D0     ld  bc,ZEROPAGE
 1933 D1:C54B 81 -  -  -      add a,c
 1934 D1:C54C 4F -  -  -      ld  c,a
 1935 D1:C54D 0A -  -  -      ld  a,(bc)
 1936 D1:C54E DD B6 00 -      or  a,(ix+REGA)
 1937 D1:C551 DD 77 00 -      ld  (ix+REGA),A
 1938 D1:C554 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1939 D1:C568 C3 FB B6 D1     jp i6502NextLoad
 1940 D1:C56C -  -  -  -  
 1941 D1:C56C -  -  -  -  ;zeropage,X	ORA oper,X	15	2	4  
 1942 D1:C56C -  -  -  -  inst6502_ora_zpx:
 1943 D1:C56C ED 33 04 -      ADDCYC(4)
 1944 D1:C56F 7E -  -  -      ld  a,(hl)
 1945 D1:C570 01 00 38 D0     ld  bc,ZEROPAGE
 1946 D1:C574 81 -  -  -      add a,c
 1947 D1:C575 DD 86 01 -      add a,(ix+REGX)
 1948 D1:C578 4F -  -  -      ld  c,a
 1949 D1:C579 0A -  -  -      ld  a,(bc)
 1950 D1:C57A DD B6 00 -      or  a,(ix+REGA)
 1951 D1:C57D DD 77 00 -      ld  (ix+REGA),A
 1952 D1:C580 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1953 D1:C594 C3 FB B6 D1     jp i6502NextLoad
 1954 D1:C598 -  -  -  -  
 1955 D1:C598 -  -  -  -  ;absolute	ORA oper	0D	3	4  
 1956 D1:C598 -  -  -  -  inst6502_ora_abs:
 1957 D1:C598 ED 33 04 -      ADDCYC(4)
 1958 D1:C59B CD AA B7 D1     call subroutine6502_abs_split_start
 1959 D1:C59F E5 -  -  -      push hl
 1960 D1:C5A0 50 -  -  -          ld  d,b
 1961 D1:C5A1 79 -  -  -          ld  a,c
 1962 D1:C5A2 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1963 D1:C5A4 ED 4C -  -          mlt bc
 1964 D1:C5A6 21 00 40 D0         ld  hl,PAGETABLE
 1965 D1:C5AA 09 -  -  -          add hl,bc
 1966 D1:C5AB ED 27 -  -          ld  hl,(hl)
 1967 D1:C5AD 06 00 -  -          ld  b,0
 1968 D1:C5AF 4F -  -  -          ld  c,a
 1969 D1:C5B0 09 -  -  -          add hl,bc   ;full address
 1970 D1:C5B1 CD 7D AE D1         READ_ACCESS
 1971 D1:C5B5 E1 -  -  -      pop hl
 1972 D1:C5B6 DD B6 00 -      or  a,(ix+REGA)
 1973 D1:C5B9 DD 77 00 -      ld  (ix+REGA),A
 1974 D1:C5BC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1975 D1:C5D0 C3 FB B6 D1     jp i6502NextLoad
 1976 D1:C5D4 -  -  -  -  
 1977 D1:C5D4 -  -  -  -  ;absolute,X	ORA oper,X	1D	3	4* 
 1978 D1:C5D4 -  -  -  -  inst6502_ora_absx:
 1979 D1:C5D4 ED 33 04 -      ADDCYC(4)
 1980 D1:C5D7 CD CB B7 D1     PUSH_ABSXSPLIT
 1981 D1:C5DB CD 7D AE D1         READ_ACCESS
 1982 D1:C5DF DD B6 00 -          or  a,(ix+REGA)
 1983 D1:C5E2 DD 77 00 -          ld  (ix+REGA),A
 1984 D1:C5E5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1985 D1:C5F9 E1 -  -  -      pop hl
 1986 D1:C5FA C3 FB B6 D1     jp i6502NextLoad
 1987 D1:C5FE -  -  -  -  
 1988 D1:C5FE -  -  -  -  ;absolute,Y	ORA oper,Y	19	3	4* 
 1989 D1:C5FE -  -  -  -  inst6502_ora_absy:
 1990 D1:C5FE ED 33 04 -      ADDCYC(4)
 1991 D1:C601 CD C6 B7 D1     PUSH_ABSYSPLIT
 1992 D1:C605 CD 7D AE D1         READ_ACCESS
 1993 D1:C609 E1 -  -  -      pop hl
 1994 D1:C60A DD B6 00 -      or  a,(ix+REGA)
 1995 D1:C60D DD 77 00 -      ld  (ix+REGA),A
 1996 D1:C610 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1997 D1:C624 C3 FB B6 D1     jp i6502NextLoad
 1998 D1:C628 -  -  -  -  
 1999 D1:C628 -  -  -  -  ;(indirect,X)	ORA (oper,X)	01	2	6  
 2000 D1:C628 -  -  -  -  inst6502_ora_indx:
 2001 D1:C628 ED 33 06 -      ADDCYC(6)
 2002 D1:C62B E5 -  -  -      push hl
 2003 D1:C62C 7E -  -  -          ld  a,(hl)
 2004 D1:C62D 21 00 38 D0         ld  hl,ZEROPAGE
 2005 D1:C631 85 -  -  -          add a,L
 2006 D1:C632 DD 86 01 -          add a,(ix+REGX)
 2007 D1:C635 6F -  -  -          ld  L,a
 2008 D1:C636 7E -  -  -          ld  a,(hl)
 2009 D1:C637 2C -  -  -          inc L
 2010 D1:C638 56 -  -  -          ld  d,(hl)
 2011 D1:C639 42 -  -  -          ld  b,d
 2012 D1:C63A 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2013 D1:C63C ED 4C -  -          mlt bc
 2014 D1:C63E 21 00 40 D0         ld  hl,PAGETABLE
 2015 D1:C642 09 -  -  -          add hl,bc
 2016 D1:C643 ED 27 -  -          ld  hl,(hl)
 2017 D1:C645 06 00 -  -          ld  b,0
 2018 D1:C647 4F -  -  -          ld  c,a
 2019 D1:C648 09 -  -  -          add hl,bc
 2020 D1:C649 CD 7D AE D1         READ_ACCESS
 2021 D1:C64D E1 -  -  -      pop hl
 2022 D1:C64E DD B6 00 -      or  a,(ix+REGA)
 2023 D1:C651 DD 77 00 -      ld  (ix+REGA),A
 2024 D1:C654 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2025 D1:C668 C3 FB B6 D1     jp i6502NextLoad
 2026 D1:C66C -  -  -  -  
 2027 D1:C66C -  -  -  -  ;(indirect),Y	ORA (oper),Y	11	2	5* 
 2028 D1:C66C -  -  -  -  inst6502_ora_indy:
 2029 D1:C66C ED 33 05 -      ADDCYC(5)
 2030 D1:C66F E5 -  -  -      push hl
 2031 D1:C670 7E -  -  -          ld  a,(hl)
 2032 D1:C671 21 00 38 D0         ld  hl,ZEROPAGE
 2033 D1:C675 85 -  -  -          add a,L
 2034 D1:C676 6F -  -  -          ld  L,a
 2035 D1:C677 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 2036 D1:C678 2C -  -  -          inc L
 2037 D1:C679 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 2038 D1:C67C 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 2039 D1:C67D 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 2040 D1:C67F 24 -  -  -          inc h
 2041 D1:C680 FD 23 -  -          ADDCYC(1)
 2042 D1:C682 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 2043 D1:C683 2E 0C -  -          ld  L,BASETABLE_STRIDE
 2044 D1:C685 ED 6C -  -          mlt hl          ;23.
 2045 D1:C687 01 00 40 D0         ld  bc,PAGETABLE
 2046 D1:C68B 09 -  -  -          add hl,bc
 2047 D1:C68C ED 27 -  -          ld  hl,(hl)     ;address get.
 2048 D1:C68E 01 00 00 00         ld  bc,0
 2049 D1:C692 4F -  -  -          ld  c,a
 2050 D1:C693 09 -  -  -          add hl,bc       ;Full address get.
 2051 D1:C694 CD 7D AE D1         READ_ACCESS
 2052 D1:C698 E1 -  -  -      pop hl
 2053 D1:C699 DD B6 00 -      or  a,(ix+REGA)
 2054 D1:C69C DD 77 00 -      ld  (ix+REGA),A
 2055 D1:C69F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2056 D1:C6B3 C3 FB B6 D1     jp i6502NextLoad
 2057 D1:C6B7 -  -  -  -  
 2058 D1:C6B7 -  -  -  -  ;-----------------------------------------------------------------------------
 2059 D1:C6B7 -  -  -  -  ;-----------------------------------------------------------------------------
 2060 D1:C6B7 -  -  -  -  ;-----------------------------------------------------------------------------
 2061 D1:C6B7 -  -  -  -  ;Instructions by type: Shift & Rotate Instructions
 2062 D1:C6B7 -  -  -  -  ;ASL - Shift Left One Bit (Memory or Accumulator)
 2063 D1:C6B7 -  -  -  -  ;C <- [76543210] <- 0
 2064 D1:C6B7 -  -  -  -  ;N	Z	C	I	D	V
 2065 D1:C6B7 -  -  -  -  ;+	+	+	-	-	-
 2066 D1:C6B7 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2067 D1:C6B7 -  -  -  -  
 2068 D1:C6B7 -  -  -  -  ;accumulator	ASL A	0A	1	2  
 2069 D1:C6B7 -  -  -  -  inst6502_asl:
 2070 D1:C6B7 ED 33 02 -      ADDCYC(2)
 2071 D1:C6BA DD 7E 00 -      ld  a,(ix+REGA)
 2072 D1:C6BD CB 27 -  -      sla a
 2073 D1:C6BF DD 77 00 -      ld  (ix+REGA),a
 2074 D1:C6C2 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2075 D1:C6DC C3 14 B7 D1     jp i6502FinishLoad
 2076 D1:C6E0 -  -  -  -  
 2077 D1:C6E0 -  -  -  -  ;zeropage	ASL oper	06	2	5  
 2078 D1:C6E0 -  -  -  -  inst6502_asl_zp:
 2079 D1:C6E0 ED 33 05 -      ADDCYC(5)
 2080 D1:C6E3 7E -  -  -      ld  a,(hl)
 2081 D1:C6E4 01 00 38 D0     ld  bc,ZEROPAGE
 2082 D1:C6E8 81 -  -  -      add a,c
 2083 D1:C6E9 4F -  -  -      ld  c,a
 2084 D1:C6EA 0A -  -  -      ld  a,(bc)
 2085 D1:C6EB CB 27 -  -      sla a
 2086 D1:C6ED 02 -  -  -      ld  (bc),a
 2087 D1:C6EE DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2088 D1:C708 C3 FB B6 D1     jp i6502NextLoad
 2089 D1:C70C -  -  -  -  
 2090 D1:C70C -  -  -  -  ;zeropage,X	ASL oper,X	16	2	6  
 2091 D1:C70C -  -  -  -  inst6502_asl_zpx:
 2092 D1:C70C ED 33 06 -      ADDCYC(6)
 2093 D1:C70F 7E -  -  -      ld  a,(hl)
 2094 D1:C710 01 00 38 D0     ld  bc,ZEROPAGE
 2095 D1:C714 81 -  -  -      add a,c
 2096 D1:C715 DD 86 01 -      add a,(ix+REGX)
 2097 D1:C718 4F -  -  -      ld  c,a
 2098 D1:C719 0A -  -  -      ld  a,(bc)
 2099 D1:C71A CB 27 -  -      sla a
 2100 D1:C71C 02 -  -  -      ld  (bc),a
 2101 D1:C71D DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2102 D1:C737 C3 FB B6 D1     jp i6502NextLoad
 2103 D1:C73B -  -  -  -  
 2104 D1:C73B -  -  -  -  ;absolute	ASL oper	0E	3	6  
 2105 D1:C73B -  -  -  -  inst6502_asl_abs:
 2106 D1:C73B ED 33 06 -      ADDCYC(6)
 2107 D1:C73E CD AA B7 D1     call subroutine6502_abs_split_start
 2108 D1:C742 E5 -  -  -      push hl
 2109 D1:C743 50 -  -  -          ld  d,b
 2110 D1:C744 79 -  -  -          ld  a,c
 2111 D1:C745 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2112 D1:C747 ED 4C -  -          mlt bc
 2113 D1:C749 21 00 40 D0         ld  hl,PAGETABLE
 2114 D1:C74D 09 -  -  -          add hl,bc
 2115 D1:C74E ED 27 -  -          ld  hl,(hl)
 2116 D1:C750 06 00 -  -          ld  b,0
 2117 D1:C752 4F -  -  -          ld  c,a
 2118 D1:C753 09 -  -  -          add hl,bc   ;full address
 2119 D1:C754 CD 7D AE D1         READ_ACCESS
 2120 D1:C758 CB 27 -  -          sla a
 2121 D1:C75A 4F -  -  -          ld  c,a
 2122 D1:C75B DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2123 D1:C775 41 -  -  -          ld  b,c
 2124 D1:C776 CD 20 AF D1         WRITE_ACCESS
 2125 D1:C77A E1 -  -  -      pop hl
 2126 D1:C77B C3 FB B6 D1     jp i6502NextLoad
 2127 D1:C77F -  -  -  -  
 2128 D1:C77F -  -  -  -  ;absolute,X	ASL oper,X	1E	3	7  
 2129 D1:C77F -  -  -  -  inst6502_asl_absx:
 2130 D1:C77F ED 33 07 -      ADDCYC(7)
 2131 D1:C782 CD 07 B8 D1     PUSH_ABSXSPLIT_NODEP
 2132 D1:C786 CD 7D AE D1         READ_ACCESS
 2133 D1:C78A CB 27 -  -          sla a
 2134 D1:C78C 4F -  -  -          ld  c,a
 2135 D1:C78D DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2136 D1:C7A7 41 -  -  -          ld  b,c
 2137 D1:C7A8 CD 20 AF D1         WRITE_ACCESS
 2138 D1:C7AC E1 -  -  -      pop hl
 2139 D1:C7AD C3 FB B6 D1     jp i6502NextLoad
 2140 D1:C7B1 -  -  -  -  
 2141 D1:C7B1 -  -  -  -  ;-----------------------------------------------------------------------------
 2142 D1:C7B1 -  -  -  -  ;LSR - Shift One Bit Right (Memory or Accumulator)
 2143 D1:C7B1 -  -  -  -  ;0 -> [76543210] -> C
 2144 D1:C7B1 -  -  -  -  ;N	Z	C	I	D	V
 2145 D1:C7B1 -  -  -  -  ;0	+	+	-	-	-
 2146 D1:C7B1 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2147 D1:C7B1 -  -  -  -  
 2148 D1:C7B1 -  -  -  -  ;accumulator	LSR A	4A	1	2  
 2149 D1:C7B1 -  -  -  -  inst6502_lsr:
 2150 D1:C7B1 ED 33 02 -      ADDCYC(2)
 2151 D1:C7B4 DD 7E 00 -      ld  a,(ix+REGA)
 2152 D1:C7B7 CB 3F -  -      srl a
 2153 D1:C7B9 DD 77 00 -      ld  (ix+REGA),a
 2154 D1:C7BC DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2155 D1:C7D6 C3 14 B7 D1     jp i6502FinishLoad
 2156 D1:C7DA -  -  -  -  
 2157 D1:C7DA -  -  -  -  ;zeropage	LSR oper	46	2	5  
 2158 D1:C7DA -  -  -  -  inst6502_lsr_zp:
 2159 D1:C7DA ED 33 05 -      ADDCYC(5)
 2160 D1:C7DD 7E -  -  -      ld  a,(hl)
 2161 D1:C7DE 01 00 38 D0     ld  bc,ZEROPAGE
 2162 D1:C7E2 81 -  -  -      add a,c
 2163 D1:C7E3 4F -  -  -      ld  c,a
 2164 D1:C7E4 0A -  -  -      ld  a,(bc)
 2165 D1:C7E5 CB 3F -  -      srl a
 2166 D1:C7E7 02 -  -  -      ld  (bc),a
 2167 D1:C7E8 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2168 D1:C802 C3 FB B6 D1     jp i6502NextLoad
 2169 D1:C806 -  -  -  -  
 2170 D1:C806 -  -  -  -  ;zeropage,X	LSR oper,X	56	2	6  
 2171 D1:C806 -  -  -  -  inst6502_lsr_zpx:
 2172 D1:C806 ED 33 06 -      ADDCYC(6)
 2173 D1:C809 7E -  -  -      ld  a,(hl)
 2174 D1:C80A 01 00 38 D0     ld  bc,ZEROPAGE
 2175 D1:C80E 81 -  -  -      add a,c
 2176 D1:C80F DD 86 01 -      add a,(ix+REGX)
 2177 D1:C812 4F -  -  -      ld  c,a
 2178 D1:C813 0A -  -  -      ld  a,(bc)
 2179 D1:C814 CB 3F -  -      srl a
 2180 D1:C816 02 -  -  -      ld  (bc),a
 2181 D1:C817 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2182 D1:C831 C3 FB B6 D1     jp i6502NextLoad
 2183 D1:C835 -  -  -  -      
 2184 D1:C835 -  -  -  -  ;absolute	LSR oper	4E	3	6  
 2185 D1:C835 -  -  -  -  inst6502_lsr_abs:
 2186 D1:C835 ED 33 06 -      ADDCYC(6)
 2187 D1:C838 CD AA B7 D1     call subroutine6502_abs_split_start
 2188 D1:C83C E5 -  -  -      push hl
 2189 D1:C83D 50 -  -  -          ld  d,b
 2190 D1:C83E 79 -  -  -          ld  a,c
 2191 D1:C83F 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2192 D1:C841 ED 4C -  -          mlt bc
 2193 D1:C843 21 00 40 D0         ld  hl,PAGETABLE
 2194 D1:C847 09 -  -  -          add hl,bc
 2195 D1:C848 ED 27 -  -          ld  hl,(hl)
 2196 D1:C84A 06 00 -  -          ld  b,0
 2197 D1:C84C 4F -  -  -          ld  c,a
 2198 D1:C84D 09 -  -  -          add hl,bc   ;full address
 2199 D1:C84E CD 7D AE D1         READ_ACCESS
 2200 D1:C852 CB 3F -  -          srl a
 2201 D1:C854 4F -  -  -          ld  c,a
 2202 D1:C855 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2203 D1:C86F 41 -  -  -          ld  b,c
 2204 D1:C870 CD 20 AF D1         WRITE_ACCESS
 2205 D1:C874 E1 -  -  -      pop hl
 2206 D1:C875 C3 FB B6 D1     jp i6502NextLoad
 2207 D1:C879 -  -  -  -  
 2208 D1:C879 -  -  -  -  ;absolute,X	LSR oper,X	5E	3	7  
 2209 D1:C879 -  -  -  -  inst6502_lsr_absx:
 2210 D1:C879 ED 33 07 -      ADDCYC(7)
 2211 D1:C87C CD 07 B8 D1     PUSH_ABSXSPLIT_NODEP
 2212 D1:C880 CD 7D AE D1         READ_ACCESS
 2213 D1:C884 CB 3F -  -          srl a
 2214 D1:C886 4F -  -  -          ld  c,a
 2215 D1:C887 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2216 D1:C8A1 41 -  -  -          ld  b,c
 2217 D1:C8A2 CD 20 AF D1         WRITE_ACCESS
 2218 D1:C8A6 E1 -  -  -      pop hl
 2219 D1:C8A7 C3 FB B6 D1     jp i6502NextLoad
 2220 D1:C8AB -  -  -  -  
 2221 D1:C8AB -  -  -  -  ;-----------------------------------------------------------------------------
 2222 D1:C8AB -  -  -  -  ;ROL - Rotate One Bit Left (Memory or Accumulator)
 2223 D1:C8AB -  -  -  -  ;C <- [76543210] <- C
 2224 D1:C8AB -  -  -  -  ;N	Z	C	I	D	V
 2225 D1:C8AB -  -  -  -  ;+	+	+	-	-	-
 2226 D1:C8AB -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2227 D1:C8AB -  -  -  -  
 2228 D1:C8AB -  -  -  -  ;accumulator	ROL A	2A	1	2  
 2229 D1:C8AB -  -  -  -  inst6502_rol:
 2230 D1:C8AB ED 33 02 -      ADDCYC(2)
 2231 D1:C8AE DD 7E 04 -      ld  a,(ix+REGSR)
 2232 D1:C8B1 1F -  -  -      rra
 2233 D1:C8B2 DD CB 00 16     rl  (ix+REGA)
 2234 D1:C8B6 DD 7E 00 -      ld  a,(ix+REGA)
 2235 D1:C8B9 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2236 D1:C8D3 C3 14 B7 D1     jp i6502FinishLoad
 2237 D1:C8D7 -  -  -  -  
 2238 D1:C8D7 -  -  -  -  ;zeropage	ROL oper	26	2	5  
 2239 D1:C8D7 -  -  -  -  inst6502_rol_zp:
 2240 D1:C8D7 ED 33 05 -      ADDCYC(5)
 2241 D1:C8DA 7E -  -  -      ld  a,(hl)
 2242 D1:C8DB 01 00 38 D0     ld  bc,ZEROPAGE
 2243 D1:C8DF 81 -  -  -      add a,c
 2244 D1:C8E0 4F -  -  -      ld  c,a
 2245 D1:C8E1 DD 7E 04 -      ld  a,(ix+REGSR)
 2246 D1:C8E4 1F -  -  -      rra
 2247 D1:C8E5 0A -  -  -      ld  a,(bc)
 2248 D1:C8E6 17 -  -  -      rla
 2249 D1:C8E7 02 -  -  -      ld  (bc),a
 2250 D1:C8E8 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2251 D1:C902 C3 FB B6 D1     jp i6502NextLoad
 2252 D1:C906 -  -  -  -  
 2253 D1:C906 -  -  -  -  ;zeropage,X	ROL oper,X	36	2	6  
 2254 D1:C906 -  -  -  -  inst6502_rol_zpx:
 2255 D1:C906 ED 33 06 -      ADDCYC(6)
 2256 D1:C909 7E -  -  -      ld  a,(hl)
 2257 D1:C90A 01 00 38 D0     ld  bc,ZEROPAGE
 2258 D1:C90E 81 -  -  -      add a,c
 2259 D1:C90F DD 86 01 -      add a,(ix+REGX)
 2260 D1:C912 4F -  -  -      ld  c,a
 2261 D1:C913 DD 7E 04 -      ld  a,(ix+REGSR)
 2262 D1:C916 1F -  -  -      rra
 2263 D1:C917 0A -  -  -      ld  a,(bc)
 2264 D1:C918 17 -  -  -      rla
 2265 D1:C919 02 -  -  -      ld  (bc),a
 2266 D1:C91A DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2267 D1:C934 C3 FB B6 D1     jp i6502NextLoad
 2268 D1:C938 -  -  -  -  
 2269 D1:C938 -  -  -  -  ;absolute	ROL oper	2E	3	6  
 2270 D1:C938 -  -  -  -  inst6502_rol_abs:
 2271 D1:C938 ED 33 06 -      ADDCYC(6)
 2272 D1:C93B CD AA B7 D1     call subroutine6502_abs_split_start
 2273 D1:C93F E5 -  -  -      push hl
 2274 D1:C940 50 -  -  -          ld  d,b
 2275 D1:C941 79 -  -  -          ld  a,c
 2276 D1:C942 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2277 D1:C944 ED 4C -  -          mlt bc
 2278 D1:C946 21 00 40 D0         ld  hl,PAGETABLE
 2279 D1:C94A 09 -  -  -          add hl,bc
 2280 D1:C94B ED 27 -  -          ld  hl,(hl)
 2281 D1:C94D 06 00 -  -          ld  b,0
 2282 D1:C94F 4F -  -  -          ld  c,a
 2283 D1:C950 09 -  -  -          add hl,bc   ;full address
 2284 D1:C951 CD 7D AE D1         READ_ACCESS
 2285 D1:C955 DD 46 04 -          ld  b,(ix+REGSR)
 2286 D1:C958 CB 18 -  -          rr b
 2287 D1:C95A 17 -  -  -          rla
 2288 D1:C95B 4F -  -  -          ld  c,a
 2289 D1:C95C DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2290 D1:C976 41 -  -  -          ld  b,c
 2291 D1:C977 CD 20 AF D1         WRITE_ACCESS
 2292 D1:C97B E1 -  -  -      pop hl
 2293 D1:C97C C3 FB B6 D1     jp i6502NextLoad
 2294 D1:C980 -  -  -  -  
 2295 D1:C980 -  -  -  -  ;absolute,X	ROL oper,X	3E	3	7  
 2296 D1:C980 -  -  -  -  inst6502_rol_absx:
 2297 D1:C980 ED 33 07 -      ADDCYC(7)
 2298 D1:C983 CD 07 B8 D1     PUSH_ABSXSPLIT_NODEP
 2299 D1:C987 CD 7D AE D1         READ_ACCESS
 2300 D1:C98B DD 46 04 -          ld  b,(ix+REGSR)
 2301 D1:C98E CB 18 -  -          rr b
 2302 D1:C990 17 -  -  -          rla
 2303 D1:C991 4F -  -  -          ld  c,a
 2304 D1:C992 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2305 D1:C9AC 41 -  -  -          ld  b,c
 2306 D1:C9AD CD 20 AF D1         WRITE_ACCESS
 2307 D1:C9B1 E1 -  -  -      pop hl
 2308 D1:C9B2 C3 FB B6 D1     jp i6502NextLoad
 2309 D1:C9B6 -  -  -  -  
 2310 D1:C9B6 -  -  -  -  ;-----------------------------------------------------------------------------
 2311 D1:C9B6 -  -  -  -  ;ROR - Rotate One Bit Right (Memory or Accumulator)
 2312 D1:C9B6 -  -  -  -  ;C -> [76543210] -> C
 2313 D1:C9B6 -  -  -  -  ;N	Z	C	I	D	V
 2314 D1:C9B6 -  -  -  -  ;+	+	+	-	-	-
 2315 D1:C9B6 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2316 D1:C9B6 -  -  -  -  
 2317 D1:C9B6 -  -  -  -  ;accumulator	ROR A	6A	1	2  
 2318 D1:C9B6 -  -  -  -  inst6502_ror:
 2319 D1:C9B6 ED 33 02 -      ADDCYC(2)
 2320 D1:C9B9 DD 7E 04 -      ld  a,(ix+REGSR)
 2321 D1:C9BC 1F -  -  -      rra
 2322 D1:C9BD DD CB 00 1E     rr  (ix+REGA)
 2323 D1:C9C1 DD 7E 00 -      ld  a,(ix+REGA)
 2324 D1:C9C4 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2325 D1:C9DE C3 14 B7 D1     jp i6502FinishLoad
 2326 D1:C9E2 -  -  -  -  
 2327 D1:C9E2 -  -  -  -  ;zeropage	ROR oper	66	2	5  
 2328 D1:C9E2 -  -  -  -  inst6502_ror_zp:
 2329 D1:C9E2 ED 33 05 -      ADDCYC(5)
 2330 D1:C9E5 7E -  -  -      ld  a,(hl)
 2331 D1:C9E6 01 00 38 D0     ld  bc,ZEROPAGE
 2332 D1:C9EA 81 -  -  -      add a,c
 2333 D1:C9EB 4F -  -  -      ld  c,a
 2334 D1:C9EC DD 7E 04 -      ld  a,(ix+REGSR)
 2335 D1:C9EF 1F -  -  -      rra
 2336 D1:C9F0 0A -  -  -      ld  a,(bc)
 2337 D1:C9F1 1F -  -  -      rra
 2338 D1:C9F2 02 -  -  -      ld  (bc),a
 2339 D1:C9F3 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2340 D1:CA0D C3 FB B6 D1     jp i6502NextLoad
 2341 D1:CA11 -  -  -  -  
 2342 D1:CA11 -  -  -  -  ;zeropage,X	ROR oper,X	76	2	6  
 2343 D1:CA11 -  -  -  -  inst6502_ror_zpx:
 2344 D1:CA11 ED 33 06 -      ADDCYC(6)
 2345 D1:CA14 7E -  -  -      ld  a,(hl)
 2346 D1:CA15 01 00 38 D0     ld  bc,ZEROPAGE
 2347 D1:CA19 81 -  -  -      add a,c
 2348 D1:CA1A DD 86 01 -      add a,(ix+REGX)
 2349 D1:CA1D 4F -  -  -      ld  c,a
 2350 D1:CA1E DD 7E 04 -      ld  a,(ix+REGSR)
 2351 D1:CA21 1F -  -  -      rra
 2352 D1:CA22 0A -  -  -      ld  a,(bc)
 2353 D1:CA23 1F -  -  -      rra
 2354 D1:CA24 02 -  -  -      ld  (bc),a
 2355 D1:CA25 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2356 D1:CA3F C3 FB B6 D1     jp i6502NextLoad
 2357 D1:CA43 -  -  -  -  
 2358 D1:CA43 -  -  -  -  ;absolute	ROR oper	6E	3	6  
 2359 D1:CA43 -  -  -  -  inst6502_ror_abs:
 2360 D1:CA43 ED 33 06 -      ADDCYC(6)
 2361 D1:CA46 CD AA B7 D1     call subroutine6502_abs_split_start
 2362 D1:CA4A E5 -  -  -      push hl
 2363 D1:CA4B 50 -  -  -          ld  d,b
 2364 D1:CA4C 79 -  -  -          ld  a,c
 2365 D1:CA4D 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2366 D1:CA4F ED 4C -  -          mlt bc
 2367 D1:CA51 21 00 40 D0         ld  hl,PAGETABLE
 2368 D1:CA55 09 -  -  -          add hl,bc
 2369 D1:CA56 ED 27 -  -          ld  hl,(hl)
 2370 D1:CA58 06 00 -  -          ld  b,0
 2371 D1:CA5A 4F -  -  -          ld  c,a
 2372 D1:CA5B 09 -  -  -          add hl,bc   ;full address
 2373 D1:CA5C CD 7D AE D1         READ_ACCESS
 2374 D1:CA60 DD 46 04 -          ld  b,(ix+REGSR)
 2375 D1:CA63 CB 18 -  -          rr b
 2376 D1:CA65 1F -  -  -          rra
 2377 D1:CA66 4F -  -  -          ld  c,a
 2378 D1:CA67 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2379 D1:CA81 41 -  -  -          ld  b,c
 2380 D1:CA82 CD 20 AF D1         WRITE_ACCESS
 2381 D1:CA86 E1 -  -  -      pop hl
 2382 D1:CA87 C3 FB B6 D1     jp i6502NextLoad
 2383 D1:CA8B -  -  -  -  
 2384 D1:CA8B -  -  -  -  ;absolute,X	ROR oper,X	7E	3	7  
 2385 D1:CA8B -  -  -  -  inst6502_ror_absx:
 2386 D1:CA8B ED 33 07 -      ADDCYC(7)
 2387 D1:CA8E CD 07 B8 D1     PUSH_ABSXSPLIT_NODEP
 2388 D1:CA92 CD 7D AE D1         READ_ACCESS
 2389 D1:CA96 DD 46 04 -          ld  b,(ix+REGSR)
 2390 D1:CA99 CB 18 -  -          rr b
 2391 D1:CA9B 1F -  -  -          rra
 2392 D1:CA9C 4F -  -  -          ld  c,a
 2393 D1:CA9D DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2394 D1:CAB7 41 -  -  -          ld  b,c
 2395 D1:CAB8 CD 20 AF D1         WRITE_ACCESS
 2396 D1:CABC E1 -  -  -      pop hl
 2397 D1:CABD C3 FB B6 D1     jp i6502NextLoad
 2398 D1:CAC1 -  -  -  -  
 2399 D1:CAC1 -  -  -  -  ;-----------------------------------------------------------------------------
 2400 D1:CAC1 -  -  -  -  ;-----------------------------------------------------------------------------
 2401 D1:CAC1 -  -  -  -  ;-----------------------------------------------------------------------------
 2402 D1:CAC1 -  -  -  -  ;Instructions by type: Flag Instructions
 2403 D1:CAC1 -  -  -  -  
 2404 D1:CAC1 -  -  -  -  ;CLC - Clear Carry Flag
 2405 D1:CAC1 -  -  -  -  ;0 -> C
 2406 D1:CAC1 -  -  -  -  ;N	Z	C	I	D	V
 2407 D1:CAC1 -  -  -  -  ;-	-	0	-	-	-
 2408 D1:CAC1 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2409 D1:CAC1 -  -  -  -  ;implied	CLC	18	1	2  
 2410 D1:CAC1 -  -  -  -  inst6502_clc:
 2411 D1:CAC1 ED 33 02 -      ADDCYC(2)
 2412 D1:CAC4 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 2413 D1:CAC8 C3 14 B7 D1     jp  i6502FinishLoad
 2414 D1:CACC -  -  -  -  
 2415 D1:CACC -  -  -  -  ;CLD - Clear Decimal Mode
 2416 D1:CACC -  -  -  -  ;0 -> D
 2417 D1:CACC -  -  -  -  ;N	Z	C	I	D	V
 2418 D1:CACC -  -  -  -  ;-	-	-	-	0	-
 2419 D1:CACC -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2420 D1:CACC -  -  -  -  ;implied	CLD	D8	1	2  
 2421 D1:CACC -  -  -  -  inst6502_cld:
 2422 D1:CACC ED 33 02 -      ADDCYC(2)
 2423 D1:CACF DD CB 04 9E     res SF_DEC,(ix+REGSR)
 2424 D1:CAD3 C3 14 B7 D1     jp  i6502FinishLoad
 2425 D1:CAD7 -  -  -  -  
 2426 D1:CAD7 -  -  -  -  ;CLI -  Clear Interrupt Disable Bit
 2427 D1:CAD7 -  -  -  -  ;0 -> I
 2428 D1:CAD7 -  -  -  -  ;N	Z	C	I	D	V
 2429 D1:CAD7 -  -  -  -  ;-	-	-	0	-	-
 2430 D1:CAD7 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2431 D1:CAD7 -  -  -  -  ;implied	CLI	58	1	2  
 2432 D1:CAD7 -  -  -  -  inst6502_cli:
 2433 D1:CAD7 ED 33 02 -      ADDCYC(2)
 2434 D1:CADA DD CB 04 96     res SF_INT,(ix+REGSR)
 2435 D1:CADE C3 14 B7 D1     jp  i6502FinishLoad
 2436 D1:CAE2 -  -  -  -  
 2437 D1:CAE2 -  -  -  -  ;CLV - Clear Overflow Flag
 2438 D1:CAE2 -  -  -  -  ;0 -> V
 2439 D1:CAE2 -  -  -  -  ;N	Z	C	I	D	V
 2440 D1:CAE2 -  -  -  -  ;-	-	-	-	-	0
 2441 D1:CAE2 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2442 D1:CAE2 -  -  -  -  ;implied	CLV	B8	1	2  
 2443 D1:CAE2 -  -  -  -  inst6502_clv:
 2444 D1:CAE2 ED 33 02 -      ADDCYC(2)
 2445 D1:CAE5 DD CB 04 B6     res SF_OVER,(ix+REGSR)
 2446 D1:CAE9 C3 14 B7 D1     jp  i6502FinishLoad
 2447 D1:CAED -  -  -  -  
 2448 D1:CAED -  -  -  -  ;SEC - Set Carry Flag
 2449 D1:CAED -  -  -  -  ;1 -> C
 2450 D1:CAED -  -  -  -  ;N	Z	C	I	D	V
 2451 D1:CAED -  -  -  -  ;-	-	1	-	-	-
 2452 D1:CAED -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2453 D1:CAED -  -  -  -  ;implied	SEC	38	1	2  
 2454 D1:CAED -  -  -  -  inst6502_sec:
 2455 D1:CAED ED 33 02 -      ADDCYC(2)
 2456 D1:CAF0 DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 2457 D1:CAF4 C3 14 B7 D1     jp  i6502FinishLoad
 2458 D1:CAF8 -  -  -  -  
 2459 D1:CAF8 -  -  -  -  ;SED - Set Decimal Flag
 2460 D1:CAF8 -  -  -  -  ;1 -> D
 2461 D1:CAF8 -  -  -  -  ;N	Z	C	I	D	V
 2462 D1:CAF8 -  -  -  -  ;-	-	-	-	1	-
 2463 D1:CAF8 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2464 D1:CAF8 -  -  -  -  ;implied	SED	F8	1	2  
 2465 D1:CAF8 -  -  -  -  inst6502_sed:
 2466 D1:CAF8 ED 33 02 -      ADDCYC(2)
 2467 D1:CAFB DD CB 04 DE     set SF_DEC,(ix+REGSR)
 2468 D1:CAFF C3 14 B7 D1     jp  i6502FinishLoad
 2469 D1:CB03 -  -  -  -  
 2470 D1:CB03 -  -  -  -  ;SEI - Set Interrupt Disable Status
 2471 D1:CB03 -  -  -  -  ;1 -> I
 2472 D1:CB03 -  -  -  -  ;N	Z	C	I	D	V
 2473 D1:CB03 -  -  -  -  ;-	-	-	1	-	-
 2474 D1:CB03 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2475 D1:CB03 -  -  -  -  ;implied	SEI	78	1	2  
 2476 D1:CB03 -  -  -  -  inst6502_sei:
 2477 D1:CB03 ED 33 02 -      ADDCYC(2)
 2478 D1:CB06 DD CB 04 D6     set SF_INT,(ix+REGSR)
 2479 D1:CB0A C3 14 B7 D1     jp  i6502FinishLoad
 2480 D1:CB0E -  -  -  -  
 2481 D1:CB0E -  -  -  -  ;-----------------------------------------------------------------------------
 2482 D1:CB0E -  -  -  -  ;-----------------------------------------------------------------------------
 2483 D1:CB0E -  -  -  -  ;-----------------------------------------------------------------------------
 2484 D1:CB0E -  -  -  -  ;Instructions by type: Comparisons
 2485 D1:CB0E -  -  -  -  
 2486 D1:CB0E -  -  -  -  ;CMP - Compare Memory with Accumulator
 2487 D1:CB0E -  -  -  -  ;A - M
 2488 D1:CB0E -  -  -  -  ;N	Z	C	I	D	V
 2489 D1:CB0E -  -  -  -  ;+	+	+	-	-	-
 2490 D1:CB0E -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2491 D1:CB0E -  -  -  -  
 2492 D1:CB0E -  -  -  -  ;immediate	CMP #oper	C9	2	2  
 2493 D1:CB0E -  -  -  -  inst6502_cmp_imm:
 2494 D1:CB0E ED 33 02 -      ADDCYC(2)
 2495 D1:CB11 46 -  -  -      ld  b,(hl)
 2496 D1:CB12 C3 A0 B8 D1     jp  subroutine6502_cmp_combined_end
 2497 D1:CB16 -  -  -  -  
 2498 D1:CB16 -  -  -  -  ;zeropage	CMP oper	C5	2	3  
 2499 D1:CB16 -  -  -  -  inst6502_cmp_zp:
 2500 D1:CB16 ED 33 03 -      ADDCYC(3)
 2501 D1:CB19 01 00 38 D0     ld  bc,ZEROPAGE
 2502 D1:CB1D 4E -  -  -      ld  c,(hl)
 2503 D1:CB1E 0A -  -  -      ld  a,(bc)
 2504 D1:CB1F 47 -  -  -      ld  b,a
 2505 D1:CB20 C3 A0 B8 D1     jp  subroutine6502_cmp_combined_end
 2506 D1:CB24 -  -  -  -  
 2507 D1:CB24 -  -  -  -  ;zeropage,X	CMP oper,X	D5	2	4  
 2508 D1:CB24 -  -  -  -  inst6502_cmp_zpx:
 2509 D1:CB24 ED 33 04 -      ADDCYC(4)
 2510 D1:CB27 7E -  -  -      ld  a,(hl)
 2511 D1:CB28 01 00 38 D0     ld  bc,ZEROPAGE
 2512 D1:CB2C 81 -  -  -      add a,c
 2513 D1:CB2D DD 86 01 -      add a,(ix+REGX)
 2514 D1:CB30 4F -  -  -      ld  c,a
 2515 D1:CB31 0A -  -  -      ld  a,(bc)
 2516 D1:CB32 47 -  -  -      ld  b,a
 2517 D1:CB33 C3 A0 B8 D1     jp  subroutine6502_cmp_combined_end
 2518 D1:CB37 -  -  -  -  
 2519 D1:CB37 -  -  -  -  ;absolute	CMP oper	CD	3	4  
 2520 D1:CB37 -  -  -  -  inst6502_cmp_abs:
 2521 D1:CB37 ED 33 04 -      ADDCYC(4)
 2522 D1:CB3A CD AA B7 D1     call subroutine6502_abs_split_start
 2523 D1:CB3E E5 -  -  -      push hl
 2524 D1:CB3F 50 -  -  -          ld  d,b
 2525 D1:CB40 79 -  -  -          ld  a,c
 2526 D1:CB41 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2527 D1:CB43 ED 4C -  -          mlt bc
 2528 D1:CB45 21 00 40 D0         ld  hl,PAGETABLE
 2529 D1:CB49 09 -  -  -          add hl,bc
 2530 D1:CB4A ED 27 -  -          ld  hl,(hl)
 2531 D1:CB4C 06 00 -  -          ld  b,0
 2532 D1:CB4E 4F -  -  -          ld  c,a
 2533 D1:CB4F 09 -  -  -          add hl,bc   ;full address
 2534 D1:CB50 CD 7D AE D1         READ_ACCESS
 2535 D1:CB54 E1 -  -  -      pop hl
 2536 D1:CB55 47 -  -  -      ld  b,a
 2537 D1:CB56 C3 A0 B8 D1     jp  subroutine6502_cmp_combined_end
 2538 D1:CB5A -  -  -  -  
 2539 D1:CB5A -  -  -  -  ;absolute,X	CMP oper,X	DD	3	4* 
 2540 D1:CB5A -  -  -  -  inst6502_cmp_absx:
 2541 D1:CB5A ED 33 04 -      ADDCYC(4)
 2542 D1:CB5D CD CB B7 D1     PUSH_ABSXSPLIT
 2543 D1:CB61 CD 7D AE D1         READ_ACCESS
 2544 D1:CB65 E1 -  -  -      pop hl
 2545 D1:CB66 47 -  -  -      ld  b,a
 2546 D1:CB67 C3 A0 B8 D1     jp  subroutine6502_cmp_combined_end
 2547 D1:CB6B -  -  -  -  
 2548 D1:CB6B -  -  -  -  ;absolute,Y	CMP oper,Y	D9	3	4* 
 2549 D1:CB6B -  -  -  -  inst6502_cmp_absy:
 2550 D1:CB6B ED 33 04 -      ADDCYC(4)
 2551 D1:CB6E CD C6 B7 D1     PUSH_ABSYSPLIT
 2552 D1:CB72 CD 7D AE D1         READ_ACCESS
 2553 D1:CB76 E1 -  -  -      pop hl
 2554 D1:CB77 47 -  -  -      ld  b,a
 2555 D1:CB78 C3 A0 B8 D1     jp  subroutine6502_cmp_combined_end
 2556 D1:CB7C -  -  -  -  
 2557 D1:CB7C -  -  -  -  ;(indirect,X)	CMP (oper,X)	C1	2	6  
 2558 D1:CB7C -  -  -  -  inst6502_cmp_indx:
 2559 D1:CB7C ED 33 06 -      ADDCYC(6)
 2560 D1:CB7F E5 -  -  -      push hl
 2561 D1:CB80 7E -  -  -          ld  a,(hl)
 2562 D1:CB81 21 00 38 D0         ld  hl,ZEROPAGE
 2563 D1:CB85 85 -  -  -          add a,L
 2564 D1:CB86 DD 86 01 -          add a,(ix+REGX)
 2565 D1:CB89 6F -  -  -          ld  L,a
 2566 D1:CB8A 7E -  -  -          ld  a,(hl)
 2567 D1:CB8B 2C -  -  -          inc L
 2568 D1:CB8C 56 -  -  -          ld  d,(hl)
 2569 D1:CB8D 42 -  -  -          ld  b,d
 2570 D1:CB8E 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2571 D1:CB90 ED 4C -  -          mlt bc
 2572 D1:CB92 21 00 40 D0         ld  hl,PAGETABLE
 2573 D1:CB96 09 -  -  -          add hl,bc
 2574 D1:CB97 ED 27 -  -          ld  hl,(hl)
 2575 D1:CB99 06 00 -  -          ld  b,0
 2576 D1:CB9B 4F -  -  -          ld  c,a
 2577 D1:CB9C 09 -  -  -          add hl,bc
 2578 D1:CB9D CD 7D AE D1         READ_ACCESS
 2579 D1:CBA1 E1 -  -  -      pop hl
 2580 D1:CBA2 47 -  -  -      ld  b,a
 2581 D1:CBA3 C3 A0 B8 D1     jp  subroutine6502_cmp_combined_end
 2582 D1:CBA7 -  -  -  -  
 2583 D1:CBA7 -  -  -  -  ;(indirect),Y	CMP (oper),Y	D1	2	5* 
 2584 D1:CBA7 -  -  -  -  inst6502_cmp_indy:
 2585 D1:CBA7 ED 33 05 -      ADDCYC(5)
 2586 D1:CBAA E5 -  -  -      push hl
 2587 D1:CBAB 7E -  -  -          ld  a,(hl)
 2588 D1:CBAC 21 00 38 D0         ld  hl,ZEROPAGE
 2589 D1:CBB0 85 -  -  -          add a,L
 2590 D1:CBB1 6F -  -  -          ld  L,a
 2591 D1:CBB2 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 2592 D1:CBB3 2C -  -  -          inc L
 2593 D1:CBB4 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 2594 D1:CBB7 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 2595 D1:CBB8 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 2596 D1:CBBA 24 -  -  -          inc h
 2597 D1:CBBB FD 23 -  -          ADDCYC(1)
 2598 D1:CBBD 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 2599 D1:CBBE 2E 0C -  -          ld  L,BASETABLE_STRIDE
 2600 D1:CBC0 ED 6C -  -          mlt hl          ;23.
 2601 D1:CBC2 01 00 40 D0         ld  bc,PAGETABLE
 2602 D1:CBC6 09 -  -  -          add hl,bc
 2603 D1:CBC7 ED 27 -  -          ld  hl,(hl)     ;address get.
 2604 D1:CBC9 01 00 00 00         ld  bc,0
 2605 D1:CBCD 4F -  -  -          ld  c,a
 2606 D1:CBCE 09 -  -  -          add hl,bc       ;Full address get.
 2607 D1:CBCF CD 7D AE D1         READ_ACCESS
 2608 D1:CBD3 E1 -  -  -      pop hl
 2609 D1:CBD4 47 -  -  -      ld  b,a
 2610 D1:CBD5 C3 A0 B8 D1     jp  subroutine6502_cmp_combined_end
 2611 D1:CBD9 -  -  -  -  
 2612 D1:CBD9 -  -  -  -  ;-----------------------------------------------------------------------------
 2613 D1:CBD9 -  -  -  -  ;CPX - Compare Memory and Index X
 2614 D1:CBD9 -  -  -  -  ;X - M
 2615 D1:CBD9 -  -  -  -  ;N	Z	C	I	D	V
 2616 D1:CBD9 -  -  -  -  ;+	+	+	-	-	-
 2617 D1:CBD9 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2618 D1:CBD9 -  -  -  -  ;immediate	CPX #oper	E0	2	2  
 2619 D1:CBD9 -  -  -  -  inst6502_cpx_imm:
 2620 D1:CBD9 ED 33 02 -      ADDCYC(2)
 2621 D1:CBDC DD 7E 01 -      ld  a,(ix+REGX)
 2622 D1:CBDF 96 -  -  -      sub a,(hl)
 2623 D1:CBE0 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2624 D1:CBE1 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2625 D1:CBFB C3 FB B6 D1     jp  i6502NextLoad
 2626 D1:CBFF -  -  -  -  
 2627 D1:CBFF -  -  -  -  ;zeropage	CPX oper	E4	2	3  
 2628 D1:CBFF -  -  -  -  inst6502_cpx_zp:
 2629 D1:CBFF ED 33 03 -      ADDCYC(3)
 2630 D1:CC02 01 00 38 D0     ld  bc,ZEROPAGE
 2631 D1:CC06 4E -  -  -      ld  c,(hl)
 2632 D1:CC07 0A -  -  -      ld  a,(bc)
 2633 D1:CC08 47 -  -  -      ld  b,a
 2634 D1:CC09 DD 7E 01 -      ld  a,(ix+REGX)
 2635 D1:CC0C 90 -  -  -      sub a,b
 2636 D1:CC0D 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2637 D1:CC0E DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2638 D1:CC28 C3 FB B6 D1     jp i6502NextLoad
 2639 D1:CC2C -  -  -  -  ;absolute	CPX oper	EC	3	4  
 2640 D1:CC2C -  -  -  -  inst6502_cpx_abs:
 2641 D1:CC2C ED 33 04 -      ADDCYC(4)
 2642 D1:CC2F CD AA B7 D1     call subroutine6502_abs_split_start
 2643 D1:CC33 E5 -  -  -      push hl
 2644 D1:CC34 50 -  -  -          ld  d,b
 2645 D1:CC35 79 -  -  -          ld  a,c
 2646 D1:CC36 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2647 D1:CC38 ED 4C -  -          mlt bc
 2648 D1:CC3A 21 00 40 D0         ld  hl,PAGETABLE
 2649 D1:CC3E 09 -  -  -          add hl,bc
 2650 D1:CC3F ED 27 -  -          ld  hl,(hl)
 2651 D1:CC41 06 00 -  -          ld  b,0
 2652 D1:CC43 4F -  -  -          ld  c,a
 2653 D1:CC44 09 -  -  -          add hl,bc   ;full address
 2654 D1:CC45 CD 7D AE D1         READ_ACCESS
 2655 D1:CC49 E1 -  -  -      pop hl
 2656 D1:CC4A 47 -  -  -      ld  b,a
 2657 D1:CC4B DD 7E 01 -      ld  a,(ix+REGX)
 2658 D1:CC4E 90 -  -  -      sub a,b
 2659 D1:CC4F 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2660 D1:CC50 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2661 D1:CC6A C3 FB B6 D1     jp i6502NextLoad
 2662 D1:CC6E -  -  -  -  
 2663 D1:CC6E -  -  -  -  ;-----------------------------------------------------------------------------
 2664 D1:CC6E -  -  -  -  ;CPY - Compare Memory and Index Y
 2665 D1:CC6E -  -  -  -  ;Y - M
 2666 D1:CC6E -  -  -  -  ;N	Z	C	I	D	V
 2667 D1:CC6E -  -  -  -  ;+	+	+	-	-	-
 2668 D1:CC6E -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2669 D1:CC6E -  -  -  -  ;immediate	CPY #oper	C0	2	2  
 2670 D1:CC6E -  -  -  -  inst6502_cpy_imm:
 2671 D1:CC6E ED 33 02 -      ADDCYC(2)
 2672 D1:CC71 DD 7E 02 -      ld  a,(ix+REGY)
 2673 D1:CC74 96 -  -  -      sub a,(hl)
 2674 D1:CC75 3F -  -  -      ccf
 2675 D1:CC76 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2676 D1:CC90 C3 FB B6 D1     jp  i6502NextLoad
 2677 D1:CC94 -  -  -  -  
 2678 D1:CC94 -  -  -  -  ;zeropage	CPY oper	C4	2	3  
 2679 D1:CC94 -  -  -  -  inst6502_cpy_zp:
 2680 D1:CC94 ED 33 03 -      ADDCYC(3)
 2681 D1:CC97 7E -  -  -      ld  a,(hl)
 2682 D1:CC98 01 00 38 D0     ld  bc,ZEROPAGE
 2683 D1:CC9C 81 -  -  -      add a,c
 2684 D1:CC9D 4F -  -  -      ld  c,a
 2685 D1:CC9E 0A -  -  -      ld  a,(bc)
 2686 D1:CC9F 47 -  -  -      ld  b,a
 2687 D1:CCA0 DD 7E 02 -      ld  a,(ix+REGY)
 2688 D1:CCA3 90 -  -  -      sub a,b
 2689 D1:CCA4 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2690 D1:CCA5 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2691 D1:CCBF C3 FB B6 D1     jp i6502NextLoad
 2692 D1:CCC3 -  -  -  -  
 2693 D1:CCC3 -  -  -  -  ;absolute	CPY oper	CC	3	4  
 2694 D1:CCC3 -  -  -  -  inst6502_cpy_abs:
 2695 D1:CCC3 ED 33 04 -      ADDCYC(4)
 2696 D1:CCC6 CD AA B7 D1     call subroutine6502_abs_split_start
 2697 D1:CCCA E5 -  -  -      push hl
 2698 D1:CCCB 50 -  -  -          ld  d,b
 2699 D1:CCCC 79 -  -  -          ld  a,c
 2700 D1:CCCD 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2701 D1:CCCF ED 4C -  -          mlt bc
 2702 D1:CCD1 21 00 40 D0         ld  hl,PAGETABLE
 2703 D1:CCD5 09 -  -  -          add hl,bc
 2704 D1:CCD6 ED 27 -  -          ld  hl,(hl)
 2705 D1:CCD8 06 00 -  -          ld  b,0
 2706 D1:CCDA 4F -  -  -          ld  c,a
 2707 D1:CCDB 09 -  -  -          add hl,bc   ;full address
 2708 D1:CCDC CD 7D AE D1         READ_ACCESS
 2709 D1:CCE0 E1 -  -  -      pop hl
 2710 D1:CCE1 47 -  -  -      ld  b,a
 2711 D1:CCE2 DD 7E 02 -      ld  a,(ix+REGY)
 2712 D1:CCE5 90 -  -  -      sub a,b
 2713 D1:CCE6 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2714 D1:CCE7 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2715 D1:CD01 C3 FB B6 D1     jp i6502NextLoad
 2716 D1:CD05 -  -  -  -  
 2717 D1:CD05 -  -  -  -  
 2718 D1:CD05 -  -  -  -  ;-----------------------------------------------------------------------------
 2719 D1:CD05 -  -  -  -  ;-----------------------------------------------------------------------------
 2720 D1:CD05 -  -  -  -  ;-----------------------------------------------------------------------------
 2721 D1:CD05 -  -  -  -  ;Instructions by type: Conditional Branch Instructions
 2722 D1:CD05 -  -  -  -  
 2723 D1:CD05 -  -  -  -  ;branch on C=0
 2724 D1:CD05 -  -  -  -  ;relative	BCC oper	90	2	2**
 2725 D1:CD05 -  -  -  -  inst6502_bcc:
 2726 D1:CD05 ED 33 02 -      ADDCYC(2)
 2727 D1:CD08 DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2728 D1:CD0C C2 FB B6 D1     jp  nz,i6502NextLoad
 2729 D1:CD10 C3 C3 B8 D1     jp  subroutine6502_take_branch
 2730 D1:CD14 -  -  -  -  
 2731 D1:CD14 -  -  -  -  ;branch on C=1
 2732 D1:CD14 -  -  -  -  ;relative	BCS oper	B0	2	2**
 2733 D1:CD14 -  -  -  -  inst6502_bcs:
 2734 D1:CD14 ED 33 02 -      ADDCYC(2)
 2735 D1:CD17 DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2736 D1:CD1B CA FB B6 D1     jp  z,i6502NextLoad
 2737 D1:CD1F C3 C3 B8 D1     jp  subroutine6502_take_branch
 2738 D1:CD23 -  -  -  -  
 2739 D1:CD23 -  -  -  -  ;branch on Z=1
 2740 D1:CD23 -  -  -  -  ;relative	BEQ oper	F0	2	2**
 2741 D1:CD23 -  -  -  -  inst6502_beq:
 2742 D1:CD23 ED 33 02 -      ADDCYC(2)
 2743 D1:CD26 DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2744 D1:CD2A CA FB B6 D1     jp  z,i6502NextLoad
 2745 D1:CD2E C3 DE B8 D1     jp  subroutine6502_take_branch_waitloop_detect
 2746 D1:CD32 -  -  -  -  
 2747 D1:CD32 -  -  -  -  ;branch on N=1
 2748 D1:CD32 -  -  -  -  ;relative	BMI oper	30	2	2**
 2749 D1:CD32 -  -  -  -  inst6502_bmi:
 2750 D1:CD32 ED 33 02 -      ADDCYC(2)
 2751 D1:CD35 DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2752 D1:CD39 CA FB B6 D1     jp  z,i6502NextLoad
 2753 D1:CD3D C3 C3 B8 D1     jp  subroutine6502_take_branch
 2754 D1:CD41 -  -  -  -  
 2755 D1:CD41 -  -  -  -  
 2756 D1:CD41 -  -  -  -  ;branch on Z=0
 2757 D1:CD41 -  -  -  -  ;relative	BNE oper	D0	2	2**
 2758 D1:CD41 -  -  -  -  inst6502_bne:
 2759 D1:CD41 ED 33 02 -      ADDCYC(2)
 2760 D1:CD44 DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2761 D1:CD48 C2 FB B6 D1     jp  nz,i6502NextLoad
 2762 D1:CD4C C3 C3 B8 D1     jp  subroutine6502_take_branch
 2763 D1:CD50 -  -  -  -  
 2764 D1:CD50 -  -  -  -  ;branch on N=0
 2765 D1:CD50 -  -  -  -  ;relative	BPL oper	10	2	2**
 2766 D1:CD50 -  -  -  -  inst6502_bpl:
 2767 D1:CD50 ED 33 02 -      ADDCYC(2)
 2768 D1:CD53 DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2769 D1:CD57 C2 FB B6 D1     jp  nz,i6502NextLoad
 2770 D1:CD5B C3 C3 B8 D1     jp  subroutine6502_take_branch
 2771 D1:CD5F -  -  -  -  
 2772 D1:CD5F -  -  -  -  ;branch on V=0
 2773 D1:CD5F -  -  -  -  ;relative	BVC oper	50	2	2**
 2774 D1:CD5F -  -  -  -  inst6502_bvc:
 2775 D1:CD5F ED 33 02 -      ADDCYC(2)
 2776 D1:CD62 DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2777 D1:CD66 C2 FB B6 D1     jp  nz,i6502NextLoad
 2778 D1:CD6A C3 C3 B8 D1     jp  subroutine6502_take_branch
 2779 D1:CD6E -  -  -  -  
 2780 D1:CD6E -  -  -  -  ;branch on V=1
 2781 D1:CD6E -  -  -  -  ;relative	BVS oper	70	2	2**
 2782 D1:CD6E -  -  -  -  inst6502_bvs:
 2783 D1:CD6E ED 33 02 -      ADDCYC(2)
 2784 D1:CD71 DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2785 D1:CD75 CA FB B6 D1     jp  z,i6502NextLoad
 2786 D1:CD79 C3 C3 B8 D1     jp  subroutine6502_take_branch
 2787 D1:CD7D -  -  -  -  
 2788 D1:CD7D -  -  -  -  ;-----------------------------------------------------------------------------
 2789 D1:CD7D -  -  -  -  ;-----------------------------------------------------------------------------
 2790 D1:CD7D -  -  -  -  ;-----------------------------------------------------------------------------
 2791 D1:CD7D -  -  -  -  ;Instructions by type: Interrupts
 2792 D1:CD7D -  -  -  -  
 2793 D1:CD7D -  -  -  -  ;BRK - Force Break
 2794 D1:CD7D -  -  -  -  ;BRK initiates a software interrupt similar to a hardware
 2795 D1:CD7D -  -  -  -  ;interrupt (IRQ). The return address pushed to the stack is
 2796 D1:CD7D -  -  -  -  ;PC+2, providing an extra byte of spacing for a break mark
 2797 D1:CD7D -  -  -  -  ;(identifying a reason for the break.)
 2798 D1:CD7D -  -  -  -  ;The status register will be pushed to the stack with the break
 2799 D1:CD7D -  -  -  -  ;flag set to 1. However, when retrieved during RTI or by a PLP
 2800 D1:CD7D -  -  -  -  ;instruction, the break flag will be ignored.
 2801 D1:CD7D -  -  -  -  ;The interrupt disable flag is not set automatically.
 2802 D1:CD7D -  -  -  -  ;
 2803 D1:CD7D -  -  -  -  ;interrupt,             N	Z	C	I	D	V
 2804 D1:CD7D -  -  -  -  ;push PC+2, push SR     -	-	-	1	-	-
 2805 D1:CD7D -  -  -  -  ;implied	BRK	00	1	7  
 2806 D1:CD7D -  -  -  -  inst6502_brk:
 2807 D1:CD7D ED 33 07 -      ADDCYC(7)
 2808 D1:CD80 21 00 39 D0     ld  hl,STACKBASE
 2809 D1:CD84 DD 6E 03 -      ld  L,(ix+REGSP)
 2810 D1:CD87 52 DD 17 05     ld.s de,(ix+REGPC)
 2811 D1:CD8B 13 -  -  -      inc de      ;that extra spacer.
 2812 D1:CD8C 72 -  -  -      ld  (hl),d
 2813 D1:CD8D 2D -  -  -      dec L
 2814 D1:CD8E 73 -  -  -      ld  (hl),e
 2815 D1:CD8F 2D -  -  -      dec L
 2816 D1:CD90 DD 7E 04 -      ld  a,(ix+REGSR)
 2817 D1:CD93 CB D7 -  -      set SF_INT,a
 2818 D1:CD95 77 -  -  -      ld  (hl),a
 2819 D1:CD96 2D -  -  -      dec L
 2820 D1:CD97 DD 75 03 -      ld  (ix+REGSP),L
 2821 D1:CD9A DD CB 1E 46     WAS_NMI_TRIGGERED
 2822 D1:CD9E 01 FE 00 00     ld  bc,$FE  ;IRQ vector
 2823 D1:CDA2 28 04 -  -      jr  z,+_
 2824 D1:CDA4 01 FA 00 00     ld  bc,$FA  ;NMI vector, if NMI is hijacking this instruction.
 2825 D1:CDA8 21 F4 4B D0 _:  ld  hl,(BASETABLE_STRIDE*$FF)+PAGETABLE
 2826 D1:CDAC ED 27 -  -      ld  hl,(hl)
 2827 D1:CDAE 09 -  -  -      add hl,bc
 2828 D1:CDAF ED 17 -  -      ld  de,(hl)
 2829 D1:CDB1 52 DD 1F 05     ld.s (ix+REGPC),de
 2830 D1:CDB5 C3 E5 B6 D1     jp  i6502FirstLoad
 2831 D1:CDB9 -  -  -  -  
 2832 D1:CDB9 -  -  -  -  ;RTI - Return from Interrupt
 2833 D1:CDB9 -  -  -  -  ;The status register is pulled with the break flag
 2834 D1:CDB9 -  -  -  -  ;and bit 5 ignored. Then PC is pulled from the stack.
 2835 D1:CDB9 -  -  -  -  ;pull SR, pull PC      N Z C I D V
 2836 D1:CDB9 -  -  -  -  ;                      from stack
 2837 D1:CDB9 -  -  -  -  ;implied	RTI	40	1	6  
 2838 D1:CDB9 -  -  -  -  inst6502_rti:
 2839 D1:CDB9 21 00 39 D0     ld  hl,STACKBASE
 2840 D1:CDBD DD 6E 03 -      ld  l,(ix+REGSP)
 2841 D1:CDC0 2C -  -  -      inc l
 2842 D1:CDC1 7E -  -  -      ld  a,(hl)
 2843 D1:CDC2 2C -  -  -      inc l
 2844 D1:CDC3 5E -  -  -      ld  e,(hl)
 2845 D1:CDC4 2C -  -  -      inc l
 2846 D1:CDC5 56 -  -  -      ld  d,(hl)
 2847 D1:CDC6 DD 75 03 -      ld  (ix+REGSP),l
 2848 D1:CDC9 52 DD 1F 05     ld.s (ix+REGPC),de
 2849 D1:CDCD DD 46 04 -      ld  b,(ix+REGSR)
 2850 D1:CDD0 A8 -  -  -      xor a,b
 2851 D1:CDD1 E6 DF -  -      and a,%11011111
 2852 D1:CDD3 A8 -  -  -      xor a,b
 2853 D1:CDD4 DD 77 04 -      ld  (ix+REGSR),a
 2854 D1:CDD7 ED 33 06 -      ADDCYC(6)
 2855 D1:CDDA C3 E5 B6 D1     jp  i6502FirstLoad
 2856 D1:CDDE -  -  -  -  
 2857 D1:CDDE -  -  -  -  
 2858 D1:CDDE -  -  -  -  
 2859 D1:CDDE -  -  -  -  ;-----------------------------------------------------------------------------
 2860 D1:CDDE -  -  -  -  ;-----------------------------------------------------------------------------
 2861 D1:CDDE -  -  -  -  ;-----------------------------------------------------------------------------
 2862 D1:CDDE -  -  -  -  ;Instructions by type: Jumps and Subroutines
 2863 D1:CDDE -  -  -  -  
 2864 D1:CDDE -  -  -  -  ;absolute	JMP oper	4C	3	3  
 2865 D1:CDDE -  -  -  -  inst6052_jmp_abs:
 2866 D1:CDDE -  -  -  -      ;The waitloop handler requires that the ADDCYC() is NOT done until
 2867 D1:CDDE -  -  -  -      ;after the jump to do the wait happens. This is because it's possible
 2868 D1:CDDE -  -  -  -      ;that an IRQ/NMI may be skipped if ADDCYC() is done first.
 2869 D1:CDDE DD 56 06 -      ld  d,(ix+REGPC+1)
 2870 D1:CDE1 7E -  -  -      ld  a,(hl)
 2871 D1:CDE2 23 -  -  -      inc hl
 2872 D1:CDE3 1C -  -  -      inc e
 2873 D1:CDE4 20 0D -  -      jr  nz,+_
 2874 D1:CDE6 14 -  -  -      inc d
 2875 D1:CDE7 4A -  -  -      ld  c,d
 2876 D1:CDE8 06 0C -  -      ld  b,BASETABLE_STRIDE
 2877 D1:CDEA ED 4C -  -      mlt bc
 2878 D1:CDEC 21 00 40 D0     ld  hl,PAGETABLE
 2879 D1:CDF0 09 -  -  -      add hl,bc
 2880 D1:CDF1 ED 27 -  -      ld  hl,(hl)
 2881 D1:CDF3 66 -  -  -  _:  ld  h,(hl)
 2882 D1:CDF4 6F -  -  -      ld  l,a     ;HL=newaddr
 2883 D1:CDF5 1B -  -  -      dec de
 2884 D1:CDF6 1B -  -  -      dec de      ;DE=oldaddr, at start of instruction
 2885 D1:CDF7 52 EB -  -      ex.s de,hl  ;HL=oldaddr, DE=newaddr. Upper bytes cleared.
 2886 D1:CDF9 B7 -  -  -      or  a,a
 2887 D1:CDFA ED 52 -  -      sbc hl,de   ;infinite loop detection
 2888 D1:CDFC 52 DD 1F 05     ld.s (ix+REGPC),de
 2889 D1:CE00 28 07 -  -      jr  z,inst6052_jmp_abs_inf_loop
 2890 D1:CE02 ED 33 03 -      ADDCYC(3)
 2891 D1:CE05 C3 E5 B6 D1     jp i6502FirstLoad
 2892 D1:CE09 -  -  -  -  
 2893 D1:CE09 -  -  -  -  inst6052_jmp_abs_inf_loop:
 2894 D1:CE09 ED 03 00 -      lea bc,iy+0
 2895 D1:CE0C 2A 35 B7 D1     ld  hl,(i6502_interrupt_timer)
 2896 D1:CE10 DD 2F 1B -      ld  (ix+TEMP_MEMORY),hl
 2897 D1:CE13 DD 7E 1D -      ld  a,(ix+TEMP_MEMORY+2)
 2898 D1:CE16 2F -  -  -      cpl
 2899 D1:CE17 DD 77 1D -      ld  (ix+TEMP_MEMORY+2),a
 2900 D1:CE1A DD 27 1B -      ld  hl,(ix+TEMP_MEMORY)
 2901 D1:CE1D 7D -  -  -      ld  a,l
 2902 D1:CE1E 2F -  -  -      cpl
 2903 D1:CE1F 6F -  -  -      ld  l,a
 2904 D1:CE20 7C -  -  -      ld  a,h
 2905 D1:CE21 2F -  -  -      cpl
 2906 D1:CE22 67 -  -  -      ld  h,a
 2907 D1:CE23 23 -  -  -      inc hl
 2908 D1:CE24 E5 -  -  -      push hl
 2909 D1:CE25 FD E1 -  -      pop iy      ;screw accurate timing. I just want it to go brrt
 2910 D1:CE27 -  -  -  -      ;TODO: Accurate timing is probably a necessary thing. Maybe do proper
 2911 D1:CE27 -  -  -  -      ;math to figure this one out.
 2912 D1:CE27 C3 E5 B6 D1     jp  i6502FirstLoad  
 2913 D1:CE2B -  -  -  -      
 2914 D1:CE2B -  -  -  -  
 2915 D1:CE2B -  -  -  -  
 2916 D1:CE2B -  -  -  -  
 2917 D1:CE2B -  -  -  -  ;Note: In earlier 6502 implementations, cross-page reads on indirect is bugged.
 2918 D1:CE2B -  -  -  -  ;   The end effect would be that inst6502_jmp_indir_splitread would wrap around
 2919 D1:CE2B -  -  -  -  ;   to the start of the current page rather than try to read the next page.
 2920 D1:CE2B -  -  -  -  ;indirect	JMP (oper)	6C	3	5  
 2921 D1:CE2B -  -  -  -  inst6502_jmp_indir:
 2922 D1:CE2B ED 33 05 -      ADDCYC(5)
 2923 D1:CE2E -  -  -  -      ;Doing much the same as abs_split_start below, except with fewer things
 2924 D1:CE2E -  -  -  -      ;because we don't need to preserve any of the other stuff.
 2925 D1:CE2E 4E -  -  -      ld  c,(hl)
 2926 D1:CE2F 23 -  -  -      inc hl
 2927 D1:CE30 1C -  -  -      inc e
 2928 D1:CE31 20 0F -  -      jr  nz,+_
 2929 D1:CE33 DD 56 06 -      ld  d,(ix+REGPC+1)
 2930 D1:CE36 14 -  -  -      inc d
 2931 D1:CE37 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2932 D1:CE39 ED 5C -  -      mlt de
 2933 D1:CE3B 21 00 40 D0     ld  hl,PAGETABLE
 2934 D1:CE3F 19 -  -  -      add hl,de
 2935 D1:CE40 ED 27 -  -      ld  hl,(hl)
 2936 D1:CE42 46 -  -  -  _:  ld  b,(hl)
 2937 D1:CE43 79 -  -  -      ld  a,c
 2938 D1:CE44 0C -  -  -      inc c   ;check if there will be a split read.
 2939 D1:CE45 0E 0C -  -      ld  c,BASETABLE_STRIDE  ;Flags not affected
 2940 D1:CE47 ED 4C -  -      mlt bc                  ;Flags not affected
 2941 D1:CE49 21 00 40 D0     ld  hl,PAGETABLE        ;Flags not affected
 2942 D1:CE4D CA 62 CE D1     jp  z,inst6502_jmp_indir_splitRead
 2943 D1:CE51 09 -  -  -      add hl,bc
 2944 D1:CE52 ED 27 -  -      ld  hl,(hl)
 2945 D1:CE54 06 00 -  -      ld  b,0
 2946 D1:CE56 4F -  -  -      ld  c,a
 2947 D1:CE57 09 -  -  -      add hl,bc
 2948 D1:CE58 ED 27 -  -      ld  hl,(hl)
 2949 D1:CE5A 52 DD 2F 05     ld.s (ix+REGPC),hl
 2950 D1:CE5E C3 E5 B6 D1     jp  i6502FirstLoad
 2951 D1:CE62 -  -  -  -  inst6502_jmp_indir_splitRead:
 2952 D1:CE62 09 -  -  -      add hl,bc
 2953 D1:CE63 ED 27 -  -      ld  hl,(hl)
 2954 D1:CE65 7E -  -  -      ld  a,(hl)  ;high byte
 2955 D1:CE66 01 FF 00 00     ld  bc,255
 2956 D1:CE6A 09 -  -  -      add hl,bc
 2957 D1:CE6B 4E -  -  -      ld  c,(hl)  ;low byte
 2958 D1:CE6C 47 -  -  -      ld  b,a
 2959 D1:CE6D 52 DD 0F 05     ld.s (ix+REGPC),bc
 2960 D1:CE71 C3 E5 B6 D1     jp  i6502FirstLoad
 2961 D1:CE75 -  -  -  -  
 2962 D1:CE75 -  -  -  -  
 2963 D1:CE75 -  -  -  -  
 2964 D1:CE75 -  -  -  -  
 2965 D1:CE75 -  -  -  -  
 2966 D1:CE75 -  -  -  -  ;absolute	JSR oper	20	3	6  
 2967 D1:CE75 -  -  -  -  inst6502_jsr:
 2968 D1:CE75 DD 56 06 -      ld  d,(ix+REGPC+1)
 2969 D1:CE78 4E -  -  -      ld  c,(hl)
 2970 D1:CE79 23 -  -  -      inc hl
 2971 D1:CE7A 1C -  -  -      inc e
 2972 D1:CE7B 20 10 -  -      jr  nz,+_
 2973 D1:CE7D 14 -  -  -      inc d
 2974 D1:CE7E 7A -  -  -      ld  a,d
 2975 D1:CE7F 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2976 D1:CE81 ED 5C -  -      mlt de
 2977 D1:CE83 21 00 40 D0     ld  hl,PAGETABLE
 2978 D1:CE87 19 -  -  -      add hl,de
 2979 D1:CE88 ED 27 -  -      ld  hl,(hl)
 2980 D1:CE8A 57 -  -  -      ld  d,a
 2981 D1:CE8B 1E 00 -  -      ld  e,0
 2982 D1:CE8D 46 -  -  -  _:  ld  b,(hl)
 2983 D1:CE8E -  -  -  -      ;push de to 6502stack
 2984 D1:CE8E 21 00 39 D0     ld  hl,STACKBASE
 2985 D1:CE92 DD 6E 03 -      ld  l,(ix+REGSP)
 2986 D1:CE95 72 -  -  -      ld  (hl),d
 2987 D1:CE96 2D -  -  -      dec l
 2988 D1:CE97 73 -  -  -      ld  (hl),e
 2989 D1:CE98 2D -  -  -      dec l
 2990 D1:CE99 DD 75 03 -      ld  (ix+REGSP),l
 2991 D1:CE9C 52 DD 0F 05     ld.s (ix+REGPC),bc
 2992 D1:CEA0 ED 33 06 -      ADDCYC(6)
 2993 D1:CEA3 C3 E5 B6 D1     jp  i6502FirstLoad
 2994 D1:CEA7 -  -  -  -  
 2995 D1:CEA7 -  -  -  -  ;implied	RTS	60	1	6
 2996 D1:CEA7 -  -  -  -  inst6502_rts:
 2997 D1:CEA7 21 00 39 D0     ld  hl,STACKBASE
 2998 D1:CEAB DD 6E 03 -      ld  l,(ix+REGSP)
 2999 D1:CEAE 2C -  -  -      inc l
 3000 D1:CEAF 5E -  -  -      ld  e,(hl)
 3001 D1:CEB0 2C -  -  -      inc l
 3002 D1:CEB1 56 -  -  -      ld  d,(hl)
 3003 D1:CEB2 DD 75 03 -      ld  (ix+REGSP),l
 3004 D1:CEB5 13 -  -  -      inc de
 3005 D1:CEB6 52 DD 1F 05     ld.s (ix+REGPC),de
 3006 D1:CEBA ED 33 06 -      ADDCYC(6)
 3007 D1:CEBD C3 E5 B6 D1     jp  i6502FirstLoad
 3008 D1:CEC1 -  -  -  -  
 3009 D1:CEC1 -  -  -  -  
 3010 D1:CEC1 -  -  -  -  ;-----------------------------------------------------------------------------
 3011 D1:CEC1 -  -  -  -  ;-----------------------------------------------------------------------------
 3012 D1:CEC1 -  -  -  -  ;-----------------------------------------------------------------------------
 3013 D1:CEC1 -  -  -  -  ;Instructions by type: Miscellaneous
 3014 D1:CEC1 -  -  -  -  ;BIT - Test Bits in Memory with Accumulator
 3015 D1:CEC1 -  -  -  -  ;
 3016 D1:CEC1 -  -  -  -  ;bits 7 and 6 of operand are transfered to bit 7 and 6 of SR (N,V);
 3017 D1:CEC1 -  -  -  -  ;the zero-flag is set according to the result of the operand AND
 3018 D1:CEC1 -  -  -  -  ;the accumulator (set, if the result is zero, unset otherwise).
 3019 D1:CEC1 -  -  -  -  ;This allows a quick check of a few bits at once without affecting
 3020 D1:CEC1 -  -  -  -  ;any of the registers, other than the status register (SR).
 3021 D1:CEC1 -  -  -  -  
 3022 D1:CEC1 -  -  -  -  ;A AND M -> Z, M7 -> N, M6 -> V             N	Z	C	I	D	V
 3023 D1:CEC1 -  -  -  -  ;                                           M7	+	-	-	-	M6
 3024 D1:CEC1 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 3025 D1:CEC1 -  -  -  -  ;zeropage	BIT oper	24	2	3  
 3026 D1:CEC1 -  -  -  -  inst6502_bit_zp:
 3027 D1:CEC1 ED 33 03 -      ADDCYC(3)
 3028 D1:CEC4 7E -  -  -      ld  a,(hl)
 3029 D1:CEC5 01 00 38 D0     ld  bc,ZEROPAGE
 3030 D1:CEC9 81 -  -  -      add a,c
 3031 D1:CECA 4F -  -  -      ld  c,a
 3032 D1:CECB 0A -  -  -      ld  a,(bc)
 3033 D1:CECC 4F -  -  -      ld  c,a
 3034 D1:CECD DD A6 00 -  _:  and a,(ix+REGA)
 3035 D1:CED0 79 -  -  -      ld  a,c     ;discard result, get bits from OPERANDs
 3036 D1:CED1 CB 8F -  -      res SF_ZERO,a
 3037 D1:CED3 20 02 -  -      jr  nz,$+4
 3038 D1:CED5 CB CF -  -      set SF_ZERO,a
 3039 D1:CED7 DD 46 04 -      ld  b,(ix+REGSR)    ;keep bits in flag other than NZ and V
 3040 D1:CEDA A8 -  -  -      xor a,b
 3041 D1:CEDB E6 C2 -  -      and a,%11000010     ;1=keepA, 0=discardA,keepB
 3042 D1:CEDD A8 -  -  -      xor a,b
 3043 D1:CEDE DD 77 04 -      ld  (ix+REGSR),a
 3044 D1:CEE1 C3 FB B6 D1     jp  i6502NextLoad
 3045 D1:CEE5 -  -  -  -  
 3046 D1:CEE5 -  -  -  -  ;absolute	BIT oper	2C	3	4  
 3047 D1:CEE5 -  -  -  -  inst6502_bit_abs:
 3048 D1:CEE5 ED 33 04 -      ADDCYC(4)
 3049 D1:CEE8 CD AA B7 D1     call subroutine6502_abs_split_start
 3050 D1:CEEC E5 -  -  -      push hl
 3051 D1:CEED 50 -  -  -          ld  d,b
 3052 D1:CEEE 79 -  -  -          ld  a,c
 3053 D1:CEEF 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3054 D1:CEF1 ED 4C -  -          mlt bc
 3055 D1:CEF3 21 00 40 D0         ld  hl,PAGETABLE
 3056 D1:CEF7 09 -  -  -          add hl,bc
 3057 D1:CEF8 ED 27 -  -          ld  hl,(hl)
 3058 D1:CEFA 06 00 -  -          ld  b,0
 3059 D1:CEFC 4F -  -  -          ld  c,a
 3060 D1:CEFD 09 -  -  -          add hl,bc   ;full address
 3061 D1:CEFE CD 7D AE D1         READ_ACCESS
 3062 D1:CF02 4F -  -  -          ld  c,a
 3063 D1:CF03 E1 -  -  -      pop hl
 3064 D1:CF04 18 C7 -  -      jr  -_    
 3065 D1:CF06 -  -  -  -  
 3066 D1:CF06 -  -  -  -  ;NOP - No Operation
 3067 D1:CF06 -  -  -  -  ;implied	NOP	EA	1	2  
 3068 D1:CF06 -  -  -  -  inst6502_nop:
 3069 D1:CF06 ED 33 02 -      ADDCYC(2)
 3070 D1:CF09 C3 14 B7 D1     jp  i6502FinishLoad
 3071 D1:CF0D -  -  -  -  
 3072 D1:CF0D -  -  -  -  
 3073 D1:CF0D -  -  -  -  
 3074 D1:CF0D -  -  -  -  ;##############################################################################
 3075 D1:CF0D -  -  -  -  ;##############################################################################
 3076 D1:CF0D -  -  -  -  ;##############################################################################
 3077 D1:CF0D -  -  -  -  ;##-----#-#####-#####-----##---###---##-########-----#--##-##---#-----#----####
 3078 D1:CF0D -  -  -  -  ;####-###-#####-#####-#####-#####-###-#-##########-###--##-#-######-###-###-###
 3079 D1:CF0D -  -  -  -  ;####-###-#####-#####---###-##--#-----#-##########-###-#-#-##---###-###-----###
 3080 D1:CF0D -  -  -  -  ;####-###-#####-#####-#####-###-#-###-#-##########-###-##--#####-##-###-##-####
 3081 D1:CF0D -  -  -  -  ;##-----#-----#-----#-----##----#-###-#-----####-----#-##--#----###-###-###-#-#
 3082 D1:CF0D -  -  -  -  ;##############################################################################
 3083 D1:CF0D -  -  -  -  ;##############################################################################
 3084 D1:CF0D -  -  -  -  ;##############################################################################
 3085 D1:CF0D -  -  -  -  ;Instructions by type: Illegal Instructions
 3086 D1:CF0D -  -  -  -  
 3087 D1:CF0D -  -  -  -  ;NOP - No operations. All the no-operations. Even the ones that are linked
 3088 D1:CF0D -  -  -  -  ;to the machinery that operates an addressing mode, but does nothing with it.
 3089 D1:CF0D -  -  -  -  ;A whole lotta nothing.
 3090 D1:CF0D -  -  -  -  
 3091 D1:CF0D -  -  -  -  ;Bytes:1, Cycles:2, Opcodes: 1A, 3A, 5A, 7A, DA, FA
 3092 D1:CF0D -  -  -  -  inst6502_nop_implied:
 3093 D1:CF0D ED 33 02 -      ADDCYC(2)
 3094 D1:CF10 C3 14 B7 D1     jp  i6502FinishLoad
 3095 D1:CF14 -  -  -  -  
 3096 D1:CF14 -  -  -  -  ;Bytes:2, Cycles:2, Opcodes: 80, 82, 89, C2, E2
 3097 D1:CF14 -  -  -  -  inst6502_nop_imm:
 3098 D1:CF14 ED 33 02 -      ADDCYC(2)
 3099 D1:CF17 C3 FB B6 D1     jp  i6502NextLoad
 3100 D1:CF1B -  -  -  -  
 3101 D1:CF1B -  -  -  -  ;Bytes:2, Cycles:3, Opcodes: 04, 44, 64
 3102 D1:CF1B -  -  -  -  inst6502_nop_zp:
 3103 D1:CF1B ED 33 03 -      ADDCYC(3)
 3104 D1:CF1E C3 FB B6 D1     jp  i6502NextLoad
 3105 D1:CF22 -  -  -  -  
 3106 D1:CF22 -  -  -  -  ;Bytes:2, Cycles:4, Opcodes: 14, 34, 54, 74, D4, F4
 3107 D1:CF22 -  -  -  -  inst6502_nop_zpx:
 3108 D1:CF22 ED 33 04 -      ADDCYC(4)
 3109 D1:CF25 C3 FB B6 D1     jp  i6502NextLoad
 3110 D1:CF29 -  -  -  -  
 3111 D1:CF29 -  -  -  -  ;Bytes:3, Cycles:4, Opcode: 0C
 3112 D1:CF29 -  -  -  -  inst6502_nop_abs:
 3113 D1:CF29 ED 33 04 -      ADDCYC(4)
 3114 D1:CF2C CD AA B7 D1     call subroutine6502_abs_split_start
 3115 D1:CF30 E5 -  -  -      push hl
 3116 D1:CF31 CD 7D AE D1         READ_ACCESS
 3117 D1:CF35 E1 -  -  -      pop hl
 3118 D1:CF36 C3 FB B6 D1     jp  i6502NextLoad
 3119 D1:CF3A -  -  -  -  
 3120 D1:CF3A -  -  -  -  ;Note: This thing latches all over the place but does nothing. All these
 3121 D1:CF3A -  -  -  -  ;READ_ACCESS thingies are in case the ROM wants to clear PPU flags or something
 3122 D1:CF3A -  -  -  -  ;using these instructions. But the one below is noted to do the touchy-feelies
 3123 D1:CF3A -  -  -  -  ;at ABS and (ABS+X)&0xFF
 3124 D1:CF3A -  -  -  -  ;Bytes:3, Cycles:4*, Opcodes: 1C, 3C, 5C, 7C, DC, FC
 3125 D1:CF3A -  -  -  -  inst6502_nop_absx:
 3126 D1:CF3A ED 33 04 -      ADDCYC(4)
 3127 D1:CF3D CD CB B7 D1     PUSH_ABSXSPLIT
 3128 D1:CF41 CD 7D AE D1         READ_ACCESS
 3129 D1:CF45 E1 -  -  -      pop hl
 3130 D1:CF46 C3 FB B6 D1     jp  i6502NextLoad
 3131 D1:CF4A -  -  -  -  
 3132 D1:CF4A -  -  -  -  ;-----------------------------------------------------------------------------
 3133 D1:CF4A -  -  -  -  ;ALR (ASR) - AND oper + LSR
 3134 D1:CF4A -  -  -  -  ;Affects CZN
 3135 D1:CF4A -  -  -  -  
 3136 D1:CF4A -  -  -  -  ;immediate	ALR #oper	4B	2	2 
 3137 D1:CF4A -  -  -  -  inst6502_alr_imm:
 3138 D1:CF4A ED 33 02 -      ADDCYC(2)
 3139 D1:CF4D DD 7E 00 -      ld  a,(ix+REGA)
 3140 D1:CF50 A6 -  -  -      and a,(hl)
 3141 D1:CF51 CB 3F -  -      srl a   ;Must do it this way. A-optimized instr do not affect Z
 3142 D1:CF53 DD 77 00 -      ld  (ix+REGA),a
 3143 D1:CF56 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3144 D1:CF70 C3 FB B6 D1     jp  i6502NextLoad
 3145 D1:CF74 -  -  -  -  
 3146 D1:CF74 -  -  -  -  ;-----------------------------------------------------------------------------
 3147 D1:CF74 -  -  -  -  
 3148 D1:CF74 -  -  -  -  ;ANC [ANC (ANC2)] - AND oper + set Carry as if ASL [ROL]
 3149 D1:CF74 -  -  -  -  
 3150 D1:CF74 -  -  -  -  ;immediate	ANC #oper	0B	2	2 
 3151 D1:CF74 -  -  -  -  ;immediate	ANC #oper	2B	2	2
 3152 D1:CF74 -  -  -  -  instr6502_anc_imm:
 3153 D1:CF74 -  -  -  -  instr6502_anc2_imm:
 3154 D1:CF74 ED 33 02 -      ADDCYC(2)
 3155 D1:CF77 DD 7E 00 -      ld  a,(ix+REGA)
 3156 D1:CF7A A6 -  -  -      and a,(hl)
 3157 D1:CF7B DD 77 00 -      ld  (ix+REGA),a
 3158 D1:CF7E CB 07 -  -      rlc a
 3159 D1:CF80 DD 7E 04 -      ld  a,(ix+REGSR)
 3160 D1:CF83 -  -  -  -      ;A small optimiztion here, letting us merge OPRFLG_C and OPRFLG_N
 3161 D1:CF83 CB 87 -  -      res SF_CARRY,a
 3162 D1:CF85 CB BF -  -      res SF_NEG,a
 3163 D1:CF87 30 04 -  -      jr  nc,+_
 3164 D1:CF89 CB C7 -  -      set SF_CARRY,a
 3165 D1:CF8B CB FF -  -      set SF_NEG,a
 3166 D1:CF8D CB 8F -  -  _:  res SF_ZERO,a
 3167 D1:CF8F 20 02 -  -      jr  nz,$+4
 3168 D1:CF91 CB CF -  -      set SF_ZERO,a
 3169 D1:CF93 DD 77 04 -      ld  (ix+REGSR),a
 3170 D1:CF96 C3 FB B6 D1     jp  i6502NextLoad
 3171 D1:CF9A -  -  -  -  
 3172 D1:CF9A -  -  -  -  ;-----------------------------------------------------------------------------
 3173 D1:CF9A -  -  -  -  
 3174 D1:CF9A -  -  -  -  ;ANE (XAA) - (A OR ??) AND X AND oper -> A
 3175 D1:CF9A -  -  -  -  ;immediate	ANE #oper	8B	2	2  	††
 3176 D1:CF9A -  -  -  -  instr6502_ane_imm:
 3177 D1:CF9A ED 33 02 -      ADDCYC(2)
 3178 D1:CF9D ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3179 D1:CF9F DD B6 00 -      or  a,(ix+REGA)
 3180 D1:CFA2 DD A6 01 -      and a,(ix+REGX)
 3181 D1:CFA5 A6 -  -  -      and a,(hl)
 3182 D1:CFA6 DD 77 00 -      ld  (ix+REGA),a
 3183 D1:CFA9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3184 D1:CFBD C3 FB B6 D1     jp  i6502NextLoad
 3185 D1:CFC1 -  -  -  -  
 3186 D1:CFC1 -  -  -  -  ;-----------------------------------------------------------------------------
 3187 D1:CFC1 -  -  -  -  
 3188 D1:CFC1 -  -  -  -  
 3189 D1:CFC1 -  -  -  -  ;ARR - AND OPER + ROR
 3190 D1:CFC1 -  -  -  -  ;Something hinky is going on with the flags. "This operation involves the adder"
 3191 D1:CFC1 -  -  -  -  ;I need to get a better handle over what that might be.
 3192 D1:CFC1 -  -  -  -  ;CVZN flags affected.
 3193 D1:CFC1 -  -  -  -  ;
 3194 D1:CFC1 -  -  -  -  ;Primary sources reads:
 3195 D1:CFC1 -  -  -  -  ;----------------------
 3196 D1:CFC1 -  -  -  -  ;This operation involves the adder:
 3197 D1:CFC1 -  -  -  -  ;V-flag is set according to (A AND oper) + oper
 3198 D1:CFC1 -  -  -  -  ;The carry is not set, but bit 7 (sign) is exchanged with the carry
 3199 D1:CFC1 -  -  -  -  ;A AND oper, C -> [76543210] -> C
 3200 D1:CFC1 -  -  -  -  ;
 3201 D1:CFC1 -  -  -  -  ;Secondary source reads:
 3202 D1:CFC1 -  -  -  -  ;-----------------------
 3203 D1:CFC1 -  -  -  -  ;Similar to AND #i then ROR A, except sets the flags differently. 
 3204 D1:CFC1 -  -  -  -  ;N and Z are normal, but C is bit 6 and V is bit 6 xor bit 5. 
 3205 D1:CFC1 -  -  -  -  ;A fast way to perform signed division by 4 is: CMP #$80; ARR #$FF; ROR. 
 3206 D1:CFC1 -  -  -  -  ;This can be extended to larger powers of two.
 3207 D1:CFC1 -  -  -  -  
 3208 D1:CFC1 -  -  -  -  ;immediate	ARR #oper	6B	2	2  
 3209 D1:CFC1 -  -  -  -  instr6502_arr_imm:
 3210 D1:CFC1 ED 33 02 -      ADDCYC(2)
 3211 D1:CFC4 DD 7E 00 -      ld  a,(ix+REGA)
 3212 D1:CFC7 A6 -  -  -      and a,(hl)
 3213 D1:CFC8 47 -  -  -      ld  b,a
 3214 D1:CFC9 DD 7E 04 -      ld  a,(ix+REGSR)
 3215 D1:CFCC 4F -  -  -      ld  c,a
 3216 D1:CFCD 0F -  -  -      rrca    ;extract carry. This carry will go into sign bit of result
 3217 D1:CFCE CB B9 -  -      res SF_NEG,c
 3218 D1:CFD0 30 02 -  -      jr  nc,$+4
 3219 D1:CFD2 CB F9 -  -      set SF_NEG,c
 3220 D1:CFD4 CB 18 -  -      rr b
 3221 D1:CFD6 CB 89 -  -      res SF_ZERO,c
 3222 D1:CFD8 20 02 -  -      jr  nz,$+4
 3223 D1:CFDA CB C9 -  -      set SF_ZERO,c
 3224 D1:CFDC DD 70 00 -      ld  (ix+REGA),b
 3225 D1:CFDF 78 -  -  -      ld  a,b
 3226 D1:CFE0 E6 40 -  -      and a,%01000000
 3227 D1:CFE2 CB 81 -  -      res SF_CARRY,c
 3228 D1:CFE4 28 02 -  -      jr  z,$+4
 3229 D1:CFE6 CB C1 -  -      set SF_CARRY,c
 3230 D1:CFE8 0F -  -  -      rrca
 3231 D1:CFE9 EE 20 -  -      xor a,%00100000
 3232 D1:CFEB E6 20 -  -      and a,%00100000
 3233 D1:CFED CB B1 -  -      res SF_OVER,c
 3234 D1:CFEF 28 02 -  -      jr  z,$+4
 3235 D1:CFF1 CB F1 -  -      set SF_OVER,c
 3236 D1:CFF3 DD 71 04 -      ld  (ix+REGSR),c
 3237 D1:CFF6 -  -  -  -      ;TODO: Figure out a more efficient way to emulate this instruction.
 3238 D1:CFF6 C3 FB B6 D1     jp  i6502NextLoad
 3239 D1:CFFA -  -  -  -  
 3240 D1:CFFA -  -  -  -  ;-----------------------------------------------------------------------------
 3241 D1:CFFA -  -  -  -  ;DCP (DCM) - DEC oper + CMP oper
 3242 D1:CFFA -  -  -  -  ;M-1->M, A-M. Affects CZN
 3243 D1:CFFA -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3244 D1:CFFA -  -  -  -  
 3245 D1:CFFA -  -  -  -  ;zeropage	DCP oper	C7	2	5  	
 3246 D1:CFFA -  -  -  -  inst6502_dcp_zp:
 3247 D1:CFFA ED 33 05 -      ADDCYC(5)
 3248 D1:CFFD 7E -  -  -      ld  a,(hl)
 3249 D1:CFFE 01 00 38 D0     ld  bc,ZEROPAGE
 3250 D1:D002 81 -  -  -      add a,c
 3251 D1:D003 4F -  -  -      ld  c,a
 3252 D1:D004 0A -  -  -      ld  a,(bc)
 3253 D1:D005 3D -  -  -      dec a
 3254 D1:D006 02 -  -  -      ld  (bc),a
 3255 D1:D007 47 -  -  -      ld  b,a
 3256 D1:D008 C3 A0 B8 D1     jp  subroutine6502_cmp_combined_end
 3257 D1:D00C -  -  -  -  
 3258 D1:D00C -  -  -  -  ;zeropage,X	DCP oper,X	D7	2	6  	
 3259 D1:D00C -  -  -  -  inst6520_dcp_zpx:
 3260 D1:D00C ED 33 06 -      ADDCYC(6)
 3261 D1:D00F 7E -  -  -      ld  a,(hl)
 3262 D1:D010 01 00 38 D0     ld  bc,ZEROPAGE
 3263 D1:D014 81 -  -  -      add a,c
 3264 D1:D015 DD 86 01 -      add a,(ix+REGX)
 3265 D1:D018 4F -  -  -      ld  c,a
 3266 D1:D019 0A -  -  -      ld  a,(bc)
 3267 D1:D01A 3D -  -  -      dec a
 3268 D1:D01B 02 -  -  -      ld  (bc),a
 3269 D1:D01C 47 -  -  -      ld  b,a
 3270 D1:D01D C3 A0 B8 D1     jp  subroutine6502_cmp_combined_end
 3271 D1:D021 -  -  -  -  
 3272 D1:D021 -  -  -  -  ;absolute	DCP oper	CF	3	6  	
 3273 D1:D021 -  -  -  -  inst6502_dcp_abs:
 3274 D1:D021 ED 33 06 -      ADDCYC(6)
 3275 D1:D024 CD AA B7 D1     call subroutine6502_abs_split_start
 3276 D1:D028 E5 -  -  -      push hl
 3277 D1:D029 50 -  -  -          ld  d,b
 3278 D1:D02A 79 -  -  -          ld  a,c
 3279 D1:D02B 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3280 D1:D02D ED 4C -  -          mlt bc
 3281 D1:D02F 21 00 40 D0         ld  hl,PAGETABLE
 3282 D1:D033 09 -  -  -          add hl,bc
 3283 D1:D034 ED 27 -  -          ld  hl,(hl)
 3284 D1:D036 06 00 -  -          ld  b,0
 3285 D1:D038 4F -  -  -          ld  c,a
 3286 D1:D039 09 -  -  -          add hl,bc   ;full address
 3287 D1:D03A CD 7D AE D1         READ_ACCESS
 3288 D1:D03E 3D -  -  -          dec a
 3289 D1:D03F 47 -  -  -          ld b,a
 3290 D1:D040 C5 -  -  -          push bc
 3291 D1:D041 CD 20 AF D1             WRITE_ACCESS
 3292 D1:D045 C1 -  -  -          pop bc
 3293 D1:D046 E1 -  -  -      pop hl
 3294 D1:D047 C3 A0 B8 D1     jp  subroutine6502_cmp_combined_end
 3295 D1:D04B -  -  -  -  
 3296 D1:D04B -  -  -  -  ;absolut,X	DCP oper,X	DF	3	7  	
 3297 D1:D04B -  -  -  -  inst6502_dcp_absx:
 3298 D1:D04B ED 33 07 -      ADDCYC(7)
 3299 D1:D04E CD 07 B8 D1     PUSH_ABSXSPLIT_NODEP
 3300 D1:D052 CD 7D AE D1         READ_ACCESS
 3301 D1:D056 3D -  -  -          dec a
 3302 D1:D057 47 -  -  -          ld  b,a
 3303 D1:D058 C5 -  -  -          push bc
 3304 D1:D059 CD 20 AF D1             WRITE_ACCESS
 3305 D1:D05D C1 -  -  -          pop bc
 3306 D1:D05E E1 -  -  -      pop hl
 3307 D1:D05F C3 A0 B8 D1     jp  subroutine6502_cmp_combined_end
 3308 D1:D063 -  -  -  -  
 3309 D1:D063 -  -  -  -  ;absolut,Y	DCP oper,Y	DB	3	7  	
 3310 D1:D063 -  -  -  -  inst6502_dcp_absy:
 3311 D1:D063 ED 33 07 -      ADDCYC(7)
 3312 D1:D066 CD 02 B8 D1     PUSH_ABSYSPLIT_NODEP
 3313 D1:D06A CD 7D AE D1         READ_ACCESS
 3314 D1:D06E 3D -  -  -          dec a
 3315 D1:D06F 47 -  -  -          ld  b,a
 3316 D1:D070 C5 -  -  -          push bc
 3317 D1:D071 CD 20 AF D1             WRITE_ACCESS
 3318 D1:D075 C1 -  -  -          pop bc
 3319 D1:D076 E1 -  -  -      pop hl
 3320 D1:D077 C3 A0 B8 D1     jp  subroutine6502_cmp_combined_end
 3321 D1:D07B -  -  -  -  
 3322 D1:D07B -  -  -  -  ;(indirect,X)	DCP (oper,X)	C3	2	8  	
 3323 D1:D07B -  -  -  -  inst6502_dcp_indx:
 3324 D1:D07B ED 33 08 -      ADDCYC(8)
 3325 D1:D07E E5 -  -  -      push hl
 3326 D1:D07F 7E -  -  -          ld  a,(hl)
 3327 D1:D080 21 00 38 D0         ld  hl,ZEROPAGE
 3328 D1:D084 85 -  -  -          add a,L
 3329 D1:D085 DD 86 01 -          add a,(ix+REGX)
 3330 D1:D088 6F -  -  -          ld  L,a
 3331 D1:D089 7E -  -  -          ld  a,(hl)
 3332 D1:D08A 2C -  -  -          inc L
 3333 D1:D08B 56 -  -  -          ld  d,(hl)
 3334 D1:D08C 42 -  -  -          ld  b,d
 3335 D1:D08D 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3336 D1:D08F ED 4C -  -          mlt bc
 3337 D1:D091 21 00 40 D0         ld  hl,PAGETABLE
 3338 D1:D095 09 -  -  -          add hl,bc
 3339 D1:D096 ED 27 -  -          ld  hl,(hl)
 3340 D1:D098 06 00 -  -          ld  b,0
 3341 D1:D09A 4F -  -  -          ld  c,a
 3342 D1:D09B 09 -  -  -          add hl,bc
 3343 D1:D09C CD 7D AE D1         READ_ACCESS
 3344 D1:D0A0 3D -  -  -          dec a
 3345 D1:D0A1 47 -  -  -          ld  b,a
 3346 D1:D0A2 C5 -  -  -          push bc
 3347 D1:D0A3 CD 20 AF D1             WRITE_ACCESS
 3348 D1:D0A7 C1 -  -  -          pop bc
 3349 D1:D0A8 E1 -  -  -      pop hl
 3350 D1:D0A9 C3 A0 B8 D1     jp  subroutine6502_cmp_combined_end
 3351 D1:D0AD -  -  -  -  
 3352 D1:D0AD -  -  -  -  ;(indirect),Y	DCP (oper),Y	D3	2	8  
 3353 D1:D0AD -  -  -  -  inst6502_dcp_indy:
 3354 D1:D0AD ED 33 08 -      ADDCYC(8)
 3355 D1:D0B0 E5 -  -  -      push hl
 3356 D1:D0B1 7E -  -  -          ld  a,(hl)
 3357 D1:D0B2 21 00 38 D0         ld  hl,ZEROPAGE
 3358 D1:D0B6 85 -  -  -          add a,L
 3359 D1:D0B7 6F -  -  -          ld  L,a
 3360 D1:D0B8 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3361 D1:D0B9 2C -  -  -          inc L
 3362 D1:D0BA DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3363 D1:D0BD 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3364 D1:D0BE 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3365 D1:D0C0 24 -  -  -          inc h
 3366 D1:D0C1 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3367 D1:D0C2 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3368 D1:D0C4 ED 6C -  -          mlt hl          ;23.
 3369 D1:D0C6 01 00 40 D0         ld  bc,PAGETABLE
 3370 D1:D0CA 09 -  -  -          add hl,bc
 3371 D1:D0CB ED 27 -  -          ld  hl,(hl)     ;address get.
 3372 D1:D0CD 01 00 00 00         ld  bc,0
 3373 D1:D0D1 4F -  -  -          ld  c,a
 3374 D1:D0D2 09 -  -  -          add hl,bc       ;Full address get.
 3375 D1:D0D3 CD 7D AE D1         READ_ACCESS
 3376 D1:D0D7 3D -  -  -          dec a
 3377 D1:D0D8 47 -  -  -          ld  b,a
 3378 D1:D0D9 C5 -  -  -          push bc
 3379 D1:D0DA CD 20 AF D1             WRITE_ACCESS
 3380 D1:D0DE C1 -  -  -          pop bc
 3381 D1:D0DF E1 -  -  -      pop hl
 3382 D1:D0E0 C3 A0 B8 D1     jp  subroutine6502_cmp_combined_end
 3383 D1:D0E4 -  -  -  -  
 3384 D1:D0E4 -  -  -  -  ;-----------------------------------------------------------------------------
 3385 D1:D0E4 -  -  -  -  ;ISC (ISB, INS) - INC oper + SBC oper
 3386 D1:D0E4 -  -  -  -  ;M+1->M, A-M-not(C)->A, affects VCZN
 3387 D1:D0E4 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3388 D1:D0E4 -  -  -  -  
 3389 D1:D0E4 -  -  -  -  
 3390 D1:D0E4 -  -  -  -  
 3391 D1:D0E4 -  -  -  -  ;zeropage	ISC oper	E7	2	5  	
 3392 D1:D0E4 -  -  -  -  inst6502_isc_zp:
 3393 D1:D0E4 ED 33 05 -      ADDCYC(5)
 3394 D1:D0E7 7E -  -  -      ld  a,(hl)
 3395 D1:D0E8 01 00 38 D0     ld  bc,ZEROPAGE
 3396 D1:D0EC 81 -  -  -      add a,c
 3397 D1:D0ED 4F -  -  -      ld  c,a
 3398 D1:D0EE 0A -  -  -      ld  a,(bc)
 3399 D1:D0EF 3C -  -  -      inc a
 3400 D1:D0F0 02 -  -  -      ld  (bc),a
 3401 D1:D0F1 4F -  -  -      ld  c,a
 3402 D1:D0F2 C3 6D B8 D1     jp  subroutine6502_sbc_combined_end
 3403 D1:D0F6 -  -  -  -  
 3404 D1:D0F6 -  -  -  -  ;zeropage,X	ISC oper,X	F7	2	6  
 3405 D1:D0F6 -  -  -  -  inst6520_isc_zpx:
 3406 D1:D0F6 ED 33 06 -      ADDCYC(6)
 3407 D1:D0F9 7E -  -  -      ld  a,(hl)
 3408 D1:D0FA 01 00 38 D0     ld  bc,ZEROPAGE
 3409 D1:D0FE 81 -  -  -      add a,c
 3410 D1:D0FF DD 86 01 -      add a,(ix+REGX)
 3411 D1:D102 4F -  -  -      ld  c,a
 3412 D1:D103 0A -  -  -      ld  a,(bc)
 3413 D1:D104 3C -  -  -      inc a
 3414 D1:D105 02 -  -  -      ld  (bc),a
 3415 D1:D106 4F -  -  -      ld  c,a
 3416 D1:D107 C3 6D B8 D1     jp  subroutine6502_sbc_combined_end
 3417 D1:D10B -  -  -  -  
 3418 D1:D10B -  -  -  -  ;absolute	ISC oper	EF	3	6  	
 3419 D1:D10B -  -  -  -  inst6502_isc_abs:
 3420 D1:D10B ED 33 06 -      ADDCYC(6)
 3421 D1:D10E CD AA B7 D1     call subroutine6502_abs_split_start
 3422 D1:D112 E5 -  -  -      push hl
 3423 D1:D113 50 -  -  -          ld  d,b
 3424 D1:D114 79 -  -  -          ld  a,c
 3425 D1:D115 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3426 D1:D117 ED 4C -  -          mlt bc
 3427 D1:D119 21 00 40 D0         ld  hl,PAGETABLE
 3428 D1:D11D 09 -  -  -          add hl,bc
 3429 D1:D11E ED 27 -  -          ld  hl,(hl)
 3430 D1:D120 06 00 -  -          ld  b,0
 3431 D1:D122 4F -  -  -          ld  c,a
 3432 D1:D123 09 -  -  -          add hl,bc   ;full address
 3433 D1:D124 CD 7D AE D1         READ_ACCESS
 3434 D1:D128 3C -  -  -          inc a
 3435 D1:D129 47 -  -  -          ld b,a
 3436 D1:D12A 4F -  -  -          ld c,a
 3437 D1:D12B C5 -  -  -          push bc
 3438 D1:D12C CD 20 AF D1             WRITE_ACCESS
 3439 D1:D130 C1 -  -  -          pop bc
 3440 D1:D131 E1 -  -  -      pop hl
 3441 D1:D132 C3 6D B8 D1     jp  subroutine6502_sbc_combined_end
 3442 D1:D136 -  -  -  -  
 3443 D1:D136 -  -  -  -  ;absolut,X	ISC oper,X	FF	3	7  	
 3444 D1:D136 -  -  -  -  inst6502_isc_absx:
 3445 D1:D136 ED 33 07 -      ADDCYC(7)
 3446 D1:D139 CD 07 B8 D1     PUSH_ABSXSPLIT_NODEP
 3447 D1:D13D CD 7D AE D1         READ_ACCESS
 3448 D1:D141 3C -  -  -          inc a
 3449 D1:D142 47 -  -  -          ld  b,a
 3450 D1:D143 4F -  -  -          ld  c,a
 3451 D1:D144 C5 -  -  -          push bc
 3452 D1:D145 CD 20 AF D1             WRITE_ACCESS
 3453 D1:D149 C1 -  -  -          pop bc
 3454 D1:D14A E1 -  -  -      pop hl
 3455 D1:D14B C3 6D B8 D1     jp  subroutine6502_sbc_combined_end
 3456 D1:D14F -  -  -  -  
 3457 D1:D14F -  -  -  -  ;absolut,Y	ISC oper,Y	FB	3	7  	
 3458 D1:D14F -  -  -  -  inst6502_isc_absy:
 3459 D1:D14F ED 33 07 -      ADDCYC(7)
 3460 D1:D152 CD 02 B8 D1     PUSH_ABSYSPLIT_NODEP
 3461 D1:D156 CD 7D AE D1         READ_ACCESS
 3462 D1:D15A 3C -  -  -          inc a
 3463 D1:D15B 47 -  -  -          ld  b,a
 3464 D1:D15C 4F -  -  -          ld  c,a
 3465 D1:D15D C5 -  -  -          push bc
 3466 D1:D15E CD 20 AF D1             WRITE_ACCESS
 3467 D1:D162 C1 -  -  -          pop bc
 3468 D1:D163 E1 -  -  -      pop hl
 3469 D1:D164 C3 6D B8 D1     jp  subroutine6502_sbc_combined_end
 3470 D1:D168 -  -  -  -  
 3471 D1:D168 -  -  -  -  ;(indirect,X)	ISC (oper,X)	E3	2	8  	
 3472 D1:D168 -  -  -  -  inst6502_isc_indx:
 3473 D1:D168 ED 33 08 -      ADDCYC(8)
 3474 D1:D16B E5 -  -  -      push hl
 3475 D1:D16C 7E -  -  -          ld  a,(hl)
 3476 D1:D16D 21 00 38 D0         ld  hl,ZEROPAGE
 3477 D1:D171 85 -  -  -          add a,L
 3478 D1:D172 DD 86 01 -          add a,(ix+REGX)
 3479 D1:D175 6F -  -  -          ld  L,a
 3480 D1:D176 7E -  -  -          ld  a,(hl)
 3481 D1:D177 2C -  -  -          inc L
 3482 D1:D178 56 -  -  -          ld  d,(hl)
 3483 D1:D179 42 -  -  -          ld  b,d
 3484 D1:D17A 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3485 D1:D17C ED 4C -  -          mlt bc
 3486 D1:D17E 21 00 40 D0         ld  hl,PAGETABLE
 3487 D1:D182 09 -  -  -          add hl,bc
 3488 D1:D183 ED 27 -  -          ld  hl,(hl)
 3489 D1:D185 06 00 -  -          ld  b,0
 3490 D1:D187 4F -  -  -          ld  c,a
 3491 D1:D188 09 -  -  -          add hl,bc
 3492 D1:D189 CD 7D AE D1         READ_ACCESS
 3493 D1:D18D 3C -  -  -          inc a
 3494 D1:D18E 47 -  -  -          ld  b,a
 3495 D1:D18F 4F -  -  -          ld  c,a
 3496 D1:D190 C5 -  -  -          push bc
 3497 D1:D191 CD 20 AF D1             WRITE_ACCESS
 3498 D1:D195 C1 -  -  -          pop bc
 3499 D1:D196 E1 -  -  -      pop hl
 3500 D1:D197 C3 6D B8 D1     jp  subroutine6502_sbc_combined_end
 3501 D1:D19B -  -  -  -  
 3502 D1:D19B -  -  -  -  ;(indirect),Y	ISC (oper),Y	F3	2	8  
 3503 D1:D19B -  -  -  -  inst6502_isc_indy:
 3504 D1:D19B ED 33 08 -      ADDCYC(8)
 3505 D1:D19E E5 -  -  -      push hl
 3506 D1:D19F 7E -  -  -          ld  a,(hl)
 3507 D1:D1A0 21 00 38 D0         ld  hl,ZEROPAGE
 3508 D1:D1A4 85 -  -  -          add a,L
 3509 D1:D1A5 6F -  -  -          ld  L,a
 3510 D1:D1A6 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3511 D1:D1A7 2C -  -  -          inc L
 3512 D1:D1A8 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3513 D1:D1AB 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3514 D1:D1AC 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3515 D1:D1AE 24 -  -  -          inc h
 3516 D1:D1AF 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3517 D1:D1B0 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3518 D1:D1B2 ED 6C -  -          mlt hl          ;23.
 3519 D1:D1B4 01 00 40 D0         ld  bc,PAGETABLE
 3520 D1:D1B8 09 -  -  -          add hl,bc
 3521 D1:D1B9 ED 27 -  -          ld  hl,(hl)     ;address get.
 3522 D1:D1BB 01 00 00 00         ld  bc,0
 3523 D1:D1BF 4F -  -  -          ld  c,a
 3524 D1:D1C0 09 -  -  -          add hl,bc       ;Full address get.
 3525 D1:D1C1 CD 7D AE D1         READ_ACCESS
 3526 D1:D1C5 3C -  -  -          inc a
 3527 D1:D1C6 47 -  -  -          ld  b,a
 3528 D1:D1C7 4F -  -  -          ld  c,a
 3529 D1:D1C8 C5 -  -  -          push bc
 3530 D1:D1C9 CD 20 AF D1             WRITE_ACCESS
 3531 D1:D1CD C1 -  -  -          pop bc
 3532 D1:D1CE E1 -  -  -      pop hl
 3533 D1:D1CF C3 6D B8 D1     jp  subroutine6502_sbc_combined_end
 3534 D1:D1D3 -  -  -  -  ;-----------------------------------------------------------------------------
 3535 D1:D1D3 -  -  -  -  ;LAS (LAR) - LDA/TSX oper
 3536 D1:D1D3 -  -  -  -  ;M AND SP -> A, X, SP. Affects ZN
 3537 D1:D1D3 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3538 D1:D1D3 -  -  -  -  ;absolut,Y	LAS oper,Y	BB	3	4* 
 3539 D1:D1D3 -  -  -  -  inst6502_las_absy:
 3540 D1:D1D3 ED 33 04 -      ADDCYC(4)
 3541 D1:D1D6 CD C6 B7 D1     PUSH_ABSYSPLIT
 3542 D1:D1DA CD 7D AE D1         READ_ACCESS
 3543 D1:D1DE E1 -  -  -      pop hl
 3544 D1:D1DF DD A6 03 -      and a,(ix+REGSP)
 3545 D1:D1E2 DD 77 00 -      ld  (ix+REGA),A
 3546 D1:D1E5 DD 77 01 -      ld  (ix+REGX),A
 3547 D1:D1E8 DD 77 03 -      ld  (ix+REGSP),A
 3548 D1:D1EB DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3549 D1:D1FF C3 FB B6 D1     jp i6502NextLoad
 3550 D1:D203 -  -  -  -  
 3551 D1:D203 -  -  -  -  ;-----------------------------------------------------------------------------
 3552 D1:D203 -  -  -  -  ;LAX - LDA oper + LDX oper
 3553 D1:D203 -  -  -  -  ;M -> A -> X. Flags affected: ZN
 3554 D1:D203 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3555 D1:D203 -  -  -  -  ;zeropage	LAX oper	A7	2	3  	
 3556 D1:D203 -  -  -  -  inst6502_lax_zp:
 3557 D1:D203 ED 33 03 -      ADDCYC(3)
 3558 D1:D206 7E -  -  -      ld  a,(hl)
 3559 D1:D207 01 00 38 D0     ld  bc,ZEROPAGE
 3560 D1:D20B 81 -  -  -      add a,c
 3561 D1:D20C 4F -  -  -      ld  c,a
 3562 D1:D20D 0A -  -  -      ld  a,(bc)
 3563 D1:D20E DD 77 00 -      ld  (ix+REGA),a
 3564 D1:D211 DD 77 01 -      ld  (ix+REGX),a
 3565 D1:D214 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3566 D1:D228 C3 FB B6 D1     jp i6502NextLoad
 3567 D1:D22C -  -  -  -  
 3568 D1:D22C -  -  -  -  ;zeropage,Y	LAX oper,Y	B7	2	4  	
 3569 D1:D22C -  -  -  -  inst6502_lax_zpy:
 3570 D1:D22C ED 33 04 -      ADDCYC(4)
 3571 D1:D22F 7E -  -  -      ld  a,(hl)
 3572 D1:D230 01 00 38 D0     ld  bc,ZEROPAGE
 3573 D1:D234 81 -  -  -      add a,c
 3574 D1:D235 DD 86 02 -      add a,(ix+REGY)
 3575 D1:D238 4F -  -  -      ld  c,a
 3576 D1:D239 0A -  -  -      ld  a,(bc)
 3577 D1:D23A DD 77 00 -      ld  (ix+REGA),a
 3578 D1:D23D DD 77 01 -      ld  (ix+REGX),a
 3579 D1:D240 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3580 D1:D254 C3 FB B6 D1     jp i6502NextLoad
 3581 D1:D258 -  -  -  -  
 3582 D1:D258 -  -  -  -  ;absolute	LAX oper	AF	3	4  	
 3583 D1:D258 -  -  -  -  inst6502_lax_abs:
 3584 D1:D258 ED 33 04 -      ADDCYC(4)
 3585 D1:D25B CD AA B7 D1     call subroutine6502_abs_split_start
 3586 D1:D25F E5 -  -  -      push hl
 3587 D1:D260 50 -  -  -          ld  d,b
 3588 D1:D261 79 -  -  -          ld  a,c
 3589 D1:D262 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3590 D1:D264 ED 4C -  -          mlt bc
 3591 D1:D266 21 00 40 D0         ld  hl,PAGETABLE
 3592 D1:D26A 09 -  -  -          add hl,bc
 3593 D1:D26B ED 27 -  -          ld  hl,(hl)
 3594 D1:D26D 06 00 -  -          ld  b,0
 3595 D1:D26F 4F -  -  -          ld  c,a
 3596 D1:D270 09 -  -  -          add hl,bc   ;full address
 3597 D1:D271 CD 7D AE D1         READ_ACCESS
 3598 D1:D275 DD 77 00 -          ld (ix+REGA),a
 3599 D1:D278 DD 77 01 -          ld (ix+REGX),a
 3600 D1:D27B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3601 D1:D28F E1 -  -  -      pop hl
 3602 D1:D290 C3 FB B6 D1     jp i6502NextLoad
 3603 D1:D294 -  -  -  -  
 3604 D1:D294 -  -  -  -  ;absolut,Y	LAX oper,Y	BF	3	4* 	
 3605 D1:D294 -  -  -  -  inst6502_lax_absy:
 3606 D1:D294 ED 33 04 -      ADDCYC(4)
 3607 D1:D297 CD C6 B7 D1     PUSH_ABSYSPLIT
 3608 D1:D29B CD 7D AE D1         READ_ACCESS
 3609 D1:D29F DD 77 00 -          ld (ix+REGA),a
 3610 D1:D2A2 DD 77 01 -          ld (ix+REGX),a
 3611 D1:D2A5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3612 D1:D2B9 E1 -  -  -      pop hl
 3613 D1:D2BA C3 FB B6 D1     jp i6502NextLoad
 3614 D1:D2BE -  -  -  -  
 3615 D1:D2BE -  -  -  -  ;(indirect,X)	LAX (oper,X)	A3	2	6  	
 3616 D1:D2BE -  -  -  -  inst6502_lax_indx:
 3617 D1:D2BE ED 33 06 -      ADDCYC(6)
 3618 D1:D2C1 E5 -  -  -      push hl
 3619 D1:D2C2 7E -  -  -          ld  a,(hl)
 3620 D1:D2C3 21 00 38 D0         ld  hl,ZEROPAGE
 3621 D1:D2C7 85 -  -  -          add a,L
 3622 D1:D2C8 DD 86 01 -          add a,(ix+REGX)
 3623 D1:D2CB 6F -  -  -          ld  L,a
 3624 D1:D2CC 7E -  -  -          ld  a,(hl)
 3625 D1:D2CD 2C -  -  -          inc L
 3626 D1:D2CE 56 -  -  -          ld  d,(hl)
 3627 D1:D2CF 42 -  -  -          ld  b,d
 3628 D1:D2D0 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3629 D1:D2D2 ED 4C -  -          mlt bc
 3630 D1:D2D4 21 00 40 D0         ld  hl,PAGETABLE
 3631 D1:D2D8 09 -  -  -          add hl,bc
 3632 D1:D2D9 ED 27 -  -          ld  hl,(hl)
 3633 D1:D2DB 06 00 -  -          ld  b,0
 3634 D1:D2DD 4F -  -  -          ld  c,a
 3635 D1:D2DE 09 -  -  -          add hl,bc
 3636 D1:D2DF CD 7D AE D1         READ_ACCESS
 3637 D1:D2E3 DD 77 00 -          ld (ix+REGA),a
 3638 D1:D2E6 DD 77 01 -          ld (ix+REGX),a
 3639 D1:D2E9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3640 D1:D2FD E1 -  -  -      pop hl
 3641 D1:D2FE C3 FB B6 D1     jp i6502NextLoad
 3642 D1:D302 -  -  -  -  
 3643 D1:D302 -  -  -  -  ;(indirect),Y	LAX (oper),Y	B3	2	5* 
 3644 D1:D302 -  -  -  -  inst6502_lax_indy:
 3645 D1:D302 ED 33 05 -      ADDCYC(5)
 3646 D1:D305 E5 -  -  -      push hl
 3647 D1:D306 7E -  -  -          ld  a,(hl)
 3648 D1:D307 21 00 38 D0         ld  hl,ZEROPAGE
 3649 D1:D30B 85 -  -  -          add a,L
 3650 D1:D30C 6F -  -  -          ld  L,a
 3651 D1:D30D 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3652 D1:D30E 2C -  -  -          inc L
 3653 D1:D30F DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3654 D1:D312 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3655 D1:D313 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3656 D1:D315 FD 23 -  -          ADDCYC(1)
 3657 D1:D317 24 -  -  -          inc h
 3658 D1:D318 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3659 D1:D319 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3660 D1:D31B ED 6C -  -          mlt hl          ;23.
 3661 D1:D31D 01 00 40 D0         ld  bc,PAGETABLE
 3662 D1:D321 09 -  -  -          add hl,bc
 3663 D1:D322 ED 27 -  -          ld  hl,(hl)     ;address get.
 3664 D1:D324 01 00 00 00         ld  bc,0
 3665 D1:D328 4F -  -  -          ld  c,a
 3666 D1:D329 09 -  -  -          add hl,bc       ;Full address get.
 3667 D1:D32A CD 7D AE D1         READ_ACCESS
 3668 D1:D32E DD 77 00 -          ld  (ix+REGA),a
 3669 D1:D331 DD 77 01 -          ld  (ix+REGX),a
 3670 D1:D334 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3671 D1:D348 E1 -  -  -      pop hl
 3672 D1:D349 C3 FB B6 D1     jp i6502NextLoad
 3673 D1:D34D -  -  -  -  
 3674 D1:D34D -  -  -  -  ;-----------------------------------------------------------------------------
 3675 D1:D34D -  -  -  -  ;LXA (LAX immediate)
 3676 D1:D34D -  -  -  -  ;Store * AND oper in A and X
 3677 D1:D34D -  -  -  -  ;Highly unstable, involves a 'magic' constant, see ANE
 3678 D1:D34D -  -  -  -  ;(A OR CONST) AND oper -> A -> X
 3679 D1:D34D -  -  -  -  ;immediate	LXA #oper	AB	2	2  	††
 3680 D1:D34D -  -  -  -  inst6502_lxa:
 3681 D1:D34D ED 33 02 -      ADDCYC(2)
 3682 D1:D350 ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3683 D1:D352 DD B6 00 -      or  a,(ix+REGA)
 3684 D1:D355 A6 -  -  -      and a,(hl)
 3685 D1:D356 DD 77 00 -      ld  (ix+REGA),a
 3686 D1:D359 DD 77 01 -      ld  (ix+REGX),a
 3687 D1:D35C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3688 D1:D370 C3 FB B6 D1     jp  i6502NextLoad
 3689 D1:D374 -  -  -  -  
 3690 D1:D374 -  -  -  -  ;-----------------------------------------------------------------------------
 3691 D1:D374 -  -  -  -  ;RLA - ROL oper + AND oper
 3692 D1:D374 -  -  -  -  ;M = C <- [76543210] <- C, A AND M -> A. flags CZN
 3693 D1:D374 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3694 D1:D374 -  -  -  -  ;zeropage	RLA oper	27	2	5  	
 3695 D1:D374 -  -  -  -  inst6502_rla_zp:
 3696 D1:D374 ED 33 05 -      ADDCYC(5)
 3697 D1:D377 7E -  -  -      ld  a,(hl)
 3698 D1:D378 01 00 38 D0     ld  bc,ZEROPAGE
 3699 D1:D37C 81 -  -  -      add a,c
 3700 D1:D37D 4F -  -  -      ld  c,a
 3701 D1:D37E DD 7E 04 -      ld  a,(ix+REGSR)
 3702 D1:D381 1F -  -  -      rra
 3703 D1:D382 0A -  -  -      ld  a,(bc)
 3704 D1:D383 17 -  -  -      rla
 3705 D1:D384 02 -  -  -      ld  (bc),a
 3706 D1:D385 -  -  -  -      ;Flag breakdown to optimize for split operation
 3707 D1:D385 DD 46 04 -      ld  b,(ix+REGSR)
 3708 D1:D388 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3709 D1:D38E DD A6 00 -      and a,(ix+REGA)
 3710 D1:D391 DD 77 00 -      ld  (ix+REGA),a
 3711 D1:D394 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3712 D1:D39A 87 -  -  -      add a,a
 3713 D1:D39B CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3714 D1:D3A1 DD 70 04 -      ld  (ix+REGSR),b
 3715 D1:D3A4 C3 FB B6 D1     jp i6502NextLoad
 3716 D1:D3A8 -  -  -  -  
 3717 D1:D3A8 -  -  -  -  ;zeropage,X	RLA oper,X	37	2	6  	
 3718 D1:D3A8 -  -  -  -  inst6502_rla_zpx:
 3719 D1:D3A8 ED 33 06 -      ADDCYC(6)
 3720 D1:D3AB 7E -  -  -      ld  a,(hl)
 3721 D1:D3AC 01 00 38 D0     ld  bc,ZEROPAGE
 3722 D1:D3B0 81 -  -  -      add a,c
 3723 D1:D3B1 DD 86 01 -      add a,(ix+REGX)
 3724 D1:D3B4 4F -  -  -      ld  c,a
 3725 D1:D3B5 DD 7E 04 -      ld  a,(ix+REGSR)
 3726 D1:D3B8 1F -  -  -      rra
 3727 D1:D3B9 0A -  -  -      ld  a,(bc)
 3728 D1:D3BA 17 -  -  -      rla
 3729 D1:D3BB 02 -  -  -      ld  (bc),a
 3730 D1:D3BC -  -  -  -      ;Flag breakdown to optimize for split operation
 3731 D1:D3BC DD 46 04 -      ld  b,(ix+REGSR)
 3732 D1:D3BF CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3733 D1:D3C5 DD A6 00 -      and a,(ix+REGA)
 3734 D1:D3C8 DD 77 00 -      ld  (ix+REGA),a
 3735 D1:D3CB CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3736 D1:D3D1 87 -  -  -      add a,a
 3737 D1:D3D2 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3738 D1:D3D8 DD 70 04 -      ld  (ix+REGSR),b
 3739 D1:D3DB C3 FB B6 D1     jp i6502NextLoad
 3740 D1:D3DF -  -  -  -  
 3741 D1:D3DF -  -  -  -  ;absolute	RLA oper	2F	3	6  	
 3742 D1:D3DF -  -  -  -  inst6502_rla_abs:
 3743 D1:D3DF ED 33 06 -      ADDCYC(6)
 3744 D1:D3E2 CD AA B7 D1     call subroutine6502_abs_split_start
 3745 D1:D3E6 E5 -  -  -      push hl
 3746 D1:D3E7 50 -  -  -          ld  d,b
 3747 D1:D3E8 79 -  -  -          ld  a,c
 3748 D1:D3E9 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3749 D1:D3EB ED 4C -  -          mlt bc
 3750 D1:D3ED 21 00 40 D0         ld  hl,PAGETABLE
 3751 D1:D3F1 09 -  -  -          add hl,bc
 3752 D1:D3F2 ED 27 -  -          ld  hl,(hl)
 3753 D1:D3F4 06 00 -  -          ld  b,0
 3754 D1:D3F6 4F -  -  -          ld  c,a
 3755 D1:D3F7 09 -  -  -          add hl,bc   ;full address
 3756 D1:D3F8 CD 7D AE D1         READ_ACCESS
 3757 D1:D3FC DD 46 04 -          ld  b,(ix+REGSR)
 3758 D1:D3FF CB 18 -  -          rr b
 3759 D1:D401 17 -  -  -          rla
 3760 D1:D402 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3761 D1:D403 -  -  -  -          ;Split oper
 3762 D1:D403 DD 46 04 -          ld  b,(ix+REGSR)
 3763 D1:D406 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3764 D1:D40C DD A6 00 -          and a,(ix+REGA)
 3765 D1:D40F DD 77 00 -          ld  (ix+REGA),a
 3766 D1:D412 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3767 D1:D418 87 -  -  -          add a,a
 3768 D1:D419 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3769 D1:D41F DD 70 04 -          ld  (ix+REGSR),b
 3770 D1:D422 41 -  -  -          ld  b,c
 3771 D1:D423 CD 20 AF D1         WRITE_ACCESS
 3772 D1:D427 E1 -  -  -      pop hl
 3773 D1:D428 C3 FB B6 D1     jp i6502NextLoad
 3774 D1:D42C -  -  -  -  
 3775 D1:D42C -  -  -  -  ;absolut,X	RLA oper,X	3F	3	7  	
 3776 D1:D42C -  -  -  -  inst6502_rla_absx:
 3777 D1:D42C ED 33 07 -      ADDCYC(7)
 3778 D1:D42F CD 07 B8 D1     PUSH_ABSXSPLIT_NODEP
 3779 D1:D433 CD 7D AE D1         READ_ACCESS
 3780 D1:D437 DD 46 04 -          ld  b,(ix+REGSR)
 3781 D1:D43A CB 18 -  -          rr b
 3782 D1:D43C 17 -  -  -          rla
 3783 D1:D43D 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3784 D1:D43E -  -  -  -          ;Split oper
 3785 D1:D43E DD 46 04 -          ld  b,(ix+REGSR)
 3786 D1:D441 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3787 D1:D447 DD A6 00 -          and a,(ix+REGA)
 3788 D1:D44A DD 77 00 -          ld  (ix+REGA),a
 3789 D1:D44D CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3790 D1:D453 87 -  -  -          add a,a
 3791 D1:D454 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3792 D1:D45A DD 70 04 -          ld  (ix+REGSR),b
 3793 D1:D45D 41 -  -  -          ld  b,c
 3794 D1:D45E CD 20 AF D1         WRITE_ACCESS
 3795 D1:D462 E1 -  -  -      pop hl
 3796 D1:D463 C3 FB B6 D1     jp i6502NextLoad
 3797 D1:D467 -  -  -  -  
 3798 D1:D467 -  -  -  -  ;absolut,Y	RLA oper,Y	3B	3	7  	
 3799 D1:D467 -  -  -  -  inst6502_rla_absy:
 3800 D1:D467 ED 33 07 -      ADDCYC(7)
 3801 D1:D46A CD 02 B8 D1     PUSH_ABSYSPLIT_NODEP
 3802 D1:D46E CD 7D AE D1         READ_ACCESS
 3803 D1:D472 DD 46 04 -          ld  b,(ix+REGSR)
 3804 D1:D475 CB 18 -  -          rr b
 3805 D1:D477 17 -  -  -          rla
 3806 D1:D478 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3807 D1:D479 -  -  -  -          ;Split oper
 3808 D1:D479 DD 46 04 -          ld  b,(ix+REGSR)
 3809 D1:D47C CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3810 D1:D482 DD A6 00 -          and a,(ix+REGA)
 3811 D1:D485 DD 77 00 -          ld  (ix+REGA),a
 3812 D1:D488 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3813 D1:D48E 87 -  -  -          add a,a
 3814 D1:D48F CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3815 D1:D495 DD 70 04 -          ld  (ix+REGSR),b
 3816 D1:D498 41 -  -  -          ld  b,c
 3817 D1:D499 CD 20 AF D1         WRITE_ACCESS
 3818 D1:D49D E1 -  -  -      pop hl
 3819 D1:D49E C3 FB B6 D1     jp i6502NextLoad
 3820 D1:D4A2 -  -  -  -  
 3821 D1:D4A2 -  -  -  -  ;(indirect,X)	RLA (oper,X)	23	2	8  	
 3822 D1:D4A2 -  -  -  -  isnt6502_rla_indx:
 3823 D1:D4A2 ED 33 08 -      ADDCYC(8)
 3824 D1:D4A5 E5 -  -  -      push hl
 3825 D1:D4A6 7E -  -  -          ld  a,(hl)
 3826 D1:D4A7 21 00 38 D0         ld  hl,ZEROPAGE
 3827 D1:D4AB 85 -  -  -          add a,L
 3828 D1:D4AC DD 86 01 -          add a,(ix+REGX)
 3829 D1:D4AF 6F -  -  -          ld  L,a
 3830 D1:D4B0 7E -  -  -          ld  a,(hl)
 3831 D1:D4B1 2C -  -  -          inc L
 3832 D1:D4B2 56 -  -  -          ld  d,(hl)
 3833 D1:D4B3 42 -  -  -          ld  b,d
 3834 D1:D4B4 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3835 D1:D4B6 ED 4C -  -          mlt bc
 3836 D1:D4B8 21 00 40 D0         ld  hl,PAGETABLE
 3837 D1:D4BC 09 -  -  -          add hl,bc
 3838 D1:D4BD ED 27 -  -          ld  hl,(hl)
 3839 D1:D4BF 06 00 -  -          ld  b,0
 3840 D1:D4C1 4F -  -  -          ld  c,a
 3841 D1:D4C2 09 -  -  -          add hl,bc
 3842 D1:D4C3 CD 7D AE D1         READ_ACCESS
 3843 D1:D4C7 DD 46 04 -          ld  b,(ix+REGSR)
 3844 D1:D4CA CB 18 -  -          rr b
 3845 D1:D4CC 17 -  -  -          rla
 3846 D1:D4CD 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3847 D1:D4CE -  -  -  -          ;Split oper
 3848 D1:D4CE DD 46 04 -          ld  b,(ix+REGSR)
 3849 D1:D4D1 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3850 D1:D4D7 DD A6 00 -          and a,(ix+REGA)
 3851 D1:D4DA DD 77 00 -          ld  (ix+REGA),a
 3852 D1:D4DD CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3853 D1:D4E3 87 -  -  -          add a,a
 3854 D1:D4E4 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3855 D1:D4EA DD 70 04 -          ld  (ix+REGSR),b
 3856 D1:D4ED 41 -  -  -          ld  b,c
 3857 D1:D4EE CD 20 AF D1         WRITE_ACCESS
 3858 D1:D4F2 E1 -  -  -      pop hl
 3859 D1:D4F3 C3 FB B6 D1     jp  i6502NextLoad
 3860 D1:D4F7 -  -  -  -  
 3861 D1:D4F7 -  -  -  -  ;(indirect),Y	RLA (oper),Y	33	2	8  
 3862 D1:D4F7 -  -  -  -  inst6502_rla_indy:
 3863 D1:D4F7 ED 33 08 -      ADDCYC(8)
 3864 D1:D4FA E5 -  -  -      push hl
 3865 D1:D4FB 7E -  -  -          ld  a,(hl)
 3866 D1:D4FC 21 00 38 D0         ld  hl,ZEROPAGE
 3867 D1:D500 85 -  -  -          add a,L
 3868 D1:D501 6F -  -  -          ld  L,a
 3869 D1:D502 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3870 D1:D503 2C -  -  -          inc L
 3871 D1:D504 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3872 D1:D507 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3873 D1:D508 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3874 D1:D50A 24 -  -  -          inc h
 3875 D1:D50B 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3876 D1:D50C 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3877 D1:D50E ED 6C -  -          mlt hl          ;23.
 3878 D1:D510 01 00 40 D0         ld  bc,PAGETABLE
 3879 D1:D514 09 -  -  -          add hl,bc
 3880 D1:D515 ED 27 -  -          ld  hl,(hl)     ;address get.
 3881 D1:D517 01 00 00 00         ld  bc,0
 3882 D1:D51B 4F -  -  -          ld  c,a
 3883 D1:D51C 09 -  -  -          add hl,bc       ;Full address get.
 3884 D1:D51D CD 7D AE D1         READ_ACCESS
 3885 D1:D521 DD 46 04 -          ld  b,(ix+REGSR)
 3886 D1:D524 CB 18 -  -          rr b
 3887 D1:D526 17 -  -  -          rla
 3888 D1:D527 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3889 D1:D528 -  -  -  -          ;Split oper
 3890 D1:D528 DD 46 04 -          ld  b,(ix+REGSR)
 3891 D1:D52B CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3892 D1:D531 DD A6 00 -          and a,(ix+REGA)
 3893 D1:D534 DD 77 00 -          ld  (ix+REGA),a
 3894 D1:D537 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3895 D1:D53D 87 -  -  -          add a,a
 3896 D1:D53E CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3897 D1:D544 DD 70 04 -          ld  (ix+REGSR),b
 3898 D1:D547 41 -  -  -          ld  b,c
 3899 D1:D548 CD 20 AF D1         WRITE_ACCESS
 3900 D1:D54C E1 -  -  -      pop hl
 3901 D1:D54D C3 FB B6 D1     jp  i6502NextLoad
 3902 D1:D551 -  -  -  -  
 3903 D1:D551 -  -  -  -  ;-----------------------------------------------------------------------------
 3904 D1:D551 -  -  -  -  ;RRA
 3905 D1:D551 -  -  -  -  ;ROR oper + ADC oper
 3906 D1:D551 -  -  -  -  ;M = C -> [76543210] -> C, A + M + C -> A, C. Affects VCZN
 3907 D1:D551 -  -  -  -  
 3908 D1:D551 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3909 D1:D551 -  -  -  -  ;zeropage	RRA oper	67	2	5  	
 3910 D1:D551 -  -  -  -  inst6502_rra_zp:
 3911 D1:D551 ED 33 05 -      ADDCYC(5)
 3912 D1:D554 7E -  -  -      ld  a,(hl)
 3913 D1:D555 01 00 38 D0     ld  bc,ZEROPAGE
 3914 D1:D559 81 -  -  -      add a,c
 3915 D1:D55A 4F -  -  -      ld  c,a
 3916 D1:D55B DD 7E 04 -      ld  a,(ix+REGSR)
 3917 D1:D55E 1F -  -  -      rra
 3918 D1:D55F 0A -  -  -      ld  a,(bc)
 3919 D1:D560 1F -  -  -      rra
 3920 D1:D561 02 -  -  -      ld  (bc),a
 3921 D1:D562 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 3922 D1:D566 30 04 -  -      jr nc,$+6
 3923 D1:D568 DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 3924 D1:D56C 4F -  -  -      ld  c,a
 3925 D1:D56D C3 3C B8 D1     jp  subroutine6502_adc_combined_end
 3926 D1:D571 -  -  -  -  
 3927 D1:D571 -  -  -  -  ;zeropage,X	RRA oper,X	77	2	6  	
 3928 D1:D571 -  -  -  -  inst6502_rra_zpx:
 3929 D1:D571 ED 33 06 -      ADDCYC(6)
 3930 D1:D574 7E -  -  -      ld  a,(hl)
 3931 D1:D575 01 00 38 D0     ld  bc,ZEROPAGE
 3932 D1:D579 81 -  -  -      add a,c
 3933 D1:D57A DD 86 01 -      add a,(ix+REGX)
 3934 D1:D57D 4F -  -  -      ld  c,a
 3935 D1:D57E DD 7E 04 -      ld  a,(ix+REGSR)
 3936 D1:D581 1F -  -  -      rra
 3937 D1:D582 0A -  -  -      ld  a,(bc)
 3938 D1:D583 1F -  -  -      rra
 3939 D1:D584 02 -  -  -      ld  (bc),a
 3940 D1:D585 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 3941 D1:D589 30 04 -  -      jr nc,$+6
 3942 D1:D58B DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 3943 D1:D58F 4F -  -  -      ld  c,a
 3944 D1:D590 C3 3C B8 D1     jp  subroutine6502_adc_combined_end
 3945 D1:D594 -  -  -  -  
 3946 D1:D594 -  -  -  -  ;absolute	RRA oper	6F	3	6  	
 3947 D1:D594 -  -  -  -  inst6502_rra_abs:
 3948 D1:D594 ED 33 06 -      ADDCYC(6)
 3949 D1:D597 CD AA B7 D1     call subroutine6502_abs_split_start
 3950 D1:D59B E5 -  -  -      push hl
 3951 D1:D59C 50 -  -  -          ld  d,b
 3952 D1:D59D 79 -  -  -          ld  a,c
 3953 D1:D59E 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3954 D1:D5A0 ED 4C -  -          mlt bc
 3955 D1:D5A2 21 00 40 D0         ld  hl,PAGETABLE
 3956 D1:D5A6 09 -  -  -          add hl,bc
 3957 D1:D5A7 ED 27 -  -          ld  hl,(hl)
 3958 D1:D5A9 06 00 -  -          ld  b,0
 3959 D1:D5AB 4F -  -  -          ld  c,a
 3960 D1:D5AC 09 -  -  -          add hl,bc   ;full address
 3961 D1:D5AD CD 7D AE D1         READ_ACCESS
 3962 D1:D5B1 DD 46 04 -          ld  b,(ix+REGSR)
 3963 D1:D5B4 CB 18 -  -          rr b
 3964 D1:D5B6 1F -  -  -          rra
 3965 D1:D5B7 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3966 D1:D5BB 30 04 -  -          jr nc,$+6
 3967 D1:D5BD DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3968 D1:D5C1 47 -  -  -          ld  b,a
 3969 D1:D5C2 C5 -  -  -          push bc
 3970 D1:D5C3 CD 20 AF D1             WRITE_ACCESS
 3971 D1:D5C7 C1 -  -  -          pop bc
 3972 D1:D5C8 48 -  -  -          ld c,b
 3973 D1:D5C9 E1 -  -  -      pop hl
 3974 D1:D5CA C3 3C B8 D1     jp  subroutine6502_adc_combined_end
 3975 D1:D5CE -  -  -  -  
 3976 D1:D5CE -  -  -  -  ;absolut,X	RRA oper,X	7F	3	7  	
 3977 D1:D5CE -  -  -  -  inst6502_rra_absx:
 3978 D1:D5CE ED 33 07 -      ADDCYC(7)
 3979 D1:D5D1 CD 07 B8 D1     PUSH_ABSXSPLIT_NODEP
 3980 D1:D5D5 CD 7D AE D1         READ_ACCESS
 3981 D1:D5D9 DD 46 04 -          ld  b,(ix+REGSR)
 3982 D1:D5DC CB 18 -  -          rr b
 3983 D1:D5DE 1F -  -  -          rra
 3984 D1:D5DF DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3985 D1:D5E3 30 04 -  -          jr nc,$+6
 3986 D1:D5E5 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3987 D1:D5E9 47 -  -  -          ld  b,a
 3988 D1:D5EA C5 -  -  -          push bc
 3989 D1:D5EB CD 20 AF D1             WRITE_ACCESS
 3990 D1:D5EF C1 -  -  -          pop bc
 3991 D1:D5F0 48 -  -  -          ld c,b
 3992 D1:D5F1 E1 -  -  -      pop hl
 3993 D1:D5F2 C3 3C B8 D1     jp  subroutine6502_adc_combined_end
 3994 D1:D5F6 -  -  -  -  
 3995 D1:D5F6 -  -  -  -  ;absolut,Y	RRA oper,Y	7B	3	7  	
 3996 D1:D5F6 -  -  -  -  inst6502_rra_absy:
 3997 D1:D5F6 ED 33 07 -      ADDCYC(7)
 3998 D1:D5F9 CD 02 B8 D1     PUSH_ABSYSPLIT_NODEP
 3999 D1:D5FD CD 7D AE D1         READ_ACCESS
 4000 D1:D601 DD 46 04 -          ld  b,(ix+REGSR)
 4001 D1:D604 CB 18 -  -          rr b
 4002 D1:D606 1F -  -  -          rra
 4003 D1:D607 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 4004 D1:D60B 30 04 -  -          jr nc,$+6
 4005 D1:D60D DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 4006 D1:D611 47 -  -  -          ld  b,a
 4007 D1:D612 C5 -  -  -          push bc
 4008 D1:D613 CD 20 AF D1             WRITE_ACCESS
 4009 D1:D617 C1 -  -  -          pop bc
 4010 D1:D618 48 -  -  -          ld c,b
 4011 D1:D619 E1 -  -  -      pop hl
 4012 D1:D61A C3 3C B8 D1     jp  subroutine6502_adc_combined_end
 4013 D1:D61E -  -  -  -  
 4014 D1:D61E -  -  -  -  ;(indirect,X)	RRA (oper,X)	63	2	8  	
 4015 D1:D61E -  -  -  -  isnt6502_rra_indx:
 4016 D1:D61E ED 33 08 -      ADDCYC(8)
 4017 D1:D621 E5 -  -  -      push hl
 4018 D1:D622 7E -  -  -          ld  a,(hl)
 4019 D1:D623 21 00 38 D0         ld  hl,ZEROPAGE
 4020 D1:D627 85 -  -  -          add a,L
 4021 D1:D628 DD 86 01 -          add a,(ix+REGX)
 4022 D1:D62B 6F -  -  -          ld  L,a
 4023 D1:D62C 7E -  -  -          ld  a,(hl)
 4024 D1:D62D 2C -  -  -          inc L
 4025 D1:D62E 56 -  -  -          ld  d,(hl)
 4026 D1:D62F 42 -  -  -          ld  b,d
 4027 D1:D630 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4028 D1:D632 ED 4C -  -          mlt bc
 4029 D1:D634 21 00 40 D0         ld  hl,PAGETABLE
 4030 D1:D638 09 -  -  -          add hl,bc
 4031 D1:D639 ED 27 -  -          ld  hl,(hl)
 4032 D1:D63B 06 00 -  -          ld  b,0
 4033 D1:D63D 4F -  -  -          ld  c,a
 4034 D1:D63E 09 -  -  -          add hl,bc
 4035 D1:D63F CD 7D AE D1         READ_ACCESS
 4036 D1:D643 DD 46 04 -          ld  b,(ix+REGSR)
 4037 D1:D646 CB 18 -  -          rr b
 4038 D1:D648 1F -  -  -          rra
 4039 D1:D649 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 4040 D1:D64D 30 04 -  -          jr nc,$+6
 4041 D1:D64F DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 4042 D1:D653 47 -  -  -          ld  b,a
 4043 D1:D654 C5 -  -  -          push bc
 4044 D1:D655 CD 20 AF D1             WRITE_ACCESS
 4045 D1:D659 C1 -  -  -          pop bc
 4046 D1:D65A 48 -  -  -          ld c,b
 4047 D1:D65B E1 -  -  -      pop hl
 4048 D1:D65C C3 3C B8 D1     jp  subroutine6502_adc_combined_end
 4049 D1:D660 -  -  -  -  
 4050 D1:D660 -  -  -  -  ;(indirect),Y	RRA (oper),Y	73	2	8  
 4051 D1:D660 -  -  -  -  inst6502_rra_indy:
 4052 D1:D660 ED 33 08 -      ADDCYC(8)
 4053 D1:D663 E5 -  -  -      push hl
 4054 D1:D664 7E -  -  -          ld  a,(hl)
 4055 D1:D665 21 00 38 D0         ld  hl,ZEROPAGE
 4056 D1:D669 85 -  -  -          add a,L
 4057 D1:D66A 6F -  -  -          ld  L,a
 4058 D1:D66B 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4059 D1:D66C 2C -  -  -          inc L
 4060 D1:D66D DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4061 D1:D670 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4062 D1:D671 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4063 D1:D673 24 -  -  -          inc h
 4064 D1:D674 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4065 D1:D675 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4066 D1:D677 ED 6C -  -          mlt hl          ;23.
 4067 D1:D679 01 00 40 D0         ld  bc,PAGETABLE
 4068 D1:D67D 09 -  -  -          add hl,bc
 4069 D1:D67E ED 27 -  -          ld  hl,(hl)     ;address get.
 4070 D1:D680 01 00 00 00         ld  bc,0
 4071 D1:D684 4F -  -  -          ld  c,a
 4072 D1:D685 09 -  -  -          add hl,bc       ;Full address get.
 4073 D1:D686 CD 7D AE D1         READ_ACCESS
 4074 D1:D68A DD 46 04 -          ld  b,(ix+REGSR)
 4075 D1:D68D CB 18 -  -          rr b
 4076 D1:D68F 1F -  -  -          rra
 4077 D1:D690 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 4078 D1:D694 30 04 -  -          jr nc,$+6
 4079 D1:D696 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 4080 D1:D69A 47 -  -  -          ld  b,a
 4081 D1:D69B C5 -  -  -          push bc
 4082 D1:D69C CD 20 AF D1             WRITE_ACCESS
 4083 D1:D6A0 C1 -  -  -          pop bc
 4084 D1:D6A1 48 -  -  -          ld c,b
 4085 D1:D6A2 E1 -  -  -      pop hl
 4086 D1:D6A3 C3 3C B8 D1     jp  subroutine6502_adc_combined_end
 4087 D1:D6A7 -  -  -  -  
 4088 D1:D6A7 -  -  -  -  ;-----------------------------------------------------------------------------
 4089 D1:D6A7 -  -  -  -  ;SAX (AXS, AAX) - A AND X -> M
 4090 D1:D6A7 -  -  -  -  ;A and X are put on the bus at the same time (resulting effectively in an 
 4091 D1:D6A7 -  -  -  -  ;AND operation) and stored in M. Flags not affected.
 4092 D1:D6A7 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4093 D1:D6A7 -  -  -  -  ;zeropage	SAX oper	87	2	3  	
 4094 D1:D6A7 -  -  -  -  inst6502_sax_zp:
 4095 D1:D6A7 ED 33 03 -      ADDCYC(3)
 4096 D1:D6AA 7E -  -  -      ld  a,(hl)
 4097 D1:D6AB 01 00 38 D0     ld  bc,ZEROPAGE
 4098 D1:D6AF 81 -  -  -      add a,c
 4099 D1:D6B0 4F -  -  -      ld  c,a
 4100 D1:D6B1 DD 7E 00 -      ld  a,(ix+REGA)
 4101 D1:D6B4 DD A6 01 -      and a,(ix+REGX)
 4102 D1:D6B7 02 -  -  -      ld  (bc),a
 4103 D1:D6B8 C3 FB B6 D1     jp i6502NextLoad
 4104 D1:D6BC -  -  -  -  
 4105 D1:D6BC -  -  -  -  
 4106 D1:D6BC -  -  -  -  ;zeropage,Y	SAX oper,Y	97	2	4  	
 4107 D1:D6BC -  -  -  -  inst6502_sax_zpy:
 4108 D1:D6BC ED 33 04 -      ADDCYC(4)
 4109 D1:D6BF 7E -  -  -      ld  a,(hl)
 4110 D1:D6C0 01 00 38 D0     ld  bc,ZEROPAGE
 4111 D1:D6C4 81 -  -  -      add a,c
 4112 D1:D6C5 DD 86 02 -      add a,(ix+REGY)
 4113 D1:D6C8 4F -  -  -      ld  c,a
 4114 D1:D6C9 DD 7E 00 -      ld  a,(ix+REGA)
 4115 D1:D6CC DD A6 01 -      and a,(ix+REGX)
 4116 D1:D6CF 02 -  -  -      ld  (bc),a
 4117 D1:D6D0 C3 FB B6 D1     jp i6502NextLoad
 4118 D1:D6D4 -  -  -  -  
 4119 D1:D6D4 -  -  -  -  
 4120 D1:D6D4 -  -  -  -  ;absolute	SAX oper	8F	3	4  	
 4121 D1:D6D4 -  -  -  -  inst6502_sax_abs:
 4122 D1:D6D4 ED 33 04 -      ADDCYC(4)
 4123 D1:D6D7 CD AA B7 D1     call subroutine6502_abs_split_start
 4124 D1:D6DB E5 -  -  -      push hl
 4125 D1:D6DC 50 -  -  -          ld  d,b
 4126 D1:D6DD 79 -  -  -          ld  a,c
 4127 D1:D6DE 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4128 D1:D6E0 ED 4C -  -          mlt bc
 4129 D1:D6E2 21 00 40 D0         ld  hl,PAGETABLE
 4130 D1:D6E6 09 -  -  -          add hl,bc
 4131 D1:D6E7 ED 27 -  -          ld  hl,(hl)
 4132 D1:D6E9 06 00 -  -          ld  b,0
 4133 D1:D6EB 4F -  -  -          ld  c,a
 4134 D1:D6EC 09 -  -  -          add hl,bc   ;full address
 4135 D1:D6ED DD 7E 00 -          ld  a,(ix+REGA)
 4136 D1:D6F0 DD A6 01 -          and a,(ix+REGX)
 4137 D1:D6F3 47 -  -  -          ld  b,a
 4138 D1:D6F4 CD 20 AF D1         WRITE_ACCESS
 4139 D1:D6F8 E1 -  -  -      pop hl
 4140 D1:D6F9 C3 FB B6 D1     jp i6502NextLoad
 4141 D1:D6FD -  -  -  -  
 4142 D1:D6FD -  -  -  -  ;(indirect,X)	SAX (oper,X)	83	2	6  
 4143 D1:D6FD -  -  -  -  inst6502_sax_indx:
 4144 D1:D6FD ED 33 06 -      ADDCYC(6)
 4145 D1:D700 E5 -  -  -      push hl
 4146 D1:D701 7E -  -  -          ld  a,(hl)
 4147 D1:D702 21 00 38 D0         ld  hl,ZEROPAGE
 4148 D1:D706 85 -  -  -          add a,L
 4149 D1:D707 DD 86 01 -          add a,(ix+REGX)
 4150 D1:D70A 6F -  -  -          ld  L,a
 4151 D1:D70B 7E -  -  -          ld  a,(hl)
 4152 D1:D70C 2C -  -  -          inc L
 4153 D1:D70D 56 -  -  -          ld  d,(hl)
 4154 D1:D70E 42 -  -  -          ld  b,d
 4155 D1:D70F 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4156 D1:D711 ED 4C -  -          mlt bc
 4157 D1:D713 21 00 40 D0         ld  hl,PAGETABLE
 4158 D1:D717 09 -  -  -          add hl,bc
 4159 D1:D718 ED 27 -  -          ld  hl,(hl)
 4160 D1:D71A 06 00 -  -          ld  b,0
 4161 D1:D71C 4F -  -  -          ld  c,a
 4162 D1:D71D 09 -  -  -          add hl,bc
 4163 D1:D71E DD 7E 00 -          ld  a,(ix+REGA)
 4164 D1:D721 DD A6 01 -          and a,(ix+REGX)
 4165 D1:D724 47 -  -  -          ld  b,a
 4166 D1:D725 CD 20 AF D1         WRITE_ACCESS
 4167 D1:D729 E1 -  -  -      pop hl
 4168 D1:D72A C3 FB B6 D1     jp i6502NextLoad
 4169 D1:D72E -  -  -  -  
 4170 D1:D72E -  -  -  -  ;-----------------------------------------------------------------------------
 4171 D1:D72E -  -  -  -  ;SBX (AXS, SAX) - CMP and DEX at once, sets flags like CMP
 4172 D1:D72E -  -  -  -  ;(A AND X) - oper -> X.  Flags affected: CZN
 4173 D1:D72E -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4174 D1:D72E -  -  -  -  ;immediate	SBX #oper	CB	2	2  
 4175 D1:D72E -  -  -  -  inst6502_sbx_imm:
 4176 D1:D72E DD 7E 00 -      ld  a,(ix+REGA)
 4177 D1:D731 DD A6 01 -      and a,(ix+REGX)
 4178 D1:D734 96 -  -  -      sub a,(hl)
 4179 D1:D735 DD 77 01 -      ld  (ix+REGX),a
 4180 D1:D738 3F -  -  -      ccf
 4181 D1:D739 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 4182 D1:D753 C3 FB B6 D1     jp  i6502NextLoad
 4183 D1:D757 -  -  -  -  
 4184 D1:D757 -  -  -  -  ;-----------------------------------------------------------------------------
 4185 D1:D757 -  -  -  -  ;SHA (AHX, AXA) - Stores A AND X AND (high-byte of addr. + 1) at addr.
 4186 D1:D757 -  -  -  -  ;unstable: sometimes 'AND (H+1)' is dropped, 
 4187 D1:D757 -  -  -  -  ;page boundary crossings may not work 
 4188 D1:D757 -  -  -  -  ;(with the high-byte of the value used as the high-byte of the address)
 4189 D1:D757 -  -  -  -  ;A AND X AND (H+1) -> M
 4190 D1:D757 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4191 D1:D757 -  -  -  -  ;
 4192 D1:D757 -  -  -  -  ;NOTE: NOT GOING TO IMPLEMENT THESE. THEY'LL ADVANCE THE 6502 PC IN THE CORRECT
 4193 D1:D757 -  -  -  -  ;MANNER BUT NOTHING MORE. THE CPU WILL HALT WHEN ENCOUNTERING ONE OF THESE.
 4194 D1:D757 -  -  -  -  ;
 4195 D1:D757 -  -  -  -  ;absolut,Y	SHA oper,Y	9F	3	5  	†
 4196 D1:D757 -  -  -  -  inst6502_sha_absy:
 4197 D1:D757 ED 33 05 -      ADDCYC(5)
 4198 D1:D75A CD C6 B7 D1     PUSH_ABSYSPLIT
 4199 D1:D75E 18 FE -  -          jr $
 4200 D1:D760 E1 -  -  -      pop hl
 4201 D1:D761 C3 FB B6 D1     jp i6502NextLoad
 4202 D1:D765 -  -  -  -  
 4203 D1:D765 -  -  -  -  ;(indirect),Y	SHA (oper),Y	93	2	6  	†
 4204 D1:D765 -  -  -  -  inst6502_sha_indy:
 4205 D1:D765 ED 33 06 -      ADDCYC(6)
 4206 D1:D768 E5 -  -  -      push hl
 4207 D1:D769 7E -  -  -          ld  a,(hl)
 4208 D1:D76A 21 00 38 D0         ld  hl,ZEROPAGE
 4209 D1:D76E 85 -  -  -          add a,L
 4210 D1:D76F 6F -  -  -          ld  L,a
 4211 D1:D770 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4212 D1:D771 2C -  -  -          inc L
 4213 D1:D772 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4214 D1:D775 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4215 D1:D776 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4216 D1:D778 24 -  -  -          inc h
 4217 D1:D779 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4218 D1:D77A 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4219 D1:D77C ED 6C -  -          mlt hl          ;23.
 4220 D1:D77E 01 00 40 D0         ld  bc,PAGETABLE
 4221 D1:D782 09 -  -  -          add hl,bc
 4222 D1:D783 ED 27 -  -          ld  hl,(hl)     ;address get.
 4223 D1:D785 01 00 00 00         ld  bc,0
 4224 D1:D789 4F -  -  -          ld  c,a
 4225 D1:D78A 09 -  -  -          add hl,bc       ;Full address get.
 4226 D1:D78B CD 7D AE D1         READ_ACCESS
 4227 D1:D78F 18 FE -  -          jr $
 4228 D1:D791 E1 -  -  -      pop hl
 4229 D1:D792 C3 FB B6 D1     jp i6502NextLoad
 4230 D1:D796 -  -  -  -  
 4231 D1:D796 -  -  -  -  ;-----------------------------------------------------------------------------
 4232 D1:D796 -  -  -  -  ;SHX (A11, SXA, XAS)
 4233 D1:D796 -  -  -  -  ;SHY (A11, SYA, SAY)
 4234 D1:D796 -  -  -  -  ;TAS (XAS, SHS)
 4235 D1:D796 -  -  -  -  ;Not going to implement these, but they'll still get the program
 4236 D1:D796 -  -  -  -  ;counter to make the correct noises. Right before locking up the core.
 4237 D1:D796 -  -  -  -  ;All of these instructions are marked as "unstable" in that they'll sometimes
 4238 D1:D796 -  -  -  -  ;drop the high byte, and page crossings sometimes won't work.
 4239 D1:D796 -  -  -  -  
 4240 D1:D796 -  -  -  -  ;absolut,Y	SHX oper,Y	9E	3	5  	†
 4241 D1:D796 -  -  -  -  inst6502_shx_absy:
 4242 D1:D796 ED 33 05 -      ADDCYC(5)
 4243 D1:D799 CD 02 B8 D1     PUSH_ABSYSPLIT_NODEP
 4244 D1:D79D 18 FE -  -          jr $
 4245 D1:D79F E1 -  -  -      pop hl
 4246 D1:D7A0 C3 FB B6 D1     jp i6502NextLoad
 4247 D1:D7A4 -  -  -  -  
 4248 D1:D7A4 -  -  -  -  ;absolut,X	SHY oper,X	9C	3	5  	†
 4249 D1:D7A4 -  -  -  -  inst6502_shy_absx:
 4250 D1:D7A4 ED 33 05 -      ADDCYC(5)
 4251 D1:D7A7 CD 07 B8 D1     PUSH_ABSXSPLIT_NODEP
 4252 D1:D7AB 18 FE -  -          jr $
 4253 D1:D7AD E1 -  -  -      pop hl
 4254 D1:D7AE C3 FB B6 D1     jp i6502NextLoad
 4255 D1:D7B2 -  -  -  -  
 4256 D1:D7B2 -  -  -  -  ;absolut,Y	TAS oper,Y	9B	3	5  	†
 4257 D1:D7B2 -  -  -  -  inst6502_tas_absy:
 4258 D1:D7B2 ED 33 05 -      ADDCYC(5)
 4259 D1:D7B5 CD 02 B8 D1     PUSH_ABSYSPLIT_NODEP
 4260 D1:D7B9 18 FE -  -          jr $
 4261 D1:D7BB E1 -  -  -      pop hl
 4262 D1:D7BC C3 FB B6 D1     jp i6502NextLoad
 4263 D1:D7C0 -  -  -  -  
 4264 D1:D7C0 -  -  -  -  ;-----------------------------------------------------------------------------
 4265 D1:D7C0 -  -  -  -  ;SLO (ASO) - ASL oper + ORA oper
 4266 D1:D7C0 -  -  -  -  ;M = C <- [76543210] <- 0, A OR M -> A. Affects: CZN
 4267 D1:D7C0 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4268 D1:D7C0 -  -  -  -  
 4269 D1:D7C0 -  -  -  -  ;zeropage	SLO oper	07	2	5  	
 4270 D1:D7C0 -  -  -  -  inst6502_slo_zp:
 4271 D1:D7C0 ED 33 05 -      ADDCYC(5)
 4272 D1:D7C3 7E -  -  -      ld  a,(hl)
 4273 D1:D7C4 01 00 38 D0     ld  bc,ZEROPAGE
 4274 D1:D7C8 81 -  -  -      add a,c
 4275 D1:D7C9 4F -  -  -      ld  c,a
 4276 D1:D7CA 0A -  -  -      ld  a,(bc)
 4277 D1:D7CB CB 27 -  -      sla a
 4278 D1:D7CD 02 -  -  -      ld  (bc),a
 4279 D1:D7CE -  -  -  -      ;Flag breakdown to optimize for split operation
 4280 D1:D7CE DD 46 04 -      ld  b,(ix+REGSR)
 4281 D1:D7D1 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4282 D1:D7D7 DD B6 00 -      or  a,(ix+REGA)
 4283 D1:D7DA DD 77 00 -      ld  (ix+REGA),a
 4284 D1:D7DD CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4285 D1:D7E3 87 -  -  -      add a,a
 4286 D1:D7E4 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4287 D1:D7EA DD 70 04 -      ld  (ix+REGSR),b
 4288 D1:D7ED C3 FB B6 D1     jp i6502NextLoad
 4289 D1:D7F1 -  -  -  -  
 4290 D1:D7F1 -  -  -  -  ;zeropage,X	SLO oper,X	17	2	6  	
 4291 D1:D7F1 -  -  -  -  inst6502_slo_zpx:
 4292 D1:D7F1 ED 33 06 -      ADDCYC(6)
 4293 D1:D7F4 7E -  -  -      ld  a,(hl)
 4294 D1:D7F5 01 00 38 D0     ld  bc,ZEROPAGE
 4295 D1:D7F9 81 -  -  -      add a,c
 4296 D1:D7FA DD 86 01 -      add a,(ix+REGX)
 4297 D1:D7FD 4F -  -  -      ld  c,a
 4298 D1:D7FE 0A -  -  -      ld  a,(bc)
 4299 D1:D7FF CB 27 -  -      sla a
 4300 D1:D801 02 -  -  -      ld  (bc),a
 4301 D1:D802 -  -  -  -      ;Flag breakdown to optimize for split operation
 4302 D1:D802 DD 46 04 -      ld  b,(ix+REGSR)
 4303 D1:D805 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4304 D1:D80B DD B6 00 -      or  a,(ix+REGA)
 4305 D1:D80E DD 77 00 -      ld  (ix+REGA),a
 4306 D1:D811 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4307 D1:D817 87 -  -  -      add a,a
 4308 D1:D818 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4309 D1:D81E DD 70 04 -      ld  (ix+REGSR),b
 4310 D1:D821 C3 FB B6 D1     jp i6502NextLoad
 4311 D1:D825 -  -  -  -  
 4312 D1:D825 -  -  -  -  ;absolute	SLO oper	0F	3	6  	
 4313 D1:D825 -  -  -  -  inst6502_slo_abs:
 4314 D1:D825 ED 33 06 -      ADDCYC(6)
 4315 D1:D828 CD AA B7 D1     call subroutine6502_abs_split_start
 4316 D1:D82C E5 -  -  -      push hl
 4317 D1:D82D 50 -  -  -          ld  d,b
 4318 D1:D82E 79 -  -  -          ld  a,c
 4319 D1:D82F 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4320 D1:D831 ED 4C -  -          mlt bc
 4321 D1:D833 21 00 40 D0         ld  hl,PAGETABLE
 4322 D1:D837 09 -  -  -          add hl,bc
 4323 D1:D838 ED 27 -  -          ld  hl,(hl)
 4324 D1:D83A 06 00 -  -          ld  b,0
 4325 D1:D83C 4F -  -  -          ld  c,a
 4326 D1:D83D 09 -  -  -          add hl,bc   ;full address
 4327 D1:D83E CD 7D AE D1         READ_ACCESS
 4328 D1:D842 CB 27 -  -          sla a
 4329 D1:D844 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4330 D1:D845 -  -  -  -          ;Split oper
 4331 D1:D845 DD 46 04 -          ld  b,(ix+REGSR)
 4332 D1:D848 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4333 D1:D84E DD B6 00 -          or  a,(ix+REGA)
 4334 D1:D851 DD 77 00 -          ld  (ix+REGA),a
 4335 D1:D854 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4336 D1:D85A 87 -  -  -          add a,a
 4337 D1:D85B CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4338 D1:D861 DD 70 04 -          ld  (ix+REGSR),b
 4339 D1:D864 41 -  -  -          ld  b,c
 4340 D1:D865 CD 20 AF D1         WRITE_ACCESS
 4341 D1:D869 E1 -  -  -      pop hl
 4342 D1:D86A C3 FB B6 D1     jp i6502NextLoad
 4343 D1:D86E -  -  -  -  
 4344 D1:D86E -  -  -  -  ;absolut,X	SLO oper,X	1F	3	7  	
 4345 D1:D86E -  -  -  -  inst6502_slo_absx:
 4346 D1:D86E ED 33 07 -      ADDCYC(7)
 4347 D1:D871 CD 07 B8 D1     PUSH_ABSXSPLIT_NODEP
 4348 D1:D875 CD 7D AE D1         READ_ACCESS
 4349 D1:D879 CB 27 -  -          sla a
 4350 D1:D87B 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4351 D1:D87C -  -  -  -          ;Split oper
 4352 D1:D87C DD 46 04 -          ld  b,(ix+REGSR)
 4353 D1:D87F CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4354 D1:D885 DD B6 00 -          or  a,(ix+REGA)
 4355 D1:D888 DD 77 00 -          ld  (ix+REGA),a
 4356 D1:D88B CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4357 D1:D891 87 -  -  -          add a,a
 4358 D1:D892 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4359 D1:D898 DD 70 04 -          ld  (ix+REGSR),b
 4360 D1:D89B 41 -  -  -          ld  b,c
 4361 D1:D89C CD 20 AF D1         WRITE_ACCESS
 4362 D1:D8A0 E1 -  -  -      pop hl
 4363 D1:D8A1 C3 FB B6 D1     jp i6502NextLoad
 4364 D1:D8A5 -  -  -  -  
 4365 D1:D8A5 -  -  -  -  ;absolut,Y	SLO oper,Y	1B	3	7  	
 4366 D1:D8A5 -  -  -  -  inst6502_slo_absy:
 4367 D1:D8A5 ED 33 07 -      ADDCYC(7)
 4368 D1:D8A8 CD 02 B8 D1     PUSH_ABSYSPLIT_NODEP
 4369 D1:D8AC CD 7D AE D1         READ_ACCESS
 4370 D1:D8B0 CB 27 -  -          sla a
 4371 D1:D8B2 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4372 D1:D8B3 -  -  -  -          ;Split oper
 4373 D1:D8B3 DD 46 04 -          ld  b,(ix+REGSR)
 4374 D1:D8B6 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4375 D1:D8BC DD B6 00 -          or  a,(ix+REGA)
 4376 D1:D8BF DD 77 00 -          ld  (ix+REGA),a
 4377 D1:D8C2 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4378 D1:D8C8 87 -  -  -          add a,a
 4379 D1:D8C9 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4380 D1:D8CF DD 70 04 -          ld  (ix+REGSR),b
 4381 D1:D8D2 41 -  -  -          ld  b,c
 4382 D1:D8D3 CD 20 AF D1         WRITE_ACCESS
 4383 D1:D8D7 E1 -  -  -      pop hl
 4384 D1:D8D8 C3 FB B6 D1     jp i6502NextLoad
 4385 D1:D8DC -  -  -  -  
 4386 D1:D8DC -  -  -  -  ;(indirect,X)	SLO (oper,X)	03	2	8  	
 4387 D1:D8DC -  -  -  -  isnt6502_slo_indx:
 4388 D1:D8DC ED 33 08 -      ADDCYC(8)
 4389 D1:D8DF E5 -  -  -      push hl
 4390 D1:D8E0 7E -  -  -          ld  a,(hl)
 4391 D1:D8E1 21 00 38 D0         ld  hl,ZEROPAGE
 4392 D1:D8E5 85 -  -  -          add a,L
 4393 D1:D8E6 DD 86 01 -          add a,(ix+REGX)
 4394 D1:D8E9 6F -  -  -          ld  L,a
 4395 D1:D8EA 7E -  -  -          ld  a,(hl)
 4396 D1:D8EB 2C -  -  -          inc L
 4397 D1:D8EC 56 -  -  -          ld  d,(hl)
 4398 D1:D8ED 42 -  -  -          ld  b,d
 4399 D1:D8EE 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4400 D1:D8F0 ED 4C -  -          mlt bc
 4401 D1:D8F2 21 00 40 D0         ld  hl,PAGETABLE
 4402 D1:D8F6 09 -  -  -          add hl,bc
 4403 D1:D8F7 ED 27 -  -          ld  hl,(hl)
 4404 D1:D8F9 06 00 -  -          ld  b,0
 4405 D1:D8FB 4F -  -  -          ld  c,a
 4406 D1:D8FC 09 -  -  -          add hl,bc
 4407 D1:D8FD CD 7D AE D1         READ_ACCESS
 4408 D1:D901 CB 27 -  -          sla a
 4409 D1:D903 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4410 D1:D904 -  -  -  -          ;Split oper
 4411 D1:D904 DD 46 04 -          ld  b,(ix+REGSR)
 4412 D1:D907 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4413 D1:D90D DD B6 00 -          or  a,(ix+REGA)
 4414 D1:D910 DD 77 00 -          ld  (ix+REGA),a
 4415 D1:D913 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4416 D1:D919 87 -  -  -          add a,a
 4417 D1:D91A CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4418 D1:D920 DD 70 04 -          ld  (ix+REGSR),b
 4419 D1:D923 41 -  -  -          ld  b,c
 4420 D1:D924 CD 20 AF D1         WRITE_ACCESS
 4421 D1:D928 E1 -  -  -      pop hl
 4422 D1:D929 C3 FB B6 D1     jp  i6502NextLoad
 4423 D1:D92D -  -  -  -  
 4424 D1:D92D -  -  -  -  ;(indirect),Y	SLO (oper),Y	13	2	8  
 4425 D1:D92D -  -  -  -  inst6502_slo_indy:
 4426 D1:D92D ED 33 08 -      ADDCYC(8)
 4427 D1:D930 E5 -  -  -      push hl
 4428 D1:D931 7E -  -  -          ld  a,(hl)
 4429 D1:D932 21 00 38 D0         ld  hl,ZEROPAGE
 4430 D1:D936 85 -  -  -          add a,L
 4431 D1:D937 6F -  -  -          ld  L,a
 4432 D1:D938 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4433 D1:D939 2C -  -  -          inc L
 4434 D1:D93A DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4435 D1:D93D 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4436 D1:D93E 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4437 D1:D940 24 -  -  -          inc h
 4438 D1:D941 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4439 D1:D942 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4440 D1:D944 ED 6C -  -          mlt hl          ;23.
 4441 D1:D946 01 00 40 D0         ld  bc,PAGETABLE
 4442 D1:D94A 09 -  -  -          add hl,bc
 4443 D1:D94B ED 27 -  -          ld  hl,(hl)     ;address get.
 4444 D1:D94D 01 00 00 00         ld  bc,0
 4445 D1:D951 4F -  -  -          ld  c,a
 4446 D1:D952 09 -  -  -          add hl,bc       ;Full address get.
 4447 D1:D953 CD 7D AE D1         READ_ACCESS
 4448 D1:D957 CB 27 -  -          sla a
 4449 D1:D959 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4450 D1:D95A -  -  -  -          ;Split oper
 4451 D1:D95A DD 46 04 -          ld  b,(ix+REGSR)
 4452 D1:D95D CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4453 D1:D963 DD B6 00 -          or  a,(ix+REGA)
 4454 D1:D966 DD 77 00 -          ld  (ix+REGA),a
 4455 D1:D969 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4456 D1:D96F 87 -  -  -          add a,a
 4457 D1:D970 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4458 D1:D976 DD 70 04 -          ld  (ix+REGSR),b
 4459 D1:D979 41 -  -  -          ld  b,c
 4460 D1:D97A CD 20 AF D1         WRITE_ACCESS
 4461 D1:D97E E1 -  -  -      pop hl
 4462 D1:D97F C3 FB B6 D1     jp  i6502NextLoad
 4463 D1:D983 -  -  -  -  
 4464 D1:D983 -  -  -  -  ;-----------------------------------------------------------------------------
 4465 D1:D983 -  -  -  -  ;SRE (LSE) - LSR oper + EOR oper
 4466 D1:D983 -  -  -  -  ;M = 0 -> [76543210] -> C, A EOR M -> A. Affects: CZN
 4467 D1:D983 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4468 D1:D983 -  -  -  -  
 4469 D1:D983 -  -  -  -  ;zeropage	SRE oper	47	2	5  	
 4470 D1:D983 -  -  -  -  inst6502_sre_zp:
 4471 D1:D983 ED 33 05 -      ADDCYC(5)
 4472 D1:D986 7E -  -  -      ld  a,(hl)
 4473 D1:D987 01 00 38 D0     ld  bc,ZEROPAGE
 4474 D1:D98B 81 -  -  -      add a,c
 4475 D1:D98C 4F -  -  -      ld  c,a
 4476 D1:D98D 0A -  -  -      ld  a,(bc)
 4477 D1:D98E CB 3F -  -      srl a
 4478 D1:D990 02 -  -  -      ld  (bc),a
 4479 D1:D991 -  -  -  -      ;Flag breakdown to optimize for split operation
 4480 D1:D991 DD 46 04 -      ld  b,(ix+REGSR)
 4481 D1:D994 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4482 D1:D99A DD AE 00 -      xor a,(ix+REGA)
 4483 D1:D99D DD 77 00 -      ld  (ix+REGA),a
 4484 D1:D9A0 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4485 D1:D9A6 87 -  -  -      add a,a
 4486 D1:D9A7 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4487 D1:D9AD DD 70 04 -      ld  (ix+REGSR),b
 4488 D1:D9B0 C3 FB B6 D1     jp i6502NextLoad
 4489 D1:D9B4 -  -  -  -  
 4490 D1:D9B4 -  -  -  -  ;zeropage,X	SRE oper,X	57	2	6  	
 4491 D1:D9B4 -  -  -  -  inst6502_sre_zpx:
 4492 D1:D9B4 ED 33 06 -      ADDCYC(6)
 4493 D1:D9B7 7E -  -  -      ld  a,(hl)
 4494 D1:D9B8 01 00 38 D0     ld  bc,ZEROPAGE
 4495 D1:D9BC 81 -  -  -      add a,c
 4496 D1:D9BD DD 86 01 -      add a,(ix+REGX)
 4497 D1:D9C0 4F -  -  -      ld  c,a
 4498 D1:D9C1 0A -  -  -      ld  a,(bc)
 4499 D1:D9C2 CB 3F -  -      srl a
 4500 D1:D9C4 02 -  -  -      ld  (bc),a
 4501 D1:D9C5 -  -  -  -      ;Flag breakdown to optimize for split operation
 4502 D1:D9C5 DD 46 04 -      ld  b,(ix+REGSR)
 4503 D1:D9C8 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4504 D1:D9CE DD AE 00 -      xor a,(ix+REGA)
 4505 D1:D9D1 DD 77 00 -      ld  (ix+REGA),a
 4506 D1:D9D4 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4507 D1:D9DA 87 -  -  -      add a,a
 4508 D1:D9DB CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4509 D1:D9E1 DD 70 04 -      ld  (ix+REGSR),b
 4510 D1:D9E4 C3 FB B6 D1     jp i6502NextLoad
 4511 D1:D9E8 -  -  -  -  
 4512 D1:D9E8 -  -  -  -  ;absolute	SRE oper	4F	3	6  	
 4513 D1:D9E8 -  -  -  -  inst6502_sre_abs:
 4514 D1:D9E8 ED 33 06 -      ADDCYC(6)
 4515 D1:D9EB CD AA B7 D1     call subroutine6502_abs_split_start
 4516 D1:D9EF E5 -  -  -      push hl
 4517 D1:D9F0 50 -  -  -          ld  d,b
 4518 D1:D9F1 79 -  -  -          ld  a,c
 4519 D1:D9F2 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4520 D1:D9F4 ED 4C -  -          mlt bc
 4521 D1:D9F6 21 00 40 D0         ld  hl,PAGETABLE
 4522 D1:D9FA 09 -  -  -          add hl,bc
 4523 D1:D9FB ED 27 -  -          ld  hl,(hl)
 4524 D1:D9FD 06 00 -  -          ld  b,0
 4525 D1:D9FF 4F -  -  -          ld  c,a
 4526 D1:DA00 09 -  -  -          add hl,bc   ;full address
 4527 D1:DA01 CD 7D AE D1         READ_ACCESS
 4528 D1:DA05 CB 3F -  -          srl a
 4529 D1:DA07 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4530 D1:DA08 -  -  -  -          ;Split oper
 4531 D1:DA08 DD 46 04 -          ld  b,(ix+REGSR)
 4532 D1:DA0B CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4533 D1:DA11 DD AE 00 -          xor a,(ix+REGA)
 4534 D1:DA14 DD 77 00 -          ld  (ix+REGA),a
 4535 D1:DA17 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4536 D1:DA1D 87 -  -  -          add a,a
 4537 D1:DA1E CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4538 D1:DA24 DD 70 04 -          ld  (ix+REGSR),b
 4539 D1:DA27 41 -  -  -          ld  b,c
 4540 D1:DA28 CD 20 AF D1         WRITE_ACCESS
 4541 D1:DA2C E1 -  -  -      pop hl
 4542 D1:DA2D C3 FB B6 D1     jp i6502NextLoad
 4543 D1:DA31 -  -  -  -  
 4544 D1:DA31 -  -  -  -  ;absolut,X	SRE oper,X	5F	3	7  	
 4545 D1:DA31 -  -  -  -  inst6502_sre_absx:
 4546 D1:DA31 ED 33 07 -      ADDCYC(7)
 4547 D1:DA34 CD 07 B8 D1     PUSH_ABSXSPLIT_NODEP
 4548 D1:DA38 CD 7D AE D1         READ_ACCESS
 4549 D1:DA3C CB 3F -  -          srl a
 4550 D1:DA3E 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4551 D1:DA3F -  -  -  -          ;Split oper
 4552 D1:DA3F DD 46 04 -          ld  b,(ix+REGSR)
 4553 D1:DA42 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4554 D1:DA48 DD AE 00 -          xor a,(ix+REGA)
 4555 D1:DA4B DD 77 00 -          ld  (ix+REGA),a
 4556 D1:DA4E CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4557 D1:DA54 87 -  -  -          add a,a
 4558 D1:DA55 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4559 D1:DA5B DD 70 04 -          ld  (ix+REGSR),b
 4560 D1:DA5E 41 -  -  -          ld  b,c
 4561 D1:DA5F CD 20 AF D1         WRITE_ACCESS
 4562 D1:DA63 E1 -  -  -      pop hl
 4563 D1:DA64 C3 FB B6 D1     jp i6502NextLoad
 4564 D1:DA68 -  -  -  -  
 4565 D1:DA68 -  -  -  -  ;absolut,Y	SRE oper,Y	5B	3	7  	
 4566 D1:DA68 -  -  -  -  inst6502_sre_absy:
 4567 D1:DA68 ED 33 07 -      ADDCYC(7)
 4568 D1:DA6B CD 02 B8 D1     PUSH_ABSYSPLIT_NODEP
 4569 D1:DA6F CD 7D AE D1         READ_ACCESS
 4570 D1:DA73 CB 3F -  -          srl a
 4571 D1:DA75 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4572 D1:DA76 -  -  -  -          ;Split oper
 4573 D1:DA76 DD 46 04 -          ld  b,(ix+REGSR)
 4574 D1:DA79 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4575 D1:DA7F DD AE 00 -          xor a,(ix+REGA)
 4576 D1:DA82 DD 77 00 -          ld  (ix+REGA),a
 4577 D1:DA85 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4578 D1:DA8B 87 -  -  -          add a,a
 4579 D1:DA8C CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4580 D1:DA92 DD 70 04 -          ld  (ix+REGSR),b
 4581 D1:DA95 41 -  -  -          ld  b,c
 4582 D1:DA96 CD 20 AF D1         WRITE_ACCESS
 4583 D1:DA9A E1 -  -  -      pop hl
 4584 D1:DA9B C3 FB B6 D1     jp i6502NextLoad
 4585 D1:DA9F -  -  -  -  
 4586 D1:DA9F -  -  -  -  ;(indirect,X)	SRE (oper,X)	43	2	8  	
 4587 D1:DA9F -  -  -  -  isnt6502_sre_indx:
 4588 D1:DA9F ED 33 08 -      ADDCYC(8)
 4589 D1:DAA2 E5 -  -  -      push hl
 4590 D1:DAA3 7E -  -  -          ld  a,(hl)
 4591 D1:DAA4 21 00 38 D0         ld  hl,ZEROPAGE
 4592 D1:DAA8 85 -  -  -          add a,L
 4593 D1:DAA9 DD 86 01 -          add a,(ix+REGX)
 4594 D1:DAAC 6F -  -  -          ld  L,a
 4595 D1:DAAD 7E -  -  -          ld  a,(hl)
 4596 D1:DAAE 2C -  -  -          inc L
 4597 D1:DAAF 56 -  -  -          ld  d,(hl)
 4598 D1:DAB0 42 -  -  -          ld  b,d
 4599 D1:DAB1 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4600 D1:DAB3 ED 4C -  -          mlt bc
 4601 D1:DAB5 21 00 40 D0         ld  hl,PAGETABLE
 4602 D1:DAB9 09 -  -  -          add hl,bc
 4603 D1:DABA ED 27 -  -          ld  hl,(hl)
 4604 D1:DABC 06 00 -  -          ld  b,0
 4605 D1:DABE 4F -  -  -          ld  c,a
 4606 D1:DABF 09 -  -  -          add hl,bc
 4607 D1:DAC0 CD 7D AE D1         READ_ACCESS
 4608 D1:DAC4 CB 3F -  -          srl a
 4609 D1:DAC6 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4610 D1:DAC7 -  -  -  -          ;Split oper
 4611 D1:DAC7 DD 46 04 -          ld  b,(ix+REGSR)
 4612 D1:DACA CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4613 D1:DAD0 DD AE 00 -          xor a,(ix+REGA)
 4614 D1:DAD3 DD 77 00 -          ld  (ix+REGA),a
 4615 D1:DAD6 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4616 D1:DADC 87 -  -  -          add a,a
 4617 D1:DADD CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4618 D1:DAE3 DD 70 04 -          ld  (ix+REGSR),b
 4619 D1:DAE6 41 -  -  -          ld  b,c
 4620 D1:DAE7 CD 20 AF D1         WRITE_ACCESS
 4621 D1:DAEB E1 -  -  -      pop hl
 4622 D1:DAEC C3 FB B6 D1     jp  i6502NextLoad
 4623 D1:DAF0 -  -  -  -  
 4624 D1:DAF0 -  -  -  -  ;(indirect),Y	SRE (oper),Y	53	2	8  
 4625 D1:DAF0 -  -  -  -  inst6502_sre_indy:
 4626 D1:DAF0 ED 33 08 -      ADDCYC(8)
 4627 D1:DAF3 E5 -  -  -      push hl
 4628 D1:DAF4 7E -  -  -          ld  a,(hl)
 4629 D1:DAF5 21 00 38 D0         ld  hl,ZEROPAGE
 4630 D1:DAF9 85 -  -  -          add a,L
 4631 D1:DAFA 6F -  -  -          ld  L,a
 4632 D1:DAFB 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4633 D1:DAFC 2C -  -  -          inc L
 4634 D1:DAFD DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4635 D1:DB00 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4636 D1:DB01 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4637 D1:DB03 24 -  -  -          inc h
 4638 D1:DB04 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4639 D1:DB05 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4640 D1:DB07 ED 6C -  -          mlt hl          ;23.
 4641 D1:DB09 01 00 40 D0         ld  bc,PAGETABLE
 4642 D1:DB0D 09 -  -  -          add hl,bc
 4643 D1:DB0E ED 27 -  -          ld  hl,(hl)     ;address get.
 4644 D1:DB10 01 00 00 00         ld  bc,0
 4645 D1:DB14 4F -  -  -          ld  c,a
 4646 D1:DB15 09 -  -  -          add hl,bc       ;Full address get.
 4647 D1:DB16 CD 7D AE D1         READ_ACCESS
 4648 D1:DB1A CB 3F -  -          srl a
 4649 D1:DB1C 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4650 D1:DB1D -  -  -  -          ;Split oper
 4651 D1:DB1D DD 46 04 -          ld  b,(ix+REGSR)
 4652 D1:DB20 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4653 D1:DB26 DD AE 00 -          xor a,(ix+REGA)
 4654 D1:DB29 DD 77 00 -          ld  (ix+REGA),a
 4655 D1:DB2C CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4656 D1:DB32 87 -  -  -          add a,a
 4657 D1:DB33 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4658 D1:DB39 DD 70 04 -          ld  (ix+REGSR),b
 4659 D1:DB3C 41 -  -  -          ld  b,c
 4660 D1:DB3D CD 20 AF D1         WRITE_ACCESS
 4661 D1:DB41 E1 -  -  -      pop hl
 4662 D1:DB42 C3 FB B6 D1     jp  i6502NextLoad
 4663 D1:DB46 -  -  -  -  
 4664 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4665 D1:DB46 -  -  -  -  ;USBC (USBC)
 4666 D1:DB46 -  -  -  -  ;immediate	USBC #oper	EB	2	2  
 4667 D1:DB46 -  -  -  -  ;Map this to instruction $E9 (inst6502_sbc_imm)
 4668 D1:DB46 -  -  -  -  
 4669 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4670 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4671 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4672 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4673 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4674 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4675 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4676 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4677 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4678 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4679 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4680 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4681 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4682 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4683 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4684 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4685 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4686 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4687 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4688 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4689 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4690 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4691 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4692 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4693 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4694 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4695 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4696 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4697 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4698 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4699 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4700 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4701 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4702 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4703 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4704 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4705 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4706 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4707 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4708 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4709 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4710 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4711 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4712 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4713 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4714 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4715 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4716 D1:DB46 -  -  -  -  ;-----------------------------------------------------------------------------
 4717 D1:DB46 -  -  -  -  
 4718 D1:DB46 -  -  -  -  inst6502_instruction_set:
 4719 D1:DB46 7D CD D1 -  .dl	inst6502_brk					;00
 4720 D1:DB49 28 C6 D1 -  .dl	inst6502_ora_indx				;01
 4721 D1:DB4C 4D DE D1 -  .dl	inst6502_jam_02 				;02
 4722 D1:DB4F DC D8 D1 -  .dl	isnt6502_slo_indx				;03
 4723 D1:DB52 1B CF D1 -  .dl	inst6502_nop_zp 				;04
 4724 D1:DB55 43 C5 D1 -  .dl	inst6502_ora_zp					;05
 4725 D1:DB58 E0 C6 D1 -  .dl	inst6502_asl_zp					;06
 4726 D1:DB5B C0 D7 D1 -  .dl	inst6502_slo_zp 				;07
 4727 D1:DB5E 69 BE D1 -  .dl	inst6502_php					;08
 4728 D1:DB61 21 C5 D1 -  .dl	inst6502_ora_imm				;09
 4729 D1:DB64 B7 C6 D1 -  .dl	inst6502_asl					;0A
 4730 D1:DB67 74 CF D1 -  .dl	instr6502_anc_imm				;0B
 4731 D1:DB6A 29 CF D1 -  .dl	inst6502_nop_abs				;0C
 4732 D1:DB6D 98 C5 D1 -  .dl	inst6502_ora_abs				;0D
 4733 D1:DB70 3B C7 D1 -  .dl	inst6502_asl_abs				;0E
 4734 D1:DB73 25 D8 D1 -  .dl	inst6502_slo_abs				;0F
 4735 D1:DB76 50 CD D1 -  .dl	inst6502_bpl					;10
 4736 D1:DB79 6C C6 D1 -  .dl	inst6502_ora_indy				;11
 4737 D1:DB7C 47 DE D1 -  .dl	inst6502_jam_12_halt			;12 JAM. Used to halt emulation for inspection
 4738 D1:DB7F 2D D9 D1 -  .dl	inst6502_slo_indy				;13
 4739 D1:DB82 22 CF D1 -  .dl	inst6502_nop_zpx				;14
 4740 D1:DB85 6C C5 D1 -  .dl	inst6502_ora_zpx				;15
 4741 D1:DB88 0C C7 D1 -  .dl	inst6502_asl_zpx				;16
 4742 D1:DB8B F1 D7 D1 -  .dl	inst6502_slo_zpx				;17
 4743 D1:DB8E C1 CA D1 -  .dl	inst6502_clc					;18
 4744 D1:DB91 FE C5 D1 -  .dl	inst6502_ora_absy				;19
 4745 D1:DB94 0D CF D1 -  .dl	inst6502_nop_implied    		;1A
 4746 D1:DB97 A5 D8 D1 -  .dl	inst6502_slo_absy				;1B
 4747 D1:DB9A 3A CF D1 -  .dl	inst6502_nop_absx				;1C
 4748 D1:DB9D D4 C5 D1 -  .dl	inst6502_ora_absx				;1D
 4749 D1:DBA0 7F C7 D1 -  .dl	inst6502_asl_absx				;1E
 4750 D1:DBA3 6E D8 D1 -  .dl	inst6502_slo_absx				;1F
 4751 D1:DBA6 75 CE D1 -  .dl	inst6502_jsr					;20
 4752 D1:DBA9 FC C2 D1 -  .dl	inst6502_and_indx				;21
 4753 D1:DBAC 4D DE D1 -  .dl	inst6502_jam_22 				;22
 4754 D1:DBAF A2 D4 D1 -  .dl	isnt6502_rla_indx				;23
 4755 D1:DBB2 C1 CE D1 -  .dl	inst6502_bit_zp					;24
 4756 D1:DBB5 17 C2 D1 -  .dl	inst6502_and_zp					;25
 4757 D1:DBB8 D7 C8 D1 -  .dl	inst6502_rol_zp					;26
 4758 D1:DBBB 74 D3 D1 -  .dl	inst6502_rla_zp 				;27
 4759 D1:DBBE AB BE D1 -  .dl	inst6502_plp					;28
 4760 D1:DBC1 F5 C1 D1 -  .dl	inst6502_and_imm				;29
 4761 D1:DBC4 AB C8 D1 -  .dl	inst6502_rol					;2A
 4762 D1:DBC7 74 CF D1 -  .dl	instr6502_anc2_imm				;2B
 4763 D1:DBCA E5 CE D1 -  .dl	inst6502_bit_abs				;2C
 4764 D1:DBCD 6C C2 D1 -  .dl	inst6502_and_abs				;2D
 4765 D1:DBD0 38 C9 D1 -  .dl	inst6502_rol_abs				;2E
 4766 D1:DBD3 DF D3 D1 -  .dl	inst6502_rla_abs				;2F
 4767 D1:DBD6 32 CD D1 -  .dl	inst6502_bmi					;30
 4768 D1:DBD9 40 C3 D1 -  .dl	inst6502_and_indy				;31
 4769 D1:DBDC 4D DE D1 -  .dl	inst6502_jam_32 				;32
 4770 D1:DBDF F7 D4 D1 -  .dl	inst6502_rla_indy				;33
 4771 D1:DBE2 22 CF D1 -  .dl	inst6502_nop_zpx				;34
 4772 D1:DBE5 40 C2 D1 -  .dl	inst6502_and_zpx				;35
 4773 D1:DBE8 06 C9 D1 -  .dl	inst6502_rol_zpx				;36
 4774 D1:DBEB A8 D3 D1 -  .dl	inst6502_rla_zpx				;37
 4775 D1:DBEE ED CA D1 -  .dl	inst6502_sec					;38
 4776 D1:DBF1 D2 C2 D1 -  .dl	inst6502_and_absy				;39
 4777 D1:DBF4 0D CF D1 -  .dl	inst6502_nop_implied			;3A
 4778 D1:DBF7 67 D4 D1 -  .dl	inst6502_rla_absy   			;3B
 4779 D1:DBFA 3A CF D1 -  .dl	inst6502_nop_absx   			;3C
 4780 D1:DBFD A8 C2 D1 -  .dl	inst6502_and_absx				;3D
 4781 D1:DC00 80 C9 D1 -  .dl	inst6502_rol_absx				;3E
 4782 D1:DC03 2C D4 D1 -  .dl	inst6502_rla_absx   			;3F
 4783 D1:DC06 B9 CD D1 -  .dl	inst6502_rti					;40
 4784 D1:DC09 92 C4 D1 -  .dl	inst6502_eor_indx				;41
 4785 D1:DC0C 4D DE D1 -  .dl	inst6502_jam_42     			;42
 4786 D1:DC0F 9F DA D1 -  .dl	isnt6502_sre_indx   			;43
 4787 D1:DC12 1B CF D1 -  .dl	inst6502_nop_zp     			;44
 4788 D1:DC15 AD C3 D1 -  .dl	inst6502_eor_zp					;45
 4789 D1:DC18 DA C7 D1 -  .dl	inst6502_lsr_zp					;46
 4790 D1:DC1B 83 D9 D1 -  .dl	inst6502_sre_zp     			;47
 4791 D1:DC1E 53 BE D1 -  .dl	inst6502_pha					;48
 4792 D1:DC21 8B C3 D1 -  .dl	inst6502_eor_imm				;49
 4793 D1:DC24 B1 C7 D1 -  .dl	inst6502_lsr					;4A
 4794 D1:DC27 4A CF D1 -  .dl	inst6502_alr_imm    			;4B
 4795 D1:DC2A DE CD D1 -  .dl	inst6052_jmp_abs				;4C
 4796 D1:DC2D 02 C4 D1 -  .dl	inst6502_eor_abs				;4D
 4797 D1:DC30 35 C8 D1 -  .dl	inst6502_lsr_abs				;4E
 4798 D1:DC33 E8 D9 D1 -  .dl	inst6502_sre_abs    			;4F
 4799 D1:DC36 5F CD D1 -  .dl	inst6502_bvc					;50
 4800 D1:DC39 D6 C4 D1 -  .dl	inst6502_eor_indy				;51
 4801 D1:DC3C 4D DE D1 -  .dl	inst6502_jam_52     			;52
 4802 D1:DC3F F0 DA D1 -  .dl	inst6502_sre_indy   			;53
 4803 D1:DC42 22 CF D1 -  .dl	inst6502_nop_zpx    			;54
 4804 D1:DC45 D6 C3 D1 -  .dl	inst6502_eor_zpx				;55
 4805 D1:DC48 06 C8 D1 -  .dl	inst6502_lsr_zpx				;56
 4806 D1:DC4B B4 D9 D1 -  .dl	inst6502_sre_zpx    			;57
 4807 D1:DC4E D7 CA D1 -  .dl	inst6502_cli					;58
 4808 D1:DC51 68 C4 D1 -  .dl	inst6502_eor_absy				;59
 4809 D1:DC54 0D CF D1 -  .dl	inst6502_nop_implied			;5A
 4810 D1:DC57 68 DA D1 -  .dl	inst6502_sre_absy   			;5B
 4811 D1:DC5A 3A CF D1 -  .dl	inst6502_nop_absx   			;5C
 4812 D1:DC5D 3E C4 D1 -  .dl	inst6502_eor_absx				;5D
 4813 D1:DC60 79 C8 D1 -  .dl	inst6502_lsr_absx				;5E
 4814 D1:DC63 31 DA D1 -  .dl	inst6502_sre_absx   			;5F
 4815 D1:DC66 A7 CE D1 -  .dl	inst6502_rts					;60
 4816 D1:DC69 CB C0 D1 -  .dl	inst6502_adc_indx				;61
 4817 D1:DC6C 4D DE D1 -  .dl	inst6502_jam_62     			;62
 4818 D1:DC6F 1E D6 D1 -  .dl	isnt6502_rra_indx   			;63
 4819 D1:DC72 1B CF D1 -  .dl	inst6502_nop_zp     			;64
 4820 D1:DC75 63 C0 D1 -  .dl	inst6502_adc_zp					;65
 4821 D1:DC78 E2 C9 D1 -  .dl	inst6502_ror_zp					;66
 4822 D1:DC7B 51 D5 D1 -  .dl	inst6502_rra_zp     			;67
 4823 D1:DC7E 81 BE D1 -  .dl	inst6502_pla					;68
 4824 D1:DC81 5B C0 D1 -  .dl	inst6502_adc_imm				;69
 4825 D1:DC84 B6 C9 D1 -  .dl	inst6502_ror					;6A
 4826 D1:DC87 C1 CF D1 -  .dl	instr6502_arr_imm   			;6B
 4827 D1:DC8A 2B CE D1 -  .dl	inst6502_jmp_indir				;6C
 4828 D1:DC8D 86 C0 D1 -  .dl	inst6502_adc_abs				;6D
 4829 D1:DC90 43 CA D1 -  .dl	inst6502_ror_abs				;6E
 4830 D1:DC93 94 D5 D1 -  .dl	inst6502_rra_abs    			;6F
 4831 D1:DC96 6E CD D1 -  .dl	inst6502_bvs					;70
 4832 D1:DC99 F6 C0 D1 -  .dl	inst6502_adc_indy				;71
 4833 D1:DC9C 4D DE D1 -  .dl	inst6502_jam_72     			;72
 4834 D1:DC9F 60 D6 D1 -  .dl	inst6502_rra_indy   			;73
 4835 D1:DCA2 22 CF D1 -  .dl	inst6502_nop_zpx    			;74
 4836 D1:DCA5 73 C0 D1 -  .dl	inst6502_adc_zpx				;75
 4837 D1:DCA8 11 CA D1 -  .dl	inst6502_ror_zpx				;76
 4838 D1:DCAB 71 D5 D1 -  .dl	inst6502_rra_zpx    			;77
 4839 D1:DCAE 03 CB D1 -  .dl	inst6502_sei					;78
 4840 D1:DCB1 BA C0 D1 -  .dl	inst6502_adc_absy				;79
 4841 D1:DCB4 0D CF D1 -  .dl	inst6502_nop_implied			;7A
 4842 D1:DCB7 F6 D5 D1 -  .dl	inst6502_rra_absy   			;7B
 4843 D1:DCBA 3A CF D1 -  .dl	inst6502_nop_absx   			;7C
 4844 D1:DCBD A9 C0 D1 -  .dl	inst6502_adc_absx				;7D
 4845 D1:DCC0 8B CA D1 -  .dl	inst6502_ror_absx				;7E
 4846 D1:DCC3 CE D5 D1 -  .dl	inst6502_rra_absx   			;7F
 4847 D1:DCC6 14 CF D1 -  .dl	inst6502_nop_imm    			;80
 4848 D1:DCC9 AA BC D1 -  .dl	inst6502_sta_indx				;81
 4849 D1:DCCC 14 CF D1 -  .dl	inst6502_nop_imm    			;82
 4850 D1:DCCF FD D6 D1 -  .dl	inst6502_sax_indx   			;83
 4851 D1:DCD2 55 BD D1 -  .dl	inst6502_sty_zp					;84
 4852 D1:DCD5 38 BC D1 -  .dl	inst6502_sta_zp					;85
 4853 D1:DCD8 09 BD D1 -  .dl	inst6502_stx_zp					;86
 4854 D1:DCDB A7 D6 D1 -  .dl	inst6502_sax_zp     			;87
 4855 D1:DCDE 99 BF D1 -  .dl	inst6502_dey					;88
 4856 D1:DCE1 14 CF D1 -  .dl	inst6502_nop_imm    			;89
 4857 D1:DCE4 04 BE D1 -  .dl	inst6502_txa					;8A
 4858 D1:DCE7 9A CF D1 -  .dl	instr6502_ane_imm   			;8B
 4859 D1:DCEA 7C BD D1 -  .dl	inst6502_sty_abs				;8C
 4860 D1:DCED 5F BC D1 -  .dl	inst6502_sta_abs				;8D
 4861 D1:DCF0 30 BD D1 -  .dl	inst6502_stx_abs				;8E
 4862 D1:DCF3 D4 D6 D1 -  .dl	inst6502_sax_abs    			;8F
 4863 D1:DCF6 05 CD D1 -  .dl	inst6502_bcc					;90
 4864 D1:DCF9 D7 BC D1 -  .dl	inst6502_sta_indy				;91
 4865 D1:DCFC 4D DE D1 -  .dl	inst6502_jam_92     			;92
 4866 D1:DCFF 65 D7 D1 -  .dl	inst6502_sha_indy   			;93
 4867 D1:DD02 67 BD D1 -  .dl	inst6502_sty_zpx				;94
 4868 D1:DD05 4A BC D1 -  .dl	inst6502_sta_zpx				;95
 4869 D1:DD08 1B BD D1 -  .dl	inst6502_stx_zpy				;96
 4870 D1:DD0B BC D6 D1 -  .dl	inst6502_sax_zpy    			;97
 4871 D1:DD0E 32 BE D1 -  .dl	inst6502_tya					;98
 4872 D1:DD11 97 BC D1 -  .dl	inst6502_sta_absy				;99
 4873 D1:DD14 25 BE D1 -  .dl	inst6502_txs					;9A
 4874 D1:DD17 B2 D7 D1 -  .dl	inst6502_tas_absy   			;9B
 4875 D1:DD1A A4 D7 D1 -  .dl	inst6502_shy_absx   			;9C
 4876 D1:DD1D 84 BC D1 -  .dl	inst6502_sta_absx				;9D
 4877 D1:DD20 96 D7 D1 -  .dl	inst6502_shx_absy   			;9E
 4878 D1:DD23 57 D7 D1 -  .dl	inst6502_sha_absy   			;9F
 4879 D1:DD26 6A BB D1 -  .dl	inst6502_ldy_imm				;A0
 4880 D1:DD29 13 BA D1 -  .dl	inst6502_lda_indx				;A1
 4881 D1:DD2C 9C BA D1 -  .dl	inst6502_ldx_imm				;A2
 4882 D1:DD2F BE D2 D1 -  .dl	inst6502_lax_indx   			;A3
 4883 D1:DD32 89 BB D1 -  .dl	inst6502_ldy_zp					;A4
 4884 D1:DD35 3D B9 D1 -  .dl	inst6502_lda_zp					;A5
 4885 D1:DD38 BB BA D1 -  .dl	inst6502_ldx_zp					;A6
 4886 D1:DD3B 03 D2 D1 -  .dl	inst6502_lax_zp     			;A7
 4887 D1:DD3E C2 BD D1 -  .dl	inst6502_tay					;A8
 4888 D1:DD41 1E B9 D1 -  .dl	inst6502_lda_imm				;A9
 4889 D1:DD44 A1 BD D1 -  .dl	inst6502_tax					;AA
 4890 D1:DD47 4D D3 D1 -  .dl	inst6502_lxa        			;AB
 4891 D1:DD4A D8 BB D1 -  .dl	inst6502_ldy_abs				;AC
 4892 D1:DD4D 8C B9 D1 -  .dl	inst6502_lda_abs				;AD
 4893 D1:DD50 0A BB D1 -  .dl	inst6502_ldx_abs				;AE
 4894 D1:DD53 58 D2 D1 -  .dl	inst6502_lax_abs    			;AF
 4895 D1:DD56 14 CD D1 -  .dl	inst6502_bcs					;B0
 4896 D1:DD59 54 BA D1 -  .dl	inst6502_lda_indy				;B1
 4897 D1:DD5C 4D DE D1 -  .dl	inst6502_jam_B2     			;B2
 4898 D1:DD5F 02 D3 D1 -  .dl	inst6502_lax_indy   			;B3
 4899 D1:DD62 AF BB D1 -  .dl	inst6502_ldy_zpx				;B4
 4900 D1:DD65 63 B9 D1 -  .dl	inst6502_lda_zpx				;B5
 4901 D1:DD68 E1 BA D1 -  .dl	inst6502_ldx_zpy				;B6
 4902 D1:DD6B 2C D2 D1 -  .dl	inst6502_lax_zpy    			;B7
 4903 D1:DD6E E2 CA D1 -  .dl	inst6502_clv					;B8
 4904 D1:DD71 EC B9 D1 -  .dl	inst6502_lda_absy				;B9
 4905 D1:DD74 E3 BD D1 -  .dl	inst6502_tsx					;BA
 4906 D1:DD77 D3 D1 D1 -  .dl	inst6502_las_absy   			;BB
 4907 D1:DD7A 11 BC D1 -  .dl	inst6502_ldy_absx				;BC
 4908 D1:DD7D C5 B9 D1 -  .dl	inst6502_lda_absx				;BD
 4909 D1:DD80 43 BB D1 -  .dl	inst6502_ldx_absy				;BE
 4910 D1:DD83 94 D2 D1 -  .dl	inst6502_lax_absy   			;BF
 4911 D1:DD86 6E CC D1 -  .dl	inst6502_cpy_imm				;C0
 4912 D1:DD89 7C CB D1 -  .dl	inst6502_cmp_indx				;C1
 4913 D1:DD8C 14 CF D1 -  .dl	inst6502_nop_imm    			;C2
 4914 D1:DD8F 7B D0 D1 -  .dl	inst6502_dcp_indx   			;C3
 4915 D1:DD92 94 CC D1 -  .dl	inst6502_cpy_zp					;C4
 4916 D1:DD95 16 CB D1 -  .dl	inst6502_cmp_zp					;C5
 4917 D1:DD98 C8 BE D1 -  .dl	inst6502_dec_zp					;C6
 4918 D1:DD9B FA CF D1 -  .dl	inst6502_dcp_zp     			;C7
 4919 D1:DD9E A3 BF D1 -  .dl	inst6502_iny					;C8
 4920 D1:DDA1 0E CB D1 -  .dl	inst6502_cmp_imm				;C9
 4921 D1:DDA4 7B BF D1 -  .dl	inst6502_dex					;CA
 4922 D1:DDA7 2E D7 D1 -  .dl	inst6502_sbx_imm    			;CB
 4923 D1:DDAA C3 CC D1 -  .dl	inst6502_cpy_abs				;CC
 4924 D1:DDAD 37 CB D1 -  .dl	inst6502_cmp_abs				;CD
 4925 D1:DDB0 15 BF D1 -  .dl	inst6502_dec_abs				;CE
 4926 D1:DDB3 21 D0 D1 -  .dl	inst6502_dcp_abs    			;CF
 4927 D1:DDB6 41 CD D1 -  .dl	inst6502_bne					;D0
 4928 D1:DDB9 A7 CB D1 -  .dl	inst6502_cmp_indy				;D1
 4929 D1:DDBC 4D DE D1 -  .dl	inst6502_jam_D2     			;D2
 4930 D1:DDBF AD D0 D1 -  .dl	inst6502_dcp_indy   			;D3
 4931 D1:DDC2 22 CF D1 -  .dl	inst6502_nop_zpx    			;D4
 4932 D1:DDC5 24 CB D1 -  .dl	inst6502_cmp_zpx				;D5
 4933 D1:DDC8 ED BE D1 -  .dl	inst6502_dec_zpx				;D6
 4934 D1:DDCB 0C D0 D1 -  .dl	inst6520_dcp_zpx    			;D7
 4935 D1:DDCE CC CA D1 -  .dl	inst6502_cld					;D8
 4936 D1:DDD1 6B CB D1 -  .dl	inst6502_cmp_absy				;D9
 4937 D1:DDD4 0D CF D1 -  .dl	inst6502_nop_implied			;DA
 4938 D1:DDD7 63 D0 D1 -  .dl	inst6502_dcp_absy   			;DB
 4939 D1:DDDA 3A CF D1 -  .dl	inst6502_nop_absx   			;DC
 4940 D1:DDDD 5A CB D1 -  .dl	inst6502_cmp_absx				;DD
 4941 D1:DDE0 51 BF D1 -  .dl	inst6502_dec_absx				;DE
 4942 D1:DDE3 4B D0 D1 -  .dl	inst6502_dcp_absx   			;DF
 4943 D1:DDE6 D9 CB D1 -  .dl	inst6502_cpx_imm				;E0
 4944 D1:DDE9 98 C1 D1 -  .dl	inst6502_sbc_indx				;E1
 4945 D1:DDEC 14 CF D1 -  .dl	inst6502_nop_imm    			;E2
 4946 D1:DDEF 68 D1 D1 -  .dl	inst6502_isc_indx   			;E3
 4947 D1:DDF2 FF CB D1 -  .dl	inst6502_cpx_zp					;E4
 4948 D1:DDF5 30 C1 D1 -  .dl	inst6502_sbc_zp					;E5
 4949 D1:DDF8 A8 BF D1 -  .dl	inst6502_inc_zp					;E6
 4950 D1:DDFB E4 D0 D1 -  .dl	inst6502_isc_zp     			;E7
 4951 D1:DDFE 9E BF D1 -  .dl	inst6502_inx					;E8
 4952 D1:DE01 28 C1 D1 -  .dl	inst6502_sbc_imm				;E9
 4953 D1:DE04 06 CF D1 -  .dl	inst6502_nop					;EA
 4954 D1:DE07 28 C1 D1 -  .dl	inst6502_sbc_imm			    ;EB *DUPLICATE OF E9
 4955 D1:DE0A 2C CC D1 -  .dl	inst6502_cpx_abs				;EC
 4956 D1:DE0D 53 C1 D1 -  .dl	inst6502_sbc_abs				;ED
 4957 D1:DE10 F5 BF D1 -  .dl	inst6502_inc_abs				;EE
 4958 D1:DE13 0B D1 D1 -  .dl	inst6502_isc_abs    			;EF
 4959 D1:DE16 23 CD D1 -  .dl	inst6502_beq					;F0
 4960 D1:DE19 C3 C1 D1 -  .dl	inst6502_sbc_indy				;F1
 4961 D1:DE1C 4D DE D1 -  .dl	inst6502_jam_F2     			;F2
 4962 D1:DE1F 9B D1 D1 -  .dl	inst6502_isc_indy   			;F3
 4963 D1:DE22 22 CF D1 -  .dl	inst6502_nop_zpx    			;F4
 4964 D1:DE25 40 C1 D1 -  .dl	inst6502_sbc_zpx				;F5
 4965 D1:DE28 CD BF D1 -  .dl	inst6502_inc_zpx				;F6
 4966 D1:DE2B F6 D0 D1 -  .dl	inst6520_isc_zpx    			;F7
 4967 D1:DE2E F8 CA D1 -  .dl	inst6502_sed					;F8
 4968 D1:DE31 87 C1 D1 -  .dl	inst6502_sbc_absy				;F9
 4969 D1:DE34 0D CF D1 -  .dl	inst6502_nop_implied			;FA
 4970 D1:DE37 4F D1 D1 -  .dl	inst6502_isc_absy   			;FB
 4971 D1:DE3A 3A CF D1 -  .dl	inst6502_nop_absx   			;FC
 4972 D1:DE3D 76 C1 D1 -  .dl	inst6502_sbc_absx				;FD
 4973 D1:DE40 31 C0 D1 -  .dl	inst6502_inc_absx				;FE
 4974 D1:DE43 36 D1 D1 -  .dl	inst6502_isc_absx   			;FF
 4975 D1:DE46 -  -  -  -  
 4976 D1:DE46 -  -  -  -  ;-----------------------------------------------------------------------------
 4977 D1:DE46 -  -  -  -  ;-----------------------------------------------------------------------------
 4978 D1:DE46 -  -  -  -  ;-----------------------------------------------------------------------------
 4979 D1:DE46 -  -  -  -  ;These instructions are located here because they perform a function outside
 4980 D1:DE46 -  -  -  -  ;the context of emulating instructions. These are mapped to instructions that
 4981 D1:DE46 -  -  -  -  ;would, on the real hardware, freeze the CPU and require a reset to continue.
 4982 D1:DE46 -  -  -  -  ;
 4983 D1:DE46 -  -  -  -  ;Here, they'll let us perform useful things. Like exiting the emulator.
 4984 D1:DE46 -  -  -  -  ;Or jamming in one spot. Or other things in the future. Debugging things.
 4985 D1:DE46 -  -  -  -  ;Future stuff like breakpoints and console output. That sorta thing.
 4986 D1:DE46 -  -  -  -  ;
 4987 D1:DE46 -  -  -  -  
 4988 D1:DE46 -  -  -  -  inst6502_:
 4989 D1:DE46 C9 -  -  -      ret
 4990 D1:DE47 -  -  -  -  
 4991 D1:DE47 -  -  -  -  inst6502_jam_12_halt:
 4992 D1:DE47 18 FE -  -      jr $
 4993 D1:DE49 C3 14 B7 D1     jp i6502FinishLoad
 4994 D1:DE4D -  -  -  -  
 4995 D1:DE4D -  -  -  -  inst6502_jam_02:
 4996 D1:DE4D -  -  -  -  inst6502_jam_22:
 4997 D1:DE4D -  -  -  -  inst6502_jam_32:
 4998 D1:DE4D -  -  -  -  inst6502_jam_42:
 4999 D1:DE4D -  -  -  -  inst6502_jam_52:
 5000 D1:DE4D -  -  -  -  inst6502_jam_62:
 5001 D1:DE4D -  -  -  -  inst6502_jam_72:
 5002 D1:DE4D -  -  -  -  inst6502_jam_92:
 5003 D1:DE4D -  -  -  -  inst6502_jam_B2:
 5004 D1:DE4D -  -  -  -  inst6502_jam_D2:
 5005 D1:DE4D -  -  -  -  inst6502_jam_F2:
 5006 D1:DE4D C9 -  -  -      ret
 5007 D1:DE4E -  -  -  -  
 5008 D1:DE4E -  -  -  -  
 5009 D1:DE4E -  -  -  -  
 5010 D1:DE4E -  -  -  -  
 5011 D1:DE4E -  -  -  -  
 5012 D1:DE4E -  -  -  -  
 5013 D1:DE4E -  -  -  -  
 5014 D1:DE4E -  -  -  -  
 5015 D1:DE4E -  -  -  -  
 5016 D1:DE4E -  -  -  -  
 5017 D1:DE4E -  -  -  -  
 5018 D1:DE4E -  -  -  -  
 5019 D1:DE4E -  -  -  -  
Listing for file "main.z80"
  973 D1:DE4E -  -  -  -  #include "debug.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    1 D1:DE4E -  -  -  -  ;This has all the tables needed to drive the debugger.
    2 D1:DE4E -  -  -  -  #include "debug_itab.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug_itab.z80"
    1 D1:DE4E -  -  -  -  inst6502_opcode_width_table:
    2 D1:DE4E 01 -  -  -  .db 1    ;0: 
    3 D1:DE4F 02 -  -  -  .db 2    ;1: zpg,X
    4 D1:DE50 03 -  -  -  .db 3    ;2: ind
    5 D1:DE51 03 -  -  -  .db 3    ;3: abs
    6 D1:DE52 03 -  -  -  .db 3    ;4: abs,X
    7 D1:DE53 02 -  -  -  .db 2    ;5: X,ind
    8 D1:DE54 01 -  -  -  .db 1    ;6: A
    9 D1:DE55 02 -  -  -  .db 2    ;7: zpg
   10 D1:DE56 02 -  -  -  .db 2    ;8: rel
   11 D1:DE57 02 -  -  -  .db 2    ;9: #
   12 D1:DE58 01 -  -  -  .db 1    ;10: impl
   13 D1:DE59 02 -  -  -  .db 2    ;11: ind,Y
   14 D1:DE5A 03 -  -  -  .db 3    ;12: abs,Y
   15 D1:DE5B 02 -  -  -  .db 2    ;13: zpg,Y
   16 D1:DE5C -  -  -  -  
   17 D1:DE5C -  -  -  -  
   18 D1:DE5C -  -  -  -  ;Note: 1=1byteOper, 2=2byteOper, -=1byteRelOper. Other chrs are literal
   19 D1:DE5C -  -  -  -  
   20 D1:DE5C -  -  -  -  inst6502_disassembler:
   21 D1:DE5C 01 -  -  -  .db 1,""  ;
   22 D1:DE5D 04 31 2C 58 .db 4,"1,X"  ;
   23 D1:DE61 04 28 32 29 .db 4,"(2)"  ;
   24 D1:DE65 02 32 -  -  .db 2,"2"  ;
   25 D1:DE67 04 32 2C 58 .db 4,"2,X"  ;
   26 D1:DE6B 06 28 31 2C 
              58 29 -  -  .db 6,"(1,X)"  ;
   27 D1:DE71 02 41 -  -  .db 2,"A"  ;
   28 D1:DE73 02 31 -  -  .db 2,"1"  ;
   29 D1:DE75 02 2D -  -  .db 2,"-"  ;
   30 D1:DE77 03 23 31 -  .db 3,"#1"  ;
   31 D1:DE7A 01 -  -  -  .db 1,""  ;
   32 D1:DE7B 06 28 31 29 
              2C 59 -  -  .db 6,"(1),Y"  ;
   33 D1:DE81 04 32 2C 59 .db 4,"2,Y"  ;
   34 D1:DE85 04 31 2C 59 .db 4,"1,Y"  ;
   35 D1:DE89 -  -  -  -  
   36 D1:DE89 -  -  -  -  inst6502_disassembly_table:
   37 D1:DE89 42 52 4B 0A .db "BRK", 10     ;0x00
   38 D1:DE8D 4F 52 41 05 .db "ORA", 5     ;0x01
   39 D1:DE91 4A 41 4D 00 .db "JAM", 0     ;0x02
   40 D1:DE95 53 4C 4F 05 .db "SLO", 5     ;0x03
   41 D1:DE99 4E 4F 50 07 .db "NOP", 7     ;0x04
   42 D1:DE9D 4F 52 41 07 .db "ORA", 7     ;0x05
   43 D1:DEA1 41 53 4C 07 .db "ASL", 7     ;0x06
   44 D1:DEA5 53 4C 4F 07 .db "SLO", 7     ;0x07
   45 D1:DEA9 50 48 50 0A .db "PHP", 10     ;0x08
   46 D1:DEAD 4F 52 41 09 .db "ORA", 9     ;0x09
   47 D1:DEB1 41 53 4C 06 .db "ASL", 6     ;0x0A
   48 D1:DEB5 41 4E 43 09 .db "ANC", 9     ;0x0B
   49 D1:DEB9 4E 4F 50 03 .db "NOP", 3     ;0x0C
   50 D1:DEBD 4F 52 41 03 .db "ORA", 3     ;0x0D
   51 D1:DEC1 41 53 4C 03 .db "ASL", 3     ;0x0E
   52 D1:DEC5 53 4C 4F 03 .db "SLO", 3     ;0x0F
   53 D1:DEC9 42 50 4C 08 .db "BPL", 8     ;0x10
   54 D1:DECD 4F 52 41 0B .db "ORA", 11     ;0x11
   55 D1:DED1 4A 41 4D 00 .db "JAM", 0     ;0x12
   56 D1:DED5 53 4C 4F 0B .db "SLO", 11     ;0x13
   57 D1:DED9 4E 4F 50 01 .db "NOP", 1     ;0x14
   58 D1:DEDD 4F 52 41 01 .db "ORA", 1     ;0x15
   59 D1:DEE1 41 53 4C 01 .db "ASL", 1     ;0x16
   60 D1:DEE5 53 4C 4F 01 .db "SLO", 1     ;0x17
   61 D1:DEE9 43 4C 43 0A .db "CLC", 10     ;0x18
   62 D1:DEED 4F 52 41 0C .db "ORA", 12     ;0x19
   63 D1:DEF1 4E 4F 50 0A .db "NOP", 10     ;0x1A
   64 D1:DEF5 53 4C 4F 0C .db "SLO", 12     ;0x1B
   65 D1:DEF9 4E 4F 50 04 .db "NOP", 4     ;0x1C
   66 D1:DEFD 4F 52 41 04 .db "ORA", 4     ;0x1D
   67 D1:DF01 41 53 4C 04 .db "ASL", 4     ;0x1E
   68 D1:DF05 53 4C 4F 04 .db "SLO", 4     ;0x1F
   69 D1:DF09 4A 53 52 03 .db "JSR", 3     ;0x20
   70 D1:DF0D 41 4E 44 05 .db "AND", 5     ;0x21
   71 D1:DF11 4A 41 4D 00 .db "JAM", 0     ;0x22
   72 D1:DF15 52 4C 41 05 .db "RLA", 5     ;0x23
   73 D1:DF19 42 49 54 07 .db "BIT", 7     ;0x24
   74 D1:DF1D 41 4E 44 07 .db "AND", 7     ;0x25
   75 D1:DF21 52 4F 4C 07 .db "ROL", 7     ;0x26
   76 D1:DF25 52 4C 41 07 .db "RLA", 7     ;0x27
   77 D1:DF29 50 4C 50 0A .db "PLP", 10     ;0x28
   78 D1:DF2D 41 4E 44 09 .db "AND", 9     ;0x29
   79 D1:DF31 52 4F 4C 06 .db "ROL", 6     ;0x2A
   80 D1:DF35 41 4E 43 09 .db "ANC", 9     ;0x2B
   81 D1:DF39 42 49 54 03 .db "BIT", 3     ;0x2C
   82 D1:DF3D 41 4E 44 03 .db "AND", 3     ;0x2D
   83 D1:DF41 52 4F 4C 03 .db "ROL", 3     ;0x2E
   84 D1:DF45 52 4C 41 03 .db "RLA", 3     ;0x2F
   85 D1:DF49 42 4D 49 08 .db "BMI", 8     ;0x30
   86 D1:DF4D 41 4E 44 0B .db "AND", 11     ;0x31
   87 D1:DF51 4A 41 4D 00 .db "JAM", 0     ;0x32
   88 D1:DF55 52 4C 41 0B .db "RLA", 11     ;0x33
   89 D1:DF59 4E 4F 50 01 .db "NOP", 1     ;0x34
   90 D1:DF5D 41 4E 44 01 .db "AND", 1     ;0x35
   91 D1:DF61 52 4F 4C 01 .db "ROL", 1     ;0x36
   92 D1:DF65 52 4C 41 01 .db "RLA", 1     ;0x37
   93 D1:DF69 53 45 43 0A .db "SEC", 10     ;0x38
   94 D1:DF6D 41 4E 44 0C .db "AND", 12     ;0x39
   95 D1:DF71 4E 4F 50 0A .db "NOP", 10     ;0x3A
   96 D1:DF75 52 4C 41 0C .db "RLA", 12     ;0x3B
   97 D1:DF79 4E 4F 50 04 .db "NOP", 4     ;0x3C
   98 D1:DF7D 41 4E 44 04 .db "AND", 4     ;0x3D
   99 D1:DF81 52 4F 4C 04 .db "ROL", 4     ;0x3E
  100 D1:DF85 52 4C 41 04 .db "RLA", 4     ;0x3F
  101 D1:DF89 52 54 49 0A .db "RTI", 10     ;0x40
  102 D1:DF8D 45 4F 52 05 .db "EOR", 5     ;0x41
  103 D1:DF91 4A 41 4D 00 .db "JAM", 0     ;0x42
  104 D1:DF95 53 52 45 05 .db "SRE", 5     ;0x43
  105 D1:DF99 4E 4F 50 07 .db "NOP", 7     ;0x44
  106 D1:DF9D 45 4F 52 07 .db "EOR", 7     ;0x45
  107 D1:DFA1 4C 53 52 07 .db "LSR", 7     ;0x46
  108 D1:DFA5 53 52 45 07 .db "SRE", 7     ;0x47
  109 D1:DFA9 50 48 41 0A .db "PHA", 10     ;0x48
  110 D1:DFAD 45 4F 52 09 .db "EOR", 9     ;0x49
  111 D1:DFB1 4C 53 52 06 .db "LSR", 6     ;0x4A
  112 D1:DFB5 41 4C 52 09 .db "ALR", 9     ;0x4B
  113 D1:DFB9 4A 4D 50 03 .db "JMP", 3     ;0x4C
  114 D1:DFBD 45 4F 52 03 .db "EOR", 3     ;0x4D
  115 D1:DFC1 4C 53 52 03 .db "LSR", 3     ;0x4E
  116 D1:DFC5 53 52 45 03 .db "SRE", 3     ;0x4F
  117 D1:DFC9 42 56 43 08 .db "BVC", 8     ;0x50
  118 D1:DFCD 45 4F 52 0B .db "EOR", 11     ;0x51
  119 D1:DFD1 4A 41 4D 00 .db "JAM", 0     ;0x52
  120 D1:DFD5 53 52 45 0B .db "SRE", 11     ;0x53
  121 D1:DFD9 4E 4F 50 01 .db "NOP", 1     ;0x54
  122 D1:DFDD 45 4F 52 01 .db "EOR", 1     ;0x55
  123 D1:DFE1 4C 53 52 01 .db "LSR", 1     ;0x56
  124 D1:DFE5 53 52 45 01 .db "SRE", 1     ;0x57
  125 D1:DFE9 43 4C 49 0A .db "CLI", 10     ;0x58
  126 D1:DFED 45 4F 52 0C .db "EOR", 12     ;0x59
  127 D1:DFF1 4E 4F 50 0A .db "NOP", 10     ;0x5A
  128 D1:DFF5 53 52 45 0C .db "SRE", 12     ;0x5B
  129 D1:DFF9 4E 4F 50 04 .db "NOP", 4     ;0x5C
  130 D1:DFFD 45 4F 52 04 .db "EOR", 4     ;0x5D
  131 D1:E001 4C 53 52 04 .db "LSR", 4     ;0x5E
  132 D1:E005 53 52 45 04 .db "SRE", 4     ;0x5F
  133 D1:E009 52 54 53 0A .db "RTS", 10     ;0x60
  134 D1:E00D 41 44 43 05 .db "ADC", 5     ;0x61
  135 D1:E011 4A 41 4D 00 .db "JAM", 0     ;0x62
  136 D1:E015 52 52 41 05 .db "RRA", 5     ;0x63
  137 D1:E019 4E 4F 50 07 .db "NOP", 7     ;0x64
  138 D1:E01D 41 44 43 07 .db "ADC", 7     ;0x65
  139 D1:E021 52 4F 52 07 .db "ROR", 7     ;0x66
  140 D1:E025 52 52 41 07 .db "RRA", 7     ;0x67
  141 D1:E029 50 4C 41 0A .db "PLA", 10     ;0x68
  142 D1:E02D 41 44 43 09 .db "ADC", 9     ;0x69
  143 D1:E031 52 4F 52 06 .db "ROR", 6     ;0x6A
  144 D1:E035 41 52 52 09 .db "ARR", 9     ;0x6B
  145 D1:E039 4A 4D 50 02 .db "JMP", 2     ;0x6C
  146 D1:E03D 41 44 43 03 .db "ADC", 3     ;0x6D
  147 D1:E041 52 4F 52 03 .db "ROR", 3     ;0x6E
  148 D1:E045 52 52 41 03 .db "RRA", 3     ;0x6F
  149 D1:E049 42 56 53 08 .db "BVS", 8     ;0x70
  150 D1:E04D 41 44 43 0B .db "ADC", 11     ;0x71
  151 D1:E051 4A 41 4D 00 .db "JAM", 0     ;0x72
  152 D1:E055 52 52 41 0B .db "RRA", 11     ;0x73
  153 D1:E059 4E 4F 50 01 .db "NOP", 1     ;0x74
  154 D1:E05D 41 44 43 01 .db "ADC", 1     ;0x75
  155 D1:E061 52 4F 52 01 .db "ROR", 1     ;0x76
  156 D1:E065 52 52 41 01 .db "RRA", 1     ;0x77
  157 D1:E069 53 45 49 0A .db "SEI", 10     ;0x78
  158 D1:E06D 41 44 43 0C .db "ADC", 12     ;0x79
  159 D1:E071 4E 4F 50 0A .db "NOP", 10     ;0x7A
  160 D1:E075 52 52 41 0C .db "RRA", 12     ;0x7B
  161 D1:E079 4E 4F 50 04 .db "NOP", 4     ;0x7C
  162 D1:E07D 41 44 43 04 .db "ADC", 4     ;0x7D
  163 D1:E081 52 4F 52 04 .db "ROR", 4     ;0x7E
  164 D1:E085 52 52 41 04 .db "RRA", 4     ;0x7F
  165 D1:E089 4E 4F 50 09 .db "NOP", 9     ;0x80
  166 D1:E08D 53 54 41 05 .db "STA", 5     ;0x81
  167 D1:E091 4E 4F 50 09 .db "NOP", 9     ;0x82
  168 D1:E095 53 41 58 05 .db "SAX", 5     ;0x83
  169 D1:E099 53 54 59 07 .db "STY", 7     ;0x84
  170 D1:E09D 53 54 41 07 .db "STA", 7     ;0x85
  171 D1:E0A1 53 54 58 07 .db "STX", 7     ;0x86
  172 D1:E0A5 53 41 58 07 .db "SAX", 7     ;0x87
  173 D1:E0A9 44 45 59 0A .db "DEY", 10     ;0x88
  174 D1:E0AD 4E 4F 50 09 .db "NOP", 9     ;0x89
  175 D1:E0B1 54 58 41 0A .db "TXA", 10     ;0x8A
  176 D1:E0B5 41 4E 45 09 .db "ANE", 9     ;0x8B
  177 D1:E0B9 53 54 59 03 .db "STY", 3     ;0x8C
  178 D1:E0BD 53 54 41 03 .db "STA", 3     ;0x8D
  179 D1:E0C1 53 54 58 03 .db "STX", 3     ;0x8E
  180 D1:E0C5 53 41 58 03 .db "SAX", 3     ;0x8F
  181 D1:E0C9 42 43 43 08 .db "BCC", 8     ;0x90
  182 D1:E0CD 53 54 41 0B .db "STA", 11     ;0x91
  183 D1:E0D1 4A 41 4D 00 .db "JAM", 0     ;0x92
  184 D1:E0D5 53 48 41 0B .db "SHA", 11     ;0x93
  185 D1:E0D9 53 54 59 01 .db "STY", 1     ;0x94
  186 D1:E0DD 53 54 41 01 .db "STA", 1     ;0x95
  187 D1:E0E1 53 54 58 0D .db "STX", 13     ;0x96
  188 D1:E0E5 53 41 58 0D .db "SAX", 13     ;0x97
  189 D1:E0E9 54 59 41 0A .db "TYA", 10     ;0x98
  190 D1:E0ED 53 54 41 0C .db "STA", 12     ;0x99
  191 D1:E0F1 54 58 53 0A .db "TXS", 10     ;0x9A
  192 D1:E0F5 54 41 53 0C .db "TAS", 12     ;0x9B
  193 D1:E0F9 53 48 59 04 .db "SHY", 4     ;0x9C
  194 D1:E0FD 53 54 41 04 .db "STA", 4     ;0x9D
  195 D1:E101 53 48 58 0C .db "SHX", 12     ;0x9E
  196 D1:E105 53 48 41 0C .db "SHA", 12     ;0x9F
  197 D1:E109 4C 44 59 09 .db "LDY", 9     ;0xA0
  198 D1:E10D 4C 44 41 05 .db "LDA", 5     ;0xA1
  199 D1:E111 4C 44 58 09 .db "LDX", 9     ;0xA2
  200 D1:E115 4C 41 58 05 .db "LAX", 5     ;0xA3
  201 D1:E119 4C 44 59 07 .db "LDY", 7     ;0xA4
  202 D1:E11D 4C 44 41 07 .db "LDA", 7     ;0xA5
  203 D1:E121 4C 44 58 07 .db "LDX", 7     ;0xA6
  204 D1:E125 4C 41 58 07 .db "LAX", 7     ;0xA7
  205 D1:E129 54 41 59 0A .db "TAY", 10     ;0xA8
  206 D1:E12D 4C 44 41 09 .db "LDA", 9     ;0xA9
  207 D1:E131 54 41 58 0A .db "TAX", 10     ;0xAA
  208 D1:E135 4C 58 41 09 .db "LXA", 9     ;0xAB
  209 D1:E139 4C 44 59 03 .db "LDY", 3     ;0xAC
  210 D1:E13D 4C 44 41 03 .db "LDA", 3     ;0xAD
  211 D1:E141 4C 44 58 03 .db "LDX", 3     ;0xAE
  212 D1:E145 4C 41 58 03 .db "LAX", 3     ;0xAF
  213 D1:E149 42 43 53 08 .db "BCS", 8     ;0xB0
  214 D1:E14D 4C 44 41 0B .db "LDA", 11     ;0xB1
  215 D1:E151 4A 41 4D 00 .db "JAM", 0     ;0xB2
  216 D1:E155 4C 41 58 0B .db "LAX", 11     ;0xB3
  217 D1:E159 4C 44 59 01 .db "LDY", 1     ;0xB4
  218 D1:E15D 4C 44 41 01 .db "LDA", 1     ;0xB5
  219 D1:E161 4C 44 58 0D .db "LDX", 13     ;0xB6
  220 D1:E165 4C 41 58 0D .db "LAX", 13     ;0xB7
  221 D1:E169 43 4C 56 0A .db "CLV", 10     ;0xB8
  222 D1:E16D 4C 44 41 0C .db "LDA", 12     ;0xB9
  223 D1:E171 54 53 58 0A .db "TSX", 10     ;0xBA
  224 D1:E175 4C 41 53 0C .db "LAS", 12     ;0xBB
  225 D1:E179 4C 44 59 04 .db "LDY", 4     ;0xBC
  226 D1:E17D 4C 44 41 04 .db "LDA", 4     ;0xBD
  227 D1:E181 4C 44 58 0C .db "LDX", 12     ;0xBE
  228 D1:E185 4C 41 58 0C .db "LAX", 12     ;0xBF
  229 D1:E189 43 50 59 09 .db "CPY", 9     ;0xC0
  230 D1:E18D 43 4D 50 05 .db "CMP", 5     ;0xC1
  231 D1:E191 4E 4F 50 09 .db "NOP", 9     ;0xC2
  232 D1:E195 44 43 50 05 .db "DCP", 5     ;0xC3
  233 D1:E199 43 50 59 07 .db "CPY", 7     ;0xC4
  234 D1:E19D 43 4D 50 07 .db "CMP", 7     ;0xC5
  235 D1:E1A1 44 45 43 07 .db "DEC", 7     ;0xC6
  236 D1:E1A5 44 43 50 07 .db "DCP", 7     ;0xC7
  237 D1:E1A9 49 4E 59 0A .db "INY", 10     ;0xC8
  238 D1:E1AD 43 4D 50 09 .db "CMP", 9     ;0xC9
  239 D1:E1B1 44 45 58 0A .db "DEX", 10     ;0xCA
  240 D1:E1B5 53 42 58 09 .db "SBX", 9     ;0xCB
  241 D1:E1B9 43 50 59 03 .db "CPY", 3     ;0xCC
  242 D1:E1BD 43 4D 50 03 .db "CMP", 3     ;0xCD
  243 D1:E1C1 44 45 43 03 .db "DEC", 3     ;0xCE
  244 D1:E1C5 44 43 50 03 .db "DCP", 3     ;0xCF
  245 D1:E1C9 42 4E 45 08 .db "BNE", 8     ;0xD0
  246 D1:E1CD 43 4D 50 0B .db "CMP", 11     ;0xD1
  247 D1:E1D1 4A 41 4D 00 .db "JAM", 0     ;0xD2
  248 D1:E1D5 44 43 50 0B .db "DCP", 11     ;0xD3
  249 D1:E1D9 4E 4F 50 01 .db "NOP", 1     ;0xD4
  250 D1:E1DD 43 4D 50 01 .db "CMP", 1     ;0xD5
  251 D1:E1E1 44 45 43 01 .db "DEC", 1     ;0xD6
  252 D1:E1E5 44 43 50 01 .db "DCP", 1     ;0xD7
  253 D1:E1E9 43 4C 44 0A .db "CLD", 10     ;0xD8
  254 D1:E1ED 43 4D 50 0C .db "CMP", 12     ;0xD9
  255 D1:E1F1 4E 4F 50 0A .db "NOP", 10     ;0xDA
  256 D1:E1F5 44 43 50 0C .db "DCP", 12     ;0xDB
  257 D1:E1F9 4E 4F 50 04 .db "NOP", 4     ;0xDC
  258 D1:E1FD 43 4D 50 04 .db "CMP", 4     ;0xDD
  259 D1:E201 44 45 43 04 .db "DEC", 4     ;0xDE
  260 D1:E205 44 43 50 04 .db "DCP", 4     ;0xDF
  261 D1:E209 43 50 58 09 .db "CPX", 9     ;0xE0
  262 D1:E20D 53 42 43 05 .db "SBC", 5     ;0xE1
  263 D1:E211 4E 4F 50 09 .db "NOP", 9     ;0xE2
  264 D1:E215 49 53 43 05 .db "ISC", 5     ;0xE3
  265 D1:E219 43 50 58 07 .db "CPX", 7     ;0xE4
  266 D1:E21D 53 42 43 07 .db "SBC", 7     ;0xE5
  267 D1:E221 49 4E 43 07 .db "INC", 7     ;0xE6
  268 D1:E225 49 53 43 07 .db "ISC", 7     ;0xE7
  269 D1:E229 49 4E 58 0A .db "INX", 10     ;0xE8
  270 D1:E22D 53 42 43 09 .db "SBC", 9     ;0xE9
  271 D1:E231 4E 4F 50 0A .db "NOP", 10     ;0xEA
  272 D1:E235 55 53 42 09 .db "USB", 9     ;0xEB
  273 D1:E239 43 50 58 03 .db "CPX", 3     ;0xEC
  274 D1:E23D 53 42 43 03 .db "SBC", 3     ;0xED
  275 D1:E241 49 4E 43 03 .db "INC", 3     ;0xEE
  276 D1:E245 49 53 43 03 .db "ISC", 3     ;0xEF
  277 D1:E249 42 45 51 08 .db "BEQ", 8     ;0xF0
  278 D1:E24D 53 42 43 0B .db "SBC", 11     ;0xF1
  279 D1:E251 4A 41 4D 00 .db "JAM", 0     ;0xF2
  280 D1:E255 49 53 43 0B .db "ISC", 11     ;0xF3
  281 D1:E259 4E 4F 50 01 .db "NOP", 1     ;0xF4
  282 D1:E25D 53 42 43 01 .db "SBC", 1     ;0xF5
  283 D1:E261 49 4E 43 01 .db "INC", 1     ;0xF6
  284 D1:E265 49 53 43 01 .db "ISC", 1     ;0xF7
  285 D1:E269 53 45 44 0A .db "SED", 10     ;0xF8
  286 D1:E26D 53 42 43 0C .db "SBC", 12     ;0xF9
  287 D1:E271 4E 4F 50 0A .db "NOP", 10     ;0xFA
  288 D1:E275 49 53 43 0C .db "ISC", 12     ;0xFB
  289 D1:E279 4E 4F 50 04 .db "NOP", 4     ;0xFC
  290 D1:E27D 53 42 43 04 .db "SBC", 4     ;0xFD
  291 D1:E281 49 4E 43 04 .db "INC", 4     ;0xFE
  292 D1:E285 49 53 43 04 .db "ISC", 4     ;0xFF
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    3 D1:E289 -  -  -  -  
    4 D1:E289 -  -  -  -  
    5 D1:E289 -  -  -  -  ;You must assign a print character routine.
    6 D1:E289 -  -  -  -  ;You must also write all opcode bytes to operbuf or map operbuf to where written
    7 D1:E289 -  -  -  -  dbg_printChr    = PrintBigFont
    8 D1:E289 -  -  -  -  operbuf         = debugram
    9 D1:E289 -  -  -  -  
   10 D1:E289 -  -  -  -  
   11 D1:E289 -  -  -  -  dbg_resetScreen:
   12 D1:E289 21 00 00 D4     ld  hl,screenBuf1
   13 D1:E28D 11 01 00 D4     ld  de,screenBuf1+1
   14 D1:E291 01 FF 57 02     ld  bc,(2*240*320)-1
   15 D1:E295 36 00 -  -      ld  (hl),$00
   16 D1:E297 ED B0 -  -      ldir
   17 D1:E299 AF -  -  -      xor a,a
   18 D1:E29A CD 6E B1 D1     call setLineStart
   19 D1:E29E CD 77 B1 D1     call setCurLine
   20 D1:E2A2 C9 -  -  -      ret
   21 D1:E2A3 -  -  -  -  
   22 D1:E2A3 -  -  -  -  dbg_prepNextLine:
   23 D1:E2A3 AF -  -  -      xor a,a
   24 D1:E2A4 32 F6 31 D0     ld  (xPos),a
   25 D1:E2A8 CD 44 B2 D1     call calculateScreenPtr
   26 D1:E2AC EB -  -  -      ex  de,hl
   27 D1:E2AD 21 FF 2B D5     ld  hl,screenBuf2-1
   28 D1:E2B1 B7 -  -  -      or  a,a
   29 D1:E2B2 ED 52 -  -      sbc hl,de
   30 D1:E2B4 -  -  -  -  ;If C: DE in sb2. subtract to set in sb1.
   31 D1:E2B4 -  -  -  -  ;If NC: DE in sb1. add to set in sb2.
   32 D1:E2B4 21 00 2C 01     ld  hl,320*240
   33 D1:E2B8 30 04 -  -      jr  nc,+_
   34 D1:E2BA 21 00 D4 FE     ld  hl,-(320*240)+0
   35 D1:E2BE 19 -  -  -  _:  add hl,de   ;HL set to other buffer. DE points to current buffer.
   36 D1:E2BF 01 00 0A 00     ld  bc,320*8    ;copy one line from other buffer to current buffer.
   37 D1:E2C3 7E -  -  -  _:  ld  a,(hl)
   38 D1:E2C4 C6 01 -  -      add a,1     ;carry if $FF (white), NC if not
   39 D1:E2C6 9F -  -  -      sbc a,a     ;if carry, returns to $FF, else is black
   40 D1:E2C7 77 -  -  -      ld  (hl),a
   41 D1:E2C8 ED A0 -  -      ldi
   42 D1:E2CA EA C3 E2 D1     jp  pe,-_
   43 D1:E2CE 3A F7 31 D0     ld  a,(yPos)
   44 D1:E2D2 FE 1D -  -      cp  a,29
   45 D1:E2D4 20 06 -  -      jr  nz,+_
   46 D1:E2D6 21 00 D4 FE     ld  hl,-(320*240)
   47 D1:E2DA 19 -  -  -      add hl,de
   48 D1:E2DB EB -  -  -      ex de,hl        ;if bottom of screen, then reset DE to top of screen.
   49 D1:E2DC D5 -  -  -  _:  push de
   50 D1:E2DD E1 -  -  -      pop hl
   51 D1:E2DE 13 -  -  -      inc de
   52 D1:E2DF 71 -  -  -      ld  (hl),c
   53 D1:E2E0 01 BF 08 00     ld  bc,(320*7)-1    ;erase whole line below it to prepare for writing.
   54 D1:E2E4 ED B0 -  -      ldir
   55 D1:E2E6 C9 -  -  -      ret
   56 D1:E2E7 -  -  -  -  
   57 D1:E2E7 -  -  -  -  ;Input: ix = core_memory_ix 
   58 D1:E2E7 -  -  -  -  ;Output: Text onscreen
   59 D1:E2E7 -  -  -  -  dbg_printLine:
   60 D1:E2E7 E5 C5 D5 DD 
              E5 FD E5 F5     push hl \ push bc \ push de \ push ix \ push iy \ push af
   61 D1:E2EF ED 23 00 -      lea hl,iy+0
   62 D1:E2F2 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl
   63 D1:E2F5 11 00 00 00     ld  de,DEBUG_PRINT_START_CYCLE
   64 D1:E2F9 B7 -  -  -      or  a,a
   65 D1:E2FA ED 52 -  -      sbc hl,de
   66 D1:E2FC DA E0 E3 D1     jp  c,dbg_printLine_noPrint
   67 D1:E300 -  -  -  -  
   68 D1:E300 3E 1A -  -      ld  a,$1A   ;blue
   69 D1:E302 32 C6 B1 D1     ld  (fontBGColor_var),a
   70 D1:E306 32 13 B2 D1     ld  (smallFontBGColor_var),a
   71 D1:E30A DD 27 0E -      ld  hl,(ix+CURRENT_OPCODES)
   72 D1:E30D 22 F9 31 D0     ld  (operbuf),hl
   73 D1:E311 CD A3 E2 D1     call dbg_prepNextLine
   74 D1:E315 CD 82 B1 D1     call newLine
   75 D1:E319 DD 7E 06 -      ld  a,(ix+REGPC+1)
   76 D1:E31C CD DF B1 D1     call printSmallNumPair
   77 D1:E320 DD 7E 05 -      ld  a,(ix+REGPC+0)
   78 D1:E323 CD DF B1 D1     call printSmallNumPair
   79 D1:E327 3E 20 -  -      ld  a,' '
   80 D1:E329 CD AF B1 D1     call printBigFont
   81 D1:E32D -  -  -  -      ;
   82 D1:E32D 3E 41 -  -      ld  a,'A'
   83 D1:E32F CD AF B1 D1     call printBigFont
   84 D1:E333 DD 7E 00 -      ld  a,(ix+REGA)
   85 D1:E336 CD DF B1 D1     call printSmallNumPair
   86 D1:E33A 3E 20 -  -      ld  a,' '
   87 D1:E33C CD AF B1 D1     call printBigFont
   88 D1:E340 -  -  -  -      ;
   89 D1:E340 3E 58 -  -      ld  a,'X'
   90 D1:E342 CD AF B1 D1     call printBigFont
   91 D1:E346 DD 7E 01 -      ld  a,(ix+REGX)
   92 D1:E349 CD DF B1 D1     call printSmallNumPair
   93 D1:E34D 3E 20 -  -      ld  a,' '
   94 D1:E34F CD AF B1 D1     call printBigFont
   95 D1:E353 -  -  -  -      ;
   96 D1:E353 3E 59 -  -      ld  a,'Y'
   97 D1:E355 CD AF B1 D1     call printBigFont
   98 D1:E359 DD 7E 02 -      ld  a,(ix+REGY)
   99 D1:E35C CD DF B1 D1     call printSmallNumPair
  100 D1:E360 3E 20 -  -      ld  a,' '
  101 D1:E362 CD AF B1 D1     call printBigFont
  102 D1:E366 -  -  -  -      ;
  103 D1:E366 3E 53 -  -      ld  a,'S'
  104 D1:E368 CD AF B1 D1     call printBigFont
  105 D1:E36C DD 7E 03 -      ld  a,(ix+REGSP)
  106 D1:E36F CD DF B1 D1     call printSmallNumPair
  107 D1:E373 3E 20 -  -      ld  a,' '
  108 D1:E375 CD AF B1 D1     call printBigFont
  109 D1:E379 -  -  -  -      ;
  110 D1:E379 3E 50 -  -      ld  a,'P'
  111 D1:E37B CD AF B1 D1     call printBigFont
  112 D1:E37F DD 7E 04 -      ld  a,(ix+REGSR)
  113 D1:E382 CD DF B1 D1     call printSmallNumPair
  114 D1:E386 3E 20 -  -      ld  a,' '
  115 D1:E388 CD AF B1 D1     call printBigFont
  116 D1:E38C -  -  -  -  
  117 D1:E38C -  -  -  -      ;
  118 D1:E38C -  -  -  -  ;    ld  hl,dbg_printLine_str001
  119 D1:E38C -  -  -  -  ;    call printString
  120 D1:E38C -  -  -  -  ;    ld  b,5
  121 D1:E38C -  -  -  -  ;    lea hl,ix+0
  122 D1:E38C -  -  -  -  ;_:  ld  a,(hl)
  123 D1:E38C -  -  -  -  ;    inc hl
  124 D1:E38C -  -  -  -  ;    push bc
  125 D1:E38C -  -  -  -  ;        push hl
  126 D1:E38C -  -  -  -  ;            call printSmallNumPair
  127 D1:E38C -  -  -  -  ;            ld  a,' '
  128 D1:E38C -  -  -  -  ;            call printBigFont
  129 D1:E38C -  -  -  -  ;        pop hl
  130 D1:E38C -  -  -  -  ;    pop bc
  131 D1:E38C -  -  -  -  ;    djnz -_
  132 D1:E38C -  -  -  -  
  133 D1:E38C DD 7E 0D -      ld  a,(ix+CYCLES_CURRENT+2)
  134 D1:E38F CD DF B1 D1     call printSmallNumPair
  135 D1:E393 DD 7E 0C -      ld  a,(ix+CYCLES_CURRENT+1)
  136 D1:E396 CD DF B1 D1     call printSmallNumPair
  137 D1:E39A DD 7E 0B -      ld  a,(ix+CYCLES_CURRENT+0)
  138 D1:E39D CD DF B1 D1     call printSmallNumPair
  139 D1:E3A1 3E 20 -  -      ld  a,' '
  140 D1:E3A3 CD AF B1 D1     call printBigFont
  141 D1:E3A7 2A F9 31 D0     ld  hl,(operbuf)
  142 D1:E3AB DD 2F 0E -      ld  (ix+CURRENT_OPCODES),hl
  143 D1:E3AE 7D -  -  -      ld  a,L
  144 D1:E3AF CD D0 E4 D1     call dbg_getInstSize
  145 D1:E3B3 06 03 -  -      ld  b,3
  146 D1:E3B5 4F -  -  -      ld  c,a
  147 D1:E3B6 0C -  -  -      inc c
  148 D1:E3B7 ED 22 0E -      lea hl,ix+CURRENT_OPCODES
  149 D1:E3BA 7E -  -  -  _:  ld  a,(hl)
  150 D1:E3BB 23 -  -  -      inc hl
  151 D1:E3BC E5 -  -  -      push hl
  152 D1:E3BD 0D -  -  -          dec c
  153 D1:E3BE F2 C3 E3 D1         jp p,+_
  154 D1:E3C2 0C -  -  -          inc c   ;never let c go below zero.
  155 D1:E3C3 C5 -  -  -  _:      push bc
  156 D1:E3C4 28 06 -  -              jr  z,+_
  157 D1:E3C6 CD DF B1 D1             call printSmallNumPair
  158 D1:E3CA 18 06 -  -              jr ++_
  159 D1:E3CC 3E 20 -  -  _:          ld  a,' '
  160 D1:E3CE CD AF B1 D1             call printBigFont
  161 D1:E3D2 C1 -  -  -  _:      pop bc
  162 D1:E3D3 E1 -  -  -      pop hl
  163 D1:E3D4 10 E4 -  -      djnz ----_
  164 D1:E3D6 3E 20 -  -      ld  a,' '
  165 D1:E3D8 CD AF B1 D1     call printBigFont
  166 D1:E3DC CD E8 E4 D1     call dbg_printDisassembly
  167 D1:E3E0 -  -  -  -  
  168 D1:E3E0 -  -  -  -      ;
  169 D1:E3E0 -  -  -  -      ;Remove section below when done testing nestest for timings
  170 D1:E3E0 -  -  -  -      ;
  171 D1:E3E0 -  -  -  -  dbg_printLine_noPrint:
  172 D1:E3E0 11 00 00 00     ld  de,0
  173 D1:E3E4 2A 4D 34 D0     ld  hl,(timings_base)
  174 D1:E3E8 5E -  -  -      ld  e,(hl)
  175 D1:E3E9 23 -  -  -      inc hl
  176 D1:E3EA 56 -  -  -      ld  d,(hl)
  177 D1:E3EB 23 -  -  -      inc hl
  178 D1:E3EC 22 4D 34 D0     ld  (timings_base),hl
  179 D1:E3F0 DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  180 D1:E3F3 B7 -  -  -      or  a,a
  181 D1:E3F4 ED 52 -  -      sbc hl,de
  182 D1:E3F6 28 17 -  -      jr  z,+_
  183 D1:E3F8 21 FF FF FF     ld  hl,-1
  184 D1:E3FC DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  185 D1:E3FF CD 82 B1 D1     call newLine
  186 D1:E403 21 93 E4 D1     ld  hl,dbg_printLine_timeMismatch
  187 D1:E407 CD 99 B1 D1     call printString
  188 D1:E40B DD 36 14 01     ld  (ix+CORE_ERROR_LEVEL),1
  189 D1:E40F 2A 4D 34 D0 _:  ld  hl,(timings_base)
  190 D1:E413 7E -  -  -      ld  a,(hl)
  191 D1:E414 23 -  -  -      inc hl
  192 D1:E415 22 4D 34 D0     ld  (timings_base),hl
  193 D1:E419 DD BE 04 -      cp  a,(ix+REGSR)
  194 D1:E41C 28 17 -  -      jr  z,+_
  195 D1:E41E 21 FF FF FF     ld  hl,-1
  196 D1:E422 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  197 D1:E425 CD 82 B1 D1     call newLine
  198 D1:E429 21 AD E4 D1     ld  hl,dbg_printLine_statusRegisterMismatch
  199 D1:E42D CD 99 B1 D1     call printString
  200 D1:E431 DD 36 14 02     ld  (ix+CORE_ERROR_LEVEL),2
  201 D1:E435 -  -  -  -  _:
  202 D1:E435 -  -  -  -      ;
  203 D1:E435 -  -  -  -      ;End debug-debug section
  204 D1:E435 -  -  -  -      ;
  205 D1:E435 CD A5 B0 D1     call fastCopy
  206 D1:E439 AF -  -  -      xor a,a     ;black
  207 D1:E43A 32 C6 B1 D1     ld  (fontBGColor_var),a
  208 D1:E43E 32 13 B2 D1     ld  (smallFontBGColor_var),a
  209 D1:E442 -  -  -  -  
  210 D1:E442 F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  211 D1:E44A -  -  -  -      ;push hl \ push bc \ push de \ push ix \ push iy \ push af
  212 D1:E44A C9 -  -  -      ret
  213 D1:E44B -  -  -  -  
  214 D1:E44B -  -  -  -  
  215 D1:E44B -  -  -  -      ;also remove this when done timing debugging
  216 D1:E44B 11 00 00 00     ld  de,0
  217 D1:E44F 2A 4D 34 D0     ld  hl,(timings_base)
  218 D1:E453 5E -  -  -      ld  e,(hl)
  219 D1:E454 23 -  -  -      inc hl
  220 D1:E455 56 -  -  -      ld  d,(hl)
  221 D1:E456 23 -  -  -      inc hl
  222 D1:E457 22 4D 34 D0     ld  (timings_base),hl
  223 D1:E45B DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  224 D1:E45E B7 -  -  -      or  a,a
  225 D1:E45F ED 52 -  -      sbc hl,de
  226 D1:E461 28 13 -  -      jr  z,+_
  227 D1:E463 21 FF FF FF     ld  hl,-1
  228 D1:E467 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  229 D1:E46A CD 82 B1 D1     call newLine
  230 D1:E46E 21 93 E4 D1     ld  hl,dbg_printLine_timeMismatch
  231 D1:E472 CD 99 B1 D1     call printString
  232 D1:E476 -  -  -  -  _:  ;
  233 D1:E476 -  -  -  -      ;End debug-debug section
  234 D1:E476 -  -  -  -      ;
  235 D1:E476 CD A5 B0 D1     call fastCopy
  236 D1:E47A AF -  -  -      xor a,a     ;black
  237 D1:E47B 32 C6 B1 D1     ld  (fontBGColor_var),a
  238 D1:E47F 32 13 B2 D1     ld  (smallFontBGColor_var),a
  239 D1:E483 F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  240 D1:E48B C9 -  -  -      ret
  241 D1:E48C -  -  -  -  
  242 D1:E48C -  -  -  -  dbg_printLine_str001:
  243 D1:E48C 41 58 59 53 
              50 20 00 -  .db "AXYSP ",0
  244 D1:E493 -  -  -  -  dbg_printLine_timeMismatch:
  245 D1:E493 43 50 55 20 
              54 65 73 74 
              20 74 69 6D 
              69 6E 67 20 
              6D 69 73 6D 
              61 74 63 68 
              2E 00 -  -  .db "CPU Test timing mismatch.",0
  246 D1:E4AD -  -  -  -  dbg_printLine_statusRegisterMismatch:
  247 D1:E4AD -  -  -  -  ;    0123456789012345678901234567890123456789
  248 D1:E4AD 43 50 55 20 
              54 65 73 74 
              20 73 74 61 
              74 75 73 20 
              72 65 67 69 
              73 74 65 72 
              20 6D 69 73 
              6D 61 74 63 
              68 2E 00 -  .db "CPU Test status register mismatch.",0
  249 D1:E4D0 -  -  -  -  
  250 D1:E4D0 -  -  -  -  
  251 D1:E4D0 -  -  -  -  
  252 D1:E4D0 -  -  -  -  
  253 D1:E4D0 -  -  -  -  
  254 D1:E4D0 -  -  -  -  
  255 D1:E4D0 -  -  -  -  ;A=instruction. Returns: A=size
  256 D1:E4D0 -  -  -  -  dbg_getInstSize:
  257 D1:E4D0 E5 D5 -  -      push hl \ push de
  258 D1:E4D2 57 -  -  -          ld  d,a
  259 D1:E4D3 1E 04 -  -          ld  e,4
  260 D1:E4D5 ED 5C -  -          mlt de
  261 D1:E4D7 21 8C DE D1         ld  hl,inst6502_disassembly_table+3
  262 D1:E4DB 19 -  -  -          add hl,de
  263 D1:E4DC 16 00 -  -          ld  d,0
  264 D1:E4DE 5E -  -  -          ld  e,(hl)
  265 D1:E4DF 21 4E DE D1         ld  hl,inst6502_opcode_width_table
  266 D1:E4E3 19 -  -  -          add hl,de
  267 D1:E4E4 7E -  -  -          ld  a,(hl)
  268 D1:E4E5 D1 E1 -  -      pop de \ pop hl
  269 D1:E4E7 C9 -  -  -      ret
  270 D1:E4E8 -  -  -  -  
  271 D1:E4E8 -  -  -  -  dbg_printDisassembly:
  272 D1:E4E8 F5 C5 D5 E5 
              DD E5 -  -      push af \ push bc \ push de \ push hl \ push ix
  273 D1:E4EE -  -  -  -      ;find entry in disassembly table
  274 D1:E4EE 2A F9 31 D0     ld  hl,(operbuf)
  275 D1:E4F2 26 04 -  -      ld  H,4
  276 D1:E4F4 ED 6C -  -      mlt hl
  277 D1:E4F6 11 89 DE D1     ld  de,inst6502_disassembly_table
  278 D1:E4FA 19 -  -  -      add hl,de
  279 D1:E4FB 06 03 -  -      ld  b,3
  280 D1:E4FD 7E -  -  -  _:  ld  a,(hl)
  281 D1:E4FE 23 -  -  -      inc hl
  282 D1:E4FF CD 85 E5 D1     call dbg_printC
  283 D1:E503 10 F8 -  -      djnz -_
  284 D1:E505 3E 20 -  -      ld  a,' '
  285 D1:E507 CD 85 E5 D1     call dbg_printC
  286 D1:E50B 46 -  -  -      ld  b,(hl)
  287 D1:E50C 04 -  -  -      inc b
  288 D1:E50D -  -  -  -      ;Instruction addressing mode in B. Now find text for that address mode.
  289 D1:E50D 21 5C DE D1     ld  hl,inst6502_disassembler
  290 D1:E511 11 00 00 00     ld  de,0
  291 D1:E515 5E -  -  -  _:  ld  e,(hl)
  292 D1:E516 19 -  -  -      add hl,de
  293 D1:E517 10 FC -  -      djnz -_
  294 D1:E519 1D -  -  -      dec e
  295 D1:E51A 28 29 -  -      jr  z,dbg_printDisassembly_end  ;stop if text is zero-sized
  296 D1:E51C ED 52 -  -      sbc hl,de   ;rewind to start of text part of instruction. E is text length.
  297 D1:E51E 43 -  -  -      ld  b,e
  298 D1:E51F -  -  -  -  dbg_printDisassembly_printOperandLoop:
  299 D1:E51F 7E -  -  -      ld  a,(hl)
  300 D1:E520 23 -  -  -      inc hl
  301 D1:E521 FE 31 -  -      cp  a,'1'
  302 D1:E523 20 06 -  -      jr  nz,+_
  303 D1:E525 CD 69 E5 D1     call dbg_printOperand1
  304 D1:E529 18 18 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  305 D1:E52B FE 32 -  -  _:  cp  a,'2'
  306 D1:E52D 20 06 -  -      jr  nz,+_
  307 D1:E52F CD 61 E5 D1     call dbg_printOperand2
  308 D1:E533 18 0E -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  309 D1:E535 FE 2D -  -  _:  cp  a,'-'
  310 D1:E537 20 06 -  -      jr  nz,+_
  311 D1:E539 CD 4C E5 D1     call dbg_printRel1
  312 D1:E53D 18 04 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  313 D1:E53F CD 85 E5 D1 _:  call dbg_printC
  314 D1:E543 -  -  -  -  dbg_PrintDisassembly_printOperandFallthrough:
  315 D1:E543 10 DA -  -      djnz dbg_printDisassembly_printOperandLoop
  316 D1:E545 -  -  -  -  dbg_printDisassembly_end:
  317 D1:E545 DD E1 E1 D1 
              C1 F1 -  -      pop ix \ pop hl \ pop de \ pop bc \ pop af
  318 D1:E54B C9 -  -  -      ret
  319 D1:E54C -  -  -  -  
  320 D1:E54C -  -  -  -  dbg_printRel1:
  321 D1:E54C 3A FA 31 D0     ld  a,(operbuf+1)
  322 D1:E550 B7 -  -  -      or  a,a
  323 D1:E551 F2 5F E5 D1     jp  p,dbg_printRel1_skipNeg
  324 D1:E555 F5 -  -  -      push af
  325 D1:E556 3E 2D -  -          ld   a,'-'
  326 D1:E558 CD 85 E5 D1         call dbg_printC
  327 D1:E55C F1 -  -  -      pop af
  328 D1:E55D ED 44 -  -      neg
  329 D1:E55F -  -  -  -  dbg_printRel1_skipNeg:
  330 D1:E55F 18 0C -  -      jr dbg_printHex
  331 D1:E561 -  -  -  -  
  332 D1:E561 -  -  -  -  dbg_printOperand2:
  333 D1:E561 3A FB 31 D0     ld  a,(operbuf+2)
  334 D1:E565 CD 6D E5 D1     call dbg_printHex
  335 D1:E569 -  -  -  -  dbg_printOperand1:
  336 D1:E569 3A FA 31 D0     ld  a,(operbuf+1)
  337 D1:E56D -  -  -  -  dbg_printHex:
  338 D1:E56D CD 72 E5 D1     call dispAHex
  339 D1:E571 C9 -  -  -      ret
  340 D1:E572 -  -  -  -  
  341 D1:E572 -  -  -  -  dispAHex:
  342 D1:E572 F5 -  -  -      push af
  343 D1:E573 CD 7A E5 D1         call +_
  344 D1:E577 F1 -  -  -      pop af
  345 D1:E578 18 04 -  -      jr  ++_
  346 D1:E57A 1F -  -  -  _:  rra
  347 D1:E57B 1F -  -  -      rra
  348 D1:E57C 1F -  -  -      rra
  349 D1:E57D 1F -  -  -      rra
  350 D1:E57E F6 F0 -  -  _:  or  a,$F0
  351 D1:E580 27 -  -  -      daa
  352 D1:E581 C6 A0 -  -      add a,$A0
  353 D1:E583 CE 40 -  -      adc a,$40
  354 D1:E585 -  -  -  -  dbg_printC:
  355 D1:E585 E5 -  -  -      push hl
  356 D1:E586 C5 -  -  -          push bc
  357 D1:E587 CD AF B1 D1             call dbg_printChr
  358 D1:E58B C1 -  -  -          pop bc
  359 D1:E58C E1 -  -  -      pop hl
  360 D1:E58D C9 -  -  -      ret
Listing for file "main.z80"
  974 D1:E58E -  -  -  -  #include "ppu.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ppu.z80"
    1 D1:E58E -  -  -  -  ;PPU-related stuff is written here, though not all of it is localized in
    2 D1:E58E -  -  -  -  ;this file. Some of it will necessarily be located with the mapper code
    3 D1:E58E -  -  -  -  ;that handles PPU I/O.
    4 D1:E58E -  -  -  -  
    5 D1:E58E -  -  -  -  
    6 D1:E58E -  -  -  -      ;Do this before a lot of other things.
    7 D1:E58E -  -  -  -      ;Select current character rom banks from PPU settings.
    8 D1:E58E 2A 46 34 D0     ld  hl,(chr_rom_base)
    9 D1:E592 01 00 10 00     ld  bc,$001000
   10 D1:E596 DD 7E E0 -      ld  a,(ix+PPU_CTRL)
   11 D1:E599 E5 -  -  -      push hl
   12 D1:E59A CB 67 -  -          bit 4,a     ;background pattern base offset
   13 D1:E59C 28 01 -  -          jr  z,+_
   14 D1:E59E 09 -  -  -          add hl,bc
   15 D1:E59F 22 20 34 D0 _:      ld  (chr_rom_tiles),hl
   16 D1:E5A3 E1 -  -  -      pop hl
   17 D1:E5A4 CB 6F -  -      bit 5,a     ;sprite pattern base offset
   18 D1:E5A6 28 01 -  -      jr  z,+_
   19 D1:E5A8 09 -  -  -      add hl,bc
   20 D1:E5A9 22 24 34 D0 _:  ld  (chr_rom_sprites),hl
   21 D1:E5AD -  -  -  -  
   22 D1:E5AD -  -  -  -  
   23 D1:E5AD -  -  -  -  
   24 D1:E5AD -  -  -  -      ;B=Y, C=X. Obtain nametable address
   25 D1:E5AD -  -  -  -      ;You must preserve BC yourself. Somehow. Or not depending on how you loop.
   26 D1:E5AD -  -  -  -      ;B and C are modified to fit inside the nametable selected.
   27 D1:E5AD 21 80 06 1A     ld  hl,nametable00>>3
   28 D1:E5B1 78 -  -  -      ld  a,b
   29 D1:E5B2 D6 20 -  -      sub 32
   30 D1:E5B4 38 01 -  -      jr  c,+_
   31 D1:E5B6 78 -  -  -      ld  a,b
   32 D1:E5B7 47 -  -  -  _:  ld  b,a
   33 D1:E5B8 3F -  -  -      ccf
   34 D1:E5B9 ED 6A -  -      adc hl,hl
   35 D1:E5BB 79 -  -  -      ld  a,c
   36 D1:E5BC D6 1E -  -      sub 30
   37 D1:E5BE 38 01 -  -      jr  c,+_
   38 D1:E5C0 79 -  -  -      ld  a,c
   39 D1:E5C1 4F -  -  -  _:  ld  c,a
   40 D1:E5C2 3F -  -  -      ccf
   41 D1:E5C3 ED 6A -  -      adc hl,hl
   42 D1:E5C5 29 -  -  -      add hl,hl   ;HL is now a pointer. do ld hl,(hl) to get actual NT address.
   43 D1:E5C6 -  -  -  -  
   44 D1:E5C6 -  -  -  -  
   45 D1:E5C6 -  -  -  -      ;Increment C=X, adjusting nametable pointer table in HL if crossover
   46 D1:E5C6 0C -  -  -      inc c
   47 D1:E5C7 79 -  -  -      ld  a,c
   48 D1:E5C8 FE 20 -  -      cp  a,32
   49 D1:E5CA 38 06 -  -      jr  c,+_
   50 D1:E5CC 0E 00 -  -      ld  c,0
   51 D1:E5CE 7D -  -  -      ld  a,L
   52 D1:E5CF EE 04 -  -      xor a,%00000100
   53 D1:E5D1 6F -  -  -      ld  L,a
   54 D1:E5D2 00 -  -  -  _:  nop
   55 D1:E5D3 -  -  -  -  
   56 D1:E5D3 -  -  -  -      ;Increment B=Y, adjusting nametable pointer table in HL if crossover
   57 D1:E5D3 04 -  -  -      inc b
   58 D1:E5D4 78 -  -  -      ld  a,b
   59 D1:E5D5 FE 1E -  -      cp  a,30
   60 D1:E5D7 38 06 -  -      jr  c,+_
   61 D1:E5D9 06 00 -  -      ld  b,0
   62 D1:E5DB 7D -  -  -      ld  a,L
   63 D1:E5DC EE 08 -  -      xor a,%00001000
   64 D1:E5DE 6F -  -  -      ld  L,a
   65 D1:E5DF 00 -  -  -  _:  nop
   66 D1:E5E0 -  -  -  -  
   67 D1:E5E0 -  -  -  -      ;Retrieves attribute byte from B=Y, C=X
   68 D1:E5E0 -  -  -  -      ;HL=nametable pointer table
   69 D1:E5E0 -  -  -  -      ;NTptr tab low byte fmt: %000TIIAA. T=attrib, I=ID, A=address bytes
   70 D1:E5E0 D5 -  -  -      push de
   71 D1:E5E1 79 -  -  -          ld  a,c
   72 D1:E5E2 CB 3F -  -          srl a
   73 D1:E5E4 CB 3F -  -          srl a   ;change 0-30 to 0-7. Discards low 2 bits.
   74 D1:E5E6 5F -  -  -          ld  e,a
   75 D1:E5E7 78 -  -  -          ld  a,b
   76 D1:E5E8 E6 03 -  -          and a,3 ;discard two lower bits
   77 D1:E5EA 87 -  -  -          add a,a ;But place remaining bits up higher
   78 D1:E5EB 83 -  -  -          add a,e ;A=%00YYYXXX
   79 D1:E5EC CB E5 -  -          set 4,L ;swap to attrib
   80 D1:E5EE ED 17 -  -          ld  de,(hl)
   81 D1:E5F0 CB A5 -  -          res 4,L ;swap back to main nametable pointers
   82 D1:E5F2 83 -  -  -          add a,e ;base is $C0. This will not produce a carry.
   83 D1:E5F3 5F -  -  -          ld  e,a
   84 D1:E5F4 1A -  -  -          ld  a,(de)
   85 D1:E5F5 D1 -  -  -      pop de
   86 D1:E5F6 -  -  -  -  
   87 D1:E5F6 -  -  -  -      ;Selects attribute from A from B=Y, C=X in format %0000AA00
   88 D1:E5F6 CB 48 -  -      bit 1,b
   89 D1:E5F8 28 04 -  -      jr  z,+_
   90 D1:E5FA 07 -  -  -      rlca    ;If not zero, shift upper nibble into lower nibble
   91 D1:E5FB 07 -  -  -      rlca    ;for further selection.
   92 D1:E5FC 07 -  -  -      rlca
   93 D1:E5FD 07 -  -  -      rlca
   94 D1:E5FE CB 49 -  -  _:  bit 1,c
   95 D1:E600 20 02 -  -      jr  nz,+_   ;If not zero, upper 2 bits of lower nibble already in position
   96 D1:E602 07 -  -  -      rlca        ;Otherwise, move them into position
   97 D1:E603 07 -  -  -      rlca        
   98 D1:E604 E6 0C -  -  _:  and a,%00001100
   99 D1:E606 -  -  -  -  
  100 D1:E606 -  -  -  -      ;Nametable/tilemap variant
  101 D1:E606 -  -  -  -      ;Sets DE to current location in nametable wrt B=Y, C=X
  102 D1:E606 -  -  -  -      ;HL=current nametable pointer
  103 D1:E606 E5 -  -  -      push hl
  104 D1:E607 ED 27 -  -          ld  hl,(hl)
  105 D1:E609 1E 20 -  -          ld  e,32
  106 D1:E60B 50 -  -  -          ld  d,b
  107 D1:E60C ED 5C -  -          mlt de
  108 D1:E60E 7B -  -  -          ld  a,e
  109 D1:E60F 81 -  -  -          add a,c
  110 D1:E610 5F -  -  -          ld  e,a
  111 D1:E611 19 -  -  -          add hl,de
  112 D1:E612 -  -  -  -          ;ex  de,hl
  113 D1:E612 E1 -  -  -      pop hl
  114 D1:E613 -  -  -  -  
  115 D1:E613 -  -  -  -      ;TODO: Find way to link stuff above. The task set forth is the following:
  116 D1:E613 -  -  -  -      ;Create the main tile rendering loop. We must track the following:
  117 D1:E613 -  -  -  -      ;   Screen pointer, nametable position, loop parameters.
  118 D1:E613 -  -  -  -      ;With these, we will:
  119 D1:E613 -  -  -  -      ;1. Get tileID from nametable position
  120 D1:E613 -  -  -  -      ;2. Get attribute data associated with that tile.
  121 D1:E613 -  -  -  -      ;3. Retrieve CHR_ROM data and
  122 D1:E613 -  -  -  -      ;4. Combine it to retrieve color data, then write it to screen buffer.
  123 D1:E613 -  -  -  -      ;
  124 D1:E613 -  -  -  -      ;Later on, insert a cacheing step between 2 and 3. to selectively
  125 D1:E613 -  -  -  -      ;modify step 4.
  126 D1:E613 -  -  -  -      ;
  127 D1:E613 -  -  -  -      ; Do in the inlining thing later.
  128 D1:E613 -  -  -  -      ;
  129 D1:E613 -  -  -  -  
  130 D1:E613 -  -  -  -  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  131 D1:E613 -  -  -  -  ;    ***   *** ***** *   *  ***  *          *** ***** *   * ***** *****
  132 D1:E613 -  -  -  -  ;   *   * *      *   *   * *   * *         *      *   *   * *     *    
  133 D1:E613 -  -  -  -  ;   ***** *      *   *   * ***** *          ***   *   *   * ***   ***  
  134 D1:E613 -  -  -  -  ;   *   * *      *   *   * *   * *             *  *   *   * *     *    
  135 D1:E613 -  -  -  -  ;   *   *  ***   *    ***  *   * *****      ***   *    ***  *     *    
  136 D1:E613 -  -  -  -  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  137 D1:E613 -  -  -  -  
  138 D1:E613 -  -  -  -  
  139 D1:E613 -  -  -  -  
  140 D1:E613 -  -  -  -  ;
  141 D1:E613 -  -  -  -  ppu_init:
  142 D1:E613 -  -  -  -      ;
  143 D1:E613 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
  144 D1:E618 ED 22 80 -      lea hl,ix-128
  145 D1:E61B ED 12 81 -      lea de,ix-127
  146 D1:E61E 01 7E 00 00     ld  bc,126
  147 D1:E622 36 00 -  -      ld  (hl),$00
  148 D1:E624 ED B0 -  -      ldir
  149 D1:E626 -  -  -  -      ;
  150 D1:E626 3E 55 -  -      ld  a,WREG_CONST
  151 D1:E628 DD 77 F4 -      ld  (ix+PPU_W),a
  152 D1:E62B -  -  -  -      ;
  153 D1:E62B 11 00 02 E3     ld  de,mpLcdPalette
  154 D1:E62F 21 FD E8 D1     ld  hl,paletteData
  155 D1:E633 01 80 00 00     ld  bc,64*2
  156 D1:E637 ED B0 -  -      ldir
  157 D1:E639 -  -  -  -      ;
  158 D1:E639 -  -  -  -  
  159 D1:E639 -  -  -  -  
  160 D1:E639 AF -  -  -      xor a,a
  161 D1:E63A 32 60 34 D0     ld  (int_table_len),a
  162 D1:E63E 11 4F E6 D1     ld  de,ppu_isr
  163 D1:E642 01 23 6D 00     ld  bc,27939
  164 D1:E646 CD 17 B6 D1     call int6502_insertISA  ;sets ix. ix before this unknown.
  165 D1:E64A DD 36 F1 02     ld  (ix+PPU_SUBCYCLE),2
  166 D1:E64E C9 -  -  -      ret
  167 D1:E64F -  -  -  -  
  168 D1:E64F -  -  -  -  
  169 D1:E64F -  -  -  -  
  170 D1:E64F -  -  -  -  ;Some bits of this is in "coreint.z80"
  171 D1:E64F -  -  -  -  ppu_isr:
  172 D1:E64F 3A 20 00 F0     ld  a,($F00020)
  173 D1:E653 E6 01 -  -      and a,%0000001
  174 D1:E655 C2 83 A9 D1     jp  nz,endCurrentRun    ;stop execution when ON key is pressed
  175 D1:E659 -  -  -  -  
  176 D1:E659 DD 7E E0 -      ld  a,(ix+PPU_CTRL)
  177 D1:E65C E6 18 -  -      and a,%00011000     ;sprite and background. if zero, no rendering happens.
  178 D1:E65E -  -  -  -      ;jr  z,ppu_isr_nodraw
  179 D1:E65E -  -  -  -      ;perform the check that makes odd cycles one ppu cc shorter, but only if
  180 D1:E65E -  -  -  -      ;something is being rendered to the screen
  181 D1:E65E DD 7E F5 -      ld  a,(ix+PPU_FRAMECOUNT)
  182 D1:E661 0F -  -  -      rrca
  183 D1:E662 30 03 -  -      jr  nc,+_
  184 D1:E664 DD 35 F1 -      dec (ix+PPU_SUBCYCLE)
  185 D1:E667 -  -  -  -  _:  ;there... should be something else to do?
  186 D1:E667 -  -  -  -      ;call ppu_drawBGSprites
  187 D1:E667 FD E5 -  -      push iy
  188 D1:E669 CD B5 E6 D1         call ppu_drawFrame
  189 D1:E66D FD E1 -  -      pop iy
  190 D1:E66F -  -  -  -      ;call ppu_drawFGSprites
  191 D1:E66F -  -  -  -  ppu_isr_nodraw:
  192 D1:E66F DD 34 F5 -      inc (ix+PPU_FRAMECOUNT)
  193 D1:E672 01 23 6D 00     ld  bc,27939
  194 D1:E676 DD 7E F1 -      ld  a,(ix+PPU_SUBCYCLE)
  195 D1:E679 C6 02 -  -      add a,2     ;add the 2/3rds cycle
  196 D1:E67B FE 03 -  -      cp  a,3     ;but is it more than 3? (0,1,2)
  197 D1:E67D 38 03 -  -      jr  c,+_
  198 D1:E67F D6 03 -  -      sub a,3
  199 D1:E681 03 -  -  -      inc bc
  200 D1:E682 DD 77 F1 -  _:  ld  (ix+PPU_SUBCYCLE),a
  201 D1:E685 ED 23 00 -      lea hl,iy+0
  202 D1:E688 B7 -  -  -      or  a,a
  203 D1:E689 ED 42 -  -      sbc hl,bc
  204 D1:E68B E5 -  -  -      push hl
  205 D1:E68C FD E1 -  -      pop iy
  206 D1:E68E 11 4F E6 D1     ld  de,ppu_isr
  207 D1:E692 CD BA B5 D1     call int6502_adjustTimings
  208 D1:E696 CD DA B5 D1     call int6502_pushISRAfterPop
  209 D1:E69A DD CB E2 FE     set 7,(ix+PPU_STATUS)
  210 D1:E69E 2A 4A 34 D0     ld  hl,(ppu_smc_gate)
  211 D1:E6A2 36 00 -  -      ld  (hl),$00        ;nop out ret so writes no longer ignored.
  212 D1:E6A4 -  -  -  -      ;
  213 D1:E6A4 -  -  -  -      ; TODO: Figure this one out:
  214 D1:E6A4 -  -  -  -      ; Do we need something to unset VBlank active flag at the end of
  215 D1:E6A4 -  -  -  -      ; VBlank if left unread?
  216 D1:E6A4 -  -  -  -      ;
  217 D1:E6A4 DD CB E0 7E     bit 7,(ix+PPU_CTRL)     ;VBlank NMI enable flag
  218 D1:E6A8 CA DE B6 D1     jp  z,i6502RetryFirstLoad
  219 D1:E6AC 3E FF -  -      ld  a,$FF
  220 D1:E6AE DD 77 1E -      ld  (ix+NMI_TRIGGERED),a
  221 D1:E6B1 C3 7D CD D1     jp  inst6502_brk
  222 D1:E6B5 -  -  -  -  
  223 D1:E6B5 -  -  -  -  
  224 D1:E6B5 -  -  -  -  
  225 D1:E6B5 -  -  -  -  
  226 D1:E6B5 -  -  -  -  
  227 D1:E6B5 -  -  -  -  
  228 D1:E6B5 -  -  -  -  ppu_drawFrame:
  229 D1:E6B5 -  -  -  -  
  230 D1:E6B5 -  -  -  -  ;backdrop color. Do not render the following if there are no
  231 D1:E6B5 -  -  -  -  ;sprites to hide in the background.
  232 D1:E6B5 2A 28 34 D0     ld  hl,(curScreenBuf)
  233 D1:E6B9 01 00 2C 01     ld  bc,320*240
  234 D1:E6BD 09 -  -  -      add hl,bc
  235 D1:E6BE ED 73 31 E7 
              D1 -  -  -      ld  (++_+1),sp
  236 D1:E6C3 F9 -  -  -      ld  sp,hl
  237 D1:E6C4 06 00 -  -      ld  b,0
  238 D1:E6C6 11 00 00 00     ld  de,0
  239 D1:E6CA D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -  _:  push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  240 D1:E6D4 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  241 D1:E6DE D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  242 D1:E6E8 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  243 D1:E6F2 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  244 D1:E6FC D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  245 D1:E706 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  246 D1:E710 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  247 D1:E71A D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  248 D1:E724 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  249 D1:E72E 10 9A -  -      djnz -_
  250 D1:E730 31 00 00 00 _:  ld  sp,0
  251 D1:E734 -  -  -  -  ;The following is a framecounter. Mask out if needed.
  252 D1:E734 21 01 00 00     ld  hl,1
  253 D1:E738 22 F6 31 D0     ld  (xPos),hl   
  254 D1:E73C DD 7E F5 -      ld  a,(ix+PPU_FRAMECOUNT)
  255 D1:E73F CD DF B1 D1     call printSmallNumPair
  256 D1:E743 3E 20 -  -      ld  a,' '
  257 D1:E745 CD AF B1 D1     call printBigFont
  258 D1:E749 AF -  -  -      xor a,a
  259 D1:E74A ED 62 -  -      sbc hl,hl
  260 D1:E74C ED 5B 00 00 
              F2 -  -  -      ld  de,($F20000)
  261 D1:E751 7A -  -  -      ld  a,d
  262 D1:E752 B7 -  -  -      or  a,a     ;Framerate too large to bother calculating. Or far too small.
  263 D1:E753 28 30 -  -      jr  z,ppu_noframerate
  264 D1:E755 22 00 00 F2     ld  ($F20000),hl
  265 D1:E759 21 00 80 00     ld  hl,32768
  266 D1:E75D AF -  -  -      xor a,a
  267 D1:E75E 3C -  -  -  _:  inc a
  268 D1:E75F ED 52 -  -      sbc hl,de
  269 D1:E761 30 FB -  -      jr  nc,-_
  270 D1:E763 3D -  -  -      dec a
  271 D1:E764 B7 -  -  -      or  a,a ;clears necessary flags
  272 D1:E765 27 -  -  -      daa
  273 D1:E766 D5 -  -  -      push de
  274 D1:E767 CD DF B1 D1         call printSmallNumPair
  275 D1:E76B 3E 2E -  -          ld  a,'.'
  276 D1:E76D CD AF B1 D1         call printBigFont
  277 D1:E771 D1 -  -  -      pop de
  278 D1:E772 AF -  -  -      xor a,a
  279 D1:E773 5A -  -  -      ld  e,d
  280 D1:E774 57 -  -  -      ld  d,a
  281 D1:E775 21 00 32 00     ld  hl,32768/256*100
  282 D1:E779 3C -  -  -  _:  inc a
  283 D1:E77A ED 52 -  -      sbc hl,de
  284 D1:E77C 30 FB -  -      jr  nc,-_
  285 D1:E77E 3D -  -  -      dec a
  286 D1:E77F B7 -  -  -      or  a,a ;clears necessary flags
  287 D1:E780 27 -  -  -      daa
  288 D1:E781 CD DF B1 D1     call printSmallNumPair
  289 D1:E785 -  -  -  -  ppu_noframerate:
  290 D1:E785 CD A5 B0 D1     call fastCopy
  291 D1:E789 C9 -  -  -      ret
  292 D1:E78A -  -  -  -  
  293 D1:E78A -  -  -  -      
  294 D1:E78A -  -  -  -      
  295 D1:E78A -  -  -  -  
  296 D1:E78A -  -  -  -  
  297 D1:E78A -  -  -  -  
  298 D1:E78A -  -  -  -  
  299 D1:E78A -  -  -  -  
  300 D1:E78A -  -  -  -  
  301 D1:E78A -  -  -  -  
  302 D1:E78A -  -  -  -  
  303 D1:E78A -  -  -  -  
  304 D1:E78A -  -  -  -      ;set base rom addresses
  305 D1:E78A 2A 46 34 D0     ld  hl,(chr_rom_base)
  306 D1:E78E 01 00 10 00     ld  bc,$001000
  307 D1:E792 DD 7E E0 -      ld  a,(ix+PPU_CTRL)
  308 D1:E795 E5 -  -  -      push hl
  309 D1:E796 CB 67 -  -          bit 4,a     ;background pattern base offset
  310 D1:E798 28 01 -  -          jr  z,+_
  311 D1:E79A 09 -  -  -          add hl,bc
  312 D1:E79B 22 20 34 D0 _:      ld  (chr_rom_tiles),hl
  313 D1:E79F E1 -  -  -      pop hl
  314 D1:E7A0 CB 6F -  -      bit 5,a     ;sprite pattern base offset
  315 D1:E7A2 28 01 -  -      jr  z,+_
  316 D1:E7A4 09 -  -  -      add hl,bc
  317 D1:E7A5 22 24 34 D0 _:  ld  (chr_rom_sprites),hl
  318 D1:E7A9 -  -  -  -      ;set coarse x,y scroll positions. B=Y, C=x
  319 D1:E7A9 DD 07 FC -      ld  bc,(ix+PPU_XSCROLL)
  320 D1:E7AC CB 20 -  -      sla b
  321 D1:E7AE CB 20 -  -      sla b
  322 D1:E7B0 CB 20 -  -      sla b
  323 D1:E7B2 CB 21 -  -      sla c
  324 D1:E7B4 CB 21 -  -      sla c
  325 D1:E7B6 CB 21 -  -      sla c
  326 D1:E7B8 -  -  -  -      ;set base nametable addresses
  327 D1:E7B8 21 00 34 D0     ld  hl,nametable00
  328 D1:E7BC DD 7E E0 -      ld  a,(ix+PPU_CTRL)
  329 D1:E7BF E6 03 -  -      and a,3
  330 D1:E7C1 87 -  -  -      add a,a
  331 D1:E7C2 87 -  -  -      add a,a
  332 D1:E7C3 6F -  -  -      ld  L,a
  333 D1:E7C4 DD 2F F6 -      ld  (ix+PPU_NAMETABLE_PTR),hl   ;yeah. let's cache this so we don't lose it
  334 D1:E7C7 -  -  -  -      ;In-place setting of nametable address wrt X,Y
  335 D1:E7C7 -  -  -  -      ;%------YY YYYXXXXX
  336 D1:E7C7 ED 17 -  -      ld  de,(hl)
  337 D1:E7C9 79 -  -  -      ld  a,c
  338 D1:E7CA 07 -  -  -      rlca
  339 D1:E7CB 07 -  -  -      rlca
  340 D1:E7CC 07 -  -  -      rlca
  341 D1:E7CD 5F -  -  -      ld  e,a
  342 D1:E7CE AA -  -  -      xor a,d
  343 D1:E7CF E6 03 -  -      and a,%00000011
  344 D1:E7D1 AA -  -  -      xor a,d
  345 D1:E7D2 7B -  -  -      ld  a,e
  346 D1:E7D3 A8 -  -  -      xor a,b
  347 D1:E7D4 E6 E0 -  -      and %11100000
  348 D1:E7D6 A8 -  -  -      xor a,b
  349 D1:E7D7 5F -  -  -      ld  e,a
  350 D1:E7D8 -  -  -  -      ;Fetch first attribute byte from address
  351 D1:E7D8 -  -  -  -      ;%------YY YYYXXXXX -> %------11 11YYYXXX
  352 D1:E7D8 D5 -  -  -      push de
  353 D1:E7D9 7A -  -  -          ld  a,d
  354 D1:E7DA 1F -  -  -          rra
  355 D1:E7DB CB 3B -  -          srl e
  356 D1:E7DD 1F -  -  -          rra
  357 D1:E7DE CB 3B -  -          srl e       ;YYYYYXXX
  358 D1:E7E0 CB C2 -  -          set 0,d
  359 D1:E7E2 CB CA -  -          set 1,d
  360 D1:E7E4 7B -  -  -          ld  a,e
  361 D1:E7E5 07 -  -  -          rlca
  362 D1:E7E6 07 -  -  -          rlca
  363 D1:E7E7 F6 C0 -  -          or  a,%11000000
  364 D1:E7E9 AB -  -  -          xor a,e
  365 D1:E7EA E6 F8 -  -          and a,%11111000
  366 D1:E7EC AB -  -  -          xor a,e
  367 D1:E7ED 5F -  -  -          ld  e,a
  368 D1:E7EE 1A -  -  -          ld  a,(de)
  369 D1:E7EF D1 -  -  -      pop de
  370 D1:E7F0 -  -  -  -      ;Selects attribute from A from B=Y, C=X in format %0000AA00
  371 D1:E7F0 -  -  -  -      ;Let's instead use DE %------yy yYyxxxXx y: e6, x: e1
  372 D1:E7F0 CB 73 -  -      bit 6,e
  373 D1:E7F2 28 04 -  -      jr  z,+_
  374 D1:E7F4 07 -  -  -      rlca    ;If not zero, shift upper nibble into lower nibble
  375 D1:E7F5 07 -  -  -      rlca    ;for further selection.
  376 D1:E7F6 07 -  -  -      rlca
  377 D1:E7F7 07 -  -  -      rlca
  378 D1:E7F8 CB 4B -  -  _:  bit 1,e
  379 D1:E7FA 20 02 -  -      jr  nz,+_   ;If not zero, upper 2 bits of lower nibble already in position
  380 D1:E7FC 07 -  -  -      rlca        ;Otherwise, move them into position
  381 D1:E7FD 07 -  -  -      rlca        
  382 D1:E7FE E6 0C -  -  _:  and a,%00001100
  383 D1:E800 32 36 E8 D1     ld  (ppu_mainTileLoop_attribute_write),a
  384 D1:E804 -  -  -  -  
  385 D1:E804 DD 36 F9 1E     ld  (ix+PPU_VCOUNT),30
  386 D1:E808 FD 2A 28 34 
              D0 -  -  -      ld  iy,(curScreenBuf)
  387 D1:E80D ED 33 20 -      lea iy,iy+32
  388 D1:E810 -  -  -  -  ppu_verticalLoop:
  389 D1:E810 DD 36 FA 20     ld  (ix+PPU_HCOUNT),32
  390 D1:E814 -  -  -  -  ppu_horizontalLoop:
  391 D1:E814 1A -  -  -      ld  a,(de)
  392 D1:E815 E5 -  -  -      push hl
  393 D1:E816 D5 -  -  -          push de
  394 D1:E817 2A 20 34 D0             ld  hl,(chr_rom_tiles)
  395 D1:E81B 4F -  -  -              ld  c,a
  396 D1:E81C 06 10 -  -              ld  b,16
  397 D1:E81E ED 4C -  -              mlt bc
  398 D1:E820 09 -  -  -              add hl,bc
  399 D1:E821 DD 36 FB 08             ld  (ix+PPU_TCOUNT),8
  400 D1:E825 ED 13 00 -              lea de,iy+0
  401 D1:E828 -  -  -  -  ppu_mainTileLoop:
  402 D1:E828 7E -  -  -              ld  a,(hl)
  403 D1:E829 01 08 00 00             ld  bc,8
  404 D1:E82D 09 -  -  -              add hl,bc
  405 D1:E82E 46 -  -  -              ld  b,(hl)
  406 D1:E82F 4F -  -  -              ld  c,a
  407 D1:E830 E5 -  -  -              push hl
  408 D1:E831 21 00 32 D0                 ld  hl,vram_palette
  409 D1:E835 -  -  -  -  ppu_mainTileLoop_attribute_write    .equ $+1
  410 D1:E835 3E 00 -  -                  ld  a,0
  411 D1:E837 -  -  -  -                  ;Attrib to LSB of VRAM_PALETTE, shift CHR_ROM data to LSB to
  412 D1:E837 -  -  -  -                  ;form full address+offset. Copy from palette to buffer.
  413 D1:E837 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;1/8 12b apiece
  414 D1:E843 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;2/8
  415 D1:E84F 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;3/8
  416 D1:E85B 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;4/8
  417 D1:E867 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;5/8
  418 D1:E873 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;6/8
  419 D1:E87F 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;7/8
  420 D1:E88B 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;8/8 96b tot
  421 D1:E897 21 38 01 00                 ld  hl,320-8
  422 D1:E89B 19 -  -  -                  add hl,de
  423 D1:E89C EB -  -  -                  ex  de,hl
  424 D1:E89D E1 -  -  -              pop hl
  425 D1:E89E 01 F9 FF FF             ld  bc,-7
  426 D1:E8A2 09 -  -  -              add hl,bc
  427 D1:E8A3 DD 35 FB -              dec (ix+PPU_TCOUNT)
  428 D1:E8A6 20 80 -  -              jr  nz,ppu_mainTileLoop
  429 D1:E8A8 -  -  -  -              ;start wrapping up the horizontal loop
  430 D1:E8A8 D1 -  -  -          pop de
  431 D1:E8A9 E1 -  -  -      pop hl
  432 D1:E8AA 7B -  -  -      ld  a,e
  433 D1:E8AB 13 -  -  -      inc de
  434 D1:E8AC AB -  -  -      xor a,e
  435 D1:E8AD CB 6F -  -      bit 5,a     ;A carry in X would result in a change in bit 5
  436 D1:E8AF 28 14 -  -      jr  z,+_    ;Which means there's no crossover if no sign change
  437 D1:E8B1 1B -  -  -      dec de      ;revert those changes in case they cascaded past E
  438 D1:E8B2 1C -  -  -      inc e
  439 D1:E8B3 E6 E0 -  -      and a,%11100000     ;The funny thing is that the XOR above...
  440 D1:E8B5 AB -  -  -      xor a,e             ;... is still valid for this masking technique.
  441 D1:E8B6 4F -  -  -      ld  c,a     ;And now let's squirrel this and...
  442 D1:E8B7 42 -  -  -      ld  b,d     ;...D for later merge magic
  443 D1:E8B8 7C -  -  -      ld  a,h
  444 D1:E8B9 EE 04 -  -      xor a,%00000100 ;flip to the next horizontal buffer...
  445 D1:E8BB 67 -  -  -      ld  h,a
  446 D1:E8BC ED 17 -  -      ld  de,(hl)
  447 D1:E8BE 59 -  -  -      ld  e,c
  448 D1:E8BF 78 -  -  -      ld  a,b
  449 D1:E8C0 AA -  -  -      xor d
  450 D1:E8C1 E6 03 -  -      and a,%00000011
  451 D1:E8C3 AA -  -  -      xor d
  452 D1:E8C4 57 -  -  -      ld  d,a         ;and map coords into a new nametable
  453 D1:E8C5 ED 33 08 -  _:  lea iy,iy+8     ;next position on the buffer.
  454 D1:E8C8 DD 35 FA -      dec (ix+PPU_HCOUNT)
  455 D1:E8CB C2 14 E8 D1     jp  nz,ppu_horizontalLoop
  456 D1:E8CF -  -  -  -      ;the X buffer *will* have changed at some point and rolled around
  457 D1:E8CF -  -  -  -      ;so there's no need to deal with X. Still gotta do Y first...
  458 D1:E8CF EB -  -  -      ex  de,hl
  459 D1:E8D0 7C -  -  -      ld  a,h
  460 D1:E8D1 01 20 00 00     ld  bc,%00100000
  461 D1:E8D5 09 -  -  -      add hl,bc   ;%-----^yy yYyxxxXx
  462 D1:E8D6 EB -  -  -      ex  de,hl
  463 D1:E8D7 4B -  -  -      ld  c,e     ;coordinate storage.
  464 D1:E8D8 42 -  -  -      ld  b,d
  465 D1:E8D9 AA -  -  -      xor a,d     ;detect sign change in bit 2
  466 D1:E8DA CB 57 -  -      bit 2,a
  467 D1:E8DC 28 04 -  -      jr  z,+_
  468 D1:E8DE 7D -  -  -      ld  a,L
  469 D1:E8DF EE 08 -  -      xor a,%00001000 ;flip to the next vertical buffer...
  470 D1:E8E1 6F -  -  -      ld  L,a
  471 D1:E8E2 7D -  -  -  _:  ld  a,L
  472 D1:E8E3 EE 04 -  -      xor a,%00000100 ;flip back the horizontal buffer that must've been flipped.
  473 D1:E8E5 6F -  -  -      ld  L,a
  474 D1:E8E6 ED 17 -  -      ld  de,(hl)
  475 D1:E8E8 59 -  -  -      ld  e,c
  476 D1:E8E9 78 -  -  -      ld  a,b
  477 D1:E8EA AA -  -  -      xor d
  478 D1:E8EB E6 03 -  -      and a,%00000011
  479 D1:E8ED AA -  -  -      xor d
  480 D1:E8EE 57 -  -  -      ld  d,a         ;and map coords into a new nametable
  481 D1:E8EF 01 00 09 00     ld  bc,(320*7)+(320-256)
  482 D1:E8F3 FD 09 -  -      add iy,bc       ;move cursor pointer to the next row
  483 D1:E8F5 DD 35 F9 -      dec (ix+PPU_VCOUNT)
  484 D1:E8F8 C2 10 E8 D1     jp  nz,ppu_verticalLoop
  485 D1:E8FC C9 -  -  -      ret
  486 D1:E8FD -  -  -  -  
  487 D1:E8FD -  -  -  -  ;TODO: Test changes to the PPU and link together something in the mapper
  488 D1:E8FD -  -  -  -  ;to perform controls. Also. Those freakin' interrupts. DO THEM.
  489 D1:E8FD -  -  -  -  ;Might also want to implement a drawlist of sorts since writes to the ports
  490 D1:E8FD -  -  -  -  ;ought to be timestamped. That way, we'll be able to tell what the hell is
  491 D1:E8FD -  -  -  -  ;being done mid-frame and then make adjustments to such things as
  492 D1:E8FD -  -  -  -  ;BG rendering mid-draw, if necessary. Or be able to detect such attempts as
  493 D1:E8FD -  -  -  -  ;I don't think I want to deal with that. Only deal with stuff that should
  494 D1:E8FD -  -  -  -  ;be occurring within the VBlank period.
  495 D1:E8FD -  -  -  -  
  496 D1:E8FD -  -  -  -  
  497 D1:E8FD -  -  -  -  
  498 D1:E8FD -  -  -  -  
  499 D1:E8FD -  -  -  -  
  500 D1:E8FD -  -  -  -  
  501 D1:E8FD -  -  -  -  
  502 D1:E8FD -  -  -  -  
  503 D1:E8FD -  -  -  -  
  504 D1:E8FD -  -  -  -  
  505 D1:E8FD -  -  -  -  
Listing for file "main.z80"
  975 D1:E8FD -  -  -  -  #include "palette.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\palette.z80"
    1 D1:E8FD -  -  -  -  paletteData:
    2 D1:E8FD 8C B1 A0 BC 
              42 CC 06 CC 
              0A BC 0C A0 
              0C 80 6A 80 .dw $B18C, $BCA0, $CC42, $CC06, $BC0A, $A00C, $800C, $806A
    3 D1:E90D C6 80 02 81 
              20 81 20 81 
              00 A1 00 80 
              00 80 00 80 .dw $80C6, $8102, $8120, $8120, $A100, $8000, $8000, $8000
    4 D1:E91D B5 D6 82 E5 
              07 FD AD FC 
              73 E4 76 C0 
              B6 94 33 81 .dw $D6B5, $E582, $FD07, $FCAD, $E473, $C076, $94B6, $8133
    5 D1:E92D AD 81 07 82 
              22 82 20 96 
              E0 C1 00 80 
              00 80 00 80 .dw $81AD, $8207, $8222, $9620, $C1E0, $8000, $8000, $8000
    6 D1:E93D FF FF CC FE 
              51 FE F8 FD 
              BD FD BF E9 
              FF BD 7D 96 .dw $FFFF, $FECC, $FE51, $FDF8, $FDBD, $E9BF, $BDFF, $967D
    7 D1:E94D F8 82 51 83 
              8C 97 88 BF 
              28 EB 29 A5 
              00 80 00 80 .dw $82F8, $8351, $978C, $BF88, $EB28, $A529, $8000, $8000
    8 D1:E95D FF FF 97 FF 
              5A FF 3C FF 
              1E FF 1F F7 
              3F E7 5E D7 .dw $FFFF, $FF97, $FF5A, $FF3C, $FF1E, $F71F, $E73F, $D75E
    9 D1:E96D 9C CB BA CB 
              D7 D7 D6 E7 
              B6 F7 F7 DE 
              00 80 00 80 .dw $CB9C, $CBBA, $D7D7, $E7D6, $F7B6, $DEF7, $8000, $8000
   10 D1:E97D 0C A1 40 AC 
              02 BC 06 BC 
              0A B0 0C 98 
              0D 80 2A 80 .dw $A10C, $AC40, $BC02, $BC06, $B00A, $980C, $800D, $802A
   11 D1:E98D 86 80 A2 80 
              C0 80 C0 80 
              80 90 00 80 
              00 80 00 80 .dw $8086, $80A2, $80C0, $80C0, $9080, $8000, $8000, $8000
   12 D1:E99D 15 C2 02 D1 
              87 E4 4D E4 
              32 D4 55 B4 
              96 8C F3 80 .dw $C215, $D102, $E487, $E44D, $D432, $B455, $8C96, $80F3
   13 D1:E9AD 4E 81 88 81 
              A2 81 A0 85 
              40 AD 00 80 
              00 80 00 80 .dw $814E, $8188, $81A2, $85A0, $AD40, $8000, $8000, $8000
   14 D1:E9BD 3F E7 0C F6 
              B1 FD 78 FD 
              3D F9 5F D5 
              9F AD FD 89 .dw $E73F, $F60C, $FDB1, $FD78, $F93D, $D55F, $AD9F, $89FD
   15 D1:E9CD 58 82 B2 82 
              CC 86 C9 AA 
              69 D2 C9 98 
              00 80 00 80 .dw $8258, $82B2, $86CC, $AAC9, $D269, $98C9, $8000, $8000
   16 D1:E9DD 3F E7 D8 EE 
              9A F6 7C F6 
              7F EE 7F E2 
              9F D2 BF C2 .dw $E73F, $EED8, $F69A, $F67C, $EE7F, $E27F, $D29F, $C2BF
   17 D1:E9ED FD BA 1A B7 
              18 BF 17 CF 
              F7 DE 57 C6 
              00 80 00 80 .dw $BAFD, $B71A, $BF18, $CF17, $DEF7, $C657, $8000, $8000
   18 D1:E9FD 68 99 80 A8 
              40 B8 03 B4 
              06 A4 08 8C 
              09 80 67 80 .dw $9968, $A880, $B840, $B403, $A406, $8C08, $8009, $8067
   19 D1:EA0D A4 80 00 81 
              20 81 20 81 
              E0 90 00 80 
              00 80 00 80 .dw $80A4, $8100, $8120, $8120, $90E0, $8000, $8000, $8000
   20 D1:EA1D 8F B6 60 C9 
              E3 DC 88 DC 
              4D C4 70 A4 
              B0 80 0E 81 .dw $B68F, $C960, $DCE3, $DC88, $C44D, $A470, $80B0, $810E
   21 D1:EA2D 89 81 E4 81 
              20 82 00 86 
              C0 A9 00 80 
              00 80 00 80 .dw $8189, $81E4, $8220, $8600, $A9C0, $8000, $8000, $8000
   22 D1:EA3D D8 DB A7 EE 
              2C FE B1 FD 
              96 E9 99 C5 
              D9 9D 57 82 .dw $DBD8, $EEA7, $FE2C, $FDB1, $E996, $C599, $9DD9, $8257
   23 D1:EA4D D2 82 2D 83 
              68 83 65 A3 
              04 CB 26 91 
              00 80 00 80 .dw $82D2, $832D, $8368, $A365, $CB04, $9126, $8000, $8000
   24 D1:EA5D D8 DB 51 E3 
              33 EB F5 EA 
              F7 DE F8 D2 
              19 C3 37 B3 .dw $DBD8, $E351, $EB33, $EAF5, $DEF7, $D2F8, $C319, $B337
   25 D1:EA6D 76 AB 93 AB 
              B1 B7 B0 C3 
              90 D3 B0 BA 
              00 80 00 80 .dw $AB76, $AB93, $B7B1, $C3B0, $D390, $BAB0, $8000, $8000
   26 D1:EA7D 08 99 40 A4 
              00 B0 03 B0 
              06 A4 09 8C 
              09 80 27 80 .dw $9908, $A440, $B000, $B003, $A406, $8C09, $8009, $8027
   27 D1:EA8D 64 80 A0 80 
              C0 80 C0 80 
              80 90 00 80 
              00 80 00 80 .dw $8064, $80A0, $80C0, $80C0, $9080, $8000, $8000, $8000
   28 D1:EA9D 10 B2 E0 C4 
              84 D4 49 D4 
              2D C4 30 A4 
              71 80 CE 80 .dw $B210, $C4E0, $D484, $D449, $C42D, $A430, $8071, $80CE
   29 D1:EAAD 2A 81 85 81 
              A1 81 80 81 
              40 A5 00 80 
              00 80 00 80 .dw $812A, $8185, $81A1, $8180, $A540, $8000, $8000, $8000
   30 D1:EABD 39 D7 08 EA 
              AD F9 52 F9 
              36 E9 5A C5 
              9A 9D F7 81 .dw $D739, $EA08, $F9AD, $F952, $E936, $C55A, $9D9A, $81F7
   31 D1:EACD 53 82 AD 82 
              C9 82 A6 9E 
              65 C6 C6 90 
              00 80 00 80 .dw $8253, $82AD, $82C9, $9EA6, $C665, $90C6, $8000, $8000
   32 D1:EADD 39 D7 B2 DE 
              94 E2 76 E2 
              58 DE 79 CE 
              99 BE B8 B2 .dw $D739, $DEB2, $E294, $E276, $DE58, $CE79, $BE99, $B2B8
   33 D1:EAED D7 AA F4 AA 
              12 B3 11 BF 
              F1 CE 31 BA 
              00 80 00 80 .dw $AAD7, $AAF4, $B312, $BF11, $CEF1, $BA31, $8000, $8000
   34 D1:EAFD 29 B9 80 C0 
              21 D0 05 CC 
              08 C0 0A A4 
              09 88 27 80 .dw $B929, $C080, $D021, $CC05, $C008, $A40A, $8809, $8027
   35 D1:EB0D 63 80 A0 80 
              E0 80 E0 88 
              C0 A4 00 80 
              00 80 00 80 .dw $8063, $80A0, $80E0, $88E0, $A4C0, $8000, $8000, $8000
   36 D1:EB1D 31 E2 21 E9 
              C6 FC 6B FC 
              2F E8 32 C4 
              71 9C CE 80 .dw $E231, $E921, $FCC6, $FC6B, $E82F, $C432, $9C71, $80CE
   37 D1:EB2D 29 81 84 81 
              C0 81 C0 9D 
              80 C9 00 84 
              00 80 00 80 .dw $8129, $8184, $81C0, $9DC0, $C980, $8400, $8000, $8000
   38 D1:EB3D 5A FF 69 FE 
              EE FD 94 FD 
              59 FD 5B F1 
              9B C9 F8 A1 .dw $FF5A, $FE69, $FDEE, $FD94, $FD59, $F15B, $C99B, $A1F8
   39 D1:EB4D 52 8E AD 8E 
              E8 A6 E5 CA 
              A6 F6 E7 AC 
              00 80 00 80 .dw $8E52, $8EAD, $A6E8, $CAE5, $F6A6, $ACE7, $8000, $8000
   40 D1:EB5D 5A FF F3 FE 
              D5 FE 98 FE 
              99 FE 9B FE 
              9A F2 D9 E2 .dw $FF5A, $FEF3, $FED5, $FE98, $FE99, $FE9B, $F29A, $E2D9
   41 D1:EB6D F7 DA 15 DB 
              33 E7 32 F3 
              12 FF 52 EA 
              00 80 00 80 .dw $DAF7, $DB15, $E733, $F332, $FF12, $EA52, $8000, $8000
   42 D1:EB7D E9 A8 40 AC 
              01 BC 04 BC 
              08 B0 09 9C 
              09 80 07 80 .dw $A8E9, $AC40, $BC01, $BC04, $B008, $9C09, $8009, $8007
   43 D1:EB8D 43 80 80 80 
              A0 80 A0 80 
              80 94 00 80 
              00 80 00 80 .dw $8043, $8080, $80A0, $80A0, $9480, $8000, $8000, $8000
   44 D1:EB9D D1 C9 E1 D0 
              86 E8 2B E8 
              0F D4 11 B8 
              51 94 AE 80 .dw $C9D1, $D0E1, $E886, $E82B, $D40F, $B811, $9451, $80AE
   45 D1:EBAD 09 81 44 81 
              80 81 60 8D 
              40 AD 00 80 
              00 80 00 80 .dw $8109, $8144, $8180, $8D60, $AD40, $8000, $8000, $8000
   46 D1:EBBD FA EE E9 F9 
              8F FD 34 FD 
              18 FD 1B DD 
              5B B9 B8 91 .dw $EEFA, $F9E9, $FD8F, $FD34, $FD18, $DD1B, $B95B, $91B8
   47 D1:EBCD 12 82 6D 82 
              89 92 86 B2 
              46 D6 A7 9C 
              00 80 00 80 .dw $8212, $826D, $9289, $B286, $D646, $9CA7, $8000, $8000
   48 D1:EBDD FA EE 93 F6 
              75 FE 58 FE 
              39 F6 3A EA 
              5A DA 79 CA .dw $EEFA, $F693, $FE75, $FE58, $F639, $EA3A, $DA5A, $CA79
   49 D1:EBED 97 C2 B5 C2 
              D3 CA D2 D6 
              B2 E6 12 CE 
              00 80 00 80 .dw $C297, $C2B5, $CAD3, $D6D2, $E6B2, $CE12, $8000, $8000
   50 D1:EBFD 07 A5 60 AC 
              20 B8 02 B8 
              06 A8 08 94 
              08 80 26 80 .dw $A507, $AC60, $B820, $B802, $A806, $9408, $8008, $8026
   51 D1:EC0D 63 80 A0 80 
              C0 80 C0 80 
              A0 98 00 80 
              00 80 00 80 .dw $8063, $80A0, $80C0, $80C0, $98A0, $8000, $8000, $8000
   52 D1:EC1D 0E C2 20 D1 
              C3 E0 68 E0 
              2C C8 2F AC 
              6F 88 AC 80 .dw $C20E, $D120, $E0C3, $E068, $C82C, $AC2F, $886F, $80AC
   53 D1:EC2D 08 81 83 81 
              A0 81 A0 8D 
              60 B1 00 80 
              00 80 00 80 .dw $8108, $8183, $81A0, $8DA0, $B160, $8000, $8000, $8000
   54 D1:EC3D 36 EB 46 F6 
              CB FD 70 FD 
              35 F1 37 D1 
              77 AD D5 8D .dw $EB36, $F646, $FDCB, $FD70, $F135, $D137, $AD77, $8DD5
   55 D1:EC4D 30 82 AB 82 
              E6 92 C4 B2 
              84 D6 C5 98 
              00 80 00 80 .dw $8230, $82AB, $92E6, $B2C4, $D684, $98C5, $8000, $8000
   56 D1:EC5D 36 EB D0 EE 
              B2 F6 94 F6 
              76 EE 77 DE 
              97 D2 B6 C2 .dw $EB36, $EED0, $F6B2, $F694, $EE76, $DE77, $D297, $C2B6
   57 D1:EC6D D4 BA 12 BB 
              10 C7 0F D3 
              EF E2 4F CA 
              00 80 00 80 .dw $BAD4, $BB12, $C710, $D30F, $E2EF, $CA4F, $8000, $8000
   58 D1:EC7D E7 9C 40 A8 
              00 B4 03 B4 
              06 A8 08 90 
              08 80 06 80 .dw $9CE7, $A840, $B400, $B403, $A806, $9008, $8008, $8006
   59 D1:EC8D 43 80 80 80 
              A0 80 A0 80 
              80 90 00 80 
              00 80 00 80 .dw $8043, $8080, $80A0, $80A0, $9080, $8000, $8000, $8000
   60 D1:EC9D CE B9 E0 C8 
              83 D8 28 D8 
              0C C8 0F A8 
              4F 84 AC 80 .dw $B9CE, $C8E0, $D883, $D828, $C80C, $A80F, $844F, $80AC
   61 D1:ECAD 08 81 43 81 
              80 81 60 85 
              40 A9 00 80 
              00 80 00 80 .dw $8108, $8143, $8180, $8560, $A940, $8000, $8000, $8000
   62 D1:ECBD F7 DE E7 ED 
              8C FD 31 FD 
              15 ED 18 CD 
              58 A5 B5 85 .dw $DEF7, $EDE7, $FD8C, $FD31, $ED15, $CD18, $A558, $85B5
   63 D1:ECCD 11 82 6C 82 
              87 86 84 A6 
              44 CE A5 94 
              00 80 00 80 .dw $8211, $826C, $8687, $A684, $CE44, $94A5, $8000, $8000
   64 D1:ECDD F7 DE 91 E6 
              72 EE 55 EE 
              36 E6 37 D6 
              57 CA 76 BA .dw $DEF7, $E691, $EE72, $EE55, $E636, $D637, $CA57, $BA76
   65 D1:ECED 95 B2 B2 B2 
              D1 BA CF CA 
              AF D6 10 C2 
              00 80 00 80 .dw $B295, $B2B2, $BAD1, $CACF, $D6AF, $C210, $8000, $8000
Listing for file "main.z80"
  976 D1:ECFD -  -  -  -  
  977 D1:ECFD -  -  -  -  .echo "Main program size: ",$-programStart
