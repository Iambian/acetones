    1 00:0000 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "main.z80"
    2 00:0000 -  -  -  -  .org userMem-2
    3 D1:A87F EF 7B -  -  .db $EF, $7B
    4 D1:A881 -  -  -  -  
    5 D1:A881 -  -  -  -  ;SPASM help msg
    6 D1:A881 -  -  -  -  ;-E = Assemble eZ80 code
    7 D1:A881 -  -  -  -  ;-T = Generate code listing
    8 D1:A881 -  -  -  -  ;-C = Code counter mode
    9 D1:A881 -  -  -  -  ;-L = Symbol table mode
   10 D1:A881 -  -  -  -  ;-S = Stats mode
   11 D1:A881 -  -  -  -  ;-O = Don't write to output file
   12 D1:A881 -  -  -  -  ;-I [directory] = Add include directory
   13 D1:A881 -  -  -  -  ;-A = Labels are cAse-sensitive
   14 D1:A881 -  -  -  -  ;-D<name>[=value] = Create a define 'name' [with 'value']
   15 D1:A881 -  -  -  -  ;-N = Don't use colors for messages
   16 D1:A881 -  -  -  -  ;-V <Expression> = Pipe expression directly into assembly
   17 D1:A881 -  -  -  -  ;-H = Print this help message
   18 D1:A881 -  -  -  -  
   19 D1:A881 -  -  -  -  
   20 D1:A881 -  -  -  -  
   21 D1:A881 -  -  -  -  
   22 D1:A881 -  -  -  -  programStart:
   23 D1:A881 F3 -  -  -      di
   24 D1:A882 ED 73 FC 31 
              D0 -  -  -      ld  (save_spl),sp
   25 D1:A887 ED 6E -  -      ld  a,MB
   26 D1:A889 32 FF 31 D0     ld  (save_mbase),a
   27 D1:A88D 3E D0 -  -      ld  a,$D0
   28 D1:A88F ED 6D -  -      ld  MB,a
   29 D1:A891 CD 7F AE D1     call startGfx
   30 D1:A895 -  -  -  -      ;
   31 D1:A895 -  -  -  -      ; todo; write test 6502 program, map it into rom.
   32 D1:A895 -  -  -  -      ; map virtual screen device into ram too. 32x30 screen ascii display
   33 D1:A895 -  -  -  -      ; is probably looking nice right about now.
   34 D1:A895 -  -  -  -      ; Could probably map it into PPU space since we're not actually doing
   35 D1:A895 -  -  -  -      ; anything about that until long after we're done testing core integrity
   36 D1:A895 -  -  -  -      ; You'll probably want to create a mockup vector table then do some equate
   37 D1:A895 -  -  -  -      ; magic to offset it and map it to $FFXX such that the three vectors will
   38 D1:A895 -  -  -  -      ; magically line up with $FFFA-$FFFF. NMI, RES, and IRQ. In that order.
   39 D1:A895 -  -  -  -      ; The rest of the page won't need to matter. It could literally be the
   40 D1:A895 -  -  -  -      ; surrounding eZ80 data/code. Just... don't allow writes to it.
   41 D1:A895 -  -  -  -      ;
   42 D1:A895 -  -  -  -  
   43 D1:A895 21 00 00 D4     ld  hl,screenBuf1
   44 D1:A899 11 01 00 D4     ld  de,screenBuf1+1
   45 D1:A89D 01 FF 57 02     ld  bc,(2*240*320)-1
   46 D1:A8A1 36 00 -  -      ld  (hl),$00
   47 D1:A8A3 ED B0 -  -      ldir
   48 D1:A8A5 -  -  -  -  
   49 D1:A8A5 -  -  -  -      ;Makes sure all non-ROM areas have a mapping
   50 D1:A8A5 21 00 33 D0     ld  hl,scrap_mapping
   51 D1:A8A9 01 01 80 00     ld  bc,$008001
   52 D1:A8AD 1E 00 -  -      ld  e,0
   53 D1:A8AF CD FD B5 D1     call i6502_map_pages
   54 D1:A8B3 -  -  -  -  
   55 D1:A8B3 -  -  -  -  
   56 D1:A8B3 -  -  -  -      ;load reset vectors
   57 D1:A8B3 21 9F A8 D1     ld  hl,testVectors
   58 D1:A8B7 01 01 01 00     ld  bc,$000101
   59 D1:A8BB 1E FF -  -      ld  e,$FF
   60 D1:A8BD CD FD B5 D1     call i6502_map_pages
   61 D1:A8C1 -  -  -  -      ;load program ROM to lowmem
   62 D1:A8C1 21 9F A9 D1     ld  hl,testCode
   63 D1:A8C5 01 08 20 00     ld  bc,$002008
   64 D1:A8C9 1E 80 -  -      ld  e,$80
   65 D1:A8CB CD FD B5 D1     call i6502_map_pages
   66 D1:A8CF -  -  -  -      ;map nametable to writeable address space. Write routine to mirror this
   67 D1:A8CF -  -  -  -      ;memory to screen.
   68 D1:A8CF 21 00 50 D0     ld  hl,NAMETABLE1
   69 D1:A8D3 01 04 20 00     ld  bc,$002004
   70 D1:A8D7 1E 40 -  -      ld  e,$40
   71 D1:A8D9 CD FD B5 D1     call i6502_map_pages
   72 D1:A8DD -  -  -  -      ;Everything should be ready. Set up the debug environment and then
   73 D1:A8DD -  -  -  -      ;start the emulation.
   74 D1:A8DD -  -  -  -      ;jr $
   75 D1:A8DD CD D2 AE D1     call clearTextBuf
   76 D1:A8E1 3E 01 -  -      ld  a,1
   77 D1:A8E3 CD 1F AF D1     call setLineStart
   78 D1:A8E7 CD 28 AF D1     call setCurLine
   79 D1:A8EB 21 25 AA D1     ld  hl,text001
   80 D1:A8EF CD 4A AF D1     call printString
   81 D1:A8F3 FD 21 93 AA 
              D1 -  -  -      ld  iy,firstFileHeader
   82 D1:A8F8 01 00 00 00     ld  bc,0
   83 D1:A8FC FD 4E FF -      ld  c,(iy-1)
   84 D1:A8FF CD FA AD D1     call vatTraverse
   85 D1:A903 DA B0 AA D1     jp  c,err_noContainersFound
   86 D1:A907 D5 -  -  -      push de
   87 D1:A908 21 3C AA D1         ld  hl,text003
   88 D1:A90C CD 4A AF D1         call printString
   89 D1:A910 DD 46 FA -          ld  b,(ix-6)
   90 D1:A913 ED 22 F9 -          lea hl,ix-7
   91 D1:A916 7E -  -  -  _:      ld  a,(hl)
   92 D1:A917 2B -  -  -          dec hl
   93 D1:A918 E5 -  -  -          push hl
   94 D1:A919 C5 -  -  -              push bc
   95 D1:A91A CD 60 AF D1                 call PrintBigFont
   96 D1:A91E C1 -  -  -              pop bc
   97 D1:A91F E1 -  -  -          pop hl
   98 D1:A920 10 F4 -  -          djnz -_
   99 D1:A922 CD 33 AF D1         call newLine
  100 D1:A926 D1 -  -  -      pop de
  101 D1:A927 CD C9 AB D1     call loadROMFile
  102 D1:A92B -  -  -  -  
  103 D1:A92B -  -  -  -      ;REMOVE THE FOLLOWING BLOCK WHEN DONE TESTING NESTEST
  104 D1:A92B -  -  -  -      ;
  105 D1:A92B -  -  -  -      ;
  106 D1:A92B 21 1C AA D1     ld  hl,timings_file
  107 D1:A92F CD 20 03 02     call _Mov9ToOP1
  108 D1:A933 CD 0C 05 02     call _ChkFindSym
  109 D1:A937 DA 5E A9 D1     jp  c,endCurrentRun
  110 D1:A93B CD 98 1F 02     call _ChkInRam
  111 D1:A93F EB -  -  -      ex  de,hl
  112 D1:A940 30 08 -  -      jr  nc,+_
  113 D1:A942 11 09 00 00     ld  de,9
  114 D1:A946 19 -  -  -      add hl,de
  115 D1:A947 5E -  -  -      ld  e,(hl)
  116 D1:A948 19 -  -  -      add hl,de
  117 D1:A949 23 -  -  -      inc hl
  118 D1:A94A 5E -  -  -  _:  ld  e,(hl)
  119 D1:A94B 23 -  -  -      inc hl
  120 D1:A94C 56 -  -  -      ld  d,(hl)
  121 D1:A94D 23 -  -  -      inc hl
  122 D1:A94E 22 1F 34 D0     ld  (timings_base),hl
  123 D1:A952 -  -  -  -      ;
  124 D1:A952 -  -  -  -      ;
  125 D1:A952 -  -  -  -      ;
  126 D1:A952 -  -  -  -  
  127 D1:A952 -  -  -  -  
  128 D1:A952 21 49 AA D1     ld  hl,text004
  129 D1:A956 CD 4A AF D1     call printString
  130 D1:A95A -  -  -  -  
  131 D1:A95A -  -  -  -      ;jr $
  132 D1:A95A -  -  -  -  #ifdef COREDEBUG
  133 D1:A95A                 call dbg_resetScreen
  134 D1:A95A             #endif
  135 D1:A95A CD 3F B3 D1     call i6502Init
  136 D1:A95E -  -  -  -  
  137 D1:A95E -  -  -  -  ;    call clearTextBuf
  138 D1:A95E -  -  -  -  ;    ld  hl,helloWorld
  139 D1:A95E -  -  -  -  ;    ld  de,NAMETABLE1+(32*1)+1
  140 D1:A95E -  -  -  -  ;    ld  bc,13
  141 D1:A95E -  -  -  -  ;    ldir
  142 D1:A95E -  -  -  -  
  143 D1:A95E -  -  -  -  endCurrentRun:
  144 D1:A95E CD B6 DE D1     call dbg_prepNextLine
  145 D1:A962 CD 33 AF D1     call newLine
  146 D1:A966 21 6B AA D1     ld  hl,text005
  147 D1:A96A CD 4A AF D1     call printString
  148 D1:A96E -  -  -  -  
  149 D1:A96E -  -  -  -      ;call printTextBuf
  150 D1:A96E CD 56 AE D1     call fastCopy
  151 D1:A972 00 -  -  -      nop
  152 D1:A973 CD 10 AA D1     call waituntilnewkeypress
  153 D1:A977 CD 08 AA D1     call waituntilkeyrelease
  154 D1:A97B -  -  -  -  
  155 D1:A97B -  -  -  -      ;
  156 D1:A97B -  -  -  -      ;
  157 D1:A97B -  -  -  -      ;
  158 D1:A97B -  -  -  -  programExit:
  159 D1:A97B CD 71 AE D1     call stopGfx
  160 D1:A97F ED 7B FC 31 
              D0 -  -  -      ld  sp,(save_spl)
  161 D1:A984 3A FF 31 D0     ld  a,(save_mbase)
  162 D1:A988 ED 6D -  -      ld  MB,a
  163 D1:A98A FD 21 80 00 
              D0 -  -  -      ld  iy,flags
  164 D1:A98F C9 -  -  -      ret
  165 D1:A990 -  -  -  -  
  166 D1:A990 -  -  -  -  
  167 D1:A990 -  -  -  -  testFilename:
  168 D1:A990 15 4E 45 53 
              54 45 53 54 
              00 -  -  -  .db AppVarObj,"NESTEST",0
  169 D1:A999 -  -  -  -  
  170 D1:A999 -  -  -  -  
  171 D1:A999 -  -  -  -  ;NMI, RES, and IRQ. In that order.
  172 D1:A999 -  -  -  -  testVectors .equ $-(256-6)
  173 D1:A999 00 80 -  -  .dw $8000
  174 D1:A99B 00 80 -  -  .dw $8000
  175 D1:A99D 00 80 -  -  .dw $8000
  176 D1:A99F -  -  -  -  testCode:
  177 D1:A99F A9 00 AA A8 .db $A9,$00,$AA,$A8
  178 D1:A9A3 BD 14 80 -  .db $BD,$14,$80
  179 D1:A9A6 C9 00 -  -  .db $C9,$00
  180 D1:A9A8 F0 08 -  -  .db $F0,$08
  181 D1:A9AA 99 21 40 -  .db $99,$21,$40
  182 D1:A9AD E8 C8 -  -  .db $E8,$C8
  183 D1:A9AF -  -  -  -  ;.db $12
  184 D1:A9AF 4C 04 80 02 .db $4C,$04,$80,$02
  185 D1:A9B3 48 65 6C 6C 
              6F 2C 20 57 
              6F -  -  -  .db $48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F
  186 D1:A9BC 72 6C 64 21 
              00 -  -  -  .db $72,$6C,$64,$21,$00
  187 D1:A9C1 -  -  -  -  
  188 D1:A9C1 -  -  -  -  
  189 D1:A9C1 A9 00 AA A8 
              BD 11 80 C9 
              00 F0 05 99 
              21 40 D0 -  .db $A9,$00,$AA,$A8,$BD,$11,$80,$C9,$00,$F0,$05,$99,$21,$40,$D0
  190 D1:A9D0 F4 02 48 65 
              6C 6C 6F 2C 
              20 57 6F 72 
              6C 64 21 00 .db $F4,$02,$48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F,$72,$6C,$64,$21,$00
  191 D1:A9E0 02 -  -  -  .db $02     ;JAM. Emulator terminates on unsupported instructions or JAMs.
  192 D1:A9E1 -  -  -  -  
  193 D1:A9E1 -  -  -  -  helloWorld:
  194 D1:A9E1 48 65 6C 6C 
              6F 2C 20 57 
              6F 72 6C 64 
              21 00 -  -  .db "Hello, World!",0
  195 D1:A9EF -  -  -  -  
  196 D1:A9EF -  -  -  -  ;Copied from my Falldown2 project. I didn't want to have to
  197 D1:A9EF -  -  -  -  ;find yet another hardware reference for something I already did.
  198 D1:A9EF -  -  -  -  ;But I'll have to do it again anyway because this isn't exactly
  199 D1:A9EF -  -  -  -  ;what we're looking for. Here, we output the same sort of
  200 D1:A9EF -  -  -  -  ;game keys that I've used basically all my programming life.
  201 D1:A9EF -  -  -  -  ;Anyhoo. We'll be using the following:
  202 D1:A9EF -  -  -  -  ;kbitDown	equ 00h
  203 D1:A9EF -  -  -  -  ;kbitLeft	equ 01h
  204 D1:A9EF -  -  -  -  ;kbitRight	equ 02h
  205 D1:A9EF -  -  -  -  ;kbitUp		equ 03h
  206 D1:A9EF -  -  -  -  ;kbitYequ equ 04h
  207 D1:A9EF -  -  -  -  ;kbit2nd		equ 05h
  208 D1:A9EF -  -  -  -  ;kbitMode	equ 06h
  209 D1:A9EF -  -  -  -  ;kbitDel		equ 07h
  210 D1:A9EF -  -  -  -  ;You can find the other defines approximately where I found the stuff above.
  211 D1:A9EF -  -  -  -  
  212 D1:A9EF -  -  -  -  getkbd_adl:
  213 D1:A9EF DD 21 00 00 
              F5 -  -  -  	ld  ix,mpKeyMode
  214 D1:A9F4 ED 22 00 -  	lea hl,ix+0
  215 D1:A9F7 36 02 -  -  	ld  (hl),keyModeScanOnce
  216 D1:A9F9 AF -  -  -  	xor a
  217 D1:A9FA BE -  -  -  _:  cp  (hl)
  218 D1:A9FB 20 FD -  -  	jr  nz,-_
  219 D1:A9FD DD 7E 12 -  	ld  a,(ix+kbdG1-mpKeyRange)
  220 D1:AA00 DD 6E 1E -  	ld  l,(ix+kbdG7-mpKeyRange)
  221 D1:AA03 AD -  -  -  	xor L
  222 D1:AA04 E6 F0 -  -  	and 11110000b	;mask out lower bits to let me shove dpad bits in
  223 D1:AA06 AD -  -  -  	xor L
  224 D1:AA07 C9 -  -  -  	ret
  225 D1:AA08 -  -  -  -  
  226 D1:AA08 -  -  -  -  
  227 D1:AA08 -  -  -  -  waituntilkeyrelease:
  228 D1:AA08 CD EF A9 D1     call getkbd_adl
  229 D1:AA0C B7 -  -  -      or  a,a
  230 D1:AA0D 20 F9 -  -      jr  nz,waituntilkeyrelease
  231 D1:AA0F C9 -  -  -  	ret
  232 D1:AA10 -  -  -  -  
  233 D1:AA10 -  -  -  -  waituntilnewkeypress:
  234 D1:AA10 CD 08 AA D1     call waituntilkeyrelease
  235 D1:AA14 CD EF A9 D1 _:  call getkbd_adl
  236 D1:AA18 B7 -  -  -  	or  a,a
  237 D1:AA19 28 F9 -  -  	jr  z,-_
  238 D1:AA1B C9 -  -  -      ret
  239 D1:AA1C -  -  -  -  
  240 D1:AA1C -  -  -  -  timings_file:
  241 D1:AA1C 15 74 69 6D 
              69 6E 67 73 
              00 -  -  -  .db AppVarObj,"timings",0
  242 D1:AA25 -  -  -  -  
  243 D1:AA25 -  -  -  -  text001:
  244 D1:AA25 4C 6F 6F 6B 
              69 6E 67 20 
              75 70 20 6E 
              65 73 74 65 
              73 74 2E 2E 
              2E 0A 00 -  .db "Looking up nestest...\n",0
  245 D1:AA3C -  -  -  -  text003:
  246 D1:AA3C 46 69 6C 65 
              20 66 6F 75 
              6E 64 3A 20 
              00 -  -  -  .db "File found: ",0
  247 D1:AA49 -  -  -  -  text004:
  248 D1:AA49 52 4F 4D 46 
              69 6C 65 20 
              6C 6F 61 64 
              65 64 20 61 
              6E 64 20 72 
              65 61 64 79 
              20 74 6F 20 
              72 75 6E 2E 
              0A 00 -  -  .db "ROMFile loaded and ready to run.\n",0
  249 D1:AA6B -  -  -  -  text005:
  250 D1:AA6B -  -  -  -  ;    0123456789012345678901234567890123456789
  251 D1:AA6B 43 50 55 20 
              45 78 65 63 
              75 74 69 6F 
              6E 20 48 61 
              6C 74 65 64 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 00 -  .db "CPU Execution Halted                  ",0
  252 D1:AA92 -  -  -  -  
  253 D1:AA92 -  -  -  -  
  254 D1:AA92 07 -  -  -  .db 7
  255 D1:AA93 -  -  -  -  firstFileHeader:
  256 D1:AA93 43 45 4E 52 
              4F 4D 00 -  .db "CENROM",0
  257 D1:AA9A -  -  -  -  
  258 D1:AA9A -  -  -  -  err_:
  259 D1:AA9A -  -  -  -  
  260 D1:AA9A -  -  -  -  err_err:
  261 D1:AA9A E1 -  -  -      pop hl
  262 D1:AA9B CD 4A AF D1     call printString
  263 D1:AA9F -  -  -  -  err_err_quit:
  264 D1:AA9F CD 56 AE D1     call fastCopy
  265 D1:AAA3 00 -  -  -      nop
  266 D1:AAA4 CD 10 AA D1     call waituntilnewkeypress
  267 D1:AAA8 CD 08 AA D1     call waituntilkeyrelease
  268 D1:AAAC C3 7B A9 D1     jp programExit
  269 D1:AAB0 -  -  -  -  
  270 D1:AAB0 -  -  -  -  err_noContainersFound:
  271 D1:AAB0 CD 9A AA D1     call err_err
  272 D1:AAB4 54 72 61 76 
              65 72 73 65 
              20 66 6F 75 
              6E 64 20 6E 
              6F 20 63 61 
              6E 64 69 64 
              61 74 65 73 
              2E 0A 00 -  .db "Traverse found no candidates.\n",0
  273 D1:AAD3 -  -  -  -  
  274 D1:AAD3 -  -  -  -  err_missingFiles:
  275 D1:AAD3 F5 -  -  -      push af
  276 D1:AAD4 21 E5 AA D1         ld  hl,err_missingFiles_str
  277 D1:AAD8 CD 4A AF D1         call printString
  278 D1:AADC F1 -  -  -      pop af
  279 D1:AADD CD 90 AF D1     call printSmallNumPair
  280 D1:AAE1 C3 9F AA D1     jp err_err_quit
  281 D1:AAE5 -  -  -  -  err_missingFiles_str:
  282 D1:AAE5 4E 75 6D 62 
              65 72 20 6F 
              66 20 66 69 
              6C 65 73 20 
              6D 69 73 73 
              69 6E 67 3A 
              20 00 -  -  .db "Number of files missing: ",0
  283 D1:AAFF -  -  -  -  
  284 D1:AAFF -  -  -  -  err_tooManyFiles:
  285 D1:AAFF CD 9A AA D1     call err_err
  286 D1:AB03 54 6F 6F 20 
              6D 61 6E 79 
              20 66 69 6C 
              65 73 20 66 
              6F 75 6E 64 
              2E 00 -  -  .db "Too many files found.",0
  287 D1:AB19 -  -  -  -  
  288 D1:AB19 -  -  -  -  err_PRGROMTooLarge:
  289 D1:AB19 CD 9A AA D1     call err_err
  290 D1:AB1D 50 52 47 5F 
              52 4F 4D 20 
              74 6F 6F 20 
              6C 61 72 67 
              65 2E 00 -  .db "PRG_ROM too large.",0
  291 D1:AB30 -  -  -  -  err_CHRROMTooLarge:
  292 D1:AB30 CD 9A AA D1     call err_err
  293 D1:AB34 43 48 52 5F 
              52 4F 4D 20 
              74 6F 6F 20 
              6C 61 72 67 
              65 2E 00 -  .db "CHR_ROM too large.",0
  294 D1:AB47 -  -  -  -  
  295 D1:AB47 -  -  -  -  err_missingROMDetected:
  296 D1:AB47 CD 9A AA D1     call err_err
  297 D1:AB4B 50 52 47 2B 
              43 48 52 20 
              3E 20 41 63 
              74 75 61 6C 
              20 66 69 6C 
              65 20 64 61 
              74 61 2E 00 .db "PRG+CHR > Actual file data.",0
  298 D1:AB67 -  -  -  -  
  299 D1:AB67 -  -  -  -  err_ROMHeaderDamaged:
  300 D1:AB67 CD 9A AA D1     call err_err
  301 D1:AB6B 49 4E 45 53 
              20 52 4F 4D 
              20 68 65 61 
              64 65 72 20 
              64 61 6D 61 
              67 65 64 2E 
              00 -  -  -  .db "INES ROM header damaged.",0
  302 D1:AB84 -  -  -  -  
  303 D1:AB84 -  -  -  -  err_MapperOutOfRange:
  304 D1:AB84 CD 9A AA D1     call err_err
  305 D1:AB88 4D 61 70 70 
              65 72 20 73 
              70 65 63 69 
              66 69 65 64 
              20 6F 75 74 
              20 6F 66 20 
              72 61 6E 67 
              65 2E 00 -  .db "Mapper specified out of range.",0
  306 D1:ABA7 -  -  -  -  
  307 D1:ABA7 -  -  -  -  err_CHRROMNotFound:
  308 D1:ABA7 CD 9A AA D1     call err_err
  309 D1:ABAB 43 48 52 5F 
              52 4F 4D 20 
              6E 6F 74 20 
              66 6F 75 6E 
              64 20 69 6E 
              73 69 64 65 
              20 66 69 6C 
              65 00 -  -  .db "CHR_ROM not found inside file",0
  310 D1:ABC9 -  -  -  -  
  311 D1:ABC9 -  -  -  -  
  312 D1:ABC9 -  -  -  -  ;Input: DE = Address of first file after the container header signature
  313 D1:ABC9 -  -  -  -  ;Outputs: ROM vectors recorded and ready to map
  314 D1:ABC9 -  -  -  -  ;Destroys: All registers.
  315 D1:ABC9 -  -  -  -  loadROMFile:
  316 D1:ABC9 EB -  -  -      ex  de,hl
  317 D1:ABCA AF -  -  -      xor a,a
  318 D1:ABCB 32 08 34 D0     ld  (missing_files),a
  319 D1:ABCF BE -  -  -  _:  cp  (hl)    ;
  320 D1:ABD0 23 -  -  -      inc hl      ;
  321 D1:ABD1 20 FC -  -      jr  nz,-_   ;skips past zero-terminated string containing full ROM name
  322 D1:ABD3 22 05 34 D0     ld  (basefile_sig),hl
  323 D1:ABD7 01 10 00 00     ld  bc,SIZEOF_INTEGRITY_HASH
  324 D1:ABDB 09 -  -  -      add hl,bc
  325 D1:ABDC 7E -  -  -      ld  a,(hl)
  326 D1:ABDD FE 01 -  -      cp  a,MAXNUMFILES
  327 D1:ABDF D2 FF AA D1     jp  nc,err_tooManyFiles
  328 D1:ABE3 32 04 34 D0     ld  (inputNumFiles),a
  329 D1:ABE7 47 -  -  -      ld  b,a
  330 D1:ABE8 -  -  -  -  ;    ld  c,SIZEOF_INTEGRITY_HASH     ;c already set to this value from earlier.
  331 D1:ABE8 ED 4C -  -      mlt bc
  332 D1:ABEA 23 -  -  -      inc hl
  333 D1:ABEB E5 -  -  -      push hl
  334 D1:ABEC 09 -  -  -          add hl,bc
  335 D1:ABED FD 21 22 34 
              D0 -  -  -          ld  iy,FILETABLE
  336 D1:ABF2 4E -  -  -          ld  c,(hl)
  337 D1:ABF3 23 -  -  -          inc hl
  338 D1:ABF4 46 -  -  -          ld  b,(hl)
  339 D1:ABF5 23 -  -  -          inc hl
  340 D1:ABF6 52 FD 0F 00         ld.s (iy+FILE_SIZE_OFFSET),bc
  341 D1:ABFA FD 2F 02 -          ld  (iy+FILE_ADR_OFFSET),hl
  342 D1:ABFD E1 -  -  -      pop hl
  343 D1:ABFE 3C -  -  -      inc a
  344 D1:ABFF 3D -  -  -      dec a
  345 D1:AC00 28 47 -  -      jr  z,loadROMFile_singleFileLoad
  346 D1:AC02 -  -  -  -      ;If more than one file, fill FILETABLE.
  347 D1:AC02 -  -  -  -      ;NOTE: For now, this machinery is disabled. Only a single file is allowed.
  348 D1:AC02 ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  349 D1:AC05 47 -  -  -      ld  b,a
  350 D1:AC06 -  -  -  -  loadROMFile_multiFileLoadLoop:
  351 D1:AC06 C5 -  -  -      push bc
  352 D1:AC07 FD 2F 05 -          ld  (iy+FILE_SIG_ADR_OFFSET),hl
  353 D1:AC0A 01 10 00 00         ld  bc,16
  354 D1:AC0E 11 EA AD D1         ld  de,loadROMFile_tempSigHash
  355 D1:AC12 ED B0 -  -          ldir
  356 D1:AC14 E5 -  -  -          push hl
  357 D1:AC15 FD E5 -  -              push iy
  358 D1:AC17 01 17 00 00                 ld  bc,23
  359 D1:AC1B FD 21 E3 AD 
              D1 -  -  -                  ld  iy,loadROMFile_tempSig
  360 D1:AC20 CD FA AD D1                 call vatTraverse    ;returns DE @ datasection size if found
  361 D1:AC24 30 05 -  -                  jr  nc,+_
  362 D1:AC26 21 08 34 D0                 ld  hl,missing_files
  363 D1:AC2A 34 -  -  -                  inc (hl)
  364 D1:AC2B FD E1 -  -  _:          pop iy
  365 D1:AC2D EB -  -  -              ex  de,hl
  366 D1:AC2E 5E -  -  -              ld  e,(hl)
  367 D1:AC2F 23 -  -  -              inc hl
  368 D1:AC30 56 -  -  -              ld  d,(hl)
  369 D1:AC31 23 -  -  -              inc hl
  370 D1:AC32 52 FD 1F 00             ld.s (iy+FILE_SIZE_OFFSET),de
  371 D1:AC36 FD 2F 02 -              ld  (iy+FILE_ADR_OFFSET),hl
  372 D1:AC39 E1 -  -  -          pop hl
  373 D1:AC3A C1 -  -  -      pop bc
  374 D1:AC3B ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  375 D1:AC3E 10 C6 -  -      djnz loadROMFile_multiFileLoadLoop
  376 D1:AC40 3A 08 34 D0     ld  a,(missing_files)
  377 D1:AC44 B7 -  -  -      or  a,a
  378 D1:AC45 C2 D3 AA D1     jp  nz,err_missingFiles
  379 D1:AC49 -  -  -  -  loadROMFile_singleFileLoad:
  380 D1:AC49 -  -  -  -      ;Compute size of ROM by summing filesizes, less INES header
  381 D1:AC49 3A 04 34 D0     ld  a,(inputNumFiles)
  382 D1:AC4D 3C -  -  -      inc a
  383 D1:AC4E 47 -  -  -      ld  b,a
  384 D1:AC4F 21 00 00 00     ld  hl,0
  385 D1:AC53 DD 21 22 34 
              D0 -  -  -      ld  ix,FILETABLE
  386 D1:AC58 52 DD 17 00 _:  ld.s de,(ix+FILE_SIZE_OFFSET)
  387 D1:AC5C 19 -  -  -      add hl,de
  388 D1:AC5D ED 32 08 -      lea ix,ix+FILETABLE_STRIDE
  389 D1:AC60 10 F6 -  -      djnz -_
  390 D1:AC62 01 F0 FF FF     ld  bc,-16
  391 D1:AC66 09 -  -  -      add hl,bc   ;subtract INES header
  392 D1:AC67 22 09 34 D0     ld  (total_rom_size),hl
  393 D1:AC6B -  -  -  -      ;Verify that the file actually contains an INES header.
  394 D1:AC6B -  -  -  -      ;TODO: Do this at an earlier stage. Such as file selection.
  395 D1:AC6B DD 2A 24 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  396 D1:AC70 DD 27 00 -      ld  hl,(ix+0)
  397 D1:AC73 11 4E 45 53     ld  de,$53454E         ;4E 45 53 == "NES"
  398 D1:AC77 B7 -  -  -      or  a,a
  399 D1:AC78 ED 52 -  -      sbc hl,de   ;Note: add does not affect zero flag. Can't test this via -DE
  400 D1:AC7A C2 67 AB D1 _:  jp  nz,err_ROMHeaderDamaged
  401 D1:AC7E DD 7E 03 -      ld  a,(ix+3)
  402 D1:AC81 FE 1A -  -      cp  a,$1A
  403 D1:AC83 20 F5 -  -      jr  nz,-_   ;19
  404 D1:AC85 -  -  -  -      ;Compute ROM size by reading INES header. This should be equ or lt above.
  405 D1:AC85 -  -  -  -      ;Note: The below line is optimized from...
  406 D1:AC85 DD 2A 24 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  407 D1:AC8A -  -  -  -      ;... these lines. But the intent might not be perfectly clear. We'll keep
  408 D1:AC8A -  -  -  -      ;these here just in case there's ever a question about it.
  409 D1:AC8A -  -  -  -  ;    ld  ix,FILETABLE
  410 D1:AC8A -  -  -  -  ;    ld  ix,(ix+FILE_ADR_OFFSET)
  411 D1:AC8A DD 6E 04 -      ld  L,(ix+4)    ;PRG ROM count, low
  412 D1:AC8D DD 5E 05 -      ld  e,(ix+5)    ;CHR ROM count, low
  413 D1:AC90 26 00 -  -      ld  h,0
  414 D1:AC92 54 -  -  -      ld  d,h
  415 D1:AC93 DD 7E 07 -      ld  a,(ix+7)    ;Check for INES2 bits
  416 D1:AC96 E6 0C -  -      and a,%00001100
  417 D1:AC98 FE 08 -  -      cp  a,%00001000
  418 D1:AC9A 20 1B -  -      jr  nz,+_
  419 D1:AC9C DD 7E 09 -      ld  a,(ix+9)
  420 D1:AC9F 47 -  -  -      ld  b,a
  421 D1:ACA0 E6 0F -  -      and a,$0F
  422 D1:ACA2 FE 02 -  -      cp  a,MAXPRGROM_HINIB+1
  423 D1:ACA4 D2 19 AB D1     jp  nc,err_PRGROMTooLarge
  424 D1:ACA8 67 -  -  -      ld  h,a
  425 D1:ACA9 78 -  -  -      ld  a,b
  426 D1:ACAA E6 F0 -  -      and a,$F0
  427 D1:ACAC 07 -  -  -      rlca
  428 D1:ACAD 07 -  -  -      rlca
  429 D1:ACAE 07 -  -  -      rlca
  430 D1:ACAF 07 -  -  -      rlca
  431 D1:ACB0 FE 04 -  -      cp  a,MAXCHRROM_HINIB+1
  432 D1:ACB2 D2 30 AB D1     jp  nc,err_CHRROMTooLarge
  433 D1:ACB6 57 -  -  -      ld  d,a
  434 D1:ACB7 AF -  -  -  _:  xor a,a
  435 D1:ACB8 32 0C 34 D0     ld  (prg_rom_size),a
  436 D1:ACBC 32 0F 34 D0     ld  (chr_rom_size),a
  437 D1:ACC0 29 -  -  -      add hl,hl   ;x2
  438 D1:ACC1 29 -  -  -      add hl,hl   ;x4
  439 D1:ACC2 29 -  -  -      add hl,hl   ;x8
  440 D1:ACC3 29 -  -  -      add hl,hl   ;x16
  441 D1:ACC4 29 -  -  -      add hl,hl   ;x32
  442 D1:ACC5 29 -  -  -      add hl,hl   ;x64
  443 D1:ACC6 52 22 0D 34 
              D0 -  -  -      ld.s (prg_rom_size+1),hl    ;x64x256
  444 D1:ACCB EB -  -  -      ex  de,hl
  445 D1:ACCC 29 -  -  -      add hl,hl   ;x2
  446 D1:ACCD 29 -  -  -      add hl,hl   ;x4
  447 D1:ACCE 29 -  -  -      add hl,hl   ;x8
  448 D1:ACCF 29 -  -  -      add hl,hl   ;x16
  449 D1:ACD0 29 -  -  -      add hl,hl   ;x32
  450 D1:ACD1 52 22 10 34 
              D0 -  -  -      ld.s (chr_rom_size+1),hl    ;x32x256
  451 D1:ACD6 2A 0F 34 D0     ld  hl,(chr_rom_size)
  452 D1:ACDA ED 5B 0C 34 
              D0 -  -  -      ld  de,(prg_rom_size)
  453 D1:ACDF 19 -  -  -      add hl,de
  454 D1:ACE0 ED 5B 09 34 
              D0 -  -  -      ld  de,(total_rom_size)
  455 D1:ACE5 B7 -  -  -      or  a,a
  456 D1:ACE6 ED 52 -  -      sbc hl,de   ;declared-actual. declared must be equal to or smaller.
  457 D1:ACE8 28 04 -  -      jr  z,+_
  458 D1:ACEA D2 47 AB D1     jp  nc,err_missingROMDetected
  459 D1:ACEE -  -  -  -  _:  ;Find trainer, PRG, and CHR base addresses
  460 D1:ACEE ED 22 10 -      lea hl,ix+16
  461 D1:ACF1 22 18 34 D0     ld  (trainer_base),hl   ;whether it exists or not.
  462 D1:ACF5 11 00 00 00     ld  de,0
  463 D1:ACF9 DD CB 06 56     bit 2,(ix+6)
  464 D1:ACFD 28 04 -  -      jr  z,+_
  465 D1:ACFF 11 00 02 00     ld  de,512
  466 D1:AD03 19 -  -  -  _:  add hl,de
  467 D1:AD04 22 18 34 D0     ld  (prg_rom_base),hl
  468 D1:AD08 FD 21 22 34 
              D0 -  -  -      ld  iy,FILETABLE
  469 D1:AD0D 52 FD 27 00     ld.s hl,(iy+FILE_SIZE_OFFSET)
  470 D1:AD11 B7 -  -  -      or  a,a
  471 D1:AD12 ED 52 -  -      sbc hl,de   ;less possible trainer
  472 D1:AD14 11 10 00 00     ld  de,16
  473 D1:AD18 ED 52 -  -      sbc hl,de   ;less iNES header. Remaining is now size of current file.
  474 D1:AD1A EB -  -  -      ex  de,hl   ;curfilesize is now in DE
  475 D1:AD1B 2A 0C 34 D0     ld  hl,(prg_rom_size)   ;keep subtracting filesize from this until carry.
  476 D1:AD1F B7 -  -  -      or  a,a
  477 D1:AD20 ED 52 -  -      sbc hl,de   ;if carry, prg_rom end is inside this file. Undo: HL is offset.
  478 D1:AD22 0E 00 -  -      ld  c,0     ;0th file current
  479 D1:AD24 38 1D -  -      jr  c,loadROMFile_locatedCHRROM
  480 D1:AD26 3A 04 34 D0     ld  a,(inputNumFiles)
  481 D1:AD2A B7 -  -  -      or  a,a
  482 D1:AD2B 28 12 -  -      jr  z,loadROMFile_noCHRROMFound
  483 D1:AD2D 47 -  -  -      ld  b,a
  484 D1:AD2E ED 33 08 -  _:  lea iy,iy+FILETABLE_STRIDE
  485 D1:AD31 52 ED 5B 00 
              00 00 -  -      ld.s de,(FILE_SIZE_OFFSET)
  486 D1:AD37 0C -  -  -      inc c
  487 D1:AD38 B7 -  -  -      or  a,a
  488 D1:AD39 ED 52 -  -      sbc hl,de   ;
  489 D1:AD3B 38 06 -  -      jr  c,loadROMFile_locatedCHRROM
  490 D1:AD3D 10 EF -  -      djnz -_
  491 D1:AD3F -  -  -  -  loadROMFile_noCHRROMFound:
  492 D1:AD3F C3 A7 AB D1     jp  err_CHRROMNotFound
  493 D1:AD43 -  -  -  -  loadROMFile_locatedCHRROM:
  494 D1:AD43 19 -  -  -      add hl,de       ;Undid subtract. HL is now offset in current file
  495 D1:AD44 FD 17 02 -      ld  de,(iy+FILE_ADR_OFFSET) ;so get address inside that file.
  496 D1:AD47 19 -  -  -      add hl,de
  497 D1:AD48 79 -  -  -      ld  a,c
  498 D1:AD49 22 1B 34 D0     ld  (chr_rom_base),hl
  499 D1:AD4D 32 1E 34 D0     ld  (chr_rom_base_file),a
  500 D1:AD51 -  -  -  -      ;Detect mapper and run its initializer
  501 D1:AD51 DD 7E 06 -      ld  a,(ix+6)
  502 D1:AD54 DD 46 07 -      ld  b,(ix+7)
  503 D1:AD57 07 -  -  -      rlca
  504 D1:AD58 07 -  -  -      rlca
  505 D1:AD59 07 -  -  -      rlca
  506 D1:AD5A 07 -  -  -      rlca
  507 D1:AD5B A8 -  -  -      xor a,b
  508 D1:AD5C E6 0F -  -      and a,$0F
  509 D1:AD5E A8 -  -  -      xor a,b
  510 D1:AD5F 52 EB -  -      ex.s de,hl  ;clears HLU,DEU
  511 D1:AD61 5F -  -  -      ld  e,a
  512 D1:AD62 21 12 34 D0     ld  hl,submapper
  513 D1:AD66 36 00 -  -      ld  (hl),0
  514 D1:AD68 78 -  -  -      ld  a,b
  515 D1:AD69 E6 0C -  -      and a,%00001100
  516 D1:AD6B FE 08 -  -      cp  a,%00001000
  517 D1:AD6D 3E 00 -  -      ld  a,0
  518 D1:AD6F 20 0E -  -      jr  nz,+_
  519 D1:AD71 DD 46 08 -      ld  b,(ix+8)
  520 D1:AD74 78 -  -  -      ld  a,b
  521 D1:AD75 07 -  -  -      rlca
  522 D1:AD76 07 -  -  -      rlca
  523 D1:AD77 07 -  -  -      rlca
  524 D1:AD78 07 -  -  -      rlca
  525 D1:AD79 E6 0F -  -      and a,$0F
  526 D1:AD7B 77 -  -  -      ld  (hl),a
  527 D1:AD7C 78 -  -  -      ld  a,b
  528 D1:AD7D E6 0F -  -      and a,$0F
  529 D1:AD7F 57 -  -  -  _:  ld  d,a
  530 D1:AD80 ED 53 14 34 
              D0 -  -  -      ld  (mapper_id),de
  531 D1:AD85 21 FF FF FF     ld  hl,-NUMBER_OF_MAPPERS
  532 D1:AD89 19 -  -  -      add hl,de
  533 D1:AD8A DA 84 AB D1     jp  c,err_MapperOutOfRange
  534 D1:AD8E ED 62 -  -      sbc hl,hl
  535 D1:AD90 19 -  -  -      add hl,de               ;hl=de. both are mapper IDs
  536 D1:AD91 2E 09 -  -      ld  L,MAPPER_STRIDE
  537 D1:AD93 55 -  -  -      ld  d,L
  538 D1:AD94 ED 6C -  -      mlt hl                  ;high byte multiply
  539 D1:AD96 65 -  -  -      ld  h,L
  540 D1:AD97 2E 00 -  -      ld  L,0
  541 D1:AD99 ED 5C -  -      mlt de                  ;low byte multiply
  542 D1:AD9B 19 -  -  -      add hl,de               ;This is the best 16bit * 8bit I know to do.
  543 D1:AD9C 11 A8 AD D1     ld  de,mapper_table
  544 D1:ADA0 19 -  -  -      add hl,de
  545 D1:ADA1 22 15 34 D0     ld  (mapper_adr_base),hl
  546 D1:ADA5 ED 27 -  -      ld  hl,(hl)
  547 D1:ADA7 E9 -  -  -      jp  (hl)
  548 D1:ADA8 -  -  -  -  
  549 D1:ADA8 -  -  -  -  mapper_table:   ;entries 9 wide
  550 D1:ADA8 B1 AD D1 -  .dl mapper0_init
  551 D1:ADAB DF AD D1 -  .dl mapper0_read
  552 D1:ADAE E1 AD D1 -  .dl mapper0_write
  553 D1:ADB1 -  -  -  -  
  554 D1:ADB1 -  -  -  -  mapper0_init:
  555 D1:ADB1 -  -  -  -      ;map trainer, if exist
  556 D1:ADB1 DD CB 06 56     bit 2,(ix+6)
  557 D1:ADB5 28 0D -  -      jr  z,+_
  558 D1:ADB7 2A 18 34 D0     ld  hl,(trainer_base)
  559 D1:ADBB 1E 70 -  -      ld  e,$70
  560 D1:ADBD 0E 02 -  -      ld  c,2
  561 D1:ADBF 41 -  -  -      ld  b,c
  562 D1:ADC0 CD FD B5 D1     call i6502_map_pages
  563 D1:ADC4 2A 0C 34 D0 _:  ld  hl,(prg_rom_size)
  564 D1:ADC8 11 FF BF FF     ld  de,-(16384+1)
  565 D1:ADCC 19 -  -  -      add hl,de   ;carry if more than 1 16KB segment
  566 D1:ADCD 2A 18 34 D0     ld  hl,(prg_rom_base)
  567 D1:ADD1 -  -  -  -      ;jr  $
  568 D1:ADD1 06 80 -  -      ld  b,$80
  569 D1:ADD3 58 -  -  -      ld  e,b
  570 D1:ADD4 0E 40 -  -      ld  c,$40
  571 D1:ADD6 30 02 -  -      jr  nc,+_
  572 D1:ADD8 CB 21 -  -      sla c
  573 D1:ADDA CD FD B5 D1 _:  call i6502_map_pages
  574 D1:ADDE C9 -  -  -      ret
  575 D1:ADDF -  -  -  -  
  576 D1:ADDF -  -  -  -  
  577 D1:ADDF -  -  -  -  mapper0_read:
  578 D1:ADDF 7E -  -  -      ld  a,(hl)
  579 D1:ADE0 C9 -  -  -      ret
  580 D1:ADE1 -  -  -  -  mapper0_write:
  581 D1:ADE1 70 -  -  -      ld  (hl),b
  582 D1:ADE2 C9 -  -  -      ret
  583 D1:ADE3 -  -  -  -  
  584 D1:ADE3 -  -  -  -  
  585 D1:ADE3 -  -  -  -  
  586 D1:ADE3 -  -  -  -  
  587 D1:ADE3 -  -  -  -  
  588 D1:ADE3 -  -  -  -  loadROMFile_tempSig:    ;total 23 bytes
  589 D1:ADE3 43 45 4E 52 
              4F 32 00 -  .db "CENRO2",0
  590 D1:ADEA -  -  -  -  loadROMFile_tempSigHash:
  591 D1:ADEA 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;16 bytes for hash
  592 D1:ADFA -  -  -  -  
  593 D1:ADFA -  -  -  -  
  594 D1:ADFA -  -  -  -  ;Input: IY = locationOfSignature. 
  595 D1:ADFA -  -  -  -  ;       BC=size of signature (long load to clear BCU), still limited to 255.
  596 D1:ADFA -  -  -  -  ;Output: carry=1: Variable not found.
  597 D1:ADFA -  -  -  -  ;Output: carry=0: DE=address of variable data start after the signature
  598 D1:ADFA -  -  -  -  ;        IX=location of current variable's VAT location.
  599 D1:ADFA -  -  -  -  ;Destroys: All registers not in use.
  600 D1:ADFA -  -  -  -  ;NOTES: This routine is capable of resuming a search that has ended.
  601 D1:ADFA -  -  -  -  
  602 D1:ADFA -  -  -  -  ;To continue searching:
  603 D1:ADFA -  -  -  -  ;call vatTraverse_continue with the following inputs:
  604 D1:ADFA -  -  -  -  ;   IX preserved from a non-carry return of vatTraverse.
  605 D1:ADFA -  -  -  -  ;   BC = same as input for vatTraverse. vatTraverse does not destroy this reg.
  606 D1:ADFA -  -  -  -  ;   WARNING: DO NOT KEEP SEARCHING AFTER CALL RETURNS CARRY. START A NEW SEARCH.
  607 D1:ADFA -  -  -  -  vatTraverse:
  608 D1:ADFA -  -  -  -      ;progPtr = progvat start; ptemp = progvatend
  609 D1:ADFA DD 2A 9D 25 
              D0 -  -  -      ld  ix,(progPtr)
  610 D1:ADFF -  -  -  -  vatTraverse_loop:
  611 D1:ADFF 2A 9A 25 D0     ld  hl,(pTemp)
  612 D1:AE03 ED 12 00 -      lea de,ix+0
  613 D1:AE06 B7 -  -  -      or  a,a
  614 D1:AE07 ED 52 -  -      sbc hl,de   ;HL<DE while in pVAT, else carry set.
  615 D1:AE09 3F -  -  -      ccf
  616 D1:AE0A D8 -  -  -      ret c
  617 D1:AE0B 1A -  -  -      ld  a,(de)
  618 D1:AE0C E6 1F -  -      and a,$1F
  619 D1:AE0E FE 15 -  -      cp  a,AppVarObj
  620 D1:AE10 20 34 -  -      jr  nz,vatTraverse_skip
  621 D1:AE12 DD 17 F9 -      ld  de,(ix-7)   ;puts "page" byte in DEU
  622 D1:AE15 DD 5E FD -      ld  e,(ix-3)
  623 D1:AE18 DD 56 FC -      ld  d,(ix-4)
  624 D1:AE1B CD 98 1F 02     call _ChkInRam
  625 D1:AE1F EB -  -  -      ex  de,hl
  626 D1:AE20 30 08 -  -      jr  nc,+_
  627 D1:AE22 11 09 00 00     ld  de,9
  628 D1:AE26 19 -  -  -      add hl,de
  629 D1:AE27 5E -  -  -      ld  e,(hl)
  630 D1:AE28 19 -  -  -      add hl,de
  631 D1:AE29 23 -  -  -      inc hl
  632 D1:AE2A 5E -  -  -  _:  ld  e,(hl)
  633 D1:AE2B 23 -  -  -      inc hl
  634 D1:AE2C 56 -  -  -      ld  d,(hl)
  635 D1:AE2D 23 -  -  -      inc hl
  636 D1:AE2E EB -  -  -      ex  de,hl
  637 D1:AE2F B7 -  -  -      or  a,a
  638 D1:AE30 ED 42 -  -      sbc hl,bc   ;varsize-entrysize. If carry, entry cannot possibly be in var.
  639 D1:AE32 38 12 -  -      jr  c,vatTraverse_skip
  640 D1:AE34 ED 23 00 -      lea hl,iy+0
  641 D1:AE37 C5 -  -  -      push bc
  642 D1:AE38 1A -  -  -  _:      ld  a,(de)
  643 D1:AE39 13 -  -  -          inc de
  644 D1:AE3A ED A1 -  -          cpi
  645 D1:AE3C 20 07 -  -          jr  nz,vatTraverse_sigNoMatch
  646 D1:AE3E EA 38 AE D1         jp  pe,-_
  647 D1:AE42 C1 -  -  -      pop bc
  648 D1:AE43 B7 -  -  -      or  a,a
  649 D1:AE44 C9 -  -  -      ret         ;NC. DE = past the signature.
  650 D1:AE45 -  -  -  -  vatTraverse_sigNoMatch:
  651 D1:AE45 C1 -  -  -      pop bc
  652 D1:AE46 -  -  -  -  vatTraverse_continue:
  653 D1:AE46 -  -  -  -  vatTraverse_skip:
  654 D1:AE46 3E 07 -  -      ld  a,7
  655 D1:AE48 11 FF FF FF     ld  de,-1
  656 D1:AE4C DD 86 FA -      add a,(ix-6)
  657 D1:AE4F ED 44 -  -      neg
  658 D1:AE51 5F -  -  -      ld  e,a
  659 D1:AE52 DD 19 -  -      add ix,de   ;because "sbc ix,de" isn't a thing. Boo.
  660 D1:AE54 18 A9 -  -      jr  vatTraverse_loop
  661 D1:AE56 -  -  -  -  
  662 D1:AE56 -  -  -  -  
  663 D1:AE56 -  -  -  -  
  664 D1:AE56 -  -  -  -  #include "lcd.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    1 D1:AE56 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 D1:AE56 -  -  -  -  ;TI-84 Plus CE Include File
    2 D1:AE56 -  -  -  -  
    3 D1:AE56 -  -  -  -  ;Various Parts Contributed by
    4 D1:AE56 -  -  -  -  ;- BrandonW
    5 D1:AE56 -  -  -  -  ;- calc84
    6 D1:AE56 -  -  -  -  ;- MateoConLechuga
    7 D1:AE56 -  -  -  -  ;- Runer112
    8 D1:AE56 -  -  -  -  ;- tr1p1ea
    9 D1:AE56 -  -  -  -  ;- Kerm Martian
   10 D1:AE56 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    2 D1:AE56 -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
    5 D1:AE56 -  -  -  -  ;
    6 D1:AE56 -  -  -  -  ;
    7 D1:AE56 -  -  -  -  ;
    8 D1:AE56 -  -  -  -  
    9 D1:AE56 -  -  -  -  DEBUG_PRINT_START_CYCLE .equ 0 ;$3800
   10 D1:AE56 -  -  -  -  DEBUG_STEP_START_CYCLE  .equ 26485
   11 D1:AE56 -  -  -  -  
   12 D1:AE56 -  -  -  -  
   13 D1:AE56 -  -  -  -  
   14 D1:AE56 -  -  -  -  FONTFGCOLOR .EQU $FF
   15 D1:AE56 -  -  -  -  FONTBGCOLOR .EQU $00
   16 D1:AE56 -  -  -  -  
   17 D1:AE56 -  -  -  -  screenBuf1      .equ vRam
   18 D1:AE56 -  -  -  -  screenBuf2      .equ vRam+(320*240)
   19 D1:AE56 -  -  -  -  ;DO NOT MOVE THESE.
   20 D1:AE56 -  -  -  -  xPos                .equ $D031F6
   21 D1:AE56 -  -  -  -  yPos                .equ $D031F7
   22 D1:AE56 -  -  -  -  slopPos             .equ $D031F8        ;extra byte here
   23 D1:AE56 -  -  -  -  debugram            .equ $D031F9        ;FA and FB occupied too.
   24 D1:AE56 -  -  -  -  save_spl            .equ $D031FC        ;FD and FE occupied too.
   25 D1:AE56 -  -  -  -  save_mbase          .equ $D031FF        ;
   26 D1:AE56 -  -  -  -  core_memory_ix      .equ $D03280        ;occupies D03200 to D032FF
   27 D1:AE56 -  -  -  -  scrap_mapping       .equ $D03300        ;256 bytes. maps to nowhere important.
   28 D1:AE56 -  -  -  -  saferam1            .equ $D03400        ;1024 bytes available. Define later.
   29 D1:AE56 -  -  -  -  main_ram            .equ $D03800        ;$0800 bytes of main system memory
   30 D1:AE56 -  -  -  -  
   31 D1:AE56 -  -  -  -  ZEROPAGE            .equ main_ram+(0*256)
   32 D1:AE56 -  -  -  -  STACKBASE           .equ main_ram+(1*256)
   33 D1:AE56 -  -  -  -  
   34 D1:AE56 -  -  -  -  BASETABLE           .equ $D04000        ;variable size. 256*BASETABLE_STRIDE
   35 D1:AE56 -  -  -  -  BASETABLE_STRIDE    .equ 8
   36 D1:AE56 -  -  -  -  PAGETABLE_OFFSET    .equ 0
   37 D1:AE56 -  -  -  -  PAGETABLE           .equ BASETABLE+PAGETABLE_OFFSET
   38 D1:AE56 -  -  -  -  JUMPTABLE_OFFSET    .equ 4
   39 D1:AE56 -  -  -  -  JUMPTABLE           .equ BASETABLE+JUMPTABLE_OFFSET
   40 D1:AE56 -  -  -  -  
   41 D1:AE56 -  -  -  -  NAMETABLE1          .equ BASETABLE+(512*BASETABLE_STRIDE)
   42 D1:AE56 -  -  -  -  NAMETABLE2          .equ NAMETABLE1 + 1024
   43 D1:AE56 -  -  -  -  
   44 D1:AE56 -  -  -  -  ;saferam1 1024 bytes storage
   45 D1:AE56 -  -  -  -  ;
   46 D1:AE56 -  -  -  -  curScreenBuf        .equ saferam1           ;3b
   47 D1:AE56 -  -  -  -  linestart           .equ curScreenBuf+3     ;1b
   48 D1:AE56 -  -  -  -  inputNumFiles       .equ linestart+1        ;1b
   49 D1:AE56 -  -  -  -  basefile_sig        .equ inputNumFiles+1    ;3b pointer to 16b hash
   50 D1:AE56 -  -  -  -  missing_files       .equ basefile_sig+3     ;1b
   51 D1:AE56 -  -  -  -  total_rom_size      .equ missing_files+1    ;3b
   52 D1:AE56 -  -  -  -  prg_rom_size        .equ total_rom_size+3   ;3b
   53 D1:AE56 -  -  -  -  chr_rom_size        .equ prg_rom_size+3     ;3b
   54 D1:AE56 -  -  -  -  submapper           .equ chr_rom_size+3     ;1b. iNES2 thing. Not often used.
   55 D1:AE56 -  -  -  -  ines_flag_6         .equ submapper+1        ;1b. Flags that a mapper may need.
   56 D1:AE56 -  -  -  -  mapper_id           .equ ines_flag_6+1      ;3b. Convenience load for 12 bits
   57 D1:AE56 -  -  -  -  mapper_adr_base     .equ mapper_id+1        ;3b. Used to load mapper
   58 D1:AE56 -  -  -  -  trainer_base        .equ mapper_adr_base+3  ;3b. If exist, starts here
   59 D1:AE56 -  -  -  -  prg_rom_base        .equ mapper_adr_base+3  ;3b. Adjusted in case of trainer.
   60 D1:AE56 -  -  -  -  chr_rom_base        .equ prg_rom_base+3     ;3b. Located somewhere.
   61 D1:AE56 -  -  -  -  chr_rom_base_file   .equ chr_rom_base+3     ;1b. Nonzero if not in first file.
   62 D1:AE56 -  -  -  -  timings_base        .equ chr_rom_base_file+1    ;3b. Current pointer to timings
   63 D1:AE56 -  -  -  -  
   64 D1:AE56 -  -  -  -  SIZEOF_INTEGRITY_HASH    .equ 16
   65 D1:AE56 -  -  -  -  MAXPRGROM_HINIB     .equ 1
   66 D1:AE56 -  -  -  -  MAXCHRROM_HINIB     .equ 3
   67 D1:AE56 -  -  -  -  NUMBER_OF_MAPPERS   .equ 1
   68 D1:AE56 -  -  -  -  MAPPER_STRIDE       .equ 9
   69 D1:AE56 -  -  -  -  
   70 D1:AE56 -  -  -  -  MAXNUMFILES         .equ 1                  ;set to 32 later. that's like 1.5MB
   71 D1:AE56 -  -  -  -  FILETABLE_STRIDE    .equ 8
   72 D1:AE56 -  -  -  -  FILETABLE           .equ timings_base+3   ;(MAXNUMFILES*FILETABLE_STRIDE)b
   73 D1:AE56 -  -  -  -  FILE_SIZE_OFFSET    .equ 0
   74 D1:AE56 -  -  -  -  FILE_ADR_OFFSET     .equ 2
   75 D1:AE56 -  -  -  -  FILE_SIG_ADR_OFFSET .equ 5
   76 D1:AE56 -  -  -  -  
   77 D1:AE56 -  -  -  -  
   78 D1:AE56 -  -  -  -  ;
   79 D1:AE56 -  -  -  -  ;
   80 D1:AE56 -  -  -  -  
   81 D1:AE56 -  -  -  -  ;Undefine this to speed up core process by losing debug state
   82 D1:AE56 -  -  -  -  #define COREDEBUG
   83 D1:AE56 -  -  -  -  
   84 D1:AE56 -  -  -  -  ;core memory
   85 D1:AE56 -  -  -  -  #define REGA 0
   86 D1:AE56 -  -  -  -  #define REGX 1
   87 D1:AE56 -  -  -  -  #define REGY 2
   88 D1:AE56 -  -  -  -  #define REGSP 3
   89 D1:AE56 -  -  -  -  #define REGSR 4
   90 D1:AE56 -  -  -  -  #define REGPC 5
   91 D1:AE56 -  -  -  -  #define CYCLES_REMAIN 8
   92 D1:AE56 -  -  -  -  #define CYCLES_CURRENT 11
   93 D1:AE56 -  -  -  -  #define CURRENT_OPCODES 14
   94 D1:AE56 -  -  -  -  ;flag IDs
   95 D1:AE56 -  -  -  -  #define SF_NEG 7
   96 D1:AE56 -  -  -  -  #define SF_OVER 6 
   97 D1:AE56 -  -  -  -  #define SF_RESERVED 5 
   98 D1:AE56 -  -  -  -  #define SF_BRK 4
   99 D1:AE56 -  -  -  -  #define SF_DEC 3
  100 D1:AE56 -  -  -  -  #define SF_INT 2
  101 D1:AE56 -  -  -  -  #define SF_ZERO 1
  102 D1:AE56 -  -  -  -  #define SF_CARRY 0
  103 D1:AE56 -  -  -  -  
  104 D1:AE56 -  -  -  -  #macro ADDCYC(X)
  105 D1:AE56                 #if (x < 1)
  106 D1:AE56                     nop
  107 D1:AE56                 #elif (X = 1)
  108 D1:AE56                     inc iy
  109 D1:AE56                 #else
  110 D1:AE56                     lea iy,iy+X
  111 D1:AE56                 #endif
  112 D1:AE56             #endmacro
  113 D1:AE56 -  -  -  -  
  114 D1:AE56 -  -  -  -  ;
  115 D1:AE56 -  -  -  -  ;
  116 D1:AE56 -  -  -  -  ;
  117 D1:AE56 -  -  -  -  #endif
  118 D1:AE56 -  -  -  -  .list
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    3 D1:AE56 -  -  -  -  
    4 D1:AE56 -  -  -  -  ;Function list:
    5 D1:AE56 -  -  -  -  ; fastCopy - Swaps drawing buffer to display what is currently written there.
    6 D1:AE56 -  -  -  -  ; startGfx - Configures LCD to run in graphx mode. UNSAFE TO RUN MORE THAN ONCE
    7 D1:AE56 -  -  -  -  ; stopGfx - Restores LCD configuration to TI-OS default.
    8 D1:AE56 -  -  -  -  ; configureScreen - Swaps screen configuration betwen current and stored.
    9 D1:AE56 -  -  -  -  ; setDefaultPalette - Sets default (XLIBC) color palette.
   10 D1:AE56 -  -  -  -  ; clearTextBuf - no inputs. Sets text buffer to all spaces.
   11 D1:AE56 -  -  -  -  ; printTextBuf - no inputs. Mirrors buffer to screen.
   12 D1:AE56 -  -  -  -  ; setLineStart - A=xpos. Set xPos and linestart
   13 D1:AE56 -  -  -  -  ; setCurLine - A=ypos. Set yPos.
   14 D1:AE56 -  -  -  -  ; newLine - no inputs. sets linestart = xPos, increments yPos
   15 D1:AE56 -  -  -  -  ; newPage - no inputs. sets linestart = xPos, yPos = 0
   16 D1:AE56 -  -  -  -  ; printString - HL=address to string. destroys all.
   17 D1:AE56 -  -  -  -  ; printBigFont - A=ASCII char to print at xPos,yPos. Advances xPos by 1.
   18 D1:AE56 -  -  -  -  ; printSmallNumPair - A=0-255 to print at xPos,Ypos. Advances xPos by 1.
   19 D1:AE56 -  -  -  -  ; calculateScreenPtr - Converts xPos,yPos into HL= screen buffer address.
   20 D1:AE56 -  -  -  -  ; calculateScreenPtrDE - Converts E=xPos,D=yPos into HL= screen buffer address.
   21 D1:AE56 -  -  -  -  ;
   22 D1:AE56 -  -  -  -  ;
   23 D1:AE56 -  -  -  -  ;
   24 D1:AE56 -  -  -  -  ;
   25 D1:AE56 -  -  -  -  ;
   26 D1:AE56 -  -  -  -  ;
   27 D1:AE56 -  -  -  -  ;
   28 D1:AE56 -  -  -  -  
   29 D1:AE56 -  -  -  -  
   30 D1:AE56 -  -  -  -  
   31 D1:AE56 -  -  -  -  
   32 D1:AE56 -  -  -  -  ;-----------------------------------------------------------------------------
   33 D1:AE56 -  -  -  -  ;Screen hardware interface stuff
   34 D1:AE56 -  -  -  -  
   35 D1:AE56 -  -  -  -  ;It ought to be called "bufSwap" but I just can't. I won't.
   36 D1:AE56 -  -  -  -  fastCopy:
   37 D1:AE56 11 00 00 D4     ld  de,screenBuf1
   38 D1:AE5A 2A 10 00 E3     ld  hl,(mpLcdBase)
   39 D1:AE5E 22 00 34 D0     ld  (curScreenBuf),hl
   40 D1:AE62 B7 -  -  -      or  a,a
   41 D1:AE63 ED 52 -  -      sbc hl,de
   42 D1:AE65 EB -  -  -      ex  de,hl
   43 D1:AE66 20 04 -  -      jr  nz,+_
   44 D1:AE68 21 00 2C D5     ld  hl,screenBuf2
   45 D1:AE6C 22 10 00 E3 _:  ld  (mpLcdBase),hl
   46 D1:AE70 C9 -  -  -      ret
   47 D1:AE71 -  -  -  -  
   48 D1:AE71 -  -  -  -  stopGfx:
   49 D1:AE71 CD 74 03 00     call _boot_ClearVRAM
   50 D1:AE75 11 2D 09 00     ld  de,lcdNormalMode
   51 D1:AE79 01 00 00 D4     ld  bc,screenBuf1
   52 D1:AE7D 18 0C -  -      jr  configureScreen
   53 D1:AE7F -  -  -  -  
   54 D1:AE7F -  -  -  -  startGfx:
   55 D1:AE7F CD 74 03 00     call _boot_ClearVRAM
   56 D1:AE83 11 27 39 01     ld  de,lcdWatermark+lcdIntFront+lcdPwr+lcdBgr+lcdBpp8
   57 D1:AE87 01 00 00 D4     ld  bc,screenBuf1
   58 D1:AE8B -  -  -  -  configureScreen:
   59 D1:AE8B 21 10 00 E3     ld  hl,mpLcdBase
   60 D1:AE8F ED 0F -  -      ld  (hl),bc
   61 D1:AE91 2E 18 -  -      ld  L,lcdCtrl
   62 D1:AE93 ED 1F -  -      ld  (hl),de
   63 D1:AE95 2E 01 -  -      ld  L,lcdTiming0 + 1
   64 D1:AE97 01 08 00 00     ld  bc,8
   65 D1:AE9B 11 CA AE D1     ld  de,screenSettings
   66 D1:AE9F 1A -  -  -  _:  ld  a,(de)
   67 D1:AEA0 ED A0 -  -      ldi
   68 D1:AEA2 2B -  -  -      dec hl
   69 D1:AEA3 77 -  -  -      ld  (hl),a
   70 D1:AEA4 23 -  -  -      inc hl
   71 D1:AEA5 EA 9F AE D1     jp  pe,-_
   72 D1:AEA9 21 00 2C D5     ld  hl,screenBuf2
   73 D1:AEAD 22 00 34 D0     ld  (curScreenBuf),hl
   74 D1:AEB1 -  -  -  -  ;Also copied from graphx
   75 D1:AEB1 -  -  -  -  setDefaultPalette:
   76 D1:AEB1 11 00 02 E3 	ld	de,mpLcdPalette	    ; address of mmio palette
   77 D1:AEB5 43 -  -  -  	ld	b,e			        ; b = 0
   78 D1:AEB6 78 -  -  -  _:	ld	a,b
   79 D1:AEB7 0F -  -  -  	rrca
   80 D1:AEB8 A8 -  -  -  	xor	a,b
   81 D1:AEB9 E6 E0 -  -  	and	a,224
   82 D1:AEBB A8 -  -  -  	xor	a,b
   83 D1:AEBC 12 -  -  -  	ld	(de),a
   84 D1:AEBD 13 -  -  -  	inc	de
   85 D1:AEBE 78 -  -  -  	ld	a,b
   86 D1:AEBF 17 -  -  -  	rla
   87 D1:AEC0 17 -  -  -  	rla
   88 D1:AEC1 17 -  -  -  	rla
   89 D1:AEC2 78 -  -  -  	ld	a,b
   90 D1:AEC3 1F -  -  -  	rra
   91 D1:AEC4 12 -  -  -  	ld	(de),a
   92 D1:AEC5 13 -  -  -  	inc	de
   93 D1:AEC6 04 -  -  -  	inc	b
   94 D1:AEC7 20 ED -  -  	jr	nz,-_		    ; loop for 256 times to fill palette
   95 D1:AEC9 C9 -  -  -  	ret
   96 D1:AECA -  -  -  -  
   97 D1:AECA -  -  -  -  screenSettings:
   98 D1:AECA -  -  -  -  ;Copied from my old Falldown2 project, which was also copied from graphx.asm
   99 D1:AECA -  -  -  -  ;	.db	14 shl 2			; PPL shl 2
  100 D1:AECA 07 -  -  -  	.db	7					; HSW
  101 D1:AECB 57 -  -  -  	.db	87					; HFP
  102 D1:AECC 3F -  -  -  	.db	63					; HBP
  103 D1:AECD 3F 01 -  -  	.dw	(0 >> 10)+319		; (VSW shl 10)+LPP
  104 D1:AECF B3 -  -  -  	.db	179					; VFP
  105 D1:AED0 00 -  -  -  	.db	0					; VBP
  106 D1:AED1 00 -  -  -  	.db	(0 >> 6)+(0 >> 5)+0	; (ACB shl 6)+(CLKSEL shl 5)+PCD_LO
  107 D1:AED2 -  -  -  -  ;  H = ((PPL+1)*16)+(HSW+1)+(HFP+1)+(HBP+1) = 240+8+88+64 = 400
  108 D1:AED2 -  -  -  -  ;  V = (LPP+1)+(VSW+1)+VFP+VBP = 320+1+179+0 = 500
  109 D1:AED2 -  -  -  -  ; CC = H*V*PCD*2 = 400*500*2*2 = 800000
  110 D1:AED2 -  -  -  -  ; Hz = 48000000/CC = 60
  111 D1:AED2 -  -  -  -  
  112 D1:AED2 -  -  -  -  
  113 D1:AED2 -  -  -  -  ;-----------------------------------------------------------------------------
  114 D1:AED2 -  -  -  -  ; Text Rendering
  115 D1:AED2 -  -  -  -  
  116 D1:AED2 -  -  -  -  clearTextBuf:
  117 D1:AED2 21 00 50 D0     ld  hl,NAMETABLE1
  118 D1:AED6 11 01 50 D0     ld  de,NAMETABLE1+1
  119 D1:AEDA 01 FF 03 00     ld  bc,1023
  120 D1:AEDE 36 20 -  -      ld  (hl),' '
  121 D1:AEE0 ED B0 -  -      ldir
  122 D1:AEE2 C9 -  -  -      ret
  123 D1:AEE3 -  -  -  -  
  124 D1:AEE3 -  -  -  -  printTextBuf:
  125 D1:AEE3 2A F6 31 D0     ld  hl,(xPos)
  126 D1:AEE7 22 17 AF D1     ld  (printTextBuf_smcPosRecovery),hl
  127 D1:AEEB 21 00 50 D0     ld  hl,NAMETABLE1
  128 D1:AEEF AF -  -  -      xor a,a
  129 D1:AEF0 32 F7 31 D0     ld  (yPos),a
  130 D1:AEF4 0E 1E -  -      ld  c,30
  131 D1:AEF6 3E 08 -  -  _:  ld  a,8
  132 D1:AEF8 32 F6 31 D0     ld  (xPos),a
  133 D1:AEFC 06 20 -  -      ld  b,$20
  134 D1:AEFE 7E -  -  -  _:  ld  a,(hl)
  135 D1:AEFF 23 -  -  -      inc hl
  136 D1:AF00 C5 -  -  -      push bc
  137 D1:AF01 E5 -  -  -          push hl
  138 D1:AF02 CD 60 AF D1             call printBigFont
  139 D1:AF06 E1 -  -  -          pop hl
  140 D1:AF07 C1 -  -  -      pop bc
  141 D1:AF08 10 F4 -  -      djnz -_
  142 D1:AF0A 3A F7 31 D0     ld  a,(yPos)
  143 D1:AF0E 3C -  -  -      inc a
  144 D1:AF0F 32 F7 31 D0     ld  (yPos),a
  145 D1:AF13 0D -  -  -      dec  c
  146 D1:AF14 20 E0 -  -      jr  nz,--_
  147 D1:AF16 -  -  -  -  printTextBuf_smcPosRecovery .equ $+1
  148 D1:AF16 21 00 00 00     ld  hl,0
  149 D1:AF1A 22 F6 31 D0     ld  (xPos),hl
  150 D1:AF1E C9 -  -  -      ret
  151 D1:AF1F -  -  -  -  
  152 D1:AF1F -  -  -  -  ;A=column to start on
  153 D1:AF1F -  -  -  -  setLineStart:
  154 D1:AF1F 32 F6 31 D0     ld  (xPos),a
  155 D1:AF23 32 03 34 D0     ld  (linestart),a
  156 D1:AF27 C9 -  -  -      ret
  157 D1:AF28 -  -  -  -  
  158 D1:AF28 -  -  -  -  ;A=row to start on
  159 D1:AF28 -  -  -  -  setCurLine:
  160 D1:AF28 32 F7 31 D0     ld  (yPos),a
  161 D1:AF2C C9 -  -  -      ret
  162 D1:AF2D -  -  -  -  
  163 D1:AF2D -  -  -  -  newPage:
  164 D1:AF2D 3E FF -  -      ld  a,$FF
  165 D1:AF2F 32 F7 31 D0     ld  (yPos),a
  166 D1:AF33 -  -  -  -  newLine:
  167 D1:AF33 3A 03 34 D0     ld  a,(linestart)
  168 D1:AF37 32 F6 31 D0     ld  (xPos),a
  169 D1:AF3B 3A F7 31 D0     ld  a,(yPos)
  170 D1:AF3F 3C -  -  -      inc a
  171 D1:AF40 FE 1E -  -      cp  30
  172 D1:AF42 38 01 -  -      jr  c,+_
  173 D1:AF44 AF -  -  -      xor a,a
  174 D1:AF45 32 F7 31 D0 _:  ld  (yPos),a
  175 D1:AF49 C9 -  -  -      ret
  176 D1:AF4A -  -  -  -  
  177 D1:AF4A -  -  -  -      
  178 D1:AF4A -  -  -  -      
  179 D1:AF4A -  -  -  -  
  180 D1:AF4A -  -  -  -  ;HL=address to string
  181 D1:AF4A -  -  -  -  printString:
  182 D1:AF4A 7E -  -  -      ld  a,(hl)
  183 D1:AF4B 23 -  -  -      inc hl
  184 D1:AF4C B7 -  -  -      or  a,a
  185 D1:AF4D C8 -  -  -      ret z
  186 D1:AF4E FE 0A -  -      cp  a,'\n'
  187 D1:AF50 20 06 -  -      jr nz,+_
  188 D1:AF52 CD 33 AF D1     call newLine
  189 D1:AF56 18 F2 -  -      jr  printString
  190 D1:AF58 E5 -  -  -  _:  push hl
  191 D1:AF59 CD 60 AF D1         call printBigFont
  192 D1:AF5D E1 -  -  -      pop hl
  193 D1:AF5E 18 EA -  -      jr printString
  194 D1:AF60 -  -  -  -  
  195 D1:AF60 -  -  -  -  
  196 D1:AF60 -  -  -  -  ;in: A=chrToPrint
  197 D1:AF60 -  -  -  -  printBigFont:
  198 D1:AF60 CD F5 AF D1     call calculateScreenPtr
  199 D1:AF64 EB -  -  -      ex  de,hl
  200 D1:AF65 6F -  -  -      ld  L,a
  201 D1:AF66 26 08 -  -      ld  H,8
  202 D1:AF68 ED 6C -  -      mlt hl
  203 D1:AF6A 01 0F AF D1     ld  bc,graphx_textdata
  204 D1:AF6E 09 -  -  -      add hl,bc
  205 D1:AF6F EB -  -  -      ex  de,hl
  206 D1:AF70 0E 08 -  -      ld  c,8
  207 D1:AF72 06 08 -  -  _:  ld  b,8
  208 D1:AF74 1A -  -  -      ld  a,(de)
  209 D1:AF75 87 -  -  -  _:  add a,a
  210 D1:AF76 -  -  -  -  fontBGColor_var .equ $+1
  211 D1:AF76 36 00 -  -      ld  (hl),FONTBGCOLOR
  212 D1:AF78 30 02 -  -      jr  nc,$+4
  213 D1:AF7A -  -  -  -  fontFGColor_var .equ $+1
  214 D1:AF7A 36 FF -  -      ld  (hl),FONTFGCOLOR
  215 D1:AF7C 23 -  -  -      inc hl
  216 D1:AF7D 10 F6 -  -      djnz -_
  217 D1:AF7F 79 -  -  -      ld  a,c
  218 D1:AF80 01 38 01 00     ld  bc,320-8
  219 D1:AF84 09 -  -  -      add hl,bc
  220 D1:AF85 4F -  -  -      ld  c,a
  221 D1:AF86 13 -  -  -      inc de
  222 D1:AF87 0D -  -  -      dec c
  223 D1:AF88 20 E8 -  -      jr  nz,--_
  224 D1:AF8A 21 F6 31 D0     ld  hl,xPos
  225 D1:AF8E 34 -  -  -      inc (hl)
  226 D1:AF8F C9 -  -  -      ret
  227 D1:AF90 -  -  -  -  
  228 D1:AF90 -  -  -  -  ;A= 0-255 numeric value to display as hex
  229 D1:AF90 -  -  -  -  printSmallNumPair:
  230 D1:AF90 CD F5 AF D1     call calculateScreenPtr
  231 D1:AF94 F5 -  -  -      push af
  232 D1:AF95 1F -  -  -          rra
  233 D1:AF96 1F -  -  -          rra
  234 D1:AF97 1F -  -  -          rra
  235 D1:AF98 1F -  -  -          rra
  236 D1:AF99 CD A8 AF D1         call +_
  237 D1:AF9D F1 -  -  -      pop af
  238 D1:AF9E CD A8 AF D1     call +_
  239 D1:AFA2 21 F6 31 D0     ld  hl,xPos
  240 D1:AFA6 34 -  -  -      inc (hl)
  241 D1:AFA7 C9 -  -  -      ret
  242 D1:AFA8 E6 0F -  -  _:  and a,$0F
  243 D1:AFAA 01 40 01 00     ld  bc,320
  244 D1:AFAE 09 -  -  -      add hl,bc   ;drop height by one. These small chars are *short*
  245 D1:AFAF EB -  -  -      ex  de,hl
  246 D1:AFB0 6F -  -  -      ld  L,a
  247 D1:AFB1 26 03 -  -      ld  H,3
  248 D1:AFB3 ED 6C -  -      mlt hl
  249 D1:AFB5 01 0F B3 D1     ld  bc,SmallHexFont
  250 D1:AFB9 09 -  -  -      add hl,bc
  251 D1:AFBA EB -  -  -      ex  de,hl
  252 D1:AFBB 0E 03 -  -      ld  c,3
  253 D1:AFBD 18 14 -  -      jr  printSmallNumPair_2ndHalf
  254 D1:AFBF -  -  -  -  printSmallNumPair_1stHalf:
  255 D1:AFBF 1A -  -  -      ld  a,(de)
  256 D1:AFC0 06 04 -  -      ld  b,4
  257 D1:AFC2 87 -  -  -  _:  add a,a
  258 D1:AFC3 -  -  -  -  smallFontBGColor_var .equ $+1
  259 D1:AFC3 36 00 -  -      ld  (hl),FONTBGCOLOR
  260 D1:AFC5 30 02 -  -      jr  nc,$+4
  261 D1:AFC7 -  -  -  -  smallFontFGColor_var .equ $+1
  262 D1:AFC7 36 FF -  -      ld  (hl),FONTFGCOLOR
  263 D1:AFC9 23 -  -  -      inc hl
  264 D1:AFCA 10 F6 -  -      djnz -_
  265 D1:AFCC 79 -  -  -      ld  a,c
  266 D1:AFCD 01 3C 01 00     ld  bc,320-4
  267 D1:AFD1 09 -  -  -      add hl,bc
  268 D1:AFD2 4F -  -  -      ld  c,a
  269 D1:AFD3 -  -  -  -  printSmallNumPair_2ndHalf:
  270 D1:AFD3 1A -  -  -      ld  a,(de)
  271 D1:AFD4 07 -  -  -      rlca
  272 D1:AFD5 07 -  -  -      rlca
  273 D1:AFD6 07 -  -  -      rlca
  274 D1:AFD7 07 -  -  -      rlca
  275 D1:AFD8 06 04 -  -      ld  b,4
  276 D1:AFDA 87 -  -  -  _:  add a,a
  277 D1:AFDB 36 00 -  -      ld  (hl),FONTBGCOLOR
  278 D1:AFDD 30 02 -  -      jr  nc,$+4
  279 D1:AFDF 36 FF -  -      ld  (hl),FONTFGCOLOR
  280 D1:AFE1 23 -  -  -      inc hl
  281 D1:AFE2 10 F6 -  -      djnz -_
  282 D1:AFE4 13 -  -  -      inc de
  283 D1:AFE5 79 -  -  -      ld  a,c
  284 D1:AFE6 01 3C 01 00     ld  bc,320-4
  285 D1:AFEA 09 -  -  -      add hl,bc
  286 D1:AFEB 4F -  -  -      ld  c,a
  287 D1:AFEC 0D -  -  -      dec c
  288 D1:AFED 20 D0 -  -      jr  nz,printSmallNumPair_1stHalf
  289 D1:AFEF 01 84 F8 FF     ld  bc,-(320*(1+5))+4
  290 D1:AFF3 09 -  -  -      add hl,bc
  291 D1:AFF4 C9 -  -  -      ret
  292 D1:AFF5 -  -  -  -  
  293 D1:AFF5 -  -  -  -  calculateScreenPtr:
  294 D1:AFF5 -  -  -  -      ;xcoord: x * 8 
  295 D1:AFF5 -  -  -  -      ;ycoord: 320 * 8 * y
  296 D1:AFF5 -  -  -  -      ;coord: (8x)+320*8y -> 8(x+320y)
  297 D1:AFF5 ED 5B F6 31 
              D0 -  -  -      ld  de,(xPos)
  298 D1:AFFA -  -  -  -  calculateScreenPtrDE:
  299 D1:AFFA 6A -  -  -      ld  L,d     ;yPos
  300 D1:AFFB 26 A0 -  -      ld  h,160
  301 D1:AFFD ED 6C -  -      mlt hl
  302 D1:AFFF 29 -  -  -      add hl,hl
  303 D1:B000 16 01 -  -      ld  d,1
  304 D1:B002 ED 5C -  -      mlt de      ;DE=E. Clears high bytes.
  305 D1:B004 19 -  -  -      add hl,de
  306 D1:B005 29 -  -  -      add hl,hl
  307 D1:B006 29 -  -  -      add hl,hl
  308 D1:B007 29 -  -  -      add hl,hl
  309 D1:B008 ED 5B 00 34 
              D0 -  -  -      ld  de,(curScreenBuf)
  310 D1:B00D 19 -  -  -      add hl,de
  311 D1:B00E C9 -  -  -      ret
  312 D1:B00F -  -  -  -  
  313 D1:B00F -  -  -  -  
  314 D1:B00F -  -  -  -  
  315 D1:B00F -  -  -  -  
  316 D1:B00F -  -  -  -  
  317 D1:B00F -  -  -  -  
  318 D1:B00F -  -  -  -  
  319 D1:B00F -  -  -  -  
  320 D1:B00F -  -  -  -  
  321 D1:B00F -  -  -  -  ;-----------------------------------------------------------------------------
  322 D1:B00F -  -  -  -  ; Data Section
  323 D1:B00F -  -  -  -  
  324 D1:B00F -  -  -  -  graphx_textdata		.EQU $-(8*' ')		;points to what would be start of ASCII
  325 D1:B00F 00 00 00 00 
              00 00 00 00 .db	$00,$00,$00,$00,$00,$00,$00,$00 ;
  326 D1:B017 C0 C0 C0 C0 
              C0 00 C0 00 .db	$C0,$C0,$C0,$C0,$C0,$00,$C0,$00 ; !
  327 D1:B01F D8 D8 D8 00 
              00 00 00 00 .db	$D8,$D8,$D8,$00,$00,$00,$00,$00 ; "
  328 D1:B027 6C 6C FE 6C 
              FE 6C 6C 00 .db	$6C,$6C,$FE,$6C,$FE,$6C,$6C,$00 ; #
  329 D1:B02F 18 7E C0 7C 
              06 FC 18 00 .db	$18,$7E,$C0,$7C,$06,$FC,$18,$00 ; $
  330 D1:B037 00 C6 CC 18 
              30 66 C6 00 .db	$00,$C6,$CC,$18,$30,$66,$C6,$00 ; %
  331 D1:B03F 38 6C 38 76 
              DC CC 76 00 .db	$38,$6C,$38,$76,$DC,$CC,$76,$00 ; &
  332 D1:B047 30 30 60 00 
              00 00 00 00 .db	$30,$30,$60,$00,$00,$00,$00,$00 ; '
  333 D1:B04F 30 60 C0 C0 
              C0 60 30 00 .db	$30,$60,$C0,$C0,$C0,$60,$30,$00 ; (
  334 D1:B057 C0 60 30 30 
              30 60 C0 00 .db	$C0,$60,$30,$30,$30,$60,$C0,$00 ; )
  335 D1:B05F 00 66 3C FF 
              3C 66 00 00 .db	$00,$66,$3C,$FF,$3C,$66,$00,$00 ; *
  336 D1:B067 00 30 30 FC 
              FC 30 30 00 .db	$00,$30,$30,$FC,$FC,$30,$30,$00 ; +
  337 D1:B06F 00 00 00 00 
              00 60 60 C0 .db	$00,$00,$00,$00,$00,$60,$60,$C0 ; ,
  338 D1:B077 00 00 00 FC 
              00 00 00 00 .db	$00,$00,$00,$FC,$00,$00,$00,$00 ; -
  339 D1:B07F 00 00 00 00 
              00 C0 C0 00 .db	$00,$00,$00,$00,$00,$C0,$C0,$00 ; .
  340 D1:B087 06 0C 18 30 
              60 C0 80 00 .db	$06,$0C,$18,$30,$60,$C0,$80,$00 ; /
  341 D1:B08F 7C CE DE F6 
              E6 C6 7C 00 .db	$7C,$CE,$DE,$F6,$E6,$C6,$7C,$00 ; 0
  342 D1:B097 30 70 30 30 
              30 30 FC 00 .db	$30,$70,$30,$30,$30,$30,$FC,$00 ; 1
  343 D1:B09F 7C C6 06 7C 
              C0 C0 FE 00 .db	$7C,$C6,$06,$7C,$C0,$C0,$FE,$00 ; 2
  344 D1:B0A7 FC 06 06 3C 
              06 06 FC 00 .db	$FC,$06,$06,$3C,$06,$06,$FC,$00 ; 3
  345 D1:B0AF 0C CC CC CC 
              FE 0C 0C 00 .db	$0C,$CC,$CC,$CC,$FE,$0C,$0C,$00 ; 4
  346 D1:B0B7 FE C0 FC 06 
              06 C6 7C 00 .db	$FE,$C0,$FC,$06,$06,$C6,$7C,$00 ; 5
  347 D1:B0BF 7C C0 C0 FC 
              C6 C6 7C 00 .db	$7C,$C0,$C0,$FC,$C6,$C6,$7C,$00 ; 6
  348 D1:B0C7 FE 06 06 0C 
              18 30 30 00 .db	$FE,$06,$06,$0C,$18,$30,$30,$00 ; 7
  349 D1:B0CF 7C C6 C6 7C 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$7C,$C6,$C6,$7C,$00 ; 8
  350 D1:B0D7 7C C6 C6 7E 
              06 06 7C 00 .db	$7C,$C6,$C6,$7E,$06,$06,$7C,$00 ; 9
  351 D1:B0DF 00 C0 C0 00 
              00 C0 C0 00 .db	$00,$C0,$C0,$00,$00,$C0,$C0,$00 ; :
  352 D1:B0E7 00 60 60 00 
              00 60 60 C0 .db	$00,$60,$60,$00,$00,$60,$60,$C0 ; ;
  353 D1:B0EF 18 30 60 C0 
              60 30 18 00 .db	$18,$30,$60,$C0,$60,$30,$18,$00 ; <
  354 D1:B0F7 00 00 FC 00 
              FC 00 00 00 .db	$00,$00,$FC,$00,$FC,$00,$00,$00 ; =
  355 D1:B0FF C0 60 30 18 
              30 60 C0 00 .db	$C0,$60,$30,$18,$30,$60,$C0,$00 ; >
  356 D1:B107 78 CC 18 30 
              30 00 30 00 .db	$78,$CC,$18,$30,$30,$00,$30,$00 ; ?
  357 D1:B10F 7C C6 DE DE 
              DE C0 7E 00 .db	$7C,$C6,$DE,$DE,$DE,$C0,$7E,$00 ; @
  358 D1:B117 38 6C C6 C6 
              FE C6 C6 00 .db	$38,$6C,$C6,$C6,$FE,$C6,$C6,$00 ; A
  359 D1:B11F FC C6 C6 FC 
              C6 C6 FC 00 .db	$FC,$C6,$C6,$FC,$C6,$C6,$FC,$00 ; B
  360 D1:B127 7C C6 C0 C0 
              C0 C6 7C 00 .db	$7C,$C6,$C0,$C0,$C0,$C6,$7C,$00 ; C
  361 D1:B12F F8 CC C6 C6 
              C6 CC F8 00 .db	$F8,$CC,$C6,$C6,$C6,$CC,$F8,$00 ; D
  362 D1:B137 FE C0 C0 F8 
              C0 C0 FE 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$FE,$00 ; E
  363 D1:B13F FE C0 C0 F8 
              C0 C0 C0 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$C0,$00 ; F
  364 D1:B147 7C C6 C0 C0 
              CE C6 7C 00 .db	$7C,$C6,$C0,$C0,$CE,$C6,$7C,$00 ; G
  365 D1:B14F C6 C6 C6 FE 
              C6 C6 C6 00 .db	$C6,$C6,$C6,$FE,$C6,$C6,$C6,$00 ; H
  366 D1:B157 7E 18 18 18 
              18 18 7E 00 .db	$7E,$18,$18,$18,$18,$18,$7E,$00 ; I
  367 D1:B15F 06 06 06 06 
              06 C6 7C 00 .db	$06,$06,$06,$06,$06,$C6,$7C,$00 ; J
  368 D1:B167 C6 CC D8 F0 
              D8 CC C6 00 .db	$C6,$CC,$D8,$F0,$D8,$CC,$C6,$00 ; K
  369 D1:B16F C0 C0 C0 C0 
              C0 C0 FE 00 .db	$C0,$C0,$C0,$C0,$C0,$C0,$FE,$00 ; L
  370 D1:B177 C6 EE FE FE 
              D6 C6 C6 00 .db	$C6,$EE,$FE,$FE,$D6,$C6,$C6,$00 ; M
  371 D1:B17F C6 E6 F6 DE 
              CE C6 C6 00 .db	$C6,$E6,$F6,$DE,$CE,$C6,$C6,$00 ; N
  372 D1:B187 7C C6 C6 C6 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$C6,$C6,$C6,$7C,$00 ; O
  373 D1:B18F FC C6 C6 FC 
              C0 C0 C0 00 .db	$FC,$C6,$C6,$FC,$C0,$C0,$C0,$00 ; P
  374 D1:B197 7C C6 C6 C6 
              D6 DE 7C 06 .db	$7C,$C6,$C6,$C6,$D6,$DE,$7C,$06 ; Q
  375 D1:B19F FC C6 C6 FC 
              D8 CC C6 00 .db	$FC,$C6,$C6,$FC,$D8,$CC,$C6,$00 ; R
  376 D1:B1A7 7C C6 C0 7C 
              06 C6 7C 00 .db	$7C,$C6,$C0,$7C,$06,$C6,$7C,$00 ; S
  377 D1:B1AF FF 18 18 18 
              18 18 18 00 .db	$FF,$18,$18,$18,$18,$18,$18,$00 ; T
  378 D1:B1B7 C6 C6 C6 C6 
              C6 C6 FE 00 .db	$C6,$C6,$C6,$C6,$C6,$C6,$FE,$00 ; U
  379 D1:B1BF C6 C6 C6 C6 
              C6 7C 38 00 .db	$C6,$C6,$C6,$C6,$C6,$7C,$38,$00 ; V
  380 D1:B1C7 C6 C6 C6 C6 
              D6 FE 6C 00 .db	$C6,$C6,$C6,$C6,$D6,$FE,$6C,$00 ; W
  381 D1:B1CF C6 C6 6C 38 
              6C C6 C6 00 .db	$C6,$C6,$6C,$38,$6C,$C6,$C6,$00 ; X
  382 D1:B1D7 C6 C6 C6 7C 
              18 30 E0 00 .db	$C6,$C6,$C6,$7C,$18,$30,$E0,$00 ; Y
  383 D1:B1DF FE 06 0C 18 
              30 60 FE 00 .db	$FE,$06,$0C,$18,$30,$60,$FE,$00 ; Z
  384 D1:B1E7 F0 C0 C0 C0 
              C0 C0 F0 00 .db	$F0,$C0,$C0,$C0,$C0,$C0,$F0,$00 ; [
  385 D1:B1EF C0 60 30 18 
              0C 06 02 00 .db	$C0,$60,$30,$18,$0C,$06,$02,$00 ; \
  386 D1:B1F7 F0 30 30 30 
              30 30 F0 00 .db	$F0,$30,$30,$30,$30,$30,$F0,$00 ; ]
  387 D1:B1FF 10 38 6C C6 
              00 00 00 00 .db	$10,$38,$6C,$C6,$00,$00,$00,$00 ; ^
  388 D1:B207 00 00 00 00 
              00 00 00 FF .db	$00,$00,$00,$00,$00,$00,$00,$FF ; _
  389 D1:B20F C0 C0 60 00 
              00 00 00 00 .db	$C0,$C0,$60,$00,$00,$00,$00,$00 ; `
  390 D1:B217 00 00 7C 06 
              7E C6 7E 00 .db	$00,$00,$7C,$06,$7E,$C6,$7E,$00 ; a
  391 D1:B21F C0 C0 C0 FC 
              C6 C6 FC 00 .db	$C0,$C0,$C0,$FC,$C6,$C6,$FC,$00 ; b
  392 D1:B227 00 00 7C C6 
              C0 C6 7C 00 .db	$00,$00,$7C,$C6,$C0,$C6,$7C,$00 ; c
  393 D1:B22F 06 06 06 7E 
              C6 C6 7E 00 .db	$06,$06,$06,$7E,$C6,$C6,$7E,$00 ; d
  394 D1:B237 00 00 7C C6 
              FE C0 7C 00 .db	$00,$00,$7C,$C6,$FE,$C0,$7C,$00 ; e
  395 D1:B23F 1C 36 30 78 
              30 30 78 00 .db	$1C,$36,$30,$78,$30,$30,$78,$00 ; f
  396 D1:B247 00 00 7E C6 
              C6 7E 06 FC .db	$00,$00,$7E,$C6,$C6,$7E,$06,$FC ; g
  397 D1:B24F C0 C0 FC C6 
              C6 C6 C6 00 .db	$C0,$C0,$FC,$C6,$C6,$C6,$C6,$00 ; h
  398 D1:B257 18 00 38 18 
              18 18 3C 00 .db	$18,$00,$38,$18,$18,$18,$3C,$00 ; i
  399 D1:B25F 06 00 06 06 
              06 06 C6 7C .db	$06,$00,$06,$06,$06,$06,$C6,$7C ; j
  400 D1:B267 C0 C0 CC D8 
              F8 CC C6 00 .db	$C0,$C0,$CC,$D8,$F8,$CC,$C6,$00 ; k
  401 D1:B26F 38 18 18 18 
              18 18 3C 00 .db	$38,$18,$18,$18,$18,$18,$3C,$00 ; l
  402 D1:B277 00 00 CC FE 
              FE D6 D6 00 .db	$00,$00,$CC,$FE,$FE,$D6,$D6,$00 ; m
  403 D1:B27F 00 00 FC C6 
              C6 C6 C6 00 .db	$00,$00,$FC,$C6,$C6,$C6,$C6,$00 ; n
  404 D1:B287 00 00 7C C6 
              C6 C6 7C 00 .db	$00,$00,$7C,$C6,$C6,$C6,$7C,$00 ; o
  405 D1:B28F 00 00 FC C6 
              C6 FC C0 C0 .db	$00,$00,$FC,$C6,$C6,$FC,$C0,$C0 ; p
  406 D1:B297 00 00 7E C6 
              C6 7E 06 06 .db	$00,$00,$7E,$C6,$C6,$7E,$06,$06 ; q
  407 D1:B29F 00 00 FC C6 
              C0 C0 C0 00 .db	$00,$00,$FC,$C6,$C0,$C0,$C0,$00 ; r
  408 D1:B2A7 00 00 7E C0 
              7C 06 FC 00 .db	$00,$00,$7E,$C0,$7C,$06,$FC,$00 ; s
  409 D1:B2AF 30 30 FC 30 
              30 30 1C 00 .db	$30,$30,$FC,$30,$30,$30,$1C,$00 ; t
  410 D1:B2B7 00 00 C6 C6 
              C6 C6 7E 00 .db	$00,$00,$C6,$C6,$C6,$C6,$7E,$00 ; u
  411 D1:B2BF 00 00 C6 C6 
              C6 7C 38 00 .db	$00,$00,$C6,$C6,$C6,$7C,$38,$00 ; v
  412 D1:B2C7 00 00 C6 C6 
              D6 FE 6C 00 .db	$00,$00,$C6,$C6,$D6,$FE,$6C,$00 ; w
  413 D1:B2CF 00 00 C6 6C 
              38 6C C6 00 .db	$00,$00,$C6,$6C,$38,$6C,$C6,$00 ; x
  414 D1:B2D7 00 00 C6 C6 
              C6 7E 06 FC .db	$00,$00,$C6,$C6,$C6,$7E,$06,$FC ; y
  415 D1:B2DF 00 00 FE 0C 
              38 60 FE 00 .db	$00,$00,$FE,$0C,$38,$60,$FE,$00 ; z
  416 D1:B2E7 1C 30 30 E0 
              30 30 1C 00 .db	$1C,$30,$30,$E0,$30,$30,$1C,$00 ; {
  417 D1:B2EF C0 C0 C0 00 
              C0 C0 C0 00 .db	$C0,$C0,$C0,$00,$C0,$C0,$C0,$00 ; |
  418 D1:B2F7 E0 30 30 1C 
              30 30 E0 00 .db	$E0,$30,$30,$1C,$30,$30,$E0,$00 ; }
  419 D1:B2FF 76 DC 00 00 
              00 00 00 00 .db	$76,$DC,$00,$00,$00,$00,$00,$00 ; ~
  420 D1:B307 00 10 38 6C 
              C6 C6 FE 00 .db	$00,$10,$38,$6C,$C6,$C6,$FE,$00 ; △
  421 D1:B30F -  -  -  -  
  422 D1:B30F -  -  -  -  ;Copied from the Escheron: Twilight over Ragnoth project
  423 D1:B30F -  -  -  -  ;whose format was copied from a (then-)authorized source
  424 D1:B30F -  -  -  -  ;for DoorsCS (I think? The one for the 83+) by "Kerm Martian".
  425 D1:B30F -  -  -  -  SmallHexFont:
  426 D1:B30F 4E AA AE -  .db $4E,$AA,$AE				;zero
  427 D1:B312 44 C4 4E -  .db $44,$C4,$4E				;one
  428 D1:B315 4C 24 8E -  .db $4C,$24,$8E				;two
  429 D1:B318 4C 24 2C -  .db $4C,$24,$2C				;three
  430 D1:B31B 48 AE 22 -  .db $48,$AE,$22				;four
  431 D1:B31E 4E 8C 2C -  .db $4E,$8C,$2C				;five
  432 D1:B321 46 8E AE -  .db $46,$8E,$AE				;six
  433 D1:B324 4E 24 88 -  .db $4E,$24,$88				;seven
  434 D1:B327 4E AE AE -  .db $4E,$AE,$AE				;eight
  435 D1:B32A 4E AE 2C -  .db $4E,$AE,$2C				;nine
  436 D1:B32D 44 AE AA -  .db $44,$AE,$AA				;A
  437 D1:B330 4C AC AC -  .db $4C,$AC,$AC				;B
  438 D1:B333 46 88 86 -  .db $46,$88,$86				;C
  439 D1:B336 4C AA AC -  .db $4C,$AA,$AC				;D
  440 D1:B339 4E 8C 8E -  .db $4E,$8C,$8E				;E
  441 D1:B33C 4E 8C 88 -  .db $4E,$8C,$88				;F
  442 D1:B33F -  -  -  -  
  443 D1:B33F -  -  -  -  
  444 D1:B33F -  -  -  -  
Listing for file "main.z80"
  665 D1:B33F -  -  -  -  #include "core.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    1 D1:B33F -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    2 D1:B33F -  -  -  -  
    3 D1:B33F -  -  -  -  ;TODO: DEFINE MEMORY ACCESS MACROS. ONE OR MORE FOR READ AND WRITE.
    4 D1:B33F -  -  -  -  ;FIGURE OUT HOW TO GET BOTH HIGH AND LOW BYTE OF ORIGINAL ADDRESS
    5 D1:B33F -  -  -  -  ;AND PERFORM ALTERNATE ACTIONS BASED ON WHAT HARDWARE WAS ACCESSED.
    6 D1:B33F -  -  -  -  ;NOTE: PATTERN SHOWS THAT D=MSB, C=LSB OF 6502 ADDRESS. USE THIS.
    7 D1:B33F -  -  -  -  ;
    8 D1:B33F -  -  -  -  ;THESE MACROS ARE PLACEHOLDERS. CHANGE THEM LATER ON TO REFLECT ACTUAL
    9 D1:B33F -  -  -  -  ;HARDWARE SHENANIGANS.
   10 D1:B33F -  -  -  -  ;
   11 D1:B33F -  -  -  -  ;NOTE: WRITE ACCESSES RELY ON KNOWING WHAT DATA TO WRITE. CAN'T STORE THAT IN A
   12 D1:B33F -  -  -  -  ;      SINCE WE NEED TO DO CONDITIONING. REGISTER B IS UNUSED SO LET'S USE THAT.
   13 D1:B33F -  -  -  -  ;
   14 D1:B33F -  -  -  -  #define READ_ACCESS ld a,(hl)
   15 D1:B33F -  -  -  -  #define WRITE_ACCESS ld (hl),b
   16 D1:B33F -  -  -  -  ;Later, put in actual test. Z if not triggered, NZ if triggered. This
   17 D1:B33F -  -  -  -  ;alters the behavior of the BRK instruction.
   18 D1:B33F -  -  -  -  #define WAS_NMI_TRIGGERED or  a
   19 D1:B33F -  -  -  -  
   20 D1:B33F -  -  -  -  #define OPRFLG_C res SF_CARRY,b \ jr nc,$+4 \ set SF_CARRY,b
   21 D1:B33F -  -  -  -  #define OPRFLG_V res SF_OVER,b \ jp po,$+6 \ set SF_OVER,b
   22 D1:B33F -  -  -  -  #define OPRFLG_Z res SF_ZERO,b \ jr nz,$+4 \ set SF_ZERO,b
   23 D1:B33F -  -  -  -  #define OPRFLG_N res SF_NEG,b \ jr nc,$+4 \ set SF_NEG,b
   24 D1:B33F -  -  -  -  
   25 D1:B33F -  -  -  -  #define FLAGS_ZN ld b,(ix+REGSR) \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   26 D1:B33F -  -  -  -  #define FLAGS_CZN ld b,(ix+REGSR) \ OPRFLG_C \ rlc a  \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   27 D1:B33F -  -  -  -  #define FLAGS_VCZN ld b,(ix+REGSR) \ OPRFLG_V \ OPRFLG_C \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   28 D1:B33F -  -  -  -  
   29 D1:B33F -  -  -  -  
   30 D1:B33F -  -  -  -  ;Modify later to include provisions for hardware i/o based on page
   31 D1:B33F -  -  -  -  #define HW_READ(src_reg) ld a,(src_reg)
   32 D1:B33F -  -  -  -  #define HW_WRITE(dst_reg) ld (dst_reg),a
   33 D1:B33F -  -  -  -  
   34 D1:B33F -  -  -  -  
   35 D1:B33F -  -  -  -  
   36 D1:B33F -  -  -  -  
   37 D1:B33F -  -  -  -  ;=============================================================================
   38 D1:B33F -  -  -  -  ;=============================================================================
   39 D1:B33F -  -  -  -  ;=============================================================================
   40 D1:B33F -  -  -  -  ;=============================================================================
   41 D1:B33F -  -  -  -  ;You should have set up the mappings already. This is because
   42 D1:B33F -  -  -  -  ;mappings are program-dependant. Only $0000-$3FFF will be mapped in here
   43 D1:B33F -  -  -  -  ;more or less because I don't expect anything else to map that.
   44 D1:B33F -  -  -  -  i6502Init:
   45 D1:B33F -  -  -  -      ;
   46 D1:B33F -  -  -  -      ; At this point, you may need to randomize 2048 bytes at main_ram
   47 D1:B33F -  -  -  -      ;
   48 D1:B33F 21 00 38 D0     ld  hl,main_ram
   49 D1:B343 01 08 20 00     ld  bc,$002008
   50 D1:B347 1E 00 -  -      ld  e,$00
   51 D1:B349 CD FD B5 D1     call i6502_map_pages
   52 D1:B34D 21 00 33 D0     ld  hl,scrap_mapping
   53 D1:B351 01 01 20 00     ld  bc,$002001
   54 D1:B355 1E 20 -  -      ld  e,$20
   55 D1:B357 CD FD B5 D1     call i6502_map_pages
   56 D1:B35B FD 21 02 00 
              00 -  -  -      ld  iy,2    ;8 cycle startup. Hooking into inst6502_jsr for init
   57 D1:B360 ED 22 80 -      lea hl,ix-128
   58 D1:B363 ED 12 81 -      lea de,ix-127
   59 D1:B366 01 FF 00 00     ld  bc,255
   60 D1:B36A 36 00 -  -      ld  (hl),$00
   61 D1:B36C ED B0 -  -      ldir
   62 D1:B36E CD E4 B5 D1     call i6502_load_instruction_set
   63 D1:B372 -  -  -  -      ;Note: SP may need initialization. So does SR for interrupts. Or somesuch.
   64 D1:B372 21 F8 47 D0     ld  hl,PAGETABLE+(255*BASETABLE_STRIDE)
   65 D1:B376 ED 27 -  -      ld  hl,(hl)
   66 D1:B378 11 FC 00 00     ld  de,$0000FC
   67 D1:B37C 19 -  -  -      add hl,de
   68 D1:B37D DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   69 D1:B382 -  -  -  -      ;jp inst6502_jsr
   70 D1:B382 -  -  -  -      ;Manual loading below. Uncomment "jp inst6502_jsr" to return to original.
   71 D1:B382 -  -  -  -      ;Settings below is to run nestest CPU-only test. The reset vector above
   72 D1:B382 -  -  -  -      ;requires a working PPU (and probably APU) to be present.
   73 D1:B382 DD 36 04 24     ld  (ix+REGSR),$24      ;because that's what the log wants?
   74 D1:B386 21 00 C0 00     ld  hl,$C000
   75 D1:B38A DD 2F 05 -      ld  (ix+REGPC),HL
   76 D1:B38D FD 21 07 00 
              00 -  -  -      ld  iy,7
   77 D1:B392 DD 36 03 FD     ld  (ix+REGSP),$FD
   78 D1:B396 -  -  -  -  
   79 D1:B396 -  -  -  -  i6502FirstLoad:
   80 D1:B396 52 DD 17 05     ld.s de,(ix+REGPC)
   81 D1:B39A 7B -  -  -      ld  a,e
   82 D1:B39B 1E 08 -  -      ld  e,BASETABLE_STRIDE
   83 D1:B39D ED 5C -  -      mlt de
   84 D1:B39F 21 00 40 D0     ld  hl,PAGETABLE
   85 D1:B3A3 19 -  -  -      add hl,de
   86 D1:B3A4 ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
   87 D1:B3A6 16 00 -  -      ld  d,0
   88 D1:B3A8 5F -  -  -      ld  e,a
   89 D1:B3A9 19 -  -  -      add hl,de       ;resolve final address
   90 D1:B3AA 18 19 -  -      jr  i6502FinishLoad
   91 D1:B3AC -  -  -  -  i6502NextLoad:
   92 D1:B3AC 23 -  -  -      inc hl
   93 D1:B3AD 1C -  -  -      inc e
   94 D1:B3AE 20 15 -  -      jr  nz,i6502FinishLoad
   95 D1:B3B0 DD 56 06 -      ld  d,(ix+REGPC+1)
   96 D1:B3B3 14 -  -  -      inc d
   97 D1:B3B4 52 DD 1F 05     ld.s (ix+REGPC),de
   98 D1:B3B8 1E 08 -  -      ld  e,BASETABLE_STRIDE
   99 D1:B3BA ED 5C -  -      mlt de
  100 D1:B3BC 21 00 40 D0     ld  hl,PAGETABLE
  101 D1:B3C0 19 -  -  -      add hl,de
  102 D1:B3C1 ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
  103 D1:B3C3 1E 00 -  -      ld  e,0         ;PCL known to be zero at this point.
  104 D1:B3C5 -  -  -  -  i6502FinishLoad:
  105 D1:B3C5 7E -  -  -      ld  a,(hl)
  106 D1:B3C6 -  -  -  -  #ifdef COREDEBUG
  107 D1:B3C6 DD 77 0E -      ld  (ix+CURRENT_OPCODES+0),a
  108 D1:B3C9 DD 73 05 -      ld  (ix+REGPC+0),e
  109 D1:B3CC -  -  -  -  #endif
  110 D1:B3CC 23 -  -  -      inc hl
  111 D1:B3CD 1C -  -  -      inc e
  112 D1:B3CE 20 15 -  -      jr  nz,i6502PrepNextPage
  113 D1:B3D0 DD 56 06 -      ld  d,(ix+REGPC+1)
  114 D1:B3D3 14 -  -  -      inc d
  115 D1:B3D4 52 DD 1F 05     ld.s (ix+REGPC),de
  116 D1:B3D8 1E 08 -  -      ld  e,BASETABLE_STRIDE
  117 D1:B3DA ED 5C -  -      mlt de
  118 D1:B3DC 21 00 40 D0     ld  hl,PAGETABLE
  119 D1:B3E0 19 -  -  -      add hl,de
  120 D1:B3E1 ED 27 -  -      ld  hl,(hl)
  121 D1:B3E3 1E 00 -  -      ld  e,0
  122 D1:B3E5 -  -  -  -  i6502PrepNextPage:
  123 D1:B3E5 -  -  -  -  #ifdef COREDEBUG
  124 D1:B3E5 F5 -  -  -      push af
  125 D1:B3E6 7E -  -  -          ld  a,(hl)
  126 D1:B3E7 DD 77 0F -          ld  (ix+CURRENT_OPCODES+1),a
  127 D1:B3EA D5 -  -  -          push de
  128 D1:B3EB E5 -  -  -              push hl
  129 D1:B3EC DD E5 -  -                  push ix
  130 D1:B3EE 23 -  -  -                      inc hl
  131 D1:B3EF 1C -  -  -                      inc e
  132 D1:B3F0 20 0F -  -                      jr  nz,+_
  133 D1:B3F2 DD 56 06 -                      ld  d,(ix+REGPC+1)
  134 D1:B3F5 14 -  -  -                      inc d
  135 D1:B3F6 1E 08 -  -                      ld  e,BASETABLE_STRIDE
  136 D1:B3F8 ED 5C -  -                      mlt de
  137 D1:B3FA 21 00 40 D0                     ld  hl,PAGETABLE
  138 D1:B3FE 19 -  -  -                      add hl,de
  139 D1:B3FF ED 27 -  -                      ld  hl,(hl)
  140 D1:B401 7E -  -  -  _:                  ld  a,(hl)
  141 D1:B402 DD 77 10 -                      ld  (ix+CURRENT_OPCODES+2),a
  142 D1:B405 ED 22 00 -                      lea hl,ix
  143 D1:B408 11 80 32 D0                     ld  de,core_memory_ix
  144 D1:B40C B7 -  -  -                      or  a,a
  145 D1:B40D ED 52 -  -                      sbc hl,de
  146 D1:B40F 20 FE -  -                      jr  nz,$    ;halt program if IX is not core_memory_ix
  147 D1:B411 -  -  -  -                      ;jr $
  148 D1:B411 FD E5 -  -                      push iy
  149 D1:B413 CD FA DE D1                         call dbg_printLine
  150 D1:B417 FD E1 -  -                      pop iy
  151 D1:B419 DD 31 0B -                      ld  iy,(ix+CYCLES_CURRENT)  ;remove when done with timings
  152 D1:B41C ED 23 00 -                      lea hl,iy+0
  153 D1:B41F 11 75 67 00                     ld  de,DEBUG_STEP_START_CYCLE
  154 D1:B423 B7 -  -  -                      or  a,a
  155 D1:B424 ED 52 -  -                      sbc hl,de
  156 D1:B426 D4 10 AA D1                     call nc,waituntilnewkeypress
  157 D1:B42A DD E1 -  -                  pop ix
  158 D1:B42C E1 -  -  -              pop hl
  159 D1:B42D D1 -  -  -          pop de
  160 D1:B42E F1 -  -  -      pop af
  161 D1:B42F -  -  -  -  #endif
  162 D1:B42F E5 -  -  -      push hl
  163 D1:B430 67 -  -  -          ld  h,a
  164 D1:B431 2E 08 -  -          ld  l,BASETABLE_STRIDE
  165 D1:B433 ED 6C -  -          mlt hl
  166 D1:B435 01 04 40 D0         ld  bc,JUMPTABLE
  167 D1:B439 09 -  -  -          add hl,bc
  168 D1:B43A ED 27 -  -          ld  hl,(hl)     ;jumptable
  169 D1:B43C E3 -  -  -          ex  (sp),hl     ;exch with exec addr, jumpto-via-ret
  170 D1:B43D C9 -  -  -      ret
  171 D1:B43E -  -  -  -  
  172 D1:B43E -  -  -  -  
  173 D1:B43E -  -  -  -  ;Instructions one byte wide returns to the main loop via:
  174 D1:B43E -  -  -  -  ;   JP i6502FinishLoad
  175 D1:B43E -  -  -  -  ;Those with parameters have HL at the address in quetion, and is expected to
  176 D1:B43E -  -  -  -  ;advance HL and E at the end of the instruction. You return to main loop via:
  177 D1:B43E -  -  -  -  ;   JP i6502NextLoad
  178 D1:B43E -  -  -  -  ;Unless you manually advance the pointer to the next instruction.
  179 D1:B43E -  -  -  -  ;You really shouldn't but if you must do that, then also do this:
  180 D1:B43E -  -  -  -  ;   JP i6502FinishLoad
  181 D1:B43E -  -  -  -  ;Remember that register E is very important; it tells you about page boundaries.
  182 D1:B43E -  -  -  -  
  183 D1:B43E -  -  -  -  
  184 D1:B43E -  -  -  -  ;-----------------------------------------------------------------------------    
  185 D1:B43E -  -  -  -  ;-----------------------------------------------------------------------------    
  186 D1:B43E -  -  -  -  
  187 D1:B43E -  -  -  -  ;    ***   *   *  *****  *      *****  **  *  ***** 
  188 D1:B43E -  -  -  -  ;   *   *  *   *    *    *        *    **  *  *     
  189 D1:B43E -  -  -  -  ;   *   *  *   *    *    *        *    * * *  ***   
  190 D1:B43E -  -  -  -  ;   *   *  *   *    *    *        *    *  **  *     
  191 D1:B43E -  -  -  -  ;    ***    ***     *    *****  *****  *  **  ***** 
  192 D1:B43E -  -  -  -  
  193 D1:B43E -  -  -  -  ;-----------------------------------------------------------------------------    
  194 D1:B43E -  -  -  -  ;-----------------------------------------------------------------------------    
  195 D1:B43E -  -  -  -  outline6502_imm:
  196 D1:B43E 7E -  -  -      ld  a,(hl)  ;oper uses A
  197 D1:B43F -  -  -  -      ;oper
  198 D1:B43F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  199 D1:B453 ED 33 02 -      ADDCYC(2)
  200 D1:B456 C3 AC B3 D1     jp i6502NextLoad
  201 D1:B45A -  -  -  -  
  202 D1:B45A -  -  -  -  outline6502_abs:
  203 D1:B45A 4E -  -  -      ld  c,(hl)
  204 D1:B45B 23 -  -  -      inc hl
  205 D1:B45C 1C -  -  -      inc e
  206 D1:B45D 20 15 -  -      jr nz,+_
  207 D1:B45F DD 56 06 -      ld  d,(ix+REGPC+1)
  208 D1:B462 14 -  -  -      inc d
  209 D1:B463 52 DD 1F 05     ld.s (ix+REGPC),de
  210 D1:B467 1E 08 -  -      ld  e,BASETABLE_STRIDE
  211 D1:B469 ED 5C -  -      mlt de
  212 D1:B46B 21 00 40 D0     ld  hl,PAGETABLE
  213 D1:B46F 19 -  -  -      add hl,de
  214 D1:B470 ED 27 -  -      ld  hl,(hl) ;
  215 D1:B472 1E 00 -  -      ld  e,0
  216 D1:B474 46 -  -  -  _:  ld  b,(hl)
  217 D1:B475 E5 -  -  -      push hl
  218 D1:B476 50 -  -  -          ld  d,b
  219 D1:B477 79 -  -  -          ld  a,c
  220 D1:B478 0E 08 -  -          ld  c,BASETABLE_STRIDE
  221 D1:B47A ED 4C -  -          mlt bc
  222 D1:B47C 21 00 40 D0         ld  hl,PAGETABLE
  223 D1:B480 09 -  -  -          add hl,bc
  224 D1:B481 ED 27 -  -          ld  hl,(hl)
  225 D1:B483 06 00 -  -          ld  b,0
  226 D1:B485 4F -  -  -          ld  c,a
  227 D1:B486 09 -  -  -          add hl,bc   ;full address
  228 D1:B487 -  -  -  -          ;INSERT HARDWARE ACCESS PAGING. REGISTER D CONTAINS ACCESS PAGE
  229 D1:B487 7E -  -  -          ld  a,(hl)  ;oper uses A
  230 D1:B488 -  -  -  -          ;oper
  231 D1:B488 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  232 D1:B49C ED 33 03 -      ADDCYC(3)
  233 D1:B49F E1 -  -  -      pop hl
  234 D1:B4A0 C3 AC B3 D1     jp i6502NextLoad
  235 D1:B4A4 -  -  -  -  
  236 D1:B4A4 -  -  -  -  outline6502_zeropage:
  237 D1:B4A4 7E -  -  -      ld  a,(hl)
  238 D1:B4A5 01 00 38 D0     ld  bc,ZEROPAGE
  239 D1:B4A9 81 -  -  -      add a,c
  240 D1:B4AA 4F -  -  -      ld  c,a
  241 D1:B4AB 0A -  -  -      ld  a,(bc)      ;oper uses A
  242 D1:B4AC -  -  -  -      ;HARDWARE ACCESS PAGING NOT ALLOWED. NO HARDWARE INTERACTS WITH PAGE ZERO.
  243 D1:B4AC -  -  -  -      ;oper
  244 D1:B4AC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  245 D1:B4C0 ED 33 03 -      ADDCYC(3)
  246 D1:B4C3 C3 AC B3 D1     jp i6502NextLoad
  247 D1:B4C7 -  -  -  -  
  248 D1:B4C7 -  -  -  -  
  249 D1:B4C7 -  -  -  -  ;Note: has same split start as abs
  250 D1:B4C7 -  -  -  -  outline6502_abs_idx_x:  ;INDEXED WITH X. INDEX WITH Y VARIATION EXISTS. CAREFUL.
  251 D1:B4C7 4E -  -  -      ld  c,(hl)
  252 D1:B4C8 23 -  -  -      inc hl
  253 D1:B4C9 1C -  -  -      inc e
  254 D1:B4CA 20 15 -  -      jr nz,+_
  255 D1:B4CC DD 56 06 -      ld  d,(ix+REGPC+1)
  256 D1:B4CF 14 -  -  -      inc d
  257 D1:B4D0 52 DD 1F 05     ld.s (ix+REGPC),de
  258 D1:B4D4 1E 08 -  -      ld  e,BASETABLE_STRIDE
  259 D1:B4D6 ED 5C -  -      mlt de
  260 D1:B4D8 21 00 40 D0     ld  hl,PAGETABLE
  261 D1:B4DC 19 -  -  -      add hl,de
  262 D1:B4DD ED 27 -  -      ld  hl,(hl) ;
  263 D1:B4DF 1E 00 -  -      ld  e,0
  264 D1:B4E1 46 -  -  -  _:  ld  b,(hl)
  265 D1:B4E2 E5 -  -  -      push hl
  266 D1:B4E3 50 -  -  -          ld  d,b
  267 D1:B4E4 79 -  -  -          ld  a,c
  268 D1:B4E5 0E 08 -  -          ld  c,BASETABLE_STRIDE
  269 D1:B4E7 ED 4C -  -          mlt bc
  270 D1:B4E9 21 00 40 D0         ld  hl,PAGETABLE
  271 D1:B4ED 09 -  -  -          add hl,bc
  272 D1:B4EE ED 27 -  -          ld  hl,(hl)
  273 D1:B4F0 06 00 -  -          ld  b,0
  274 D1:B4F2 4F -  -  -          ld  c,a
  275 D1:B4F3 DD 7E 01 -          ld  a,(ix+REGX)        ;REPLACE WITH REGY WHEN INSTRUCTION CALLS FOR IT
  276 D1:B4F6 81 -  -  -          add a,c
  277 D1:B4F7 30 04 -  -          jr  nc,+_
  278 D1:B4F9 04 -  -  -          inc b
  279 D1:B4FA 14 -  -  -          inc d
  280 D1:B4FB FD 23 -  -          ADDCYC(1)
  281 D1:B4FD -  -  -  -  _:      ;INSERT HARDWARE ACCESS PAGING. REGISTER D CONTAINS ACCESS PAGE
  282 D1:B4FD 09 -  -  -          add hl,bc   ;full address
  283 D1:B4FE 7E -  -  -          ld  a,(hl)  ;oper uses A
  284 D1:B4FF -  -  -  -          ;oper
  285 D1:B4FF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  286 D1:B513 ED 33 04 -      ADDCYC(4)
  287 D1:B516 E1 -  -  -      pop hl
  288 D1:B517 C3 AC B3 D1     jp i6502NextLoad
  289 D1:B51B -  -  -  -  
  290 D1:B51B -  -  -  -  
  291 D1:B51B -  -  -  -  outline6502_zpx:
  292 D1:B51B 7E -  -  -      ld  a,(hl)
  293 D1:B51C 01 00 38 D0     ld  bc,ZEROPAGE
  294 D1:B520 81 -  -  -      add a,c
  295 D1:B521 DD 86 01 -      add a,(ix+REGX)
  296 D1:B524 4F -  -  -      ld  c,a
  297 D1:B525 0A -  -  -      ld  a,(bc)      ;oper uses A
  298 D1:B526 -  -  -  -      ;HARDWARE PAGING NOT ALLOWED. HARDWARE DOES NOT INTERACT WITH PAGE ZERO
  299 D1:B526 -  -  -  -      ;oper
  300 D1:B526 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  301 D1:B53A ED 33 04 -      ADDCYC(4)
  302 D1:B53D C3 AC B3 D1     jp i6502NextLoad
  303 D1:B541 -  -  -  -      
  304 D1:B541 -  -  -  -  outline6502_zpy:
  305 D1:B541 7E -  -  -      ld  a,(hl)
  306 D1:B542 01 00 38 D0     ld  bc,ZEROPAGE
  307 D1:B546 81 -  -  -      add a,c
  308 D1:B547 DD 86 02 -      add a,(ix+REGY)
  309 D1:B54A 4F -  -  -      ld  c,a
  310 D1:B54B 0A -  -  -      ld  a,(bc)      ;oper uses A
  311 D1:B54C -  -  -  -      ;HARDWARE PAGING NOT ALLOWED. HARDWARE DOES NOT INTERACT WITH PAGE ZERO
  312 D1:B54C -  -  -  -      ;oper
  313 D1:B54C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  314 D1:B560 ED 33 04 -      ADDCYC(4)
  315 D1:B563 C3 AC B3 D1     jp i6502NextLoad
  316 D1:B567 -  -  -  -  
  317 D1:B567 -  -  -  -  outline6502_preidx_indir:
  318 D1:B567 E5 -  -  -      push hl
  319 D1:B568 7E -  -  -          ld  a,(hl)
  320 D1:B569 21 00 38 D0         ld  hl,ZEROPAGE
  321 D1:B56D 85 -  -  -          add a,L
  322 D1:B56E DD 86 01 -          add a,(ix+REGX)
  323 D1:B571 6F -  -  -          ld  L,a
  324 D1:B572 7E -  -  -          ld  a,(hl)
  325 D1:B573 2C -  -  -          inc L
  326 D1:B574 56 -  -  -          ld  d,(hl)
  327 D1:B575 42 -  -  -          ld  b,d
  328 D1:B576 0E 08 -  -          ld  c,BASETABLE_STRIDE
  329 D1:B578 ED 4C -  -          mlt bc
  330 D1:B57A 21 00 40 D0         ld  hl,PAGETABLE
  331 D1:B57E 09 -  -  -          add hl,bc
  332 D1:B57F ED 27 -  -          ld  hl,(hl)
  333 D1:B581 06 00 -  -          ld  b,0
  334 D1:B583 4F -  -  -          ld  c,a
  335 D1:B584 09 -  -  -          add hl,bc
  336 D1:B585 -  -  -  -          ;INSERT HARDWARE ACCESS PAGING. REGISTER D CONTAINS ACCESS PAGE
  337 D1:B585 7E -  -  -          ld  a,(hl)  ;oper uses A.
  338 D1:B586 -  -  -  -          ;oper
  339 D1:B586 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  340 D1:B59A ED 33 06 -          ADDCYC(6)
  341 D1:B59D E1 -  -  -      pop hl
  342 D1:B59E C3 AC B3 D1     jp i6502NextLoad
  343 D1:B5A2 -  -  -  -  
  344 D1:B5A2 -  -  -  -  outline6502_postidx_indir:
  345 D1:B5A2 E5 -  -  -      push hl
  346 D1:B5A3 7E -  -  -          ld  a,(hl)
  347 D1:B5A4 21 00 38 D0         ld  hl,ZEROPAGE
  348 D1:B5A8 85 -  -  -          add a,L
  349 D1:B5A9 6F -  -  -          ld  L,a
  350 D1:B5AA 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  351 D1:B5AB 2C -  -  -          inc L
  352 D1:B5AC DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  353 D1:B5AF 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  354 D1:B5B0 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  355 D1:B5B2 FD 23 -  -          ADDCYC(1)
  356 D1:B5B4 24 -  -  -          inc h
  357 D1:B5B5 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  358 D1:B5B6 2E 08 -  -          ld  L,BASETABLE_STRIDE
  359 D1:B5B8 ED 6C -  -          mlt hl          ;23.
  360 D1:B5BA 01 00 40 D0         ld  bc,PAGETABLE
  361 D1:B5BE 09 -  -  -          add hl,bc
  362 D1:B5BF ED 27 -  -          ld  hl,(hl)     ;address get.
  363 D1:B5C1 01 00 00 00         ld  bc,0
  364 D1:B5C5 4F -  -  -          ld  c,a
  365 D1:B5C6 09 -  -  -          add hl,bc       ;Full address get.
  366 D1:B5C7 7E -  -  -          ld  a,(hl)
  367 D1:B5C8 -  -  -  -          ;INSERT HARDWARE ACCESS PAGING. REGISTER D CONTAINS ACCESS PAGE
  368 D1:B5C8 -  -  -  -          ;oper
  369 D1:B5C8 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  370 D1:B5DC ED 33 05 -          ADDCYC(5)
  371 D1:B5DF E1 -  -  -      pop hl
  372 D1:B5E0 C3 AC B3 D1     jp i6502NextLoad
  373 D1:B5E4 -  -  -  -  
  374 D1:B5E4 -  -  -  -  ;-----------------------------------------------------------------------------
  375 D1:B5E4 -  -  -  -  ;-----------------------------------------------------------------------------
  376 D1:B5E4 -  -  -  -  ;-----------------------------------------------------------------------------
  377 D1:B5E4 -  -  -  -  
  378 D1:B5E4 -  -  -  -  ;  ***  *   * ****  ****   ***  *   * ***** ***** **  * *****  ***  
  379 D1:B5E4 -  -  -  -  ; *     *   * *   * *   * *   * *   *   *     *   **  * *     *     
  380 D1:B5E4 -  -  -  -  ;  ***  *   * ****  ****  *   * *   *   *     *   * * * ***    ***  
  381 D1:B5E4 -  -  -  -  ;     * *   * *   * *   * *   * *   *   *     *   *  ** *         * 
  382 D1:B5E4 -  -  -  -  ;  ***   ***  ****  *   *  ***   ***    *   ***** *  ** *****  ***  
  383 D1:B5E4 -  -  -  -  
  384 D1:B5E4 -  -  -  -  ;-----------------------------------------------------------------------------
  385 D1:B5E4 -  -  -  -  
  386 D1:B5E4 -  -  -  -  i6502_load_instruction_set:
  387 D1:B5E4 DD 21 04 40 
              D0 -  -  -      ld  ix,JUMPTABLE
  388 D1:B5E9 21 59 D7 D1     ld  hl,inst6502_instruction_set
  389 D1:B5ED 06 00 -  -      ld  b,0
  390 D1:B5EF ED 17 -  -  _:  ld  de,(hl)
  391 D1:B5F1 DD 1F 00 -      ld  (ix+0),de
  392 D1:B5F4 23 -  -  -      inc hl
  393 D1:B5F5 23 -  -  -      inc hl
  394 D1:B5F6 23 -  -  -      inc hl
  395 D1:B5F7 ED 32 08 -      lea ix,ix+BASETABLE_STRIDE
  396 D1:B5FA 10 F3 -  -      djnz -_
  397 D1:B5FC C9 -  -  -      ret
  398 D1:B5FD -  -  -  -  
  399 D1:B5FD -  -  -  -  ;HL=Base_ez80_address, C=Numpages_in_map, B=numpages_in_space, E=starting_page
  400 D1:B5FD -  -  -  -  ;Example: To map and mirror 2KB RAM at $D03800 inside first 8KB of 6502 space
  401 D1:B5FD -  -  -  -  ;HL=$D03800, C=$08, B=$20, E=$00
  402 D1:B5FD -  -  -  -  ;Note: B should be a power of two and evenly divisible by C.
  403 D1:B5FD -  -  -  -  i6502_map_pages:
  404 D1:B5FD 16 08 -  -      ld  d,BASETABLE_STRIDE
  405 D1:B5FF ED 5C -  -      mlt de
  406 D1:B601 DD 21 00 40 
              D0 -  -  -      ld  ix,PAGETABLE
  407 D1:B606 DD 19 -  -      add ix,de
  408 D1:B608 78 -  -  -      ld  a,b     ;A = main counter for total number of pages in mapping space
  409 D1:B609 11 00 01 00     ld  de,256
  410 D1:B60D E5 -  -  -      push hl
  411 D1:B60E FD E1 -  -      pop iy
  412 D1:B610 41 -  -  -  _:  ld  b,c     ;looping for number of pages to map
  413 D1:B611 DD 2F 00 -  _:  ld  (ix+0),hl
  414 D1:B614 19 -  -  -      add hl,de                   ;next page z80
  415 D1:B615 ED 32 08 -      lea ix,ix+BASETABLE_STRIDE  ;next page entry
  416 D1:B618 3D -  -  -      dec a
  417 D1:B619 C8 -  -  -      ret z
  418 D1:B61A 10 F5 -  -      djnz -_
  419 D1:B61C ED 23 00 -      lea hl,iy+0     ;start z80 pages over again for mirroring
  420 D1:B61F 18 EF -  -      jr --_
  421 D1:B621 -  -  -  -  
  422 D1:B621 -  -  -  -  
  423 D1:B621 -  -  -  -  subroutine6502_abs_split_start:
  424 D1:B621 4E -  -  -      ld  c,(hl)
  425 D1:B622 23 -  -  -      inc hl
  426 D1:B623 1C -  -  -      inc e
  427 D1:B624 20 15 -  -      jr nz,+_
  428 D1:B626 DD 56 06 -      ld  d,(ix+REGPC+1)
  429 D1:B629 14 -  -  -      inc d
  430 D1:B62A 52 DD 1F 05     ld.s (ix+REGPC),de
  431 D1:B62E 1E 08 -  -      ld  e,BASETABLE_STRIDE
  432 D1:B630 ED 5C -  -      mlt de
  433 D1:B632 21 00 40 D0     ld  hl,PAGETABLE
  434 D1:B636 19 -  -  -      add hl,de
  435 D1:B637 ED 27 -  -      ld  hl,(hl) ;
  436 D1:B639 1E 00 -  -      ld  e,0
  437 D1:B63B 46 -  -  -  _:  ld  b,(hl)
  438 D1:B63C C9 -  -  -      ret
  439 D1:B63D -  -  -  -  
  440 D1:B63D -  -  -  -  #define PUSH_ABSXSPLIT call subroutine6502_absx_split_start
  441 D1:B63D -  -  -  -  #define PUSH_ABSXSPLIT_NODEP call subroutine6502_absx_ss_noDep
  442 D1:B63D -  -  -  -  #define PUSH_ABSYSPLIT call subroutine6502_absy_split_start
  443 D1:B63D -  -  -  -  #define PUSH_ABSYSPLIT_NODEP call subroutine6502_absy_ss_noDep
  444 D1:B63D -  -  -  -  
  445 D1:B63D -  -  -  -  subroutine6502_absy_split_start:
  446 D1:B63D DD 4E 02 -      ld  c,(ix+REGY)
  447 D1:B640 18 03 -  -      jr +_
  448 D1:B642 -  -  -  -  
  449 D1:B642 -  -  -  -  subroutine6502_absx_split_start:
  450 D1:B642 DD 4E 01 -      ld  c,(ix+REGX)
  451 D1:B645 7E -  -  -  _:  ld  a,(hl)
  452 D1:B646 23 -  -  -      inc hl
  453 D1:B647 1C -  -  -      inc e
  454 D1:B648 20 15 -  -      jr nz,+_
  455 D1:B64A DD 56 06 -      ld  d,(ix+REGPC+1)
  456 D1:B64D 14 -  -  -      inc d
  457 D1:B64E 52 DD 1F 05     ld.s (ix+REGPC),de
  458 D1:B652 1E 08 -  -      ld  e,BASETABLE_STRIDE
  459 D1:B654 ED 5C -  -      mlt de
  460 D1:B656 21 00 40 D0     ld  hl,PAGETABLE
  461 D1:B65A 19 -  -  -      add hl,de
  462 D1:B65B ED 27 -  -      ld  hl,(hl) ;
  463 D1:B65D 1E 00 -  -      ld  e,0
  464 D1:B65F 46 -  -  -  _:  ld  b,(hl)
  465 D1:B660 E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  466 D1:B661 E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  467 D1:B662 81 -  -  -          add a,c
  468 D1:B663 30 03 -  -          jr  nc,+_
  469 D1:B665 FD 23 -  -          ADDCYC(1)
  470 D1:B667 04 -  -  -          inc b
  471 D1:B668 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  472 D1:B669 0E 08 -  -          ld  c,BASETABLE_STRIDE
  473 D1:B66B ED 4C -  -          mlt bc
  474 D1:B66D 21 00 40 D0         ld  hl,PAGETABLE
  475 D1:B671 09 -  -  -          add hl,bc
  476 D1:B672 ED 27 -  -          ld  hl,(hl)
  477 D1:B674 06 00 -  -          ld  b,0
  478 D1:B676 4F -  -  -          ld  c,a
  479 D1:B677 09 -  -  -          add hl,bc
  480 D1:B678 C9 -  -  -      ret
  481 D1:B679 -  -  -  -      
  482 D1:B679 -  -  -  -  subroutine6502_absy_ss_noDep:
  483 D1:B679 DD 4E 02 -      ld  c,(ix+REGY)
  484 D1:B67C 18 03 -  -      jr +_
  485 D1:B67E -  -  -  -  subroutine6502_absx_ss_noDep:
  486 D1:B67E DD 4E 01 -      ld  c,(ix+REGX)
  487 D1:B681 7E -  -  -  _:  ld  a,(hl)
  488 D1:B682 23 -  -  -      inc hl
  489 D1:B683 1C -  -  -      inc e
  490 D1:B684 20 15 -  -      jr nz,+_
  491 D1:B686 DD 56 06 -      ld  d,(ix+REGPC+1)
  492 D1:B689 14 -  -  -      inc d
  493 D1:B68A 52 DD 1F 05     ld.s (ix+REGPC),de
  494 D1:B68E 1E 08 -  -      ld  e,BASETABLE_STRIDE
  495 D1:B690 ED 5C -  -      mlt de
  496 D1:B692 21 00 40 D0     ld  hl,PAGETABLE
  497 D1:B696 19 -  -  -      add hl,de
  498 D1:B697 ED 27 -  -      ld  hl,(hl) ;
  499 D1:B699 1E 00 -  -      ld  e,0
  500 D1:B69B 46 -  -  -  _:  ld  b,(hl)
  501 D1:B69C E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  502 D1:B69D E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  503 D1:B69E 81 -  -  -          add a,c
  504 D1:B69F 30 01 -  -          jr  nc,+_
  505 D1:B6A1 04 -  -  -          inc b
  506 D1:B6A2 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  507 D1:B6A3 0E 08 -  -          ld  c,BASETABLE_STRIDE
  508 D1:B6A5 ED 4C -  -          mlt bc
  509 D1:B6A7 21 00 40 D0         ld  hl,PAGETABLE
  510 D1:B6AB 09 -  -  -          add hl,bc
  511 D1:B6AC ED 27 -  -          ld  hl,(hl)
  512 D1:B6AE 06 00 -  -          ld  b,0
  513 D1:B6B0 4F -  -  -          ld  c,a
  514 D1:B6B1 09 -  -  -          add hl,bc
  515 D1:B6B2 C9 -  -  -      ret
  516 D1:B6B3 -  -  -  -  
  517 D1:B6B3 -  -  -  -  
  518 D1:B6B3 -  -  -  -  
  519 D1:B6B3 -  -  -  -  
  520 D1:B6B3 -  -  -  -  
  521 D1:B6B3 -  -  -  -  
  522 D1:B6B3 -  -  -  -  
  523 D1:B6B3 -  -  -  -  subroutine6502_adc_combined_end:
  524 D1:B6B3 DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  525 D1:B6B6 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  526 D1:B6B7 DD 7E 00 -      ld  a,(ix+REGA)
  527 D1:B6BA 89 -  -  -      adc a,c
  528 D1:B6BB DD 77 00 -      ld  (ix+REGA),a
  529 D1:B6BE DD 46 04 CB 
              B0 E2 C9 B6 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  530 D1:B6E0 C3 AC B3 D1     jp i6502NextLoad
  531 D1:B6E4 -  -  -  -  
  532 D1:B6E4 -  -  -  -  subroutine6502_sbc_combined_end:
  533 D1:B6E4 DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  534 D1:B6E7 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  535 D1:B6E8 DD 7E 00 -      ld  a,(ix+REGA)
  536 D1:B6EB 3F -  -  -      ccf
  537 D1:B6EC 99 -  -  -      sbc a,c
  538 D1:B6ED 3F -  -  -      ccf
  539 D1:B6EE DD 77 00 -      ld  (ix+REGA),a
  540 D1:B6F1 DD 46 04 CB 
              B0 E2 FC B6 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  541 D1:B713 C3 AC B3 D1     jp i6502NextLoad
  542 D1:B717 -  -  -  -  
  543 D1:B717 -  -  -  -  subroutine6502_cmp_combined_end:
  544 D1:B717 DD 7E 00 -      ld  a,(ix+REGA)
  545 D1:B71A 90 -  -  -      sub a,b
  546 D1:B71B 3F -  -  -      ccf     ;because the 6502 is strange like that.
  547 D1:B71C DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  548 D1:B736 C3 AC B3 D1     jp i6502NextLoad
  549 D1:B73A -  -  -  -  
  550 D1:B73A -  -  -  -  subroutine6502_take_branch:
  551 D1:B73A FD 23 -  -      ADDCYC(1)
  552 D1:B73C 7E -  -  -      ld  a,(hl)  ;offset byte
  553 D1:B73D 6F -  -  -      ld  L,a
  554 D1:B73E 87 -  -  -      add a,a
  555 D1:B73F 9F -  -  -      sbc a,a
  556 D1:B740 67 -  -  -      ld  H,a     ;sign-extending offset byte
  557 D1:B741 DD 56 06 -      ld  d,(ix+REGPC+1)
  558 D1:B744 13 -  -  -      inc de
  559 D1:B745 52 19 -  -      add.s hl,de
  560 D1:B747 7C -  -  -      ld  a,h
  561 D1:B748 BA -  -  -      cp  d       ;is high byte the same?
  562 D1:B749 28 02 -  -      jr  z,+_    ;if so, do not add another clock
  563 D1:B74B FD 23 -  -      ADDCYC(1)
  564 D1:B74D 52 DD 2F 05 _:  ld.s (ix+REGPC),hl
  565 D1:B751 C3 96 B3 D1     jp  i6502FirstLoad
  566 D1:B755 -  -  -  -  
  567 D1:B755 -  -  -  -  
  568 D1:B755 -  -  -  -  ;-----------------------------------------------------------------------------
  569 D1:B755 -  -  -  -  
  570 D1:B755 -  -  -  -  ; *** **  *  *** ***** ***  *   *  *** ***** *** ***  **  *     ***  ***** *****                                                
  571 D1:B755 -  -  -  -  ;  *  **  * *      *   *  * *   * *      *    * *   * **  *    *     *       *                   
  572 D1:B755 -  -  -  -  ;  *  * * *  ***   *   ***  *   * *      *    * *   * * * *     ***  ***     *                          
  573 D1:B755 -  -  -  -  ;  *  *  **     *  *   *  * *   * *      *    * *   * *  **        * *       *                   
  574 D1:B755 -  -  -  -  ; *** *  **  ***   *   *  *  ***   ***   *   *** ***  *  **     ***  *****   *                                 
  575 D1:B755 -  -  -  -  
  576 D1:B755 -  -  -  -  ;-----------------------------------------------------------------------------
  577 D1:B755 -  -  -  -  
  578 D1:B755 -  -  -  -  ;-----------------------------------------------------------------------------
  579 D1:B755 -  -  -  -  ;-----------------------------------------------------------------------------
  580 D1:B755 -  -  -  -  ;-----------------------------------------------------------------------------
  581 D1:B755 -  -  -  -  ;Instructions by type: Transfer Instructions
  582 D1:B755 -  -  -  -  ;LDA - Load Accumulator with Memory
  583 D1:B755 -  -  -  -  ;    M -> A
  584 D1:B755 -  -  -  -  ;    N	Z	C	I	D	V
  585 D1:B755 -  -  -  -  ;    +	+	-	-	-	-
  586 D1:B755 -  -  -  -  
  587 D1:B755 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
  588 D1:B755 -  -  -  -  ;immediate	LDA #oper	A9	2	2
  589 D1:B755 -  -  -  -  inst6502_lda_imm:
  590 D1:B755 7E -  -  -      ld  a,(hl)
  591 D1:B756 DD 77 00 -      ld  (ix+REGA),a
  592 D1:B759 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  593 D1:B76D ED 33 02 -      ADDCYC(2)
  594 D1:B770 C3 AC B3 D1     jp i6502NextLoad
  595 D1:B774 -  -  -  -  
  596 D1:B774 -  -  -  -  ;zeropage	LDA oper	A5	2	3
  597 D1:B774 -  -  -  -  inst6502_lda_zp:
  598 D1:B774 7E -  -  -      ld  a,(hl)
  599 D1:B775 01 00 38 D0     ld  bc,ZEROPAGE
  600 D1:B779 81 -  -  -      add a,c
  601 D1:B77A 4F -  -  -      ld  c,a
  602 D1:B77B 0A -  -  -      ld  a,(bc)
  603 D1:B77C DD 77 00 -      ld  (ix+REGA),a
  604 D1:B77F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  605 D1:B793 ED 33 03 -      ADDCYC(3)
  606 D1:B796 C3 AC B3 D1     jp i6502NextLoad
  607 D1:B79A -  -  -  -  
  608 D1:B79A -  -  -  -  ;zeropage,X	LDA oper,X	B5	2	4 
  609 D1:B79A -  -  -  -  inst6502_lda_zpx:
  610 D1:B79A 7E -  -  -      ld  a,(hl)
  611 D1:B79B 01 00 38 D0     ld  bc,ZEROPAGE
  612 D1:B79F 81 -  -  -      add a,c
  613 D1:B7A0 DD 86 01 -      add a,(ix+REGX)
  614 D1:B7A3 4F -  -  -      ld  c,a
  615 D1:B7A4 0A -  -  -      ld  a,(bc)
  616 D1:B7A5 DD 77 00 -      ld  (ix+REGA),a
  617 D1:B7A8 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  618 D1:B7BC ED 33 04 -      ADDCYC(4)
  619 D1:B7BF C3 AC B3 D1     jp i6502NextLoad
  620 D1:B7C3 -  -  -  -  
  621 D1:B7C3 -  -  -  -  ;absolute	LDA oper	AD	3	4
  622 D1:B7C3 -  -  -  -  inst6502_lda_abs:
  623 D1:B7C3 CD 21 B6 D1     call subroutine6502_abs_split_start
  624 D1:B7C7 E5 -  -  -      push hl
  625 D1:B7C8 50 -  -  -          ld  d,b
  626 D1:B7C9 79 -  -  -          ld  a,c
  627 D1:B7CA 0E 08 -  -          ld  c,BASETABLE_STRIDE
  628 D1:B7CC ED 4C -  -          mlt bc
  629 D1:B7CE 21 00 40 D0         ld  hl,PAGETABLE
  630 D1:B7D2 09 -  -  -          add hl,bc
  631 D1:B7D3 ED 27 -  -          ld  hl,(hl)
  632 D1:B7D5 06 00 -  -          ld  b,0
  633 D1:B7D7 4F -  -  -          ld  c,a
  634 D1:B7D8 09 -  -  -          add hl,bc   ;full address
  635 D1:B7D9 7E -  -  -          READ_ACCESS
  636 D1:B7DA DD 77 00 -          ld (ix+REGA),a
  637 D1:B7DD DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  638 D1:B7F1 ED 33 04 -          ADDCYC(4)
  639 D1:B7F4 E1 -  -  -      pop hl
  640 D1:B7F5 C3 AC B3 D1     jp i6502NextLoad
  641 D1:B7F9 -  -  -  -  
  642 D1:B7F9 -  -  -  -  ;absolute,X	LDA oper,X	BD	3	4* 
  643 D1:B7F9 -  -  -  -  inst6502_lda_absx:
  644 D1:B7F9 ED 33 04 -      ADDCYC(4)
  645 D1:B7FC CD 42 B6 D1     PUSH_ABSXSPLIT
  646 D1:B800 7E -  -  -          READ_ACCESS
  647 D1:B801 DD 77 00 -          ld (ix+REGA),a
  648 D1:B804 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  649 D1:B818 E1 -  -  -      pop hl
  650 D1:B819 C3 AC B3 D1     jp i6502NextLoad
  651 D1:B81D -  -  -  -  
  652 D1:B81D -  -  -  -  ;absolute,Y	LDA oper,Y	B9	3	4* 
  653 D1:B81D -  -  -  -  inst6502_lda_absy:
  654 D1:B81D ED 33 04 -      ADDCYC(4)
  655 D1:B820 CD 3D B6 D1     PUSH_ABSYSPLIT
  656 D1:B824 7E -  -  -          READ_ACCESS
  657 D1:B825 DD 77 00 -          ld (ix+REGA),a
  658 D1:B828 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  659 D1:B83C E1 -  -  -      pop hl
  660 D1:B83D C3 AC B3 D1     jp i6502NextLoad
  661 D1:B841 -  -  -  -  
  662 D1:B841 -  -  -  -  ;(indirect,X)	LDA (oper,X)	A1	2	6
  663 D1:B841 -  -  -  -  inst6502_lda_indx:
  664 D1:B841 E5 -  -  -      push hl
  665 D1:B842 7E -  -  -          ld  a,(hl)
  666 D1:B843 21 00 38 D0         ld  hl,ZEROPAGE
  667 D1:B847 85 -  -  -          add a,L
  668 D1:B848 DD 86 01 -          add a,(ix+REGX)
  669 D1:B84B 6F -  -  -          ld  L,a
  670 D1:B84C 7E -  -  -          ld  a,(hl)
  671 D1:B84D 2C -  -  -          inc L
  672 D1:B84E 56 -  -  -          ld  d,(hl)
  673 D1:B84F 42 -  -  -          ld  b,d
  674 D1:B850 0E 08 -  -          ld  c,BASETABLE_STRIDE
  675 D1:B852 ED 4C -  -          mlt bc
  676 D1:B854 21 00 40 D0         ld  hl,PAGETABLE
  677 D1:B858 09 -  -  -          add hl,bc
  678 D1:B859 ED 27 -  -          ld  hl,(hl)
  679 D1:B85B 06 00 -  -          ld  b,0
  680 D1:B85D 4F -  -  -          ld  c,a
  681 D1:B85E 09 -  -  -          add hl,bc
  682 D1:B85F 7E -  -  -          READ_ACCESS
  683 D1:B860 DD 77 00 -          ld (ix+REGA),a
  684 D1:B863 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  685 D1:B877 ED 33 06 -          ADDCYC(6)
  686 D1:B87A E1 -  -  -      pop hl
  687 D1:B87B C3 AC B3 D1     jp i6502NextLoad
  688 D1:B87F -  -  -  -  
  689 D1:B87F -  -  -  -  ;(indirect),Y	LDA (oper),Y	B1	2	5*
  690 D1:B87F -  -  -  -  inst6502_lda_indy:
  691 D1:B87F E5 -  -  -      push hl
  692 D1:B880 7E -  -  -          ld  a,(hl)
  693 D1:B881 21 00 38 D0         ld  hl,ZEROPAGE
  694 D1:B885 85 -  -  -          add a,L
  695 D1:B886 6F -  -  -          ld  L,a
  696 D1:B887 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  697 D1:B888 2C -  -  -          inc L
  698 D1:B889 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  699 D1:B88C 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  700 D1:B88D 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  701 D1:B88F FD 23 -  -          ADDCYC(1)
  702 D1:B891 24 -  -  -          inc h
  703 D1:B892 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  704 D1:B893 2E 08 -  -          ld  L,BASETABLE_STRIDE
  705 D1:B895 ED 6C -  -          mlt hl          ;23.
  706 D1:B897 01 00 40 D0         ld  bc,PAGETABLE
  707 D1:B89B 09 -  -  -          add hl,bc
  708 D1:B89C ED 27 -  -          ld  hl,(hl)     ;address get.
  709 D1:B89E 01 00 00 00         ld  bc,0
  710 D1:B8A2 4F -  -  -          ld  c,a
  711 D1:B8A3 09 -  -  -          add hl,bc       ;Full address get.
  712 D1:B8A4 7E -  -  -          READ_ACCESS
  713 D1:B8A5 DD 77 00 -          ld  (ix+REGA),a
  714 D1:B8A8 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  715 D1:B8BC ED 33 05 -          ADDCYC(5)
  716 D1:B8BF E1 -  -  -      pop hl
  717 D1:B8C0 C3 AC B3 D1     jp i6502NextLoad
  718 D1:B8C4 -  -  -  -  
  719 D1:B8C4 -  -  -  -  ;-----------------------------------------------------------------------------
  720 D1:B8C4 -  -  -  -  ;LDX - Load Index X with Memory
  721 D1:B8C4 -  -  -  -  ;    M -> X
  722 D1:B8C4 -  -  -  -  ;    N	Z	C	I	D	V
  723 D1:B8C4 -  -  -  -  ;    +	+	-	-	-	-
  724 D1:B8C4 -  -  -  -  
  725 D1:B8C4 -  -  -  -  ;immediate	LDX #oper	A2	2	2  
  726 D1:B8C4 -  -  -  -  inst6502_ldx_imm:
  727 D1:B8C4 7E -  -  -      ld  a,(hl)
  728 D1:B8C5 DD 77 01 -      ld  (ix+REGX),a
  729 D1:B8C8 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  730 D1:B8DC ED 33 02 -      ADDCYC(2)
  731 D1:B8DF C3 AC B3 D1     jp i6502NextLoad
  732 D1:B8E3 -  -  -  -  
  733 D1:B8E3 -  -  -  -  ;zeropage	LDX oper	A6	2	3 
  734 D1:B8E3 -  -  -  -  inst6502_ldx_zp:
  735 D1:B8E3 7E -  -  -      ld  a,(hl)
  736 D1:B8E4 01 00 38 D0     ld  bc,ZEROPAGE
  737 D1:B8E8 81 -  -  -      add a,c
  738 D1:B8E9 4F -  -  -      ld  c,a
  739 D1:B8EA 0A -  -  -      ld  a,(bc)
  740 D1:B8EB DD 77 01 -      ld  (ix+REGX),a
  741 D1:B8EE DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  742 D1:B902 ED 33 03 -      ADDCYC(3)
  743 D1:B905 C3 AC B3 D1     jp i6502NextLoad
  744 D1:B909 -  -  -  -  
  745 D1:B909 -  -  -  -  ;zeropage,Y	LDX oper,Y	B6	2	4  
  746 D1:B909 -  -  -  -  inst6502_ldx_zpy:
  747 D1:B909 7E -  -  -      ld  a,(hl)
  748 D1:B90A 01 00 38 D0     ld  bc,ZEROPAGE
  749 D1:B90E 81 -  -  -      add a,c
  750 D1:B90F DD 86 02 -      add a,(ix+REGY)
  751 D1:B912 4F -  -  -      ld  c,a
  752 D1:B913 0A -  -  -      ld  a,(bc)
  753 D1:B914 DD 77 01 -      ld  (ix+REGX),a
  754 D1:B917 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  755 D1:B92B ED 33 04 -      ADDCYC(4)
  756 D1:B92E C3 AC B3 D1     jp i6502NextLoad
  757 D1:B932 -  -  -  -  
  758 D1:B932 -  -  -  -  ;absolute	LDX oper	AE	3	4  
  759 D1:B932 -  -  -  -  inst6502_ldx_abs:
  760 D1:B932 CD 21 B6 D1     call subroutine6502_abs_split_start
  761 D1:B936 E5 -  -  -      push hl
  762 D1:B937 50 -  -  -          ld  d,b
  763 D1:B938 79 -  -  -          ld  a,c
  764 D1:B939 0E 08 -  -          ld  c,BASETABLE_STRIDE
  765 D1:B93B ED 4C -  -          mlt bc
  766 D1:B93D 21 00 40 D0         ld  hl,PAGETABLE
  767 D1:B941 09 -  -  -          add hl,bc
  768 D1:B942 ED 27 -  -          ld  hl,(hl)
  769 D1:B944 06 00 -  -          ld  b,0
  770 D1:B946 4F -  -  -          ld  c,a
  771 D1:B947 09 -  -  -          add hl,bc   ;full address
  772 D1:B948 7E -  -  -          READ_ACCESS
  773 D1:B949 DD 77 01 -          ld (ix+REGX),a
  774 D1:B94C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  775 D1:B960 ED 33 04 -          ADDCYC(4)
  776 D1:B963 E1 -  -  -      pop hl
  777 D1:B964 C3 AC B3 D1     jp i6502NextLoad
  778 D1:B968 -  -  -  -  
  779 D1:B968 -  -  -  -  ;absolute,Y	LDX oper,Y	BE	3	4* 
  780 D1:B968 -  -  -  -  inst6502_ldx_absy:
  781 D1:B968 ED 33 04 -      ADDCYC(4)
  782 D1:B96B CD 3D B6 D1     PUSH_ABSYSPLIT
  783 D1:B96F 7E -  -  -          READ_ACCESS
  784 D1:B970 DD 77 01 -          ld (ix+REGX),a
  785 D1:B973 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  786 D1:B987 E1 -  -  -      pop hl
  787 D1:B988 C3 AC B3 D1     jp i6502NextLoad
  788 D1:B98C -  -  -  -  
  789 D1:B98C -  -  -  -  ;-----------------------------------------------------------------------------
  790 D1:B98C -  -  -  -  ;LDY -  Load Index Y with Memory
  791 D1:B98C -  -  -  -  ;    M -> Y
  792 D1:B98C -  -  -  -  ;    N	Z	C	I	D	V
  793 D1:B98C -  -  -  -  ;    +	+	-	-	-	-
  794 D1:B98C -  -  -  -  
  795 D1:B98C -  -  -  -  ;immediate	LDY #oper	A0	2	2  
  796 D1:B98C -  -  -  -  inst6502_ldy_imm:
  797 D1:B98C 7E -  -  -      ld  a,(hl)
  798 D1:B98D DD 77 02 -      ld  (ix+REGY),a
  799 D1:B990 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  800 D1:B9A4 ED 33 02 -      ADDCYC(2)
  801 D1:B9A7 C3 AC B3 D1     jp i6502NextLoad
  802 D1:B9AB -  -  -  -  
  803 D1:B9AB -  -  -  -  ;zeropage	LDY oper	A4	2	3  
  804 D1:B9AB -  -  -  -  inst6502_ldy_zp:
  805 D1:B9AB 7E -  -  -      ld  a,(hl)
  806 D1:B9AC 01 00 38 D0     ld  bc,ZEROPAGE
  807 D1:B9B0 81 -  -  -      add a,c
  808 D1:B9B1 4F -  -  -      ld  c,a
  809 D1:B9B2 0A -  -  -      ld  a,(bc)
  810 D1:B9B3 DD 77 02 -      ld  (ix+REGY),a
  811 D1:B9B6 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  812 D1:B9CA ED 33 03 -      ADDCYC(3)
  813 D1:B9CD C3 AC B3 D1     jp i6502NextLoad
  814 D1:B9D1 -  -  -  -  
  815 D1:B9D1 -  -  -  -  ;zeropage,X	LDY oper,X	B4	2	4  
  816 D1:B9D1 -  -  -  -  inst6502_ldy_zpx:
  817 D1:B9D1 7E -  -  -      ld  a,(hl)
  818 D1:B9D2 01 00 38 D0     ld  bc,ZEROPAGE
  819 D1:B9D6 81 -  -  -      add a,c
  820 D1:B9D7 DD 86 01 -      add a,(ix+REGX)
  821 D1:B9DA 4F -  -  -      ld  c,a
  822 D1:B9DB 0A -  -  -      ld  a,(bc)
  823 D1:B9DC DD 77 02 -      ld  (ix+REGY),a
  824 D1:B9DF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  825 D1:B9F3 ED 33 04 -      ADDCYC(4)
  826 D1:B9F6 C3 AC B3 D1     jp i6502NextLoad
  827 D1:B9FA -  -  -  -  
  828 D1:B9FA -  -  -  -  ;absolute	LDY oper	AC	3	4  
  829 D1:B9FA -  -  -  -  inst6502_ldy_abs:
  830 D1:B9FA CD 21 B6 D1     call subroutine6502_abs_split_start
  831 D1:B9FE E5 -  -  -      push hl
  832 D1:B9FF 50 -  -  -          ld  d,b
  833 D1:BA00 79 -  -  -          ld  a,c
  834 D1:BA01 0E 08 -  -          ld  c,BASETABLE_STRIDE
  835 D1:BA03 ED 4C -  -          mlt bc
  836 D1:BA05 21 00 40 D0         ld  hl,PAGETABLE
  837 D1:BA09 09 -  -  -          add hl,bc
  838 D1:BA0A ED 27 -  -          ld  hl,(hl)
  839 D1:BA0C 06 00 -  -          ld  b,0
  840 D1:BA0E 4F -  -  -          ld  c,a
  841 D1:BA0F 09 -  -  -          add hl,bc   ;full address
  842 D1:BA10 7E -  -  -          READ_ACCESS
  843 D1:BA11 DD 77 02 -          ld (ix+REGY),a
  844 D1:BA14 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  845 D1:BA28 ED 33 04 -          ADDCYC(4)
  846 D1:BA2B E1 -  -  -      pop hl
  847 D1:BA2C C3 AC B3 D1     jp i6502NextLoad
  848 D1:BA30 -  -  -  -  
  849 D1:BA30 -  -  -  -  ;absolute,X	LDY oper,X	BC	3	4* 
  850 D1:BA30 -  -  -  -  inst6502_ldy_absx:
  851 D1:BA30 ED 33 04 -      ADDCYC(4)
  852 D1:BA33 CD 42 B6 D1     PUSH_ABSXSPLIT
  853 D1:BA37 7E -  -  -          READ_ACCESS
  854 D1:BA38 DD 77 02 -          ld (ix+REGY),a
  855 D1:BA3B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  856 D1:BA4F E1 -  -  -      pop hl
  857 D1:BA50 C3 AC B3 D1     jp i6502NextLoad
  858 D1:BA54 -  -  -  -  
  859 D1:BA54 -  -  -  -  ;-----------------------------------------------------------------------------
  860 D1:BA54 -  -  -  -  ;STA - Store Accumulator in Memory
  861 D1:BA54 -  -  -  -  ;    A -> M
  862 D1:BA54 -  -  -  -  ;    N	Z	C	I	D	V
  863 D1:BA54 -  -  -  -  ;    -	-	-	-	-	-
  864 D1:BA54 -  -  -  -  
  865 D1:BA54 -  -  -  -  ;zeropage	STA oper	85	2	3  
  866 D1:BA54 -  -  -  -  inst6502_sta_zp:
  867 D1:BA54 7E -  -  -      ld  a,(hl)
  868 D1:BA55 01 00 38 D0     ld  bc,ZEROPAGE
  869 D1:BA59 81 -  -  -      add a,c
  870 D1:BA5A 4F -  -  -      ld  c,a
  871 D1:BA5B DD 7E 00 -      ld  a,(ix+REGA)
  872 D1:BA5E 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  873 D1:BA5F ED 33 03 -      ADDCYC(3)
  874 D1:BA62 C3 AC B3 D1     jp i6502NextLoad
  875 D1:BA66 -  -  -  -  
  876 D1:BA66 -  -  -  -  ;zeropage,X	STA oper,X	95	2	4  
  877 D1:BA66 -  -  -  -  inst6502_sta_zpx:
  878 D1:BA66 7E -  -  -      ld  a,(hl)
  879 D1:BA67 01 00 38 D0     ld  bc,ZEROPAGE
  880 D1:BA6B 81 -  -  -      add a,c
  881 D1:BA6C DD 86 01 -      add a,(ix+REGX)
  882 D1:BA6F 4F -  -  -      ld  c,a
  883 D1:BA70 DD 7E 00 -      ld  a,(ix+REGA)
  884 D1:BA73 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  885 D1:BA74 ED 33 04 -      ADDCYC(4)
  886 D1:BA77 C3 AC B3 D1     jp i6502NextLoad
  887 D1:BA7B -  -  -  -  
  888 D1:BA7B -  -  -  -  ;absolute	STA oper	8D	3	4
  889 D1:BA7B -  -  -  -  inst6502_sta_abs:
  890 D1:BA7B CD 21 B6 D1     call subroutine6502_abs_split_start
  891 D1:BA7F E5 -  -  -      push hl
  892 D1:BA80 50 -  -  -          ld  d,b
  893 D1:BA81 79 -  -  -          ld  a,c
  894 D1:BA82 0E 08 -  -          ld  c,BASETABLE_STRIDE
  895 D1:BA84 ED 4C -  -          mlt bc
  896 D1:BA86 21 00 40 D0         ld  hl,PAGETABLE
  897 D1:BA8A 09 -  -  -          add hl,bc
  898 D1:BA8B ED 27 -  -          ld  hl,(hl)
  899 D1:BA8D 06 00 -  -          ld  b,0
  900 D1:BA8F 4F -  -  -          ld  c,a
  901 D1:BA90 09 -  -  -          add hl,bc   ;full address
  902 D1:BA91 DD 46 00 -          ld  b,(ix+REGA)
  903 D1:BA94 70 -  -  -          WRITE_ACCESS
  904 D1:BA95 ED 33 04 -          ADDCYC(4)
  905 D1:BA98 E1 -  -  -      pop hl
  906 D1:BA99 C3 AC B3 D1     jp i6502NextLoad
  907 D1:BA9D -  -  -  -  
  908 D1:BA9D -  -  -  -  ;absolute,X	STA oper,X	9D	3	5  
  909 D1:BA9D -  -  -  -  inst6502_sta_absx:
  910 D1:BA9D ED 33 05 -      ADDCYC(5)
  911 D1:BAA0 CD 7E B6 D1     PUSH_ABSXSPLIT_NODEP
  912 D1:BAA4 DD 46 00 -          ld  b,(ix+REGA)
  913 D1:BAA7 70 -  -  -          WRITE_ACCESS
  914 D1:BAA8 E1 -  -  -      pop hl
  915 D1:BAA9 C3 AC B3 D1     jp i6502NextLoad
  916 D1:BAAD -  -  -  -  
  917 D1:BAAD -  -  -  -  ;absolute,Y	STA oper,Y	99	3	5  
  918 D1:BAAD -  -  -  -  inst6502_sta_absy:
  919 D1:BAAD ED 33 05 -      ADDCYC(5)
  920 D1:BAB0 CD 79 B6 D1     PUSH_ABSYSPLIT_NODEP
  921 D1:BAB4 DD 46 00 -          ld  b,(ix+REGA)
  922 D1:BAB7 70 -  -  -          WRITE_ACCESS
  923 D1:BAB8 E1 -  -  -      pop hl
  924 D1:BAB9 C3 AC B3 D1     jp i6502NextLoad
  925 D1:BABD -  -  -  -  
  926 D1:BABD -  -  -  -  ;(indirect,X)	STA (oper,X)	81	2	6  
  927 D1:BABD -  -  -  -  inst6502_sta_indx:
  928 D1:BABD E5 -  -  -      push hl
  929 D1:BABE 7E -  -  -          ld  a,(hl)
  930 D1:BABF 21 00 38 D0         ld  hl,ZEROPAGE
  931 D1:BAC3 85 -  -  -          add a,L
  932 D1:BAC4 DD 86 01 -          add a,(ix+REGX)
  933 D1:BAC7 6F -  -  -          ld  L,a
  934 D1:BAC8 7E -  -  -          ld  a,(hl)
  935 D1:BAC9 2C -  -  -          inc L
  936 D1:BACA 56 -  -  -          ld  d,(hl)
  937 D1:BACB 42 -  -  -          ld  b,d
  938 D1:BACC 0E 08 -  -          ld  c,BASETABLE_STRIDE
  939 D1:BACE ED 4C -  -          mlt bc
  940 D1:BAD0 21 00 40 D0         ld  hl,PAGETABLE
  941 D1:BAD4 09 -  -  -          add hl,bc
  942 D1:BAD5 ED 27 -  -          ld  hl,(hl)
  943 D1:BAD7 06 00 -  -          ld  b,0
  944 D1:BAD9 4F -  -  -          ld  c,a
  945 D1:BADA 09 -  -  -          add hl,bc
  946 D1:BADB DD 46 00 -          ld  b,(ix+REGA)
  947 D1:BADE 70 -  -  -          WRITE_ACCESS
  948 D1:BADF ED 33 06 -          ADDCYC(6)
  949 D1:BAE2 E1 -  -  -      pop hl
  950 D1:BAE3 C3 AC B3 D1     jp i6502NextLoad
  951 D1:BAE7 -  -  -  -  
  952 D1:BAE7 -  -  -  -  ;(indirect),Y	STA (oper),Y	91	2	6  
  953 D1:BAE7 -  -  -  -  inst6502_sta_indy:
  954 D1:BAE7 E5 -  -  -      push hl
  955 D1:BAE8 7E -  -  -          ld  a,(hl)
  956 D1:BAE9 21 00 38 D0         ld  hl,ZEROPAGE
  957 D1:BAED 85 -  -  -          add a,L
  958 D1:BAEE 6F -  -  -          ld  L,a
  959 D1:BAEF 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  960 D1:BAF0 2C -  -  -          inc L
  961 D1:BAF1 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  962 D1:BAF4 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  963 D1:BAF5 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  964 D1:BAF7 24 -  -  -          inc h
  965 D1:BAF8 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  966 D1:BAF9 2E 08 -  -          ld  L,BASETABLE_STRIDE
  967 D1:BAFB ED 6C -  -          mlt hl          ;23.
  968 D1:BAFD 01 00 40 D0         ld  bc,PAGETABLE
  969 D1:BB01 09 -  -  -          add hl,bc
  970 D1:BB02 ED 27 -  -          ld  hl,(hl)     ;address get.
  971 D1:BB04 01 00 00 00         ld  bc,0
  972 D1:BB08 4F -  -  -          ld  c,a
  973 D1:BB09 09 -  -  -          add hl,bc       ;Full address get.
  974 D1:BB0A DD 46 00 -          ld  b,(ix+REGA)
  975 D1:BB0D 70 -  -  -          WRITE_ACCESS
  976 D1:BB0E ED 33 06 -          ADDCYC(6)
  977 D1:BB11 E1 -  -  -      pop hl
  978 D1:BB12 C3 AC B3 D1     jp i6502NextLoad
  979 D1:BB16 -  -  -  -  
  980 D1:BB16 -  -  -  -  ;-----------------------------------------------------------------------------
  981 D1:BB16 -  -  -  -  ;STX - Store Index X in Memory
  982 D1:BB16 -  -  -  -  ;    X -> M
  983 D1:BB16 -  -  -  -  ;    N	Z	C	I	D	V
  984 D1:BB16 -  -  -  -  ;    -	-	-	-	-	-
  985 D1:BB16 -  -  -  -  
  986 D1:BB16 -  -  -  -  ;zeropage	STX oper	86	2	3  
  987 D1:BB16 -  -  -  -  inst6502_stx_zp:
  988 D1:BB16 7E -  -  -      ld  a,(hl)
  989 D1:BB17 01 00 38 D0     ld  bc,ZEROPAGE
  990 D1:BB1B 81 -  -  -      add a,c
  991 D1:BB1C 4F -  -  -      ld  c,a
  992 D1:BB1D DD 7E 01 -      ld  a,(ix+REGX)
  993 D1:BB20 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  994 D1:BB21 ED 33 03 -      ADDCYC(3)
  995 D1:BB24 C3 AC B3 D1     jp i6502NextLoad
  996 D1:BB28 -  -  -  -  
  997 D1:BB28 -  -  -  -  ;zeropage,Y	STX oper,Y	96	2	4  
  998 D1:BB28 -  -  -  -  inst6502_stx_zpy:
  999 D1:BB28 7E -  -  -      ld  a,(hl)
 1000 D1:BB29 01 00 38 D0     ld  bc,ZEROPAGE
 1001 D1:BB2D 81 -  -  -      add a,c
 1002 D1:BB2E DD 86 02 -      add a,(ix+REGY)
 1003 D1:BB31 4F -  -  -      ld  c,a
 1004 D1:BB32 DD 7E 01 -      ld  a,(ix+REGX)
 1005 D1:BB35 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
 1006 D1:BB36 ED 33 04 -      ADDCYC(4)
 1007 D1:BB39 C3 AC B3 D1     jp i6502NextLoad
 1008 D1:BB3D -  -  -  -  
 1009 D1:BB3D -  -  -  -  ;absolute	STX oper	8E	3	4  
 1010 D1:BB3D -  -  -  -  inst6502_stx_abs:
 1011 D1:BB3D CD 21 B6 D1     call subroutine6502_abs_split_start
 1012 D1:BB41 E5 -  -  -      push hl
 1013 D1:BB42 50 -  -  -          ld  d,b
 1014 D1:BB43 79 -  -  -          ld  a,c
 1015 D1:BB44 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1016 D1:BB46 ED 4C -  -          mlt bc
 1017 D1:BB48 21 00 40 D0         ld  hl,PAGETABLE
 1018 D1:BB4C 09 -  -  -          add hl,bc
 1019 D1:BB4D ED 27 -  -          ld  hl,(hl)
 1020 D1:BB4F 06 00 -  -          ld  b,0
 1021 D1:BB51 4F -  -  -          ld  c,a
 1022 D1:BB52 09 -  -  -          add hl,bc   ;full address
 1023 D1:BB53 DD 46 01 -          ld  b,(ix+REGX)
 1024 D1:BB56 70 -  -  -          WRITE_ACCESS
 1025 D1:BB57 ED 33 04 -          ADDCYC(4)
 1026 D1:BB5A E1 -  -  -      pop hl
 1027 D1:BB5B C3 AC B3 D1     jp i6502NextLoad
 1028 D1:BB5F -  -  -  -  
 1029 D1:BB5F -  -  -  -  ;-----------------------------------------------------------------------------
 1030 D1:BB5F -  -  -  -  ;STY - Store Index Y in Memory
 1031 D1:BB5F -  -  -  -  ;    Y -> M
 1032 D1:BB5F -  -  -  -  ;    N	Z	C	I	D	V
 1033 D1:BB5F -  -  -  -  ;    -	-	-	-	-	-
 1034 D1:BB5F -  -  -  -  
 1035 D1:BB5F -  -  -  -  ;zeropage	STY oper	84	2	3  
 1036 D1:BB5F -  -  -  -  inst6502_sty_zp:
 1037 D1:BB5F 7E -  -  -      ld  a,(hl)
 1038 D1:BB60 01 00 38 D0     ld  bc,ZEROPAGE
 1039 D1:BB64 81 -  -  -      add a,c
 1040 D1:BB65 4F -  -  -      ld  c,a
 1041 D1:BB66 DD 7E 02 -      ld  a,(ix+REGY)
 1042 D1:BB69 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
 1043 D1:BB6A ED 33 03 -      ADDCYC(3)
 1044 D1:BB6D C3 AC B3 D1     jp i6502NextLoad
 1045 D1:BB71 -  -  -  -  
 1046 D1:BB71 -  -  -  -  ;zeropage,X	STY oper,X	94	2	4  
 1047 D1:BB71 -  -  -  -  inst6502_sty_zpx:
 1048 D1:BB71 7E -  -  -      ld  a,(hl)
 1049 D1:BB72 01 00 38 D0     ld  bc,ZEROPAGE
 1050 D1:BB76 81 -  -  -      add a,c
 1051 D1:BB77 DD 86 01 -      add a,(ix+REGX)
 1052 D1:BB7A 4F -  -  -      ld  c,a
 1053 D1:BB7B DD 7E 02 -      ld  a,(ix+REGY)
 1054 D1:BB7E 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
 1055 D1:BB7F ED 33 04 -      ADDCYC(4)
 1056 D1:BB82 C3 AC B3 D1     jp i6502NextLoad
 1057 D1:BB86 -  -  -  -  
 1058 D1:BB86 -  -  -  -  ;absolute	STY oper	8C	3	4  
 1059 D1:BB86 -  -  -  -  inst6502_sty_abs:
 1060 D1:BB86 CD 21 B6 D1     call subroutine6502_abs_split_start
 1061 D1:BB8A E5 -  -  -      push hl
 1062 D1:BB8B 50 -  -  -          ld  d,b
 1063 D1:BB8C 79 -  -  -          ld  a,c
 1064 D1:BB8D 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1065 D1:BB8F ED 4C -  -          mlt bc
 1066 D1:BB91 21 00 40 D0         ld  hl,PAGETABLE
 1067 D1:BB95 09 -  -  -          add hl,bc
 1068 D1:BB96 ED 27 -  -          ld  hl,(hl)
 1069 D1:BB98 06 00 -  -          ld  b,0
 1070 D1:BB9A 4F -  -  -          ld  c,a
 1071 D1:BB9B 09 -  -  -          add hl,bc   ;full address
 1072 D1:BB9C DD 46 02 -          ld  b,(ix+REGY)
 1073 D1:BB9F 70 -  -  -          WRITE_ACCESS
 1074 D1:BBA0 ED 33 04 -          ADDCYC(4)
 1075 D1:BBA3 E1 -  -  -      pop hl
 1076 D1:BBA4 C3 AC B3 D1     jp i6502NextLoad
 1077 D1:BBA8 -  -  -  -  
 1078 D1:BBA8 -  -  -  -  ;-----------------------------------------------------------------------------
 1079 D1:BBA8 -  -  -  -  ;TAX - Transfer Accumulator to Index X [A -> X]
 1080 D1:BBA8 -  -  -  -  ;N	Z	C	I	D	V
 1081 D1:BBA8 -  -  -  -  ;+	+	-	-	-	-
 1082 D1:BBA8 -  -  -  -  ;implied	TAX	AA	1	2
 1083 D1:BBA8 -  -  -  -  inst6502_tax:
 1084 D1:BBA8 DD 7E 00 -      ld  a,(ix+REGA)
 1085 D1:BBAB DD 77 01 -      ld  (ix+REGX),a
 1086 D1:BBAE DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1087 D1:BBC2 ED 33 02 -      ADDCYC(2)
 1088 D1:BBC5 C3 C5 B3 D1     jp i6502FinishLoad
 1089 D1:BBC9 -  -  -  -  
 1090 D1:BBC9 -  -  -  -  ;TAY - Transfer Accumulator to Index Y [A -> Y]
 1091 D1:BBC9 -  -  -  -  ;N	Z	C	I	D	V
 1092 D1:BBC9 -  -  -  -  ;+	+	-	-	-	-
 1093 D1:BBC9 -  -  -  -  ;implied	TAY	A8	1	2
 1094 D1:BBC9 -  -  -  -  inst6502_tay:
 1095 D1:BBC9 DD 7E 00 -      ld  a,(ix+REGA)
 1096 D1:BBCC DD 77 02 -      ld  (ix+REGY),a
 1097 D1:BBCF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1098 D1:BBE3 ED 33 02 -      ADDCYC(2)
 1099 D1:BBE6 C3 C5 B3 D1     jp i6502FinishLoad
 1100 D1:BBEA -  -  -  -  
 1101 D1:BBEA -  -  -  -  ;TSX - Transfer Stack Pointer to Index X [SP -> X]
 1102 D1:BBEA -  -  -  -  ;N	Z	C	I	D	V
 1103 D1:BBEA -  -  -  -  ;+	+	-	-	-	-
 1104 D1:BBEA -  -  -  -  ;implied	TSX	BA	1	2
 1105 D1:BBEA -  -  -  -  inst6502_tsx:
 1106 D1:BBEA DD 7E 03 -      ld  a,(ix+REGSP)
 1107 D1:BBED DD 77 01 -      ld  (ix+REGX),a
 1108 D1:BBF0 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1109 D1:BC04 ED 33 02 -      ADDCYC(2)
 1110 D1:BC07 C3 C5 B3 D1     jp i6502FinishLoad
 1111 D1:BC0B -  -  -  -  
 1112 D1:BC0B -  -  -  -  ;TXA - Transfer Index X to Accumulator [X -> A]
 1113 D1:BC0B -  -  -  -  ;N	Z	C	I	D	V
 1114 D1:BC0B -  -  -  -  ;+	+	-	-	-	-
 1115 D1:BC0B -  -  -  -  ;implied	TXA	8A	1	2
 1116 D1:BC0B -  -  -  -  inst6502_txa:
 1117 D1:BC0B DD 7E 01 -      ld  a,(ix+REGX)
 1118 D1:BC0E DD 77 00 -      ld  (ix+REGA),a
 1119 D1:BC11 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1120 D1:BC25 ED 33 02 -      ADDCYC(2)
 1121 D1:BC28 C3 C5 B3 D1     jp i6502FinishLoad
 1122 D1:BC2C -  -  -  -  
 1123 D1:BC2C -  -  -  -  ;TXS - Transfer Index X to Stack Pointer [X -> SP]
 1124 D1:BC2C -  -  -  -  ;N	Z	C	I	D	V
 1125 D1:BC2C -  -  -  -  ;-	-	-	-	-	-
 1126 D1:BC2C -  -  -  -  ;implied	TXS	9A	1	2
 1127 D1:BC2C -  -  -  -  inst6502_txs:
 1128 D1:BC2C DD 7E 01 -      ld  a,(ix+REGX)
 1129 D1:BC2F DD 77 03 -      ld  (ix+REGSP),a
 1130 D1:BC32 ED 33 02 -      ADDCYC(2)
 1131 D1:BC35 C3 C5 B3 D1     jp i6502FinishLoad
 1132 D1:BC39 -  -  -  -  
 1133 D1:BC39 -  -  -  -  ;TYA - Transfer Index Y to Accumulator [Y -> A]
 1134 D1:BC39 -  -  -  -  ;N	Z	C	I	D	V
 1135 D1:BC39 -  -  -  -  ;+	+	-	-	-	-
 1136 D1:BC39 -  -  -  -  ;implied	TYA	98	1	2
 1137 D1:BC39 -  -  -  -  inst6502_tya:
 1138 D1:BC39 DD 7E 02 -      ld  a,(ix+REGY)
 1139 D1:BC3C DD 77 00 -      ld  (ix+REGA),a
 1140 D1:BC3F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1141 D1:BC53 ED 33 02 -      ADDCYC(2)
 1142 D1:BC56 C3 C5 B3 D1     jp i6502FinishLoad
 1143 D1:BC5A -  -  -  -  
 1144 D1:BC5A -  -  -  -  ;-----------------------------------------------------------------------------
 1145 D1:BC5A -  -  -  -  ;-----------------------------------------------------------------------------
 1146 D1:BC5A -  -  -  -  ;-----------------------------------------------------------------------------
 1147 D1:BC5A -  -  -  -  ;Instructions by type: Stack Instructions
 1148 D1:BC5A -  -  -  -  ;PHA - Push Accumulator on Stack
 1149 D1:BC5A -  -  -  -  ;    push A
 1150 D1:BC5A -  -  -  -  ;    N	Z	C	I	D	V
 1151 D1:BC5A -  -  -  -  ;    -	-	-	-	-	-
 1152 D1:BC5A -  -  -  -  ;implied	PHA	48	1	3 
 1153 D1:BC5A -  -  -  -  inst6502_pha:
 1154 D1:BC5A ED 33 03 -      ADDCYC(3)
 1155 D1:BC5D DD 7E 00 -      ld  a,(ix+REGA)
 1156 D1:BC60 01 00 39 D0     ld  bc,STACKBASE
 1157 D1:BC64 DD 4E 03 -      ld  c,(ix+REGSP)
 1158 D1:BC67 02 -  -  -      ld  (bc),a
 1159 D1:BC68 0D -  -  -      dec c
 1160 D1:BC69 DD 71 03 -      ld  (ix+REGSP),c
 1161 D1:BC6C C3 C5 B3 D1     jp i6502FinishLoad
 1162 D1:BC70 -  -  -  -  
 1163 D1:BC70 -  -  -  -  ;PHP - Push Processor Status on Stack
 1164 D1:BC70 -  -  -  -  ;    The status register will be pushed with the break
 1165 D1:BC70 -  -  -  -  ;    flag and bit 5 set to 1.
 1166 D1:BC70 -  -  -  -  ;    push SR
 1167 D1:BC70 -  -  -  -  ;    N	Z	C	I	D	V
 1168 D1:BC70 -  -  -  -  ;    -	-	-	-	-	-
 1169 D1:BC70 -  -  -  -  ;implied	PHP	08	1	3  
 1170 D1:BC70 -  -  -  -  inst6502_php:
 1171 D1:BC70 ED 33 03 -      ADDCYC(3)
 1172 D1:BC73 DD 7E 04 -      ld  a,(ix+REGSR)
 1173 D1:BC76 F6 30 -  -      or  a,%00110000
 1174 D1:BC78 01 00 39 D0     ld  bc,STACKBASE
 1175 D1:BC7C DD 4E 03 -      ld  c,(ix+REGSP)
 1176 D1:BC7F 02 -  -  -      ld  (bc),a
 1177 D1:BC80 0D -  -  -      dec c
 1178 D1:BC81 DD 71 03 -      ld  (ix+REGSP),c
 1179 D1:BC84 C3 C5 B3 D1     jp i6502FinishLoad
 1180 D1:BC88 -  -  -  -  
 1181 D1:BC88 -  -  -  -  
 1182 D1:BC88 -  -  -  -  
 1183 D1:BC88 -  -  -  -  ;PLA - Pull Accumulator from Stack
 1184 D1:BC88 -  -  -  -  ;    pull A
 1185 D1:BC88 -  -  -  -  ;    N	Z	C	I	D	V
 1186 D1:BC88 -  -  -  -  ;    +	+	-	-	-	-
 1187 D1:BC88 -  -  -  -  ;implied	PLA	68	1	4  
 1188 D1:BC88 -  -  -  -  inst6502_pla:
 1189 D1:BC88 ED 33 04 -      ADDCYC(4)
 1190 D1:BC8B 01 00 39 D0     ld  bc,STACKBASE
 1191 D1:BC8F DD 4E 03 -      ld  c,(ix+REGSP)
 1192 D1:BC92 0C -  -  -      inc c
 1193 D1:BC93 0A -  -  -      ld  a,(bc)
 1194 D1:BC94 DD 71 03 -      ld  (ix+REGSP),c
 1195 D1:BC97 DD 77 00 -      ld  (ix+REGA),a
 1196 D1:BC9A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1197 D1:BCAE C3 C5 B3 D1     jp i6502FinishLoad
 1198 D1:BCB2 -  -  -  -  
 1199 D1:BCB2 -  -  -  -  ;PLP - Pull Processor Status from Stack
 1200 D1:BCB2 -  -  -  -  ;    The status register will be pulled with the break
 1201 D1:BCB2 -  -  -  -  ;    flag and bit 5 ignored.
 1202 D1:BCB2 -  -  -  -  ;    pull SR
 1203 D1:BCB2 -  -  -  -  ;    N	Z	C	I	D	V
 1204 D1:BCB2 -  -  -  -  ;    from stack
 1205 D1:BCB2 -  -  -  -  ;implied	PLP	28	1	4  
 1206 D1:BCB2 -  -  -  -  inst6502_plp:
 1207 D1:BCB2 ED 33 04 -      ADDCYC(4)
 1208 D1:BCB5 01 00 39 D0     ld  bc,STACKBASE
 1209 D1:BCB9 DD 4E 03 -      ld  c,(ix+REGSP)
 1210 D1:BCBC 0C -  -  -      inc c
 1211 D1:BCBD 0A -  -  -      ld  a,(bc)
 1212 D1:BCBE DD 71 03 -      ld  (ix+REGSP),c
 1213 D1:BCC1 DD 46 04 -      ld  b,(ix+REGSR)
 1214 D1:BCC4 A8 -  -  -      xor a,b
 1215 D1:BCC5 E6 CF -  -      and a,%11001111
 1216 D1:BCC7 A8 -  -  -      xor a,b
 1217 D1:BCC8 DD 77 04 -      ld  (ix+REGSR),a
 1218 D1:BCCB C3 C5 B3 D1     jp i6502FinishLoad
 1219 D1:BCCF -  -  -  -  
 1220 D1:BCCF -  -  -  -  
 1221 D1:BCCF -  -  -  -  ;-----------------------------------------------------------------------------
 1222 D1:BCCF -  -  -  -  ;-----------------------------------------------------------------------------
 1223 D1:BCCF -  -  -  -  ;-----------------------------------------------------------------------------
 1224 D1:BCCF -  -  -  -  ;Instructions by type: Decrements and Increments
 1225 D1:BCCF -  -  -  -  
 1226 D1:BCCF -  -  -  -  ;DEC -  Decrement Memory by One
 1227 D1:BCCF -  -  -  -  ;    M - 1 -> M
 1228 D1:BCCF -  -  -  -  ;    N	Z	C	I	D	V
 1229 D1:BCCF -  -  -  -  ;    +	+	-	-	-	-
 1230 D1:BCCF -  -  -  -  ;    addressing	assembler	opc	bytes	cycles
 1231 D1:BCCF -  -  -  -  
 1232 D1:BCCF -  -  -  -  ;    zeropage	DEC oper	C6	2	5  
 1233 D1:BCCF -  -  -  -  inst6502_dec_zp:
 1234 D1:BCCF 7E -  -  -      ld  a,(hl)
 1235 D1:BCD0 01 00 38 D0     ld  bc,ZEROPAGE
 1236 D1:BCD4 81 -  -  -      add a,c
 1237 D1:BCD5 4F -  -  -      ld  c,a
 1238 D1:BCD6 0A -  -  -      ld  a,(bc)
 1239 D1:BCD7 3D -  -  -      dec a
 1240 D1:BCD8 02 -  -  -      ld  (bc),a
 1241 D1:BCD9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1242 D1:BCED ED 33 05 -      ADDCYC(5)
 1243 D1:BCF0 C3 AC B3 D1     jp i6502NextLoad
 1244 D1:BCF4 -  -  -  -  
 1245 D1:BCF4 -  -  -  -  ;    zeropage,X	DEC oper,X	D6	2	6  
 1246 D1:BCF4 -  -  -  -  inst6502_dec_zpx:
 1247 D1:BCF4 7E -  -  -      ld  a,(hl)
 1248 D1:BCF5 01 00 38 D0     ld  bc,ZEROPAGE
 1249 D1:BCF9 81 -  -  -      add a,c
 1250 D1:BCFA DD 86 01 -      add a,(ix+REGX)
 1251 D1:BCFD 4F -  -  -      ld  c,a
 1252 D1:BCFE 0A -  -  -      ld  a,(bc)
 1253 D1:BCFF 3D -  -  -      dec a
 1254 D1:BD00 02 -  -  -      ld  (bc),a
 1255 D1:BD01 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1256 D1:BD15 ED 33 06 -      ADDCYC(6)
 1257 D1:BD18 C3 AC B3 D1     jp i6502NextLoad
 1258 D1:BD1C -  -  -  -  
 1259 D1:BD1C -  -  -  -  ;    absolute	DEC oper	CE	3	6  
 1260 D1:BD1C -  -  -  -  inst6502_dec_abs:
 1261 D1:BD1C CD 21 B6 D1     call subroutine6502_abs_split_start
 1262 D1:BD20 E5 -  -  -      push hl
 1263 D1:BD21 50 -  -  -          ld  d,b
 1264 D1:BD22 79 -  -  -          ld  a,c
 1265 D1:BD23 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1266 D1:BD25 ED 4C -  -          mlt bc
 1267 D1:BD27 21 00 40 D0         ld  hl,PAGETABLE
 1268 D1:BD2B 09 -  -  -          add hl,bc
 1269 D1:BD2C ED 27 -  -          ld  hl,(hl)
 1270 D1:BD2E 06 00 -  -          ld  b,0
 1271 D1:BD30 4F -  -  -          ld  c,a
 1272 D1:BD31 09 -  -  -          add hl,bc   ;full address
 1273 D1:BD32 7E -  -  -          READ_ACCESS
 1274 D1:BD33 3D -  -  -          dec a
 1275 D1:BD34 47 -  -  -          ld  b,a
 1276 D1:BD35 -  -  -  -          ;
 1277 D1:BD35 DD 7E 04 -          ld  a,(ix+REGSR)
 1278 D1:BD38 CB 8F -  -          res SF_ZERO,a
 1279 D1:BD3A 20 02 -  -          jr  nz,$+4
 1280 D1:BD3C CB CF -  -          set SF_ZERO,a
 1281 D1:BD3E CB BF -  -          res SF_NEG,a
 1282 D1:BD40 F2 46 BD D1         jp  p,$+6
 1283 D1:BD44 CB FF -  -          set SF_NEG,a
 1284 D1:BD46 DD 77 04 -          ld  (ix+REGSR),a
 1285 D1:BD49 -  -  -  -          ;
 1286 D1:BD49 70 -  -  -          WRITE_ACCESS
 1287 D1:BD4A ED 33 06 -          ADDCYC(6)
 1288 D1:BD4D E1 -  -  -      pop hl
 1289 D1:BD4E C3 AC B3 D1     jp i6502NextLoad
 1290 D1:BD52 -  -  -  -  
 1291 D1:BD52 -  -  -  -  ;    absolute,X	DEC oper,X	DE	3	7  
 1292 D1:BD52 -  -  -  -  inst6502_dec_absx:
 1293 D1:BD52 ED 33 07 -      ADDCYC(7)
 1294 D1:BD55 CD 7E B6 D1     PUSH_ABSXSPLIT_NODEP
 1295 D1:BD59 7E -  -  -          READ_ACCESS
 1296 D1:BD5A 3D -  -  -          dec a
 1297 D1:BD5B 47 -  -  -          ld  b,a
 1298 D1:BD5C -  -  -  -          ;
 1299 D1:BD5C DD 7E 04 -          ld  a,(ix+REGSR)
 1300 D1:BD5F CB 8F -  -          res SF_ZERO,a
 1301 D1:BD61 20 02 -  -          jr  nz,$+4
 1302 D1:BD63 CB CF -  -          set SF_ZERO,a
 1303 D1:BD65 CB BF -  -          res SF_NEG,a
 1304 D1:BD67 F2 6D BD D1         jp  p,$+6
 1305 D1:BD6B CB FF -  -          set SF_NEG,a
 1306 D1:BD6D DD 77 04 -          ld  (ix+REGSR),a
 1307 D1:BD70 -  -  -  -          ;
 1308 D1:BD70 70 -  -  -          WRITE_ACCESS
 1309 D1:BD71 E1 -  -  -      pop hl
 1310 D1:BD72 C3 AC B3 D1     jp i6502NextLoad
 1311 D1:BD76 -  -  -  -  
 1312 D1:BD76 -  -  -  -  ;DEX - Decrement Index X by One [X - 1 -> X]
 1313 D1:BD76 -  -  -  -  ;Flags altered: NZ
 1314 D1:BD76 -  -  -  -  ;implied	DEX	CA	1	2  
 1315 D1:BD76 -  -  -  -  inst6502_dex:
 1316 D1:BD76 DD 35 01 -      dec (ix+REGX)
 1317 D1:BD79 DD 7E 04 -  _:  ld  a,(ix+REGSR)
 1318 D1:BD7C CB 8F -  -      res SF_ZERO,a
 1319 D1:BD7E 20 02 -  -      jr  nz,$+4
 1320 D1:BD80 CB CF -  -      set SF_ZERO,a
 1321 D1:BD82 CB BF -  -      res SF_NEG,a
 1322 D1:BD84 F2 8A BD D1     jp  p,$+6
 1323 D1:BD88 CB FF -  -      set SF_NEG,a
 1324 D1:BD8A DD 77 04 -      ld  (ix+REGSR),a
 1325 D1:BD8D ED 33 02 -      ADDCYC(2)
 1326 D1:BD90 C3 C5 B3 D1     jp i6502FinishLoad
 1327 D1:BD94 -  -  -  -  
 1328 D1:BD94 -  -  -  -  ;DEY - Decrement Index Y by One [Y - 1 -> Y]
 1329 D1:BD94 -  -  -  -  ;Flags altered: NZ
 1330 D1:BD94 -  -  -  -  ;implied	DEY	88	1	2  
 1331 D1:BD94 -  -  -  -  inst6502_dey:
 1332 D1:BD94 DD 35 02 -      dec (ix+REGY)
 1333 D1:BD97 18 E0 -  -      jr  -_
 1334 D1:BD99 -  -  -  -  
 1335 D1:BD99 -  -  -  -  
 1336 D1:BD99 -  -  -  -  ;INX - Increment Index X by One [X + 1 -> X]
 1337 D1:BD99 -  -  -  -  ;Flags altered: NZ
 1338 D1:BD99 -  -  -  -  ;implied	INX	E8	1	2  
 1339 D1:BD99 -  -  -  -  inst6502_inx:
 1340 D1:BD99 DD 34 01 -      inc (ix+REGX)
 1341 D1:BD9C 18 DB -  -      jr  -_
 1342 D1:BD9E -  -  -  -  
 1343 D1:BD9E -  -  -  -  
 1344 D1:BD9E -  -  -  -  ;INY - Increment Index Y by One [Y + 1 -> Y]
 1345 D1:BD9E -  -  -  -  ;Flags altered: NZ
 1346 D1:BD9E -  -  -  -  ;implied	INY	C8	1	2  
 1347 D1:BD9E -  -  -  -  inst6502_iny:
 1348 D1:BD9E DD 34 02 -      inc (ix+REGY)
 1349 D1:BDA1 18 D6 -  -      jr  -_
 1350 D1:BDA3 -  -  -  -  
 1351 D1:BDA3 -  -  -  -  
 1352 D1:BDA3 -  -  -  -  ;INC - Increment Memory by One
 1353 D1:BDA3 -  -  -  -  ;    M + 1 -> M
 1354 D1:BDA3 -  -  -  -  ;    N	Z	C	I	D	V
 1355 D1:BDA3 -  -  -  -  ;    +	+	-	-	-	-
 1356 D1:BDA3 -  -  -  -  
 1357 D1:BDA3 -  -  -  -  ;zeropage	INC oper	E6	2	5  
 1358 D1:BDA3 -  -  -  -  inst6502_inc_zp:
 1359 D1:BDA3 7E -  -  -      ld  a,(hl)
 1360 D1:BDA4 01 00 38 D0     ld  bc,ZEROPAGE
 1361 D1:BDA8 81 -  -  -      add a,c
 1362 D1:BDA9 4F -  -  -      ld  c,a
 1363 D1:BDAA 0A -  -  -      ld  a,(bc)
 1364 D1:BDAB 3C -  -  -      inc a
 1365 D1:BDAC 02 -  -  -      ld  (bc),a
 1366 D1:BDAD DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1367 D1:BDC1 ED 33 05 -      ADDCYC(5)
 1368 D1:BDC4 C3 AC B3 D1     jp i6502NextLoad
 1369 D1:BDC8 -  -  -  -  
 1370 D1:BDC8 -  -  -  -  ;zeropage,X	INC oper,X	F6	2	6  
 1371 D1:BDC8 -  -  -  -  inst6502_inc_zpx:
 1372 D1:BDC8 7E -  -  -      ld  a,(hl)
 1373 D1:BDC9 01 00 38 D0     ld  bc,ZEROPAGE
 1374 D1:BDCD 81 -  -  -      add a,c
 1375 D1:BDCE DD 86 01 -      add a,(ix+REGX)
 1376 D1:BDD1 4F -  -  -      ld  c,a
 1377 D1:BDD2 0A -  -  -      ld  a,(bc)
 1378 D1:BDD3 3C -  -  -      inc a
 1379 D1:BDD4 02 -  -  -      ld  (bc),a
 1380 D1:BDD5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1381 D1:BDE9 ED 33 06 -      ADDCYC(6)
 1382 D1:BDEC C3 AC B3 D1     jp i6502NextLoad
 1383 D1:BDF0 -  -  -  -      
 1384 D1:BDF0 -  -  -  -  ;absolute	INC oper	EE	3	6
 1385 D1:BDF0 -  -  -  -  inst6502_inc_abs:
 1386 D1:BDF0 CD 21 B6 D1     call subroutine6502_abs_split_start
 1387 D1:BDF4 E5 -  -  -      push hl
 1388 D1:BDF5 50 -  -  -          ld  d,b
 1389 D1:BDF6 79 -  -  -          ld  a,c
 1390 D1:BDF7 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1391 D1:BDF9 ED 4C -  -          mlt bc
 1392 D1:BDFB 21 00 40 D0         ld  hl,PAGETABLE
 1393 D1:BDFF 09 -  -  -          add hl,bc
 1394 D1:BE00 ED 27 -  -          ld  hl,(hl)
 1395 D1:BE02 06 00 -  -          ld  b,0
 1396 D1:BE04 4F -  -  -          ld  c,a
 1397 D1:BE05 09 -  -  -          add hl,bc   ;full address
 1398 D1:BE06 7E -  -  -          READ_ACCESS
 1399 D1:BE07 3C -  -  -          inc a
 1400 D1:BE08 47 -  -  -          ld  b,a
 1401 D1:BE09 -  -  -  -          ;
 1402 D1:BE09 DD 7E 04 -          ld  a,(ix+REGSR)
 1403 D1:BE0C CB 8F -  -          res SF_ZERO,a
 1404 D1:BE0E 20 02 -  -          jr  nz,$+4
 1405 D1:BE10 CB CF -  -          set SF_ZERO,a
 1406 D1:BE12 CB BF -  -          res SF_NEG,a
 1407 D1:BE14 F2 1A BE D1         jp  p,$+6
 1408 D1:BE18 CB FF -  -          set SF_NEG,a
 1409 D1:BE1A DD 77 04 -          ld  (ix+REGSR),a
 1410 D1:BE1D -  -  -  -          ;
 1411 D1:BE1D 70 -  -  -          WRITE_ACCESS
 1412 D1:BE1E ED 33 06 -          ADDCYC(6)
 1413 D1:BE21 E1 -  -  -      pop hl
 1414 D1:BE22 C3 AC B3 D1     jp i6502NextLoad
 1415 D1:BE26 -  -  -  -  
 1416 D1:BE26 -  -  -  -  ;absolute,X	INC oper,X	FE	3	7  
 1417 D1:BE26 -  -  -  -  inst6502_inc_absx:
 1418 D1:BE26 ED 33 07 -      ADDCYC(7)
 1419 D1:BE29 CD 7E B6 D1     PUSH_ABSXSPLIT_NODEP
 1420 D1:BE2D 7E -  -  -          READ_ACCESS
 1421 D1:BE2E 3C -  -  -          inc a
 1422 D1:BE2F 47 -  -  -          ld  b,a
 1423 D1:BE30 -  -  -  -          ;
 1424 D1:BE30 DD 7E 04 -          ld  a,(ix+REGSR)
 1425 D1:BE33 CB 8F -  -          res SF_ZERO,a
 1426 D1:BE35 20 02 -  -          jr  nz,$+4
 1427 D1:BE37 CB CF -  -          set SF_ZERO,a
 1428 D1:BE39 CB BF -  -          res SF_NEG,a
 1429 D1:BE3B F2 41 BE D1         jp  p,$+6
 1430 D1:BE3F CB FF -  -          set SF_NEG,a
 1431 D1:BE41 DD 77 04 -          ld  (ix+REGSR),a
 1432 D1:BE44 -  -  -  -          ;
 1433 D1:BE44 70 -  -  -          WRITE_ACCESS
 1434 D1:BE45 E1 -  -  -      pop hl
 1435 D1:BE46 C3 AC B3 D1     jp i6502NextLoad
 1436 D1:BE4A -  -  -  -  
 1437 D1:BE4A -  -  -  -  ;-----------------------------------------------------------------------------
 1438 D1:BE4A -  -  -  -  ;-----------------------------------------------------------------------------
 1439 D1:BE4A -  -  -  -  ;-----------------------------------------------------------------------------
 1440 D1:BE4A -  -  -  -  ;Instructions by type: Arithmetic Operations
 1441 D1:BE4A -  -  -  -  ;ADC - Add Memory to Accumulator with Carry  [A + M + C -> A, C]
 1442 D1:BE4A -  -  -  -  ;    N	Z	C	I	D	V
 1443 D1:BE4A -  -  -  -  ;    +	+	+	-	-	+
 1444 D1:BE4A -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1445 D1:BE4A -  -  -  -  
 1446 D1:BE4A -  -  -  -  ;immediate	ADC #oper	69	2	2  
 1447 D1:BE4A -  -  -  -  inst6502_adc_imm:
 1448 D1:BE4A ED 33 02 -      ADDCYC(2)
 1449 D1:BE4D 4E -  -  -      ld  c,(hl)
 1450 D1:BE4E C3 B3 B6 D1     jp  subroutine6502_adc_combined_end
 1451 D1:BE52 -  -  -  -      
 1452 D1:BE52 -  -  -  -  
 1453 D1:BE52 -  -  -  -  ;zeropage	ADC oper	65	2	3
 1454 D1:BE52 -  -  -  -  inst6502_adc_zp:
 1455 D1:BE52 ED 33 03 -      ADDCYC(3)
 1456 D1:BE55 7E -  -  -      ld  a,(hl)
 1457 D1:BE56 01 00 38 D0     ld  bc,ZEROPAGE
 1458 D1:BE5A 81 -  -  -      add a,c
 1459 D1:BE5B 4F -  -  -      ld  c,a
 1460 D1:BE5C 0A -  -  -      ld  a,(bc)
 1461 D1:BE5D 4F -  -  -      ld  c,a
 1462 D1:BE5E C3 B3 B6 D1     jp  subroutine6502_adc_combined_end
 1463 D1:BE62 -  -  -  -  
 1464 D1:BE62 -  -  -  -  ;zeropage,X	ADC oper,X	75	2	4  
 1465 D1:BE62 -  -  -  -  inst6502_adc_zpx:
 1466 D1:BE62 ED 33 04 -      ADDCYC(4)
 1467 D1:BE65 7E -  -  -      ld  a,(hl)
 1468 D1:BE66 DD 86 01 -      add a,(ix+REGX)
 1469 D1:BE69 01 00 38 D0     ld  bc,ZEROPAGE
 1470 D1:BE6D 81 -  -  -      add a,c
 1471 D1:BE6E 4F -  -  -      ld  c,a
 1472 D1:BE6F 0A -  -  -      ld  a,(bc)
 1473 D1:BE70 4F -  -  -      ld  c,a
 1474 D1:BE71 C3 B3 B6 D1     jp  subroutine6502_adc_combined_end
 1475 D1:BE75 -  -  -  -  
 1476 D1:BE75 -  -  -  -  ;absolute	ADC oper	6D	3	4  
 1477 D1:BE75 -  -  -  -  inst6502_adc_abs:
 1478 D1:BE75 ED 33 04 -      ADDCYC(4)
 1479 D1:BE78 CD 21 B6 D1     call subroutine6502_abs_split_start
 1480 D1:BE7C E5 -  -  -      push hl
 1481 D1:BE7D 50 -  -  -          ld  d,b
 1482 D1:BE7E 79 -  -  -          ld  a,c
 1483 D1:BE7F 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1484 D1:BE81 ED 4C -  -          mlt bc
 1485 D1:BE83 21 00 40 D0         ld  hl,PAGETABLE
 1486 D1:BE87 09 -  -  -          add hl,bc
 1487 D1:BE88 ED 27 -  -          ld  hl,(hl)
 1488 D1:BE8A 06 00 -  -          ld  b,0
 1489 D1:BE8C 4F -  -  -          ld  c,a
 1490 D1:BE8D 09 -  -  -          add hl,bc   ;full address
 1491 D1:BE8E 7E -  -  -          READ_ACCESS
 1492 D1:BE8F E1 -  -  -      pop hl
 1493 D1:BE90 4F -  -  -      ld  c,a
 1494 D1:BE91 C3 B3 B6 D1     jp  subroutine6502_adc_combined_end
 1495 D1:BE95 -  -  -  -  
 1496 D1:BE95 -  -  -  -  ;absolute,X	ADC oper,X	7D	3	4* 
 1497 D1:BE95 -  -  -  -  inst6502_adc_absx:
 1498 D1:BE95 ED 33 04 -      ADDCYC(4)
 1499 D1:BE98 CD 42 B6 D1     PUSH_ABSXSPLIT
 1500 D1:BE9C 7E -  -  -          READ_ACCESS
 1501 D1:BE9D E1 -  -  -      pop hl
 1502 D1:BE9E 4F -  -  -      ld  c,a
 1503 D1:BE9F C3 B3 B6 D1     jp  subroutine6502_adc_combined_end
 1504 D1:BEA3 -  -  -  -  
 1505 D1:BEA3 -  -  -  -  ;absolute,Y	ADC oper,Y	79	3	4*
 1506 D1:BEA3 -  -  -  -  inst6502_adc_absy:
 1507 D1:BEA3 ED 33 04 -      ADDCYC(4)
 1508 D1:BEA6 CD 3D B6 D1     PUSH_ABSYSPLIT
 1509 D1:BEAA 7E -  -  -          READ_ACCESS
 1510 D1:BEAB E1 -  -  -      pop hl
 1511 D1:BEAC 4F -  -  -      ld  c,a
 1512 D1:BEAD C3 B3 B6 D1     jp  subroutine6502_adc_combined_end
 1513 D1:BEB1 -  -  -  -  
 1514 D1:BEB1 -  -  -  -  ;(indirect,X)	ADC (oper,X)	61	2	6  
 1515 D1:BEB1 -  -  -  -  inst6502_adc_indx:
 1516 D1:BEB1 ED 33 06 -      ADDCYC(6)
 1517 D1:BEB4 E5 -  -  -      push hl
 1518 D1:BEB5 7E -  -  -          ld  a,(hl)
 1519 D1:BEB6 21 00 38 D0         ld  hl,ZEROPAGE
 1520 D1:BEBA 85 -  -  -          add a,L
 1521 D1:BEBB DD 86 01 -          add a,(ix+REGX)
 1522 D1:BEBE 6F -  -  -          ld  L,a
 1523 D1:BEBF 7E -  -  -          ld  a,(hl)
 1524 D1:BEC0 2C -  -  -          inc L
 1525 D1:BEC1 56 -  -  -          ld  d,(hl)
 1526 D1:BEC2 42 -  -  -          ld  b,d
 1527 D1:BEC3 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1528 D1:BEC5 ED 4C -  -          mlt bc
 1529 D1:BEC7 21 00 40 D0         ld  hl,PAGETABLE
 1530 D1:BECB 09 -  -  -          add hl,bc
 1531 D1:BECC ED 27 -  -          ld  hl,(hl)
 1532 D1:BECE 06 00 -  -          ld  b,0
 1533 D1:BED0 4F -  -  -          ld  c,a
 1534 D1:BED1 09 -  -  -          add hl,bc
 1535 D1:BED2 7E -  -  -          READ_ACCESS
 1536 D1:BED3 E1 -  -  -      pop hl
 1537 D1:BED4 4F -  -  -      ld  c,a
 1538 D1:BED5 C3 B3 B6 D1     jp  subroutine6502_adc_combined_end
 1539 D1:BED9 -  -  -  -  
 1540 D1:BED9 -  -  -  -  ;(indirect),Y	ADC (oper),Y	71	2	5* 
 1541 D1:BED9 -  -  -  -  inst6502_adc_indy:
 1542 D1:BED9 ED 33 05 -      ADDCYC(5)
 1543 D1:BEDC E5 -  -  -      push hl
 1544 D1:BEDD 7E -  -  -          ld  a,(hl)
 1545 D1:BEDE 21 00 38 D0         ld  hl,ZEROPAGE
 1546 D1:BEE2 85 -  -  -          add a,L
 1547 D1:BEE3 6F -  -  -          ld  L,a
 1548 D1:BEE4 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1549 D1:BEE5 2C -  -  -          inc L
 1550 D1:BEE6 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1551 D1:BEE9 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1552 D1:BEEA 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1553 D1:BEEC FD 23 -  -          ADDCYC(1)
 1554 D1:BEEE 24 -  -  -          inc h
 1555 D1:BEEF 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1556 D1:BEF0 2E 08 -  -          ld  L,BASETABLE_STRIDE
 1557 D1:BEF2 ED 6C -  -          mlt hl          ;23.
 1558 D1:BEF4 01 00 40 D0         ld  bc,PAGETABLE
 1559 D1:BEF8 09 -  -  -          add hl,bc
 1560 D1:BEF9 ED 27 -  -          ld  hl,(hl)     ;address get.
 1561 D1:BEFB 01 00 00 00         ld  bc,0
 1562 D1:BEFF 4F -  -  -          ld  c,a
 1563 D1:BF00 09 -  -  -          add hl,bc       ;Full address get.
 1564 D1:BF01 7E -  -  -          READ_ACCESS
 1565 D1:BF02 E1 -  -  -      pop hl
 1566 D1:BF03 4F -  -  -      ld  c,a
 1567 D1:BF04 C3 B3 B6 D1     jp  subroutine6502_adc_combined_end
 1568 D1:BF08 -  -  -  -  
 1569 D1:BF08 -  -  -  -  
 1570 D1:BF08 -  -  -  -  ;SBC - Subtract Memory from Accumulator with Borrow
 1571 D1:BF08 -  -  -  -  ;A - M - C̅ -> A
 1572 D1:BF08 -  -  -  -  ;N	Z	C	I	D	V
 1573 D1:BF08 -  -  -  -  ;+	+	+	-	-	+
 1574 D1:BF08 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1575 D1:BF08 -  -  -  -  
 1576 D1:BF08 -  -  -  -  ;immediate	SBC #oper	E9	2	2  
 1577 D1:BF08 -  -  -  -  inst6502_sbc_imm:
 1578 D1:BF08 ED 33 02 -      ADDCYC(2)
 1579 D1:BF0B 4E -  -  -      ld  c,(hl)
 1580 D1:BF0C C3 E4 B6 D1     jp  subroutine6502_sbc_combined_end
 1581 D1:BF10 -  -  -  -  
 1582 D1:BF10 -  -  -  -  ;zeropage	SBC oper	E5	2	3  
 1583 D1:BF10 -  -  -  -  inst6502_sbc_zp:
 1584 D1:BF10 ED 33 03 -      ADDCYC(3)
 1585 D1:BF13 7E -  -  -      ld  a,(hl)
 1586 D1:BF14 01 00 38 D0     ld  bc,ZEROPAGE
 1587 D1:BF18 81 -  -  -      add a,c
 1588 D1:BF19 4F -  -  -      ld  c,a
 1589 D1:BF1A 0A -  -  -      ld  a,(bc)
 1590 D1:BF1B 4F -  -  -      ld  c,a
 1591 D1:BF1C C3 E4 B6 D1     jp  subroutine6502_sbc_combined_end
 1592 D1:BF20 -  -  -  -  
 1593 D1:BF20 -  -  -  -  ;zeropage,X	SBC oper,X	F5	2	4  
 1594 D1:BF20 -  -  -  -  inst6502_sbc_zpx:
 1595 D1:BF20 ED 33 04 -      ADDCYC(4)
 1596 D1:BF23 7E -  -  -      ld  a,(hl)
 1597 D1:BF24 DD 86 01 -      add a,(ix+REGX)
 1598 D1:BF27 01 00 38 D0     ld  bc,ZEROPAGE
 1599 D1:BF2B 81 -  -  -      add a,c
 1600 D1:BF2C 4F -  -  -      ld  c,a
 1601 D1:BF2D 0A -  -  -      ld  a,(bc)
 1602 D1:BF2E 4F -  -  -      ld  c,a
 1603 D1:BF2F C3 E4 B6 D1     jp  subroutine6502_sbc_combined_end
 1604 D1:BF33 -  -  -  -  
 1605 D1:BF33 -  -  -  -  ;absolute	SBC oper	ED	3	4  
 1606 D1:BF33 -  -  -  -  inst6502_sbc_abs:
 1607 D1:BF33 ED 33 04 -      ADDCYC(4)
 1608 D1:BF36 CD 21 B6 D1     call subroutine6502_abs_split_start
 1609 D1:BF3A E5 -  -  -      push hl
 1610 D1:BF3B 50 -  -  -          ld  d,b
 1611 D1:BF3C 79 -  -  -          ld  a,c
 1612 D1:BF3D 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1613 D1:BF3F ED 4C -  -          mlt bc
 1614 D1:BF41 21 00 40 D0         ld  hl,PAGETABLE
 1615 D1:BF45 09 -  -  -          add hl,bc
 1616 D1:BF46 ED 27 -  -          ld  hl,(hl)
 1617 D1:BF48 06 00 -  -          ld  b,0
 1618 D1:BF4A 4F -  -  -          ld  c,a
 1619 D1:BF4B 09 -  -  -          add hl,bc   ;full address
 1620 D1:BF4C 7E -  -  -          READ_ACCESS
 1621 D1:BF4D E1 -  -  -      pop hl
 1622 D1:BF4E 4F -  -  -      ld  c,a
 1623 D1:BF4F C3 E4 B6 D1     jp  subroutine6502_sbc_combined_end
 1624 D1:BF53 -  -  -  -  
 1625 D1:BF53 -  -  -  -  ;absolute,X	SBC oper,X	FD	3	4* 
 1626 D1:BF53 -  -  -  -  inst6502_sbc_absx:
 1627 D1:BF53 ED 33 04 -      ADDCYC(4)
 1628 D1:BF56 CD 42 B6 D1     PUSH_ABSXSPLIT
 1629 D1:BF5A 7E -  -  -          READ_ACCESS
 1630 D1:BF5B E1 -  -  -      pop hl
 1631 D1:BF5C 4F -  -  -      ld  c,a
 1632 D1:BF5D C3 E4 B6 D1     jp  subroutine6502_sbc_combined_end
 1633 D1:BF61 -  -  -  -  
 1634 D1:BF61 -  -  -  -  ;absolute,Y	SBC oper,Y	F9	3	4* 
 1635 D1:BF61 -  -  -  -  inst6502_sbc_absy:
 1636 D1:BF61 ED 33 04 -      ADDCYC(4)
 1637 D1:BF64 CD 3D B6 D1     PUSH_ABSYSPLIT
 1638 D1:BF68 7E -  -  -          READ_ACCESS
 1639 D1:BF69 E1 -  -  -      pop hl
 1640 D1:BF6A 4F -  -  -      ld  c,a
 1641 D1:BF6B C3 E4 B6 D1     jp  subroutine6502_sbc_combined_end
 1642 D1:BF6F -  -  -  -  
 1643 D1:BF6F -  -  -  -  ;(indirect,X)	SBC (oper,X)	E1	2	6  
 1644 D1:BF6F -  -  -  -  inst6502_sbc_indx:
 1645 D1:BF6F ED 33 06 -      ADDCYC(6)
 1646 D1:BF72 E5 -  -  -      push hl
 1647 D1:BF73 7E -  -  -          ld  a,(hl)
 1648 D1:BF74 21 00 38 D0         ld  hl,ZEROPAGE
 1649 D1:BF78 85 -  -  -          add a,L
 1650 D1:BF79 DD 86 01 -          add a,(ix+REGX)
 1651 D1:BF7C 6F -  -  -          ld  L,a
 1652 D1:BF7D 7E -  -  -          ld  a,(hl)
 1653 D1:BF7E 2C -  -  -          inc L
 1654 D1:BF7F 56 -  -  -          ld  d,(hl)
 1655 D1:BF80 42 -  -  -          ld  b,d
 1656 D1:BF81 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1657 D1:BF83 ED 4C -  -          mlt bc
 1658 D1:BF85 21 00 40 D0         ld  hl,PAGETABLE
 1659 D1:BF89 09 -  -  -          add hl,bc
 1660 D1:BF8A ED 27 -  -          ld  hl,(hl)
 1661 D1:BF8C 06 00 -  -          ld  b,0
 1662 D1:BF8E 4F -  -  -          ld  c,a
 1663 D1:BF8F 09 -  -  -          add hl,bc
 1664 D1:BF90 7E -  -  -          READ_ACCESS
 1665 D1:BF91 E1 -  -  -      pop hl
 1666 D1:BF92 4F -  -  -      ld  c,a
 1667 D1:BF93 C3 E4 B6 D1     jp  subroutine6502_sbc_combined_end
 1668 D1:BF97 -  -  -  -  
 1669 D1:BF97 -  -  -  -  ;(indirect),Y	SBC (oper),Y	F1	2	5* 
 1670 D1:BF97 -  -  -  -  inst6502_sbc_indy:
 1671 D1:BF97 ED 33 05 -      ADDCYC(5)
 1672 D1:BF9A E5 -  -  -      push hl
 1673 D1:BF9B 7E -  -  -          ld  a,(hl)
 1674 D1:BF9C 21 00 38 D0         ld  hl,ZEROPAGE
 1675 D1:BFA0 85 -  -  -          add a,L
 1676 D1:BFA1 6F -  -  -          ld  L,a
 1677 D1:BFA2 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1678 D1:BFA3 2C -  -  -          inc L
 1679 D1:BFA4 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1680 D1:BFA7 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1681 D1:BFA8 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1682 D1:BFAA FD 23 -  -          ADDCYC(1)
 1683 D1:BFAC 24 -  -  -          inc h
 1684 D1:BFAD 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1685 D1:BFAE 2E 08 -  -          ld  L,BASETABLE_STRIDE
 1686 D1:BFB0 ED 6C -  -          mlt hl          ;23.
 1687 D1:BFB2 01 00 40 D0         ld  bc,PAGETABLE
 1688 D1:BFB6 09 -  -  -          add hl,bc
 1689 D1:BFB7 ED 27 -  -          ld  hl,(hl)     ;address get.
 1690 D1:BFB9 01 00 00 00         ld  bc,0
 1691 D1:BFBD 4F -  -  -          ld  c,a
 1692 D1:BFBE 09 -  -  -          add hl,bc       ;Full address get.
 1693 D1:BFBF 7E -  -  -          READ_ACCESS
 1694 D1:BFC0 E1 -  -  -      pop hl
 1695 D1:BFC1 4F -  -  -      ld  c,a
 1696 D1:BFC2 C3 E4 B6 D1     jp  subroutine6502_sbc_combined_end
 1697 D1:BFC6 -  -  -  -  
 1698 D1:BFC6 -  -  -  -  
 1699 D1:BFC6 -  -  -  -  
 1700 D1:BFC6 -  -  -  -  ;-----------------------------------------------------------------------------
 1701 D1:BFC6 -  -  -  -  ;-----------------------------------------------------------------------------
 1702 D1:BFC6 -  -  -  -  ;-----------------------------------------------------------------------------
 1703 D1:BFC6 -  -  -  -  ;Instructions by type: Logical Operations
 1704 D1:BFC6 -  -  -  -  
 1705 D1:BFC6 -  -  -  -  ;AND - AND Memory with Accumulator
 1706 D1:BFC6 -  -  -  -  ;A AND M -> A
 1707 D1:BFC6 -  -  -  -  ;N	Z	C	I	D	V
 1708 D1:BFC6 -  -  -  -  ;+	+	-	-	-	-
 1709 D1:BFC6 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1710 D1:BFC6 -  -  -  -  
 1711 D1:BFC6 -  -  -  -  ;immediate	AND #oper	29	2	2  
 1712 D1:BFC6 -  -  -  -  inst6502_and_imm:
 1713 D1:BFC6 ED 33 02 -      ADDCYC(2)
 1714 D1:BFC9 7E -  -  -      ld  a,(hl)
 1715 D1:BFCA DD A6 00 -      and a,(ix+REGA)
 1716 D1:BFCD DD 77 00 -      ld  (ix+REGA),A
 1717 D1:BFD0 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1718 D1:BFE4 C3 AC B3 D1     jp i6502NextLoad
 1719 D1:BFE8 -  -  -  -  
 1720 D1:BFE8 -  -  -  -  ;zeropage	AND oper	25	2	3  
 1721 D1:BFE8 -  -  -  -  inst6502_and_zp:
 1722 D1:BFE8 ED 33 03 -      ADDCYC(3)
 1723 D1:BFEB 7E -  -  -      ld  a,(hl)
 1724 D1:BFEC 01 00 38 D0     ld  bc,ZEROPAGE
 1725 D1:BFF0 81 -  -  -      add a,c
 1726 D1:BFF1 4F -  -  -      ld  c,a
 1727 D1:BFF2 0A -  -  -      ld  a,(bc)
 1728 D1:BFF3 DD A6 00 -      and a,(ix+REGA)
 1729 D1:BFF6 DD 77 00 -      ld  (ix+REGA),A
 1730 D1:BFF9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1731 D1:C00D C3 AC B3 D1     jp i6502NextLoad
 1732 D1:C011 -  -  -  -  
 1733 D1:C011 -  -  -  -  ;zeropage,X	AND oper,X	35	2	4  
 1734 D1:C011 -  -  -  -  inst6502_and_zpx:
 1735 D1:C011 ED 33 04 -      ADDCYC(4)
 1736 D1:C014 7E -  -  -      ld  a,(hl)
 1737 D1:C015 01 00 38 D0     ld  bc,ZEROPAGE
 1738 D1:C019 81 -  -  -      add a,c
 1739 D1:C01A DD 86 01 -      add a,(ix+REGX)
 1740 D1:C01D 4F -  -  -      ld  c,a
 1741 D1:C01E 0A -  -  -      ld  a,(bc)
 1742 D1:C01F DD A6 00 -      and a,(ix+REGA)
 1743 D1:C022 DD 77 00 -      ld  (ix+REGA),A
 1744 D1:C025 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1745 D1:C039 C3 AC B3 D1     jp i6502NextLoad
 1746 D1:C03D -  -  -  -  
 1747 D1:C03D -  -  -  -  ;absolute	AND oper	2D	3	4  
 1748 D1:C03D -  -  -  -  inst6502_and_abs:
 1749 D1:C03D ED 33 04 -      ADDCYC(4)
 1750 D1:C040 CD 21 B6 D1     call subroutine6502_abs_split_start
 1751 D1:C044 E5 -  -  -      push hl
 1752 D1:C045 50 -  -  -          ld  d,b
 1753 D1:C046 79 -  -  -          ld  a,c
 1754 D1:C047 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1755 D1:C049 ED 4C -  -          mlt bc
 1756 D1:C04B 21 00 40 D0         ld  hl,PAGETABLE
 1757 D1:C04F 09 -  -  -          add hl,bc
 1758 D1:C050 ED 27 -  -          ld  hl,(hl)
 1759 D1:C052 06 00 -  -          ld  b,0
 1760 D1:C054 4F -  -  -          ld  c,a
 1761 D1:C055 09 -  -  -          add hl,bc   ;full address
 1762 D1:C056 7E -  -  -          READ_ACCESS
 1763 D1:C057 E1 -  -  -      pop hl
 1764 D1:C058 DD A6 00 -      and a,(ix+REGA)
 1765 D1:C05B DD 77 00 -      ld  (ix+REGA),A
 1766 D1:C05E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1767 D1:C072 C3 AC B3 D1     jp i6502NextLoad
 1768 D1:C076 -  -  -  -  
 1769 D1:C076 -  -  -  -  ;absolute,X	AND oper,X	3D	3	4* 
 1770 D1:C076 -  -  -  -  inst6502_and_absx:
 1771 D1:C076 ED 33 04 -      ADDCYC(4)
 1772 D1:C079 CD 42 B6 D1     PUSH_ABSXSPLIT
 1773 D1:C07D 7E -  -  -          READ_ACCESS
 1774 D1:C07E DD A6 00 -          and a,(ix+REGA)
 1775 D1:C081 DD 77 00 -          ld  (ix+REGA),A
 1776 D1:C084 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1777 D1:C098 E1 -  -  -      pop hl
 1778 D1:C099 C3 AC B3 D1     jp i6502NextLoad
 1779 D1:C09D -  -  -  -  
 1780 D1:C09D -  -  -  -  ;absolute,Y	AND oper,Y	39	3	4* 
 1781 D1:C09D -  -  -  -  inst6502_and_absy:
 1782 D1:C09D ED 33 04 -      ADDCYC(4)
 1783 D1:C0A0 CD 3D B6 D1     PUSH_ABSYSPLIT
 1784 D1:C0A4 7E -  -  -          READ_ACCESS
 1785 D1:C0A5 E1 -  -  -      pop hl
 1786 D1:C0A6 DD A6 00 -      and a,(ix+REGA)
 1787 D1:C0A9 DD 77 00 -      ld  (ix+REGA),A
 1788 D1:C0AC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1789 D1:C0C0 C3 AC B3 D1     jp i6502NextLoad
 1790 D1:C0C4 -  -  -  -  
 1791 D1:C0C4 -  -  -  -  ;(indirect,X)	AND (oper,X)	21	2	6  
 1792 D1:C0C4 -  -  -  -  inst6502_and_indx:
 1793 D1:C0C4 ED 33 06 -      ADDCYC(6)
 1794 D1:C0C7 E5 -  -  -      push hl
 1795 D1:C0C8 7E -  -  -          ld  a,(hl)
 1796 D1:C0C9 21 00 38 D0         ld  hl,ZEROPAGE
 1797 D1:C0CD 85 -  -  -          add a,L
 1798 D1:C0CE DD 86 01 -          add a,(ix+REGX)
 1799 D1:C0D1 6F -  -  -          ld  L,a
 1800 D1:C0D2 7E -  -  -          ld  a,(hl)
 1801 D1:C0D3 2C -  -  -          inc L
 1802 D1:C0D4 56 -  -  -          ld  d,(hl)
 1803 D1:C0D5 42 -  -  -          ld  b,d
 1804 D1:C0D6 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1805 D1:C0D8 ED 4C -  -          mlt bc
 1806 D1:C0DA 21 00 40 D0         ld  hl,PAGETABLE
 1807 D1:C0DE 09 -  -  -          add hl,bc
 1808 D1:C0DF ED 27 -  -          ld  hl,(hl)
 1809 D1:C0E1 06 00 -  -          ld  b,0
 1810 D1:C0E3 4F -  -  -          ld  c,a
 1811 D1:C0E4 09 -  -  -          add hl,bc
 1812 D1:C0E5 7E -  -  -          READ_ACCESS
 1813 D1:C0E6 E1 -  -  -      pop hl
 1814 D1:C0E7 DD A6 00 -      and a,(ix+REGA)
 1815 D1:C0EA DD 77 00 -      ld  (ix+REGA),A
 1816 D1:C0ED DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1817 D1:C101 C3 AC B3 D1     jp i6502NextLoad
 1818 D1:C105 -  -  -  -  
 1819 D1:C105 -  -  -  -  ;(indirect),Y	AND (oper),Y	31	2	5* 
 1820 D1:C105 -  -  -  -  inst6502_and_indy:
 1821 D1:C105 ED 33 05 -      ADDCYC(5)
 1822 D1:C108 E5 -  -  -      push hl
 1823 D1:C109 7E -  -  -          ld  a,(hl)
 1824 D1:C10A 21 00 38 D0         ld  hl,ZEROPAGE
 1825 D1:C10E 85 -  -  -          add a,L
 1826 D1:C10F 6F -  -  -          ld  L,a
 1827 D1:C110 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1828 D1:C111 2C -  -  -          inc L
 1829 D1:C112 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1830 D1:C115 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1831 D1:C116 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1832 D1:C118 24 -  -  -          inc h
 1833 D1:C119 FD 23 -  -          ADDCYC(1)
 1834 D1:C11B 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1835 D1:C11C 2E 08 -  -          ld  L,BASETABLE_STRIDE
 1836 D1:C11E ED 6C -  -          mlt hl          ;23.
 1837 D1:C120 01 00 40 D0         ld  bc,PAGETABLE
 1838 D1:C124 09 -  -  -          add hl,bc
 1839 D1:C125 ED 27 -  -          ld  hl,(hl)     ;address get.
 1840 D1:C127 01 00 00 00         ld  bc,0
 1841 D1:C12B 4F -  -  -          ld  c,a
 1842 D1:C12C 09 -  -  -          add hl,bc       ;Full address get.
 1843 D1:C12D 7E -  -  -          READ_ACCESS
 1844 D1:C12E E1 -  -  -      pop hl
 1845 D1:C12F DD A6 00 -      and a,(ix+REGA)
 1846 D1:C132 DD 77 00 -      ld  (ix+REGA),A
 1847 D1:C135 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1848 D1:C149 C3 AC B3 D1     jp i6502NextLoad
 1849 D1:C14D -  -  -  -  
 1850 D1:C14D -  -  -  -  ;-----------------------------------------------------------------------------
 1851 D1:C14D -  -  -  -  ;EOR - Exclusive-OR Memory with Accumulator
 1852 D1:C14D -  -  -  -  ;A EOR M -> A
 1853 D1:C14D -  -  -  -  ;N	Z	C	I	D	V
 1854 D1:C14D -  -  -  -  ;+	+	-	-	-	-
 1855 D1:C14D -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1856 D1:C14D -  -  -  -  
 1857 D1:C14D -  -  -  -  ;immediate	EOR #oper	49	2	2  
 1858 D1:C14D -  -  -  -  inst6502_eor_imm:
 1859 D1:C14D ED 33 02 -      ADDCYC(2)
 1860 D1:C150 7E -  -  -      ld  a,(hl)
 1861 D1:C151 DD AE 00 -      xor a,(ix+REGA)
 1862 D1:C154 DD 77 00 -      ld  (ix+REGA),A
 1863 D1:C157 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1864 D1:C16B C3 AC B3 D1     jp i6502NextLoad
 1865 D1:C16F -  -  -  -  
 1866 D1:C16F -  -  -  -  ;zeropage	EOR oper	45	2	3  
 1867 D1:C16F -  -  -  -  inst6502_eor_zp:
 1868 D1:C16F ED 33 03 -      ADDCYC(3)
 1869 D1:C172 7E -  -  -      ld  a,(hl)
 1870 D1:C173 01 00 38 D0     ld  bc,ZEROPAGE
 1871 D1:C177 81 -  -  -      add a,c
 1872 D1:C178 4F -  -  -      ld  c,a
 1873 D1:C179 0A -  -  -      ld  a,(bc)
 1874 D1:C17A DD AE 00 -      xor a,(ix+REGA)
 1875 D1:C17D DD 77 00 -      ld  (ix+REGA),A
 1876 D1:C180 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1877 D1:C194 C3 AC B3 D1     jp i6502NextLoad
 1878 D1:C198 -  -  -  -  
 1879 D1:C198 -  -  -  -  
 1880 D1:C198 -  -  -  -  ;zeropage,X	EOR oper,X	55	2	4  
 1881 D1:C198 -  -  -  -  inst6502_eor_zpx:
 1882 D1:C198 ED 33 04 -      ADDCYC(4)
 1883 D1:C19B 7E -  -  -      ld  a,(hl)
 1884 D1:C19C 01 00 38 D0     ld  bc,ZEROPAGE
 1885 D1:C1A0 81 -  -  -      add a,c
 1886 D1:C1A1 DD 86 01 -      add a,(ix+REGX)
 1887 D1:C1A4 4F -  -  -      ld  c,a
 1888 D1:C1A5 0A -  -  -      ld  a,(bc)
 1889 D1:C1A6 DD AE 00 -      xor a,(ix+REGA)
 1890 D1:C1A9 DD 77 00 -      ld  (ix+REGA),A
 1891 D1:C1AC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1892 D1:C1C0 C3 AC B3 D1     jp i6502NextLoad
 1893 D1:C1C4 -  -  -  -  
 1894 D1:C1C4 -  -  -  -  ;absolute	EOR oper	4D	3	4  
 1895 D1:C1C4 -  -  -  -  inst6502_eor_abs:
 1896 D1:C1C4 ED 33 04 -      ADDCYC(4)
 1897 D1:C1C7 CD 21 B6 D1     call subroutine6502_abs_split_start
 1898 D1:C1CB E5 -  -  -      push hl
 1899 D1:C1CC 50 -  -  -          ld  d,b
 1900 D1:C1CD 79 -  -  -          ld  a,c
 1901 D1:C1CE 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1902 D1:C1D0 ED 4C -  -          mlt bc
 1903 D1:C1D2 21 00 40 D0         ld  hl,PAGETABLE
 1904 D1:C1D6 09 -  -  -          add hl,bc
 1905 D1:C1D7 ED 27 -  -          ld  hl,(hl)
 1906 D1:C1D9 06 00 -  -          ld  b,0
 1907 D1:C1DB 4F -  -  -          ld  c,a
 1908 D1:C1DC 09 -  -  -          add hl,bc   ;full address
 1909 D1:C1DD 7E -  -  -          READ_ACCESS
 1910 D1:C1DE E1 -  -  -      pop hl
 1911 D1:C1DF DD AE 00 -      xor a,(ix+REGA)
 1912 D1:C1E2 DD 77 00 -      ld  (ix+REGA),A
 1913 D1:C1E5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1914 D1:C1F9 C3 AC B3 D1     jp i6502NextLoad
 1915 D1:C1FD -  -  -  -  
 1916 D1:C1FD -  -  -  -  ;absolute,X	EOR oper,X	5D	3	4* 
 1917 D1:C1FD -  -  -  -  inst6502_eor_absx:
 1918 D1:C1FD ED 33 04 -      ADDCYC(4)
 1919 D1:C200 CD 42 B6 D1     PUSH_ABSXSPLIT
 1920 D1:C204 7E -  -  -          READ_ACCESS
 1921 D1:C205 DD AE 00 -          xor a,(ix+REGA)
 1922 D1:C208 DD 77 00 -          ld  (ix+REGA),A
 1923 D1:C20B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1924 D1:C21F E1 -  -  -      pop hl
 1925 D1:C220 C3 AC B3 D1     jp i6502NextLoad
 1926 D1:C224 -  -  -  -  
 1927 D1:C224 -  -  -  -  ;absolute,Y	EOR oper,Y	59	3	4* 
 1928 D1:C224 -  -  -  -  inst6502_eor_absy:
 1929 D1:C224 ED 33 04 -      ADDCYC(4)
 1930 D1:C227 CD 3D B6 D1     PUSH_ABSYSPLIT
 1931 D1:C22B 7E -  -  -          READ_ACCESS
 1932 D1:C22C E1 -  -  -      pop hl
 1933 D1:C22D DD AE 00 -      xor a,(ix+REGA)
 1934 D1:C230 DD 77 00 -      ld  (ix+REGA),A
 1935 D1:C233 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1936 D1:C247 C3 AC B3 D1     jp i6502NextLoad
 1937 D1:C24B -  -  -  -  
 1938 D1:C24B -  -  -  -  ;(indirect,X)	EOR (oper,X)	41	2	6  
 1939 D1:C24B -  -  -  -  inst6502_eor_indx:
 1940 D1:C24B ED 33 06 -      ADDCYC(6)
 1941 D1:C24E E5 -  -  -      push hl
 1942 D1:C24F 7E -  -  -          ld  a,(hl)
 1943 D1:C250 21 00 38 D0         ld  hl,ZEROPAGE
 1944 D1:C254 85 -  -  -          add a,L
 1945 D1:C255 DD 86 01 -          add a,(ix+REGX)
 1946 D1:C258 6F -  -  -          ld  L,a
 1947 D1:C259 7E -  -  -          ld  a,(hl)
 1948 D1:C25A 2C -  -  -          inc L
 1949 D1:C25B 56 -  -  -          ld  d,(hl)
 1950 D1:C25C 42 -  -  -          ld  b,d
 1951 D1:C25D 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1952 D1:C25F ED 4C -  -          mlt bc
 1953 D1:C261 21 00 40 D0         ld  hl,PAGETABLE
 1954 D1:C265 09 -  -  -          add hl,bc
 1955 D1:C266 ED 27 -  -          ld  hl,(hl)
 1956 D1:C268 06 00 -  -          ld  b,0
 1957 D1:C26A 4F -  -  -          ld  c,a
 1958 D1:C26B 09 -  -  -          add hl,bc
 1959 D1:C26C 7E -  -  -          READ_ACCESS
 1960 D1:C26D E1 -  -  -      pop hl
 1961 D1:C26E DD AE 00 -      xor a,(ix+REGA)
 1962 D1:C271 DD 77 00 -      ld  (ix+REGA),A
 1963 D1:C274 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1964 D1:C288 C3 AC B3 D1     jp i6502NextLoad
 1965 D1:C28C -  -  -  -  
 1966 D1:C28C -  -  -  -  ;(indirect),Y	EOR (oper),Y	51	2	5* 
 1967 D1:C28C -  -  -  -  inst6502_eor_indy:
 1968 D1:C28C ED 33 05 -      ADDCYC(5)
 1969 D1:C28F E5 -  -  -      push hl
 1970 D1:C290 7E -  -  -          ld  a,(hl)
 1971 D1:C291 21 00 38 D0         ld  hl,ZEROPAGE
 1972 D1:C295 85 -  -  -          add a,L
 1973 D1:C296 6F -  -  -          ld  L,a
 1974 D1:C297 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1975 D1:C298 2C -  -  -          inc L
 1976 D1:C299 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1977 D1:C29C 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1978 D1:C29D 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1979 D1:C29F 24 -  -  -          inc h
 1980 D1:C2A0 FD 23 -  -          ADDCYC(1)
 1981 D1:C2A2 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1982 D1:C2A3 2E 08 -  -          ld  L,BASETABLE_STRIDE
 1983 D1:C2A5 ED 6C -  -          mlt hl          ;23.
 1984 D1:C2A7 01 00 40 D0         ld  bc,PAGETABLE
 1985 D1:C2AB 09 -  -  -          add hl,bc
 1986 D1:C2AC ED 27 -  -          ld  hl,(hl)     ;address get.
 1987 D1:C2AE 01 00 00 00         ld  bc,0
 1988 D1:C2B2 4F -  -  -          ld  c,a
 1989 D1:C2B3 09 -  -  -          add hl,bc       ;Full address get.
 1990 D1:C2B4 7E -  -  -          READ_ACCESS
 1991 D1:C2B5 E1 -  -  -      pop hl
 1992 D1:C2B6 DD AE 00 -      xor a,(ix+REGA)
 1993 D1:C2B9 DD 77 00 -      ld  (ix+REGA),A
 1994 D1:C2BC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1995 D1:C2D0 C3 AC B3 D1     jp i6502NextLoad
 1996 D1:C2D4 -  -  -  -  
 1997 D1:C2D4 -  -  -  -  ;-----------------------------------------------------------------------------
 1998 D1:C2D4 -  -  -  -  ;ORA - OR Memory with Accumulator
 1999 D1:C2D4 -  -  -  -  ;A OR M -> A
 2000 D1:C2D4 -  -  -  -  ;N	Z	C	I	D	V
 2001 D1:C2D4 -  -  -  -  ;+	+	-	-	-	-
 2002 D1:C2D4 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2003 D1:C2D4 -  -  -  -  
 2004 D1:C2D4 -  -  -  -  ;immediate	ORA #oper	09	2	2  
 2005 D1:C2D4 -  -  -  -  inst6502_ora_imm:
 2006 D1:C2D4 ED 33 02 -      ADDCYC(2)
 2007 D1:C2D7 7E -  -  -      ld  a,(hl)
 2008 D1:C2D8 DD B6 00 -      or  a,(ix+REGA)
 2009 D1:C2DB DD 77 00 -      ld  (ix+REGA),A
 2010 D1:C2DE DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2011 D1:C2F2 C3 AC B3 D1     jp i6502NextLoad
 2012 D1:C2F6 -  -  -  -  
 2013 D1:C2F6 -  -  -  -  ;zeropage	ORA oper	05	2	3  
 2014 D1:C2F6 -  -  -  -  inst6502_ora_zp:
 2015 D1:C2F6 ED 33 03 -      ADDCYC(3)
 2016 D1:C2F9 7E -  -  -      ld  a,(hl)
 2017 D1:C2FA 01 00 38 D0     ld  bc,ZEROPAGE
 2018 D1:C2FE 81 -  -  -      add a,c
 2019 D1:C2FF 4F -  -  -      ld  c,a
 2020 D1:C300 0A -  -  -      ld  a,(bc)
 2021 D1:C301 DD B6 00 -      or  a,(ix+REGA)
 2022 D1:C304 DD 77 00 -      ld  (ix+REGA),A
 2023 D1:C307 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2024 D1:C31B C3 AC B3 D1     jp i6502NextLoad
 2025 D1:C31F -  -  -  -  
 2026 D1:C31F -  -  -  -  ;zeropage,X	ORA oper,X	15	2	4  
 2027 D1:C31F -  -  -  -  inst6502_ora_zpx:
 2028 D1:C31F ED 33 04 -      ADDCYC(4)
 2029 D1:C322 7E -  -  -      ld  a,(hl)
 2030 D1:C323 01 00 38 D0     ld  bc,ZEROPAGE
 2031 D1:C327 81 -  -  -      add a,c
 2032 D1:C328 DD 86 01 -      add a,(ix+REGX)
 2033 D1:C32B 4F -  -  -      ld  c,a
 2034 D1:C32C 0A -  -  -      ld  a,(bc)
 2035 D1:C32D DD B6 00 -      or  a,(ix+REGA)
 2036 D1:C330 DD 77 00 -      ld  (ix+REGA),A
 2037 D1:C333 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2038 D1:C347 C3 AC B3 D1     jp i6502NextLoad
 2039 D1:C34B -  -  -  -  
 2040 D1:C34B -  -  -  -  ;absolute	ORA oper	0D	3	4  
 2041 D1:C34B -  -  -  -  inst6502_ora_abs:
 2042 D1:C34B ED 33 04 -      ADDCYC(4)
 2043 D1:C34E CD 21 B6 D1     call subroutine6502_abs_split_start
 2044 D1:C352 E5 -  -  -      push hl
 2045 D1:C353 50 -  -  -          ld  d,b
 2046 D1:C354 79 -  -  -          ld  a,c
 2047 D1:C355 0E 08 -  -          ld  c,BASETABLE_STRIDE
 2048 D1:C357 ED 4C -  -          mlt bc
 2049 D1:C359 21 00 40 D0         ld  hl,PAGETABLE
 2050 D1:C35D 09 -  -  -          add hl,bc
 2051 D1:C35E ED 27 -  -          ld  hl,(hl)
 2052 D1:C360 06 00 -  -          ld  b,0
 2053 D1:C362 4F -  -  -          ld  c,a
 2054 D1:C363 09 -  -  -          add hl,bc   ;full address
 2055 D1:C364 7E -  -  -          READ_ACCESS
 2056 D1:C365 E1 -  -  -      pop hl
 2057 D1:C366 DD B6 00 -      or  a,(ix+REGA)
 2058 D1:C369 DD 77 00 -      ld  (ix+REGA),A
 2059 D1:C36C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2060 D1:C380 C3 AC B3 D1     jp i6502NextLoad
 2061 D1:C384 -  -  -  -  
 2062 D1:C384 -  -  -  -  ;absolute,X	ORA oper,X	1D	3	4* 
 2063 D1:C384 -  -  -  -  inst6502_ora_absx:
 2064 D1:C384 ED 33 04 -      ADDCYC(4)
 2065 D1:C387 CD 42 B6 D1     PUSH_ABSXSPLIT
 2066 D1:C38B 7E -  -  -          READ_ACCESS
 2067 D1:C38C DD B6 00 -          or  a,(ix+REGA)
 2068 D1:C38F DD 77 00 -          ld  (ix+REGA),A
 2069 D1:C392 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2070 D1:C3A6 E1 -  -  -      pop hl
 2071 D1:C3A7 C3 AC B3 D1     jp i6502NextLoad
 2072 D1:C3AB -  -  -  -  
 2073 D1:C3AB -  -  -  -  ;absolute,Y	ORA oper,Y	19	3	4* 
 2074 D1:C3AB -  -  -  -  inst6502_ora_absy:
 2075 D1:C3AB ED 33 04 -      ADDCYC(4)
 2076 D1:C3AE CD 3D B6 D1     PUSH_ABSYSPLIT
 2077 D1:C3B2 7E -  -  -          READ_ACCESS
 2078 D1:C3B3 E1 -  -  -      pop hl
 2079 D1:C3B4 DD B6 00 -      or  a,(ix+REGA)
 2080 D1:C3B7 DD 77 00 -      ld  (ix+REGA),A
 2081 D1:C3BA DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2082 D1:C3CE C3 AC B3 D1     jp i6502NextLoad
 2083 D1:C3D2 -  -  -  -  
 2084 D1:C3D2 -  -  -  -  ;(indirect,X)	ORA (oper,X)	01	2	6  
 2085 D1:C3D2 -  -  -  -  inst6502_ora_indx:
 2086 D1:C3D2 ED 33 06 -      ADDCYC(6)
 2087 D1:C3D5 E5 -  -  -      push hl
 2088 D1:C3D6 7E -  -  -          ld  a,(hl)
 2089 D1:C3D7 21 00 38 D0         ld  hl,ZEROPAGE
 2090 D1:C3DB 85 -  -  -          add a,L
 2091 D1:C3DC DD 86 01 -          add a,(ix+REGX)
 2092 D1:C3DF 6F -  -  -          ld  L,a
 2093 D1:C3E0 7E -  -  -          ld  a,(hl)
 2094 D1:C3E1 2C -  -  -          inc L
 2095 D1:C3E2 56 -  -  -          ld  d,(hl)
 2096 D1:C3E3 42 -  -  -          ld  b,d
 2097 D1:C3E4 0E 08 -  -          ld  c,BASETABLE_STRIDE
 2098 D1:C3E6 ED 4C -  -          mlt bc
 2099 D1:C3E8 21 00 40 D0         ld  hl,PAGETABLE
 2100 D1:C3EC 09 -  -  -          add hl,bc
 2101 D1:C3ED ED 27 -  -          ld  hl,(hl)
 2102 D1:C3EF 06 00 -  -          ld  b,0
 2103 D1:C3F1 4F -  -  -          ld  c,a
 2104 D1:C3F2 09 -  -  -          add hl,bc
 2105 D1:C3F3 7E -  -  -          READ_ACCESS
 2106 D1:C3F4 E1 -  -  -      pop hl
 2107 D1:C3F5 DD B6 00 -      or  a,(ix+REGA)
 2108 D1:C3F8 DD 77 00 -      ld  (ix+REGA),A
 2109 D1:C3FB DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2110 D1:C40F C3 AC B3 D1     jp i6502NextLoad
 2111 D1:C413 -  -  -  -  
 2112 D1:C413 -  -  -  -  ;(indirect),Y	ORA (oper),Y	11	2	5* 
 2113 D1:C413 -  -  -  -  inst6502_ora_indy:
 2114 D1:C413 ED 33 05 -      ADDCYC(5)
 2115 D1:C416 E5 -  -  -      push hl
 2116 D1:C417 7E -  -  -          ld  a,(hl)
 2117 D1:C418 21 00 38 D0         ld  hl,ZEROPAGE
 2118 D1:C41C 85 -  -  -          add a,L
 2119 D1:C41D 6F -  -  -          ld  L,a
 2120 D1:C41E 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 2121 D1:C41F 2C -  -  -          inc L
 2122 D1:C420 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 2123 D1:C423 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 2124 D1:C424 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 2125 D1:C426 24 -  -  -          inc h
 2126 D1:C427 FD 23 -  -          ADDCYC(1)
 2127 D1:C429 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 2128 D1:C42A 2E 08 -  -          ld  L,BASETABLE_STRIDE
 2129 D1:C42C ED 6C -  -          mlt hl          ;23.
 2130 D1:C42E 01 00 40 D0         ld  bc,PAGETABLE
 2131 D1:C432 09 -  -  -          add hl,bc
 2132 D1:C433 ED 27 -  -          ld  hl,(hl)     ;address get.
 2133 D1:C435 01 00 00 00         ld  bc,0
 2134 D1:C439 4F -  -  -          ld  c,a
 2135 D1:C43A 09 -  -  -          add hl,bc       ;Full address get.
 2136 D1:C43B 7E -  -  -          READ_ACCESS
 2137 D1:C43C E1 -  -  -      pop hl
 2138 D1:C43D DD B6 00 -      or  a,(ix+REGA)
 2139 D1:C440 DD 77 00 -      ld  (ix+REGA),A
 2140 D1:C443 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2141 D1:C457 C3 AC B3 D1     jp i6502NextLoad
 2142 D1:C45B -  -  -  -  
 2143 D1:C45B -  -  -  -  ;-----------------------------------------------------------------------------
 2144 D1:C45B -  -  -  -  ;-----------------------------------------------------------------------------
 2145 D1:C45B -  -  -  -  ;-----------------------------------------------------------------------------
 2146 D1:C45B -  -  -  -  ;Instructions by type: Shift & Rotate Instructions
 2147 D1:C45B -  -  -  -  ;ASL - Shift Left One Bit (Memory or Accumulator)
 2148 D1:C45B -  -  -  -  ;C <- [76543210] <- 0
 2149 D1:C45B -  -  -  -  ;N	Z	C	I	D	V
 2150 D1:C45B -  -  -  -  ;+	+	+	-	-	-
 2151 D1:C45B -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2152 D1:C45B -  -  -  -  
 2153 D1:C45B -  -  -  -  ;accumulator	ASL A	0A	1	2  
 2154 D1:C45B -  -  -  -  inst6502_asl:
 2155 D1:C45B ED 33 02 -      ADDCYC(2)
 2156 D1:C45E DD 7E 00 -      ld  a,(ix+REGA)
 2157 D1:C461 CB 27 -  -      sla a
 2158 D1:C463 DD 77 00 -      ld  (ix+REGA),a
 2159 D1:C466 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2160 D1:C480 C3 C5 B3 D1     jp i6502FinishLoad
 2161 D1:C484 -  -  -  -  
 2162 D1:C484 -  -  -  -  ;zeropage	ASL oper	06	2	5  
 2163 D1:C484 -  -  -  -  inst6502_asl_zp:
 2164 D1:C484 ED 33 05 -      ADDCYC(5)
 2165 D1:C487 7E -  -  -      ld  a,(hl)
 2166 D1:C488 01 00 38 D0     ld  bc,ZEROPAGE
 2167 D1:C48C 81 -  -  -      add a,c
 2168 D1:C48D 4F -  -  -      ld  c,a
 2169 D1:C48E 0A -  -  -      ld  a,(bc)
 2170 D1:C48F CB 27 -  -      sla a
 2171 D1:C491 02 -  -  -      ld  (bc),a
 2172 D1:C492 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2173 D1:C4AC C3 AC B3 D1     jp i6502NextLoad
 2174 D1:C4B0 -  -  -  -  
 2175 D1:C4B0 -  -  -  -  ;zeropage,X	ASL oper,X	16	2	6  
 2176 D1:C4B0 -  -  -  -  inst6502_asl_zpx:
 2177 D1:C4B0 ED 33 06 -      ADDCYC(6)
 2178 D1:C4B3 7E -  -  -      ld  a,(hl)
 2179 D1:C4B4 01 00 38 D0     ld  bc,ZEROPAGE
 2180 D1:C4B8 81 -  -  -      add a,c
 2181 D1:C4B9 DD 86 01 -      add a,(ix+REGX)
 2182 D1:C4BC 4F -  -  -      ld  c,a
 2183 D1:C4BD 0A -  -  -      ld  a,(bc)
 2184 D1:C4BE CB 27 -  -      sla a
 2185 D1:C4C0 02 -  -  -      ld  (bc),a
 2186 D1:C4C1 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2187 D1:C4DB C3 AC B3 D1     jp i6502NextLoad
 2188 D1:C4DF -  -  -  -  
 2189 D1:C4DF -  -  -  -  ;absolute	ASL oper	0E	3	6  
 2190 D1:C4DF -  -  -  -  inst6502_asl_abs:
 2191 D1:C4DF ED 33 06 -      ADDCYC(6)
 2192 D1:C4E2 CD 21 B6 D1     call subroutine6502_abs_split_start
 2193 D1:C4E6 E5 -  -  -      push hl
 2194 D1:C4E7 50 -  -  -          ld  d,b
 2195 D1:C4E8 79 -  -  -          ld  a,c
 2196 D1:C4E9 0E 08 -  -          ld  c,BASETABLE_STRIDE
 2197 D1:C4EB ED 4C -  -          mlt bc
 2198 D1:C4ED 21 00 40 D0         ld  hl,PAGETABLE
 2199 D1:C4F1 09 -  -  -          add hl,bc
 2200 D1:C4F2 ED 27 -  -          ld  hl,(hl)
 2201 D1:C4F4 06 00 -  -          ld  b,0
 2202 D1:C4F6 4F -  -  -          ld  c,a
 2203 D1:C4F7 09 -  -  -          add hl,bc   ;full address
 2204 D1:C4F8 7E -  -  -          READ_ACCESS
 2205 D1:C4F9 CB 27 -  -          sla a
 2206 D1:C4FB 4F -  -  -          ld  c,a
 2207 D1:C4FC DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2208 D1:C516 41 -  -  -          ld  b,c
 2209 D1:C517 70 -  -  -          WRITE_ACCESS
 2210 D1:C518 E1 -  -  -      pop hl
 2211 D1:C519 C3 AC B3 D1     jp i6502NextLoad
 2212 D1:C51D -  -  -  -  
 2213 D1:C51D -  -  -  -  ;absolute,X	ASL oper,X	1E	3	7  
 2214 D1:C51D -  -  -  -  inst6502_asl_absx:
 2215 D1:C51D ED 33 07 -      ADDCYC(7)
 2216 D1:C520 CD 7E B6 D1     PUSH_ABSXSPLIT_NODEP
 2217 D1:C524 7E -  -  -          READ_ACCESS
 2218 D1:C525 CB 27 -  -          sla a
 2219 D1:C527 4F -  -  -          ld  c,a
 2220 D1:C528 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2221 D1:C542 41 -  -  -          ld  b,c
 2222 D1:C543 70 -  -  -          WRITE_ACCESS
 2223 D1:C544 E1 -  -  -      pop hl
 2224 D1:C545 C3 AC B3 D1     jp i6502NextLoad
 2225 D1:C549 -  -  -  -  
 2226 D1:C549 -  -  -  -  ;-----------------------------------------------------------------------------
 2227 D1:C549 -  -  -  -  ;LSR - Shift One Bit Right (Memory or Accumulator)
 2228 D1:C549 -  -  -  -  ;0 -> [76543210] -> C
 2229 D1:C549 -  -  -  -  ;N	Z	C	I	D	V
 2230 D1:C549 -  -  -  -  ;0	+	+	-	-	-
 2231 D1:C549 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2232 D1:C549 -  -  -  -  
 2233 D1:C549 -  -  -  -  ;accumulator	LSR A	4A	1	2  
 2234 D1:C549 -  -  -  -  inst6502_lsr:
 2235 D1:C549 ED 33 02 -      ADDCYC(2)
 2236 D1:C54C DD 7E 00 -      ld  a,(ix+REGA)
 2237 D1:C54F CB 3F -  -      srl a
 2238 D1:C551 DD 77 00 -      ld  (ix+REGA),a
 2239 D1:C554 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2240 D1:C56E C3 C5 B3 D1     jp i6502FinishLoad
 2241 D1:C572 -  -  -  -  
 2242 D1:C572 -  -  -  -  ;zeropage	LSR oper	46	2	5  
 2243 D1:C572 -  -  -  -  inst6502_lsr_zp:
 2244 D1:C572 ED 33 05 -      ADDCYC(5)
 2245 D1:C575 7E -  -  -      ld  a,(hl)
 2246 D1:C576 01 00 38 D0     ld  bc,ZEROPAGE
 2247 D1:C57A 81 -  -  -      add a,c
 2248 D1:C57B 4F -  -  -      ld  c,a
 2249 D1:C57C 0A -  -  -      ld  a,(bc)
 2250 D1:C57D CB 3F -  -      srl a
 2251 D1:C57F 02 -  -  -      ld  (bc),a
 2252 D1:C580 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2253 D1:C59A C3 AC B3 D1     jp i6502NextLoad
 2254 D1:C59E -  -  -  -  
 2255 D1:C59E -  -  -  -  ;zeropage,X	LSR oper,X	56	2	6  
 2256 D1:C59E -  -  -  -  inst6502_lsr_zpx:
 2257 D1:C59E ED 33 06 -      ADDCYC(6)
 2258 D1:C5A1 7E -  -  -      ld  a,(hl)
 2259 D1:C5A2 01 00 38 D0     ld  bc,ZEROPAGE
 2260 D1:C5A6 81 -  -  -      add a,c
 2261 D1:C5A7 DD 86 01 -      add a,(ix+REGX)
 2262 D1:C5AA 4F -  -  -      ld  c,a
 2263 D1:C5AB 0A -  -  -      ld  a,(bc)
 2264 D1:C5AC CB 3F -  -      srl a
 2265 D1:C5AE 02 -  -  -      ld  (bc),a
 2266 D1:C5AF DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2267 D1:C5C9 C3 AC B3 D1     jp i6502NextLoad
 2268 D1:C5CD -  -  -  -      
 2269 D1:C5CD -  -  -  -  ;absolute	LSR oper	4E	3	6  
 2270 D1:C5CD -  -  -  -  inst6502_lsr_abs:
 2271 D1:C5CD ED 33 06 -      ADDCYC(6)
 2272 D1:C5D0 CD 21 B6 D1     call subroutine6502_abs_split_start
 2273 D1:C5D4 E5 -  -  -      push hl
 2274 D1:C5D5 50 -  -  -          ld  d,b
 2275 D1:C5D6 79 -  -  -          ld  a,c
 2276 D1:C5D7 0E 08 -  -          ld  c,BASETABLE_STRIDE
 2277 D1:C5D9 ED 4C -  -          mlt bc
 2278 D1:C5DB 21 00 40 D0         ld  hl,PAGETABLE
 2279 D1:C5DF 09 -  -  -          add hl,bc
 2280 D1:C5E0 ED 27 -  -          ld  hl,(hl)
 2281 D1:C5E2 06 00 -  -          ld  b,0
 2282 D1:C5E4 4F -  -  -          ld  c,a
 2283 D1:C5E5 09 -  -  -          add hl,bc   ;full address
 2284 D1:C5E6 7E -  -  -          READ_ACCESS
 2285 D1:C5E7 CB 3F -  -          srl a
 2286 D1:C5E9 4F -  -  -          ld  c,a
 2287 D1:C5EA DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2288 D1:C604 41 -  -  -          ld  b,c
 2289 D1:C605 70 -  -  -          WRITE_ACCESS
 2290 D1:C606 E1 -  -  -      pop hl
 2291 D1:C607 C3 AC B3 D1     jp i6502NextLoad
 2292 D1:C60B -  -  -  -  
 2293 D1:C60B -  -  -  -  ;absolute,X	LSR oper,X	5E	3	7  
 2294 D1:C60B -  -  -  -  inst6502_lsr_absx:
 2295 D1:C60B ED 33 07 -      ADDCYC(7)
 2296 D1:C60E CD 7E B6 D1     PUSH_ABSXSPLIT_NODEP
 2297 D1:C612 7E -  -  -          READ_ACCESS
 2298 D1:C613 CB 3F -  -          srl a
 2299 D1:C615 4F -  -  -          ld  c,a
 2300 D1:C616 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2301 D1:C630 41 -  -  -          ld  b,c
 2302 D1:C631 70 -  -  -          WRITE_ACCESS
 2303 D1:C632 E1 -  -  -      pop hl
 2304 D1:C633 C3 AC B3 D1     jp i6502NextLoad
 2305 D1:C637 -  -  -  -  
 2306 D1:C637 -  -  -  -  ;-----------------------------------------------------------------------------
 2307 D1:C637 -  -  -  -  ;ROL - Rotate One Bit Left (Memory or Accumulator)
 2308 D1:C637 -  -  -  -  ;C <- [76543210] <- C
 2309 D1:C637 -  -  -  -  ;N	Z	C	I	D	V
 2310 D1:C637 -  -  -  -  ;+	+	+	-	-	-
 2311 D1:C637 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2312 D1:C637 -  -  -  -  
 2313 D1:C637 -  -  -  -  ;accumulator	ROL A	2A	1	2  
 2314 D1:C637 -  -  -  -  inst6502_rol:
 2315 D1:C637 ED 33 02 -      ADDCYC(2)
 2316 D1:C63A DD 7E 04 -      ld  a,(ix+REGSR)
 2317 D1:C63D 1F -  -  -      rra
 2318 D1:C63E DD CB 00 16     rl  (ix+REGA)
 2319 D1:C642 DD 7E 00 -      ld  a,(ix+REGA)
 2320 D1:C645 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2321 D1:C65F C3 C5 B3 D1     jp i6502FinishLoad
 2322 D1:C663 -  -  -  -  
 2323 D1:C663 -  -  -  -  ;zeropage	ROL oper	26	2	5  
 2324 D1:C663 -  -  -  -  inst6502_rol_zp:
 2325 D1:C663 ED 33 05 -      ADDCYC(5)
 2326 D1:C666 7E -  -  -      ld  a,(hl)
 2327 D1:C667 01 00 38 D0     ld  bc,ZEROPAGE
 2328 D1:C66B 81 -  -  -      add a,c
 2329 D1:C66C 4F -  -  -      ld  c,a
 2330 D1:C66D DD 7E 04 -      ld  a,(ix+REGSR)
 2331 D1:C670 1F -  -  -      rra
 2332 D1:C671 0A -  -  -      ld  a,(bc)
 2333 D1:C672 17 -  -  -      rla
 2334 D1:C673 02 -  -  -      ld  (bc),a
 2335 D1:C674 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2336 D1:C68E C3 AC B3 D1     jp i6502NextLoad
 2337 D1:C692 -  -  -  -  
 2338 D1:C692 -  -  -  -  ;zeropage,X	ROL oper,X	36	2	6  
 2339 D1:C692 -  -  -  -  inst6502_rol_zpx:
 2340 D1:C692 ED 33 06 -      ADDCYC(6)
 2341 D1:C695 7E -  -  -      ld  a,(hl)
 2342 D1:C696 01 00 38 D0     ld  bc,ZEROPAGE
 2343 D1:C69A 81 -  -  -      add a,c
 2344 D1:C69B DD 86 01 -      add a,(ix+REGX)
 2345 D1:C69E 4F -  -  -      ld  c,a
 2346 D1:C69F DD 7E 04 -      ld  a,(ix+REGSR)
 2347 D1:C6A2 1F -  -  -      rra
 2348 D1:C6A3 0A -  -  -      ld  a,(bc)
 2349 D1:C6A4 17 -  -  -      rla
 2350 D1:C6A5 02 -  -  -      ld  (bc),a
 2351 D1:C6A6 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2352 D1:C6C0 C3 AC B3 D1     jp i6502NextLoad
 2353 D1:C6C4 -  -  -  -  
 2354 D1:C6C4 -  -  -  -  ;absolute	ROL oper	2E	3	6  
 2355 D1:C6C4 -  -  -  -  inst6502_rol_abs:
 2356 D1:C6C4 ED 33 06 -      ADDCYC(6)
 2357 D1:C6C7 CD 21 B6 D1     call subroutine6502_abs_split_start
 2358 D1:C6CB E5 -  -  -      push hl
 2359 D1:C6CC 50 -  -  -          ld  d,b
 2360 D1:C6CD 79 -  -  -          ld  a,c
 2361 D1:C6CE 0E 08 -  -          ld  c,BASETABLE_STRIDE
 2362 D1:C6D0 ED 4C -  -          mlt bc
 2363 D1:C6D2 21 00 40 D0         ld  hl,PAGETABLE
 2364 D1:C6D6 09 -  -  -          add hl,bc
 2365 D1:C6D7 ED 27 -  -          ld  hl,(hl)
 2366 D1:C6D9 06 00 -  -          ld  b,0
 2367 D1:C6DB 4F -  -  -          ld  c,a
 2368 D1:C6DC 09 -  -  -          add hl,bc   ;full address
 2369 D1:C6DD 7E -  -  -          READ_ACCESS
 2370 D1:C6DE DD 46 04 -          ld  b,(ix+REGSR)
 2371 D1:C6E1 CB 18 -  -          rr b
 2372 D1:C6E3 17 -  -  -          rla
 2373 D1:C6E4 4F -  -  -          ld  c,a
 2374 D1:C6E5 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2375 D1:C6FF 41 -  -  -          ld  b,c
 2376 D1:C700 70 -  -  -          WRITE_ACCESS
 2377 D1:C701 E1 -  -  -      pop hl
 2378 D1:C702 C3 AC B3 D1     jp i6502NextLoad
 2379 D1:C706 -  -  -  -  
 2380 D1:C706 -  -  -  -  ;absolute,X	ROL oper,X	3E	3	7  
 2381 D1:C706 -  -  -  -  inst6502_rol_absx:
 2382 D1:C706 ED 33 07 -      ADDCYC(7)
 2383 D1:C709 CD 7E B6 D1     PUSH_ABSXSPLIT_NODEP
 2384 D1:C70D 7E -  -  -          READ_ACCESS
 2385 D1:C70E DD 46 04 -          ld  b,(ix+REGSR)
 2386 D1:C711 CB 18 -  -          rr b
 2387 D1:C713 17 -  -  -          rla
 2388 D1:C714 4F -  -  -          ld  c,a
 2389 D1:C715 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2390 D1:C72F 41 -  -  -          ld  b,c
 2391 D1:C730 70 -  -  -          WRITE_ACCESS
 2392 D1:C731 E1 -  -  -      pop hl
 2393 D1:C732 C3 AC B3 D1     jp i6502NextLoad
 2394 D1:C736 -  -  -  -  
 2395 D1:C736 -  -  -  -  ;-----------------------------------------------------------------------------
 2396 D1:C736 -  -  -  -  ;ROR - Rotate One Bit Right (Memory or Accumulator)
 2397 D1:C736 -  -  -  -  ;C -> [76543210] -> C
 2398 D1:C736 -  -  -  -  ;N	Z	C	I	D	V
 2399 D1:C736 -  -  -  -  ;+	+	+	-	-	-
 2400 D1:C736 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2401 D1:C736 -  -  -  -  
 2402 D1:C736 -  -  -  -  ;accumulator	ROR A	6A	1	2  
 2403 D1:C736 -  -  -  -  inst6502_ror:
 2404 D1:C736 ED 33 02 -      ADDCYC(2)
 2405 D1:C739 DD 7E 04 -      ld  a,(ix+REGSR)
 2406 D1:C73C 1F -  -  -      rra
 2407 D1:C73D DD CB 00 1E     rr  (ix+REGA)
 2408 D1:C741 DD 7E 00 -      ld  a,(ix+REGA)
 2409 D1:C744 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2410 D1:C75E C3 C5 B3 D1     jp i6502FinishLoad
 2411 D1:C762 -  -  -  -  
 2412 D1:C762 -  -  -  -  ;zeropage	ROR oper	66	2	5  
 2413 D1:C762 -  -  -  -  inst6502_ror_zp:
 2414 D1:C762 ED 33 05 -      ADDCYC(5)
 2415 D1:C765 7E -  -  -      ld  a,(hl)
 2416 D1:C766 01 00 38 D0     ld  bc,ZEROPAGE
 2417 D1:C76A 81 -  -  -      add a,c
 2418 D1:C76B 4F -  -  -      ld  c,a
 2419 D1:C76C DD 7E 04 -      ld  a,(ix+REGSR)
 2420 D1:C76F 1F -  -  -      rra
 2421 D1:C770 0A -  -  -      ld  a,(bc)
 2422 D1:C771 1F -  -  -      rra
 2423 D1:C772 02 -  -  -      ld  (bc),a
 2424 D1:C773 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2425 D1:C78D C3 AC B3 D1     jp i6502NextLoad
 2426 D1:C791 -  -  -  -  
 2427 D1:C791 -  -  -  -  ;zeropage,X	ROR oper,X	76	2	6  
 2428 D1:C791 -  -  -  -  inst6502_ror_zpx:
 2429 D1:C791 ED 33 06 -      ADDCYC(6)
 2430 D1:C794 7E -  -  -      ld  a,(hl)
 2431 D1:C795 01 00 38 D0     ld  bc,ZEROPAGE
 2432 D1:C799 81 -  -  -      add a,c
 2433 D1:C79A DD 86 01 -      add a,(ix+REGX)
 2434 D1:C79D 4F -  -  -      ld  c,a
 2435 D1:C79E DD 7E 04 -      ld  a,(ix+REGSR)
 2436 D1:C7A1 1F -  -  -      rra
 2437 D1:C7A2 0A -  -  -      ld  a,(bc)
 2438 D1:C7A3 1F -  -  -      rra
 2439 D1:C7A4 02 -  -  -      ld  (bc),a
 2440 D1:C7A5 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2441 D1:C7BF C3 AC B3 D1     jp i6502NextLoad
 2442 D1:C7C3 -  -  -  -  
 2443 D1:C7C3 -  -  -  -  ;absolute	ROR oper	6E	3	6  
 2444 D1:C7C3 -  -  -  -  inst6502_ror_abs:
 2445 D1:C7C3 ED 33 06 -      ADDCYC(6)
 2446 D1:C7C6 CD 21 B6 D1     call subroutine6502_abs_split_start
 2447 D1:C7CA E5 -  -  -      push hl
 2448 D1:C7CB 50 -  -  -          ld  d,b
 2449 D1:C7CC 79 -  -  -          ld  a,c
 2450 D1:C7CD 0E 08 -  -          ld  c,BASETABLE_STRIDE
 2451 D1:C7CF ED 4C -  -          mlt bc
 2452 D1:C7D1 21 00 40 D0         ld  hl,PAGETABLE
 2453 D1:C7D5 09 -  -  -          add hl,bc
 2454 D1:C7D6 ED 27 -  -          ld  hl,(hl)
 2455 D1:C7D8 06 00 -  -          ld  b,0
 2456 D1:C7DA 4F -  -  -          ld  c,a
 2457 D1:C7DB 09 -  -  -          add hl,bc   ;full address
 2458 D1:C7DC 7E -  -  -          READ_ACCESS
 2459 D1:C7DD DD 46 04 -          ld  b,(ix+REGSR)
 2460 D1:C7E0 CB 18 -  -          rr b
 2461 D1:C7E2 1F -  -  -          rra
 2462 D1:C7E3 4F -  -  -          ld  c,a
 2463 D1:C7E4 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2464 D1:C7FE 41 -  -  -          ld  b,c
 2465 D1:C7FF 70 -  -  -          WRITE_ACCESS
 2466 D1:C800 E1 -  -  -      pop hl
 2467 D1:C801 C3 AC B3 D1     jp i6502NextLoad
 2468 D1:C805 -  -  -  -  
 2469 D1:C805 -  -  -  -  ;absolute,X	ROR oper,X	7E	3	7  
 2470 D1:C805 -  -  -  -  inst6502_ror_absx:
 2471 D1:C805 ED 33 07 -      ADDCYC(7)
 2472 D1:C808 CD 7E B6 D1     PUSH_ABSXSPLIT_NODEP
 2473 D1:C80C 7E -  -  -          READ_ACCESS
 2474 D1:C80D DD 46 04 -          ld  b,(ix+REGSR)
 2475 D1:C810 CB 18 -  -          rr b
 2476 D1:C812 1F -  -  -          rra
 2477 D1:C813 4F -  -  -          ld  c,a
 2478 D1:C814 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2479 D1:C82E 41 -  -  -          ld  b,c
 2480 D1:C82F 70 -  -  -          WRITE_ACCESS
 2481 D1:C830 E1 -  -  -      pop hl
 2482 D1:C831 C3 AC B3 D1     jp i6502NextLoad
 2483 D1:C835 -  -  -  -  
 2484 D1:C835 -  -  -  -  ;-----------------------------------------------------------------------------
 2485 D1:C835 -  -  -  -  ;-----------------------------------------------------------------------------
 2486 D1:C835 -  -  -  -  ;-----------------------------------------------------------------------------
 2487 D1:C835 -  -  -  -  ;Instructions by type: Flag Instructions
 2488 D1:C835 -  -  -  -  
 2489 D1:C835 -  -  -  -  ;CLC - Clear Carry Flag
 2490 D1:C835 -  -  -  -  ;0 -> C
 2491 D1:C835 -  -  -  -  ;N	Z	C	I	D	V
 2492 D1:C835 -  -  -  -  ;-	-	0	-	-	-
 2493 D1:C835 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2494 D1:C835 -  -  -  -  ;implied	CLC	18	1	2  
 2495 D1:C835 -  -  -  -  inst6502_clc:
 2496 D1:C835 ED 33 02 -      ADDCYC(2)
 2497 D1:C838 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 2498 D1:C83C C3 C5 B3 D1     jp  i6502FinishLoad
 2499 D1:C840 -  -  -  -  
 2500 D1:C840 -  -  -  -  ;CLD - Clear Decimal Mode
 2501 D1:C840 -  -  -  -  ;0 -> D
 2502 D1:C840 -  -  -  -  ;N	Z	C	I	D	V
 2503 D1:C840 -  -  -  -  ;-	-	-	-	0	-
 2504 D1:C840 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2505 D1:C840 -  -  -  -  ;implied	CLD	D8	1	2  
 2506 D1:C840 -  -  -  -  inst6502_cld:
 2507 D1:C840 ED 33 02 -      ADDCYC(2)
 2508 D1:C843 DD CB 04 9E     res SF_DEC,(ix+REGSR)
 2509 D1:C847 C3 C5 B3 D1     jp  i6502FinishLoad
 2510 D1:C84B -  -  -  -  
 2511 D1:C84B -  -  -  -  ;CLI -  Clear Interrupt Disable Bit
 2512 D1:C84B -  -  -  -  ;0 -> I
 2513 D1:C84B -  -  -  -  ;N	Z	C	I	D	V
 2514 D1:C84B -  -  -  -  ;-	-	-	0	-	-
 2515 D1:C84B -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2516 D1:C84B -  -  -  -  ;implied	CLI	58	1	2  
 2517 D1:C84B -  -  -  -  inst6502_cli:
 2518 D1:C84B ED 33 02 -      ADDCYC(2)
 2519 D1:C84E DD CB 04 96     res SF_INT,(ix+REGSR)
 2520 D1:C852 C3 C5 B3 D1     jp  i6502FinishLoad
 2521 D1:C856 -  -  -  -  
 2522 D1:C856 -  -  -  -  ;CLV - Clear Overflow Flag
 2523 D1:C856 -  -  -  -  ;0 -> V
 2524 D1:C856 -  -  -  -  ;N	Z	C	I	D	V
 2525 D1:C856 -  -  -  -  ;-	-	-	-	-	0
 2526 D1:C856 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2527 D1:C856 -  -  -  -  ;implied	CLV	B8	1	2  
 2528 D1:C856 -  -  -  -  inst6502_clv:
 2529 D1:C856 ED 33 02 -      ADDCYC(2)
 2530 D1:C859 DD CB 04 B6     res SF_OVER,(ix+REGSR)
 2531 D1:C85D C3 C5 B3 D1     jp  i6502FinishLoad
 2532 D1:C861 -  -  -  -  
 2533 D1:C861 -  -  -  -  ;SEC - Set Carry Flag
 2534 D1:C861 -  -  -  -  ;1 -> C
 2535 D1:C861 -  -  -  -  ;N	Z	C	I	D	V
 2536 D1:C861 -  -  -  -  ;-	-	1	-	-	-
 2537 D1:C861 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2538 D1:C861 -  -  -  -  ;implied	SEC	38	1	2  
 2539 D1:C861 -  -  -  -  inst6502_sec:
 2540 D1:C861 ED 33 02 -      ADDCYC(2)
 2541 D1:C864 DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 2542 D1:C868 C3 C5 B3 D1     jp  i6502FinishLoad
 2543 D1:C86C -  -  -  -  
 2544 D1:C86C -  -  -  -  ;SED - Set Decimal Flag
 2545 D1:C86C -  -  -  -  ;1 -> D
 2546 D1:C86C -  -  -  -  ;N	Z	C	I	D	V
 2547 D1:C86C -  -  -  -  ;-	-	-	-	1	-
 2548 D1:C86C -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2549 D1:C86C -  -  -  -  ;implied	SED	F8	1	2  
 2550 D1:C86C -  -  -  -  inst6502_sed:
 2551 D1:C86C ED 33 02 -      ADDCYC(2)
 2552 D1:C86F DD CB 04 DE     set SF_DEC,(ix+REGSR)
 2553 D1:C873 C3 C5 B3 D1     jp  i6502FinishLoad
 2554 D1:C877 -  -  -  -  
 2555 D1:C877 -  -  -  -  ;SEI - Set Interrupt Disable Status
 2556 D1:C877 -  -  -  -  ;1 -> I
 2557 D1:C877 -  -  -  -  ;N	Z	C	I	D	V
 2558 D1:C877 -  -  -  -  ;-	-	-	1	-	-
 2559 D1:C877 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2560 D1:C877 -  -  -  -  ;implied	SEI	78	1	2  
 2561 D1:C877 -  -  -  -  inst6502_sei:
 2562 D1:C877 ED 33 02 -      ADDCYC(2)
 2563 D1:C87A DD CB 04 D6     set SF_INT,(ix+REGSR)
 2564 D1:C87E C3 C5 B3 D1     jp  i6502FinishLoad
 2565 D1:C882 -  -  -  -  
 2566 D1:C882 -  -  -  -  ;-----------------------------------------------------------------------------
 2567 D1:C882 -  -  -  -  ;-----------------------------------------------------------------------------
 2568 D1:C882 -  -  -  -  ;-----------------------------------------------------------------------------
 2569 D1:C882 -  -  -  -  ;Instructions by type: Comparisons
 2570 D1:C882 -  -  -  -  
 2571 D1:C882 -  -  -  -  ;CMP - Compare Memory with Accumulator
 2572 D1:C882 -  -  -  -  ;A - M
 2573 D1:C882 -  -  -  -  ;N	Z	C	I	D	V
 2574 D1:C882 -  -  -  -  ;+	+	+	-	-	-
 2575 D1:C882 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2576 D1:C882 -  -  -  -  
 2577 D1:C882 -  -  -  -  ;immediate	CMP #oper	C9	2	2  
 2578 D1:C882 -  -  -  -  inst6502_cmp_imm:
 2579 D1:C882 ED 33 02 -      ADDCYC(2)
 2580 D1:C885 46 -  -  -      ld  b,(hl)
 2581 D1:C886 C3 17 B7 D1     jp  subroutine6502_cmp_combined_end
 2582 D1:C88A -  -  -  -  
 2583 D1:C88A -  -  -  -  ;zeropage	CMP oper	C5	2	3  
 2584 D1:C88A -  -  -  -  inst6502_cmp_zp:
 2585 D1:C88A ED 33 03 -      ADDCYC(3)
 2586 D1:C88D 7E -  -  -      ld  a,(hl)
 2587 D1:C88E 01 00 38 D0     ld  bc,ZEROPAGE
 2588 D1:C892 81 -  -  -      add a,c
 2589 D1:C893 4F -  -  -      ld  c,a
 2590 D1:C894 0A -  -  -      ld  a,(bc)
 2591 D1:C895 47 -  -  -      ld  b,a
 2592 D1:C896 C3 17 B7 D1     jp  subroutine6502_cmp_combined_end
 2593 D1:C89A -  -  -  -  
 2594 D1:C89A -  -  -  -  ;zeropage,X	CMP oper,X	D5	2	4  
 2595 D1:C89A -  -  -  -  inst6502_cmp_zpx:
 2596 D1:C89A ED 33 04 -      ADDCYC(4)
 2597 D1:C89D 7E -  -  -      ld  a,(hl)
 2598 D1:C89E 01 00 38 D0     ld  bc,ZEROPAGE
 2599 D1:C8A2 81 -  -  -      add a,c
 2600 D1:C8A3 DD 86 01 -      add a,(ix+REGX)
 2601 D1:C8A6 4F -  -  -      ld  c,a
 2602 D1:C8A7 0A -  -  -      ld  a,(bc)
 2603 D1:C8A8 47 -  -  -      ld  b,a
 2604 D1:C8A9 C3 17 B7 D1     jp  subroutine6502_cmp_combined_end
 2605 D1:C8AD -  -  -  -  
 2606 D1:C8AD -  -  -  -  ;absolute	CMP oper	CD	3	4  
 2607 D1:C8AD -  -  -  -  inst6502_cmp_abs:
 2608 D1:C8AD ED 33 04 -      ADDCYC(4)
 2609 D1:C8B0 CD 21 B6 D1     call subroutine6502_abs_split_start
 2610 D1:C8B4 E5 -  -  -      push hl
 2611 D1:C8B5 50 -  -  -          ld  d,b
 2612 D1:C8B6 79 -  -  -          ld  a,c
 2613 D1:C8B7 0E 08 -  -          ld  c,BASETABLE_STRIDE
 2614 D1:C8B9 ED 4C -  -          mlt bc
 2615 D1:C8BB 21 00 40 D0         ld  hl,PAGETABLE
 2616 D1:C8BF 09 -  -  -          add hl,bc
 2617 D1:C8C0 ED 27 -  -          ld  hl,(hl)
 2618 D1:C8C2 06 00 -  -          ld  b,0
 2619 D1:C8C4 4F -  -  -          ld  c,a
 2620 D1:C8C5 09 -  -  -          add hl,bc   ;full address
 2621 D1:C8C6 7E -  -  -          READ_ACCESS
 2622 D1:C8C7 E1 -  -  -      pop hl
 2623 D1:C8C8 47 -  -  -      ld  b,a
 2624 D1:C8C9 C3 17 B7 D1     jp  subroutine6502_cmp_combined_end
 2625 D1:C8CD -  -  -  -  
 2626 D1:C8CD -  -  -  -  ;absolute,X	CMP oper,X	DD	3	4* 
 2627 D1:C8CD -  -  -  -  inst6502_cmp_absx:
 2628 D1:C8CD ED 33 04 -      ADDCYC(4)
 2629 D1:C8D0 CD 42 B6 D1     PUSH_ABSXSPLIT
 2630 D1:C8D4 7E -  -  -          READ_ACCESS
 2631 D1:C8D5 E1 -  -  -      pop hl
 2632 D1:C8D6 47 -  -  -      ld  b,a
 2633 D1:C8D7 C3 17 B7 D1     jp  subroutine6502_cmp_combined_end
 2634 D1:C8DB -  -  -  -  
 2635 D1:C8DB -  -  -  -  ;absolute,Y	CMP oper,Y	D9	3	4* 
 2636 D1:C8DB -  -  -  -  inst6502_cmp_absy:
 2637 D1:C8DB ED 33 04 -      ADDCYC(4)
 2638 D1:C8DE CD 3D B6 D1     PUSH_ABSYSPLIT
 2639 D1:C8E2 7E -  -  -          READ_ACCESS
 2640 D1:C8E3 E1 -  -  -      pop hl
 2641 D1:C8E4 47 -  -  -      ld  b,a
 2642 D1:C8E5 C3 17 B7 D1     jp  subroutine6502_cmp_combined_end
 2643 D1:C8E9 -  -  -  -  
 2644 D1:C8E9 -  -  -  -  ;(indirect,X)	CMP (oper,X)	C1	2	6  
 2645 D1:C8E9 -  -  -  -  inst6502_cmp_indx:
 2646 D1:C8E9 ED 33 06 -      ADDCYC(6)
 2647 D1:C8EC E5 -  -  -      push hl
 2648 D1:C8ED 7E -  -  -          ld  a,(hl)
 2649 D1:C8EE 21 00 38 D0         ld  hl,ZEROPAGE
 2650 D1:C8F2 85 -  -  -          add a,L
 2651 D1:C8F3 DD 86 01 -          add a,(ix+REGX)
 2652 D1:C8F6 6F -  -  -          ld  L,a
 2653 D1:C8F7 7E -  -  -          ld  a,(hl)
 2654 D1:C8F8 2C -  -  -          inc L
 2655 D1:C8F9 56 -  -  -          ld  d,(hl)
 2656 D1:C8FA 42 -  -  -          ld  b,d
 2657 D1:C8FB 0E 08 -  -          ld  c,BASETABLE_STRIDE
 2658 D1:C8FD ED 4C -  -          mlt bc
 2659 D1:C8FF 21 00 40 D0         ld  hl,PAGETABLE
 2660 D1:C903 09 -  -  -          add hl,bc
 2661 D1:C904 ED 27 -  -          ld  hl,(hl)
 2662 D1:C906 06 00 -  -          ld  b,0
 2663 D1:C908 4F -  -  -          ld  c,a
 2664 D1:C909 09 -  -  -          add hl,bc
 2665 D1:C90A 7E -  -  -          READ_ACCESS
 2666 D1:C90B E1 -  -  -      pop hl
 2667 D1:C90C 47 -  -  -      ld  b,a
 2668 D1:C90D C3 17 B7 D1     jp  subroutine6502_cmp_combined_end
 2669 D1:C911 -  -  -  -  
 2670 D1:C911 -  -  -  -  ;(indirect),Y	CMP (oper),Y	D1	2	5* 
 2671 D1:C911 -  -  -  -  inst6502_cmp_indy:
 2672 D1:C911 ED 33 05 -      ADDCYC(5)
 2673 D1:C914 E5 -  -  -      push hl
 2674 D1:C915 7E -  -  -          ld  a,(hl)
 2675 D1:C916 21 00 38 D0         ld  hl,ZEROPAGE
 2676 D1:C91A 85 -  -  -          add a,L
 2677 D1:C91B 6F -  -  -          ld  L,a
 2678 D1:C91C 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 2679 D1:C91D 2C -  -  -          inc L
 2680 D1:C91E DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 2681 D1:C921 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 2682 D1:C922 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 2683 D1:C924 24 -  -  -          inc h
 2684 D1:C925 FD 23 -  -          ADDCYC(1)
 2685 D1:C927 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 2686 D1:C928 2E 08 -  -          ld  L,BASETABLE_STRIDE
 2687 D1:C92A ED 6C -  -          mlt hl          ;23.
 2688 D1:C92C 01 00 40 D0         ld  bc,PAGETABLE
 2689 D1:C930 09 -  -  -          add hl,bc
 2690 D1:C931 ED 27 -  -          ld  hl,(hl)     ;address get.
 2691 D1:C933 01 00 00 00         ld  bc,0
 2692 D1:C937 4F -  -  -          ld  c,a
 2693 D1:C938 09 -  -  -          add hl,bc       ;Full address get.
 2694 D1:C939 7E -  -  -          READ_ACCESS
 2695 D1:C93A E1 -  -  -      pop hl
 2696 D1:C93B 47 -  -  -      ld  b,a
 2697 D1:C93C C3 17 B7 D1     jp  subroutine6502_cmp_combined_end
 2698 D1:C940 -  -  -  -  
 2699 D1:C940 -  -  -  -  ;-----------------------------------------------------------------------------
 2700 D1:C940 -  -  -  -  ;CPX - Compare Memory and Index X
 2701 D1:C940 -  -  -  -  ;X - M
 2702 D1:C940 -  -  -  -  ;N	Z	C	I	D	V
 2703 D1:C940 -  -  -  -  ;+	+	+	-	-	-
 2704 D1:C940 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2705 D1:C940 -  -  -  -  ;immediate	CPX #oper	E0	2	2  
 2706 D1:C940 -  -  -  -  inst6502_cpx_imm:
 2707 D1:C940 ED 33 02 -      ADDCYC(2)
 2708 D1:C943 DD 7E 01 -      ld  a,(ix+REGX)
 2709 D1:C946 96 -  -  -      sub a,(hl)
 2710 D1:C947 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2711 D1:C948 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2712 D1:C962 C3 AC B3 D1     jp  i6502NextLoad
 2713 D1:C966 -  -  -  -  
 2714 D1:C966 -  -  -  -  ;zeropage	CPX oper	E4	2	3  
 2715 D1:C966 -  -  -  -  inst6502_cpx_zp:
 2716 D1:C966 ED 33 03 -      ADDCYC(3)
 2717 D1:C969 7E -  -  -      ld  a,(hl)
 2718 D1:C96A 01 00 38 D0     ld  bc,ZEROPAGE
 2719 D1:C96E 81 -  -  -      add a,c
 2720 D1:C96F 4F -  -  -      ld  c,a
 2721 D1:C970 0A -  -  -      ld  a,(bc)
 2722 D1:C971 47 -  -  -      ld  b,a
 2723 D1:C972 DD 7E 01 -      ld  a,(ix+REGX)
 2724 D1:C975 90 -  -  -      sub a,b
 2725 D1:C976 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2726 D1:C977 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2727 D1:C991 C3 AC B3 D1     jp i6502NextLoad
 2728 D1:C995 -  -  -  -  ;absolute	CPX oper	EC	3	4  
 2729 D1:C995 -  -  -  -  inst6502_cpx_abs:
 2730 D1:C995 ED 33 04 -      ADDCYC(4)
 2731 D1:C998 CD 21 B6 D1     call subroutine6502_abs_split_start
 2732 D1:C99C E5 -  -  -      push hl
 2733 D1:C99D 50 -  -  -          ld  d,b
 2734 D1:C99E 79 -  -  -          ld  a,c
 2735 D1:C99F 0E 08 -  -          ld  c,BASETABLE_STRIDE
 2736 D1:C9A1 ED 4C -  -          mlt bc
 2737 D1:C9A3 21 00 40 D0         ld  hl,PAGETABLE
 2738 D1:C9A7 09 -  -  -          add hl,bc
 2739 D1:C9A8 ED 27 -  -          ld  hl,(hl)
 2740 D1:C9AA 06 00 -  -          ld  b,0
 2741 D1:C9AC 4F -  -  -          ld  c,a
 2742 D1:C9AD 09 -  -  -          add hl,bc   ;full address
 2743 D1:C9AE 7E -  -  -          READ_ACCESS
 2744 D1:C9AF E1 -  -  -      pop hl
 2745 D1:C9B0 47 -  -  -      ld  b,a
 2746 D1:C9B1 DD 7E 01 -      ld  a,(ix+REGX)
 2747 D1:C9B4 90 -  -  -      sub a,b
 2748 D1:C9B5 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2749 D1:C9B6 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2750 D1:C9D0 C3 AC B3 D1     jp i6502NextLoad
 2751 D1:C9D4 -  -  -  -  
 2752 D1:C9D4 -  -  -  -  ;-----------------------------------------------------------------------------
 2753 D1:C9D4 -  -  -  -  ;CPY - Compare Memory and Index Y
 2754 D1:C9D4 -  -  -  -  ;Y - M
 2755 D1:C9D4 -  -  -  -  ;N	Z	C	I	D	V
 2756 D1:C9D4 -  -  -  -  ;+	+	+	-	-	-
 2757 D1:C9D4 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2758 D1:C9D4 -  -  -  -  ;immediate	CPY #oper	C0	2	2  
 2759 D1:C9D4 -  -  -  -  inst6502_cpy_imm:
 2760 D1:C9D4 ED 33 02 -      ADDCYC(2)
 2761 D1:C9D7 DD 7E 02 -      ld  a,(ix+REGY)
 2762 D1:C9DA 96 -  -  -      sub a,(hl)
 2763 D1:C9DB 3F -  -  -      ccf
 2764 D1:C9DC DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2765 D1:C9F6 C3 AC B3 D1     jp  i6502NextLoad
 2766 D1:C9FA -  -  -  -  
 2767 D1:C9FA -  -  -  -  ;zeropage	CPY oper	C4	2	3  
 2768 D1:C9FA -  -  -  -  inst6502_cpy_zp:
 2769 D1:C9FA ED 33 03 -      ADDCYC(3)
 2770 D1:C9FD 7E -  -  -      ld  a,(hl)
 2771 D1:C9FE 01 00 38 D0     ld  bc,ZEROPAGE
 2772 D1:CA02 81 -  -  -      add a,c
 2773 D1:CA03 4F -  -  -      ld  c,a
 2774 D1:CA04 0A -  -  -      ld  a,(bc)
 2775 D1:CA05 47 -  -  -      ld  b,a
 2776 D1:CA06 DD 7E 02 -      ld  a,(ix+REGY)
 2777 D1:CA09 90 -  -  -      sub a,b
 2778 D1:CA0A 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2779 D1:CA0B DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2780 D1:CA25 C3 AC B3 D1     jp i6502NextLoad
 2781 D1:CA29 -  -  -  -  
 2782 D1:CA29 -  -  -  -  ;absolute	CPY oper	CC	3	4  
 2783 D1:CA29 -  -  -  -  inst6502_cpy_abs:
 2784 D1:CA29 ED 33 04 -      ADDCYC(4)
 2785 D1:CA2C CD 21 B6 D1     call subroutine6502_abs_split_start
 2786 D1:CA30 E5 -  -  -      push hl
 2787 D1:CA31 50 -  -  -          ld  d,b
 2788 D1:CA32 79 -  -  -          ld  a,c
 2789 D1:CA33 0E 08 -  -          ld  c,BASETABLE_STRIDE
 2790 D1:CA35 ED 4C -  -          mlt bc
 2791 D1:CA37 21 00 40 D0         ld  hl,PAGETABLE
 2792 D1:CA3B 09 -  -  -          add hl,bc
 2793 D1:CA3C ED 27 -  -          ld  hl,(hl)
 2794 D1:CA3E 06 00 -  -          ld  b,0
 2795 D1:CA40 4F -  -  -          ld  c,a
 2796 D1:CA41 09 -  -  -          add hl,bc   ;full address
 2797 D1:CA42 7E -  -  -          READ_ACCESS
 2798 D1:CA43 E1 -  -  -      pop hl
 2799 D1:CA44 47 -  -  -      ld  b,a
 2800 D1:CA45 DD 7E 02 -      ld  a,(ix+REGY)
 2801 D1:CA48 90 -  -  -      sub a,b
 2802 D1:CA49 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2803 D1:CA4A DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2804 D1:CA64 C3 AC B3 D1     jp i6502NextLoad
 2805 D1:CA68 -  -  -  -  
 2806 D1:CA68 -  -  -  -  
 2807 D1:CA68 -  -  -  -  ;-----------------------------------------------------------------------------
 2808 D1:CA68 -  -  -  -  ;-----------------------------------------------------------------------------
 2809 D1:CA68 -  -  -  -  ;-----------------------------------------------------------------------------
 2810 D1:CA68 -  -  -  -  ;Instructions by type: Conditional Branch Instructions
 2811 D1:CA68 -  -  -  -  
 2812 D1:CA68 -  -  -  -  ;branch on C=0
 2813 D1:CA68 -  -  -  -  ;relative	BCC oper	90	2	2**
 2814 D1:CA68 -  -  -  -  inst6502_bcc:
 2815 D1:CA68 ED 33 02 -      ADDCYC(2)
 2816 D1:CA6B DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2817 D1:CA6F C2 AC B3 D1     jp  nz,i6502NextLoad
 2818 D1:CA73 C3 3A B7 D1     jp  subroutine6502_take_branch
 2819 D1:CA77 -  -  -  -  
 2820 D1:CA77 -  -  -  -  ;branch on C=1
 2821 D1:CA77 -  -  -  -  ;relative	BCS oper	B0	2	2**
 2822 D1:CA77 -  -  -  -  inst6502_bcs:
 2823 D1:CA77 ED 33 02 -      ADDCYC(2)
 2824 D1:CA7A DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2825 D1:CA7E CA AC B3 D1     jp  z,i6502NextLoad
 2826 D1:CA82 C3 3A B7 D1     jp  subroutine6502_take_branch
 2827 D1:CA86 -  -  -  -  
 2828 D1:CA86 -  -  -  -  ;branch on Z=1
 2829 D1:CA86 -  -  -  -  ;relative	BEQ oper	F0	2	2**
 2830 D1:CA86 -  -  -  -  inst6502_beq:
 2831 D1:CA86 ED 33 02 -      ADDCYC(2)
 2832 D1:CA89 DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2833 D1:CA8D CA AC B3 D1     jp  z,i6502NextLoad
 2834 D1:CA91 C3 3A B7 D1     jp  subroutine6502_take_branch
 2835 D1:CA95 -  -  -  -  
 2836 D1:CA95 -  -  -  -  ;branch on N=1
 2837 D1:CA95 -  -  -  -  ;relative	BMI oper	30	2	2**
 2838 D1:CA95 -  -  -  -  inst6502_bmi:
 2839 D1:CA95 ED 33 02 -      ADDCYC(2)
 2840 D1:CA98 DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2841 D1:CA9C CA AC B3 D1     jp  z,i6502NextLoad
 2842 D1:CAA0 C3 3A B7 D1     jp  subroutine6502_take_branch
 2843 D1:CAA4 -  -  -  -  
 2844 D1:CAA4 -  -  -  -  
 2845 D1:CAA4 -  -  -  -  ;branch on Z=0
 2846 D1:CAA4 -  -  -  -  ;relative	BNE oper	D0	2	2**
 2847 D1:CAA4 -  -  -  -  inst6502_bne:
 2848 D1:CAA4 ED 33 02 -      ADDCYC(2)
 2849 D1:CAA7 DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2850 D1:CAAB C2 AC B3 D1     jp  nz,i6502NextLoad
 2851 D1:CAAF C3 3A B7 D1     jp  subroutine6502_take_branch
 2852 D1:CAB3 -  -  -  -  
 2853 D1:CAB3 -  -  -  -  ;branch on N=0
 2854 D1:CAB3 -  -  -  -  ;relative	BPL oper	10	2	2**
 2855 D1:CAB3 -  -  -  -  inst6502_bpl:
 2856 D1:CAB3 ED 33 02 -      ADDCYC(2)
 2857 D1:CAB6 DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2858 D1:CABA C2 AC B3 D1     jp  nz,i6502NextLoad
 2859 D1:CABE C3 3A B7 D1     jp  subroutine6502_take_branch
 2860 D1:CAC2 -  -  -  -  
 2861 D1:CAC2 -  -  -  -  ;branch on V=0
 2862 D1:CAC2 -  -  -  -  ;relative	BVC oper	50	2	2**
 2863 D1:CAC2 -  -  -  -  inst6502_bvc:
 2864 D1:CAC2 ED 33 02 -      ADDCYC(2)
 2865 D1:CAC5 DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2866 D1:CAC9 C2 AC B3 D1     jp  nz,i6502NextLoad
 2867 D1:CACD C3 3A B7 D1     jp  subroutine6502_take_branch
 2868 D1:CAD1 -  -  -  -  
 2869 D1:CAD1 -  -  -  -  ;branch on V=1
 2870 D1:CAD1 -  -  -  -  ;relative	BVS oper	70	2	2**
 2871 D1:CAD1 -  -  -  -  inst6502_bvs:
 2872 D1:CAD1 ED 33 02 -      ADDCYC(2)
 2873 D1:CAD4 DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2874 D1:CAD8 CA AC B3 D1     jp  z,i6502NextLoad
 2875 D1:CADC C3 3A B7 D1     jp  subroutine6502_take_branch
 2876 D1:CAE0 -  -  -  -  
 2877 D1:CAE0 -  -  -  -  ;-----------------------------------------------------------------------------
 2878 D1:CAE0 -  -  -  -  ;-----------------------------------------------------------------------------
 2879 D1:CAE0 -  -  -  -  ;-----------------------------------------------------------------------------
 2880 D1:CAE0 -  -  -  -  ;Instructions by type: Interrupts
 2881 D1:CAE0 -  -  -  -  
 2882 D1:CAE0 -  -  -  -  ;BRK - Force Break
 2883 D1:CAE0 -  -  -  -  ;BRK initiates a software interrupt similar to a hardware
 2884 D1:CAE0 -  -  -  -  ;interrupt (IRQ). The return address pushed to the stack is
 2885 D1:CAE0 -  -  -  -  ;PC+2, providing an extra byte of spacing for a break mark
 2886 D1:CAE0 -  -  -  -  ;(identifying a reason for the break.)
 2887 D1:CAE0 -  -  -  -  ;The status register will be pushed to the stack with the break
 2888 D1:CAE0 -  -  -  -  ;flag set to 1. However, when retrieved during RTI or by a PLP
 2889 D1:CAE0 -  -  -  -  ;instruction, the break flag will be ignored.
 2890 D1:CAE0 -  -  -  -  ;The interrupt disable flag is not set automatically.
 2891 D1:CAE0 -  -  -  -  ;
 2892 D1:CAE0 -  -  -  -  ;interrupt,             N	Z	C	I	D	V
 2893 D1:CAE0 -  -  -  -  ;push PC+2, push SR     -	-	-	1	-	-
 2894 D1:CAE0 -  -  -  -  ;implied	BRK	00	1	7  
 2895 D1:CAE0 -  -  -  -  inst6502_brk:
 2896 D1:CAE0 ED 33 07 -      ADDCYC(7)
 2897 D1:CAE3 21 00 39 D0     ld  hl,STACKBASE
 2898 D1:CAE7 DD 6E 03 -      ld  L,(ix+REGSP)
 2899 D1:CAEA 52 DD 17 05     ld.s de,(ix+REGPC)
 2900 D1:CAEE 13 -  -  -      inc de      ;that extra spacer.
 2901 D1:CAEF 72 -  -  -      ld  (hl),d
 2902 D1:CAF0 2D -  -  -      dec L
 2903 D1:CAF1 73 -  -  -      ld  (hl),e
 2904 D1:CAF2 2D -  -  -      dec L
 2905 D1:CAF3 DD 7E 04 -      ld  a,(ix+REGSR)
 2906 D1:CAF6 CB D7 -  -      set SF_INT,a
 2907 D1:CAF8 77 -  -  -      ld  (hl),a
 2908 D1:CAF9 2D -  -  -      dec L
 2909 D1:CAFA DD 75 03 -      ld  (ix+REGSP),L
 2910 D1:CAFD B7 -  -  -      WAS_NMI_TRIGGERED
 2911 D1:CAFE 01 FE 00 00     ld  bc,$FE  ;IRQ vector
 2912 D1:CB02 28 04 -  -      jr  z,+_
 2913 D1:CB04 01 FA 00 00     ld  bc,$FA  ;NMI vector, if NMI is hijacking this instruction.
 2914 D1:CB08 21 F8 47 D0 _:  ld  hl,(BASETABLE_STRIDE*$FF)+PAGETABLE
 2915 D1:CB0C ED 27 -  -      ld  hl,(hl)
 2916 D1:CB0E 09 -  -  -      add hl,bc
 2917 D1:CB0F ED 17 -  -      ld  de,(hl)
 2918 D1:CB11 52 DD 1F 05     ld.s (ix+REGPC),de
 2919 D1:CB15 C3 96 B3 D1     jp  i6502FirstLoad
 2920 D1:CB19 -  -  -  -  
 2921 D1:CB19 -  -  -  -  ;RTI - Return from Interrupt
 2922 D1:CB19 -  -  -  -  ;The status register is pulled with the break flag
 2923 D1:CB19 -  -  -  -  ;and bit 5 ignored. Then PC is pulled from the stack.
 2924 D1:CB19 -  -  -  -  ;pull SR, pull PC      N Z C I D V
 2925 D1:CB19 -  -  -  -  ;                      from stack
 2926 D1:CB19 -  -  -  -  ;implied	RTI	40	1	6  
 2927 D1:CB19 -  -  -  -  inst6502_rti:
 2928 D1:CB19 21 00 39 D0     ld  hl,STACKBASE
 2929 D1:CB1D DD 6E 03 -      ld  l,(ix+REGSP)
 2930 D1:CB20 2C -  -  -      inc l
 2931 D1:CB21 7E -  -  -      ld  a,(hl)
 2932 D1:CB22 2C -  -  -      inc l
 2933 D1:CB23 5E -  -  -      ld  e,(hl)
 2934 D1:CB24 2C -  -  -      inc l
 2935 D1:CB25 56 -  -  -      ld  d,(hl)
 2936 D1:CB26 DD 75 03 -      ld  (ix+REGSP),l
 2937 D1:CB29 52 DD 1F 05     ld.s (ix+REGPC),de
 2938 D1:CB2D DD 46 04 -      ld  b,(ix+REGSR)
 2939 D1:CB30 A8 -  -  -      xor a,b
 2940 D1:CB31 E6 DF -  -      and a,%11011111
 2941 D1:CB33 A8 -  -  -      xor a,b
 2942 D1:CB34 DD 77 04 -      ld  (ix+REGSR),a
 2943 D1:CB37 ED 33 06 -      ADDCYC(6)
 2944 D1:CB3A C3 96 B3 D1     jp  i6502FirstLoad
 2945 D1:CB3E -  -  -  -  
 2946 D1:CB3E -  -  -  -  
 2947 D1:CB3E -  -  -  -  
 2948 D1:CB3E -  -  -  -  ;-----------------------------------------------------------------------------
 2949 D1:CB3E -  -  -  -  ;-----------------------------------------------------------------------------
 2950 D1:CB3E -  -  -  -  ;-----------------------------------------------------------------------------
 2951 D1:CB3E -  -  -  -  ;Instructions by type: Jumps and Subroutines
 2952 D1:CB3E -  -  -  -  
 2953 D1:CB3E -  -  -  -  ;absolute	JMP oper	4C	3	3  
 2954 D1:CB3E -  -  -  -  inst6052_jmp_abs:
 2955 D1:CB3E 7E -  -  -      ld  a,(hl)
 2956 D1:CB3F 23 -  -  -      inc hl
 2957 D1:CB40 1C -  -  -      inc e
 2958 D1:CB41 20 0F -  -      jr  nz,+_
 2959 D1:CB43 DD 56 06 -      ld  d,(ix+REGPC+1)
 2960 D1:CB46 14 -  -  -      inc d
 2961 D1:CB47 1E 08 -  -      ld  e,BASETABLE_STRIDE
 2962 D1:CB49 ED 5C -  -      mlt de
 2963 D1:CB4B 21 00 40 D0     ld  hl,PAGETABLE
 2964 D1:CB4F 19 -  -  -      add hl,de
 2965 D1:CB50 ED 27 -  -      ld  hl,(hl)
 2966 D1:CB52 DD 77 05 -  _:  ld  (ix+REGPC+0),a
 2967 D1:CB55 7E -  -  -      ld  a,(hl)
 2968 D1:CB56 DD 77 06 -      ld  (ix+REGPC+1),a
 2969 D1:CB59 ED 33 03 -      ADDCYC(3)
 2970 D1:CB5C C3 96 B3 D1     jp i6502FirstLoad
 2971 D1:CB60 -  -  -  -  
 2972 D1:CB60 -  -  -  -  
 2973 D1:CB60 -  -  -  -  ;Note: In earlier 6502 implementations, cross-page reads on indirect is bugged.
 2974 D1:CB60 -  -  -  -  ;   The end effect would be that inst6502_jmp_indir_splitread would wrap around
 2975 D1:CB60 -  -  -  -  ;   to the start of the current page rather than try to read the next page.
 2976 D1:CB60 -  -  -  -  ;indirect	JMP (oper)	6C	3	5  
 2977 D1:CB60 -  -  -  -  inst6502_jmp_indir:
 2978 D1:CB60 ED 33 05 -      ADDCYC(5)
 2979 D1:CB63 -  -  -  -      ;Doing much the same as abs_split_start below, except with fewer things
 2980 D1:CB63 -  -  -  -      ;because we don't need to preserve any of the other stuff.
 2981 D1:CB63 4E -  -  -      ld  c,(hl)
 2982 D1:CB64 23 -  -  -      inc hl
 2983 D1:CB65 1C -  -  -      inc e
 2984 D1:CB66 20 0F -  -      jr  nz,+_
 2985 D1:CB68 DD 56 06 -      ld  d,(ix+REGPC+1)
 2986 D1:CB6B 14 -  -  -      inc d
 2987 D1:CB6C 1E 08 -  -      ld  e,BASETABLE_STRIDE
 2988 D1:CB6E ED 5C -  -      mlt de
 2989 D1:CB70 21 00 40 D0     ld  hl,PAGETABLE
 2990 D1:CB74 19 -  -  -      add hl,de
 2991 D1:CB75 ED 27 -  -      ld  hl,(hl)
 2992 D1:CB77 46 -  -  -  _:  ld  b,(hl)
 2993 D1:CB78 79 -  -  -      ld  a,c
 2994 D1:CB79 0C -  -  -      inc c   ;check if there will be a split read.
 2995 D1:CB7A 0E 08 -  -      ld  c,BASETABLE_STRIDE  ;Flags not affected
 2996 D1:CB7C ED 4C -  -      mlt bc                  ;Flags not affected
 2997 D1:CB7E 21 00 40 D0     ld  hl,PAGETABLE        ;Flags not affected
 2998 D1:CB82 CA 97 CB D1     jp  z,inst6502_jmp_indir_splitRead
 2999 D1:CB86 09 -  -  -      add hl,bc
 3000 D1:CB87 ED 27 -  -      ld  hl,(hl)
 3001 D1:CB89 06 00 -  -      ld  b,0
 3002 D1:CB8B 4F -  -  -      ld  c,a
 3003 D1:CB8C 09 -  -  -      add hl,bc
 3004 D1:CB8D ED 27 -  -      ld  hl,(hl)
 3005 D1:CB8F 52 DD 2F 05     ld.s (ix+REGPC),hl
 3006 D1:CB93 C3 96 B3 D1     jp  i6502FirstLoad
 3007 D1:CB97 -  -  -  -  inst6502_jmp_indir_splitRead:
 3008 D1:CB97 09 -  -  -      add hl,bc
 3009 D1:CB98 ED 27 -  -      ld  hl,(hl)
 3010 D1:CB9A 7E -  -  -      ld  a,(hl)  ;high byte
 3011 D1:CB9B 01 FF 00 00     ld  bc,255
 3012 D1:CB9F 09 -  -  -      add hl,bc
 3013 D1:CBA0 4E -  -  -      ld  c,(hl)  ;low byte
 3014 D1:CBA1 47 -  -  -      ld  b,a
 3015 D1:CBA2 52 DD 0F 05     ld.s (ix+REGPC),bc
 3016 D1:CBA6 C3 96 B3 D1     jp  i6502FirstLoad
 3017 D1:CBAA -  -  -  -  
 3018 D1:CBAA -  -  -  -  
 3019 D1:CBAA -  -  -  -  
 3020 D1:CBAA -  -  -  -  
 3021 D1:CBAA -  -  -  -  
 3022 D1:CBAA -  -  -  -  ;absolute	JSR oper	20	3	6  
 3023 D1:CBAA -  -  -  -  inst6502_jsr:
 3024 D1:CBAA DD 56 06 -      ld  d,(ix+REGPC+1)
 3025 D1:CBAD 4E -  -  -      ld  c,(hl)
 3026 D1:CBAE 23 -  -  -      inc hl
 3027 D1:CBAF 1C -  -  -      inc e
 3028 D1:CBB0 20 10 -  -      jr  nz,+_
 3029 D1:CBB2 14 -  -  -      inc d
 3030 D1:CBB3 7A -  -  -      ld  a,d
 3031 D1:CBB4 1E 08 -  -      ld  e,BASETABLE_STRIDE
 3032 D1:CBB6 ED 5C -  -      mlt de
 3033 D1:CBB8 21 00 40 D0     ld  hl,PAGETABLE
 3034 D1:CBBC 19 -  -  -      add hl,de
 3035 D1:CBBD ED 27 -  -      ld  hl,(hl)
 3036 D1:CBBF 57 -  -  -      ld  d,a
 3037 D1:CBC0 1E 00 -  -      ld  e,0
 3038 D1:CBC2 46 -  -  -  _:  ld  b,(hl)
 3039 D1:CBC3 -  -  -  -      ;push de to 6502stack
 3040 D1:CBC3 21 00 39 D0     ld  hl,STACKBASE
 3041 D1:CBC7 DD 6E 03 -      ld  l,(ix+REGSP)
 3042 D1:CBCA 72 -  -  -      ld  (hl),d
 3043 D1:CBCB 2D -  -  -      dec l
 3044 D1:CBCC 73 -  -  -      ld  (hl),e
 3045 D1:CBCD 2D -  -  -      dec l
 3046 D1:CBCE DD 75 03 -      ld  (ix+REGSP),l
 3047 D1:CBD1 52 DD 0F 05     ld.s (ix+REGPC),bc
 3048 D1:CBD5 ED 33 06 -      ADDCYC(6)
 3049 D1:CBD8 C3 96 B3 D1     jp  i6502FirstLoad
 3050 D1:CBDC -  -  -  -  
 3051 D1:CBDC -  -  -  -  ;implied	RTS	60	1	6
 3052 D1:CBDC -  -  -  -  inst6502_rts:
 3053 D1:CBDC 21 00 39 D0     ld  hl,STACKBASE
 3054 D1:CBE0 DD 6E 03 -      ld  l,(ix+REGSP)
 3055 D1:CBE3 2C -  -  -      inc l
 3056 D1:CBE4 5E -  -  -      ld  e,(hl)
 3057 D1:CBE5 2C -  -  -      inc l
 3058 D1:CBE6 56 -  -  -      ld  d,(hl)
 3059 D1:CBE7 DD 75 03 -      ld  (ix+REGSP),l
 3060 D1:CBEA 13 -  -  -      inc de
 3061 D1:CBEB 52 DD 1F 05     ld.s (ix+REGPC),de
 3062 D1:CBEF ED 33 06 -      ADDCYC(6)
 3063 D1:CBF2 C3 96 B3 D1     jp  i6502FirstLoad
 3064 D1:CBF6 -  -  -  -  
 3065 D1:CBF6 -  -  -  -  
 3066 D1:CBF6 -  -  -  -  ;-----------------------------------------------------------------------------
 3067 D1:CBF6 -  -  -  -  ;-----------------------------------------------------------------------------
 3068 D1:CBF6 -  -  -  -  ;-----------------------------------------------------------------------------
 3069 D1:CBF6 -  -  -  -  ;Instructions by type: Miscellaneous
 3070 D1:CBF6 -  -  -  -  ;BIT - Test Bits in Memory with Accumulator
 3071 D1:CBF6 -  -  -  -  ;
 3072 D1:CBF6 -  -  -  -  ;bits 7 and 6 of operand are transfered to bit 7 and 6 of SR (N,V);
 3073 D1:CBF6 -  -  -  -  ;the zero-flag is set according to the result of the operand AND
 3074 D1:CBF6 -  -  -  -  ;the accumulator (set, if the result is zero, unset otherwise).
 3075 D1:CBF6 -  -  -  -  ;This allows a quick check of a few bits at once without affecting
 3076 D1:CBF6 -  -  -  -  ;any of the registers, other than the status register (SR).
 3077 D1:CBF6 -  -  -  -  
 3078 D1:CBF6 -  -  -  -  ;A AND M -> Z, M7 -> N, M6 -> V             N	Z	C	I	D	V
 3079 D1:CBF6 -  -  -  -  ;                                           M7	+	-	-	-	M6
 3080 D1:CBF6 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 3081 D1:CBF6 -  -  -  -  ;zeropage	BIT oper	24	2	3  
 3082 D1:CBF6 -  -  -  -  inst6502_bit_zp:
 3083 D1:CBF6 ED 33 03 -      ADDCYC(3)
 3084 D1:CBF9 7E -  -  -      ld  a,(hl)
 3085 D1:CBFA 01 00 38 D0     ld  bc,ZEROPAGE
 3086 D1:CBFE 81 -  -  -      add a,c
 3087 D1:CBFF 4F -  -  -      ld  c,a
 3088 D1:CC00 0A -  -  -      ld  a,(bc)
 3089 D1:CC01 4F -  -  -      ld  c,a
 3090 D1:CC02 DD A6 00 -  _:  and a,(ix+REGA)
 3091 D1:CC05 79 -  -  -      ld  a,c     ;discard result, get bits from OPERANDs
 3092 D1:CC06 CB 8F -  -      res SF_ZERO,a
 3093 D1:CC08 20 02 -  -      jr  nz,$+4
 3094 D1:CC0A CB CF -  -      set SF_ZERO,a
 3095 D1:CC0C DD 46 04 -      ld  b,(ix+REGSR)    ;keep bits in flag other than NZ and V
 3096 D1:CC0F A8 -  -  -      xor a,b
 3097 D1:CC10 E6 C2 -  -      and a,%11000010     ;1=keepA, 0=discardA,keepB
 3098 D1:CC12 A8 -  -  -      xor a,b
 3099 D1:CC13 DD 77 04 -      ld  (ix+REGSR),a
 3100 D1:CC16 C3 AC B3 D1     jp  i6502NextLoad
 3101 D1:CC1A -  -  -  -  
 3102 D1:CC1A -  -  -  -  ;absolute	BIT oper	2C	3	4  
 3103 D1:CC1A -  -  -  -  inst6502_bit_abs:
 3104 D1:CC1A ED 33 04 -      ADDCYC(4)
 3105 D1:CC1D CD 21 B6 D1     call subroutine6502_abs_split_start
 3106 D1:CC21 E5 -  -  -      push hl
 3107 D1:CC22 50 -  -  -          ld  d,b
 3108 D1:CC23 79 -  -  -          ld  a,c
 3109 D1:CC24 0E 08 -  -          ld  c,BASETABLE_STRIDE
 3110 D1:CC26 ED 4C -  -          mlt bc
 3111 D1:CC28 21 00 40 D0         ld  hl,PAGETABLE
 3112 D1:CC2C 09 -  -  -          add hl,bc
 3113 D1:CC2D ED 27 -  -          ld  hl,(hl)
 3114 D1:CC2F 06 00 -  -          ld  b,0
 3115 D1:CC31 4F -  -  -          ld  c,a
 3116 D1:CC32 09 -  -  -          add hl,bc   ;full address
 3117 D1:CC33 7E -  -  -          READ_ACCESS
 3118 D1:CC34 4F -  -  -          ld  c,a
 3119 D1:CC35 E1 -  -  -      pop hl
 3120 D1:CC36 18 CA -  -      jr  -_    
 3121 D1:CC38 -  -  -  -  
 3122 D1:CC38 -  -  -  -  ;NOP - No Operation
 3123 D1:CC38 -  -  -  -  ;implied	NOP	EA	1	2  
 3124 D1:CC38 -  -  -  -  inst6502_nop:
 3125 D1:CC38 ED 33 02 -      ADDCYC(2)
 3126 D1:CC3B C3 C5 B3 D1     jp  i6502FinishLoad
 3127 D1:CC3F -  -  -  -  
 3128 D1:CC3F -  -  -  -  
 3129 D1:CC3F -  -  -  -  
 3130 D1:CC3F -  -  -  -  ;##############################################################################
 3131 D1:CC3F -  -  -  -  ;##############################################################################
 3132 D1:CC3F -  -  -  -  ;##############################################################################
 3133 D1:CC3F -  -  -  -  ;##-----#-#####-#####-----##---###---##-########-----#--##-##---#-----#----####
 3134 D1:CC3F -  -  -  -  ;####-###-#####-#####-#####-#####-###-#-##########-###--##-#-######-###-###-###
 3135 D1:CC3F -  -  -  -  ;####-###-#####-#####---###-##--#-----#-##########-###-#-#-##---###-###-----###
 3136 D1:CC3F -  -  -  -  ;####-###-#####-#####-#####-###-#-###-#-##########-###-##--#####-##-###-##-####
 3137 D1:CC3F -  -  -  -  ;##-----#-----#-----#-----##----#-###-#-----####-----#-##--#----###-###-###-#-#
 3138 D1:CC3F -  -  -  -  ;##############################################################################
 3139 D1:CC3F -  -  -  -  ;##############################################################################
 3140 D1:CC3F -  -  -  -  ;##############################################################################
 3141 D1:CC3F -  -  -  -  ;Instructions by type: Illegal Instructions
 3142 D1:CC3F -  -  -  -  
 3143 D1:CC3F -  -  -  -  ;NOP - No operations. All the no-operations. Even the ones that are linked
 3144 D1:CC3F -  -  -  -  ;to the machinery that operates an addressing mode, but does nothing with it.
 3145 D1:CC3F -  -  -  -  ;A whole lotta nothing.
 3146 D1:CC3F -  -  -  -  
 3147 D1:CC3F -  -  -  -  ;Bytes:1, Cycles:2, Opcodes: 1A, 3A, 5A, 7A, DA, FA
 3148 D1:CC3F -  -  -  -  inst6502_nop_implied:
 3149 D1:CC3F ED 33 02 -      ADDCYC(2)
 3150 D1:CC42 C3 C5 B3 D1     jp  i6502FinishLoad
 3151 D1:CC46 -  -  -  -  
 3152 D1:CC46 -  -  -  -  ;Bytes:2, Cycles:2, Opcodes: 80, 82, 89, C2, E2
 3153 D1:CC46 -  -  -  -  inst6502_nop_imm:
 3154 D1:CC46 ED 33 02 -      ADDCYC(2)
 3155 D1:CC49 C3 AC B3 D1     jp  i6502NextLoad
 3156 D1:CC4D -  -  -  -  
 3157 D1:CC4D -  -  -  -  ;Bytes:2, Cycles:3, Opcodes: 04, 44, 64
 3158 D1:CC4D -  -  -  -  inst6502_nop_zp:
 3159 D1:CC4D ED 33 03 -      ADDCYC(3)
 3160 D1:CC50 C3 AC B3 D1     jp  i6502NextLoad
 3161 D1:CC54 -  -  -  -  
 3162 D1:CC54 -  -  -  -  ;Bytes:2, Cycles:4, Opcodes: 14, 34, 54, 74, D4, F4
 3163 D1:CC54 -  -  -  -  inst6502_nop_zpx:
 3164 D1:CC54 ED 33 04 -      ADDCYC(4)
 3165 D1:CC57 C3 AC B3 D1     jp  i6502NextLoad
 3166 D1:CC5B -  -  -  -  
 3167 D1:CC5B -  -  -  -  ;Bytes:3, Cycles:4, Opcode: 0C
 3168 D1:CC5B -  -  -  -  inst6502_nop_abs:
 3169 D1:CC5B ED 33 04 -      ADDCYC(4)
 3170 D1:CC5E E5 -  -  -      push hl
 3171 D1:CC5F CD 21 B6 D1         call subroutine6502_abs_split_start
 3172 D1:CC63 7E -  -  -          READ_ACCESS
 3173 D1:CC64 E1 -  -  -      pop hl
 3174 D1:CC65 C3 AC B3 D1     jp  i6502NextLoad
 3175 D1:CC69 -  -  -  -  
 3176 D1:CC69 -  -  -  -  ;Note: This thing latches all over the place but does nothing. All these
 3177 D1:CC69 -  -  -  -  ;READ_ACCESS thingies are in case the ROM wants to clear PPU flags or something
 3178 D1:CC69 -  -  -  -  ;using these instructions. But the one below is noted to do the touchy-feelies
 3179 D1:CC69 -  -  -  -  ;at ABS and (ABS+X)&0xFF
 3180 D1:CC69 -  -  -  -  ;Bytes:3, Cycles:4*, Opcodes: 1C, 3C, 5C, 7C, DC, FC
 3181 D1:CC69 -  -  -  -  inst6502_nop_absx:
 3182 D1:CC69 ED 33 04 -      ADDCYC(4)
 3183 D1:CC6C CD 42 B6 D1     PUSH_ABSXSPLIT
 3184 D1:CC70 7E -  -  -          READ_ACCESS
 3185 D1:CC71 E1 -  -  -      pop hl
 3186 D1:CC72 C3 AC B3 D1     jp  i6502NextLoad
 3187 D1:CC76 -  -  -  -  
 3188 D1:CC76 -  -  -  -  ;-----------------------------------------------------------------------------
 3189 D1:CC76 -  -  -  -  ;ALR (ASR) - AND oper + LSR
 3190 D1:CC76 -  -  -  -  ;Affects CZN
 3191 D1:CC76 -  -  -  -  
 3192 D1:CC76 -  -  -  -  ;immediate	ALR #oper	4B	2	2 
 3193 D1:CC76 -  -  -  -  inst6502_alr_imm:
 3194 D1:CC76 ED 33 02 -      ADDCYC(2)
 3195 D1:CC79 DD 7E 00 -      ld  a,(ix+REGA)
 3196 D1:CC7C A6 -  -  -      and a,(hl)
 3197 D1:CC7D CB 3F -  -      srl a   ;Must do it this way. A-optimized instr do not affect Z
 3198 D1:CC7F DD 77 00 -      ld  (ix+REGA),a
 3199 D1:CC82 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3200 D1:CC9C C3 AC B3 D1     jp  i6502NextLoad
 3201 D1:CCA0 -  -  -  -  
 3202 D1:CCA0 -  -  -  -  ;-----------------------------------------------------------------------------
 3203 D1:CCA0 -  -  -  -  
 3204 D1:CCA0 -  -  -  -  ;ANC [ANC (ANC2)] - AND oper + set Carry as if ASL [ROL]
 3205 D1:CCA0 -  -  -  -  
 3206 D1:CCA0 -  -  -  -  ;immediate	ANC #oper	0B	2	2 
 3207 D1:CCA0 -  -  -  -  ;immediate	ANC #oper	2B	2	2
 3208 D1:CCA0 -  -  -  -  instr6502_anc_imm:
 3209 D1:CCA0 -  -  -  -  instr6502_anc2_imm:
 3210 D1:CCA0 ED 33 02 -      ADDCYC(2)
 3211 D1:CCA3 DD 7E 00 -      ld  a,(ix+REGA)
 3212 D1:CCA6 A6 -  -  -      and a,(hl)
 3213 D1:CCA7 DD 77 00 -      ld  (ix+REGA),a
 3214 D1:CCAA CB 07 -  -      rlc a
 3215 D1:CCAC DD 7E 04 -      ld  a,(ix+REGSR)
 3216 D1:CCAF -  -  -  -      ;A small optimiztion here, letting us merge OPRFLG_C and OPRFLG_N
 3217 D1:CCAF CB 87 -  -      res SF_CARRY,a
 3218 D1:CCB1 CB BF -  -      res SF_NEG,a
 3219 D1:CCB3 30 04 -  -      jr  nc,+_
 3220 D1:CCB5 CB C7 -  -      set SF_CARRY,a
 3221 D1:CCB7 CB FF -  -      set SF_NEG,a
 3222 D1:CCB9 CB 8F -  -  _:  res SF_ZERO,a
 3223 D1:CCBB 20 02 -  -      jr  nz,$+4
 3224 D1:CCBD CB CF -  -      set SF_ZERO,a
 3225 D1:CCBF DD 77 04 -      ld  (ix+REGSR),a
 3226 D1:CCC2 C3 AC B3 D1     jp  i6502NextLoad
 3227 D1:CCC6 -  -  -  -  
 3228 D1:CCC6 -  -  -  -  ;-----------------------------------------------------------------------------
 3229 D1:CCC6 -  -  -  -  
 3230 D1:CCC6 -  -  -  -  ;ANE (XAA) - (A OR ??) AND X AND oper -> A
 3231 D1:CCC6 -  -  -  -  ;immediate	ANE #oper	8B	2	2  	††
 3232 D1:CCC6 -  -  -  -  instr6502_ane_imm:
 3233 D1:CCC6 ED 33 02 -      ADDCYC(2)
 3234 D1:CCC9 ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3235 D1:CCCB DD B6 00 -      or  a,(ix+REGA)
 3236 D1:CCCE DD A6 01 -      and a,(ix+REGX)
 3237 D1:CCD1 A6 -  -  -      and a,(hl)
 3238 D1:CCD2 DD 77 00 -      ld  (ix+REGA),a
 3239 D1:CCD5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3240 D1:CCE9 C3 AC B3 D1     jp  i6502NextLoad
 3241 D1:CCED -  -  -  -  
 3242 D1:CCED -  -  -  -  ;-----------------------------------------------------------------------------
 3243 D1:CCED -  -  -  -  
 3244 D1:CCED -  -  -  -  
 3245 D1:CCED -  -  -  -  ;ARR - AND OPER + ROR
 3246 D1:CCED -  -  -  -  ;Something hinky is going on with the flags. "This operation involves the adder"
 3247 D1:CCED -  -  -  -  ;I need to get a better handle over what that might be.
 3248 D1:CCED -  -  -  -  ;CVZN flags affected.
 3249 D1:CCED -  -  -  -  ;
 3250 D1:CCED -  -  -  -  ;Primary sources reads:
 3251 D1:CCED -  -  -  -  ;----------------------
 3252 D1:CCED -  -  -  -  ;This operation involves the adder:
 3253 D1:CCED -  -  -  -  ;V-flag is set according to (A AND oper) + oper
 3254 D1:CCED -  -  -  -  ;The carry is not set, but bit 7 (sign) is exchanged with the carry
 3255 D1:CCED -  -  -  -  ;A AND oper, C -> [76543210] -> C
 3256 D1:CCED -  -  -  -  ;
 3257 D1:CCED -  -  -  -  ;Secondary source reads:
 3258 D1:CCED -  -  -  -  ;-----------------------
 3259 D1:CCED -  -  -  -  ;Similar to AND #i then ROR A, except sets the flags differently. 
 3260 D1:CCED -  -  -  -  ;N and Z are normal, but C is bit 6 and V is bit 6 xor bit 5. 
 3261 D1:CCED -  -  -  -  ;A fast way to perform signed division by 4 is: CMP #$80; ARR #$FF; ROR. 
 3262 D1:CCED -  -  -  -  ;This can be extended to larger powers of two.
 3263 D1:CCED -  -  -  -  
 3264 D1:CCED -  -  -  -  ;immediate	ARR #oper	6B	2	2  
 3265 D1:CCED -  -  -  -  instr6502_arr_imm:
 3266 D1:CCED ED 33 02 -      ADDCYC(2)
 3267 D1:CCF0 DD 7E 00 -      ld  a,(ix+REGA)
 3268 D1:CCF3 A6 -  -  -      and a,(hl)
 3269 D1:CCF4 47 -  -  -      ld  b,a
 3270 D1:CCF5 DD 7E 04 -      ld  a,(ix+REGSR)
 3271 D1:CCF8 4F -  -  -      ld  c,a
 3272 D1:CCF9 0F -  -  -      rrca    ;extract carry. This carry will go into sign bit of result
 3273 D1:CCFA CB B9 -  -      res SF_NEG,c
 3274 D1:CCFC 30 02 -  -      jr  nc,$+4
 3275 D1:CCFE CB F9 -  -      set SF_NEG,c
 3276 D1:CD00 CB 18 -  -      rr b
 3277 D1:CD02 CB 89 -  -      res SF_ZERO,c
 3278 D1:CD04 20 02 -  -      jr  nz,$+4
 3279 D1:CD06 CB C9 -  -      set SF_ZERO,c
 3280 D1:CD08 DD 70 00 -      ld  (ix+REGA),b
 3281 D1:CD0B 78 -  -  -      ld  a,b
 3282 D1:CD0C E6 40 -  -      and a,%01000000
 3283 D1:CD0E CB 81 -  -      res SF_CARRY,c
 3284 D1:CD10 28 02 -  -      jr  z,$+4
 3285 D1:CD12 CB C1 -  -      set SF_CARRY,c
 3286 D1:CD14 0F -  -  -      rrca
 3287 D1:CD15 EE 20 -  -      xor a,%00100000
 3288 D1:CD17 E6 20 -  -      and a,%00100000
 3289 D1:CD19 CB B1 -  -      res SF_OVER,c
 3290 D1:CD1B 28 02 -  -      jr  z,$+4
 3291 D1:CD1D CB F1 -  -      set SF_OVER,c
 3292 D1:CD1F DD 71 04 -      ld  (ix+REGSR),c
 3293 D1:CD22 -  -  -  -      ;TODO: Figure out a more efficient way to emulate this instruction.
 3294 D1:CD22 C3 AC B3 D1     jp  i6502NextLoad
 3295 D1:CD26 -  -  -  -  
 3296 D1:CD26 -  -  -  -  ;-----------------------------------------------------------------------------
 3297 D1:CD26 -  -  -  -  ;DCP (DCM) - DEC oper + CMP oper
 3298 D1:CD26 -  -  -  -  ;M-1->M, A-M. Affects CZN
 3299 D1:CD26 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3300 D1:CD26 -  -  -  -  
 3301 D1:CD26 -  -  -  -  ;zeropage	DCP oper	C7	2	5  	
 3302 D1:CD26 -  -  -  -  inst6502_dcp_zp:
 3303 D1:CD26 ED 33 05 -      ADDCYC(5)
 3304 D1:CD29 7E -  -  -      ld  a,(hl)
 3305 D1:CD2A 01 00 38 D0     ld  bc,ZEROPAGE
 3306 D1:CD2E 81 -  -  -      add a,c
 3307 D1:CD2F 4F -  -  -      ld  c,a
 3308 D1:CD30 0A -  -  -      ld  a,(bc)
 3309 D1:CD31 3D -  -  -      dec a
 3310 D1:CD32 02 -  -  -      ld  (bc),a
 3311 D1:CD33 47 -  -  -      ld  b,a
 3312 D1:CD34 C3 17 B7 D1     jp  subroutine6502_cmp_combined_end
 3313 D1:CD38 -  -  -  -  
 3314 D1:CD38 -  -  -  -  ;zeropage,X	DCP oper,X	D7	2	6  	
 3315 D1:CD38 -  -  -  -  inst6520_dcp_zpx:
 3316 D1:CD38 ED 33 06 -      ADDCYC(6)
 3317 D1:CD3B 7E -  -  -      ld  a,(hl)
 3318 D1:CD3C 01 00 38 D0     ld  bc,ZEROPAGE
 3319 D1:CD40 81 -  -  -      add a,c
 3320 D1:CD41 DD 86 01 -      add a,(ix+REGX)
 3321 D1:CD44 4F -  -  -      ld  c,a
 3322 D1:CD45 0A -  -  -      ld  a,(bc)
 3323 D1:CD46 3D -  -  -      dec a
 3324 D1:CD47 02 -  -  -      ld  (bc),a
 3325 D1:CD48 47 -  -  -      ld  b,a
 3326 D1:CD49 C3 17 B7 D1     jp  subroutine6502_cmp_combined_end
 3327 D1:CD4D -  -  -  -  
 3328 D1:CD4D -  -  -  -  ;absolute	DCP oper	CF	3	6  	
 3329 D1:CD4D -  -  -  -  inst6502_dcp_abs:
 3330 D1:CD4D ED 33 06 -      ADDCYC(6)
 3331 D1:CD50 CD 21 B6 D1     call subroutine6502_abs_split_start
 3332 D1:CD54 E5 -  -  -      push hl
 3333 D1:CD55 50 -  -  -          ld  d,b
 3334 D1:CD56 79 -  -  -          ld  a,c
 3335 D1:CD57 0E 08 -  -          ld  c,BASETABLE_STRIDE
 3336 D1:CD59 ED 4C -  -          mlt bc
 3337 D1:CD5B 21 00 40 D0         ld  hl,PAGETABLE
 3338 D1:CD5F 09 -  -  -          add hl,bc
 3339 D1:CD60 ED 27 -  -          ld  hl,(hl)
 3340 D1:CD62 06 00 -  -          ld  b,0
 3341 D1:CD64 4F -  -  -          ld  c,a
 3342 D1:CD65 09 -  -  -          add hl,bc   ;full address
 3343 D1:CD66 7E -  -  -          READ_ACCESS
 3344 D1:CD67 3D -  -  -          dec a
 3345 D1:CD68 47 -  -  -          ld b,a
 3346 D1:CD69 C5 -  -  -          push bc
 3347 D1:CD6A 70 -  -  -              WRITE_ACCESS
 3348 D1:CD6B C1 -  -  -          pop bc
 3349 D1:CD6C E1 -  -  -      pop hl
 3350 D1:CD6D C3 17 B7 D1     jp  subroutine6502_cmp_combined_end
 3351 D1:CD71 -  -  -  -  
 3352 D1:CD71 -  -  -  -  ;absolut,X	DCP oper,X	DF	3	7  	
 3353 D1:CD71 -  -  -  -  inst6502_dcp_absx:
 3354 D1:CD71 ED 33 07 -      ADDCYC(7)
 3355 D1:CD74 CD 7E B6 D1     PUSH_ABSXSPLIT_NODEP
 3356 D1:CD78 7E -  -  -          READ_ACCESS
 3357 D1:CD79 3D -  -  -          dec a
 3358 D1:CD7A 47 -  -  -          ld  b,a
 3359 D1:CD7B C5 -  -  -          push bc
 3360 D1:CD7C 70 -  -  -              WRITE_ACCESS
 3361 D1:CD7D C1 -  -  -          pop bc
 3362 D1:CD7E E1 -  -  -      pop hl
 3363 D1:CD7F C3 17 B7 D1     jp  subroutine6502_cmp_combined_end
 3364 D1:CD83 -  -  -  -  
 3365 D1:CD83 -  -  -  -  ;absolut,Y	DCP oper,Y	DB	3	7  	
 3366 D1:CD83 -  -  -  -  inst6502_dcp_absy:
 3367 D1:CD83 ED 33 07 -      ADDCYC(7)
 3368 D1:CD86 CD 79 B6 D1     PUSH_ABSYSPLIT_NODEP
 3369 D1:CD8A 7E -  -  -          READ_ACCESS
 3370 D1:CD8B 3D -  -  -          dec a
 3371 D1:CD8C 47 -  -  -          ld  b,a
 3372 D1:CD8D C5 -  -  -          push bc
 3373 D1:CD8E 70 -  -  -              WRITE_ACCESS
 3374 D1:CD8F C1 -  -  -          pop bc
 3375 D1:CD90 E1 -  -  -      pop hl
 3376 D1:CD91 C3 17 B7 D1     jp  subroutine6502_cmp_combined_end
 3377 D1:CD95 -  -  -  -  
 3378 D1:CD95 -  -  -  -  ;(indirect,X)	DCP (oper,X)	C3	2	8  	
 3379 D1:CD95 -  -  -  -  inst6502_dcp_indx:
 3380 D1:CD95 ED 33 08 -      ADDCYC(8)
 3381 D1:CD98 E5 -  -  -      push hl
 3382 D1:CD99 7E -  -  -          ld  a,(hl)
 3383 D1:CD9A 21 00 38 D0         ld  hl,ZEROPAGE
 3384 D1:CD9E 85 -  -  -          add a,L
 3385 D1:CD9F DD 86 01 -          add a,(ix+REGX)
 3386 D1:CDA2 6F -  -  -          ld  L,a
 3387 D1:CDA3 7E -  -  -          ld  a,(hl)
 3388 D1:CDA4 2C -  -  -          inc L
 3389 D1:CDA5 56 -  -  -          ld  d,(hl)
 3390 D1:CDA6 42 -  -  -          ld  b,d
 3391 D1:CDA7 0E 08 -  -          ld  c,BASETABLE_STRIDE
 3392 D1:CDA9 ED 4C -  -          mlt bc
 3393 D1:CDAB 21 00 40 D0         ld  hl,PAGETABLE
 3394 D1:CDAF 09 -  -  -          add hl,bc
 3395 D1:CDB0 ED 27 -  -          ld  hl,(hl)
 3396 D1:CDB2 06 00 -  -          ld  b,0
 3397 D1:CDB4 4F -  -  -          ld  c,a
 3398 D1:CDB5 09 -  -  -          add hl,bc
 3399 D1:CDB6 7E -  -  -          READ_ACCESS
 3400 D1:CDB7 3D -  -  -          dec a
 3401 D1:CDB8 47 -  -  -          ld  b,a
 3402 D1:CDB9 C5 -  -  -          push bc
 3403 D1:CDBA 70 -  -  -              WRITE_ACCESS
 3404 D1:CDBB C1 -  -  -          pop bc
 3405 D1:CDBC E1 -  -  -      pop hl
 3406 D1:CDBD C3 17 B7 D1     jp  subroutine6502_cmp_combined_end
 3407 D1:CDC1 -  -  -  -  
 3408 D1:CDC1 -  -  -  -  ;(indirect),Y	DCP (oper),Y	D3	2	8  
 3409 D1:CDC1 -  -  -  -  inst6502_dcp_indy:
 3410 D1:CDC1 ED 33 08 -      ADDCYC(8)
 3411 D1:CDC4 E5 -  -  -      push hl
 3412 D1:CDC5 7E -  -  -          ld  a,(hl)
 3413 D1:CDC6 21 00 38 D0         ld  hl,ZEROPAGE
 3414 D1:CDCA 85 -  -  -          add a,L
 3415 D1:CDCB 6F -  -  -          ld  L,a
 3416 D1:CDCC 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3417 D1:CDCD 2C -  -  -          inc L
 3418 D1:CDCE DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3419 D1:CDD1 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3420 D1:CDD2 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3421 D1:CDD4 24 -  -  -          inc h
 3422 D1:CDD5 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3423 D1:CDD6 2E 08 -  -          ld  L,BASETABLE_STRIDE
 3424 D1:CDD8 ED 6C -  -          mlt hl          ;23.
 3425 D1:CDDA 01 00 40 D0         ld  bc,PAGETABLE
 3426 D1:CDDE 09 -  -  -          add hl,bc
 3427 D1:CDDF ED 27 -  -          ld  hl,(hl)     ;address get.
 3428 D1:CDE1 01 00 00 00         ld  bc,0
 3429 D1:CDE5 4F -  -  -          ld  c,a
 3430 D1:CDE6 09 -  -  -          add hl,bc       ;Full address get.
 3431 D1:CDE7 7E -  -  -          READ_ACCESS
 3432 D1:CDE8 3D -  -  -          dec a
 3433 D1:CDE9 47 -  -  -          ld  b,a
 3434 D1:CDEA C5 -  -  -          push bc
 3435 D1:CDEB 70 -  -  -              WRITE_ACCESS
 3436 D1:CDEC C1 -  -  -          pop bc
 3437 D1:CDED E1 -  -  -      pop hl
 3438 D1:CDEE C3 17 B7 D1     jp  subroutine6502_cmp_combined_end
 3439 D1:CDF2 -  -  -  -  
 3440 D1:CDF2 -  -  -  -  ;-----------------------------------------------------------------------------
 3441 D1:CDF2 -  -  -  -  ;ISC (ISB, INS) - INC oper + SBC oper
 3442 D1:CDF2 -  -  -  -  ;M+1->M, A-M-not(C)->A, affects VCZN
 3443 D1:CDF2 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3444 D1:CDF2 -  -  -  -  
 3445 D1:CDF2 -  -  -  -  
 3446 D1:CDF2 -  -  -  -  
 3447 D1:CDF2 -  -  -  -  ;zeropage	ISC oper	E7	2	5  	
 3448 D1:CDF2 -  -  -  -  inst6502_isc_zp:
 3449 D1:CDF2 ED 33 05 -      ADDCYC(5)
 3450 D1:CDF5 7E -  -  -      ld  a,(hl)
 3451 D1:CDF6 01 00 38 D0     ld  bc,ZEROPAGE
 3452 D1:CDFA 81 -  -  -      add a,c
 3453 D1:CDFB 4F -  -  -      ld  c,a
 3454 D1:CDFC 0A -  -  -      ld  a,(bc)
 3455 D1:CDFD 3C -  -  -      inc a
 3456 D1:CDFE 02 -  -  -      ld  (bc),a
 3457 D1:CDFF 4F -  -  -      ld  c,a
 3458 D1:CE00 C3 E4 B6 D1     jp  subroutine6502_sbc_combined_end
 3459 D1:CE04 -  -  -  -  
 3460 D1:CE04 -  -  -  -  ;zeropage,X	ISC oper,X	F7	2	6  
 3461 D1:CE04 -  -  -  -  inst6520_isc_zpx:
 3462 D1:CE04 ED 33 06 -      ADDCYC(6)
 3463 D1:CE07 7E -  -  -      ld  a,(hl)
 3464 D1:CE08 01 00 38 D0     ld  bc,ZEROPAGE
 3465 D1:CE0C 81 -  -  -      add a,c
 3466 D1:CE0D DD 86 01 -      add a,(ix+REGX)
 3467 D1:CE10 4F -  -  -      ld  c,a
 3468 D1:CE11 0A -  -  -      ld  a,(bc)
 3469 D1:CE12 3C -  -  -      inc a
 3470 D1:CE13 02 -  -  -      ld  (bc),a
 3471 D1:CE14 4F -  -  -      ld  c,a
 3472 D1:CE15 C3 E4 B6 D1     jp  subroutine6502_sbc_combined_end
 3473 D1:CE19 -  -  -  -  
 3474 D1:CE19 -  -  -  -  ;absolute	ISC oper	EF	3	6  	
 3475 D1:CE19 -  -  -  -  inst6502_isc_abs:
 3476 D1:CE19 ED 33 06 -      ADDCYC(6)
 3477 D1:CE1C CD 21 B6 D1     call subroutine6502_abs_split_start
 3478 D1:CE20 E5 -  -  -      push hl
 3479 D1:CE21 50 -  -  -          ld  d,b
 3480 D1:CE22 79 -  -  -          ld  a,c
 3481 D1:CE23 0E 08 -  -          ld  c,BASETABLE_STRIDE
 3482 D1:CE25 ED 4C -  -          mlt bc
 3483 D1:CE27 21 00 40 D0         ld  hl,PAGETABLE
 3484 D1:CE2B 09 -  -  -          add hl,bc
 3485 D1:CE2C ED 27 -  -          ld  hl,(hl)
 3486 D1:CE2E 06 00 -  -          ld  b,0
 3487 D1:CE30 4F -  -  -          ld  c,a
 3488 D1:CE31 09 -  -  -          add hl,bc   ;full address
 3489 D1:CE32 7E -  -  -          READ_ACCESS
 3490 D1:CE33 3C -  -  -          inc a
 3491 D1:CE34 47 -  -  -          ld b,a
 3492 D1:CE35 4F -  -  -          ld c,a
 3493 D1:CE36 C5 -  -  -          push bc
 3494 D1:CE37 70 -  -  -              WRITE_ACCESS
 3495 D1:CE38 C1 -  -  -          pop bc
 3496 D1:CE39 E1 -  -  -      pop hl
 3497 D1:CE3A C3 E4 B6 D1     jp  subroutine6502_sbc_combined_end
 3498 D1:CE3E -  -  -  -  
 3499 D1:CE3E -  -  -  -  ;absolut,X	ISC oper,X	FF	3	7  	
 3500 D1:CE3E -  -  -  -  inst6502_isc_absx:
 3501 D1:CE3E ED 33 07 -      ADDCYC(7)
 3502 D1:CE41 CD 7E B6 D1     PUSH_ABSXSPLIT_NODEP
 3503 D1:CE45 7E -  -  -          READ_ACCESS
 3504 D1:CE46 3C -  -  -          inc a
 3505 D1:CE47 47 -  -  -          ld  b,a
 3506 D1:CE48 4F -  -  -          ld  c,a
 3507 D1:CE49 C5 -  -  -          push bc
 3508 D1:CE4A 70 -  -  -              WRITE_ACCESS
 3509 D1:CE4B C1 -  -  -          pop bc
 3510 D1:CE4C E1 -  -  -      pop hl
 3511 D1:CE4D C3 E4 B6 D1     jp  subroutine6502_sbc_combined_end
 3512 D1:CE51 -  -  -  -  
 3513 D1:CE51 -  -  -  -  ;absolut,Y	ISC oper,Y	FB	3	7  	
 3514 D1:CE51 -  -  -  -  inst6502_isc_absy:
 3515 D1:CE51 ED 33 07 -      ADDCYC(7)
 3516 D1:CE54 CD 79 B6 D1     PUSH_ABSYSPLIT_NODEP
 3517 D1:CE58 7E -  -  -          READ_ACCESS
 3518 D1:CE59 3C -  -  -          inc a
 3519 D1:CE5A 47 -  -  -          ld  b,a
 3520 D1:CE5B 4F -  -  -          ld  c,a
 3521 D1:CE5C C5 -  -  -          push bc
 3522 D1:CE5D 70 -  -  -              WRITE_ACCESS
 3523 D1:CE5E C1 -  -  -          pop bc
 3524 D1:CE5F E1 -  -  -      pop hl
 3525 D1:CE60 C3 E4 B6 D1     jp  subroutine6502_sbc_combined_end
 3526 D1:CE64 -  -  -  -  
 3527 D1:CE64 -  -  -  -  ;(indirect,X)	ISC (oper,X)	E3	2	8  	
 3528 D1:CE64 -  -  -  -  inst6502_isc_indx:
 3529 D1:CE64 ED 33 08 -      ADDCYC(8)
 3530 D1:CE67 E5 -  -  -      push hl
 3531 D1:CE68 7E -  -  -          ld  a,(hl)
 3532 D1:CE69 21 00 38 D0         ld  hl,ZEROPAGE
 3533 D1:CE6D 85 -  -  -          add a,L
 3534 D1:CE6E DD 86 01 -          add a,(ix+REGX)
 3535 D1:CE71 6F -  -  -          ld  L,a
 3536 D1:CE72 7E -  -  -          ld  a,(hl)
 3537 D1:CE73 2C -  -  -          inc L
 3538 D1:CE74 56 -  -  -          ld  d,(hl)
 3539 D1:CE75 42 -  -  -          ld  b,d
 3540 D1:CE76 0E 08 -  -          ld  c,BASETABLE_STRIDE
 3541 D1:CE78 ED 4C -  -          mlt bc
 3542 D1:CE7A 21 00 40 D0         ld  hl,PAGETABLE
 3543 D1:CE7E 09 -  -  -          add hl,bc
 3544 D1:CE7F ED 27 -  -          ld  hl,(hl)
 3545 D1:CE81 06 00 -  -          ld  b,0
 3546 D1:CE83 4F -  -  -          ld  c,a
 3547 D1:CE84 09 -  -  -          add hl,bc
 3548 D1:CE85 7E -  -  -          READ_ACCESS
 3549 D1:CE86 3C -  -  -          inc a
 3550 D1:CE87 47 -  -  -          ld  b,a
 3551 D1:CE88 4F -  -  -          ld  c,a
 3552 D1:CE89 C5 -  -  -          push bc
 3553 D1:CE8A 70 -  -  -              WRITE_ACCESS
 3554 D1:CE8B C1 -  -  -          pop bc
 3555 D1:CE8C E1 -  -  -      pop hl
 3556 D1:CE8D C3 E4 B6 D1     jp  subroutine6502_sbc_combined_end
 3557 D1:CE91 -  -  -  -  
 3558 D1:CE91 -  -  -  -  ;(indirect),Y	ISC (oper),Y	F3	2	8  
 3559 D1:CE91 -  -  -  -  inst6502_isc_indy:
 3560 D1:CE91 ED 33 08 -      ADDCYC(8)
 3561 D1:CE94 E5 -  -  -      push hl
 3562 D1:CE95 7E -  -  -          ld  a,(hl)
 3563 D1:CE96 21 00 38 D0         ld  hl,ZEROPAGE
 3564 D1:CE9A 85 -  -  -          add a,L
 3565 D1:CE9B 6F -  -  -          ld  L,a
 3566 D1:CE9C 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3567 D1:CE9D 2C -  -  -          inc L
 3568 D1:CE9E DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3569 D1:CEA1 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3570 D1:CEA2 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3571 D1:CEA4 24 -  -  -          inc h
 3572 D1:CEA5 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3573 D1:CEA6 2E 08 -  -          ld  L,BASETABLE_STRIDE
 3574 D1:CEA8 ED 6C -  -          mlt hl          ;23.
 3575 D1:CEAA 01 00 40 D0         ld  bc,PAGETABLE
 3576 D1:CEAE 09 -  -  -          add hl,bc
 3577 D1:CEAF ED 27 -  -          ld  hl,(hl)     ;address get.
 3578 D1:CEB1 01 00 00 00         ld  bc,0
 3579 D1:CEB5 4F -  -  -          ld  c,a
 3580 D1:CEB6 09 -  -  -          add hl,bc       ;Full address get.
 3581 D1:CEB7 7E -  -  -          READ_ACCESS
 3582 D1:CEB8 3C -  -  -          inc a
 3583 D1:CEB9 47 -  -  -          ld  b,a
 3584 D1:CEBA 4F -  -  -          ld  c,a
 3585 D1:CEBB C5 -  -  -          push bc
 3586 D1:CEBC 70 -  -  -              WRITE_ACCESS
 3587 D1:CEBD C1 -  -  -          pop bc
 3588 D1:CEBE E1 -  -  -      pop hl
 3589 D1:CEBF C3 E4 B6 D1     jp  subroutine6502_sbc_combined_end
 3590 D1:CEC3 -  -  -  -  ;-----------------------------------------------------------------------------
 3591 D1:CEC3 -  -  -  -  ;LAS (LAR) - LDA/TSX oper
 3592 D1:CEC3 -  -  -  -  ;M AND SP -> A, X, SP. Affects ZN
 3593 D1:CEC3 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3594 D1:CEC3 -  -  -  -  ;absolut,Y	LAS oper,Y	BB	3	4* 
 3595 D1:CEC3 -  -  -  -  inst6502_las_absy:
 3596 D1:CEC3 ED 33 04 -      ADDCYC(4)
 3597 D1:CEC6 CD 3D B6 D1     PUSH_ABSYSPLIT
 3598 D1:CECA 7E -  -  -          READ_ACCESS
 3599 D1:CECB E1 -  -  -      pop hl
 3600 D1:CECC DD A6 03 -      and a,(ix+REGSP)
 3601 D1:CECF DD 77 00 -      ld  (ix+REGA),A
 3602 D1:CED2 DD 77 01 -      ld  (ix+REGX),A
 3603 D1:CED5 DD 77 03 -      ld  (ix+REGSP),A
 3604 D1:CED8 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3605 D1:CEEC C3 AC B3 D1     jp i6502NextLoad
 3606 D1:CEF0 -  -  -  -  
 3607 D1:CEF0 -  -  -  -  ;-----------------------------------------------------------------------------
 3608 D1:CEF0 -  -  -  -  ;LAX - LDA oper + LDX oper
 3609 D1:CEF0 -  -  -  -  ;M -> A -> X. Flags affected: ZN
 3610 D1:CEF0 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3611 D1:CEF0 -  -  -  -  ;zeropage	LAX oper	A7	2	3  	
 3612 D1:CEF0 -  -  -  -  inst6502_lax_zp:
 3613 D1:CEF0 ED 33 03 -      ADDCYC(3)
 3614 D1:CEF3 7E -  -  -      ld  a,(hl)
 3615 D1:CEF4 01 00 38 D0     ld  bc,ZEROPAGE
 3616 D1:CEF8 81 -  -  -      add a,c
 3617 D1:CEF9 4F -  -  -      ld  c,a
 3618 D1:CEFA 0A -  -  -      ld  a,(bc)
 3619 D1:CEFB DD 77 00 -      ld  (ix+REGA),a
 3620 D1:CEFE DD 77 01 -      ld  (ix+REGX),a
 3621 D1:CF01 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3622 D1:CF15 C3 AC B3 D1     jp i6502NextLoad
 3623 D1:CF19 -  -  -  -  
 3624 D1:CF19 -  -  -  -  ;zeropage,Y	LAX oper,Y	B7	2	4  	
 3625 D1:CF19 -  -  -  -  inst6502_lax_zpy:
 3626 D1:CF19 ED 33 04 -      ADDCYC(4)
 3627 D1:CF1C 7E -  -  -      ld  a,(hl)
 3628 D1:CF1D 01 00 38 D0     ld  bc,ZEROPAGE
 3629 D1:CF21 81 -  -  -      add a,c
 3630 D1:CF22 DD 86 02 -      add a,(ix+REGY)
 3631 D1:CF25 4F -  -  -      ld  c,a
 3632 D1:CF26 0A -  -  -      ld  a,(bc)
 3633 D1:CF27 DD 77 00 -      ld  (ix+REGA),a
 3634 D1:CF2A DD 77 01 -      ld  (ix+REGX),a
 3635 D1:CF2D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3636 D1:CF41 C3 AC B3 D1     jp i6502NextLoad
 3637 D1:CF45 -  -  -  -  
 3638 D1:CF45 -  -  -  -  ;absolute	LAX oper	AF	3	4  	
 3639 D1:CF45 -  -  -  -  inst6502_lax_abs:
 3640 D1:CF45 ED 33 04 -      ADDCYC(4)
 3641 D1:CF48 CD 21 B6 D1     call subroutine6502_abs_split_start
 3642 D1:CF4C E5 -  -  -      push hl
 3643 D1:CF4D 50 -  -  -          ld  d,b
 3644 D1:CF4E 79 -  -  -          ld  a,c
 3645 D1:CF4F 0E 08 -  -          ld  c,BASETABLE_STRIDE
 3646 D1:CF51 ED 4C -  -          mlt bc
 3647 D1:CF53 21 00 40 D0         ld  hl,PAGETABLE
 3648 D1:CF57 09 -  -  -          add hl,bc
 3649 D1:CF58 ED 27 -  -          ld  hl,(hl)
 3650 D1:CF5A 06 00 -  -          ld  b,0
 3651 D1:CF5C 4F -  -  -          ld  c,a
 3652 D1:CF5D 09 -  -  -          add hl,bc   ;full address
 3653 D1:CF5E 7E -  -  -          READ_ACCESS
 3654 D1:CF5F DD 77 00 -          ld (ix+REGA),a
 3655 D1:CF62 DD 77 01 -          ld (ix+REGX),a
 3656 D1:CF65 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3657 D1:CF79 E1 -  -  -      pop hl
 3658 D1:CF7A C3 AC B3 D1     jp i6502NextLoad
 3659 D1:CF7E -  -  -  -  
 3660 D1:CF7E -  -  -  -  ;absolut,Y	LAX oper,Y	BF	3	4* 	
 3661 D1:CF7E -  -  -  -  inst6502_lax_absy:
 3662 D1:CF7E ED 33 04 -      ADDCYC(4)
 3663 D1:CF81 CD 3D B6 D1     PUSH_ABSYSPLIT
 3664 D1:CF85 7E -  -  -          READ_ACCESS
 3665 D1:CF86 DD 77 00 -          ld (ix+REGA),a
 3666 D1:CF89 DD 77 01 -          ld (ix+REGX),a
 3667 D1:CF8C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3668 D1:CFA0 E1 -  -  -      pop hl
 3669 D1:CFA1 C3 AC B3 D1     jp i6502NextLoad
 3670 D1:CFA5 -  -  -  -  
 3671 D1:CFA5 -  -  -  -  ;(indirect,X)	LAX (oper,X)	A3	2	6  	
 3672 D1:CFA5 -  -  -  -  inst6502_lax_indx:
 3673 D1:CFA5 ED 33 06 -      ADDCYC(6)
 3674 D1:CFA8 E5 -  -  -      push hl
 3675 D1:CFA9 7E -  -  -          ld  a,(hl)
 3676 D1:CFAA 21 00 38 D0         ld  hl,ZEROPAGE
 3677 D1:CFAE 85 -  -  -          add a,L
 3678 D1:CFAF DD 86 01 -          add a,(ix+REGX)
 3679 D1:CFB2 6F -  -  -          ld  L,a
 3680 D1:CFB3 7E -  -  -          ld  a,(hl)
 3681 D1:CFB4 2C -  -  -          inc L
 3682 D1:CFB5 56 -  -  -          ld  d,(hl)
 3683 D1:CFB6 42 -  -  -          ld  b,d
 3684 D1:CFB7 0E 08 -  -          ld  c,BASETABLE_STRIDE
 3685 D1:CFB9 ED 4C -  -          mlt bc
 3686 D1:CFBB 21 00 40 D0         ld  hl,PAGETABLE
 3687 D1:CFBF 09 -  -  -          add hl,bc
 3688 D1:CFC0 ED 27 -  -          ld  hl,(hl)
 3689 D1:CFC2 06 00 -  -          ld  b,0
 3690 D1:CFC4 4F -  -  -          ld  c,a
 3691 D1:CFC5 09 -  -  -          add hl,bc
 3692 D1:CFC6 7E -  -  -          READ_ACCESS
 3693 D1:CFC7 DD 77 00 -          ld (ix+REGA),a
 3694 D1:CFCA DD 77 01 -          ld (ix+REGX),a
 3695 D1:CFCD DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3696 D1:CFE1 E1 -  -  -      pop hl
 3697 D1:CFE2 C3 AC B3 D1     jp i6502NextLoad
 3698 D1:CFE6 -  -  -  -  
 3699 D1:CFE6 -  -  -  -  ;(indirect),Y	LAX (oper),Y	B3	2	5* 
 3700 D1:CFE6 -  -  -  -  inst6502_lax_indy:
 3701 D1:CFE6 ED 33 05 -      ADDCYC(5)
 3702 D1:CFE9 E5 -  -  -      push hl
 3703 D1:CFEA 7E -  -  -          ld  a,(hl)
 3704 D1:CFEB 21 00 38 D0         ld  hl,ZEROPAGE
 3705 D1:CFEF 85 -  -  -          add a,L
 3706 D1:CFF0 6F -  -  -          ld  L,a
 3707 D1:CFF1 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3708 D1:CFF2 2C -  -  -          inc L
 3709 D1:CFF3 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3710 D1:CFF6 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3711 D1:CFF7 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3712 D1:CFF9 FD 23 -  -          ADDCYC(1)
 3713 D1:CFFB 24 -  -  -          inc h
 3714 D1:CFFC 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3715 D1:CFFD 2E 08 -  -          ld  L,BASETABLE_STRIDE
 3716 D1:CFFF ED 6C -  -          mlt hl          ;23.
 3717 D1:D001 01 00 40 D0         ld  bc,PAGETABLE
 3718 D1:D005 09 -  -  -          add hl,bc
 3719 D1:D006 ED 27 -  -          ld  hl,(hl)     ;address get.
 3720 D1:D008 01 00 00 00         ld  bc,0
 3721 D1:D00C 4F -  -  -          ld  c,a
 3722 D1:D00D 09 -  -  -          add hl,bc       ;Full address get.
 3723 D1:D00E 7E -  -  -          READ_ACCESS
 3724 D1:D00F DD 77 00 -          ld  (ix+REGA),a
 3725 D1:D012 DD 77 01 -          ld  (ix+REGX),a
 3726 D1:D015 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3727 D1:D029 E1 -  -  -      pop hl
 3728 D1:D02A C3 AC B3 D1     jp i6502NextLoad
 3729 D1:D02E -  -  -  -  
 3730 D1:D02E -  -  -  -  ;-----------------------------------------------------------------------------
 3731 D1:D02E -  -  -  -  ;LXA (LAX immediate)
 3732 D1:D02E -  -  -  -  ;Store * AND oper in A and X
 3733 D1:D02E -  -  -  -  ;Highly unstable, involves a 'magic' constant, see ANE
 3734 D1:D02E -  -  -  -  ;(A OR CONST) AND oper -> A -> X
 3735 D1:D02E -  -  -  -  ;immediate	LXA #oper	AB	2	2  	††
 3736 D1:D02E -  -  -  -  inst6502_lxa:
 3737 D1:D02E ED 33 02 -      ADDCYC(2)
 3738 D1:D031 ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3739 D1:D033 DD B6 00 -      or  a,(ix+REGA)
 3740 D1:D036 A6 -  -  -      and a,(hl)
 3741 D1:D037 DD 77 00 -      ld  (ix+REGA),a
 3742 D1:D03A DD 77 01 -      ld  (ix+REGX),a
 3743 D1:D03D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3744 D1:D051 C3 AC B3 D1     jp  i6502NextLoad
 3745 D1:D055 -  -  -  -  
 3746 D1:D055 -  -  -  -  ;-----------------------------------------------------------------------------
 3747 D1:D055 -  -  -  -  ;RLA - ROL oper + AND oper
 3748 D1:D055 -  -  -  -  ;M = C <- [76543210] <- C, A AND M -> A. flags CZN
 3749 D1:D055 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3750 D1:D055 -  -  -  -  ;zeropage	RLA oper	27	2	5  	
 3751 D1:D055 -  -  -  -  inst6502_rla_zp:
 3752 D1:D055 ED 33 05 -      ADDCYC(5)
 3753 D1:D058 7E -  -  -      ld  a,(hl)
 3754 D1:D059 01 00 38 D0     ld  bc,ZEROPAGE
 3755 D1:D05D 81 -  -  -      add a,c
 3756 D1:D05E 4F -  -  -      ld  c,a
 3757 D1:D05F DD 7E 04 -      ld  a,(ix+REGSR)
 3758 D1:D062 1F -  -  -      rra
 3759 D1:D063 0A -  -  -      ld  a,(bc)
 3760 D1:D064 17 -  -  -      rla
 3761 D1:D065 02 -  -  -      ld  (bc),a
 3762 D1:D066 -  -  -  -      ;Flag breakdown to optimize for split operation
 3763 D1:D066 DD 46 04 -      ld  b,(ix+REGSR)
 3764 D1:D069 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3765 D1:D06F DD A6 00 -      and a,(ix+REGA)
 3766 D1:D072 DD 77 00 -      ld  (ix+REGA),a
 3767 D1:D075 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3768 D1:D07B 87 -  -  -      add a,a
 3769 D1:D07C CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3770 D1:D082 DD 70 04 -      ld  (ix+REGSR),b
 3771 D1:D085 C3 AC B3 D1     jp i6502NextLoad
 3772 D1:D089 -  -  -  -  
 3773 D1:D089 -  -  -  -  ;zeropage,X	RLA oper,X	37	2	6  	
 3774 D1:D089 -  -  -  -  inst6502_rla_zpx:
 3775 D1:D089 ED 33 06 -      ADDCYC(6)
 3776 D1:D08C 7E -  -  -      ld  a,(hl)
 3777 D1:D08D 01 00 38 D0     ld  bc,ZEROPAGE
 3778 D1:D091 81 -  -  -      add a,c
 3779 D1:D092 DD 86 01 -      add a,(ix+REGX)
 3780 D1:D095 4F -  -  -      ld  c,a
 3781 D1:D096 DD 7E 04 -      ld  a,(ix+REGSR)
 3782 D1:D099 1F -  -  -      rra
 3783 D1:D09A 0A -  -  -      ld  a,(bc)
 3784 D1:D09B 17 -  -  -      rla
 3785 D1:D09C 02 -  -  -      ld  (bc),a
 3786 D1:D09D -  -  -  -      ;Flag breakdown to optimize for split operation
 3787 D1:D09D DD 46 04 -      ld  b,(ix+REGSR)
 3788 D1:D0A0 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3789 D1:D0A6 DD A6 00 -      and a,(ix+REGA)
 3790 D1:D0A9 DD 77 00 -      ld  (ix+REGA),a
 3791 D1:D0AC CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3792 D1:D0B2 87 -  -  -      add a,a
 3793 D1:D0B3 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3794 D1:D0B9 DD 70 04 -      ld  (ix+REGSR),b
 3795 D1:D0BC C3 AC B3 D1     jp i6502NextLoad
 3796 D1:D0C0 -  -  -  -  
 3797 D1:D0C0 -  -  -  -  ;absolute	RLA oper	2F	3	6  	
 3798 D1:D0C0 -  -  -  -  inst6502_rla_abs:
 3799 D1:D0C0 ED 33 06 -      ADDCYC(6)
 3800 D1:D0C3 CD 21 B6 D1     call subroutine6502_abs_split_start
 3801 D1:D0C7 E5 -  -  -      push hl
 3802 D1:D0C8 50 -  -  -          ld  d,b
 3803 D1:D0C9 79 -  -  -          ld  a,c
 3804 D1:D0CA 0E 08 -  -          ld  c,BASETABLE_STRIDE
 3805 D1:D0CC ED 4C -  -          mlt bc
 3806 D1:D0CE 21 00 40 D0         ld  hl,PAGETABLE
 3807 D1:D0D2 09 -  -  -          add hl,bc
 3808 D1:D0D3 ED 27 -  -          ld  hl,(hl)
 3809 D1:D0D5 06 00 -  -          ld  b,0
 3810 D1:D0D7 4F -  -  -          ld  c,a
 3811 D1:D0D8 09 -  -  -          add hl,bc   ;full address
 3812 D1:D0D9 7E -  -  -          READ_ACCESS
 3813 D1:D0DA DD 46 04 -          ld  b,(ix+REGSR)
 3814 D1:D0DD CB 18 -  -          rr b
 3815 D1:D0DF 17 -  -  -          rla
 3816 D1:D0E0 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3817 D1:D0E1 -  -  -  -          ;Split oper
 3818 D1:D0E1 DD 46 04 -          ld  b,(ix+REGSR)
 3819 D1:D0E4 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3820 D1:D0EA DD A6 00 -          and a,(ix+REGA)
 3821 D1:D0ED DD 77 00 -          ld  (ix+REGA),a
 3822 D1:D0F0 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3823 D1:D0F6 87 -  -  -          add a,a
 3824 D1:D0F7 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3825 D1:D0FD DD 70 04 -          ld  (ix+REGSR),b
 3826 D1:D100 41 -  -  -          ld  b,c
 3827 D1:D101 70 -  -  -          WRITE_ACCESS
 3828 D1:D102 E1 -  -  -      pop hl
 3829 D1:D103 C3 AC B3 D1     jp i6502NextLoad
 3830 D1:D107 -  -  -  -  
 3831 D1:D107 -  -  -  -  ;absolut,X	RLA oper,X	3F	3	7  	
 3832 D1:D107 -  -  -  -  inst6502_rla_absx:
 3833 D1:D107 ED 33 07 -      ADDCYC(7)
 3834 D1:D10A CD 7E B6 D1     PUSH_ABSXSPLIT_NODEP
 3835 D1:D10E 7E -  -  -          READ_ACCESS
 3836 D1:D10F DD 46 04 -          ld  b,(ix+REGSR)
 3837 D1:D112 CB 18 -  -          rr b
 3838 D1:D114 17 -  -  -          rla
 3839 D1:D115 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3840 D1:D116 -  -  -  -          ;Split oper
 3841 D1:D116 DD 46 04 -          ld  b,(ix+REGSR)
 3842 D1:D119 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3843 D1:D11F DD A6 00 -          and a,(ix+REGA)
 3844 D1:D122 DD 77 00 -          ld  (ix+REGA),a
 3845 D1:D125 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3846 D1:D12B 87 -  -  -          add a,a
 3847 D1:D12C CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3848 D1:D132 DD 70 04 -          ld  (ix+REGSR),b
 3849 D1:D135 41 -  -  -          ld  b,c
 3850 D1:D136 70 -  -  -          WRITE_ACCESS
 3851 D1:D137 E1 -  -  -      pop hl
 3852 D1:D138 C3 AC B3 D1     jp i6502NextLoad
 3853 D1:D13C -  -  -  -  
 3854 D1:D13C -  -  -  -  ;absolut,Y	RLA oper,Y	3B	3	7  	
 3855 D1:D13C -  -  -  -  inst6502_rla_absy:
 3856 D1:D13C ED 33 07 -      ADDCYC(7)
 3857 D1:D13F CD 79 B6 D1     PUSH_ABSYSPLIT_NODEP
 3858 D1:D143 7E -  -  -          READ_ACCESS
 3859 D1:D144 DD 46 04 -          ld  b,(ix+REGSR)
 3860 D1:D147 CB 18 -  -          rr b
 3861 D1:D149 17 -  -  -          rla
 3862 D1:D14A 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3863 D1:D14B -  -  -  -          ;Split oper
 3864 D1:D14B DD 46 04 -          ld  b,(ix+REGSR)
 3865 D1:D14E CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3866 D1:D154 DD A6 00 -          and a,(ix+REGA)
 3867 D1:D157 DD 77 00 -          ld  (ix+REGA),a
 3868 D1:D15A CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3869 D1:D160 87 -  -  -          add a,a
 3870 D1:D161 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3871 D1:D167 DD 70 04 -          ld  (ix+REGSR),b
 3872 D1:D16A 41 -  -  -          ld  b,c
 3873 D1:D16B 70 -  -  -          WRITE_ACCESS
 3874 D1:D16C E1 -  -  -      pop hl
 3875 D1:D16D C3 AC B3 D1     jp i6502NextLoad
 3876 D1:D171 -  -  -  -  
 3877 D1:D171 -  -  -  -  ;(indirect,X)	RLA (oper,X)	23	2	8  	
 3878 D1:D171 -  -  -  -  isnt6502_rla_indx:
 3879 D1:D171 ED 33 08 -      ADDCYC(8)
 3880 D1:D174 E5 -  -  -      push hl
 3881 D1:D175 7E -  -  -          ld  a,(hl)
 3882 D1:D176 21 00 38 D0         ld  hl,ZEROPAGE
 3883 D1:D17A 85 -  -  -          add a,L
 3884 D1:D17B DD 86 01 -          add a,(ix+REGX)
 3885 D1:D17E 6F -  -  -          ld  L,a
 3886 D1:D17F 7E -  -  -          ld  a,(hl)
 3887 D1:D180 2C -  -  -          inc L
 3888 D1:D181 56 -  -  -          ld  d,(hl)
 3889 D1:D182 42 -  -  -          ld  b,d
 3890 D1:D183 0E 08 -  -          ld  c,BASETABLE_STRIDE
 3891 D1:D185 ED 4C -  -          mlt bc
 3892 D1:D187 21 00 40 D0         ld  hl,PAGETABLE
 3893 D1:D18B 09 -  -  -          add hl,bc
 3894 D1:D18C ED 27 -  -          ld  hl,(hl)
 3895 D1:D18E 06 00 -  -          ld  b,0
 3896 D1:D190 4F -  -  -          ld  c,a
 3897 D1:D191 09 -  -  -          add hl,bc
 3898 D1:D192 7E -  -  -          READ_ACCESS
 3899 D1:D193 DD 46 04 -          ld  b,(ix+REGSR)
 3900 D1:D196 CB 18 -  -          rr b
 3901 D1:D198 17 -  -  -          rla
 3902 D1:D199 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3903 D1:D19A -  -  -  -          ;Split oper
 3904 D1:D19A DD 46 04 -          ld  b,(ix+REGSR)
 3905 D1:D19D CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3906 D1:D1A3 DD A6 00 -          and a,(ix+REGA)
 3907 D1:D1A6 DD 77 00 -          ld  (ix+REGA),a
 3908 D1:D1A9 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3909 D1:D1AF 87 -  -  -          add a,a
 3910 D1:D1B0 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3911 D1:D1B6 DD 70 04 -          ld  (ix+REGSR),b
 3912 D1:D1B9 41 -  -  -          ld  b,c
 3913 D1:D1BA 70 -  -  -          WRITE_ACCESS
 3914 D1:D1BB E1 -  -  -      pop hl
 3915 D1:D1BC C3 AC B3 D1     jp  i6502NextLoad
 3916 D1:D1C0 -  -  -  -  
 3917 D1:D1C0 -  -  -  -  ;(indirect),Y	RLA (oper),Y	33	2	8  
 3918 D1:D1C0 -  -  -  -  inst6502_rla_indy:
 3919 D1:D1C0 ED 33 08 -      ADDCYC(8)
 3920 D1:D1C3 E5 -  -  -      push hl
 3921 D1:D1C4 7E -  -  -          ld  a,(hl)
 3922 D1:D1C5 21 00 38 D0         ld  hl,ZEROPAGE
 3923 D1:D1C9 85 -  -  -          add a,L
 3924 D1:D1CA 6F -  -  -          ld  L,a
 3925 D1:D1CB 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3926 D1:D1CC 2C -  -  -          inc L
 3927 D1:D1CD DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3928 D1:D1D0 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3929 D1:D1D1 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3930 D1:D1D3 24 -  -  -          inc h
 3931 D1:D1D4 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3932 D1:D1D5 2E 08 -  -          ld  L,BASETABLE_STRIDE
 3933 D1:D1D7 ED 6C -  -          mlt hl          ;23.
 3934 D1:D1D9 01 00 40 D0         ld  bc,PAGETABLE
 3935 D1:D1DD 09 -  -  -          add hl,bc
 3936 D1:D1DE ED 27 -  -          ld  hl,(hl)     ;address get.
 3937 D1:D1E0 01 00 00 00         ld  bc,0
 3938 D1:D1E4 4F -  -  -          ld  c,a
 3939 D1:D1E5 09 -  -  -          add hl,bc       ;Full address get.
 3940 D1:D1E6 7E -  -  -          READ_ACCESS
 3941 D1:D1E7 DD 46 04 -          ld  b,(ix+REGSR)
 3942 D1:D1EA CB 18 -  -          rr b
 3943 D1:D1EC 17 -  -  -          rla
 3944 D1:D1ED 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3945 D1:D1EE -  -  -  -          ;Split oper
 3946 D1:D1EE DD 46 04 -          ld  b,(ix+REGSR)
 3947 D1:D1F1 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3948 D1:D1F7 DD A6 00 -          and a,(ix+REGA)
 3949 D1:D1FA DD 77 00 -          ld  (ix+REGA),a
 3950 D1:D1FD CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3951 D1:D203 87 -  -  -          add a,a
 3952 D1:D204 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3953 D1:D20A DD 70 04 -          ld  (ix+REGSR),b
 3954 D1:D20D 41 -  -  -          ld  b,c
 3955 D1:D20E 70 -  -  -          WRITE_ACCESS
 3956 D1:D20F E1 -  -  -      pop hl
 3957 D1:D210 C3 AC B3 D1     jp  i6502NextLoad
 3958 D1:D214 -  -  -  -  
 3959 D1:D214 -  -  -  -  ;-----------------------------------------------------------------------------
 3960 D1:D214 -  -  -  -  ;RRA
 3961 D1:D214 -  -  -  -  ;ROR oper + ADC oper
 3962 D1:D214 -  -  -  -  ;M = C -> [76543210] -> C, A + M + C -> A, C. Affects VCZN
 3963 D1:D214 -  -  -  -  
 3964 D1:D214 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3965 D1:D214 -  -  -  -  ;zeropage	RRA oper	67	2	5  	
 3966 D1:D214 -  -  -  -  inst6502_rra_zp:
 3967 D1:D214 ED 33 05 -      ADDCYC(5)
 3968 D1:D217 7E -  -  -      ld  a,(hl)
 3969 D1:D218 01 00 38 D0     ld  bc,ZEROPAGE
 3970 D1:D21C 81 -  -  -      add a,c
 3971 D1:D21D 4F -  -  -      ld  c,a
 3972 D1:D21E DD 7E 04 -      ld  a,(ix+REGSR)
 3973 D1:D221 1F -  -  -      rra
 3974 D1:D222 0A -  -  -      ld  a,(bc)
 3975 D1:D223 1F -  -  -      rra
 3976 D1:D224 02 -  -  -      ld  (bc),a
 3977 D1:D225 4F -  -  -      ld  c,a
 3978 D1:D226 C3 B3 B6 D1     jp  subroutine6502_adc_combined_end
 3979 D1:D22A -  -  -  -  
 3980 D1:D22A -  -  -  -  ;zeropage,X	RRA oper,X	77	2	6  	
 3981 D1:D22A -  -  -  -  inst6502_rra_zpx:
 3982 D1:D22A ED 33 06 -      ADDCYC(6)
 3983 D1:D22D 7E -  -  -      ld  a,(hl)
 3984 D1:D22E 01 00 38 D0     ld  bc,ZEROPAGE
 3985 D1:D232 81 -  -  -      add a,c
 3986 D1:D233 DD 86 01 -      add a,(ix+REGX)
 3987 D1:D236 4F -  -  -      ld  c,a
 3988 D1:D237 DD 7E 04 -      ld  a,(ix+REGSR)
 3989 D1:D23A 1F -  -  -      rra
 3990 D1:D23B 0A -  -  -      ld  a,(bc)
 3991 D1:D23C 1F -  -  -      rra
 3992 D1:D23D 02 -  -  -      ld  (bc),a
 3993 D1:D23E 4F -  -  -      ld  c,a
 3994 D1:D23F C3 B3 B6 D1     jp  subroutine6502_adc_combined_end
 3995 D1:D243 -  -  -  -  
 3996 D1:D243 -  -  -  -  ;absolute	RRA oper	6F	3	6  	
 3997 D1:D243 -  -  -  -  inst6502_rra_abs:
 3998 D1:D243 ED 33 06 -      ADDCYC(6)
 3999 D1:D246 CD 21 B6 D1     call subroutine6502_abs_split_start
 4000 D1:D24A E5 -  -  -      push hl
 4001 D1:D24B 50 -  -  -          ld  d,b
 4002 D1:D24C 79 -  -  -          ld  a,c
 4003 D1:D24D 0E 08 -  -          ld  c,BASETABLE_STRIDE
 4004 D1:D24F ED 4C -  -          mlt bc
 4005 D1:D251 21 00 40 D0         ld  hl,PAGETABLE
 4006 D1:D255 09 -  -  -          add hl,bc
 4007 D1:D256 ED 27 -  -          ld  hl,(hl)
 4008 D1:D258 06 00 -  -          ld  b,0
 4009 D1:D25A 4F -  -  -          ld  c,a
 4010 D1:D25B 09 -  -  -          add hl,bc   ;full address
 4011 D1:D25C 7E -  -  -          READ_ACCESS
 4012 D1:D25D DD 46 04 -          ld  b,(ix+REGSR)
 4013 D1:D260 CB 18 -  -          rr b
 4014 D1:D262 1F -  -  -          rra
 4015 D1:D263 47 -  -  -          ld  b,a
 4016 D1:D264 C5 -  -  -          push bc
 4017 D1:D265 70 -  -  -              WRITE_ACCESS
 4018 D1:D266 C1 -  -  -          pop bc
 4019 D1:D267 48 -  -  -          ld c,b
 4020 D1:D268 E1 -  -  -      pop hl
 4021 D1:D269 C3 B3 B6 D1     jp  subroutine6502_adc_combined_end
 4022 D1:D26D -  -  -  -  
 4023 D1:D26D -  -  -  -  ;absolut,X	RRA oper,X	7F	3	7  	
 4024 D1:D26D -  -  -  -  inst6502_rra_absx:
 4025 D1:D26D ED 33 07 -      ADDCYC(7)
 4026 D1:D270 CD 7E B6 D1     PUSH_ABSXSPLIT_NODEP
 4027 D1:D274 7E -  -  -          READ_ACCESS
 4028 D1:D275 DD 46 04 -          ld  b,(ix+REGSR)
 4029 D1:D278 CB 18 -  -          rr b
 4030 D1:D27A 1F -  -  -          rra
 4031 D1:D27B 47 -  -  -          ld  b,a
 4032 D1:D27C C5 -  -  -          push bc
 4033 D1:D27D 70 -  -  -              WRITE_ACCESS
 4034 D1:D27E C1 -  -  -          pop bc
 4035 D1:D27F 48 -  -  -          ld c,b
 4036 D1:D280 E1 -  -  -      pop hl
 4037 D1:D281 C3 B3 B6 D1     jp  subroutine6502_adc_combined_end
 4038 D1:D285 -  -  -  -  
 4039 D1:D285 -  -  -  -  ;absolut,Y	RRA oper,Y	7B	3	7  	
 4040 D1:D285 -  -  -  -  inst6502_rra_absy:
 4041 D1:D285 ED 33 07 -      ADDCYC(7)
 4042 D1:D288 CD 79 B6 D1     PUSH_ABSYSPLIT_NODEP
 4043 D1:D28C 7E -  -  -          READ_ACCESS
 4044 D1:D28D DD 46 04 -          ld  b,(ix+REGSR)
 4045 D1:D290 CB 18 -  -          rr b
 4046 D1:D292 1F -  -  -          rra
 4047 D1:D293 47 -  -  -          ld  b,a
 4048 D1:D294 C5 -  -  -          push bc
 4049 D1:D295 70 -  -  -              WRITE_ACCESS
 4050 D1:D296 C1 -  -  -          pop bc
 4051 D1:D297 48 -  -  -          ld c,b
 4052 D1:D298 E1 -  -  -      pop hl
 4053 D1:D299 C3 B3 B6 D1     jp  subroutine6502_adc_combined_end
 4054 D1:D29D -  -  -  -  
 4055 D1:D29D -  -  -  -  ;(indirect,X)	RRA (oper,X)	63	2	8  	
 4056 D1:D29D -  -  -  -  isnt6502_rra_indx:
 4057 D1:D29D ED 33 08 -      ADDCYC(8)
 4058 D1:D2A0 E5 -  -  -      push hl
 4059 D1:D2A1 7E -  -  -          ld  a,(hl)
 4060 D1:D2A2 21 00 38 D0         ld  hl,ZEROPAGE
 4061 D1:D2A6 85 -  -  -          add a,L
 4062 D1:D2A7 DD 86 01 -          add a,(ix+REGX)
 4063 D1:D2AA 6F -  -  -          ld  L,a
 4064 D1:D2AB 7E -  -  -          ld  a,(hl)
 4065 D1:D2AC 2C -  -  -          inc L
 4066 D1:D2AD 56 -  -  -          ld  d,(hl)
 4067 D1:D2AE 42 -  -  -          ld  b,d
 4068 D1:D2AF 0E 08 -  -          ld  c,BASETABLE_STRIDE
 4069 D1:D2B1 ED 4C -  -          mlt bc
 4070 D1:D2B3 21 00 40 D0         ld  hl,PAGETABLE
 4071 D1:D2B7 09 -  -  -          add hl,bc
 4072 D1:D2B8 ED 27 -  -          ld  hl,(hl)
 4073 D1:D2BA 06 00 -  -          ld  b,0
 4074 D1:D2BC 4F -  -  -          ld  c,a
 4075 D1:D2BD 09 -  -  -          add hl,bc
 4076 D1:D2BE 7E -  -  -          READ_ACCESS
 4077 D1:D2BF DD 46 04 -          ld  b,(ix+REGSR)
 4078 D1:D2C2 CB 18 -  -          rr b
 4079 D1:D2C4 1F -  -  -          rra
 4080 D1:D2C5 47 -  -  -          ld  b,a
 4081 D1:D2C6 C5 -  -  -          push bc
 4082 D1:D2C7 70 -  -  -              WRITE_ACCESS
 4083 D1:D2C8 C1 -  -  -          pop bc
 4084 D1:D2C9 48 -  -  -          ld c,b
 4085 D1:D2CA E1 -  -  -      pop hl
 4086 D1:D2CB C3 B3 B6 D1     jp  subroutine6502_adc_combined_end
 4087 D1:D2CF -  -  -  -  
 4088 D1:D2CF -  -  -  -  ;(indirect),Y	RRA (oper),Y	73	2	8  
 4089 D1:D2CF -  -  -  -  inst6502_rra_indy:
 4090 D1:D2CF ED 33 08 -      ADDCYC(8)
 4091 D1:D2D2 E5 -  -  -      push hl
 4092 D1:D2D3 7E -  -  -          ld  a,(hl)
 4093 D1:D2D4 21 00 38 D0         ld  hl,ZEROPAGE
 4094 D1:D2D8 85 -  -  -          add a,L
 4095 D1:D2D9 6F -  -  -          ld  L,a
 4096 D1:D2DA 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4097 D1:D2DB 2C -  -  -          inc L
 4098 D1:D2DC DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4099 D1:D2DF 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4100 D1:D2E0 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4101 D1:D2E2 24 -  -  -          inc h
 4102 D1:D2E3 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4103 D1:D2E4 2E 08 -  -          ld  L,BASETABLE_STRIDE
 4104 D1:D2E6 ED 6C -  -          mlt hl          ;23.
 4105 D1:D2E8 01 00 40 D0         ld  bc,PAGETABLE
 4106 D1:D2EC 09 -  -  -          add hl,bc
 4107 D1:D2ED ED 27 -  -          ld  hl,(hl)     ;address get.
 4108 D1:D2EF 01 00 00 00         ld  bc,0
 4109 D1:D2F3 4F -  -  -          ld  c,a
 4110 D1:D2F4 09 -  -  -          add hl,bc       ;Full address get.
 4111 D1:D2F5 7E -  -  -          READ_ACCESS
 4112 D1:D2F6 DD 46 04 -          ld  b,(ix+REGSR)
 4113 D1:D2F9 CB 18 -  -          rr b
 4114 D1:D2FB 1F -  -  -          rra
 4115 D1:D2FC 47 -  -  -          ld  b,a
 4116 D1:D2FD C5 -  -  -          push bc
 4117 D1:D2FE 70 -  -  -              WRITE_ACCESS
 4118 D1:D2FF C1 -  -  -          pop bc
 4119 D1:D300 48 -  -  -          ld c,b
 4120 D1:D301 E1 -  -  -      pop hl
 4121 D1:D302 C3 B3 B6 D1     jp  subroutine6502_adc_combined_end
 4122 D1:D306 -  -  -  -  
 4123 D1:D306 -  -  -  -  ;-----------------------------------------------------------------------------
 4124 D1:D306 -  -  -  -  ;SAX (AXS, AAX) - A AND X -> M
 4125 D1:D306 -  -  -  -  ;A and X are put on the bus at the same time (resulting effectively in an 
 4126 D1:D306 -  -  -  -  ;AND operation) and stored in M. Flags not affected.
 4127 D1:D306 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4128 D1:D306 -  -  -  -  ;zeropage	SAX oper	87	2	3  	
 4129 D1:D306 -  -  -  -  inst6502_sax_zp:
 4130 D1:D306 ED 33 03 -      ADDCYC(3)
 4131 D1:D309 7E -  -  -      ld  a,(hl)
 4132 D1:D30A 01 00 38 D0     ld  bc,ZEROPAGE
 4133 D1:D30E 81 -  -  -      add a,c
 4134 D1:D30F 4F -  -  -      ld  c,a
 4135 D1:D310 DD 7E 00 -      ld  a,(ix+REGA)
 4136 D1:D313 DD A6 01 -      and a,(ix+REGX)
 4137 D1:D316 02 -  -  -      ld  (bc),a
 4138 D1:D317 C9 -  -  -      ret
 4139 D1:D318 -  -  -  -  
 4140 D1:D318 -  -  -  -  ;zeropage,Y	SAX oper,Y	97	2	4  	
 4141 D1:D318 -  -  -  -  inst6502_sax_zpy:
 4142 D1:D318 ED 33 04 -      ADDCYC(4)
 4143 D1:D31B 7E -  -  -      ld  a,(hl)
 4144 D1:D31C 01 00 38 D0     ld  bc,ZEROPAGE
 4145 D1:D320 81 -  -  -      add a,c
 4146 D1:D321 DD 86 02 -      add a,(ix+REGY)
 4147 D1:D324 4F -  -  -      ld  c,a
 4148 D1:D325 DD 7E 00 -      ld  a,(ix+REGA)
 4149 D1:D328 DD A6 01 -      and a,(ix+REGX)
 4150 D1:D32B 02 -  -  -      ld  (bc),a
 4151 D1:D32C C9 -  -  -      ret
 4152 D1:D32D -  -  -  -  
 4153 D1:D32D -  -  -  -  ;absolute	SAX oper	8F	3	4  	
 4154 D1:D32D -  -  -  -  inst6502_sax_abs:
 4155 D1:D32D ED 33 04 -      ADDCYC(4)
 4156 D1:D330 CD 21 B6 D1     call subroutine6502_abs_split_start
 4157 D1:D334 E5 -  -  -      push hl
 4158 D1:D335 50 -  -  -          ld  d,b
 4159 D1:D336 79 -  -  -          ld  a,c
 4160 D1:D337 0E 08 -  -          ld  c,BASETABLE_STRIDE
 4161 D1:D339 ED 4C -  -          mlt bc
 4162 D1:D33B 21 00 40 D0         ld  hl,PAGETABLE
 4163 D1:D33F 09 -  -  -          add hl,bc
 4164 D1:D340 ED 27 -  -          ld  hl,(hl)
 4165 D1:D342 06 00 -  -          ld  b,0
 4166 D1:D344 4F -  -  -          ld  c,a
 4167 D1:D345 09 -  -  -          add hl,bc   ;full address
 4168 D1:D346 DD 7E 00 -          ld  a,(ix+REGA)
 4169 D1:D349 DD A6 01 -          and a,(ix+REGX)
 4170 D1:D34C 47 -  -  -          ld  b,a
 4171 D1:D34D 70 -  -  -          WRITE_ACCESS
 4172 D1:D34E E1 -  -  -      pop hl
 4173 D1:D34F C3 AC B3 D1     jp i6502NextLoad
 4174 D1:D353 -  -  -  -  
 4175 D1:D353 -  -  -  -  ;(indirect,X)	SAX (oper,X)	83	2	6  
 4176 D1:D353 -  -  -  -  inst6502_sax_indx:
 4177 D1:D353 ED 33 06 -      ADDCYC(6)
 4178 D1:D356 E5 -  -  -      push hl
 4179 D1:D357 7E -  -  -          ld  a,(hl)
 4180 D1:D358 21 00 38 D0         ld  hl,ZEROPAGE
 4181 D1:D35C 85 -  -  -          add a,L
 4182 D1:D35D DD 86 01 -          add a,(ix+REGX)
 4183 D1:D360 6F -  -  -          ld  L,a
 4184 D1:D361 7E -  -  -          ld  a,(hl)
 4185 D1:D362 2C -  -  -          inc L
 4186 D1:D363 56 -  -  -          ld  d,(hl)
 4187 D1:D364 42 -  -  -          ld  b,d
 4188 D1:D365 0E 08 -  -          ld  c,BASETABLE_STRIDE
 4189 D1:D367 ED 4C -  -          mlt bc
 4190 D1:D369 21 00 40 D0         ld  hl,PAGETABLE
 4191 D1:D36D 09 -  -  -          add hl,bc
 4192 D1:D36E ED 27 -  -          ld  hl,(hl)
 4193 D1:D370 06 00 -  -          ld  b,0
 4194 D1:D372 4F -  -  -          ld  c,a
 4195 D1:D373 09 -  -  -          add hl,bc
 4196 D1:D374 DD 7E 00 -          ld  a,(ix+REGA)
 4197 D1:D377 DD A6 01 -          and a,(ix+REGX)
 4198 D1:D37A 47 -  -  -          ld  b,a
 4199 D1:D37B E1 -  -  -      pop hl
 4200 D1:D37C C3 AC B3 D1     jp i6502NextLoad
 4201 D1:D380 -  -  -  -  
 4202 D1:D380 -  -  -  -  ;-----------------------------------------------------------------------------
 4203 D1:D380 -  -  -  -  ;SBX (AXS, SAX) - CMP and DEX at once, sets flags like CMP
 4204 D1:D380 -  -  -  -  ;(A AND X) - oper -> X.  Flags affected: CZN
 4205 D1:D380 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4206 D1:D380 -  -  -  -  ;immediate	SBX #oper	CB	2	2  
 4207 D1:D380 -  -  -  -  inst6502_sbx_imm:
 4208 D1:D380 DD 7E 00 -      ld  a,(ix+REGA)
 4209 D1:D383 DD A6 01 -      and a,(ix+REGX)
 4210 D1:D386 96 -  -  -      sub a,(hl)
 4211 D1:D387 DD 77 01 -      ld  (ix+REGX),a
 4212 D1:D38A 3F -  -  -      ccf
 4213 D1:D38B DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 4214 D1:D3A5 C3 AC B3 D1     jp  i6502NextLoad
 4215 D1:D3A9 -  -  -  -  
 4216 D1:D3A9 -  -  -  -  ;-----------------------------------------------------------------------------
 4217 D1:D3A9 -  -  -  -  ;SHA (AHX, AXA) - Stores A AND X AND (high-byte of addr. + 1) at addr.
 4218 D1:D3A9 -  -  -  -  ;unstable: sometimes 'AND (H+1)' is dropped, 
 4219 D1:D3A9 -  -  -  -  ;page boundary crossings may not work 
 4220 D1:D3A9 -  -  -  -  ;(with the high-byte of the value used as the high-byte of the address)
 4221 D1:D3A9 -  -  -  -  ;A AND X AND (H+1) -> M
 4222 D1:D3A9 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4223 D1:D3A9 -  -  -  -  ;
 4224 D1:D3A9 -  -  -  -  ;NOTE: NOT GOING TO IMPLEMENT THESE. THEY'LL ADVANCE THE 6502 PC IN THE CORRECT
 4225 D1:D3A9 -  -  -  -  ;MANNER BUT NOTHING MORE. THE CPU WILL HALT WHEN ENCOUNTERING ONE OF THESE.
 4226 D1:D3A9 -  -  -  -  ;
 4227 D1:D3A9 -  -  -  -  ;absolut,Y	SHA oper,Y	9F	3	5  	†
 4228 D1:D3A9 -  -  -  -  inst6502_sha_absy:
 4229 D1:D3A9 ED 33 05 -      ADDCYC(5)
 4230 D1:D3AC CD 3D B6 D1     PUSH_ABSYSPLIT
 4231 D1:D3B0 18 FE -  -          jr $
 4232 D1:D3B2 E1 -  -  -      pop hl
 4233 D1:D3B3 C3 AC B3 D1     jp i6502NextLoad
 4234 D1:D3B7 -  -  -  -  
 4235 D1:D3B7 -  -  -  -  ;(indirect),Y	SHA (oper),Y	93	2	6  	†
 4236 D1:D3B7 -  -  -  -  inst6502_sha_indy:
 4237 D1:D3B7 ED 33 06 -      ADDCYC(6)
 4238 D1:D3BA E5 -  -  -      push hl
 4239 D1:D3BB 7E -  -  -          ld  a,(hl)
 4240 D1:D3BC 21 00 38 D0         ld  hl,ZEROPAGE
 4241 D1:D3C0 85 -  -  -          add a,L
 4242 D1:D3C1 6F -  -  -          ld  L,a
 4243 D1:D3C2 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4244 D1:D3C3 2C -  -  -          inc L
 4245 D1:D3C4 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4246 D1:D3C7 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4247 D1:D3C8 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4248 D1:D3CA 24 -  -  -          inc h
 4249 D1:D3CB 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4250 D1:D3CC 2E 08 -  -          ld  L,BASETABLE_STRIDE
 4251 D1:D3CE ED 6C -  -          mlt hl          ;23.
 4252 D1:D3D0 01 00 40 D0         ld  bc,PAGETABLE
 4253 D1:D3D4 09 -  -  -          add hl,bc
 4254 D1:D3D5 ED 27 -  -          ld  hl,(hl)     ;address get.
 4255 D1:D3D7 01 00 00 00         ld  bc,0
 4256 D1:D3DB 4F -  -  -          ld  c,a
 4257 D1:D3DC 09 -  -  -          add hl,bc       ;Full address get.
 4258 D1:D3DD 7E -  -  -          READ_ACCESS
 4259 D1:D3DE 18 FE -  -          jr $
 4260 D1:D3E0 E1 -  -  -      pop hl
 4261 D1:D3E1 C3 AC B3 D1     jp i6502NextLoad
 4262 D1:D3E5 -  -  -  -  
 4263 D1:D3E5 -  -  -  -  ;-----------------------------------------------------------------------------
 4264 D1:D3E5 -  -  -  -  ;SHX (A11, SXA, XAS)
 4265 D1:D3E5 -  -  -  -  ;SHY (A11, SYA, SAY)
 4266 D1:D3E5 -  -  -  -  ;TAS (XAS, SHS)
 4267 D1:D3E5 -  -  -  -  ;Not going to implement these, but they'll still get the program
 4268 D1:D3E5 -  -  -  -  ;counter to make the correct noises. Right before locking up the core.
 4269 D1:D3E5 -  -  -  -  ;All of these instructions are marked as "unstable" in that they'll sometimes
 4270 D1:D3E5 -  -  -  -  ;drop the high byte, and page crossings sometimes won't work.
 4271 D1:D3E5 -  -  -  -  
 4272 D1:D3E5 -  -  -  -  ;absolut,Y	SHX oper,Y	9E	3	5  	†
 4273 D1:D3E5 -  -  -  -  inst6502_shx_absy:
 4274 D1:D3E5 ED 33 05 -      ADDCYC(5)
 4275 D1:D3E8 CD 79 B6 D1     PUSH_ABSYSPLIT_NODEP
 4276 D1:D3EC 18 FE -  -          jr $
 4277 D1:D3EE E1 -  -  -      pop hl
 4278 D1:D3EF C3 AC B3 D1     jp i6502NextLoad
 4279 D1:D3F3 -  -  -  -  
 4280 D1:D3F3 -  -  -  -  ;absolut,X	SHY oper,X	9C	3	5  	†
 4281 D1:D3F3 -  -  -  -  inst6502_shy_absx:
 4282 D1:D3F3 ED 33 05 -      ADDCYC(5)
 4283 D1:D3F6 CD 7E B6 D1     PUSH_ABSXSPLIT_NODEP
 4284 D1:D3FA 18 FE -  -          jr $
 4285 D1:D3FC E1 -  -  -      pop hl
 4286 D1:D3FD C3 AC B3 D1     jp i6502NextLoad
 4287 D1:D401 -  -  -  -  
 4288 D1:D401 -  -  -  -  ;absolut,Y	TAS oper,Y	9B	3	5  	†
 4289 D1:D401 -  -  -  -  inst6502_tas_absy:
 4290 D1:D401 ED 33 05 -      ADDCYC(5)
 4291 D1:D404 CD 79 B6 D1     PUSH_ABSYSPLIT_NODEP
 4292 D1:D408 18 FE -  -          jr $
 4293 D1:D40A E1 -  -  -      pop hl
 4294 D1:D40B C3 AC B3 D1     jp i6502NextLoad
 4295 D1:D40F -  -  -  -  
 4296 D1:D40F -  -  -  -  ;-----------------------------------------------------------------------------
 4297 D1:D40F -  -  -  -  ;SLO (ASO) - ASL oper + ORA oper
 4298 D1:D40F -  -  -  -  ;M = C <- [76543210] <- 0, A OR M -> A. Affects: CZN
 4299 D1:D40F -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4300 D1:D40F -  -  -  -  
 4301 D1:D40F -  -  -  -  ;zeropage	SLO oper	07	2	5  	
 4302 D1:D40F -  -  -  -  inst6502_slo_zp:
 4303 D1:D40F ED 33 05 -      ADDCYC(5)
 4304 D1:D412 7E -  -  -      ld  a,(hl)
 4305 D1:D413 01 00 38 D0     ld  bc,ZEROPAGE
 4306 D1:D417 81 -  -  -      add a,c
 4307 D1:D418 4F -  -  -      ld  c,a
 4308 D1:D419 0A -  -  -      ld  a,(bc)
 4309 D1:D41A CB 27 -  -      sla a
 4310 D1:D41C 02 -  -  -      ld  (bc),a
 4311 D1:D41D -  -  -  -      ;Flag breakdown to optimize for split operation
 4312 D1:D41D DD 46 04 -      ld  b,(ix+REGSR)
 4313 D1:D420 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4314 D1:D426 DD B6 00 -      or  a,(ix+REGA)
 4315 D1:D429 DD 77 00 -      ld  (ix+REGA),a
 4316 D1:D42C CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4317 D1:D432 87 -  -  -      add a,a
 4318 D1:D433 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4319 D1:D439 DD 70 04 -      ld  (ix+REGSR),b
 4320 D1:D43C C3 AC B3 D1     jp i6502NextLoad
 4321 D1:D440 -  -  -  -  
 4322 D1:D440 -  -  -  -  ;zeropage,X	SLO oper,X	17	2	6  	
 4323 D1:D440 -  -  -  -  inst6502_slo_zpx:
 4324 D1:D440 ED 33 06 -      ADDCYC(6)
 4325 D1:D443 7E -  -  -      ld  a,(hl)
 4326 D1:D444 01 00 38 D0     ld  bc,ZEROPAGE
 4327 D1:D448 81 -  -  -      add a,c
 4328 D1:D449 DD 86 01 -      add a,(ix+REGX)
 4329 D1:D44C 4F -  -  -      ld  c,a
 4330 D1:D44D 0A -  -  -      ld  a,(bc)
 4331 D1:D44E CB 27 -  -      sla a
 4332 D1:D450 02 -  -  -      ld  (bc),a
 4333 D1:D451 -  -  -  -      ;Flag breakdown to optimize for split operation
 4334 D1:D451 DD 46 04 -      ld  b,(ix+REGSR)
 4335 D1:D454 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4336 D1:D45A DD B6 00 -      or  a,(ix+REGA)
 4337 D1:D45D DD 77 00 -      ld  (ix+REGA),a
 4338 D1:D460 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4339 D1:D466 87 -  -  -      add a,a
 4340 D1:D467 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4341 D1:D46D DD 70 04 -      ld  (ix+REGSR),b
 4342 D1:D470 C3 AC B3 D1     jp i6502NextLoad
 4343 D1:D474 -  -  -  -  
 4344 D1:D474 -  -  -  -  ;absolute	SLO oper	0F	3	6  	
 4345 D1:D474 -  -  -  -  inst6502_slo_abs:
 4346 D1:D474 ED 33 06 -      ADDCYC(6)
 4347 D1:D477 CD 21 B6 D1     call subroutine6502_abs_split_start
 4348 D1:D47B E5 -  -  -      push hl
 4349 D1:D47C 50 -  -  -          ld  d,b
 4350 D1:D47D 79 -  -  -          ld  a,c
 4351 D1:D47E 0E 08 -  -          ld  c,BASETABLE_STRIDE
 4352 D1:D480 ED 4C -  -          mlt bc
 4353 D1:D482 21 00 40 D0         ld  hl,PAGETABLE
 4354 D1:D486 09 -  -  -          add hl,bc
 4355 D1:D487 ED 27 -  -          ld  hl,(hl)
 4356 D1:D489 06 00 -  -          ld  b,0
 4357 D1:D48B 4F -  -  -          ld  c,a
 4358 D1:D48C 09 -  -  -          add hl,bc   ;full address
 4359 D1:D48D 7E -  -  -          READ_ACCESS
 4360 D1:D48E CB 27 -  -          sla a
 4361 D1:D490 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4362 D1:D491 -  -  -  -          ;Split oper
 4363 D1:D491 DD 46 04 -          ld  b,(ix+REGSR)
 4364 D1:D494 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4365 D1:D49A DD B6 00 -          or  a,(ix+REGA)
 4366 D1:D49D DD 77 00 -          ld  (ix+REGA),a
 4367 D1:D4A0 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4368 D1:D4A6 87 -  -  -          add a,a
 4369 D1:D4A7 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4370 D1:D4AD DD 70 04 -          ld  (ix+REGSR),b
 4371 D1:D4B0 41 -  -  -          ld  b,c
 4372 D1:D4B1 70 -  -  -          WRITE_ACCESS
 4373 D1:D4B2 E1 -  -  -      pop hl
 4374 D1:D4B3 C3 AC B3 D1     jp i6502NextLoad
 4375 D1:D4B7 -  -  -  -  
 4376 D1:D4B7 -  -  -  -  ;absolut,X	SLO oper,X	1F	3	7  	
 4377 D1:D4B7 -  -  -  -  inst6502_slo_absx:
 4378 D1:D4B7 ED 33 07 -      ADDCYC(7)
 4379 D1:D4BA CD 7E B6 D1     PUSH_ABSXSPLIT_NODEP
 4380 D1:D4BE 7E -  -  -          READ_ACCESS
 4381 D1:D4BF CB 27 -  -          sla a
 4382 D1:D4C1 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4383 D1:D4C2 -  -  -  -          ;Split oper
 4384 D1:D4C2 DD 46 04 -          ld  b,(ix+REGSR)
 4385 D1:D4C5 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4386 D1:D4CB DD B6 00 -          or  a,(ix+REGA)
 4387 D1:D4CE DD 77 00 -          ld  (ix+REGA),a
 4388 D1:D4D1 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4389 D1:D4D7 87 -  -  -          add a,a
 4390 D1:D4D8 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4391 D1:D4DE DD 70 04 -          ld  (ix+REGSR),b
 4392 D1:D4E1 41 -  -  -          ld  b,c
 4393 D1:D4E2 70 -  -  -          WRITE_ACCESS
 4394 D1:D4E3 E1 -  -  -      pop hl
 4395 D1:D4E4 C3 AC B3 D1     jp i6502NextLoad
 4396 D1:D4E8 -  -  -  -  
 4397 D1:D4E8 -  -  -  -  ;absolut,Y	SLO oper,Y	1B	3	7  	
 4398 D1:D4E8 -  -  -  -  inst6502_slo_absy:
 4399 D1:D4E8 ED 33 07 -      ADDCYC(7)
 4400 D1:D4EB CD 79 B6 D1     PUSH_ABSYSPLIT_NODEP
 4401 D1:D4EF 7E -  -  -          READ_ACCESS
 4402 D1:D4F0 CB 27 -  -          sla a
 4403 D1:D4F2 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4404 D1:D4F3 -  -  -  -          ;Split oper
 4405 D1:D4F3 DD 46 04 -          ld  b,(ix+REGSR)
 4406 D1:D4F6 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4407 D1:D4FC DD B6 00 -          or  a,(ix+REGA)
 4408 D1:D4FF DD 77 00 -          ld  (ix+REGA),a
 4409 D1:D502 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4410 D1:D508 87 -  -  -          add a,a
 4411 D1:D509 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4412 D1:D50F DD 70 04 -          ld  (ix+REGSR),b
 4413 D1:D512 41 -  -  -          ld  b,c
 4414 D1:D513 70 -  -  -          WRITE_ACCESS
 4415 D1:D514 E1 -  -  -      pop hl
 4416 D1:D515 C3 AC B3 D1     jp i6502NextLoad
 4417 D1:D519 -  -  -  -  
 4418 D1:D519 -  -  -  -  ;(indirect,X)	SLO (oper,X)	03	2	8  	
 4419 D1:D519 -  -  -  -  isnt6502_slo_indx:
 4420 D1:D519 ED 33 08 -      ADDCYC(8)
 4421 D1:D51C E5 -  -  -      push hl
 4422 D1:D51D 7E -  -  -          ld  a,(hl)
 4423 D1:D51E 21 00 38 D0         ld  hl,ZEROPAGE
 4424 D1:D522 85 -  -  -          add a,L
 4425 D1:D523 DD 86 01 -          add a,(ix+REGX)
 4426 D1:D526 6F -  -  -          ld  L,a
 4427 D1:D527 7E -  -  -          ld  a,(hl)
 4428 D1:D528 2C -  -  -          inc L
 4429 D1:D529 56 -  -  -          ld  d,(hl)
 4430 D1:D52A 42 -  -  -          ld  b,d
 4431 D1:D52B 0E 08 -  -          ld  c,BASETABLE_STRIDE
 4432 D1:D52D ED 4C -  -          mlt bc
 4433 D1:D52F 21 00 40 D0         ld  hl,PAGETABLE
 4434 D1:D533 09 -  -  -          add hl,bc
 4435 D1:D534 ED 27 -  -          ld  hl,(hl)
 4436 D1:D536 06 00 -  -          ld  b,0
 4437 D1:D538 4F -  -  -          ld  c,a
 4438 D1:D539 09 -  -  -          add hl,bc
 4439 D1:D53A 7E -  -  -          READ_ACCESS
 4440 D1:D53B CB 27 -  -          sla a
 4441 D1:D53D 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4442 D1:D53E -  -  -  -          ;Split oper
 4443 D1:D53E DD 46 04 -          ld  b,(ix+REGSR)
 4444 D1:D541 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4445 D1:D547 DD B6 00 -          or  a,(ix+REGA)
 4446 D1:D54A DD 77 00 -          ld  (ix+REGA),a
 4447 D1:D54D CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4448 D1:D553 87 -  -  -          add a,a
 4449 D1:D554 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4450 D1:D55A DD 70 04 -          ld  (ix+REGSR),b
 4451 D1:D55D 41 -  -  -          ld  b,c
 4452 D1:D55E 70 -  -  -          WRITE_ACCESS
 4453 D1:D55F E1 -  -  -      pop hl
 4454 D1:D560 C3 AC B3 D1     jp  i6502NextLoad
 4455 D1:D564 -  -  -  -  
 4456 D1:D564 -  -  -  -  ;(indirect),Y	SLO (oper),Y	13	2	8  
 4457 D1:D564 -  -  -  -  inst6502_slo_indy:
 4458 D1:D564 ED 33 08 -      ADDCYC(8)
 4459 D1:D567 E5 -  -  -      push hl
 4460 D1:D568 7E -  -  -          ld  a,(hl)
 4461 D1:D569 21 00 38 D0         ld  hl,ZEROPAGE
 4462 D1:D56D 85 -  -  -          add a,L
 4463 D1:D56E 6F -  -  -          ld  L,a
 4464 D1:D56F 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4465 D1:D570 2C -  -  -          inc L
 4466 D1:D571 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4467 D1:D574 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4468 D1:D575 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4469 D1:D577 24 -  -  -          inc h
 4470 D1:D578 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4471 D1:D579 2E 08 -  -          ld  L,BASETABLE_STRIDE
 4472 D1:D57B ED 6C -  -          mlt hl          ;23.
 4473 D1:D57D 01 00 40 D0         ld  bc,PAGETABLE
 4474 D1:D581 09 -  -  -          add hl,bc
 4475 D1:D582 ED 27 -  -          ld  hl,(hl)     ;address get.
 4476 D1:D584 01 00 00 00         ld  bc,0
 4477 D1:D588 4F -  -  -          ld  c,a
 4478 D1:D589 09 -  -  -          add hl,bc       ;Full address get.
 4479 D1:D58A 7E -  -  -          READ_ACCESS
 4480 D1:D58B CB 27 -  -          sla a
 4481 D1:D58D 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4482 D1:D58E -  -  -  -          ;Split oper
 4483 D1:D58E DD 46 04 -          ld  b,(ix+REGSR)
 4484 D1:D591 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4485 D1:D597 DD A6 00 -          and a,(ix+REGA)
 4486 D1:D59A DD 77 00 -          ld  (ix+REGA),a
 4487 D1:D59D CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4488 D1:D5A3 87 -  -  -          add a,a
 4489 D1:D5A4 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4490 D1:D5AA DD 70 04 -          ld  (ix+REGSR),b
 4491 D1:D5AD 41 -  -  -          ld  b,c
 4492 D1:D5AE 70 -  -  -          WRITE_ACCESS
 4493 D1:D5AF E1 -  -  -      pop hl
 4494 D1:D5B0 C3 AC B3 D1     jp  i6502NextLoad
 4495 D1:D5B4 -  -  -  -  
 4496 D1:D5B4 -  -  -  -  ;-----------------------------------------------------------------------------
 4497 D1:D5B4 -  -  -  -  ;SRE (LSE) - LSR oper + EOR oper
 4498 D1:D5B4 -  -  -  -  ;M = 0 -> [76543210] -> C, A EOR M -> A. Affects: CZN
 4499 D1:D5B4 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4500 D1:D5B4 -  -  -  -  
 4501 D1:D5B4 -  -  -  -  ;zeropage	SRE oper	47	2	5  	
 4502 D1:D5B4 -  -  -  -  inst6502_sre_zp:
 4503 D1:D5B4 ED 33 05 -      ADDCYC(5)
 4504 D1:D5B7 7E -  -  -      ld  a,(hl)
 4505 D1:D5B8 01 00 38 D0     ld  bc,ZEROPAGE
 4506 D1:D5BC 81 -  -  -      add a,c
 4507 D1:D5BD 4F -  -  -      ld  c,a
 4508 D1:D5BE 0A -  -  -      ld  a,(bc)
 4509 D1:D5BF CB 3F -  -      srl a
 4510 D1:D5C1 02 -  -  -      ld  (bc),a
 4511 D1:D5C2 -  -  -  -      ;Flag breakdown to optimize for split operation
 4512 D1:D5C2 DD 46 04 -      ld  b,(ix+REGSR)
 4513 D1:D5C5 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4514 D1:D5CB DD AE 00 -      xor a,(ix+REGA)
 4515 D1:D5CE DD 77 00 -      ld  (ix+REGA),a
 4516 D1:D5D1 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4517 D1:D5D7 87 -  -  -      add a,a
 4518 D1:D5D8 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4519 D1:D5DE DD 70 04 -      ld  (ix+REGSR),b
 4520 D1:D5E1 C3 AC B3 D1     jp i6502NextLoad
 4521 D1:D5E5 -  -  -  -  
 4522 D1:D5E5 -  -  -  -  ;zeropage,X	SRE oper,X	57	2	6  	
 4523 D1:D5E5 -  -  -  -  inst6502_sre_zpx:
 4524 D1:D5E5 ED 33 06 -      ADDCYC(6)
 4525 D1:D5E8 7E -  -  -      ld  a,(hl)
 4526 D1:D5E9 01 00 38 D0     ld  bc,ZEROPAGE
 4527 D1:D5ED 81 -  -  -      add a,c
 4528 D1:D5EE DD 86 01 -      add a,(ix+REGX)
 4529 D1:D5F1 4F -  -  -      ld  c,a
 4530 D1:D5F2 0A -  -  -      ld  a,(bc)
 4531 D1:D5F3 CB 3F -  -      srl a
 4532 D1:D5F5 02 -  -  -      ld  (bc),a
 4533 D1:D5F6 -  -  -  -      ;Flag breakdown to optimize for split operation
 4534 D1:D5F6 DD 46 04 -      ld  b,(ix+REGSR)
 4535 D1:D5F9 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4536 D1:D5FF DD AE 00 -      xor a,(ix+REGA)
 4537 D1:D602 DD 77 00 -      ld  (ix+REGA),a
 4538 D1:D605 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4539 D1:D60B 87 -  -  -      add a,a
 4540 D1:D60C CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4541 D1:D612 DD 70 04 -      ld  (ix+REGSR),b
 4542 D1:D615 C3 AC B3 D1     jp i6502NextLoad
 4543 D1:D619 -  -  -  -  
 4544 D1:D619 -  -  -  -  ;absolute	SRE oper	4F	3	6  	
 4545 D1:D619 -  -  -  -  inst6502_sre_abs:
 4546 D1:D619 ED 33 06 -      ADDCYC(6)
 4547 D1:D61C CD 21 B6 D1     call subroutine6502_abs_split_start
 4548 D1:D620 E5 -  -  -      push hl
 4549 D1:D621 50 -  -  -          ld  d,b
 4550 D1:D622 79 -  -  -          ld  a,c
 4551 D1:D623 0E 08 -  -          ld  c,BASETABLE_STRIDE
 4552 D1:D625 ED 4C -  -          mlt bc
 4553 D1:D627 21 00 40 D0         ld  hl,PAGETABLE
 4554 D1:D62B 09 -  -  -          add hl,bc
 4555 D1:D62C ED 27 -  -          ld  hl,(hl)
 4556 D1:D62E 06 00 -  -          ld  b,0
 4557 D1:D630 4F -  -  -          ld  c,a
 4558 D1:D631 09 -  -  -          add hl,bc   ;full address
 4559 D1:D632 7E -  -  -          READ_ACCESS
 4560 D1:D633 CB 3F -  -          srl a
 4561 D1:D635 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4562 D1:D636 -  -  -  -          ;Split oper
 4563 D1:D636 DD 46 04 -          ld  b,(ix+REGSR)
 4564 D1:D639 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4565 D1:D63F DD AE 00 -          xor a,(ix+REGA)
 4566 D1:D642 DD 77 00 -          ld  (ix+REGA),a
 4567 D1:D645 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4568 D1:D64B 87 -  -  -          add a,a
 4569 D1:D64C CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4570 D1:D652 DD 70 04 -          ld  (ix+REGSR),b
 4571 D1:D655 41 -  -  -          ld  b,c
 4572 D1:D656 70 -  -  -          WRITE_ACCESS
 4573 D1:D657 E1 -  -  -      pop hl
 4574 D1:D658 C3 AC B3 D1     jp i6502NextLoad
 4575 D1:D65C -  -  -  -  
 4576 D1:D65C -  -  -  -  ;absolut,X	SRE oper,X	5F	3	7  	
 4577 D1:D65C -  -  -  -  inst6502_sre_absx:
 4578 D1:D65C ED 33 07 -      ADDCYC(7)
 4579 D1:D65F CD 7E B6 D1     PUSH_ABSXSPLIT_NODEP
 4580 D1:D663 7E -  -  -          READ_ACCESS
 4581 D1:D664 CB 3F -  -          srl a
 4582 D1:D666 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4583 D1:D667 -  -  -  -          ;Split oper
 4584 D1:D667 DD 46 04 -          ld  b,(ix+REGSR)
 4585 D1:D66A CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4586 D1:D670 DD AE 00 -          xor a,(ix+REGA)
 4587 D1:D673 DD 77 00 -          ld  (ix+REGA),a
 4588 D1:D676 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4589 D1:D67C 87 -  -  -          add a,a
 4590 D1:D67D CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4591 D1:D683 DD 70 04 -          ld  (ix+REGSR),b
 4592 D1:D686 41 -  -  -          ld  b,c
 4593 D1:D687 70 -  -  -          WRITE_ACCESS
 4594 D1:D688 E1 -  -  -      pop hl
 4595 D1:D689 C3 AC B3 D1     jp i6502NextLoad
 4596 D1:D68D -  -  -  -  
 4597 D1:D68D -  -  -  -  ;absolut,Y	SRE oper,Y	5B	3	7  	
 4598 D1:D68D -  -  -  -  inst6502_sre_absy:
 4599 D1:D68D ED 33 07 -      ADDCYC(7)
 4600 D1:D690 CD 79 B6 D1     PUSH_ABSYSPLIT_NODEP
 4601 D1:D694 7E -  -  -          READ_ACCESS
 4602 D1:D695 CB 3F -  -          srl a
 4603 D1:D697 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4604 D1:D698 -  -  -  -          ;Split oper
 4605 D1:D698 DD 46 04 -          ld  b,(ix+REGSR)
 4606 D1:D69B CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4607 D1:D6A1 DD AE 00 -          xor a,(ix+REGA)
 4608 D1:D6A4 DD 77 00 -          ld  (ix+REGA),a
 4609 D1:D6A7 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4610 D1:D6AD 87 -  -  -          add a,a
 4611 D1:D6AE CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4612 D1:D6B4 DD 70 04 -          ld  (ix+REGSR),b
 4613 D1:D6B7 41 -  -  -          ld  b,c
 4614 D1:D6B8 70 -  -  -          WRITE_ACCESS
 4615 D1:D6B9 E1 -  -  -      pop hl
 4616 D1:D6BA C3 AC B3 D1     jp i6502NextLoad
 4617 D1:D6BE -  -  -  -  
 4618 D1:D6BE -  -  -  -  ;(indirect,X)	SRE (oper,X)	43	2	8  	
 4619 D1:D6BE -  -  -  -  isnt6502_sre_indx:
 4620 D1:D6BE ED 33 08 -      ADDCYC(8)
 4621 D1:D6C1 E5 -  -  -      push hl
 4622 D1:D6C2 7E -  -  -          ld  a,(hl)
 4623 D1:D6C3 21 00 38 D0         ld  hl,ZEROPAGE
 4624 D1:D6C7 85 -  -  -          add a,L
 4625 D1:D6C8 DD 86 01 -          add a,(ix+REGX)
 4626 D1:D6CB 6F -  -  -          ld  L,a
 4627 D1:D6CC 7E -  -  -          ld  a,(hl)
 4628 D1:D6CD 2C -  -  -          inc L
 4629 D1:D6CE 56 -  -  -          ld  d,(hl)
 4630 D1:D6CF 42 -  -  -          ld  b,d
 4631 D1:D6D0 0E 08 -  -          ld  c,BASETABLE_STRIDE
 4632 D1:D6D2 ED 4C -  -          mlt bc
 4633 D1:D6D4 21 00 40 D0         ld  hl,PAGETABLE
 4634 D1:D6D8 09 -  -  -          add hl,bc
 4635 D1:D6D9 ED 27 -  -          ld  hl,(hl)
 4636 D1:D6DB 06 00 -  -          ld  b,0
 4637 D1:D6DD 4F -  -  -          ld  c,a
 4638 D1:D6DE 09 -  -  -          add hl,bc
 4639 D1:D6DF 7E -  -  -          READ_ACCESS
 4640 D1:D6E0 CB 3F -  -          srl a
 4641 D1:D6E2 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4642 D1:D6E3 -  -  -  -          ;Split oper
 4643 D1:D6E3 DD 46 04 -          ld  b,(ix+REGSR)
 4644 D1:D6E6 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4645 D1:D6EC DD AE 00 -          xor a,(ix+REGA)
 4646 D1:D6EF DD 77 00 -          ld  (ix+REGA),a
 4647 D1:D6F2 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4648 D1:D6F8 87 -  -  -          add a,a
 4649 D1:D6F9 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4650 D1:D6FF DD 70 04 -          ld  (ix+REGSR),b
 4651 D1:D702 41 -  -  -          ld  b,c
 4652 D1:D703 70 -  -  -          WRITE_ACCESS
 4653 D1:D704 E1 -  -  -      pop hl
 4654 D1:D705 C3 AC B3 D1     jp  i6502NextLoad
 4655 D1:D709 -  -  -  -  
 4656 D1:D709 -  -  -  -  ;(indirect),Y	SRE (oper),Y	53	2	8  
 4657 D1:D709 -  -  -  -  inst6502_sre_indy:
 4658 D1:D709 ED 33 08 -      ADDCYC(8)
 4659 D1:D70C E5 -  -  -      push hl
 4660 D1:D70D 7E -  -  -          ld  a,(hl)
 4661 D1:D70E 21 00 38 D0         ld  hl,ZEROPAGE
 4662 D1:D712 85 -  -  -          add a,L
 4663 D1:D713 6F -  -  -          ld  L,a
 4664 D1:D714 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4665 D1:D715 2C -  -  -          inc L
 4666 D1:D716 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4667 D1:D719 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4668 D1:D71A 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4669 D1:D71C 24 -  -  -          inc h
 4670 D1:D71D 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4671 D1:D71E 2E 08 -  -          ld  L,BASETABLE_STRIDE
 4672 D1:D720 ED 6C -  -          mlt hl          ;23.
 4673 D1:D722 01 00 40 D0         ld  bc,PAGETABLE
 4674 D1:D726 09 -  -  -          add hl,bc
 4675 D1:D727 ED 27 -  -          ld  hl,(hl)     ;address get.
 4676 D1:D729 01 00 00 00         ld  bc,0
 4677 D1:D72D 4F -  -  -          ld  c,a
 4678 D1:D72E 09 -  -  -          add hl,bc       ;Full address get.
 4679 D1:D72F 7E -  -  -          READ_ACCESS
 4680 D1:D730 CB 3F -  -          srl a
 4681 D1:D732 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4682 D1:D733 -  -  -  -          ;Split oper
 4683 D1:D733 DD 46 04 -          ld  b,(ix+REGSR)
 4684 D1:D736 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4685 D1:D73C DD AE 00 -          xor a,(ix+REGA)
 4686 D1:D73F DD 77 00 -          ld  (ix+REGA),a
 4687 D1:D742 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4688 D1:D748 87 -  -  -          add a,a
 4689 D1:D749 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4690 D1:D74F DD 70 04 -          ld  (ix+REGSR),b
 4691 D1:D752 41 -  -  -          ld  b,c
 4692 D1:D753 70 -  -  -          WRITE_ACCESS
 4693 D1:D754 E1 -  -  -      pop hl
 4694 D1:D755 C3 AC B3 D1     jp  i6502NextLoad
 4695 D1:D759 -  -  -  -  
 4696 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4697 D1:D759 -  -  -  -  ;USBC (USBC)
 4698 D1:D759 -  -  -  -  ;immediate	USBC #oper	EB	2	2  
 4699 D1:D759 -  -  -  -  ;Map this to instruction $E9 (inst6502_sbc_imm)
 4700 D1:D759 -  -  -  -  
 4701 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4702 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4703 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4704 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4705 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4706 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4707 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4708 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4709 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4710 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4711 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4712 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4713 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4714 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4715 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4716 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4717 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4718 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4719 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4720 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4721 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4722 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4723 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4724 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4725 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4726 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4727 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4728 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4729 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4730 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4731 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4732 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4733 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4734 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4735 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4736 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4737 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4738 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4739 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4740 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4741 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4742 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4743 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4744 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4745 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4746 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4747 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4748 D1:D759 -  -  -  -  ;-----------------------------------------------------------------------------
 4749 D1:D759 -  -  -  -  
 4750 D1:D759 -  -  -  -  inst6502_instruction_set:
 4751 D1:D759 E0 CA D1 -  .dl	inst6502_brk					;00
 4752 D1:D75C D2 C3 D1 -  .dl	inst6502_ora_indx				;01
 4753 D1:D75F 60 DA D1 -  .dl	inst6502_jam_02 				;02
 4754 D1:D762 19 D5 D1 -  .dl	isnt6502_slo_indx				;03
 4755 D1:D765 4D CC D1 -  .dl	inst6502_nop_zp 				;04
 4756 D1:D768 F6 C2 D1 -  .dl	inst6502_ora_zp					;05
 4757 D1:D76B 84 C4 D1 -  .dl	inst6502_asl_zp					;06
 4758 D1:D76E 0F D4 D1 -  .dl	inst6502_slo_zp 				;07
 4759 D1:D771 70 BC D1 -  .dl	inst6502_php					;08
 4760 D1:D774 D4 C2 D1 -  .dl	inst6502_ora_imm				;09
 4761 D1:D777 5B C4 D1 -  .dl	inst6502_asl					;0A
 4762 D1:D77A A0 CC D1 -  .dl	instr6502_anc_imm				;0B
 4763 D1:D77D 5B CC D1 -  .dl	inst6502_nop_abs				;0C
 4764 D1:D780 4B C3 D1 -  .dl	inst6502_ora_abs				;0D
 4765 D1:D783 DF C4 D1 -  .dl	inst6502_asl_abs				;0E
 4766 D1:D786 74 D4 D1 -  .dl	inst6502_slo_abs				;0F
 4767 D1:D789 B3 CA D1 -  .dl	inst6502_bpl					;10
 4768 D1:D78C 13 C4 D1 -  .dl	inst6502_ora_indy				;11
 4769 D1:D78F 5A DA D1 -  .dl	inst6502_jam_12_halt			;12 JAM. Used to halt emulation for inspection
 4770 D1:D792 64 D5 D1 -  .dl	inst6502_slo_indy				;13
 4771 D1:D795 54 CC D1 -  .dl	inst6502_nop_zpx				;14
 4772 D1:D798 1F C3 D1 -  .dl	inst6502_ora_zpx				;15
 4773 D1:D79B B0 C4 D1 -  .dl	inst6502_asl_zpx				;16
 4774 D1:D79E 40 D4 D1 -  .dl	inst6502_slo_zpx				;17
 4775 D1:D7A1 35 C8 D1 -  .dl	inst6502_clc					;18
 4776 D1:D7A4 AB C3 D1 -  .dl	inst6502_ora_absy				;19
 4777 D1:D7A7 3F CC D1 -  .dl	inst6502_nop_implied    		;1A
 4778 D1:D7AA E8 D4 D1 -  .dl	inst6502_slo_absy				;1B
 4779 D1:D7AD 69 CC D1 -  .dl	inst6502_nop_absx				;1C
 4780 D1:D7B0 84 C3 D1 -  .dl	inst6502_ora_absx				;1D
 4781 D1:D7B3 1D C5 D1 -  .dl	inst6502_asl_absx				;1E
 4782 D1:D7B6 B7 D4 D1 -  .dl	inst6502_slo_absx				;1F
 4783 D1:D7B9 AA CB D1 -  .dl	inst6502_jsr					;20
 4784 D1:D7BC C4 C0 D1 -  .dl	inst6502_and_indx				;21
 4785 D1:D7BF 60 DA D1 -  .dl	inst6502_jam_22 				;22
 4786 D1:D7C2 71 D1 D1 -  .dl	isnt6502_rla_indx				;23
 4787 D1:D7C5 F6 CB D1 -  .dl	inst6502_bit_zp					;24
 4788 D1:D7C8 E8 BF D1 -  .dl	inst6502_and_zp					;25
 4789 D1:D7CB 63 C6 D1 -  .dl	inst6502_rol_zp					;26
 4790 D1:D7CE 55 D0 D1 -  .dl	inst6502_rla_zp 				;27
 4791 D1:D7D1 B2 BC D1 -  .dl	inst6502_plp					;28
 4792 D1:D7D4 C6 BF D1 -  .dl	inst6502_and_imm				;29
 4793 D1:D7D7 37 C6 D1 -  .dl	inst6502_rol					;2A
 4794 D1:D7DA A0 CC D1 -  .dl	instr6502_anc2_imm				;2B
 4795 D1:D7DD 1A CC D1 -  .dl	inst6502_bit_abs				;2C
 4796 D1:D7E0 3D C0 D1 -  .dl	inst6502_and_abs				;2D
 4797 D1:D7E3 C4 C6 D1 -  .dl	inst6502_rol_abs				;2E
 4798 D1:D7E6 C0 D0 D1 -  .dl	inst6502_rla_abs				;2F
 4799 D1:D7E9 95 CA D1 -  .dl	inst6502_bmi					;30
 4800 D1:D7EC 05 C1 D1 -  .dl	inst6502_and_indy				;31
 4801 D1:D7EF 60 DA D1 -  .dl	inst6502_jam_32 				;32
 4802 D1:D7F2 C0 D1 D1 -  .dl	inst6502_rla_indy				;33
 4803 D1:D7F5 54 CC D1 -  .dl	inst6502_nop_zpx				;34
 4804 D1:D7F8 11 C0 D1 -  .dl	inst6502_and_zpx				;35
 4805 D1:D7FB 92 C6 D1 -  .dl	inst6502_rol_zpx				;36
 4806 D1:D7FE 89 D0 D1 -  .dl	inst6502_rla_zpx				;37
 4807 D1:D801 61 C8 D1 -  .dl	inst6502_sec					;38
 4808 D1:D804 9D C0 D1 -  .dl	inst6502_and_absy				;39
 4809 D1:D807 3F CC D1 -  .dl	inst6502_nop_implied			;3A
 4810 D1:D80A 3C D1 D1 -  .dl	inst6502_rla_absy   			;3B
 4811 D1:D80D 69 CC D1 -  .dl	inst6502_nop_absx   			;3C
 4812 D1:D810 76 C0 D1 -  .dl	inst6502_and_absx				;3D
 4813 D1:D813 06 C7 D1 -  .dl	inst6502_rol_absx				;3E
 4814 D1:D816 07 D1 D1 -  .dl	inst6502_rla_absx   			;3F
 4815 D1:D819 19 CB D1 -  .dl	inst6502_rti					;40
 4816 D1:D81C 4B C2 D1 -  .dl	inst6502_eor_indx				;41
 4817 D1:D81F 60 DA D1 -  .dl	inst6502_jam_42     			;42
 4818 D1:D822 BE D6 D1 -  .dl	isnt6502_sre_indx   			;43
 4819 D1:D825 4D CC D1 -  .dl	inst6502_nop_zp     			;44
 4820 D1:D828 6F C1 D1 -  .dl	inst6502_eor_zp					;45
 4821 D1:D82B 72 C5 D1 -  .dl	inst6502_lsr_zp					;46
 4822 D1:D82E B4 D5 D1 -  .dl	inst6502_sre_zp     			;47
 4823 D1:D831 5A BC D1 -  .dl	inst6502_pha					;48
 4824 D1:D834 4D C1 D1 -  .dl	inst6502_eor_imm				;49
 4825 D1:D837 49 C5 D1 -  .dl	inst6502_lsr					;4A
 4826 D1:D83A 76 CC D1 -  .dl	inst6502_alr_imm    			;4B
 4827 D1:D83D 3E CB D1 -  .dl	inst6052_jmp_abs				;4C
 4828 D1:D840 C4 C1 D1 -  .dl	inst6502_eor_abs				;4D
 4829 D1:D843 CD C5 D1 -  .dl	inst6502_lsr_abs				;4E
 4830 D1:D846 19 D6 D1 -  .dl	inst6502_sre_abs    			;4F
 4831 D1:D849 C2 CA D1 -  .dl	inst6502_bvc					;50
 4832 D1:D84C 8C C2 D1 -  .dl	inst6502_eor_indy				;51
 4833 D1:D84F 60 DA D1 -  .dl	inst6502_jam_52     			;52
 4834 D1:D852 09 D7 D1 -  .dl	inst6502_sre_indy   			;53
 4835 D1:D855 54 CC D1 -  .dl	inst6502_nop_zpx    			;54
 4836 D1:D858 98 C1 D1 -  .dl	inst6502_eor_zpx				;55
 4837 D1:D85B 9E C5 D1 -  .dl	inst6502_lsr_zpx				;56
 4838 D1:D85E E5 D5 D1 -  .dl	inst6502_sre_zpx    			;57
 4839 D1:D861 4B C8 D1 -  .dl	inst6502_cli					;58
 4840 D1:D864 24 C2 D1 -  .dl	inst6502_eor_absy				;59
 4841 D1:D867 3F CC D1 -  .dl	inst6502_nop_implied			;5A
 4842 D1:D86A 8D D6 D1 -  .dl	inst6502_sre_absy   			;5B
 4843 D1:D86D 69 CC D1 -  .dl	inst6502_nop_absx   			;5C
 4844 D1:D870 FD C1 D1 -  .dl	inst6502_eor_absx				;5D
 4845 D1:D873 0B C6 D1 -  .dl	inst6502_lsr_absx				;5E
 4846 D1:D876 5C D6 D1 -  .dl	inst6502_sre_absx   			;5F
 4847 D1:D879 DC CB D1 -  .dl	inst6502_rts					;60
 4848 D1:D87C B1 BE D1 -  .dl	inst6502_adc_indx				;61
 4849 D1:D87F 60 DA D1 -  .dl	inst6502_jam_62     			;62
 4850 D1:D882 9D D2 D1 -  .dl	isnt6502_rra_indx   			;63
 4851 D1:D885 4D CC D1 -  .dl	inst6502_nop_zp     			;64
 4852 D1:D888 52 BE D1 -  .dl	inst6502_adc_zp					;65
 4853 D1:D88B 62 C7 D1 -  .dl	inst6502_ror_zp					;66
 4854 D1:D88E 14 D2 D1 -  .dl	inst6502_rra_zp     			;67
 4855 D1:D891 88 BC D1 -  .dl	inst6502_pla					;68
 4856 D1:D894 4A BE D1 -  .dl	inst6502_adc_imm				;69
 4857 D1:D897 36 C7 D1 -  .dl	inst6502_ror					;6A
 4858 D1:D89A ED CC D1 -  .dl	instr6502_arr_imm   			;6B
 4859 D1:D89D 60 CB D1 -  .dl	inst6502_jmp_indir				;6C
 4860 D1:D8A0 75 BE D1 -  .dl	inst6502_adc_abs				;6D
 4861 D1:D8A3 C3 C7 D1 -  .dl	inst6502_ror_abs				;6E
 4862 D1:D8A6 43 D2 D1 -  .dl	inst6502_rra_abs    			;6F
 4863 D1:D8A9 D1 CA D1 -  .dl	inst6502_bvs					;70
 4864 D1:D8AC D9 BE D1 -  .dl	inst6502_adc_indy				;71
 4865 D1:D8AF 60 DA D1 -  .dl	inst6502_jam_72     			;72
 4866 D1:D8B2 CF D2 D1 -  .dl	inst6502_rra_indy   			;73
 4867 D1:D8B5 54 CC D1 -  .dl	inst6502_nop_zpx    			;74
 4868 D1:D8B8 62 BE D1 -  .dl	inst6502_adc_zpx				;75
 4869 D1:D8BB 91 C7 D1 -  .dl	inst6502_ror_zpx				;76
 4870 D1:D8BE 2A D2 D1 -  .dl	inst6502_rra_zpx    			;77
 4871 D1:D8C1 77 C8 D1 -  .dl	inst6502_sei					;78
 4872 D1:D8C4 A3 BE D1 -  .dl	inst6502_adc_absy				;79
 4873 D1:D8C7 3F CC D1 -  .dl	inst6502_nop_implied			;7A
 4874 D1:D8CA 85 D2 D1 -  .dl	inst6502_rra_absy   			;7B
 4875 D1:D8CD 69 CC D1 -  .dl	inst6502_nop_absx   			;7C
 4876 D1:D8D0 95 BE D1 -  .dl	inst6502_adc_absx				;7D
 4877 D1:D8D3 05 C8 D1 -  .dl	inst6502_ror_absx				;7E
 4878 D1:D8D6 6D D2 D1 -  .dl	inst6502_rra_absx   			;7F
 4879 D1:D8D9 46 CC D1 -  .dl	inst6502_nop_imm    			;80
 4880 D1:D8DC BD BA D1 -  .dl	inst6502_sta_indx				;81
 4881 D1:D8DF 46 CC D1 -  .dl	inst6502_nop_imm    			;82
 4882 D1:D8E2 53 D3 D1 -  .dl	inst6502_sax_indx   			;83
 4883 D1:D8E5 5F BB D1 -  .dl	inst6502_sty_zp					;84
 4884 D1:D8E8 54 BA D1 -  .dl	inst6502_sta_zp					;85
 4885 D1:D8EB 16 BB D1 -  .dl	inst6502_stx_zp					;86
 4886 D1:D8EE 06 D3 D1 -  .dl	inst6502_sax_zp     			;87
 4887 D1:D8F1 94 BD D1 -  .dl	inst6502_dey					;88
 4888 D1:D8F4 46 CC D1 -  .dl	inst6502_nop_imm    			;89
 4889 D1:D8F7 0B BC D1 -  .dl	inst6502_txa					;8A
 4890 D1:D8FA C6 CC D1 -  .dl	instr6502_ane_imm   			;8B
 4891 D1:D8FD 86 BB D1 -  .dl	inst6502_sty_abs				;8C
 4892 D1:D900 7B BA D1 -  .dl	inst6502_sta_abs				;8D
 4893 D1:D903 3D BB D1 -  .dl	inst6502_stx_abs				;8E
 4894 D1:D906 2D D3 D1 -  .dl	inst6502_sax_abs    			;8F
 4895 D1:D909 68 CA D1 -  .dl	inst6502_bcc					;90
 4896 D1:D90C E7 BA D1 -  .dl	inst6502_sta_indy				;91
 4897 D1:D90F 60 DA D1 -  .dl	inst6502_jam_92     			;92
 4898 D1:D912 B7 D3 D1 -  .dl	inst6502_sha_indy   			;93
 4899 D1:D915 71 BB D1 -  .dl	inst6502_sty_zpx				;94
 4900 D1:D918 66 BA D1 -  .dl	inst6502_sta_zpx				;95
 4901 D1:D91B 28 BB D1 -  .dl	inst6502_stx_zpy				;96
 4902 D1:D91E 18 D3 D1 -  .dl	inst6502_sax_zpy    			;97
 4903 D1:D921 39 BC D1 -  .dl	inst6502_tya					;98
 4904 D1:D924 AD BA D1 -  .dl	inst6502_sta_absy				;99
 4905 D1:D927 2C BC D1 -  .dl	inst6502_txs					;9A
 4906 D1:D92A 01 D4 D1 -  .dl	inst6502_tas_absy   			;9B
 4907 D1:D92D F3 D3 D1 -  .dl	inst6502_shy_absx   			;9C
 4908 D1:D930 9D BA D1 -  .dl	inst6502_sta_absx				;9D
 4909 D1:D933 E5 D3 D1 -  .dl	inst6502_shx_absy   			;9E
 4910 D1:D936 A9 D3 D1 -  .dl	inst6502_sha_absy   			;9F
 4911 D1:D939 8C B9 D1 -  .dl	inst6502_ldy_imm				;A0
 4912 D1:D93C 41 B8 D1 -  .dl	inst6502_lda_indx				;A1
 4913 D1:D93F C4 B8 D1 -  .dl	inst6502_ldx_imm				;A2
 4914 D1:D942 A5 CF D1 -  .dl	inst6502_lax_indx   			;A3
 4915 D1:D945 AB B9 D1 -  .dl	inst6502_ldy_zp					;A4
 4916 D1:D948 74 B7 D1 -  .dl	inst6502_lda_zp					;A5
 4917 D1:D94B E3 B8 D1 -  .dl	inst6502_ldx_zp					;A6
 4918 D1:D94E F0 CE D1 -  .dl	inst6502_lax_zp     			;A7
 4919 D1:D951 C9 BB D1 -  .dl	inst6502_tay					;A8
 4920 D1:D954 55 B7 D1 -  .dl	inst6502_lda_imm				;A9
 4921 D1:D957 A8 BB D1 -  .dl	inst6502_tax					;AA
 4922 D1:D95A 2E D0 D1 -  .dl	inst6502_lxa        			;AB
 4923 D1:D95D FA B9 D1 -  .dl	inst6502_ldy_abs				;AC
 4924 D1:D960 C3 B7 D1 -  .dl	inst6502_lda_abs				;AD
 4925 D1:D963 32 B9 D1 -  .dl	inst6502_ldx_abs				;AE
 4926 D1:D966 45 CF D1 -  .dl	inst6502_lax_abs    			;AF
 4927 D1:D969 77 CA D1 -  .dl	inst6502_bcs					;B0
 4928 D1:D96C 7F B8 D1 -  .dl	inst6502_lda_indy				;B1
 4929 D1:D96F 60 DA D1 -  .dl	inst6502_jam_B2     			;B2
 4930 D1:D972 E6 CF D1 -  .dl	inst6502_lax_indy   			;B3
 4931 D1:D975 D1 B9 D1 -  .dl	inst6502_ldy_zpx				;B4
 4932 D1:D978 9A B7 D1 -  .dl	inst6502_lda_zpx				;B5
 4933 D1:D97B 09 B9 D1 -  .dl	inst6502_ldx_zpy				;B6
 4934 D1:D97E 19 CF D1 -  .dl	inst6502_lax_zpy    			;B7
 4935 D1:D981 56 C8 D1 -  .dl	inst6502_clv					;B8
 4936 D1:D984 1D B8 D1 -  .dl	inst6502_lda_absy				;B9
 4937 D1:D987 EA BB D1 -  .dl	inst6502_tsx					;BA
 4938 D1:D98A C3 CE D1 -  .dl	inst6502_las_absy   			;BB
 4939 D1:D98D 30 BA D1 -  .dl	inst6502_ldy_absx				;BC
 4940 D1:D990 F9 B7 D1 -  .dl	inst6502_lda_absx				;BD
 4941 D1:D993 68 B9 D1 -  .dl	inst6502_ldx_absy				;BE
 4942 D1:D996 7E CF D1 -  .dl	inst6502_lax_absy   			;BF
 4943 D1:D999 D4 C9 D1 -  .dl	inst6502_cpy_imm				;C0
 4944 D1:D99C E9 C8 D1 -  .dl	inst6502_cmp_indx				;C1
 4945 D1:D99F 46 CC D1 -  .dl	inst6502_nop_imm    			;C2
 4946 D1:D9A2 95 CD D1 -  .dl	inst6502_dcp_indx   			;C3
 4947 D1:D9A5 FA C9 D1 -  .dl	inst6502_cpy_zp					;C4
 4948 D1:D9A8 8A C8 D1 -  .dl	inst6502_cmp_zp					;C5
 4949 D1:D9AB CF BC D1 -  .dl	inst6502_dec_zp					;C6
 4950 D1:D9AE 26 CD D1 -  .dl	inst6502_dcp_zp     			;C7
 4951 D1:D9B1 9E BD D1 -  .dl	inst6502_iny					;C8
 4952 D1:D9B4 82 C8 D1 -  .dl	inst6502_cmp_imm				;C9
 4953 D1:D9B7 76 BD D1 -  .dl	inst6502_dex					;CA
 4954 D1:D9BA 80 D3 D1 -  .dl	inst6502_sbx_imm    			;CB
 4955 D1:D9BD 29 CA D1 -  .dl	inst6502_cpy_abs				;CC
 4956 D1:D9C0 AD C8 D1 -  .dl	inst6502_cmp_abs				;CD
 4957 D1:D9C3 1C BD D1 -  .dl	inst6502_dec_abs				;CE
 4958 D1:D9C6 4D CD D1 -  .dl	inst6502_dcp_abs    			;CF
 4959 D1:D9C9 A4 CA D1 -  .dl	inst6502_bne					;D0
 4960 D1:D9CC 11 C9 D1 -  .dl	inst6502_cmp_indy				;D1
 4961 D1:D9CF 60 DA D1 -  .dl	inst6502_jam_D2     			;D2
 4962 D1:D9D2 C1 CD D1 -  .dl	inst6502_dcp_indy   			;D3
 4963 D1:D9D5 54 CC D1 -  .dl	inst6502_nop_zpx    			;D4
 4964 D1:D9D8 9A C8 D1 -  .dl	inst6502_cmp_zpx				;D5
 4965 D1:D9DB F4 BC D1 -  .dl	inst6502_dec_zpx				;D6
 4966 D1:D9DE 38 CD D1 -  .dl	inst6520_dcp_zpx    			;D7
 4967 D1:D9E1 40 C8 D1 -  .dl	inst6502_cld					;D8
 4968 D1:D9E4 DB C8 D1 -  .dl	inst6502_cmp_absy				;D9
 4969 D1:D9E7 3F CC D1 -  .dl	inst6502_nop_implied			;DA
 4970 D1:D9EA 83 CD D1 -  .dl	inst6502_dcp_absy   			;DB
 4971 D1:D9ED 69 CC D1 -  .dl	inst6502_nop_absx   			;DC
 4972 D1:D9F0 CD C8 D1 -  .dl	inst6502_cmp_absx				;DD
 4973 D1:D9F3 52 BD D1 -  .dl	inst6502_dec_absx				;DE
 4974 D1:D9F6 71 CD D1 -  .dl	inst6502_dcp_absx   			;DF
 4975 D1:D9F9 40 C9 D1 -  .dl	inst6502_cpx_imm				;E0
 4976 D1:D9FC 6F BF D1 -  .dl	inst6502_sbc_indx				;E1
 4977 D1:D9FF 46 CC D1 -  .dl	inst6502_nop_imm    			;E2
 4978 D1:DA02 64 CE D1 -  .dl	inst6502_isc_indx   			;E3
 4979 D1:DA05 66 C9 D1 -  .dl	inst6502_cpx_zp					;E4
 4980 D1:DA08 10 BF D1 -  .dl	inst6502_sbc_zp					;E5
 4981 D1:DA0B A3 BD D1 -  .dl	inst6502_inc_zp					;E6
 4982 D1:DA0E F2 CD D1 -  .dl	inst6502_isc_zp     			;E7
 4983 D1:DA11 99 BD D1 -  .dl	inst6502_inx					;E8
 4984 D1:DA14 08 BF D1 -  .dl	inst6502_sbc_imm				;E9
 4985 D1:DA17 38 CC D1 -  .dl	inst6502_nop					;EA
 4986 D1:DA1A 08 BF D1 -  .dl	inst6502_sbc_imm			    ;EB *DUPLICATE OF E9
 4987 D1:DA1D 95 C9 D1 -  .dl	inst6502_cpx_abs				;EC
 4988 D1:DA20 33 BF D1 -  .dl	inst6502_sbc_abs				;ED
 4989 D1:DA23 F0 BD D1 -  .dl	inst6502_inc_abs				;EE
 4990 D1:DA26 19 CE D1 -  .dl	inst6502_isc_abs    			;EF
 4991 D1:DA29 86 CA D1 -  .dl	inst6502_beq					;F0
 4992 D1:DA2C 97 BF D1 -  .dl	inst6502_sbc_indy				;F1
 4993 D1:DA2F 60 DA D1 -  .dl	inst6502_jam_F2     			;F2
 4994 D1:DA32 91 CE D1 -  .dl	inst6502_isc_indy   			;F3
 4995 D1:DA35 54 CC D1 -  .dl	inst6502_nop_zpx    			;F4
 4996 D1:DA38 20 BF D1 -  .dl	inst6502_sbc_zpx				;F5
 4997 D1:DA3B C8 BD D1 -  .dl	inst6502_inc_zpx				;F6
 4998 D1:DA3E 04 CE D1 -  .dl	inst6520_isc_zpx    			;F7
 4999 D1:DA41 6C C8 D1 -  .dl	inst6502_sed					;F8
 5000 D1:DA44 61 BF D1 -  .dl	inst6502_sbc_absy				;F9
 5001 D1:DA47 3F CC D1 -  .dl	inst6502_nop_implied			;FA
 5002 D1:DA4A 51 CE D1 -  .dl	inst6502_isc_absy   			;FB
 5003 D1:DA4D 69 CC D1 -  .dl	inst6502_nop_absx   			;FC
 5004 D1:DA50 53 BF D1 -  .dl	inst6502_sbc_absx				;FD
 5005 D1:DA53 26 BE D1 -  .dl	inst6502_inc_absx				;FE
 5006 D1:DA56 3E CE D1 -  .dl	inst6502_isc_absx   			;FF
 5007 D1:DA59 -  -  -  -  
 5008 D1:DA59 -  -  -  -  ;-----------------------------------------------------------------------------
 5009 D1:DA59 -  -  -  -  ;-----------------------------------------------------------------------------
 5010 D1:DA59 -  -  -  -  ;-----------------------------------------------------------------------------
 5011 D1:DA59 -  -  -  -  ;These instructions are located here because they perform a function outside
 5012 D1:DA59 -  -  -  -  ;the context of emulating instructions. These are mapped to instructions that
 5013 D1:DA59 -  -  -  -  ;would, on the real hardware, freeze the CPU and require a reset to continue.
 5014 D1:DA59 -  -  -  -  ;
 5015 D1:DA59 -  -  -  -  ;Here, they'll let us perform useful things. Like exiting the emulator.
 5016 D1:DA59 -  -  -  -  ;Or jamming in one spot. Or other things in the future. Debugging things.
 5017 D1:DA59 -  -  -  -  ;Future stuff like breakpoints and console output. That sorta thing.
 5018 D1:DA59 -  -  -  -  ;
 5019 D1:DA59 -  -  -  -  
 5020 D1:DA59 -  -  -  -  inst6502_:
 5021 D1:DA59 C9 -  -  -      ret
 5022 D1:DA5A -  -  -  -  
 5023 D1:DA5A -  -  -  -  inst6502_jam_12_halt:
 5024 D1:DA5A 18 FE -  -      jr $
 5025 D1:DA5C C3 C5 B3 D1     jp i6502FinishLoad
 5026 D1:DA60 -  -  -  -  
 5027 D1:DA60 -  -  -  -  inst6502_jam_02:
 5028 D1:DA60 -  -  -  -  inst6502_jam_22:
 5029 D1:DA60 -  -  -  -  inst6502_jam_32:
 5030 D1:DA60 -  -  -  -  inst6502_jam_42:
 5031 D1:DA60 -  -  -  -  inst6502_jam_52:
 5032 D1:DA60 -  -  -  -  inst6502_jam_62:
 5033 D1:DA60 -  -  -  -  inst6502_jam_72:
 5034 D1:DA60 -  -  -  -  inst6502_jam_92:
 5035 D1:DA60 -  -  -  -  inst6502_jam_B2:
 5036 D1:DA60 -  -  -  -  inst6502_jam_D2:
 5037 D1:DA60 -  -  -  -  inst6502_jam_F2:
 5038 D1:DA60 C9 -  -  -      ret
 5039 D1:DA61 -  -  -  -  
 5040 D1:DA61 -  -  -  -  
 5041 D1:DA61 -  -  -  -  
 5042 D1:DA61 -  -  -  -  
 5043 D1:DA61 -  -  -  -  
 5044 D1:DA61 -  -  -  -  
 5045 D1:DA61 -  -  -  -  
 5046 D1:DA61 -  -  -  -  
 5047 D1:DA61 -  -  -  -  
 5048 D1:DA61 -  -  -  -  
 5049 D1:DA61 -  -  -  -  
 5050 D1:DA61 -  -  -  -  
 5051 D1:DA61 -  -  -  -  
Listing for file "main.z80"
  666 D1:DA61 -  -  -  -  #include "debug.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    1 D1:DA61 -  -  -  -  ;This has all the tables needed to drive the debugger.
    2 D1:DA61 -  -  -  -  #include "debug_itab.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug_itab.z80"
    1 D1:DA61 -  -  -  -  inst6502_opcode_width_table:
    2 D1:DA61 01 -  -  -  .db 1    ;0: 
    3 D1:DA62 02 -  -  -  .db 2    ;1: zpg,X
    4 D1:DA63 03 -  -  -  .db 3    ;2: ind
    5 D1:DA64 03 -  -  -  .db 3    ;3: abs
    6 D1:DA65 03 -  -  -  .db 3    ;4: abs,X
    7 D1:DA66 02 -  -  -  .db 2    ;5: X,ind
    8 D1:DA67 01 -  -  -  .db 1    ;6: A
    9 D1:DA68 02 -  -  -  .db 2    ;7: zpg
   10 D1:DA69 02 -  -  -  .db 2    ;8: rel
   11 D1:DA6A 02 -  -  -  .db 2    ;9: #
   12 D1:DA6B 01 -  -  -  .db 1    ;10: impl
   13 D1:DA6C 02 -  -  -  .db 2    ;11: ind,Y
   14 D1:DA6D 03 -  -  -  .db 3    ;12: abs,Y
   15 D1:DA6E 02 -  -  -  .db 2    ;13: zpg,Y
   16 D1:DA6F -  -  -  -  
   17 D1:DA6F -  -  -  -  
   18 D1:DA6F -  -  -  -  ;Note: 1=1byteOper, 2=2byteOper, -=1byteRelOper. Other chrs are literal
   19 D1:DA6F -  -  -  -  
   20 D1:DA6F -  -  -  -  inst6502_disassembler:
   21 D1:DA6F 01 -  -  -  .db 1,""  ;
   22 D1:DA70 04 31 2C 58 .db 4,"1,X"  ;
   23 D1:DA74 04 28 32 29 .db 4,"(2)"  ;
   24 D1:DA78 02 32 -  -  .db 2,"2"  ;
   25 D1:DA7A 04 32 2C 58 .db 4,"2,X"  ;
   26 D1:DA7E 06 28 31 2C 
              58 29 -  -  .db 6,"(1,X)"  ;
   27 D1:DA84 02 41 -  -  .db 2,"A"  ;
   28 D1:DA86 02 31 -  -  .db 2,"1"  ;
   29 D1:DA88 02 2D -  -  .db 2,"-"  ;
   30 D1:DA8A 03 23 31 -  .db 3,"#1"  ;
   31 D1:DA8D 01 -  -  -  .db 1,""  ;
   32 D1:DA8E 06 28 31 29 
              2C 59 -  -  .db 6,"(1),Y"  ;
   33 D1:DA94 04 32 2C 59 .db 4,"2,Y"  ;
   34 D1:DA98 04 31 2C 59 .db 4,"1,Y"  ;
   35 D1:DA9C -  -  -  -  
   36 D1:DA9C -  -  -  -  inst6502_disassembly_table:
   37 D1:DA9C 42 52 4B 0A .db "BRK", 10     ;0x00
   38 D1:DAA0 4F 52 41 05 .db "ORA", 5     ;0x01
   39 D1:DAA4 4A 41 4D 00 .db "JAM", 0     ;0x02
   40 D1:DAA8 53 4C 4F 05 .db "SLO", 5     ;0x03
   41 D1:DAAC 4E 4F 50 07 .db "NOP", 7     ;0x04
   42 D1:DAB0 4F 52 41 07 .db "ORA", 7     ;0x05
   43 D1:DAB4 41 53 4C 07 .db "ASL", 7     ;0x06
   44 D1:DAB8 53 4C 4F 07 .db "SLO", 7     ;0x07
   45 D1:DABC 50 48 50 0A .db "PHP", 10     ;0x08
   46 D1:DAC0 4F 52 41 09 .db "ORA", 9     ;0x09
   47 D1:DAC4 41 53 4C 06 .db "ASL", 6     ;0x0A
   48 D1:DAC8 41 4E 43 09 .db "ANC", 9     ;0x0B
   49 D1:DACC 4E 4F 50 03 .db "NOP", 3     ;0x0C
   50 D1:DAD0 4F 52 41 03 .db "ORA", 3     ;0x0D
   51 D1:DAD4 41 53 4C 03 .db "ASL", 3     ;0x0E
   52 D1:DAD8 53 4C 4F 03 .db "SLO", 3     ;0x0F
   53 D1:DADC 42 50 4C 08 .db "BPL", 8     ;0x10
   54 D1:DAE0 4F 52 41 0B .db "ORA", 11     ;0x11
   55 D1:DAE4 4A 41 4D 00 .db "JAM", 0     ;0x12
   56 D1:DAE8 53 4C 4F 0B .db "SLO", 11     ;0x13
   57 D1:DAEC 4E 4F 50 01 .db "NOP", 1     ;0x14
   58 D1:DAF0 4F 52 41 01 .db "ORA", 1     ;0x15
   59 D1:DAF4 41 53 4C 01 .db "ASL", 1     ;0x16
   60 D1:DAF8 53 4C 4F 01 .db "SLO", 1     ;0x17
   61 D1:DAFC 43 4C 43 0A .db "CLC", 10     ;0x18
   62 D1:DB00 4F 52 41 0C .db "ORA", 12     ;0x19
   63 D1:DB04 4E 4F 50 0A .db "NOP", 10     ;0x1A
   64 D1:DB08 53 4C 4F 0C .db "SLO", 12     ;0x1B
   65 D1:DB0C 4E 4F 50 04 .db "NOP", 4     ;0x1C
   66 D1:DB10 4F 52 41 04 .db "ORA", 4     ;0x1D
   67 D1:DB14 41 53 4C 04 .db "ASL", 4     ;0x1E
   68 D1:DB18 53 4C 4F 04 .db "SLO", 4     ;0x1F
   69 D1:DB1C 4A 53 52 03 .db "JSR", 3     ;0x20
   70 D1:DB20 41 4E 44 05 .db "AND", 5     ;0x21
   71 D1:DB24 4A 41 4D 00 .db "JAM", 0     ;0x22
   72 D1:DB28 52 4C 41 05 .db "RLA", 5     ;0x23
   73 D1:DB2C 42 49 54 07 .db "BIT", 7     ;0x24
   74 D1:DB30 41 4E 44 07 .db "AND", 7     ;0x25
   75 D1:DB34 52 4F 4C 07 .db "ROL", 7     ;0x26
   76 D1:DB38 52 4C 41 07 .db "RLA", 7     ;0x27
   77 D1:DB3C 50 4C 50 0A .db "PLP", 10     ;0x28
   78 D1:DB40 41 4E 44 09 .db "AND", 9     ;0x29
   79 D1:DB44 52 4F 4C 06 .db "ROL", 6     ;0x2A
   80 D1:DB48 41 4E 43 09 .db "ANC", 9     ;0x2B
   81 D1:DB4C 42 49 54 03 .db "BIT", 3     ;0x2C
   82 D1:DB50 41 4E 44 03 .db "AND", 3     ;0x2D
   83 D1:DB54 52 4F 4C 03 .db "ROL", 3     ;0x2E
   84 D1:DB58 52 4C 41 03 .db "RLA", 3     ;0x2F
   85 D1:DB5C 42 4D 49 08 .db "BMI", 8     ;0x30
   86 D1:DB60 41 4E 44 0B .db "AND", 11     ;0x31
   87 D1:DB64 4A 41 4D 00 .db "JAM", 0     ;0x32
   88 D1:DB68 52 4C 41 0B .db "RLA", 11     ;0x33
   89 D1:DB6C 4E 4F 50 01 .db "NOP", 1     ;0x34
   90 D1:DB70 41 4E 44 01 .db "AND", 1     ;0x35
   91 D1:DB74 52 4F 4C 01 .db "ROL", 1     ;0x36
   92 D1:DB78 52 4C 41 01 .db "RLA", 1     ;0x37
   93 D1:DB7C 53 45 43 0A .db "SEC", 10     ;0x38
   94 D1:DB80 41 4E 44 0C .db "AND", 12     ;0x39
   95 D1:DB84 4E 4F 50 0A .db "NOP", 10     ;0x3A
   96 D1:DB88 52 4C 41 0C .db "RLA", 12     ;0x3B
   97 D1:DB8C 4E 4F 50 04 .db "NOP", 4     ;0x3C
   98 D1:DB90 41 4E 44 04 .db "AND", 4     ;0x3D
   99 D1:DB94 52 4F 4C 04 .db "ROL", 4     ;0x3E
  100 D1:DB98 52 4C 41 04 .db "RLA", 4     ;0x3F
  101 D1:DB9C 52 54 49 0A .db "RTI", 10     ;0x40
  102 D1:DBA0 45 4F 52 05 .db "EOR", 5     ;0x41
  103 D1:DBA4 4A 41 4D 00 .db "JAM", 0     ;0x42
  104 D1:DBA8 53 52 45 05 .db "SRE", 5     ;0x43
  105 D1:DBAC 4E 4F 50 07 .db "NOP", 7     ;0x44
  106 D1:DBB0 45 4F 52 07 .db "EOR", 7     ;0x45
  107 D1:DBB4 4C 53 52 07 .db "LSR", 7     ;0x46
  108 D1:DBB8 53 52 45 07 .db "SRE", 7     ;0x47
  109 D1:DBBC 50 48 41 0A .db "PHA", 10     ;0x48
  110 D1:DBC0 45 4F 52 09 .db "EOR", 9     ;0x49
  111 D1:DBC4 4C 53 52 06 .db "LSR", 6     ;0x4A
  112 D1:DBC8 41 4C 52 09 .db "ALR", 9     ;0x4B
  113 D1:DBCC 4A 4D 50 03 .db "JMP", 3     ;0x4C
  114 D1:DBD0 45 4F 52 03 .db "EOR", 3     ;0x4D
  115 D1:DBD4 4C 53 52 03 .db "LSR", 3     ;0x4E
  116 D1:DBD8 53 52 45 03 .db "SRE", 3     ;0x4F
  117 D1:DBDC 42 56 43 08 .db "BVC", 8     ;0x50
  118 D1:DBE0 45 4F 52 0B .db "EOR", 11     ;0x51
  119 D1:DBE4 4A 41 4D 00 .db "JAM", 0     ;0x52
  120 D1:DBE8 53 52 45 0B .db "SRE", 11     ;0x53
  121 D1:DBEC 4E 4F 50 01 .db "NOP", 1     ;0x54
  122 D1:DBF0 45 4F 52 01 .db "EOR", 1     ;0x55
  123 D1:DBF4 4C 53 52 01 .db "LSR", 1     ;0x56
  124 D1:DBF8 53 52 45 01 .db "SRE", 1     ;0x57
  125 D1:DBFC 43 4C 49 0A .db "CLI", 10     ;0x58
  126 D1:DC00 45 4F 52 0C .db "EOR", 12     ;0x59
  127 D1:DC04 4E 4F 50 0A .db "NOP", 10     ;0x5A
  128 D1:DC08 53 52 45 0C .db "SRE", 12     ;0x5B
  129 D1:DC0C 4E 4F 50 04 .db "NOP", 4     ;0x5C
  130 D1:DC10 45 4F 52 04 .db "EOR", 4     ;0x5D
  131 D1:DC14 4C 53 52 04 .db "LSR", 4     ;0x5E
  132 D1:DC18 53 52 45 04 .db "SRE", 4     ;0x5F
  133 D1:DC1C 52 54 53 0A .db "RTS", 10     ;0x60
  134 D1:DC20 41 44 43 05 .db "ADC", 5     ;0x61
  135 D1:DC24 4A 41 4D 00 .db "JAM", 0     ;0x62
  136 D1:DC28 52 52 41 05 .db "RRA", 5     ;0x63
  137 D1:DC2C 4E 4F 50 07 .db "NOP", 7     ;0x64
  138 D1:DC30 41 44 43 07 .db "ADC", 7     ;0x65
  139 D1:DC34 52 4F 52 07 .db "ROR", 7     ;0x66
  140 D1:DC38 52 52 41 07 .db "RRA", 7     ;0x67
  141 D1:DC3C 50 4C 41 0A .db "PLA", 10     ;0x68
  142 D1:DC40 41 44 43 09 .db "ADC", 9     ;0x69
  143 D1:DC44 52 4F 52 06 .db "ROR", 6     ;0x6A
  144 D1:DC48 41 52 52 09 .db "ARR", 9     ;0x6B
  145 D1:DC4C 4A 4D 50 02 .db "JMP", 2     ;0x6C
  146 D1:DC50 41 44 43 03 .db "ADC", 3     ;0x6D
  147 D1:DC54 52 4F 52 03 .db "ROR", 3     ;0x6E
  148 D1:DC58 52 52 41 03 .db "RRA", 3     ;0x6F
  149 D1:DC5C 42 56 53 08 .db "BVS", 8     ;0x70
  150 D1:DC60 41 44 43 0B .db "ADC", 11     ;0x71
  151 D1:DC64 4A 41 4D 00 .db "JAM", 0     ;0x72
  152 D1:DC68 52 52 41 0B .db "RRA", 11     ;0x73
  153 D1:DC6C 4E 4F 50 01 .db "NOP", 1     ;0x74
  154 D1:DC70 41 44 43 01 .db "ADC", 1     ;0x75
  155 D1:DC74 52 4F 52 01 .db "ROR", 1     ;0x76
  156 D1:DC78 52 52 41 01 .db "RRA", 1     ;0x77
  157 D1:DC7C 53 45 49 0A .db "SEI", 10     ;0x78
  158 D1:DC80 41 44 43 0C .db "ADC", 12     ;0x79
  159 D1:DC84 4E 4F 50 0A .db "NOP", 10     ;0x7A
  160 D1:DC88 52 52 41 0C .db "RRA", 12     ;0x7B
  161 D1:DC8C 4E 4F 50 04 .db "NOP", 4     ;0x7C
  162 D1:DC90 41 44 43 04 .db "ADC", 4     ;0x7D
  163 D1:DC94 52 4F 52 04 .db "ROR", 4     ;0x7E
  164 D1:DC98 52 52 41 04 .db "RRA", 4     ;0x7F
  165 D1:DC9C 4E 4F 50 09 .db "NOP", 9     ;0x80
  166 D1:DCA0 53 54 41 05 .db "STA", 5     ;0x81
  167 D1:DCA4 4E 4F 50 09 .db "NOP", 9     ;0x82
  168 D1:DCA8 53 41 58 05 .db "SAX", 5     ;0x83
  169 D1:DCAC 53 54 59 07 .db "STY", 7     ;0x84
  170 D1:DCB0 53 54 41 07 .db "STA", 7     ;0x85
  171 D1:DCB4 53 54 58 07 .db "STX", 7     ;0x86
  172 D1:DCB8 53 41 58 07 .db "SAX", 7     ;0x87
  173 D1:DCBC 44 45 59 0A .db "DEY", 10     ;0x88
  174 D1:DCC0 4E 4F 50 09 .db "NOP", 9     ;0x89
  175 D1:DCC4 54 58 41 0A .db "TXA", 10     ;0x8A
  176 D1:DCC8 41 4E 45 09 .db "ANE", 9     ;0x8B
  177 D1:DCCC 53 54 59 03 .db "STY", 3     ;0x8C
  178 D1:DCD0 53 54 41 03 .db "STA", 3     ;0x8D
  179 D1:DCD4 53 54 58 03 .db "STX", 3     ;0x8E
  180 D1:DCD8 53 41 58 03 .db "SAX", 3     ;0x8F
  181 D1:DCDC 42 43 43 08 .db "BCC", 8     ;0x90
  182 D1:DCE0 53 54 41 0B .db "STA", 11     ;0x91
  183 D1:DCE4 4A 41 4D 00 .db "JAM", 0     ;0x92
  184 D1:DCE8 53 48 41 0B .db "SHA", 11     ;0x93
  185 D1:DCEC 53 54 59 01 .db "STY", 1     ;0x94
  186 D1:DCF0 53 54 41 01 .db "STA", 1     ;0x95
  187 D1:DCF4 53 54 58 0D .db "STX", 13     ;0x96
  188 D1:DCF8 53 41 58 0D .db "SAX", 13     ;0x97
  189 D1:DCFC 54 59 41 0A .db "TYA", 10     ;0x98
  190 D1:DD00 53 54 41 0C .db "STA", 12     ;0x99
  191 D1:DD04 54 58 53 0A .db "TXS", 10     ;0x9A
  192 D1:DD08 54 41 53 0C .db "TAS", 12     ;0x9B
  193 D1:DD0C 53 48 59 04 .db "SHY", 4     ;0x9C
  194 D1:DD10 53 54 41 04 .db "STA", 4     ;0x9D
  195 D1:DD14 53 48 58 0C .db "SHX", 12     ;0x9E
  196 D1:DD18 53 48 41 0C .db "SHA", 12     ;0x9F
  197 D1:DD1C 4C 44 59 09 .db "LDY", 9     ;0xA0
  198 D1:DD20 4C 44 41 05 .db "LDA", 5     ;0xA1
  199 D1:DD24 4C 44 58 09 .db "LDX", 9     ;0xA2
  200 D1:DD28 4C 41 58 05 .db "LAX", 5     ;0xA3
  201 D1:DD2C 4C 44 59 07 .db "LDY", 7     ;0xA4
  202 D1:DD30 4C 44 41 07 .db "LDA", 7     ;0xA5
  203 D1:DD34 4C 44 58 07 .db "LDX", 7     ;0xA6
  204 D1:DD38 4C 41 58 07 .db "LAX", 7     ;0xA7
  205 D1:DD3C 54 41 59 0A .db "TAY", 10     ;0xA8
  206 D1:DD40 4C 44 41 09 .db "LDA", 9     ;0xA9
  207 D1:DD44 54 41 58 0A .db "TAX", 10     ;0xAA
  208 D1:DD48 4C 58 41 09 .db "LXA", 9     ;0xAB
  209 D1:DD4C 4C 44 59 03 .db "LDY", 3     ;0xAC
  210 D1:DD50 4C 44 41 03 .db "LDA", 3     ;0xAD
  211 D1:DD54 4C 44 58 03 .db "LDX", 3     ;0xAE
  212 D1:DD58 4C 41 58 03 .db "LAX", 3     ;0xAF
  213 D1:DD5C 42 43 53 08 .db "BCS", 8     ;0xB0
  214 D1:DD60 4C 44 41 0B .db "LDA", 11     ;0xB1
  215 D1:DD64 4A 41 4D 00 .db "JAM", 0     ;0xB2
  216 D1:DD68 4C 41 58 0B .db "LAX", 11     ;0xB3
  217 D1:DD6C 4C 44 59 01 .db "LDY", 1     ;0xB4
  218 D1:DD70 4C 44 41 01 .db "LDA", 1     ;0xB5
  219 D1:DD74 4C 44 58 0D .db "LDX", 13     ;0xB6
  220 D1:DD78 4C 41 58 0D .db "LAX", 13     ;0xB7
  221 D1:DD7C 43 4C 56 0A .db "CLV", 10     ;0xB8
  222 D1:DD80 4C 44 41 0C .db "LDA", 12     ;0xB9
  223 D1:DD84 54 53 58 0A .db "TSX", 10     ;0xBA
  224 D1:DD88 4C 41 53 0C .db "LAS", 12     ;0xBB
  225 D1:DD8C 4C 44 59 04 .db "LDY", 4     ;0xBC
  226 D1:DD90 4C 44 41 04 .db "LDA", 4     ;0xBD
  227 D1:DD94 4C 44 58 0C .db "LDX", 12     ;0xBE
  228 D1:DD98 4C 41 58 0C .db "LAX", 12     ;0xBF
  229 D1:DD9C 43 50 59 09 .db "CPY", 9     ;0xC0
  230 D1:DDA0 43 4D 50 05 .db "CMP", 5     ;0xC1
  231 D1:DDA4 4E 4F 50 09 .db "NOP", 9     ;0xC2
  232 D1:DDA8 44 43 50 05 .db "DCP", 5     ;0xC3
  233 D1:DDAC 43 50 59 07 .db "CPY", 7     ;0xC4
  234 D1:DDB0 43 4D 50 07 .db "CMP", 7     ;0xC5
  235 D1:DDB4 44 45 43 07 .db "DEC", 7     ;0xC6
  236 D1:DDB8 44 43 50 07 .db "DCP", 7     ;0xC7
  237 D1:DDBC 49 4E 59 0A .db "INY", 10     ;0xC8
  238 D1:DDC0 43 4D 50 09 .db "CMP", 9     ;0xC9
  239 D1:DDC4 44 45 58 0A .db "DEX", 10     ;0xCA
  240 D1:DDC8 53 42 58 09 .db "SBX", 9     ;0xCB
  241 D1:DDCC 43 50 59 03 .db "CPY", 3     ;0xCC
  242 D1:DDD0 43 4D 50 03 .db "CMP", 3     ;0xCD
  243 D1:DDD4 44 45 43 03 .db "DEC", 3     ;0xCE
  244 D1:DDD8 44 43 50 03 .db "DCP", 3     ;0xCF
  245 D1:DDDC 42 4E 45 08 .db "BNE", 8     ;0xD0
  246 D1:DDE0 43 4D 50 0B .db "CMP", 11     ;0xD1
  247 D1:DDE4 4A 41 4D 00 .db "JAM", 0     ;0xD2
  248 D1:DDE8 44 43 50 0B .db "DCP", 11     ;0xD3
  249 D1:DDEC 4E 4F 50 01 .db "NOP", 1     ;0xD4
  250 D1:DDF0 43 4D 50 01 .db "CMP", 1     ;0xD5
  251 D1:DDF4 44 45 43 01 .db "DEC", 1     ;0xD6
  252 D1:DDF8 44 43 50 01 .db "DCP", 1     ;0xD7
  253 D1:DDFC 43 4C 44 0A .db "CLD", 10     ;0xD8
  254 D1:DE00 43 4D 50 0C .db "CMP", 12     ;0xD9
  255 D1:DE04 4E 4F 50 0A .db "NOP", 10     ;0xDA
  256 D1:DE08 44 43 50 0C .db "DCP", 12     ;0xDB
  257 D1:DE0C 4E 4F 50 04 .db "NOP", 4     ;0xDC
  258 D1:DE10 43 4D 50 04 .db "CMP", 4     ;0xDD
  259 D1:DE14 44 45 43 04 .db "DEC", 4     ;0xDE
  260 D1:DE18 44 43 50 04 .db "DCP", 4     ;0xDF
  261 D1:DE1C 43 50 58 09 .db "CPX", 9     ;0xE0
  262 D1:DE20 53 42 43 05 .db "SBC", 5     ;0xE1
  263 D1:DE24 4E 4F 50 09 .db "NOP", 9     ;0xE2
  264 D1:DE28 49 53 43 05 .db "ISC", 5     ;0xE3
  265 D1:DE2C 43 50 58 07 .db "CPX", 7     ;0xE4
  266 D1:DE30 53 42 43 07 .db "SBC", 7     ;0xE5
  267 D1:DE34 49 4E 43 07 .db "INC", 7     ;0xE6
  268 D1:DE38 49 53 43 07 .db "ISC", 7     ;0xE7
  269 D1:DE3C 49 4E 58 0A .db "INX", 10     ;0xE8
  270 D1:DE40 53 42 43 09 .db "SBC", 9     ;0xE9
  271 D1:DE44 4E 4F 50 0A .db "NOP", 10     ;0xEA
  272 D1:DE48 55 53 42 09 .db "USB", 9     ;0xEB
  273 D1:DE4C 43 50 58 03 .db "CPX", 3     ;0xEC
  274 D1:DE50 53 42 43 03 .db "SBC", 3     ;0xED
  275 D1:DE54 49 4E 43 03 .db "INC", 3     ;0xEE
  276 D1:DE58 49 53 43 03 .db "ISC", 3     ;0xEF
  277 D1:DE5C 42 45 51 08 .db "BEQ", 8     ;0xF0
  278 D1:DE60 53 42 43 0B .db "SBC", 11     ;0xF1
  279 D1:DE64 4A 41 4D 00 .db "JAM", 0     ;0xF2
  280 D1:DE68 49 53 43 0B .db "ISC", 11     ;0xF3
  281 D1:DE6C 4E 4F 50 01 .db "NOP", 1     ;0xF4
  282 D1:DE70 53 42 43 01 .db "SBC", 1     ;0xF5
  283 D1:DE74 49 4E 43 01 .db "INC", 1     ;0xF6
  284 D1:DE78 49 53 43 01 .db "ISC", 1     ;0xF7
  285 D1:DE7C 53 45 44 0A .db "SED", 10     ;0xF8
  286 D1:DE80 53 42 43 0C .db "SBC", 12     ;0xF9
  287 D1:DE84 4E 4F 50 0A .db "NOP", 10     ;0xFA
  288 D1:DE88 49 53 43 0C .db "ISC", 12     ;0xFB
  289 D1:DE8C 4E 4F 50 04 .db "NOP", 4     ;0xFC
  290 D1:DE90 53 42 43 04 .db "SBC", 4     ;0xFD
  291 D1:DE94 49 4E 43 04 .db "INC", 4     ;0xFE
  292 D1:DE98 49 53 43 04 .db "ISC", 4     ;0xFF
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    3 D1:DE9C -  -  -  -  
    4 D1:DE9C -  -  -  -  
    5 D1:DE9C -  -  -  -  ;You must assign a print character routine.
    6 D1:DE9C -  -  -  -  ;You must also write all opcode bytes to operbuf or map operbuf to where written
    7 D1:DE9C -  -  -  -  dbg_printChr    = PrintBigFont
    8 D1:DE9C -  -  -  -  operbuf         = debugram
    9 D1:DE9C -  -  -  -  
   10 D1:DE9C -  -  -  -  
   11 D1:DE9C -  -  -  -  dbg_resetScreen:
   12 D1:DE9C 21 00 00 D4     ld  hl,screenBuf1
   13 D1:DEA0 11 01 00 D4     ld  de,screenBuf1+1
   14 D1:DEA4 01 FF 57 02     ld  bc,(2*240*320)-1
   15 D1:DEA8 36 00 -  -      ld  (hl),$00
   16 D1:DEAA ED B0 -  -      ldir
   17 D1:DEAC AF -  -  -      xor a,a
   18 D1:DEAD CD 1F AF D1     call setLineStart
   19 D1:DEB1 CD 28 AF D1     call setCurLine
   20 D1:DEB5 C9 -  -  -      ret
   21 D1:DEB6 -  -  -  -  
   22 D1:DEB6 -  -  -  -  dbg_prepNextLine:
   23 D1:DEB6 AF -  -  -      xor a,a
   24 D1:DEB7 32 F6 31 D0     ld  (xPos),a
   25 D1:DEBB CD F5 AF D1     call calculateScreenPtr
   26 D1:DEBF EB -  -  -      ex  de,hl
   27 D1:DEC0 21 FF 2B D5     ld  hl,screenBuf2-1
   28 D1:DEC4 B7 -  -  -      or  a,a
   29 D1:DEC5 ED 52 -  -      sbc hl,de
   30 D1:DEC7 -  -  -  -  ;If C: DE in sb2. subtract to set in sb1.
   31 D1:DEC7 -  -  -  -  ;If NC: DE in sb1. add to set in sb2.
   32 D1:DEC7 21 00 2C 01     ld  hl,320*240
   33 D1:DECB 30 04 -  -      jr  nc,+_
   34 D1:DECD 21 00 D4 FE     ld  hl,-(320*240)+0
   35 D1:DED1 19 -  -  -  _:  add hl,de   ;HL set to other buffer. DE points to current buffer.
   36 D1:DED2 01 00 0A 00     ld  bc,320*8    ;copy one line from other buffer to current buffer.
   37 D1:DED6 7E -  -  -  _:  ld  a,(hl)
   38 D1:DED7 C6 01 -  -      add a,1     ;carry if $FF (white), NC if not
   39 D1:DED9 9F -  -  -      sbc a,a     ;if carry, returns to $FF, else is black
   40 D1:DEDA 77 -  -  -      ld  (hl),a
   41 D1:DEDB ED A0 -  -      ldi
   42 D1:DEDD EA D6 DE D1     jp  pe,-_
   43 D1:DEE1 3A F7 31 D0     ld  a,(yPos)
   44 D1:DEE5 FE 1D -  -      cp  a,29
   45 D1:DEE7 20 06 -  -      jr  nz,+_
   46 D1:DEE9 21 00 D4 FE     ld  hl,-(320*240)
   47 D1:DEED 19 -  -  -      add hl,de
   48 D1:DEEE EB -  -  -      ex de,hl        ;if bottom of screen, then reset DE to top of screen.
   49 D1:DEEF D5 -  -  -  _:  push de
   50 D1:DEF0 E1 -  -  -      pop hl
   51 D1:DEF1 13 -  -  -      inc de
   52 D1:DEF2 71 -  -  -      ld  (hl),c
   53 D1:DEF3 01 BF 08 00     ld  bc,(320*7)-1    ;erase whole line below it to prepare for writing.
   54 D1:DEF7 ED B0 -  -      ldir
   55 D1:DEF9 C9 -  -  -      ret
   56 D1:DEFA -  -  -  -  
   57 D1:DEFA -  -  -  -  ;Input: ix = core_memory_ix 
   58 D1:DEFA -  -  -  -  ;Output: Text onscreen
   59 D1:DEFA -  -  -  -  dbg_printLine:
   60 D1:DEFA E5 C5 D5 DD 
              E5 FD E5 F5     push hl \ push bc \ push de \ push ix \ push iy \ push af
   61 D1:DF02 ED 23 00 -      lea hl,iy+0
   62 D1:DF05 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl
   63 D1:DF08 11 00 00 00     ld  de,DEBUG_PRINT_START_CYCLE
   64 D1:DF0C B7 -  -  -      or  a,a
   65 D1:DF0D ED 52 -  -      sbc hl,de
   66 D1:DF0F DA 34 E0 D1     jp  c,dbg_printLine_noPrint
   67 D1:DF13 -  -  -  -  
   68 D1:DF13 3E 1A -  -      ld  a,$1A   ;blue
   69 D1:DF15 32 77 AF D1     ld  (fontBGColor_var),a
   70 D1:DF19 32 C4 AF D1     ld  (smallFontBGColor_var),a
   71 D1:DF1D DD 27 0E -      ld  hl,(ix+CURRENT_OPCODES)
   72 D1:DF20 22 F9 31 D0     ld  (operbuf),hl
   73 D1:DF24 CD B6 DE D1     call dbg_prepNextLine
   74 D1:DF28 CD 33 AF D1     call newLine
   75 D1:DF2C DD 7E 06 -      ld  a,(ix+REGPC+1)
   76 D1:DF2F CD 90 AF D1     call printSmallNumPair
   77 D1:DF33 DD 7E 05 -      ld  a,(ix+REGPC+0)
   78 D1:DF36 CD 90 AF D1     call printSmallNumPair
   79 D1:DF3A 3E 20 -  -      ld  a,' '
   80 D1:DF3C CD 60 AF D1     call printBigFont
   81 D1:DF40 -  -  -  -      ;
   82 D1:DF40 3E 41 -  -      ld  a,'A'
   83 D1:DF42 CD 60 AF D1     call printBigFont
   84 D1:DF46 DD 7E 00 -      ld  a,(ix+REGA)
   85 D1:DF49 CD 90 AF D1     call printSmallNumPair
   86 D1:DF4D 3E 20 -  -      ld  a,' '
   87 D1:DF4F CD 60 AF D1     call printBigFont
   88 D1:DF53 -  -  -  -      ;
   89 D1:DF53 3E 58 -  -      ld  a,'X'
   90 D1:DF55 CD 60 AF D1     call printBigFont
   91 D1:DF59 DD 7E 01 -      ld  a,(ix+REGX)
   92 D1:DF5C CD 90 AF D1     call printSmallNumPair
   93 D1:DF60 3E 20 -  -      ld  a,' '
   94 D1:DF62 CD 60 AF D1     call printBigFont
   95 D1:DF66 -  -  -  -      ;
   96 D1:DF66 3E 59 -  -      ld  a,'Y'
   97 D1:DF68 CD 60 AF D1     call printBigFont
   98 D1:DF6C DD 7E 02 -      ld  a,(ix+REGY)
   99 D1:DF6F CD 90 AF D1     call printSmallNumPair
  100 D1:DF73 3E 20 -  -      ld  a,' '
  101 D1:DF75 CD 60 AF D1     call printBigFont
  102 D1:DF79 -  -  -  -      ;
  103 D1:DF79 3E 53 -  -      ld  a,'S'
  104 D1:DF7B CD 60 AF D1     call printBigFont
  105 D1:DF7F DD 7E 03 -      ld  a,(ix+REGSP)
  106 D1:DF82 CD 90 AF D1     call printSmallNumPair
  107 D1:DF86 3E 20 -  -      ld  a,' '
  108 D1:DF88 CD 60 AF D1     call printBigFont
  109 D1:DF8C -  -  -  -      ;
  110 D1:DF8C 3E 50 -  -      ld  a,'P'
  111 D1:DF8E CD 60 AF D1     call printBigFont
  112 D1:DF92 DD 7E 04 -      ld  a,(ix+REGSR)
  113 D1:DF95 CD 90 AF D1     call printSmallNumPair
  114 D1:DF99 3E 20 -  -      ld  a,' '
  115 D1:DF9B CD 60 AF D1     call printBigFont
  116 D1:DF9F -  -  -  -  
  117 D1:DF9F -  -  -  -      ;
  118 D1:DF9F -  -  -  -  ;    ld  hl,dbg_printLine_str001
  119 D1:DF9F -  -  -  -  ;    call printString
  120 D1:DF9F -  -  -  -  ;    ld  b,5
  121 D1:DF9F -  -  -  -  ;    lea hl,ix+0
  122 D1:DF9F -  -  -  -  ;_:  ld  a,(hl)
  123 D1:DF9F -  -  -  -  ;    inc hl
  124 D1:DF9F -  -  -  -  ;    push bc
  125 D1:DF9F -  -  -  -  ;        push hl
  126 D1:DF9F -  -  -  -  ;            call printSmallNumPair
  127 D1:DF9F -  -  -  -  ;            ld  a,' '
  128 D1:DF9F -  -  -  -  ;            call printBigFont
  129 D1:DF9F -  -  -  -  ;        pop hl
  130 D1:DF9F -  -  -  -  ;    pop bc
  131 D1:DF9F -  -  -  -  ;    djnz -_
  132 D1:DF9F -  -  -  -  
  133 D1:DF9F DD 7E 0D -      ld  a,(ix+CYCLES_CURRENT+2)
  134 D1:DFA2 CD 90 AF D1     call printSmallNumPair
  135 D1:DFA6 DD 7E 0C -      ld  a,(ix+CYCLES_CURRENT+1)
  136 D1:DFA9 CD 90 AF D1     call printSmallNumPair
  137 D1:DFAD DD 7E 0B -      ld  a,(ix+CYCLES_CURRENT+0)
  138 D1:DFB0 CD 90 AF D1     call printSmallNumPair
  139 D1:DFB4 3E 20 -  -      ld  a,' '
  140 D1:DFB6 CD 60 AF D1     call printBigFont
  141 D1:DFBA 2A F9 31 D0     ld  hl,(operbuf)
  142 D1:DFBE DD 2F 0E -      ld  (ix+CURRENT_OPCODES),hl
  143 D1:DFC1 7D -  -  -      ld  a,L
  144 D1:DFC2 CD 96 E0 D1     call dbg_getInstSize
  145 D1:DFC6 06 03 -  -      ld  b,3
  146 D1:DFC8 4F -  -  -      ld  c,a
  147 D1:DFC9 0C -  -  -      inc c
  148 D1:DFCA ED 22 0E -      lea hl,ix+CURRENT_OPCODES
  149 D1:DFCD 7E -  -  -  _:  ld  a,(hl)
  150 D1:DFCE 23 -  -  -      inc hl
  151 D1:DFCF E5 -  -  -      push hl
  152 D1:DFD0 0D -  -  -          dec c
  153 D1:DFD1 F2 D6 DF D1         jp p,+_
  154 D1:DFD5 0C -  -  -          inc c   ;never let c go below zero.
  155 D1:DFD6 C5 -  -  -  _:      push bc
  156 D1:DFD7 28 06 -  -              jr  z,+_
  157 D1:DFD9 CD 90 AF D1             call printSmallNumPair
  158 D1:DFDD 18 06 -  -              jr ++_
  159 D1:DFDF 3E 20 -  -  _:          ld  a,' '
  160 D1:DFE1 CD 60 AF D1             call printBigFont
  161 D1:DFE5 C1 -  -  -  _:      pop bc
  162 D1:DFE6 E1 -  -  -      pop hl
  163 D1:DFE7 10 E4 -  -      djnz ----_
  164 D1:DFE9 3E 20 -  -      ld  a,' '
  165 D1:DFEB CD 60 AF D1     call printBigFont
  166 D1:DFEF CD AE E0 D1     call dbg_printDisassembly
  167 D1:DFF3 -  -  -  -  
  168 D1:DFF3 -  -  -  -      ;
  169 D1:DFF3 -  -  -  -      ;Remove section below when done testing nestest for timings
  170 D1:DFF3 -  -  -  -      ;
  171 D1:DFF3 -  -  -  -  
  172 D1:DFF3 11 00 00 00     ld  de,0
  173 D1:DFF7 2A 1F 34 D0     ld  hl,(timings_base)
  174 D1:DFFB 5E -  -  -      ld  e,(hl)
  175 D1:DFFC 23 -  -  -      inc hl
  176 D1:DFFD 56 -  -  -      ld  d,(hl)
  177 D1:DFFE 23 -  -  -      inc hl
  178 D1:DFFF 22 1F 34 D0     ld  (timings_base),hl
  179 D1:E003 DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  180 D1:E006 B7 -  -  -      or  a,a
  181 D1:E007 ED 52 -  -      sbc hl,de
  182 D1:E009 28 13 -  -      jr  z,+_
  183 D1:E00B 21 FF FF FF     ld  hl,-1
  184 D1:E00F DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  185 D1:E012 CD 33 AF D1     call newLine
  186 D1:E016 21 7C E0 D1     ld  hl,dbg_printLine_timeMismatch
  187 D1:E01A CD 4A AF D1     call printString
  188 D1:E01E -  -  -  -  _:  ;
  189 D1:E01E -  -  -  -      ;End debug-debug section
  190 D1:E01E -  -  -  -      ;
  191 D1:E01E CD 56 AE D1     call fastCopy
  192 D1:E022 AF -  -  -      xor a,a     ;black
  193 D1:E023 32 77 AF D1     ld  (fontBGColor_var),a
  194 D1:E027 32 C4 AF D1     ld  (smallFontBGColor_var),a
  195 D1:E02B -  -  -  -  
  196 D1:E02B F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  197 D1:E033 -  -  -  -      ;push hl \ push bc \ push de \ push ix \ push iy \ push af
  198 D1:E033 C9 -  -  -      ret
  199 D1:E034 -  -  -  -  
  200 D1:E034 -  -  -  -  dbg_printLine_noPrint:
  201 D1:E034 -  -  -  -      ;also remove this when done timing debugging
  202 D1:E034 11 00 00 00     ld  de,0
  203 D1:E038 2A 1F 34 D0     ld  hl,(timings_base)
  204 D1:E03C 5E -  -  -      ld  e,(hl)
  205 D1:E03D 23 -  -  -      inc hl
  206 D1:E03E 56 -  -  -      ld  d,(hl)
  207 D1:E03F 23 -  -  -      inc hl
  208 D1:E040 22 1F 34 D0     ld  (timings_base),hl
  209 D1:E044 DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  210 D1:E047 B7 -  -  -      or  a,a
  211 D1:E048 ED 52 -  -      sbc hl,de
  212 D1:E04A 28 13 -  -      jr  z,+_
  213 D1:E04C 21 FF FF FF     ld  hl,-1
  214 D1:E050 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  215 D1:E053 CD 33 AF D1     call newLine
  216 D1:E057 21 7C E0 D1     ld  hl,dbg_printLine_timeMismatch
  217 D1:E05B CD 4A AF D1     call printString
  218 D1:E05F -  -  -  -  _:  ;
  219 D1:E05F -  -  -  -      ;End debug-debug section
  220 D1:E05F -  -  -  -      ;
  221 D1:E05F CD 56 AE D1     call fastCopy
  222 D1:E063 AF -  -  -      xor a,a     ;black
  223 D1:E064 32 77 AF D1     ld  (fontBGColor_var),a
  224 D1:E068 32 C4 AF D1     ld  (smallFontBGColor_var),a
  225 D1:E06C F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  226 D1:E074 C9 -  -  -      ret
  227 D1:E075 -  -  -  -  
  228 D1:E075 -  -  -  -  dbg_printLine_str001:
  229 D1:E075 41 58 59 53 
              50 20 00 -  .db "AXYSP ",0
  230 D1:E07C -  -  -  -  dbg_printLine_timeMismatch:
  231 D1:E07C 43 50 55 20 
              54 65 73 74 
              20 74 69 6D 
              69 6E 67 20 
              6D 69 73 6D 
              61 74 63 68 
              2E 00 -  -  .db "CPU Test timing mismatch.",0
  232 D1:E096 -  -  -  -  
  233 D1:E096 -  -  -  -  
  234 D1:E096 -  -  -  -  
  235 D1:E096 -  -  -  -  
  236 D1:E096 -  -  -  -  
  237 D1:E096 -  -  -  -  
  238 D1:E096 -  -  -  -  ;A=instruction. Returns: A=size
  239 D1:E096 -  -  -  -  dbg_getInstSize:
  240 D1:E096 E5 D5 -  -      push hl \ push de
  241 D1:E098 57 -  -  -          ld  d,a
  242 D1:E099 1E 04 -  -          ld  e,4
  243 D1:E09B ED 5C -  -          mlt de
  244 D1:E09D 21 9F DA D1         ld  hl,inst6502_disassembly_table+3
  245 D1:E0A1 19 -  -  -          add hl,de
  246 D1:E0A2 16 00 -  -          ld  d,0
  247 D1:E0A4 5E -  -  -          ld  e,(hl)
  248 D1:E0A5 21 61 DA D1         ld  hl,inst6502_opcode_width_table
  249 D1:E0A9 19 -  -  -          add hl,de
  250 D1:E0AA 7E -  -  -          ld  a,(hl)
  251 D1:E0AB D1 E1 -  -      pop de \ pop hl
  252 D1:E0AD C9 -  -  -      ret
  253 D1:E0AE -  -  -  -  
  254 D1:E0AE -  -  -  -  dbg_printDisassembly:
  255 D1:E0AE F5 C5 D5 E5 
              DD E5 -  -      push af \ push bc \ push de \ push hl \ push ix
  256 D1:E0B4 -  -  -  -      ;find entry in disassembly table
  257 D1:E0B4 2A F9 31 D0     ld  hl,(operbuf)
  258 D1:E0B8 26 04 -  -      ld  H,4
  259 D1:E0BA ED 6C -  -      mlt hl
  260 D1:E0BC 11 9C DA D1     ld  de,inst6502_disassembly_table
  261 D1:E0C0 19 -  -  -      add hl,de
  262 D1:E0C1 06 03 -  -      ld  b,3
  263 D1:E0C3 7E -  -  -  _:  ld  a,(hl)
  264 D1:E0C4 23 -  -  -      inc hl
  265 D1:E0C5 CD 4B E1 D1     call dbg_printC
  266 D1:E0C9 10 F8 -  -      djnz -_
  267 D1:E0CB 3E 20 -  -      ld  a,' '
  268 D1:E0CD CD 4B E1 D1     call dbg_printC
  269 D1:E0D1 46 -  -  -      ld  b,(hl)
  270 D1:E0D2 04 -  -  -      inc b
  271 D1:E0D3 -  -  -  -      ;Instruction addressing mode in B. Now find text for that address mode.
  272 D1:E0D3 21 6F DA D1     ld  hl,inst6502_disassembler
  273 D1:E0D7 11 00 00 00     ld  de,0
  274 D1:E0DB 5E -  -  -  _:  ld  e,(hl)
  275 D1:E0DC 19 -  -  -      add hl,de
  276 D1:E0DD 10 FC -  -      djnz -_
  277 D1:E0DF 1D -  -  -      dec e
  278 D1:E0E0 28 29 -  -      jr  z,dbg_printDisassembly_end  ;stop if text is zero-sized
  279 D1:E0E2 ED 52 -  -      sbc hl,de   ;rewind to start of text part of instruction. E is text length.
  280 D1:E0E4 43 -  -  -      ld  b,e
  281 D1:E0E5 -  -  -  -  dbg_printDisassembly_printOperandLoop:
  282 D1:E0E5 7E -  -  -      ld  a,(hl)
  283 D1:E0E6 23 -  -  -      inc hl
  284 D1:E0E7 FE 31 -  -      cp  a,'1'
  285 D1:E0E9 20 06 -  -      jr  nz,+_
  286 D1:E0EB CD 2F E1 D1     call dbg_printOperand1
  287 D1:E0EF 18 18 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  288 D1:E0F1 FE 32 -  -  _:  cp  a,'2'
  289 D1:E0F3 20 06 -  -      jr  nz,+_
  290 D1:E0F5 CD 27 E1 D1     call dbg_printOperand2
  291 D1:E0F9 18 0E -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  292 D1:E0FB FE 2D -  -  _:  cp  a,'-'
  293 D1:E0FD 20 06 -  -      jr  nz,+_
  294 D1:E0FF CD 12 E1 D1     call dbg_printRel1
  295 D1:E103 18 04 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  296 D1:E105 CD 4B E1 D1 _:  call dbg_printC
  297 D1:E109 -  -  -  -  dbg_PrintDisassembly_printOperandFallthrough:
  298 D1:E109 10 DA -  -      djnz dbg_printDisassembly_printOperandLoop
  299 D1:E10B -  -  -  -  dbg_printDisassembly_end:
  300 D1:E10B DD E1 E1 D1 
              C1 F1 -  -      pop ix \ pop hl \ pop de \ pop bc \ pop af
  301 D1:E111 C9 -  -  -      ret
  302 D1:E112 -  -  -  -  
  303 D1:E112 -  -  -  -  dbg_printRel1:
  304 D1:E112 3A FA 31 D0     ld  a,(operbuf+1)
  305 D1:E116 B7 -  -  -      or  a,a
  306 D1:E117 F2 25 E1 D1     jp  p,dbg_printRel1_skipNeg
  307 D1:E11B F5 -  -  -      push af
  308 D1:E11C 3E 2D -  -          ld   a,'-'
  309 D1:E11E CD 4B E1 D1         call dbg_printC
  310 D1:E122 F1 -  -  -      pop af
  311 D1:E123 ED 44 -  -      neg
  312 D1:E125 -  -  -  -  dbg_printRel1_skipNeg:
  313 D1:E125 18 0C -  -      jr dbg_printHex
  314 D1:E127 -  -  -  -  
  315 D1:E127 -  -  -  -  dbg_printOperand2:
  316 D1:E127 3A FB 31 D0     ld  a,(operbuf+2)
  317 D1:E12B CD 33 E1 D1     call dbg_printHex
  318 D1:E12F -  -  -  -  dbg_printOperand1:
  319 D1:E12F 3A FA 31 D0     ld  a,(operbuf+1)
  320 D1:E133 -  -  -  -  dbg_printHex:
  321 D1:E133 CD 38 E1 D1     call dispAHex
  322 D1:E137 C9 -  -  -      ret
  323 D1:E138 -  -  -  -  
  324 D1:E138 -  -  -  -  dispAHex:
  325 D1:E138 F5 -  -  -      push af
  326 D1:E139 CD 40 E1 D1         call +_
  327 D1:E13D F1 -  -  -      pop af
  328 D1:E13E 18 04 -  -      jr  ++_
  329 D1:E140 1F -  -  -  _:  rra
  330 D1:E141 1F -  -  -      rra
  331 D1:E142 1F -  -  -      rra
  332 D1:E143 1F -  -  -      rra
  333 D1:E144 F6 F0 -  -  _:  or  a,$F0
  334 D1:E146 27 -  -  -      daa
  335 D1:E147 C6 A0 -  -      add a,$A0
  336 D1:E149 CE 40 -  -      adc a,$40
  337 D1:E14B -  -  -  -  dbg_printC:
  338 D1:E14B E5 -  -  -      push hl
  339 D1:E14C C5 -  -  -          push bc
  340 D1:E14D CD 60 AF D1             call dbg_printChr
  341 D1:E151 C1 -  -  -          pop bc
  342 D1:E152 E1 -  -  -      pop hl
  343 D1:E153 C9 -  -  -      ret
Listing for file "main.z80"
  667 D1:E154 -  -  -  -  .echo "Main program size: ",$-programStart
