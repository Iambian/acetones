    1 00:0000 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "main.z80"
    2 00:0000 -  -  -  -  .org userMem-2
    3 D1:A87F EF 7B -  -  .db $EF, $7B
    4 D1:A881 -  -  -  -  
    5 D1:A881 -  -  -  -  ;SPASM help msg
    6 D1:A881 -  -  -  -  ;-E = Assemble eZ80 code
    7 D1:A881 -  -  -  -  ;-T = Generate code listing
    8 D1:A881 -  -  -  -  ;-C = Code counter mode
    9 D1:A881 -  -  -  -  ;-L = Symbol table mode
   10 D1:A881 -  -  -  -  ;-S = Stats mode
   11 D1:A881 -  -  -  -  ;-O = Don't write to output file
   12 D1:A881 -  -  -  -  ;-I [directory] = Add include directory
   13 D1:A881 -  -  -  -  ;-A = Labels are cAse-sensitive
   14 D1:A881 -  -  -  -  ;-D<name>[=value] = Create a define 'name' [with 'value']
   15 D1:A881 -  -  -  -  ;-N = Don't use colors for messages
   16 D1:A881 -  -  -  -  ;-V <Expression> = Pipe expression directly into assembly
   17 D1:A881 -  -  -  -  ;-H = Print this help message
   18 D1:A881 -  -  -  -  
   19 D1:A881 -  -  -  -  
   20 D1:A881 -  -  -  -  
   21 D1:A881 -  -  -  -  
   22 D1:A881 -  -  -  -  programStart:
   23 D1:A881 F3 -  -  -      di
   24 D1:A882 -  -  -  -      ;Continuous. Else it'd be possible for an NES ROM to tank the CPU
   25 D1:A882 -  -  -  -      ;performance by constantly polling the keyboard.
   26 D1:A882 21 00 00 F5     ld  hl,mpKeyMode
   27 D1:A886 36 03 -  -      ld  (hl),3      
   28 D1:A888 ED 73 FC 31 
              D0 -  -  -      ld  (save_spl),sp
   29 D1:A88D ED 6E -  -      ld  a,MB
   30 D1:A88F 32 FF 31 D0     ld  (save_mbase),a
   31 D1:A893 3E D0 -  -      ld  a,$D0
   32 D1:A895 ED 6D -  -      ld  MB,a
   33 D1:A897 CD 2A AF D1     call startGfx
   34 D1:A89B -  -  -  -      ;
   35 D1:A89B -  -  -  -      ; todo; write test 6502 program, map it into rom.
   36 D1:A89B -  -  -  -      ; map virtual screen device into ram too. 32x30 screen ascii display
   37 D1:A89B -  -  -  -      ; is probably looking nice right about now.
   38 D1:A89B -  -  -  -      ; Could probably map it into PPU space since we're not actually doing
   39 D1:A89B -  -  -  -      ; anything about that until long after we're done testing core integrity
   40 D1:A89B -  -  -  -      ; You'll probably want to create a mockup vector table then do some equate
   41 D1:A89B -  -  -  -      ; magic to offset it and map it to $FFXX such that the three vectors will
   42 D1:A89B -  -  -  -      ; magically line up with $FFFA-$FFFF. NMI, RES, and IRQ. In that order.
   43 D1:A89B -  -  -  -      ; The rest of the page won't need to matter. It could literally be the
   44 D1:A89B -  -  -  -      ; surrounding eZ80 data/code. Just... don't allow writes to it.
   45 D1:A89B -  -  -  -      ;
   46 D1:A89B -  -  -  -  
   47 D1:A89B 21 00 00 D4     ld  hl,screenBuf1
   48 D1:A89F 11 01 00 D4     ld  de,screenBuf1+1
   49 D1:A8A3 01 FF 57 02     ld  bc,(2*240*320)-1
   50 D1:A8A7 36 00 -  -      ld  (hl),$00
   51 D1:A8A9 ED B0 -  -      ldir
   52 D1:A8AB -  -  -  -  
   53 D1:A8AB -  -  -  -      ;Makes sure all non-ROM areas have a mapping
   54 D1:A8AB 21 00 33 D0     ld  hl,scrap_mapping
   55 D1:A8AF 01 01 80 00     ld  bc,$008001
   56 D1:A8B3 1E 00 -  -      ld  e,0
   57 D1:A8B5 CD D0 B4 D1     call i6502_map_pages
   58 D1:A8B9 -  -  -  -  
   59 D1:A8B9 -  -  -  -  
   60 D1:A8B9 -  -  -  -  
   61 D1:A8B9 -  -  -  -      ;load reset vectors
   62 D1:A8B9 21 D6 A8 D1     ld  hl,testVectors
   63 D1:A8BD 01 01 01 00     ld  bc,$000101
   64 D1:A8C1 1E FF -  -      ld  e,$FF
   65 D1:A8C3 CD D0 B4 D1     call i6502_map_pages
   66 D1:A8C7 -  -  -  -      ;load program ROM to lowmem
   67 D1:A8C7 21 D6 A9 D1     ld  hl,testCode
   68 D1:A8CB 01 08 20 00     ld  bc,$002008
   69 D1:A8CF 1E 80 -  -      ld  e,$80
   70 D1:A8D1 CD D0 B4 D1     call i6502_map_pages
   71 D1:A8D5 -  -  -  -      ;map nametable to writeable address space. Write routine to mirror this
   72 D1:A8D5 -  -  -  -      ;memory to screen.
   73 D1:A8D5 21 00 58 D0     ld  hl,NAMETABLE1
   74 D1:A8D9 01 04 20 00     ld  bc,$002004
   75 D1:A8DD 1E 40 -  -      ld  e,$40
   76 D1:A8DF CD D0 B4 D1     call i6502_map_pages
   77 D1:A8E3 -  -  -  -      ;Everything should be ready. Set up the debug environment and then
   78 D1:A8E3 -  -  -  -      ;start the emulation.
   79 D1:A8E3 -  -  -  -      ;jr $
   80 D1:A8E3 CD 7D AF D1     call clearTextBuf
   81 D1:A8E7 3E 01 -  -      ld  a,1
   82 D1:A8E9 CD CA AF D1     call setLineStart
   83 D1:A8ED CD D3 AF D1     call setCurLine
   84 D1:A8F1 21 2F AA D1     ld  hl,text001
   85 D1:A8F5 CD F5 AF D1     call printString
   86 D1:A8F9 FD 21 9D AA 
              D1 -  -  -      ld  iy,firstFileHeader
   87 D1:A8FE 01 00 00 00     ld  bc,0
   88 D1:A902 FD 4E FF -      ld  c,(iy-1)
   89 D1:A905 CD 78 AE D1     call vatTraverse
   90 D1:A909 DA BA AA D1     jp  c,err_noContainersFound
   91 D1:A90D D5 -  -  -      push de
   92 D1:A90E 21 46 AA D1         ld  hl,text003
   93 D1:A912 CD F5 AF D1         call printString
   94 D1:A916 DD 46 FA -          ld  b,(ix-6)
   95 D1:A919 ED 22 F9 -          lea hl,ix-7
   96 D1:A91C 7E -  -  -  _:      ld  a,(hl)
   97 D1:A91D 2B -  -  -          dec hl
   98 D1:A91E E5 -  -  -          push hl
   99 D1:A91F C5 -  -  -              push bc
  100 D1:A920 CD 0B B0 D1                 call PrintBigFont
  101 D1:A924 C1 -  -  -              pop bc
  102 D1:A925 E1 -  -  -          pop hl
  103 D1:A926 10 F4 -  -          djnz -_
  104 D1:A928 CD DE AF D1         call newLine
  105 D1:A92C D1 -  -  -      pop de
  106 D1:A92D CD D3 AB D1     call loadROMFile
  107 D1:A931 -  -  -  -  
  108 D1:A931 -  -  -  -      ;REMOVE THE FOLLOWING BLOCK WHEN DONE TESTING NESTEST
  109 D1:A931 -  -  -  -      ;
  110 D1:A931 -  -  -  -      ;
  111 D1:A931 21 26 AA D1     ld  hl,timings_file
  112 D1:A935 CD 20 03 02     call _Mov9ToOP1
  113 D1:A939 CD 0C 05 02     call _ChkFindSym
  114 D1:A93D DA 95 A9 D1     jp  c,endCurrentRun
  115 D1:A941 CD 98 1F 02     call _ChkInRam
  116 D1:A945 EB -  -  -      ex  de,hl
  117 D1:A946 30 08 -  -      jr  nc,+_
  118 D1:A948 11 09 00 00     ld  de,9
  119 D1:A94C 19 -  -  -      add hl,de
  120 D1:A94D 5E -  -  -      ld  e,(hl)
  121 D1:A94E 19 -  -  -      add hl,de
  122 D1:A94F 23 -  -  -      inc hl
  123 D1:A950 5E -  -  -  _:  ld  e,(hl)
  124 D1:A951 23 -  -  -      inc hl
  125 D1:A952 56 -  -  -      ld  d,(hl)
  126 D1:A953 23 -  -  -      inc hl
  127 D1:A954 22 1F 34 D0     ld  (timings_base),hl
  128 D1:A958 -  -  -  -      ;
  129 D1:A958 -  -  -  -      ;
  130 D1:A958 -  -  -  -      ;
  131 D1:A958 -  -  -  -  
  132 D1:A958 -  -  -  -  
  133 D1:A958 21 53 AA D1     ld  hl,text004
  134 D1:A95C CD F5 AF D1     call printString
  135 D1:A960 -  -  -  -  
  136 D1:A960 -  -  -  -      ;jr $
  137 D1:A960 -  -  -  -  #ifdef COREDEBUG
  138 D1:A960                 call dbg_resetScreen
  139 D1:A960             #endif
  140 D1:A960 DD 21 00 00 
              F2 -  -  -      ld  ix,$F20000
  141 D1:A965 DD 27 30 -      ld  hl,(ix+$30)
  142 D1:A968 CB 85 -  -      res 0,L ;turn off timer 0
  143 D1:A96A CB 8D -  -      res 1,L ;timer 0 uses CPU clock
  144 D1:A96C CB 95 -  -      res 2,L ;disables timer 0 interrupt generator
  145 D1:A96E CB CC -  -      set 1,H ;timer 0 counts upward
  146 D1:A970 DD 2F 30 -      ld  (ix+$30),hl
  147 D1:A973 -  -  -  -      
  148 D1:A973 AF -  -  -      xor a,a
  149 D1:A974 ED 62 -  -      sbc hl,hl
  150 D1:A976 DD 2F 00 -      ld  (ix+0),hl
  151 D1:A979 DD 77 03 -      ld  (ix+3),a
  152 D1:A97C -  -  -  -  
  153 D1:A97C CD EA B3 D1     call i6502Init
  154 D1:A980 -  -  -  -  
  155 D1:A980 -  -  -  -  
  156 D1:A980 DD 21 00 00 
              F2 -  -  -      ld  ix,$F20000
  157 D1:A985 DD 7E 30 -      ld  a,(ix+$30)
  158 D1:A988 CB 87 -  -      res 0,a ;turn off timer 0
  159 D1:A98A CB CF -  -      set 1,a ;timer 0 uses 32768Hz clock
  160 D1:A98C CB 97 -  -      res 2,a ;disables timer 0 interrupt generator
  161 D1:A98E DD 77 30 -      ld  (ix+$30),a
  162 D1:A991 -  -  -  -      ;
  163 D1:A991 2A 00 00 F2     ld  hl,($F20000)
  164 D1:A995 -  -  -  -  
  165 D1:A995 -  -  -  -  endCurrentRun:
  166 D1:A995 CD 83 DF D1     call dbg_prepNextLine
  167 D1:A999 CD DE AF D1     call newLine
  168 D1:A99D 21 75 AA D1     ld  hl,text005
  169 D1:A9A1 CD F5 AF D1     call printString
  170 D1:A9A5 -  -  -  -  
  171 D1:A9A5 -  -  -  -      ;call printTextBuf
  172 D1:A9A5 CD 01 AF D1     call fastCopy
  173 D1:A9A9 00 -  -  -      nop
  174 D1:A9AA CD F5 AE D1     call waituntilnewkeypress
  175 D1:A9AE CD ED AE D1     call waituntilkeyrelease
  176 D1:A9B2 -  -  -  -  
  177 D1:A9B2 -  -  -  -      ;
  178 D1:A9B2 -  -  -  -      ;
  179 D1:A9B2 -  -  -  -      ;
  180 D1:A9B2 -  -  -  -  programExit:
  181 D1:A9B2 CD 1C AF D1     call stopGfx
  182 D1:A9B6 ED 7B FC 31 
              D0 -  -  -      ld  sp,(save_spl)
  183 D1:A9BB 3A FF 31 D0     ld  a,(save_mbase)
  184 D1:A9BF ED 6D -  -      ld  MB,a
  185 D1:A9C1 FD 21 80 00 
              D0 -  -  -      ld  iy,flags
  186 D1:A9C6 C9 -  -  -      ret
  187 D1:A9C7 -  -  -  -  
  188 D1:A9C7 -  -  -  -  
  189 D1:A9C7 -  -  -  -  testFilename:
  190 D1:A9C7 15 4E 45 53 
              54 45 53 54 
              00 -  -  -  .db AppVarObj,"NESTEST",0
  191 D1:A9D0 -  -  -  -  
  192 D1:A9D0 -  -  -  -  
  193 D1:A9D0 -  -  -  -  ;NMI, RES, and IRQ. In that order.
  194 D1:A9D0 -  -  -  -  testVectors .equ $-(256-6)
  195 D1:A9D0 00 80 -  -  .dw $8000
  196 D1:A9D2 00 80 -  -  .dw $8000
  197 D1:A9D4 00 80 -  -  .dw $8000
  198 D1:A9D6 -  -  -  -  testCode:
  199 D1:A9D6 A9 00 AA A8 .db $A9,$00,$AA,$A8
  200 D1:A9DA BD 14 80 -  .db $BD,$14,$80
  201 D1:A9DD C9 00 -  -  .db $C9,$00
  202 D1:A9DF F0 08 -  -  .db $F0,$08
  203 D1:A9E1 99 21 40 -  .db $99,$21,$40
  204 D1:A9E4 E8 C8 -  -  .db $E8,$C8
  205 D1:A9E6 -  -  -  -  ;.db $12
  206 D1:A9E6 4C 04 80 02 .db $4C,$04,$80,$02
  207 D1:A9EA 48 65 6C 6C 
              6F 2C 20 57 
              6F -  -  -  .db $48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F
  208 D1:A9F3 72 6C 64 21 
              00 -  -  -  .db $72,$6C,$64,$21,$00
  209 D1:A9F8 -  -  -  -  
  210 D1:A9F8 -  -  -  -  
  211 D1:A9F8 A9 00 AA A8 
              BD 11 80 C9 
              00 F0 05 99 
              21 40 D0 -  .db $A9,$00,$AA,$A8,$BD,$11,$80,$C9,$00,$F0,$05,$99,$21,$40,$D0
  212 D1:AA07 F4 02 48 65 
              6C 6C 6F 2C 
              20 57 6F 72 
              6C 64 21 00 .db $F4,$02,$48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F,$72,$6C,$64,$21,$00
  213 D1:AA17 02 -  -  -  .db $02     ;JAM. Emulator terminates on unsupported instructions or JAMs.
  214 D1:AA18 -  -  -  -  
  215 D1:AA18 -  -  -  -  helloWorld:
  216 D1:AA18 48 65 6C 6C 
              6F 2C 20 57 
              6F 72 6C 64 
              21 00 -  -  .db "Hello, World!",0
  217 D1:AA26 -  -  -  -  
  218 D1:AA26 -  -  -  -  timings_file:
  219 D1:AA26 15 74 69 6D 
              69 6E 67 73 
              00 -  -  -  .db AppVarObj,"timings",0
  220 D1:AA2F -  -  -  -  
  221 D1:AA2F -  -  -  -  text001:
  222 D1:AA2F 4C 6F 6F 6B 
              69 6E 67 20 
              75 70 20 6E 
              65 73 74 65 
              73 74 2E 2E 
              2E 0A 00 -  .db "Looking up nestest...\n",0
  223 D1:AA46 -  -  -  -  text003:
  224 D1:AA46 46 69 6C 65 
              20 66 6F 75 
              6E 64 3A 20 
              00 -  -  -  .db "File found: ",0
  225 D1:AA53 -  -  -  -  text004:
  226 D1:AA53 52 4F 4D 46 
              69 6C 65 20 
              6C 6F 61 64 
              65 64 20 61 
              6E 64 20 72 
              65 61 64 79 
              20 74 6F 20 
              72 75 6E 2E 
              0A 00 -  -  .db "ROMFile loaded and ready to run.\n",0
  227 D1:AA75 -  -  -  -  text005:
  228 D1:AA75 -  -  -  -  ;    0123456789012345678901234567890123456789
  229 D1:AA75 43 50 55 20 
              45 78 65 63 
              75 74 69 6F 
              6E 20 48 61 
              6C 74 65 64 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 00 -  .db "CPU Execution Halted                  ",0
  230 D1:AA9C -  -  -  -  text006:
  231 D1:AA9C -  -  -  -  
  232 D1:AA9C -  -  -  -  
  233 D1:AA9C 07 -  -  -  .db 7
  234 D1:AA9D -  -  -  -  firstFileHeader:
  235 D1:AA9D 43 45 4E 52 
              4F 4D 00 -  .db "CENROM",0
  236 D1:AAA4 -  -  -  -  
  237 D1:AAA4 -  -  -  -  err_:
  238 D1:AAA4 -  -  -  -  
  239 D1:AAA4 -  -  -  -  err_err:
  240 D1:AAA4 E1 -  -  -      pop hl
  241 D1:AAA5 CD F5 AF D1     call printString
  242 D1:AAA9 -  -  -  -  err_err_quit:
  243 D1:AAA9 CD 01 AF D1     call fastCopy
  244 D1:AAAD 00 -  -  -      nop
  245 D1:AAAE CD F5 AE D1     call waituntilnewkeypress
  246 D1:AAB2 CD ED AE D1     call waituntilkeyrelease
  247 D1:AAB6 C3 B2 A9 D1     jp programExit
  248 D1:AABA -  -  -  -  
  249 D1:AABA -  -  -  -  err_noContainersFound:
  250 D1:AABA CD A4 AA D1     call err_err
  251 D1:AABE 54 72 61 76 
              65 72 73 65 
              20 66 6F 75 
              6E 64 20 6E 
              6F 20 63 61 
              6E 64 69 64 
              61 74 65 73 
              2E 0A 00 -  .db "Traverse found no candidates.\n",0
  252 D1:AADD -  -  -  -  
  253 D1:AADD -  -  -  -  err_missingFiles:
  254 D1:AADD F5 -  -  -      push af
  255 D1:AADE 21 EF AA D1         ld  hl,err_missingFiles_str
  256 D1:AAE2 CD F5 AF D1         call printString
  257 D1:AAE6 F1 -  -  -      pop af
  258 D1:AAE7 CD 3B B0 D1     call printSmallNumPair
  259 D1:AAEB C3 A9 AA D1     jp err_err_quit
  260 D1:AAEF -  -  -  -  err_missingFiles_str:
  261 D1:AAEF 4E 75 6D 62 
              65 72 20 6F 
              66 20 66 69 
              6C 65 73 20 
              6D 69 73 73 
              69 6E 67 3A 
              20 00 -  -  .db "Number of files missing: ",0
  262 D1:AB09 -  -  -  -  
  263 D1:AB09 -  -  -  -  err_tooManyFiles:
  264 D1:AB09 CD A4 AA D1     call err_err
  265 D1:AB0D 54 6F 6F 20 
              6D 61 6E 79 
              20 66 69 6C 
              65 73 20 66 
              6F 75 6E 64 
              2E 00 -  -  .db "Too many files found.",0
  266 D1:AB23 -  -  -  -  
  267 D1:AB23 -  -  -  -  err_PRGROMTooLarge:
  268 D1:AB23 CD A4 AA D1     call err_err
  269 D1:AB27 50 52 47 5F 
              52 4F 4D 20 
              74 6F 6F 20 
              6C 61 72 67 
              65 2E 00 -  .db "PRG_ROM too large.",0
  270 D1:AB3A -  -  -  -  err_CHRROMTooLarge:
  271 D1:AB3A CD A4 AA D1     call err_err
  272 D1:AB3E 43 48 52 5F 
              52 4F 4D 20 
              74 6F 6F 20 
              6C 61 72 67 
              65 2E 00 -  .db "CHR_ROM too large.",0
  273 D1:AB51 -  -  -  -  
  274 D1:AB51 -  -  -  -  err_missingROMDetected:
  275 D1:AB51 CD A4 AA D1     call err_err
  276 D1:AB55 50 52 47 2B 
              43 48 52 20 
              3E 20 41 63 
              74 75 61 6C 
              20 66 69 6C 
              65 20 64 61 
              74 61 2E 00 .db "PRG+CHR > Actual file data.",0
  277 D1:AB71 -  -  -  -  
  278 D1:AB71 -  -  -  -  err_ROMHeaderDamaged:
  279 D1:AB71 CD A4 AA D1     call err_err
  280 D1:AB75 49 4E 45 53 
              20 52 4F 4D 
              20 68 65 61 
              64 65 72 20 
              64 61 6D 61 
              67 65 64 2E 
              00 -  -  -  .db "INES ROM header damaged.",0
  281 D1:AB8E -  -  -  -  
  282 D1:AB8E -  -  -  -  err_MapperOutOfRange:
  283 D1:AB8E CD A4 AA D1     call err_err
  284 D1:AB92 4D 61 70 70 
              65 72 20 73 
              70 65 63 69 
              66 69 65 64 
              20 6F 75 74 
              20 6F 66 20 
              72 61 6E 67 
              65 2E 00 -  .db "Mapper specified out of range.",0
  285 D1:ABB1 -  -  -  -  
  286 D1:ABB1 -  -  -  -  err_CHRROMNotFound:
  287 D1:ABB1 CD A4 AA D1     call err_err
  288 D1:ABB5 43 48 52 5F 
              52 4F 4D 20 
              6E 6F 74 20 
              66 6F 75 6E 
              64 20 69 6E 
              73 69 64 65 
              20 66 69 6C 
              65 00 -  -  .db "CHR_ROM not found inside file",0
  289 D1:ABD3 -  -  -  -  
  290 D1:ABD3 -  -  -  -  
  291 D1:ABD3 -  -  -  -  ;Input: DE = Address of first file after the container header signature
  292 D1:ABD3 -  -  -  -  ;Outputs: ROM vectors recorded and ready to map
  293 D1:ABD3 -  -  -  -  ;Destroys: All registers.
  294 D1:ABD3 -  -  -  -  loadROMFile:
  295 D1:ABD3 EB -  -  -      ex  de,hl
  296 D1:ABD4 AF -  -  -      xor a,a
  297 D1:ABD5 32 08 34 D0     ld  (missing_files),a
  298 D1:ABD9 BE -  -  -  _:  cp  (hl)    ;
  299 D1:ABDA 23 -  -  -      inc hl      ;
  300 D1:ABDB 20 FC -  -      jr  nz,-_   ;skips past zero-terminated string containing full ROM name
  301 D1:ABDD 22 05 34 D0     ld  (basefile_sig),hl
  302 D1:ABE1 01 10 00 00     ld  bc,SIZEOF_INTEGRITY_HASH
  303 D1:ABE5 09 -  -  -      add hl,bc
  304 D1:ABE6 7E -  -  -      ld  a,(hl)
  305 D1:ABE7 FE 01 -  -      cp  a,MAXNUMFILES
  306 D1:ABE9 D2 09 AB D1     jp  nc,err_tooManyFiles
  307 D1:ABED 32 04 34 D0     ld  (inputNumFiles),a
  308 D1:ABF1 47 -  -  -      ld  b,a
  309 D1:ABF2 -  -  -  -  ;    ld  c,SIZEOF_INTEGRITY_HASH     ;c already set to this value from earlier.
  310 D1:ABF2 ED 4C -  -      mlt bc
  311 D1:ABF4 23 -  -  -      inc hl
  312 D1:ABF5 E5 -  -  -      push hl
  313 D1:ABF6 09 -  -  -          add hl,bc
  314 D1:ABF7 FD 21 22 34 
              D0 -  -  -          ld  iy,FILETABLE
  315 D1:ABFC 4E -  -  -          ld  c,(hl)
  316 D1:ABFD 23 -  -  -          inc hl
  317 D1:ABFE 46 -  -  -          ld  b,(hl)
  318 D1:ABFF 23 -  -  -          inc hl
  319 D1:AC00 52 FD 0F 00         ld.s (iy+FILE_SIZE_OFFSET),bc
  320 D1:AC04 FD 2F 02 -          ld  (iy+FILE_ADR_OFFSET),hl
  321 D1:AC07 E1 -  -  -      pop hl
  322 D1:AC08 3C -  -  -      inc a
  323 D1:AC09 3D -  -  -      dec a
  324 D1:AC0A 28 47 -  -      jr  z,loadROMFile_singleFileLoad
  325 D1:AC0C -  -  -  -      ;If more than one file, fill FILETABLE.
  326 D1:AC0C -  -  -  -      ;NOTE: For now, this machinery is disabled. Only a single file is allowed.
  327 D1:AC0C ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  328 D1:AC0F 47 -  -  -      ld  b,a
  329 D1:AC10 -  -  -  -  loadROMFile_multiFileLoadLoop:
  330 D1:AC10 C5 -  -  -      push bc
  331 D1:AC11 FD 2F 05 -          ld  (iy+FILE_SIG_ADR_OFFSET),hl
  332 D1:AC14 01 10 00 00         ld  bc,16
  333 D1:AC18 11 68 AE D1         ld  de,loadROMFile_tempSigHash
  334 D1:AC1C ED B0 -  -          ldir
  335 D1:AC1E E5 -  -  -          push hl
  336 D1:AC1F FD E5 -  -              push iy
  337 D1:AC21 01 17 00 00                 ld  bc,23
  338 D1:AC25 FD 21 61 AE 
              D1 -  -  -                  ld  iy,loadROMFile_tempSig
  339 D1:AC2A CD 78 AE D1                 call vatTraverse    ;returns DE @ datasection size if found
  340 D1:AC2E 30 05 -  -                  jr  nc,+_
  341 D1:AC30 21 08 34 D0                 ld  hl,missing_files
  342 D1:AC34 34 -  -  -                  inc (hl)
  343 D1:AC35 FD E1 -  -  _:          pop iy
  344 D1:AC37 EB -  -  -              ex  de,hl
  345 D1:AC38 5E -  -  -              ld  e,(hl)
  346 D1:AC39 23 -  -  -              inc hl
  347 D1:AC3A 56 -  -  -              ld  d,(hl)
  348 D1:AC3B 23 -  -  -              inc hl
  349 D1:AC3C 52 FD 1F 00             ld.s (iy+FILE_SIZE_OFFSET),de
  350 D1:AC40 FD 2F 02 -              ld  (iy+FILE_ADR_OFFSET),hl
  351 D1:AC43 E1 -  -  -          pop hl
  352 D1:AC44 C1 -  -  -      pop bc
  353 D1:AC45 ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  354 D1:AC48 10 C6 -  -      djnz loadROMFile_multiFileLoadLoop
  355 D1:AC4A 3A 08 34 D0     ld  a,(missing_files)
  356 D1:AC4E B7 -  -  -      or  a,a
  357 D1:AC4F C2 DD AA D1     jp  nz,err_missingFiles
  358 D1:AC53 -  -  -  -  loadROMFile_singleFileLoad:
  359 D1:AC53 -  -  -  -      ;Compute size of ROM by summing filesizes, less INES header
  360 D1:AC53 3A 04 34 D0     ld  a,(inputNumFiles)
  361 D1:AC57 3C -  -  -      inc a
  362 D1:AC58 47 -  -  -      ld  b,a
  363 D1:AC59 21 00 00 00     ld  hl,0
  364 D1:AC5D DD 21 22 34 
              D0 -  -  -      ld  ix,FILETABLE
  365 D1:AC62 52 DD 17 00 _:  ld.s de,(ix+FILE_SIZE_OFFSET)
  366 D1:AC66 19 -  -  -      add hl,de
  367 D1:AC67 ED 32 08 -      lea ix,ix+FILETABLE_STRIDE
  368 D1:AC6A 10 F6 -  -      djnz -_
  369 D1:AC6C 01 F0 FF FF     ld  bc,-16
  370 D1:AC70 09 -  -  -      add hl,bc   ;subtract INES header
  371 D1:AC71 22 09 34 D0     ld  (total_rom_size),hl
  372 D1:AC75 -  -  -  -      ;Verify that the file actually contains an INES header.
  373 D1:AC75 -  -  -  -      ;TODO: Do this at an earlier stage. Such as file selection.
  374 D1:AC75 DD 2A 24 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  375 D1:AC7A DD 27 00 -      ld  hl,(ix+0)
  376 D1:AC7D 11 4E 45 53     ld  de,$53454E         ;4E 45 53 == "NES"
  377 D1:AC81 B7 -  -  -      or  a,a
  378 D1:AC82 ED 52 -  -      sbc hl,de   ;Note: add does not affect zero flag. Can't test this via -DE
  379 D1:AC84 C2 71 AB D1 _:  jp  nz,err_ROMHeaderDamaged
  380 D1:AC88 DD 7E 03 -      ld  a,(ix+3)
  381 D1:AC8B FE 1A -  -      cp  a,$1A
  382 D1:AC8D 20 F5 -  -      jr  nz,-_   ;19
  383 D1:AC8F -  -  -  -      ;Compute ROM size by reading INES header. This should be equ or lt above.
  384 D1:AC8F -  -  -  -      ;Note: The below line is optimized from...
  385 D1:AC8F DD 2A 24 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  386 D1:AC94 -  -  -  -      ;... these lines. But the intent might not be perfectly clear. We'll keep
  387 D1:AC94 -  -  -  -      ;these here just in case there's ever a question about it.
  388 D1:AC94 -  -  -  -  ;    ld  ix,FILETABLE
  389 D1:AC94 -  -  -  -  ;    ld  ix,(ix+FILE_ADR_OFFSET)
  390 D1:AC94 DD 6E 04 -      ld  L,(ix+4)    ;PRG ROM count, low
  391 D1:AC97 DD 5E 05 -      ld  e,(ix+5)    ;CHR ROM count, low
  392 D1:AC9A 26 00 -  -      ld  h,0
  393 D1:AC9C 54 -  -  -      ld  d,h
  394 D1:AC9D DD 7E 07 -      ld  a,(ix+7)    ;Check for INES2 bits
  395 D1:ACA0 E6 0C -  -      and a,%00001100
  396 D1:ACA2 FE 08 -  -      cp  a,%00001000
  397 D1:ACA4 20 1B -  -      jr  nz,+_
  398 D1:ACA6 DD 7E 09 -      ld  a,(ix+9)
  399 D1:ACA9 47 -  -  -      ld  b,a
  400 D1:ACAA E6 0F -  -      and a,$0F
  401 D1:ACAC FE 02 -  -      cp  a,MAXPRGROM_HINIB+1
  402 D1:ACAE D2 23 AB D1     jp  nc,err_PRGROMTooLarge
  403 D1:ACB2 67 -  -  -      ld  h,a
  404 D1:ACB3 78 -  -  -      ld  a,b
  405 D1:ACB4 E6 F0 -  -      and a,$F0
  406 D1:ACB6 07 -  -  -      rlca
  407 D1:ACB7 07 -  -  -      rlca
  408 D1:ACB8 07 -  -  -      rlca
  409 D1:ACB9 07 -  -  -      rlca
  410 D1:ACBA FE 04 -  -      cp  a,MAXCHRROM_HINIB+1
  411 D1:ACBC D2 3A AB D1     jp  nc,err_CHRROMTooLarge
  412 D1:ACC0 57 -  -  -      ld  d,a
  413 D1:ACC1 AF -  -  -  _:  xor a,a
  414 D1:ACC2 32 0C 34 D0     ld  (prg_rom_size),a
  415 D1:ACC6 32 0F 34 D0     ld  (chr_rom_size),a
  416 D1:ACCA 29 -  -  -      add hl,hl   ;x2
  417 D1:ACCB 29 -  -  -      add hl,hl   ;x4
  418 D1:ACCC 29 -  -  -      add hl,hl   ;x8
  419 D1:ACCD 29 -  -  -      add hl,hl   ;x16
  420 D1:ACCE 29 -  -  -      add hl,hl   ;x32
  421 D1:ACCF 29 -  -  -      add hl,hl   ;x64
  422 D1:ACD0 52 22 0D 34 
              D0 -  -  -      ld.s (prg_rom_size+1),hl    ;x64x256
  423 D1:ACD5 EB -  -  -      ex  de,hl
  424 D1:ACD6 29 -  -  -      add hl,hl   ;x2
  425 D1:ACD7 29 -  -  -      add hl,hl   ;x4
  426 D1:ACD8 29 -  -  -      add hl,hl   ;x8
  427 D1:ACD9 29 -  -  -      add hl,hl   ;x16
  428 D1:ACDA 29 -  -  -      add hl,hl   ;x32
  429 D1:ACDB 52 22 10 34 
              D0 -  -  -      ld.s (chr_rom_size+1),hl    ;x32x256
  430 D1:ACE0 2A 0F 34 D0     ld  hl,(chr_rom_size)
  431 D1:ACE4 ED 5B 0C 34 
              D0 -  -  -      ld  de,(prg_rom_size)
  432 D1:ACE9 19 -  -  -      add hl,de
  433 D1:ACEA ED 5B 09 34 
              D0 -  -  -      ld  de,(total_rom_size)
  434 D1:ACEF B7 -  -  -      or  a,a
  435 D1:ACF0 ED 52 -  -      sbc hl,de   ;declared-actual. declared must be equal to or smaller.
  436 D1:ACF2 28 04 -  -      jr  z,+_
  437 D1:ACF4 D2 51 AB D1     jp  nc,err_missingROMDetected
  438 D1:ACF8 -  -  -  -  _:  ;Find trainer, PRG, and CHR base addresses
  439 D1:ACF8 ED 22 10 -      lea hl,ix+16
  440 D1:ACFB 22 18 34 D0     ld  (trainer_base),hl   ;whether it exists or not.
  441 D1:ACFF 11 00 00 00     ld  de,0
  442 D1:AD03 DD CB 06 56     bit 2,(ix+6)
  443 D1:AD07 28 04 -  -      jr  z,+_
  444 D1:AD09 11 00 02 00     ld  de,512
  445 D1:AD0D 19 -  -  -  _:  add hl,de
  446 D1:AD0E 22 18 34 D0     ld  (prg_rom_base),hl
  447 D1:AD12 FD 21 22 34 
              D0 -  -  -      ld  iy,FILETABLE
  448 D1:AD17 52 FD 27 00     ld.s hl,(iy+FILE_SIZE_OFFSET)
  449 D1:AD1B B7 -  -  -      or  a,a
  450 D1:AD1C ED 52 -  -      sbc hl,de   ;less possible trainer
  451 D1:AD1E 11 10 00 00     ld  de,16
  452 D1:AD22 ED 52 -  -      sbc hl,de   ;less iNES header. Remaining is now size of current file.
  453 D1:AD24 EB -  -  -      ex  de,hl   ;curfilesize is now in DE
  454 D1:AD25 2A 0C 34 D0     ld  hl,(prg_rom_size)   ;keep subtracting filesize from this until carry.
  455 D1:AD29 B7 -  -  -      or  a,a
  456 D1:AD2A ED 52 -  -      sbc hl,de   ;if carry, prg_rom end is inside this file. Undo: HL is offset.
  457 D1:AD2C 0E 00 -  -      ld  c,0     ;0th file current
  458 D1:AD2E 38 1D -  -      jr  c,loadROMFile_locatedCHRROM
  459 D1:AD30 3A 04 34 D0     ld  a,(inputNumFiles)
  460 D1:AD34 B7 -  -  -      or  a,a
  461 D1:AD35 28 12 -  -      jr  z,loadROMFile_noCHRROMFound
  462 D1:AD37 47 -  -  -      ld  b,a
  463 D1:AD38 ED 33 08 -  _:  lea iy,iy+FILETABLE_STRIDE
  464 D1:AD3B 52 ED 5B 00 
              00 00 -  -      ld.s de,(FILE_SIZE_OFFSET)
  465 D1:AD41 0C -  -  -      inc c
  466 D1:AD42 B7 -  -  -      or  a,a
  467 D1:AD43 ED 52 -  -      sbc hl,de   ;
  468 D1:AD45 38 06 -  -      jr  c,loadROMFile_locatedCHRROM
  469 D1:AD47 10 EF -  -      djnz -_
  470 D1:AD49 -  -  -  -  loadROMFile_noCHRROMFound:
  471 D1:AD49 C3 B1 AB D1     jp  err_CHRROMNotFound
  472 D1:AD4D -  -  -  -  loadROMFile_locatedCHRROM:
  473 D1:AD4D 19 -  -  -      add hl,de       ;Undid subtract. HL is now offset in current file
  474 D1:AD4E FD 17 02 -      ld  de,(iy+FILE_ADR_OFFSET) ;so get address inside that file.
  475 D1:AD51 19 -  -  -      add hl,de
  476 D1:AD52 79 -  -  -      ld  a,c
  477 D1:AD53 22 1B 34 D0     ld  (chr_rom_base),hl
  478 D1:AD57 32 1E 34 D0     ld  (chr_rom_base_file),a
  479 D1:AD5B -  -  -  -      ;Detect mapper and run its initializer
  480 D1:AD5B DD 7E 06 -      ld  a,(ix+6)
  481 D1:AD5E DD 46 07 -      ld  b,(ix+7)
  482 D1:AD61 07 -  -  -      rlca
  483 D1:AD62 07 -  -  -      rlca
  484 D1:AD63 07 -  -  -      rlca
  485 D1:AD64 07 -  -  -      rlca
  486 D1:AD65 A8 -  -  -      xor a,b
  487 D1:AD66 E6 0F -  -      and a,$0F
  488 D1:AD68 A8 -  -  -      xor a,b
  489 D1:AD69 52 EB -  -      ex.s de,hl  ;clears HLU,DEU
  490 D1:AD6B 5F -  -  -      ld  e,a
  491 D1:AD6C 21 12 34 D0     ld  hl,submapper
  492 D1:AD70 36 00 -  -      ld  (hl),0
  493 D1:AD72 78 -  -  -      ld  a,b
  494 D1:AD73 E6 0C -  -      and a,%00001100
  495 D1:AD75 FE 08 -  -      cp  a,%00001000
  496 D1:AD77 3E 00 -  -      ld  a,0
  497 D1:AD79 20 0E -  -      jr  nz,+_
  498 D1:AD7B DD 46 08 -      ld  b,(ix+8)
  499 D1:AD7E 78 -  -  -      ld  a,b
  500 D1:AD7F 07 -  -  -      rlca
  501 D1:AD80 07 -  -  -      rlca
  502 D1:AD81 07 -  -  -      rlca
  503 D1:AD82 07 -  -  -      rlca
  504 D1:AD83 E6 0F -  -      and a,$0F
  505 D1:AD85 77 -  -  -      ld  (hl),a
  506 D1:AD86 78 -  -  -      ld  a,b
  507 D1:AD87 E6 0F -  -      and a,$0F
  508 D1:AD89 57 -  -  -  _:  ld  d,a
  509 D1:AD8A ED 53 14 34 
              D0 -  -  -      ld  (mapper_id),de
  510 D1:AD8F 21 FF FF FF     ld  hl,-NUMBER_OF_MAPPERS
  511 D1:AD93 19 -  -  -      add hl,de
  512 D1:AD94 DA 8E AB D1     jp  c,err_MapperOutOfRange
  513 D1:AD98 ED 62 -  -      sbc hl,hl
  514 D1:AD9A 19 -  -  -      add hl,de               ;hl=de. both are mapper IDs
  515 D1:AD9B 2E 09 -  -      ld  L,MAPPER_STRIDE
  516 D1:AD9D 55 -  -  -      ld  d,L
  517 D1:AD9E ED 6C -  -      mlt hl                  ;high byte multiply
  518 D1:ADA0 65 -  -  -      ld  h,L
  519 D1:ADA1 2E 00 -  -      ld  L,0
  520 D1:ADA3 ED 5C -  -      mlt de                  ;low byte multiply
  521 D1:ADA5 19 -  -  -      add hl,de               ;This is the best 16bit * 8bit I know to do.
  522 D1:ADA6 11 B2 AD D1     ld  de,mapper_table
  523 D1:ADAA 19 -  -  -      add hl,de
  524 D1:ADAB 22 15 34 D0     ld  (mapper_adr_base),hl
  525 D1:ADAF ED 27 -  -      ld  hl,(hl)
  526 D1:ADB1 E9 -  -  -      jp  (hl)
  527 D1:ADB2 -  -  -  -  
  528 D1:ADB2 -  -  -  -  mapper_table:   ;entries 9 wide
  529 D1:ADB2 BB AD D1 -  .dl mapper0_init
  530 D1:ADB5 E9 AD D1 -  .dl mapper0_read
  531 D1:ADB8 0C AE D1 -  .dl mapper0_write
  532 D1:ADBB -  -  -  -  
  533 D1:ADBB -  -  -  -  mapper0_init:
  534 D1:ADBB -  -  -  -      ;map trainer, if exist
  535 D1:ADBB DD CB 06 56     bit 2,(ix+6)
  536 D1:ADBF 28 0D -  -      jr  z,+_
  537 D1:ADC1 2A 18 34 D0     ld  hl,(trainer_base)
  538 D1:ADC5 1E 70 -  -      ld  e,$70
  539 D1:ADC7 0E 02 -  -      ld  c,2
  540 D1:ADC9 41 -  -  -      ld  b,c
  541 D1:ADCA CD D0 B4 D1     call i6502_map_pages
  542 D1:ADCE 2A 0C 34 D0 _:  ld  hl,(prg_rom_size)
  543 D1:ADD2 11 FF BF FF     ld  de,-(16384+1)
  544 D1:ADD6 19 -  -  -      add hl,de   ;carry if more than 1 16KB segment
  545 D1:ADD7 2A 18 34 D0     ld  hl,(prg_rom_base)
  546 D1:ADDB -  -  -  -      ;jr  $
  547 D1:ADDB 06 80 -  -      ld  b,$80
  548 D1:ADDD 58 -  -  -      ld  e,b
  549 D1:ADDE 0E 40 -  -      ld  c,$40
  550 D1:ADE0 30 02 -  -      jr  nc,+_
  551 D1:ADE2 CB 21 -  -      sla c
  552 D1:ADE4 CD D0 B4 D1 _:  call i6502_map_pages
  553 D1:ADE8 C9 -  -  -      ret
  554 D1:ADE9 -  -  -  -  
  555 D1:ADE9 -  -  -  -  
  556 D1:ADE9 -  -  -  -  mapper0_read:
  557 D1:ADE9 7A -  -  -      ld  a,d
  558 D1:ADEA 87 -  -  -      add a,a
  559 D1:ADEB 30 08 -  -      jr  nc,+_
  560 D1:ADED 7E -  -  -      ld  a,(hl)  ;is $8000 or above
  561 D1:ADEE C9 -  -  -      ret
  562 D1:ADEF FE 40 -  -      cp  a,$20*2
  563 D1:ADF1 38 02 -  -      jr  c,+_
  564 D1:ADF3 7E -  -  -      ld  a,(hl)  ;is below $2000
  565 D1:ADF4 C9 -  -  -      ret
  566 D1:ADF5 87 -  -  -  _:  add a,a
  567 D1:ADF6 30 12 -  -      jr  nc,mapper0_ppu_read     ;wasn't $4000 or higher.
  568 D1:ADF8 28 02 -  -      jr  z,mapper0_apu_read      ;high byte was exactly $40
  569 D1:ADFA 7E -  -  -      ld  a,(hl)
  570 D1:ADFB C9 -  -  -      ret
  571 D1:ADFC -  -  -  -  mapper0_apu_read:
  572 D1:ADFC 7B -  -  -      ld  a,e
  573 D1:ADFD FE 16 -  -      cp  a,$16
  574 D1:ADFF 20 07 -  -      jr  nz,+_
  575 D1:AE01 AF -  -  -      xor a,a
  576 D1:AE02 DD CB FE 3E     srl (ix+APU_KEYPAD)
  577 D1:AE06 8F -  -  -      adc a,a                 ;TODO: Open bus behavior on bits 5-7
  578 D1:AE07 C9 -  -  -      ret
  579 D1:AE08 7E -  -  -  _:  ld  a,(hl)  ;hope that the dummy map page is good enough to not crash.
  580 D1:AE09 C9 -  -  -      ret
  581 D1:AE0A -  -  -  -  mapper0_ppu_read:
  582 D1:AE0A -  -  -  -      ;TODO: PPU SUPPORT
  583 D1:AE0A 7E -  -  -      ld  a,(hl)
  584 D1:AE0B C9 -  -  -      ret
  585 D1:AE0C -  -  -  -  
  586 D1:AE0C -  -  -  -  
  587 D1:AE0C -  -  -  -  
  588 D1:AE0C -  -  -  -  mapper0_write:
  589 D1:AE0C 7A -  -  -      ld  a,d
  590 D1:AE0D FE 20 -  -      cp  a,$20
  591 D1:AE0F 30 02 -  -      jr  nc,+_
  592 D1:AE11 70 -  -  -      ld  (hl),b
  593 D1:AE12 C9 -  -  -      ret
  594 D1:AE13 FE 40 -  -  _:  cp  a,$40
  595 D1:AE15 38 48 -  -      jr  c,mapper0_ppu_write
  596 D1:AE17 28 04 -  -      jr  z,mapper0_apu_write
  597 D1:AE19 87 -  -  -      add a,a
  598 D1:AE1A D8 -  -  -      ret c       ;don't write anything to above $8000
  599 D1:AE1B 70 -  -  -      ld  (hl),b  ;but allow it in $4100-$7FFF because it might be RAM.
  600 D1:AE1C C9 -  -  -      ret
  601 D1:AE1D -  -  -  -  mapper0_apu_write:
  602 D1:AE1D 7B -  -  -      ld  a,e
  603 D1:AE1E FE 16 -  -      cp  a,$16
  604 D1:AE20 20 3B -  -      jr  nz,+_
  605 D1:AE22 DD 7E FF -      ld  a,(ix+APU_KEYLATCH)
  606 D1:AE25 A8 -  -  -      xor a,b     ;Bit 0 is set if we're trying to change controller poll state.
  607 D1:AE26 0F -  -  -      rrca        ;And this is how we're going to get it.
  608 D1:AE27 D0 -  -  -      ret nc      ;Only support NES standard controller.
  609 D1:AE28 CB 40 -  -      bit 0,b     ;So... what are we changing it to?
  610 D1:AE2A DD 70 FF -      ld  (ix+APU_KEYLATCH),b
  611 D1:AE2D 21 00 00 F5     ld  hl,mpKeyMode
  612 D1:AE31 28 06 -  -      jr  z,mapper0_apu_stop_keyboard
  613 D1:AE33 7E -  -  -      ld  a,(hl)
  614 D1:AE34 FE 03 -  -      cp  a,3
  615 D1:AE36 C8 -  -  -      ret z       ;don't do anything to the keyboard if running continuous.
  616 D1:AE37 77 -  -  -      ld  (hl),a  ;else set to continuous and keep going.
  617 D1:AE38 C9 -  -  -      ret
  618 D1:AE39 -  -  -  -  mapper0_apu_stop_keyboard:
  619 D1:AE39 2E 12 -  -      ld  L,$12   ;76543210 : del mode 2nd y= wind zoom trace graph
  620 D1:AE3B 7E -  -  -      ld  a,(hl)
  621 D1:AE3C 2E 1E -  -      ld  L,$1E   ;----3210 : up right left down
  622 D1:AE3E 4E -  -  -      ld  c,(hl)
  623 D1:AE3F A9 -  -  -      xor a,c
  624 D1:AE40 E6 F0 -  -      and a,%11110000
  625 D1:AE42 A9 -  -  -      xor a,c     ;keymapping has changed. We need to further alter it.
  626 D1:AE43 -  -  -  -      ;[DE MO 2N Y= UP RI LE DO] maps to [SE, B, A, ST, UP, RI, LE, DO]
  627 D1:AE43 -  -  -  -      ;The above must be rearranged to become:
  628 D1:AE43 -  -  -  -      ;            [RI, LE, DO, UP, ST, SE, B , A ]
  629 D1:AE43 -  -  -  -      ;as compared to
  630 D1:AE43 -  -  -  -      ;            [SE, B , A , ST, UP, RI, LE, DO]
  631 D1:AE43 07 -  -  -      rlca        ;[B , A , ST, UP, RI, LE, DO, SE]
  632 D1:AE44 4F -  -  -      ld  c,a     ;b4  : UP is in correct position.
  633 D1:AE45 07 -  -  -      rlca        ;[A , ST, UP, RI, LE, DO, SE, B ]
  634 D1:AE46 07 -  -  -      rlca        ;[ST, UP, RI, LE, DO, SE, B , A ]
  635 D1:AE47 47 -  -  -      ld  b,a     ;b0-2:SE, B , and A are in the correct position
  636 D1:AE48 07 -  -  -      rlca        ;[UP, RI, LE, DO, SE, B , A , ST]
  637 D1:AE49 07 -  -  -      rlca        ;[RI, LE, DO, SE, B , A , ST, UP]
  638 D1:AE4A 57 -  -  -      ld  d,a     ;b5-7: RI LE DO in correct position.
  639 D1:AE4B 07 -  -  -      rlca        ;[LE, DO, SE, B , A , ST, UP, RI]
  640 D1:AE4C 07 -  -  -      rlca        ;b3: ST is in the correct position.
  641 D1:AE4D A9 -  -  -      xor a,c     ;
  642 D1:AE4E E6 08 -  -      and a,%00001000 ;keep A3, merge others
  643 D1:AE50 A9 -  -  -      xor a,c     ;Has: A3. Merge-in contains b4
  644 D1:AE51 A8 -  -  -      xor a,b     ;
  645 D1:AE52 E6 18 -  -      and a,%00011000 ;keep A3-4
  646 D1:AE54 A8 -  -  -      xor a,b     ;Merge-in contains b0-2
  647 D1:AE55 AA -  -  -      xor a,d     ;
  648 D1:AE56 E6 1F -  -      and a,%00011111 ;keep A0-4
  649 D1:AE58 AA -  -  -      xor a,d     ;Merge-in contains b5-7. Is complete.
  650 D1:AE59 DD 77 FE -      ld  (ix+APU_KEYPAD),a
  651 D1:AE5C C9 -  -  -      ret
  652 D1:AE5D -  -  -  -  _:  ;not even going to try to emulate the second controller.
  653 D1:AE5D 70 -  -  -      ld  (hl),b
  654 D1:AE5E C9 -  -  -      ret
  655 D1:AE5F -  -  -  -  mapper0_ppu_write:
  656 D1:AE5F 70 -  -  -      ld  (hl),b
  657 D1:AE60 C9 -  -  -      ret
  658 D1:AE61 -  -  -  -  
  659 D1:AE61 -  -  -  -  
  660 D1:AE61 -  -  -  -  
  661 D1:AE61 -  -  -  -  
  662 D1:AE61 -  -  -  -  
  663 D1:AE61 -  -  -  -  
  664 D1:AE61 -  -  -  -  loadROMFile_tempSig:    ;total 23 bytes
  665 D1:AE61 43 45 4E 52 
              4F 32 00 -  .db "CENRO2",0
  666 D1:AE68 -  -  -  -  loadROMFile_tempSigHash:
  667 D1:AE68 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;16 bytes for hash
  668 D1:AE78 -  -  -  -  
  669 D1:AE78 -  -  -  -  
  670 D1:AE78 -  -  -  -  ;Input: IY = locationOfSignature. 
  671 D1:AE78 -  -  -  -  ;       BC=size of signature (long load to clear BCU), still limited to 255.
  672 D1:AE78 -  -  -  -  ;Output: carry=1: Variable not found.
  673 D1:AE78 -  -  -  -  ;Output: carry=0: DE=address of variable data start after the signature
  674 D1:AE78 -  -  -  -  ;        IX=location of current variable's VAT location.
  675 D1:AE78 -  -  -  -  ;Destroys: All registers not in use.
  676 D1:AE78 -  -  -  -  ;NOTES: This routine is capable of resuming a search that has ended.
  677 D1:AE78 -  -  -  -  
  678 D1:AE78 -  -  -  -  ;To continue searching:
  679 D1:AE78 -  -  -  -  ;call vatTraverse_continue with the following inputs:
  680 D1:AE78 -  -  -  -  ;   IX preserved from a non-carry return of vatTraverse.
  681 D1:AE78 -  -  -  -  ;   BC = same as input for vatTraverse. vatTraverse does not destroy this reg.
  682 D1:AE78 -  -  -  -  ;   WARNING: DO NOT KEEP SEARCHING AFTER CALL RETURNS CARRY. START A NEW SEARCH.
  683 D1:AE78 -  -  -  -  vatTraverse:
  684 D1:AE78 -  -  -  -      ;progPtr = progvat start; ptemp = progvatend
  685 D1:AE78 DD 2A 9D 25 
              D0 -  -  -      ld  ix,(progPtr)
  686 D1:AE7D -  -  -  -  vatTraverse_loop:
  687 D1:AE7D 2A 9A 25 D0     ld  hl,(pTemp)
  688 D1:AE81 ED 12 00 -      lea de,ix+0
  689 D1:AE84 B7 -  -  -      or  a,a
  690 D1:AE85 ED 52 -  -      sbc hl,de   ;HL<DE while in pVAT, else carry set.
  691 D1:AE87 3F -  -  -      ccf
  692 D1:AE88 D8 -  -  -      ret c
  693 D1:AE89 1A -  -  -      ld  a,(de)
  694 D1:AE8A E6 1F -  -      and a,$1F
  695 D1:AE8C FE 15 -  -      cp  a,AppVarObj
  696 D1:AE8E 20 34 -  -      jr  nz,vatTraverse_skip
  697 D1:AE90 DD 17 F9 -      ld  de,(ix-7)   ;puts "page" byte in DEU
  698 D1:AE93 DD 5E FD -      ld  e,(ix-3)
  699 D1:AE96 DD 56 FC -      ld  d,(ix-4)
  700 D1:AE99 CD 98 1F 02     call _ChkInRam
  701 D1:AE9D EB -  -  -      ex  de,hl
  702 D1:AE9E 30 08 -  -      jr  nc,+_
  703 D1:AEA0 11 09 00 00     ld  de,9
  704 D1:AEA4 19 -  -  -      add hl,de
  705 D1:AEA5 5E -  -  -      ld  e,(hl)
  706 D1:AEA6 19 -  -  -      add hl,de
  707 D1:AEA7 23 -  -  -      inc hl
  708 D1:AEA8 5E -  -  -  _:  ld  e,(hl)
  709 D1:AEA9 23 -  -  -      inc hl
  710 D1:AEAA 56 -  -  -      ld  d,(hl)
  711 D1:AEAB 23 -  -  -      inc hl
  712 D1:AEAC EB -  -  -      ex  de,hl
  713 D1:AEAD B7 -  -  -      or  a,a
  714 D1:AEAE ED 42 -  -      sbc hl,bc   ;varsize-entrysize. If carry, entry cannot possibly be in var.
  715 D1:AEB0 38 12 -  -      jr  c,vatTraverse_skip
  716 D1:AEB2 ED 23 00 -      lea hl,iy+0
  717 D1:AEB5 C5 -  -  -      push bc
  718 D1:AEB6 1A -  -  -  _:      ld  a,(de)
  719 D1:AEB7 13 -  -  -          inc de
  720 D1:AEB8 ED A1 -  -          cpi
  721 D1:AEBA 20 07 -  -          jr  nz,vatTraverse_sigNoMatch
  722 D1:AEBC EA B6 AE D1         jp  pe,-_
  723 D1:AEC0 C1 -  -  -      pop bc
  724 D1:AEC1 B7 -  -  -      or  a,a
  725 D1:AEC2 C9 -  -  -      ret         ;NC. DE = past the signature.
  726 D1:AEC3 -  -  -  -  vatTraverse_sigNoMatch:
  727 D1:AEC3 C1 -  -  -      pop bc
  728 D1:AEC4 -  -  -  -  vatTraverse_continue:
  729 D1:AEC4 -  -  -  -  vatTraverse_skip:
  730 D1:AEC4 3E 07 -  -      ld  a,7
  731 D1:AEC6 11 FF FF FF     ld  de,-1
  732 D1:AECA DD 86 FA -      add a,(ix-6)
  733 D1:AECD ED 44 -  -      neg
  734 D1:AECF 5F -  -  -      ld  e,a
  735 D1:AED0 DD 19 -  -      add ix,de   ;because "sbc ix,de" isn't a thing. Boo.
  736 D1:AED2 18 A9 -  -      jr  vatTraverse_loop
  737 D1:AED4 -  -  -  -  
  738 D1:AED4 -  -  -  -  ;Copied from my Falldown2 project. I didn't want to have to
  739 D1:AED4 -  -  -  -  ;find yet another hardware reference for something I already did.
  740 D1:AED4 -  -  -  -  ;But I'll have to do it again anyway because this isn't exactly
  741 D1:AED4 -  -  -  -  ;what we're looking for. Here, we output the same sort of
  742 D1:AED4 -  -  -  -  ;game keys that I've used basically all my programming life.
  743 D1:AED4 -  -  -  -  ;Anyhoo. We'll be using the following:
  744 D1:AED4 -  -  -  -  ;kbitDown	equ 00h
  745 D1:AED4 -  -  -  -  ;kbitLeft	equ 01h
  746 D1:AED4 -  -  -  -  ;kbitRight	equ 02h
  747 D1:AED4 -  -  -  -  ;kbitUp		equ 03h
  748 D1:AED4 -  -  -  -  ;kbitYequ equ 04h
  749 D1:AED4 -  -  -  -  ;kbit2nd		equ 05h
  750 D1:AED4 -  -  -  -  ;kbitMode	equ 06h
  751 D1:AED4 -  -  -  -  ;kbitDel		equ 07h
  752 D1:AED4 -  -  -  -  ;You can find the other defines approximately where I found the stuff above.
  753 D1:AED4 -  -  -  -  
  754 D1:AED4 -  -  -  -  getkbd_adl:
  755 D1:AED4 DD 21 00 00 
              F5 -  -  -  	ld  ix,mpKeyMode
  756 D1:AED9 ED 22 00 -  	lea hl,ix+0
  757 D1:AEDC 36 02 -  -  	ld  (hl),keyModeScanOnce
  758 D1:AEDE AF -  -  -  	xor a
  759 D1:AEDF BE -  -  -  _:  cp  (hl)
  760 D1:AEE0 20 FD -  -  	jr  nz,-_
  761 D1:AEE2 DD 7E 12 -  	ld  a,(ix+kbdG1-mpKeyRange)
  762 D1:AEE5 DD 6E 1E -  	ld  l,(ix+kbdG7-mpKeyRange)
  763 D1:AEE8 AD -  -  -  	xor L
  764 D1:AEE9 E6 F0 -  -  	and 11110000b	;mask out lower bits to let me shove dpad bits in
  765 D1:AEEB AD -  -  -  	xor L
  766 D1:AEEC C9 -  -  -  	ret
  767 D1:AEED -  -  -  -  
  768 D1:AEED -  -  -  -  waituntilkeyrelease:
  769 D1:AEED CD D4 AE D1     call getkbd_adl
  770 D1:AEF1 B7 -  -  -      or  a,a
  771 D1:AEF2 20 F9 -  -      jr  nz,waituntilkeyrelease
  772 D1:AEF4 C9 -  -  -  	ret
  773 D1:AEF5 -  -  -  -  
  774 D1:AEF5 -  -  -  -  waituntilnewkeypress:
  775 D1:AEF5 CD ED AE D1     call waituntilkeyrelease
  776 D1:AEF9 CD D4 AE D1 _:  call getkbd_adl
  777 D1:AEFD B7 -  -  -  	or  a,a
  778 D1:AEFE 28 F9 -  -  	jr  z,-_
  779 D1:AF00 C9 -  -  -      ret
  780 D1:AF01 -  -  -  -  
  781 D1:AF01 -  -  -  -  #include "lcd.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    1 D1:AF01 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 D1:AF01 -  -  -  -  ;TI-84 Plus CE Include File
    2 D1:AF01 -  -  -  -  
    3 D1:AF01 -  -  -  -  ;Various Parts Contributed by
    4 D1:AF01 -  -  -  -  ;- BrandonW
    5 D1:AF01 -  -  -  -  ;- calc84
    6 D1:AF01 -  -  -  -  ;- MateoConLechuga
    7 D1:AF01 -  -  -  -  ;- Runer112
    8 D1:AF01 -  -  -  -  ;- tr1p1ea
    9 D1:AF01 -  -  -  -  ;- Kerm Martian
   10 D1:AF01 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    2 D1:AF01 -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
    5 D1:AF01 -  -  -  -  ;
    6 D1:AF01 -  -  -  -  ;
    7 D1:AF01 -  -  -  -  ;
    8 D1:AF01 -  -  -  -  
    9 D1:AF01 -  -  -  -  ;Undefine this to speed up core process by losing debug state
   10 D1:AF01 -  -  -  -  ;#define COREDEBUG
   11 D1:AF01 -  -  -  -  
   12 D1:AF01 -  -  -  -  DEBUG_PRINT_START_CYCLE .equ 0
   13 D1:AF01 -  -  -  -  DEBUG_STEP_START_CYCLE  .equ 30000 ;26485
   14 D1:AF01 -  -  -  -  
   15 D1:AF01 -  -  -  -  
   16 D1:AF01 -  -  -  -  
   17 D1:AF01 -  -  -  -  FONTFGCOLOR .EQU $FF
   18 D1:AF01 -  -  -  -  FONTBGCOLOR .EQU $00
   19 D1:AF01 -  -  -  -  
   20 D1:AF01 -  -  -  -  screenBuf1      .equ vRam
   21 D1:AF01 -  -  -  -  screenBuf2      .equ vRam+(320*240)
   22 D1:AF01 -  -  -  -  ;DO NOT MOVE THESE.
   23 D1:AF01 -  -  -  -  xPos                .equ $D031F6
   24 D1:AF01 -  -  -  -  yPos                .equ $D031F7
   25 D1:AF01 -  -  -  -  slopPos             .equ $D031F8        ;extra byte here
   26 D1:AF01 -  -  -  -  debugram            .equ $D031F9        ;FA and FB occupied too.
   27 D1:AF01 -  -  -  -  save_spl            .equ $D031FC        ;FD and FE occupied too.
   28 D1:AF01 -  -  -  -  save_mbase          .equ $D031FF        ;
   29 D1:AF01 -  -  -  -  core_memory_ix      .equ $D03280        ;occupies D03200 to D032FF
   30 D1:AF01 -  -  -  -  scrap_mapping       .equ $D03300        ;256 bytes. maps to nowhere important.
   31 D1:AF01 -  -  -  -  saferam1            .equ $D03400        ;1024 bytes available. Define later.
   32 D1:AF01 -  -  -  -  main_ram            .equ $D03800        ;$0800 bytes of main system memory
   33 D1:AF01 -  -  -  -  
   34 D1:AF01 -  -  -  -  ZEROPAGE            .equ main_ram+(0*256)
   35 D1:AF01 -  -  -  -  STACKBASE           .equ main_ram+(1*256)
   36 D1:AF01 -  -  -  -  
   37 D1:AF01 -  -  -  -  BASETABLE           .equ $D04000        ;variable size. 256*BASETABLE_STRIDE
   38 D1:AF01 -  -  -  -  BASETABLE_STRIDE    .equ 12
   39 D1:AF01 -  -  -  -  PAGETABLE_OFFSET    .equ 0
   40 D1:AF01 -  -  -  -  PAGETABLE           .equ BASETABLE+PAGETABLE_OFFSET
   41 D1:AF01 -  -  -  -  JUMPTABLE_OFFSET    .equ 4
   42 D1:AF01 -  -  -  -  JUMPTABLE           .equ BASETABLE+JUMPTABLE_OFFSET
   43 D1:AF01 -  -  -  -  USETABLE_OFFSET     .equ 8
   44 D1:AF01 -  -  -  -  USETABLE            .equ BASETABLE+USETABLE_OFFSET
   45 D1:AF01 -  -  -  -  
   46 D1:AF01 -  -  -  -  NAMETABLE1          .equ BASETABLE+(512*BASETABLE_STRIDE)
   47 D1:AF01 -  -  -  -  NAMETABLE2          .equ NAMETABLE1 + 1024
   48 D1:AF01 -  -  -  -  
   49 D1:AF01 -  -  -  -  ;saferam1 1024 bytes storage
   50 D1:AF01 -  -  -  -  ;
   51 D1:AF01 -  -  -  -  curScreenBuf        .equ saferam1           ;3b
   52 D1:AF01 -  -  -  -  linestart           .equ curScreenBuf+3     ;1b
   53 D1:AF01 -  -  -  -  inputNumFiles       .equ linestart+1        ;1b
   54 D1:AF01 -  -  -  -  basefile_sig        .equ inputNumFiles+1    ;3b pointer to 16b hash
   55 D1:AF01 -  -  -  -  missing_files       .equ basefile_sig+3     ;1b
   56 D1:AF01 -  -  -  -  total_rom_size      .equ missing_files+1    ;3b
   57 D1:AF01 -  -  -  -  prg_rom_size        .equ total_rom_size+3   ;3b
   58 D1:AF01 -  -  -  -  chr_rom_size        .equ prg_rom_size+3     ;3b
   59 D1:AF01 -  -  -  -  submapper           .equ chr_rom_size+3     ;1b. iNES2 thing. Not often used.
   60 D1:AF01 -  -  -  -  ines_flag_6         .equ submapper+1        ;1b. Flags that a mapper may need.
   61 D1:AF01 -  -  -  -  mapper_id           .equ ines_flag_6+1      ;3b. Convenience load for 12 bits
   62 D1:AF01 -  -  -  -  mapper_adr_base     .equ mapper_id+1        ;3b. Used to load mapper
   63 D1:AF01 -  -  -  -  trainer_base        .equ mapper_adr_base+3  ;3b. If exist, starts here
   64 D1:AF01 -  -  -  -  prg_rom_base        .equ mapper_adr_base+3  ;3b. Adjusted in case of trainer.
   65 D1:AF01 -  -  -  -  chr_rom_base        .equ prg_rom_base+3     ;3b. Located somewhere.
   66 D1:AF01 -  -  -  -  chr_rom_base_file   .equ chr_rom_base+3     ;1b. Nonzero if not in first file.
   67 D1:AF01 -  -  -  -  timings_base        .equ chr_rom_base_file+1    ;3b. Current pointer to timings
   68 D1:AF01 -  -  -  -  
   69 D1:AF01 -  -  -  -  SIZEOF_INTEGRITY_HASH    .equ 16
   70 D1:AF01 -  -  -  -  MAXPRGROM_HINIB     .equ 1
   71 D1:AF01 -  -  -  -  MAXCHRROM_HINIB     .equ 3
   72 D1:AF01 -  -  -  -  NUMBER_OF_MAPPERS   .equ 1
   73 D1:AF01 -  -  -  -  MAPPER_STRIDE       .equ 9
   74 D1:AF01 -  -  -  -  
   75 D1:AF01 -  -  -  -  MAXNUMFILES         .equ 1                  ;set to 32 later. that's like 1.5MB
   76 D1:AF01 -  -  -  -  FILETABLE_STRIDE    .equ 8
   77 D1:AF01 -  -  -  -  FILETABLE           .equ timings_base+3   ;(MAXNUMFILES*FILETABLE_STRIDE)b
   78 D1:AF01 -  -  -  -  FILE_SIZE_OFFSET    .equ 0
   79 D1:AF01 -  -  -  -  FILE_ADR_OFFSET     .equ 2
   80 D1:AF01 -  -  -  -  FILE_SIG_ADR_OFFSET .equ 5
   81 D1:AF01 -  -  -  -  
   82 D1:AF01 -  -  -  -  
   83 D1:AF01 -  -  -  -  ;
   84 D1:AF01 -  -  -  -  ;
   85 D1:AF01 -  -  -  -  
   86 D1:AF01 -  -  -  -  
   87 D1:AF01 -  -  -  -  
   88 D1:AF01 -  -  -  -  #define APU_KEYLATCH -1
   89 D1:AF01 -  -  -  -  #define APU_KEYPAD -2   ;First to last: A,B,SE,ST,UP,DO,LE,RI. 01234567.
   90 D1:AF01 -  -  -  -  ;core memory
   91 D1:AF01 -  -  -  -  #define REGA 0
   92 D1:AF01 -  -  -  -  #define REGX 1
   93 D1:AF01 -  -  -  -  #define REGY 2
   94 D1:AF01 -  -  -  -  #define REGSP 3
   95 D1:AF01 -  -  -  -  #define REGSR 4
   96 D1:AF01 -  -  -  -  #define REGPC 5
   97 D1:AF01 -  -  -  -  #define CYCLES_REMAIN 8
   98 D1:AF01 -  -  -  -  #define CYCLES_CURRENT 11
   99 D1:AF01 -  -  -  -  #define CURRENT_OPCODES 14
  100 D1:AF01 -  -  -  -  #define CORE_STACK_BASE 17
  101 D1:AF01 -  -  -  -  #define CORE_ERROR_LEVEL 20
  102 D1:AF01 -  -  -  -  ;flag IDs
  103 D1:AF01 -  -  -  -  #define SF_NEG 7
  104 D1:AF01 -  -  -  -  #define SF_OVER 6 
  105 D1:AF01 -  -  -  -  #define SF_RESERVED 5 
  106 D1:AF01 -  -  -  -  #define SF_BRK 4
  107 D1:AF01 -  -  -  -  #define SF_DEC 3
  108 D1:AF01 -  -  -  -  #define SF_INT 2
  109 D1:AF01 -  -  -  -  #define SF_ZERO 1
  110 D1:AF01 -  -  -  -  #define SF_CARRY 0
  111 D1:AF01 -  -  -  -  
  112 D1:AF01 -  -  -  -  #macro ADDCYC(X)
  113 D1:AF01                 #if (x < 1)
  114 D1:AF01                     nop
  115 D1:AF01                 #elif (X = 1)
  116 D1:AF01                     inc iy
  117 D1:AF01                 #else
  118 D1:AF01                     lea iy,iy+X
  119 D1:AF01                 #endif
  120 D1:AF01             #endmacro
  121 D1:AF01 -  -  -  -  
  122 D1:AF01 -  -  -  -  ;
  123 D1:AF01 -  -  -  -  ;
  124 D1:AF01 -  -  -  -  ;
  125 D1:AF01 -  -  -  -  #endif
  126 D1:AF01 -  -  -  -  .list
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    3 D1:AF01 -  -  -  -  
    4 D1:AF01 -  -  -  -  ;Function list:
    5 D1:AF01 -  -  -  -  ; fastCopy - Swaps drawing buffer to display what is currently written there.
    6 D1:AF01 -  -  -  -  ; startGfx - Configures LCD to run in graphx mode. UNSAFE TO RUN MORE THAN ONCE
    7 D1:AF01 -  -  -  -  ; stopGfx - Restores LCD configuration to TI-OS default.
    8 D1:AF01 -  -  -  -  ; configureScreen - Swaps screen configuration betwen current and stored.
    9 D1:AF01 -  -  -  -  ; setDefaultPalette - Sets default (XLIBC) color palette.
   10 D1:AF01 -  -  -  -  ; clearTextBuf - no inputs. Sets text buffer to all spaces.
   11 D1:AF01 -  -  -  -  ; printTextBuf - no inputs. Mirrors buffer to screen.
   12 D1:AF01 -  -  -  -  ; setLineStart - A=xpos. Set xPos and linestart
   13 D1:AF01 -  -  -  -  ; setCurLine - A=ypos. Set yPos.
   14 D1:AF01 -  -  -  -  ; newLine - no inputs. sets linestart = xPos, increments yPos
   15 D1:AF01 -  -  -  -  ; newPage - no inputs. sets linestart = xPos, yPos = 0
   16 D1:AF01 -  -  -  -  ; printString - HL=address to string. destroys all.
   17 D1:AF01 -  -  -  -  ; printBigFont - A=ASCII char to print at xPos,yPos. Advances xPos by 1.
   18 D1:AF01 -  -  -  -  ; printSmallNumPair - A=0-255 to print at xPos,Ypos. Advances xPos by 1.
   19 D1:AF01 -  -  -  -  ; calculateScreenPtr - Converts xPos,yPos into HL= screen buffer address.
   20 D1:AF01 -  -  -  -  ; calculateScreenPtrDE - Converts E=xPos,D=yPos into HL= screen buffer address.
   21 D1:AF01 -  -  -  -  ;
   22 D1:AF01 -  -  -  -  ;
   23 D1:AF01 -  -  -  -  ;
   24 D1:AF01 -  -  -  -  ;
   25 D1:AF01 -  -  -  -  ;
   26 D1:AF01 -  -  -  -  ;
   27 D1:AF01 -  -  -  -  ;
   28 D1:AF01 -  -  -  -  
   29 D1:AF01 -  -  -  -  
   30 D1:AF01 -  -  -  -  
   31 D1:AF01 -  -  -  -  
   32 D1:AF01 -  -  -  -  ;-----------------------------------------------------------------------------
   33 D1:AF01 -  -  -  -  ;Screen hardware interface stuff
   34 D1:AF01 -  -  -  -  
   35 D1:AF01 -  -  -  -  ;It ought to be called "bufSwap" but I just can't. I won't.
   36 D1:AF01 -  -  -  -  fastCopy:
   37 D1:AF01 11 00 00 D4     ld  de,screenBuf1
   38 D1:AF05 2A 10 00 E3     ld  hl,(mpLcdBase)
   39 D1:AF09 22 00 34 D0     ld  (curScreenBuf),hl
   40 D1:AF0D B7 -  -  -      or  a,a
   41 D1:AF0E ED 52 -  -      sbc hl,de
   42 D1:AF10 EB -  -  -      ex  de,hl
   43 D1:AF11 20 04 -  -      jr  nz,+_
   44 D1:AF13 21 00 2C D5     ld  hl,screenBuf2
   45 D1:AF17 22 10 00 E3 _:  ld  (mpLcdBase),hl
   46 D1:AF1B C9 -  -  -      ret
   47 D1:AF1C -  -  -  -  
   48 D1:AF1C -  -  -  -  stopGfx:
   49 D1:AF1C CD 74 03 00     call _boot_ClearVRAM
   50 D1:AF20 11 2D 09 00     ld  de,lcdNormalMode
   51 D1:AF24 01 00 00 D4     ld  bc,screenBuf1
   52 D1:AF28 18 0C -  -      jr  configureScreen
   53 D1:AF2A -  -  -  -  
   54 D1:AF2A -  -  -  -  startGfx:
   55 D1:AF2A CD 74 03 00     call _boot_ClearVRAM
   56 D1:AF2E 11 27 39 01     ld  de,lcdWatermark+lcdIntFront+lcdPwr+lcdBgr+lcdBpp8
   57 D1:AF32 01 00 00 D4     ld  bc,screenBuf1
   58 D1:AF36 -  -  -  -  configureScreen:
   59 D1:AF36 21 10 00 E3     ld  hl,mpLcdBase
   60 D1:AF3A ED 0F -  -      ld  (hl),bc
   61 D1:AF3C 2E 18 -  -      ld  L,lcdCtrl
   62 D1:AF3E ED 1F -  -      ld  (hl),de
   63 D1:AF40 2E 01 -  -      ld  L,lcdTiming0 + 1
   64 D1:AF42 01 08 00 00     ld  bc,8
   65 D1:AF46 11 75 AF D1     ld  de,screenSettings
   66 D1:AF4A 1A -  -  -  _:  ld  a,(de)
   67 D1:AF4B ED A0 -  -      ldi
   68 D1:AF4D 2B -  -  -      dec hl
   69 D1:AF4E 77 -  -  -      ld  (hl),a
   70 D1:AF4F 23 -  -  -      inc hl
   71 D1:AF50 EA 4A AF D1     jp  pe,-_
   72 D1:AF54 21 00 2C D5     ld  hl,screenBuf2
   73 D1:AF58 22 00 34 D0     ld  (curScreenBuf),hl
   74 D1:AF5C -  -  -  -  ;Also copied from graphx
   75 D1:AF5C -  -  -  -  setDefaultPalette:
   76 D1:AF5C 11 00 02 E3 	ld	de,mpLcdPalette	    ; address of mmio palette
   77 D1:AF60 43 -  -  -  	ld	b,e			        ; b = 0
   78 D1:AF61 78 -  -  -  _:	ld	a,b
   79 D1:AF62 0F -  -  -  	rrca
   80 D1:AF63 A8 -  -  -  	xor	a,b
   81 D1:AF64 E6 E0 -  -  	and	a,224
   82 D1:AF66 A8 -  -  -  	xor	a,b
   83 D1:AF67 12 -  -  -  	ld	(de),a
   84 D1:AF68 13 -  -  -  	inc	de
   85 D1:AF69 78 -  -  -  	ld	a,b
   86 D1:AF6A 17 -  -  -  	rla
   87 D1:AF6B 17 -  -  -  	rla
   88 D1:AF6C 17 -  -  -  	rla
   89 D1:AF6D 78 -  -  -  	ld	a,b
   90 D1:AF6E 1F -  -  -  	rra
   91 D1:AF6F 12 -  -  -  	ld	(de),a
   92 D1:AF70 13 -  -  -  	inc	de
   93 D1:AF71 04 -  -  -  	inc	b
   94 D1:AF72 20 ED -  -  	jr	nz,-_		    ; loop for 256 times to fill palette
   95 D1:AF74 C9 -  -  -  	ret
   96 D1:AF75 -  -  -  -  
   97 D1:AF75 -  -  -  -  screenSettings:
   98 D1:AF75 -  -  -  -  ;Copied from my old Falldown2 project, which was also copied from graphx.asm
   99 D1:AF75 -  -  -  -  ;	.db	14 shl 2			; PPL shl 2
  100 D1:AF75 07 -  -  -  	.db	7					; HSW
  101 D1:AF76 57 -  -  -  	.db	87					; HFP
  102 D1:AF77 3F -  -  -  	.db	63					; HBP
  103 D1:AF78 3F 01 -  -  	.dw	(0 >> 10)+319		; (VSW shl 10)+LPP
  104 D1:AF7A B3 -  -  -  	.db	179					; VFP
  105 D1:AF7B 00 -  -  -  	.db	0					; VBP
  106 D1:AF7C 00 -  -  -  	.db	(0 >> 6)+(0 >> 5)+0	; (ACB shl 6)+(CLKSEL shl 5)+PCD_LO
  107 D1:AF7D -  -  -  -  ;  H = ((PPL+1)*16)+(HSW+1)+(HFP+1)+(HBP+1) = 240+8+88+64 = 400
  108 D1:AF7D -  -  -  -  ;  V = (LPP+1)+(VSW+1)+VFP+VBP = 320+1+179+0 = 500
  109 D1:AF7D -  -  -  -  ; CC = H*V*PCD*2 = 400*500*2*2 = 800000
  110 D1:AF7D -  -  -  -  ; Hz = 48000000/CC = 60
  111 D1:AF7D -  -  -  -  
  112 D1:AF7D -  -  -  -  
  113 D1:AF7D -  -  -  -  ;-----------------------------------------------------------------------------
  114 D1:AF7D -  -  -  -  ; Text Rendering
  115 D1:AF7D -  -  -  -  
  116 D1:AF7D -  -  -  -  clearTextBuf:
  117 D1:AF7D 21 00 58 D0     ld  hl,NAMETABLE1
  118 D1:AF81 11 01 58 D0     ld  de,NAMETABLE1+1
  119 D1:AF85 01 FF 03 00     ld  bc,1023
  120 D1:AF89 36 20 -  -      ld  (hl),' '
  121 D1:AF8B ED B0 -  -      ldir
  122 D1:AF8D C9 -  -  -      ret
  123 D1:AF8E -  -  -  -  
  124 D1:AF8E -  -  -  -  printTextBuf:
  125 D1:AF8E 2A F6 31 D0     ld  hl,(xPos)
  126 D1:AF92 22 C2 AF D1     ld  (printTextBuf_smcPosRecovery),hl
  127 D1:AF96 21 00 58 D0     ld  hl,NAMETABLE1
  128 D1:AF9A AF -  -  -      xor a,a
  129 D1:AF9B 32 F7 31 D0     ld  (yPos),a
  130 D1:AF9F 0E 1E -  -      ld  c,30
  131 D1:AFA1 3E 08 -  -  _:  ld  a,8
  132 D1:AFA3 32 F6 31 D0     ld  (xPos),a
  133 D1:AFA7 06 20 -  -      ld  b,$20
  134 D1:AFA9 7E -  -  -  _:  ld  a,(hl)
  135 D1:AFAA 23 -  -  -      inc hl
  136 D1:AFAB C5 -  -  -      push bc
  137 D1:AFAC E5 -  -  -          push hl
  138 D1:AFAD CD 0B B0 D1             call printBigFont
  139 D1:AFB1 E1 -  -  -          pop hl
  140 D1:AFB2 C1 -  -  -      pop bc
  141 D1:AFB3 10 F4 -  -      djnz -_
  142 D1:AFB5 3A F7 31 D0     ld  a,(yPos)
  143 D1:AFB9 3C -  -  -      inc a
  144 D1:AFBA 32 F7 31 D0     ld  (yPos),a
  145 D1:AFBE 0D -  -  -      dec  c
  146 D1:AFBF 20 E0 -  -      jr  nz,--_
  147 D1:AFC1 -  -  -  -  printTextBuf_smcPosRecovery .equ $+1
  148 D1:AFC1 21 00 00 00     ld  hl,0
  149 D1:AFC5 22 F6 31 D0     ld  (xPos),hl
  150 D1:AFC9 C9 -  -  -      ret
  151 D1:AFCA -  -  -  -  
  152 D1:AFCA -  -  -  -  ;A=column to start on
  153 D1:AFCA -  -  -  -  setLineStart:
  154 D1:AFCA 32 F6 31 D0     ld  (xPos),a
  155 D1:AFCE 32 03 34 D0     ld  (linestart),a
  156 D1:AFD2 C9 -  -  -      ret
  157 D1:AFD3 -  -  -  -  
  158 D1:AFD3 -  -  -  -  ;A=row to start on
  159 D1:AFD3 -  -  -  -  setCurLine:
  160 D1:AFD3 32 F7 31 D0     ld  (yPos),a
  161 D1:AFD7 C9 -  -  -      ret
  162 D1:AFD8 -  -  -  -  
  163 D1:AFD8 -  -  -  -  newPage:
  164 D1:AFD8 3E FF -  -      ld  a,$FF
  165 D1:AFDA 32 F7 31 D0     ld  (yPos),a
  166 D1:AFDE -  -  -  -  newLine:
  167 D1:AFDE 3A 03 34 D0     ld  a,(linestart)
  168 D1:AFE2 32 F6 31 D0     ld  (xPos),a
  169 D1:AFE6 3A F7 31 D0     ld  a,(yPos)
  170 D1:AFEA 3C -  -  -      inc a
  171 D1:AFEB FE 1E -  -      cp  30
  172 D1:AFED 38 01 -  -      jr  c,+_
  173 D1:AFEF AF -  -  -      xor a,a
  174 D1:AFF0 32 F7 31 D0 _:  ld  (yPos),a
  175 D1:AFF4 C9 -  -  -      ret
  176 D1:AFF5 -  -  -  -  
  177 D1:AFF5 -  -  -  -      
  178 D1:AFF5 -  -  -  -      
  179 D1:AFF5 -  -  -  -  
  180 D1:AFF5 -  -  -  -  ;HL=address to string
  181 D1:AFF5 -  -  -  -  printString:
  182 D1:AFF5 7E -  -  -      ld  a,(hl)
  183 D1:AFF6 23 -  -  -      inc hl
  184 D1:AFF7 B7 -  -  -      or  a,a
  185 D1:AFF8 C8 -  -  -      ret z
  186 D1:AFF9 FE 0A -  -      cp  a,'\n'
  187 D1:AFFB 20 06 -  -      jr nz,+_
  188 D1:AFFD CD DE AF D1     call newLine
  189 D1:B001 18 F2 -  -      jr  printString
  190 D1:B003 E5 -  -  -  _:  push hl
  191 D1:B004 CD 0B B0 D1         call printBigFont
  192 D1:B008 E1 -  -  -      pop hl
  193 D1:B009 18 EA -  -      jr printString
  194 D1:B00B -  -  -  -  
  195 D1:B00B -  -  -  -  
  196 D1:B00B -  -  -  -  ;in: A=chrToPrint
  197 D1:B00B -  -  -  -  printBigFont:
  198 D1:B00B CD A0 B0 D1     call calculateScreenPtr
  199 D1:B00F EB -  -  -      ex  de,hl
  200 D1:B010 6F -  -  -      ld  L,a
  201 D1:B011 26 08 -  -      ld  H,8
  202 D1:B013 ED 6C -  -      mlt hl
  203 D1:B015 01 BA AF D1     ld  bc,graphx_textdata
  204 D1:B019 09 -  -  -      add hl,bc
  205 D1:B01A EB -  -  -      ex  de,hl
  206 D1:B01B 0E 08 -  -      ld  c,8
  207 D1:B01D 06 08 -  -  _:  ld  b,8
  208 D1:B01F 1A -  -  -      ld  a,(de)
  209 D1:B020 87 -  -  -  _:  add a,a
  210 D1:B021 -  -  -  -  fontBGColor_var .equ $+1
  211 D1:B021 36 00 -  -      ld  (hl),FONTBGCOLOR
  212 D1:B023 30 02 -  -      jr  nc,$+4
  213 D1:B025 -  -  -  -  fontFGColor_var .equ $+1
  214 D1:B025 36 FF -  -      ld  (hl),FONTFGCOLOR
  215 D1:B027 23 -  -  -      inc hl
  216 D1:B028 10 F6 -  -      djnz -_
  217 D1:B02A 79 -  -  -      ld  a,c
  218 D1:B02B 01 38 01 00     ld  bc,320-8
  219 D1:B02F 09 -  -  -      add hl,bc
  220 D1:B030 4F -  -  -      ld  c,a
  221 D1:B031 13 -  -  -      inc de
  222 D1:B032 0D -  -  -      dec c
  223 D1:B033 20 E8 -  -      jr  nz,--_
  224 D1:B035 21 F6 31 D0     ld  hl,xPos
  225 D1:B039 34 -  -  -      inc (hl)
  226 D1:B03A C9 -  -  -      ret
  227 D1:B03B -  -  -  -  
  228 D1:B03B -  -  -  -  ;A= 0-255 numeric value to display as hex
  229 D1:B03B -  -  -  -  printSmallNumPair:
  230 D1:B03B CD A0 B0 D1     call calculateScreenPtr
  231 D1:B03F F5 -  -  -      push af
  232 D1:B040 1F -  -  -          rra
  233 D1:B041 1F -  -  -          rra
  234 D1:B042 1F -  -  -          rra
  235 D1:B043 1F -  -  -          rra
  236 D1:B044 CD 53 B0 D1         call +_
  237 D1:B048 F1 -  -  -      pop af
  238 D1:B049 CD 53 B0 D1     call +_
  239 D1:B04D 21 F6 31 D0     ld  hl,xPos
  240 D1:B051 34 -  -  -      inc (hl)
  241 D1:B052 C9 -  -  -      ret
  242 D1:B053 E6 0F -  -  _:  and a,$0F
  243 D1:B055 01 40 01 00     ld  bc,320
  244 D1:B059 09 -  -  -      add hl,bc   ;drop height by one. These small chars are *short*
  245 D1:B05A EB -  -  -      ex  de,hl
  246 D1:B05B 6F -  -  -      ld  L,a
  247 D1:B05C 26 03 -  -      ld  H,3
  248 D1:B05E ED 6C -  -      mlt hl
  249 D1:B060 01 BA B3 D1     ld  bc,SmallHexFont
  250 D1:B064 09 -  -  -      add hl,bc
  251 D1:B065 EB -  -  -      ex  de,hl
  252 D1:B066 0E 03 -  -      ld  c,3
  253 D1:B068 18 14 -  -      jr  printSmallNumPair_2ndHalf
  254 D1:B06A -  -  -  -  printSmallNumPair_1stHalf:
  255 D1:B06A 1A -  -  -      ld  a,(de)
  256 D1:B06B 06 04 -  -      ld  b,4
  257 D1:B06D 87 -  -  -  _:  add a,a
  258 D1:B06E -  -  -  -  smallFontBGColor_var .equ $+1
  259 D1:B06E 36 00 -  -      ld  (hl),FONTBGCOLOR
  260 D1:B070 30 02 -  -      jr  nc,$+4
  261 D1:B072 -  -  -  -  smallFontFGColor_var .equ $+1
  262 D1:B072 36 FF -  -      ld  (hl),FONTFGCOLOR
  263 D1:B074 23 -  -  -      inc hl
  264 D1:B075 10 F6 -  -      djnz -_
  265 D1:B077 79 -  -  -      ld  a,c
  266 D1:B078 01 3C 01 00     ld  bc,320-4
  267 D1:B07C 09 -  -  -      add hl,bc
  268 D1:B07D 4F -  -  -      ld  c,a
  269 D1:B07E -  -  -  -  printSmallNumPair_2ndHalf:
  270 D1:B07E 1A -  -  -      ld  a,(de)
  271 D1:B07F 07 -  -  -      rlca
  272 D1:B080 07 -  -  -      rlca
  273 D1:B081 07 -  -  -      rlca
  274 D1:B082 07 -  -  -      rlca
  275 D1:B083 06 04 -  -      ld  b,4
  276 D1:B085 87 -  -  -  _:  add a,a
  277 D1:B086 36 00 -  -      ld  (hl),FONTBGCOLOR
  278 D1:B088 30 02 -  -      jr  nc,$+4
  279 D1:B08A 36 FF -  -      ld  (hl),FONTFGCOLOR
  280 D1:B08C 23 -  -  -      inc hl
  281 D1:B08D 10 F6 -  -      djnz -_
  282 D1:B08F 13 -  -  -      inc de
  283 D1:B090 79 -  -  -      ld  a,c
  284 D1:B091 01 3C 01 00     ld  bc,320-4
  285 D1:B095 09 -  -  -      add hl,bc
  286 D1:B096 4F -  -  -      ld  c,a
  287 D1:B097 0D -  -  -      dec c
  288 D1:B098 20 D0 -  -      jr  nz,printSmallNumPair_1stHalf
  289 D1:B09A 01 84 F8 FF     ld  bc,-(320*(1+5))+4
  290 D1:B09E 09 -  -  -      add hl,bc
  291 D1:B09F C9 -  -  -      ret
  292 D1:B0A0 -  -  -  -  
  293 D1:B0A0 -  -  -  -  calculateScreenPtr:
  294 D1:B0A0 -  -  -  -      ;xcoord: x * 8 
  295 D1:B0A0 -  -  -  -      ;ycoord: 320 * 8 * y
  296 D1:B0A0 -  -  -  -      ;coord: (8x)+320*8y -> 8(x+320y)
  297 D1:B0A0 ED 5B F6 31 
              D0 -  -  -      ld  de,(xPos)
  298 D1:B0A5 -  -  -  -  calculateScreenPtrDE:
  299 D1:B0A5 6A -  -  -      ld  L,d     ;yPos
  300 D1:B0A6 26 A0 -  -      ld  h,160
  301 D1:B0A8 ED 6C -  -      mlt hl
  302 D1:B0AA 29 -  -  -      add hl,hl
  303 D1:B0AB 16 01 -  -      ld  d,1
  304 D1:B0AD ED 5C -  -      mlt de      ;DE=E. Clears high bytes.
  305 D1:B0AF 19 -  -  -      add hl,de
  306 D1:B0B0 29 -  -  -      add hl,hl
  307 D1:B0B1 29 -  -  -      add hl,hl
  308 D1:B0B2 29 -  -  -      add hl,hl
  309 D1:B0B3 ED 5B 00 34 
              D0 -  -  -      ld  de,(curScreenBuf)
  310 D1:B0B8 19 -  -  -      add hl,de
  311 D1:B0B9 C9 -  -  -      ret
  312 D1:B0BA -  -  -  -  
  313 D1:B0BA -  -  -  -  
  314 D1:B0BA -  -  -  -  
  315 D1:B0BA -  -  -  -  
  316 D1:B0BA -  -  -  -  
  317 D1:B0BA -  -  -  -  
  318 D1:B0BA -  -  -  -  
  319 D1:B0BA -  -  -  -  
  320 D1:B0BA -  -  -  -  
  321 D1:B0BA -  -  -  -  ;-----------------------------------------------------------------------------
  322 D1:B0BA -  -  -  -  ; Data Section
  323 D1:B0BA -  -  -  -  
  324 D1:B0BA -  -  -  -  graphx_textdata		.EQU $-(8*' ')		;points to what would be start of ASCII
  325 D1:B0BA 00 00 00 00 
              00 00 00 00 .db	$00,$00,$00,$00,$00,$00,$00,$00 ;
  326 D1:B0C2 C0 C0 C0 C0 
              C0 00 C0 00 .db	$C0,$C0,$C0,$C0,$C0,$00,$C0,$00 ; !
  327 D1:B0CA D8 D8 D8 00 
              00 00 00 00 .db	$D8,$D8,$D8,$00,$00,$00,$00,$00 ; "
  328 D1:B0D2 6C 6C FE 6C 
              FE 6C 6C 00 .db	$6C,$6C,$FE,$6C,$FE,$6C,$6C,$00 ; #
  329 D1:B0DA 18 7E C0 7C 
              06 FC 18 00 .db	$18,$7E,$C0,$7C,$06,$FC,$18,$00 ; $
  330 D1:B0E2 00 C6 CC 18 
              30 66 C6 00 .db	$00,$C6,$CC,$18,$30,$66,$C6,$00 ; %
  331 D1:B0EA 38 6C 38 76 
              DC CC 76 00 .db	$38,$6C,$38,$76,$DC,$CC,$76,$00 ; &
  332 D1:B0F2 30 30 60 00 
              00 00 00 00 .db	$30,$30,$60,$00,$00,$00,$00,$00 ; '
  333 D1:B0FA 30 60 C0 C0 
              C0 60 30 00 .db	$30,$60,$C0,$C0,$C0,$60,$30,$00 ; (
  334 D1:B102 C0 60 30 30 
              30 60 C0 00 .db	$C0,$60,$30,$30,$30,$60,$C0,$00 ; )
  335 D1:B10A 00 66 3C FF 
              3C 66 00 00 .db	$00,$66,$3C,$FF,$3C,$66,$00,$00 ; *
  336 D1:B112 00 30 30 FC 
              FC 30 30 00 .db	$00,$30,$30,$FC,$FC,$30,$30,$00 ; +
  337 D1:B11A 00 00 00 00 
              00 60 60 C0 .db	$00,$00,$00,$00,$00,$60,$60,$C0 ; ,
  338 D1:B122 00 00 00 FC 
              00 00 00 00 .db	$00,$00,$00,$FC,$00,$00,$00,$00 ; -
  339 D1:B12A 00 00 00 00 
              00 C0 C0 00 .db	$00,$00,$00,$00,$00,$C0,$C0,$00 ; .
  340 D1:B132 06 0C 18 30 
              60 C0 80 00 .db	$06,$0C,$18,$30,$60,$C0,$80,$00 ; /
  341 D1:B13A 7C CE DE F6 
              E6 C6 7C 00 .db	$7C,$CE,$DE,$F6,$E6,$C6,$7C,$00 ; 0
  342 D1:B142 30 70 30 30 
              30 30 FC 00 .db	$30,$70,$30,$30,$30,$30,$FC,$00 ; 1
  343 D1:B14A 7C C6 06 7C 
              C0 C0 FE 00 .db	$7C,$C6,$06,$7C,$C0,$C0,$FE,$00 ; 2
  344 D1:B152 FC 06 06 3C 
              06 06 FC 00 .db	$FC,$06,$06,$3C,$06,$06,$FC,$00 ; 3
  345 D1:B15A 0C CC CC CC 
              FE 0C 0C 00 .db	$0C,$CC,$CC,$CC,$FE,$0C,$0C,$00 ; 4
  346 D1:B162 FE C0 FC 06 
              06 C6 7C 00 .db	$FE,$C0,$FC,$06,$06,$C6,$7C,$00 ; 5
  347 D1:B16A 7C C0 C0 FC 
              C6 C6 7C 00 .db	$7C,$C0,$C0,$FC,$C6,$C6,$7C,$00 ; 6
  348 D1:B172 FE 06 06 0C 
              18 30 30 00 .db	$FE,$06,$06,$0C,$18,$30,$30,$00 ; 7
  349 D1:B17A 7C C6 C6 7C 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$7C,$C6,$C6,$7C,$00 ; 8
  350 D1:B182 7C C6 C6 7E 
              06 06 7C 00 .db	$7C,$C6,$C6,$7E,$06,$06,$7C,$00 ; 9
  351 D1:B18A 00 C0 C0 00 
              00 C0 C0 00 .db	$00,$C0,$C0,$00,$00,$C0,$C0,$00 ; :
  352 D1:B192 00 60 60 00 
              00 60 60 C0 .db	$00,$60,$60,$00,$00,$60,$60,$C0 ; ;
  353 D1:B19A 18 30 60 C0 
              60 30 18 00 .db	$18,$30,$60,$C0,$60,$30,$18,$00 ; <
  354 D1:B1A2 00 00 FC 00 
              FC 00 00 00 .db	$00,$00,$FC,$00,$FC,$00,$00,$00 ; =
  355 D1:B1AA C0 60 30 18 
              30 60 C0 00 .db	$C0,$60,$30,$18,$30,$60,$C0,$00 ; >
  356 D1:B1B2 78 CC 18 30 
              30 00 30 00 .db	$78,$CC,$18,$30,$30,$00,$30,$00 ; ?
  357 D1:B1BA 7C C6 DE DE 
              DE C0 7E 00 .db	$7C,$C6,$DE,$DE,$DE,$C0,$7E,$00 ; @
  358 D1:B1C2 38 6C C6 C6 
              FE C6 C6 00 .db	$38,$6C,$C6,$C6,$FE,$C6,$C6,$00 ; A
  359 D1:B1CA FC C6 C6 FC 
              C6 C6 FC 00 .db	$FC,$C6,$C6,$FC,$C6,$C6,$FC,$00 ; B
  360 D1:B1D2 7C C6 C0 C0 
              C0 C6 7C 00 .db	$7C,$C6,$C0,$C0,$C0,$C6,$7C,$00 ; C
  361 D1:B1DA F8 CC C6 C6 
              C6 CC F8 00 .db	$F8,$CC,$C6,$C6,$C6,$CC,$F8,$00 ; D
  362 D1:B1E2 FE C0 C0 F8 
              C0 C0 FE 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$FE,$00 ; E
  363 D1:B1EA FE C0 C0 F8 
              C0 C0 C0 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$C0,$00 ; F
  364 D1:B1F2 7C C6 C0 C0 
              CE C6 7C 00 .db	$7C,$C6,$C0,$C0,$CE,$C6,$7C,$00 ; G
  365 D1:B1FA C6 C6 C6 FE 
              C6 C6 C6 00 .db	$C6,$C6,$C6,$FE,$C6,$C6,$C6,$00 ; H
  366 D1:B202 7E 18 18 18 
              18 18 7E 00 .db	$7E,$18,$18,$18,$18,$18,$7E,$00 ; I
  367 D1:B20A 06 06 06 06 
              06 C6 7C 00 .db	$06,$06,$06,$06,$06,$C6,$7C,$00 ; J
  368 D1:B212 C6 CC D8 F0 
              D8 CC C6 00 .db	$C6,$CC,$D8,$F0,$D8,$CC,$C6,$00 ; K
  369 D1:B21A C0 C0 C0 C0 
              C0 C0 FE 00 .db	$C0,$C0,$C0,$C0,$C0,$C0,$FE,$00 ; L
  370 D1:B222 C6 EE FE FE 
              D6 C6 C6 00 .db	$C6,$EE,$FE,$FE,$D6,$C6,$C6,$00 ; M
  371 D1:B22A C6 E6 F6 DE 
              CE C6 C6 00 .db	$C6,$E6,$F6,$DE,$CE,$C6,$C6,$00 ; N
  372 D1:B232 7C C6 C6 C6 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$C6,$C6,$C6,$7C,$00 ; O
  373 D1:B23A FC C6 C6 FC 
              C0 C0 C0 00 .db	$FC,$C6,$C6,$FC,$C0,$C0,$C0,$00 ; P
  374 D1:B242 7C C6 C6 C6 
              D6 DE 7C 06 .db	$7C,$C6,$C6,$C6,$D6,$DE,$7C,$06 ; Q
  375 D1:B24A FC C6 C6 FC 
              D8 CC C6 00 .db	$FC,$C6,$C6,$FC,$D8,$CC,$C6,$00 ; R
  376 D1:B252 7C C6 C0 7C 
              06 C6 7C 00 .db	$7C,$C6,$C0,$7C,$06,$C6,$7C,$00 ; S
  377 D1:B25A FF 18 18 18 
              18 18 18 00 .db	$FF,$18,$18,$18,$18,$18,$18,$00 ; T
  378 D1:B262 C6 C6 C6 C6 
              C6 C6 FE 00 .db	$C6,$C6,$C6,$C6,$C6,$C6,$FE,$00 ; U
  379 D1:B26A C6 C6 C6 C6 
              C6 7C 38 00 .db	$C6,$C6,$C6,$C6,$C6,$7C,$38,$00 ; V
  380 D1:B272 C6 C6 C6 C6 
              D6 FE 6C 00 .db	$C6,$C6,$C6,$C6,$D6,$FE,$6C,$00 ; W
  381 D1:B27A C6 C6 6C 38 
              6C C6 C6 00 .db	$C6,$C6,$6C,$38,$6C,$C6,$C6,$00 ; X
  382 D1:B282 C6 C6 C6 7C 
              18 30 E0 00 .db	$C6,$C6,$C6,$7C,$18,$30,$E0,$00 ; Y
  383 D1:B28A FE 06 0C 18 
              30 60 FE 00 .db	$FE,$06,$0C,$18,$30,$60,$FE,$00 ; Z
  384 D1:B292 F0 C0 C0 C0 
              C0 C0 F0 00 .db	$F0,$C0,$C0,$C0,$C0,$C0,$F0,$00 ; [
  385 D1:B29A C0 60 30 18 
              0C 06 02 00 .db	$C0,$60,$30,$18,$0C,$06,$02,$00 ; \
  386 D1:B2A2 F0 30 30 30 
              30 30 F0 00 .db	$F0,$30,$30,$30,$30,$30,$F0,$00 ; ]
  387 D1:B2AA 10 38 6C C6 
              00 00 00 00 .db	$10,$38,$6C,$C6,$00,$00,$00,$00 ; ^
  388 D1:B2B2 00 00 00 00 
              00 00 00 FF .db	$00,$00,$00,$00,$00,$00,$00,$FF ; _
  389 D1:B2BA C0 C0 60 00 
              00 00 00 00 .db	$C0,$C0,$60,$00,$00,$00,$00,$00 ; `
  390 D1:B2C2 00 00 7C 06 
              7E C6 7E 00 .db	$00,$00,$7C,$06,$7E,$C6,$7E,$00 ; a
  391 D1:B2CA C0 C0 C0 FC 
              C6 C6 FC 00 .db	$C0,$C0,$C0,$FC,$C6,$C6,$FC,$00 ; b
  392 D1:B2D2 00 00 7C C6 
              C0 C6 7C 00 .db	$00,$00,$7C,$C6,$C0,$C6,$7C,$00 ; c
  393 D1:B2DA 06 06 06 7E 
              C6 C6 7E 00 .db	$06,$06,$06,$7E,$C6,$C6,$7E,$00 ; d
  394 D1:B2E2 00 00 7C C6 
              FE C0 7C 00 .db	$00,$00,$7C,$C6,$FE,$C0,$7C,$00 ; e
  395 D1:B2EA 1C 36 30 78 
              30 30 78 00 .db	$1C,$36,$30,$78,$30,$30,$78,$00 ; f
  396 D1:B2F2 00 00 7E C6 
              C6 7E 06 FC .db	$00,$00,$7E,$C6,$C6,$7E,$06,$FC ; g
  397 D1:B2FA C0 C0 FC C6 
              C6 C6 C6 00 .db	$C0,$C0,$FC,$C6,$C6,$C6,$C6,$00 ; h
  398 D1:B302 18 00 38 18 
              18 18 3C 00 .db	$18,$00,$38,$18,$18,$18,$3C,$00 ; i
  399 D1:B30A 06 00 06 06 
              06 06 C6 7C .db	$06,$00,$06,$06,$06,$06,$C6,$7C ; j
  400 D1:B312 C0 C0 CC D8 
              F8 CC C6 00 .db	$C0,$C0,$CC,$D8,$F8,$CC,$C6,$00 ; k
  401 D1:B31A 38 18 18 18 
              18 18 3C 00 .db	$38,$18,$18,$18,$18,$18,$3C,$00 ; l
  402 D1:B322 00 00 CC FE 
              FE D6 D6 00 .db	$00,$00,$CC,$FE,$FE,$D6,$D6,$00 ; m
  403 D1:B32A 00 00 FC C6 
              C6 C6 C6 00 .db	$00,$00,$FC,$C6,$C6,$C6,$C6,$00 ; n
  404 D1:B332 00 00 7C C6 
              C6 C6 7C 00 .db	$00,$00,$7C,$C6,$C6,$C6,$7C,$00 ; o
  405 D1:B33A 00 00 FC C6 
              C6 FC C0 C0 .db	$00,$00,$FC,$C6,$C6,$FC,$C0,$C0 ; p
  406 D1:B342 00 00 7E C6 
              C6 7E 06 06 .db	$00,$00,$7E,$C6,$C6,$7E,$06,$06 ; q
  407 D1:B34A 00 00 FC C6 
              C0 C0 C0 00 .db	$00,$00,$FC,$C6,$C0,$C0,$C0,$00 ; r
  408 D1:B352 00 00 7E C0 
              7C 06 FC 00 .db	$00,$00,$7E,$C0,$7C,$06,$FC,$00 ; s
  409 D1:B35A 30 30 FC 30 
              30 30 1C 00 .db	$30,$30,$FC,$30,$30,$30,$1C,$00 ; t
  410 D1:B362 00 00 C6 C6 
              C6 C6 7E 00 .db	$00,$00,$C6,$C6,$C6,$C6,$7E,$00 ; u
  411 D1:B36A 00 00 C6 C6 
              C6 7C 38 00 .db	$00,$00,$C6,$C6,$C6,$7C,$38,$00 ; v
  412 D1:B372 00 00 C6 C6 
              D6 FE 6C 00 .db	$00,$00,$C6,$C6,$D6,$FE,$6C,$00 ; w
  413 D1:B37A 00 00 C6 6C 
              38 6C C6 00 .db	$00,$00,$C6,$6C,$38,$6C,$C6,$00 ; x
  414 D1:B382 00 00 C6 C6 
              C6 7E 06 FC .db	$00,$00,$C6,$C6,$C6,$7E,$06,$FC ; y
  415 D1:B38A 00 00 FE 0C 
              38 60 FE 00 .db	$00,$00,$FE,$0C,$38,$60,$FE,$00 ; z
  416 D1:B392 1C 30 30 E0 
              30 30 1C 00 .db	$1C,$30,$30,$E0,$30,$30,$1C,$00 ; {
  417 D1:B39A C0 C0 C0 00 
              C0 C0 C0 00 .db	$C0,$C0,$C0,$00,$C0,$C0,$C0,$00 ; |
  418 D1:B3A2 E0 30 30 1C 
              30 30 E0 00 .db	$E0,$30,$30,$1C,$30,$30,$E0,$00 ; }
  419 D1:B3AA 76 DC 00 00 
              00 00 00 00 .db	$76,$DC,$00,$00,$00,$00,$00,$00 ; ~
  420 D1:B3B2 00 10 38 6C 
              C6 C6 FE 00 .db	$00,$10,$38,$6C,$C6,$C6,$FE,$00 ; △
  421 D1:B3BA -  -  -  -  
  422 D1:B3BA -  -  -  -  ;Copied from the Escheron: Twilight over Ragnoth project
  423 D1:B3BA -  -  -  -  ;whose format was copied from a (then-)authorized source
  424 D1:B3BA -  -  -  -  ;for DoorsCS (I think? The one for the 83+) by "Kerm Martian".
  425 D1:B3BA -  -  -  -  SmallHexFont:
  426 D1:B3BA 4E AA AE -  .db $4E,$AA,$AE				;zero
  427 D1:B3BD 44 C4 4E -  .db $44,$C4,$4E				;one
  428 D1:B3C0 4C 24 8E -  .db $4C,$24,$8E				;two
  429 D1:B3C3 4C 24 2C -  .db $4C,$24,$2C				;three
  430 D1:B3C6 48 AE 22 -  .db $48,$AE,$22				;four
  431 D1:B3C9 4E 8C 2C -  .db $4E,$8C,$2C				;five
  432 D1:B3CC 46 8E AE -  .db $46,$8E,$AE				;six
  433 D1:B3CF 4E 24 88 -  .db $4E,$24,$88				;seven
  434 D1:B3D2 4E AE AE -  .db $4E,$AE,$AE				;eight
  435 D1:B3D5 4E AE 2C -  .db $4E,$AE,$2C				;nine
  436 D1:B3D8 44 AE AA -  .db $44,$AE,$AA				;A
  437 D1:B3DB 4C AC AC -  .db $4C,$AC,$AC				;B
  438 D1:B3DE 46 88 86 -  .db $46,$88,$86				;C
  439 D1:B3E1 4C AA AC -  .db $4C,$AA,$AC				;D
  440 D1:B3E4 4E 8C 8E -  .db $4E,$8C,$8E				;E
  441 D1:B3E7 4E 8C 88 -  .db $4E,$8C,$88				;F
  442 D1:B3EA -  -  -  -  
  443 D1:B3EA -  -  -  -  
  444 D1:B3EA -  -  -  -  
Listing for file "main.z80"
  782 D1:B3EA -  -  -  -  #include "core.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    1 D1:B3EA -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    2 D1:B3EA -  -  -  -  
    3 D1:B3EA -  -  -  -  ;TODO: DEFINE MEMORY ACCESS MACROS. ONE OR MORE FOR READ AND WRITE.
    4 D1:B3EA -  -  -  -  ;FIGURE OUT HOW TO GET BOTH HIGH AND LOW BYTE OF ORIGINAL ADDRESS
    5 D1:B3EA -  -  -  -  ;AND PERFORM ALTERNATE ACTIONS BASED ON WHAT HARDWARE WAS ACCESSED.
    6 D1:B3EA -  -  -  -  ;NOTE: PATTERN SHOWS THAT D=MSB, C=LSB OF 6502 ADDRESS. USE THIS.
    7 D1:B3EA -  -  -  -  ;
    8 D1:B3EA -  -  -  -  ;THESE MACROS ARE PLACEHOLDERS. CHANGE THEM LATER ON TO REFLECT ACTUAL
    9 D1:B3EA -  -  -  -  ;HARDWARE SHENANIGANS.
   10 D1:B3EA -  -  -  -  ;
   11 D1:B3EA -  -  -  -  ;NOTE: WRITE ACCESSES RELY ON KNOWING WHAT DATA TO WRITE. CAN'T STORE THAT IN A
   12 D1:B3EA -  -  -  -  ;      SINCE WE NEED TO DO CONDITIONING. REGISTER B IS UNUSED SO LET'S USE THAT.
   13 D1:B3EA -  -  -  -  ;
   14 D1:B3EA -  -  -  -  #define READ_ACCESS call mapper0_read
   15 D1:B3EA -  -  -  -  #define WRITE_ACCESS call mapper0_write
   16 D1:B3EA -  -  -  -  ;Later, put in actual test. Z if not triggered, NZ if triggered. This
   17 D1:B3EA -  -  -  -  ;alters the behavior of the BRK instruction.
   18 D1:B3EA -  -  -  -  #define WAS_NMI_TRIGGERED or  a
   19 D1:B3EA -  -  -  -  
   20 D1:B3EA -  -  -  -  #define OPRFLG_C res SF_CARRY,b \ jr nc,$+4 \ set SF_CARRY,b
   21 D1:B3EA -  -  -  -  #define OPRFLG_V res SF_OVER,b \ jp po,$+6 \ set SF_OVER,b
   22 D1:B3EA -  -  -  -  #define OPRFLG_Z res SF_ZERO,b \ jr nz,$+4 \ set SF_ZERO,b
   23 D1:B3EA -  -  -  -  #define OPRFLG_N res SF_NEG,b \ jr nc,$+4 \ set SF_NEG,b
   24 D1:B3EA -  -  -  -  
   25 D1:B3EA -  -  -  -  #define FLAGS_ZN ld b,(ix+REGSR) \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   26 D1:B3EA -  -  -  -  #define FLAGS_CZN ld b,(ix+REGSR) \ OPRFLG_C \ rlc a  \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   27 D1:B3EA -  -  -  -  #define FLAGS_VCZN ld b,(ix+REGSR) \ OPRFLG_V \ OPRFLG_C \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   28 D1:B3EA -  -  -  -  
   29 D1:B3EA -  -  -  -  
   30 D1:B3EA -  -  -  -  ;Modify later to include provisions for hardware i/o based on page
   31 D1:B3EA -  -  -  -  #define HW_READ(src_reg) ld a,(src_reg)
   32 D1:B3EA -  -  -  -  #define HW_WRITE(dst_reg) ld (dst_reg),a
   33 D1:B3EA -  -  -  -  
   34 D1:B3EA -  -  -  -  
   35 D1:B3EA -  -  -  -  
   36 D1:B3EA -  -  -  -  
   37 D1:B3EA -  -  -  -  ;=============================================================================
   38 D1:B3EA -  -  -  -  ;=============================================================================
   39 D1:B3EA -  -  -  -  ;=============================================================================
   40 D1:B3EA -  -  -  -  ;=============================================================================
   41 D1:B3EA -  -  -  -  ;You should have set up the mappings already. This is because
   42 D1:B3EA -  -  -  -  ;mappings are program-dependant. Only $0000-$3FFF will be mapped in here
   43 D1:B3EA -  -  -  -  ;more or less because I don't expect anything else to map that.
   44 D1:B3EA -  -  -  -  i6502Init:
   45 D1:B3EA -  -  -  -      ;
   46 D1:B3EA -  -  -  -      ; At this point, you may need to randomize 2048 bytes at main_ram
   47 D1:B3EA -  -  -  -      ;
   48 D1:B3EA 21 00 38 D0     ld  hl,main_ram
   49 D1:B3EE 01 08 20 00     ld  bc,$002008
   50 D1:B3F2 1E 00 -  -      ld  e,$00
   51 D1:B3F4 CD D0 B4 D1     call i6502_map_pages
   52 D1:B3F8 21 00 33 D0     ld  hl,scrap_mapping
   53 D1:B3FC 01 01 20 00     ld  bc,$002001
   54 D1:B400 1E 20 -  -      ld  e,$20
   55 D1:B402 CD D0 B4 D1     call i6502_map_pages
   56 D1:B406 CD B7 B4 D1     call i6502_load_instruction_set
   57 D1:B40A -  -  -  -      ;
   58 D1:B40A DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   59 D1:B40F FD 21 02 00 
              00 -  -  -      ld  iy,2    ;8 cycle startup. Hooking into inst6502_jsr for init
   60 D1:B414 ED 22 80 -      lea hl,ix-128
   61 D1:B417 ED 12 81 -      lea de,ix-127
   62 D1:B41A 01 FF 00 00     ld  bc,255
   63 D1:B41E 36 00 -  -      ld  (hl),$00
   64 D1:B420 ED B0 -  -      ldir
   65 D1:B422 -  -  -  -      ;
   66 D1:B422 21 00 00 00     ld  hl,0
   67 D1:B426 39 -  -  -      add hl,sp
   68 D1:B427 DD 2F 11 -      ld  (ix+CORE_STACK_BASE),hl
   69 D1:B42A -  -  -  -  
   70 D1:B42A -  -  -  -      ;Note: SP may need initialization. So does SR for interrupts. Or somesuch.
   71 D1:B42A 21 F4 4B D0     ld  hl,PAGETABLE+(255*BASETABLE_STRIDE)
   72 D1:B42E ED 27 -  -      ld  hl,(hl)
   73 D1:B430 11 FC 00 00     ld  de,$0000FC
   74 D1:B434 19 -  -  -      add hl,de
   75 D1:B435 -  -  -  -      ;
   76 D1:B435 -  -  -  -      ;jp inst6502_jsr
   77 D1:B435 -  -  -  -      ;Manual loading below. Uncomment "jp inst6502_jsr" to return to original.
   78 D1:B435 -  -  -  -      ;Settings below is to run nestest CPU-only test. The reset vector above
   79 D1:B435 -  -  -  -      ;requires a working PPU (and probably APU) to be present.
   80 D1:B435 DD 36 04 24     ld  (ix+REGSR),$24      ;because that's what the log wants?
   81 D1:B439 21 00 C0 00     ld  hl,$C000
   82 D1:B43D DD 2F 05 -      ld  (ix+REGPC),HL
   83 D1:B440 FD 21 07 00 
              00 -  -  -      ld  iy,7
   84 D1:B445 DD 36 03 FD     ld  (ix+REGSP),$FD
   85 D1:B449 -  -  -  -      ;debug stuff
   86 D1:B449 3A 30 00 F2     ld  a,($F20030)
   87 D1:B44D CB C7 -  -      set 0,a ;turn on timer 1
   88 D1:B44F 32 30 00 F2     ld  ($F20030),a
   89 D1:B453 -  -  -  -  
   90 D1:B453 -  -  -  -  i6502FirstLoad:
   91 D1:B453 52 DD 17 05     ld.s de,(ix+REGPC)
   92 D1:B457 7B -  -  -      ld  a,e
   93 D1:B458 1E 0C -  -      ld  e,BASETABLE_STRIDE
   94 D1:B45A ED 5C -  -      mlt de
   95 D1:B45C 21 00 40 D0     ld  hl,PAGETABLE
   96 D1:B460 19 -  -  -      add hl,de
   97 D1:B461 ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
   98 D1:B463 16 00 -  -      ld  d,0
   99 D1:B465 5F -  -  -      ld  e,a
  100 D1:B466 19 -  -  -      add hl,de       ;resolve final address
  101 D1:B467 18 19 -  -      jr  i6502FinishLoad
  102 D1:B469 -  -  -  -  i6502NextLoad:
  103 D1:B469 23 -  -  -      inc hl
  104 D1:B46A 1C -  -  -      inc e
  105 D1:B46B 20 15 -  -      jr  nz,i6502FinishLoad
  106 D1:B46D DD 56 06 -      ld  d,(ix+REGPC+1)
  107 D1:B470 14 -  -  -      inc d
  108 D1:B471 52 DD 1F 05     ld.s (ix+REGPC),de
  109 D1:B475 1E 0C -  -      ld  e,BASETABLE_STRIDE
  110 D1:B477 ED 5C -  -      mlt de
  111 D1:B479 21 00 40 D0     ld  hl,PAGETABLE
  112 D1:B47D 19 -  -  -      add hl,de
  113 D1:B47E ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
  114 D1:B480 1E 00 -  -      ld  e,0         ;PCL known to be zero at this point.
  115 D1:B482 -  -  -  -  i6502FinishLoad:
  116 D1:B482 7E -  -  -      ld  a,(hl)
  117 D1:B483 -  -  -  -  
  118 D1:B483 -  -  -  -  #ifdef COREDEBUG
  119 D1:B483                 ld  (ix+CURRENT_OPCODES+0),a
  120 D1:B483                 ld  (ix+REGPC+0),e
  121 D1:B483             #endif
  122 D1:B483 23 -  -  -      inc hl
  123 D1:B484 1C -  -  -      inc e
  124 D1:B485 20 15 -  -      jr  nz,i6502PrepNextPage
  125 D1:B487 DD 56 06 -      ld  d,(ix+REGPC+1)
  126 D1:B48A 14 -  -  -      inc d
  127 D1:B48B 52 DD 1F 05     ld.s (ix+REGPC),de
  128 D1:B48F 1E 0C -  -      ld  e,BASETABLE_STRIDE
  129 D1:B491 ED 5C -  -      mlt de
  130 D1:B493 21 00 40 D0     ld  hl,PAGETABLE
  131 D1:B497 19 -  -  -      add hl,de
  132 D1:B498 ED 27 -  -      ld  hl,(hl)
  133 D1:B49A 1E 00 -  -      ld  e,0
  134 D1:B49C -  -  -  -  i6502PrepNextPage:
  135 D1:B49C -  -  -  -  #ifdef COREDEBUG
  136 D1:B49C                 push af
  137 D1:B49C                     ld  a,(hl)
  138 D1:B49C                     ld  (ix+CURRENT_OPCODES+1),a
  139 D1:B49C                     push de
  140 D1:B49C                         push hl
  141 D1:B49C                             push ix
  142 D1:B49C                                 inc hl
  143 D1:B49C                                 inc e
  144 D1:B49C                                 jr  nz,+_
  145 D1:B49C                                 ld  d,(ix+REGPC+1)
  146 D1:B49C                                 inc d
  147 D1:B49C                                 ld  e,BASETABLE_STRIDE
  148 D1:B49C                                 mlt de
  149 D1:B49C                                 ld  hl,PAGETABLE
  150 D1:B49C                                 add hl,de
  151 D1:B49C                                 ld  hl,(hl)
  152 D1:B49C             _:                  ld  a,(hl)
  153 D1:B49C                                 ld  (ix+CURRENT_OPCODES+2),a
  154 D1:B49C                                 lea hl,ix
  155 D1:B49C                                 ld  de,core_memory_ix
  156 D1:B49C                                 or  a,a
  157 D1:B49C                                 sbc hl,de
  158 D1:B49C                                 jr  nz,$    ;halt program if IX is not core_memory_ix
  159 D1:B49C                                 ;jr $
  160 D1:B49C                                 push iy
  161 D1:B49C                                     call dbg_printLine
  162 D1:B49C                                 pop iy
  163 D1:B49C                                 ld  a,(ix+CORE_ERROR_LEVEL)
  164 D1:B49C                                 or  a,a
  165 D1:B49C                                 jr  z,+_
  166 D1:B49C                                 ld  hl,(ix+CORE_STACK_BASE)
  167 D1:B49C                                 ld  sp,hl
  168 D1:B49C                                 ret
  169 D1:B49C             _:                  ld  iy,(ix+CYCLES_CURRENT)  ;remove when done with timings
  170 D1:B49C                                 lea hl,iy+0
  171 D1:B49C                                 ld  de,DEBUG_STEP_START_CYCLE
  172 D1:B49C                                 or  a,a
  173 D1:B49C                                 sbc hl,de
  174 D1:B49C                                 call nc,waituntilnewkeypress
  175 D1:B49C                             pop ix
  176 D1:B49C                         pop hl
  177 D1:B49C                     pop de
  178 D1:B49C                 pop af
  179 D1:B49C             #endif
  180 D1:B49C E5 -  -  -      push hl
  181 D1:B49D ED 23 00 -          lea hl,iy
  182 D1:B4A0 01 4C 98 FF         ld  bc,-26548
  183 D1:B4A4 09 -  -  -          add hl,bc
  184 D1:B4A5 30 02 -  -          jr nc,+_
  185 D1:B4A7 E1 C9 -  -      pop hl \ ret
  186 D1:B4A9 -  -  -  -  _:
  187 D1:B4A9 67 -  -  -          ld  h,a
  188 D1:B4AA 2E 0C -  -          ld  l,BASETABLE_STRIDE
  189 D1:B4AC ED 6C -  -          mlt hl
  190 D1:B4AE 01 04 40 D0         ld  bc,JUMPTABLE
  191 D1:B4B2 09 -  -  -          add hl,bc
  192 D1:B4B3 ED 27 -  -          ld  hl,(hl)     ;jumptable
  193 D1:B4B5 E3 -  -  -          ex  (sp),hl     ;exch with exec addr, jumpto-via-ret
  194 D1:B4B6 C9 -  -  -      ret
  195 D1:B4B7 -  -  -  -  
  196 D1:B4B7 -  -  -  -  
  197 D1:B4B7 -  -  -  -  ;Instructions one byte wide returns to the main loop via:
  198 D1:B4B7 -  -  -  -  ;   JP i6502FinishLoad
  199 D1:B4B7 -  -  -  -  ;Those with parameters have HL at the address in quetion, and is expected to
  200 D1:B4B7 -  -  -  -  ;advance HL and E at the end of the instruction. You return to main loop via:
  201 D1:B4B7 -  -  -  -  ;   JP i6502NextLoad
  202 D1:B4B7 -  -  -  -  ;Unless you manually advance the pointer to the next instruction.
  203 D1:B4B7 -  -  -  -  ;You really shouldn't but if you must do that, then also do this:
  204 D1:B4B7 -  -  -  -  ;   JP i6502FinishLoad
  205 D1:B4B7 -  -  -  -  ;Remember that register E is very important; it tells you about page boundaries.
  206 D1:B4B7 -  -  -  -  
  207 D1:B4B7 -  -  -  -  
  208 D1:B4B7 -  -  -  -  ;-----------------------------------------------------------------------------
  209 D1:B4B7 -  -  -  -  ;-----------------------------------------------------------------------------
  210 D1:B4B7 -  -  -  -  ;-----------------------------------------------------------------------------
  211 D1:B4B7 -  -  -  -  
  212 D1:B4B7 -  -  -  -  ;  ***  *   * ****  ****   ***  *   * ***** ***** **  * *****  ***  
  213 D1:B4B7 -  -  -  -  ; *     *   * *   * *   * *   * *   *   *     *   **  * *     *     
  214 D1:B4B7 -  -  -  -  ;  ***  *   * ****  ****  *   * *   *   *     *   * * * ***    ***  
  215 D1:B4B7 -  -  -  -  ;     * *   * *   * *   * *   * *   *   *     *   *  ** *         * 
  216 D1:B4B7 -  -  -  -  ;  ***   ***  ****  *   *  ***   ***    *   ***** *  ** *****  ***  
  217 D1:B4B7 -  -  -  -  
  218 D1:B4B7 -  -  -  -  ;-----------------------------------------------------------------------------
  219 D1:B4B7 -  -  -  -  
  220 D1:B4B7 -  -  -  -  i6502_load_instruction_set:
  221 D1:B4B7 DD 21 04 40 
              D0 -  -  -      ld  ix,JUMPTABLE
  222 D1:B4BC 21 26 D8 D1     ld  hl,inst6502_instruction_set
  223 D1:B4C0 06 00 -  -      ld  b,0
  224 D1:B4C2 ED 17 -  -  _:  ld  de,(hl)
  225 D1:B4C4 DD 1F 00 -      ld  (ix+0),de
  226 D1:B4C7 23 -  -  -      inc hl
  227 D1:B4C8 23 -  -  -      inc hl
  228 D1:B4C9 23 -  -  -      inc hl
  229 D1:B4CA ED 32 0C -      lea ix,ix+BASETABLE_STRIDE
  230 D1:B4CD 10 F3 -  -      djnz -_
  231 D1:B4CF C9 -  -  -      ret
  232 D1:B4D0 -  -  -  -  
  233 D1:B4D0 -  -  -  -  ;HL=Base_ez80_address, C=Numpages_in_map, B=numpages_in_space, E=starting_page
  234 D1:B4D0 -  -  -  -  ;Example: To map and mirror 2KB RAM at $D03800 inside first 8KB of 6502 space
  235 D1:B4D0 -  -  -  -  ;HL=$D03800, C=$08, B=$20, E=$00
  236 D1:B4D0 -  -  -  -  ;Note: B should be a power of two and evenly divisible by C.
  237 D1:B4D0 -  -  -  -  i6502_map_pages:
  238 D1:B4D0 16 0C -  -      ld  d,BASETABLE_STRIDE
  239 D1:B4D2 ED 5C -  -      mlt de
  240 D1:B4D4 DD 21 00 40 
              D0 -  -  -      ld  ix,PAGETABLE
  241 D1:B4D9 DD 19 -  -      add ix,de
  242 D1:B4DB 78 -  -  -      ld  a,b     ;A = main counter for total number of pages in mapping space
  243 D1:B4DC 11 00 01 00     ld  de,256
  244 D1:B4E0 E5 -  -  -      push hl
  245 D1:B4E1 FD E1 -  -      pop iy
  246 D1:B4E3 41 -  -  -  _:  ld  b,c     ;looping for number of pages to map
  247 D1:B4E4 DD 2F 00 -  _:  ld  (ix+0),hl
  248 D1:B4E7 19 -  -  -      add hl,de                   ;next page z80
  249 D1:B4E8 ED 32 0C -      lea ix,ix+BASETABLE_STRIDE  ;next page entry
  250 D1:B4EB 3D -  -  -      dec a
  251 D1:B4EC C8 -  -  -      ret z
  252 D1:B4ED 10 F5 -  -      djnz -_
  253 D1:B4EF ED 23 00 -      lea hl,iy+0     ;start z80 pages over again for mirroring
  254 D1:B4F2 18 EF -  -      jr --_
  255 D1:B4F4 -  -  -  -  
  256 D1:B4F4 -  -  -  -  
  257 D1:B4F4 -  -  -  -  subroutine6502_abs_split_start:
  258 D1:B4F4 4E -  -  -      ld  c,(hl)
  259 D1:B4F5 23 -  -  -      inc hl
  260 D1:B4F6 1C -  -  -      inc e
  261 D1:B4F7 20 15 -  -      jr nz,+_
  262 D1:B4F9 DD 56 06 -      ld  d,(ix+REGPC+1)
  263 D1:B4FC 14 -  -  -      inc d
  264 D1:B4FD 52 DD 1F 05     ld.s (ix+REGPC),de
  265 D1:B501 1E 0C -  -      ld  e,BASETABLE_STRIDE
  266 D1:B503 ED 5C -  -      mlt de
  267 D1:B505 21 00 40 D0     ld  hl,PAGETABLE
  268 D1:B509 19 -  -  -      add hl,de
  269 D1:B50A ED 27 -  -      ld  hl,(hl) ;
  270 D1:B50C 1E 00 -  -      ld  e,0
  271 D1:B50E 46 -  -  -  _:  ld  b,(hl)
  272 D1:B50F C9 -  -  -      ret
  273 D1:B510 -  -  -  -  
  274 D1:B510 -  -  -  -  #define PUSH_ABSXSPLIT call subroutine6502_absx_split_start
  275 D1:B510 -  -  -  -  #define PUSH_ABSXSPLIT_NODEP call subroutine6502_absx_ss_noDep
  276 D1:B510 -  -  -  -  #define PUSH_ABSYSPLIT call subroutine6502_absy_split_start
  277 D1:B510 -  -  -  -  #define PUSH_ABSYSPLIT_NODEP call subroutine6502_absy_ss_noDep
  278 D1:B510 -  -  -  -  
  279 D1:B510 -  -  -  -  subroutine6502_absy_split_start:
  280 D1:B510 DD 4E 02 -      ld  c,(ix+REGY)
  281 D1:B513 18 03 -  -      jr +_
  282 D1:B515 -  -  -  -  
  283 D1:B515 -  -  -  -  subroutine6502_absx_split_start:
  284 D1:B515 DD 4E 01 -      ld  c,(ix+REGX)
  285 D1:B518 7E -  -  -  _:  ld  a,(hl)
  286 D1:B519 23 -  -  -      inc hl
  287 D1:B51A 1C -  -  -      inc e
  288 D1:B51B 20 15 -  -      jr nz,+_
  289 D1:B51D DD 56 06 -      ld  d,(ix+REGPC+1)
  290 D1:B520 14 -  -  -      inc d
  291 D1:B521 52 DD 1F 05     ld.s (ix+REGPC),de
  292 D1:B525 1E 0C -  -      ld  e,BASETABLE_STRIDE
  293 D1:B527 ED 5C -  -      mlt de
  294 D1:B529 21 00 40 D0     ld  hl,PAGETABLE
  295 D1:B52D 19 -  -  -      add hl,de
  296 D1:B52E ED 27 -  -      ld  hl,(hl) ;
  297 D1:B530 1E 00 -  -      ld  e,0
  298 D1:B532 46 -  -  -  _:  ld  b,(hl)
  299 D1:B533 E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  300 D1:B534 E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  301 D1:B535 81 -  -  -          add a,c
  302 D1:B536 30 03 -  -          jr  nc,+_
  303 D1:B538 FD 23 -  -          ADDCYC(1)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  304 D1:B53A 04 -  -  -          inc b
  305 D1:B53B 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  306 D1:B53C 0E 0C -  -          ld  c,BASETABLE_STRIDE
  307 D1:B53E ED 4C -  -          mlt bc
  308 D1:B540 21 00 40 D0         ld  hl,PAGETABLE
  309 D1:B544 09 -  -  -          add hl,bc
  310 D1:B545 ED 27 -  -          ld  hl,(hl)
  311 D1:B547 06 00 -  -          ld  b,0
  312 D1:B549 4F -  -  -          ld  c,a
  313 D1:B54A 09 -  -  -          add hl,bc
  314 D1:B54B C9 -  -  -      ret
  315 D1:B54C -  -  -  -      
  316 D1:B54C -  -  -  -  subroutine6502_absy_ss_noDep:
  317 D1:B54C DD 4E 02 -      ld  c,(ix+REGY)
  318 D1:B54F 18 03 -  -      jr +_
  319 D1:B551 -  -  -  -  subroutine6502_absx_ss_noDep:
  320 D1:B551 DD 4E 01 -      ld  c,(ix+REGX)
  321 D1:B554 7E -  -  -  _:  ld  a,(hl)
  322 D1:B555 23 -  -  -      inc hl
  323 D1:B556 1C -  -  -      inc e
  324 D1:B557 20 15 -  -      jr nz,+_
  325 D1:B559 DD 56 06 -      ld  d,(ix+REGPC+1)
  326 D1:B55C 14 -  -  -      inc d
  327 D1:B55D 52 DD 1F 05     ld.s (ix+REGPC),de
  328 D1:B561 1E 0C -  -      ld  e,BASETABLE_STRIDE
  329 D1:B563 ED 5C -  -      mlt de
  330 D1:B565 21 00 40 D0     ld  hl,PAGETABLE
  331 D1:B569 19 -  -  -      add hl,de
  332 D1:B56A ED 27 -  -      ld  hl,(hl) ;
  333 D1:B56C 1E 00 -  -      ld  e,0
  334 D1:B56E 46 -  -  -  _:  ld  b,(hl)
  335 D1:B56F E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  336 D1:B570 E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  337 D1:B571 81 -  -  -          add a,c
  338 D1:B572 30 01 -  -          jr  nc,+_
  339 D1:B574 04 -  -  -          inc b
  340 D1:B575 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  341 D1:B576 0E 0C -  -          ld  c,BASETABLE_STRIDE
  342 D1:B578 ED 4C -  -          mlt bc
  343 D1:B57A 21 00 40 D0         ld  hl,PAGETABLE
  344 D1:B57E 09 -  -  -          add hl,bc
  345 D1:B57F ED 27 -  -          ld  hl,(hl)
  346 D1:B581 06 00 -  -          ld  b,0
  347 D1:B583 4F -  -  -          ld  c,a
  348 D1:B584 09 -  -  -          add hl,bc
  349 D1:B585 C9 -  -  -      ret
  350 D1:B586 -  -  -  -  
  351 D1:B586 -  -  -  -  
  352 D1:B586 -  -  -  -  
  353 D1:B586 -  -  -  -  
  354 D1:B586 -  -  -  -  
  355 D1:B586 -  -  -  -  
  356 D1:B586 -  -  -  -  
  357 D1:B586 -  -  -  -  subroutine6502_adc_combined_end:
  358 D1:B586 DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  359 D1:B589 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  360 D1:B58A DD 7E 00 -      ld  a,(ix+REGA)
  361 D1:B58D 89 -  -  -      adc a,c
  362 D1:B58E DD 77 00 -      ld  (ix+REGA),a
  363 D1:B591 DD 46 04 CB 
              B0 E2 9C B5 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  364 D1:B5B3 C3 69 B4 D1     jp i6502NextLoad
  365 D1:B5B7 -  -  -  -  
  366 D1:B5B7 -  -  -  -  subroutine6502_sbc_combined_end:
  367 D1:B5B7 DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  368 D1:B5BA 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  369 D1:B5BB DD 7E 00 -      ld  a,(ix+REGA)
  370 D1:B5BE 3F -  -  -      ccf
  371 D1:B5BF 99 -  -  -      sbc a,c
  372 D1:B5C0 3F -  -  -      ccf
  373 D1:B5C1 DD 77 00 -      ld  (ix+REGA),a
  374 D1:B5C4 DD 46 04 CB 
              B0 E2 CF B5 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  375 D1:B5E6 C3 69 B4 D1     jp i6502NextLoad
  376 D1:B5EA -  -  -  -  
  377 D1:B5EA -  -  -  -  subroutine6502_cmp_combined_end:
  378 D1:B5EA DD 7E 00 -      ld  a,(ix+REGA)
  379 D1:B5ED 90 -  -  -      sub a,b
  380 D1:B5EE 3F -  -  -      ccf     ;because the 6502 is strange like that.
  381 D1:B5EF DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  382 D1:B609 C3 69 B4 D1     jp i6502NextLoad
  383 D1:B60D -  -  -  -  
  384 D1:B60D -  -  -  -  subroutine6502_take_branch:
  385 D1:B60D FD 23 -  -      ADDCYC(1)
  386 D1:B60F 7E -  -  -      ld  a,(hl)  ;offset byte
  387 D1:B610 6F -  -  -      ld  L,a
  388 D1:B611 87 -  -  -      add a,a
  389 D1:B612 9F -  -  -      sbc a,a
  390 D1:B613 67 -  -  -      ld  H,a     ;sign-extending offset byte
  391 D1:B614 DD 56 06 -      ld  d,(ix+REGPC+1)
  392 D1:B617 13 -  -  -      inc de
  393 D1:B618 52 19 -  -      add.s hl,de
  394 D1:B61A 7C -  -  -      ld  a,h
  395 D1:B61B BA -  -  -      cp  d       ;is high byte the same?
  396 D1:B61C 28 02 -  -      jr  z,+_    ;if so, do not add another clock
  397 D1:B61E FD 23 -  -      ADDCYC(1)
  398 D1:B620 52 DD 2F 05 _:  ld.s (ix+REGPC),hl
  399 D1:B624 C3 53 B4 D1     jp  i6502FirstLoad
  400 D1:B628 -  -  -  -  
  401 D1:B628 -  -  -  -  
  402 D1:B628 -  -  -  -  ;-----------------------------------------------------------------------------
  403 D1:B628 -  -  -  -  
  404 D1:B628 -  -  -  -  ; *** **  *  *** ***** ***  *   *  *** ***** *** ***  **  *     ***  ***** *****                                                
  405 D1:B628 -  -  -  -  ;  *  **  * *      *   *  * *   * *      *    * *   * **  *    *     *       *                   
  406 D1:B628 -  -  -  -  ;  *  * * *  ***   *   ***  *   * *      *    * *   * * * *     ***  ***     *                          
  407 D1:B628 -  -  -  -  ;  *  *  **     *  *   *  * *   * *      *    * *   * *  **        * *       *                   
  408 D1:B628 -  -  -  -  ; *** *  **  ***   *   *  *  ***   ***   *   *** ***  *  **     ***  *****   *                                 
  409 D1:B628 -  -  -  -  
  410 D1:B628 -  -  -  -  ;-----------------------------------------------------------------------------
  411 D1:B628 -  -  -  -  
  412 D1:B628 -  -  -  -  ;-----------------------------------------------------------------------------
  413 D1:B628 -  -  -  -  ;-----------------------------------------------------------------------------
  414 D1:B628 -  -  -  -  ;-----------------------------------------------------------------------------
  415 D1:B628 -  -  -  -  ;Instructions by type: Transfer Instructions
  416 D1:B628 -  -  -  -  ;LDA - Load Accumulator with Memory
  417 D1:B628 -  -  -  -  ;    M -> A
  418 D1:B628 -  -  -  -  ;    N	Z	C	I	D	V
  419 D1:B628 -  -  -  -  ;    +	+	-	-	-	-
  420 D1:B628 -  -  -  -  
  421 D1:B628 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
  422 D1:B628 -  -  -  -  ;immediate	LDA #oper	A9	2	2
  423 D1:B628 -  -  -  -  inst6502_lda_imm:
  424 D1:B628 7E -  -  -      ld  a,(hl)
  425 D1:B629 DD 77 00 -      ld  (ix+REGA),a
  426 D1:B62C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  427 D1:B640 ED 33 02 -      ADDCYC(2)
  428 D1:B643 C3 69 B4 D1     jp i6502NextLoad
  429 D1:B647 -  -  -  -  
  430 D1:B647 -  -  -  -  ;zeropage	LDA oper	A5	2	3
  431 D1:B647 -  -  -  -  inst6502_lda_zp:
  432 D1:B647 7E -  -  -      ld  a,(hl)
  433 D1:B648 01 00 38 D0     ld  bc,ZEROPAGE
  434 D1:B64C 81 -  -  -      add a,c
  435 D1:B64D 4F -  -  -      ld  c,a
  436 D1:B64E 0A -  -  -      ld  a,(bc)
  437 D1:B64F DD 77 00 -      ld  (ix+REGA),a
  438 D1:B652 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  439 D1:B666 ED 33 03 -      ADDCYC(3)
  440 D1:B669 C3 69 B4 D1     jp i6502NextLoad
  441 D1:B66D -  -  -  -  
  442 D1:B66D -  -  -  -  ;zeropage,X	LDA oper,X	B5	2	4 
  443 D1:B66D -  -  -  -  inst6502_lda_zpx:
  444 D1:B66D 7E -  -  -      ld  a,(hl)
  445 D1:B66E 01 00 38 D0     ld  bc,ZEROPAGE
  446 D1:B672 81 -  -  -      add a,c
  447 D1:B673 DD 86 01 -      add a,(ix+REGX)
  448 D1:B676 4F -  -  -      ld  c,a
  449 D1:B677 0A -  -  -      ld  a,(bc)
  450 D1:B678 DD 77 00 -      ld  (ix+REGA),a
  451 D1:B67B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  452 D1:B68F ED 33 04 -      ADDCYC(4)
  453 D1:B692 C3 69 B4 D1     jp i6502NextLoad
  454 D1:B696 -  -  -  -  
  455 D1:B696 -  -  -  -  ;absolute	LDA oper	AD	3	4
  456 D1:B696 -  -  -  -  inst6502_lda_abs:
  457 D1:B696 CD F4 B4 D1     call subroutine6502_abs_split_start
  458 D1:B69A E5 -  -  -      push hl
  459 D1:B69B 50 -  -  -          ld  d,b
  460 D1:B69C 79 -  -  -          ld  a,c
  461 D1:B69D 0E 0C -  -          ld  c,BASETABLE_STRIDE
  462 D1:B69F ED 4C -  -          mlt bc
  463 D1:B6A1 21 00 40 D0         ld  hl,PAGETABLE
  464 D1:B6A5 09 -  -  -          add hl,bc
  465 D1:B6A6 ED 27 -  -          ld  hl,(hl)
  466 D1:B6A8 06 00 -  -          ld  b,0
  467 D1:B6AA 4F -  -  -          ld  c,a
  468 D1:B6AB 09 -  -  -          add hl,bc   ;full address
  469 D1:B6AC CD E9 AD D1         READ_ACCESS
  470 D1:B6B0 DD 77 00 -          ld (ix+REGA),a
  471 D1:B6B3 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  472 D1:B6C7 ED 33 04 -          ADDCYC(4)
  473 D1:B6CA E1 -  -  -      pop hl
  474 D1:B6CB C3 69 B4 D1     jp i6502NextLoad
  475 D1:B6CF -  -  -  -  
  476 D1:B6CF -  -  -  -  ;absolute,X	LDA oper,X	BD	3	4* 
  477 D1:B6CF -  -  -  -  inst6502_lda_absx:
  478 D1:B6CF ED 33 04 -      ADDCYC(4)
  479 D1:B6D2 CD 15 B5 D1     PUSH_ABSXSPLIT
  480 D1:B6D6 CD E9 AD D1         READ_ACCESS
  481 D1:B6DA DD 77 00 -          ld (ix+REGA),a
  482 D1:B6DD DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  483 D1:B6F1 E1 -  -  -      pop hl
  484 D1:B6F2 C3 69 B4 D1     jp i6502NextLoad
  485 D1:B6F6 -  -  -  -  
  486 D1:B6F6 -  -  -  -  ;absolute,Y	LDA oper,Y	B9	3	4* 
  487 D1:B6F6 -  -  -  -  inst6502_lda_absy:
  488 D1:B6F6 ED 33 04 -      ADDCYC(4)
  489 D1:B6F9 CD 10 B5 D1     PUSH_ABSYSPLIT
  490 D1:B6FD CD E9 AD D1         READ_ACCESS
  491 D1:B701 DD 77 00 -          ld (ix+REGA),a
  492 D1:B704 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  493 D1:B718 E1 -  -  -      pop hl
  494 D1:B719 C3 69 B4 D1     jp i6502NextLoad
  495 D1:B71D -  -  -  -  
  496 D1:B71D -  -  -  -  ;(indirect,X)	LDA (oper,X)	A1	2	6
  497 D1:B71D -  -  -  -  inst6502_lda_indx:
  498 D1:B71D E5 -  -  -      push hl
  499 D1:B71E 7E -  -  -          ld  a,(hl)
  500 D1:B71F 21 00 38 D0         ld  hl,ZEROPAGE
  501 D1:B723 85 -  -  -          add a,L
  502 D1:B724 DD 86 01 -          add a,(ix+REGX)
  503 D1:B727 6F -  -  -          ld  L,a
  504 D1:B728 7E -  -  -          ld  a,(hl)
  505 D1:B729 2C -  -  -          inc L
  506 D1:B72A 56 -  -  -          ld  d,(hl)
  507 D1:B72B 42 -  -  -          ld  b,d
  508 D1:B72C 0E 0C -  -          ld  c,BASETABLE_STRIDE
  509 D1:B72E ED 4C -  -          mlt bc
  510 D1:B730 21 00 40 D0         ld  hl,PAGETABLE
  511 D1:B734 09 -  -  -          add hl,bc
  512 D1:B735 ED 27 -  -          ld  hl,(hl)
  513 D1:B737 06 00 -  -          ld  b,0
  514 D1:B739 4F -  -  -          ld  c,a
  515 D1:B73A 09 -  -  -          add hl,bc
  516 D1:B73B CD E9 AD D1         READ_ACCESS
  517 D1:B73F DD 77 00 -          ld (ix+REGA),a
  518 D1:B742 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  519 D1:B756 ED 33 06 -          ADDCYC(6)
  520 D1:B759 E1 -  -  -      pop hl
  521 D1:B75A C3 69 B4 D1     jp i6502NextLoad
  522 D1:B75E -  -  -  -  
  523 D1:B75E -  -  -  -  ;(indirect),Y	LDA (oper),Y	B1	2	5*
  524 D1:B75E -  -  -  -  inst6502_lda_indy:
  525 D1:B75E E5 -  -  -      push hl
  526 D1:B75F 7E -  -  -          ld  a,(hl)
  527 D1:B760 21 00 38 D0         ld  hl,ZEROPAGE
  528 D1:B764 85 -  -  -          add a,L
  529 D1:B765 6F -  -  -          ld  L,a
  530 D1:B766 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  531 D1:B767 2C -  -  -          inc L
  532 D1:B768 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  533 D1:B76B 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  534 D1:B76C 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  535 D1:B76E FD 23 -  -          ADDCYC(1)
  536 D1:B770 24 -  -  -          inc h
  537 D1:B771 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  538 D1:B772 2E 0C -  -          ld  L,BASETABLE_STRIDE
  539 D1:B774 ED 6C -  -          mlt hl          ;23.
  540 D1:B776 01 00 40 D0         ld  bc,PAGETABLE
  541 D1:B77A 09 -  -  -          add hl,bc
  542 D1:B77B ED 27 -  -          ld  hl,(hl)     ;address get.
  543 D1:B77D 01 00 00 00         ld  bc,0
  544 D1:B781 4F -  -  -          ld  c,a
  545 D1:B782 09 -  -  -          add hl,bc       ;Full address get.
  546 D1:B783 CD E9 AD D1         READ_ACCESS
  547 D1:B787 DD 77 00 -          ld  (ix+REGA),a
  548 D1:B78A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  549 D1:B79E ED 33 05 -          ADDCYC(5)
  550 D1:B7A1 E1 -  -  -      pop hl
  551 D1:B7A2 C3 69 B4 D1     jp i6502NextLoad
  552 D1:B7A6 -  -  -  -  
  553 D1:B7A6 -  -  -  -  ;-----------------------------------------------------------------------------
  554 D1:B7A6 -  -  -  -  ;LDX - Load Index X with Memory
  555 D1:B7A6 -  -  -  -  ;    M -> X
  556 D1:B7A6 -  -  -  -  ;    N	Z	C	I	D	V
  557 D1:B7A6 -  -  -  -  ;    +	+	-	-	-	-
  558 D1:B7A6 -  -  -  -  
  559 D1:B7A6 -  -  -  -  ;immediate	LDX #oper	A2	2	2  
  560 D1:B7A6 -  -  -  -  inst6502_ldx_imm:
  561 D1:B7A6 7E -  -  -      ld  a,(hl)
  562 D1:B7A7 DD 77 01 -      ld  (ix+REGX),a
  563 D1:B7AA DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  564 D1:B7BE ED 33 02 -      ADDCYC(2)
  565 D1:B7C1 C3 69 B4 D1     jp i6502NextLoad
  566 D1:B7C5 -  -  -  -  
  567 D1:B7C5 -  -  -  -  ;zeropage	LDX oper	A6	2	3 
  568 D1:B7C5 -  -  -  -  inst6502_ldx_zp:
  569 D1:B7C5 7E -  -  -      ld  a,(hl)
  570 D1:B7C6 01 00 38 D0     ld  bc,ZEROPAGE
  571 D1:B7CA 81 -  -  -      add a,c
  572 D1:B7CB 4F -  -  -      ld  c,a
  573 D1:B7CC 0A -  -  -      ld  a,(bc)
  574 D1:B7CD DD 77 01 -      ld  (ix+REGX),a
  575 D1:B7D0 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  576 D1:B7E4 ED 33 03 -      ADDCYC(3)
  577 D1:B7E7 C3 69 B4 D1     jp i6502NextLoad
  578 D1:B7EB -  -  -  -  
  579 D1:B7EB -  -  -  -  ;zeropage,Y	LDX oper,Y	B6	2	4  
  580 D1:B7EB -  -  -  -  inst6502_ldx_zpy:
  581 D1:B7EB 7E -  -  -      ld  a,(hl)
  582 D1:B7EC 01 00 38 D0     ld  bc,ZEROPAGE
  583 D1:B7F0 81 -  -  -      add a,c
  584 D1:B7F1 DD 86 02 -      add a,(ix+REGY)
  585 D1:B7F4 4F -  -  -      ld  c,a
  586 D1:B7F5 0A -  -  -      ld  a,(bc)
  587 D1:B7F6 DD 77 01 -      ld  (ix+REGX),a
  588 D1:B7F9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  589 D1:B80D ED 33 04 -      ADDCYC(4)
  590 D1:B810 C3 69 B4 D1     jp i6502NextLoad
  591 D1:B814 -  -  -  -  
  592 D1:B814 -  -  -  -  ;absolute	LDX oper	AE	3	4  
  593 D1:B814 -  -  -  -  inst6502_ldx_abs:
  594 D1:B814 CD F4 B4 D1     call subroutine6502_abs_split_start
  595 D1:B818 E5 -  -  -      push hl
  596 D1:B819 50 -  -  -          ld  d,b
  597 D1:B81A 79 -  -  -          ld  a,c
  598 D1:B81B 0E 0C -  -          ld  c,BASETABLE_STRIDE
  599 D1:B81D ED 4C -  -          mlt bc
  600 D1:B81F 21 00 40 D0         ld  hl,PAGETABLE
  601 D1:B823 09 -  -  -          add hl,bc
  602 D1:B824 ED 27 -  -          ld  hl,(hl)
  603 D1:B826 06 00 -  -          ld  b,0
  604 D1:B828 4F -  -  -          ld  c,a
  605 D1:B829 09 -  -  -          add hl,bc   ;full address
  606 D1:B82A CD E9 AD D1         READ_ACCESS
  607 D1:B82E DD 77 01 -          ld (ix+REGX),a
  608 D1:B831 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  609 D1:B845 ED 33 04 -          ADDCYC(4)
  610 D1:B848 E1 -  -  -      pop hl
  611 D1:B849 C3 69 B4 D1     jp i6502NextLoad
  612 D1:B84D -  -  -  -  
  613 D1:B84D -  -  -  -  ;absolute,Y	LDX oper,Y	BE	3	4* 
  614 D1:B84D -  -  -  -  inst6502_ldx_absy:
  615 D1:B84D ED 33 04 -      ADDCYC(4)
  616 D1:B850 CD 10 B5 D1     PUSH_ABSYSPLIT
  617 D1:B854 CD E9 AD D1         READ_ACCESS
  618 D1:B858 DD 77 01 -          ld (ix+REGX),a
  619 D1:B85B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  620 D1:B86F E1 -  -  -      pop hl
  621 D1:B870 C3 69 B4 D1     jp i6502NextLoad
  622 D1:B874 -  -  -  -  
  623 D1:B874 -  -  -  -  ;-----------------------------------------------------------------------------
  624 D1:B874 -  -  -  -  ;LDY -  Load Index Y with Memory
  625 D1:B874 -  -  -  -  ;    M -> Y
  626 D1:B874 -  -  -  -  ;    N	Z	C	I	D	V
  627 D1:B874 -  -  -  -  ;    +	+	-	-	-	-
  628 D1:B874 -  -  -  -  
  629 D1:B874 -  -  -  -  ;immediate	LDY #oper	A0	2	2  
  630 D1:B874 -  -  -  -  inst6502_ldy_imm:
  631 D1:B874 7E -  -  -      ld  a,(hl)
  632 D1:B875 DD 77 02 -      ld  (ix+REGY),a
  633 D1:B878 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  634 D1:B88C ED 33 02 -      ADDCYC(2)
  635 D1:B88F C3 69 B4 D1     jp i6502NextLoad
  636 D1:B893 -  -  -  -  
  637 D1:B893 -  -  -  -  ;zeropage	LDY oper	A4	2	3  
  638 D1:B893 -  -  -  -  inst6502_ldy_zp:
  639 D1:B893 7E -  -  -      ld  a,(hl)
  640 D1:B894 01 00 38 D0     ld  bc,ZEROPAGE
  641 D1:B898 81 -  -  -      add a,c
  642 D1:B899 4F -  -  -      ld  c,a
  643 D1:B89A 0A -  -  -      ld  a,(bc)
  644 D1:B89B DD 77 02 -      ld  (ix+REGY),a
  645 D1:B89E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  646 D1:B8B2 ED 33 03 -      ADDCYC(3)
  647 D1:B8B5 C3 69 B4 D1     jp i6502NextLoad
  648 D1:B8B9 -  -  -  -  
  649 D1:B8B9 -  -  -  -  ;zeropage,X	LDY oper,X	B4	2	4  
  650 D1:B8B9 -  -  -  -  inst6502_ldy_zpx:
  651 D1:B8B9 7E -  -  -      ld  a,(hl)
  652 D1:B8BA 01 00 38 D0     ld  bc,ZEROPAGE
  653 D1:B8BE 81 -  -  -      add a,c
  654 D1:B8BF DD 86 01 -      add a,(ix+REGX)
  655 D1:B8C2 4F -  -  -      ld  c,a
  656 D1:B8C3 0A -  -  -      ld  a,(bc)
  657 D1:B8C4 DD 77 02 -      ld  (ix+REGY),a
  658 D1:B8C7 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  659 D1:B8DB ED 33 04 -      ADDCYC(4)
  660 D1:B8DE C3 69 B4 D1     jp i6502NextLoad
  661 D1:B8E2 -  -  -  -  
  662 D1:B8E2 -  -  -  -  ;absolute	LDY oper	AC	3	4  
  663 D1:B8E2 -  -  -  -  inst6502_ldy_abs:
  664 D1:B8E2 CD F4 B4 D1     call subroutine6502_abs_split_start
  665 D1:B8E6 E5 -  -  -      push hl
  666 D1:B8E7 50 -  -  -          ld  d,b
  667 D1:B8E8 79 -  -  -          ld  a,c
  668 D1:B8E9 0E 0C -  -          ld  c,BASETABLE_STRIDE
  669 D1:B8EB ED 4C -  -          mlt bc
  670 D1:B8ED 21 00 40 D0         ld  hl,PAGETABLE
  671 D1:B8F1 09 -  -  -          add hl,bc
  672 D1:B8F2 ED 27 -  -          ld  hl,(hl)
  673 D1:B8F4 06 00 -  -          ld  b,0
  674 D1:B8F6 4F -  -  -          ld  c,a
  675 D1:B8F7 09 -  -  -          add hl,bc   ;full address
  676 D1:B8F8 CD E9 AD D1         READ_ACCESS
  677 D1:B8FC DD 77 02 -          ld (ix+REGY),a
  678 D1:B8FF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  679 D1:B913 ED 33 04 -          ADDCYC(4)
  680 D1:B916 E1 -  -  -      pop hl
  681 D1:B917 C3 69 B4 D1     jp i6502NextLoad
  682 D1:B91B -  -  -  -  
  683 D1:B91B -  -  -  -  ;absolute,X	LDY oper,X	BC	3	4* 
  684 D1:B91B -  -  -  -  inst6502_ldy_absx:
  685 D1:B91B ED 33 04 -      ADDCYC(4)
  686 D1:B91E CD 15 B5 D1     PUSH_ABSXSPLIT
  687 D1:B922 CD E9 AD D1         READ_ACCESS
  688 D1:B926 DD 77 02 -          ld (ix+REGY),a
  689 D1:B929 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  690 D1:B93D E1 -  -  -      pop hl
  691 D1:B93E C3 69 B4 D1     jp i6502NextLoad
  692 D1:B942 -  -  -  -  
  693 D1:B942 -  -  -  -  ;-----------------------------------------------------------------------------
  694 D1:B942 -  -  -  -  ;STA - Store Accumulator in Memory
  695 D1:B942 -  -  -  -  ;    A -> M
  696 D1:B942 -  -  -  -  ;    N	Z	C	I	D	V
  697 D1:B942 -  -  -  -  ;    -	-	-	-	-	-
  698 D1:B942 -  -  -  -  
  699 D1:B942 -  -  -  -  ;zeropage	STA oper	85	2	3  
  700 D1:B942 -  -  -  -  inst6502_sta_zp:
  701 D1:B942 7E -  -  -      ld  a,(hl)
  702 D1:B943 01 00 38 D0     ld  bc,ZEROPAGE
  703 D1:B947 81 -  -  -      add a,c
  704 D1:B948 4F -  -  -      ld  c,a
  705 D1:B949 DD 7E 00 -      ld  a,(ix+REGA)
  706 D1:B94C 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  707 D1:B94D ED 33 03 -      ADDCYC(3)
  708 D1:B950 C3 69 B4 D1     jp i6502NextLoad
  709 D1:B954 -  -  -  -  
  710 D1:B954 -  -  -  -  ;zeropage,X	STA oper,X	95	2	4  
  711 D1:B954 -  -  -  -  inst6502_sta_zpx:
  712 D1:B954 7E -  -  -      ld  a,(hl)
  713 D1:B955 01 00 38 D0     ld  bc,ZEROPAGE
  714 D1:B959 81 -  -  -      add a,c
  715 D1:B95A DD 86 01 -      add a,(ix+REGX)
  716 D1:B95D 4F -  -  -      ld  c,a
  717 D1:B95E DD 7E 00 -      ld  a,(ix+REGA)
  718 D1:B961 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  719 D1:B962 ED 33 04 -      ADDCYC(4)
  720 D1:B965 C3 69 B4 D1     jp i6502NextLoad
  721 D1:B969 -  -  -  -  
  722 D1:B969 -  -  -  -  ;absolute	STA oper	8D	3	4
  723 D1:B969 -  -  -  -  inst6502_sta_abs:
  724 D1:B969 CD F4 B4 D1     call subroutine6502_abs_split_start
  725 D1:B96D E5 -  -  -      push hl
  726 D1:B96E 50 -  -  -          ld  d,b
  727 D1:B96F 79 -  -  -          ld  a,c
  728 D1:B970 0E 0C -  -          ld  c,BASETABLE_STRIDE
  729 D1:B972 ED 4C -  -          mlt bc
  730 D1:B974 21 00 40 D0         ld  hl,PAGETABLE
  731 D1:B978 09 -  -  -          add hl,bc
  732 D1:B979 ED 27 -  -          ld  hl,(hl)
  733 D1:B97B 06 00 -  -          ld  b,0
  734 D1:B97D 4F -  -  -          ld  c,a
  735 D1:B97E 09 -  -  -          add hl,bc   ;full address
  736 D1:B97F DD 46 00 -          ld  b,(ix+REGA)
  737 D1:B982 CD 0C AE D1         WRITE_ACCESS
  738 D1:B986 ED 33 04 -          ADDCYC(4)
  739 D1:B989 E1 -  -  -      pop hl
  740 D1:B98A C3 69 B4 D1     jp i6502NextLoad
  741 D1:B98E -  -  -  -  
  742 D1:B98E -  -  -  -  ;absolute,X	STA oper,X	9D	3	5  
  743 D1:B98E -  -  -  -  inst6502_sta_absx:
  744 D1:B98E ED 33 05 -      ADDCYC(5)
  745 D1:B991 CD 51 B5 D1     PUSH_ABSXSPLIT_NODEP
  746 D1:B995 DD 46 00 -          ld  b,(ix+REGA)
  747 D1:B998 CD 0C AE D1         WRITE_ACCESS
  748 D1:B99C E1 -  -  -      pop hl
  749 D1:B99D C3 69 B4 D1     jp i6502NextLoad
  750 D1:B9A1 -  -  -  -  
  751 D1:B9A1 -  -  -  -  ;absolute,Y	STA oper,Y	99	3	5  
  752 D1:B9A1 -  -  -  -  inst6502_sta_absy:
  753 D1:B9A1 ED 33 05 -      ADDCYC(5)
  754 D1:B9A4 CD 4C B5 D1     PUSH_ABSYSPLIT_NODEP
  755 D1:B9A8 DD 46 00 -          ld  b,(ix+REGA)
  756 D1:B9AB CD 0C AE D1         WRITE_ACCESS
  757 D1:B9AF E1 -  -  -      pop hl
  758 D1:B9B0 C3 69 B4 D1     jp i6502NextLoad
  759 D1:B9B4 -  -  -  -  
  760 D1:B9B4 -  -  -  -  ;(indirect,X)	STA (oper,X)	81	2	6  
  761 D1:B9B4 -  -  -  -  inst6502_sta_indx:
  762 D1:B9B4 E5 -  -  -      push hl
  763 D1:B9B5 7E -  -  -          ld  a,(hl)
  764 D1:B9B6 21 00 38 D0         ld  hl,ZEROPAGE
  765 D1:B9BA 85 -  -  -          add a,L
  766 D1:B9BB DD 86 01 -          add a,(ix+REGX)
  767 D1:B9BE 6F -  -  -          ld  L,a
  768 D1:B9BF 7E -  -  -          ld  a,(hl)
  769 D1:B9C0 2C -  -  -          inc L
  770 D1:B9C1 56 -  -  -          ld  d,(hl)
  771 D1:B9C2 42 -  -  -          ld  b,d
  772 D1:B9C3 0E 0C -  -          ld  c,BASETABLE_STRIDE
  773 D1:B9C5 ED 4C -  -          mlt bc
  774 D1:B9C7 21 00 40 D0         ld  hl,PAGETABLE
  775 D1:B9CB 09 -  -  -          add hl,bc
  776 D1:B9CC ED 27 -  -          ld  hl,(hl)
  777 D1:B9CE 06 00 -  -          ld  b,0
  778 D1:B9D0 4F -  -  -          ld  c,a
  779 D1:B9D1 09 -  -  -          add hl,bc
  780 D1:B9D2 DD 46 00 -          ld  b,(ix+REGA)
  781 D1:B9D5 CD 0C AE D1         WRITE_ACCESS
  782 D1:B9D9 ED 33 06 -          ADDCYC(6)
  783 D1:B9DC E1 -  -  -      pop hl
  784 D1:B9DD C3 69 B4 D1     jp i6502NextLoad
  785 D1:B9E1 -  -  -  -  
  786 D1:B9E1 -  -  -  -  ;(indirect),Y	STA (oper),Y	91	2	6  
  787 D1:B9E1 -  -  -  -  inst6502_sta_indy:
  788 D1:B9E1 E5 -  -  -      push hl
  789 D1:B9E2 7E -  -  -          ld  a,(hl)
  790 D1:B9E3 21 00 38 D0         ld  hl,ZEROPAGE
  791 D1:B9E7 85 -  -  -          add a,L
  792 D1:B9E8 6F -  -  -          ld  L,a
  793 D1:B9E9 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  794 D1:B9EA 2C -  -  -          inc L
  795 D1:B9EB DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  796 D1:B9EE 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  797 D1:B9EF 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  798 D1:B9F1 24 -  -  -          inc h
  799 D1:B9F2 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  800 D1:B9F3 2E 0C -  -          ld  L,BASETABLE_STRIDE
  801 D1:B9F5 ED 6C -  -          mlt hl          ;23.
  802 D1:B9F7 01 00 40 D0         ld  bc,PAGETABLE
  803 D1:B9FB 09 -  -  -          add hl,bc
  804 D1:B9FC ED 27 -  -          ld  hl,(hl)     ;address get.
  805 D1:B9FE 01 00 00 00         ld  bc,0
  806 D1:BA02 4F -  -  -          ld  c,a
  807 D1:BA03 09 -  -  -          add hl,bc       ;Full address get.
  808 D1:BA04 DD 46 00 -          ld  b,(ix+REGA)
  809 D1:BA07 CD 0C AE D1         WRITE_ACCESS
  810 D1:BA0B ED 33 06 -          ADDCYC(6)
  811 D1:BA0E E1 -  -  -      pop hl
  812 D1:BA0F C3 69 B4 D1     jp i6502NextLoad
  813 D1:BA13 -  -  -  -  
  814 D1:BA13 -  -  -  -  ;-----------------------------------------------------------------------------
  815 D1:BA13 -  -  -  -  ;STX - Store Index X in Memory
  816 D1:BA13 -  -  -  -  ;    X -> M
  817 D1:BA13 -  -  -  -  ;    N	Z	C	I	D	V
  818 D1:BA13 -  -  -  -  ;    -	-	-	-	-	-
  819 D1:BA13 -  -  -  -  
  820 D1:BA13 -  -  -  -  ;zeropage	STX oper	86	2	3  
  821 D1:BA13 -  -  -  -  inst6502_stx_zp:
  822 D1:BA13 7E -  -  -      ld  a,(hl)
  823 D1:BA14 01 00 38 D0     ld  bc,ZEROPAGE
  824 D1:BA18 81 -  -  -      add a,c
  825 D1:BA19 4F -  -  -      ld  c,a
  826 D1:BA1A DD 7E 01 -      ld  a,(ix+REGX)
  827 D1:BA1D 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  828 D1:BA1E ED 33 03 -      ADDCYC(3)
  829 D1:BA21 C3 69 B4 D1     jp i6502NextLoad
  830 D1:BA25 -  -  -  -  
  831 D1:BA25 -  -  -  -  ;zeropage,Y	STX oper,Y	96	2	4  
  832 D1:BA25 -  -  -  -  inst6502_stx_zpy:
  833 D1:BA25 7E -  -  -      ld  a,(hl)
  834 D1:BA26 01 00 38 D0     ld  bc,ZEROPAGE
  835 D1:BA2A 81 -  -  -      add a,c
  836 D1:BA2B DD 86 02 -      add a,(ix+REGY)
  837 D1:BA2E 4F -  -  -      ld  c,a
  838 D1:BA2F DD 7E 01 -      ld  a,(ix+REGX)
  839 D1:BA32 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  840 D1:BA33 ED 33 04 -      ADDCYC(4)
  841 D1:BA36 C3 69 B4 D1     jp i6502NextLoad
  842 D1:BA3A -  -  -  -  
  843 D1:BA3A -  -  -  -  ;absolute	STX oper	8E	3	4  
  844 D1:BA3A -  -  -  -  inst6502_stx_abs:
  845 D1:BA3A CD F4 B4 D1     call subroutine6502_abs_split_start
  846 D1:BA3E E5 -  -  -      push hl
  847 D1:BA3F 50 -  -  -          ld  d,b
  848 D1:BA40 79 -  -  -          ld  a,c
  849 D1:BA41 0E 0C -  -          ld  c,BASETABLE_STRIDE
  850 D1:BA43 ED 4C -  -          mlt bc
  851 D1:BA45 21 00 40 D0         ld  hl,PAGETABLE
  852 D1:BA49 09 -  -  -          add hl,bc
  853 D1:BA4A ED 27 -  -          ld  hl,(hl)
  854 D1:BA4C 06 00 -  -          ld  b,0
  855 D1:BA4E 4F -  -  -          ld  c,a
  856 D1:BA4F 09 -  -  -          add hl,bc   ;full address
  857 D1:BA50 DD 46 01 -          ld  b,(ix+REGX)
  858 D1:BA53 CD 0C AE D1         WRITE_ACCESS
  859 D1:BA57 ED 33 04 -          ADDCYC(4)
  860 D1:BA5A E1 -  -  -      pop hl
  861 D1:BA5B C3 69 B4 D1     jp i6502NextLoad
  862 D1:BA5F -  -  -  -  
  863 D1:BA5F -  -  -  -  ;-----------------------------------------------------------------------------
  864 D1:BA5F -  -  -  -  ;STY - Store Index Y in Memory
  865 D1:BA5F -  -  -  -  ;    Y -> M
  866 D1:BA5F -  -  -  -  ;    N	Z	C	I	D	V
  867 D1:BA5F -  -  -  -  ;    -	-	-	-	-	-
  868 D1:BA5F -  -  -  -  
  869 D1:BA5F -  -  -  -  ;zeropage	STY oper	84	2	3  
  870 D1:BA5F -  -  -  -  inst6502_sty_zp:
  871 D1:BA5F 7E -  -  -      ld  a,(hl)
  872 D1:BA60 01 00 38 D0     ld  bc,ZEROPAGE
  873 D1:BA64 81 -  -  -      add a,c
  874 D1:BA65 4F -  -  -      ld  c,a
  875 D1:BA66 DD 7E 02 -      ld  a,(ix+REGY)
  876 D1:BA69 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  877 D1:BA6A ED 33 03 -      ADDCYC(3)
  878 D1:BA6D C3 69 B4 D1     jp i6502NextLoad
  879 D1:BA71 -  -  -  -  
  880 D1:BA71 -  -  -  -  ;zeropage,X	STY oper,X	94	2	4  
  881 D1:BA71 -  -  -  -  inst6502_sty_zpx:
  882 D1:BA71 7E -  -  -      ld  a,(hl)
  883 D1:BA72 01 00 38 D0     ld  bc,ZEROPAGE
  884 D1:BA76 81 -  -  -      add a,c
  885 D1:BA77 DD 86 01 -      add a,(ix+REGX)
  886 D1:BA7A 4F -  -  -      ld  c,a
  887 D1:BA7B DD 7E 02 -      ld  a,(ix+REGY)
  888 D1:BA7E 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  889 D1:BA7F ED 33 04 -      ADDCYC(4)
  890 D1:BA82 C3 69 B4 D1     jp i6502NextLoad
  891 D1:BA86 -  -  -  -  
  892 D1:BA86 -  -  -  -  ;absolute	STY oper	8C	3	4  
  893 D1:BA86 -  -  -  -  inst6502_sty_abs:
  894 D1:BA86 CD F4 B4 D1     call subroutine6502_abs_split_start
  895 D1:BA8A E5 -  -  -      push hl
  896 D1:BA8B 50 -  -  -          ld  d,b
  897 D1:BA8C 79 -  -  -          ld  a,c
  898 D1:BA8D 0E 0C -  -          ld  c,BASETABLE_STRIDE
  899 D1:BA8F ED 4C -  -          mlt bc
  900 D1:BA91 21 00 40 D0         ld  hl,PAGETABLE
  901 D1:BA95 09 -  -  -          add hl,bc
  902 D1:BA96 ED 27 -  -          ld  hl,(hl)
  903 D1:BA98 06 00 -  -          ld  b,0
  904 D1:BA9A 4F -  -  -          ld  c,a
  905 D1:BA9B 09 -  -  -          add hl,bc   ;full address
  906 D1:BA9C DD 46 02 -          ld  b,(ix+REGY)
  907 D1:BA9F CD 0C AE D1         WRITE_ACCESS
  908 D1:BAA3 ED 33 04 -          ADDCYC(4)
  909 D1:BAA6 E1 -  -  -      pop hl
  910 D1:BAA7 C3 69 B4 D1     jp i6502NextLoad
  911 D1:BAAB -  -  -  -  
  912 D1:BAAB -  -  -  -  ;-----------------------------------------------------------------------------
  913 D1:BAAB -  -  -  -  ;TAX - Transfer Accumulator to Index X [A -> X]
  914 D1:BAAB -  -  -  -  ;N	Z	C	I	D	V
  915 D1:BAAB -  -  -  -  ;+	+	-	-	-	-
  916 D1:BAAB -  -  -  -  ;implied	TAX	AA	1	2
  917 D1:BAAB -  -  -  -  inst6502_tax:
  918 D1:BAAB DD 7E 00 -      ld  a,(ix+REGA)
  919 D1:BAAE DD 77 01 -      ld  (ix+REGX),a
  920 D1:BAB1 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  921 D1:BAC5 ED 33 02 -      ADDCYC(2)
  922 D1:BAC8 C3 82 B4 D1     jp i6502FinishLoad
  923 D1:BACC -  -  -  -  
  924 D1:BACC -  -  -  -  ;TAY - Transfer Accumulator to Index Y [A -> Y]
  925 D1:BACC -  -  -  -  ;N	Z	C	I	D	V
  926 D1:BACC -  -  -  -  ;+	+	-	-	-	-
  927 D1:BACC -  -  -  -  ;implied	TAY	A8	1	2
  928 D1:BACC -  -  -  -  inst6502_tay:
  929 D1:BACC DD 7E 00 -      ld  a,(ix+REGA)
  930 D1:BACF DD 77 02 -      ld  (ix+REGY),a
  931 D1:BAD2 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  932 D1:BAE6 ED 33 02 -      ADDCYC(2)
  933 D1:BAE9 C3 82 B4 D1     jp i6502FinishLoad
  934 D1:BAED -  -  -  -  
  935 D1:BAED -  -  -  -  ;TSX - Transfer Stack Pointer to Index X [SP -> X]
  936 D1:BAED -  -  -  -  ;N	Z	C	I	D	V
  937 D1:BAED -  -  -  -  ;+	+	-	-	-	-
  938 D1:BAED -  -  -  -  ;implied	TSX	BA	1	2
  939 D1:BAED -  -  -  -  inst6502_tsx:
  940 D1:BAED DD 7E 03 -      ld  a,(ix+REGSP)
  941 D1:BAF0 DD 77 01 -      ld  (ix+REGX),a
  942 D1:BAF3 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  943 D1:BB07 ED 33 02 -      ADDCYC(2)
  944 D1:BB0A C3 82 B4 D1     jp i6502FinishLoad
  945 D1:BB0E -  -  -  -  
  946 D1:BB0E -  -  -  -  ;TXA - Transfer Index X to Accumulator [X -> A]
  947 D1:BB0E -  -  -  -  ;N	Z	C	I	D	V
  948 D1:BB0E -  -  -  -  ;+	+	-	-	-	-
  949 D1:BB0E -  -  -  -  ;implied	TXA	8A	1	2
  950 D1:BB0E -  -  -  -  inst6502_txa:
  951 D1:BB0E DD 7E 01 -      ld  a,(ix+REGX)
  952 D1:BB11 DD 77 00 -      ld  (ix+REGA),a
  953 D1:BB14 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  954 D1:BB28 ED 33 02 -      ADDCYC(2)
  955 D1:BB2B C3 82 B4 D1     jp i6502FinishLoad
  956 D1:BB2F -  -  -  -  
  957 D1:BB2F -  -  -  -  ;TXS - Transfer Index X to Stack Pointer [X -> SP]
  958 D1:BB2F -  -  -  -  ;N	Z	C	I	D	V
  959 D1:BB2F -  -  -  -  ;-	-	-	-	-	-
  960 D1:BB2F -  -  -  -  ;implied	TXS	9A	1	2
  961 D1:BB2F -  -  -  -  inst6502_txs:
  962 D1:BB2F DD 7E 01 -      ld  a,(ix+REGX)
  963 D1:BB32 DD 77 03 -      ld  (ix+REGSP),a
  964 D1:BB35 ED 33 02 -      ADDCYC(2)
  965 D1:BB38 C3 82 B4 D1     jp i6502FinishLoad
  966 D1:BB3C -  -  -  -  
  967 D1:BB3C -  -  -  -  ;TYA - Transfer Index Y to Accumulator [Y -> A]
  968 D1:BB3C -  -  -  -  ;N	Z	C	I	D	V
  969 D1:BB3C -  -  -  -  ;+	+	-	-	-	-
  970 D1:BB3C -  -  -  -  ;implied	TYA	98	1	2
  971 D1:BB3C -  -  -  -  inst6502_tya:
  972 D1:BB3C DD 7E 02 -      ld  a,(ix+REGY)
  973 D1:BB3F DD 77 00 -      ld  (ix+REGA),a
  974 D1:BB42 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  975 D1:BB56 ED 33 02 -      ADDCYC(2)
  976 D1:BB59 C3 82 B4 D1     jp i6502FinishLoad
  977 D1:BB5D -  -  -  -  
  978 D1:BB5D -  -  -  -  ;-----------------------------------------------------------------------------
  979 D1:BB5D -  -  -  -  ;-----------------------------------------------------------------------------
  980 D1:BB5D -  -  -  -  ;-----------------------------------------------------------------------------
  981 D1:BB5D -  -  -  -  ;Instructions by type: Stack Instructions
  982 D1:BB5D -  -  -  -  ;PHA - Push Accumulator on Stack
  983 D1:BB5D -  -  -  -  ;    push A
  984 D1:BB5D -  -  -  -  ;    N	Z	C	I	D	V
  985 D1:BB5D -  -  -  -  ;    -	-	-	-	-	-
  986 D1:BB5D -  -  -  -  ;implied	PHA	48	1	3 
  987 D1:BB5D -  -  -  -  inst6502_pha:
  988 D1:BB5D ED 33 03 -      ADDCYC(3)
  989 D1:BB60 DD 7E 00 -      ld  a,(ix+REGA)
  990 D1:BB63 01 00 39 D0     ld  bc,STACKBASE
  991 D1:BB67 DD 4E 03 -      ld  c,(ix+REGSP)
  992 D1:BB6A 02 -  -  -      ld  (bc),a
  993 D1:BB6B 0D -  -  -      dec c
  994 D1:BB6C DD 71 03 -      ld  (ix+REGSP),c
  995 D1:BB6F C3 82 B4 D1     jp i6502FinishLoad
  996 D1:BB73 -  -  -  -  
  997 D1:BB73 -  -  -  -  ;PHP - Push Processor Status on Stack
  998 D1:BB73 -  -  -  -  ;    The status register will be pushed with the break
  999 D1:BB73 -  -  -  -  ;    flag and bit 5 set to 1.
 1000 D1:BB73 -  -  -  -  ;    push SR
 1001 D1:BB73 -  -  -  -  ;    N	Z	C	I	D	V
 1002 D1:BB73 -  -  -  -  ;    -	-	-	-	-	-
 1003 D1:BB73 -  -  -  -  ;implied	PHP	08	1	3  
 1004 D1:BB73 -  -  -  -  inst6502_php:
 1005 D1:BB73 ED 33 03 -      ADDCYC(3)
 1006 D1:BB76 DD 7E 04 -      ld  a,(ix+REGSR)
 1007 D1:BB79 F6 30 -  -      or  a,%00110000
 1008 D1:BB7B 01 00 39 D0     ld  bc,STACKBASE
 1009 D1:BB7F DD 4E 03 -      ld  c,(ix+REGSP)
 1010 D1:BB82 02 -  -  -      ld  (bc),a
 1011 D1:BB83 0D -  -  -      dec c
 1012 D1:BB84 DD 71 03 -      ld  (ix+REGSP),c
 1013 D1:BB87 C3 82 B4 D1     jp i6502FinishLoad
 1014 D1:BB8B -  -  -  -  
 1015 D1:BB8B -  -  -  -  
 1016 D1:BB8B -  -  -  -  
 1017 D1:BB8B -  -  -  -  ;PLA - Pull Accumulator from Stack
 1018 D1:BB8B -  -  -  -  ;    pull A
 1019 D1:BB8B -  -  -  -  ;    N	Z	C	I	D	V
 1020 D1:BB8B -  -  -  -  ;    +	+	-	-	-	-
 1021 D1:BB8B -  -  -  -  ;implied	PLA	68	1	4  
 1022 D1:BB8B -  -  -  -  inst6502_pla:
 1023 D1:BB8B ED 33 04 -      ADDCYC(4)
 1024 D1:BB8E 01 00 39 D0     ld  bc,STACKBASE
 1025 D1:BB92 DD 4E 03 -      ld  c,(ix+REGSP)
 1026 D1:BB95 0C -  -  -      inc c
 1027 D1:BB96 0A -  -  -      ld  a,(bc)
 1028 D1:BB97 DD 71 03 -      ld  (ix+REGSP),c
 1029 D1:BB9A DD 77 00 -      ld  (ix+REGA),a
 1030 D1:BB9D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1031 D1:BBB1 C3 82 B4 D1     jp i6502FinishLoad
 1032 D1:BBB5 -  -  -  -  
 1033 D1:BBB5 -  -  -  -  ;PLP - Pull Processor Status from Stack
 1034 D1:BBB5 -  -  -  -  ;    The status register will be pulled with the break
 1035 D1:BBB5 -  -  -  -  ;    flag and bit 5 ignored.
 1036 D1:BBB5 -  -  -  -  ;    pull SR
 1037 D1:BBB5 -  -  -  -  ;    N	Z	C	I	D	V
 1038 D1:BBB5 -  -  -  -  ;    from stack
 1039 D1:BBB5 -  -  -  -  ;implied	PLP	28	1	4  
 1040 D1:BBB5 -  -  -  -  inst6502_plp:
 1041 D1:BBB5 ED 33 04 -      ADDCYC(4)
 1042 D1:BBB8 01 00 39 D0     ld  bc,STACKBASE
 1043 D1:BBBC DD 4E 03 -      ld  c,(ix+REGSP)
 1044 D1:BBBF 0C -  -  -      inc c
 1045 D1:BBC0 0A -  -  -      ld  a,(bc)
 1046 D1:BBC1 DD 71 03 -      ld  (ix+REGSP),c
 1047 D1:BBC4 DD 46 04 -      ld  b,(ix+REGSR)
 1048 D1:BBC7 A8 -  -  -      xor a,b
 1049 D1:BBC8 E6 CF -  -      and a,%11001111
 1050 D1:BBCA A8 -  -  -      xor a,b
 1051 D1:BBCB DD 77 04 -      ld  (ix+REGSR),a
 1052 D1:BBCE C3 82 B4 D1     jp i6502FinishLoad
 1053 D1:BBD2 -  -  -  -  
 1054 D1:BBD2 -  -  -  -  
 1055 D1:BBD2 -  -  -  -  ;-----------------------------------------------------------------------------
 1056 D1:BBD2 -  -  -  -  ;-----------------------------------------------------------------------------
 1057 D1:BBD2 -  -  -  -  ;-----------------------------------------------------------------------------
 1058 D1:BBD2 -  -  -  -  ;Instructions by type: Decrements and Increments
 1059 D1:BBD2 -  -  -  -  
 1060 D1:BBD2 -  -  -  -  ;DEC -  Decrement Memory by One
 1061 D1:BBD2 -  -  -  -  ;    M - 1 -> M
 1062 D1:BBD2 -  -  -  -  ;    N	Z	C	I	D	V
 1063 D1:BBD2 -  -  -  -  ;    +	+	-	-	-	-
 1064 D1:BBD2 -  -  -  -  ;    addressing	assembler	opc	bytes	cycles
 1065 D1:BBD2 -  -  -  -  
 1066 D1:BBD2 -  -  -  -  ;    zeropage	DEC oper	C6	2	5  
 1067 D1:BBD2 -  -  -  -  inst6502_dec_zp:
 1068 D1:BBD2 7E -  -  -      ld  a,(hl)
 1069 D1:BBD3 01 00 38 D0     ld  bc,ZEROPAGE
 1070 D1:BBD7 81 -  -  -      add a,c
 1071 D1:BBD8 4F -  -  -      ld  c,a
 1072 D1:BBD9 0A -  -  -      ld  a,(bc)
 1073 D1:BBDA 3D -  -  -      dec a
 1074 D1:BBDB 02 -  -  -      ld  (bc),a
 1075 D1:BBDC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1076 D1:BBF0 ED 33 05 -      ADDCYC(5)
 1077 D1:BBF3 C3 69 B4 D1     jp i6502NextLoad
 1078 D1:BBF7 -  -  -  -  
 1079 D1:BBF7 -  -  -  -  ;    zeropage,X	DEC oper,X	D6	2	6  
 1080 D1:BBF7 -  -  -  -  inst6502_dec_zpx:
 1081 D1:BBF7 7E -  -  -      ld  a,(hl)
 1082 D1:BBF8 01 00 38 D0     ld  bc,ZEROPAGE
 1083 D1:BBFC 81 -  -  -      add a,c
 1084 D1:BBFD DD 86 01 -      add a,(ix+REGX)
 1085 D1:BC00 4F -  -  -      ld  c,a
 1086 D1:BC01 0A -  -  -      ld  a,(bc)
 1087 D1:BC02 3D -  -  -      dec a
 1088 D1:BC03 02 -  -  -      ld  (bc),a
 1089 D1:BC04 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1090 D1:BC18 ED 33 06 -      ADDCYC(6)
 1091 D1:BC1B C3 69 B4 D1     jp i6502NextLoad
 1092 D1:BC1F -  -  -  -  
 1093 D1:BC1F -  -  -  -  ;    absolute	DEC oper	CE	3	6  
 1094 D1:BC1F -  -  -  -  inst6502_dec_abs:
 1095 D1:BC1F CD F4 B4 D1     call subroutine6502_abs_split_start
 1096 D1:BC23 E5 -  -  -      push hl
 1097 D1:BC24 50 -  -  -          ld  d,b
 1098 D1:BC25 79 -  -  -          ld  a,c
 1099 D1:BC26 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1100 D1:BC28 ED 4C -  -          mlt bc
 1101 D1:BC2A 21 00 40 D0         ld  hl,PAGETABLE
 1102 D1:BC2E 09 -  -  -          add hl,bc
 1103 D1:BC2F ED 27 -  -          ld  hl,(hl)
 1104 D1:BC31 06 00 -  -          ld  b,0
 1105 D1:BC33 4F -  -  -          ld  c,a
 1106 D1:BC34 09 -  -  -          add hl,bc   ;full address
 1107 D1:BC35 CD E9 AD D1         READ_ACCESS
 1108 D1:BC39 3D -  -  -          dec a
 1109 D1:BC3A 47 -  -  -          ld  b,a
 1110 D1:BC3B -  -  -  -          ;
 1111 D1:BC3B DD 7E 04 -          ld  a,(ix+REGSR)
 1112 D1:BC3E CB 8F -  -          res SF_ZERO,a
 1113 D1:BC40 20 02 -  -          jr  nz,$+4
 1114 D1:BC42 CB CF -  -          set SF_ZERO,a
 1115 D1:BC44 CB BF -  -          res SF_NEG,a
 1116 D1:BC46 F2 4C BC D1         jp  p,$+6
 1117 D1:BC4A CB FF -  -          set SF_NEG,a
 1118 D1:BC4C DD 77 04 -          ld  (ix+REGSR),a
 1119 D1:BC4F -  -  -  -          ;
 1120 D1:BC4F CD 0C AE D1         WRITE_ACCESS
 1121 D1:BC53 ED 33 06 -          ADDCYC(6)
 1122 D1:BC56 E1 -  -  -      pop hl
 1123 D1:BC57 C3 69 B4 D1     jp i6502NextLoad
 1124 D1:BC5B -  -  -  -  
 1125 D1:BC5B -  -  -  -  ;    absolute,X	DEC oper,X	DE	3	7  
 1126 D1:BC5B -  -  -  -  inst6502_dec_absx:
 1127 D1:BC5B ED 33 07 -      ADDCYC(7)
 1128 D1:BC5E CD 51 B5 D1     PUSH_ABSXSPLIT_NODEP
 1129 D1:BC62 CD E9 AD D1         READ_ACCESS
 1130 D1:BC66 3D -  -  -          dec a
 1131 D1:BC67 47 -  -  -          ld  b,a
 1132 D1:BC68 -  -  -  -          ;
 1133 D1:BC68 DD 7E 04 -          ld  a,(ix+REGSR)
 1134 D1:BC6B CB 8F -  -          res SF_ZERO,a
 1135 D1:BC6D 20 02 -  -          jr  nz,$+4
 1136 D1:BC6F CB CF -  -          set SF_ZERO,a
 1137 D1:BC71 CB BF -  -          res SF_NEG,a
 1138 D1:BC73 F2 79 BC D1         jp  p,$+6
 1139 D1:BC77 CB FF -  -          set SF_NEG,a
 1140 D1:BC79 DD 77 04 -          ld  (ix+REGSR),a
 1141 D1:BC7C -  -  -  -          ;
 1142 D1:BC7C CD 0C AE D1         WRITE_ACCESS
 1143 D1:BC80 E1 -  -  -      pop hl
 1144 D1:BC81 C3 69 B4 D1     jp i6502NextLoad
 1145 D1:BC85 -  -  -  -  
 1146 D1:BC85 -  -  -  -  ;DEX - Decrement Index X by One [X - 1 -> X]
 1147 D1:BC85 -  -  -  -  ;Flags altered: NZ
 1148 D1:BC85 -  -  -  -  ;implied	DEX	CA	1	2  
 1149 D1:BC85 -  -  -  -  inst6502_dex:
 1150 D1:BC85 DD 35 01 -      dec (ix+REGX)
 1151 D1:BC88 DD 7E 04 -  _:  ld  a,(ix+REGSR)
 1152 D1:BC8B CB 8F -  -      res SF_ZERO,a
 1153 D1:BC8D 20 02 -  -      jr  nz,$+4
 1154 D1:BC8F CB CF -  -      set SF_ZERO,a
 1155 D1:BC91 CB BF -  -      res SF_NEG,a
 1156 D1:BC93 F2 99 BC D1     jp  p,$+6
 1157 D1:BC97 CB FF -  -      set SF_NEG,a
 1158 D1:BC99 DD 77 04 -      ld  (ix+REGSR),a
 1159 D1:BC9C ED 33 02 -      ADDCYC(2)
 1160 D1:BC9F C3 82 B4 D1     jp i6502FinishLoad
 1161 D1:BCA3 -  -  -  -  
 1162 D1:BCA3 -  -  -  -  ;DEY - Decrement Index Y by One [Y - 1 -> Y]
 1163 D1:BCA3 -  -  -  -  ;Flags altered: NZ
 1164 D1:BCA3 -  -  -  -  ;implied	DEY	88	1	2  
 1165 D1:BCA3 -  -  -  -  inst6502_dey:
 1166 D1:BCA3 DD 35 02 -      dec (ix+REGY)
 1167 D1:BCA6 18 E0 -  -      jr  -_
 1168 D1:BCA8 -  -  -  -  
 1169 D1:BCA8 -  -  -  -  
 1170 D1:BCA8 -  -  -  -  ;INX - Increment Index X by One [X + 1 -> X]
 1171 D1:BCA8 -  -  -  -  ;Flags altered: NZ
 1172 D1:BCA8 -  -  -  -  ;implied	INX	E8	1	2  
 1173 D1:BCA8 -  -  -  -  inst6502_inx:
 1174 D1:BCA8 DD 34 01 -      inc (ix+REGX)
 1175 D1:BCAB 18 DB -  -      jr  -_
 1176 D1:BCAD -  -  -  -  
 1177 D1:BCAD -  -  -  -  
 1178 D1:BCAD -  -  -  -  ;INY - Increment Index Y by One [Y + 1 -> Y]
 1179 D1:BCAD -  -  -  -  ;Flags altered: NZ
 1180 D1:BCAD -  -  -  -  ;implied	INY	C8	1	2  
 1181 D1:BCAD -  -  -  -  inst6502_iny:
 1182 D1:BCAD DD 34 02 -      inc (ix+REGY)
 1183 D1:BCB0 18 D6 -  -      jr  -_
 1184 D1:BCB2 -  -  -  -  
 1185 D1:BCB2 -  -  -  -  
 1186 D1:BCB2 -  -  -  -  ;INC - Increment Memory by One
 1187 D1:BCB2 -  -  -  -  ;    M + 1 -> M
 1188 D1:BCB2 -  -  -  -  ;    N	Z	C	I	D	V
 1189 D1:BCB2 -  -  -  -  ;    +	+	-	-	-	-
 1190 D1:BCB2 -  -  -  -  
 1191 D1:BCB2 -  -  -  -  ;zeropage	INC oper	E6	2	5  
 1192 D1:BCB2 -  -  -  -  inst6502_inc_zp:
 1193 D1:BCB2 7E -  -  -      ld  a,(hl)
 1194 D1:BCB3 01 00 38 D0     ld  bc,ZEROPAGE
 1195 D1:BCB7 81 -  -  -      add a,c
 1196 D1:BCB8 4F -  -  -      ld  c,a
 1197 D1:BCB9 0A -  -  -      ld  a,(bc)
 1198 D1:BCBA 3C -  -  -      inc a
 1199 D1:BCBB 02 -  -  -      ld  (bc),a
 1200 D1:BCBC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1201 D1:BCD0 ED 33 05 -      ADDCYC(5)
 1202 D1:BCD3 C3 69 B4 D1     jp i6502NextLoad
 1203 D1:BCD7 -  -  -  -  
 1204 D1:BCD7 -  -  -  -  ;zeropage,X	INC oper,X	F6	2	6  
 1205 D1:BCD7 -  -  -  -  inst6502_inc_zpx:
 1206 D1:BCD7 7E -  -  -      ld  a,(hl)
 1207 D1:BCD8 01 00 38 D0     ld  bc,ZEROPAGE
 1208 D1:BCDC 81 -  -  -      add a,c
 1209 D1:BCDD DD 86 01 -      add a,(ix+REGX)
 1210 D1:BCE0 4F -  -  -      ld  c,a
 1211 D1:BCE1 0A -  -  -      ld  a,(bc)
 1212 D1:BCE2 3C -  -  -      inc a
 1213 D1:BCE3 02 -  -  -      ld  (bc),a
 1214 D1:BCE4 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1215 D1:BCF8 ED 33 06 -      ADDCYC(6)
 1216 D1:BCFB C3 69 B4 D1     jp i6502NextLoad
 1217 D1:BCFF -  -  -  -      
 1218 D1:BCFF -  -  -  -  ;absolute	INC oper	EE	3	6
 1219 D1:BCFF -  -  -  -  inst6502_inc_abs:
 1220 D1:BCFF CD F4 B4 D1     call subroutine6502_abs_split_start
 1221 D1:BD03 E5 -  -  -      push hl
 1222 D1:BD04 50 -  -  -          ld  d,b
 1223 D1:BD05 79 -  -  -          ld  a,c
 1224 D1:BD06 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1225 D1:BD08 ED 4C -  -          mlt bc
 1226 D1:BD0A 21 00 40 D0         ld  hl,PAGETABLE
 1227 D1:BD0E 09 -  -  -          add hl,bc
 1228 D1:BD0F ED 27 -  -          ld  hl,(hl)
 1229 D1:BD11 06 00 -  -          ld  b,0
 1230 D1:BD13 4F -  -  -          ld  c,a
 1231 D1:BD14 09 -  -  -          add hl,bc   ;full address
 1232 D1:BD15 CD E9 AD D1         READ_ACCESS
 1233 D1:BD19 3C -  -  -          inc a
 1234 D1:BD1A 47 -  -  -          ld  b,a
 1235 D1:BD1B -  -  -  -          ;
 1236 D1:BD1B DD 7E 04 -          ld  a,(ix+REGSR)
 1237 D1:BD1E CB 8F -  -          res SF_ZERO,a
 1238 D1:BD20 20 02 -  -          jr  nz,$+4
 1239 D1:BD22 CB CF -  -          set SF_ZERO,a
 1240 D1:BD24 CB BF -  -          res SF_NEG,a
 1241 D1:BD26 F2 2C BD D1         jp  p,$+6
 1242 D1:BD2A CB FF -  -          set SF_NEG,a
 1243 D1:BD2C DD 77 04 -          ld  (ix+REGSR),a
 1244 D1:BD2F -  -  -  -          ;
 1245 D1:BD2F CD 0C AE D1         WRITE_ACCESS
 1246 D1:BD33 ED 33 06 -          ADDCYC(6)
 1247 D1:BD36 E1 -  -  -      pop hl
 1248 D1:BD37 C3 69 B4 D1     jp i6502NextLoad
 1249 D1:BD3B -  -  -  -  
 1250 D1:BD3B -  -  -  -  ;absolute,X	INC oper,X	FE	3	7  
 1251 D1:BD3B -  -  -  -  inst6502_inc_absx:
 1252 D1:BD3B ED 33 07 -      ADDCYC(7)
 1253 D1:BD3E CD 51 B5 D1     PUSH_ABSXSPLIT_NODEP
 1254 D1:BD42 CD E9 AD D1         READ_ACCESS
 1255 D1:BD46 3C -  -  -          inc a
 1256 D1:BD47 47 -  -  -          ld  b,a
 1257 D1:BD48 -  -  -  -          ;
 1258 D1:BD48 DD 7E 04 -          ld  a,(ix+REGSR)
 1259 D1:BD4B CB 8F -  -          res SF_ZERO,a
 1260 D1:BD4D 20 02 -  -          jr  nz,$+4
 1261 D1:BD4F CB CF -  -          set SF_ZERO,a
 1262 D1:BD51 CB BF -  -          res SF_NEG,a
 1263 D1:BD53 F2 59 BD D1         jp  p,$+6
 1264 D1:BD57 CB FF -  -          set SF_NEG,a
 1265 D1:BD59 DD 77 04 -          ld  (ix+REGSR),a
 1266 D1:BD5C -  -  -  -          ;
 1267 D1:BD5C CD 0C AE D1         WRITE_ACCESS
 1268 D1:BD60 E1 -  -  -      pop hl
 1269 D1:BD61 C3 69 B4 D1     jp i6502NextLoad
 1270 D1:BD65 -  -  -  -  
 1271 D1:BD65 -  -  -  -  ;-----------------------------------------------------------------------------
 1272 D1:BD65 -  -  -  -  ;-----------------------------------------------------------------------------
 1273 D1:BD65 -  -  -  -  ;-----------------------------------------------------------------------------
 1274 D1:BD65 -  -  -  -  ;Instructions by type: Arithmetic Operations
 1275 D1:BD65 -  -  -  -  ;ADC - Add Memory to Accumulator with Carry  [A + M + C -> A, C]
 1276 D1:BD65 -  -  -  -  ;    N	Z	C	I	D	V
 1277 D1:BD65 -  -  -  -  ;    +	+	+	-	-	+
 1278 D1:BD65 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1279 D1:BD65 -  -  -  -  
 1280 D1:BD65 -  -  -  -  ;immediate	ADC #oper	69	2	2  
 1281 D1:BD65 -  -  -  -  inst6502_adc_imm:
 1282 D1:BD65 ED 33 02 -      ADDCYC(2)
 1283 D1:BD68 4E -  -  -      ld  c,(hl)
 1284 D1:BD69 C3 86 B5 D1     jp  subroutine6502_adc_combined_end
 1285 D1:BD6D -  -  -  -      
 1286 D1:BD6D -  -  -  -  
 1287 D1:BD6D -  -  -  -  ;zeropage	ADC oper	65	2	3
 1288 D1:BD6D -  -  -  -  inst6502_adc_zp:
 1289 D1:BD6D ED 33 03 -      ADDCYC(3)
 1290 D1:BD70 7E -  -  -      ld  a,(hl)
 1291 D1:BD71 01 00 38 D0     ld  bc,ZEROPAGE
 1292 D1:BD75 81 -  -  -      add a,c
 1293 D1:BD76 4F -  -  -      ld  c,a
 1294 D1:BD77 0A -  -  -      ld  a,(bc)
 1295 D1:BD78 4F -  -  -      ld  c,a
 1296 D1:BD79 C3 86 B5 D1     jp  subroutine6502_adc_combined_end
 1297 D1:BD7D -  -  -  -  
 1298 D1:BD7D -  -  -  -  ;zeropage,X	ADC oper,X	75	2	4  
 1299 D1:BD7D -  -  -  -  inst6502_adc_zpx:
 1300 D1:BD7D ED 33 04 -      ADDCYC(4)
 1301 D1:BD80 7E -  -  -      ld  a,(hl)
 1302 D1:BD81 DD 86 01 -      add a,(ix+REGX)
 1303 D1:BD84 01 00 38 D0     ld  bc,ZEROPAGE
 1304 D1:BD88 81 -  -  -      add a,c
 1305 D1:BD89 4F -  -  -      ld  c,a
 1306 D1:BD8A 0A -  -  -      ld  a,(bc)
 1307 D1:BD8B 4F -  -  -      ld  c,a
 1308 D1:BD8C C3 86 B5 D1     jp  subroutine6502_adc_combined_end
 1309 D1:BD90 -  -  -  -  
 1310 D1:BD90 -  -  -  -  ;absolute	ADC oper	6D	3	4  
 1311 D1:BD90 -  -  -  -  inst6502_adc_abs:
 1312 D1:BD90 ED 33 04 -      ADDCYC(4)
 1313 D1:BD93 CD F4 B4 D1     call subroutine6502_abs_split_start
 1314 D1:BD97 E5 -  -  -      push hl
 1315 D1:BD98 50 -  -  -          ld  d,b
 1316 D1:BD99 79 -  -  -          ld  a,c
 1317 D1:BD9A 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1318 D1:BD9C ED 4C -  -          mlt bc
 1319 D1:BD9E 21 00 40 D0         ld  hl,PAGETABLE
 1320 D1:BDA2 09 -  -  -          add hl,bc
 1321 D1:BDA3 ED 27 -  -          ld  hl,(hl)
 1322 D1:BDA5 06 00 -  -          ld  b,0
 1323 D1:BDA7 4F -  -  -          ld  c,a
 1324 D1:BDA8 09 -  -  -          add hl,bc   ;full address
 1325 D1:BDA9 CD E9 AD D1         READ_ACCESS
 1326 D1:BDAD E1 -  -  -      pop hl
 1327 D1:BDAE 4F -  -  -      ld  c,a
 1328 D1:BDAF C3 86 B5 D1     jp  subroutine6502_adc_combined_end
 1329 D1:BDB3 -  -  -  -  
 1330 D1:BDB3 -  -  -  -  ;absolute,X	ADC oper,X	7D	3	4* 
 1331 D1:BDB3 -  -  -  -  inst6502_adc_absx:
 1332 D1:BDB3 ED 33 04 -      ADDCYC(4)
 1333 D1:BDB6 CD 15 B5 D1     PUSH_ABSXSPLIT
 1334 D1:BDBA CD E9 AD D1         READ_ACCESS
 1335 D1:BDBE E1 -  -  -      pop hl
 1336 D1:BDBF 4F -  -  -      ld  c,a
 1337 D1:BDC0 C3 86 B5 D1     jp  subroutine6502_adc_combined_end
 1338 D1:BDC4 -  -  -  -  
 1339 D1:BDC4 -  -  -  -  ;absolute,Y	ADC oper,Y	79	3	4*
 1340 D1:BDC4 -  -  -  -  inst6502_adc_absy:
 1341 D1:BDC4 ED 33 04 -      ADDCYC(4)
 1342 D1:BDC7 CD 10 B5 D1     PUSH_ABSYSPLIT
 1343 D1:BDCB CD E9 AD D1         READ_ACCESS
 1344 D1:BDCF E1 -  -  -      pop hl
 1345 D1:BDD0 4F -  -  -      ld  c,a
 1346 D1:BDD1 C3 86 B5 D1     jp  subroutine6502_adc_combined_end
 1347 D1:BDD5 -  -  -  -  
 1348 D1:BDD5 -  -  -  -  ;(indirect,X)	ADC (oper,X)	61	2	6  
 1349 D1:BDD5 -  -  -  -  inst6502_adc_indx:
 1350 D1:BDD5 ED 33 06 -      ADDCYC(6)
 1351 D1:BDD8 E5 -  -  -      push hl
 1352 D1:BDD9 7E -  -  -          ld  a,(hl)
 1353 D1:BDDA 21 00 38 D0         ld  hl,ZEROPAGE
 1354 D1:BDDE 85 -  -  -          add a,L
 1355 D1:BDDF DD 86 01 -          add a,(ix+REGX)
 1356 D1:BDE2 6F -  -  -          ld  L,a
 1357 D1:BDE3 7E -  -  -          ld  a,(hl)
 1358 D1:BDE4 2C -  -  -          inc L
 1359 D1:BDE5 56 -  -  -          ld  d,(hl)
 1360 D1:BDE6 42 -  -  -          ld  b,d
 1361 D1:BDE7 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1362 D1:BDE9 ED 4C -  -          mlt bc
 1363 D1:BDEB 21 00 40 D0         ld  hl,PAGETABLE
 1364 D1:BDEF 09 -  -  -          add hl,bc
 1365 D1:BDF0 ED 27 -  -          ld  hl,(hl)
 1366 D1:BDF2 06 00 -  -          ld  b,0
 1367 D1:BDF4 4F -  -  -          ld  c,a
 1368 D1:BDF5 09 -  -  -          add hl,bc
 1369 D1:BDF6 CD E9 AD D1         READ_ACCESS
 1370 D1:BDFA E1 -  -  -      pop hl
 1371 D1:BDFB 4F -  -  -      ld  c,a
 1372 D1:BDFC C3 86 B5 D1     jp  subroutine6502_adc_combined_end
 1373 D1:BE00 -  -  -  -  
 1374 D1:BE00 -  -  -  -  ;(indirect),Y	ADC (oper),Y	71	2	5* 
 1375 D1:BE00 -  -  -  -  inst6502_adc_indy:
 1376 D1:BE00 ED 33 05 -      ADDCYC(5)
 1377 D1:BE03 E5 -  -  -      push hl
 1378 D1:BE04 7E -  -  -          ld  a,(hl)
 1379 D1:BE05 21 00 38 D0         ld  hl,ZEROPAGE
 1380 D1:BE09 85 -  -  -          add a,L
 1381 D1:BE0A 6F -  -  -          ld  L,a
 1382 D1:BE0B 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1383 D1:BE0C 2C -  -  -          inc L
 1384 D1:BE0D DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1385 D1:BE10 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1386 D1:BE11 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1387 D1:BE13 FD 23 -  -          ADDCYC(1)
 1388 D1:BE15 24 -  -  -          inc h
 1389 D1:BE16 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1390 D1:BE17 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1391 D1:BE19 ED 6C -  -          mlt hl          ;23.
 1392 D1:BE1B 01 00 40 D0         ld  bc,PAGETABLE
 1393 D1:BE1F 09 -  -  -          add hl,bc
 1394 D1:BE20 ED 27 -  -          ld  hl,(hl)     ;address get.
 1395 D1:BE22 01 00 00 00         ld  bc,0
 1396 D1:BE26 4F -  -  -          ld  c,a
 1397 D1:BE27 09 -  -  -          add hl,bc       ;Full address get.
 1398 D1:BE28 CD E9 AD D1         READ_ACCESS
 1399 D1:BE2C E1 -  -  -      pop hl
 1400 D1:BE2D 4F -  -  -      ld  c,a
 1401 D1:BE2E C3 86 B5 D1     jp  subroutine6502_adc_combined_end
 1402 D1:BE32 -  -  -  -  
 1403 D1:BE32 -  -  -  -  
 1404 D1:BE32 -  -  -  -  ;SBC - Subtract Memory from Accumulator with Borrow
 1405 D1:BE32 -  -  -  -  ;A - M - C̅ -> A
 1406 D1:BE32 -  -  -  -  ;N	Z	C	I	D	V
 1407 D1:BE32 -  -  -  -  ;+	+	+	-	-	+
 1408 D1:BE32 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1409 D1:BE32 -  -  -  -  
 1410 D1:BE32 -  -  -  -  ;immediate	SBC #oper	E9	2	2  
 1411 D1:BE32 -  -  -  -  inst6502_sbc_imm:
 1412 D1:BE32 ED 33 02 -      ADDCYC(2)
 1413 D1:BE35 4E -  -  -      ld  c,(hl)
 1414 D1:BE36 C3 B7 B5 D1     jp  subroutine6502_sbc_combined_end
 1415 D1:BE3A -  -  -  -  
 1416 D1:BE3A -  -  -  -  ;zeropage	SBC oper	E5	2	3  
 1417 D1:BE3A -  -  -  -  inst6502_sbc_zp:
 1418 D1:BE3A ED 33 03 -      ADDCYC(3)
 1419 D1:BE3D 7E -  -  -      ld  a,(hl)
 1420 D1:BE3E 01 00 38 D0     ld  bc,ZEROPAGE
 1421 D1:BE42 81 -  -  -      add a,c
 1422 D1:BE43 4F -  -  -      ld  c,a
 1423 D1:BE44 0A -  -  -      ld  a,(bc)
 1424 D1:BE45 4F -  -  -      ld  c,a
 1425 D1:BE46 C3 B7 B5 D1     jp  subroutine6502_sbc_combined_end
 1426 D1:BE4A -  -  -  -  
 1427 D1:BE4A -  -  -  -  ;zeropage,X	SBC oper,X	F5	2	4  
 1428 D1:BE4A -  -  -  -  inst6502_sbc_zpx:
 1429 D1:BE4A ED 33 04 -      ADDCYC(4)
 1430 D1:BE4D 7E -  -  -      ld  a,(hl)
 1431 D1:BE4E DD 86 01 -      add a,(ix+REGX)
 1432 D1:BE51 01 00 38 D0     ld  bc,ZEROPAGE
 1433 D1:BE55 81 -  -  -      add a,c
 1434 D1:BE56 4F -  -  -      ld  c,a
 1435 D1:BE57 0A -  -  -      ld  a,(bc)
 1436 D1:BE58 4F -  -  -      ld  c,a
 1437 D1:BE59 C3 B7 B5 D1     jp  subroutine6502_sbc_combined_end
 1438 D1:BE5D -  -  -  -  
 1439 D1:BE5D -  -  -  -  ;absolute	SBC oper	ED	3	4  
 1440 D1:BE5D -  -  -  -  inst6502_sbc_abs:
 1441 D1:BE5D ED 33 04 -      ADDCYC(4)
 1442 D1:BE60 CD F4 B4 D1     call subroutine6502_abs_split_start
 1443 D1:BE64 E5 -  -  -      push hl
 1444 D1:BE65 50 -  -  -          ld  d,b
 1445 D1:BE66 79 -  -  -          ld  a,c
 1446 D1:BE67 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1447 D1:BE69 ED 4C -  -          mlt bc
 1448 D1:BE6B 21 00 40 D0         ld  hl,PAGETABLE
 1449 D1:BE6F 09 -  -  -          add hl,bc
 1450 D1:BE70 ED 27 -  -          ld  hl,(hl)
 1451 D1:BE72 06 00 -  -          ld  b,0
 1452 D1:BE74 4F -  -  -          ld  c,a
 1453 D1:BE75 09 -  -  -          add hl,bc   ;full address
 1454 D1:BE76 CD E9 AD D1         READ_ACCESS
 1455 D1:BE7A E1 -  -  -      pop hl
 1456 D1:BE7B 4F -  -  -      ld  c,a
 1457 D1:BE7C C3 B7 B5 D1     jp  subroutine6502_sbc_combined_end
 1458 D1:BE80 -  -  -  -  
 1459 D1:BE80 -  -  -  -  ;absolute,X	SBC oper,X	FD	3	4* 
 1460 D1:BE80 -  -  -  -  inst6502_sbc_absx:
 1461 D1:BE80 ED 33 04 -      ADDCYC(4)
 1462 D1:BE83 CD 15 B5 D1     PUSH_ABSXSPLIT
 1463 D1:BE87 CD E9 AD D1         READ_ACCESS
 1464 D1:BE8B E1 -  -  -      pop hl
 1465 D1:BE8C 4F -  -  -      ld  c,a
 1466 D1:BE8D C3 B7 B5 D1     jp  subroutine6502_sbc_combined_end
 1467 D1:BE91 -  -  -  -  
 1468 D1:BE91 -  -  -  -  ;absolute,Y	SBC oper,Y	F9	3	4* 
 1469 D1:BE91 -  -  -  -  inst6502_sbc_absy:
 1470 D1:BE91 ED 33 04 -      ADDCYC(4)
 1471 D1:BE94 CD 10 B5 D1     PUSH_ABSYSPLIT
 1472 D1:BE98 CD E9 AD D1         READ_ACCESS
 1473 D1:BE9C E1 -  -  -      pop hl
 1474 D1:BE9D 4F -  -  -      ld  c,a
 1475 D1:BE9E C3 B7 B5 D1     jp  subroutine6502_sbc_combined_end
 1476 D1:BEA2 -  -  -  -  
 1477 D1:BEA2 -  -  -  -  ;(indirect,X)	SBC (oper,X)	E1	2	6  
 1478 D1:BEA2 -  -  -  -  inst6502_sbc_indx:
 1479 D1:BEA2 ED 33 06 -      ADDCYC(6)
 1480 D1:BEA5 E5 -  -  -      push hl
 1481 D1:BEA6 7E -  -  -          ld  a,(hl)
 1482 D1:BEA7 21 00 38 D0         ld  hl,ZEROPAGE
 1483 D1:BEAB 85 -  -  -          add a,L
 1484 D1:BEAC DD 86 01 -          add a,(ix+REGX)
 1485 D1:BEAF 6F -  -  -          ld  L,a
 1486 D1:BEB0 7E -  -  -          ld  a,(hl)
 1487 D1:BEB1 2C -  -  -          inc L
 1488 D1:BEB2 56 -  -  -          ld  d,(hl)
 1489 D1:BEB3 42 -  -  -          ld  b,d
 1490 D1:BEB4 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1491 D1:BEB6 ED 4C -  -          mlt bc
 1492 D1:BEB8 21 00 40 D0         ld  hl,PAGETABLE
 1493 D1:BEBC 09 -  -  -          add hl,bc
 1494 D1:BEBD ED 27 -  -          ld  hl,(hl)
 1495 D1:BEBF 06 00 -  -          ld  b,0
 1496 D1:BEC1 4F -  -  -          ld  c,a
 1497 D1:BEC2 09 -  -  -          add hl,bc
 1498 D1:BEC3 CD E9 AD D1         READ_ACCESS
 1499 D1:BEC7 E1 -  -  -      pop hl
 1500 D1:BEC8 4F -  -  -      ld  c,a
 1501 D1:BEC9 C3 B7 B5 D1     jp  subroutine6502_sbc_combined_end
 1502 D1:BECD -  -  -  -  
 1503 D1:BECD -  -  -  -  ;(indirect),Y	SBC (oper),Y	F1	2	5* 
 1504 D1:BECD -  -  -  -  inst6502_sbc_indy:
 1505 D1:BECD ED 33 05 -      ADDCYC(5)
 1506 D1:BED0 E5 -  -  -      push hl
 1507 D1:BED1 7E -  -  -          ld  a,(hl)
 1508 D1:BED2 21 00 38 D0         ld  hl,ZEROPAGE
 1509 D1:BED6 85 -  -  -          add a,L
 1510 D1:BED7 6F -  -  -          ld  L,a
 1511 D1:BED8 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1512 D1:BED9 2C -  -  -          inc L
 1513 D1:BEDA DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1514 D1:BEDD 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1515 D1:BEDE 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1516 D1:BEE0 FD 23 -  -          ADDCYC(1)
 1517 D1:BEE2 24 -  -  -          inc h
 1518 D1:BEE3 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1519 D1:BEE4 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1520 D1:BEE6 ED 6C -  -          mlt hl          ;23.
 1521 D1:BEE8 01 00 40 D0         ld  bc,PAGETABLE
 1522 D1:BEEC 09 -  -  -          add hl,bc
 1523 D1:BEED ED 27 -  -          ld  hl,(hl)     ;address get.
 1524 D1:BEEF 01 00 00 00         ld  bc,0
 1525 D1:BEF3 4F -  -  -          ld  c,a
 1526 D1:BEF4 09 -  -  -          add hl,bc       ;Full address get.
 1527 D1:BEF5 CD E9 AD D1         READ_ACCESS
 1528 D1:BEF9 E1 -  -  -      pop hl
 1529 D1:BEFA 4F -  -  -      ld  c,a
 1530 D1:BEFB C3 B7 B5 D1     jp  subroutine6502_sbc_combined_end
 1531 D1:BEFF -  -  -  -  
 1532 D1:BEFF -  -  -  -  
 1533 D1:BEFF -  -  -  -  
 1534 D1:BEFF -  -  -  -  ;-----------------------------------------------------------------------------
 1535 D1:BEFF -  -  -  -  ;-----------------------------------------------------------------------------
 1536 D1:BEFF -  -  -  -  ;-----------------------------------------------------------------------------
 1537 D1:BEFF -  -  -  -  ;Instructions by type: Logical Operations
 1538 D1:BEFF -  -  -  -  
 1539 D1:BEFF -  -  -  -  ;AND - AND Memory with Accumulator
 1540 D1:BEFF -  -  -  -  ;A AND M -> A
 1541 D1:BEFF -  -  -  -  ;N	Z	C	I	D	V
 1542 D1:BEFF -  -  -  -  ;+	+	-	-	-	-
 1543 D1:BEFF -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1544 D1:BEFF -  -  -  -  
 1545 D1:BEFF -  -  -  -  ;immediate	AND #oper	29	2	2  
 1546 D1:BEFF -  -  -  -  inst6502_and_imm:
 1547 D1:BEFF ED 33 02 -      ADDCYC(2)
 1548 D1:BF02 7E -  -  -      ld  a,(hl)
 1549 D1:BF03 DD A6 00 -      and a,(ix+REGA)
 1550 D1:BF06 DD 77 00 -      ld  (ix+REGA),A
 1551 D1:BF09 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1552 D1:BF1D C3 69 B4 D1     jp i6502NextLoad
 1553 D1:BF21 -  -  -  -  
 1554 D1:BF21 -  -  -  -  ;zeropage	AND oper	25	2	3  
 1555 D1:BF21 -  -  -  -  inst6502_and_zp:
 1556 D1:BF21 ED 33 03 -      ADDCYC(3)
 1557 D1:BF24 7E -  -  -      ld  a,(hl)
 1558 D1:BF25 01 00 38 D0     ld  bc,ZEROPAGE
 1559 D1:BF29 81 -  -  -      add a,c
 1560 D1:BF2A 4F -  -  -      ld  c,a
 1561 D1:BF2B 0A -  -  -      ld  a,(bc)
 1562 D1:BF2C DD A6 00 -      and a,(ix+REGA)
 1563 D1:BF2F DD 77 00 -      ld  (ix+REGA),A
 1564 D1:BF32 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1565 D1:BF46 C3 69 B4 D1     jp i6502NextLoad
 1566 D1:BF4A -  -  -  -  
 1567 D1:BF4A -  -  -  -  ;zeropage,X	AND oper,X	35	2	4  
 1568 D1:BF4A -  -  -  -  inst6502_and_zpx:
 1569 D1:BF4A ED 33 04 -      ADDCYC(4)
 1570 D1:BF4D 7E -  -  -      ld  a,(hl)
 1571 D1:BF4E 01 00 38 D0     ld  bc,ZEROPAGE
 1572 D1:BF52 81 -  -  -      add a,c
 1573 D1:BF53 DD 86 01 -      add a,(ix+REGX)
 1574 D1:BF56 4F -  -  -      ld  c,a
 1575 D1:BF57 0A -  -  -      ld  a,(bc)
 1576 D1:BF58 DD A6 00 -      and a,(ix+REGA)
 1577 D1:BF5B DD 77 00 -      ld  (ix+REGA),A
 1578 D1:BF5E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1579 D1:BF72 C3 69 B4 D1     jp i6502NextLoad
 1580 D1:BF76 -  -  -  -  
 1581 D1:BF76 -  -  -  -  ;absolute	AND oper	2D	3	4  
 1582 D1:BF76 -  -  -  -  inst6502_and_abs:
 1583 D1:BF76 ED 33 04 -      ADDCYC(4)
 1584 D1:BF79 CD F4 B4 D1     call subroutine6502_abs_split_start
 1585 D1:BF7D E5 -  -  -      push hl
 1586 D1:BF7E 50 -  -  -          ld  d,b
 1587 D1:BF7F 79 -  -  -          ld  a,c
 1588 D1:BF80 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1589 D1:BF82 ED 4C -  -          mlt bc
 1590 D1:BF84 21 00 40 D0         ld  hl,PAGETABLE
 1591 D1:BF88 09 -  -  -          add hl,bc
 1592 D1:BF89 ED 27 -  -          ld  hl,(hl)
 1593 D1:BF8B 06 00 -  -          ld  b,0
 1594 D1:BF8D 4F -  -  -          ld  c,a
 1595 D1:BF8E 09 -  -  -          add hl,bc   ;full address
 1596 D1:BF8F CD E9 AD D1         READ_ACCESS
 1597 D1:BF93 E1 -  -  -      pop hl
 1598 D1:BF94 DD A6 00 -      and a,(ix+REGA)
 1599 D1:BF97 DD 77 00 -      ld  (ix+REGA),A
 1600 D1:BF9A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1601 D1:BFAE C3 69 B4 D1     jp i6502NextLoad
 1602 D1:BFB2 -  -  -  -  
 1603 D1:BFB2 -  -  -  -  ;absolute,X	AND oper,X	3D	3	4* 
 1604 D1:BFB2 -  -  -  -  inst6502_and_absx:
 1605 D1:BFB2 ED 33 04 -      ADDCYC(4)
 1606 D1:BFB5 CD 15 B5 D1     PUSH_ABSXSPLIT
 1607 D1:BFB9 CD E9 AD D1         READ_ACCESS
 1608 D1:BFBD DD A6 00 -          and a,(ix+REGA)
 1609 D1:BFC0 DD 77 00 -          ld  (ix+REGA),A
 1610 D1:BFC3 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1611 D1:BFD7 E1 -  -  -      pop hl
 1612 D1:BFD8 C3 69 B4 D1     jp i6502NextLoad
 1613 D1:BFDC -  -  -  -  
 1614 D1:BFDC -  -  -  -  ;absolute,Y	AND oper,Y	39	3	4* 
 1615 D1:BFDC -  -  -  -  inst6502_and_absy:
 1616 D1:BFDC ED 33 04 -      ADDCYC(4)
 1617 D1:BFDF CD 10 B5 D1     PUSH_ABSYSPLIT
 1618 D1:BFE3 CD E9 AD D1         READ_ACCESS
 1619 D1:BFE7 E1 -  -  -      pop hl
 1620 D1:BFE8 DD A6 00 -      and a,(ix+REGA)
 1621 D1:BFEB DD 77 00 -      ld  (ix+REGA),A
 1622 D1:BFEE DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1623 D1:C002 C3 69 B4 D1     jp i6502NextLoad
 1624 D1:C006 -  -  -  -  
 1625 D1:C006 -  -  -  -  ;(indirect,X)	AND (oper,X)	21	2	6  
 1626 D1:C006 -  -  -  -  inst6502_and_indx:
 1627 D1:C006 ED 33 06 -      ADDCYC(6)
 1628 D1:C009 E5 -  -  -      push hl
 1629 D1:C00A 7E -  -  -          ld  a,(hl)
 1630 D1:C00B 21 00 38 D0         ld  hl,ZEROPAGE
 1631 D1:C00F 85 -  -  -          add a,L
 1632 D1:C010 DD 86 01 -          add a,(ix+REGX)
 1633 D1:C013 6F -  -  -          ld  L,a
 1634 D1:C014 7E -  -  -          ld  a,(hl)
 1635 D1:C015 2C -  -  -          inc L
 1636 D1:C016 56 -  -  -          ld  d,(hl)
 1637 D1:C017 42 -  -  -          ld  b,d
 1638 D1:C018 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1639 D1:C01A ED 4C -  -          mlt bc
 1640 D1:C01C 21 00 40 D0         ld  hl,PAGETABLE
 1641 D1:C020 09 -  -  -          add hl,bc
 1642 D1:C021 ED 27 -  -          ld  hl,(hl)
 1643 D1:C023 06 00 -  -          ld  b,0
 1644 D1:C025 4F -  -  -          ld  c,a
 1645 D1:C026 09 -  -  -          add hl,bc
 1646 D1:C027 CD E9 AD D1         READ_ACCESS
 1647 D1:C02B E1 -  -  -      pop hl
 1648 D1:C02C DD A6 00 -      and a,(ix+REGA)
 1649 D1:C02F DD 77 00 -      ld  (ix+REGA),A
 1650 D1:C032 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1651 D1:C046 C3 69 B4 D1     jp i6502NextLoad
 1652 D1:C04A -  -  -  -  
 1653 D1:C04A -  -  -  -  ;(indirect),Y	AND (oper),Y	31	2	5* 
 1654 D1:C04A -  -  -  -  inst6502_and_indy:
 1655 D1:C04A ED 33 05 -      ADDCYC(5)
 1656 D1:C04D E5 -  -  -      push hl
 1657 D1:C04E 7E -  -  -          ld  a,(hl)
 1658 D1:C04F 21 00 38 D0         ld  hl,ZEROPAGE
 1659 D1:C053 85 -  -  -          add a,L
 1660 D1:C054 6F -  -  -          ld  L,a
 1661 D1:C055 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1662 D1:C056 2C -  -  -          inc L
 1663 D1:C057 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1664 D1:C05A 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1665 D1:C05B 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1666 D1:C05D 24 -  -  -          inc h
 1667 D1:C05E FD 23 -  -          ADDCYC(1)
 1668 D1:C060 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1669 D1:C061 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1670 D1:C063 ED 6C -  -          mlt hl          ;23.
 1671 D1:C065 01 00 40 D0         ld  bc,PAGETABLE
 1672 D1:C069 09 -  -  -          add hl,bc
 1673 D1:C06A ED 27 -  -          ld  hl,(hl)     ;address get.
 1674 D1:C06C 01 00 00 00         ld  bc,0
 1675 D1:C070 4F -  -  -          ld  c,a
 1676 D1:C071 09 -  -  -          add hl,bc       ;Full address get.
 1677 D1:C072 CD E9 AD D1         READ_ACCESS
 1678 D1:C076 E1 -  -  -      pop hl
 1679 D1:C077 DD A6 00 -      and a,(ix+REGA)
 1680 D1:C07A DD 77 00 -      ld  (ix+REGA),A
 1681 D1:C07D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1682 D1:C091 C3 69 B4 D1     jp i6502NextLoad
 1683 D1:C095 -  -  -  -  
 1684 D1:C095 -  -  -  -  ;-----------------------------------------------------------------------------
 1685 D1:C095 -  -  -  -  ;EOR - Exclusive-OR Memory with Accumulator
 1686 D1:C095 -  -  -  -  ;A EOR M -> A
 1687 D1:C095 -  -  -  -  ;N	Z	C	I	D	V
 1688 D1:C095 -  -  -  -  ;+	+	-	-	-	-
 1689 D1:C095 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1690 D1:C095 -  -  -  -  
 1691 D1:C095 -  -  -  -  ;immediate	EOR #oper	49	2	2  
 1692 D1:C095 -  -  -  -  inst6502_eor_imm:
 1693 D1:C095 ED 33 02 -      ADDCYC(2)
 1694 D1:C098 7E -  -  -      ld  a,(hl)
 1695 D1:C099 DD AE 00 -      xor a,(ix+REGA)
 1696 D1:C09C DD 77 00 -      ld  (ix+REGA),A
 1697 D1:C09F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1698 D1:C0B3 C3 69 B4 D1     jp i6502NextLoad
 1699 D1:C0B7 -  -  -  -  
 1700 D1:C0B7 -  -  -  -  ;zeropage	EOR oper	45	2	3  
 1701 D1:C0B7 -  -  -  -  inst6502_eor_zp:
 1702 D1:C0B7 ED 33 03 -      ADDCYC(3)
 1703 D1:C0BA 7E -  -  -      ld  a,(hl)
 1704 D1:C0BB 01 00 38 D0     ld  bc,ZEROPAGE
 1705 D1:C0BF 81 -  -  -      add a,c
 1706 D1:C0C0 4F -  -  -      ld  c,a
 1707 D1:C0C1 0A -  -  -      ld  a,(bc)
 1708 D1:C0C2 DD AE 00 -      xor a,(ix+REGA)
 1709 D1:C0C5 DD 77 00 -      ld  (ix+REGA),A
 1710 D1:C0C8 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1711 D1:C0DC C3 69 B4 D1     jp i6502NextLoad
 1712 D1:C0E0 -  -  -  -  
 1713 D1:C0E0 -  -  -  -  
 1714 D1:C0E0 -  -  -  -  ;zeropage,X	EOR oper,X	55	2	4  
 1715 D1:C0E0 -  -  -  -  inst6502_eor_zpx:
 1716 D1:C0E0 ED 33 04 -      ADDCYC(4)
 1717 D1:C0E3 7E -  -  -      ld  a,(hl)
 1718 D1:C0E4 01 00 38 D0     ld  bc,ZEROPAGE
 1719 D1:C0E8 81 -  -  -      add a,c
 1720 D1:C0E9 DD 86 01 -      add a,(ix+REGX)
 1721 D1:C0EC 4F -  -  -      ld  c,a
 1722 D1:C0ED 0A -  -  -      ld  a,(bc)
 1723 D1:C0EE DD AE 00 -      xor a,(ix+REGA)
 1724 D1:C0F1 DD 77 00 -      ld  (ix+REGA),A
 1725 D1:C0F4 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1726 D1:C108 C3 69 B4 D1     jp i6502NextLoad
 1727 D1:C10C -  -  -  -  
 1728 D1:C10C -  -  -  -  ;absolute	EOR oper	4D	3	4  
 1729 D1:C10C -  -  -  -  inst6502_eor_abs:
 1730 D1:C10C ED 33 04 -      ADDCYC(4)
 1731 D1:C10F CD F4 B4 D1     call subroutine6502_abs_split_start
 1732 D1:C113 E5 -  -  -      push hl
 1733 D1:C114 50 -  -  -          ld  d,b
 1734 D1:C115 79 -  -  -          ld  a,c
 1735 D1:C116 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1736 D1:C118 ED 4C -  -          mlt bc
 1737 D1:C11A 21 00 40 D0         ld  hl,PAGETABLE
 1738 D1:C11E 09 -  -  -          add hl,bc
 1739 D1:C11F ED 27 -  -          ld  hl,(hl)
 1740 D1:C121 06 00 -  -          ld  b,0
 1741 D1:C123 4F -  -  -          ld  c,a
 1742 D1:C124 09 -  -  -          add hl,bc   ;full address
 1743 D1:C125 CD E9 AD D1         READ_ACCESS
 1744 D1:C129 E1 -  -  -      pop hl
 1745 D1:C12A DD AE 00 -      xor a,(ix+REGA)
 1746 D1:C12D DD 77 00 -      ld  (ix+REGA),A
 1747 D1:C130 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1748 D1:C144 C3 69 B4 D1     jp i6502NextLoad
 1749 D1:C148 -  -  -  -  
 1750 D1:C148 -  -  -  -  ;absolute,X	EOR oper,X	5D	3	4* 
 1751 D1:C148 -  -  -  -  inst6502_eor_absx:
 1752 D1:C148 ED 33 04 -      ADDCYC(4)
 1753 D1:C14B CD 15 B5 D1     PUSH_ABSXSPLIT
 1754 D1:C14F CD E9 AD D1         READ_ACCESS
 1755 D1:C153 DD AE 00 -          xor a,(ix+REGA)
 1756 D1:C156 DD 77 00 -          ld  (ix+REGA),A
 1757 D1:C159 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1758 D1:C16D E1 -  -  -      pop hl
 1759 D1:C16E C3 69 B4 D1     jp i6502NextLoad
 1760 D1:C172 -  -  -  -  
 1761 D1:C172 -  -  -  -  ;absolute,Y	EOR oper,Y	59	3	4* 
 1762 D1:C172 -  -  -  -  inst6502_eor_absy:
 1763 D1:C172 ED 33 04 -      ADDCYC(4)
 1764 D1:C175 CD 10 B5 D1     PUSH_ABSYSPLIT
 1765 D1:C179 CD E9 AD D1         READ_ACCESS
 1766 D1:C17D E1 -  -  -      pop hl
 1767 D1:C17E DD AE 00 -      xor a,(ix+REGA)
 1768 D1:C181 DD 77 00 -      ld  (ix+REGA),A
 1769 D1:C184 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1770 D1:C198 C3 69 B4 D1     jp i6502NextLoad
 1771 D1:C19C -  -  -  -  
 1772 D1:C19C -  -  -  -  ;(indirect,X)	EOR (oper,X)	41	2	6  
 1773 D1:C19C -  -  -  -  inst6502_eor_indx:
 1774 D1:C19C ED 33 06 -      ADDCYC(6)
 1775 D1:C19F E5 -  -  -      push hl
 1776 D1:C1A0 7E -  -  -          ld  a,(hl)
 1777 D1:C1A1 21 00 38 D0         ld  hl,ZEROPAGE
 1778 D1:C1A5 85 -  -  -          add a,L
 1779 D1:C1A6 DD 86 01 -          add a,(ix+REGX)
 1780 D1:C1A9 6F -  -  -          ld  L,a
 1781 D1:C1AA 7E -  -  -          ld  a,(hl)
 1782 D1:C1AB 2C -  -  -          inc L
 1783 D1:C1AC 56 -  -  -          ld  d,(hl)
 1784 D1:C1AD 42 -  -  -          ld  b,d
 1785 D1:C1AE 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1786 D1:C1B0 ED 4C -  -          mlt bc
 1787 D1:C1B2 21 00 40 D0         ld  hl,PAGETABLE
 1788 D1:C1B6 09 -  -  -          add hl,bc
 1789 D1:C1B7 ED 27 -  -          ld  hl,(hl)
 1790 D1:C1B9 06 00 -  -          ld  b,0
 1791 D1:C1BB 4F -  -  -          ld  c,a
 1792 D1:C1BC 09 -  -  -          add hl,bc
 1793 D1:C1BD CD E9 AD D1         READ_ACCESS
 1794 D1:C1C1 E1 -  -  -      pop hl
 1795 D1:C1C2 DD AE 00 -      xor a,(ix+REGA)
 1796 D1:C1C5 DD 77 00 -      ld  (ix+REGA),A
 1797 D1:C1C8 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1798 D1:C1DC C3 69 B4 D1     jp i6502NextLoad
 1799 D1:C1E0 -  -  -  -  
 1800 D1:C1E0 -  -  -  -  ;(indirect),Y	EOR (oper),Y	51	2	5* 
 1801 D1:C1E0 -  -  -  -  inst6502_eor_indy:
 1802 D1:C1E0 ED 33 05 -      ADDCYC(5)
 1803 D1:C1E3 E5 -  -  -      push hl
 1804 D1:C1E4 7E -  -  -          ld  a,(hl)
 1805 D1:C1E5 21 00 38 D0         ld  hl,ZEROPAGE
 1806 D1:C1E9 85 -  -  -          add a,L
 1807 D1:C1EA 6F -  -  -          ld  L,a
 1808 D1:C1EB 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1809 D1:C1EC 2C -  -  -          inc L
 1810 D1:C1ED DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1811 D1:C1F0 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1812 D1:C1F1 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1813 D1:C1F3 24 -  -  -          inc h
 1814 D1:C1F4 FD 23 -  -          ADDCYC(1)
 1815 D1:C1F6 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1816 D1:C1F7 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1817 D1:C1F9 ED 6C -  -          mlt hl          ;23.
 1818 D1:C1FB 01 00 40 D0         ld  bc,PAGETABLE
 1819 D1:C1FF 09 -  -  -          add hl,bc
 1820 D1:C200 ED 27 -  -          ld  hl,(hl)     ;address get.
 1821 D1:C202 01 00 00 00         ld  bc,0
 1822 D1:C206 4F -  -  -          ld  c,a
 1823 D1:C207 09 -  -  -          add hl,bc       ;Full address get.
 1824 D1:C208 CD E9 AD D1         READ_ACCESS
 1825 D1:C20C E1 -  -  -      pop hl
 1826 D1:C20D DD AE 00 -      xor a,(ix+REGA)
 1827 D1:C210 DD 77 00 -      ld  (ix+REGA),A
 1828 D1:C213 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1829 D1:C227 C3 69 B4 D1     jp i6502NextLoad
 1830 D1:C22B -  -  -  -  
 1831 D1:C22B -  -  -  -  ;-----------------------------------------------------------------------------
 1832 D1:C22B -  -  -  -  ;ORA - OR Memory with Accumulator
 1833 D1:C22B -  -  -  -  ;A OR M -> A
 1834 D1:C22B -  -  -  -  ;N	Z	C	I	D	V
 1835 D1:C22B -  -  -  -  ;+	+	-	-	-	-
 1836 D1:C22B -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1837 D1:C22B -  -  -  -  
 1838 D1:C22B -  -  -  -  ;immediate	ORA #oper	09	2	2  
 1839 D1:C22B -  -  -  -  inst6502_ora_imm:
 1840 D1:C22B ED 33 02 -      ADDCYC(2)
 1841 D1:C22E 7E -  -  -      ld  a,(hl)
 1842 D1:C22F DD B6 00 -      or  a,(ix+REGA)
 1843 D1:C232 DD 77 00 -      ld  (ix+REGA),A
 1844 D1:C235 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1845 D1:C249 C3 69 B4 D1     jp i6502NextLoad
 1846 D1:C24D -  -  -  -  
 1847 D1:C24D -  -  -  -  ;zeropage	ORA oper	05	2	3  
 1848 D1:C24D -  -  -  -  inst6502_ora_zp:
 1849 D1:C24D ED 33 03 -      ADDCYC(3)
 1850 D1:C250 7E -  -  -      ld  a,(hl)
 1851 D1:C251 01 00 38 D0     ld  bc,ZEROPAGE
 1852 D1:C255 81 -  -  -      add a,c
 1853 D1:C256 4F -  -  -      ld  c,a
 1854 D1:C257 0A -  -  -      ld  a,(bc)
 1855 D1:C258 DD B6 00 -      or  a,(ix+REGA)
 1856 D1:C25B DD 77 00 -      ld  (ix+REGA),A
 1857 D1:C25E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1858 D1:C272 C3 69 B4 D1     jp i6502NextLoad
 1859 D1:C276 -  -  -  -  
 1860 D1:C276 -  -  -  -  ;zeropage,X	ORA oper,X	15	2	4  
 1861 D1:C276 -  -  -  -  inst6502_ora_zpx:
 1862 D1:C276 ED 33 04 -      ADDCYC(4)
 1863 D1:C279 7E -  -  -      ld  a,(hl)
 1864 D1:C27A 01 00 38 D0     ld  bc,ZEROPAGE
 1865 D1:C27E 81 -  -  -      add a,c
 1866 D1:C27F DD 86 01 -      add a,(ix+REGX)
 1867 D1:C282 4F -  -  -      ld  c,a
 1868 D1:C283 0A -  -  -      ld  a,(bc)
 1869 D1:C284 DD B6 00 -      or  a,(ix+REGA)
 1870 D1:C287 DD 77 00 -      ld  (ix+REGA),A
 1871 D1:C28A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1872 D1:C29E C3 69 B4 D1     jp i6502NextLoad
 1873 D1:C2A2 -  -  -  -  
 1874 D1:C2A2 -  -  -  -  ;absolute	ORA oper	0D	3	4  
 1875 D1:C2A2 -  -  -  -  inst6502_ora_abs:
 1876 D1:C2A2 ED 33 04 -      ADDCYC(4)
 1877 D1:C2A5 CD F4 B4 D1     call subroutine6502_abs_split_start
 1878 D1:C2A9 E5 -  -  -      push hl
 1879 D1:C2AA 50 -  -  -          ld  d,b
 1880 D1:C2AB 79 -  -  -          ld  a,c
 1881 D1:C2AC 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1882 D1:C2AE ED 4C -  -          mlt bc
 1883 D1:C2B0 21 00 40 D0         ld  hl,PAGETABLE
 1884 D1:C2B4 09 -  -  -          add hl,bc
 1885 D1:C2B5 ED 27 -  -          ld  hl,(hl)
 1886 D1:C2B7 06 00 -  -          ld  b,0
 1887 D1:C2B9 4F -  -  -          ld  c,a
 1888 D1:C2BA 09 -  -  -          add hl,bc   ;full address
 1889 D1:C2BB CD E9 AD D1         READ_ACCESS
 1890 D1:C2BF E1 -  -  -      pop hl
 1891 D1:C2C0 DD B6 00 -      or  a,(ix+REGA)
 1892 D1:C2C3 DD 77 00 -      ld  (ix+REGA),A
 1893 D1:C2C6 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1894 D1:C2DA C3 69 B4 D1     jp i6502NextLoad
 1895 D1:C2DE -  -  -  -  
 1896 D1:C2DE -  -  -  -  ;absolute,X	ORA oper,X	1D	3	4* 
 1897 D1:C2DE -  -  -  -  inst6502_ora_absx:
 1898 D1:C2DE ED 33 04 -      ADDCYC(4)
 1899 D1:C2E1 CD 15 B5 D1     PUSH_ABSXSPLIT
 1900 D1:C2E5 CD E9 AD D1         READ_ACCESS
 1901 D1:C2E9 DD B6 00 -          or  a,(ix+REGA)
 1902 D1:C2EC DD 77 00 -          ld  (ix+REGA),A
 1903 D1:C2EF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1904 D1:C303 E1 -  -  -      pop hl
 1905 D1:C304 C3 69 B4 D1     jp i6502NextLoad
 1906 D1:C308 -  -  -  -  
 1907 D1:C308 -  -  -  -  ;absolute,Y	ORA oper,Y	19	3	4* 
 1908 D1:C308 -  -  -  -  inst6502_ora_absy:
 1909 D1:C308 ED 33 04 -      ADDCYC(4)
 1910 D1:C30B CD 10 B5 D1     PUSH_ABSYSPLIT
 1911 D1:C30F CD E9 AD D1         READ_ACCESS
 1912 D1:C313 E1 -  -  -      pop hl
 1913 D1:C314 DD B6 00 -      or  a,(ix+REGA)
 1914 D1:C317 DD 77 00 -      ld  (ix+REGA),A
 1915 D1:C31A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1916 D1:C32E C3 69 B4 D1     jp i6502NextLoad
 1917 D1:C332 -  -  -  -  
 1918 D1:C332 -  -  -  -  ;(indirect,X)	ORA (oper,X)	01	2	6  
 1919 D1:C332 -  -  -  -  inst6502_ora_indx:
 1920 D1:C332 ED 33 06 -      ADDCYC(6)
 1921 D1:C335 E5 -  -  -      push hl
 1922 D1:C336 7E -  -  -          ld  a,(hl)
 1923 D1:C337 21 00 38 D0         ld  hl,ZEROPAGE
 1924 D1:C33B 85 -  -  -          add a,L
 1925 D1:C33C DD 86 01 -          add a,(ix+REGX)
 1926 D1:C33F 6F -  -  -          ld  L,a
 1927 D1:C340 7E -  -  -          ld  a,(hl)
 1928 D1:C341 2C -  -  -          inc L
 1929 D1:C342 56 -  -  -          ld  d,(hl)
 1930 D1:C343 42 -  -  -          ld  b,d
 1931 D1:C344 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1932 D1:C346 ED 4C -  -          mlt bc
 1933 D1:C348 21 00 40 D0         ld  hl,PAGETABLE
 1934 D1:C34C 09 -  -  -          add hl,bc
 1935 D1:C34D ED 27 -  -          ld  hl,(hl)
 1936 D1:C34F 06 00 -  -          ld  b,0
 1937 D1:C351 4F -  -  -          ld  c,a
 1938 D1:C352 09 -  -  -          add hl,bc
 1939 D1:C353 CD E9 AD D1         READ_ACCESS
 1940 D1:C357 E1 -  -  -      pop hl
 1941 D1:C358 DD B6 00 -      or  a,(ix+REGA)
 1942 D1:C35B DD 77 00 -      ld  (ix+REGA),A
 1943 D1:C35E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1944 D1:C372 C3 69 B4 D1     jp i6502NextLoad
 1945 D1:C376 -  -  -  -  
 1946 D1:C376 -  -  -  -  ;(indirect),Y	ORA (oper),Y	11	2	5* 
 1947 D1:C376 -  -  -  -  inst6502_ora_indy:
 1948 D1:C376 ED 33 05 -      ADDCYC(5)
 1949 D1:C379 E5 -  -  -      push hl
 1950 D1:C37A 7E -  -  -          ld  a,(hl)
 1951 D1:C37B 21 00 38 D0         ld  hl,ZEROPAGE
 1952 D1:C37F 85 -  -  -          add a,L
 1953 D1:C380 6F -  -  -          ld  L,a
 1954 D1:C381 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1955 D1:C382 2C -  -  -          inc L
 1956 D1:C383 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1957 D1:C386 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1958 D1:C387 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1959 D1:C389 24 -  -  -          inc h
 1960 D1:C38A FD 23 -  -          ADDCYC(1)
 1961 D1:C38C 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1962 D1:C38D 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1963 D1:C38F ED 6C -  -          mlt hl          ;23.
 1964 D1:C391 01 00 40 D0         ld  bc,PAGETABLE
 1965 D1:C395 09 -  -  -          add hl,bc
 1966 D1:C396 ED 27 -  -          ld  hl,(hl)     ;address get.
 1967 D1:C398 01 00 00 00         ld  bc,0
 1968 D1:C39C 4F -  -  -          ld  c,a
 1969 D1:C39D 09 -  -  -          add hl,bc       ;Full address get.
 1970 D1:C39E CD E9 AD D1         READ_ACCESS
 1971 D1:C3A2 E1 -  -  -      pop hl
 1972 D1:C3A3 DD B6 00 -      or  a,(ix+REGA)
 1973 D1:C3A6 DD 77 00 -      ld  (ix+REGA),A
 1974 D1:C3A9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1975 D1:C3BD C3 69 B4 D1     jp i6502NextLoad
 1976 D1:C3C1 -  -  -  -  
 1977 D1:C3C1 -  -  -  -  ;-----------------------------------------------------------------------------
 1978 D1:C3C1 -  -  -  -  ;-----------------------------------------------------------------------------
 1979 D1:C3C1 -  -  -  -  ;-----------------------------------------------------------------------------
 1980 D1:C3C1 -  -  -  -  ;Instructions by type: Shift & Rotate Instructions
 1981 D1:C3C1 -  -  -  -  ;ASL - Shift Left One Bit (Memory or Accumulator)
 1982 D1:C3C1 -  -  -  -  ;C <- [76543210] <- 0
 1983 D1:C3C1 -  -  -  -  ;N	Z	C	I	D	V
 1984 D1:C3C1 -  -  -  -  ;+	+	+	-	-	-
 1985 D1:C3C1 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1986 D1:C3C1 -  -  -  -  
 1987 D1:C3C1 -  -  -  -  ;accumulator	ASL A	0A	1	2  
 1988 D1:C3C1 -  -  -  -  inst6502_asl:
 1989 D1:C3C1 ED 33 02 -      ADDCYC(2)
 1990 D1:C3C4 DD 7E 00 -      ld  a,(ix+REGA)
 1991 D1:C3C7 CB 27 -  -      sla a
 1992 D1:C3C9 DD 77 00 -      ld  (ix+REGA),a
 1993 D1:C3CC DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1994 D1:C3E6 C3 82 B4 D1     jp i6502FinishLoad
 1995 D1:C3EA -  -  -  -  
 1996 D1:C3EA -  -  -  -  ;zeropage	ASL oper	06	2	5  
 1997 D1:C3EA -  -  -  -  inst6502_asl_zp:
 1998 D1:C3EA ED 33 05 -      ADDCYC(5)
 1999 D1:C3ED 7E -  -  -      ld  a,(hl)
 2000 D1:C3EE 01 00 38 D0     ld  bc,ZEROPAGE
 2001 D1:C3F2 81 -  -  -      add a,c
 2002 D1:C3F3 4F -  -  -      ld  c,a
 2003 D1:C3F4 0A -  -  -      ld  a,(bc)
 2004 D1:C3F5 CB 27 -  -      sla a
 2005 D1:C3F7 02 -  -  -      ld  (bc),a
 2006 D1:C3F8 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2007 D1:C412 C3 69 B4 D1     jp i6502NextLoad
 2008 D1:C416 -  -  -  -  
 2009 D1:C416 -  -  -  -  ;zeropage,X	ASL oper,X	16	2	6  
 2010 D1:C416 -  -  -  -  inst6502_asl_zpx:
 2011 D1:C416 ED 33 06 -      ADDCYC(6)
 2012 D1:C419 7E -  -  -      ld  a,(hl)
 2013 D1:C41A 01 00 38 D0     ld  bc,ZEROPAGE
 2014 D1:C41E 81 -  -  -      add a,c
 2015 D1:C41F DD 86 01 -      add a,(ix+REGX)
 2016 D1:C422 4F -  -  -      ld  c,a
 2017 D1:C423 0A -  -  -      ld  a,(bc)
 2018 D1:C424 CB 27 -  -      sla a
 2019 D1:C426 02 -  -  -      ld  (bc),a
 2020 D1:C427 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2021 D1:C441 C3 69 B4 D1     jp i6502NextLoad
 2022 D1:C445 -  -  -  -  
 2023 D1:C445 -  -  -  -  ;absolute	ASL oper	0E	3	6  
 2024 D1:C445 -  -  -  -  inst6502_asl_abs:
 2025 D1:C445 ED 33 06 -      ADDCYC(6)
 2026 D1:C448 CD F4 B4 D1     call subroutine6502_abs_split_start
 2027 D1:C44C E5 -  -  -      push hl
 2028 D1:C44D 50 -  -  -          ld  d,b
 2029 D1:C44E 79 -  -  -          ld  a,c
 2030 D1:C44F 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2031 D1:C451 ED 4C -  -          mlt bc
 2032 D1:C453 21 00 40 D0         ld  hl,PAGETABLE
 2033 D1:C457 09 -  -  -          add hl,bc
 2034 D1:C458 ED 27 -  -          ld  hl,(hl)
 2035 D1:C45A 06 00 -  -          ld  b,0
 2036 D1:C45C 4F -  -  -          ld  c,a
 2037 D1:C45D 09 -  -  -          add hl,bc   ;full address
 2038 D1:C45E CD E9 AD D1         READ_ACCESS
 2039 D1:C462 CB 27 -  -          sla a
 2040 D1:C464 4F -  -  -          ld  c,a
 2041 D1:C465 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2042 D1:C47F 41 -  -  -          ld  b,c
 2043 D1:C480 CD 0C AE D1         WRITE_ACCESS
 2044 D1:C484 E1 -  -  -      pop hl
 2045 D1:C485 C3 69 B4 D1     jp i6502NextLoad
 2046 D1:C489 -  -  -  -  
 2047 D1:C489 -  -  -  -  ;absolute,X	ASL oper,X	1E	3	7  
 2048 D1:C489 -  -  -  -  inst6502_asl_absx:
 2049 D1:C489 ED 33 07 -      ADDCYC(7)
 2050 D1:C48C CD 51 B5 D1     PUSH_ABSXSPLIT_NODEP
 2051 D1:C490 CD E9 AD D1         READ_ACCESS
 2052 D1:C494 CB 27 -  -          sla a
 2053 D1:C496 4F -  -  -          ld  c,a
 2054 D1:C497 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2055 D1:C4B1 41 -  -  -          ld  b,c
 2056 D1:C4B2 CD 0C AE D1         WRITE_ACCESS
 2057 D1:C4B6 E1 -  -  -      pop hl
 2058 D1:C4B7 C3 69 B4 D1     jp i6502NextLoad
 2059 D1:C4BB -  -  -  -  
 2060 D1:C4BB -  -  -  -  ;-----------------------------------------------------------------------------
 2061 D1:C4BB -  -  -  -  ;LSR - Shift One Bit Right (Memory or Accumulator)
 2062 D1:C4BB -  -  -  -  ;0 -> [76543210] -> C
 2063 D1:C4BB -  -  -  -  ;N	Z	C	I	D	V
 2064 D1:C4BB -  -  -  -  ;0	+	+	-	-	-
 2065 D1:C4BB -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2066 D1:C4BB -  -  -  -  
 2067 D1:C4BB -  -  -  -  ;accumulator	LSR A	4A	1	2  
 2068 D1:C4BB -  -  -  -  inst6502_lsr:
 2069 D1:C4BB ED 33 02 -      ADDCYC(2)
 2070 D1:C4BE DD 7E 00 -      ld  a,(ix+REGA)
 2071 D1:C4C1 CB 3F -  -      srl a
 2072 D1:C4C3 DD 77 00 -      ld  (ix+REGA),a
 2073 D1:C4C6 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2074 D1:C4E0 C3 82 B4 D1     jp i6502FinishLoad
 2075 D1:C4E4 -  -  -  -  
 2076 D1:C4E4 -  -  -  -  ;zeropage	LSR oper	46	2	5  
 2077 D1:C4E4 -  -  -  -  inst6502_lsr_zp:
 2078 D1:C4E4 ED 33 05 -      ADDCYC(5)
 2079 D1:C4E7 7E -  -  -      ld  a,(hl)
 2080 D1:C4E8 01 00 38 D0     ld  bc,ZEROPAGE
 2081 D1:C4EC 81 -  -  -      add a,c
 2082 D1:C4ED 4F -  -  -      ld  c,a
 2083 D1:C4EE 0A -  -  -      ld  a,(bc)
 2084 D1:C4EF CB 3F -  -      srl a
 2085 D1:C4F1 02 -  -  -      ld  (bc),a
 2086 D1:C4F2 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2087 D1:C50C C3 69 B4 D1     jp i6502NextLoad
 2088 D1:C510 -  -  -  -  
 2089 D1:C510 -  -  -  -  ;zeropage,X	LSR oper,X	56	2	6  
 2090 D1:C510 -  -  -  -  inst6502_lsr_zpx:
 2091 D1:C510 ED 33 06 -      ADDCYC(6)
 2092 D1:C513 7E -  -  -      ld  a,(hl)
 2093 D1:C514 01 00 38 D0     ld  bc,ZEROPAGE
 2094 D1:C518 81 -  -  -      add a,c
 2095 D1:C519 DD 86 01 -      add a,(ix+REGX)
 2096 D1:C51C 4F -  -  -      ld  c,a
 2097 D1:C51D 0A -  -  -      ld  a,(bc)
 2098 D1:C51E CB 3F -  -      srl a
 2099 D1:C520 02 -  -  -      ld  (bc),a
 2100 D1:C521 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2101 D1:C53B C3 69 B4 D1     jp i6502NextLoad
 2102 D1:C53F -  -  -  -      
 2103 D1:C53F -  -  -  -  ;absolute	LSR oper	4E	3	6  
 2104 D1:C53F -  -  -  -  inst6502_lsr_abs:
 2105 D1:C53F ED 33 06 -      ADDCYC(6)
 2106 D1:C542 CD F4 B4 D1     call subroutine6502_abs_split_start
 2107 D1:C546 E5 -  -  -      push hl
 2108 D1:C547 50 -  -  -          ld  d,b
 2109 D1:C548 79 -  -  -          ld  a,c
 2110 D1:C549 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2111 D1:C54B ED 4C -  -          mlt bc
 2112 D1:C54D 21 00 40 D0         ld  hl,PAGETABLE
 2113 D1:C551 09 -  -  -          add hl,bc
 2114 D1:C552 ED 27 -  -          ld  hl,(hl)
 2115 D1:C554 06 00 -  -          ld  b,0
 2116 D1:C556 4F -  -  -          ld  c,a
 2117 D1:C557 09 -  -  -          add hl,bc   ;full address
 2118 D1:C558 CD E9 AD D1         READ_ACCESS
 2119 D1:C55C CB 3F -  -          srl a
 2120 D1:C55E 4F -  -  -          ld  c,a
 2121 D1:C55F DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2122 D1:C579 41 -  -  -          ld  b,c
 2123 D1:C57A CD 0C AE D1         WRITE_ACCESS
 2124 D1:C57E E1 -  -  -      pop hl
 2125 D1:C57F C3 69 B4 D1     jp i6502NextLoad
 2126 D1:C583 -  -  -  -  
 2127 D1:C583 -  -  -  -  ;absolute,X	LSR oper,X	5E	3	7  
 2128 D1:C583 -  -  -  -  inst6502_lsr_absx:
 2129 D1:C583 ED 33 07 -      ADDCYC(7)
 2130 D1:C586 CD 51 B5 D1     PUSH_ABSXSPLIT_NODEP
 2131 D1:C58A CD E9 AD D1         READ_ACCESS
 2132 D1:C58E CB 3F -  -          srl a
 2133 D1:C590 4F -  -  -          ld  c,a
 2134 D1:C591 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2135 D1:C5AB 41 -  -  -          ld  b,c
 2136 D1:C5AC CD 0C AE D1         WRITE_ACCESS
 2137 D1:C5B0 E1 -  -  -      pop hl
 2138 D1:C5B1 C3 69 B4 D1     jp i6502NextLoad
 2139 D1:C5B5 -  -  -  -  
 2140 D1:C5B5 -  -  -  -  ;-----------------------------------------------------------------------------
 2141 D1:C5B5 -  -  -  -  ;ROL - Rotate One Bit Left (Memory or Accumulator)
 2142 D1:C5B5 -  -  -  -  ;C <- [76543210] <- C
 2143 D1:C5B5 -  -  -  -  ;N	Z	C	I	D	V
 2144 D1:C5B5 -  -  -  -  ;+	+	+	-	-	-
 2145 D1:C5B5 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2146 D1:C5B5 -  -  -  -  
 2147 D1:C5B5 -  -  -  -  ;accumulator	ROL A	2A	1	2  
 2148 D1:C5B5 -  -  -  -  inst6502_rol:
 2149 D1:C5B5 ED 33 02 -      ADDCYC(2)
 2150 D1:C5B8 DD 7E 04 -      ld  a,(ix+REGSR)
 2151 D1:C5BB 1F -  -  -      rra
 2152 D1:C5BC DD CB 00 16     rl  (ix+REGA)
 2153 D1:C5C0 DD 7E 00 -      ld  a,(ix+REGA)
 2154 D1:C5C3 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2155 D1:C5DD C3 82 B4 D1     jp i6502FinishLoad
 2156 D1:C5E1 -  -  -  -  
 2157 D1:C5E1 -  -  -  -  ;zeropage	ROL oper	26	2	5  
 2158 D1:C5E1 -  -  -  -  inst6502_rol_zp:
 2159 D1:C5E1 ED 33 05 -      ADDCYC(5)
 2160 D1:C5E4 7E -  -  -      ld  a,(hl)
 2161 D1:C5E5 01 00 38 D0     ld  bc,ZEROPAGE
 2162 D1:C5E9 81 -  -  -      add a,c
 2163 D1:C5EA 4F -  -  -      ld  c,a
 2164 D1:C5EB DD 7E 04 -      ld  a,(ix+REGSR)
 2165 D1:C5EE 1F -  -  -      rra
 2166 D1:C5EF 0A -  -  -      ld  a,(bc)
 2167 D1:C5F0 17 -  -  -      rla
 2168 D1:C5F1 02 -  -  -      ld  (bc),a
 2169 D1:C5F2 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2170 D1:C60C C3 69 B4 D1     jp i6502NextLoad
 2171 D1:C610 -  -  -  -  
 2172 D1:C610 -  -  -  -  ;zeropage,X	ROL oper,X	36	2	6  
 2173 D1:C610 -  -  -  -  inst6502_rol_zpx:
 2174 D1:C610 ED 33 06 -      ADDCYC(6)
 2175 D1:C613 7E -  -  -      ld  a,(hl)
 2176 D1:C614 01 00 38 D0     ld  bc,ZEROPAGE
 2177 D1:C618 81 -  -  -      add a,c
 2178 D1:C619 DD 86 01 -      add a,(ix+REGX)
 2179 D1:C61C 4F -  -  -      ld  c,a
 2180 D1:C61D DD 7E 04 -      ld  a,(ix+REGSR)
 2181 D1:C620 1F -  -  -      rra
 2182 D1:C621 0A -  -  -      ld  a,(bc)
 2183 D1:C622 17 -  -  -      rla
 2184 D1:C623 02 -  -  -      ld  (bc),a
 2185 D1:C624 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2186 D1:C63E C3 69 B4 D1     jp i6502NextLoad
 2187 D1:C642 -  -  -  -  
 2188 D1:C642 -  -  -  -  ;absolute	ROL oper	2E	3	6  
 2189 D1:C642 -  -  -  -  inst6502_rol_abs:
 2190 D1:C642 ED 33 06 -      ADDCYC(6)
 2191 D1:C645 CD F4 B4 D1     call subroutine6502_abs_split_start
 2192 D1:C649 E5 -  -  -      push hl
 2193 D1:C64A 50 -  -  -          ld  d,b
 2194 D1:C64B 79 -  -  -          ld  a,c
 2195 D1:C64C 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2196 D1:C64E ED 4C -  -          mlt bc
 2197 D1:C650 21 00 40 D0         ld  hl,PAGETABLE
 2198 D1:C654 09 -  -  -          add hl,bc
 2199 D1:C655 ED 27 -  -          ld  hl,(hl)
 2200 D1:C657 06 00 -  -          ld  b,0
 2201 D1:C659 4F -  -  -          ld  c,a
 2202 D1:C65A 09 -  -  -          add hl,bc   ;full address
 2203 D1:C65B CD E9 AD D1         READ_ACCESS
 2204 D1:C65F DD 46 04 -          ld  b,(ix+REGSR)
 2205 D1:C662 CB 18 -  -          rr b
 2206 D1:C664 17 -  -  -          rla
 2207 D1:C665 4F -  -  -          ld  c,a
 2208 D1:C666 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2209 D1:C680 41 -  -  -          ld  b,c
 2210 D1:C681 CD 0C AE D1         WRITE_ACCESS
 2211 D1:C685 E1 -  -  -      pop hl
 2212 D1:C686 C3 69 B4 D1     jp i6502NextLoad
 2213 D1:C68A -  -  -  -  
 2214 D1:C68A -  -  -  -  ;absolute,X	ROL oper,X	3E	3	7  
 2215 D1:C68A -  -  -  -  inst6502_rol_absx:
 2216 D1:C68A ED 33 07 -      ADDCYC(7)
 2217 D1:C68D CD 51 B5 D1     PUSH_ABSXSPLIT_NODEP
 2218 D1:C691 CD E9 AD D1         READ_ACCESS
 2219 D1:C695 DD 46 04 -          ld  b,(ix+REGSR)
 2220 D1:C698 CB 18 -  -          rr b
 2221 D1:C69A 17 -  -  -          rla
 2222 D1:C69B 4F -  -  -          ld  c,a
 2223 D1:C69C DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2224 D1:C6B6 41 -  -  -          ld  b,c
 2225 D1:C6B7 CD 0C AE D1         WRITE_ACCESS
 2226 D1:C6BB E1 -  -  -      pop hl
 2227 D1:C6BC C3 69 B4 D1     jp i6502NextLoad
 2228 D1:C6C0 -  -  -  -  
 2229 D1:C6C0 -  -  -  -  ;-----------------------------------------------------------------------------
 2230 D1:C6C0 -  -  -  -  ;ROR - Rotate One Bit Right (Memory or Accumulator)
 2231 D1:C6C0 -  -  -  -  ;C -> [76543210] -> C
 2232 D1:C6C0 -  -  -  -  ;N	Z	C	I	D	V
 2233 D1:C6C0 -  -  -  -  ;+	+	+	-	-	-
 2234 D1:C6C0 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2235 D1:C6C0 -  -  -  -  
 2236 D1:C6C0 -  -  -  -  ;accumulator	ROR A	6A	1	2  
 2237 D1:C6C0 -  -  -  -  inst6502_ror:
 2238 D1:C6C0 ED 33 02 -      ADDCYC(2)
 2239 D1:C6C3 DD 7E 04 -      ld  a,(ix+REGSR)
 2240 D1:C6C6 1F -  -  -      rra
 2241 D1:C6C7 DD CB 00 1E     rr  (ix+REGA)
 2242 D1:C6CB DD 7E 00 -      ld  a,(ix+REGA)
 2243 D1:C6CE DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2244 D1:C6E8 C3 82 B4 D1     jp i6502FinishLoad
 2245 D1:C6EC -  -  -  -  
 2246 D1:C6EC -  -  -  -  ;zeropage	ROR oper	66	2	5  
 2247 D1:C6EC -  -  -  -  inst6502_ror_zp:
 2248 D1:C6EC ED 33 05 -      ADDCYC(5)
 2249 D1:C6EF 7E -  -  -      ld  a,(hl)
 2250 D1:C6F0 01 00 38 D0     ld  bc,ZEROPAGE
 2251 D1:C6F4 81 -  -  -      add a,c
 2252 D1:C6F5 4F -  -  -      ld  c,a
 2253 D1:C6F6 DD 7E 04 -      ld  a,(ix+REGSR)
 2254 D1:C6F9 1F -  -  -      rra
 2255 D1:C6FA 0A -  -  -      ld  a,(bc)
 2256 D1:C6FB 1F -  -  -      rra
 2257 D1:C6FC 02 -  -  -      ld  (bc),a
 2258 D1:C6FD DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2259 D1:C717 C3 69 B4 D1     jp i6502NextLoad
 2260 D1:C71B -  -  -  -  
 2261 D1:C71B -  -  -  -  ;zeropage,X	ROR oper,X	76	2	6  
 2262 D1:C71B -  -  -  -  inst6502_ror_zpx:
 2263 D1:C71B ED 33 06 -      ADDCYC(6)
 2264 D1:C71E 7E -  -  -      ld  a,(hl)
 2265 D1:C71F 01 00 38 D0     ld  bc,ZEROPAGE
 2266 D1:C723 81 -  -  -      add a,c
 2267 D1:C724 DD 86 01 -      add a,(ix+REGX)
 2268 D1:C727 4F -  -  -      ld  c,a
 2269 D1:C728 DD 7E 04 -      ld  a,(ix+REGSR)
 2270 D1:C72B 1F -  -  -      rra
 2271 D1:C72C 0A -  -  -      ld  a,(bc)
 2272 D1:C72D 1F -  -  -      rra
 2273 D1:C72E 02 -  -  -      ld  (bc),a
 2274 D1:C72F DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2275 D1:C749 C3 69 B4 D1     jp i6502NextLoad
 2276 D1:C74D -  -  -  -  
 2277 D1:C74D -  -  -  -  ;absolute	ROR oper	6E	3	6  
 2278 D1:C74D -  -  -  -  inst6502_ror_abs:
 2279 D1:C74D ED 33 06 -      ADDCYC(6)
 2280 D1:C750 CD F4 B4 D1     call subroutine6502_abs_split_start
 2281 D1:C754 E5 -  -  -      push hl
 2282 D1:C755 50 -  -  -          ld  d,b
 2283 D1:C756 79 -  -  -          ld  a,c
 2284 D1:C757 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2285 D1:C759 ED 4C -  -          mlt bc
 2286 D1:C75B 21 00 40 D0         ld  hl,PAGETABLE
 2287 D1:C75F 09 -  -  -          add hl,bc
 2288 D1:C760 ED 27 -  -          ld  hl,(hl)
 2289 D1:C762 06 00 -  -          ld  b,0
 2290 D1:C764 4F -  -  -          ld  c,a
 2291 D1:C765 09 -  -  -          add hl,bc   ;full address
 2292 D1:C766 CD E9 AD D1         READ_ACCESS
 2293 D1:C76A DD 46 04 -          ld  b,(ix+REGSR)
 2294 D1:C76D CB 18 -  -          rr b
 2295 D1:C76F 1F -  -  -          rra
 2296 D1:C770 4F -  -  -          ld  c,a
 2297 D1:C771 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2298 D1:C78B 41 -  -  -          ld  b,c
 2299 D1:C78C CD 0C AE D1         WRITE_ACCESS
 2300 D1:C790 E1 -  -  -      pop hl
 2301 D1:C791 C3 69 B4 D1     jp i6502NextLoad
 2302 D1:C795 -  -  -  -  
 2303 D1:C795 -  -  -  -  ;absolute,X	ROR oper,X	7E	3	7  
 2304 D1:C795 -  -  -  -  inst6502_ror_absx:
 2305 D1:C795 ED 33 07 -      ADDCYC(7)
 2306 D1:C798 CD 51 B5 D1     PUSH_ABSXSPLIT_NODEP
 2307 D1:C79C CD E9 AD D1         READ_ACCESS
 2308 D1:C7A0 DD 46 04 -          ld  b,(ix+REGSR)
 2309 D1:C7A3 CB 18 -  -          rr b
 2310 D1:C7A5 1F -  -  -          rra
 2311 D1:C7A6 4F -  -  -          ld  c,a
 2312 D1:C7A7 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2313 D1:C7C1 41 -  -  -          ld  b,c
 2314 D1:C7C2 CD 0C AE D1         WRITE_ACCESS
 2315 D1:C7C6 E1 -  -  -      pop hl
 2316 D1:C7C7 C3 69 B4 D1     jp i6502NextLoad
 2317 D1:C7CB -  -  -  -  
 2318 D1:C7CB -  -  -  -  ;-----------------------------------------------------------------------------
 2319 D1:C7CB -  -  -  -  ;-----------------------------------------------------------------------------
 2320 D1:C7CB -  -  -  -  ;-----------------------------------------------------------------------------
 2321 D1:C7CB -  -  -  -  ;Instructions by type: Flag Instructions
 2322 D1:C7CB -  -  -  -  
 2323 D1:C7CB -  -  -  -  ;CLC - Clear Carry Flag
 2324 D1:C7CB -  -  -  -  ;0 -> C
 2325 D1:C7CB -  -  -  -  ;N	Z	C	I	D	V
 2326 D1:C7CB -  -  -  -  ;-	-	0	-	-	-
 2327 D1:C7CB -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2328 D1:C7CB -  -  -  -  ;implied	CLC	18	1	2  
 2329 D1:C7CB -  -  -  -  inst6502_clc:
 2330 D1:C7CB ED 33 02 -      ADDCYC(2)
 2331 D1:C7CE DD CB 04 86     res SF_CARRY,(ix+REGSR)
 2332 D1:C7D2 C3 82 B4 D1     jp  i6502FinishLoad
 2333 D1:C7D6 -  -  -  -  
 2334 D1:C7D6 -  -  -  -  ;CLD - Clear Decimal Mode
 2335 D1:C7D6 -  -  -  -  ;0 -> D
 2336 D1:C7D6 -  -  -  -  ;N	Z	C	I	D	V
 2337 D1:C7D6 -  -  -  -  ;-	-	-	-	0	-
 2338 D1:C7D6 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2339 D1:C7D6 -  -  -  -  ;implied	CLD	D8	1	2  
 2340 D1:C7D6 -  -  -  -  inst6502_cld:
 2341 D1:C7D6 ED 33 02 -      ADDCYC(2)
 2342 D1:C7D9 DD CB 04 9E     res SF_DEC,(ix+REGSR)
 2343 D1:C7DD C3 82 B4 D1     jp  i6502FinishLoad
 2344 D1:C7E1 -  -  -  -  
 2345 D1:C7E1 -  -  -  -  ;CLI -  Clear Interrupt Disable Bit
 2346 D1:C7E1 -  -  -  -  ;0 -> I
 2347 D1:C7E1 -  -  -  -  ;N	Z	C	I	D	V
 2348 D1:C7E1 -  -  -  -  ;-	-	-	0	-	-
 2349 D1:C7E1 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2350 D1:C7E1 -  -  -  -  ;implied	CLI	58	1	2  
 2351 D1:C7E1 -  -  -  -  inst6502_cli:
 2352 D1:C7E1 ED 33 02 -      ADDCYC(2)
 2353 D1:C7E4 DD CB 04 96     res SF_INT,(ix+REGSR)
 2354 D1:C7E8 C3 82 B4 D1     jp  i6502FinishLoad
 2355 D1:C7EC -  -  -  -  
 2356 D1:C7EC -  -  -  -  ;CLV - Clear Overflow Flag
 2357 D1:C7EC -  -  -  -  ;0 -> V
 2358 D1:C7EC -  -  -  -  ;N	Z	C	I	D	V
 2359 D1:C7EC -  -  -  -  ;-	-	-	-	-	0
 2360 D1:C7EC -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2361 D1:C7EC -  -  -  -  ;implied	CLV	B8	1	2  
 2362 D1:C7EC -  -  -  -  inst6502_clv:
 2363 D1:C7EC ED 33 02 -      ADDCYC(2)
 2364 D1:C7EF DD CB 04 B6     res SF_OVER,(ix+REGSR)
 2365 D1:C7F3 C3 82 B4 D1     jp  i6502FinishLoad
 2366 D1:C7F7 -  -  -  -  
 2367 D1:C7F7 -  -  -  -  ;SEC - Set Carry Flag
 2368 D1:C7F7 -  -  -  -  ;1 -> C
 2369 D1:C7F7 -  -  -  -  ;N	Z	C	I	D	V
 2370 D1:C7F7 -  -  -  -  ;-	-	1	-	-	-
 2371 D1:C7F7 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2372 D1:C7F7 -  -  -  -  ;implied	SEC	38	1	2  
 2373 D1:C7F7 -  -  -  -  inst6502_sec:
 2374 D1:C7F7 ED 33 02 -      ADDCYC(2)
 2375 D1:C7FA DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 2376 D1:C7FE C3 82 B4 D1     jp  i6502FinishLoad
 2377 D1:C802 -  -  -  -  
 2378 D1:C802 -  -  -  -  ;SED - Set Decimal Flag
 2379 D1:C802 -  -  -  -  ;1 -> D
 2380 D1:C802 -  -  -  -  ;N	Z	C	I	D	V
 2381 D1:C802 -  -  -  -  ;-	-	-	-	1	-
 2382 D1:C802 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2383 D1:C802 -  -  -  -  ;implied	SED	F8	1	2  
 2384 D1:C802 -  -  -  -  inst6502_sed:
 2385 D1:C802 ED 33 02 -      ADDCYC(2)
 2386 D1:C805 DD CB 04 DE     set SF_DEC,(ix+REGSR)
 2387 D1:C809 C3 82 B4 D1     jp  i6502FinishLoad
 2388 D1:C80D -  -  -  -  
 2389 D1:C80D -  -  -  -  ;SEI - Set Interrupt Disable Status
 2390 D1:C80D -  -  -  -  ;1 -> I
 2391 D1:C80D -  -  -  -  ;N	Z	C	I	D	V
 2392 D1:C80D -  -  -  -  ;-	-	-	1	-	-
 2393 D1:C80D -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2394 D1:C80D -  -  -  -  ;implied	SEI	78	1	2  
 2395 D1:C80D -  -  -  -  inst6502_sei:
 2396 D1:C80D ED 33 02 -      ADDCYC(2)
 2397 D1:C810 DD CB 04 D6     set SF_INT,(ix+REGSR)
 2398 D1:C814 C3 82 B4 D1     jp  i6502FinishLoad
 2399 D1:C818 -  -  -  -  
 2400 D1:C818 -  -  -  -  ;-----------------------------------------------------------------------------
 2401 D1:C818 -  -  -  -  ;-----------------------------------------------------------------------------
 2402 D1:C818 -  -  -  -  ;-----------------------------------------------------------------------------
 2403 D1:C818 -  -  -  -  ;Instructions by type: Comparisons
 2404 D1:C818 -  -  -  -  
 2405 D1:C818 -  -  -  -  ;CMP - Compare Memory with Accumulator
 2406 D1:C818 -  -  -  -  ;A - M
 2407 D1:C818 -  -  -  -  ;N	Z	C	I	D	V
 2408 D1:C818 -  -  -  -  ;+	+	+	-	-	-
 2409 D1:C818 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2410 D1:C818 -  -  -  -  
 2411 D1:C818 -  -  -  -  ;immediate	CMP #oper	C9	2	2  
 2412 D1:C818 -  -  -  -  inst6502_cmp_imm:
 2413 D1:C818 ED 33 02 -      ADDCYC(2)
 2414 D1:C81B 46 -  -  -      ld  b,(hl)
 2415 D1:C81C C3 EA B5 D1     jp  subroutine6502_cmp_combined_end
 2416 D1:C820 -  -  -  -  
 2417 D1:C820 -  -  -  -  ;zeropage	CMP oper	C5	2	3  
 2418 D1:C820 -  -  -  -  inst6502_cmp_zp:
 2419 D1:C820 ED 33 03 -      ADDCYC(3)
 2420 D1:C823 7E -  -  -      ld  a,(hl)
 2421 D1:C824 01 00 38 D0     ld  bc,ZEROPAGE
 2422 D1:C828 81 -  -  -      add a,c
 2423 D1:C829 4F -  -  -      ld  c,a
 2424 D1:C82A 0A -  -  -      ld  a,(bc)
 2425 D1:C82B 47 -  -  -      ld  b,a
 2426 D1:C82C C3 EA B5 D1     jp  subroutine6502_cmp_combined_end
 2427 D1:C830 -  -  -  -  
 2428 D1:C830 -  -  -  -  ;zeropage,X	CMP oper,X	D5	2	4  
 2429 D1:C830 -  -  -  -  inst6502_cmp_zpx:
 2430 D1:C830 ED 33 04 -      ADDCYC(4)
 2431 D1:C833 7E -  -  -      ld  a,(hl)
 2432 D1:C834 01 00 38 D0     ld  bc,ZEROPAGE
 2433 D1:C838 81 -  -  -      add a,c
 2434 D1:C839 DD 86 01 -      add a,(ix+REGX)
 2435 D1:C83C 4F -  -  -      ld  c,a
 2436 D1:C83D 0A -  -  -      ld  a,(bc)
 2437 D1:C83E 47 -  -  -      ld  b,a
 2438 D1:C83F C3 EA B5 D1     jp  subroutine6502_cmp_combined_end
 2439 D1:C843 -  -  -  -  
 2440 D1:C843 -  -  -  -  ;absolute	CMP oper	CD	3	4  
 2441 D1:C843 -  -  -  -  inst6502_cmp_abs:
 2442 D1:C843 ED 33 04 -      ADDCYC(4)
 2443 D1:C846 CD F4 B4 D1     call subroutine6502_abs_split_start
 2444 D1:C84A E5 -  -  -      push hl
 2445 D1:C84B 50 -  -  -          ld  d,b
 2446 D1:C84C 79 -  -  -          ld  a,c
 2447 D1:C84D 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2448 D1:C84F ED 4C -  -          mlt bc
 2449 D1:C851 21 00 40 D0         ld  hl,PAGETABLE
 2450 D1:C855 09 -  -  -          add hl,bc
 2451 D1:C856 ED 27 -  -          ld  hl,(hl)
 2452 D1:C858 06 00 -  -          ld  b,0
 2453 D1:C85A 4F -  -  -          ld  c,a
 2454 D1:C85B 09 -  -  -          add hl,bc   ;full address
 2455 D1:C85C CD E9 AD D1         READ_ACCESS
 2456 D1:C860 E1 -  -  -      pop hl
 2457 D1:C861 47 -  -  -      ld  b,a
 2458 D1:C862 C3 EA B5 D1     jp  subroutine6502_cmp_combined_end
 2459 D1:C866 -  -  -  -  
 2460 D1:C866 -  -  -  -  ;absolute,X	CMP oper,X	DD	3	4* 
 2461 D1:C866 -  -  -  -  inst6502_cmp_absx:
 2462 D1:C866 ED 33 04 -      ADDCYC(4)
 2463 D1:C869 CD 15 B5 D1     PUSH_ABSXSPLIT
 2464 D1:C86D CD E9 AD D1         READ_ACCESS
 2465 D1:C871 E1 -  -  -      pop hl
 2466 D1:C872 47 -  -  -      ld  b,a
 2467 D1:C873 C3 EA B5 D1     jp  subroutine6502_cmp_combined_end
 2468 D1:C877 -  -  -  -  
 2469 D1:C877 -  -  -  -  ;absolute,Y	CMP oper,Y	D9	3	4* 
 2470 D1:C877 -  -  -  -  inst6502_cmp_absy:
 2471 D1:C877 ED 33 04 -      ADDCYC(4)
 2472 D1:C87A CD 10 B5 D1     PUSH_ABSYSPLIT
 2473 D1:C87E CD E9 AD D1         READ_ACCESS
 2474 D1:C882 E1 -  -  -      pop hl
 2475 D1:C883 47 -  -  -      ld  b,a
 2476 D1:C884 C3 EA B5 D1     jp  subroutine6502_cmp_combined_end
 2477 D1:C888 -  -  -  -  
 2478 D1:C888 -  -  -  -  ;(indirect,X)	CMP (oper,X)	C1	2	6  
 2479 D1:C888 -  -  -  -  inst6502_cmp_indx:
 2480 D1:C888 ED 33 06 -      ADDCYC(6)
 2481 D1:C88B E5 -  -  -      push hl
 2482 D1:C88C 7E -  -  -          ld  a,(hl)
 2483 D1:C88D 21 00 38 D0         ld  hl,ZEROPAGE
 2484 D1:C891 85 -  -  -          add a,L
 2485 D1:C892 DD 86 01 -          add a,(ix+REGX)
 2486 D1:C895 6F -  -  -          ld  L,a
 2487 D1:C896 7E -  -  -          ld  a,(hl)
 2488 D1:C897 2C -  -  -          inc L
 2489 D1:C898 56 -  -  -          ld  d,(hl)
 2490 D1:C899 42 -  -  -          ld  b,d
 2491 D1:C89A 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2492 D1:C89C ED 4C -  -          mlt bc
 2493 D1:C89E 21 00 40 D0         ld  hl,PAGETABLE
 2494 D1:C8A2 09 -  -  -          add hl,bc
 2495 D1:C8A3 ED 27 -  -          ld  hl,(hl)
 2496 D1:C8A5 06 00 -  -          ld  b,0
 2497 D1:C8A7 4F -  -  -          ld  c,a
 2498 D1:C8A8 09 -  -  -          add hl,bc
 2499 D1:C8A9 CD E9 AD D1         READ_ACCESS
 2500 D1:C8AD E1 -  -  -      pop hl
 2501 D1:C8AE 47 -  -  -      ld  b,a
 2502 D1:C8AF C3 EA B5 D1     jp  subroutine6502_cmp_combined_end
 2503 D1:C8B3 -  -  -  -  
 2504 D1:C8B3 -  -  -  -  ;(indirect),Y	CMP (oper),Y	D1	2	5* 
 2505 D1:C8B3 -  -  -  -  inst6502_cmp_indy:
 2506 D1:C8B3 ED 33 05 -      ADDCYC(5)
 2507 D1:C8B6 E5 -  -  -      push hl
 2508 D1:C8B7 7E -  -  -          ld  a,(hl)
 2509 D1:C8B8 21 00 38 D0         ld  hl,ZEROPAGE
 2510 D1:C8BC 85 -  -  -          add a,L
 2511 D1:C8BD 6F -  -  -          ld  L,a
 2512 D1:C8BE 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 2513 D1:C8BF 2C -  -  -          inc L
 2514 D1:C8C0 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 2515 D1:C8C3 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 2516 D1:C8C4 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 2517 D1:C8C6 24 -  -  -          inc h
 2518 D1:C8C7 FD 23 -  -          ADDCYC(1)
 2519 D1:C8C9 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 2520 D1:C8CA 2E 0C -  -          ld  L,BASETABLE_STRIDE
 2521 D1:C8CC ED 6C -  -          mlt hl          ;23.
 2522 D1:C8CE 01 00 40 D0         ld  bc,PAGETABLE
 2523 D1:C8D2 09 -  -  -          add hl,bc
 2524 D1:C8D3 ED 27 -  -          ld  hl,(hl)     ;address get.
 2525 D1:C8D5 01 00 00 00         ld  bc,0
 2526 D1:C8D9 4F -  -  -          ld  c,a
 2527 D1:C8DA 09 -  -  -          add hl,bc       ;Full address get.
 2528 D1:C8DB CD E9 AD D1         READ_ACCESS
 2529 D1:C8DF E1 -  -  -      pop hl
 2530 D1:C8E0 47 -  -  -      ld  b,a
 2531 D1:C8E1 C3 EA B5 D1     jp  subroutine6502_cmp_combined_end
 2532 D1:C8E5 -  -  -  -  
 2533 D1:C8E5 -  -  -  -  ;-----------------------------------------------------------------------------
 2534 D1:C8E5 -  -  -  -  ;CPX - Compare Memory and Index X
 2535 D1:C8E5 -  -  -  -  ;X - M
 2536 D1:C8E5 -  -  -  -  ;N	Z	C	I	D	V
 2537 D1:C8E5 -  -  -  -  ;+	+	+	-	-	-
 2538 D1:C8E5 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2539 D1:C8E5 -  -  -  -  ;immediate	CPX #oper	E0	2	2  
 2540 D1:C8E5 -  -  -  -  inst6502_cpx_imm:
 2541 D1:C8E5 ED 33 02 -      ADDCYC(2)
 2542 D1:C8E8 DD 7E 01 -      ld  a,(ix+REGX)
 2543 D1:C8EB 96 -  -  -      sub a,(hl)
 2544 D1:C8EC 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2545 D1:C8ED DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2546 D1:C907 C3 69 B4 D1     jp  i6502NextLoad
 2547 D1:C90B -  -  -  -  
 2548 D1:C90B -  -  -  -  ;zeropage	CPX oper	E4	2	3  
 2549 D1:C90B -  -  -  -  inst6502_cpx_zp:
 2550 D1:C90B ED 33 03 -      ADDCYC(3)
 2551 D1:C90E 7E -  -  -      ld  a,(hl)
 2552 D1:C90F 01 00 38 D0     ld  bc,ZEROPAGE
 2553 D1:C913 81 -  -  -      add a,c
 2554 D1:C914 4F -  -  -      ld  c,a
 2555 D1:C915 0A -  -  -      ld  a,(bc)
 2556 D1:C916 47 -  -  -      ld  b,a
 2557 D1:C917 DD 7E 01 -      ld  a,(ix+REGX)
 2558 D1:C91A 90 -  -  -      sub a,b
 2559 D1:C91B 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2560 D1:C91C DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2561 D1:C936 C3 69 B4 D1     jp i6502NextLoad
 2562 D1:C93A -  -  -  -  ;absolute	CPX oper	EC	3	4  
 2563 D1:C93A -  -  -  -  inst6502_cpx_abs:
 2564 D1:C93A ED 33 04 -      ADDCYC(4)
 2565 D1:C93D CD F4 B4 D1     call subroutine6502_abs_split_start
 2566 D1:C941 E5 -  -  -      push hl
 2567 D1:C942 50 -  -  -          ld  d,b
 2568 D1:C943 79 -  -  -          ld  a,c
 2569 D1:C944 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2570 D1:C946 ED 4C -  -          mlt bc
 2571 D1:C948 21 00 40 D0         ld  hl,PAGETABLE
 2572 D1:C94C 09 -  -  -          add hl,bc
 2573 D1:C94D ED 27 -  -          ld  hl,(hl)
 2574 D1:C94F 06 00 -  -          ld  b,0
 2575 D1:C951 4F -  -  -          ld  c,a
 2576 D1:C952 09 -  -  -          add hl,bc   ;full address
 2577 D1:C953 CD E9 AD D1         READ_ACCESS
 2578 D1:C957 E1 -  -  -      pop hl
 2579 D1:C958 47 -  -  -      ld  b,a
 2580 D1:C959 DD 7E 01 -      ld  a,(ix+REGX)
 2581 D1:C95C 90 -  -  -      sub a,b
 2582 D1:C95D 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2583 D1:C95E DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2584 D1:C978 C3 69 B4 D1     jp i6502NextLoad
 2585 D1:C97C -  -  -  -  
 2586 D1:C97C -  -  -  -  ;-----------------------------------------------------------------------------
 2587 D1:C97C -  -  -  -  ;CPY - Compare Memory and Index Y
 2588 D1:C97C -  -  -  -  ;Y - M
 2589 D1:C97C -  -  -  -  ;N	Z	C	I	D	V
 2590 D1:C97C -  -  -  -  ;+	+	+	-	-	-
 2591 D1:C97C -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2592 D1:C97C -  -  -  -  ;immediate	CPY #oper	C0	2	2  
 2593 D1:C97C -  -  -  -  inst6502_cpy_imm:
 2594 D1:C97C ED 33 02 -      ADDCYC(2)
 2595 D1:C97F DD 7E 02 -      ld  a,(ix+REGY)
 2596 D1:C982 96 -  -  -      sub a,(hl)
 2597 D1:C983 3F -  -  -      ccf
 2598 D1:C984 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2599 D1:C99E C3 69 B4 D1     jp  i6502NextLoad
 2600 D1:C9A2 -  -  -  -  
 2601 D1:C9A2 -  -  -  -  ;zeropage	CPY oper	C4	2	3  
 2602 D1:C9A2 -  -  -  -  inst6502_cpy_zp:
 2603 D1:C9A2 ED 33 03 -      ADDCYC(3)
 2604 D1:C9A5 7E -  -  -      ld  a,(hl)
 2605 D1:C9A6 01 00 38 D0     ld  bc,ZEROPAGE
 2606 D1:C9AA 81 -  -  -      add a,c
 2607 D1:C9AB 4F -  -  -      ld  c,a
 2608 D1:C9AC 0A -  -  -      ld  a,(bc)
 2609 D1:C9AD 47 -  -  -      ld  b,a
 2610 D1:C9AE DD 7E 02 -      ld  a,(ix+REGY)
 2611 D1:C9B1 90 -  -  -      sub a,b
 2612 D1:C9B2 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2613 D1:C9B3 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2614 D1:C9CD C3 69 B4 D1     jp i6502NextLoad
 2615 D1:C9D1 -  -  -  -  
 2616 D1:C9D1 -  -  -  -  ;absolute	CPY oper	CC	3	4  
 2617 D1:C9D1 -  -  -  -  inst6502_cpy_abs:
 2618 D1:C9D1 ED 33 04 -      ADDCYC(4)
 2619 D1:C9D4 CD F4 B4 D1     call subroutine6502_abs_split_start
 2620 D1:C9D8 E5 -  -  -      push hl
 2621 D1:C9D9 50 -  -  -          ld  d,b
 2622 D1:C9DA 79 -  -  -          ld  a,c
 2623 D1:C9DB 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2624 D1:C9DD ED 4C -  -          mlt bc
 2625 D1:C9DF 21 00 40 D0         ld  hl,PAGETABLE
 2626 D1:C9E3 09 -  -  -          add hl,bc
 2627 D1:C9E4 ED 27 -  -          ld  hl,(hl)
 2628 D1:C9E6 06 00 -  -          ld  b,0
 2629 D1:C9E8 4F -  -  -          ld  c,a
 2630 D1:C9E9 09 -  -  -          add hl,bc   ;full address
 2631 D1:C9EA CD E9 AD D1         READ_ACCESS
 2632 D1:C9EE E1 -  -  -      pop hl
 2633 D1:C9EF 47 -  -  -      ld  b,a
 2634 D1:C9F0 DD 7E 02 -      ld  a,(ix+REGY)
 2635 D1:C9F3 90 -  -  -      sub a,b
 2636 D1:C9F4 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2637 D1:C9F5 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2638 D1:CA0F C3 69 B4 D1     jp i6502NextLoad
 2639 D1:CA13 -  -  -  -  
 2640 D1:CA13 -  -  -  -  
 2641 D1:CA13 -  -  -  -  ;-----------------------------------------------------------------------------
 2642 D1:CA13 -  -  -  -  ;-----------------------------------------------------------------------------
 2643 D1:CA13 -  -  -  -  ;-----------------------------------------------------------------------------
 2644 D1:CA13 -  -  -  -  ;Instructions by type: Conditional Branch Instructions
 2645 D1:CA13 -  -  -  -  
 2646 D1:CA13 -  -  -  -  ;branch on C=0
 2647 D1:CA13 -  -  -  -  ;relative	BCC oper	90	2	2**
 2648 D1:CA13 -  -  -  -  inst6502_bcc:
 2649 D1:CA13 ED 33 02 -      ADDCYC(2)
 2650 D1:CA16 DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2651 D1:CA1A C2 69 B4 D1     jp  nz,i6502NextLoad
 2652 D1:CA1E C3 0D B6 D1     jp  subroutine6502_take_branch
 2653 D1:CA22 -  -  -  -  
 2654 D1:CA22 -  -  -  -  ;branch on C=1
 2655 D1:CA22 -  -  -  -  ;relative	BCS oper	B0	2	2**
 2656 D1:CA22 -  -  -  -  inst6502_bcs:
 2657 D1:CA22 ED 33 02 -      ADDCYC(2)
 2658 D1:CA25 DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2659 D1:CA29 CA 69 B4 D1     jp  z,i6502NextLoad
 2660 D1:CA2D C3 0D B6 D1     jp  subroutine6502_take_branch
 2661 D1:CA31 -  -  -  -  
 2662 D1:CA31 -  -  -  -  ;branch on Z=1
 2663 D1:CA31 -  -  -  -  ;relative	BEQ oper	F0	2	2**
 2664 D1:CA31 -  -  -  -  inst6502_beq:
 2665 D1:CA31 ED 33 02 -      ADDCYC(2)
 2666 D1:CA34 DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2667 D1:CA38 CA 69 B4 D1     jp  z,i6502NextLoad
 2668 D1:CA3C C3 0D B6 D1     jp  subroutine6502_take_branch
 2669 D1:CA40 -  -  -  -  
 2670 D1:CA40 -  -  -  -  ;branch on N=1
 2671 D1:CA40 -  -  -  -  ;relative	BMI oper	30	2	2**
 2672 D1:CA40 -  -  -  -  inst6502_bmi:
 2673 D1:CA40 ED 33 02 -      ADDCYC(2)
 2674 D1:CA43 DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2675 D1:CA47 CA 69 B4 D1     jp  z,i6502NextLoad
 2676 D1:CA4B C3 0D B6 D1     jp  subroutine6502_take_branch
 2677 D1:CA4F -  -  -  -  
 2678 D1:CA4F -  -  -  -  
 2679 D1:CA4F -  -  -  -  ;branch on Z=0
 2680 D1:CA4F -  -  -  -  ;relative	BNE oper	D0	2	2**
 2681 D1:CA4F -  -  -  -  inst6502_bne:
 2682 D1:CA4F ED 33 02 -      ADDCYC(2)
 2683 D1:CA52 DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2684 D1:CA56 C2 69 B4 D1     jp  nz,i6502NextLoad
 2685 D1:CA5A C3 0D B6 D1     jp  subroutine6502_take_branch
 2686 D1:CA5E -  -  -  -  
 2687 D1:CA5E -  -  -  -  ;branch on N=0
 2688 D1:CA5E -  -  -  -  ;relative	BPL oper	10	2	2**
 2689 D1:CA5E -  -  -  -  inst6502_bpl:
 2690 D1:CA5E ED 33 02 -      ADDCYC(2)
 2691 D1:CA61 DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2692 D1:CA65 C2 69 B4 D1     jp  nz,i6502NextLoad
 2693 D1:CA69 C3 0D B6 D1     jp  subroutine6502_take_branch
 2694 D1:CA6D -  -  -  -  
 2695 D1:CA6D -  -  -  -  ;branch on V=0
 2696 D1:CA6D -  -  -  -  ;relative	BVC oper	50	2	2**
 2697 D1:CA6D -  -  -  -  inst6502_bvc:
 2698 D1:CA6D ED 33 02 -      ADDCYC(2)
 2699 D1:CA70 DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2700 D1:CA74 C2 69 B4 D1     jp  nz,i6502NextLoad
 2701 D1:CA78 C3 0D B6 D1     jp  subroutine6502_take_branch
 2702 D1:CA7C -  -  -  -  
 2703 D1:CA7C -  -  -  -  ;branch on V=1
 2704 D1:CA7C -  -  -  -  ;relative	BVS oper	70	2	2**
 2705 D1:CA7C -  -  -  -  inst6502_bvs:
 2706 D1:CA7C ED 33 02 -      ADDCYC(2)
 2707 D1:CA7F DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2708 D1:CA83 CA 69 B4 D1     jp  z,i6502NextLoad
 2709 D1:CA87 C3 0D B6 D1     jp  subroutine6502_take_branch
 2710 D1:CA8B -  -  -  -  
 2711 D1:CA8B -  -  -  -  ;-----------------------------------------------------------------------------
 2712 D1:CA8B -  -  -  -  ;-----------------------------------------------------------------------------
 2713 D1:CA8B -  -  -  -  ;-----------------------------------------------------------------------------
 2714 D1:CA8B -  -  -  -  ;Instructions by type: Interrupts
 2715 D1:CA8B -  -  -  -  
 2716 D1:CA8B -  -  -  -  ;BRK - Force Break
 2717 D1:CA8B -  -  -  -  ;BRK initiates a software interrupt similar to a hardware
 2718 D1:CA8B -  -  -  -  ;interrupt (IRQ). The return address pushed to the stack is
 2719 D1:CA8B -  -  -  -  ;PC+2, providing an extra byte of spacing for a break mark
 2720 D1:CA8B -  -  -  -  ;(identifying a reason for the break.)
 2721 D1:CA8B -  -  -  -  ;The status register will be pushed to the stack with the break
 2722 D1:CA8B -  -  -  -  ;flag set to 1. However, when retrieved during RTI or by a PLP
 2723 D1:CA8B -  -  -  -  ;instruction, the break flag will be ignored.
 2724 D1:CA8B -  -  -  -  ;The interrupt disable flag is not set automatically.
 2725 D1:CA8B -  -  -  -  ;
 2726 D1:CA8B -  -  -  -  ;interrupt,             N	Z	C	I	D	V
 2727 D1:CA8B -  -  -  -  ;push PC+2, push SR     -	-	-	1	-	-
 2728 D1:CA8B -  -  -  -  ;implied	BRK	00	1	7  
 2729 D1:CA8B -  -  -  -  inst6502_brk:
 2730 D1:CA8B ED 33 07 -      ADDCYC(7)
 2731 D1:CA8E 21 00 39 D0     ld  hl,STACKBASE
 2732 D1:CA92 DD 6E 03 -      ld  L,(ix+REGSP)
 2733 D1:CA95 52 DD 17 05     ld.s de,(ix+REGPC)
 2734 D1:CA99 13 -  -  -      inc de      ;that extra spacer.
 2735 D1:CA9A 72 -  -  -      ld  (hl),d
 2736 D1:CA9B 2D -  -  -      dec L
 2737 D1:CA9C 73 -  -  -      ld  (hl),e
 2738 D1:CA9D 2D -  -  -      dec L
 2739 D1:CA9E DD 7E 04 -      ld  a,(ix+REGSR)
 2740 D1:CAA1 CB D7 -  -      set SF_INT,a
 2741 D1:CAA3 77 -  -  -      ld  (hl),a
 2742 D1:CAA4 2D -  -  -      dec L
 2743 D1:CAA5 DD 75 03 -      ld  (ix+REGSP),L
 2744 D1:CAA8 B7 -  -  -      WAS_NMI_TRIGGERED
 2745 D1:CAA9 01 FE 00 00     ld  bc,$FE  ;IRQ vector
 2746 D1:CAAD 28 04 -  -      jr  z,+_
 2747 D1:CAAF 01 FA 00 00     ld  bc,$FA  ;NMI vector, if NMI is hijacking this instruction.
 2748 D1:CAB3 21 F4 4B D0 _:  ld  hl,(BASETABLE_STRIDE*$FF)+PAGETABLE
 2749 D1:CAB7 ED 27 -  -      ld  hl,(hl)
 2750 D1:CAB9 09 -  -  -      add hl,bc
 2751 D1:CABA ED 17 -  -      ld  de,(hl)
 2752 D1:CABC 52 DD 1F 05     ld.s (ix+REGPC),de
 2753 D1:CAC0 C3 53 B4 D1     jp  i6502FirstLoad
 2754 D1:CAC4 -  -  -  -  
 2755 D1:CAC4 -  -  -  -  ;RTI - Return from Interrupt
 2756 D1:CAC4 -  -  -  -  ;The status register is pulled with the break flag
 2757 D1:CAC4 -  -  -  -  ;and bit 5 ignored. Then PC is pulled from the stack.
 2758 D1:CAC4 -  -  -  -  ;pull SR, pull PC      N Z C I D V
 2759 D1:CAC4 -  -  -  -  ;                      from stack
 2760 D1:CAC4 -  -  -  -  ;implied	RTI	40	1	6  
 2761 D1:CAC4 -  -  -  -  inst6502_rti:
 2762 D1:CAC4 21 00 39 D0     ld  hl,STACKBASE
 2763 D1:CAC8 DD 6E 03 -      ld  l,(ix+REGSP)
 2764 D1:CACB 2C -  -  -      inc l
 2765 D1:CACC 7E -  -  -      ld  a,(hl)
 2766 D1:CACD 2C -  -  -      inc l
 2767 D1:CACE 5E -  -  -      ld  e,(hl)
 2768 D1:CACF 2C -  -  -      inc l
 2769 D1:CAD0 56 -  -  -      ld  d,(hl)
 2770 D1:CAD1 DD 75 03 -      ld  (ix+REGSP),l
 2771 D1:CAD4 52 DD 1F 05     ld.s (ix+REGPC),de
 2772 D1:CAD8 DD 46 04 -      ld  b,(ix+REGSR)
 2773 D1:CADB A8 -  -  -      xor a,b
 2774 D1:CADC E6 DF -  -      and a,%11011111
 2775 D1:CADE A8 -  -  -      xor a,b
 2776 D1:CADF DD 77 04 -      ld  (ix+REGSR),a
 2777 D1:CAE2 ED 33 06 -      ADDCYC(6)
 2778 D1:CAE5 C3 53 B4 D1     jp  i6502FirstLoad
 2779 D1:CAE9 -  -  -  -  
 2780 D1:CAE9 -  -  -  -  
 2781 D1:CAE9 -  -  -  -  
 2782 D1:CAE9 -  -  -  -  ;-----------------------------------------------------------------------------
 2783 D1:CAE9 -  -  -  -  ;-----------------------------------------------------------------------------
 2784 D1:CAE9 -  -  -  -  ;-----------------------------------------------------------------------------
 2785 D1:CAE9 -  -  -  -  ;Instructions by type: Jumps and Subroutines
 2786 D1:CAE9 -  -  -  -  
 2787 D1:CAE9 -  -  -  -  ;absolute	JMP oper	4C	3	3  
 2788 D1:CAE9 -  -  -  -  inst6052_jmp_abs:
 2789 D1:CAE9 7E -  -  -      ld  a,(hl)
 2790 D1:CAEA 23 -  -  -      inc hl
 2791 D1:CAEB 1C -  -  -      inc e
 2792 D1:CAEC 20 0F -  -      jr  nz,+_
 2793 D1:CAEE DD 56 06 -      ld  d,(ix+REGPC+1)
 2794 D1:CAF1 14 -  -  -      inc d
 2795 D1:CAF2 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2796 D1:CAF4 ED 5C -  -      mlt de
 2797 D1:CAF6 21 00 40 D0     ld  hl,PAGETABLE
 2798 D1:CAFA 19 -  -  -      add hl,de
 2799 D1:CAFB ED 27 -  -      ld  hl,(hl)
 2800 D1:CAFD DD 77 05 -  _:  ld  (ix+REGPC+0),a
 2801 D1:CB00 7E -  -  -      ld  a,(hl)
 2802 D1:CB01 DD 77 06 -      ld  (ix+REGPC+1),a
 2803 D1:CB04 ED 33 03 -      ADDCYC(3)
 2804 D1:CB07 C3 53 B4 D1     jp i6502FirstLoad
 2805 D1:CB0B -  -  -  -  
 2806 D1:CB0B -  -  -  -  
 2807 D1:CB0B -  -  -  -  ;Note: In earlier 6502 implementations, cross-page reads on indirect is bugged.
 2808 D1:CB0B -  -  -  -  ;   The end effect would be that inst6502_jmp_indir_splitread would wrap around
 2809 D1:CB0B -  -  -  -  ;   to the start of the current page rather than try to read the next page.
 2810 D1:CB0B -  -  -  -  ;indirect	JMP (oper)	6C	3	5  
 2811 D1:CB0B -  -  -  -  inst6502_jmp_indir:
 2812 D1:CB0B ED 33 05 -      ADDCYC(5)
 2813 D1:CB0E -  -  -  -      ;Doing much the same as abs_split_start below, except with fewer things
 2814 D1:CB0E -  -  -  -      ;because we don't need to preserve any of the other stuff.
 2815 D1:CB0E 4E -  -  -      ld  c,(hl)
 2816 D1:CB0F 23 -  -  -      inc hl
 2817 D1:CB10 1C -  -  -      inc e
 2818 D1:CB11 20 0F -  -      jr  nz,+_
 2819 D1:CB13 DD 56 06 -      ld  d,(ix+REGPC+1)
 2820 D1:CB16 14 -  -  -      inc d
 2821 D1:CB17 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2822 D1:CB19 ED 5C -  -      mlt de
 2823 D1:CB1B 21 00 40 D0     ld  hl,PAGETABLE
 2824 D1:CB1F 19 -  -  -      add hl,de
 2825 D1:CB20 ED 27 -  -      ld  hl,(hl)
 2826 D1:CB22 46 -  -  -  _:  ld  b,(hl)
 2827 D1:CB23 79 -  -  -      ld  a,c
 2828 D1:CB24 0C -  -  -      inc c   ;check if there will be a split read.
 2829 D1:CB25 0E 0C -  -      ld  c,BASETABLE_STRIDE  ;Flags not affected
 2830 D1:CB27 ED 4C -  -      mlt bc                  ;Flags not affected
 2831 D1:CB29 21 00 40 D0     ld  hl,PAGETABLE        ;Flags not affected
 2832 D1:CB2D CA 42 CB D1     jp  z,inst6502_jmp_indir_splitRead
 2833 D1:CB31 09 -  -  -      add hl,bc
 2834 D1:CB32 ED 27 -  -      ld  hl,(hl)
 2835 D1:CB34 06 00 -  -      ld  b,0
 2836 D1:CB36 4F -  -  -      ld  c,a
 2837 D1:CB37 09 -  -  -      add hl,bc
 2838 D1:CB38 ED 27 -  -      ld  hl,(hl)
 2839 D1:CB3A 52 DD 2F 05     ld.s (ix+REGPC),hl
 2840 D1:CB3E C3 53 B4 D1     jp  i6502FirstLoad
 2841 D1:CB42 -  -  -  -  inst6502_jmp_indir_splitRead:
 2842 D1:CB42 09 -  -  -      add hl,bc
 2843 D1:CB43 ED 27 -  -      ld  hl,(hl)
 2844 D1:CB45 7E -  -  -      ld  a,(hl)  ;high byte
 2845 D1:CB46 01 FF 00 00     ld  bc,255
 2846 D1:CB4A 09 -  -  -      add hl,bc
 2847 D1:CB4B 4E -  -  -      ld  c,(hl)  ;low byte
 2848 D1:CB4C 47 -  -  -      ld  b,a
 2849 D1:CB4D 52 DD 0F 05     ld.s (ix+REGPC),bc
 2850 D1:CB51 C3 53 B4 D1     jp  i6502FirstLoad
 2851 D1:CB55 -  -  -  -  
 2852 D1:CB55 -  -  -  -  
 2853 D1:CB55 -  -  -  -  
 2854 D1:CB55 -  -  -  -  
 2855 D1:CB55 -  -  -  -  
 2856 D1:CB55 -  -  -  -  ;absolute	JSR oper	20	3	6  
 2857 D1:CB55 -  -  -  -  inst6502_jsr:
 2858 D1:CB55 DD 56 06 -      ld  d,(ix+REGPC+1)
 2859 D1:CB58 4E -  -  -      ld  c,(hl)
 2860 D1:CB59 23 -  -  -      inc hl
 2861 D1:CB5A 1C -  -  -      inc e
 2862 D1:CB5B 20 10 -  -      jr  nz,+_
 2863 D1:CB5D 14 -  -  -      inc d
 2864 D1:CB5E 7A -  -  -      ld  a,d
 2865 D1:CB5F 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2866 D1:CB61 ED 5C -  -      mlt de
 2867 D1:CB63 21 00 40 D0     ld  hl,PAGETABLE
 2868 D1:CB67 19 -  -  -      add hl,de
 2869 D1:CB68 ED 27 -  -      ld  hl,(hl)
 2870 D1:CB6A 57 -  -  -      ld  d,a
 2871 D1:CB6B 1E 00 -  -      ld  e,0
 2872 D1:CB6D 46 -  -  -  _:  ld  b,(hl)
 2873 D1:CB6E -  -  -  -      ;push de to 6502stack
 2874 D1:CB6E 21 00 39 D0     ld  hl,STACKBASE
 2875 D1:CB72 DD 6E 03 -      ld  l,(ix+REGSP)
 2876 D1:CB75 72 -  -  -      ld  (hl),d
 2877 D1:CB76 2D -  -  -      dec l
 2878 D1:CB77 73 -  -  -      ld  (hl),e
 2879 D1:CB78 2D -  -  -      dec l
 2880 D1:CB79 DD 75 03 -      ld  (ix+REGSP),l
 2881 D1:CB7C 52 DD 0F 05     ld.s (ix+REGPC),bc
 2882 D1:CB80 ED 33 06 -      ADDCYC(6)
 2883 D1:CB83 C3 53 B4 D1     jp  i6502FirstLoad
 2884 D1:CB87 -  -  -  -  
 2885 D1:CB87 -  -  -  -  ;implied	RTS	60	1	6
 2886 D1:CB87 -  -  -  -  inst6502_rts:
 2887 D1:CB87 21 00 39 D0     ld  hl,STACKBASE
 2888 D1:CB8B DD 6E 03 -      ld  l,(ix+REGSP)
 2889 D1:CB8E 2C -  -  -      inc l
 2890 D1:CB8F 5E -  -  -      ld  e,(hl)
 2891 D1:CB90 2C -  -  -      inc l
 2892 D1:CB91 56 -  -  -      ld  d,(hl)
 2893 D1:CB92 DD 75 03 -      ld  (ix+REGSP),l
 2894 D1:CB95 13 -  -  -      inc de
 2895 D1:CB96 52 DD 1F 05     ld.s (ix+REGPC),de
 2896 D1:CB9A ED 33 06 -      ADDCYC(6)
 2897 D1:CB9D C3 53 B4 D1     jp  i6502FirstLoad
 2898 D1:CBA1 -  -  -  -  
 2899 D1:CBA1 -  -  -  -  
 2900 D1:CBA1 -  -  -  -  ;-----------------------------------------------------------------------------
 2901 D1:CBA1 -  -  -  -  ;-----------------------------------------------------------------------------
 2902 D1:CBA1 -  -  -  -  ;-----------------------------------------------------------------------------
 2903 D1:CBA1 -  -  -  -  ;Instructions by type: Miscellaneous
 2904 D1:CBA1 -  -  -  -  ;BIT - Test Bits in Memory with Accumulator
 2905 D1:CBA1 -  -  -  -  ;
 2906 D1:CBA1 -  -  -  -  ;bits 7 and 6 of operand are transfered to bit 7 and 6 of SR (N,V);
 2907 D1:CBA1 -  -  -  -  ;the zero-flag is set according to the result of the operand AND
 2908 D1:CBA1 -  -  -  -  ;the accumulator (set, if the result is zero, unset otherwise).
 2909 D1:CBA1 -  -  -  -  ;This allows a quick check of a few bits at once without affecting
 2910 D1:CBA1 -  -  -  -  ;any of the registers, other than the status register (SR).
 2911 D1:CBA1 -  -  -  -  
 2912 D1:CBA1 -  -  -  -  ;A AND M -> Z, M7 -> N, M6 -> V             N	Z	C	I	D	V
 2913 D1:CBA1 -  -  -  -  ;                                           M7	+	-	-	-	M6
 2914 D1:CBA1 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2915 D1:CBA1 -  -  -  -  ;zeropage	BIT oper	24	2	3  
 2916 D1:CBA1 -  -  -  -  inst6502_bit_zp:
 2917 D1:CBA1 ED 33 03 -      ADDCYC(3)
 2918 D1:CBA4 7E -  -  -      ld  a,(hl)
 2919 D1:CBA5 01 00 38 D0     ld  bc,ZEROPAGE
 2920 D1:CBA9 81 -  -  -      add a,c
 2921 D1:CBAA 4F -  -  -      ld  c,a
 2922 D1:CBAB 0A -  -  -      ld  a,(bc)
 2923 D1:CBAC 4F -  -  -      ld  c,a
 2924 D1:CBAD DD A6 00 -  _:  and a,(ix+REGA)
 2925 D1:CBB0 79 -  -  -      ld  a,c     ;discard result, get bits from OPERANDs
 2926 D1:CBB1 CB 8F -  -      res SF_ZERO,a
 2927 D1:CBB3 20 02 -  -      jr  nz,$+4
 2928 D1:CBB5 CB CF -  -      set SF_ZERO,a
 2929 D1:CBB7 DD 46 04 -      ld  b,(ix+REGSR)    ;keep bits in flag other than NZ and V
 2930 D1:CBBA A8 -  -  -      xor a,b
 2931 D1:CBBB E6 C2 -  -      and a,%11000010     ;1=keepA, 0=discardA,keepB
 2932 D1:CBBD A8 -  -  -      xor a,b
 2933 D1:CBBE DD 77 04 -      ld  (ix+REGSR),a
 2934 D1:CBC1 C3 69 B4 D1     jp  i6502NextLoad
 2935 D1:CBC5 -  -  -  -  
 2936 D1:CBC5 -  -  -  -  ;absolute	BIT oper	2C	3	4  
 2937 D1:CBC5 -  -  -  -  inst6502_bit_abs:
 2938 D1:CBC5 ED 33 04 -      ADDCYC(4)
 2939 D1:CBC8 CD F4 B4 D1     call subroutine6502_abs_split_start
 2940 D1:CBCC E5 -  -  -      push hl
 2941 D1:CBCD 50 -  -  -          ld  d,b
 2942 D1:CBCE 79 -  -  -          ld  a,c
 2943 D1:CBCF 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2944 D1:CBD1 ED 4C -  -          mlt bc
 2945 D1:CBD3 21 00 40 D0         ld  hl,PAGETABLE
 2946 D1:CBD7 09 -  -  -          add hl,bc
 2947 D1:CBD8 ED 27 -  -          ld  hl,(hl)
 2948 D1:CBDA 06 00 -  -          ld  b,0
 2949 D1:CBDC 4F -  -  -          ld  c,a
 2950 D1:CBDD 09 -  -  -          add hl,bc   ;full address
 2951 D1:CBDE CD E9 AD D1         READ_ACCESS
 2952 D1:CBE2 4F -  -  -          ld  c,a
 2953 D1:CBE3 E1 -  -  -      pop hl
 2954 D1:CBE4 18 C7 -  -      jr  -_    
 2955 D1:CBE6 -  -  -  -  
 2956 D1:CBE6 -  -  -  -  ;NOP - No Operation
 2957 D1:CBE6 -  -  -  -  ;implied	NOP	EA	1	2  
 2958 D1:CBE6 -  -  -  -  inst6502_nop:
 2959 D1:CBE6 ED 33 02 -      ADDCYC(2)
 2960 D1:CBE9 C3 82 B4 D1     jp  i6502FinishLoad
 2961 D1:CBED -  -  -  -  
 2962 D1:CBED -  -  -  -  
 2963 D1:CBED -  -  -  -  
 2964 D1:CBED -  -  -  -  ;##############################################################################
 2965 D1:CBED -  -  -  -  ;##############################################################################
 2966 D1:CBED -  -  -  -  ;##############################################################################
 2967 D1:CBED -  -  -  -  ;##-----#-#####-#####-----##---###---##-########-----#--##-##---#-----#----####
 2968 D1:CBED -  -  -  -  ;####-###-#####-#####-#####-#####-###-#-##########-###--##-#-######-###-###-###
 2969 D1:CBED -  -  -  -  ;####-###-#####-#####---###-##--#-----#-##########-###-#-#-##---###-###-----###
 2970 D1:CBED -  -  -  -  ;####-###-#####-#####-#####-###-#-###-#-##########-###-##--#####-##-###-##-####
 2971 D1:CBED -  -  -  -  ;##-----#-----#-----#-----##----#-###-#-----####-----#-##--#----###-###-###-#-#
 2972 D1:CBED -  -  -  -  ;##############################################################################
 2973 D1:CBED -  -  -  -  ;##############################################################################
 2974 D1:CBED -  -  -  -  ;##############################################################################
 2975 D1:CBED -  -  -  -  ;Instructions by type: Illegal Instructions
 2976 D1:CBED -  -  -  -  
 2977 D1:CBED -  -  -  -  ;NOP - No operations. All the no-operations. Even the ones that are linked
 2978 D1:CBED -  -  -  -  ;to the machinery that operates an addressing mode, but does nothing with it.
 2979 D1:CBED -  -  -  -  ;A whole lotta nothing.
 2980 D1:CBED -  -  -  -  
 2981 D1:CBED -  -  -  -  ;Bytes:1, Cycles:2, Opcodes: 1A, 3A, 5A, 7A, DA, FA
 2982 D1:CBED -  -  -  -  inst6502_nop_implied:
 2983 D1:CBED ED 33 02 -      ADDCYC(2)
 2984 D1:CBF0 C3 82 B4 D1     jp  i6502FinishLoad
 2985 D1:CBF4 -  -  -  -  
 2986 D1:CBF4 -  -  -  -  ;Bytes:2, Cycles:2, Opcodes: 80, 82, 89, C2, E2
 2987 D1:CBF4 -  -  -  -  inst6502_nop_imm:
 2988 D1:CBF4 ED 33 02 -      ADDCYC(2)
 2989 D1:CBF7 C3 69 B4 D1     jp  i6502NextLoad
 2990 D1:CBFB -  -  -  -  
 2991 D1:CBFB -  -  -  -  ;Bytes:2, Cycles:3, Opcodes: 04, 44, 64
 2992 D1:CBFB -  -  -  -  inst6502_nop_zp:
 2993 D1:CBFB ED 33 03 -      ADDCYC(3)
 2994 D1:CBFE C3 69 B4 D1     jp  i6502NextLoad
 2995 D1:CC02 -  -  -  -  
 2996 D1:CC02 -  -  -  -  ;Bytes:2, Cycles:4, Opcodes: 14, 34, 54, 74, D4, F4
 2997 D1:CC02 -  -  -  -  inst6502_nop_zpx:
 2998 D1:CC02 ED 33 04 -      ADDCYC(4)
 2999 D1:CC05 C3 69 B4 D1     jp  i6502NextLoad
 3000 D1:CC09 -  -  -  -  
 3001 D1:CC09 -  -  -  -  ;Bytes:3, Cycles:4, Opcode: 0C
 3002 D1:CC09 -  -  -  -  inst6502_nop_abs:
 3003 D1:CC09 ED 33 04 -      ADDCYC(4)
 3004 D1:CC0C CD F4 B4 D1     call subroutine6502_abs_split_start
 3005 D1:CC10 E5 -  -  -      push hl
 3006 D1:CC11 CD E9 AD D1         READ_ACCESS
 3007 D1:CC15 E1 -  -  -      pop hl
 3008 D1:CC16 C3 69 B4 D1     jp  i6502NextLoad
 3009 D1:CC1A -  -  -  -  
 3010 D1:CC1A -  -  -  -  ;Note: This thing latches all over the place but does nothing. All these
 3011 D1:CC1A -  -  -  -  ;READ_ACCESS thingies are in case the ROM wants to clear PPU flags or something
 3012 D1:CC1A -  -  -  -  ;using these instructions. But the one below is noted to do the touchy-feelies
 3013 D1:CC1A -  -  -  -  ;at ABS and (ABS+X)&0xFF
 3014 D1:CC1A -  -  -  -  ;Bytes:3, Cycles:4*, Opcodes: 1C, 3C, 5C, 7C, DC, FC
 3015 D1:CC1A -  -  -  -  inst6502_nop_absx:
 3016 D1:CC1A ED 33 04 -      ADDCYC(4)
 3017 D1:CC1D CD 15 B5 D1     PUSH_ABSXSPLIT
 3018 D1:CC21 CD E9 AD D1         READ_ACCESS
 3019 D1:CC25 E1 -  -  -      pop hl
 3020 D1:CC26 C3 69 B4 D1     jp  i6502NextLoad
 3021 D1:CC2A -  -  -  -  
 3022 D1:CC2A -  -  -  -  ;-----------------------------------------------------------------------------
 3023 D1:CC2A -  -  -  -  ;ALR (ASR) - AND oper + LSR
 3024 D1:CC2A -  -  -  -  ;Affects CZN
 3025 D1:CC2A -  -  -  -  
 3026 D1:CC2A -  -  -  -  ;immediate	ALR #oper	4B	2	2 
 3027 D1:CC2A -  -  -  -  inst6502_alr_imm:
 3028 D1:CC2A ED 33 02 -      ADDCYC(2)
 3029 D1:CC2D DD 7E 00 -      ld  a,(ix+REGA)
 3030 D1:CC30 A6 -  -  -      and a,(hl)
 3031 D1:CC31 CB 3F -  -      srl a   ;Must do it this way. A-optimized instr do not affect Z
 3032 D1:CC33 DD 77 00 -      ld  (ix+REGA),a
 3033 D1:CC36 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3034 D1:CC50 C3 69 B4 D1     jp  i6502NextLoad
 3035 D1:CC54 -  -  -  -  
 3036 D1:CC54 -  -  -  -  ;-----------------------------------------------------------------------------
 3037 D1:CC54 -  -  -  -  
 3038 D1:CC54 -  -  -  -  ;ANC [ANC (ANC2)] - AND oper + set Carry as if ASL [ROL]
 3039 D1:CC54 -  -  -  -  
 3040 D1:CC54 -  -  -  -  ;immediate	ANC #oper	0B	2	2 
 3041 D1:CC54 -  -  -  -  ;immediate	ANC #oper	2B	2	2
 3042 D1:CC54 -  -  -  -  instr6502_anc_imm:
 3043 D1:CC54 -  -  -  -  instr6502_anc2_imm:
 3044 D1:CC54 ED 33 02 -      ADDCYC(2)
 3045 D1:CC57 DD 7E 00 -      ld  a,(ix+REGA)
 3046 D1:CC5A A6 -  -  -      and a,(hl)
 3047 D1:CC5B DD 77 00 -      ld  (ix+REGA),a
 3048 D1:CC5E CB 07 -  -      rlc a
 3049 D1:CC60 DD 7E 04 -      ld  a,(ix+REGSR)
 3050 D1:CC63 -  -  -  -      ;A small optimiztion here, letting us merge OPRFLG_C and OPRFLG_N
 3051 D1:CC63 CB 87 -  -      res SF_CARRY,a
 3052 D1:CC65 CB BF -  -      res SF_NEG,a
 3053 D1:CC67 30 04 -  -      jr  nc,+_
 3054 D1:CC69 CB C7 -  -      set SF_CARRY,a
 3055 D1:CC6B CB FF -  -      set SF_NEG,a
 3056 D1:CC6D CB 8F -  -  _:  res SF_ZERO,a
 3057 D1:CC6F 20 02 -  -      jr  nz,$+4
 3058 D1:CC71 CB CF -  -      set SF_ZERO,a
 3059 D1:CC73 DD 77 04 -      ld  (ix+REGSR),a
 3060 D1:CC76 C3 69 B4 D1     jp  i6502NextLoad
 3061 D1:CC7A -  -  -  -  
 3062 D1:CC7A -  -  -  -  ;-----------------------------------------------------------------------------
 3063 D1:CC7A -  -  -  -  
 3064 D1:CC7A -  -  -  -  ;ANE (XAA) - (A OR ??) AND X AND oper -> A
 3065 D1:CC7A -  -  -  -  ;immediate	ANE #oper	8B	2	2  	††
 3066 D1:CC7A -  -  -  -  instr6502_ane_imm:
 3067 D1:CC7A ED 33 02 -      ADDCYC(2)
 3068 D1:CC7D ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3069 D1:CC7F DD B6 00 -      or  a,(ix+REGA)
 3070 D1:CC82 DD A6 01 -      and a,(ix+REGX)
 3071 D1:CC85 A6 -  -  -      and a,(hl)
 3072 D1:CC86 DD 77 00 -      ld  (ix+REGA),a
 3073 D1:CC89 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3074 D1:CC9D C3 69 B4 D1     jp  i6502NextLoad
 3075 D1:CCA1 -  -  -  -  
 3076 D1:CCA1 -  -  -  -  ;-----------------------------------------------------------------------------
 3077 D1:CCA1 -  -  -  -  
 3078 D1:CCA1 -  -  -  -  
 3079 D1:CCA1 -  -  -  -  ;ARR - AND OPER + ROR
 3080 D1:CCA1 -  -  -  -  ;Something hinky is going on with the flags. "This operation involves the adder"
 3081 D1:CCA1 -  -  -  -  ;I need to get a better handle over what that might be.
 3082 D1:CCA1 -  -  -  -  ;CVZN flags affected.
 3083 D1:CCA1 -  -  -  -  ;
 3084 D1:CCA1 -  -  -  -  ;Primary sources reads:
 3085 D1:CCA1 -  -  -  -  ;----------------------
 3086 D1:CCA1 -  -  -  -  ;This operation involves the adder:
 3087 D1:CCA1 -  -  -  -  ;V-flag is set according to (A AND oper) + oper
 3088 D1:CCA1 -  -  -  -  ;The carry is not set, but bit 7 (sign) is exchanged with the carry
 3089 D1:CCA1 -  -  -  -  ;A AND oper, C -> [76543210] -> C
 3090 D1:CCA1 -  -  -  -  ;
 3091 D1:CCA1 -  -  -  -  ;Secondary source reads:
 3092 D1:CCA1 -  -  -  -  ;-----------------------
 3093 D1:CCA1 -  -  -  -  ;Similar to AND #i then ROR A, except sets the flags differently. 
 3094 D1:CCA1 -  -  -  -  ;N and Z are normal, but C is bit 6 and V is bit 6 xor bit 5. 
 3095 D1:CCA1 -  -  -  -  ;A fast way to perform signed division by 4 is: CMP #$80; ARR #$FF; ROR. 
 3096 D1:CCA1 -  -  -  -  ;This can be extended to larger powers of two.
 3097 D1:CCA1 -  -  -  -  
 3098 D1:CCA1 -  -  -  -  ;immediate	ARR #oper	6B	2	2  
 3099 D1:CCA1 -  -  -  -  instr6502_arr_imm:
 3100 D1:CCA1 ED 33 02 -      ADDCYC(2)
 3101 D1:CCA4 DD 7E 00 -      ld  a,(ix+REGA)
 3102 D1:CCA7 A6 -  -  -      and a,(hl)
 3103 D1:CCA8 47 -  -  -      ld  b,a
 3104 D1:CCA9 DD 7E 04 -      ld  a,(ix+REGSR)
 3105 D1:CCAC 4F -  -  -      ld  c,a
 3106 D1:CCAD 0F -  -  -      rrca    ;extract carry. This carry will go into sign bit of result
 3107 D1:CCAE CB B9 -  -      res SF_NEG,c
 3108 D1:CCB0 30 02 -  -      jr  nc,$+4
 3109 D1:CCB2 CB F9 -  -      set SF_NEG,c
 3110 D1:CCB4 CB 18 -  -      rr b
 3111 D1:CCB6 CB 89 -  -      res SF_ZERO,c
 3112 D1:CCB8 20 02 -  -      jr  nz,$+4
 3113 D1:CCBA CB C9 -  -      set SF_ZERO,c
 3114 D1:CCBC DD 70 00 -      ld  (ix+REGA),b
 3115 D1:CCBF 78 -  -  -      ld  a,b
 3116 D1:CCC0 E6 40 -  -      and a,%01000000
 3117 D1:CCC2 CB 81 -  -      res SF_CARRY,c
 3118 D1:CCC4 28 02 -  -      jr  z,$+4
 3119 D1:CCC6 CB C1 -  -      set SF_CARRY,c
 3120 D1:CCC8 0F -  -  -      rrca
 3121 D1:CCC9 EE 20 -  -      xor a,%00100000
 3122 D1:CCCB E6 20 -  -      and a,%00100000
 3123 D1:CCCD CB B1 -  -      res SF_OVER,c
 3124 D1:CCCF 28 02 -  -      jr  z,$+4
 3125 D1:CCD1 CB F1 -  -      set SF_OVER,c
 3126 D1:CCD3 DD 71 04 -      ld  (ix+REGSR),c
 3127 D1:CCD6 -  -  -  -      ;TODO: Figure out a more efficient way to emulate this instruction.
 3128 D1:CCD6 C3 69 B4 D1     jp  i6502NextLoad
 3129 D1:CCDA -  -  -  -  
 3130 D1:CCDA -  -  -  -  ;-----------------------------------------------------------------------------
 3131 D1:CCDA -  -  -  -  ;DCP (DCM) - DEC oper + CMP oper
 3132 D1:CCDA -  -  -  -  ;M-1->M, A-M. Affects CZN
 3133 D1:CCDA -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3134 D1:CCDA -  -  -  -  
 3135 D1:CCDA -  -  -  -  ;zeropage	DCP oper	C7	2	5  	
 3136 D1:CCDA -  -  -  -  inst6502_dcp_zp:
 3137 D1:CCDA ED 33 05 -      ADDCYC(5)
 3138 D1:CCDD 7E -  -  -      ld  a,(hl)
 3139 D1:CCDE 01 00 38 D0     ld  bc,ZEROPAGE
 3140 D1:CCE2 81 -  -  -      add a,c
 3141 D1:CCE3 4F -  -  -      ld  c,a
 3142 D1:CCE4 0A -  -  -      ld  a,(bc)
 3143 D1:CCE5 3D -  -  -      dec a
 3144 D1:CCE6 02 -  -  -      ld  (bc),a
 3145 D1:CCE7 47 -  -  -      ld  b,a
 3146 D1:CCE8 C3 EA B5 D1     jp  subroutine6502_cmp_combined_end
 3147 D1:CCEC -  -  -  -  
 3148 D1:CCEC -  -  -  -  ;zeropage,X	DCP oper,X	D7	2	6  	
 3149 D1:CCEC -  -  -  -  inst6520_dcp_zpx:
 3150 D1:CCEC ED 33 06 -      ADDCYC(6)
 3151 D1:CCEF 7E -  -  -      ld  a,(hl)
 3152 D1:CCF0 01 00 38 D0     ld  bc,ZEROPAGE
 3153 D1:CCF4 81 -  -  -      add a,c
 3154 D1:CCF5 DD 86 01 -      add a,(ix+REGX)
 3155 D1:CCF8 4F -  -  -      ld  c,a
 3156 D1:CCF9 0A -  -  -      ld  a,(bc)
 3157 D1:CCFA 3D -  -  -      dec a
 3158 D1:CCFB 02 -  -  -      ld  (bc),a
 3159 D1:CCFC 47 -  -  -      ld  b,a
 3160 D1:CCFD C3 EA B5 D1     jp  subroutine6502_cmp_combined_end
 3161 D1:CD01 -  -  -  -  
 3162 D1:CD01 -  -  -  -  ;absolute	DCP oper	CF	3	6  	
 3163 D1:CD01 -  -  -  -  inst6502_dcp_abs:
 3164 D1:CD01 ED 33 06 -      ADDCYC(6)
 3165 D1:CD04 CD F4 B4 D1     call subroutine6502_abs_split_start
 3166 D1:CD08 E5 -  -  -      push hl
 3167 D1:CD09 50 -  -  -          ld  d,b
 3168 D1:CD0A 79 -  -  -          ld  a,c
 3169 D1:CD0B 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3170 D1:CD0D ED 4C -  -          mlt bc
 3171 D1:CD0F 21 00 40 D0         ld  hl,PAGETABLE
 3172 D1:CD13 09 -  -  -          add hl,bc
 3173 D1:CD14 ED 27 -  -          ld  hl,(hl)
 3174 D1:CD16 06 00 -  -          ld  b,0
 3175 D1:CD18 4F -  -  -          ld  c,a
 3176 D1:CD19 09 -  -  -          add hl,bc   ;full address
 3177 D1:CD1A CD E9 AD D1         READ_ACCESS
 3178 D1:CD1E 3D -  -  -          dec a
 3179 D1:CD1F 47 -  -  -          ld b,a
 3180 D1:CD20 C5 -  -  -          push bc
 3181 D1:CD21 CD 0C AE D1             WRITE_ACCESS
 3182 D1:CD25 C1 -  -  -          pop bc
 3183 D1:CD26 E1 -  -  -      pop hl
 3184 D1:CD27 C3 EA B5 D1     jp  subroutine6502_cmp_combined_end
 3185 D1:CD2B -  -  -  -  
 3186 D1:CD2B -  -  -  -  ;absolut,X	DCP oper,X	DF	3	7  	
 3187 D1:CD2B -  -  -  -  inst6502_dcp_absx:
 3188 D1:CD2B ED 33 07 -      ADDCYC(7)
 3189 D1:CD2E CD 51 B5 D1     PUSH_ABSXSPLIT_NODEP
 3190 D1:CD32 CD E9 AD D1         READ_ACCESS
 3191 D1:CD36 3D -  -  -          dec a
 3192 D1:CD37 47 -  -  -          ld  b,a
 3193 D1:CD38 C5 -  -  -          push bc
 3194 D1:CD39 CD 0C AE D1             WRITE_ACCESS
 3195 D1:CD3D C1 -  -  -          pop bc
 3196 D1:CD3E E1 -  -  -      pop hl
 3197 D1:CD3F C3 EA B5 D1     jp  subroutine6502_cmp_combined_end
 3198 D1:CD43 -  -  -  -  
 3199 D1:CD43 -  -  -  -  ;absolut,Y	DCP oper,Y	DB	3	7  	
 3200 D1:CD43 -  -  -  -  inst6502_dcp_absy:
 3201 D1:CD43 ED 33 07 -      ADDCYC(7)
 3202 D1:CD46 CD 4C B5 D1     PUSH_ABSYSPLIT_NODEP
 3203 D1:CD4A CD E9 AD D1         READ_ACCESS
 3204 D1:CD4E 3D -  -  -          dec a
 3205 D1:CD4F 47 -  -  -          ld  b,a
 3206 D1:CD50 C5 -  -  -          push bc
 3207 D1:CD51 CD 0C AE D1             WRITE_ACCESS
 3208 D1:CD55 C1 -  -  -          pop bc
 3209 D1:CD56 E1 -  -  -      pop hl
 3210 D1:CD57 C3 EA B5 D1     jp  subroutine6502_cmp_combined_end
 3211 D1:CD5B -  -  -  -  
 3212 D1:CD5B -  -  -  -  ;(indirect,X)	DCP (oper,X)	C3	2	8  	
 3213 D1:CD5B -  -  -  -  inst6502_dcp_indx:
 3214 D1:CD5B ED 33 08 -      ADDCYC(8)
 3215 D1:CD5E E5 -  -  -      push hl
 3216 D1:CD5F 7E -  -  -          ld  a,(hl)
 3217 D1:CD60 21 00 38 D0         ld  hl,ZEROPAGE
 3218 D1:CD64 85 -  -  -          add a,L
 3219 D1:CD65 DD 86 01 -          add a,(ix+REGX)
 3220 D1:CD68 6F -  -  -          ld  L,a
 3221 D1:CD69 7E -  -  -          ld  a,(hl)
 3222 D1:CD6A 2C -  -  -          inc L
 3223 D1:CD6B 56 -  -  -          ld  d,(hl)
 3224 D1:CD6C 42 -  -  -          ld  b,d
 3225 D1:CD6D 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3226 D1:CD6F ED 4C -  -          mlt bc
 3227 D1:CD71 21 00 40 D0         ld  hl,PAGETABLE
 3228 D1:CD75 09 -  -  -          add hl,bc
 3229 D1:CD76 ED 27 -  -          ld  hl,(hl)
 3230 D1:CD78 06 00 -  -          ld  b,0
 3231 D1:CD7A 4F -  -  -          ld  c,a
 3232 D1:CD7B 09 -  -  -          add hl,bc
 3233 D1:CD7C CD E9 AD D1         READ_ACCESS
 3234 D1:CD80 3D -  -  -          dec a
 3235 D1:CD81 47 -  -  -          ld  b,a
 3236 D1:CD82 C5 -  -  -          push bc
 3237 D1:CD83 CD 0C AE D1             WRITE_ACCESS
 3238 D1:CD87 C1 -  -  -          pop bc
 3239 D1:CD88 E1 -  -  -      pop hl
 3240 D1:CD89 C3 EA B5 D1     jp  subroutine6502_cmp_combined_end
 3241 D1:CD8D -  -  -  -  
 3242 D1:CD8D -  -  -  -  ;(indirect),Y	DCP (oper),Y	D3	2	8  
 3243 D1:CD8D -  -  -  -  inst6502_dcp_indy:
 3244 D1:CD8D ED 33 08 -      ADDCYC(8)
 3245 D1:CD90 E5 -  -  -      push hl
 3246 D1:CD91 7E -  -  -          ld  a,(hl)
 3247 D1:CD92 21 00 38 D0         ld  hl,ZEROPAGE
 3248 D1:CD96 85 -  -  -          add a,L
 3249 D1:CD97 6F -  -  -          ld  L,a
 3250 D1:CD98 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3251 D1:CD99 2C -  -  -          inc L
 3252 D1:CD9A DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3253 D1:CD9D 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3254 D1:CD9E 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3255 D1:CDA0 24 -  -  -          inc h
 3256 D1:CDA1 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3257 D1:CDA2 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3258 D1:CDA4 ED 6C -  -          mlt hl          ;23.
 3259 D1:CDA6 01 00 40 D0         ld  bc,PAGETABLE
 3260 D1:CDAA 09 -  -  -          add hl,bc
 3261 D1:CDAB ED 27 -  -          ld  hl,(hl)     ;address get.
 3262 D1:CDAD 01 00 00 00         ld  bc,0
 3263 D1:CDB1 4F -  -  -          ld  c,a
 3264 D1:CDB2 09 -  -  -          add hl,bc       ;Full address get.
 3265 D1:CDB3 CD E9 AD D1         READ_ACCESS
 3266 D1:CDB7 3D -  -  -          dec a
 3267 D1:CDB8 47 -  -  -          ld  b,a
 3268 D1:CDB9 C5 -  -  -          push bc
 3269 D1:CDBA CD 0C AE D1             WRITE_ACCESS
 3270 D1:CDBE C1 -  -  -          pop bc
 3271 D1:CDBF E1 -  -  -      pop hl
 3272 D1:CDC0 C3 EA B5 D1     jp  subroutine6502_cmp_combined_end
 3273 D1:CDC4 -  -  -  -  
 3274 D1:CDC4 -  -  -  -  ;-----------------------------------------------------------------------------
 3275 D1:CDC4 -  -  -  -  ;ISC (ISB, INS) - INC oper + SBC oper
 3276 D1:CDC4 -  -  -  -  ;M+1->M, A-M-not(C)->A, affects VCZN
 3277 D1:CDC4 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3278 D1:CDC4 -  -  -  -  
 3279 D1:CDC4 -  -  -  -  
 3280 D1:CDC4 -  -  -  -  
 3281 D1:CDC4 -  -  -  -  ;zeropage	ISC oper	E7	2	5  	
 3282 D1:CDC4 -  -  -  -  inst6502_isc_zp:
 3283 D1:CDC4 ED 33 05 -      ADDCYC(5)
 3284 D1:CDC7 7E -  -  -      ld  a,(hl)
 3285 D1:CDC8 01 00 38 D0     ld  bc,ZEROPAGE
 3286 D1:CDCC 81 -  -  -      add a,c
 3287 D1:CDCD 4F -  -  -      ld  c,a
 3288 D1:CDCE 0A -  -  -      ld  a,(bc)
 3289 D1:CDCF 3C -  -  -      inc a
 3290 D1:CDD0 02 -  -  -      ld  (bc),a
 3291 D1:CDD1 4F -  -  -      ld  c,a
 3292 D1:CDD2 C3 B7 B5 D1     jp  subroutine6502_sbc_combined_end
 3293 D1:CDD6 -  -  -  -  
 3294 D1:CDD6 -  -  -  -  ;zeropage,X	ISC oper,X	F7	2	6  
 3295 D1:CDD6 -  -  -  -  inst6520_isc_zpx:
 3296 D1:CDD6 ED 33 06 -      ADDCYC(6)
 3297 D1:CDD9 7E -  -  -      ld  a,(hl)
 3298 D1:CDDA 01 00 38 D0     ld  bc,ZEROPAGE
 3299 D1:CDDE 81 -  -  -      add a,c
 3300 D1:CDDF DD 86 01 -      add a,(ix+REGX)
 3301 D1:CDE2 4F -  -  -      ld  c,a
 3302 D1:CDE3 0A -  -  -      ld  a,(bc)
 3303 D1:CDE4 3C -  -  -      inc a
 3304 D1:CDE5 02 -  -  -      ld  (bc),a
 3305 D1:CDE6 4F -  -  -      ld  c,a
 3306 D1:CDE7 C3 B7 B5 D1     jp  subroutine6502_sbc_combined_end
 3307 D1:CDEB -  -  -  -  
 3308 D1:CDEB -  -  -  -  ;absolute	ISC oper	EF	3	6  	
 3309 D1:CDEB -  -  -  -  inst6502_isc_abs:
 3310 D1:CDEB ED 33 06 -      ADDCYC(6)
 3311 D1:CDEE CD F4 B4 D1     call subroutine6502_abs_split_start
 3312 D1:CDF2 E5 -  -  -      push hl
 3313 D1:CDF3 50 -  -  -          ld  d,b
 3314 D1:CDF4 79 -  -  -          ld  a,c
 3315 D1:CDF5 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3316 D1:CDF7 ED 4C -  -          mlt bc
 3317 D1:CDF9 21 00 40 D0         ld  hl,PAGETABLE
 3318 D1:CDFD 09 -  -  -          add hl,bc
 3319 D1:CDFE ED 27 -  -          ld  hl,(hl)
 3320 D1:CE00 06 00 -  -          ld  b,0
 3321 D1:CE02 4F -  -  -          ld  c,a
 3322 D1:CE03 09 -  -  -          add hl,bc   ;full address
 3323 D1:CE04 CD E9 AD D1         READ_ACCESS
 3324 D1:CE08 3C -  -  -          inc a
 3325 D1:CE09 47 -  -  -          ld b,a
 3326 D1:CE0A 4F -  -  -          ld c,a
 3327 D1:CE0B C5 -  -  -          push bc
 3328 D1:CE0C CD 0C AE D1             WRITE_ACCESS
 3329 D1:CE10 C1 -  -  -          pop bc
 3330 D1:CE11 E1 -  -  -      pop hl
 3331 D1:CE12 C3 B7 B5 D1     jp  subroutine6502_sbc_combined_end
 3332 D1:CE16 -  -  -  -  
 3333 D1:CE16 -  -  -  -  ;absolut,X	ISC oper,X	FF	3	7  	
 3334 D1:CE16 -  -  -  -  inst6502_isc_absx:
 3335 D1:CE16 ED 33 07 -      ADDCYC(7)
 3336 D1:CE19 CD 51 B5 D1     PUSH_ABSXSPLIT_NODEP
 3337 D1:CE1D CD E9 AD D1         READ_ACCESS
 3338 D1:CE21 3C -  -  -          inc a
 3339 D1:CE22 47 -  -  -          ld  b,a
 3340 D1:CE23 4F -  -  -          ld  c,a
 3341 D1:CE24 C5 -  -  -          push bc
 3342 D1:CE25 CD 0C AE D1             WRITE_ACCESS
 3343 D1:CE29 C1 -  -  -          pop bc
 3344 D1:CE2A E1 -  -  -      pop hl
 3345 D1:CE2B C3 B7 B5 D1     jp  subroutine6502_sbc_combined_end
 3346 D1:CE2F -  -  -  -  
 3347 D1:CE2F -  -  -  -  ;absolut,Y	ISC oper,Y	FB	3	7  	
 3348 D1:CE2F -  -  -  -  inst6502_isc_absy:
 3349 D1:CE2F ED 33 07 -      ADDCYC(7)
 3350 D1:CE32 CD 4C B5 D1     PUSH_ABSYSPLIT_NODEP
 3351 D1:CE36 CD E9 AD D1         READ_ACCESS
 3352 D1:CE3A 3C -  -  -          inc a
 3353 D1:CE3B 47 -  -  -          ld  b,a
 3354 D1:CE3C 4F -  -  -          ld  c,a
 3355 D1:CE3D C5 -  -  -          push bc
 3356 D1:CE3E CD 0C AE D1             WRITE_ACCESS
 3357 D1:CE42 C1 -  -  -          pop bc
 3358 D1:CE43 E1 -  -  -      pop hl
 3359 D1:CE44 C3 B7 B5 D1     jp  subroutine6502_sbc_combined_end
 3360 D1:CE48 -  -  -  -  
 3361 D1:CE48 -  -  -  -  ;(indirect,X)	ISC (oper,X)	E3	2	8  	
 3362 D1:CE48 -  -  -  -  inst6502_isc_indx:
 3363 D1:CE48 ED 33 08 -      ADDCYC(8)
 3364 D1:CE4B E5 -  -  -      push hl
 3365 D1:CE4C 7E -  -  -          ld  a,(hl)
 3366 D1:CE4D 21 00 38 D0         ld  hl,ZEROPAGE
 3367 D1:CE51 85 -  -  -          add a,L
 3368 D1:CE52 DD 86 01 -          add a,(ix+REGX)
 3369 D1:CE55 6F -  -  -          ld  L,a
 3370 D1:CE56 7E -  -  -          ld  a,(hl)
 3371 D1:CE57 2C -  -  -          inc L
 3372 D1:CE58 56 -  -  -          ld  d,(hl)
 3373 D1:CE59 42 -  -  -          ld  b,d
 3374 D1:CE5A 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3375 D1:CE5C ED 4C -  -          mlt bc
 3376 D1:CE5E 21 00 40 D0         ld  hl,PAGETABLE
 3377 D1:CE62 09 -  -  -          add hl,bc
 3378 D1:CE63 ED 27 -  -          ld  hl,(hl)
 3379 D1:CE65 06 00 -  -          ld  b,0
 3380 D1:CE67 4F -  -  -          ld  c,a
 3381 D1:CE68 09 -  -  -          add hl,bc
 3382 D1:CE69 CD E9 AD D1         READ_ACCESS
 3383 D1:CE6D 3C -  -  -          inc a
 3384 D1:CE6E 47 -  -  -          ld  b,a
 3385 D1:CE6F 4F -  -  -          ld  c,a
 3386 D1:CE70 C5 -  -  -          push bc
 3387 D1:CE71 CD 0C AE D1             WRITE_ACCESS
 3388 D1:CE75 C1 -  -  -          pop bc
 3389 D1:CE76 E1 -  -  -      pop hl
 3390 D1:CE77 C3 B7 B5 D1     jp  subroutine6502_sbc_combined_end
 3391 D1:CE7B -  -  -  -  
 3392 D1:CE7B -  -  -  -  ;(indirect),Y	ISC (oper),Y	F3	2	8  
 3393 D1:CE7B -  -  -  -  inst6502_isc_indy:
 3394 D1:CE7B ED 33 08 -      ADDCYC(8)
 3395 D1:CE7E E5 -  -  -      push hl
 3396 D1:CE7F 7E -  -  -          ld  a,(hl)
 3397 D1:CE80 21 00 38 D0         ld  hl,ZEROPAGE
 3398 D1:CE84 85 -  -  -          add a,L
 3399 D1:CE85 6F -  -  -          ld  L,a
 3400 D1:CE86 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3401 D1:CE87 2C -  -  -          inc L
 3402 D1:CE88 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3403 D1:CE8B 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3404 D1:CE8C 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3405 D1:CE8E 24 -  -  -          inc h
 3406 D1:CE8F 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3407 D1:CE90 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3408 D1:CE92 ED 6C -  -          mlt hl          ;23.
 3409 D1:CE94 01 00 40 D0         ld  bc,PAGETABLE
 3410 D1:CE98 09 -  -  -          add hl,bc
 3411 D1:CE99 ED 27 -  -          ld  hl,(hl)     ;address get.
 3412 D1:CE9B 01 00 00 00         ld  bc,0
 3413 D1:CE9F 4F -  -  -          ld  c,a
 3414 D1:CEA0 09 -  -  -          add hl,bc       ;Full address get.
 3415 D1:CEA1 CD E9 AD D1         READ_ACCESS
 3416 D1:CEA5 3C -  -  -          inc a
 3417 D1:CEA6 47 -  -  -          ld  b,a
 3418 D1:CEA7 4F -  -  -          ld  c,a
 3419 D1:CEA8 C5 -  -  -          push bc
 3420 D1:CEA9 CD 0C AE D1             WRITE_ACCESS
 3421 D1:CEAD C1 -  -  -          pop bc
 3422 D1:CEAE E1 -  -  -      pop hl
 3423 D1:CEAF C3 B7 B5 D1     jp  subroutine6502_sbc_combined_end
 3424 D1:CEB3 -  -  -  -  ;-----------------------------------------------------------------------------
 3425 D1:CEB3 -  -  -  -  ;LAS (LAR) - LDA/TSX oper
 3426 D1:CEB3 -  -  -  -  ;M AND SP -> A, X, SP. Affects ZN
 3427 D1:CEB3 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3428 D1:CEB3 -  -  -  -  ;absolut,Y	LAS oper,Y	BB	3	4* 
 3429 D1:CEB3 -  -  -  -  inst6502_las_absy:
 3430 D1:CEB3 ED 33 04 -      ADDCYC(4)
 3431 D1:CEB6 CD 10 B5 D1     PUSH_ABSYSPLIT
 3432 D1:CEBA CD E9 AD D1         READ_ACCESS
 3433 D1:CEBE E1 -  -  -      pop hl
 3434 D1:CEBF DD A6 03 -      and a,(ix+REGSP)
 3435 D1:CEC2 DD 77 00 -      ld  (ix+REGA),A
 3436 D1:CEC5 DD 77 01 -      ld  (ix+REGX),A
 3437 D1:CEC8 DD 77 03 -      ld  (ix+REGSP),A
 3438 D1:CECB DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3439 D1:CEDF C3 69 B4 D1     jp i6502NextLoad
 3440 D1:CEE3 -  -  -  -  
 3441 D1:CEE3 -  -  -  -  ;-----------------------------------------------------------------------------
 3442 D1:CEE3 -  -  -  -  ;LAX - LDA oper + LDX oper
 3443 D1:CEE3 -  -  -  -  ;M -> A -> X. Flags affected: ZN
 3444 D1:CEE3 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3445 D1:CEE3 -  -  -  -  ;zeropage	LAX oper	A7	2	3  	
 3446 D1:CEE3 -  -  -  -  inst6502_lax_zp:
 3447 D1:CEE3 ED 33 03 -      ADDCYC(3)
 3448 D1:CEE6 7E -  -  -      ld  a,(hl)
 3449 D1:CEE7 01 00 38 D0     ld  bc,ZEROPAGE
 3450 D1:CEEB 81 -  -  -      add a,c
 3451 D1:CEEC 4F -  -  -      ld  c,a
 3452 D1:CEED 0A -  -  -      ld  a,(bc)
 3453 D1:CEEE DD 77 00 -      ld  (ix+REGA),a
 3454 D1:CEF1 DD 77 01 -      ld  (ix+REGX),a
 3455 D1:CEF4 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3456 D1:CF08 C3 69 B4 D1     jp i6502NextLoad
 3457 D1:CF0C -  -  -  -  
 3458 D1:CF0C -  -  -  -  ;zeropage,Y	LAX oper,Y	B7	2	4  	
 3459 D1:CF0C -  -  -  -  inst6502_lax_zpy:
 3460 D1:CF0C ED 33 04 -      ADDCYC(4)
 3461 D1:CF0F 7E -  -  -      ld  a,(hl)
 3462 D1:CF10 01 00 38 D0     ld  bc,ZEROPAGE
 3463 D1:CF14 81 -  -  -      add a,c
 3464 D1:CF15 DD 86 02 -      add a,(ix+REGY)
 3465 D1:CF18 4F -  -  -      ld  c,a
 3466 D1:CF19 0A -  -  -      ld  a,(bc)
 3467 D1:CF1A DD 77 00 -      ld  (ix+REGA),a
 3468 D1:CF1D DD 77 01 -      ld  (ix+REGX),a
 3469 D1:CF20 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3470 D1:CF34 C3 69 B4 D1     jp i6502NextLoad
 3471 D1:CF38 -  -  -  -  
 3472 D1:CF38 -  -  -  -  ;absolute	LAX oper	AF	3	4  	
 3473 D1:CF38 -  -  -  -  inst6502_lax_abs:
 3474 D1:CF38 ED 33 04 -      ADDCYC(4)
 3475 D1:CF3B CD F4 B4 D1     call subroutine6502_abs_split_start
 3476 D1:CF3F E5 -  -  -      push hl
 3477 D1:CF40 50 -  -  -          ld  d,b
 3478 D1:CF41 79 -  -  -          ld  a,c
 3479 D1:CF42 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3480 D1:CF44 ED 4C -  -          mlt bc
 3481 D1:CF46 21 00 40 D0         ld  hl,PAGETABLE
 3482 D1:CF4A 09 -  -  -          add hl,bc
 3483 D1:CF4B ED 27 -  -          ld  hl,(hl)
 3484 D1:CF4D 06 00 -  -          ld  b,0
 3485 D1:CF4F 4F -  -  -          ld  c,a
 3486 D1:CF50 09 -  -  -          add hl,bc   ;full address
 3487 D1:CF51 CD E9 AD D1         READ_ACCESS
 3488 D1:CF55 DD 77 00 -          ld (ix+REGA),a
 3489 D1:CF58 DD 77 01 -          ld (ix+REGX),a
 3490 D1:CF5B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3491 D1:CF6F E1 -  -  -      pop hl
 3492 D1:CF70 C3 69 B4 D1     jp i6502NextLoad
 3493 D1:CF74 -  -  -  -  
 3494 D1:CF74 -  -  -  -  ;absolut,Y	LAX oper,Y	BF	3	4* 	
 3495 D1:CF74 -  -  -  -  inst6502_lax_absy:
 3496 D1:CF74 ED 33 04 -      ADDCYC(4)
 3497 D1:CF77 CD 10 B5 D1     PUSH_ABSYSPLIT
 3498 D1:CF7B CD E9 AD D1         READ_ACCESS
 3499 D1:CF7F DD 77 00 -          ld (ix+REGA),a
 3500 D1:CF82 DD 77 01 -          ld (ix+REGX),a
 3501 D1:CF85 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3502 D1:CF99 E1 -  -  -      pop hl
 3503 D1:CF9A C3 69 B4 D1     jp i6502NextLoad
 3504 D1:CF9E -  -  -  -  
 3505 D1:CF9E -  -  -  -  ;(indirect,X)	LAX (oper,X)	A3	2	6  	
 3506 D1:CF9E -  -  -  -  inst6502_lax_indx:
 3507 D1:CF9E ED 33 06 -      ADDCYC(6)
 3508 D1:CFA1 E5 -  -  -      push hl
 3509 D1:CFA2 7E -  -  -          ld  a,(hl)
 3510 D1:CFA3 21 00 38 D0         ld  hl,ZEROPAGE
 3511 D1:CFA7 85 -  -  -          add a,L
 3512 D1:CFA8 DD 86 01 -          add a,(ix+REGX)
 3513 D1:CFAB 6F -  -  -          ld  L,a
 3514 D1:CFAC 7E -  -  -          ld  a,(hl)
 3515 D1:CFAD 2C -  -  -          inc L
 3516 D1:CFAE 56 -  -  -          ld  d,(hl)
 3517 D1:CFAF 42 -  -  -          ld  b,d
 3518 D1:CFB0 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3519 D1:CFB2 ED 4C -  -          mlt bc
 3520 D1:CFB4 21 00 40 D0         ld  hl,PAGETABLE
 3521 D1:CFB8 09 -  -  -          add hl,bc
 3522 D1:CFB9 ED 27 -  -          ld  hl,(hl)
 3523 D1:CFBB 06 00 -  -          ld  b,0
 3524 D1:CFBD 4F -  -  -          ld  c,a
 3525 D1:CFBE 09 -  -  -          add hl,bc
 3526 D1:CFBF CD E9 AD D1         READ_ACCESS
 3527 D1:CFC3 DD 77 00 -          ld (ix+REGA),a
 3528 D1:CFC6 DD 77 01 -          ld (ix+REGX),a
 3529 D1:CFC9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3530 D1:CFDD E1 -  -  -      pop hl
 3531 D1:CFDE C3 69 B4 D1     jp i6502NextLoad
 3532 D1:CFE2 -  -  -  -  
 3533 D1:CFE2 -  -  -  -  ;(indirect),Y	LAX (oper),Y	B3	2	5* 
 3534 D1:CFE2 -  -  -  -  inst6502_lax_indy:
 3535 D1:CFE2 ED 33 05 -      ADDCYC(5)
 3536 D1:CFE5 E5 -  -  -      push hl
 3537 D1:CFE6 7E -  -  -          ld  a,(hl)
 3538 D1:CFE7 21 00 38 D0         ld  hl,ZEROPAGE
 3539 D1:CFEB 85 -  -  -          add a,L
 3540 D1:CFEC 6F -  -  -          ld  L,a
 3541 D1:CFED 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3542 D1:CFEE 2C -  -  -          inc L
 3543 D1:CFEF DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3544 D1:CFF2 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3545 D1:CFF3 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3546 D1:CFF5 FD 23 -  -          ADDCYC(1)
 3547 D1:CFF7 24 -  -  -          inc h
 3548 D1:CFF8 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3549 D1:CFF9 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3550 D1:CFFB ED 6C -  -          mlt hl          ;23.
 3551 D1:CFFD 01 00 40 D0         ld  bc,PAGETABLE
 3552 D1:D001 09 -  -  -          add hl,bc
 3553 D1:D002 ED 27 -  -          ld  hl,(hl)     ;address get.
 3554 D1:D004 01 00 00 00         ld  bc,0
 3555 D1:D008 4F -  -  -          ld  c,a
 3556 D1:D009 09 -  -  -          add hl,bc       ;Full address get.
 3557 D1:D00A CD E9 AD D1         READ_ACCESS
 3558 D1:D00E DD 77 00 -          ld  (ix+REGA),a
 3559 D1:D011 DD 77 01 -          ld  (ix+REGX),a
 3560 D1:D014 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3561 D1:D028 E1 -  -  -      pop hl
 3562 D1:D029 C3 69 B4 D1     jp i6502NextLoad
 3563 D1:D02D -  -  -  -  
 3564 D1:D02D -  -  -  -  ;-----------------------------------------------------------------------------
 3565 D1:D02D -  -  -  -  ;LXA (LAX immediate)
 3566 D1:D02D -  -  -  -  ;Store * AND oper in A and X
 3567 D1:D02D -  -  -  -  ;Highly unstable, involves a 'magic' constant, see ANE
 3568 D1:D02D -  -  -  -  ;(A OR CONST) AND oper -> A -> X
 3569 D1:D02D -  -  -  -  ;immediate	LXA #oper	AB	2	2  	††
 3570 D1:D02D -  -  -  -  inst6502_lxa:
 3571 D1:D02D ED 33 02 -      ADDCYC(2)
 3572 D1:D030 ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3573 D1:D032 DD B6 00 -      or  a,(ix+REGA)
 3574 D1:D035 A6 -  -  -      and a,(hl)
 3575 D1:D036 DD 77 00 -      ld  (ix+REGA),a
 3576 D1:D039 DD 77 01 -      ld  (ix+REGX),a
 3577 D1:D03C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3578 D1:D050 C3 69 B4 D1     jp  i6502NextLoad
 3579 D1:D054 -  -  -  -  
 3580 D1:D054 -  -  -  -  ;-----------------------------------------------------------------------------
 3581 D1:D054 -  -  -  -  ;RLA - ROL oper + AND oper
 3582 D1:D054 -  -  -  -  ;M = C <- [76543210] <- C, A AND M -> A. flags CZN
 3583 D1:D054 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3584 D1:D054 -  -  -  -  ;zeropage	RLA oper	27	2	5  	
 3585 D1:D054 -  -  -  -  inst6502_rla_zp:
 3586 D1:D054 ED 33 05 -      ADDCYC(5)
 3587 D1:D057 7E -  -  -      ld  a,(hl)
 3588 D1:D058 01 00 38 D0     ld  bc,ZEROPAGE
 3589 D1:D05C 81 -  -  -      add a,c
 3590 D1:D05D 4F -  -  -      ld  c,a
 3591 D1:D05E DD 7E 04 -      ld  a,(ix+REGSR)
 3592 D1:D061 1F -  -  -      rra
 3593 D1:D062 0A -  -  -      ld  a,(bc)
 3594 D1:D063 17 -  -  -      rla
 3595 D1:D064 02 -  -  -      ld  (bc),a
 3596 D1:D065 -  -  -  -      ;Flag breakdown to optimize for split operation
 3597 D1:D065 DD 46 04 -      ld  b,(ix+REGSR)
 3598 D1:D068 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3599 D1:D06E DD A6 00 -      and a,(ix+REGA)
 3600 D1:D071 DD 77 00 -      ld  (ix+REGA),a
 3601 D1:D074 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3602 D1:D07A 87 -  -  -      add a,a
 3603 D1:D07B CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3604 D1:D081 DD 70 04 -      ld  (ix+REGSR),b
 3605 D1:D084 C3 69 B4 D1     jp i6502NextLoad
 3606 D1:D088 -  -  -  -  
 3607 D1:D088 -  -  -  -  ;zeropage,X	RLA oper,X	37	2	6  	
 3608 D1:D088 -  -  -  -  inst6502_rla_zpx:
 3609 D1:D088 ED 33 06 -      ADDCYC(6)
 3610 D1:D08B 7E -  -  -      ld  a,(hl)
 3611 D1:D08C 01 00 38 D0     ld  bc,ZEROPAGE
 3612 D1:D090 81 -  -  -      add a,c
 3613 D1:D091 DD 86 01 -      add a,(ix+REGX)
 3614 D1:D094 4F -  -  -      ld  c,a
 3615 D1:D095 DD 7E 04 -      ld  a,(ix+REGSR)
 3616 D1:D098 1F -  -  -      rra
 3617 D1:D099 0A -  -  -      ld  a,(bc)
 3618 D1:D09A 17 -  -  -      rla
 3619 D1:D09B 02 -  -  -      ld  (bc),a
 3620 D1:D09C -  -  -  -      ;Flag breakdown to optimize for split operation
 3621 D1:D09C DD 46 04 -      ld  b,(ix+REGSR)
 3622 D1:D09F CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3623 D1:D0A5 DD A6 00 -      and a,(ix+REGA)
 3624 D1:D0A8 DD 77 00 -      ld  (ix+REGA),a
 3625 D1:D0AB CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3626 D1:D0B1 87 -  -  -      add a,a
 3627 D1:D0B2 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3628 D1:D0B8 DD 70 04 -      ld  (ix+REGSR),b
 3629 D1:D0BB C3 69 B4 D1     jp i6502NextLoad
 3630 D1:D0BF -  -  -  -  
 3631 D1:D0BF -  -  -  -  ;absolute	RLA oper	2F	3	6  	
 3632 D1:D0BF -  -  -  -  inst6502_rla_abs:
 3633 D1:D0BF ED 33 06 -      ADDCYC(6)
 3634 D1:D0C2 CD F4 B4 D1     call subroutine6502_abs_split_start
 3635 D1:D0C6 E5 -  -  -      push hl
 3636 D1:D0C7 50 -  -  -          ld  d,b
 3637 D1:D0C8 79 -  -  -          ld  a,c
 3638 D1:D0C9 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3639 D1:D0CB ED 4C -  -          mlt bc
 3640 D1:D0CD 21 00 40 D0         ld  hl,PAGETABLE
 3641 D1:D0D1 09 -  -  -          add hl,bc
 3642 D1:D0D2 ED 27 -  -          ld  hl,(hl)
 3643 D1:D0D4 06 00 -  -          ld  b,0
 3644 D1:D0D6 4F -  -  -          ld  c,a
 3645 D1:D0D7 09 -  -  -          add hl,bc   ;full address
 3646 D1:D0D8 CD E9 AD D1         READ_ACCESS
 3647 D1:D0DC DD 46 04 -          ld  b,(ix+REGSR)
 3648 D1:D0DF CB 18 -  -          rr b
 3649 D1:D0E1 17 -  -  -          rla
 3650 D1:D0E2 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3651 D1:D0E3 -  -  -  -          ;Split oper
 3652 D1:D0E3 DD 46 04 -          ld  b,(ix+REGSR)
 3653 D1:D0E6 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3654 D1:D0EC DD A6 00 -          and a,(ix+REGA)
 3655 D1:D0EF DD 77 00 -          ld  (ix+REGA),a
 3656 D1:D0F2 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3657 D1:D0F8 87 -  -  -          add a,a
 3658 D1:D0F9 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3659 D1:D0FF DD 70 04 -          ld  (ix+REGSR),b
 3660 D1:D102 41 -  -  -          ld  b,c
 3661 D1:D103 CD 0C AE D1         WRITE_ACCESS
 3662 D1:D107 E1 -  -  -      pop hl
 3663 D1:D108 C3 69 B4 D1     jp i6502NextLoad
 3664 D1:D10C -  -  -  -  
 3665 D1:D10C -  -  -  -  ;absolut,X	RLA oper,X	3F	3	7  	
 3666 D1:D10C -  -  -  -  inst6502_rla_absx:
 3667 D1:D10C ED 33 07 -      ADDCYC(7)
 3668 D1:D10F CD 51 B5 D1     PUSH_ABSXSPLIT_NODEP
 3669 D1:D113 CD E9 AD D1         READ_ACCESS
 3670 D1:D117 DD 46 04 -          ld  b,(ix+REGSR)
 3671 D1:D11A CB 18 -  -          rr b
 3672 D1:D11C 17 -  -  -          rla
 3673 D1:D11D 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3674 D1:D11E -  -  -  -          ;Split oper
 3675 D1:D11E DD 46 04 -          ld  b,(ix+REGSR)
 3676 D1:D121 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3677 D1:D127 DD A6 00 -          and a,(ix+REGA)
 3678 D1:D12A DD 77 00 -          ld  (ix+REGA),a
 3679 D1:D12D CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3680 D1:D133 87 -  -  -          add a,a
 3681 D1:D134 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3682 D1:D13A DD 70 04 -          ld  (ix+REGSR),b
 3683 D1:D13D 41 -  -  -          ld  b,c
 3684 D1:D13E CD 0C AE D1         WRITE_ACCESS
 3685 D1:D142 E1 -  -  -      pop hl
 3686 D1:D143 C3 69 B4 D1     jp i6502NextLoad
 3687 D1:D147 -  -  -  -  
 3688 D1:D147 -  -  -  -  ;absolut,Y	RLA oper,Y	3B	3	7  	
 3689 D1:D147 -  -  -  -  inst6502_rla_absy:
 3690 D1:D147 ED 33 07 -      ADDCYC(7)
 3691 D1:D14A CD 4C B5 D1     PUSH_ABSYSPLIT_NODEP
 3692 D1:D14E CD E9 AD D1         READ_ACCESS
 3693 D1:D152 DD 46 04 -          ld  b,(ix+REGSR)
 3694 D1:D155 CB 18 -  -          rr b
 3695 D1:D157 17 -  -  -          rla
 3696 D1:D158 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3697 D1:D159 -  -  -  -          ;Split oper
 3698 D1:D159 DD 46 04 -          ld  b,(ix+REGSR)
 3699 D1:D15C CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3700 D1:D162 DD A6 00 -          and a,(ix+REGA)
 3701 D1:D165 DD 77 00 -          ld  (ix+REGA),a
 3702 D1:D168 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3703 D1:D16E 87 -  -  -          add a,a
 3704 D1:D16F CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3705 D1:D175 DD 70 04 -          ld  (ix+REGSR),b
 3706 D1:D178 41 -  -  -          ld  b,c
 3707 D1:D179 CD 0C AE D1         WRITE_ACCESS
 3708 D1:D17D E1 -  -  -      pop hl
 3709 D1:D17E C3 69 B4 D1     jp i6502NextLoad
 3710 D1:D182 -  -  -  -  
 3711 D1:D182 -  -  -  -  ;(indirect,X)	RLA (oper,X)	23	2	8  	
 3712 D1:D182 -  -  -  -  isnt6502_rla_indx:
 3713 D1:D182 ED 33 08 -      ADDCYC(8)
 3714 D1:D185 E5 -  -  -      push hl
 3715 D1:D186 7E -  -  -          ld  a,(hl)
 3716 D1:D187 21 00 38 D0         ld  hl,ZEROPAGE
 3717 D1:D18B 85 -  -  -          add a,L
 3718 D1:D18C DD 86 01 -          add a,(ix+REGX)
 3719 D1:D18F 6F -  -  -          ld  L,a
 3720 D1:D190 7E -  -  -          ld  a,(hl)
 3721 D1:D191 2C -  -  -          inc L
 3722 D1:D192 56 -  -  -          ld  d,(hl)
 3723 D1:D193 42 -  -  -          ld  b,d
 3724 D1:D194 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3725 D1:D196 ED 4C -  -          mlt bc
 3726 D1:D198 21 00 40 D0         ld  hl,PAGETABLE
 3727 D1:D19C 09 -  -  -          add hl,bc
 3728 D1:D19D ED 27 -  -          ld  hl,(hl)
 3729 D1:D19F 06 00 -  -          ld  b,0
 3730 D1:D1A1 4F -  -  -          ld  c,a
 3731 D1:D1A2 09 -  -  -          add hl,bc
 3732 D1:D1A3 CD E9 AD D1         READ_ACCESS
 3733 D1:D1A7 DD 46 04 -          ld  b,(ix+REGSR)
 3734 D1:D1AA CB 18 -  -          rr b
 3735 D1:D1AC 17 -  -  -          rla
 3736 D1:D1AD 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3737 D1:D1AE -  -  -  -          ;Split oper
 3738 D1:D1AE DD 46 04 -          ld  b,(ix+REGSR)
 3739 D1:D1B1 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3740 D1:D1B7 DD A6 00 -          and a,(ix+REGA)
 3741 D1:D1BA DD 77 00 -          ld  (ix+REGA),a
 3742 D1:D1BD CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3743 D1:D1C3 87 -  -  -          add a,a
 3744 D1:D1C4 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3745 D1:D1CA DD 70 04 -          ld  (ix+REGSR),b
 3746 D1:D1CD 41 -  -  -          ld  b,c
 3747 D1:D1CE CD 0C AE D1         WRITE_ACCESS
 3748 D1:D1D2 E1 -  -  -      pop hl
 3749 D1:D1D3 C3 69 B4 D1     jp  i6502NextLoad
 3750 D1:D1D7 -  -  -  -  
 3751 D1:D1D7 -  -  -  -  ;(indirect),Y	RLA (oper),Y	33	2	8  
 3752 D1:D1D7 -  -  -  -  inst6502_rla_indy:
 3753 D1:D1D7 ED 33 08 -      ADDCYC(8)
 3754 D1:D1DA E5 -  -  -      push hl
 3755 D1:D1DB 7E -  -  -          ld  a,(hl)
 3756 D1:D1DC 21 00 38 D0         ld  hl,ZEROPAGE
 3757 D1:D1E0 85 -  -  -          add a,L
 3758 D1:D1E1 6F -  -  -          ld  L,a
 3759 D1:D1E2 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3760 D1:D1E3 2C -  -  -          inc L
 3761 D1:D1E4 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3762 D1:D1E7 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3763 D1:D1E8 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3764 D1:D1EA 24 -  -  -          inc h
 3765 D1:D1EB 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3766 D1:D1EC 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3767 D1:D1EE ED 6C -  -          mlt hl          ;23.
 3768 D1:D1F0 01 00 40 D0         ld  bc,PAGETABLE
 3769 D1:D1F4 09 -  -  -          add hl,bc
 3770 D1:D1F5 ED 27 -  -          ld  hl,(hl)     ;address get.
 3771 D1:D1F7 01 00 00 00         ld  bc,0
 3772 D1:D1FB 4F -  -  -          ld  c,a
 3773 D1:D1FC 09 -  -  -          add hl,bc       ;Full address get.
 3774 D1:D1FD CD E9 AD D1         READ_ACCESS
 3775 D1:D201 DD 46 04 -          ld  b,(ix+REGSR)
 3776 D1:D204 CB 18 -  -          rr b
 3777 D1:D206 17 -  -  -          rla
 3778 D1:D207 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3779 D1:D208 -  -  -  -          ;Split oper
 3780 D1:D208 DD 46 04 -          ld  b,(ix+REGSR)
 3781 D1:D20B CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3782 D1:D211 DD A6 00 -          and a,(ix+REGA)
 3783 D1:D214 DD 77 00 -          ld  (ix+REGA),a
 3784 D1:D217 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3785 D1:D21D 87 -  -  -          add a,a
 3786 D1:D21E CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3787 D1:D224 DD 70 04 -          ld  (ix+REGSR),b
 3788 D1:D227 41 -  -  -          ld  b,c
 3789 D1:D228 CD 0C AE D1         WRITE_ACCESS
 3790 D1:D22C E1 -  -  -      pop hl
 3791 D1:D22D C3 69 B4 D1     jp  i6502NextLoad
 3792 D1:D231 -  -  -  -  
 3793 D1:D231 -  -  -  -  ;-----------------------------------------------------------------------------
 3794 D1:D231 -  -  -  -  ;RRA
 3795 D1:D231 -  -  -  -  ;ROR oper + ADC oper
 3796 D1:D231 -  -  -  -  ;M = C -> [76543210] -> C, A + M + C -> A, C. Affects VCZN
 3797 D1:D231 -  -  -  -  
 3798 D1:D231 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3799 D1:D231 -  -  -  -  ;zeropage	RRA oper	67	2	5  	
 3800 D1:D231 -  -  -  -  inst6502_rra_zp:
 3801 D1:D231 ED 33 05 -      ADDCYC(5)
 3802 D1:D234 7E -  -  -      ld  a,(hl)
 3803 D1:D235 01 00 38 D0     ld  bc,ZEROPAGE
 3804 D1:D239 81 -  -  -      add a,c
 3805 D1:D23A 4F -  -  -      ld  c,a
 3806 D1:D23B DD 7E 04 -      ld  a,(ix+REGSR)
 3807 D1:D23E 1F -  -  -      rra
 3808 D1:D23F 0A -  -  -      ld  a,(bc)
 3809 D1:D240 1F -  -  -      rra
 3810 D1:D241 02 -  -  -      ld  (bc),a
 3811 D1:D242 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 3812 D1:D246 30 04 -  -      jr nc,$+6
 3813 D1:D248 DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 3814 D1:D24C 4F -  -  -      ld  c,a
 3815 D1:D24D C3 86 B5 D1     jp  subroutine6502_adc_combined_end
 3816 D1:D251 -  -  -  -  
 3817 D1:D251 -  -  -  -  ;zeropage,X	RRA oper,X	77	2	6  	
 3818 D1:D251 -  -  -  -  inst6502_rra_zpx:
 3819 D1:D251 ED 33 06 -      ADDCYC(6)
 3820 D1:D254 7E -  -  -      ld  a,(hl)
 3821 D1:D255 01 00 38 D0     ld  bc,ZEROPAGE
 3822 D1:D259 81 -  -  -      add a,c
 3823 D1:D25A DD 86 01 -      add a,(ix+REGX)
 3824 D1:D25D 4F -  -  -      ld  c,a
 3825 D1:D25E DD 7E 04 -      ld  a,(ix+REGSR)
 3826 D1:D261 1F -  -  -      rra
 3827 D1:D262 0A -  -  -      ld  a,(bc)
 3828 D1:D263 1F -  -  -      rra
 3829 D1:D264 02 -  -  -      ld  (bc),a
 3830 D1:D265 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 3831 D1:D269 30 04 -  -      jr nc,$+6
 3832 D1:D26B DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 3833 D1:D26F 4F -  -  -      ld  c,a
 3834 D1:D270 C3 86 B5 D1     jp  subroutine6502_adc_combined_end
 3835 D1:D274 -  -  -  -  
 3836 D1:D274 -  -  -  -  ;absolute	RRA oper	6F	3	6  	
 3837 D1:D274 -  -  -  -  inst6502_rra_abs:
 3838 D1:D274 ED 33 06 -      ADDCYC(6)
 3839 D1:D277 CD F4 B4 D1     call subroutine6502_abs_split_start
 3840 D1:D27B E5 -  -  -      push hl
 3841 D1:D27C 50 -  -  -          ld  d,b
 3842 D1:D27D 79 -  -  -          ld  a,c
 3843 D1:D27E 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3844 D1:D280 ED 4C -  -          mlt bc
 3845 D1:D282 21 00 40 D0         ld  hl,PAGETABLE
 3846 D1:D286 09 -  -  -          add hl,bc
 3847 D1:D287 ED 27 -  -          ld  hl,(hl)
 3848 D1:D289 06 00 -  -          ld  b,0
 3849 D1:D28B 4F -  -  -          ld  c,a
 3850 D1:D28C 09 -  -  -          add hl,bc   ;full address
 3851 D1:D28D CD E9 AD D1         READ_ACCESS
 3852 D1:D291 DD 46 04 -          ld  b,(ix+REGSR)
 3853 D1:D294 CB 18 -  -          rr b
 3854 D1:D296 1F -  -  -          rra
 3855 D1:D297 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3856 D1:D29B 30 04 -  -          jr nc,$+6
 3857 D1:D29D DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3858 D1:D2A1 47 -  -  -          ld  b,a
 3859 D1:D2A2 C5 -  -  -          push bc
 3860 D1:D2A3 CD 0C AE D1             WRITE_ACCESS
 3861 D1:D2A7 C1 -  -  -          pop bc
 3862 D1:D2A8 48 -  -  -          ld c,b
 3863 D1:D2A9 E1 -  -  -      pop hl
 3864 D1:D2AA C3 86 B5 D1     jp  subroutine6502_adc_combined_end
 3865 D1:D2AE -  -  -  -  
 3866 D1:D2AE -  -  -  -  ;absolut,X	RRA oper,X	7F	3	7  	
 3867 D1:D2AE -  -  -  -  inst6502_rra_absx:
 3868 D1:D2AE ED 33 07 -      ADDCYC(7)
 3869 D1:D2B1 CD 51 B5 D1     PUSH_ABSXSPLIT_NODEP
 3870 D1:D2B5 CD E9 AD D1         READ_ACCESS
 3871 D1:D2B9 DD 46 04 -          ld  b,(ix+REGSR)
 3872 D1:D2BC CB 18 -  -          rr b
 3873 D1:D2BE 1F -  -  -          rra
 3874 D1:D2BF DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3875 D1:D2C3 30 04 -  -          jr nc,$+6
 3876 D1:D2C5 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3877 D1:D2C9 47 -  -  -          ld  b,a
 3878 D1:D2CA C5 -  -  -          push bc
 3879 D1:D2CB CD 0C AE D1             WRITE_ACCESS
 3880 D1:D2CF C1 -  -  -          pop bc
 3881 D1:D2D0 48 -  -  -          ld c,b
 3882 D1:D2D1 E1 -  -  -      pop hl
 3883 D1:D2D2 C3 86 B5 D1     jp  subroutine6502_adc_combined_end
 3884 D1:D2D6 -  -  -  -  
 3885 D1:D2D6 -  -  -  -  ;absolut,Y	RRA oper,Y	7B	3	7  	
 3886 D1:D2D6 -  -  -  -  inst6502_rra_absy:
 3887 D1:D2D6 ED 33 07 -      ADDCYC(7)
 3888 D1:D2D9 CD 4C B5 D1     PUSH_ABSYSPLIT_NODEP
 3889 D1:D2DD CD E9 AD D1         READ_ACCESS
 3890 D1:D2E1 DD 46 04 -          ld  b,(ix+REGSR)
 3891 D1:D2E4 CB 18 -  -          rr b
 3892 D1:D2E6 1F -  -  -          rra
 3893 D1:D2E7 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3894 D1:D2EB 30 04 -  -          jr nc,$+6
 3895 D1:D2ED DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3896 D1:D2F1 47 -  -  -          ld  b,a
 3897 D1:D2F2 C5 -  -  -          push bc
 3898 D1:D2F3 CD 0C AE D1             WRITE_ACCESS
 3899 D1:D2F7 C1 -  -  -          pop bc
 3900 D1:D2F8 48 -  -  -          ld c,b
 3901 D1:D2F9 E1 -  -  -      pop hl
 3902 D1:D2FA C3 86 B5 D1     jp  subroutine6502_adc_combined_end
 3903 D1:D2FE -  -  -  -  
 3904 D1:D2FE -  -  -  -  ;(indirect,X)	RRA (oper,X)	63	2	8  	
 3905 D1:D2FE -  -  -  -  isnt6502_rra_indx:
 3906 D1:D2FE ED 33 08 -      ADDCYC(8)
 3907 D1:D301 E5 -  -  -      push hl
 3908 D1:D302 7E -  -  -          ld  a,(hl)
 3909 D1:D303 21 00 38 D0         ld  hl,ZEROPAGE
 3910 D1:D307 85 -  -  -          add a,L
 3911 D1:D308 DD 86 01 -          add a,(ix+REGX)
 3912 D1:D30B 6F -  -  -          ld  L,a
 3913 D1:D30C 7E -  -  -          ld  a,(hl)
 3914 D1:D30D 2C -  -  -          inc L
 3915 D1:D30E 56 -  -  -          ld  d,(hl)
 3916 D1:D30F 42 -  -  -          ld  b,d
 3917 D1:D310 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3918 D1:D312 ED 4C -  -          mlt bc
 3919 D1:D314 21 00 40 D0         ld  hl,PAGETABLE
 3920 D1:D318 09 -  -  -          add hl,bc
 3921 D1:D319 ED 27 -  -          ld  hl,(hl)
 3922 D1:D31B 06 00 -  -          ld  b,0
 3923 D1:D31D 4F -  -  -          ld  c,a
 3924 D1:D31E 09 -  -  -          add hl,bc
 3925 D1:D31F CD E9 AD D1         READ_ACCESS
 3926 D1:D323 DD 46 04 -          ld  b,(ix+REGSR)
 3927 D1:D326 CB 18 -  -          rr b
 3928 D1:D328 1F -  -  -          rra
 3929 D1:D329 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3930 D1:D32D 30 04 -  -          jr nc,$+6
 3931 D1:D32F DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3932 D1:D333 47 -  -  -          ld  b,a
 3933 D1:D334 C5 -  -  -          push bc
 3934 D1:D335 CD 0C AE D1             WRITE_ACCESS
 3935 D1:D339 C1 -  -  -          pop bc
 3936 D1:D33A 48 -  -  -          ld c,b
 3937 D1:D33B E1 -  -  -      pop hl
 3938 D1:D33C C3 86 B5 D1     jp  subroutine6502_adc_combined_end
 3939 D1:D340 -  -  -  -  
 3940 D1:D340 -  -  -  -  ;(indirect),Y	RRA (oper),Y	73	2	8  
 3941 D1:D340 -  -  -  -  inst6502_rra_indy:
 3942 D1:D340 ED 33 08 -      ADDCYC(8)
 3943 D1:D343 E5 -  -  -      push hl
 3944 D1:D344 7E -  -  -          ld  a,(hl)
 3945 D1:D345 21 00 38 D0         ld  hl,ZEROPAGE
 3946 D1:D349 85 -  -  -          add a,L
 3947 D1:D34A 6F -  -  -          ld  L,a
 3948 D1:D34B 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3949 D1:D34C 2C -  -  -          inc L
 3950 D1:D34D DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3951 D1:D350 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3952 D1:D351 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3953 D1:D353 24 -  -  -          inc h
 3954 D1:D354 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3955 D1:D355 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3956 D1:D357 ED 6C -  -          mlt hl          ;23.
 3957 D1:D359 01 00 40 D0         ld  bc,PAGETABLE
 3958 D1:D35D 09 -  -  -          add hl,bc
 3959 D1:D35E ED 27 -  -          ld  hl,(hl)     ;address get.
 3960 D1:D360 01 00 00 00         ld  bc,0
 3961 D1:D364 4F -  -  -          ld  c,a
 3962 D1:D365 09 -  -  -          add hl,bc       ;Full address get.
 3963 D1:D366 CD E9 AD D1         READ_ACCESS
 3964 D1:D36A DD 46 04 -          ld  b,(ix+REGSR)
 3965 D1:D36D CB 18 -  -          rr b
 3966 D1:D36F 1F -  -  -          rra
 3967 D1:D370 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3968 D1:D374 30 04 -  -          jr nc,$+6
 3969 D1:D376 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3970 D1:D37A 47 -  -  -          ld  b,a
 3971 D1:D37B C5 -  -  -          push bc
 3972 D1:D37C CD 0C AE D1             WRITE_ACCESS
 3973 D1:D380 C1 -  -  -          pop bc
 3974 D1:D381 48 -  -  -          ld c,b
 3975 D1:D382 E1 -  -  -      pop hl
 3976 D1:D383 C3 86 B5 D1     jp  subroutine6502_adc_combined_end
 3977 D1:D387 -  -  -  -  
 3978 D1:D387 -  -  -  -  ;-----------------------------------------------------------------------------
 3979 D1:D387 -  -  -  -  ;SAX (AXS, AAX) - A AND X -> M
 3980 D1:D387 -  -  -  -  ;A and X are put on the bus at the same time (resulting effectively in an 
 3981 D1:D387 -  -  -  -  ;AND operation) and stored in M. Flags not affected.
 3982 D1:D387 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3983 D1:D387 -  -  -  -  ;zeropage	SAX oper	87	2	3  	
 3984 D1:D387 -  -  -  -  inst6502_sax_zp:
 3985 D1:D387 ED 33 03 -      ADDCYC(3)
 3986 D1:D38A 7E -  -  -      ld  a,(hl)
 3987 D1:D38B 01 00 38 D0     ld  bc,ZEROPAGE
 3988 D1:D38F 81 -  -  -      add a,c
 3989 D1:D390 4F -  -  -      ld  c,a
 3990 D1:D391 DD 7E 00 -      ld  a,(ix+REGA)
 3991 D1:D394 DD A6 01 -      and a,(ix+REGX)
 3992 D1:D397 02 -  -  -      ld  (bc),a
 3993 D1:D398 C3 69 B4 D1     jp i6502NextLoad
 3994 D1:D39C -  -  -  -  
 3995 D1:D39C -  -  -  -  
 3996 D1:D39C -  -  -  -  ;zeropage,Y	SAX oper,Y	97	2	4  	
 3997 D1:D39C -  -  -  -  inst6502_sax_zpy:
 3998 D1:D39C ED 33 04 -      ADDCYC(4)
 3999 D1:D39F 7E -  -  -      ld  a,(hl)
 4000 D1:D3A0 01 00 38 D0     ld  bc,ZEROPAGE
 4001 D1:D3A4 81 -  -  -      add a,c
 4002 D1:D3A5 DD 86 02 -      add a,(ix+REGY)
 4003 D1:D3A8 4F -  -  -      ld  c,a
 4004 D1:D3A9 DD 7E 00 -      ld  a,(ix+REGA)
 4005 D1:D3AC DD A6 01 -      and a,(ix+REGX)
 4006 D1:D3AF 02 -  -  -      ld  (bc),a
 4007 D1:D3B0 C3 69 B4 D1     jp i6502NextLoad
 4008 D1:D3B4 -  -  -  -  
 4009 D1:D3B4 -  -  -  -  
 4010 D1:D3B4 -  -  -  -  ;absolute	SAX oper	8F	3	4  	
 4011 D1:D3B4 -  -  -  -  inst6502_sax_abs:
 4012 D1:D3B4 ED 33 04 -      ADDCYC(4)
 4013 D1:D3B7 CD F4 B4 D1     call subroutine6502_abs_split_start
 4014 D1:D3BB E5 -  -  -      push hl
 4015 D1:D3BC 50 -  -  -          ld  d,b
 4016 D1:D3BD 79 -  -  -          ld  a,c
 4017 D1:D3BE 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4018 D1:D3C0 ED 4C -  -          mlt bc
 4019 D1:D3C2 21 00 40 D0         ld  hl,PAGETABLE
 4020 D1:D3C6 09 -  -  -          add hl,bc
 4021 D1:D3C7 ED 27 -  -          ld  hl,(hl)
 4022 D1:D3C9 06 00 -  -          ld  b,0
 4023 D1:D3CB 4F -  -  -          ld  c,a
 4024 D1:D3CC 09 -  -  -          add hl,bc   ;full address
 4025 D1:D3CD DD 7E 00 -          ld  a,(ix+REGA)
 4026 D1:D3D0 DD A6 01 -          and a,(ix+REGX)
 4027 D1:D3D3 47 -  -  -          ld  b,a
 4028 D1:D3D4 CD 0C AE D1         WRITE_ACCESS
 4029 D1:D3D8 E1 -  -  -      pop hl
 4030 D1:D3D9 C3 69 B4 D1     jp i6502NextLoad
 4031 D1:D3DD -  -  -  -  
 4032 D1:D3DD -  -  -  -  ;(indirect,X)	SAX (oper,X)	83	2	6  
 4033 D1:D3DD -  -  -  -  inst6502_sax_indx:
 4034 D1:D3DD ED 33 06 -      ADDCYC(6)
 4035 D1:D3E0 E5 -  -  -      push hl
 4036 D1:D3E1 7E -  -  -          ld  a,(hl)
 4037 D1:D3E2 21 00 38 D0         ld  hl,ZEROPAGE
 4038 D1:D3E6 85 -  -  -          add a,L
 4039 D1:D3E7 DD 86 01 -          add a,(ix+REGX)
 4040 D1:D3EA 6F -  -  -          ld  L,a
 4041 D1:D3EB 7E -  -  -          ld  a,(hl)
 4042 D1:D3EC 2C -  -  -          inc L
 4043 D1:D3ED 56 -  -  -          ld  d,(hl)
 4044 D1:D3EE 42 -  -  -          ld  b,d
 4045 D1:D3EF 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4046 D1:D3F1 ED 4C -  -          mlt bc
 4047 D1:D3F3 21 00 40 D0         ld  hl,PAGETABLE
 4048 D1:D3F7 09 -  -  -          add hl,bc
 4049 D1:D3F8 ED 27 -  -          ld  hl,(hl)
 4050 D1:D3FA 06 00 -  -          ld  b,0
 4051 D1:D3FC 4F -  -  -          ld  c,a
 4052 D1:D3FD 09 -  -  -          add hl,bc
 4053 D1:D3FE DD 7E 00 -          ld  a,(ix+REGA)
 4054 D1:D401 DD A6 01 -          and a,(ix+REGX)
 4055 D1:D404 47 -  -  -          ld  b,a
 4056 D1:D405 CD 0C AE D1         WRITE_ACCESS
 4057 D1:D409 E1 -  -  -      pop hl
 4058 D1:D40A C3 69 B4 D1     jp i6502NextLoad
 4059 D1:D40E -  -  -  -  
 4060 D1:D40E -  -  -  -  ;-----------------------------------------------------------------------------
 4061 D1:D40E -  -  -  -  ;SBX (AXS, SAX) - CMP and DEX at once, sets flags like CMP
 4062 D1:D40E -  -  -  -  ;(A AND X) - oper -> X.  Flags affected: CZN
 4063 D1:D40E -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4064 D1:D40E -  -  -  -  ;immediate	SBX #oper	CB	2	2  
 4065 D1:D40E -  -  -  -  inst6502_sbx_imm:
 4066 D1:D40E DD 7E 00 -      ld  a,(ix+REGA)
 4067 D1:D411 DD A6 01 -      and a,(ix+REGX)
 4068 D1:D414 96 -  -  -      sub a,(hl)
 4069 D1:D415 DD 77 01 -      ld  (ix+REGX),a
 4070 D1:D418 3F -  -  -      ccf
 4071 D1:D419 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 4072 D1:D433 C3 69 B4 D1     jp  i6502NextLoad
 4073 D1:D437 -  -  -  -  
 4074 D1:D437 -  -  -  -  ;-----------------------------------------------------------------------------
 4075 D1:D437 -  -  -  -  ;SHA (AHX, AXA) - Stores A AND X AND (high-byte of addr. + 1) at addr.
 4076 D1:D437 -  -  -  -  ;unstable: sometimes 'AND (H+1)' is dropped, 
 4077 D1:D437 -  -  -  -  ;page boundary crossings may not work 
 4078 D1:D437 -  -  -  -  ;(with the high-byte of the value used as the high-byte of the address)
 4079 D1:D437 -  -  -  -  ;A AND X AND (H+1) -> M
 4080 D1:D437 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4081 D1:D437 -  -  -  -  ;
 4082 D1:D437 -  -  -  -  ;NOTE: NOT GOING TO IMPLEMENT THESE. THEY'LL ADVANCE THE 6502 PC IN THE CORRECT
 4083 D1:D437 -  -  -  -  ;MANNER BUT NOTHING MORE. THE CPU WILL HALT WHEN ENCOUNTERING ONE OF THESE.
 4084 D1:D437 -  -  -  -  ;
 4085 D1:D437 -  -  -  -  ;absolut,Y	SHA oper,Y	9F	3	5  	†
 4086 D1:D437 -  -  -  -  inst6502_sha_absy:
 4087 D1:D437 ED 33 05 -      ADDCYC(5)
 4088 D1:D43A CD 10 B5 D1     PUSH_ABSYSPLIT
 4089 D1:D43E 18 FE -  -          jr $
 4090 D1:D440 E1 -  -  -      pop hl
 4091 D1:D441 C3 69 B4 D1     jp i6502NextLoad
 4092 D1:D445 -  -  -  -  
 4093 D1:D445 -  -  -  -  ;(indirect),Y	SHA (oper),Y	93	2	6  	†
 4094 D1:D445 -  -  -  -  inst6502_sha_indy:
 4095 D1:D445 ED 33 06 -      ADDCYC(6)
 4096 D1:D448 E5 -  -  -      push hl
 4097 D1:D449 7E -  -  -          ld  a,(hl)
 4098 D1:D44A 21 00 38 D0         ld  hl,ZEROPAGE
 4099 D1:D44E 85 -  -  -          add a,L
 4100 D1:D44F 6F -  -  -          ld  L,a
 4101 D1:D450 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4102 D1:D451 2C -  -  -          inc L
 4103 D1:D452 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4104 D1:D455 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4105 D1:D456 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4106 D1:D458 24 -  -  -          inc h
 4107 D1:D459 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4108 D1:D45A 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4109 D1:D45C ED 6C -  -          mlt hl          ;23.
 4110 D1:D45E 01 00 40 D0         ld  bc,PAGETABLE
 4111 D1:D462 09 -  -  -          add hl,bc
 4112 D1:D463 ED 27 -  -          ld  hl,(hl)     ;address get.
 4113 D1:D465 01 00 00 00         ld  bc,0
 4114 D1:D469 4F -  -  -          ld  c,a
 4115 D1:D46A 09 -  -  -          add hl,bc       ;Full address get.
 4116 D1:D46B CD E9 AD D1         READ_ACCESS
 4117 D1:D46F 18 FE -  -          jr $
 4118 D1:D471 E1 -  -  -      pop hl
 4119 D1:D472 C3 69 B4 D1     jp i6502NextLoad
 4120 D1:D476 -  -  -  -  
 4121 D1:D476 -  -  -  -  ;-----------------------------------------------------------------------------
 4122 D1:D476 -  -  -  -  ;SHX (A11, SXA, XAS)
 4123 D1:D476 -  -  -  -  ;SHY (A11, SYA, SAY)
 4124 D1:D476 -  -  -  -  ;TAS (XAS, SHS)
 4125 D1:D476 -  -  -  -  ;Not going to implement these, but they'll still get the program
 4126 D1:D476 -  -  -  -  ;counter to make the correct noises. Right before locking up the core.
 4127 D1:D476 -  -  -  -  ;All of these instructions are marked as "unstable" in that they'll sometimes
 4128 D1:D476 -  -  -  -  ;drop the high byte, and page crossings sometimes won't work.
 4129 D1:D476 -  -  -  -  
 4130 D1:D476 -  -  -  -  ;absolut,Y	SHX oper,Y	9E	3	5  	†
 4131 D1:D476 -  -  -  -  inst6502_shx_absy:
 4132 D1:D476 ED 33 05 -      ADDCYC(5)
 4133 D1:D479 CD 4C B5 D1     PUSH_ABSYSPLIT_NODEP
 4134 D1:D47D 18 FE -  -          jr $
 4135 D1:D47F E1 -  -  -      pop hl
 4136 D1:D480 C3 69 B4 D1     jp i6502NextLoad
 4137 D1:D484 -  -  -  -  
 4138 D1:D484 -  -  -  -  ;absolut,X	SHY oper,X	9C	3	5  	†
 4139 D1:D484 -  -  -  -  inst6502_shy_absx:
 4140 D1:D484 ED 33 05 -      ADDCYC(5)
 4141 D1:D487 CD 51 B5 D1     PUSH_ABSXSPLIT_NODEP
 4142 D1:D48B 18 FE -  -          jr $
 4143 D1:D48D E1 -  -  -      pop hl
 4144 D1:D48E C3 69 B4 D1     jp i6502NextLoad
 4145 D1:D492 -  -  -  -  
 4146 D1:D492 -  -  -  -  ;absolut,Y	TAS oper,Y	9B	3	5  	†
 4147 D1:D492 -  -  -  -  inst6502_tas_absy:
 4148 D1:D492 ED 33 05 -      ADDCYC(5)
 4149 D1:D495 CD 4C B5 D1     PUSH_ABSYSPLIT_NODEP
 4150 D1:D499 18 FE -  -          jr $
 4151 D1:D49B E1 -  -  -      pop hl
 4152 D1:D49C C3 69 B4 D1     jp i6502NextLoad
 4153 D1:D4A0 -  -  -  -  
 4154 D1:D4A0 -  -  -  -  ;-----------------------------------------------------------------------------
 4155 D1:D4A0 -  -  -  -  ;SLO (ASO) - ASL oper + ORA oper
 4156 D1:D4A0 -  -  -  -  ;M = C <- [76543210] <- 0, A OR M -> A. Affects: CZN
 4157 D1:D4A0 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4158 D1:D4A0 -  -  -  -  
 4159 D1:D4A0 -  -  -  -  ;zeropage	SLO oper	07	2	5  	
 4160 D1:D4A0 -  -  -  -  inst6502_slo_zp:
 4161 D1:D4A0 ED 33 05 -      ADDCYC(5)
 4162 D1:D4A3 7E -  -  -      ld  a,(hl)
 4163 D1:D4A4 01 00 38 D0     ld  bc,ZEROPAGE
 4164 D1:D4A8 81 -  -  -      add a,c
 4165 D1:D4A9 4F -  -  -      ld  c,a
 4166 D1:D4AA 0A -  -  -      ld  a,(bc)
 4167 D1:D4AB CB 27 -  -      sla a
 4168 D1:D4AD 02 -  -  -      ld  (bc),a
 4169 D1:D4AE -  -  -  -      ;Flag breakdown to optimize for split operation
 4170 D1:D4AE DD 46 04 -      ld  b,(ix+REGSR)
 4171 D1:D4B1 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4172 D1:D4B7 DD B6 00 -      or  a,(ix+REGA)
 4173 D1:D4BA DD 77 00 -      ld  (ix+REGA),a
 4174 D1:D4BD CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4175 D1:D4C3 87 -  -  -      add a,a
 4176 D1:D4C4 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4177 D1:D4CA DD 70 04 -      ld  (ix+REGSR),b
 4178 D1:D4CD C3 69 B4 D1     jp i6502NextLoad
 4179 D1:D4D1 -  -  -  -  
 4180 D1:D4D1 -  -  -  -  ;zeropage,X	SLO oper,X	17	2	6  	
 4181 D1:D4D1 -  -  -  -  inst6502_slo_zpx:
 4182 D1:D4D1 ED 33 06 -      ADDCYC(6)
 4183 D1:D4D4 7E -  -  -      ld  a,(hl)
 4184 D1:D4D5 01 00 38 D0     ld  bc,ZEROPAGE
 4185 D1:D4D9 81 -  -  -      add a,c
 4186 D1:D4DA DD 86 01 -      add a,(ix+REGX)
 4187 D1:D4DD 4F -  -  -      ld  c,a
 4188 D1:D4DE 0A -  -  -      ld  a,(bc)
 4189 D1:D4DF CB 27 -  -      sla a
 4190 D1:D4E1 02 -  -  -      ld  (bc),a
 4191 D1:D4E2 -  -  -  -      ;Flag breakdown to optimize for split operation
 4192 D1:D4E2 DD 46 04 -      ld  b,(ix+REGSR)
 4193 D1:D4E5 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4194 D1:D4EB DD B6 00 -      or  a,(ix+REGA)
 4195 D1:D4EE DD 77 00 -      ld  (ix+REGA),a
 4196 D1:D4F1 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4197 D1:D4F7 87 -  -  -      add a,a
 4198 D1:D4F8 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4199 D1:D4FE DD 70 04 -      ld  (ix+REGSR),b
 4200 D1:D501 C3 69 B4 D1     jp i6502NextLoad
 4201 D1:D505 -  -  -  -  
 4202 D1:D505 -  -  -  -  ;absolute	SLO oper	0F	3	6  	
 4203 D1:D505 -  -  -  -  inst6502_slo_abs:
 4204 D1:D505 ED 33 06 -      ADDCYC(6)
 4205 D1:D508 CD F4 B4 D1     call subroutine6502_abs_split_start
 4206 D1:D50C E5 -  -  -      push hl
 4207 D1:D50D 50 -  -  -          ld  d,b
 4208 D1:D50E 79 -  -  -          ld  a,c
 4209 D1:D50F 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4210 D1:D511 ED 4C -  -          mlt bc
 4211 D1:D513 21 00 40 D0         ld  hl,PAGETABLE
 4212 D1:D517 09 -  -  -          add hl,bc
 4213 D1:D518 ED 27 -  -          ld  hl,(hl)
 4214 D1:D51A 06 00 -  -          ld  b,0
 4215 D1:D51C 4F -  -  -          ld  c,a
 4216 D1:D51D 09 -  -  -          add hl,bc   ;full address
 4217 D1:D51E CD E9 AD D1         READ_ACCESS
 4218 D1:D522 CB 27 -  -          sla a
 4219 D1:D524 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4220 D1:D525 -  -  -  -          ;Split oper
 4221 D1:D525 DD 46 04 -          ld  b,(ix+REGSR)
 4222 D1:D528 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4223 D1:D52E DD B6 00 -          or  a,(ix+REGA)
 4224 D1:D531 DD 77 00 -          ld  (ix+REGA),a
 4225 D1:D534 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4226 D1:D53A 87 -  -  -          add a,a
 4227 D1:D53B CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4228 D1:D541 DD 70 04 -          ld  (ix+REGSR),b
 4229 D1:D544 41 -  -  -          ld  b,c
 4230 D1:D545 CD 0C AE D1         WRITE_ACCESS
 4231 D1:D549 E1 -  -  -      pop hl
 4232 D1:D54A C3 69 B4 D1     jp i6502NextLoad
 4233 D1:D54E -  -  -  -  
 4234 D1:D54E -  -  -  -  ;absolut,X	SLO oper,X	1F	3	7  	
 4235 D1:D54E -  -  -  -  inst6502_slo_absx:
 4236 D1:D54E ED 33 07 -      ADDCYC(7)
 4237 D1:D551 CD 51 B5 D1     PUSH_ABSXSPLIT_NODEP
 4238 D1:D555 CD E9 AD D1         READ_ACCESS
 4239 D1:D559 CB 27 -  -          sla a
 4240 D1:D55B 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4241 D1:D55C -  -  -  -          ;Split oper
 4242 D1:D55C DD 46 04 -          ld  b,(ix+REGSR)
 4243 D1:D55F CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4244 D1:D565 DD B6 00 -          or  a,(ix+REGA)
 4245 D1:D568 DD 77 00 -          ld  (ix+REGA),a
 4246 D1:D56B CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4247 D1:D571 87 -  -  -          add a,a
 4248 D1:D572 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4249 D1:D578 DD 70 04 -          ld  (ix+REGSR),b
 4250 D1:D57B 41 -  -  -          ld  b,c
 4251 D1:D57C CD 0C AE D1         WRITE_ACCESS
 4252 D1:D580 E1 -  -  -      pop hl
 4253 D1:D581 C3 69 B4 D1     jp i6502NextLoad
 4254 D1:D585 -  -  -  -  
 4255 D1:D585 -  -  -  -  ;absolut,Y	SLO oper,Y	1B	3	7  	
 4256 D1:D585 -  -  -  -  inst6502_slo_absy:
 4257 D1:D585 ED 33 07 -      ADDCYC(7)
 4258 D1:D588 CD 4C B5 D1     PUSH_ABSYSPLIT_NODEP
 4259 D1:D58C CD E9 AD D1         READ_ACCESS
 4260 D1:D590 CB 27 -  -          sla a
 4261 D1:D592 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4262 D1:D593 -  -  -  -          ;Split oper
 4263 D1:D593 DD 46 04 -          ld  b,(ix+REGSR)
 4264 D1:D596 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4265 D1:D59C DD B6 00 -          or  a,(ix+REGA)
 4266 D1:D59F DD 77 00 -          ld  (ix+REGA),a
 4267 D1:D5A2 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4268 D1:D5A8 87 -  -  -          add a,a
 4269 D1:D5A9 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4270 D1:D5AF DD 70 04 -          ld  (ix+REGSR),b
 4271 D1:D5B2 41 -  -  -          ld  b,c
 4272 D1:D5B3 CD 0C AE D1         WRITE_ACCESS
 4273 D1:D5B7 E1 -  -  -      pop hl
 4274 D1:D5B8 C3 69 B4 D1     jp i6502NextLoad
 4275 D1:D5BC -  -  -  -  
 4276 D1:D5BC -  -  -  -  ;(indirect,X)	SLO (oper,X)	03	2	8  	
 4277 D1:D5BC -  -  -  -  isnt6502_slo_indx:
 4278 D1:D5BC ED 33 08 -      ADDCYC(8)
 4279 D1:D5BF E5 -  -  -      push hl
 4280 D1:D5C0 7E -  -  -          ld  a,(hl)
 4281 D1:D5C1 21 00 38 D0         ld  hl,ZEROPAGE
 4282 D1:D5C5 85 -  -  -          add a,L
 4283 D1:D5C6 DD 86 01 -          add a,(ix+REGX)
 4284 D1:D5C9 6F -  -  -          ld  L,a
 4285 D1:D5CA 7E -  -  -          ld  a,(hl)
 4286 D1:D5CB 2C -  -  -          inc L
 4287 D1:D5CC 56 -  -  -          ld  d,(hl)
 4288 D1:D5CD 42 -  -  -          ld  b,d
 4289 D1:D5CE 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4290 D1:D5D0 ED 4C -  -          mlt bc
 4291 D1:D5D2 21 00 40 D0         ld  hl,PAGETABLE
 4292 D1:D5D6 09 -  -  -          add hl,bc
 4293 D1:D5D7 ED 27 -  -          ld  hl,(hl)
 4294 D1:D5D9 06 00 -  -          ld  b,0
 4295 D1:D5DB 4F -  -  -          ld  c,a
 4296 D1:D5DC 09 -  -  -          add hl,bc
 4297 D1:D5DD CD E9 AD D1         READ_ACCESS
 4298 D1:D5E1 CB 27 -  -          sla a
 4299 D1:D5E3 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4300 D1:D5E4 -  -  -  -          ;Split oper
 4301 D1:D5E4 DD 46 04 -          ld  b,(ix+REGSR)
 4302 D1:D5E7 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4303 D1:D5ED DD B6 00 -          or  a,(ix+REGA)
 4304 D1:D5F0 DD 77 00 -          ld  (ix+REGA),a
 4305 D1:D5F3 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4306 D1:D5F9 87 -  -  -          add a,a
 4307 D1:D5FA CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4308 D1:D600 DD 70 04 -          ld  (ix+REGSR),b
 4309 D1:D603 41 -  -  -          ld  b,c
 4310 D1:D604 CD 0C AE D1         WRITE_ACCESS
 4311 D1:D608 E1 -  -  -      pop hl
 4312 D1:D609 C3 69 B4 D1     jp  i6502NextLoad
 4313 D1:D60D -  -  -  -  
 4314 D1:D60D -  -  -  -  ;(indirect),Y	SLO (oper),Y	13	2	8  
 4315 D1:D60D -  -  -  -  inst6502_slo_indy:
 4316 D1:D60D ED 33 08 -      ADDCYC(8)
 4317 D1:D610 E5 -  -  -      push hl
 4318 D1:D611 7E -  -  -          ld  a,(hl)
 4319 D1:D612 21 00 38 D0         ld  hl,ZEROPAGE
 4320 D1:D616 85 -  -  -          add a,L
 4321 D1:D617 6F -  -  -          ld  L,a
 4322 D1:D618 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4323 D1:D619 2C -  -  -          inc L
 4324 D1:D61A DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4325 D1:D61D 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4326 D1:D61E 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4327 D1:D620 24 -  -  -          inc h
 4328 D1:D621 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4329 D1:D622 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4330 D1:D624 ED 6C -  -          mlt hl          ;23.
 4331 D1:D626 01 00 40 D0         ld  bc,PAGETABLE
 4332 D1:D62A 09 -  -  -          add hl,bc
 4333 D1:D62B ED 27 -  -          ld  hl,(hl)     ;address get.
 4334 D1:D62D 01 00 00 00         ld  bc,0
 4335 D1:D631 4F -  -  -          ld  c,a
 4336 D1:D632 09 -  -  -          add hl,bc       ;Full address get.
 4337 D1:D633 CD E9 AD D1         READ_ACCESS
 4338 D1:D637 CB 27 -  -          sla a
 4339 D1:D639 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4340 D1:D63A -  -  -  -          ;Split oper
 4341 D1:D63A DD 46 04 -          ld  b,(ix+REGSR)
 4342 D1:D63D CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4343 D1:D643 DD B6 00 -          or  a,(ix+REGA)
 4344 D1:D646 DD 77 00 -          ld  (ix+REGA),a
 4345 D1:D649 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4346 D1:D64F 87 -  -  -          add a,a
 4347 D1:D650 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4348 D1:D656 DD 70 04 -          ld  (ix+REGSR),b
 4349 D1:D659 41 -  -  -          ld  b,c
 4350 D1:D65A CD 0C AE D1         WRITE_ACCESS
 4351 D1:D65E E1 -  -  -      pop hl
 4352 D1:D65F C3 69 B4 D1     jp  i6502NextLoad
 4353 D1:D663 -  -  -  -  
 4354 D1:D663 -  -  -  -  ;-----------------------------------------------------------------------------
 4355 D1:D663 -  -  -  -  ;SRE (LSE) - LSR oper + EOR oper
 4356 D1:D663 -  -  -  -  ;M = 0 -> [76543210] -> C, A EOR M -> A. Affects: CZN
 4357 D1:D663 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4358 D1:D663 -  -  -  -  
 4359 D1:D663 -  -  -  -  ;zeropage	SRE oper	47	2	5  	
 4360 D1:D663 -  -  -  -  inst6502_sre_zp:
 4361 D1:D663 ED 33 05 -      ADDCYC(5)
 4362 D1:D666 7E -  -  -      ld  a,(hl)
 4363 D1:D667 01 00 38 D0     ld  bc,ZEROPAGE
 4364 D1:D66B 81 -  -  -      add a,c
 4365 D1:D66C 4F -  -  -      ld  c,a
 4366 D1:D66D 0A -  -  -      ld  a,(bc)
 4367 D1:D66E CB 3F -  -      srl a
 4368 D1:D670 02 -  -  -      ld  (bc),a
 4369 D1:D671 -  -  -  -      ;Flag breakdown to optimize for split operation
 4370 D1:D671 DD 46 04 -      ld  b,(ix+REGSR)
 4371 D1:D674 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4372 D1:D67A DD AE 00 -      xor a,(ix+REGA)
 4373 D1:D67D DD 77 00 -      ld  (ix+REGA),a
 4374 D1:D680 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4375 D1:D686 87 -  -  -      add a,a
 4376 D1:D687 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4377 D1:D68D DD 70 04 -      ld  (ix+REGSR),b
 4378 D1:D690 C3 69 B4 D1     jp i6502NextLoad
 4379 D1:D694 -  -  -  -  
 4380 D1:D694 -  -  -  -  ;zeropage,X	SRE oper,X	57	2	6  	
 4381 D1:D694 -  -  -  -  inst6502_sre_zpx:
 4382 D1:D694 ED 33 06 -      ADDCYC(6)
 4383 D1:D697 7E -  -  -      ld  a,(hl)
 4384 D1:D698 01 00 38 D0     ld  bc,ZEROPAGE
 4385 D1:D69C 81 -  -  -      add a,c
 4386 D1:D69D DD 86 01 -      add a,(ix+REGX)
 4387 D1:D6A0 4F -  -  -      ld  c,a
 4388 D1:D6A1 0A -  -  -      ld  a,(bc)
 4389 D1:D6A2 CB 3F -  -      srl a
 4390 D1:D6A4 02 -  -  -      ld  (bc),a
 4391 D1:D6A5 -  -  -  -      ;Flag breakdown to optimize for split operation
 4392 D1:D6A5 DD 46 04 -      ld  b,(ix+REGSR)
 4393 D1:D6A8 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4394 D1:D6AE DD AE 00 -      xor a,(ix+REGA)
 4395 D1:D6B1 DD 77 00 -      ld  (ix+REGA),a
 4396 D1:D6B4 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4397 D1:D6BA 87 -  -  -      add a,a
 4398 D1:D6BB CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4399 D1:D6C1 DD 70 04 -      ld  (ix+REGSR),b
 4400 D1:D6C4 C3 69 B4 D1     jp i6502NextLoad
 4401 D1:D6C8 -  -  -  -  
 4402 D1:D6C8 -  -  -  -  ;absolute	SRE oper	4F	3	6  	
 4403 D1:D6C8 -  -  -  -  inst6502_sre_abs:
 4404 D1:D6C8 ED 33 06 -      ADDCYC(6)
 4405 D1:D6CB CD F4 B4 D1     call subroutine6502_abs_split_start
 4406 D1:D6CF E5 -  -  -      push hl
 4407 D1:D6D0 50 -  -  -          ld  d,b
 4408 D1:D6D1 79 -  -  -          ld  a,c
 4409 D1:D6D2 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4410 D1:D6D4 ED 4C -  -          mlt bc
 4411 D1:D6D6 21 00 40 D0         ld  hl,PAGETABLE
 4412 D1:D6DA 09 -  -  -          add hl,bc
 4413 D1:D6DB ED 27 -  -          ld  hl,(hl)
 4414 D1:D6DD 06 00 -  -          ld  b,0
 4415 D1:D6DF 4F -  -  -          ld  c,a
 4416 D1:D6E0 09 -  -  -          add hl,bc   ;full address
 4417 D1:D6E1 CD E9 AD D1         READ_ACCESS
 4418 D1:D6E5 CB 3F -  -          srl a
 4419 D1:D6E7 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4420 D1:D6E8 -  -  -  -          ;Split oper
 4421 D1:D6E8 DD 46 04 -          ld  b,(ix+REGSR)
 4422 D1:D6EB CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4423 D1:D6F1 DD AE 00 -          xor a,(ix+REGA)
 4424 D1:D6F4 DD 77 00 -          ld  (ix+REGA),a
 4425 D1:D6F7 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4426 D1:D6FD 87 -  -  -          add a,a
 4427 D1:D6FE CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4428 D1:D704 DD 70 04 -          ld  (ix+REGSR),b
 4429 D1:D707 41 -  -  -          ld  b,c
 4430 D1:D708 CD 0C AE D1         WRITE_ACCESS
 4431 D1:D70C E1 -  -  -      pop hl
 4432 D1:D70D C3 69 B4 D1     jp i6502NextLoad
 4433 D1:D711 -  -  -  -  
 4434 D1:D711 -  -  -  -  ;absolut,X	SRE oper,X	5F	3	7  	
 4435 D1:D711 -  -  -  -  inst6502_sre_absx:
 4436 D1:D711 ED 33 07 -      ADDCYC(7)
 4437 D1:D714 CD 51 B5 D1     PUSH_ABSXSPLIT_NODEP
 4438 D1:D718 CD E9 AD D1         READ_ACCESS
 4439 D1:D71C CB 3F -  -          srl a
 4440 D1:D71E 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4441 D1:D71F -  -  -  -          ;Split oper
 4442 D1:D71F DD 46 04 -          ld  b,(ix+REGSR)
 4443 D1:D722 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4444 D1:D728 DD AE 00 -          xor a,(ix+REGA)
 4445 D1:D72B DD 77 00 -          ld  (ix+REGA),a
 4446 D1:D72E CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4447 D1:D734 87 -  -  -          add a,a
 4448 D1:D735 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4449 D1:D73B DD 70 04 -          ld  (ix+REGSR),b
 4450 D1:D73E 41 -  -  -          ld  b,c
 4451 D1:D73F CD 0C AE D1         WRITE_ACCESS
 4452 D1:D743 E1 -  -  -      pop hl
 4453 D1:D744 C3 69 B4 D1     jp i6502NextLoad
 4454 D1:D748 -  -  -  -  
 4455 D1:D748 -  -  -  -  ;absolut,Y	SRE oper,Y	5B	3	7  	
 4456 D1:D748 -  -  -  -  inst6502_sre_absy:
 4457 D1:D748 ED 33 07 -      ADDCYC(7)
 4458 D1:D74B CD 4C B5 D1     PUSH_ABSYSPLIT_NODEP
 4459 D1:D74F CD E9 AD D1         READ_ACCESS
 4460 D1:D753 CB 3F -  -          srl a
 4461 D1:D755 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4462 D1:D756 -  -  -  -          ;Split oper
 4463 D1:D756 DD 46 04 -          ld  b,(ix+REGSR)
 4464 D1:D759 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4465 D1:D75F DD AE 00 -          xor a,(ix+REGA)
 4466 D1:D762 DD 77 00 -          ld  (ix+REGA),a
 4467 D1:D765 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4468 D1:D76B 87 -  -  -          add a,a
 4469 D1:D76C CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4470 D1:D772 DD 70 04 -          ld  (ix+REGSR),b
 4471 D1:D775 41 -  -  -          ld  b,c
 4472 D1:D776 CD 0C AE D1         WRITE_ACCESS
 4473 D1:D77A E1 -  -  -      pop hl
 4474 D1:D77B C3 69 B4 D1     jp i6502NextLoad
 4475 D1:D77F -  -  -  -  
 4476 D1:D77F -  -  -  -  ;(indirect,X)	SRE (oper,X)	43	2	8  	
 4477 D1:D77F -  -  -  -  isnt6502_sre_indx:
 4478 D1:D77F ED 33 08 -      ADDCYC(8)
 4479 D1:D782 E5 -  -  -      push hl
 4480 D1:D783 7E -  -  -          ld  a,(hl)
 4481 D1:D784 21 00 38 D0         ld  hl,ZEROPAGE
 4482 D1:D788 85 -  -  -          add a,L
 4483 D1:D789 DD 86 01 -          add a,(ix+REGX)
 4484 D1:D78C 6F -  -  -          ld  L,a
 4485 D1:D78D 7E -  -  -          ld  a,(hl)
 4486 D1:D78E 2C -  -  -          inc L
 4487 D1:D78F 56 -  -  -          ld  d,(hl)
 4488 D1:D790 42 -  -  -          ld  b,d
 4489 D1:D791 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4490 D1:D793 ED 4C -  -          mlt bc
 4491 D1:D795 21 00 40 D0         ld  hl,PAGETABLE
 4492 D1:D799 09 -  -  -          add hl,bc
 4493 D1:D79A ED 27 -  -          ld  hl,(hl)
 4494 D1:D79C 06 00 -  -          ld  b,0
 4495 D1:D79E 4F -  -  -          ld  c,a
 4496 D1:D79F 09 -  -  -          add hl,bc
 4497 D1:D7A0 CD E9 AD D1         READ_ACCESS
 4498 D1:D7A4 CB 3F -  -          srl a
 4499 D1:D7A6 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4500 D1:D7A7 -  -  -  -          ;Split oper
 4501 D1:D7A7 DD 46 04 -          ld  b,(ix+REGSR)
 4502 D1:D7AA CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4503 D1:D7B0 DD AE 00 -          xor a,(ix+REGA)
 4504 D1:D7B3 DD 77 00 -          ld  (ix+REGA),a
 4505 D1:D7B6 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4506 D1:D7BC 87 -  -  -          add a,a
 4507 D1:D7BD CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4508 D1:D7C3 DD 70 04 -          ld  (ix+REGSR),b
 4509 D1:D7C6 41 -  -  -          ld  b,c
 4510 D1:D7C7 CD 0C AE D1         WRITE_ACCESS
 4511 D1:D7CB E1 -  -  -      pop hl
 4512 D1:D7CC C3 69 B4 D1     jp  i6502NextLoad
 4513 D1:D7D0 -  -  -  -  
 4514 D1:D7D0 -  -  -  -  ;(indirect),Y	SRE (oper),Y	53	2	8  
 4515 D1:D7D0 -  -  -  -  inst6502_sre_indy:
 4516 D1:D7D0 ED 33 08 -      ADDCYC(8)
 4517 D1:D7D3 E5 -  -  -      push hl
 4518 D1:D7D4 7E -  -  -          ld  a,(hl)
 4519 D1:D7D5 21 00 38 D0         ld  hl,ZEROPAGE
 4520 D1:D7D9 85 -  -  -          add a,L
 4521 D1:D7DA 6F -  -  -          ld  L,a
 4522 D1:D7DB 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4523 D1:D7DC 2C -  -  -          inc L
 4524 D1:D7DD DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4525 D1:D7E0 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4526 D1:D7E1 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4527 D1:D7E3 24 -  -  -          inc h
 4528 D1:D7E4 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4529 D1:D7E5 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4530 D1:D7E7 ED 6C -  -          mlt hl          ;23.
 4531 D1:D7E9 01 00 40 D0         ld  bc,PAGETABLE
 4532 D1:D7ED 09 -  -  -          add hl,bc
 4533 D1:D7EE ED 27 -  -          ld  hl,(hl)     ;address get.
 4534 D1:D7F0 01 00 00 00         ld  bc,0
 4535 D1:D7F4 4F -  -  -          ld  c,a
 4536 D1:D7F5 09 -  -  -          add hl,bc       ;Full address get.
 4537 D1:D7F6 CD E9 AD D1         READ_ACCESS
 4538 D1:D7FA CB 3F -  -          srl a
 4539 D1:D7FC 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4540 D1:D7FD -  -  -  -          ;Split oper
 4541 D1:D7FD DD 46 04 -          ld  b,(ix+REGSR)
 4542 D1:D800 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4543 D1:D806 DD AE 00 -          xor a,(ix+REGA)
 4544 D1:D809 DD 77 00 -          ld  (ix+REGA),a
 4545 D1:D80C CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4546 D1:D812 87 -  -  -          add a,a
 4547 D1:D813 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4548 D1:D819 DD 70 04 -          ld  (ix+REGSR),b
 4549 D1:D81C 41 -  -  -          ld  b,c
 4550 D1:D81D CD 0C AE D1         WRITE_ACCESS
 4551 D1:D821 E1 -  -  -      pop hl
 4552 D1:D822 C3 69 B4 D1     jp  i6502NextLoad
 4553 D1:D826 -  -  -  -  
 4554 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4555 D1:D826 -  -  -  -  ;USBC (USBC)
 4556 D1:D826 -  -  -  -  ;immediate	USBC #oper	EB	2	2  
 4557 D1:D826 -  -  -  -  ;Map this to instruction $E9 (inst6502_sbc_imm)
 4558 D1:D826 -  -  -  -  
 4559 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4560 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4561 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4562 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4563 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4564 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4565 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4566 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4567 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4568 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4569 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4570 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4571 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4572 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4573 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4574 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4575 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4576 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4577 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4578 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4579 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4580 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4581 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4582 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4583 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4584 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4585 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4586 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4587 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4588 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4589 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4590 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4591 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4592 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4593 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4594 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4595 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4596 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4597 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4598 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4599 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4600 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4601 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4602 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4603 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4604 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4605 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4606 D1:D826 -  -  -  -  ;-----------------------------------------------------------------------------
 4607 D1:D826 -  -  -  -  
 4608 D1:D826 -  -  -  -  inst6502_instruction_set:
 4609 D1:D826 8B CA D1 -  .dl	inst6502_brk					;00
 4610 D1:D829 32 C3 D1 -  .dl	inst6502_ora_indx				;01
 4611 D1:D82C 2D DB D1 -  .dl	inst6502_jam_02 				;02
 4612 D1:D82F BC D5 D1 -  .dl	isnt6502_slo_indx				;03
 4613 D1:D832 FB CB D1 -  .dl	inst6502_nop_zp 				;04
 4614 D1:D835 4D C2 D1 -  .dl	inst6502_ora_zp					;05
 4615 D1:D838 EA C3 D1 -  .dl	inst6502_asl_zp					;06
 4616 D1:D83B A0 D4 D1 -  .dl	inst6502_slo_zp 				;07
 4617 D1:D83E 73 BB D1 -  .dl	inst6502_php					;08
 4618 D1:D841 2B C2 D1 -  .dl	inst6502_ora_imm				;09
 4619 D1:D844 C1 C3 D1 -  .dl	inst6502_asl					;0A
 4620 D1:D847 54 CC D1 -  .dl	instr6502_anc_imm				;0B
 4621 D1:D84A 09 CC D1 -  .dl	inst6502_nop_abs				;0C
 4622 D1:D84D A2 C2 D1 -  .dl	inst6502_ora_abs				;0D
 4623 D1:D850 45 C4 D1 -  .dl	inst6502_asl_abs				;0E
 4624 D1:D853 05 D5 D1 -  .dl	inst6502_slo_abs				;0F
 4625 D1:D856 5E CA D1 -  .dl	inst6502_bpl					;10
 4626 D1:D859 76 C3 D1 -  .dl	inst6502_ora_indy				;11
 4627 D1:D85C 27 DB D1 -  .dl	inst6502_jam_12_halt			;12 JAM. Used to halt emulation for inspection
 4628 D1:D85F 0D D6 D1 -  .dl	inst6502_slo_indy				;13
 4629 D1:D862 02 CC D1 -  .dl	inst6502_nop_zpx				;14
 4630 D1:D865 76 C2 D1 -  .dl	inst6502_ora_zpx				;15
 4631 D1:D868 16 C4 D1 -  .dl	inst6502_asl_zpx				;16
 4632 D1:D86B D1 D4 D1 -  .dl	inst6502_slo_zpx				;17
 4633 D1:D86E CB C7 D1 -  .dl	inst6502_clc					;18
 4634 D1:D871 08 C3 D1 -  .dl	inst6502_ora_absy				;19
 4635 D1:D874 ED CB D1 -  .dl	inst6502_nop_implied    		;1A
 4636 D1:D877 85 D5 D1 -  .dl	inst6502_slo_absy				;1B
 4637 D1:D87A 1A CC D1 -  .dl	inst6502_nop_absx				;1C
 4638 D1:D87D DE C2 D1 -  .dl	inst6502_ora_absx				;1D
 4639 D1:D880 89 C4 D1 -  .dl	inst6502_asl_absx				;1E
 4640 D1:D883 4E D5 D1 -  .dl	inst6502_slo_absx				;1F
 4641 D1:D886 55 CB D1 -  .dl	inst6502_jsr					;20
 4642 D1:D889 06 C0 D1 -  .dl	inst6502_and_indx				;21
 4643 D1:D88C 2D DB D1 -  .dl	inst6502_jam_22 				;22
 4644 D1:D88F 82 D1 D1 -  .dl	isnt6502_rla_indx				;23
 4645 D1:D892 A1 CB D1 -  .dl	inst6502_bit_zp					;24
 4646 D1:D895 21 BF D1 -  .dl	inst6502_and_zp					;25
 4647 D1:D898 E1 C5 D1 -  .dl	inst6502_rol_zp					;26
 4648 D1:D89B 54 D0 D1 -  .dl	inst6502_rla_zp 				;27
 4649 D1:D89E B5 BB D1 -  .dl	inst6502_plp					;28
 4650 D1:D8A1 FF BE D1 -  .dl	inst6502_and_imm				;29
 4651 D1:D8A4 B5 C5 D1 -  .dl	inst6502_rol					;2A
 4652 D1:D8A7 54 CC D1 -  .dl	instr6502_anc2_imm				;2B
 4653 D1:D8AA C5 CB D1 -  .dl	inst6502_bit_abs				;2C
 4654 D1:D8AD 76 BF D1 -  .dl	inst6502_and_abs				;2D
 4655 D1:D8B0 42 C6 D1 -  .dl	inst6502_rol_abs				;2E
 4656 D1:D8B3 BF D0 D1 -  .dl	inst6502_rla_abs				;2F
 4657 D1:D8B6 40 CA D1 -  .dl	inst6502_bmi					;30
 4658 D1:D8B9 4A C0 D1 -  .dl	inst6502_and_indy				;31
 4659 D1:D8BC 2D DB D1 -  .dl	inst6502_jam_32 				;32
 4660 D1:D8BF D7 D1 D1 -  .dl	inst6502_rla_indy				;33
 4661 D1:D8C2 02 CC D1 -  .dl	inst6502_nop_zpx				;34
 4662 D1:D8C5 4A BF D1 -  .dl	inst6502_and_zpx				;35
 4663 D1:D8C8 10 C6 D1 -  .dl	inst6502_rol_zpx				;36
 4664 D1:D8CB 88 D0 D1 -  .dl	inst6502_rla_zpx				;37
 4665 D1:D8CE F7 C7 D1 -  .dl	inst6502_sec					;38
 4666 D1:D8D1 DC BF D1 -  .dl	inst6502_and_absy				;39
 4667 D1:D8D4 ED CB D1 -  .dl	inst6502_nop_implied			;3A
 4668 D1:D8D7 47 D1 D1 -  .dl	inst6502_rla_absy   			;3B
 4669 D1:D8DA 1A CC D1 -  .dl	inst6502_nop_absx   			;3C
 4670 D1:D8DD B2 BF D1 -  .dl	inst6502_and_absx				;3D
 4671 D1:D8E0 8A C6 D1 -  .dl	inst6502_rol_absx				;3E
 4672 D1:D8E3 0C D1 D1 -  .dl	inst6502_rla_absx   			;3F
 4673 D1:D8E6 C4 CA D1 -  .dl	inst6502_rti					;40
 4674 D1:D8E9 9C C1 D1 -  .dl	inst6502_eor_indx				;41
 4675 D1:D8EC 2D DB D1 -  .dl	inst6502_jam_42     			;42
 4676 D1:D8EF 7F D7 D1 -  .dl	isnt6502_sre_indx   			;43
 4677 D1:D8F2 FB CB D1 -  .dl	inst6502_nop_zp     			;44
 4678 D1:D8F5 B7 C0 D1 -  .dl	inst6502_eor_zp					;45
 4679 D1:D8F8 E4 C4 D1 -  .dl	inst6502_lsr_zp					;46
 4680 D1:D8FB 63 D6 D1 -  .dl	inst6502_sre_zp     			;47
 4681 D1:D8FE 5D BB D1 -  .dl	inst6502_pha					;48
 4682 D1:D901 95 C0 D1 -  .dl	inst6502_eor_imm				;49
 4683 D1:D904 BB C4 D1 -  .dl	inst6502_lsr					;4A
 4684 D1:D907 2A CC D1 -  .dl	inst6502_alr_imm    			;4B
 4685 D1:D90A E9 CA D1 -  .dl	inst6052_jmp_abs				;4C
 4686 D1:D90D 0C C1 D1 -  .dl	inst6502_eor_abs				;4D
 4687 D1:D910 3F C5 D1 -  .dl	inst6502_lsr_abs				;4E
 4688 D1:D913 C8 D6 D1 -  .dl	inst6502_sre_abs    			;4F
 4689 D1:D916 6D CA D1 -  .dl	inst6502_bvc					;50
 4690 D1:D919 E0 C1 D1 -  .dl	inst6502_eor_indy				;51
 4691 D1:D91C 2D DB D1 -  .dl	inst6502_jam_52     			;52
 4692 D1:D91F D0 D7 D1 -  .dl	inst6502_sre_indy   			;53
 4693 D1:D922 02 CC D1 -  .dl	inst6502_nop_zpx    			;54
 4694 D1:D925 E0 C0 D1 -  .dl	inst6502_eor_zpx				;55
 4695 D1:D928 10 C5 D1 -  .dl	inst6502_lsr_zpx				;56
 4696 D1:D92B 94 D6 D1 -  .dl	inst6502_sre_zpx    			;57
 4697 D1:D92E E1 C7 D1 -  .dl	inst6502_cli					;58
 4698 D1:D931 72 C1 D1 -  .dl	inst6502_eor_absy				;59
 4699 D1:D934 ED CB D1 -  .dl	inst6502_nop_implied			;5A
 4700 D1:D937 48 D7 D1 -  .dl	inst6502_sre_absy   			;5B
 4701 D1:D93A 1A CC D1 -  .dl	inst6502_nop_absx   			;5C
 4702 D1:D93D 48 C1 D1 -  .dl	inst6502_eor_absx				;5D
 4703 D1:D940 83 C5 D1 -  .dl	inst6502_lsr_absx				;5E
 4704 D1:D943 11 D7 D1 -  .dl	inst6502_sre_absx   			;5F
 4705 D1:D946 87 CB D1 -  .dl	inst6502_rts					;60
 4706 D1:D949 D5 BD D1 -  .dl	inst6502_adc_indx				;61
 4707 D1:D94C 2D DB D1 -  .dl	inst6502_jam_62     			;62
 4708 D1:D94F FE D2 D1 -  .dl	isnt6502_rra_indx   			;63
 4709 D1:D952 FB CB D1 -  .dl	inst6502_nop_zp     			;64
 4710 D1:D955 6D BD D1 -  .dl	inst6502_adc_zp					;65
 4711 D1:D958 EC C6 D1 -  .dl	inst6502_ror_zp					;66
 4712 D1:D95B 31 D2 D1 -  .dl	inst6502_rra_zp     			;67
 4713 D1:D95E 8B BB D1 -  .dl	inst6502_pla					;68
 4714 D1:D961 65 BD D1 -  .dl	inst6502_adc_imm				;69
 4715 D1:D964 C0 C6 D1 -  .dl	inst6502_ror					;6A
 4716 D1:D967 A1 CC D1 -  .dl	instr6502_arr_imm   			;6B
 4717 D1:D96A 0B CB D1 -  .dl	inst6502_jmp_indir				;6C
 4718 D1:D96D 90 BD D1 -  .dl	inst6502_adc_abs				;6D
 4719 D1:D970 4D C7 D1 -  .dl	inst6502_ror_abs				;6E
 4720 D1:D973 74 D2 D1 -  .dl	inst6502_rra_abs    			;6F
 4721 D1:D976 7C CA D1 -  .dl	inst6502_bvs					;70
 4722 D1:D979 00 BE D1 -  .dl	inst6502_adc_indy				;71
 4723 D1:D97C 2D DB D1 -  .dl	inst6502_jam_72     			;72
 4724 D1:D97F 40 D3 D1 -  .dl	inst6502_rra_indy   			;73
 4725 D1:D982 02 CC D1 -  .dl	inst6502_nop_zpx    			;74
 4726 D1:D985 7D BD D1 -  .dl	inst6502_adc_zpx				;75
 4727 D1:D988 1B C7 D1 -  .dl	inst6502_ror_zpx				;76
 4728 D1:D98B 51 D2 D1 -  .dl	inst6502_rra_zpx    			;77
 4729 D1:D98E 0D C8 D1 -  .dl	inst6502_sei					;78
 4730 D1:D991 C4 BD D1 -  .dl	inst6502_adc_absy				;79
 4731 D1:D994 ED CB D1 -  .dl	inst6502_nop_implied			;7A
 4732 D1:D997 D6 D2 D1 -  .dl	inst6502_rra_absy   			;7B
 4733 D1:D99A 1A CC D1 -  .dl	inst6502_nop_absx   			;7C
 4734 D1:D99D B3 BD D1 -  .dl	inst6502_adc_absx				;7D
 4735 D1:D9A0 95 C7 D1 -  .dl	inst6502_ror_absx				;7E
 4736 D1:D9A3 AE D2 D1 -  .dl	inst6502_rra_absx   			;7F
 4737 D1:D9A6 F4 CB D1 -  .dl	inst6502_nop_imm    			;80
 4738 D1:D9A9 B4 B9 D1 -  .dl	inst6502_sta_indx				;81
 4739 D1:D9AC F4 CB D1 -  .dl	inst6502_nop_imm    			;82
 4740 D1:D9AF DD D3 D1 -  .dl	inst6502_sax_indx   			;83
 4741 D1:D9B2 5F BA D1 -  .dl	inst6502_sty_zp					;84
 4742 D1:D9B5 42 B9 D1 -  .dl	inst6502_sta_zp					;85
 4743 D1:D9B8 13 BA D1 -  .dl	inst6502_stx_zp					;86
 4744 D1:D9BB 87 D3 D1 -  .dl	inst6502_sax_zp     			;87
 4745 D1:D9BE A3 BC D1 -  .dl	inst6502_dey					;88
 4746 D1:D9C1 F4 CB D1 -  .dl	inst6502_nop_imm    			;89
 4747 D1:D9C4 0E BB D1 -  .dl	inst6502_txa					;8A
 4748 D1:D9C7 7A CC D1 -  .dl	instr6502_ane_imm   			;8B
 4749 D1:D9CA 86 BA D1 -  .dl	inst6502_sty_abs				;8C
 4750 D1:D9CD 69 B9 D1 -  .dl	inst6502_sta_abs				;8D
 4751 D1:D9D0 3A BA D1 -  .dl	inst6502_stx_abs				;8E
 4752 D1:D9D3 B4 D3 D1 -  .dl	inst6502_sax_abs    			;8F
 4753 D1:D9D6 13 CA D1 -  .dl	inst6502_bcc					;90
 4754 D1:D9D9 E1 B9 D1 -  .dl	inst6502_sta_indy				;91
 4755 D1:D9DC 2D DB D1 -  .dl	inst6502_jam_92     			;92
 4756 D1:D9DF 45 D4 D1 -  .dl	inst6502_sha_indy   			;93
 4757 D1:D9E2 71 BA D1 -  .dl	inst6502_sty_zpx				;94
 4758 D1:D9E5 54 B9 D1 -  .dl	inst6502_sta_zpx				;95
 4759 D1:D9E8 25 BA D1 -  .dl	inst6502_stx_zpy				;96
 4760 D1:D9EB 9C D3 D1 -  .dl	inst6502_sax_zpy    			;97
 4761 D1:D9EE 3C BB D1 -  .dl	inst6502_tya					;98
 4762 D1:D9F1 A1 B9 D1 -  .dl	inst6502_sta_absy				;99
 4763 D1:D9F4 2F BB D1 -  .dl	inst6502_txs					;9A
 4764 D1:D9F7 92 D4 D1 -  .dl	inst6502_tas_absy   			;9B
 4765 D1:D9FA 84 D4 D1 -  .dl	inst6502_shy_absx   			;9C
 4766 D1:D9FD 8E B9 D1 -  .dl	inst6502_sta_absx				;9D
 4767 D1:DA00 76 D4 D1 -  .dl	inst6502_shx_absy   			;9E
 4768 D1:DA03 37 D4 D1 -  .dl	inst6502_sha_absy   			;9F
 4769 D1:DA06 74 B8 D1 -  .dl	inst6502_ldy_imm				;A0
 4770 D1:DA09 1D B7 D1 -  .dl	inst6502_lda_indx				;A1
 4771 D1:DA0C A6 B7 D1 -  .dl	inst6502_ldx_imm				;A2
 4772 D1:DA0F 9E CF D1 -  .dl	inst6502_lax_indx   			;A3
 4773 D1:DA12 93 B8 D1 -  .dl	inst6502_ldy_zp					;A4
 4774 D1:DA15 47 B6 D1 -  .dl	inst6502_lda_zp					;A5
 4775 D1:DA18 C5 B7 D1 -  .dl	inst6502_ldx_zp					;A6
 4776 D1:DA1B E3 CE D1 -  .dl	inst6502_lax_zp     			;A7
 4777 D1:DA1E CC BA D1 -  .dl	inst6502_tay					;A8
 4778 D1:DA21 28 B6 D1 -  .dl	inst6502_lda_imm				;A9
 4779 D1:DA24 AB BA D1 -  .dl	inst6502_tax					;AA
 4780 D1:DA27 2D D0 D1 -  .dl	inst6502_lxa        			;AB
 4781 D1:DA2A E2 B8 D1 -  .dl	inst6502_ldy_abs				;AC
 4782 D1:DA2D 96 B6 D1 -  .dl	inst6502_lda_abs				;AD
 4783 D1:DA30 14 B8 D1 -  .dl	inst6502_ldx_abs				;AE
 4784 D1:DA33 38 CF D1 -  .dl	inst6502_lax_abs    			;AF
 4785 D1:DA36 22 CA D1 -  .dl	inst6502_bcs					;B0
 4786 D1:DA39 5E B7 D1 -  .dl	inst6502_lda_indy				;B1
 4787 D1:DA3C 2D DB D1 -  .dl	inst6502_jam_B2     			;B2
 4788 D1:DA3F E2 CF D1 -  .dl	inst6502_lax_indy   			;B3
 4789 D1:DA42 B9 B8 D1 -  .dl	inst6502_ldy_zpx				;B4
 4790 D1:DA45 6D B6 D1 -  .dl	inst6502_lda_zpx				;B5
 4791 D1:DA48 EB B7 D1 -  .dl	inst6502_ldx_zpy				;B6
 4792 D1:DA4B 0C CF D1 -  .dl	inst6502_lax_zpy    			;B7
 4793 D1:DA4E EC C7 D1 -  .dl	inst6502_clv					;B8
 4794 D1:DA51 F6 B6 D1 -  .dl	inst6502_lda_absy				;B9
 4795 D1:DA54 ED BA D1 -  .dl	inst6502_tsx					;BA
 4796 D1:DA57 B3 CE D1 -  .dl	inst6502_las_absy   			;BB
 4797 D1:DA5A 1B B9 D1 -  .dl	inst6502_ldy_absx				;BC
 4798 D1:DA5D CF B6 D1 -  .dl	inst6502_lda_absx				;BD
 4799 D1:DA60 4D B8 D1 -  .dl	inst6502_ldx_absy				;BE
 4800 D1:DA63 74 CF D1 -  .dl	inst6502_lax_absy   			;BF
 4801 D1:DA66 7C C9 D1 -  .dl	inst6502_cpy_imm				;C0
 4802 D1:DA69 88 C8 D1 -  .dl	inst6502_cmp_indx				;C1
 4803 D1:DA6C F4 CB D1 -  .dl	inst6502_nop_imm    			;C2
 4804 D1:DA6F 5B CD D1 -  .dl	inst6502_dcp_indx   			;C3
 4805 D1:DA72 A2 C9 D1 -  .dl	inst6502_cpy_zp					;C4
 4806 D1:DA75 20 C8 D1 -  .dl	inst6502_cmp_zp					;C5
 4807 D1:DA78 D2 BB D1 -  .dl	inst6502_dec_zp					;C6
 4808 D1:DA7B DA CC D1 -  .dl	inst6502_dcp_zp     			;C7
 4809 D1:DA7E AD BC D1 -  .dl	inst6502_iny					;C8
 4810 D1:DA81 18 C8 D1 -  .dl	inst6502_cmp_imm				;C9
 4811 D1:DA84 85 BC D1 -  .dl	inst6502_dex					;CA
 4812 D1:DA87 0E D4 D1 -  .dl	inst6502_sbx_imm    			;CB
 4813 D1:DA8A D1 C9 D1 -  .dl	inst6502_cpy_abs				;CC
 4814 D1:DA8D 43 C8 D1 -  .dl	inst6502_cmp_abs				;CD
 4815 D1:DA90 1F BC D1 -  .dl	inst6502_dec_abs				;CE
 4816 D1:DA93 01 CD D1 -  .dl	inst6502_dcp_abs    			;CF
 4817 D1:DA96 4F CA D1 -  .dl	inst6502_bne					;D0
 4818 D1:DA99 B3 C8 D1 -  .dl	inst6502_cmp_indy				;D1
 4819 D1:DA9C 2D DB D1 -  .dl	inst6502_jam_D2     			;D2
 4820 D1:DA9F 8D CD D1 -  .dl	inst6502_dcp_indy   			;D3
 4821 D1:DAA2 02 CC D1 -  .dl	inst6502_nop_zpx    			;D4
 4822 D1:DAA5 30 C8 D1 -  .dl	inst6502_cmp_zpx				;D5
 4823 D1:DAA8 F7 BB D1 -  .dl	inst6502_dec_zpx				;D6
 4824 D1:DAAB EC CC D1 -  .dl	inst6520_dcp_zpx    			;D7
 4825 D1:DAAE D6 C7 D1 -  .dl	inst6502_cld					;D8
 4826 D1:DAB1 77 C8 D1 -  .dl	inst6502_cmp_absy				;D9
 4827 D1:DAB4 ED CB D1 -  .dl	inst6502_nop_implied			;DA
 4828 D1:DAB7 43 CD D1 -  .dl	inst6502_dcp_absy   			;DB
 4829 D1:DABA 1A CC D1 -  .dl	inst6502_nop_absx   			;DC
 4830 D1:DABD 66 C8 D1 -  .dl	inst6502_cmp_absx				;DD
 4831 D1:DAC0 5B BC D1 -  .dl	inst6502_dec_absx				;DE
 4832 D1:DAC3 2B CD D1 -  .dl	inst6502_dcp_absx   			;DF
 4833 D1:DAC6 E5 C8 D1 -  .dl	inst6502_cpx_imm				;E0
 4834 D1:DAC9 A2 BE D1 -  .dl	inst6502_sbc_indx				;E1
 4835 D1:DACC F4 CB D1 -  .dl	inst6502_nop_imm    			;E2
 4836 D1:DACF 48 CE D1 -  .dl	inst6502_isc_indx   			;E3
 4837 D1:DAD2 0B C9 D1 -  .dl	inst6502_cpx_zp					;E4
 4838 D1:DAD5 3A BE D1 -  .dl	inst6502_sbc_zp					;E5
 4839 D1:DAD8 B2 BC D1 -  .dl	inst6502_inc_zp					;E6
 4840 D1:DADB C4 CD D1 -  .dl	inst6502_isc_zp     			;E7
 4841 D1:DADE A8 BC D1 -  .dl	inst6502_inx					;E8
 4842 D1:DAE1 32 BE D1 -  .dl	inst6502_sbc_imm				;E9
 4843 D1:DAE4 E6 CB D1 -  .dl	inst6502_nop					;EA
 4844 D1:DAE7 32 BE D1 -  .dl	inst6502_sbc_imm			    ;EB *DUPLICATE OF E9
 4845 D1:DAEA 3A C9 D1 -  .dl	inst6502_cpx_abs				;EC
 4846 D1:DAED 5D BE D1 -  .dl	inst6502_sbc_abs				;ED
 4847 D1:DAF0 FF BC D1 -  .dl	inst6502_inc_abs				;EE
 4848 D1:DAF3 EB CD D1 -  .dl	inst6502_isc_abs    			;EF
 4849 D1:DAF6 31 CA D1 -  .dl	inst6502_beq					;F0
 4850 D1:DAF9 CD BE D1 -  .dl	inst6502_sbc_indy				;F1
 4851 D1:DAFC 2D DB D1 -  .dl	inst6502_jam_F2     			;F2
 4852 D1:DAFF 7B CE D1 -  .dl	inst6502_isc_indy   			;F3
 4853 D1:DB02 02 CC D1 -  .dl	inst6502_nop_zpx    			;F4
 4854 D1:DB05 4A BE D1 -  .dl	inst6502_sbc_zpx				;F5
 4855 D1:DB08 D7 BC D1 -  .dl	inst6502_inc_zpx				;F6
 4856 D1:DB0B D6 CD D1 -  .dl	inst6520_isc_zpx    			;F7
 4857 D1:DB0E 02 C8 D1 -  .dl	inst6502_sed					;F8
 4858 D1:DB11 91 BE D1 -  .dl	inst6502_sbc_absy				;F9
 4859 D1:DB14 ED CB D1 -  .dl	inst6502_nop_implied			;FA
 4860 D1:DB17 2F CE D1 -  .dl	inst6502_isc_absy   			;FB
 4861 D1:DB1A 1A CC D1 -  .dl	inst6502_nop_absx   			;FC
 4862 D1:DB1D 80 BE D1 -  .dl	inst6502_sbc_absx				;FD
 4863 D1:DB20 3B BD D1 -  .dl	inst6502_inc_absx				;FE
 4864 D1:DB23 16 CE D1 -  .dl	inst6502_isc_absx   			;FF
 4865 D1:DB26 -  -  -  -  
 4866 D1:DB26 -  -  -  -  ;-----------------------------------------------------------------------------
 4867 D1:DB26 -  -  -  -  ;-----------------------------------------------------------------------------
 4868 D1:DB26 -  -  -  -  ;-----------------------------------------------------------------------------
 4869 D1:DB26 -  -  -  -  ;These instructions are located here because they perform a function outside
 4870 D1:DB26 -  -  -  -  ;the context of emulating instructions. These are mapped to instructions that
 4871 D1:DB26 -  -  -  -  ;would, on the real hardware, freeze the CPU and require a reset to continue.
 4872 D1:DB26 -  -  -  -  ;
 4873 D1:DB26 -  -  -  -  ;Here, they'll let us perform useful things. Like exiting the emulator.
 4874 D1:DB26 -  -  -  -  ;Or jamming in one spot. Or other things in the future. Debugging things.
 4875 D1:DB26 -  -  -  -  ;Future stuff like breakpoints and console output. That sorta thing.
 4876 D1:DB26 -  -  -  -  ;
 4877 D1:DB26 -  -  -  -  
 4878 D1:DB26 -  -  -  -  inst6502_:
 4879 D1:DB26 C9 -  -  -      ret
 4880 D1:DB27 -  -  -  -  
 4881 D1:DB27 -  -  -  -  inst6502_jam_12_halt:
 4882 D1:DB27 18 FE -  -      jr $
 4883 D1:DB29 C3 82 B4 D1     jp i6502FinishLoad
 4884 D1:DB2D -  -  -  -  
 4885 D1:DB2D -  -  -  -  inst6502_jam_02:
 4886 D1:DB2D -  -  -  -  inst6502_jam_22:
 4887 D1:DB2D -  -  -  -  inst6502_jam_32:
 4888 D1:DB2D -  -  -  -  inst6502_jam_42:
 4889 D1:DB2D -  -  -  -  inst6502_jam_52:
 4890 D1:DB2D -  -  -  -  inst6502_jam_62:
 4891 D1:DB2D -  -  -  -  inst6502_jam_72:
 4892 D1:DB2D -  -  -  -  inst6502_jam_92:
 4893 D1:DB2D -  -  -  -  inst6502_jam_B2:
 4894 D1:DB2D -  -  -  -  inst6502_jam_D2:
 4895 D1:DB2D -  -  -  -  inst6502_jam_F2:
 4896 D1:DB2D C9 -  -  -      ret
 4897 D1:DB2E -  -  -  -  
 4898 D1:DB2E -  -  -  -  
 4899 D1:DB2E -  -  -  -  
 4900 D1:DB2E -  -  -  -  
 4901 D1:DB2E -  -  -  -  
 4902 D1:DB2E -  -  -  -  
 4903 D1:DB2E -  -  -  -  
 4904 D1:DB2E -  -  -  -  
 4905 D1:DB2E -  -  -  -  
 4906 D1:DB2E -  -  -  -  
 4907 D1:DB2E -  -  -  -  
 4908 D1:DB2E -  -  -  -  
 4909 D1:DB2E -  -  -  -  
Listing for file "main.z80"
  783 D1:DB2E -  -  -  -  #include "debug.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    1 D1:DB2E -  -  -  -  ;This has all the tables needed to drive the debugger.
    2 D1:DB2E -  -  -  -  #include "debug_itab.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug_itab.z80"
    1 D1:DB2E -  -  -  -  inst6502_opcode_width_table:
    2 D1:DB2E 01 -  -  -  .db 1    ;0: 
    3 D1:DB2F 02 -  -  -  .db 2    ;1: zpg,X
    4 D1:DB30 03 -  -  -  .db 3    ;2: ind
    5 D1:DB31 03 -  -  -  .db 3    ;3: abs
    6 D1:DB32 03 -  -  -  .db 3    ;4: abs,X
    7 D1:DB33 02 -  -  -  .db 2    ;5: X,ind
    8 D1:DB34 01 -  -  -  .db 1    ;6: A
    9 D1:DB35 02 -  -  -  .db 2    ;7: zpg
   10 D1:DB36 02 -  -  -  .db 2    ;8: rel
   11 D1:DB37 02 -  -  -  .db 2    ;9: #
   12 D1:DB38 01 -  -  -  .db 1    ;10: impl
   13 D1:DB39 02 -  -  -  .db 2    ;11: ind,Y
   14 D1:DB3A 03 -  -  -  .db 3    ;12: abs,Y
   15 D1:DB3B 02 -  -  -  .db 2    ;13: zpg,Y
   16 D1:DB3C -  -  -  -  
   17 D1:DB3C -  -  -  -  
   18 D1:DB3C -  -  -  -  ;Note: 1=1byteOper, 2=2byteOper, -=1byteRelOper. Other chrs are literal
   19 D1:DB3C -  -  -  -  
   20 D1:DB3C -  -  -  -  inst6502_disassembler:
   21 D1:DB3C 01 -  -  -  .db 1,""  ;
   22 D1:DB3D 04 31 2C 58 .db 4,"1,X"  ;
   23 D1:DB41 04 28 32 29 .db 4,"(2)"  ;
   24 D1:DB45 02 32 -  -  .db 2,"2"  ;
   25 D1:DB47 04 32 2C 58 .db 4,"2,X"  ;
   26 D1:DB4B 06 28 31 2C 
              58 29 -  -  .db 6,"(1,X)"  ;
   27 D1:DB51 02 41 -  -  .db 2,"A"  ;
   28 D1:DB53 02 31 -  -  .db 2,"1"  ;
   29 D1:DB55 02 2D -  -  .db 2,"-"  ;
   30 D1:DB57 03 23 31 -  .db 3,"#1"  ;
   31 D1:DB5A 01 -  -  -  .db 1,""  ;
   32 D1:DB5B 06 28 31 29 
              2C 59 -  -  .db 6,"(1),Y"  ;
   33 D1:DB61 04 32 2C 59 .db 4,"2,Y"  ;
   34 D1:DB65 04 31 2C 59 .db 4,"1,Y"  ;
   35 D1:DB69 -  -  -  -  
   36 D1:DB69 -  -  -  -  inst6502_disassembly_table:
   37 D1:DB69 42 52 4B 0A .db "BRK", 10     ;0x00
   38 D1:DB6D 4F 52 41 05 .db "ORA", 5     ;0x01
   39 D1:DB71 4A 41 4D 00 .db "JAM", 0     ;0x02
   40 D1:DB75 53 4C 4F 05 .db "SLO", 5     ;0x03
   41 D1:DB79 4E 4F 50 07 .db "NOP", 7     ;0x04
   42 D1:DB7D 4F 52 41 07 .db "ORA", 7     ;0x05
   43 D1:DB81 41 53 4C 07 .db "ASL", 7     ;0x06
   44 D1:DB85 53 4C 4F 07 .db "SLO", 7     ;0x07
   45 D1:DB89 50 48 50 0A .db "PHP", 10     ;0x08
   46 D1:DB8D 4F 52 41 09 .db "ORA", 9     ;0x09
   47 D1:DB91 41 53 4C 06 .db "ASL", 6     ;0x0A
   48 D1:DB95 41 4E 43 09 .db "ANC", 9     ;0x0B
   49 D1:DB99 4E 4F 50 03 .db "NOP", 3     ;0x0C
   50 D1:DB9D 4F 52 41 03 .db "ORA", 3     ;0x0D
   51 D1:DBA1 41 53 4C 03 .db "ASL", 3     ;0x0E
   52 D1:DBA5 53 4C 4F 03 .db "SLO", 3     ;0x0F
   53 D1:DBA9 42 50 4C 08 .db "BPL", 8     ;0x10
   54 D1:DBAD 4F 52 41 0B .db "ORA", 11     ;0x11
   55 D1:DBB1 4A 41 4D 00 .db "JAM", 0     ;0x12
   56 D1:DBB5 53 4C 4F 0B .db "SLO", 11     ;0x13
   57 D1:DBB9 4E 4F 50 01 .db "NOP", 1     ;0x14
   58 D1:DBBD 4F 52 41 01 .db "ORA", 1     ;0x15
   59 D1:DBC1 41 53 4C 01 .db "ASL", 1     ;0x16
   60 D1:DBC5 53 4C 4F 01 .db "SLO", 1     ;0x17
   61 D1:DBC9 43 4C 43 0A .db "CLC", 10     ;0x18
   62 D1:DBCD 4F 52 41 0C .db "ORA", 12     ;0x19
   63 D1:DBD1 4E 4F 50 0A .db "NOP", 10     ;0x1A
   64 D1:DBD5 53 4C 4F 0C .db "SLO", 12     ;0x1B
   65 D1:DBD9 4E 4F 50 04 .db "NOP", 4     ;0x1C
   66 D1:DBDD 4F 52 41 04 .db "ORA", 4     ;0x1D
   67 D1:DBE1 41 53 4C 04 .db "ASL", 4     ;0x1E
   68 D1:DBE5 53 4C 4F 04 .db "SLO", 4     ;0x1F
   69 D1:DBE9 4A 53 52 03 .db "JSR", 3     ;0x20
   70 D1:DBED 41 4E 44 05 .db "AND", 5     ;0x21
   71 D1:DBF1 4A 41 4D 00 .db "JAM", 0     ;0x22
   72 D1:DBF5 52 4C 41 05 .db "RLA", 5     ;0x23
   73 D1:DBF9 42 49 54 07 .db "BIT", 7     ;0x24
   74 D1:DBFD 41 4E 44 07 .db "AND", 7     ;0x25
   75 D1:DC01 52 4F 4C 07 .db "ROL", 7     ;0x26
   76 D1:DC05 52 4C 41 07 .db "RLA", 7     ;0x27
   77 D1:DC09 50 4C 50 0A .db "PLP", 10     ;0x28
   78 D1:DC0D 41 4E 44 09 .db "AND", 9     ;0x29
   79 D1:DC11 52 4F 4C 06 .db "ROL", 6     ;0x2A
   80 D1:DC15 41 4E 43 09 .db "ANC", 9     ;0x2B
   81 D1:DC19 42 49 54 03 .db "BIT", 3     ;0x2C
   82 D1:DC1D 41 4E 44 03 .db "AND", 3     ;0x2D
   83 D1:DC21 52 4F 4C 03 .db "ROL", 3     ;0x2E
   84 D1:DC25 52 4C 41 03 .db "RLA", 3     ;0x2F
   85 D1:DC29 42 4D 49 08 .db "BMI", 8     ;0x30
   86 D1:DC2D 41 4E 44 0B .db "AND", 11     ;0x31
   87 D1:DC31 4A 41 4D 00 .db "JAM", 0     ;0x32
   88 D1:DC35 52 4C 41 0B .db "RLA", 11     ;0x33
   89 D1:DC39 4E 4F 50 01 .db "NOP", 1     ;0x34
   90 D1:DC3D 41 4E 44 01 .db "AND", 1     ;0x35
   91 D1:DC41 52 4F 4C 01 .db "ROL", 1     ;0x36
   92 D1:DC45 52 4C 41 01 .db "RLA", 1     ;0x37
   93 D1:DC49 53 45 43 0A .db "SEC", 10     ;0x38
   94 D1:DC4D 41 4E 44 0C .db "AND", 12     ;0x39
   95 D1:DC51 4E 4F 50 0A .db "NOP", 10     ;0x3A
   96 D1:DC55 52 4C 41 0C .db "RLA", 12     ;0x3B
   97 D1:DC59 4E 4F 50 04 .db "NOP", 4     ;0x3C
   98 D1:DC5D 41 4E 44 04 .db "AND", 4     ;0x3D
   99 D1:DC61 52 4F 4C 04 .db "ROL", 4     ;0x3E
  100 D1:DC65 52 4C 41 04 .db "RLA", 4     ;0x3F
  101 D1:DC69 52 54 49 0A .db "RTI", 10     ;0x40
  102 D1:DC6D 45 4F 52 05 .db "EOR", 5     ;0x41
  103 D1:DC71 4A 41 4D 00 .db "JAM", 0     ;0x42
  104 D1:DC75 53 52 45 05 .db "SRE", 5     ;0x43
  105 D1:DC79 4E 4F 50 07 .db "NOP", 7     ;0x44
  106 D1:DC7D 45 4F 52 07 .db "EOR", 7     ;0x45
  107 D1:DC81 4C 53 52 07 .db "LSR", 7     ;0x46
  108 D1:DC85 53 52 45 07 .db "SRE", 7     ;0x47
  109 D1:DC89 50 48 41 0A .db "PHA", 10     ;0x48
  110 D1:DC8D 45 4F 52 09 .db "EOR", 9     ;0x49
  111 D1:DC91 4C 53 52 06 .db "LSR", 6     ;0x4A
  112 D1:DC95 41 4C 52 09 .db "ALR", 9     ;0x4B
  113 D1:DC99 4A 4D 50 03 .db "JMP", 3     ;0x4C
  114 D1:DC9D 45 4F 52 03 .db "EOR", 3     ;0x4D
  115 D1:DCA1 4C 53 52 03 .db "LSR", 3     ;0x4E
  116 D1:DCA5 53 52 45 03 .db "SRE", 3     ;0x4F
  117 D1:DCA9 42 56 43 08 .db "BVC", 8     ;0x50
  118 D1:DCAD 45 4F 52 0B .db "EOR", 11     ;0x51
  119 D1:DCB1 4A 41 4D 00 .db "JAM", 0     ;0x52
  120 D1:DCB5 53 52 45 0B .db "SRE", 11     ;0x53
  121 D1:DCB9 4E 4F 50 01 .db "NOP", 1     ;0x54
  122 D1:DCBD 45 4F 52 01 .db "EOR", 1     ;0x55
  123 D1:DCC1 4C 53 52 01 .db "LSR", 1     ;0x56
  124 D1:DCC5 53 52 45 01 .db "SRE", 1     ;0x57
  125 D1:DCC9 43 4C 49 0A .db "CLI", 10     ;0x58
  126 D1:DCCD 45 4F 52 0C .db "EOR", 12     ;0x59
  127 D1:DCD1 4E 4F 50 0A .db "NOP", 10     ;0x5A
  128 D1:DCD5 53 52 45 0C .db "SRE", 12     ;0x5B
  129 D1:DCD9 4E 4F 50 04 .db "NOP", 4     ;0x5C
  130 D1:DCDD 45 4F 52 04 .db "EOR", 4     ;0x5D
  131 D1:DCE1 4C 53 52 04 .db "LSR", 4     ;0x5E
  132 D1:DCE5 53 52 45 04 .db "SRE", 4     ;0x5F
  133 D1:DCE9 52 54 53 0A .db "RTS", 10     ;0x60
  134 D1:DCED 41 44 43 05 .db "ADC", 5     ;0x61
  135 D1:DCF1 4A 41 4D 00 .db "JAM", 0     ;0x62
  136 D1:DCF5 52 52 41 05 .db "RRA", 5     ;0x63
  137 D1:DCF9 4E 4F 50 07 .db "NOP", 7     ;0x64
  138 D1:DCFD 41 44 43 07 .db "ADC", 7     ;0x65
  139 D1:DD01 52 4F 52 07 .db "ROR", 7     ;0x66
  140 D1:DD05 52 52 41 07 .db "RRA", 7     ;0x67
  141 D1:DD09 50 4C 41 0A .db "PLA", 10     ;0x68
  142 D1:DD0D 41 44 43 09 .db "ADC", 9     ;0x69
  143 D1:DD11 52 4F 52 06 .db "ROR", 6     ;0x6A
  144 D1:DD15 41 52 52 09 .db "ARR", 9     ;0x6B
  145 D1:DD19 4A 4D 50 02 .db "JMP", 2     ;0x6C
  146 D1:DD1D 41 44 43 03 .db "ADC", 3     ;0x6D
  147 D1:DD21 52 4F 52 03 .db "ROR", 3     ;0x6E
  148 D1:DD25 52 52 41 03 .db "RRA", 3     ;0x6F
  149 D1:DD29 42 56 53 08 .db "BVS", 8     ;0x70
  150 D1:DD2D 41 44 43 0B .db "ADC", 11     ;0x71
  151 D1:DD31 4A 41 4D 00 .db "JAM", 0     ;0x72
  152 D1:DD35 52 52 41 0B .db "RRA", 11     ;0x73
  153 D1:DD39 4E 4F 50 01 .db "NOP", 1     ;0x74
  154 D1:DD3D 41 44 43 01 .db "ADC", 1     ;0x75
  155 D1:DD41 52 4F 52 01 .db "ROR", 1     ;0x76
  156 D1:DD45 52 52 41 01 .db "RRA", 1     ;0x77
  157 D1:DD49 53 45 49 0A .db "SEI", 10     ;0x78
  158 D1:DD4D 41 44 43 0C .db "ADC", 12     ;0x79
  159 D1:DD51 4E 4F 50 0A .db "NOP", 10     ;0x7A
  160 D1:DD55 52 52 41 0C .db "RRA", 12     ;0x7B
  161 D1:DD59 4E 4F 50 04 .db "NOP", 4     ;0x7C
  162 D1:DD5D 41 44 43 04 .db "ADC", 4     ;0x7D
  163 D1:DD61 52 4F 52 04 .db "ROR", 4     ;0x7E
  164 D1:DD65 52 52 41 04 .db "RRA", 4     ;0x7F
  165 D1:DD69 4E 4F 50 09 .db "NOP", 9     ;0x80
  166 D1:DD6D 53 54 41 05 .db "STA", 5     ;0x81
  167 D1:DD71 4E 4F 50 09 .db "NOP", 9     ;0x82
  168 D1:DD75 53 41 58 05 .db "SAX", 5     ;0x83
  169 D1:DD79 53 54 59 07 .db "STY", 7     ;0x84
  170 D1:DD7D 53 54 41 07 .db "STA", 7     ;0x85
  171 D1:DD81 53 54 58 07 .db "STX", 7     ;0x86
  172 D1:DD85 53 41 58 07 .db "SAX", 7     ;0x87
  173 D1:DD89 44 45 59 0A .db "DEY", 10     ;0x88
  174 D1:DD8D 4E 4F 50 09 .db "NOP", 9     ;0x89
  175 D1:DD91 54 58 41 0A .db "TXA", 10     ;0x8A
  176 D1:DD95 41 4E 45 09 .db "ANE", 9     ;0x8B
  177 D1:DD99 53 54 59 03 .db "STY", 3     ;0x8C
  178 D1:DD9D 53 54 41 03 .db "STA", 3     ;0x8D
  179 D1:DDA1 53 54 58 03 .db "STX", 3     ;0x8E
  180 D1:DDA5 53 41 58 03 .db "SAX", 3     ;0x8F
  181 D1:DDA9 42 43 43 08 .db "BCC", 8     ;0x90
  182 D1:DDAD 53 54 41 0B .db "STA", 11     ;0x91
  183 D1:DDB1 4A 41 4D 00 .db "JAM", 0     ;0x92
  184 D1:DDB5 53 48 41 0B .db "SHA", 11     ;0x93
  185 D1:DDB9 53 54 59 01 .db "STY", 1     ;0x94
  186 D1:DDBD 53 54 41 01 .db "STA", 1     ;0x95
  187 D1:DDC1 53 54 58 0D .db "STX", 13     ;0x96
  188 D1:DDC5 53 41 58 0D .db "SAX", 13     ;0x97
  189 D1:DDC9 54 59 41 0A .db "TYA", 10     ;0x98
  190 D1:DDCD 53 54 41 0C .db "STA", 12     ;0x99
  191 D1:DDD1 54 58 53 0A .db "TXS", 10     ;0x9A
  192 D1:DDD5 54 41 53 0C .db "TAS", 12     ;0x9B
  193 D1:DDD9 53 48 59 04 .db "SHY", 4     ;0x9C
  194 D1:DDDD 53 54 41 04 .db "STA", 4     ;0x9D
  195 D1:DDE1 53 48 58 0C .db "SHX", 12     ;0x9E
  196 D1:DDE5 53 48 41 0C .db "SHA", 12     ;0x9F
  197 D1:DDE9 4C 44 59 09 .db "LDY", 9     ;0xA0
  198 D1:DDED 4C 44 41 05 .db "LDA", 5     ;0xA1
  199 D1:DDF1 4C 44 58 09 .db "LDX", 9     ;0xA2
  200 D1:DDF5 4C 41 58 05 .db "LAX", 5     ;0xA3
  201 D1:DDF9 4C 44 59 07 .db "LDY", 7     ;0xA4
  202 D1:DDFD 4C 44 41 07 .db "LDA", 7     ;0xA5
  203 D1:DE01 4C 44 58 07 .db "LDX", 7     ;0xA6
  204 D1:DE05 4C 41 58 07 .db "LAX", 7     ;0xA7
  205 D1:DE09 54 41 59 0A .db "TAY", 10     ;0xA8
  206 D1:DE0D 4C 44 41 09 .db "LDA", 9     ;0xA9
  207 D1:DE11 54 41 58 0A .db "TAX", 10     ;0xAA
  208 D1:DE15 4C 58 41 09 .db "LXA", 9     ;0xAB
  209 D1:DE19 4C 44 59 03 .db "LDY", 3     ;0xAC
  210 D1:DE1D 4C 44 41 03 .db "LDA", 3     ;0xAD
  211 D1:DE21 4C 44 58 03 .db "LDX", 3     ;0xAE
  212 D1:DE25 4C 41 58 03 .db "LAX", 3     ;0xAF
  213 D1:DE29 42 43 53 08 .db "BCS", 8     ;0xB0
  214 D1:DE2D 4C 44 41 0B .db "LDA", 11     ;0xB1
  215 D1:DE31 4A 41 4D 00 .db "JAM", 0     ;0xB2
  216 D1:DE35 4C 41 58 0B .db "LAX", 11     ;0xB3
  217 D1:DE39 4C 44 59 01 .db "LDY", 1     ;0xB4
  218 D1:DE3D 4C 44 41 01 .db "LDA", 1     ;0xB5
  219 D1:DE41 4C 44 58 0D .db "LDX", 13     ;0xB6
  220 D1:DE45 4C 41 58 0D .db "LAX", 13     ;0xB7
  221 D1:DE49 43 4C 56 0A .db "CLV", 10     ;0xB8
  222 D1:DE4D 4C 44 41 0C .db "LDA", 12     ;0xB9
  223 D1:DE51 54 53 58 0A .db "TSX", 10     ;0xBA
  224 D1:DE55 4C 41 53 0C .db "LAS", 12     ;0xBB
  225 D1:DE59 4C 44 59 04 .db "LDY", 4     ;0xBC
  226 D1:DE5D 4C 44 41 04 .db "LDA", 4     ;0xBD
  227 D1:DE61 4C 44 58 0C .db "LDX", 12     ;0xBE
  228 D1:DE65 4C 41 58 0C .db "LAX", 12     ;0xBF
  229 D1:DE69 43 50 59 09 .db "CPY", 9     ;0xC0
  230 D1:DE6D 43 4D 50 05 .db "CMP", 5     ;0xC1
  231 D1:DE71 4E 4F 50 09 .db "NOP", 9     ;0xC2
  232 D1:DE75 44 43 50 05 .db "DCP", 5     ;0xC3
  233 D1:DE79 43 50 59 07 .db "CPY", 7     ;0xC4
  234 D1:DE7D 43 4D 50 07 .db "CMP", 7     ;0xC5
  235 D1:DE81 44 45 43 07 .db "DEC", 7     ;0xC6
  236 D1:DE85 44 43 50 07 .db "DCP", 7     ;0xC7
  237 D1:DE89 49 4E 59 0A .db "INY", 10     ;0xC8
  238 D1:DE8D 43 4D 50 09 .db "CMP", 9     ;0xC9
  239 D1:DE91 44 45 58 0A .db "DEX", 10     ;0xCA
  240 D1:DE95 53 42 58 09 .db "SBX", 9     ;0xCB
  241 D1:DE99 43 50 59 03 .db "CPY", 3     ;0xCC
  242 D1:DE9D 43 4D 50 03 .db "CMP", 3     ;0xCD
  243 D1:DEA1 44 45 43 03 .db "DEC", 3     ;0xCE
  244 D1:DEA5 44 43 50 03 .db "DCP", 3     ;0xCF
  245 D1:DEA9 42 4E 45 08 .db "BNE", 8     ;0xD0
  246 D1:DEAD 43 4D 50 0B .db "CMP", 11     ;0xD1
  247 D1:DEB1 4A 41 4D 00 .db "JAM", 0     ;0xD2
  248 D1:DEB5 44 43 50 0B .db "DCP", 11     ;0xD3
  249 D1:DEB9 4E 4F 50 01 .db "NOP", 1     ;0xD4
  250 D1:DEBD 43 4D 50 01 .db "CMP", 1     ;0xD5
  251 D1:DEC1 44 45 43 01 .db "DEC", 1     ;0xD6
  252 D1:DEC5 44 43 50 01 .db "DCP", 1     ;0xD7
  253 D1:DEC9 43 4C 44 0A .db "CLD", 10     ;0xD8
  254 D1:DECD 43 4D 50 0C .db "CMP", 12     ;0xD9
  255 D1:DED1 4E 4F 50 0A .db "NOP", 10     ;0xDA
  256 D1:DED5 44 43 50 0C .db "DCP", 12     ;0xDB
  257 D1:DED9 4E 4F 50 04 .db "NOP", 4     ;0xDC
  258 D1:DEDD 43 4D 50 04 .db "CMP", 4     ;0xDD
  259 D1:DEE1 44 45 43 04 .db "DEC", 4     ;0xDE
  260 D1:DEE5 44 43 50 04 .db "DCP", 4     ;0xDF
  261 D1:DEE9 43 50 58 09 .db "CPX", 9     ;0xE0
  262 D1:DEED 53 42 43 05 .db "SBC", 5     ;0xE1
  263 D1:DEF1 4E 4F 50 09 .db "NOP", 9     ;0xE2
  264 D1:DEF5 49 53 43 05 .db "ISC", 5     ;0xE3
  265 D1:DEF9 43 50 58 07 .db "CPX", 7     ;0xE4
  266 D1:DEFD 53 42 43 07 .db "SBC", 7     ;0xE5
  267 D1:DF01 49 4E 43 07 .db "INC", 7     ;0xE6
  268 D1:DF05 49 53 43 07 .db "ISC", 7     ;0xE7
  269 D1:DF09 49 4E 58 0A .db "INX", 10     ;0xE8
  270 D1:DF0D 53 42 43 09 .db "SBC", 9     ;0xE9
  271 D1:DF11 4E 4F 50 0A .db "NOP", 10     ;0xEA
  272 D1:DF15 55 53 42 09 .db "USB", 9     ;0xEB
  273 D1:DF19 43 50 58 03 .db "CPX", 3     ;0xEC
  274 D1:DF1D 53 42 43 03 .db "SBC", 3     ;0xED
  275 D1:DF21 49 4E 43 03 .db "INC", 3     ;0xEE
  276 D1:DF25 49 53 43 03 .db "ISC", 3     ;0xEF
  277 D1:DF29 42 45 51 08 .db "BEQ", 8     ;0xF0
  278 D1:DF2D 53 42 43 0B .db "SBC", 11     ;0xF1
  279 D1:DF31 4A 41 4D 00 .db "JAM", 0     ;0xF2
  280 D1:DF35 49 53 43 0B .db "ISC", 11     ;0xF3
  281 D1:DF39 4E 4F 50 01 .db "NOP", 1     ;0xF4
  282 D1:DF3D 53 42 43 01 .db "SBC", 1     ;0xF5
  283 D1:DF41 49 4E 43 01 .db "INC", 1     ;0xF6
  284 D1:DF45 49 53 43 01 .db "ISC", 1     ;0xF7
  285 D1:DF49 53 45 44 0A .db "SED", 10     ;0xF8
  286 D1:DF4D 53 42 43 0C .db "SBC", 12     ;0xF9
  287 D1:DF51 4E 4F 50 0A .db "NOP", 10     ;0xFA
  288 D1:DF55 49 53 43 0C .db "ISC", 12     ;0xFB
  289 D1:DF59 4E 4F 50 04 .db "NOP", 4     ;0xFC
  290 D1:DF5D 53 42 43 04 .db "SBC", 4     ;0xFD
  291 D1:DF61 49 4E 43 04 .db "INC", 4     ;0xFE
  292 D1:DF65 49 53 43 04 .db "ISC", 4     ;0xFF
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    3 D1:DF69 -  -  -  -  
    4 D1:DF69 -  -  -  -  
    5 D1:DF69 -  -  -  -  ;You must assign a print character routine.
    6 D1:DF69 -  -  -  -  ;You must also write all opcode bytes to operbuf or map operbuf to where written
    7 D1:DF69 -  -  -  -  dbg_printChr    = PrintBigFont
    8 D1:DF69 -  -  -  -  operbuf         = debugram
    9 D1:DF69 -  -  -  -  
   10 D1:DF69 -  -  -  -  
   11 D1:DF69 -  -  -  -  dbg_resetScreen:
   12 D1:DF69 21 00 00 D4     ld  hl,screenBuf1
   13 D1:DF6D 11 01 00 D4     ld  de,screenBuf1+1
   14 D1:DF71 01 FF 57 02     ld  bc,(2*240*320)-1
   15 D1:DF75 36 00 -  -      ld  (hl),$00
   16 D1:DF77 ED B0 -  -      ldir
   17 D1:DF79 AF -  -  -      xor a,a
   18 D1:DF7A CD CA AF D1     call setLineStart
   19 D1:DF7E CD D3 AF D1     call setCurLine
   20 D1:DF82 C9 -  -  -      ret
   21 D1:DF83 -  -  -  -  
   22 D1:DF83 -  -  -  -  dbg_prepNextLine:
   23 D1:DF83 AF -  -  -      xor a,a
   24 D1:DF84 32 F6 31 D0     ld  (xPos),a
   25 D1:DF88 CD A0 B0 D1     call calculateScreenPtr
   26 D1:DF8C EB -  -  -      ex  de,hl
   27 D1:DF8D 21 FF 2B D5     ld  hl,screenBuf2-1
   28 D1:DF91 B7 -  -  -      or  a,a
   29 D1:DF92 ED 52 -  -      sbc hl,de
   30 D1:DF94 -  -  -  -  ;If C: DE in sb2. subtract to set in sb1.
   31 D1:DF94 -  -  -  -  ;If NC: DE in sb1. add to set in sb2.
   32 D1:DF94 21 00 2C 01     ld  hl,320*240
   33 D1:DF98 30 04 -  -      jr  nc,+_
   34 D1:DF9A 21 00 D4 FE     ld  hl,-(320*240)+0
   35 D1:DF9E 19 -  -  -  _:  add hl,de   ;HL set to other buffer. DE points to current buffer.
   36 D1:DF9F 01 00 0A 00     ld  bc,320*8    ;copy one line from other buffer to current buffer.
   37 D1:DFA3 7E -  -  -  _:  ld  a,(hl)
   38 D1:DFA4 C6 01 -  -      add a,1     ;carry if $FF (white), NC if not
   39 D1:DFA6 9F -  -  -      sbc a,a     ;if carry, returns to $FF, else is black
   40 D1:DFA7 77 -  -  -      ld  (hl),a
   41 D1:DFA8 ED A0 -  -      ldi
   42 D1:DFAA EA A3 DF D1     jp  pe,-_
   43 D1:DFAE 3A F7 31 D0     ld  a,(yPos)
   44 D1:DFB2 FE 1D -  -      cp  a,29
   45 D1:DFB4 20 06 -  -      jr  nz,+_
   46 D1:DFB6 21 00 D4 FE     ld  hl,-(320*240)
   47 D1:DFBA 19 -  -  -      add hl,de
   48 D1:DFBB EB -  -  -      ex de,hl        ;if bottom of screen, then reset DE to top of screen.
   49 D1:DFBC D5 -  -  -  _:  push de
   50 D1:DFBD E1 -  -  -      pop hl
   51 D1:DFBE 13 -  -  -      inc de
   52 D1:DFBF 71 -  -  -      ld  (hl),c
   53 D1:DFC0 01 BF 08 00     ld  bc,(320*7)-1    ;erase whole line below it to prepare for writing.
   54 D1:DFC4 ED B0 -  -      ldir
   55 D1:DFC6 C9 -  -  -      ret
   56 D1:DFC7 -  -  -  -  
   57 D1:DFC7 -  -  -  -  ;Input: ix = core_memory_ix 
   58 D1:DFC7 -  -  -  -  ;Output: Text onscreen
   59 D1:DFC7 -  -  -  -  dbg_printLine:
   60 D1:DFC7 E5 C5 D5 DD 
              E5 FD E5 F5     push hl \ push bc \ push de \ push ix \ push iy \ push af
   61 D1:DFCF ED 23 00 -      lea hl,iy+0
   62 D1:DFD2 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl
   63 D1:DFD5 11 00 00 00     ld  de,DEBUG_PRINT_START_CYCLE
   64 D1:DFD9 B7 -  -  -      or  a,a
   65 D1:DFDA ED 52 -  -      sbc hl,de
   66 D1:DFDC DA C0 E0 D1     jp  c,dbg_printLine_noPrint
   67 D1:DFE0 -  -  -  -  
   68 D1:DFE0 3E 1A -  -      ld  a,$1A   ;blue
   69 D1:DFE2 32 22 B0 D1     ld  (fontBGColor_var),a
   70 D1:DFE6 32 6F B0 D1     ld  (smallFontBGColor_var),a
   71 D1:DFEA DD 27 0E -      ld  hl,(ix+CURRENT_OPCODES)
   72 D1:DFED 22 F9 31 D0     ld  (operbuf),hl
   73 D1:DFF1 CD 83 DF D1     call dbg_prepNextLine
   74 D1:DFF5 CD DE AF D1     call newLine
   75 D1:DFF9 DD 7E 06 -      ld  a,(ix+REGPC+1)
   76 D1:DFFC CD 3B B0 D1     call printSmallNumPair
   77 D1:E000 DD 7E 05 -      ld  a,(ix+REGPC+0)
   78 D1:E003 CD 3B B0 D1     call printSmallNumPair
   79 D1:E007 3E 20 -  -      ld  a,' '
   80 D1:E009 CD 0B B0 D1     call printBigFont
   81 D1:E00D -  -  -  -      ;
   82 D1:E00D 3E 41 -  -      ld  a,'A'
   83 D1:E00F CD 0B B0 D1     call printBigFont
   84 D1:E013 DD 7E 00 -      ld  a,(ix+REGA)
   85 D1:E016 CD 3B B0 D1     call printSmallNumPair
   86 D1:E01A 3E 20 -  -      ld  a,' '
   87 D1:E01C CD 0B B0 D1     call printBigFont
   88 D1:E020 -  -  -  -      ;
   89 D1:E020 3E 58 -  -      ld  a,'X'
   90 D1:E022 CD 0B B0 D1     call printBigFont
   91 D1:E026 DD 7E 01 -      ld  a,(ix+REGX)
   92 D1:E029 CD 3B B0 D1     call printSmallNumPair
   93 D1:E02D 3E 20 -  -      ld  a,' '
   94 D1:E02F CD 0B B0 D1     call printBigFont
   95 D1:E033 -  -  -  -      ;
   96 D1:E033 3E 59 -  -      ld  a,'Y'
   97 D1:E035 CD 0B B0 D1     call printBigFont
   98 D1:E039 DD 7E 02 -      ld  a,(ix+REGY)
   99 D1:E03C CD 3B B0 D1     call printSmallNumPair
  100 D1:E040 3E 20 -  -      ld  a,' '
  101 D1:E042 CD 0B B0 D1     call printBigFont
  102 D1:E046 -  -  -  -      ;
  103 D1:E046 3E 53 -  -      ld  a,'S'
  104 D1:E048 CD 0B B0 D1     call printBigFont
  105 D1:E04C DD 7E 03 -      ld  a,(ix+REGSP)
  106 D1:E04F CD 3B B0 D1     call printSmallNumPair
  107 D1:E053 3E 20 -  -      ld  a,' '
  108 D1:E055 CD 0B B0 D1     call printBigFont
  109 D1:E059 -  -  -  -      ;
  110 D1:E059 3E 50 -  -      ld  a,'P'
  111 D1:E05B CD 0B B0 D1     call printBigFont
  112 D1:E05F DD 7E 04 -      ld  a,(ix+REGSR)
  113 D1:E062 CD 3B B0 D1     call printSmallNumPair
  114 D1:E066 3E 20 -  -      ld  a,' '
  115 D1:E068 CD 0B B0 D1     call printBigFont
  116 D1:E06C -  -  -  -  
  117 D1:E06C -  -  -  -      ;
  118 D1:E06C -  -  -  -  ;    ld  hl,dbg_printLine_str001
  119 D1:E06C -  -  -  -  ;    call printString
  120 D1:E06C -  -  -  -  ;    ld  b,5
  121 D1:E06C -  -  -  -  ;    lea hl,ix+0
  122 D1:E06C -  -  -  -  ;_:  ld  a,(hl)
  123 D1:E06C -  -  -  -  ;    inc hl
  124 D1:E06C -  -  -  -  ;    push bc
  125 D1:E06C -  -  -  -  ;        push hl
  126 D1:E06C -  -  -  -  ;            call printSmallNumPair
  127 D1:E06C -  -  -  -  ;            ld  a,' '
  128 D1:E06C -  -  -  -  ;            call printBigFont
  129 D1:E06C -  -  -  -  ;        pop hl
  130 D1:E06C -  -  -  -  ;    pop bc
  131 D1:E06C -  -  -  -  ;    djnz -_
  132 D1:E06C -  -  -  -  
  133 D1:E06C DD 7E 0D -      ld  a,(ix+CYCLES_CURRENT+2)
  134 D1:E06F CD 3B B0 D1     call printSmallNumPair
  135 D1:E073 DD 7E 0C -      ld  a,(ix+CYCLES_CURRENT+1)
  136 D1:E076 CD 3B B0 D1     call printSmallNumPair
  137 D1:E07A DD 7E 0B -      ld  a,(ix+CYCLES_CURRENT+0)
  138 D1:E07D CD 3B B0 D1     call printSmallNumPair
  139 D1:E081 3E 20 -  -      ld  a,' '
  140 D1:E083 CD 0B B0 D1     call printBigFont
  141 D1:E087 2A F9 31 D0     ld  hl,(operbuf)
  142 D1:E08B DD 2F 0E -      ld  (ix+CURRENT_OPCODES),hl
  143 D1:E08E 7D -  -  -      ld  a,L
  144 D1:E08F CD B0 E1 D1     call dbg_getInstSize
  145 D1:E093 06 03 -  -      ld  b,3
  146 D1:E095 4F -  -  -      ld  c,a
  147 D1:E096 0C -  -  -      inc c
  148 D1:E097 ED 22 0E -      lea hl,ix+CURRENT_OPCODES
  149 D1:E09A 7E -  -  -  _:  ld  a,(hl)
  150 D1:E09B 23 -  -  -      inc hl
  151 D1:E09C E5 -  -  -      push hl
  152 D1:E09D 0D -  -  -          dec c
  153 D1:E09E F2 A3 E0 D1         jp p,+_
  154 D1:E0A2 0C -  -  -          inc c   ;never let c go below zero.
  155 D1:E0A3 C5 -  -  -  _:      push bc
  156 D1:E0A4 28 06 -  -              jr  z,+_
  157 D1:E0A6 CD 3B B0 D1             call printSmallNumPair
  158 D1:E0AA 18 06 -  -              jr ++_
  159 D1:E0AC 3E 20 -  -  _:          ld  a,' '
  160 D1:E0AE CD 0B B0 D1             call printBigFont
  161 D1:E0B2 C1 -  -  -  _:      pop bc
  162 D1:E0B3 E1 -  -  -      pop hl
  163 D1:E0B4 10 E4 -  -      djnz ----_
  164 D1:E0B6 3E 20 -  -      ld  a,' '
  165 D1:E0B8 CD 0B B0 D1     call printBigFont
  166 D1:E0BC CD C8 E1 D1     call dbg_printDisassembly
  167 D1:E0C0 -  -  -  -  
  168 D1:E0C0 -  -  -  -      ;
  169 D1:E0C0 -  -  -  -      ;Remove section below when done testing nestest for timings
  170 D1:E0C0 -  -  -  -      ;
  171 D1:E0C0 -  -  -  -  dbg_printLine_noPrint:
  172 D1:E0C0 11 00 00 00     ld  de,0
  173 D1:E0C4 2A 1F 34 D0     ld  hl,(timings_base)
  174 D1:E0C8 5E -  -  -      ld  e,(hl)
  175 D1:E0C9 23 -  -  -      inc hl
  176 D1:E0CA 56 -  -  -      ld  d,(hl)
  177 D1:E0CB 23 -  -  -      inc hl
  178 D1:E0CC 22 1F 34 D0     ld  (timings_base),hl
  179 D1:E0D0 DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  180 D1:E0D3 B7 -  -  -      or  a,a
  181 D1:E0D4 ED 52 -  -      sbc hl,de
  182 D1:E0D6 28 17 -  -      jr  z,+_
  183 D1:E0D8 21 FF FF FF     ld  hl,-1
  184 D1:E0DC DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  185 D1:E0DF CD DE AF D1     call newLine
  186 D1:E0E3 21 73 E1 D1     ld  hl,dbg_printLine_timeMismatch
  187 D1:E0E7 CD F5 AF D1     call printString
  188 D1:E0EB DD 36 14 01     ld  (ix+CORE_ERROR_LEVEL),1
  189 D1:E0EF 2A 1F 34 D0 _:  ld  hl,(timings_base)
  190 D1:E0F3 7E -  -  -      ld  a,(hl)
  191 D1:E0F4 23 -  -  -      inc hl
  192 D1:E0F5 22 1F 34 D0     ld  (timings_base),hl
  193 D1:E0F9 DD BE 04 -      cp  a,(ix+REGSR)
  194 D1:E0FC 28 17 -  -      jr  z,+_
  195 D1:E0FE 21 FF FF FF     ld  hl,-1
  196 D1:E102 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  197 D1:E105 CD DE AF D1     call newLine
  198 D1:E109 21 8D E1 D1     ld  hl,dbg_printLine_statusRegisterMismatch
  199 D1:E10D CD F5 AF D1     call printString
  200 D1:E111 DD 36 14 02     ld  (ix+CORE_ERROR_LEVEL),2
  201 D1:E115 -  -  -  -  _:
  202 D1:E115 -  -  -  -      ;
  203 D1:E115 -  -  -  -      ;End debug-debug section
  204 D1:E115 -  -  -  -      ;
  205 D1:E115 CD 01 AF D1     call fastCopy
  206 D1:E119 AF -  -  -      xor a,a     ;black
  207 D1:E11A 32 22 B0 D1     ld  (fontBGColor_var),a
  208 D1:E11E 32 6F B0 D1     ld  (smallFontBGColor_var),a
  209 D1:E122 -  -  -  -  
  210 D1:E122 F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  211 D1:E12A -  -  -  -      ;push hl \ push bc \ push de \ push ix \ push iy \ push af
  212 D1:E12A C9 -  -  -      ret
  213 D1:E12B -  -  -  -  
  214 D1:E12B -  -  -  -  
  215 D1:E12B -  -  -  -      ;also remove this when done timing debugging
  216 D1:E12B 11 00 00 00     ld  de,0
  217 D1:E12F 2A 1F 34 D0     ld  hl,(timings_base)
  218 D1:E133 5E -  -  -      ld  e,(hl)
  219 D1:E134 23 -  -  -      inc hl
  220 D1:E135 56 -  -  -      ld  d,(hl)
  221 D1:E136 23 -  -  -      inc hl
  222 D1:E137 22 1F 34 D0     ld  (timings_base),hl
  223 D1:E13B DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  224 D1:E13E B7 -  -  -      or  a,a
  225 D1:E13F ED 52 -  -      sbc hl,de
  226 D1:E141 28 13 -  -      jr  z,+_
  227 D1:E143 21 FF FF FF     ld  hl,-1
  228 D1:E147 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  229 D1:E14A CD DE AF D1     call newLine
  230 D1:E14E 21 73 E1 D1     ld  hl,dbg_printLine_timeMismatch
  231 D1:E152 CD F5 AF D1     call printString
  232 D1:E156 -  -  -  -  _:  ;
  233 D1:E156 -  -  -  -      ;End debug-debug section
  234 D1:E156 -  -  -  -      ;
  235 D1:E156 CD 01 AF D1     call fastCopy
  236 D1:E15A AF -  -  -      xor a,a     ;black
  237 D1:E15B 32 22 B0 D1     ld  (fontBGColor_var),a
  238 D1:E15F 32 6F B0 D1     ld  (smallFontBGColor_var),a
  239 D1:E163 F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  240 D1:E16B C9 -  -  -      ret
  241 D1:E16C -  -  -  -  
  242 D1:E16C -  -  -  -  dbg_printLine_str001:
  243 D1:E16C 41 58 59 53 
              50 20 00 -  .db "AXYSP ",0
  244 D1:E173 -  -  -  -  dbg_printLine_timeMismatch:
  245 D1:E173 43 50 55 20 
              54 65 73 74 
              20 74 69 6D 
              69 6E 67 20 
              6D 69 73 6D 
              61 74 63 68 
              2E 00 -  -  .db "CPU Test timing mismatch.",0
  246 D1:E18D -  -  -  -  dbg_printLine_statusRegisterMismatch:
  247 D1:E18D -  -  -  -  ;    0123456789012345678901234567890123456789
  248 D1:E18D 43 50 55 20 
              54 65 73 74 
              20 73 74 61 
              74 75 73 20 
              72 65 67 69 
              73 74 65 72 
              20 6D 69 73 
              6D 61 74 63 
              68 2E 00 -  .db "CPU Test status register mismatch.",0
  249 D1:E1B0 -  -  -  -  
  250 D1:E1B0 -  -  -  -  
  251 D1:E1B0 -  -  -  -  
  252 D1:E1B0 -  -  -  -  
  253 D1:E1B0 -  -  -  -  
  254 D1:E1B0 -  -  -  -  
  255 D1:E1B0 -  -  -  -  ;A=instruction. Returns: A=size
  256 D1:E1B0 -  -  -  -  dbg_getInstSize:
  257 D1:E1B0 E5 D5 -  -      push hl \ push de
  258 D1:E1B2 57 -  -  -          ld  d,a
  259 D1:E1B3 1E 04 -  -          ld  e,4
  260 D1:E1B5 ED 5C -  -          mlt de
  261 D1:E1B7 21 6C DB D1         ld  hl,inst6502_disassembly_table+3
  262 D1:E1BB 19 -  -  -          add hl,de
  263 D1:E1BC 16 00 -  -          ld  d,0
  264 D1:E1BE 5E -  -  -          ld  e,(hl)
  265 D1:E1BF 21 2E DB D1         ld  hl,inst6502_opcode_width_table
  266 D1:E1C3 19 -  -  -          add hl,de
  267 D1:E1C4 7E -  -  -          ld  a,(hl)
  268 D1:E1C5 D1 E1 -  -      pop de \ pop hl
  269 D1:E1C7 C9 -  -  -      ret
  270 D1:E1C8 -  -  -  -  
  271 D1:E1C8 -  -  -  -  dbg_printDisassembly:
  272 D1:E1C8 F5 C5 D5 E5 
              DD E5 -  -      push af \ push bc \ push de \ push hl \ push ix
  273 D1:E1CE -  -  -  -      ;find entry in disassembly table
  274 D1:E1CE 2A F9 31 D0     ld  hl,(operbuf)
  275 D1:E1D2 26 04 -  -      ld  H,4
  276 D1:E1D4 ED 6C -  -      mlt hl
  277 D1:E1D6 11 69 DB D1     ld  de,inst6502_disassembly_table
  278 D1:E1DA 19 -  -  -      add hl,de
  279 D1:E1DB 06 03 -  -      ld  b,3
  280 D1:E1DD 7E -  -  -  _:  ld  a,(hl)
  281 D1:E1DE 23 -  -  -      inc hl
  282 D1:E1DF CD 65 E2 D1     call dbg_printC
  283 D1:E1E3 10 F8 -  -      djnz -_
  284 D1:E1E5 3E 20 -  -      ld  a,' '
  285 D1:E1E7 CD 65 E2 D1     call dbg_printC
  286 D1:E1EB 46 -  -  -      ld  b,(hl)
  287 D1:E1EC 04 -  -  -      inc b
  288 D1:E1ED -  -  -  -      ;Instruction addressing mode in B. Now find text for that address mode.
  289 D1:E1ED 21 3C DB D1     ld  hl,inst6502_disassembler
  290 D1:E1F1 11 00 00 00     ld  de,0
  291 D1:E1F5 5E -  -  -  _:  ld  e,(hl)
  292 D1:E1F6 19 -  -  -      add hl,de
  293 D1:E1F7 10 FC -  -      djnz -_
  294 D1:E1F9 1D -  -  -      dec e
  295 D1:E1FA 28 29 -  -      jr  z,dbg_printDisassembly_end  ;stop if text is zero-sized
  296 D1:E1FC ED 52 -  -      sbc hl,de   ;rewind to start of text part of instruction. E is text length.
  297 D1:E1FE 43 -  -  -      ld  b,e
  298 D1:E1FF -  -  -  -  dbg_printDisassembly_printOperandLoop:
  299 D1:E1FF 7E -  -  -      ld  a,(hl)
  300 D1:E200 23 -  -  -      inc hl
  301 D1:E201 FE 31 -  -      cp  a,'1'
  302 D1:E203 20 06 -  -      jr  nz,+_
  303 D1:E205 CD 49 E2 D1     call dbg_printOperand1
  304 D1:E209 18 18 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  305 D1:E20B FE 32 -  -  _:  cp  a,'2'
  306 D1:E20D 20 06 -  -      jr  nz,+_
  307 D1:E20F CD 41 E2 D1     call dbg_printOperand2
  308 D1:E213 18 0E -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  309 D1:E215 FE 2D -  -  _:  cp  a,'-'
  310 D1:E217 20 06 -  -      jr  nz,+_
  311 D1:E219 CD 2C E2 D1     call dbg_printRel1
  312 D1:E21D 18 04 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  313 D1:E21F CD 65 E2 D1 _:  call dbg_printC
  314 D1:E223 -  -  -  -  dbg_PrintDisassembly_printOperandFallthrough:
  315 D1:E223 10 DA -  -      djnz dbg_printDisassembly_printOperandLoop
  316 D1:E225 -  -  -  -  dbg_printDisassembly_end:
  317 D1:E225 DD E1 E1 D1 
              C1 F1 -  -      pop ix \ pop hl \ pop de \ pop bc \ pop af
  318 D1:E22B C9 -  -  -      ret
  319 D1:E22C -  -  -  -  
  320 D1:E22C -  -  -  -  dbg_printRel1:
  321 D1:E22C 3A FA 31 D0     ld  a,(operbuf+1)
  322 D1:E230 B7 -  -  -      or  a,a
  323 D1:E231 F2 3F E2 D1     jp  p,dbg_printRel1_skipNeg
  324 D1:E235 F5 -  -  -      push af
  325 D1:E236 3E 2D -  -          ld   a,'-'
  326 D1:E238 CD 65 E2 D1         call dbg_printC
  327 D1:E23C F1 -  -  -      pop af
  328 D1:E23D ED 44 -  -      neg
  329 D1:E23F -  -  -  -  dbg_printRel1_skipNeg:
  330 D1:E23F 18 0C -  -      jr dbg_printHex
  331 D1:E241 -  -  -  -  
  332 D1:E241 -  -  -  -  dbg_printOperand2:
  333 D1:E241 3A FB 31 D0     ld  a,(operbuf+2)
  334 D1:E245 CD 4D E2 D1     call dbg_printHex
  335 D1:E249 -  -  -  -  dbg_printOperand1:
  336 D1:E249 3A FA 31 D0     ld  a,(operbuf+1)
  337 D1:E24D -  -  -  -  dbg_printHex:
  338 D1:E24D CD 52 E2 D1     call dispAHex
  339 D1:E251 C9 -  -  -      ret
  340 D1:E252 -  -  -  -  
  341 D1:E252 -  -  -  -  dispAHex:
  342 D1:E252 F5 -  -  -      push af
  343 D1:E253 CD 5A E2 D1         call +_
  344 D1:E257 F1 -  -  -      pop af
  345 D1:E258 18 04 -  -      jr  ++_
  346 D1:E25A 1F -  -  -  _:  rra
  347 D1:E25B 1F -  -  -      rra
  348 D1:E25C 1F -  -  -      rra
  349 D1:E25D 1F -  -  -      rra
  350 D1:E25E F6 F0 -  -  _:  or  a,$F0
  351 D1:E260 27 -  -  -      daa
  352 D1:E261 C6 A0 -  -      add a,$A0
  353 D1:E263 CE 40 -  -      adc a,$40
  354 D1:E265 -  -  -  -  dbg_printC:
  355 D1:E265 E5 -  -  -      push hl
  356 D1:E266 C5 -  -  -          push bc
  357 D1:E267 CD 0B B0 D1             call dbg_printChr
  358 D1:E26B C1 -  -  -          pop bc
  359 D1:E26C E1 -  -  -      pop hl
  360 D1:E26D C9 -  -  -      ret
Listing for file "main.z80"
  784 D1:E26E -  -  -  -  .echo "Main program size: ",$-programStart
