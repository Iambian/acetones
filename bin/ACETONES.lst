    1 00:0000 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "main.z80"
    2 00:0000 -  -  -  -  .org userMem-2
    3 D1:A87F EF 7B -  -  .db $EF, $7B
    4 D1:A881 -  -  -  -  
    5 D1:A881 -  -  -  -  ;SPASM help msg
    6 D1:A881 -  -  -  -  ;-E = Assemble eZ80 code
    7 D1:A881 -  -  -  -  ;-T = Generate code listing
    8 D1:A881 -  -  -  -  ;-C = Code counter mode
    9 D1:A881 -  -  -  -  ;-L = Symbol table mode
   10 D1:A881 -  -  -  -  ;-S = Stats mode
   11 D1:A881 -  -  -  -  ;-O = Don't write to output file
   12 D1:A881 -  -  -  -  ;-I [directory] = Add include directory
   13 D1:A881 -  -  -  -  ;-A = Labels are cAse-sensitive
   14 D1:A881 -  -  -  -  ;-D<name>[=value] = Create a define 'name' [with 'value']
   15 D1:A881 -  -  -  -  ;-N = Don't use colors for messages
   16 D1:A881 -  -  -  -  ;-V <Expression> = Pipe expression directly into assembly
   17 D1:A881 -  -  -  -  ;-H = Print this help message
   18 D1:A881 -  -  -  -  
   19 D1:A881 -  -  -  -  
   20 D1:A881 -  -  -  -  
   21 D1:A881 -  -  -  -  
   22 D1:A881 -  -  -  -  programStart:
   23 D1:A881 F3 -  -  -      di
   24 D1:A882 21 00 00 F5     ld  hl,mpKeyMode
   25 D1:A886 36 00 -  -      ld  (hl),0          ;An assumption is being made on keypad's starting state
   26 D1:A888 ED 73 FC 31 
              D0 -  -  -      ld  (save_spl),sp
   27 D1:A88D ED 6E -  -      ld  a,MB
   28 D1:A88F 32 FF 31 D0     ld  (save_mbase),a
   29 D1:A893 3E D0 -  -      ld  a,$D0
   30 D1:A895 ED 6D -  -      ld  MB,a
   31 D1:A897 CD 2E AF D1     call startGfx
   32 D1:A89B -  -  -  -      ;
   33 D1:A89B -  -  -  -      ; todo; write test 6502 program, map it into rom.
   34 D1:A89B -  -  -  -      ; map virtual screen device into ram too. 32x30 screen ascii display
   35 D1:A89B -  -  -  -      ; is probably looking nice right about now.
   36 D1:A89B -  -  -  -      ; Could probably map it into PPU space since we're not actually doing
   37 D1:A89B -  -  -  -      ; anything about that until long after we're done testing core integrity
   38 D1:A89B -  -  -  -      ; You'll probably want to create a mockup vector table then do some equate
   39 D1:A89B -  -  -  -      ; magic to offset it and map it to $FFXX such that the three vectors will
   40 D1:A89B -  -  -  -      ; magically line up with $FFFA-$FFFF. NMI, RES, and IRQ. In that order.
   41 D1:A89B -  -  -  -      ; The rest of the page won't need to matter. It could literally be the
   42 D1:A89B -  -  -  -      ; surrounding eZ80 data/code. Just... don't allow writes to it.
   43 D1:A89B -  -  -  -      ;
   44 D1:A89B -  -  -  -  
   45 D1:A89B 21 00 00 D4     ld  hl,screenBuf1
   46 D1:A89F 11 01 00 D4     ld  de,screenBuf1+1
   47 D1:A8A3 01 FF 57 02     ld  bc,(2*240*320)-1
   48 D1:A8A7 36 00 -  -      ld  (hl),$00
   49 D1:A8A9 ED B0 -  -      ldir
   50 D1:A8AB -  -  -  -  
   51 D1:A8AB -  -  -  -      ;Makes sure all non-ROM areas have a mapping
   52 D1:A8AB 21 00 33 D0     ld  hl,scrap_mapping
   53 D1:A8AF 01 01 80 00     ld  bc,$008001
   54 D1:A8B3 1E 00 -  -      ld  e,0
   55 D1:A8B5 CD D4 B4 D1     call i6502_map_pages
   56 D1:A8B9 -  -  -  -  
   57 D1:A8B9 -  -  -  -  
   58 D1:A8B9 -  -  -  -  
   59 D1:A8B9 -  -  -  -      ;load reset vectors
   60 D1:A8B9 21 D6 A8 D1     ld  hl,testVectors
   61 D1:A8BD 01 01 01 00     ld  bc,$000101
   62 D1:A8C1 1E FF -  -      ld  e,$FF
   63 D1:A8C3 CD D4 B4 D1     call i6502_map_pages
   64 D1:A8C7 -  -  -  -      ;load program ROM to lowmem
   65 D1:A8C7 21 D6 A9 D1     ld  hl,testCode
   66 D1:A8CB 01 08 20 00     ld  bc,$002008
   67 D1:A8CF 1E 80 -  -      ld  e,$80
   68 D1:A8D1 CD D4 B4 D1     call i6502_map_pages
   69 D1:A8D5 -  -  -  -      ;map nametable to writeable address space. Write routine to mirror this
   70 D1:A8D5 -  -  -  -      ;memory to screen.
   71 D1:A8D5 21 00 58 D0     ld  hl,NAMETABLE1
   72 D1:A8D9 01 04 20 00     ld  bc,$002004
   73 D1:A8DD 1E 40 -  -      ld  e,$40
   74 D1:A8DF CD D4 B4 D1     call i6502_map_pages
   75 D1:A8E3 -  -  -  -      ;Everything should be ready. Set up the debug environment and then
   76 D1:A8E3 -  -  -  -      ;start the emulation.
   77 D1:A8E3 -  -  -  -      ;jr $
   78 D1:A8E3 CD 81 AF D1     call clearTextBuf
   79 D1:A8E7 3E 01 -  -      ld  a,1
   80 D1:A8E9 CD CE AF D1     call setLineStart
   81 D1:A8ED CD D7 AF D1     call setCurLine
   82 D1:A8F1 21 2F AA D1     ld  hl,text001
   83 D1:A8F5 CD F9 AF D1     call printString
   84 D1:A8F9 FD 21 9D AA 
              D1 -  -  -      ld  iy,firstFileHeader
   85 D1:A8FE 01 00 00 00     ld  bc,0
   86 D1:A902 FD 4E FF -      ld  c,(iy-1)
   87 D1:A905 CD 7C AE D1     call vatTraverse
   88 D1:A909 DA BA AA D1     jp  c,err_noContainersFound
   89 D1:A90D D5 -  -  -      push de
   90 D1:A90E 21 46 AA D1         ld  hl,text003
   91 D1:A912 CD F9 AF D1         call printString
   92 D1:A916 DD 46 FA -          ld  b,(ix-6)
   93 D1:A919 ED 22 F9 -          lea hl,ix-7
   94 D1:A91C 7E -  -  -  _:      ld  a,(hl)
   95 D1:A91D 2B -  -  -          dec hl
   96 D1:A91E E5 -  -  -          push hl
   97 D1:A91F C5 -  -  -              push bc
   98 D1:A920 CD 0F B0 D1                 call PrintBigFont
   99 D1:A924 C1 -  -  -              pop bc
  100 D1:A925 E1 -  -  -          pop hl
  101 D1:A926 10 F4 -  -          djnz -_
  102 D1:A928 CD E2 AF D1         call newLine
  103 D1:A92C D1 -  -  -      pop de
  104 D1:A92D CD D3 AB D1     call loadROMFile
  105 D1:A931 -  -  -  -  
  106 D1:A931 -  -  -  -      ;REMOVE THE FOLLOWING BLOCK WHEN DONE TESTING NESTEST
  107 D1:A931 -  -  -  -      ;
  108 D1:A931 -  -  -  -      ;
  109 D1:A931 21 26 AA D1     ld  hl,timings_file
  110 D1:A935 CD 20 03 02     call _Mov9ToOP1
  111 D1:A939 CD 0C 05 02     call _ChkFindSym
  112 D1:A93D DA 95 A9 D1     jp  c,endCurrentRun
  113 D1:A941 CD 98 1F 02     call _ChkInRam
  114 D1:A945 EB -  -  -      ex  de,hl
  115 D1:A946 30 08 -  -      jr  nc,+_
  116 D1:A948 11 09 00 00     ld  de,9
  117 D1:A94C 19 -  -  -      add hl,de
  118 D1:A94D 5E -  -  -      ld  e,(hl)
  119 D1:A94E 19 -  -  -      add hl,de
  120 D1:A94F 23 -  -  -      inc hl
  121 D1:A950 5E -  -  -  _:  ld  e,(hl)
  122 D1:A951 23 -  -  -      inc hl
  123 D1:A952 56 -  -  -      ld  d,(hl)
  124 D1:A953 23 -  -  -      inc hl
  125 D1:A954 22 1F 34 D0     ld  (timings_base),hl
  126 D1:A958 -  -  -  -      ;
  127 D1:A958 -  -  -  -      ;
  128 D1:A958 -  -  -  -      ;
  129 D1:A958 -  -  -  -  
  130 D1:A958 -  -  -  -  
  131 D1:A958 21 53 AA D1     ld  hl,text004
  132 D1:A95C CD F9 AF D1     call printString
  133 D1:A960 -  -  -  -  
  134 D1:A960 -  -  -  -      ;jr $
  135 D1:A960 -  -  -  -  #ifdef COREDEBUG
  136 D1:A960                 call dbg_resetScreen
  137 D1:A960             #endif
  138 D1:A960 DD 21 00 00 
              F2 -  -  -      ld  ix,$F20000
  139 D1:A965 DD 27 30 -      ld  hl,(ix+$30)
  140 D1:A968 CB 85 -  -      res 0,L ;turn off timer 0
  141 D1:A96A CB 8D -  -      res 1,L ;timer 0 uses CPU clock
  142 D1:A96C CB 95 -  -      res 2,L ;disables timer 0 interrupt generator
  143 D1:A96E CB CC -  -      set 1,H ;timer 0 counts upward
  144 D1:A970 DD 2F 30 -      ld  (ix+$30),hl
  145 D1:A973 -  -  -  -      
  146 D1:A973 AF -  -  -      xor a,a
  147 D1:A974 ED 62 -  -      sbc hl,hl
  148 D1:A976 DD 2F 00 -      ld  (ix+0),hl
  149 D1:A979 DD 77 03 -      ld  (ix+3),a
  150 D1:A97C -  -  -  -  
  151 D1:A97C CD EE B3 D1     call i6502Init
  152 D1:A980 -  -  -  -  
  153 D1:A980 DD 21 00 00 
              F2 -  -  -      ld  ix,$F20000
  154 D1:A985 DD 7E 30 -      ld  a,(ix+$30)
  155 D1:A988 CB 87 -  -      res 0,a ;turn off timer 0
  156 D1:A98A CB CF -  -      set 1,a ;timer 0 uses 32768Hz clock
  157 D1:A98C CB 97 -  -      res 2,a ;disables timer 0 interrupt generator
  158 D1:A98E DD 77 30 -      ld  (ix+$30),a
  159 D1:A991 -  -  -  -      ;
  160 D1:A991 2A 00 00 F2     ld  hl,($F20000)
  161 D1:A995 -  -  -  -  
  162 D1:A995 -  -  -  -  endCurrentRun:
  163 D1:A995 CD 87 DF D1     call dbg_prepNextLine
  164 D1:A999 CD E2 AF D1     call newLine
  165 D1:A99D 21 75 AA D1     ld  hl,text005
  166 D1:A9A1 CD F9 AF D1     call printString
  167 D1:A9A5 -  -  -  -  
  168 D1:A9A5 -  -  -  -      ;call printTextBuf
  169 D1:A9A5 CD 05 AF D1     call fastCopy
  170 D1:A9A9 00 -  -  -      nop
  171 D1:A9AA CD F9 AE D1     call waituntilnewkeypress
  172 D1:A9AE CD F1 AE D1     call waituntilkeyrelease
  173 D1:A9B2 -  -  -  -  
  174 D1:A9B2 -  -  -  -      ;
  175 D1:A9B2 -  -  -  -      ;
  176 D1:A9B2 -  -  -  -      ;
  177 D1:A9B2 -  -  -  -  programExit:
  178 D1:A9B2 CD 20 AF D1     call stopGfx
  179 D1:A9B6 ED 7B FC 31 
              D0 -  -  -      ld  sp,(save_spl)
  180 D1:A9BB 3A FF 31 D0     ld  a,(save_mbase)
  181 D1:A9BF ED 6D -  -      ld  MB,a
  182 D1:A9C1 FD 21 80 00 
              D0 -  -  -      ld  iy,flags
  183 D1:A9C6 C9 -  -  -      ret
  184 D1:A9C7 -  -  -  -  
  185 D1:A9C7 -  -  -  -  
  186 D1:A9C7 -  -  -  -  testFilename:
  187 D1:A9C7 15 4E 45 53 
              54 45 53 54 
              00 -  -  -  .db AppVarObj,"NESTEST",0
  188 D1:A9D0 -  -  -  -  
  189 D1:A9D0 -  -  -  -  
  190 D1:A9D0 -  -  -  -  ;NMI, RES, and IRQ. In that order.
  191 D1:A9D0 -  -  -  -  testVectors .equ $-(256-6)
  192 D1:A9D0 00 80 -  -  .dw $8000
  193 D1:A9D2 00 80 -  -  .dw $8000
  194 D1:A9D4 00 80 -  -  .dw $8000
  195 D1:A9D6 -  -  -  -  testCode:
  196 D1:A9D6 A9 00 AA A8 .db $A9,$00,$AA,$A8
  197 D1:A9DA BD 14 80 -  .db $BD,$14,$80
  198 D1:A9DD C9 00 -  -  .db $C9,$00
  199 D1:A9DF F0 08 -  -  .db $F0,$08
  200 D1:A9E1 99 21 40 -  .db $99,$21,$40
  201 D1:A9E4 E8 C8 -  -  .db $E8,$C8
  202 D1:A9E6 -  -  -  -  ;.db $12
  203 D1:A9E6 4C 04 80 02 .db $4C,$04,$80,$02
  204 D1:A9EA 48 65 6C 6C 
              6F 2C 20 57 
              6F -  -  -  .db $48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F
  205 D1:A9F3 72 6C 64 21 
              00 -  -  -  .db $72,$6C,$64,$21,$00
  206 D1:A9F8 -  -  -  -  
  207 D1:A9F8 -  -  -  -  
  208 D1:A9F8 A9 00 AA A8 
              BD 11 80 C9 
              00 F0 05 99 
              21 40 D0 -  .db $A9,$00,$AA,$A8,$BD,$11,$80,$C9,$00,$F0,$05,$99,$21,$40,$D0
  209 D1:AA07 F4 02 48 65 
              6C 6C 6F 2C 
              20 57 6F 72 
              6C 64 21 00 .db $F4,$02,$48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F,$72,$6C,$64,$21,$00
  210 D1:AA17 02 -  -  -  .db $02     ;JAM. Emulator terminates on unsupported instructions or JAMs.
  211 D1:AA18 -  -  -  -  
  212 D1:AA18 -  -  -  -  helloWorld:
  213 D1:AA18 48 65 6C 6C 
              6F 2C 20 57 
              6F 72 6C 64 
              21 00 -  -  .db "Hello, World!",0
  214 D1:AA26 -  -  -  -  
  215 D1:AA26 -  -  -  -  timings_file:
  216 D1:AA26 15 74 69 6D 
              69 6E 67 73 
              00 -  -  -  .db AppVarObj,"timings",0
  217 D1:AA2F -  -  -  -  
  218 D1:AA2F -  -  -  -  text001:
  219 D1:AA2F 4C 6F 6F 6B 
              69 6E 67 20 
              75 70 20 6E 
              65 73 74 65 
              73 74 2E 2E 
              2E 0A 00 -  .db "Looking up nestest...\n",0
  220 D1:AA46 -  -  -  -  text003:
  221 D1:AA46 46 69 6C 65 
              20 66 6F 75 
              6E 64 3A 20 
              00 -  -  -  .db "File found: ",0
  222 D1:AA53 -  -  -  -  text004:
  223 D1:AA53 52 4F 4D 46 
              69 6C 65 20 
              6C 6F 61 64 
              65 64 20 61 
              6E 64 20 72 
              65 61 64 79 
              20 74 6F 20 
              72 75 6E 2E 
              0A 00 -  -  .db "ROMFile loaded and ready to run.\n",0
  224 D1:AA75 -  -  -  -  text005:
  225 D1:AA75 -  -  -  -  ;    0123456789012345678901234567890123456789
  226 D1:AA75 43 50 55 20 
              45 78 65 63 
              75 74 69 6F 
              6E 20 48 61 
              6C 74 65 64 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 00 -  .db "CPU Execution Halted                  ",0
  227 D1:AA9C -  -  -  -  text006:
  228 D1:AA9C -  -  -  -  
  229 D1:AA9C -  -  -  -  
  230 D1:AA9C 07 -  -  -  .db 7
  231 D1:AA9D -  -  -  -  firstFileHeader:
  232 D1:AA9D 43 45 4E 52 
              4F 4D 00 -  .db "CENROM",0
  233 D1:AAA4 -  -  -  -  
  234 D1:AAA4 -  -  -  -  err_:
  235 D1:AAA4 -  -  -  -  
  236 D1:AAA4 -  -  -  -  err_err:
  237 D1:AAA4 E1 -  -  -      pop hl
  238 D1:AAA5 CD F9 AF D1     call printString
  239 D1:AAA9 -  -  -  -  err_err_quit:
  240 D1:AAA9 CD 05 AF D1     call fastCopy
  241 D1:AAAD 00 -  -  -      nop
  242 D1:AAAE CD F9 AE D1     call waituntilnewkeypress
  243 D1:AAB2 CD F1 AE D1     call waituntilkeyrelease
  244 D1:AAB6 C3 B2 A9 D1     jp programExit
  245 D1:AABA -  -  -  -  
  246 D1:AABA -  -  -  -  err_noContainersFound:
  247 D1:AABA CD A4 AA D1     call err_err
  248 D1:AABE 54 72 61 76 
              65 72 73 65 
              20 66 6F 75 
              6E 64 20 6E 
              6F 20 63 61 
              6E 64 69 64 
              61 74 65 73 
              2E 0A 00 -  .db "Traverse found no candidates.\n",0
  249 D1:AADD -  -  -  -  
  250 D1:AADD -  -  -  -  err_missingFiles:
  251 D1:AADD F5 -  -  -      push af
  252 D1:AADE 21 EF AA D1         ld  hl,err_missingFiles_str
  253 D1:AAE2 CD F9 AF D1         call printString
  254 D1:AAE6 F1 -  -  -      pop af
  255 D1:AAE7 CD 3F B0 D1     call printSmallNumPair
  256 D1:AAEB C3 A9 AA D1     jp err_err_quit
  257 D1:AAEF -  -  -  -  err_missingFiles_str:
  258 D1:AAEF 4E 75 6D 62 
              65 72 20 6F 
              66 20 66 69 
              6C 65 73 20 
              6D 69 73 73 
              69 6E 67 3A 
              20 00 -  -  .db "Number of files missing: ",0
  259 D1:AB09 -  -  -  -  
  260 D1:AB09 -  -  -  -  err_tooManyFiles:
  261 D1:AB09 CD A4 AA D1     call err_err
  262 D1:AB0D 54 6F 6F 20 
              6D 61 6E 79 
              20 66 69 6C 
              65 73 20 66 
              6F 75 6E 64 
              2E 00 -  -  .db "Too many files found.",0
  263 D1:AB23 -  -  -  -  
  264 D1:AB23 -  -  -  -  err_PRGROMTooLarge:
  265 D1:AB23 CD A4 AA D1     call err_err
  266 D1:AB27 50 52 47 5F 
              52 4F 4D 20 
              74 6F 6F 20 
              6C 61 72 67 
              65 2E 00 -  .db "PRG_ROM too large.",0
  267 D1:AB3A -  -  -  -  err_CHRROMTooLarge:
  268 D1:AB3A CD A4 AA D1     call err_err
  269 D1:AB3E 43 48 52 5F 
              52 4F 4D 20 
              74 6F 6F 20 
              6C 61 72 67 
              65 2E 00 -  .db "CHR_ROM too large.",0
  270 D1:AB51 -  -  -  -  
  271 D1:AB51 -  -  -  -  err_missingROMDetected:
  272 D1:AB51 CD A4 AA D1     call err_err
  273 D1:AB55 50 52 47 2B 
              43 48 52 20 
              3E 20 41 63 
              74 75 61 6C 
              20 66 69 6C 
              65 20 64 61 
              74 61 2E 00 .db "PRG+CHR > Actual file data.",0
  274 D1:AB71 -  -  -  -  
  275 D1:AB71 -  -  -  -  err_ROMHeaderDamaged:
  276 D1:AB71 CD A4 AA D1     call err_err
  277 D1:AB75 49 4E 45 53 
              20 52 4F 4D 
              20 68 65 61 
              64 65 72 20 
              64 61 6D 61 
              67 65 64 2E 
              00 -  -  -  .db "INES ROM header damaged.",0
  278 D1:AB8E -  -  -  -  
  279 D1:AB8E -  -  -  -  err_MapperOutOfRange:
  280 D1:AB8E CD A4 AA D1     call err_err
  281 D1:AB92 4D 61 70 70 
              65 72 20 73 
              70 65 63 69 
              66 69 65 64 
              20 6F 75 74 
              20 6F 66 20 
              72 61 6E 67 
              65 2E 00 -  .db "Mapper specified out of range.",0
  282 D1:ABB1 -  -  -  -  
  283 D1:ABB1 -  -  -  -  err_CHRROMNotFound:
  284 D1:ABB1 CD A4 AA D1     call err_err
  285 D1:ABB5 43 48 52 5F 
              52 4F 4D 20 
              6E 6F 74 20 
              66 6F 75 6E 
              64 20 69 6E 
              73 69 64 65 
              20 66 69 6C 
              65 00 -  -  .db "CHR_ROM not found inside file",0
  286 D1:ABD3 -  -  -  -  
  287 D1:ABD3 -  -  -  -  
  288 D1:ABD3 -  -  -  -  ;Input: DE = Address of first file after the container header signature
  289 D1:ABD3 -  -  -  -  ;Outputs: ROM vectors recorded and ready to map
  290 D1:ABD3 -  -  -  -  ;Destroys: All registers.
  291 D1:ABD3 -  -  -  -  loadROMFile:
  292 D1:ABD3 EB -  -  -      ex  de,hl
  293 D1:ABD4 AF -  -  -      xor a,a
  294 D1:ABD5 32 08 34 D0     ld  (missing_files),a
  295 D1:ABD9 BE -  -  -  _:  cp  (hl)    ;
  296 D1:ABDA 23 -  -  -      inc hl      ;
  297 D1:ABDB 20 FC -  -      jr  nz,-_   ;skips past zero-terminated string containing full ROM name
  298 D1:ABDD 22 05 34 D0     ld  (basefile_sig),hl
  299 D1:ABE1 01 10 00 00     ld  bc,SIZEOF_INTEGRITY_HASH
  300 D1:ABE5 09 -  -  -      add hl,bc
  301 D1:ABE6 7E -  -  -      ld  a,(hl)
  302 D1:ABE7 FE 01 -  -      cp  a,MAXNUMFILES
  303 D1:ABE9 D2 09 AB D1     jp  nc,err_tooManyFiles
  304 D1:ABED 32 04 34 D0     ld  (inputNumFiles),a
  305 D1:ABF1 47 -  -  -      ld  b,a
  306 D1:ABF2 -  -  -  -  ;    ld  c,SIZEOF_INTEGRITY_HASH     ;c already set to this value from earlier.
  307 D1:ABF2 ED 4C -  -      mlt bc
  308 D1:ABF4 23 -  -  -      inc hl
  309 D1:ABF5 E5 -  -  -      push hl
  310 D1:ABF6 09 -  -  -          add hl,bc
  311 D1:ABF7 FD 21 22 34 
              D0 -  -  -          ld  iy,FILETABLE
  312 D1:ABFC 4E -  -  -          ld  c,(hl)
  313 D1:ABFD 23 -  -  -          inc hl
  314 D1:ABFE 46 -  -  -          ld  b,(hl)
  315 D1:ABFF 23 -  -  -          inc hl
  316 D1:AC00 52 FD 0F 00         ld.s (iy+FILE_SIZE_OFFSET),bc
  317 D1:AC04 FD 2F 02 -          ld  (iy+FILE_ADR_OFFSET),hl
  318 D1:AC07 E1 -  -  -      pop hl
  319 D1:AC08 3C -  -  -      inc a
  320 D1:AC09 3D -  -  -      dec a
  321 D1:AC0A 28 47 -  -      jr  z,loadROMFile_singleFileLoad
  322 D1:AC0C -  -  -  -      ;If more than one file, fill FILETABLE.
  323 D1:AC0C -  -  -  -      ;NOTE: For now, this machinery is disabled. Only a single file is allowed.
  324 D1:AC0C ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  325 D1:AC0F 47 -  -  -      ld  b,a
  326 D1:AC10 -  -  -  -  loadROMFile_multiFileLoadLoop:
  327 D1:AC10 C5 -  -  -      push bc
  328 D1:AC11 FD 2F 05 -          ld  (iy+FILE_SIG_ADR_OFFSET),hl
  329 D1:AC14 01 10 00 00         ld  bc,16
  330 D1:AC18 11 6C AE D1         ld  de,loadROMFile_tempSigHash
  331 D1:AC1C ED B0 -  -          ldir
  332 D1:AC1E E5 -  -  -          push hl
  333 D1:AC1F FD E5 -  -              push iy
  334 D1:AC21 01 17 00 00                 ld  bc,23
  335 D1:AC25 FD 21 65 AE 
              D1 -  -  -                  ld  iy,loadROMFile_tempSig
  336 D1:AC2A CD 7C AE D1                 call vatTraverse    ;returns DE @ datasection size if found
  337 D1:AC2E 30 05 -  -                  jr  nc,+_
  338 D1:AC30 21 08 34 D0                 ld  hl,missing_files
  339 D1:AC34 34 -  -  -                  inc (hl)
  340 D1:AC35 FD E1 -  -  _:          pop iy
  341 D1:AC37 EB -  -  -              ex  de,hl
  342 D1:AC38 5E -  -  -              ld  e,(hl)
  343 D1:AC39 23 -  -  -              inc hl
  344 D1:AC3A 56 -  -  -              ld  d,(hl)
  345 D1:AC3B 23 -  -  -              inc hl
  346 D1:AC3C 52 FD 1F 00             ld.s (iy+FILE_SIZE_OFFSET),de
  347 D1:AC40 FD 2F 02 -              ld  (iy+FILE_ADR_OFFSET),hl
  348 D1:AC43 E1 -  -  -          pop hl
  349 D1:AC44 C1 -  -  -      pop bc
  350 D1:AC45 ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  351 D1:AC48 10 C6 -  -      djnz loadROMFile_multiFileLoadLoop
  352 D1:AC4A 3A 08 34 D0     ld  a,(missing_files)
  353 D1:AC4E B7 -  -  -      or  a,a
  354 D1:AC4F C2 DD AA D1     jp  nz,err_missingFiles
  355 D1:AC53 -  -  -  -  loadROMFile_singleFileLoad:
  356 D1:AC53 -  -  -  -      ;Compute size of ROM by summing filesizes, less INES header
  357 D1:AC53 3A 04 34 D0     ld  a,(inputNumFiles)
  358 D1:AC57 3C -  -  -      inc a
  359 D1:AC58 47 -  -  -      ld  b,a
  360 D1:AC59 21 00 00 00     ld  hl,0
  361 D1:AC5D DD 21 22 34 
              D0 -  -  -      ld  ix,FILETABLE
  362 D1:AC62 52 DD 17 00 _:  ld.s de,(ix+FILE_SIZE_OFFSET)
  363 D1:AC66 19 -  -  -      add hl,de
  364 D1:AC67 ED 32 08 -      lea ix,ix+FILETABLE_STRIDE
  365 D1:AC6A 10 F6 -  -      djnz -_
  366 D1:AC6C 01 F0 FF FF     ld  bc,-16
  367 D1:AC70 09 -  -  -      add hl,bc   ;subtract INES header
  368 D1:AC71 22 09 34 D0     ld  (total_rom_size),hl
  369 D1:AC75 -  -  -  -      ;Verify that the file actually contains an INES header.
  370 D1:AC75 -  -  -  -      ;TODO: Do this at an earlier stage. Such as file selection.
  371 D1:AC75 DD 2A 24 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  372 D1:AC7A DD 27 00 -      ld  hl,(ix+0)
  373 D1:AC7D 11 4E 45 53     ld  de,$53454E         ;4E 45 53 == "NES"
  374 D1:AC81 B7 -  -  -      or  a,a
  375 D1:AC82 ED 52 -  -      sbc hl,de   ;Note: add does not affect zero flag. Can't test this via -DE
  376 D1:AC84 C2 71 AB D1 _:  jp  nz,err_ROMHeaderDamaged
  377 D1:AC88 DD 7E 03 -      ld  a,(ix+3)
  378 D1:AC8B FE 1A -  -      cp  a,$1A
  379 D1:AC8D 20 F5 -  -      jr  nz,-_   ;19
  380 D1:AC8F -  -  -  -      ;Compute ROM size by reading INES header. This should be equ or lt above.
  381 D1:AC8F -  -  -  -      ;Note: The below line is optimized from...
  382 D1:AC8F DD 2A 24 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  383 D1:AC94 -  -  -  -      ;... these lines. But the intent might not be perfectly clear. We'll keep
  384 D1:AC94 -  -  -  -      ;these here just in case there's ever a question about it.
  385 D1:AC94 -  -  -  -  ;    ld  ix,FILETABLE
  386 D1:AC94 -  -  -  -  ;    ld  ix,(ix+FILE_ADR_OFFSET)
  387 D1:AC94 DD 6E 04 -      ld  L,(ix+4)    ;PRG ROM count, low
  388 D1:AC97 DD 5E 05 -      ld  e,(ix+5)    ;CHR ROM count, low
  389 D1:AC9A 26 00 -  -      ld  h,0
  390 D1:AC9C 54 -  -  -      ld  d,h
  391 D1:AC9D DD 7E 07 -      ld  a,(ix+7)    ;Check for INES2 bits
  392 D1:ACA0 E6 0C -  -      and a,%00001100
  393 D1:ACA2 FE 08 -  -      cp  a,%00001000
  394 D1:ACA4 20 1B -  -      jr  nz,+_
  395 D1:ACA6 DD 7E 09 -      ld  a,(ix+9)
  396 D1:ACA9 47 -  -  -      ld  b,a
  397 D1:ACAA E6 0F -  -      and a,$0F
  398 D1:ACAC FE 02 -  -      cp  a,MAXPRGROM_HINIB+1
  399 D1:ACAE D2 23 AB D1     jp  nc,err_PRGROMTooLarge
  400 D1:ACB2 67 -  -  -      ld  h,a
  401 D1:ACB3 78 -  -  -      ld  a,b
  402 D1:ACB4 E6 F0 -  -      and a,$F0
  403 D1:ACB6 07 -  -  -      rlca
  404 D1:ACB7 07 -  -  -      rlca
  405 D1:ACB8 07 -  -  -      rlca
  406 D1:ACB9 07 -  -  -      rlca
  407 D1:ACBA FE 04 -  -      cp  a,MAXCHRROM_HINIB+1
  408 D1:ACBC D2 3A AB D1     jp  nc,err_CHRROMTooLarge
  409 D1:ACC0 57 -  -  -      ld  d,a
  410 D1:ACC1 AF -  -  -  _:  xor a,a
  411 D1:ACC2 32 0C 34 D0     ld  (prg_rom_size),a
  412 D1:ACC6 32 0F 34 D0     ld  (chr_rom_size),a
  413 D1:ACCA 29 -  -  -      add hl,hl   ;x2
  414 D1:ACCB 29 -  -  -      add hl,hl   ;x4
  415 D1:ACCC 29 -  -  -      add hl,hl   ;x8
  416 D1:ACCD 29 -  -  -      add hl,hl   ;x16
  417 D1:ACCE 29 -  -  -      add hl,hl   ;x32
  418 D1:ACCF 29 -  -  -      add hl,hl   ;x64
  419 D1:ACD0 52 22 0D 34 
              D0 -  -  -      ld.s (prg_rom_size+1),hl    ;x64x256
  420 D1:ACD5 EB -  -  -      ex  de,hl
  421 D1:ACD6 29 -  -  -      add hl,hl   ;x2
  422 D1:ACD7 29 -  -  -      add hl,hl   ;x4
  423 D1:ACD8 29 -  -  -      add hl,hl   ;x8
  424 D1:ACD9 29 -  -  -      add hl,hl   ;x16
  425 D1:ACDA 29 -  -  -      add hl,hl   ;x32
  426 D1:ACDB 52 22 10 34 
              D0 -  -  -      ld.s (chr_rom_size+1),hl    ;x32x256
  427 D1:ACE0 2A 0F 34 D0     ld  hl,(chr_rom_size)
  428 D1:ACE4 ED 5B 0C 34 
              D0 -  -  -      ld  de,(prg_rom_size)
  429 D1:ACE9 19 -  -  -      add hl,de
  430 D1:ACEA ED 5B 09 34 
              D0 -  -  -      ld  de,(total_rom_size)
  431 D1:ACEF B7 -  -  -      or  a,a
  432 D1:ACF0 ED 52 -  -      sbc hl,de   ;declared-actual. declared must be equal to or smaller.
  433 D1:ACF2 28 04 -  -      jr  z,+_
  434 D1:ACF4 D2 51 AB D1     jp  nc,err_missingROMDetected
  435 D1:ACF8 -  -  -  -  _:  ;Find trainer, PRG, and CHR base addresses
  436 D1:ACF8 ED 22 10 -      lea hl,ix+16
  437 D1:ACFB 22 18 34 D0     ld  (trainer_base),hl   ;whether it exists or not.
  438 D1:ACFF 11 00 00 00     ld  de,0
  439 D1:AD03 DD CB 06 56     bit 2,(ix+6)
  440 D1:AD07 28 04 -  -      jr  z,+_
  441 D1:AD09 11 00 02 00     ld  de,512
  442 D1:AD0D 19 -  -  -  _:  add hl,de
  443 D1:AD0E 22 18 34 D0     ld  (prg_rom_base),hl
  444 D1:AD12 FD 21 22 34 
              D0 -  -  -      ld  iy,FILETABLE
  445 D1:AD17 52 FD 27 00     ld.s hl,(iy+FILE_SIZE_OFFSET)
  446 D1:AD1B B7 -  -  -      or  a,a
  447 D1:AD1C ED 52 -  -      sbc hl,de   ;less possible trainer
  448 D1:AD1E 11 10 00 00     ld  de,16
  449 D1:AD22 ED 52 -  -      sbc hl,de   ;less iNES header. Remaining is now size of current file.
  450 D1:AD24 EB -  -  -      ex  de,hl   ;curfilesize is now in DE
  451 D1:AD25 2A 0C 34 D0     ld  hl,(prg_rom_size)   ;keep subtracting filesize from this until carry.
  452 D1:AD29 B7 -  -  -      or  a,a
  453 D1:AD2A ED 52 -  -      sbc hl,de   ;if carry, prg_rom end is inside this file. Undo: HL is offset.
  454 D1:AD2C 0E 00 -  -      ld  c,0     ;0th file current
  455 D1:AD2E 38 1D -  -      jr  c,loadROMFile_locatedCHRROM
  456 D1:AD30 3A 04 34 D0     ld  a,(inputNumFiles)
  457 D1:AD34 B7 -  -  -      or  a,a
  458 D1:AD35 28 12 -  -      jr  z,loadROMFile_noCHRROMFound
  459 D1:AD37 47 -  -  -      ld  b,a
  460 D1:AD38 ED 33 08 -  _:  lea iy,iy+FILETABLE_STRIDE
  461 D1:AD3B 52 ED 5B 00 
              00 00 -  -      ld.s de,(FILE_SIZE_OFFSET)
  462 D1:AD41 0C -  -  -      inc c
  463 D1:AD42 B7 -  -  -      or  a,a
  464 D1:AD43 ED 52 -  -      sbc hl,de   ;
  465 D1:AD45 38 06 -  -      jr  c,loadROMFile_locatedCHRROM
  466 D1:AD47 10 EF -  -      djnz -_
  467 D1:AD49 -  -  -  -  loadROMFile_noCHRROMFound:
  468 D1:AD49 C3 B1 AB D1     jp  err_CHRROMNotFound
  469 D1:AD4D -  -  -  -  loadROMFile_locatedCHRROM:
  470 D1:AD4D 19 -  -  -      add hl,de       ;Undid subtract. HL is now offset in current file
  471 D1:AD4E FD 17 02 -      ld  de,(iy+FILE_ADR_OFFSET) ;so get address inside that file.
  472 D1:AD51 19 -  -  -      add hl,de
  473 D1:AD52 79 -  -  -      ld  a,c
  474 D1:AD53 22 1B 34 D0     ld  (chr_rom_base),hl
  475 D1:AD57 32 1E 34 D0     ld  (chr_rom_base_file),a
  476 D1:AD5B -  -  -  -      ;Detect mapper and run its initializer
  477 D1:AD5B DD 7E 06 -      ld  a,(ix+6)
  478 D1:AD5E DD 46 07 -      ld  b,(ix+7)
  479 D1:AD61 07 -  -  -      rlca
  480 D1:AD62 07 -  -  -      rlca
  481 D1:AD63 07 -  -  -      rlca
  482 D1:AD64 07 -  -  -      rlca
  483 D1:AD65 A8 -  -  -      xor a,b
  484 D1:AD66 E6 0F -  -      and a,$0F
  485 D1:AD68 A8 -  -  -      xor a,b
  486 D1:AD69 52 EB -  -      ex.s de,hl  ;clears HLU,DEU
  487 D1:AD6B 5F -  -  -      ld  e,a
  488 D1:AD6C 21 12 34 D0     ld  hl,submapper
  489 D1:AD70 36 00 -  -      ld  (hl),0
  490 D1:AD72 78 -  -  -      ld  a,b
  491 D1:AD73 E6 0C -  -      and a,%00001100
  492 D1:AD75 FE 08 -  -      cp  a,%00001000
  493 D1:AD77 3E 00 -  -      ld  a,0
  494 D1:AD79 20 0E -  -      jr  nz,+_
  495 D1:AD7B DD 46 08 -      ld  b,(ix+8)
  496 D1:AD7E 78 -  -  -      ld  a,b
  497 D1:AD7F 07 -  -  -      rlca
  498 D1:AD80 07 -  -  -      rlca
  499 D1:AD81 07 -  -  -      rlca
  500 D1:AD82 07 -  -  -      rlca
  501 D1:AD83 E6 0F -  -      and a,$0F
  502 D1:AD85 77 -  -  -      ld  (hl),a
  503 D1:AD86 78 -  -  -      ld  a,b
  504 D1:AD87 E6 0F -  -      and a,$0F
  505 D1:AD89 57 -  -  -  _:  ld  d,a
  506 D1:AD8A ED 53 14 34 
              D0 -  -  -      ld  (mapper_id),de
  507 D1:AD8F 21 FF FF FF     ld  hl,-NUMBER_OF_MAPPERS
  508 D1:AD93 19 -  -  -      add hl,de
  509 D1:AD94 DA 8E AB D1     jp  c,err_MapperOutOfRange
  510 D1:AD98 ED 62 -  -      sbc hl,hl
  511 D1:AD9A 19 -  -  -      add hl,de               ;hl=de. both are mapper IDs
  512 D1:AD9B 2E 09 -  -      ld  L,MAPPER_STRIDE
  513 D1:AD9D 55 -  -  -      ld  d,L
  514 D1:AD9E ED 6C -  -      mlt hl                  ;high byte multiply
  515 D1:ADA0 65 -  -  -      ld  h,L
  516 D1:ADA1 2E 00 -  -      ld  L,0
  517 D1:ADA3 ED 5C -  -      mlt de                  ;low byte multiply
  518 D1:ADA5 19 -  -  -      add hl,de               ;This is the best 16bit * 8bit I know to do.
  519 D1:ADA6 11 B2 AD D1     ld  de,mapper_table
  520 D1:ADAA 19 -  -  -      add hl,de
  521 D1:ADAB 22 15 34 D0     ld  (mapper_adr_base),hl
  522 D1:ADAF ED 27 -  -      ld  hl,(hl)
  523 D1:ADB1 E9 -  -  -      jp  (hl)
  524 D1:ADB2 -  -  -  -  
  525 D1:ADB2 -  -  -  -  mapper_table:   ;entries 9 wide
  526 D1:ADB2 BB AD D1 -  .dl mapper0_init
  527 D1:ADB5 E9 AD D1 -  .dl mapper0_read
  528 D1:ADB8 0C AE D1 -  .dl mapper0_write
  529 D1:ADBB -  -  -  -  
  530 D1:ADBB -  -  -  -  mapper0_init:
  531 D1:ADBB -  -  -  -      ;map trainer, if exist
  532 D1:ADBB DD CB 06 56     bit 2,(ix+6)
  533 D1:ADBF 28 0D -  -      jr  z,+_
  534 D1:ADC1 2A 18 34 D0     ld  hl,(trainer_base)
  535 D1:ADC5 1E 70 -  -      ld  e,$70
  536 D1:ADC7 0E 02 -  -      ld  c,2
  537 D1:ADC9 41 -  -  -      ld  b,c
  538 D1:ADCA CD D4 B4 D1     call i6502_map_pages
  539 D1:ADCE 2A 0C 34 D0 _:  ld  hl,(prg_rom_size)
  540 D1:ADD2 11 FF BF FF     ld  de,-(16384+1)
  541 D1:ADD6 19 -  -  -      add hl,de   ;carry if more than 1 16KB segment
  542 D1:ADD7 2A 18 34 D0     ld  hl,(prg_rom_base)
  543 D1:ADDB -  -  -  -      ;jr  $
  544 D1:ADDB 06 80 -  -      ld  b,$80
  545 D1:ADDD 58 -  -  -      ld  e,b
  546 D1:ADDE 0E 40 -  -      ld  c,$40
  547 D1:ADE0 30 02 -  -      jr  nc,+_
  548 D1:ADE2 CB 21 -  -      sla c
  549 D1:ADE4 CD D4 B4 D1 _:  call i6502_map_pages
  550 D1:ADE8 C9 -  -  -      ret
  551 D1:ADE9 -  -  -  -  
  552 D1:ADE9 -  -  -  -  
  553 D1:ADE9 -  -  -  -  mapper0_read:
  554 D1:ADE9 7A -  -  -      ld  a,d
  555 D1:ADEA 87 -  -  -      add a,a
  556 D1:ADEB 30 08 -  -      jr  nc,+_
  557 D1:ADED 7E -  -  -      ld  a,(hl)  ;is $8000 or above
  558 D1:ADEE C9 -  -  -      ret
  559 D1:ADEF FE 40 -  -      cp  a,$20*2
  560 D1:ADF1 38 02 -  -      jr  c,+_
  561 D1:ADF3 7E -  -  -      ld  a,(hl)  ;is below $2000
  562 D1:ADF4 C9 -  -  -      ret
  563 D1:ADF5 87 -  -  -  _:  add a,a
  564 D1:ADF6 30 12 -  -      jr  nc,mapper0_ppu_read     ;wasn't $4000 or higher.
  565 D1:ADF8 28 02 -  -      jr  z,mapper0_apu_read      ;high byte was exactly $40
  566 D1:ADFA 7E -  -  -      ld  a,(hl)
  567 D1:ADFB C9 -  -  -      ret
  568 D1:ADFC -  -  -  -  mapper0_apu_read:
  569 D1:ADFC 7B -  -  -      ld  a,e
  570 D1:ADFD FE 16 -  -      cp  a,$16
  571 D1:ADFF 20 07 -  -      jr  nz,+_
  572 D1:AE01 AF -  -  -      xor a,a
  573 D1:AE02 DD CB FE 3E     srl (ix+APU_KEYPAD)
  574 D1:AE06 87 -  -  -      add a,a                 ;TODO: Open bus behavior on bits 5-7
  575 D1:AE07 C9 -  -  -      ret
  576 D1:AE08 7E -  -  -  _:  ld  a,(hl)  ;hope that the dummy map page is good enough to not crash.
  577 D1:AE09 C9 -  -  -      ret
  578 D1:AE0A -  -  -  -  mapper0_ppu_read:
  579 D1:AE0A -  -  -  -      ;TODO: PPU SUPPORT
  580 D1:AE0A 7E -  -  -      ld  a,(hl)
  581 D1:AE0B C9 -  -  -      ret
  582 D1:AE0C -  -  -  -  
  583 D1:AE0C -  -  -  -  
  584 D1:AE0C -  -  -  -  
  585 D1:AE0C -  -  -  -  mapper0_write:
  586 D1:AE0C 7A -  -  -      ld  a,d
  587 D1:AE0D FE 20 -  -      cp  a,$20
  588 D1:AE0F 30 02 -  -      jr  nc,+_
  589 D1:AE11 70 -  -  -      ld  (hl),b
  590 D1:AE12 C9 -  -  -      ret
  591 D1:AE13 FE 40 -  -  _:  cp  a,$40
  592 D1:AE15 38 4C -  -      jr  c,mapper0_ppu_write
  593 D1:AE17 28 04 -  -      jr  z,mapper0_apu_write
  594 D1:AE19 87 -  -  -      add a,a
  595 D1:AE1A D8 -  -  -      ret c       ;don't write anything to above $8000
  596 D1:AE1B 70 -  -  -      ld  (hl),b  ;but allow it in $4100-$7FFF because it might be RAM.
  597 D1:AE1C C9 -  -  -      ret
  598 D1:AE1D -  -  -  -  mapper0_apu_write:
  599 D1:AE1D 7B -  -  -      ld  a,e
  600 D1:AE1E FE 16 -  -      cp  a,$16
  601 D1:AE20 20 3F -  -      jr  nz,+_
  602 D1:AE22 DD 7E FF -      ld  a,(ix+APU_KEYLATCH)
  603 D1:AE25 A8 -  -  -      xor a,b     ;Bit 0 is set if we're trying to change controller poll state.
  604 D1:AE26 0F -  -  -      rrca        ;And this is how we're going to get it.
  605 D1:AE27 D0 -  -  -      ret nc      ;Only support NES standard controller.
  606 D1:AE28 CB 40 -  -      bit 0,b     ;So... what are we changing it to?
  607 D1:AE2A DD 70 FF -      ld  (ix+APU_KEYLATCH),b
  608 D1:AE2D 21 00 00 F5     ld  hl,mpKeyMode
  609 D1:AE31 28 06 -  -      jr  z,mapper0_apu_stop_keyboard
  610 D1:AE33 7E -  -  -      ld  a,(hl)
  611 D1:AE34 B7 -  -  -      or  a,a
  612 D1:AE35 C0 -  -  -      ret nz      ;don't stop a busy keyboard.
  613 D1:AE36 36 02 -  -      ld  (hl),2  ;start single-run go at it and that's it.
  614 D1:AE38 C9 -  -  -      ret
  615 D1:AE39 -  -  -  -  mapper0_apu_stop_keyboard:
  616 D1:AE39 7E -  -  -      ld  a,(hl)
  617 D1:AE3A B7 -  -  -      or  a,a
  618 D1:AE3B 20 FC -  -      jr  nz,mapper0_apu_stop_keyboard
  619 D1:AE3D 2E 12 -  -      ld  L,$12   ;76543210 : del mode 2nd y= wind zoom trace graph
  620 D1:AE3F 7E -  -  -      ld  a,(hl)
  621 D1:AE40 2E 1E -  -      ld  L,$1E   ;----3210 : up right left down
  622 D1:AE42 4E -  -  -      ld  c,(hl)
  623 D1:AE43 A9 -  -  -      xor a,c
  624 D1:AE44 E6 F0 -  -      and a,%11110000
  625 D1:AE46 A9 -  -  -      xor a,c     ;keymapping has changed. We need to further alter it.
  626 D1:AE47 -  -  -  -      ;[DE MO 2N Y= UP RI LE DO] maps to [SE, B, A, ST, UP, RI, LE, DO]
  627 D1:AE47 -  -  -  -      ;The above must be rearranged to become:
  628 D1:AE47 -  -  -  -      ;            [RI, LE, DO, UP, ST, SE, B , A ]
  629 D1:AE47 -  -  -  -      ;as compared to
  630 D1:AE47 -  -  -  -      ;            [SE, B , A , ST, UP, RI, LE, DO]
  631 D1:AE47 07 -  -  -      rlca        ;[B , A , ST, UP, RI, LE, DO, SE]
  632 D1:AE48 4F -  -  -      ld  c,a     ;b4  : UP is in correct position.
  633 D1:AE49 07 -  -  -      rlca        ;[A , ST, UP, RI, LE, DO, SE, B ]
  634 D1:AE4A 07 -  -  -      rlca        ;[ST, UP, RI, LE, DO, SE, B , A ]
  635 D1:AE4B 47 -  -  -      ld  b,a     ;b0-2:SE, B , and A are in the correct position
  636 D1:AE4C 07 -  -  -      rlca        ;[UP, RI, LE, DO, SE, B , A , ST]
  637 D1:AE4D 07 -  -  -      rlca        ;[RI, LE, DO, SE, B , A , ST, UP]
  638 D1:AE4E 57 -  -  -      ld  d,a     ;b5-7: RI LE DO in correct position.
  639 D1:AE4F 07 -  -  -      rlca        ;[LE, DO, SE, B , A , ST, UP, RI]
  640 D1:AE50 07 -  -  -      rlca        ;b3: ST is in the correct position.
  641 D1:AE51 A9 -  -  -      xor a,c     ;
  642 D1:AE52 E6 08 -  -      and a,%00001000 ;keep A3, merge others
  643 D1:AE54 A9 -  -  -      xor a,c     ;Has: A3. Merge-in contains b4
  644 D1:AE55 A8 -  -  -      xor a,b     ;
  645 D1:AE56 E6 18 -  -      and a,%00011000 ;keep A3-4
  646 D1:AE58 A8 -  -  -      xor a,b     ;Merge-in contains b0-2
  647 D1:AE59 AA -  -  -      xor a,d     ;
  648 D1:AE5A E6 1F -  -      and a,%00011111 ;keep A0-4
  649 D1:AE5C AA -  -  -      xor a,d     ;Merge-in contains b5-7. Is complete.
  650 D1:AE5D DD 77 FE -      ld  (ix+APU_KEYPAD),a
  651 D1:AE60 C9 -  -  -      ret
  652 D1:AE61 -  -  -  -  _:  ;not even going to try to emulate the second controller.
  653 D1:AE61 70 -  -  -      ld  (hl),b
  654 D1:AE62 C9 -  -  -      ret
  655 D1:AE63 -  -  -  -  mapper0_ppu_write:
  656 D1:AE63 70 -  -  -      ld  (hl),b
  657 D1:AE64 C9 -  -  -      ret
  658 D1:AE65 -  -  -  -  
  659 D1:AE65 -  -  -  -  
  660 D1:AE65 -  -  -  -  
  661 D1:AE65 -  -  -  -  
  662 D1:AE65 -  -  -  -  
  663 D1:AE65 -  -  -  -  
  664 D1:AE65 -  -  -  -  loadROMFile_tempSig:    ;total 23 bytes
  665 D1:AE65 43 45 4E 52 
              4F 32 00 -  .db "CENRO2",0
  666 D1:AE6C -  -  -  -  loadROMFile_tempSigHash:
  667 D1:AE6C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;16 bytes for hash
  668 D1:AE7C -  -  -  -  
  669 D1:AE7C -  -  -  -  
  670 D1:AE7C -  -  -  -  ;Input: IY = locationOfSignature. 
  671 D1:AE7C -  -  -  -  ;       BC=size of signature (long load to clear BCU), still limited to 255.
  672 D1:AE7C -  -  -  -  ;Output: carry=1: Variable not found.
  673 D1:AE7C -  -  -  -  ;Output: carry=0: DE=address of variable data start after the signature
  674 D1:AE7C -  -  -  -  ;        IX=location of current variable's VAT location.
  675 D1:AE7C -  -  -  -  ;Destroys: All registers not in use.
  676 D1:AE7C -  -  -  -  ;NOTES: This routine is capable of resuming a search that has ended.
  677 D1:AE7C -  -  -  -  
  678 D1:AE7C -  -  -  -  ;To continue searching:
  679 D1:AE7C -  -  -  -  ;call vatTraverse_continue with the following inputs:
  680 D1:AE7C -  -  -  -  ;   IX preserved from a non-carry return of vatTraverse.
  681 D1:AE7C -  -  -  -  ;   BC = same as input for vatTraverse. vatTraverse does not destroy this reg.
  682 D1:AE7C -  -  -  -  ;   WARNING: DO NOT KEEP SEARCHING AFTER CALL RETURNS CARRY. START A NEW SEARCH.
  683 D1:AE7C -  -  -  -  vatTraverse:
  684 D1:AE7C -  -  -  -      ;progPtr = progvat start; ptemp = progvatend
  685 D1:AE7C DD 2A 9D 25 
              D0 -  -  -      ld  ix,(progPtr)
  686 D1:AE81 -  -  -  -  vatTraverse_loop:
  687 D1:AE81 2A 9A 25 D0     ld  hl,(pTemp)
  688 D1:AE85 ED 12 00 -      lea de,ix+0
  689 D1:AE88 B7 -  -  -      or  a,a
  690 D1:AE89 ED 52 -  -      sbc hl,de   ;HL<DE while in pVAT, else carry set.
  691 D1:AE8B 3F -  -  -      ccf
  692 D1:AE8C D8 -  -  -      ret c
  693 D1:AE8D 1A -  -  -      ld  a,(de)
  694 D1:AE8E E6 1F -  -      and a,$1F
  695 D1:AE90 FE 15 -  -      cp  a,AppVarObj
  696 D1:AE92 20 34 -  -      jr  nz,vatTraverse_skip
  697 D1:AE94 DD 17 F9 -      ld  de,(ix-7)   ;puts "page" byte in DEU
  698 D1:AE97 DD 5E FD -      ld  e,(ix-3)
  699 D1:AE9A DD 56 FC -      ld  d,(ix-4)
  700 D1:AE9D CD 98 1F 02     call _ChkInRam
  701 D1:AEA1 EB -  -  -      ex  de,hl
  702 D1:AEA2 30 08 -  -      jr  nc,+_
  703 D1:AEA4 11 09 00 00     ld  de,9
  704 D1:AEA8 19 -  -  -      add hl,de
  705 D1:AEA9 5E -  -  -      ld  e,(hl)
  706 D1:AEAA 19 -  -  -      add hl,de
  707 D1:AEAB 23 -  -  -      inc hl
  708 D1:AEAC 5E -  -  -  _:  ld  e,(hl)
  709 D1:AEAD 23 -  -  -      inc hl
  710 D1:AEAE 56 -  -  -      ld  d,(hl)
  711 D1:AEAF 23 -  -  -      inc hl
  712 D1:AEB0 EB -  -  -      ex  de,hl
  713 D1:AEB1 B7 -  -  -      or  a,a
  714 D1:AEB2 ED 42 -  -      sbc hl,bc   ;varsize-entrysize. If carry, entry cannot possibly be in var.
  715 D1:AEB4 38 12 -  -      jr  c,vatTraverse_skip
  716 D1:AEB6 ED 23 00 -      lea hl,iy+0
  717 D1:AEB9 C5 -  -  -      push bc
  718 D1:AEBA 1A -  -  -  _:      ld  a,(de)
  719 D1:AEBB 13 -  -  -          inc de
  720 D1:AEBC ED A1 -  -          cpi
  721 D1:AEBE 20 07 -  -          jr  nz,vatTraverse_sigNoMatch
  722 D1:AEC0 EA BA AE D1         jp  pe,-_
  723 D1:AEC4 C1 -  -  -      pop bc
  724 D1:AEC5 B7 -  -  -      or  a,a
  725 D1:AEC6 C9 -  -  -      ret         ;NC. DE = past the signature.
  726 D1:AEC7 -  -  -  -  vatTraverse_sigNoMatch:
  727 D1:AEC7 C1 -  -  -      pop bc
  728 D1:AEC8 -  -  -  -  vatTraverse_continue:
  729 D1:AEC8 -  -  -  -  vatTraverse_skip:
  730 D1:AEC8 3E 07 -  -      ld  a,7
  731 D1:AECA 11 FF FF FF     ld  de,-1
  732 D1:AECE DD 86 FA -      add a,(ix-6)
  733 D1:AED1 ED 44 -  -      neg
  734 D1:AED3 5F -  -  -      ld  e,a
  735 D1:AED4 DD 19 -  -      add ix,de   ;because "sbc ix,de" isn't a thing. Boo.
  736 D1:AED6 18 A9 -  -      jr  vatTraverse_loop
  737 D1:AED8 -  -  -  -  
  738 D1:AED8 -  -  -  -  ;Copied from my Falldown2 project. I didn't want to have to
  739 D1:AED8 -  -  -  -  ;find yet another hardware reference for something I already did.
  740 D1:AED8 -  -  -  -  ;But I'll have to do it again anyway because this isn't exactly
  741 D1:AED8 -  -  -  -  ;what we're looking for. Here, we output the same sort of
  742 D1:AED8 -  -  -  -  ;game keys that I've used basically all my programming life.
  743 D1:AED8 -  -  -  -  ;Anyhoo. We'll be using the following:
  744 D1:AED8 -  -  -  -  ;kbitDown	equ 00h
  745 D1:AED8 -  -  -  -  ;kbitLeft	equ 01h
  746 D1:AED8 -  -  -  -  ;kbitRight	equ 02h
  747 D1:AED8 -  -  -  -  ;kbitUp		equ 03h
  748 D1:AED8 -  -  -  -  ;kbitYequ equ 04h
  749 D1:AED8 -  -  -  -  ;kbit2nd		equ 05h
  750 D1:AED8 -  -  -  -  ;kbitMode	equ 06h
  751 D1:AED8 -  -  -  -  ;kbitDel		equ 07h
  752 D1:AED8 -  -  -  -  ;You can find the other defines approximately where I found the stuff above.
  753 D1:AED8 -  -  -  -  
  754 D1:AED8 -  -  -  -  getkbd_adl:
  755 D1:AED8 DD 21 00 00 
              F5 -  -  -  	ld  ix,mpKeyMode
  756 D1:AEDD ED 22 00 -  	lea hl,ix+0
  757 D1:AEE0 36 02 -  -  	ld  (hl),keyModeScanOnce
  758 D1:AEE2 AF -  -  -  	xor a
  759 D1:AEE3 BE -  -  -  _:  cp  (hl)
  760 D1:AEE4 20 FD -  -  	jr  nz,-_
  761 D1:AEE6 DD 7E 12 -  	ld  a,(ix+kbdG1-mpKeyRange)
  762 D1:AEE9 DD 6E 1E -  	ld  l,(ix+kbdG7-mpKeyRange)
  763 D1:AEEC AD -  -  -  	xor L
  764 D1:AEED E6 F0 -  -  	and 11110000b	;mask out lower bits to let me shove dpad bits in
  765 D1:AEEF AD -  -  -  	xor L
  766 D1:AEF0 C9 -  -  -  	ret
  767 D1:AEF1 -  -  -  -  
  768 D1:AEF1 -  -  -  -  waituntilkeyrelease:
  769 D1:AEF1 CD D8 AE D1     call getkbd_adl
  770 D1:AEF5 B7 -  -  -      or  a,a
  771 D1:AEF6 20 F9 -  -      jr  nz,waituntilkeyrelease
  772 D1:AEF8 C9 -  -  -  	ret
  773 D1:AEF9 -  -  -  -  
  774 D1:AEF9 -  -  -  -  waituntilnewkeypress:
  775 D1:AEF9 CD F1 AE D1     call waituntilkeyrelease
  776 D1:AEFD CD D8 AE D1 _:  call getkbd_adl
  777 D1:AF01 B7 -  -  -  	or  a,a
  778 D1:AF02 28 F9 -  -  	jr  z,-_
  779 D1:AF04 C9 -  -  -      ret
  780 D1:AF05 -  -  -  -  
  781 D1:AF05 -  -  -  -  #include "lcd.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    1 D1:AF05 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 D1:AF05 -  -  -  -  ;TI-84 Plus CE Include File
    2 D1:AF05 -  -  -  -  
    3 D1:AF05 -  -  -  -  ;Various Parts Contributed by
    4 D1:AF05 -  -  -  -  ;- BrandonW
    5 D1:AF05 -  -  -  -  ;- calc84
    6 D1:AF05 -  -  -  -  ;- MateoConLechuga
    7 D1:AF05 -  -  -  -  ;- Runer112
    8 D1:AF05 -  -  -  -  ;- tr1p1ea
    9 D1:AF05 -  -  -  -  ;- Kerm Martian
   10 D1:AF05 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    2 D1:AF05 -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
    5 D1:AF05 -  -  -  -  ;
    6 D1:AF05 -  -  -  -  ;
    7 D1:AF05 -  -  -  -  ;
    8 D1:AF05 -  -  -  -  
    9 D1:AF05 -  -  -  -  ;Undefine this to speed up core process by losing debug state
   10 D1:AF05 -  -  -  -  ;#define COREDEBUG
   11 D1:AF05 -  -  -  -  
   12 D1:AF05 -  -  -  -  DEBUG_PRINT_START_CYCLE .equ 0
   13 D1:AF05 -  -  -  -  DEBUG_STEP_START_CYCLE  .equ 30000 ;26485
   14 D1:AF05 -  -  -  -  
   15 D1:AF05 -  -  -  -  
   16 D1:AF05 -  -  -  -  
   17 D1:AF05 -  -  -  -  FONTFGCOLOR .EQU $FF
   18 D1:AF05 -  -  -  -  FONTBGCOLOR .EQU $00
   19 D1:AF05 -  -  -  -  
   20 D1:AF05 -  -  -  -  screenBuf1      .equ vRam
   21 D1:AF05 -  -  -  -  screenBuf2      .equ vRam+(320*240)
   22 D1:AF05 -  -  -  -  ;DO NOT MOVE THESE.
   23 D1:AF05 -  -  -  -  xPos                .equ $D031F6
   24 D1:AF05 -  -  -  -  yPos                .equ $D031F7
   25 D1:AF05 -  -  -  -  slopPos             .equ $D031F8        ;extra byte here
   26 D1:AF05 -  -  -  -  debugram            .equ $D031F9        ;FA and FB occupied too.
   27 D1:AF05 -  -  -  -  save_spl            .equ $D031FC        ;FD and FE occupied too.
   28 D1:AF05 -  -  -  -  save_mbase          .equ $D031FF        ;
   29 D1:AF05 -  -  -  -  core_memory_ix      .equ $D03280        ;occupies D03200 to D032FF
   30 D1:AF05 -  -  -  -  scrap_mapping       .equ $D03300        ;256 bytes. maps to nowhere important.
   31 D1:AF05 -  -  -  -  saferam1            .equ $D03400        ;1024 bytes available. Define later.
   32 D1:AF05 -  -  -  -  main_ram            .equ $D03800        ;$0800 bytes of main system memory
   33 D1:AF05 -  -  -  -  
   34 D1:AF05 -  -  -  -  ZEROPAGE            .equ main_ram+(0*256)
   35 D1:AF05 -  -  -  -  STACKBASE           .equ main_ram+(1*256)
   36 D1:AF05 -  -  -  -  
   37 D1:AF05 -  -  -  -  BASETABLE           .equ $D04000        ;variable size. 256*BASETABLE_STRIDE
   38 D1:AF05 -  -  -  -  BASETABLE_STRIDE    .equ 12
   39 D1:AF05 -  -  -  -  PAGETABLE_OFFSET    .equ 0
   40 D1:AF05 -  -  -  -  PAGETABLE           .equ BASETABLE+PAGETABLE_OFFSET
   41 D1:AF05 -  -  -  -  JUMPTABLE_OFFSET    .equ 4
   42 D1:AF05 -  -  -  -  JUMPTABLE           .equ BASETABLE+JUMPTABLE_OFFSET
   43 D1:AF05 -  -  -  -  USETABLE_OFFSET     .equ 8
   44 D1:AF05 -  -  -  -  USETABLE            .equ BASETABLE+USETABLE_OFFSET
   45 D1:AF05 -  -  -  -  
   46 D1:AF05 -  -  -  -  NAMETABLE1          .equ BASETABLE+(512*BASETABLE_STRIDE)
   47 D1:AF05 -  -  -  -  NAMETABLE2          .equ NAMETABLE1 + 1024
   48 D1:AF05 -  -  -  -  
   49 D1:AF05 -  -  -  -  ;saferam1 1024 bytes storage
   50 D1:AF05 -  -  -  -  ;
   51 D1:AF05 -  -  -  -  curScreenBuf        .equ saferam1           ;3b
   52 D1:AF05 -  -  -  -  linestart           .equ curScreenBuf+3     ;1b
   53 D1:AF05 -  -  -  -  inputNumFiles       .equ linestart+1        ;1b
   54 D1:AF05 -  -  -  -  basefile_sig        .equ inputNumFiles+1    ;3b pointer to 16b hash
   55 D1:AF05 -  -  -  -  missing_files       .equ basefile_sig+3     ;1b
   56 D1:AF05 -  -  -  -  total_rom_size      .equ missing_files+1    ;3b
   57 D1:AF05 -  -  -  -  prg_rom_size        .equ total_rom_size+3   ;3b
   58 D1:AF05 -  -  -  -  chr_rom_size        .equ prg_rom_size+3     ;3b
   59 D1:AF05 -  -  -  -  submapper           .equ chr_rom_size+3     ;1b. iNES2 thing. Not often used.
   60 D1:AF05 -  -  -  -  ines_flag_6         .equ submapper+1        ;1b. Flags that a mapper may need.
   61 D1:AF05 -  -  -  -  mapper_id           .equ ines_flag_6+1      ;3b. Convenience load for 12 bits
   62 D1:AF05 -  -  -  -  mapper_adr_base     .equ mapper_id+1        ;3b. Used to load mapper
   63 D1:AF05 -  -  -  -  trainer_base        .equ mapper_adr_base+3  ;3b. If exist, starts here
   64 D1:AF05 -  -  -  -  prg_rom_base        .equ mapper_adr_base+3  ;3b. Adjusted in case of trainer.
   65 D1:AF05 -  -  -  -  chr_rom_base        .equ prg_rom_base+3     ;3b. Located somewhere.
   66 D1:AF05 -  -  -  -  chr_rom_base_file   .equ chr_rom_base+3     ;1b. Nonzero if not in first file.
   67 D1:AF05 -  -  -  -  timings_base        .equ chr_rom_base_file+1    ;3b. Current pointer to timings
   68 D1:AF05 -  -  -  -  
   69 D1:AF05 -  -  -  -  SIZEOF_INTEGRITY_HASH    .equ 16
   70 D1:AF05 -  -  -  -  MAXPRGROM_HINIB     .equ 1
   71 D1:AF05 -  -  -  -  MAXCHRROM_HINIB     .equ 3
   72 D1:AF05 -  -  -  -  NUMBER_OF_MAPPERS   .equ 1
   73 D1:AF05 -  -  -  -  MAPPER_STRIDE       .equ 9
   74 D1:AF05 -  -  -  -  
   75 D1:AF05 -  -  -  -  MAXNUMFILES         .equ 1                  ;set to 32 later. that's like 1.5MB
   76 D1:AF05 -  -  -  -  FILETABLE_STRIDE    .equ 8
   77 D1:AF05 -  -  -  -  FILETABLE           .equ timings_base+3   ;(MAXNUMFILES*FILETABLE_STRIDE)b
   78 D1:AF05 -  -  -  -  FILE_SIZE_OFFSET    .equ 0
   79 D1:AF05 -  -  -  -  FILE_ADR_OFFSET     .equ 2
   80 D1:AF05 -  -  -  -  FILE_SIG_ADR_OFFSET .equ 5
   81 D1:AF05 -  -  -  -  
   82 D1:AF05 -  -  -  -  
   83 D1:AF05 -  -  -  -  ;
   84 D1:AF05 -  -  -  -  ;
   85 D1:AF05 -  -  -  -  
   86 D1:AF05 -  -  -  -  
   87 D1:AF05 -  -  -  -  
   88 D1:AF05 -  -  -  -  #define APU_KEYLATCH -1
   89 D1:AF05 -  -  -  -  #define APU_KEYPAD -2   ;First to last: A,B,SE,ST,UP,DO,LE,RI. 01234567.
   90 D1:AF05 -  -  -  -  ;core memory
   91 D1:AF05 -  -  -  -  #define REGA 0
   92 D1:AF05 -  -  -  -  #define REGX 1
   93 D1:AF05 -  -  -  -  #define REGY 2
   94 D1:AF05 -  -  -  -  #define REGSP 3
   95 D1:AF05 -  -  -  -  #define REGSR 4
   96 D1:AF05 -  -  -  -  #define REGPC 5
   97 D1:AF05 -  -  -  -  #define CYCLES_REMAIN 8
   98 D1:AF05 -  -  -  -  #define CYCLES_CURRENT 11
   99 D1:AF05 -  -  -  -  #define CURRENT_OPCODES 14
  100 D1:AF05 -  -  -  -  #define CORE_STACK_BASE 17
  101 D1:AF05 -  -  -  -  #define CORE_ERROR_LEVEL 20
  102 D1:AF05 -  -  -  -  ;flag IDs
  103 D1:AF05 -  -  -  -  #define SF_NEG 7
  104 D1:AF05 -  -  -  -  #define SF_OVER 6 
  105 D1:AF05 -  -  -  -  #define SF_RESERVED 5 
  106 D1:AF05 -  -  -  -  #define SF_BRK 4
  107 D1:AF05 -  -  -  -  #define SF_DEC 3
  108 D1:AF05 -  -  -  -  #define SF_INT 2
  109 D1:AF05 -  -  -  -  #define SF_ZERO 1
  110 D1:AF05 -  -  -  -  #define SF_CARRY 0
  111 D1:AF05 -  -  -  -  
  112 D1:AF05 -  -  -  -  #macro ADDCYC(X)
  113 D1:AF05                 #if (x < 1)
  114 D1:AF05                     nop
  115 D1:AF05                 #elif (X = 1)
  116 D1:AF05                     inc iy
  117 D1:AF05                 #else
  118 D1:AF05                     lea iy,iy+X
  119 D1:AF05                 #endif
  120 D1:AF05             #endmacro
  121 D1:AF05 -  -  -  -  
  122 D1:AF05 -  -  -  -  ;
  123 D1:AF05 -  -  -  -  ;
  124 D1:AF05 -  -  -  -  ;
  125 D1:AF05 -  -  -  -  #endif
  126 D1:AF05 -  -  -  -  .list
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    3 D1:AF05 -  -  -  -  
    4 D1:AF05 -  -  -  -  ;Function list:
    5 D1:AF05 -  -  -  -  ; fastCopy - Swaps drawing buffer to display what is currently written there.
    6 D1:AF05 -  -  -  -  ; startGfx - Configures LCD to run in graphx mode. UNSAFE TO RUN MORE THAN ONCE
    7 D1:AF05 -  -  -  -  ; stopGfx - Restores LCD configuration to TI-OS default.
    8 D1:AF05 -  -  -  -  ; configureScreen - Swaps screen configuration betwen current and stored.
    9 D1:AF05 -  -  -  -  ; setDefaultPalette - Sets default (XLIBC) color palette.
   10 D1:AF05 -  -  -  -  ; clearTextBuf - no inputs. Sets text buffer to all spaces.
   11 D1:AF05 -  -  -  -  ; printTextBuf - no inputs. Mirrors buffer to screen.
   12 D1:AF05 -  -  -  -  ; setLineStart - A=xpos. Set xPos and linestart
   13 D1:AF05 -  -  -  -  ; setCurLine - A=ypos. Set yPos.
   14 D1:AF05 -  -  -  -  ; newLine - no inputs. sets linestart = xPos, increments yPos
   15 D1:AF05 -  -  -  -  ; newPage - no inputs. sets linestart = xPos, yPos = 0
   16 D1:AF05 -  -  -  -  ; printString - HL=address to string. destroys all.
   17 D1:AF05 -  -  -  -  ; printBigFont - A=ASCII char to print at xPos,yPos. Advances xPos by 1.
   18 D1:AF05 -  -  -  -  ; printSmallNumPair - A=0-255 to print at xPos,Ypos. Advances xPos by 1.
   19 D1:AF05 -  -  -  -  ; calculateScreenPtr - Converts xPos,yPos into HL= screen buffer address.
   20 D1:AF05 -  -  -  -  ; calculateScreenPtrDE - Converts E=xPos,D=yPos into HL= screen buffer address.
   21 D1:AF05 -  -  -  -  ;
   22 D1:AF05 -  -  -  -  ;
   23 D1:AF05 -  -  -  -  ;
   24 D1:AF05 -  -  -  -  ;
   25 D1:AF05 -  -  -  -  ;
   26 D1:AF05 -  -  -  -  ;
   27 D1:AF05 -  -  -  -  ;
   28 D1:AF05 -  -  -  -  
   29 D1:AF05 -  -  -  -  
   30 D1:AF05 -  -  -  -  
   31 D1:AF05 -  -  -  -  
   32 D1:AF05 -  -  -  -  ;-----------------------------------------------------------------------------
   33 D1:AF05 -  -  -  -  ;Screen hardware interface stuff
   34 D1:AF05 -  -  -  -  
   35 D1:AF05 -  -  -  -  ;It ought to be called "bufSwap" but I just can't. I won't.
   36 D1:AF05 -  -  -  -  fastCopy:
   37 D1:AF05 11 00 00 D4     ld  de,screenBuf1
   38 D1:AF09 2A 10 00 E3     ld  hl,(mpLcdBase)
   39 D1:AF0D 22 00 34 D0     ld  (curScreenBuf),hl
   40 D1:AF11 B7 -  -  -      or  a,a
   41 D1:AF12 ED 52 -  -      sbc hl,de
   42 D1:AF14 EB -  -  -      ex  de,hl
   43 D1:AF15 20 04 -  -      jr  nz,+_
   44 D1:AF17 21 00 2C D5     ld  hl,screenBuf2
   45 D1:AF1B 22 10 00 E3 _:  ld  (mpLcdBase),hl
   46 D1:AF1F C9 -  -  -      ret
   47 D1:AF20 -  -  -  -  
   48 D1:AF20 -  -  -  -  stopGfx:
   49 D1:AF20 CD 74 03 00     call _boot_ClearVRAM
   50 D1:AF24 11 2D 09 00     ld  de,lcdNormalMode
   51 D1:AF28 01 00 00 D4     ld  bc,screenBuf1
   52 D1:AF2C 18 0C -  -      jr  configureScreen
   53 D1:AF2E -  -  -  -  
   54 D1:AF2E -  -  -  -  startGfx:
   55 D1:AF2E CD 74 03 00     call _boot_ClearVRAM
   56 D1:AF32 11 27 39 01     ld  de,lcdWatermark+lcdIntFront+lcdPwr+lcdBgr+lcdBpp8
   57 D1:AF36 01 00 00 D4     ld  bc,screenBuf1
   58 D1:AF3A -  -  -  -  configureScreen:
   59 D1:AF3A 21 10 00 E3     ld  hl,mpLcdBase
   60 D1:AF3E ED 0F -  -      ld  (hl),bc
   61 D1:AF40 2E 18 -  -      ld  L,lcdCtrl
   62 D1:AF42 ED 1F -  -      ld  (hl),de
   63 D1:AF44 2E 01 -  -      ld  L,lcdTiming0 + 1
   64 D1:AF46 01 08 00 00     ld  bc,8
   65 D1:AF4A 11 79 AF D1     ld  de,screenSettings
   66 D1:AF4E 1A -  -  -  _:  ld  a,(de)
   67 D1:AF4F ED A0 -  -      ldi
   68 D1:AF51 2B -  -  -      dec hl
   69 D1:AF52 77 -  -  -      ld  (hl),a
   70 D1:AF53 23 -  -  -      inc hl
   71 D1:AF54 EA 4E AF D1     jp  pe,-_
   72 D1:AF58 21 00 2C D5     ld  hl,screenBuf2
   73 D1:AF5C 22 00 34 D0     ld  (curScreenBuf),hl
   74 D1:AF60 -  -  -  -  ;Also copied from graphx
   75 D1:AF60 -  -  -  -  setDefaultPalette:
   76 D1:AF60 11 00 02 E3 	ld	de,mpLcdPalette	    ; address of mmio palette
   77 D1:AF64 43 -  -  -  	ld	b,e			        ; b = 0
   78 D1:AF65 78 -  -  -  _:	ld	a,b
   79 D1:AF66 0F -  -  -  	rrca
   80 D1:AF67 A8 -  -  -  	xor	a,b
   81 D1:AF68 E6 E0 -  -  	and	a,224
   82 D1:AF6A A8 -  -  -  	xor	a,b
   83 D1:AF6B 12 -  -  -  	ld	(de),a
   84 D1:AF6C 13 -  -  -  	inc	de
   85 D1:AF6D 78 -  -  -  	ld	a,b
   86 D1:AF6E 17 -  -  -  	rla
   87 D1:AF6F 17 -  -  -  	rla
   88 D1:AF70 17 -  -  -  	rla
   89 D1:AF71 78 -  -  -  	ld	a,b
   90 D1:AF72 1F -  -  -  	rra
   91 D1:AF73 12 -  -  -  	ld	(de),a
   92 D1:AF74 13 -  -  -  	inc	de
   93 D1:AF75 04 -  -  -  	inc	b
   94 D1:AF76 20 ED -  -  	jr	nz,-_		    ; loop for 256 times to fill palette
   95 D1:AF78 C9 -  -  -  	ret
   96 D1:AF79 -  -  -  -  
   97 D1:AF79 -  -  -  -  screenSettings:
   98 D1:AF79 -  -  -  -  ;Copied from my old Falldown2 project, which was also copied from graphx.asm
   99 D1:AF79 -  -  -  -  ;	.db	14 shl 2			; PPL shl 2
  100 D1:AF79 07 -  -  -  	.db	7					; HSW
  101 D1:AF7A 57 -  -  -  	.db	87					; HFP
  102 D1:AF7B 3F -  -  -  	.db	63					; HBP
  103 D1:AF7C 3F 01 -  -  	.dw	(0 >> 10)+319		; (VSW shl 10)+LPP
  104 D1:AF7E B3 -  -  -  	.db	179					; VFP
  105 D1:AF7F 00 -  -  -  	.db	0					; VBP
  106 D1:AF80 00 -  -  -  	.db	(0 >> 6)+(0 >> 5)+0	; (ACB shl 6)+(CLKSEL shl 5)+PCD_LO
  107 D1:AF81 -  -  -  -  ;  H = ((PPL+1)*16)+(HSW+1)+(HFP+1)+(HBP+1) = 240+8+88+64 = 400
  108 D1:AF81 -  -  -  -  ;  V = (LPP+1)+(VSW+1)+VFP+VBP = 320+1+179+0 = 500
  109 D1:AF81 -  -  -  -  ; CC = H*V*PCD*2 = 400*500*2*2 = 800000
  110 D1:AF81 -  -  -  -  ; Hz = 48000000/CC = 60
  111 D1:AF81 -  -  -  -  
  112 D1:AF81 -  -  -  -  
  113 D1:AF81 -  -  -  -  ;-----------------------------------------------------------------------------
  114 D1:AF81 -  -  -  -  ; Text Rendering
  115 D1:AF81 -  -  -  -  
  116 D1:AF81 -  -  -  -  clearTextBuf:
  117 D1:AF81 21 00 58 D0     ld  hl,NAMETABLE1
  118 D1:AF85 11 01 58 D0     ld  de,NAMETABLE1+1
  119 D1:AF89 01 FF 03 00     ld  bc,1023
  120 D1:AF8D 36 20 -  -      ld  (hl),' '
  121 D1:AF8F ED B0 -  -      ldir
  122 D1:AF91 C9 -  -  -      ret
  123 D1:AF92 -  -  -  -  
  124 D1:AF92 -  -  -  -  printTextBuf:
  125 D1:AF92 2A F6 31 D0     ld  hl,(xPos)
  126 D1:AF96 22 C6 AF D1     ld  (printTextBuf_smcPosRecovery),hl
  127 D1:AF9A 21 00 58 D0     ld  hl,NAMETABLE1
  128 D1:AF9E AF -  -  -      xor a,a
  129 D1:AF9F 32 F7 31 D0     ld  (yPos),a
  130 D1:AFA3 0E 1E -  -      ld  c,30
  131 D1:AFA5 3E 08 -  -  _:  ld  a,8
  132 D1:AFA7 32 F6 31 D0     ld  (xPos),a
  133 D1:AFAB 06 20 -  -      ld  b,$20
  134 D1:AFAD 7E -  -  -  _:  ld  a,(hl)
  135 D1:AFAE 23 -  -  -      inc hl
  136 D1:AFAF C5 -  -  -      push bc
  137 D1:AFB0 E5 -  -  -          push hl
  138 D1:AFB1 CD 0F B0 D1             call printBigFont
  139 D1:AFB5 E1 -  -  -          pop hl
  140 D1:AFB6 C1 -  -  -      pop bc
  141 D1:AFB7 10 F4 -  -      djnz -_
  142 D1:AFB9 3A F7 31 D0     ld  a,(yPos)
  143 D1:AFBD 3C -  -  -      inc a
  144 D1:AFBE 32 F7 31 D0     ld  (yPos),a
  145 D1:AFC2 0D -  -  -      dec  c
  146 D1:AFC3 20 E0 -  -      jr  nz,--_
  147 D1:AFC5 -  -  -  -  printTextBuf_smcPosRecovery .equ $+1
  148 D1:AFC5 21 00 00 00     ld  hl,0
  149 D1:AFC9 22 F6 31 D0     ld  (xPos),hl
  150 D1:AFCD C9 -  -  -      ret
  151 D1:AFCE -  -  -  -  
  152 D1:AFCE -  -  -  -  ;A=column to start on
  153 D1:AFCE -  -  -  -  setLineStart:
  154 D1:AFCE 32 F6 31 D0     ld  (xPos),a
  155 D1:AFD2 32 03 34 D0     ld  (linestart),a
  156 D1:AFD6 C9 -  -  -      ret
  157 D1:AFD7 -  -  -  -  
  158 D1:AFD7 -  -  -  -  ;A=row to start on
  159 D1:AFD7 -  -  -  -  setCurLine:
  160 D1:AFD7 32 F7 31 D0     ld  (yPos),a
  161 D1:AFDB C9 -  -  -      ret
  162 D1:AFDC -  -  -  -  
  163 D1:AFDC -  -  -  -  newPage:
  164 D1:AFDC 3E FF -  -      ld  a,$FF
  165 D1:AFDE 32 F7 31 D0     ld  (yPos),a
  166 D1:AFE2 -  -  -  -  newLine:
  167 D1:AFE2 3A 03 34 D0     ld  a,(linestart)
  168 D1:AFE6 32 F6 31 D0     ld  (xPos),a
  169 D1:AFEA 3A F7 31 D0     ld  a,(yPos)
  170 D1:AFEE 3C -  -  -      inc a
  171 D1:AFEF FE 1E -  -      cp  30
  172 D1:AFF1 38 01 -  -      jr  c,+_
  173 D1:AFF3 AF -  -  -      xor a,a
  174 D1:AFF4 32 F7 31 D0 _:  ld  (yPos),a
  175 D1:AFF8 C9 -  -  -      ret
  176 D1:AFF9 -  -  -  -  
  177 D1:AFF9 -  -  -  -      
  178 D1:AFF9 -  -  -  -      
  179 D1:AFF9 -  -  -  -  
  180 D1:AFF9 -  -  -  -  ;HL=address to string
  181 D1:AFF9 -  -  -  -  printString:
  182 D1:AFF9 7E -  -  -      ld  a,(hl)
  183 D1:AFFA 23 -  -  -      inc hl
  184 D1:AFFB B7 -  -  -      or  a,a
  185 D1:AFFC C8 -  -  -      ret z
  186 D1:AFFD FE 0A -  -      cp  a,'\n'
  187 D1:AFFF 20 06 -  -      jr nz,+_
  188 D1:B001 CD E2 AF D1     call newLine
  189 D1:B005 18 F2 -  -      jr  printString
  190 D1:B007 E5 -  -  -  _:  push hl
  191 D1:B008 CD 0F B0 D1         call printBigFont
  192 D1:B00C E1 -  -  -      pop hl
  193 D1:B00D 18 EA -  -      jr printString
  194 D1:B00F -  -  -  -  
  195 D1:B00F -  -  -  -  
  196 D1:B00F -  -  -  -  ;in: A=chrToPrint
  197 D1:B00F -  -  -  -  printBigFont:
  198 D1:B00F CD A4 B0 D1     call calculateScreenPtr
  199 D1:B013 EB -  -  -      ex  de,hl
  200 D1:B014 6F -  -  -      ld  L,a
  201 D1:B015 26 08 -  -      ld  H,8
  202 D1:B017 ED 6C -  -      mlt hl
  203 D1:B019 01 BE AF D1     ld  bc,graphx_textdata
  204 D1:B01D 09 -  -  -      add hl,bc
  205 D1:B01E EB -  -  -      ex  de,hl
  206 D1:B01F 0E 08 -  -      ld  c,8
  207 D1:B021 06 08 -  -  _:  ld  b,8
  208 D1:B023 1A -  -  -      ld  a,(de)
  209 D1:B024 87 -  -  -  _:  add a,a
  210 D1:B025 -  -  -  -  fontBGColor_var .equ $+1
  211 D1:B025 36 00 -  -      ld  (hl),FONTBGCOLOR
  212 D1:B027 30 02 -  -      jr  nc,$+4
  213 D1:B029 -  -  -  -  fontFGColor_var .equ $+1
  214 D1:B029 36 FF -  -      ld  (hl),FONTFGCOLOR
  215 D1:B02B 23 -  -  -      inc hl
  216 D1:B02C 10 F6 -  -      djnz -_
  217 D1:B02E 79 -  -  -      ld  a,c
  218 D1:B02F 01 38 01 00     ld  bc,320-8
  219 D1:B033 09 -  -  -      add hl,bc
  220 D1:B034 4F -  -  -      ld  c,a
  221 D1:B035 13 -  -  -      inc de
  222 D1:B036 0D -  -  -      dec c
  223 D1:B037 20 E8 -  -      jr  nz,--_
  224 D1:B039 21 F6 31 D0     ld  hl,xPos
  225 D1:B03D 34 -  -  -      inc (hl)
  226 D1:B03E C9 -  -  -      ret
  227 D1:B03F -  -  -  -  
  228 D1:B03F -  -  -  -  ;A= 0-255 numeric value to display as hex
  229 D1:B03F -  -  -  -  printSmallNumPair:
  230 D1:B03F CD A4 B0 D1     call calculateScreenPtr
  231 D1:B043 F5 -  -  -      push af
  232 D1:B044 1F -  -  -          rra
  233 D1:B045 1F -  -  -          rra
  234 D1:B046 1F -  -  -          rra
  235 D1:B047 1F -  -  -          rra
  236 D1:B048 CD 57 B0 D1         call +_
  237 D1:B04C F1 -  -  -      pop af
  238 D1:B04D CD 57 B0 D1     call +_
  239 D1:B051 21 F6 31 D0     ld  hl,xPos
  240 D1:B055 34 -  -  -      inc (hl)
  241 D1:B056 C9 -  -  -      ret
  242 D1:B057 E6 0F -  -  _:  and a,$0F
  243 D1:B059 01 40 01 00     ld  bc,320
  244 D1:B05D 09 -  -  -      add hl,bc   ;drop height by one. These small chars are *short*
  245 D1:B05E EB -  -  -      ex  de,hl
  246 D1:B05F 6F -  -  -      ld  L,a
  247 D1:B060 26 03 -  -      ld  H,3
  248 D1:B062 ED 6C -  -      mlt hl
  249 D1:B064 01 BE B3 D1     ld  bc,SmallHexFont
  250 D1:B068 09 -  -  -      add hl,bc
  251 D1:B069 EB -  -  -      ex  de,hl
  252 D1:B06A 0E 03 -  -      ld  c,3
  253 D1:B06C 18 14 -  -      jr  printSmallNumPair_2ndHalf
  254 D1:B06E -  -  -  -  printSmallNumPair_1stHalf:
  255 D1:B06E 1A -  -  -      ld  a,(de)
  256 D1:B06F 06 04 -  -      ld  b,4
  257 D1:B071 87 -  -  -  _:  add a,a
  258 D1:B072 -  -  -  -  smallFontBGColor_var .equ $+1
  259 D1:B072 36 00 -  -      ld  (hl),FONTBGCOLOR
  260 D1:B074 30 02 -  -      jr  nc,$+4
  261 D1:B076 -  -  -  -  smallFontFGColor_var .equ $+1
  262 D1:B076 36 FF -  -      ld  (hl),FONTFGCOLOR
  263 D1:B078 23 -  -  -      inc hl
  264 D1:B079 10 F6 -  -      djnz -_
  265 D1:B07B 79 -  -  -      ld  a,c
  266 D1:B07C 01 3C 01 00     ld  bc,320-4
  267 D1:B080 09 -  -  -      add hl,bc
  268 D1:B081 4F -  -  -      ld  c,a
  269 D1:B082 -  -  -  -  printSmallNumPair_2ndHalf:
  270 D1:B082 1A -  -  -      ld  a,(de)
  271 D1:B083 07 -  -  -      rlca
  272 D1:B084 07 -  -  -      rlca
  273 D1:B085 07 -  -  -      rlca
  274 D1:B086 07 -  -  -      rlca
  275 D1:B087 06 04 -  -      ld  b,4
  276 D1:B089 87 -  -  -  _:  add a,a
  277 D1:B08A 36 00 -  -      ld  (hl),FONTBGCOLOR
  278 D1:B08C 30 02 -  -      jr  nc,$+4
  279 D1:B08E 36 FF -  -      ld  (hl),FONTFGCOLOR
  280 D1:B090 23 -  -  -      inc hl
  281 D1:B091 10 F6 -  -      djnz -_
  282 D1:B093 13 -  -  -      inc de
  283 D1:B094 79 -  -  -      ld  a,c
  284 D1:B095 01 3C 01 00     ld  bc,320-4
  285 D1:B099 09 -  -  -      add hl,bc
  286 D1:B09A 4F -  -  -      ld  c,a
  287 D1:B09B 0D -  -  -      dec c
  288 D1:B09C 20 D0 -  -      jr  nz,printSmallNumPair_1stHalf
  289 D1:B09E 01 84 F8 FF     ld  bc,-(320*(1+5))+4
  290 D1:B0A2 09 -  -  -      add hl,bc
  291 D1:B0A3 C9 -  -  -      ret
  292 D1:B0A4 -  -  -  -  
  293 D1:B0A4 -  -  -  -  calculateScreenPtr:
  294 D1:B0A4 -  -  -  -      ;xcoord: x * 8 
  295 D1:B0A4 -  -  -  -      ;ycoord: 320 * 8 * y
  296 D1:B0A4 -  -  -  -      ;coord: (8x)+320*8y -> 8(x+320y)
  297 D1:B0A4 ED 5B F6 31 
              D0 -  -  -      ld  de,(xPos)
  298 D1:B0A9 -  -  -  -  calculateScreenPtrDE:
  299 D1:B0A9 6A -  -  -      ld  L,d     ;yPos
  300 D1:B0AA 26 A0 -  -      ld  h,160
  301 D1:B0AC ED 6C -  -      mlt hl
  302 D1:B0AE 29 -  -  -      add hl,hl
  303 D1:B0AF 16 01 -  -      ld  d,1
  304 D1:B0B1 ED 5C -  -      mlt de      ;DE=E. Clears high bytes.
  305 D1:B0B3 19 -  -  -      add hl,de
  306 D1:B0B4 29 -  -  -      add hl,hl
  307 D1:B0B5 29 -  -  -      add hl,hl
  308 D1:B0B6 29 -  -  -      add hl,hl
  309 D1:B0B7 ED 5B 00 34 
              D0 -  -  -      ld  de,(curScreenBuf)
  310 D1:B0BC 19 -  -  -      add hl,de
  311 D1:B0BD C9 -  -  -      ret
  312 D1:B0BE -  -  -  -  
  313 D1:B0BE -  -  -  -  
  314 D1:B0BE -  -  -  -  
  315 D1:B0BE -  -  -  -  
  316 D1:B0BE -  -  -  -  
  317 D1:B0BE -  -  -  -  
  318 D1:B0BE -  -  -  -  
  319 D1:B0BE -  -  -  -  
  320 D1:B0BE -  -  -  -  
  321 D1:B0BE -  -  -  -  ;-----------------------------------------------------------------------------
  322 D1:B0BE -  -  -  -  ; Data Section
  323 D1:B0BE -  -  -  -  
  324 D1:B0BE -  -  -  -  graphx_textdata		.EQU $-(8*' ')		;points to what would be start of ASCII
  325 D1:B0BE 00 00 00 00 
              00 00 00 00 .db	$00,$00,$00,$00,$00,$00,$00,$00 ;
  326 D1:B0C6 C0 C0 C0 C0 
              C0 00 C0 00 .db	$C0,$C0,$C0,$C0,$C0,$00,$C0,$00 ; !
  327 D1:B0CE D8 D8 D8 00 
              00 00 00 00 .db	$D8,$D8,$D8,$00,$00,$00,$00,$00 ; "
  328 D1:B0D6 6C 6C FE 6C 
              FE 6C 6C 00 .db	$6C,$6C,$FE,$6C,$FE,$6C,$6C,$00 ; #
  329 D1:B0DE 18 7E C0 7C 
              06 FC 18 00 .db	$18,$7E,$C0,$7C,$06,$FC,$18,$00 ; $
  330 D1:B0E6 00 C6 CC 18 
              30 66 C6 00 .db	$00,$C6,$CC,$18,$30,$66,$C6,$00 ; %
  331 D1:B0EE 38 6C 38 76 
              DC CC 76 00 .db	$38,$6C,$38,$76,$DC,$CC,$76,$00 ; &
  332 D1:B0F6 30 30 60 00 
              00 00 00 00 .db	$30,$30,$60,$00,$00,$00,$00,$00 ; '
  333 D1:B0FE 30 60 C0 C0 
              C0 60 30 00 .db	$30,$60,$C0,$C0,$C0,$60,$30,$00 ; (
  334 D1:B106 C0 60 30 30 
              30 60 C0 00 .db	$C0,$60,$30,$30,$30,$60,$C0,$00 ; )
  335 D1:B10E 00 66 3C FF 
              3C 66 00 00 .db	$00,$66,$3C,$FF,$3C,$66,$00,$00 ; *
  336 D1:B116 00 30 30 FC 
              FC 30 30 00 .db	$00,$30,$30,$FC,$FC,$30,$30,$00 ; +
  337 D1:B11E 00 00 00 00 
              00 60 60 C0 .db	$00,$00,$00,$00,$00,$60,$60,$C0 ; ,
  338 D1:B126 00 00 00 FC 
              00 00 00 00 .db	$00,$00,$00,$FC,$00,$00,$00,$00 ; -
  339 D1:B12E 00 00 00 00 
              00 C0 C0 00 .db	$00,$00,$00,$00,$00,$C0,$C0,$00 ; .
  340 D1:B136 06 0C 18 30 
              60 C0 80 00 .db	$06,$0C,$18,$30,$60,$C0,$80,$00 ; /
  341 D1:B13E 7C CE DE F6 
              E6 C6 7C 00 .db	$7C,$CE,$DE,$F6,$E6,$C6,$7C,$00 ; 0
  342 D1:B146 30 70 30 30 
              30 30 FC 00 .db	$30,$70,$30,$30,$30,$30,$FC,$00 ; 1
  343 D1:B14E 7C C6 06 7C 
              C0 C0 FE 00 .db	$7C,$C6,$06,$7C,$C0,$C0,$FE,$00 ; 2
  344 D1:B156 FC 06 06 3C 
              06 06 FC 00 .db	$FC,$06,$06,$3C,$06,$06,$FC,$00 ; 3
  345 D1:B15E 0C CC CC CC 
              FE 0C 0C 00 .db	$0C,$CC,$CC,$CC,$FE,$0C,$0C,$00 ; 4
  346 D1:B166 FE C0 FC 06 
              06 C6 7C 00 .db	$FE,$C0,$FC,$06,$06,$C6,$7C,$00 ; 5
  347 D1:B16E 7C C0 C0 FC 
              C6 C6 7C 00 .db	$7C,$C0,$C0,$FC,$C6,$C6,$7C,$00 ; 6
  348 D1:B176 FE 06 06 0C 
              18 30 30 00 .db	$FE,$06,$06,$0C,$18,$30,$30,$00 ; 7
  349 D1:B17E 7C C6 C6 7C 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$7C,$C6,$C6,$7C,$00 ; 8
  350 D1:B186 7C C6 C6 7E 
              06 06 7C 00 .db	$7C,$C6,$C6,$7E,$06,$06,$7C,$00 ; 9
  351 D1:B18E 00 C0 C0 00 
              00 C0 C0 00 .db	$00,$C0,$C0,$00,$00,$C0,$C0,$00 ; :
  352 D1:B196 00 60 60 00 
              00 60 60 C0 .db	$00,$60,$60,$00,$00,$60,$60,$C0 ; ;
  353 D1:B19E 18 30 60 C0 
              60 30 18 00 .db	$18,$30,$60,$C0,$60,$30,$18,$00 ; <
  354 D1:B1A6 00 00 FC 00 
              FC 00 00 00 .db	$00,$00,$FC,$00,$FC,$00,$00,$00 ; =
  355 D1:B1AE C0 60 30 18 
              30 60 C0 00 .db	$C0,$60,$30,$18,$30,$60,$C0,$00 ; >
  356 D1:B1B6 78 CC 18 30 
              30 00 30 00 .db	$78,$CC,$18,$30,$30,$00,$30,$00 ; ?
  357 D1:B1BE 7C C6 DE DE 
              DE C0 7E 00 .db	$7C,$C6,$DE,$DE,$DE,$C0,$7E,$00 ; @
  358 D1:B1C6 38 6C C6 C6 
              FE C6 C6 00 .db	$38,$6C,$C6,$C6,$FE,$C6,$C6,$00 ; A
  359 D1:B1CE FC C6 C6 FC 
              C6 C6 FC 00 .db	$FC,$C6,$C6,$FC,$C6,$C6,$FC,$00 ; B
  360 D1:B1D6 7C C6 C0 C0 
              C0 C6 7C 00 .db	$7C,$C6,$C0,$C0,$C0,$C6,$7C,$00 ; C
  361 D1:B1DE F8 CC C6 C6 
              C6 CC F8 00 .db	$F8,$CC,$C6,$C6,$C6,$CC,$F8,$00 ; D
  362 D1:B1E6 FE C0 C0 F8 
              C0 C0 FE 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$FE,$00 ; E
  363 D1:B1EE FE C0 C0 F8 
              C0 C0 C0 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$C0,$00 ; F
  364 D1:B1F6 7C C6 C0 C0 
              CE C6 7C 00 .db	$7C,$C6,$C0,$C0,$CE,$C6,$7C,$00 ; G
  365 D1:B1FE C6 C6 C6 FE 
              C6 C6 C6 00 .db	$C6,$C6,$C6,$FE,$C6,$C6,$C6,$00 ; H
  366 D1:B206 7E 18 18 18 
              18 18 7E 00 .db	$7E,$18,$18,$18,$18,$18,$7E,$00 ; I
  367 D1:B20E 06 06 06 06 
              06 C6 7C 00 .db	$06,$06,$06,$06,$06,$C6,$7C,$00 ; J
  368 D1:B216 C6 CC D8 F0 
              D8 CC C6 00 .db	$C6,$CC,$D8,$F0,$D8,$CC,$C6,$00 ; K
  369 D1:B21E C0 C0 C0 C0 
              C0 C0 FE 00 .db	$C0,$C0,$C0,$C0,$C0,$C0,$FE,$00 ; L
  370 D1:B226 C6 EE FE FE 
              D6 C6 C6 00 .db	$C6,$EE,$FE,$FE,$D6,$C6,$C6,$00 ; M
  371 D1:B22E C6 E6 F6 DE 
              CE C6 C6 00 .db	$C6,$E6,$F6,$DE,$CE,$C6,$C6,$00 ; N
  372 D1:B236 7C C6 C6 C6 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$C6,$C6,$C6,$7C,$00 ; O
  373 D1:B23E FC C6 C6 FC 
              C0 C0 C0 00 .db	$FC,$C6,$C6,$FC,$C0,$C0,$C0,$00 ; P
  374 D1:B246 7C C6 C6 C6 
              D6 DE 7C 06 .db	$7C,$C6,$C6,$C6,$D6,$DE,$7C,$06 ; Q
  375 D1:B24E FC C6 C6 FC 
              D8 CC C6 00 .db	$FC,$C6,$C6,$FC,$D8,$CC,$C6,$00 ; R
  376 D1:B256 7C C6 C0 7C 
              06 C6 7C 00 .db	$7C,$C6,$C0,$7C,$06,$C6,$7C,$00 ; S
  377 D1:B25E FF 18 18 18 
              18 18 18 00 .db	$FF,$18,$18,$18,$18,$18,$18,$00 ; T
  378 D1:B266 C6 C6 C6 C6 
              C6 C6 FE 00 .db	$C6,$C6,$C6,$C6,$C6,$C6,$FE,$00 ; U
  379 D1:B26E C6 C6 C6 C6 
              C6 7C 38 00 .db	$C6,$C6,$C6,$C6,$C6,$7C,$38,$00 ; V
  380 D1:B276 C6 C6 C6 C6 
              D6 FE 6C 00 .db	$C6,$C6,$C6,$C6,$D6,$FE,$6C,$00 ; W
  381 D1:B27E C6 C6 6C 38 
              6C C6 C6 00 .db	$C6,$C6,$6C,$38,$6C,$C6,$C6,$00 ; X
  382 D1:B286 C6 C6 C6 7C 
              18 30 E0 00 .db	$C6,$C6,$C6,$7C,$18,$30,$E0,$00 ; Y
  383 D1:B28E FE 06 0C 18 
              30 60 FE 00 .db	$FE,$06,$0C,$18,$30,$60,$FE,$00 ; Z
  384 D1:B296 F0 C0 C0 C0 
              C0 C0 F0 00 .db	$F0,$C0,$C0,$C0,$C0,$C0,$F0,$00 ; [
  385 D1:B29E C0 60 30 18 
              0C 06 02 00 .db	$C0,$60,$30,$18,$0C,$06,$02,$00 ; \
  386 D1:B2A6 F0 30 30 30 
              30 30 F0 00 .db	$F0,$30,$30,$30,$30,$30,$F0,$00 ; ]
  387 D1:B2AE 10 38 6C C6 
              00 00 00 00 .db	$10,$38,$6C,$C6,$00,$00,$00,$00 ; ^
  388 D1:B2B6 00 00 00 00 
              00 00 00 FF .db	$00,$00,$00,$00,$00,$00,$00,$FF ; _
  389 D1:B2BE C0 C0 60 00 
              00 00 00 00 .db	$C0,$C0,$60,$00,$00,$00,$00,$00 ; `
  390 D1:B2C6 00 00 7C 06 
              7E C6 7E 00 .db	$00,$00,$7C,$06,$7E,$C6,$7E,$00 ; a
  391 D1:B2CE C0 C0 C0 FC 
              C6 C6 FC 00 .db	$C0,$C0,$C0,$FC,$C6,$C6,$FC,$00 ; b
  392 D1:B2D6 00 00 7C C6 
              C0 C6 7C 00 .db	$00,$00,$7C,$C6,$C0,$C6,$7C,$00 ; c
  393 D1:B2DE 06 06 06 7E 
              C6 C6 7E 00 .db	$06,$06,$06,$7E,$C6,$C6,$7E,$00 ; d
  394 D1:B2E6 00 00 7C C6 
              FE C0 7C 00 .db	$00,$00,$7C,$C6,$FE,$C0,$7C,$00 ; e
  395 D1:B2EE 1C 36 30 78 
              30 30 78 00 .db	$1C,$36,$30,$78,$30,$30,$78,$00 ; f
  396 D1:B2F6 00 00 7E C6 
              C6 7E 06 FC .db	$00,$00,$7E,$C6,$C6,$7E,$06,$FC ; g
  397 D1:B2FE C0 C0 FC C6 
              C6 C6 C6 00 .db	$C0,$C0,$FC,$C6,$C6,$C6,$C6,$00 ; h
  398 D1:B306 18 00 38 18 
              18 18 3C 00 .db	$18,$00,$38,$18,$18,$18,$3C,$00 ; i
  399 D1:B30E 06 00 06 06 
              06 06 C6 7C .db	$06,$00,$06,$06,$06,$06,$C6,$7C ; j
  400 D1:B316 C0 C0 CC D8 
              F8 CC C6 00 .db	$C0,$C0,$CC,$D8,$F8,$CC,$C6,$00 ; k
  401 D1:B31E 38 18 18 18 
              18 18 3C 00 .db	$38,$18,$18,$18,$18,$18,$3C,$00 ; l
  402 D1:B326 00 00 CC FE 
              FE D6 D6 00 .db	$00,$00,$CC,$FE,$FE,$D6,$D6,$00 ; m
  403 D1:B32E 00 00 FC C6 
              C6 C6 C6 00 .db	$00,$00,$FC,$C6,$C6,$C6,$C6,$00 ; n
  404 D1:B336 00 00 7C C6 
              C6 C6 7C 00 .db	$00,$00,$7C,$C6,$C6,$C6,$7C,$00 ; o
  405 D1:B33E 00 00 FC C6 
              C6 FC C0 C0 .db	$00,$00,$FC,$C6,$C6,$FC,$C0,$C0 ; p
  406 D1:B346 00 00 7E C6 
              C6 7E 06 06 .db	$00,$00,$7E,$C6,$C6,$7E,$06,$06 ; q
  407 D1:B34E 00 00 FC C6 
              C0 C0 C0 00 .db	$00,$00,$FC,$C6,$C0,$C0,$C0,$00 ; r
  408 D1:B356 00 00 7E C0 
              7C 06 FC 00 .db	$00,$00,$7E,$C0,$7C,$06,$FC,$00 ; s
  409 D1:B35E 30 30 FC 30 
              30 30 1C 00 .db	$30,$30,$FC,$30,$30,$30,$1C,$00 ; t
  410 D1:B366 00 00 C6 C6 
              C6 C6 7E 00 .db	$00,$00,$C6,$C6,$C6,$C6,$7E,$00 ; u
  411 D1:B36E 00 00 C6 C6 
              C6 7C 38 00 .db	$00,$00,$C6,$C6,$C6,$7C,$38,$00 ; v
  412 D1:B376 00 00 C6 C6 
              D6 FE 6C 00 .db	$00,$00,$C6,$C6,$D6,$FE,$6C,$00 ; w
  413 D1:B37E 00 00 C6 6C 
              38 6C C6 00 .db	$00,$00,$C6,$6C,$38,$6C,$C6,$00 ; x
  414 D1:B386 00 00 C6 C6 
              C6 7E 06 FC .db	$00,$00,$C6,$C6,$C6,$7E,$06,$FC ; y
  415 D1:B38E 00 00 FE 0C 
              38 60 FE 00 .db	$00,$00,$FE,$0C,$38,$60,$FE,$00 ; z
  416 D1:B396 1C 30 30 E0 
              30 30 1C 00 .db	$1C,$30,$30,$E0,$30,$30,$1C,$00 ; {
  417 D1:B39E C0 C0 C0 00 
              C0 C0 C0 00 .db	$C0,$C0,$C0,$00,$C0,$C0,$C0,$00 ; |
  418 D1:B3A6 E0 30 30 1C 
              30 30 E0 00 .db	$E0,$30,$30,$1C,$30,$30,$E0,$00 ; }
  419 D1:B3AE 76 DC 00 00 
              00 00 00 00 .db	$76,$DC,$00,$00,$00,$00,$00,$00 ; ~
  420 D1:B3B6 00 10 38 6C 
              C6 C6 FE 00 .db	$00,$10,$38,$6C,$C6,$C6,$FE,$00 ; △
  421 D1:B3BE -  -  -  -  
  422 D1:B3BE -  -  -  -  ;Copied from the Escheron: Twilight over Ragnoth project
  423 D1:B3BE -  -  -  -  ;whose format was copied from a (then-)authorized source
  424 D1:B3BE -  -  -  -  ;for DoorsCS (I think? The one for the 83+) by "Kerm Martian".
  425 D1:B3BE -  -  -  -  SmallHexFont:
  426 D1:B3BE 4E AA AE -  .db $4E,$AA,$AE				;zero
  427 D1:B3C1 44 C4 4E -  .db $44,$C4,$4E				;one
  428 D1:B3C4 4C 24 8E -  .db $4C,$24,$8E				;two
  429 D1:B3C7 4C 24 2C -  .db $4C,$24,$2C				;three
  430 D1:B3CA 48 AE 22 -  .db $48,$AE,$22				;four
  431 D1:B3CD 4E 8C 2C -  .db $4E,$8C,$2C				;five
  432 D1:B3D0 46 8E AE -  .db $46,$8E,$AE				;six
  433 D1:B3D3 4E 24 88 -  .db $4E,$24,$88				;seven
  434 D1:B3D6 4E AE AE -  .db $4E,$AE,$AE				;eight
  435 D1:B3D9 4E AE 2C -  .db $4E,$AE,$2C				;nine
  436 D1:B3DC 44 AE AA -  .db $44,$AE,$AA				;A
  437 D1:B3DF 4C AC AC -  .db $4C,$AC,$AC				;B
  438 D1:B3E2 46 88 86 -  .db $46,$88,$86				;C
  439 D1:B3E5 4C AA AC -  .db $4C,$AA,$AC				;D
  440 D1:B3E8 4E 8C 8E -  .db $4E,$8C,$8E				;E
  441 D1:B3EB 4E 8C 88 -  .db $4E,$8C,$88				;F
  442 D1:B3EE -  -  -  -  
  443 D1:B3EE -  -  -  -  
  444 D1:B3EE -  -  -  -  
Listing for file "main.z80"
  782 D1:B3EE -  -  -  -  #include "core.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    1 D1:B3EE -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    2 D1:B3EE -  -  -  -  
    3 D1:B3EE -  -  -  -  ;TODO: DEFINE MEMORY ACCESS MACROS. ONE OR MORE FOR READ AND WRITE.
    4 D1:B3EE -  -  -  -  ;FIGURE OUT HOW TO GET BOTH HIGH AND LOW BYTE OF ORIGINAL ADDRESS
    5 D1:B3EE -  -  -  -  ;AND PERFORM ALTERNATE ACTIONS BASED ON WHAT HARDWARE WAS ACCESSED.
    6 D1:B3EE -  -  -  -  ;NOTE: PATTERN SHOWS THAT D=MSB, C=LSB OF 6502 ADDRESS. USE THIS.
    7 D1:B3EE -  -  -  -  ;
    8 D1:B3EE -  -  -  -  ;THESE MACROS ARE PLACEHOLDERS. CHANGE THEM LATER ON TO REFLECT ACTUAL
    9 D1:B3EE -  -  -  -  ;HARDWARE SHENANIGANS.
   10 D1:B3EE -  -  -  -  ;
   11 D1:B3EE -  -  -  -  ;NOTE: WRITE ACCESSES RELY ON KNOWING WHAT DATA TO WRITE. CAN'T STORE THAT IN A
   12 D1:B3EE -  -  -  -  ;      SINCE WE NEED TO DO CONDITIONING. REGISTER B IS UNUSED SO LET'S USE THAT.
   13 D1:B3EE -  -  -  -  ;
   14 D1:B3EE -  -  -  -  #define READ_ACCESS call mapper0_read
   15 D1:B3EE -  -  -  -  #define WRITE_ACCESS call mapper0_write
   16 D1:B3EE -  -  -  -  ;Later, put in actual test. Z if not triggered, NZ if triggered. This
   17 D1:B3EE -  -  -  -  ;alters the behavior of the BRK instruction.
   18 D1:B3EE -  -  -  -  #define WAS_NMI_TRIGGERED or  a
   19 D1:B3EE -  -  -  -  
   20 D1:B3EE -  -  -  -  #define OPRFLG_C res SF_CARRY,b \ jr nc,$+4 \ set SF_CARRY,b
   21 D1:B3EE -  -  -  -  #define OPRFLG_V res SF_OVER,b \ jp po,$+6 \ set SF_OVER,b
   22 D1:B3EE -  -  -  -  #define OPRFLG_Z res SF_ZERO,b \ jr nz,$+4 \ set SF_ZERO,b
   23 D1:B3EE -  -  -  -  #define OPRFLG_N res SF_NEG,b \ jr nc,$+4 \ set SF_NEG,b
   24 D1:B3EE -  -  -  -  
   25 D1:B3EE -  -  -  -  #define FLAGS_ZN ld b,(ix+REGSR) \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   26 D1:B3EE -  -  -  -  #define FLAGS_CZN ld b,(ix+REGSR) \ OPRFLG_C \ rlc a  \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   27 D1:B3EE -  -  -  -  #define FLAGS_VCZN ld b,(ix+REGSR) \ OPRFLG_V \ OPRFLG_C \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   28 D1:B3EE -  -  -  -  
   29 D1:B3EE -  -  -  -  
   30 D1:B3EE -  -  -  -  ;Modify later to include provisions for hardware i/o based on page
   31 D1:B3EE -  -  -  -  #define HW_READ(src_reg) ld a,(src_reg)
   32 D1:B3EE -  -  -  -  #define HW_WRITE(dst_reg) ld (dst_reg),a
   33 D1:B3EE -  -  -  -  
   34 D1:B3EE -  -  -  -  
   35 D1:B3EE -  -  -  -  
   36 D1:B3EE -  -  -  -  
   37 D1:B3EE -  -  -  -  ;=============================================================================
   38 D1:B3EE -  -  -  -  ;=============================================================================
   39 D1:B3EE -  -  -  -  ;=============================================================================
   40 D1:B3EE -  -  -  -  ;=============================================================================
   41 D1:B3EE -  -  -  -  ;You should have set up the mappings already. This is because
   42 D1:B3EE -  -  -  -  ;mappings are program-dependant. Only $0000-$3FFF will be mapped in here
   43 D1:B3EE -  -  -  -  ;more or less because I don't expect anything else to map that.
   44 D1:B3EE -  -  -  -  i6502Init:
   45 D1:B3EE -  -  -  -      ;
   46 D1:B3EE -  -  -  -      ; At this point, you may need to randomize 2048 bytes at main_ram
   47 D1:B3EE -  -  -  -      ;
   48 D1:B3EE 21 00 38 D0     ld  hl,main_ram
   49 D1:B3F2 01 08 20 00     ld  bc,$002008
   50 D1:B3F6 1E 00 -  -      ld  e,$00
   51 D1:B3F8 CD D4 B4 D1     call i6502_map_pages
   52 D1:B3FC 21 00 33 D0     ld  hl,scrap_mapping
   53 D1:B400 01 01 20 00     ld  bc,$002001
   54 D1:B404 1E 20 -  -      ld  e,$20
   55 D1:B406 CD D4 B4 D1     call i6502_map_pages
   56 D1:B40A CD BB B4 D1     call i6502_load_instruction_set
   57 D1:B40E -  -  -  -      ;
   58 D1:B40E DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   59 D1:B413 FD 21 02 00 
              00 -  -  -      ld  iy,2    ;8 cycle startup. Hooking into inst6502_jsr for init
   60 D1:B418 ED 22 80 -      lea hl,ix-128
   61 D1:B41B ED 12 81 -      lea de,ix-127
   62 D1:B41E 01 FF 00 00     ld  bc,255
   63 D1:B422 36 00 -  -      ld  (hl),$00
   64 D1:B424 ED B0 -  -      ldir
   65 D1:B426 -  -  -  -      ;
   66 D1:B426 21 00 00 00     ld  hl,0
   67 D1:B42A 39 -  -  -      add hl,sp
   68 D1:B42B DD 2F 11 -      ld  (ix+CORE_STACK_BASE),hl
   69 D1:B42E -  -  -  -  
   70 D1:B42E -  -  -  -      ;Note: SP may need initialization. So does SR for interrupts. Or somesuch.
   71 D1:B42E 21 F4 4B D0     ld  hl,PAGETABLE+(255*BASETABLE_STRIDE)
   72 D1:B432 ED 27 -  -      ld  hl,(hl)
   73 D1:B434 11 FC 00 00     ld  de,$0000FC
   74 D1:B438 19 -  -  -      add hl,de
   75 D1:B439 -  -  -  -      ;
   76 D1:B439 -  -  -  -      ;jp inst6502_jsr
   77 D1:B439 -  -  -  -      ;Manual loading below. Uncomment "jp inst6502_jsr" to return to original.
   78 D1:B439 -  -  -  -      ;Settings below is to run nestest CPU-only test. The reset vector above
   79 D1:B439 -  -  -  -      ;requires a working PPU (and probably APU) to be present.
   80 D1:B439 DD 36 04 24     ld  (ix+REGSR),$24      ;because that's what the log wants?
   81 D1:B43D 21 00 C0 00     ld  hl,$C000
   82 D1:B441 DD 2F 05 -      ld  (ix+REGPC),HL
   83 D1:B444 FD 21 07 00 
              00 -  -  -      ld  iy,7
   84 D1:B449 DD 36 03 FD     ld  (ix+REGSP),$FD
   85 D1:B44D -  -  -  -      ;debug stuff
   86 D1:B44D 3A 30 00 F2     ld  a,($F20030)
   87 D1:B451 CB C7 -  -      set 0,a ;turn on timer 1
   88 D1:B453 32 30 00 F2     ld  ($F20030),a
   89 D1:B457 -  -  -  -  
   90 D1:B457 -  -  -  -  i6502FirstLoad:
   91 D1:B457 52 DD 17 05     ld.s de,(ix+REGPC)
   92 D1:B45B 7B -  -  -      ld  a,e
   93 D1:B45C 1E 0C -  -      ld  e,BASETABLE_STRIDE
   94 D1:B45E ED 5C -  -      mlt de
   95 D1:B460 21 00 40 D0     ld  hl,PAGETABLE
   96 D1:B464 19 -  -  -      add hl,de
   97 D1:B465 ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
   98 D1:B467 16 00 -  -      ld  d,0
   99 D1:B469 5F -  -  -      ld  e,a
  100 D1:B46A 19 -  -  -      add hl,de       ;resolve final address
  101 D1:B46B 18 19 -  -      jr  i6502FinishLoad
  102 D1:B46D -  -  -  -  i6502NextLoad:
  103 D1:B46D 23 -  -  -      inc hl
  104 D1:B46E 1C -  -  -      inc e
  105 D1:B46F 20 15 -  -      jr  nz,i6502FinishLoad
  106 D1:B471 DD 56 06 -      ld  d,(ix+REGPC+1)
  107 D1:B474 14 -  -  -      inc d
  108 D1:B475 52 DD 1F 05     ld.s (ix+REGPC),de
  109 D1:B479 1E 0C -  -      ld  e,BASETABLE_STRIDE
  110 D1:B47B ED 5C -  -      mlt de
  111 D1:B47D 21 00 40 D0     ld  hl,PAGETABLE
  112 D1:B481 19 -  -  -      add hl,de
  113 D1:B482 ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
  114 D1:B484 1E 00 -  -      ld  e,0         ;PCL known to be zero at this point.
  115 D1:B486 -  -  -  -  i6502FinishLoad:
  116 D1:B486 7E -  -  -      ld  a,(hl)
  117 D1:B487 -  -  -  -  
  118 D1:B487 -  -  -  -  #ifdef COREDEBUG
  119 D1:B487                 ld  (ix+CURRENT_OPCODES+0),a
  120 D1:B487                 ld  (ix+REGPC+0),e
  121 D1:B487             #endif
  122 D1:B487 23 -  -  -      inc hl
  123 D1:B488 1C -  -  -      inc e
  124 D1:B489 20 15 -  -      jr  nz,i6502PrepNextPage
  125 D1:B48B DD 56 06 -      ld  d,(ix+REGPC+1)
  126 D1:B48E 14 -  -  -      inc d
  127 D1:B48F 52 DD 1F 05     ld.s (ix+REGPC),de
  128 D1:B493 1E 0C -  -      ld  e,BASETABLE_STRIDE
  129 D1:B495 ED 5C -  -      mlt de
  130 D1:B497 21 00 40 D0     ld  hl,PAGETABLE
  131 D1:B49B 19 -  -  -      add hl,de
  132 D1:B49C ED 27 -  -      ld  hl,(hl)
  133 D1:B49E 1E 00 -  -      ld  e,0
  134 D1:B4A0 -  -  -  -  i6502PrepNextPage:
  135 D1:B4A0 -  -  -  -  #ifdef COREDEBUG
  136 D1:B4A0                 push af
  137 D1:B4A0                     ld  a,(hl)
  138 D1:B4A0                     ld  (ix+CURRENT_OPCODES+1),a
  139 D1:B4A0                     push de
  140 D1:B4A0                         push hl
  141 D1:B4A0                             push ix
  142 D1:B4A0                                 inc hl
  143 D1:B4A0                                 inc e
  144 D1:B4A0                                 jr  nz,+_
  145 D1:B4A0                                 ld  d,(ix+REGPC+1)
  146 D1:B4A0                                 inc d
  147 D1:B4A0                                 ld  e,BASETABLE_STRIDE
  148 D1:B4A0                                 mlt de
  149 D1:B4A0                                 ld  hl,PAGETABLE
  150 D1:B4A0                                 add hl,de
  151 D1:B4A0                                 ld  hl,(hl)
  152 D1:B4A0             _:                  ld  a,(hl)
  153 D1:B4A0                                 ld  (ix+CURRENT_OPCODES+2),a
  154 D1:B4A0                                 lea hl,ix
  155 D1:B4A0                                 ld  de,core_memory_ix
  156 D1:B4A0                                 or  a,a
  157 D1:B4A0                                 sbc hl,de
  158 D1:B4A0                                 jr  nz,$    ;halt program if IX is not core_memory_ix
  159 D1:B4A0                                 ;jr $
  160 D1:B4A0                                 push iy
  161 D1:B4A0                                     call dbg_printLine
  162 D1:B4A0                                 pop iy
  163 D1:B4A0                                 ld  a,(ix+CORE_ERROR_LEVEL)
  164 D1:B4A0                                 or  a,a
  165 D1:B4A0                                 jr  z,+_
  166 D1:B4A0                                 ld  hl,(ix+CORE_STACK_BASE)
  167 D1:B4A0                                 ld  sp,hl
  168 D1:B4A0                                 ret
  169 D1:B4A0             _:                  ld  iy,(ix+CYCLES_CURRENT)  ;remove when done with timings
  170 D1:B4A0                                 lea hl,iy+0
  171 D1:B4A0                                 ld  de,DEBUG_STEP_START_CYCLE
  172 D1:B4A0                                 or  a,a
  173 D1:B4A0                                 sbc hl,de
  174 D1:B4A0                                 call nc,waituntilnewkeypress
  175 D1:B4A0                             pop ix
  176 D1:B4A0                         pop hl
  177 D1:B4A0                     pop de
  178 D1:B4A0                 pop af
  179 D1:B4A0             #endif
  180 D1:B4A0 E5 -  -  -      push hl
  181 D1:B4A1 ED 23 00 -          lea hl,iy
  182 D1:B4A4 01 4C 98 FF         ld  bc,-26548
  183 D1:B4A8 09 -  -  -          add hl,bc
  184 D1:B4A9 30 02 -  -          jr nc,+_
  185 D1:B4AB E1 C9 -  -      pop hl \ ret
  186 D1:B4AD -  -  -  -  _:
  187 D1:B4AD 67 -  -  -          ld  h,a
  188 D1:B4AE 2E 0C -  -          ld  l,BASETABLE_STRIDE
  189 D1:B4B0 ED 6C -  -          mlt hl
  190 D1:B4B2 01 04 40 D0         ld  bc,JUMPTABLE
  191 D1:B4B6 09 -  -  -          add hl,bc
  192 D1:B4B7 ED 27 -  -          ld  hl,(hl)     ;jumptable
  193 D1:B4B9 E3 -  -  -          ex  (sp),hl     ;exch with exec addr, jumpto-via-ret
  194 D1:B4BA C9 -  -  -      ret
  195 D1:B4BB -  -  -  -  
  196 D1:B4BB -  -  -  -  
  197 D1:B4BB -  -  -  -  ;Instructions one byte wide returns to the main loop via:
  198 D1:B4BB -  -  -  -  ;   JP i6502FinishLoad
  199 D1:B4BB -  -  -  -  ;Those with parameters have HL at the address in quetion, and is expected to
  200 D1:B4BB -  -  -  -  ;advance HL and E at the end of the instruction. You return to main loop via:
  201 D1:B4BB -  -  -  -  ;   JP i6502NextLoad
  202 D1:B4BB -  -  -  -  ;Unless you manually advance the pointer to the next instruction.
  203 D1:B4BB -  -  -  -  ;You really shouldn't but if you must do that, then also do this:
  204 D1:B4BB -  -  -  -  ;   JP i6502FinishLoad
  205 D1:B4BB -  -  -  -  ;Remember that register E is very important; it tells you about page boundaries.
  206 D1:B4BB -  -  -  -  
  207 D1:B4BB -  -  -  -  
  208 D1:B4BB -  -  -  -  ;-----------------------------------------------------------------------------
  209 D1:B4BB -  -  -  -  ;-----------------------------------------------------------------------------
  210 D1:B4BB -  -  -  -  ;-----------------------------------------------------------------------------
  211 D1:B4BB -  -  -  -  
  212 D1:B4BB -  -  -  -  ;  ***  *   * ****  ****   ***  *   * ***** ***** **  * *****  ***  
  213 D1:B4BB -  -  -  -  ; *     *   * *   * *   * *   * *   *   *     *   **  * *     *     
  214 D1:B4BB -  -  -  -  ;  ***  *   * ****  ****  *   * *   *   *     *   * * * ***    ***  
  215 D1:B4BB -  -  -  -  ;     * *   * *   * *   * *   * *   *   *     *   *  ** *         * 
  216 D1:B4BB -  -  -  -  ;  ***   ***  ****  *   *  ***   ***    *   ***** *  ** *****  ***  
  217 D1:B4BB -  -  -  -  
  218 D1:B4BB -  -  -  -  ;-----------------------------------------------------------------------------
  219 D1:B4BB -  -  -  -  
  220 D1:B4BB -  -  -  -  i6502_load_instruction_set:
  221 D1:B4BB DD 21 04 40 
              D0 -  -  -      ld  ix,JUMPTABLE
  222 D1:B4C0 21 2A D8 D1     ld  hl,inst6502_instruction_set
  223 D1:B4C4 06 00 -  -      ld  b,0
  224 D1:B4C6 ED 17 -  -  _:  ld  de,(hl)
  225 D1:B4C8 DD 1F 00 -      ld  (ix+0),de
  226 D1:B4CB 23 -  -  -      inc hl
  227 D1:B4CC 23 -  -  -      inc hl
  228 D1:B4CD 23 -  -  -      inc hl
  229 D1:B4CE ED 32 0C -      lea ix,ix+BASETABLE_STRIDE
  230 D1:B4D1 10 F3 -  -      djnz -_
  231 D1:B4D3 C9 -  -  -      ret
  232 D1:B4D4 -  -  -  -  
  233 D1:B4D4 -  -  -  -  ;HL=Base_ez80_address, C=Numpages_in_map, B=numpages_in_space, E=starting_page
  234 D1:B4D4 -  -  -  -  ;Example: To map and mirror 2KB RAM at $D03800 inside first 8KB of 6502 space
  235 D1:B4D4 -  -  -  -  ;HL=$D03800, C=$08, B=$20, E=$00
  236 D1:B4D4 -  -  -  -  ;Note: B should be a power of two and evenly divisible by C.
  237 D1:B4D4 -  -  -  -  i6502_map_pages:
  238 D1:B4D4 16 0C -  -      ld  d,BASETABLE_STRIDE
  239 D1:B4D6 ED 5C -  -      mlt de
  240 D1:B4D8 DD 21 00 40 
              D0 -  -  -      ld  ix,PAGETABLE
  241 D1:B4DD DD 19 -  -      add ix,de
  242 D1:B4DF 78 -  -  -      ld  a,b     ;A = main counter for total number of pages in mapping space
  243 D1:B4E0 11 00 01 00     ld  de,256
  244 D1:B4E4 E5 -  -  -      push hl
  245 D1:B4E5 FD E1 -  -      pop iy
  246 D1:B4E7 41 -  -  -  _:  ld  b,c     ;looping for number of pages to map
  247 D1:B4E8 DD 2F 00 -  _:  ld  (ix+0),hl
  248 D1:B4EB 19 -  -  -      add hl,de                   ;next page z80
  249 D1:B4EC ED 32 0C -      lea ix,ix+BASETABLE_STRIDE  ;next page entry
  250 D1:B4EF 3D -  -  -      dec a
  251 D1:B4F0 C8 -  -  -      ret z
  252 D1:B4F1 10 F5 -  -      djnz -_
  253 D1:B4F3 ED 23 00 -      lea hl,iy+0     ;start z80 pages over again for mirroring
  254 D1:B4F6 18 EF -  -      jr --_
  255 D1:B4F8 -  -  -  -  
  256 D1:B4F8 -  -  -  -  
  257 D1:B4F8 -  -  -  -  subroutine6502_abs_split_start:
  258 D1:B4F8 4E -  -  -      ld  c,(hl)
  259 D1:B4F9 23 -  -  -      inc hl
  260 D1:B4FA 1C -  -  -      inc e
  261 D1:B4FB 20 15 -  -      jr nz,+_
  262 D1:B4FD DD 56 06 -      ld  d,(ix+REGPC+1)
  263 D1:B500 14 -  -  -      inc d
  264 D1:B501 52 DD 1F 05     ld.s (ix+REGPC),de
  265 D1:B505 1E 0C -  -      ld  e,BASETABLE_STRIDE
  266 D1:B507 ED 5C -  -      mlt de
  267 D1:B509 21 00 40 D0     ld  hl,PAGETABLE
  268 D1:B50D 19 -  -  -      add hl,de
  269 D1:B50E ED 27 -  -      ld  hl,(hl) ;
  270 D1:B510 1E 00 -  -      ld  e,0
  271 D1:B512 46 -  -  -  _:  ld  b,(hl)
  272 D1:B513 C9 -  -  -      ret
  273 D1:B514 -  -  -  -  
  274 D1:B514 -  -  -  -  #define PUSH_ABSXSPLIT call subroutine6502_absx_split_start
  275 D1:B514 -  -  -  -  #define PUSH_ABSXSPLIT_NODEP call subroutine6502_absx_ss_noDep
  276 D1:B514 -  -  -  -  #define PUSH_ABSYSPLIT call subroutine6502_absy_split_start
  277 D1:B514 -  -  -  -  #define PUSH_ABSYSPLIT_NODEP call subroutine6502_absy_ss_noDep
  278 D1:B514 -  -  -  -  
  279 D1:B514 -  -  -  -  subroutine6502_absy_split_start:
  280 D1:B514 DD 4E 02 -      ld  c,(ix+REGY)
  281 D1:B517 18 03 -  -      jr +_
  282 D1:B519 -  -  -  -  
  283 D1:B519 -  -  -  -  subroutine6502_absx_split_start:
  284 D1:B519 DD 4E 01 -      ld  c,(ix+REGX)
  285 D1:B51C 7E -  -  -  _:  ld  a,(hl)
  286 D1:B51D 23 -  -  -      inc hl
  287 D1:B51E 1C -  -  -      inc e
  288 D1:B51F 20 15 -  -      jr nz,+_
  289 D1:B521 DD 56 06 -      ld  d,(ix+REGPC+1)
  290 D1:B524 14 -  -  -      inc d
  291 D1:B525 52 DD 1F 05     ld.s (ix+REGPC),de
  292 D1:B529 1E 0C -  -      ld  e,BASETABLE_STRIDE
  293 D1:B52B ED 5C -  -      mlt de
  294 D1:B52D 21 00 40 D0     ld  hl,PAGETABLE
  295 D1:B531 19 -  -  -      add hl,de
  296 D1:B532 ED 27 -  -      ld  hl,(hl) ;
  297 D1:B534 1E 00 -  -      ld  e,0
  298 D1:B536 46 -  -  -  _:  ld  b,(hl)
  299 D1:B537 E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  300 D1:B538 E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  301 D1:B539 81 -  -  -          add a,c
  302 D1:B53A 30 03 -  -          jr  nc,+_
  303 D1:B53C FD 23 -  -          ADDCYC(1)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  304 D1:B53E 04 -  -  -          inc b
  305 D1:B53F 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  306 D1:B540 0E 0C -  -          ld  c,BASETABLE_STRIDE
  307 D1:B542 ED 4C -  -          mlt bc
  308 D1:B544 21 00 40 D0         ld  hl,PAGETABLE
  309 D1:B548 09 -  -  -          add hl,bc
  310 D1:B549 ED 27 -  -          ld  hl,(hl)
  311 D1:B54B 06 00 -  -          ld  b,0
  312 D1:B54D 4F -  -  -          ld  c,a
  313 D1:B54E 09 -  -  -          add hl,bc
  314 D1:B54F C9 -  -  -      ret
  315 D1:B550 -  -  -  -      
  316 D1:B550 -  -  -  -  subroutine6502_absy_ss_noDep:
  317 D1:B550 DD 4E 02 -      ld  c,(ix+REGY)
  318 D1:B553 18 03 -  -      jr +_
  319 D1:B555 -  -  -  -  subroutine6502_absx_ss_noDep:
  320 D1:B555 DD 4E 01 -      ld  c,(ix+REGX)
  321 D1:B558 7E -  -  -  _:  ld  a,(hl)
  322 D1:B559 23 -  -  -      inc hl
  323 D1:B55A 1C -  -  -      inc e
  324 D1:B55B 20 15 -  -      jr nz,+_
  325 D1:B55D DD 56 06 -      ld  d,(ix+REGPC+1)
  326 D1:B560 14 -  -  -      inc d
  327 D1:B561 52 DD 1F 05     ld.s (ix+REGPC),de
  328 D1:B565 1E 0C -  -      ld  e,BASETABLE_STRIDE
  329 D1:B567 ED 5C -  -      mlt de
  330 D1:B569 21 00 40 D0     ld  hl,PAGETABLE
  331 D1:B56D 19 -  -  -      add hl,de
  332 D1:B56E ED 27 -  -      ld  hl,(hl) ;
  333 D1:B570 1E 00 -  -      ld  e,0
  334 D1:B572 46 -  -  -  _:  ld  b,(hl)
  335 D1:B573 E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  336 D1:B574 E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  337 D1:B575 81 -  -  -          add a,c
  338 D1:B576 30 01 -  -          jr  nc,+_
  339 D1:B578 04 -  -  -          inc b
  340 D1:B579 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  341 D1:B57A 0E 0C -  -          ld  c,BASETABLE_STRIDE
  342 D1:B57C ED 4C -  -          mlt bc
  343 D1:B57E 21 00 40 D0         ld  hl,PAGETABLE
  344 D1:B582 09 -  -  -          add hl,bc
  345 D1:B583 ED 27 -  -          ld  hl,(hl)
  346 D1:B585 06 00 -  -          ld  b,0
  347 D1:B587 4F -  -  -          ld  c,a
  348 D1:B588 09 -  -  -          add hl,bc
  349 D1:B589 C9 -  -  -      ret
  350 D1:B58A -  -  -  -  
  351 D1:B58A -  -  -  -  
  352 D1:B58A -  -  -  -  
  353 D1:B58A -  -  -  -  
  354 D1:B58A -  -  -  -  
  355 D1:B58A -  -  -  -  
  356 D1:B58A -  -  -  -  
  357 D1:B58A -  -  -  -  subroutine6502_adc_combined_end:
  358 D1:B58A DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  359 D1:B58D 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  360 D1:B58E DD 7E 00 -      ld  a,(ix+REGA)
  361 D1:B591 89 -  -  -      adc a,c
  362 D1:B592 DD 77 00 -      ld  (ix+REGA),a
  363 D1:B595 DD 46 04 CB 
              B0 E2 A0 B5 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  364 D1:B5B7 C3 6D B4 D1     jp i6502NextLoad
  365 D1:B5BB -  -  -  -  
  366 D1:B5BB -  -  -  -  subroutine6502_sbc_combined_end:
  367 D1:B5BB DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  368 D1:B5BE 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  369 D1:B5BF DD 7E 00 -      ld  a,(ix+REGA)
  370 D1:B5C2 3F -  -  -      ccf
  371 D1:B5C3 99 -  -  -      sbc a,c
  372 D1:B5C4 3F -  -  -      ccf
  373 D1:B5C5 DD 77 00 -      ld  (ix+REGA),a
  374 D1:B5C8 DD 46 04 CB 
              B0 E2 D3 B5 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  375 D1:B5EA C3 6D B4 D1     jp i6502NextLoad
  376 D1:B5EE -  -  -  -  
  377 D1:B5EE -  -  -  -  subroutine6502_cmp_combined_end:
  378 D1:B5EE DD 7E 00 -      ld  a,(ix+REGA)
  379 D1:B5F1 90 -  -  -      sub a,b
  380 D1:B5F2 3F -  -  -      ccf     ;because the 6502 is strange like that.
  381 D1:B5F3 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  382 D1:B60D C3 6D B4 D1     jp i6502NextLoad
  383 D1:B611 -  -  -  -  
  384 D1:B611 -  -  -  -  subroutine6502_take_branch:
  385 D1:B611 FD 23 -  -      ADDCYC(1)
  386 D1:B613 7E -  -  -      ld  a,(hl)  ;offset byte
  387 D1:B614 6F -  -  -      ld  L,a
  388 D1:B615 87 -  -  -      add a,a
  389 D1:B616 9F -  -  -      sbc a,a
  390 D1:B617 67 -  -  -      ld  H,a     ;sign-extending offset byte
  391 D1:B618 DD 56 06 -      ld  d,(ix+REGPC+1)
  392 D1:B61B 13 -  -  -      inc de
  393 D1:B61C 52 19 -  -      add.s hl,de
  394 D1:B61E 7C -  -  -      ld  a,h
  395 D1:B61F BA -  -  -      cp  d       ;is high byte the same?
  396 D1:B620 28 02 -  -      jr  z,+_    ;if so, do not add another clock
  397 D1:B622 FD 23 -  -      ADDCYC(1)
  398 D1:B624 52 DD 2F 05 _:  ld.s (ix+REGPC),hl
  399 D1:B628 C3 57 B4 D1     jp  i6502FirstLoad
  400 D1:B62C -  -  -  -  
  401 D1:B62C -  -  -  -  
  402 D1:B62C -  -  -  -  ;-----------------------------------------------------------------------------
  403 D1:B62C -  -  -  -  
  404 D1:B62C -  -  -  -  ; *** **  *  *** ***** ***  *   *  *** ***** *** ***  **  *     ***  ***** *****                                                
  405 D1:B62C -  -  -  -  ;  *  **  * *      *   *  * *   * *      *    * *   * **  *    *     *       *                   
  406 D1:B62C -  -  -  -  ;  *  * * *  ***   *   ***  *   * *      *    * *   * * * *     ***  ***     *                          
  407 D1:B62C -  -  -  -  ;  *  *  **     *  *   *  * *   * *      *    * *   * *  **        * *       *                   
  408 D1:B62C -  -  -  -  ; *** *  **  ***   *   *  *  ***   ***   *   *** ***  *  **     ***  *****   *                                 
  409 D1:B62C -  -  -  -  
  410 D1:B62C -  -  -  -  ;-----------------------------------------------------------------------------
  411 D1:B62C -  -  -  -  
  412 D1:B62C -  -  -  -  ;-----------------------------------------------------------------------------
  413 D1:B62C -  -  -  -  ;-----------------------------------------------------------------------------
  414 D1:B62C -  -  -  -  ;-----------------------------------------------------------------------------
  415 D1:B62C -  -  -  -  ;Instructions by type: Transfer Instructions
  416 D1:B62C -  -  -  -  ;LDA - Load Accumulator with Memory
  417 D1:B62C -  -  -  -  ;    M -> A
  418 D1:B62C -  -  -  -  ;    N	Z	C	I	D	V
  419 D1:B62C -  -  -  -  ;    +	+	-	-	-	-
  420 D1:B62C -  -  -  -  
  421 D1:B62C -  -  -  -  ;addressing	assembler	opc	bytes	cycles
  422 D1:B62C -  -  -  -  ;immediate	LDA #oper	A9	2	2
  423 D1:B62C -  -  -  -  inst6502_lda_imm:
  424 D1:B62C 7E -  -  -      ld  a,(hl)
  425 D1:B62D DD 77 00 -      ld  (ix+REGA),a
  426 D1:B630 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  427 D1:B644 ED 33 02 -      ADDCYC(2)
  428 D1:B647 C3 6D B4 D1     jp i6502NextLoad
  429 D1:B64B -  -  -  -  
  430 D1:B64B -  -  -  -  ;zeropage	LDA oper	A5	2	3
  431 D1:B64B -  -  -  -  inst6502_lda_zp:
  432 D1:B64B 7E -  -  -      ld  a,(hl)
  433 D1:B64C 01 00 38 D0     ld  bc,ZEROPAGE
  434 D1:B650 81 -  -  -      add a,c
  435 D1:B651 4F -  -  -      ld  c,a
  436 D1:B652 0A -  -  -      ld  a,(bc)
  437 D1:B653 DD 77 00 -      ld  (ix+REGA),a
  438 D1:B656 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  439 D1:B66A ED 33 03 -      ADDCYC(3)
  440 D1:B66D C3 6D B4 D1     jp i6502NextLoad
  441 D1:B671 -  -  -  -  
  442 D1:B671 -  -  -  -  ;zeropage,X	LDA oper,X	B5	2	4 
  443 D1:B671 -  -  -  -  inst6502_lda_zpx:
  444 D1:B671 7E -  -  -      ld  a,(hl)
  445 D1:B672 01 00 38 D0     ld  bc,ZEROPAGE
  446 D1:B676 81 -  -  -      add a,c
  447 D1:B677 DD 86 01 -      add a,(ix+REGX)
  448 D1:B67A 4F -  -  -      ld  c,a
  449 D1:B67B 0A -  -  -      ld  a,(bc)
  450 D1:B67C DD 77 00 -      ld  (ix+REGA),a
  451 D1:B67F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  452 D1:B693 ED 33 04 -      ADDCYC(4)
  453 D1:B696 C3 6D B4 D1     jp i6502NextLoad
  454 D1:B69A -  -  -  -  
  455 D1:B69A -  -  -  -  ;absolute	LDA oper	AD	3	4
  456 D1:B69A -  -  -  -  inst6502_lda_abs:
  457 D1:B69A CD F8 B4 D1     call subroutine6502_abs_split_start
  458 D1:B69E E5 -  -  -      push hl
  459 D1:B69F 50 -  -  -          ld  d,b
  460 D1:B6A0 79 -  -  -          ld  a,c
  461 D1:B6A1 0E 0C -  -          ld  c,BASETABLE_STRIDE
  462 D1:B6A3 ED 4C -  -          mlt bc
  463 D1:B6A5 21 00 40 D0         ld  hl,PAGETABLE
  464 D1:B6A9 09 -  -  -          add hl,bc
  465 D1:B6AA ED 27 -  -          ld  hl,(hl)
  466 D1:B6AC 06 00 -  -          ld  b,0
  467 D1:B6AE 4F -  -  -          ld  c,a
  468 D1:B6AF 09 -  -  -          add hl,bc   ;full address
  469 D1:B6B0 CD E9 AD D1         READ_ACCESS
  470 D1:B6B4 DD 77 00 -          ld (ix+REGA),a
  471 D1:B6B7 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  472 D1:B6CB ED 33 04 -          ADDCYC(4)
  473 D1:B6CE E1 -  -  -      pop hl
  474 D1:B6CF C3 6D B4 D1     jp i6502NextLoad
  475 D1:B6D3 -  -  -  -  
  476 D1:B6D3 -  -  -  -  ;absolute,X	LDA oper,X	BD	3	4* 
  477 D1:B6D3 -  -  -  -  inst6502_lda_absx:
  478 D1:B6D3 ED 33 04 -      ADDCYC(4)
  479 D1:B6D6 CD 19 B5 D1     PUSH_ABSXSPLIT
  480 D1:B6DA CD E9 AD D1         READ_ACCESS
  481 D1:B6DE DD 77 00 -          ld (ix+REGA),a
  482 D1:B6E1 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  483 D1:B6F5 E1 -  -  -      pop hl
  484 D1:B6F6 C3 6D B4 D1     jp i6502NextLoad
  485 D1:B6FA -  -  -  -  
  486 D1:B6FA -  -  -  -  ;absolute,Y	LDA oper,Y	B9	3	4* 
  487 D1:B6FA -  -  -  -  inst6502_lda_absy:
  488 D1:B6FA ED 33 04 -      ADDCYC(4)
  489 D1:B6FD CD 14 B5 D1     PUSH_ABSYSPLIT
  490 D1:B701 CD E9 AD D1         READ_ACCESS
  491 D1:B705 DD 77 00 -          ld (ix+REGA),a
  492 D1:B708 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  493 D1:B71C E1 -  -  -      pop hl
  494 D1:B71D C3 6D B4 D1     jp i6502NextLoad
  495 D1:B721 -  -  -  -  
  496 D1:B721 -  -  -  -  ;(indirect,X)	LDA (oper,X)	A1	2	6
  497 D1:B721 -  -  -  -  inst6502_lda_indx:
  498 D1:B721 E5 -  -  -      push hl
  499 D1:B722 7E -  -  -          ld  a,(hl)
  500 D1:B723 21 00 38 D0         ld  hl,ZEROPAGE
  501 D1:B727 85 -  -  -          add a,L
  502 D1:B728 DD 86 01 -          add a,(ix+REGX)
  503 D1:B72B 6F -  -  -          ld  L,a
  504 D1:B72C 7E -  -  -          ld  a,(hl)
  505 D1:B72D 2C -  -  -          inc L
  506 D1:B72E 56 -  -  -          ld  d,(hl)
  507 D1:B72F 42 -  -  -          ld  b,d
  508 D1:B730 0E 0C -  -          ld  c,BASETABLE_STRIDE
  509 D1:B732 ED 4C -  -          mlt bc
  510 D1:B734 21 00 40 D0         ld  hl,PAGETABLE
  511 D1:B738 09 -  -  -          add hl,bc
  512 D1:B739 ED 27 -  -          ld  hl,(hl)
  513 D1:B73B 06 00 -  -          ld  b,0
  514 D1:B73D 4F -  -  -          ld  c,a
  515 D1:B73E 09 -  -  -          add hl,bc
  516 D1:B73F CD E9 AD D1         READ_ACCESS
  517 D1:B743 DD 77 00 -          ld (ix+REGA),a
  518 D1:B746 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  519 D1:B75A ED 33 06 -          ADDCYC(6)
  520 D1:B75D E1 -  -  -      pop hl
  521 D1:B75E C3 6D B4 D1     jp i6502NextLoad
  522 D1:B762 -  -  -  -  
  523 D1:B762 -  -  -  -  ;(indirect),Y	LDA (oper),Y	B1	2	5*
  524 D1:B762 -  -  -  -  inst6502_lda_indy:
  525 D1:B762 E5 -  -  -      push hl
  526 D1:B763 7E -  -  -          ld  a,(hl)
  527 D1:B764 21 00 38 D0         ld  hl,ZEROPAGE
  528 D1:B768 85 -  -  -          add a,L
  529 D1:B769 6F -  -  -          ld  L,a
  530 D1:B76A 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  531 D1:B76B 2C -  -  -          inc L
  532 D1:B76C DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  533 D1:B76F 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  534 D1:B770 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  535 D1:B772 FD 23 -  -          ADDCYC(1)
  536 D1:B774 24 -  -  -          inc h
  537 D1:B775 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  538 D1:B776 2E 0C -  -          ld  L,BASETABLE_STRIDE
  539 D1:B778 ED 6C -  -          mlt hl          ;23.
  540 D1:B77A 01 00 40 D0         ld  bc,PAGETABLE
  541 D1:B77E 09 -  -  -          add hl,bc
  542 D1:B77F ED 27 -  -          ld  hl,(hl)     ;address get.
  543 D1:B781 01 00 00 00         ld  bc,0
  544 D1:B785 4F -  -  -          ld  c,a
  545 D1:B786 09 -  -  -          add hl,bc       ;Full address get.
  546 D1:B787 CD E9 AD D1         READ_ACCESS
  547 D1:B78B DD 77 00 -          ld  (ix+REGA),a
  548 D1:B78E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  549 D1:B7A2 ED 33 05 -          ADDCYC(5)
  550 D1:B7A5 E1 -  -  -      pop hl
  551 D1:B7A6 C3 6D B4 D1     jp i6502NextLoad
  552 D1:B7AA -  -  -  -  
  553 D1:B7AA -  -  -  -  ;-----------------------------------------------------------------------------
  554 D1:B7AA -  -  -  -  ;LDX - Load Index X with Memory
  555 D1:B7AA -  -  -  -  ;    M -> X
  556 D1:B7AA -  -  -  -  ;    N	Z	C	I	D	V
  557 D1:B7AA -  -  -  -  ;    +	+	-	-	-	-
  558 D1:B7AA -  -  -  -  
  559 D1:B7AA -  -  -  -  ;immediate	LDX #oper	A2	2	2  
  560 D1:B7AA -  -  -  -  inst6502_ldx_imm:
  561 D1:B7AA 7E -  -  -      ld  a,(hl)
  562 D1:B7AB DD 77 01 -      ld  (ix+REGX),a
  563 D1:B7AE DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  564 D1:B7C2 ED 33 02 -      ADDCYC(2)
  565 D1:B7C5 C3 6D B4 D1     jp i6502NextLoad
  566 D1:B7C9 -  -  -  -  
  567 D1:B7C9 -  -  -  -  ;zeropage	LDX oper	A6	2	3 
  568 D1:B7C9 -  -  -  -  inst6502_ldx_zp:
  569 D1:B7C9 7E -  -  -      ld  a,(hl)
  570 D1:B7CA 01 00 38 D0     ld  bc,ZEROPAGE
  571 D1:B7CE 81 -  -  -      add a,c
  572 D1:B7CF 4F -  -  -      ld  c,a
  573 D1:B7D0 0A -  -  -      ld  a,(bc)
  574 D1:B7D1 DD 77 01 -      ld  (ix+REGX),a
  575 D1:B7D4 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  576 D1:B7E8 ED 33 03 -      ADDCYC(3)
  577 D1:B7EB C3 6D B4 D1     jp i6502NextLoad
  578 D1:B7EF -  -  -  -  
  579 D1:B7EF -  -  -  -  ;zeropage,Y	LDX oper,Y	B6	2	4  
  580 D1:B7EF -  -  -  -  inst6502_ldx_zpy:
  581 D1:B7EF 7E -  -  -      ld  a,(hl)
  582 D1:B7F0 01 00 38 D0     ld  bc,ZEROPAGE
  583 D1:B7F4 81 -  -  -      add a,c
  584 D1:B7F5 DD 86 02 -      add a,(ix+REGY)
  585 D1:B7F8 4F -  -  -      ld  c,a
  586 D1:B7F9 0A -  -  -      ld  a,(bc)
  587 D1:B7FA DD 77 01 -      ld  (ix+REGX),a
  588 D1:B7FD DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  589 D1:B811 ED 33 04 -      ADDCYC(4)
  590 D1:B814 C3 6D B4 D1     jp i6502NextLoad
  591 D1:B818 -  -  -  -  
  592 D1:B818 -  -  -  -  ;absolute	LDX oper	AE	3	4  
  593 D1:B818 -  -  -  -  inst6502_ldx_abs:
  594 D1:B818 CD F8 B4 D1     call subroutine6502_abs_split_start
  595 D1:B81C E5 -  -  -      push hl
  596 D1:B81D 50 -  -  -          ld  d,b
  597 D1:B81E 79 -  -  -          ld  a,c
  598 D1:B81F 0E 0C -  -          ld  c,BASETABLE_STRIDE
  599 D1:B821 ED 4C -  -          mlt bc
  600 D1:B823 21 00 40 D0         ld  hl,PAGETABLE
  601 D1:B827 09 -  -  -          add hl,bc
  602 D1:B828 ED 27 -  -          ld  hl,(hl)
  603 D1:B82A 06 00 -  -          ld  b,0
  604 D1:B82C 4F -  -  -          ld  c,a
  605 D1:B82D 09 -  -  -          add hl,bc   ;full address
  606 D1:B82E CD E9 AD D1         READ_ACCESS
  607 D1:B832 DD 77 01 -          ld (ix+REGX),a
  608 D1:B835 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  609 D1:B849 ED 33 04 -          ADDCYC(4)
  610 D1:B84C E1 -  -  -      pop hl
  611 D1:B84D C3 6D B4 D1     jp i6502NextLoad
  612 D1:B851 -  -  -  -  
  613 D1:B851 -  -  -  -  ;absolute,Y	LDX oper,Y	BE	3	4* 
  614 D1:B851 -  -  -  -  inst6502_ldx_absy:
  615 D1:B851 ED 33 04 -      ADDCYC(4)
  616 D1:B854 CD 14 B5 D1     PUSH_ABSYSPLIT
  617 D1:B858 CD E9 AD D1         READ_ACCESS
  618 D1:B85C DD 77 01 -          ld (ix+REGX),a
  619 D1:B85F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  620 D1:B873 E1 -  -  -      pop hl
  621 D1:B874 C3 6D B4 D1     jp i6502NextLoad
  622 D1:B878 -  -  -  -  
  623 D1:B878 -  -  -  -  ;-----------------------------------------------------------------------------
  624 D1:B878 -  -  -  -  ;LDY -  Load Index Y with Memory
  625 D1:B878 -  -  -  -  ;    M -> Y
  626 D1:B878 -  -  -  -  ;    N	Z	C	I	D	V
  627 D1:B878 -  -  -  -  ;    +	+	-	-	-	-
  628 D1:B878 -  -  -  -  
  629 D1:B878 -  -  -  -  ;immediate	LDY #oper	A0	2	2  
  630 D1:B878 -  -  -  -  inst6502_ldy_imm:
  631 D1:B878 7E -  -  -      ld  a,(hl)
  632 D1:B879 DD 77 02 -      ld  (ix+REGY),a
  633 D1:B87C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  634 D1:B890 ED 33 02 -      ADDCYC(2)
  635 D1:B893 C3 6D B4 D1     jp i6502NextLoad
  636 D1:B897 -  -  -  -  
  637 D1:B897 -  -  -  -  ;zeropage	LDY oper	A4	2	3  
  638 D1:B897 -  -  -  -  inst6502_ldy_zp:
  639 D1:B897 7E -  -  -      ld  a,(hl)
  640 D1:B898 01 00 38 D0     ld  bc,ZEROPAGE
  641 D1:B89C 81 -  -  -      add a,c
  642 D1:B89D 4F -  -  -      ld  c,a
  643 D1:B89E 0A -  -  -      ld  a,(bc)
  644 D1:B89F DD 77 02 -      ld  (ix+REGY),a
  645 D1:B8A2 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  646 D1:B8B6 ED 33 03 -      ADDCYC(3)
  647 D1:B8B9 C3 6D B4 D1     jp i6502NextLoad
  648 D1:B8BD -  -  -  -  
  649 D1:B8BD -  -  -  -  ;zeropage,X	LDY oper,X	B4	2	4  
  650 D1:B8BD -  -  -  -  inst6502_ldy_zpx:
  651 D1:B8BD 7E -  -  -      ld  a,(hl)
  652 D1:B8BE 01 00 38 D0     ld  bc,ZEROPAGE
  653 D1:B8C2 81 -  -  -      add a,c
  654 D1:B8C3 DD 86 01 -      add a,(ix+REGX)
  655 D1:B8C6 4F -  -  -      ld  c,a
  656 D1:B8C7 0A -  -  -      ld  a,(bc)
  657 D1:B8C8 DD 77 02 -      ld  (ix+REGY),a
  658 D1:B8CB DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  659 D1:B8DF ED 33 04 -      ADDCYC(4)
  660 D1:B8E2 C3 6D B4 D1     jp i6502NextLoad
  661 D1:B8E6 -  -  -  -  
  662 D1:B8E6 -  -  -  -  ;absolute	LDY oper	AC	3	4  
  663 D1:B8E6 -  -  -  -  inst6502_ldy_abs:
  664 D1:B8E6 CD F8 B4 D1     call subroutine6502_abs_split_start
  665 D1:B8EA E5 -  -  -      push hl
  666 D1:B8EB 50 -  -  -          ld  d,b
  667 D1:B8EC 79 -  -  -          ld  a,c
  668 D1:B8ED 0E 0C -  -          ld  c,BASETABLE_STRIDE
  669 D1:B8EF ED 4C -  -          mlt bc
  670 D1:B8F1 21 00 40 D0         ld  hl,PAGETABLE
  671 D1:B8F5 09 -  -  -          add hl,bc
  672 D1:B8F6 ED 27 -  -          ld  hl,(hl)
  673 D1:B8F8 06 00 -  -          ld  b,0
  674 D1:B8FA 4F -  -  -          ld  c,a
  675 D1:B8FB 09 -  -  -          add hl,bc   ;full address
  676 D1:B8FC CD E9 AD D1         READ_ACCESS
  677 D1:B900 DD 77 02 -          ld (ix+REGY),a
  678 D1:B903 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  679 D1:B917 ED 33 04 -          ADDCYC(4)
  680 D1:B91A E1 -  -  -      pop hl
  681 D1:B91B C3 6D B4 D1     jp i6502NextLoad
  682 D1:B91F -  -  -  -  
  683 D1:B91F -  -  -  -  ;absolute,X	LDY oper,X	BC	3	4* 
  684 D1:B91F -  -  -  -  inst6502_ldy_absx:
  685 D1:B91F ED 33 04 -      ADDCYC(4)
  686 D1:B922 CD 19 B5 D1     PUSH_ABSXSPLIT
  687 D1:B926 CD E9 AD D1         READ_ACCESS
  688 D1:B92A DD 77 02 -          ld (ix+REGY),a
  689 D1:B92D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  690 D1:B941 E1 -  -  -      pop hl
  691 D1:B942 C3 6D B4 D1     jp i6502NextLoad
  692 D1:B946 -  -  -  -  
  693 D1:B946 -  -  -  -  ;-----------------------------------------------------------------------------
  694 D1:B946 -  -  -  -  ;STA - Store Accumulator in Memory
  695 D1:B946 -  -  -  -  ;    A -> M
  696 D1:B946 -  -  -  -  ;    N	Z	C	I	D	V
  697 D1:B946 -  -  -  -  ;    -	-	-	-	-	-
  698 D1:B946 -  -  -  -  
  699 D1:B946 -  -  -  -  ;zeropage	STA oper	85	2	3  
  700 D1:B946 -  -  -  -  inst6502_sta_zp:
  701 D1:B946 7E -  -  -      ld  a,(hl)
  702 D1:B947 01 00 38 D0     ld  bc,ZEROPAGE
  703 D1:B94B 81 -  -  -      add a,c
  704 D1:B94C 4F -  -  -      ld  c,a
  705 D1:B94D DD 7E 00 -      ld  a,(ix+REGA)
  706 D1:B950 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  707 D1:B951 ED 33 03 -      ADDCYC(3)
  708 D1:B954 C3 6D B4 D1     jp i6502NextLoad
  709 D1:B958 -  -  -  -  
  710 D1:B958 -  -  -  -  ;zeropage,X	STA oper,X	95	2	4  
  711 D1:B958 -  -  -  -  inst6502_sta_zpx:
  712 D1:B958 7E -  -  -      ld  a,(hl)
  713 D1:B959 01 00 38 D0     ld  bc,ZEROPAGE
  714 D1:B95D 81 -  -  -      add a,c
  715 D1:B95E DD 86 01 -      add a,(ix+REGX)
  716 D1:B961 4F -  -  -      ld  c,a
  717 D1:B962 DD 7E 00 -      ld  a,(ix+REGA)
  718 D1:B965 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  719 D1:B966 ED 33 04 -      ADDCYC(4)
  720 D1:B969 C3 6D B4 D1     jp i6502NextLoad
  721 D1:B96D -  -  -  -  
  722 D1:B96D -  -  -  -  ;absolute	STA oper	8D	3	4
  723 D1:B96D -  -  -  -  inst6502_sta_abs:
  724 D1:B96D CD F8 B4 D1     call subroutine6502_abs_split_start
  725 D1:B971 E5 -  -  -      push hl
  726 D1:B972 50 -  -  -          ld  d,b
  727 D1:B973 79 -  -  -          ld  a,c
  728 D1:B974 0E 0C -  -          ld  c,BASETABLE_STRIDE
  729 D1:B976 ED 4C -  -          mlt bc
  730 D1:B978 21 00 40 D0         ld  hl,PAGETABLE
  731 D1:B97C 09 -  -  -          add hl,bc
  732 D1:B97D ED 27 -  -          ld  hl,(hl)
  733 D1:B97F 06 00 -  -          ld  b,0
  734 D1:B981 4F -  -  -          ld  c,a
  735 D1:B982 09 -  -  -          add hl,bc   ;full address
  736 D1:B983 DD 46 00 -          ld  b,(ix+REGA)
  737 D1:B986 CD 0C AE D1         WRITE_ACCESS
  738 D1:B98A ED 33 04 -          ADDCYC(4)
  739 D1:B98D E1 -  -  -      pop hl
  740 D1:B98E C3 6D B4 D1     jp i6502NextLoad
  741 D1:B992 -  -  -  -  
  742 D1:B992 -  -  -  -  ;absolute,X	STA oper,X	9D	3	5  
  743 D1:B992 -  -  -  -  inst6502_sta_absx:
  744 D1:B992 ED 33 05 -      ADDCYC(5)
  745 D1:B995 CD 55 B5 D1     PUSH_ABSXSPLIT_NODEP
  746 D1:B999 DD 46 00 -          ld  b,(ix+REGA)
  747 D1:B99C CD 0C AE D1         WRITE_ACCESS
  748 D1:B9A0 E1 -  -  -      pop hl
  749 D1:B9A1 C3 6D B4 D1     jp i6502NextLoad
  750 D1:B9A5 -  -  -  -  
  751 D1:B9A5 -  -  -  -  ;absolute,Y	STA oper,Y	99	3	5  
  752 D1:B9A5 -  -  -  -  inst6502_sta_absy:
  753 D1:B9A5 ED 33 05 -      ADDCYC(5)
  754 D1:B9A8 CD 50 B5 D1     PUSH_ABSYSPLIT_NODEP
  755 D1:B9AC DD 46 00 -          ld  b,(ix+REGA)
  756 D1:B9AF CD 0C AE D1         WRITE_ACCESS
  757 D1:B9B3 E1 -  -  -      pop hl
  758 D1:B9B4 C3 6D B4 D1     jp i6502NextLoad
  759 D1:B9B8 -  -  -  -  
  760 D1:B9B8 -  -  -  -  ;(indirect,X)	STA (oper,X)	81	2	6  
  761 D1:B9B8 -  -  -  -  inst6502_sta_indx:
  762 D1:B9B8 E5 -  -  -      push hl
  763 D1:B9B9 7E -  -  -          ld  a,(hl)
  764 D1:B9BA 21 00 38 D0         ld  hl,ZEROPAGE
  765 D1:B9BE 85 -  -  -          add a,L
  766 D1:B9BF DD 86 01 -          add a,(ix+REGX)
  767 D1:B9C2 6F -  -  -          ld  L,a
  768 D1:B9C3 7E -  -  -          ld  a,(hl)
  769 D1:B9C4 2C -  -  -          inc L
  770 D1:B9C5 56 -  -  -          ld  d,(hl)
  771 D1:B9C6 42 -  -  -          ld  b,d
  772 D1:B9C7 0E 0C -  -          ld  c,BASETABLE_STRIDE
  773 D1:B9C9 ED 4C -  -          mlt bc
  774 D1:B9CB 21 00 40 D0         ld  hl,PAGETABLE
  775 D1:B9CF 09 -  -  -          add hl,bc
  776 D1:B9D0 ED 27 -  -          ld  hl,(hl)
  777 D1:B9D2 06 00 -  -          ld  b,0
  778 D1:B9D4 4F -  -  -          ld  c,a
  779 D1:B9D5 09 -  -  -          add hl,bc
  780 D1:B9D6 DD 46 00 -          ld  b,(ix+REGA)
  781 D1:B9D9 CD 0C AE D1         WRITE_ACCESS
  782 D1:B9DD ED 33 06 -          ADDCYC(6)
  783 D1:B9E0 E1 -  -  -      pop hl
  784 D1:B9E1 C3 6D B4 D1     jp i6502NextLoad
  785 D1:B9E5 -  -  -  -  
  786 D1:B9E5 -  -  -  -  ;(indirect),Y	STA (oper),Y	91	2	6  
  787 D1:B9E5 -  -  -  -  inst6502_sta_indy:
  788 D1:B9E5 E5 -  -  -      push hl
  789 D1:B9E6 7E -  -  -          ld  a,(hl)
  790 D1:B9E7 21 00 38 D0         ld  hl,ZEROPAGE
  791 D1:B9EB 85 -  -  -          add a,L
  792 D1:B9EC 6F -  -  -          ld  L,a
  793 D1:B9ED 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  794 D1:B9EE 2C -  -  -          inc L
  795 D1:B9EF DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  796 D1:B9F2 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  797 D1:B9F3 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  798 D1:B9F5 24 -  -  -          inc h
  799 D1:B9F6 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  800 D1:B9F7 2E 0C -  -          ld  L,BASETABLE_STRIDE
  801 D1:B9F9 ED 6C -  -          mlt hl          ;23.
  802 D1:B9FB 01 00 40 D0         ld  bc,PAGETABLE
  803 D1:B9FF 09 -  -  -          add hl,bc
  804 D1:BA00 ED 27 -  -          ld  hl,(hl)     ;address get.
  805 D1:BA02 01 00 00 00         ld  bc,0
  806 D1:BA06 4F -  -  -          ld  c,a
  807 D1:BA07 09 -  -  -          add hl,bc       ;Full address get.
  808 D1:BA08 DD 46 00 -          ld  b,(ix+REGA)
  809 D1:BA0B CD 0C AE D1         WRITE_ACCESS
  810 D1:BA0F ED 33 06 -          ADDCYC(6)
  811 D1:BA12 E1 -  -  -      pop hl
  812 D1:BA13 C3 6D B4 D1     jp i6502NextLoad
  813 D1:BA17 -  -  -  -  
  814 D1:BA17 -  -  -  -  ;-----------------------------------------------------------------------------
  815 D1:BA17 -  -  -  -  ;STX - Store Index X in Memory
  816 D1:BA17 -  -  -  -  ;    X -> M
  817 D1:BA17 -  -  -  -  ;    N	Z	C	I	D	V
  818 D1:BA17 -  -  -  -  ;    -	-	-	-	-	-
  819 D1:BA17 -  -  -  -  
  820 D1:BA17 -  -  -  -  ;zeropage	STX oper	86	2	3  
  821 D1:BA17 -  -  -  -  inst6502_stx_zp:
  822 D1:BA17 7E -  -  -      ld  a,(hl)
  823 D1:BA18 01 00 38 D0     ld  bc,ZEROPAGE
  824 D1:BA1C 81 -  -  -      add a,c
  825 D1:BA1D 4F -  -  -      ld  c,a
  826 D1:BA1E DD 7E 01 -      ld  a,(ix+REGX)
  827 D1:BA21 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  828 D1:BA22 ED 33 03 -      ADDCYC(3)
  829 D1:BA25 C3 6D B4 D1     jp i6502NextLoad
  830 D1:BA29 -  -  -  -  
  831 D1:BA29 -  -  -  -  ;zeropage,Y	STX oper,Y	96	2	4  
  832 D1:BA29 -  -  -  -  inst6502_stx_zpy:
  833 D1:BA29 7E -  -  -      ld  a,(hl)
  834 D1:BA2A 01 00 38 D0     ld  bc,ZEROPAGE
  835 D1:BA2E 81 -  -  -      add a,c
  836 D1:BA2F DD 86 02 -      add a,(ix+REGY)
  837 D1:BA32 4F -  -  -      ld  c,a
  838 D1:BA33 DD 7E 01 -      ld  a,(ix+REGX)
  839 D1:BA36 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  840 D1:BA37 ED 33 04 -      ADDCYC(4)
  841 D1:BA3A C3 6D B4 D1     jp i6502NextLoad
  842 D1:BA3E -  -  -  -  
  843 D1:BA3E -  -  -  -  ;absolute	STX oper	8E	3	4  
  844 D1:BA3E -  -  -  -  inst6502_stx_abs:
  845 D1:BA3E CD F8 B4 D1     call subroutine6502_abs_split_start
  846 D1:BA42 E5 -  -  -      push hl
  847 D1:BA43 50 -  -  -          ld  d,b
  848 D1:BA44 79 -  -  -          ld  a,c
  849 D1:BA45 0E 0C -  -          ld  c,BASETABLE_STRIDE
  850 D1:BA47 ED 4C -  -          mlt bc
  851 D1:BA49 21 00 40 D0         ld  hl,PAGETABLE
  852 D1:BA4D 09 -  -  -          add hl,bc
  853 D1:BA4E ED 27 -  -          ld  hl,(hl)
  854 D1:BA50 06 00 -  -          ld  b,0
  855 D1:BA52 4F -  -  -          ld  c,a
  856 D1:BA53 09 -  -  -          add hl,bc   ;full address
  857 D1:BA54 DD 46 01 -          ld  b,(ix+REGX)
  858 D1:BA57 CD 0C AE D1         WRITE_ACCESS
  859 D1:BA5B ED 33 04 -          ADDCYC(4)
  860 D1:BA5E E1 -  -  -      pop hl
  861 D1:BA5F C3 6D B4 D1     jp i6502NextLoad
  862 D1:BA63 -  -  -  -  
  863 D1:BA63 -  -  -  -  ;-----------------------------------------------------------------------------
  864 D1:BA63 -  -  -  -  ;STY - Store Index Y in Memory
  865 D1:BA63 -  -  -  -  ;    Y -> M
  866 D1:BA63 -  -  -  -  ;    N	Z	C	I	D	V
  867 D1:BA63 -  -  -  -  ;    -	-	-	-	-	-
  868 D1:BA63 -  -  -  -  
  869 D1:BA63 -  -  -  -  ;zeropage	STY oper	84	2	3  
  870 D1:BA63 -  -  -  -  inst6502_sty_zp:
  871 D1:BA63 7E -  -  -      ld  a,(hl)
  872 D1:BA64 01 00 38 D0     ld  bc,ZEROPAGE
  873 D1:BA68 81 -  -  -      add a,c
  874 D1:BA69 4F -  -  -      ld  c,a
  875 D1:BA6A DD 7E 02 -      ld  a,(ix+REGY)
  876 D1:BA6D 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  877 D1:BA6E ED 33 03 -      ADDCYC(3)
  878 D1:BA71 C3 6D B4 D1     jp i6502NextLoad
  879 D1:BA75 -  -  -  -  
  880 D1:BA75 -  -  -  -  ;zeropage,X	STY oper,X	94	2	4  
  881 D1:BA75 -  -  -  -  inst6502_sty_zpx:
  882 D1:BA75 7E -  -  -      ld  a,(hl)
  883 D1:BA76 01 00 38 D0     ld  bc,ZEROPAGE
  884 D1:BA7A 81 -  -  -      add a,c
  885 D1:BA7B DD 86 01 -      add a,(ix+REGX)
  886 D1:BA7E 4F -  -  -      ld  c,a
  887 D1:BA7F DD 7E 02 -      ld  a,(ix+REGY)
  888 D1:BA82 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  889 D1:BA83 ED 33 04 -      ADDCYC(4)
  890 D1:BA86 C3 6D B4 D1     jp i6502NextLoad
  891 D1:BA8A -  -  -  -  
  892 D1:BA8A -  -  -  -  ;absolute	STY oper	8C	3	4  
  893 D1:BA8A -  -  -  -  inst6502_sty_abs:
  894 D1:BA8A CD F8 B4 D1     call subroutine6502_abs_split_start
  895 D1:BA8E E5 -  -  -      push hl
  896 D1:BA8F 50 -  -  -          ld  d,b
  897 D1:BA90 79 -  -  -          ld  a,c
  898 D1:BA91 0E 0C -  -          ld  c,BASETABLE_STRIDE
  899 D1:BA93 ED 4C -  -          mlt bc
  900 D1:BA95 21 00 40 D0         ld  hl,PAGETABLE
  901 D1:BA99 09 -  -  -          add hl,bc
  902 D1:BA9A ED 27 -  -          ld  hl,(hl)
  903 D1:BA9C 06 00 -  -          ld  b,0
  904 D1:BA9E 4F -  -  -          ld  c,a
  905 D1:BA9F 09 -  -  -          add hl,bc   ;full address
  906 D1:BAA0 DD 46 02 -          ld  b,(ix+REGY)
  907 D1:BAA3 CD 0C AE D1         WRITE_ACCESS
  908 D1:BAA7 ED 33 04 -          ADDCYC(4)
  909 D1:BAAA E1 -  -  -      pop hl
  910 D1:BAAB C3 6D B4 D1     jp i6502NextLoad
  911 D1:BAAF -  -  -  -  
  912 D1:BAAF -  -  -  -  ;-----------------------------------------------------------------------------
  913 D1:BAAF -  -  -  -  ;TAX - Transfer Accumulator to Index X [A -> X]
  914 D1:BAAF -  -  -  -  ;N	Z	C	I	D	V
  915 D1:BAAF -  -  -  -  ;+	+	-	-	-	-
  916 D1:BAAF -  -  -  -  ;implied	TAX	AA	1	2
  917 D1:BAAF -  -  -  -  inst6502_tax:
  918 D1:BAAF DD 7E 00 -      ld  a,(ix+REGA)
  919 D1:BAB2 DD 77 01 -      ld  (ix+REGX),a
  920 D1:BAB5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  921 D1:BAC9 ED 33 02 -      ADDCYC(2)
  922 D1:BACC C3 86 B4 D1     jp i6502FinishLoad
  923 D1:BAD0 -  -  -  -  
  924 D1:BAD0 -  -  -  -  ;TAY - Transfer Accumulator to Index Y [A -> Y]
  925 D1:BAD0 -  -  -  -  ;N	Z	C	I	D	V
  926 D1:BAD0 -  -  -  -  ;+	+	-	-	-	-
  927 D1:BAD0 -  -  -  -  ;implied	TAY	A8	1	2
  928 D1:BAD0 -  -  -  -  inst6502_tay:
  929 D1:BAD0 DD 7E 00 -      ld  a,(ix+REGA)
  930 D1:BAD3 DD 77 02 -      ld  (ix+REGY),a
  931 D1:BAD6 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  932 D1:BAEA ED 33 02 -      ADDCYC(2)
  933 D1:BAED C3 86 B4 D1     jp i6502FinishLoad
  934 D1:BAF1 -  -  -  -  
  935 D1:BAF1 -  -  -  -  ;TSX - Transfer Stack Pointer to Index X [SP -> X]
  936 D1:BAF1 -  -  -  -  ;N	Z	C	I	D	V
  937 D1:BAF1 -  -  -  -  ;+	+	-	-	-	-
  938 D1:BAF1 -  -  -  -  ;implied	TSX	BA	1	2
  939 D1:BAF1 -  -  -  -  inst6502_tsx:
  940 D1:BAF1 DD 7E 03 -      ld  a,(ix+REGSP)
  941 D1:BAF4 DD 77 01 -      ld  (ix+REGX),a
  942 D1:BAF7 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  943 D1:BB0B ED 33 02 -      ADDCYC(2)
  944 D1:BB0E C3 86 B4 D1     jp i6502FinishLoad
  945 D1:BB12 -  -  -  -  
  946 D1:BB12 -  -  -  -  ;TXA - Transfer Index X to Accumulator [X -> A]
  947 D1:BB12 -  -  -  -  ;N	Z	C	I	D	V
  948 D1:BB12 -  -  -  -  ;+	+	-	-	-	-
  949 D1:BB12 -  -  -  -  ;implied	TXA	8A	1	2
  950 D1:BB12 -  -  -  -  inst6502_txa:
  951 D1:BB12 DD 7E 01 -      ld  a,(ix+REGX)
  952 D1:BB15 DD 77 00 -      ld  (ix+REGA),a
  953 D1:BB18 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  954 D1:BB2C ED 33 02 -      ADDCYC(2)
  955 D1:BB2F C3 86 B4 D1     jp i6502FinishLoad
  956 D1:BB33 -  -  -  -  
  957 D1:BB33 -  -  -  -  ;TXS - Transfer Index X to Stack Pointer [X -> SP]
  958 D1:BB33 -  -  -  -  ;N	Z	C	I	D	V
  959 D1:BB33 -  -  -  -  ;-	-	-	-	-	-
  960 D1:BB33 -  -  -  -  ;implied	TXS	9A	1	2
  961 D1:BB33 -  -  -  -  inst6502_txs:
  962 D1:BB33 DD 7E 01 -      ld  a,(ix+REGX)
  963 D1:BB36 DD 77 03 -      ld  (ix+REGSP),a
  964 D1:BB39 ED 33 02 -      ADDCYC(2)
  965 D1:BB3C C3 86 B4 D1     jp i6502FinishLoad
  966 D1:BB40 -  -  -  -  
  967 D1:BB40 -  -  -  -  ;TYA - Transfer Index Y to Accumulator [Y -> A]
  968 D1:BB40 -  -  -  -  ;N	Z	C	I	D	V
  969 D1:BB40 -  -  -  -  ;+	+	-	-	-	-
  970 D1:BB40 -  -  -  -  ;implied	TYA	98	1	2
  971 D1:BB40 -  -  -  -  inst6502_tya:
  972 D1:BB40 DD 7E 02 -      ld  a,(ix+REGY)
  973 D1:BB43 DD 77 00 -      ld  (ix+REGA),a
  974 D1:BB46 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  975 D1:BB5A ED 33 02 -      ADDCYC(2)
  976 D1:BB5D C3 86 B4 D1     jp i6502FinishLoad
  977 D1:BB61 -  -  -  -  
  978 D1:BB61 -  -  -  -  ;-----------------------------------------------------------------------------
  979 D1:BB61 -  -  -  -  ;-----------------------------------------------------------------------------
  980 D1:BB61 -  -  -  -  ;-----------------------------------------------------------------------------
  981 D1:BB61 -  -  -  -  ;Instructions by type: Stack Instructions
  982 D1:BB61 -  -  -  -  ;PHA - Push Accumulator on Stack
  983 D1:BB61 -  -  -  -  ;    push A
  984 D1:BB61 -  -  -  -  ;    N	Z	C	I	D	V
  985 D1:BB61 -  -  -  -  ;    -	-	-	-	-	-
  986 D1:BB61 -  -  -  -  ;implied	PHA	48	1	3 
  987 D1:BB61 -  -  -  -  inst6502_pha:
  988 D1:BB61 ED 33 03 -      ADDCYC(3)
  989 D1:BB64 DD 7E 00 -      ld  a,(ix+REGA)
  990 D1:BB67 01 00 39 D0     ld  bc,STACKBASE
  991 D1:BB6B DD 4E 03 -      ld  c,(ix+REGSP)
  992 D1:BB6E 02 -  -  -      ld  (bc),a
  993 D1:BB6F 0D -  -  -      dec c
  994 D1:BB70 DD 71 03 -      ld  (ix+REGSP),c
  995 D1:BB73 C3 86 B4 D1     jp i6502FinishLoad
  996 D1:BB77 -  -  -  -  
  997 D1:BB77 -  -  -  -  ;PHP - Push Processor Status on Stack
  998 D1:BB77 -  -  -  -  ;    The status register will be pushed with the break
  999 D1:BB77 -  -  -  -  ;    flag and bit 5 set to 1.
 1000 D1:BB77 -  -  -  -  ;    push SR
 1001 D1:BB77 -  -  -  -  ;    N	Z	C	I	D	V
 1002 D1:BB77 -  -  -  -  ;    -	-	-	-	-	-
 1003 D1:BB77 -  -  -  -  ;implied	PHP	08	1	3  
 1004 D1:BB77 -  -  -  -  inst6502_php:
 1005 D1:BB77 ED 33 03 -      ADDCYC(3)
 1006 D1:BB7A DD 7E 04 -      ld  a,(ix+REGSR)
 1007 D1:BB7D F6 30 -  -      or  a,%00110000
 1008 D1:BB7F 01 00 39 D0     ld  bc,STACKBASE
 1009 D1:BB83 DD 4E 03 -      ld  c,(ix+REGSP)
 1010 D1:BB86 02 -  -  -      ld  (bc),a
 1011 D1:BB87 0D -  -  -      dec c
 1012 D1:BB88 DD 71 03 -      ld  (ix+REGSP),c
 1013 D1:BB8B C3 86 B4 D1     jp i6502FinishLoad
 1014 D1:BB8F -  -  -  -  
 1015 D1:BB8F -  -  -  -  
 1016 D1:BB8F -  -  -  -  
 1017 D1:BB8F -  -  -  -  ;PLA - Pull Accumulator from Stack
 1018 D1:BB8F -  -  -  -  ;    pull A
 1019 D1:BB8F -  -  -  -  ;    N	Z	C	I	D	V
 1020 D1:BB8F -  -  -  -  ;    +	+	-	-	-	-
 1021 D1:BB8F -  -  -  -  ;implied	PLA	68	1	4  
 1022 D1:BB8F -  -  -  -  inst6502_pla:
 1023 D1:BB8F ED 33 04 -      ADDCYC(4)
 1024 D1:BB92 01 00 39 D0     ld  bc,STACKBASE
 1025 D1:BB96 DD 4E 03 -      ld  c,(ix+REGSP)
 1026 D1:BB99 0C -  -  -      inc c
 1027 D1:BB9A 0A -  -  -      ld  a,(bc)
 1028 D1:BB9B DD 71 03 -      ld  (ix+REGSP),c
 1029 D1:BB9E DD 77 00 -      ld  (ix+REGA),a
 1030 D1:BBA1 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1031 D1:BBB5 C3 86 B4 D1     jp i6502FinishLoad
 1032 D1:BBB9 -  -  -  -  
 1033 D1:BBB9 -  -  -  -  ;PLP - Pull Processor Status from Stack
 1034 D1:BBB9 -  -  -  -  ;    The status register will be pulled with the break
 1035 D1:BBB9 -  -  -  -  ;    flag and bit 5 ignored.
 1036 D1:BBB9 -  -  -  -  ;    pull SR
 1037 D1:BBB9 -  -  -  -  ;    N	Z	C	I	D	V
 1038 D1:BBB9 -  -  -  -  ;    from stack
 1039 D1:BBB9 -  -  -  -  ;implied	PLP	28	1	4  
 1040 D1:BBB9 -  -  -  -  inst6502_plp:
 1041 D1:BBB9 ED 33 04 -      ADDCYC(4)
 1042 D1:BBBC 01 00 39 D0     ld  bc,STACKBASE
 1043 D1:BBC0 DD 4E 03 -      ld  c,(ix+REGSP)
 1044 D1:BBC3 0C -  -  -      inc c
 1045 D1:BBC4 0A -  -  -      ld  a,(bc)
 1046 D1:BBC5 DD 71 03 -      ld  (ix+REGSP),c
 1047 D1:BBC8 DD 46 04 -      ld  b,(ix+REGSR)
 1048 D1:BBCB A8 -  -  -      xor a,b
 1049 D1:BBCC E6 CF -  -      and a,%11001111
 1050 D1:BBCE A8 -  -  -      xor a,b
 1051 D1:BBCF DD 77 04 -      ld  (ix+REGSR),a
 1052 D1:BBD2 C3 86 B4 D1     jp i6502FinishLoad
 1053 D1:BBD6 -  -  -  -  
 1054 D1:BBD6 -  -  -  -  
 1055 D1:BBD6 -  -  -  -  ;-----------------------------------------------------------------------------
 1056 D1:BBD6 -  -  -  -  ;-----------------------------------------------------------------------------
 1057 D1:BBD6 -  -  -  -  ;-----------------------------------------------------------------------------
 1058 D1:BBD6 -  -  -  -  ;Instructions by type: Decrements and Increments
 1059 D1:BBD6 -  -  -  -  
 1060 D1:BBD6 -  -  -  -  ;DEC -  Decrement Memory by One
 1061 D1:BBD6 -  -  -  -  ;    M - 1 -> M
 1062 D1:BBD6 -  -  -  -  ;    N	Z	C	I	D	V
 1063 D1:BBD6 -  -  -  -  ;    +	+	-	-	-	-
 1064 D1:BBD6 -  -  -  -  ;    addressing	assembler	opc	bytes	cycles
 1065 D1:BBD6 -  -  -  -  
 1066 D1:BBD6 -  -  -  -  ;    zeropage	DEC oper	C6	2	5  
 1067 D1:BBD6 -  -  -  -  inst6502_dec_zp:
 1068 D1:BBD6 7E -  -  -      ld  a,(hl)
 1069 D1:BBD7 01 00 38 D0     ld  bc,ZEROPAGE
 1070 D1:BBDB 81 -  -  -      add a,c
 1071 D1:BBDC 4F -  -  -      ld  c,a
 1072 D1:BBDD 0A -  -  -      ld  a,(bc)
 1073 D1:BBDE 3D -  -  -      dec a
 1074 D1:BBDF 02 -  -  -      ld  (bc),a
 1075 D1:BBE0 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1076 D1:BBF4 ED 33 05 -      ADDCYC(5)
 1077 D1:BBF7 C3 6D B4 D1     jp i6502NextLoad
 1078 D1:BBFB -  -  -  -  
 1079 D1:BBFB -  -  -  -  ;    zeropage,X	DEC oper,X	D6	2	6  
 1080 D1:BBFB -  -  -  -  inst6502_dec_zpx:
 1081 D1:BBFB 7E -  -  -      ld  a,(hl)
 1082 D1:BBFC 01 00 38 D0     ld  bc,ZEROPAGE
 1083 D1:BC00 81 -  -  -      add a,c
 1084 D1:BC01 DD 86 01 -      add a,(ix+REGX)
 1085 D1:BC04 4F -  -  -      ld  c,a
 1086 D1:BC05 0A -  -  -      ld  a,(bc)
 1087 D1:BC06 3D -  -  -      dec a
 1088 D1:BC07 02 -  -  -      ld  (bc),a
 1089 D1:BC08 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1090 D1:BC1C ED 33 06 -      ADDCYC(6)
 1091 D1:BC1F C3 6D B4 D1     jp i6502NextLoad
 1092 D1:BC23 -  -  -  -  
 1093 D1:BC23 -  -  -  -  ;    absolute	DEC oper	CE	3	6  
 1094 D1:BC23 -  -  -  -  inst6502_dec_abs:
 1095 D1:BC23 CD F8 B4 D1     call subroutine6502_abs_split_start
 1096 D1:BC27 E5 -  -  -      push hl
 1097 D1:BC28 50 -  -  -          ld  d,b
 1098 D1:BC29 79 -  -  -          ld  a,c
 1099 D1:BC2A 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1100 D1:BC2C ED 4C -  -          mlt bc
 1101 D1:BC2E 21 00 40 D0         ld  hl,PAGETABLE
 1102 D1:BC32 09 -  -  -          add hl,bc
 1103 D1:BC33 ED 27 -  -          ld  hl,(hl)
 1104 D1:BC35 06 00 -  -          ld  b,0
 1105 D1:BC37 4F -  -  -          ld  c,a
 1106 D1:BC38 09 -  -  -          add hl,bc   ;full address
 1107 D1:BC39 CD E9 AD D1         READ_ACCESS
 1108 D1:BC3D 3D -  -  -          dec a
 1109 D1:BC3E 47 -  -  -          ld  b,a
 1110 D1:BC3F -  -  -  -          ;
 1111 D1:BC3F DD 7E 04 -          ld  a,(ix+REGSR)
 1112 D1:BC42 CB 8F -  -          res SF_ZERO,a
 1113 D1:BC44 20 02 -  -          jr  nz,$+4
 1114 D1:BC46 CB CF -  -          set SF_ZERO,a
 1115 D1:BC48 CB BF -  -          res SF_NEG,a
 1116 D1:BC4A F2 50 BC D1         jp  p,$+6
 1117 D1:BC4E CB FF -  -          set SF_NEG,a
 1118 D1:BC50 DD 77 04 -          ld  (ix+REGSR),a
 1119 D1:BC53 -  -  -  -          ;
 1120 D1:BC53 CD 0C AE D1         WRITE_ACCESS
 1121 D1:BC57 ED 33 06 -          ADDCYC(6)
 1122 D1:BC5A E1 -  -  -      pop hl
 1123 D1:BC5B C3 6D B4 D1     jp i6502NextLoad
 1124 D1:BC5F -  -  -  -  
 1125 D1:BC5F -  -  -  -  ;    absolute,X	DEC oper,X	DE	3	7  
 1126 D1:BC5F -  -  -  -  inst6502_dec_absx:
 1127 D1:BC5F ED 33 07 -      ADDCYC(7)
 1128 D1:BC62 CD 55 B5 D1     PUSH_ABSXSPLIT_NODEP
 1129 D1:BC66 CD E9 AD D1         READ_ACCESS
 1130 D1:BC6A 3D -  -  -          dec a
 1131 D1:BC6B 47 -  -  -          ld  b,a
 1132 D1:BC6C -  -  -  -          ;
 1133 D1:BC6C DD 7E 04 -          ld  a,(ix+REGSR)
 1134 D1:BC6F CB 8F -  -          res SF_ZERO,a
 1135 D1:BC71 20 02 -  -          jr  nz,$+4
 1136 D1:BC73 CB CF -  -          set SF_ZERO,a
 1137 D1:BC75 CB BF -  -          res SF_NEG,a
 1138 D1:BC77 F2 7D BC D1         jp  p,$+6
 1139 D1:BC7B CB FF -  -          set SF_NEG,a
 1140 D1:BC7D DD 77 04 -          ld  (ix+REGSR),a
 1141 D1:BC80 -  -  -  -          ;
 1142 D1:BC80 CD 0C AE D1         WRITE_ACCESS
 1143 D1:BC84 E1 -  -  -      pop hl
 1144 D1:BC85 C3 6D B4 D1     jp i6502NextLoad
 1145 D1:BC89 -  -  -  -  
 1146 D1:BC89 -  -  -  -  ;DEX - Decrement Index X by One [X - 1 -> X]
 1147 D1:BC89 -  -  -  -  ;Flags altered: NZ
 1148 D1:BC89 -  -  -  -  ;implied	DEX	CA	1	2  
 1149 D1:BC89 -  -  -  -  inst6502_dex:
 1150 D1:BC89 DD 35 01 -      dec (ix+REGX)
 1151 D1:BC8C DD 7E 04 -  _:  ld  a,(ix+REGSR)
 1152 D1:BC8F CB 8F -  -      res SF_ZERO,a
 1153 D1:BC91 20 02 -  -      jr  nz,$+4
 1154 D1:BC93 CB CF -  -      set SF_ZERO,a
 1155 D1:BC95 CB BF -  -      res SF_NEG,a
 1156 D1:BC97 F2 9D BC D1     jp  p,$+6
 1157 D1:BC9B CB FF -  -      set SF_NEG,a
 1158 D1:BC9D DD 77 04 -      ld  (ix+REGSR),a
 1159 D1:BCA0 ED 33 02 -      ADDCYC(2)
 1160 D1:BCA3 C3 86 B4 D1     jp i6502FinishLoad
 1161 D1:BCA7 -  -  -  -  
 1162 D1:BCA7 -  -  -  -  ;DEY - Decrement Index Y by One [Y - 1 -> Y]
 1163 D1:BCA7 -  -  -  -  ;Flags altered: NZ
 1164 D1:BCA7 -  -  -  -  ;implied	DEY	88	1	2  
 1165 D1:BCA7 -  -  -  -  inst6502_dey:
 1166 D1:BCA7 DD 35 02 -      dec (ix+REGY)
 1167 D1:BCAA 18 E0 -  -      jr  -_
 1168 D1:BCAC -  -  -  -  
 1169 D1:BCAC -  -  -  -  
 1170 D1:BCAC -  -  -  -  ;INX - Increment Index X by One [X + 1 -> X]
 1171 D1:BCAC -  -  -  -  ;Flags altered: NZ
 1172 D1:BCAC -  -  -  -  ;implied	INX	E8	1	2  
 1173 D1:BCAC -  -  -  -  inst6502_inx:
 1174 D1:BCAC DD 34 01 -      inc (ix+REGX)
 1175 D1:BCAF 18 DB -  -      jr  -_
 1176 D1:BCB1 -  -  -  -  
 1177 D1:BCB1 -  -  -  -  
 1178 D1:BCB1 -  -  -  -  ;INY - Increment Index Y by One [Y + 1 -> Y]
 1179 D1:BCB1 -  -  -  -  ;Flags altered: NZ
 1180 D1:BCB1 -  -  -  -  ;implied	INY	C8	1	2  
 1181 D1:BCB1 -  -  -  -  inst6502_iny:
 1182 D1:BCB1 DD 34 02 -      inc (ix+REGY)
 1183 D1:BCB4 18 D6 -  -      jr  -_
 1184 D1:BCB6 -  -  -  -  
 1185 D1:BCB6 -  -  -  -  
 1186 D1:BCB6 -  -  -  -  ;INC - Increment Memory by One
 1187 D1:BCB6 -  -  -  -  ;    M + 1 -> M
 1188 D1:BCB6 -  -  -  -  ;    N	Z	C	I	D	V
 1189 D1:BCB6 -  -  -  -  ;    +	+	-	-	-	-
 1190 D1:BCB6 -  -  -  -  
 1191 D1:BCB6 -  -  -  -  ;zeropage	INC oper	E6	2	5  
 1192 D1:BCB6 -  -  -  -  inst6502_inc_zp:
 1193 D1:BCB6 7E -  -  -      ld  a,(hl)
 1194 D1:BCB7 01 00 38 D0     ld  bc,ZEROPAGE
 1195 D1:BCBB 81 -  -  -      add a,c
 1196 D1:BCBC 4F -  -  -      ld  c,a
 1197 D1:BCBD 0A -  -  -      ld  a,(bc)
 1198 D1:BCBE 3C -  -  -      inc a
 1199 D1:BCBF 02 -  -  -      ld  (bc),a
 1200 D1:BCC0 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1201 D1:BCD4 ED 33 05 -      ADDCYC(5)
 1202 D1:BCD7 C3 6D B4 D1     jp i6502NextLoad
 1203 D1:BCDB -  -  -  -  
 1204 D1:BCDB -  -  -  -  ;zeropage,X	INC oper,X	F6	2	6  
 1205 D1:BCDB -  -  -  -  inst6502_inc_zpx:
 1206 D1:BCDB 7E -  -  -      ld  a,(hl)
 1207 D1:BCDC 01 00 38 D0     ld  bc,ZEROPAGE
 1208 D1:BCE0 81 -  -  -      add a,c
 1209 D1:BCE1 DD 86 01 -      add a,(ix+REGX)
 1210 D1:BCE4 4F -  -  -      ld  c,a
 1211 D1:BCE5 0A -  -  -      ld  a,(bc)
 1212 D1:BCE6 3C -  -  -      inc a
 1213 D1:BCE7 02 -  -  -      ld  (bc),a
 1214 D1:BCE8 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1215 D1:BCFC ED 33 06 -      ADDCYC(6)
 1216 D1:BCFF C3 6D B4 D1     jp i6502NextLoad
 1217 D1:BD03 -  -  -  -      
 1218 D1:BD03 -  -  -  -  ;absolute	INC oper	EE	3	6
 1219 D1:BD03 -  -  -  -  inst6502_inc_abs:
 1220 D1:BD03 CD F8 B4 D1     call subroutine6502_abs_split_start
 1221 D1:BD07 E5 -  -  -      push hl
 1222 D1:BD08 50 -  -  -          ld  d,b
 1223 D1:BD09 79 -  -  -          ld  a,c
 1224 D1:BD0A 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1225 D1:BD0C ED 4C -  -          mlt bc
 1226 D1:BD0E 21 00 40 D0         ld  hl,PAGETABLE
 1227 D1:BD12 09 -  -  -          add hl,bc
 1228 D1:BD13 ED 27 -  -          ld  hl,(hl)
 1229 D1:BD15 06 00 -  -          ld  b,0
 1230 D1:BD17 4F -  -  -          ld  c,a
 1231 D1:BD18 09 -  -  -          add hl,bc   ;full address
 1232 D1:BD19 CD E9 AD D1         READ_ACCESS
 1233 D1:BD1D 3C -  -  -          inc a
 1234 D1:BD1E 47 -  -  -          ld  b,a
 1235 D1:BD1F -  -  -  -          ;
 1236 D1:BD1F DD 7E 04 -          ld  a,(ix+REGSR)
 1237 D1:BD22 CB 8F -  -          res SF_ZERO,a
 1238 D1:BD24 20 02 -  -          jr  nz,$+4
 1239 D1:BD26 CB CF -  -          set SF_ZERO,a
 1240 D1:BD28 CB BF -  -          res SF_NEG,a
 1241 D1:BD2A F2 30 BD D1         jp  p,$+6
 1242 D1:BD2E CB FF -  -          set SF_NEG,a
 1243 D1:BD30 DD 77 04 -          ld  (ix+REGSR),a
 1244 D1:BD33 -  -  -  -          ;
 1245 D1:BD33 CD 0C AE D1         WRITE_ACCESS
 1246 D1:BD37 ED 33 06 -          ADDCYC(6)
 1247 D1:BD3A E1 -  -  -      pop hl
 1248 D1:BD3B C3 6D B4 D1     jp i6502NextLoad
 1249 D1:BD3F -  -  -  -  
 1250 D1:BD3F -  -  -  -  ;absolute,X	INC oper,X	FE	3	7  
 1251 D1:BD3F -  -  -  -  inst6502_inc_absx:
 1252 D1:BD3F ED 33 07 -      ADDCYC(7)
 1253 D1:BD42 CD 55 B5 D1     PUSH_ABSXSPLIT_NODEP
 1254 D1:BD46 CD E9 AD D1         READ_ACCESS
 1255 D1:BD4A 3C -  -  -          inc a
 1256 D1:BD4B 47 -  -  -          ld  b,a
 1257 D1:BD4C -  -  -  -          ;
 1258 D1:BD4C DD 7E 04 -          ld  a,(ix+REGSR)
 1259 D1:BD4F CB 8F -  -          res SF_ZERO,a
 1260 D1:BD51 20 02 -  -          jr  nz,$+4
 1261 D1:BD53 CB CF -  -          set SF_ZERO,a
 1262 D1:BD55 CB BF -  -          res SF_NEG,a
 1263 D1:BD57 F2 5D BD D1         jp  p,$+6
 1264 D1:BD5B CB FF -  -          set SF_NEG,a
 1265 D1:BD5D DD 77 04 -          ld  (ix+REGSR),a
 1266 D1:BD60 -  -  -  -          ;
 1267 D1:BD60 CD 0C AE D1         WRITE_ACCESS
 1268 D1:BD64 E1 -  -  -      pop hl
 1269 D1:BD65 C3 6D B4 D1     jp i6502NextLoad
 1270 D1:BD69 -  -  -  -  
 1271 D1:BD69 -  -  -  -  ;-----------------------------------------------------------------------------
 1272 D1:BD69 -  -  -  -  ;-----------------------------------------------------------------------------
 1273 D1:BD69 -  -  -  -  ;-----------------------------------------------------------------------------
 1274 D1:BD69 -  -  -  -  ;Instructions by type: Arithmetic Operations
 1275 D1:BD69 -  -  -  -  ;ADC - Add Memory to Accumulator with Carry  [A + M + C -> A, C]
 1276 D1:BD69 -  -  -  -  ;    N	Z	C	I	D	V
 1277 D1:BD69 -  -  -  -  ;    +	+	+	-	-	+
 1278 D1:BD69 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1279 D1:BD69 -  -  -  -  
 1280 D1:BD69 -  -  -  -  ;immediate	ADC #oper	69	2	2  
 1281 D1:BD69 -  -  -  -  inst6502_adc_imm:
 1282 D1:BD69 ED 33 02 -      ADDCYC(2)
 1283 D1:BD6C 4E -  -  -      ld  c,(hl)
 1284 D1:BD6D C3 8A B5 D1     jp  subroutine6502_adc_combined_end
 1285 D1:BD71 -  -  -  -      
 1286 D1:BD71 -  -  -  -  
 1287 D1:BD71 -  -  -  -  ;zeropage	ADC oper	65	2	3
 1288 D1:BD71 -  -  -  -  inst6502_adc_zp:
 1289 D1:BD71 ED 33 03 -      ADDCYC(3)
 1290 D1:BD74 7E -  -  -      ld  a,(hl)
 1291 D1:BD75 01 00 38 D0     ld  bc,ZEROPAGE
 1292 D1:BD79 81 -  -  -      add a,c
 1293 D1:BD7A 4F -  -  -      ld  c,a
 1294 D1:BD7B 0A -  -  -      ld  a,(bc)
 1295 D1:BD7C 4F -  -  -      ld  c,a
 1296 D1:BD7D C3 8A B5 D1     jp  subroutine6502_adc_combined_end
 1297 D1:BD81 -  -  -  -  
 1298 D1:BD81 -  -  -  -  ;zeropage,X	ADC oper,X	75	2	4  
 1299 D1:BD81 -  -  -  -  inst6502_adc_zpx:
 1300 D1:BD81 ED 33 04 -      ADDCYC(4)
 1301 D1:BD84 7E -  -  -      ld  a,(hl)
 1302 D1:BD85 DD 86 01 -      add a,(ix+REGX)
 1303 D1:BD88 01 00 38 D0     ld  bc,ZEROPAGE
 1304 D1:BD8C 81 -  -  -      add a,c
 1305 D1:BD8D 4F -  -  -      ld  c,a
 1306 D1:BD8E 0A -  -  -      ld  a,(bc)
 1307 D1:BD8F 4F -  -  -      ld  c,a
 1308 D1:BD90 C3 8A B5 D1     jp  subroutine6502_adc_combined_end
 1309 D1:BD94 -  -  -  -  
 1310 D1:BD94 -  -  -  -  ;absolute	ADC oper	6D	3	4  
 1311 D1:BD94 -  -  -  -  inst6502_adc_abs:
 1312 D1:BD94 ED 33 04 -      ADDCYC(4)
 1313 D1:BD97 CD F8 B4 D1     call subroutine6502_abs_split_start
 1314 D1:BD9B E5 -  -  -      push hl
 1315 D1:BD9C 50 -  -  -          ld  d,b
 1316 D1:BD9D 79 -  -  -          ld  a,c
 1317 D1:BD9E 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1318 D1:BDA0 ED 4C -  -          mlt bc
 1319 D1:BDA2 21 00 40 D0         ld  hl,PAGETABLE
 1320 D1:BDA6 09 -  -  -          add hl,bc
 1321 D1:BDA7 ED 27 -  -          ld  hl,(hl)
 1322 D1:BDA9 06 00 -  -          ld  b,0
 1323 D1:BDAB 4F -  -  -          ld  c,a
 1324 D1:BDAC 09 -  -  -          add hl,bc   ;full address
 1325 D1:BDAD CD E9 AD D1         READ_ACCESS
 1326 D1:BDB1 E1 -  -  -      pop hl
 1327 D1:BDB2 4F -  -  -      ld  c,a
 1328 D1:BDB3 C3 8A B5 D1     jp  subroutine6502_adc_combined_end
 1329 D1:BDB7 -  -  -  -  
 1330 D1:BDB7 -  -  -  -  ;absolute,X	ADC oper,X	7D	3	4* 
 1331 D1:BDB7 -  -  -  -  inst6502_adc_absx:
 1332 D1:BDB7 ED 33 04 -      ADDCYC(4)
 1333 D1:BDBA CD 19 B5 D1     PUSH_ABSXSPLIT
 1334 D1:BDBE CD E9 AD D1         READ_ACCESS
 1335 D1:BDC2 E1 -  -  -      pop hl
 1336 D1:BDC3 4F -  -  -      ld  c,a
 1337 D1:BDC4 C3 8A B5 D1     jp  subroutine6502_adc_combined_end
 1338 D1:BDC8 -  -  -  -  
 1339 D1:BDC8 -  -  -  -  ;absolute,Y	ADC oper,Y	79	3	4*
 1340 D1:BDC8 -  -  -  -  inst6502_adc_absy:
 1341 D1:BDC8 ED 33 04 -      ADDCYC(4)
 1342 D1:BDCB CD 14 B5 D1     PUSH_ABSYSPLIT
 1343 D1:BDCF CD E9 AD D1         READ_ACCESS
 1344 D1:BDD3 E1 -  -  -      pop hl
 1345 D1:BDD4 4F -  -  -      ld  c,a
 1346 D1:BDD5 C3 8A B5 D1     jp  subroutine6502_adc_combined_end
 1347 D1:BDD9 -  -  -  -  
 1348 D1:BDD9 -  -  -  -  ;(indirect,X)	ADC (oper,X)	61	2	6  
 1349 D1:BDD9 -  -  -  -  inst6502_adc_indx:
 1350 D1:BDD9 ED 33 06 -      ADDCYC(6)
 1351 D1:BDDC E5 -  -  -      push hl
 1352 D1:BDDD 7E -  -  -          ld  a,(hl)
 1353 D1:BDDE 21 00 38 D0         ld  hl,ZEROPAGE
 1354 D1:BDE2 85 -  -  -          add a,L
 1355 D1:BDE3 DD 86 01 -          add a,(ix+REGX)
 1356 D1:BDE6 6F -  -  -          ld  L,a
 1357 D1:BDE7 7E -  -  -          ld  a,(hl)
 1358 D1:BDE8 2C -  -  -          inc L
 1359 D1:BDE9 56 -  -  -          ld  d,(hl)
 1360 D1:BDEA 42 -  -  -          ld  b,d
 1361 D1:BDEB 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1362 D1:BDED ED 4C -  -          mlt bc
 1363 D1:BDEF 21 00 40 D0         ld  hl,PAGETABLE
 1364 D1:BDF3 09 -  -  -          add hl,bc
 1365 D1:BDF4 ED 27 -  -          ld  hl,(hl)
 1366 D1:BDF6 06 00 -  -          ld  b,0
 1367 D1:BDF8 4F -  -  -          ld  c,a
 1368 D1:BDF9 09 -  -  -          add hl,bc
 1369 D1:BDFA CD E9 AD D1         READ_ACCESS
 1370 D1:BDFE E1 -  -  -      pop hl
 1371 D1:BDFF 4F -  -  -      ld  c,a
 1372 D1:BE00 C3 8A B5 D1     jp  subroutine6502_adc_combined_end
 1373 D1:BE04 -  -  -  -  
 1374 D1:BE04 -  -  -  -  ;(indirect),Y	ADC (oper),Y	71	2	5* 
 1375 D1:BE04 -  -  -  -  inst6502_adc_indy:
 1376 D1:BE04 ED 33 05 -      ADDCYC(5)
 1377 D1:BE07 E5 -  -  -      push hl
 1378 D1:BE08 7E -  -  -          ld  a,(hl)
 1379 D1:BE09 21 00 38 D0         ld  hl,ZEROPAGE
 1380 D1:BE0D 85 -  -  -          add a,L
 1381 D1:BE0E 6F -  -  -          ld  L,a
 1382 D1:BE0F 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1383 D1:BE10 2C -  -  -          inc L
 1384 D1:BE11 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1385 D1:BE14 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1386 D1:BE15 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1387 D1:BE17 FD 23 -  -          ADDCYC(1)
 1388 D1:BE19 24 -  -  -          inc h
 1389 D1:BE1A 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1390 D1:BE1B 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1391 D1:BE1D ED 6C -  -          mlt hl          ;23.
 1392 D1:BE1F 01 00 40 D0         ld  bc,PAGETABLE
 1393 D1:BE23 09 -  -  -          add hl,bc
 1394 D1:BE24 ED 27 -  -          ld  hl,(hl)     ;address get.
 1395 D1:BE26 01 00 00 00         ld  bc,0
 1396 D1:BE2A 4F -  -  -          ld  c,a
 1397 D1:BE2B 09 -  -  -          add hl,bc       ;Full address get.
 1398 D1:BE2C CD E9 AD D1         READ_ACCESS
 1399 D1:BE30 E1 -  -  -      pop hl
 1400 D1:BE31 4F -  -  -      ld  c,a
 1401 D1:BE32 C3 8A B5 D1     jp  subroutine6502_adc_combined_end
 1402 D1:BE36 -  -  -  -  
 1403 D1:BE36 -  -  -  -  
 1404 D1:BE36 -  -  -  -  ;SBC - Subtract Memory from Accumulator with Borrow
 1405 D1:BE36 -  -  -  -  ;A - M - C̅ -> A
 1406 D1:BE36 -  -  -  -  ;N	Z	C	I	D	V
 1407 D1:BE36 -  -  -  -  ;+	+	+	-	-	+
 1408 D1:BE36 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1409 D1:BE36 -  -  -  -  
 1410 D1:BE36 -  -  -  -  ;immediate	SBC #oper	E9	2	2  
 1411 D1:BE36 -  -  -  -  inst6502_sbc_imm:
 1412 D1:BE36 ED 33 02 -      ADDCYC(2)
 1413 D1:BE39 4E -  -  -      ld  c,(hl)
 1414 D1:BE3A C3 BB B5 D1     jp  subroutine6502_sbc_combined_end
 1415 D1:BE3E -  -  -  -  
 1416 D1:BE3E -  -  -  -  ;zeropage	SBC oper	E5	2	3  
 1417 D1:BE3E -  -  -  -  inst6502_sbc_zp:
 1418 D1:BE3E ED 33 03 -      ADDCYC(3)
 1419 D1:BE41 7E -  -  -      ld  a,(hl)
 1420 D1:BE42 01 00 38 D0     ld  bc,ZEROPAGE
 1421 D1:BE46 81 -  -  -      add a,c
 1422 D1:BE47 4F -  -  -      ld  c,a
 1423 D1:BE48 0A -  -  -      ld  a,(bc)
 1424 D1:BE49 4F -  -  -      ld  c,a
 1425 D1:BE4A C3 BB B5 D1     jp  subroutine6502_sbc_combined_end
 1426 D1:BE4E -  -  -  -  
 1427 D1:BE4E -  -  -  -  ;zeropage,X	SBC oper,X	F5	2	4  
 1428 D1:BE4E -  -  -  -  inst6502_sbc_zpx:
 1429 D1:BE4E ED 33 04 -      ADDCYC(4)
 1430 D1:BE51 7E -  -  -      ld  a,(hl)
 1431 D1:BE52 DD 86 01 -      add a,(ix+REGX)
 1432 D1:BE55 01 00 38 D0     ld  bc,ZEROPAGE
 1433 D1:BE59 81 -  -  -      add a,c
 1434 D1:BE5A 4F -  -  -      ld  c,a
 1435 D1:BE5B 0A -  -  -      ld  a,(bc)
 1436 D1:BE5C 4F -  -  -      ld  c,a
 1437 D1:BE5D C3 BB B5 D1     jp  subroutine6502_sbc_combined_end
 1438 D1:BE61 -  -  -  -  
 1439 D1:BE61 -  -  -  -  ;absolute	SBC oper	ED	3	4  
 1440 D1:BE61 -  -  -  -  inst6502_sbc_abs:
 1441 D1:BE61 ED 33 04 -      ADDCYC(4)
 1442 D1:BE64 CD F8 B4 D1     call subroutine6502_abs_split_start
 1443 D1:BE68 E5 -  -  -      push hl
 1444 D1:BE69 50 -  -  -          ld  d,b
 1445 D1:BE6A 79 -  -  -          ld  a,c
 1446 D1:BE6B 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1447 D1:BE6D ED 4C -  -          mlt bc
 1448 D1:BE6F 21 00 40 D0         ld  hl,PAGETABLE
 1449 D1:BE73 09 -  -  -          add hl,bc
 1450 D1:BE74 ED 27 -  -          ld  hl,(hl)
 1451 D1:BE76 06 00 -  -          ld  b,0
 1452 D1:BE78 4F -  -  -          ld  c,a
 1453 D1:BE79 09 -  -  -          add hl,bc   ;full address
 1454 D1:BE7A CD E9 AD D1         READ_ACCESS
 1455 D1:BE7E E1 -  -  -      pop hl
 1456 D1:BE7F 4F -  -  -      ld  c,a
 1457 D1:BE80 C3 BB B5 D1     jp  subroutine6502_sbc_combined_end
 1458 D1:BE84 -  -  -  -  
 1459 D1:BE84 -  -  -  -  ;absolute,X	SBC oper,X	FD	3	4* 
 1460 D1:BE84 -  -  -  -  inst6502_sbc_absx:
 1461 D1:BE84 ED 33 04 -      ADDCYC(4)
 1462 D1:BE87 CD 19 B5 D1     PUSH_ABSXSPLIT
 1463 D1:BE8B CD E9 AD D1         READ_ACCESS
 1464 D1:BE8F E1 -  -  -      pop hl
 1465 D1:BE90 4F -  -  -      ld  c,a
 1466 D1:BE91 C3 BB B5 D1     jp  subroutine6502_sbc_combined_end
 1467 D1:BE95 -  -  -  -  
 1468 D1:BE95 -  -  -  -  ;absolute,Y	SBC oper,Y	F9	3	4* 
 1469 D1:BE95 -  -  -  -  inst6502_sbc_absy:
 1470 D1:BE95 ED 33 04 -      ADDCYC(4)
 1471 D1:BE98 CD 14 B5 D1     PUSH_ABSYSPLIT
 1472 D1:BE9C CD E9 AD D1         READ_ACCESS
 1473 D1:BEA0 E1 -  -  -      pop hl
 1474 D1:BEA1 4F -  -  -      ld  c,a
 1475 D1:BEA2 C3 BB B5 D1     jp  subroutine6502_sbc_combined_end
 1476 D1:BEA6 -  -  -  -  
 1477 D1:BEA6 -  -  -  -  ;(indirect,X)	SBC (oper,X)	E1	2	6  
 1478 D1:BEA6 -  -  -  -  inst6502_sbc_indx:
 1479 D1:BEA6 ED 33 06 -      ADDCYC(6)
 1480 D1:BEA9 E5 -  -  -      push hl
 1481 D1:BEAA 7E -  -  -          ld  a,(hl)
 1482 D1:BEAB 21 00 38 D0         ld  hl,ZEROPAGE
 1483 D1:BEAF 85 -  -  -          add a,L
 1484 D1:BEB0 DD 86 01 -          add a,(ix+REGX)
 1485 D1:BEB3 6F -  -  -          ld  L,a
 1486 D1:BEB4 7E -  -  -          ld  a,(hl)
 1487 D1:BEB5 2C -  -  -          inc L
 1488 D1:BEB6 56 -  -  -          ld  d,(hl)
 1489 D1:BEB7 42 -  -  -          ld  b,d
 1490 D1:BEB8 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1491 D1:BEBA ED 4C -  -          mlt bc
 1492 D1:BEBC 21 00 40 D0         ld  hl,PAGETABLE
 1493 D1:BEC0 09 -  -  -          add hl,bc
 1494 D1:BEC1 ED 27 -  -          ld  hl,(hl)
 1495 D1:BEC3 06 00 -  -          ld  b,0
 1496 D1:BEC5 4F -  -  -          ld  c,a
 1497 D1:BEC6 09 -  -  -          add hl,bc
 1498 D1:BEC7 CD E9 AD D1         READ_ACCESS
 1499 D1:BECB E1 -  -  -      pop hl
 1500 D1:BECC 4F -  -  -      ld  c,a
 1501 D1:BECD C3 BB B5 D1     jp  subroutine6502_sbc_combined_end
 1502 D1:BED1 -  -  -  -  
 1503 D1:BED1 -  -  -  -  ;(indirect),Y	SBC (oper),Y	F1	2	5* 
 1504 D1:BED1 -  -  -  -  inst6502_sbc_indy:
 1505 D1:BED1 ED 33 05 -      ADDCYC(5)
 1506 D1:BED4 E5 -  -  -      push hl
 1507 D1:BED5 7E -  -  -          ld  a,(hl)
 1508 D1:BED6 21 00 38 D0         ld  hl,ZEROPAGE
 1509 D1:BEDA 85 -  -  -          add a,L
 1510 D1:BEDB 6F -  -  -          ld  L,a
 1511 D1:BEDC 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1512 D1:BEDD 2C -  -  -          inc L
 1513 D1:BEDE DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1514 D1:BEE1 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1515 D1:BEE2 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1516 D1:BEE4 FD 23 -  -          ADDCYC(1)
 1517 D1:BEE6 24 -  -  -          inc h
 1518 D1:BEE7 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1519 D1:BEE8 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1520 D1:BEEA ED 6C -  -          mlt hl          ;23.
 1521 D1:BEEC 01 00 40 D0         ld  bc,PAGETABLE
 1522 D1:BEF0 09 -  -  -          add hl,bc
 1523 D1:BEF1 ED 27 -  -          ld  hl,(hl)     ;address get.
 1524 D1:BEF3 01 00 00 00         ld  bc,0
 1525 D1:BEF7 4F -  -  -          ld  c,a
 1526 D1:BEF8 09 -  -  -          add hl,bc       ;Full address get.
 1527 D1:BEF9 CD E9 AD D1         READ_ACCESS
 1528 D1:BEFD E1 -  -  -      pop hl
 1529 D1:BEFE 4F -  -  -      ld  c,a
 1530 D1:BEFF C3 BB B5 D1     jp  subroutine6502_sbc_combined_end
 1531 D1:BF03 -  -  -  -  
 1532 D1:BF03 -  -  -  -  
 1533 D1:BF03 -  -  -  -  
 1534 D1:BF03 -  -  -  -  ;-----------------------------------------------------------------------------
 1535 D1:BF03 -  -  -  -  ;-----------------------------------------------------------------------------
 1536 D1:BF03 -  -  -  -  ;-----------------------------------------------------------------------------
 1537 D1:BF03 -  -  -  -  ;Instructions by type: Logical Operations
 1538 D1:BF03 -  -  -  -  
 1539 D1:BF03 -  -  -  -  ;AND - AND Memory with Accumulator
 1540 D1:BF03 -  -  -  -  ;A AND M -> A
 1541 D1:BF03 -  -  -  -  ;N	Z	C	I	D	V
 1542 D1:BF03 -  -  -  -  ;+	+	-	-	-	-
 1543 D1:BF03 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1544 D1:BF03 -  -  -  -  
 1545 D1:BF03 -  -  -  -  ;immediate	AND #oper	29	2	2  
 1546 D1:BF03 -  -  -  -  inst6502_and_imm:
 1547 D1:BF03 ED 33 02 -      ADDCYC(2)
 1548 D1:BF06 7E -  -  -      ld  a,(hl)
 1549 D1:BF07 DD A6 00 -      and a,(ix+REGA)
 1550 D1:BF0A DD 77 00 -      ld  (ix+REGA),A
 1551 D1:BF0D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1552 D1:BF21 C3 6D B4 D1     jp i6502NextLoad
 1553 D1:BF25 -  -  -  -  
 1554 D1:BF25 -  -  -  -  ;zeropage	AND oper	25	2	3  
 1555 D1:BF25 -  -  -  -  inst6502_and_zp:
 1556 D1:BF25 ED 33 03 -      ADDCYC(3)
 1557 D1:BF28 7E -  -  -      ld  a,(hl)
 1558 D1:BF29 01 00 38 D0     ld  bc,ZEROPAGE
 1559 D1:BF2D 81 -  -  -      add a,c
 1560 D1:BF2E 4F -  -  -      ld  c,a
 1561 D1:BF2F 0A -  -  -      ld  a,(bc)
 1562 D1:BF30 DD A6 00 -      and a,(ix+REGA)
 1563 D1:BF33 DD 77 00 -      ld  (ix+REGA),A
 1564 D1:BF36 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1565 D1:BF4A C3 6D B4 D1     jp i6502NextLoad
 1566 D1:BF4E -  -  -  -  
 1567 D1:BF4E -  -  -  -  ;zeropage,X	AND oper,X	35	2	4  
 1568 D1:BF4E -  -  -  -  inst6502_and_zpx:
 1569 D1:BF4E ED 33 04 -      ADDCYC(4)
 1570 D1:BF51 7E -  -  -      ld  a,(hl)
 1571 D1:BF52 01 00 38 D0     ld  bc,ZEROPAGE
 1572 D1:BF56 81 -  -  -      add a,c
 1573 D1:BF57 DD 86 01 -      add a,(ix+REGX)
 1574 D1:BF5A 4F -  -  -      ld  c,a
 1575 D1:BF5B 0A -  -  -      ld  a,(bc)
 1576 D1:BF5C DD A6 00 -      and a,(ix+REGA)
 1577 D1:BF5F DD 77 00 -      ld  (ix+REGA),A
 1578 D1:BF62 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1579 D1:BF76 C3 6D B4 D1     jp i6502NextLoad
 1580 D1:BF7A -  -  -  -  
 1581 D1:BF7A -  -  -  -  ;absolute	AND oper	2D	3	4  
 1582 D1:BF7A -  -  -  -  inst6502_and_abs:
 1583 D1:BF7A ED 33 04 -      ADDCYC(4)
 1584 D1:BF7D CD F8 B4 D1     call subroutine6502_abs_split_start
 1585 D1:BF81 E5 -  -  -      push hl
 1586 D1:BF82 50 -  -  -          ld  d,b
 1587 D1:BF83 79 -  -  -          ld  a,c
 1588 D1:BF84 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1589 D1:BF86 ED 4C -  -          mlt bc
 1590 D1:BF88 21 00 40 D0         ld  hl,PAGETABLE
 1591 D1:BF8C 09 -  -  -          add hl,bc
 1592 D1:BF8D ED 27 -  -          ld  hl,(hl)
 1593 D1:BF8F 06 00 -  -          ld  b,0
 1594 D1:BF91 4F -  -  -          ld  c,a
 1595 D1:BF92 09 -  -  -          add hl,bc   ;full address
 1596 D1:BF93 CD E9 AD D1         READ_ACCESS
 1597 D1:BF97 E1 -  -  -      pop hl
 1598 D1:BF98 DD A6 00 -      and a,(ix+REGA)
 1599 D1:BF9B DD 77 00 -      ld  (ix+REGA),A
 1600 D1:BF9E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1601 D1:BFB2 C3 6D B4 D1     jp i6502NextLoad
 1602 D1:BFB6 -  -  -  -  
 1603 D1:BFB6 -  -  -  -  ;absolute,X	AND oper,X	3D	3	4* 
 1604 D1:BFB6 -  -  -  -  inst6502_and_absx:
 1605 D1:BFB6 ED 33 04 -      ADDCYC(4)
 1606 D1:BFB9 CD 19 B5 D1     PUSH_ABSXSPLIT
 1607 D1:BFBD CD E9 AD D1         READ_ACCESS
 1608 D1:BFC1 DD A6 00 -          and a,(ix+REGA)
 1609 D1:BFC4 DD 77 00 -          ld  (ix+REGA),A
 1610 D1:BFC7 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1611 D1:BFDB E1 -  -  -      pop hl
 1612 D1:BFDC C3 6D B4 D1     jp i6502NextLoad
 1613 D1:BFE0 -  -  -  -  
 1614 D1:BFE0 -  -  -  -  ;absolute,Y	AND oper,Y	39	3	4* 
 1615 D1:BFE0 -  -  -  -  inst6502_and_absy:
 1616 D1:BFE0 ED 33 04 -      ADDCYC(4)
 1617 D1:BFE3 CD 14 B5 D1     PUSH_ABSYSPLIT
 1618 D1:BFE7 CD E9 AD D1         READ_ACCESS
 1619 D1:BFEB E1 -  -  -      pop hl
 1620 D1:BFEC DD A6 00 -      and a,(ix+REGA)
 1621 D1:BFEF DD 77 00 -      ld  (ix+REGA),A
 1622 D1:BFF2 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1623 D1:C006 C3 6D B4 D1     jp i6502NextLoad
 1624 D1:C00A -  -  -  -  
 1625 D1:C00A -  -  -  -  ;(indirect,X)	AND (oper,X)	21	2	6  
 1626 D1:C00A -  -  -  -  inst6502_and_indx:
 1627 D1:C00A ED 33 06 -      ADDCYC(6)
 1628 D1:C00D E5 -  -  -      push hl
 1629 D1:C00E 7E -  -  -          ld  a,(hl)
 1630 D1:C00F 21 00 38 D0         ld  hl,ZEROPAGE
 1631 D1:C013 85 -  -  -          add a,L
 1632 D1:C014 DD 86 01 -          add a,(ix+REGX)
 1633 D1:C017 6F -  -  -          ld  L,a
 1634 D1:C018 7E -  -  -          ld  a,(hl)
 1635 D1:C019 2C -  -  -          inc L
 1636 D1:C01A 56 -  -  -          ld  d,(hl)
 1637 D1:C01B 42 -  -  -          ld  b,d
 1638 D1:C01C 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1639 D1:C01E ED 4C -  -          mlt bc
 1640 D1:C020 21 00 40 D0         ld  hl,PAGETABLE
 1641 D1:C024 09 -  -  -          add hl,bc
 1642 D1:C025 ED 27 -  -          ld  hl,(hl)
 1643 D1:C027 06 00 -  -          ld  b,0
 1644 D1:C029 4F -  -  -          ld  c,a
 1645 D1:C02A 09 -  -  -          add hl,bc
 1646 D1:C02B CD E9 AD D1         READ_ACCESS
 1647 D1:C02F E1 -  -  -      pop hl
 1648 D1:C030 DD A6 00 -      and a,(ix+REGA)
 1649 D1:C033 DD 77 00 -      ld  (ix+REGA),A
 1650 D1:C036 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1651 D1:C04A C3 6D B4 D1     jp i6502NextLoad
 1652 D1:C04E -  -  -  -  
 1653 D1:C04E -  -  -  -  ;(indirect),Y	AND (oper),Y	31	2	5* 
 1654 D1:C04E -  -  -  -  inst6502_and_indy:
 1655 D1:C04E ED 33 05 -      ADDCYC(5)
 1656 D1:C051 E5 -  -  -      push hl
 1657 D1:C052 7E -  -  -          ld  a,(hl)
 1658 D1:C053 21 00 38 D0         ld  hl,ZEROPAGE
 1659 D1:C057 85 -  -  -          add a,L
 1660 D1:C058 6F -  -  -          ld  L,a
 1661 D1:C059 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1662 D1:C05A 2C -  -  -          inc L
 1663 D1:C05B DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1664 D1:C05E 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1665 D1:C05F 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1666 D1:C061 24 -  -  -          inc h
 1667 D1:C062 FD 23 -  -          ADDCYC(1)
 1668 D1:C064 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1669 D1:C065 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1670 D1:C067 ED 6C -  -          mlt hl          ;23.
 1671 D1:C069 01 00 40 D0         ld  bc,PAGETABLE
 1672 D1:C06D 09 -  -  -          add hl,bc
 1673 D1:C06E ED 27 -  -          ld  hl,(hl)     ;address get.
 1674 D1:C070 01 00 00 00         ld  bc,0
 1675 D1:C074 4F -  -  -          ld  c,a
 1676 D1:C075 09 -  -  -          add hl,bc       ;Full address get.
 1677 D1:C076 CD E9 AD D1         READ_ACCESS
 1678 D1:C07A E1 -  -  -      pop hl
 1679 D1:C07B DD A6 00 -      and a,(ix+REGA)
 1680 D1:C07E DD 77 00 -      ld  (ix+REGA),A
 1681 D1:C081 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1682 D1:C095 C3 6D B4 D1     jp i6502NextLoad
 1683 D1:C099 -  -  -  -  
 1684 D1:C099 -  -  -  -  ;-----------------------------------------------------------------------------
 1685 D1:C099 -  -  -  -  ;EOR - Exclusive-OR Memory with Accumulator
 1686 D1:C099 -  -  -  -  ;A EOR M -> A
 1687 D1:C099 -  -  -  -  ;N	Z	C	I	D	V
 1688 D1:C099 -  -  -  -  ;+	+	-	-	-	-
 1689 D1:C099 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1690 D1:C099 -  -  -  -  
 1691 D1:C099 -  -  -  -  ;immediate	EOR #oper	49	2	2  
 1692 D1:C099 -  -  -  -  inst6502_eor_imm:
 1693 D1:C099 ED 33 02 -      ADDCYC(2)
 1694 D1:C09C 7E -  -  -      ld  a,(hl)
 1695 D1:C09D DD AE 00 -      xor a,(ix+REGA)
 1696 D1:C0A0 DD 77 00 -      ld  (ix+REGA),A
 1697 D1:C0A3 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1698 D1:C0B7 C3 6D B4 D1     jp i6502NextLoad
 1699 D1:C0BB -  -  -  -  
 1700 D1:C0BB -  -  -  -  ;zeropage	EOR oper	45	2	3  
 1701 D1:C0BB -  -  -  -  inst6502_eor_zp:
 1702 D1:C0BB ED 33 03 -      ADDCYC(3)
 1703 D1:C0BE 7E -  -  -      ld  a,(hl)
 1704 D1:C0BF 01 00 38 D0     ld  bc,ZEROPAGE
 1705 D1:C0C3 81 -  -  -      add a,c
 1706 D1:C0C4 4F -  -  -      ld  c,a
 1707 D1:C0C5 0A -  -  -      ld  a,(bc)
 1708 D1:C0C6 DD AE 00 -      xor a,(ix+REGA)
 1709 D1:C0C9 DD 77 00 -      ld  (ix+REGA),A
 1710 D1:C0CC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1711 D1:C0E0 C3 6D B4 D1     jp i6502NextLoad
 1712 D1:C0E4 -  -  -  -  
 1713 D1:C0E4 -  -  -  -  
 1714 D1:C0E4 -  -  -  -  ;zeropage,X	EOR oper,X	55	2	4  
 1715 D1:C0E4 -  -  -  -  inst6502_eor_zpx:
 1716 D1:C0E4 ED 33 04 -      ADDCYC(4)
 1717 D1:C0E7 7E -  -  -      ld  a,(hl)
 1718 D1:C0E8 01 00 38 D0     ld  bc,ZEROPAGE
 1719 D1:C0EC 81 -  -  -      add a,c
 1720 D1:C0ED DD 86 01 -      add a,(ix+REGX)
 1721 D1:C0F0 4F -  -  -      ld  c,a
 1722 D1:C0F1 0A -  -  -      ld  a,(bc)
 1723 D1:C0F2 DD AE 00 -      xor a,(ix+REGA)
 1724 D1:C0F5 DD 77 00 -      ld  (ix+REGA),A
 1725 D1:C0F8 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1726 D1:C10C C3 6D B4 D1     jp i6502NextLoad
 1727 D1:C110 -  -  -  -  
 1728 D1:C110 -  -  -  -  ;absolute	EOR oper	4D	3	4  
 1729 D1:C110 -  -  -  -  inst6502_eor_abs:
 1730 D1:C110 ED 33 04 -      ADDCYC(4)
 1731 D1:C113 CD F8 B4 D1     call subroutine6502_abs_split_start
 1732 D1:C117 E5 -  -  -      push hl
 1733 D1:C118 50 -  -  -          ld  d,b
 1734 D1:C119 79 -  -  -          ld  a,c
 1735 D1:C11A 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1736 D1:C11C ED 4C -  -          mlt bc
 1737 D1:C11E 21 00 40 D0         ld  hl,PAGETABLE
 1738 D1:C122 09 -  -  -          add hl,bc
 1739 D1:C123 ED 27 -  -          ld  hl,(hl)
 1740 D1:C125 06 00 -  -          ld  b,0
 1741 D1:C127 4F -  -  -          ld  c,a
 1742 D1:C128 09 -  -  -          add hl,bc   ;full address
 1743 D1:C129 CD E9 AD D1         READ_ACCESS
 1744 D1:C12D E1 -  -  -      pop hl
 1745 D1:C12E DD AE 00 -      xor a,(ix+REGA)
 1746 D1:C131 DD 77 00 -      ld  (ix+REGA),A
 1747 D1:C134 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1748 D1:C148 C3 6D B4 D1     jp i6502NextLoad
 1749 D1:C14C -  -  -  -  
 1750 D1:C14C -  -  -  -  ;absolute,X	EOR oper,X	5D	3	4* 
 1751 D1:C14C -  -  -  -  inst6502_eor_absx:
 1752 D1:C14C ED 33 04 -      ADDCYC(4)
 1753 D1:C14F CD 19 B5 D1     PUSH_ABSXSPLIT
 1754 D1:C153 CD E9 AD D1         READ_ACCESS
 1755 D1:C157 DD AE 00 -          xor a,(ix+REGA)
 1756 D1:C15A DD 77 00 -          ld  (ix+REGA),A
 1757 D1:C15D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1758 D1:C171 E1 -  -  -      pop hl
 1759 D1:C172 C3 6D B4 D1     jp i6502NextLoad
 1760 D1:C176 -  -  -  -  
 1761 D1:C176 -  -  -  -  ;absolute,Y	EOR oper,Y	59	3	4* 
 1762 D1:C176 -  -  -  -  inst6502_eor_absy:
 1763 D1:C176 ED 33 04 -      ADDCYC(4)
 1764 D1:C179 CD 14 B5 D1     PUSH_ABSYSPLIT
 1765 D1:C17D CD E9 AD D1         READ_ACCESS
 1766 D1:C181 E1 -  -  -      pop hl
 1767 D1:C182 DD AE 00 -      xor a,(ix+REGA)
 1768 D1:C185 DD 77 00 -      ld  (ix+REGA),A
 1769 D1:C188 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1770 D1:C19C C3 6D B4 D1     jp i6502NextLoad
 1771 D1:C1A0 -  -  -  -  
 1772 D1:C1A0 -  -  -  -  ;(indirect,X)	EOR (oper,X)	41	2	6  
 1773 D1:C1A0 -  -  -  -  inst6502_eor_indx:
 1774 D1:C1A0 ED 33 06 -      ADDCYC(6)
 1775 D1:C1A3 E5 -  -  -      push hl
 1776 D1:C1A4 7E -  -  -          ld  a,(hl)
 1777 D1:C1A5 21 00 38 D0         ld  hl,ZEROPAGE
 1778 D1:C1A9 85 -  -  -          add a,L
 1779 D1:C1AA DD 86 01 -          add a,(ix+REGX)
 1780 D1:C1AD 6F -  -  -          ld  L,a
 1781 D1:C1AE 7E -  -  -          ld  a,(hl)
 1782 D1:C1AF 2C -  -  -          inc L
 1783 D1:C1B0 56 -  -  -          ld  d,(hl)
 1784 D1:C1B1 42 -  -  -          ld  b,d
 1785 D1:C1B2 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1786 D1:C1B4 ED 4C -  -          mlt bc
 1787 D1:C1B6 21 00 40 D0         ld  hl,PAGETABLE
 1788 D1:C1BA 09 -  -  -          add hl,bc
 1789 D1:C1BB ED 27 -  -          ld  hl,(hl)
 1790 D1:C1BD 06 00 -  -          ld  b,0
 1791 D1:C1BF 4F -  -  -          ld  c,a
 1792 D1:C1C0 09 -  -  -          add hl,bc
 1793 D1:C1C1 CD E9 AD D1         READ_ACCESS
 1794 D1:C1C5 E1 -  -  -      pop hl
 1795 D1:C1C6 DD AE 00 -      xor a,(ix+REGA)
 1796 D1:C1C9 DD 77 00 -      ld  (ix+REGA),A
 1797 D1:C1CC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1798 D1:C1E0 C3 6D B4 D1     jp i6502NextLoad
 1799 D1:C1E4 -  -  -  -  
 1800 D1:C1E4 -  -  -  -  ;(indirect),Y	EOR (oper),Y	51	2	5* 
 1801 D1:C1E4 -  -  -  -  inst6502_eor_indy:
 1802 D1:C1E4 ED 33 05 -      ADDCYC(5)
 1803 D1:C1E7 E5 -  -  -      push hl
 1804 D1:C1E8 7E -  -  -          ld  a,(hl)
 1805 D1:C1E9 21 00 38 D0         ld  hl,ZEROPAGE
 1806 D1:C1ED 85 -  -  -          add a,L
 1807 D1:C1EE 6F -  -  -          ld  L,a
 1808 D1:C1EF 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1809 D1:C1F0 2C -  -  -          inc L
 1810 D1:C1F1 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1811 D1:C1F4 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1812 D1:C1F5 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1813 D1:C1F7 24 -  -  -          inc h
 1814 D1:C1F8 FD 23 -  -          ADDCYC(1)
 1815 D1:C1FA 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1816 D1:C1FB 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1817 D1:C1FD ED 6C -  -          mlt hl          ;23.
 1818 D1:C1FF 01 00 40 D0         ld  bc,PAGETABLE
 1819 D1:C203 09 -  -  -          add hl,bc
 1820 D1:C204 ED 27 -  -          ld  hl,(hl)     ;address get.
 1821 D1:C206 01 00 00 00         ld  bc,0
 1822 D1:C20A 4F -  -  -          ld  c,a
 1823 D1:C20B 09 -  -  -          add hl,bc       ;Full address get.
 1824 D1:C20C CD E9 AD D1         READ_ACCESS
 1825 D1:C210 E1 -  -  -      pop hl
 1826 D1:C211 DD AE 00 -      xor a,(ix+REGA)
 1827 D1:C214 DD 77 00 -      ld  (ix+REGA),A
 1828 D1:C217 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1829 D1:C22B C3 6D B4 D1     jp i6502NextLoad
 1830 D1:C22F -  -  -  -  
 1831 D1:C22F -  -  -  -  ;-----------------------------------------------------------------------------
 1832 D1:C22F -  -  -  -  ;ORA - OR Memory with Accumulator
 1833 D1:C22F -  -  -  -  ;A OR M -> A
 1834 D1:C22F -  -  -  -  ;N	Z	C	I	D	V
 1835 D1:C22F -  -  -  -  ;+	+	-	-	-	-
 1836 D1:C22F -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1837 D1:C22F -  -  -  -  
 1838 D1:C22F -  -  -  -  ;immediate	ORA #oper	09	2	2  
 1839 D1:C22F -  -  -  -  inst6502_ora_imm:
 1840 D1:C22F ED 33 02 -      ADDCYC(2)
 1841 D1:C232 7E -  -  -      ld  a,(hl)
 1842 D1:C233 DD B6 00 -      or  a,(ix+REGA)
 1843 D1:C236 DD 77 00 -      ld  (ix+REGA),A
 1844 D1:C239 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1845 D1:C24D C3 6D B4 D1     jp i6502NextLoad
 1846 D1:C251 -  -  -  -  
 1847 D1:C251 -  -  -  -  ;zeropage	ORA oper	05	2	3  
 1848 D1:C251 -  -  -  -  inst6502_ora_zp:
 1849 D1:C251 ED 33 03 -      ADDCYC(3)
 1850 D1:C254 7E -  -  -      ld  a,(hl)
 1851 D1:C255 01 00 38 D0     ld  bc,ZEROPAGE
 1852 D1:C259 81 -  -  -      add a,c
 1853 D1:C25A 4F -  -  -      ld  c,a
 1854 D1:C25B 0A -  -  -      ld  a,(bc)
 1855 D1:C25C DD B6 00 -      or  a,(ix+REGA)
 1856 D1:C25F DD 77 00 -      ld  (ix+REGA),A
 1857 D1:C262 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1858 D1:C276 C3 6D B4 D1     jp i6502NextLoad
 1859 D1:C27A -  -  -  -  
 1860 D1:C27A -  -  -  -  ;zeropage,X	ORA oper,X	15	2	4  
 1861 D1:C27A -  -  -  -  inst6502_ora_zpx:
 1862 D1:C27A ED 33 04 -      ADDCYC(4)
 1863 D1:C27D 7E -  -  -      ld  a,(hl)
 1864 D1:C27E 01 00 38 D0     ld  bc,ZEROPAGE
 1865 D1:C282 81 -  -  -      add a,c
 1866 D1:C283 DD 86 01 -      add a,(ix+REGX)
 1867 D1:C286 4F -  -  -      ld  c,a
 1868 D1:C287 0A -  -  -      ld  a,(bc)
 1869 D1:C288 DD B6 00 -      or  a,(ix+REGA)
 1870 D1:C28B DD 77 00 -      ld  (ix+REGA),A
 1871 D1:C28E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1872 D1:C2A2 C3 6D B4 D1     jp i6502NextLoad
 1873 D1:C2A6 -  -  -  -  
 1874 D1:C2A6 -  -  -  -  ;absolute	ORA oper	0D	3	4  
 1875 D1:C2A6 -  -  -  -  inst6502_ora_abs:
 1876 D1:C2A6 ED 33 04 -      ADDCYC(4)
 1877 D1:C2A9 CD F8 B4 D1     call subroutine6502_abs_split_start
 1878 D1:C2AD E5 -  -  -      push hl
 1879 D1:C2AE 50 -  -  -          ld  d,b
 1880 D1:C2AF 79 -  -  -          ld  a,c
 1881 D1:C2B0 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1882 D1:C2B2 ED 4C -  -          mlt bc
 1883 D1:C2B4 21 00 40 D0         ld  hl,PAGETABLE
 1884 D1:C2B8 09 -  -  -          add hl,bc
 1885 D1:C2B9 ED 27 -  -          ld  hl,(hl)
 1886 D1:C2BB 06 00 -  -          ld  b,0
 1887 D1:C2BD 4F -  -  -          ld  c,a
 1888 D1:C2BE 09 -  -  -          add hl,bc   ;full address
 1889 D1:C2BF CD E9 AD D1         READ_ACCESS
 1890 D1:C2C3 E1 -  -  -      pop hl
 1891 D1:C2C4 DD B6 00 -      or  a,(ix+REGA)
 1892 D1:C2C7 DD 77 00 -      ld  (ix+REGA),A
 1893 D1:C2CA DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1894 D1:C2DE C3 6D B4 D1     jp i6502NextLoad
 1895 D1:C2E2 -  -  -  -  
 1896 D1:C2E2 -  -  -  -  ;absolute,X	ORA oper,X	1D	3	4* 
 1897 D1:C2E2 -  -  -  -  inst6502_ora_absx:
 1898 D1:C2E2 ED 33 04 -      ADDCYC(4)
 1899 D1:C2E5 CD 19 B5 D1     PUSH_ABSXSPLIT
 1900 D1:C2E9 CD E9 AD D1         READ_ACCESS
 1901 D1:C2ED DD B6 00 -          or  a,(ix+REGA)
 1902 D1:C2F0 DD 77 00 -          ld  (ix+REGA),A
 1903 D1:C2F3 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1904 D1:C307 E1 -  -  -      pop hl
 1905 D1:C308 C3 6D B4 D1     jp i6502NextLoad
 1906 D1:C30C -  -  -  -  
 1907 D1:C30C -  -  -  -  ;absolute,Y	ORA oper,Y	19	3	4* 
 1908 D1:C30C -  -  -  -  inst6502_ora_absy:
 1909 D1:C30C ED 33 04 -      ADDCYC(4)
 1910 D1:C30F CD 14 B5 D1     PUSH_ABSYSPLIT
 1911 D1:C313 CD E9 AD D1         READ_ACCESS
 1912 D1:C317 E1 -  -  -      pop hl
 1913 D1:C318 DD B6 00 -      or  a,(ix+REGA)
 1914 D1:C31B DD 77 00 -      ld  (ix+REGA),A
 1915 D1:C31E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1916 D1:C332 C3 6D B4 D1     jp i6502NextLoad
 1917 D1:C336 -  -  -  -  
 1918 D1:C336 -  -  -  -  ;(indirect,X)	ORA (oper,X)	01	2	6  
 1919 D1:C336 -  -  -  -  inst6502_ora_indx:
 1920 D1:C336 ED 33 06 -      ADDCYC(6)
 1921 D1:C339 E5 -  -  -      push hl
 1922 D1:C33A 7E -  -  -          ld  a,(hl)
 1923 D1:C33B 21 00 38 D0         ld  hl,ZEROPAGE
 1924 D1:C33F 85 -  -  -          add a,L
 1925 D1:C340 DD 86 01 -          add a,(ix+REGX)
 1926 D1:C343 6F -  -  -          ld  L,a
 1927 D1:C344 7E -  -  -          ld  a,(hl)
 1928 D1:C345 2C -  -  -          inc L
 1929 D1:C346 56 -  -  -          ld  d,(hl)
 1930 D1:C347 42 -  -  -          ld  b,d
 1931 D1:C348 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1932 D1:C34A ED 4C -  -          mlt bc
 1933 D1:C34C 21 00 40 D0         ld  hl,PAGETABLE
 1934 D1:C350 09 -  -  -          add hl,bc
 1935 D1:C351 ED 27 -  -          ld  hl,(hl)
 1936 D1:C353 06 00 -  -          ld  b,0
 1937 D1:C355 4F -  -  -          ld  c,a
 1938 D1:C356 09 -  -  -          add hl,bc
 1939 D1:C357 CD E9 AD D1         READ_ACCESS
 1940 D1:C35B E1 -  -  -      pop hl
 1941 D1:C35C DD B6 00 -      or  a,(ix+REGA)
 1942 D1:C35F DD 77 00 -      ld  (ix+REGA),A
 1943 D1:C362 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1944 D1:C376 C3 6D B4 D1     jp i6502NextLoad
 1945 D1:C37A -  -  -  -  
 1946 D1:C37A -  -  -  -  ;(indirect),Y	ORA (oper),Y	11	2	5* 
 1947 D1:C37A -  -  -  -  inst6502_ora_indy:
 1948 D1:C37A ED 33 05 -      ADDCYC(5)
 1949 D1:C37D E5 -  -  -      push hl
 1950 D1:C37E 7E -  -  -          ld  a,(hl)
 1951 D1:C37F 21 00 38 D0         ld  hl,ZEROPAGE
 1952 D1:C383 85 -  -  -          add a,L
 1953 D1:C384 6F -  -  -          ld  L,a
 1954 D1:C385 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1955 D1:C386 2C -  -  -          inc L
 1956 D1:C387 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1957 D1:C38A 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1958 D1:C38B 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1959 D1:C38D 24 -  -  -          inc h
 1960 D1:C38E FD 23 -  -          ADDCYC(1)
 1961 D1:C390 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1962 D1:C391 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1963 D1:C393 ED 6C -  -          mlt hl          ;23.
 1964 D1:C395 01 00 40 D0         ld  bc,PAGETABLE
 1965 D1:C399 09 -  -  -          add hl,bc
 1966 D1:C39A ED 27 -  -          ld  hl,(hl)     ;address get.
 1967 D1:C39C 01 00 00 00         ld  bc,0
 1968 D1:C3A0 4F -  -  -          ld  c,a
 1969 D1:C3A1 09 -  -  -          add hl,bc       ;Full address get.
 1970 D1:C3A2 CD E9 AD D1         READ_ACCESS
 1971 D1:C3A6 E1 -  -  -      pop hl
 1972 D1:C3A7 DD B6 00 -      or  a,(ix+REGA)
 1973 D1:C3AA DD 77 00 -      ld  (ix+REGA),A
 1974 D1:C3AD DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1975 D1:C3C1 C3 6D B4 D1     jp i6502NextLoad
 1976 D1:C3C5 -  -  -  -  
 1977 D1:C3C5 -  -  -  -  ;-----------------------------------------------------------------------------
 1978 D1:C3C5 -  -  -  -  ;-----------------------------------------------------------------------------
 1979 D1:C3C5 -  -  -  -  ;-----------------------------------------------------------------------------
 1980 D1:C3C5 -  -  -  -  ;Instructions by type: Shift & Rotate Instructions
 1981 D1:C3C5 -  -  -  -  ;ASL - Shift Left One Bit (Memory or Accumulator)
 1982 D1:C3C5 -  -  -  -  ;C <- [76543210] <- 0
 1983 D1:C3C5 -  -  -  -  ;N	Z	C	I	D	V
 1984 D1:C3C5 -  -  -  -  ;+	+	+	-	-	-
 1985 D1:C3C5 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1986 D1:C3C5 -  -  -  -  
 1987 D1:C3C5 -  -  -  -  ;accumulator	ASL A	0A	1	2  
 1988 D1:C3C5 -  -  -  -  inst6502_asl:
 1989 D1:C3C5 ED 33 02 -      ADDCYC(2)
 1990 D1:C3C8 DD 7E 00 -      ld  a,(ix+REGA)
 1991 D1:C3CB CB 27 -  -      sla a
 1992 D1:C3CD DD 77 00 -      ld  (ix+REGA),a
 1993 D1:C3D0 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1994 D1:C3EA C3 86 B4 D1     jp i6502FinishLoad
 1995 D1:C3EE -  -  -  -  
 1996 D1:C3EE -  -  -  -  ;zeropage	ASL oper	06	2	5  
 1997 D1:C3EE -  -  -  -  inst6502_asl_zp:
 1998 D1:C3EE ED 33 05 -      ADDCYC(5)
 1999 D1:C3F1 7E -  -  -      ld  a,(hl)
 2000 D1:C3F2 01 00 38 D0     ld  bc,ZEROPAGE
 2001 D1:C3F6 81 -  -  -      add a,c
 2002 D1:C3F7 4F -  -  -      ld  c,a
 2003 D1:C3F8 0A -  -  -      ld  a,(bc)
 2004 D1:C3F9 CB 27 -  -      sla a
 2005 D1:C3FB 02 -  -  -      ld  (bc),a
 2006 D1:C3FC DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2007 D1:C416 C3 6D B4 D1     jp i6502NextLoad
 2008 D1:C41A -  -  -  -  
 2009 D1:C41A -  -  -  -  ;zeropage,X	ASL oper,X	16	2	6  
 2010 D1:C41A -  -  -  -  inst6502_asl_zpx:
 2011 D1:C41A ED 33 06 -      ADDCYC(6)
 2012 D1:C41D 7E -  -  -      ld  a,(hl)
 2013 D1:C41E 01 00 38 D0     ld  bc,ZEROPAGE
 2014 D1:C422 81 -  -  -      add a,c
 2015 D1:C423 DD 86 01 -      add a,(ix+REGX)
 2016 D1:C426 4F -  -  -      ld  c,a
 2017 D1:C427 0A -  -  -      ld  a,(bc)
 2018 D1:C428 CB 27 -  -      sla a
 2019 D1:C42A 02 -  -  -      ld  (bc),a
 2020 D1:C42B DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2021 D1:C445 C3 6D B4 D1     jp i6502NextLoad
 2022 D1:C449 -  -  -  -  
 2023 D1:C449 -  -  -  -  ;absolute	ASL oper	0E	3	6  
 2024 D1:C449 -  -  -  -  inst6502_asl_abs:
 2025 D1:C449 ED 33 06 -      ADDCYC(6)
 2026 D1:C44C CD F8 B4 D1     call subroutine6502_abs_split_start
 2027 D1:C450 E5 -  -  -      push hl
 2028 D1:C451 50 -  -  -          ld  d,b
 2029 D1:C452 79 -  -  -          ld  a,c
 2030 D1:C453 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2031 D1:C455 ED 4C -  -          mlt bc
 2032 D1:C457 21 00 40 D0         ld  hl,PAGETABLE
 2033 D1:C45B 09 -  -  -          add hl,bc
 2034 D1:C45C ED 27 -  -          ld  hl,(hl)
 2035 D1:C45E 06 00 -  -          ld  b,0
 2036 D1:C460 4F -  -  -          ld  c,a
 2037 D1:C461 09 -  -  -          add hl,bc   ;full address
 2038 D1:C462 CD E9 AD D1         READ_ACCESS
 2039 D1:C466 CB 27 -  -          sla a
 2040 D1:C468 4F -  -  -          ld  c,a
 2041 D1:C469 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2042 D1:C483 41 -  -  -          ld  b,c
 2043 D1:C484 CD 0C AE D1         WRITE_ACCESS
 2044 D1:C488 E1 -  -  -      pop hl
 2045 D1:C489 C3 6D B4 D1     jp i6502NextLoad
 2046 D1:C48D -  -  -  -  
 2047 D1:C48D -  -  -  -  ;absolute,X	ASL oper,X	1E	3	7  
 2048 D1:C48D -  -  -  -  inst6502_asl_absx:
 2049 D1:C48D ED 33 07 -      ADDCYC(7)
 2050 D1:C490 CD 55 B5 D1     PUSH_ABSXSPLIT_NODEP
 2051 D1:C494 CD E9 AD D1         READ_ACCESS
 2052 D1:C498 CB 27 -  -          sla a
 2053 D1:C49A 4F -  -  -          ld  c,a
 2054 D1:C49B DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2055 D1:C4B5 41 -  -  -          ld  b,c
 2056 D1:C4B6 CD 0C AE D1         WRITE_ACCESS
 2057 D1:C4BA E1 -  -  -      pop hl
 2058 D1:C4BB C3 6D B4 D1     jp i6502NextLoad
 2059 D1:C4BF -  -  -  -  
 2060 D1:C4BF -  -  -  -  ;-----------------------------------------------------------------------------
 2061 D1:C4BF -  -  -  -  ;LSR - Shift One Bit Right (Memory or Accumulator)
 2062 D1:C4BF -  -  -  -  ;0 -> [76543210] -> C
 2063 D1:C4BF -  -  -  -  ;N	Z	C	I	D	V
 2064 D1:C4BF -  -  -  -  ;0	+	+	-	-	-
 2065 D1:C4BF -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2066 D1:C4BF -  -  -  -  
 2067 D1:C4BF -  -  -  -  ;accumulator	LSR A	4A	1	2  
 2068 D1:C4BF -  -  -  -  inst6502_lsr:
 2069 D1:C4BF ED 33 02 -      ADDCYC(2)
 2070 D1:C4C2 DD 7E 00 -      ld  a,(ix+REGA)
 2071 D1:C4C5 CB 3F -  -      srl a
 2072 D1:C4C7 DD 77 00 -      ld  (ix+REGA),a
 2073 D1:C4CA DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2074 D1:C4E4 C3 86 B4 D1     jp i6502FinishLoad
 2075 D1:C4E8 -  -  -  -  
 2076 D1:C4E8 -  -  -  -  ;zeropage	LSR oper	46	2	5  
 2077 D1:C4E8 -  -  -  -  inst6502_lsr_zp:
 2078 D1:C4E8 ED 33 05 -      ADDCYC(5)
 2079 D1:C4EB 7E -  -  -      ld  a,(hl)
 2080 D1:C4EC 01 00 38 D0     ld  bc,ZEROPAGE
 2081 D1:C4F0 81 -  -  -      add a,c
 2082 D1:C4F1 4F -  -  -      ld  c,a
 2083 D1:C4F2 0A -  -  -      ld  a,(bc)
 2084 D1:C4F3 CB 3F -  -      srl a
 2085 D1:C4F5 02 -  -  -      ld  (bc),a
 2086 D1:C4F6 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2087 D1:C510 C3 6D B4 D1     jp i6502NextLoad
 2088 D1:C514 -  -  -  -  
 2089 D1:C514 -  -  -  -  ;zeropage,X	LSR oper,X	56	2	6  
 2090 D1:C514 -  -  -  -  inst6502_lsr_zpx:
 2091 D1:C514 ED 33 06 -      ADDCYC(6)
 2092 D1:C517 7E -  -  -      ld  a,(hl)
 2093 D1:C518 01 00 38 D0     ld  bc,ZEROPAGE
 2094 D1:C51C 81 -  -  -      add a,c
 2095 D1:C51D DD 86 01 -      add a,(ix+REGX)
 2096 D1:C520 4F -  -  -      ld  c,a
 2097 D1:C521 0A -  -  -      ld  a,(bc)
 2098 D1:C522 CB 3F -  -      srl a
 2099 D1:C524 02 -  -  -      ld  (bc),a
 2100 D1:C525 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2101 D1:C53F C3 6D B4 D1     jp i6502NextLoad
 2102 D1:C543 -  -  -  -      
 2103 D1:C543 -  -  -  -  ;absolute	LSR oper	4E	3	6  
 2104 D1:C543 -  -  -  -  inst6502_lsr_abs:
 2105 D1:C543 ED 33 06 -      ADDCYC(6)
 2106 D1:C546 CD F8 B4 D1     call subroutine6502_abs_split_start
 2107 D1:C54A E5 -  -  -      push hl
 2108 D1:C54B 50 -  -  -          ld  d,b
 2109 D1:C54C 79 -  -  -          ld  a,c
 2110 D1:C54D 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2111 D1:C54F ED 4C -  -          mlt bc
 2112 D1:C551 21 00 40 D0         ld  hl,PAGETABLE
 2113 D1:C555 09 -  -  -          add hl,bc
 2114 D1:C556 ED 27 -  -          ld  hl,(hl)
 2115 D1:C558 06 00 -  -          ld  b,0
 2116 D1:C55A 4F -  -  -          ld  c,a
 2117 D1:C55B 09 -  -  -          add hl,bc   ;full address
 2118 D1:C55C CD E9 AD D1         READ_ACCESS
 2119 D1:C560 CB 3F -  -          srl a
 2120 D1:C562 4F -  -  -          ld  c,a
 2121 D1:C563 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2122 D1:C57D 41 -  -  -          ld  b,c
 2123 D1:C57E CD 0C AE D1         WRITE_ACCESS
 2124 D1:C582 E1 -  -  -      pop hl
 2125 D1:C583 C3 6D B4 D1     jp i6502NextLoad
 2126 D1:C587 -  -  -  -  
 2127 D1:C587 -  -  -  -  ;absolute,X	LSR oper,X	5E	3	7  
 2128 D1:C587 -  -  -  -  inst6502_lsr_absx:
 2129 D1:C587 ED 33 07 -      ADDCYC(7)
 2130 D1:C58A CD 55 B5 D1     PUSH_ABSXSPLIT_NODEP
 2131 D1:C58E CD E9 AD D1         READ_ACCESS
 2132 D1:C592 CB 3F -  -          srl a
 2133 D1:C594 4F -  -  -          ld  c,a
 2134 D1:C595 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2135 D1:C5AF 41 -  -  -          ld  b,c
 2136 D1:C5B0 CD 0C AE D1         WRITE_ACCESS
 2137 D1:C5B4 E1 -  -  -      pop hl
 2138 D1:C5B5 C3 6D B4 D1     jp i6502NextLoad
 2139 D1:C5B9 -  -  -  -  
 2140 D1:C5B9 -  -  -  -  ;-----------------------------------------------------------------------------
 2141 D1:C5B9 -  -  -  -  ;ROL - Rotate One Bit Left (Memory or Accumulator)
 2142 D1:C5B9 -  -  -  -  ;C <- [76543210] <- C
 2143 D1:C5B9 -  -  -  -  ;N	Z	C	I	D	V
 2144 D1:C5B9 -  -  -  -  ;+	+	+	-	-	-
 2145 D1:C5B9 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2146 D1:C5B9 -  -  -  -  
 2147 D1:C5B9 -  -  -  -  ;accumulator	ROL A	2A	1	2  
 2148 D1:C5B9 -  -  -  -  inst6502_rol:
 2149 D1:C5B9 ED 33 02 -      ADDCYC(2)
 2150 D1:C5BC DD 7E 04 -      ld  a,(ix+REGSR)
 2151 D1:C5BF 1F -  -  -      rra
 2152 D1:C5C0 DD CB 00 16     rl  (ix+REGA)
 2153 D1:C5C4 DD 7E 00 -      ld  a,(ix+REGA)
 2154 D1:C5C7 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2155 D1:C5E1 C3 86 B4 D1     jp i6502FinishLoad
 2156 D1:C5E5 -  -  -  -  
 2157 D1:C5E5 -  -  -  -  ;zeropage	ROL oper	26	2	5  
 2158 D1:C5E5 -  -  -  -  inst6502_rol_zp:
 2159 D1:C5E5 ED 33 05 -      ADDCYC(5)
 2160 D1:C5E8 7E -  -  -      ld  a,(hl)
 2161 D1:C5E9 01 00 38 D0     ld  bc,ZEROPAGE
 2162 D1:C5ED 81 -  -  -      add a,c
 2163 D1:C5EE 4F -  -  -      ld  c,a
 2164 D1:C5EF DD 7E 04 -      ld  a,(ix+REGSR)
 2165 D1:C5F2 1F -  -  -      rra
 2166 D1:C5F3 0A -  -  -      ld  a,(bc)
 2167 D1:C5F4 17 -  -  -      rla
 2168 D1:C5F5 02 -  -  -      ld  (bc),a
 2169 D1:C5F6 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2170 D1:C610 C3 6D B4 D1     jp i6502NextLoad
 2171 D1:C614 -  -  -  -  
 2172 D1:C614 -  -  -  -  ;zeropage,X	ROL oper,X	36	2	6  
 2173 D1:C614 -  -  -  -  inst6502_rol_zpx:
 2174 D1:C614 ED 33 06 -      ADDCYC(6)
 2175 D1:C617 7E -  -  -      ld  a,(hl)
 2176 D1:C618 01 00 38 D0     ld  bc,ZEROPAGE
 2177 D1:C61C 81 -  -  -      add a,c
 2178 D1:C61D DD 86 01 -      add a,(ix+REGX)
 2179 D1:C620 4F -  -  -      ld  c,a
 2180 D1:C621 DD 7E 04 -      ld  a,(ix+REGSR)
 2181 D1:C624 1F -  -  -      rra
 2182 D1:C625 0A -  -  -      ld  a,(bc)
 2183 D1:C626 17 -  -  -      rla
 2184 D1:C627 02 -  -  -      ld  (bc),a
 2185 D1:C628 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2186 D1:C642 C3 6D B4 D1     jp i6502NextLoad
 2187 D1:C646 -  -  -  -  
 2188 D1:C646 -  -  -  -  ;absolute	ROL oper	2E	3	6  
 2189 D1:C646 -  -  -  -  inst6502_rol_abs:
 2190 D1:C646 ED 33 06 -      ADDCYC(6)
 2191 D1:C649 CD F8 B4 D1     call subroutine6502_abs_split_start
 2192 D1:C64D E5 -  -  -      push hl
 2193 D1:C64E 50 -  -  -          ld  d,b
 2194 D1:C64F 79 -  -  -          ld  a,c
 2195 D1:C650 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2196 D1:C652 ED 4C -  -          mlt bc
 2197 D1:C654 21 00 40 D0         ld  hl,PAGETABLE
 2198 D1:C658 09 -  -  -          add hl,bc
 2199 D1:C659 ED 27 -  -          ld  hl,(hl)
 2200 D1:C65B 06 00 -  -          ld  b,0
 2201 D1:C65D 4F -  -  -          ld  c,a
 2202 D1:C65E 09 -  -  -          add hl,bc   ;full address
 2203 D1:C65F CD E9 AD D1         READ_ACCESS
 2204 D1:C663 DD 46 04 -          ld  b,(ix+REGSR)
 2205 D1:C666 CB 18 -  -          rr b
 2206 D1:C668 17 -  -  -          rla
 2207 D1:C669 4F -  -  -          ld  c,a
 2208 D1:C66A DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2209 D1:C684 41 -  -  -          ld  b,c
 2210 D1:C685 CD 0C AE D1         WRITE_ACCESS
 2211 D1:C689 E1 -  -  -      pop hl
 2212 D1:C68A C3 6D B4 D1     jp i6502NextLoad
 2213 D1:C68E -  -  -  -  
 2214 D1:C68E -  -  -  -  ;absolute,X	ROL oper,X	3E	3	7  
 2215 D1:C68E -  -  -  -  inst6502_rol_absx:
 2216 D1:C68E ED 33 07 -      ADDCYC(7)
 2217 D1:C691 CD 55 B5 D1     PUSH_ABSXSPLIT_NODEP
 2218 D1:C695 CD E9 AD D1         READ_ACCESS
 2219 D1:C699 DD 46 04 -          ld  b,(ix+REGSR)
 2220 D1:C69C CB 18 -  -          rr b
 2221 D1:C69E 17 -  -  -          rla
 2222 D1:C69F 4F -  -  -          ld  c,a
 2223 D1:C6A0 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2224 D1:C6BA 41 -  -  -          ld  b,c
 2225 D1:C6BB CD 0C AE D1         WRITE_ACCESS
 2226 D1:C6BF E1 -  -  -      pop hl
 2227 D1:C6C0 C3 6D B4 D1     jp i6502NextLoad
 2228 D1:C6C4 -  -  -  -  
 2229 D1:C6C4 -  -  -  -  ;-----------------------------------------------------------------------------
 2230 D1:C6C4 -  -  -  -  ;ROR - Rotate One Bit Right (Memory or Accumulator)
 2231 D1:C6C4 -  -  -  -  ;C -> [76543210] -> C
 2232 D1:C6C4 -  -  -  -  ;N	Z	C	I	D	V
 2233 D1:C6C4 -  -  -  -  ;+	+	+	-	-	-
 2234 D1:C6C4 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2235 D1:C6C4 -  -  -  -  
 2236 D1:C6C4 -  -  -  -  ;accumulator	ROR A	6A	1	2  
 2237 D1:C6C4 -  -  -  -  inst6502_ror:
 2238 D1:C6C4 ED 33 02 -      ADDCYC(2)
 2239 D1:C6C7 DD 7E 04 -      ld  a,(ix+REGSR)
 2240 D1:C6CA 1F -  -  -      rra
 2241 D1:C6CB DD CB 00 1E     rr  (ix+REGA)
 2242 D1:C6CF DD 7E 00 -      ld  a,(ix+REGA)
 2243 D1:C6D2 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2244 D1:C6EC C3 86 B4 D1     jp i6502FinishLoad
 2245 D1:C6F0 -  -  -  -  
 2246 D1:C6F0 -  -  -  -  ;zeropage	ROR oper	66	2	5  
 2247 D1:C6F0 -  -  -  -  inst6502_ror_zp:
 2248 D1:C6F0 ED 33 05 -      ADDCYC(5)
 2249 D1:C6F3 7E -  -  -      ld  a,(hl)
 2250 D1:C6F4 01 00 38 D0     ld  bc,ZEROPAGE
 2251 D1:C6F8 81 -  -  -      add a,c
 2252 D1:C6F9 4F -  -  -      ld  c,a
 2253 D1:C6FA DD 7E 04 -      ld  a,(ix+REGSR)
 2254 D1:C6FD 1F -  -  -      rra
 2255 D1:C6FE 0A -  -  -      ld  a,(bc)
 2256 D1:C6FF 1F -  -  -      rra
 2257 D1:C700 02 -  -  -      ld  (bc),a
 2258 D1:C701 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2259 D1:C71B C3 6D B4 D1     jp i6502NextLoad
 2260 D1:C71F -  -  -  -  
 2261 D1:C71F -  -  -  -  ;zeropage,X	ROR oper,X	76	2	6  
 2262 D1:C71F -  -  -  -  inst6502_ror_zpx:
 2263 D1:C71F ED 33 06 -      ADDCYC(6)
 2264 D1:C722 7E -  -  -      ld  a,(hl)
 2265 D1:C723 01 00 38 D0     ld  bc,ZEROPAGE
 2266 D1:C727 81 -  -  -      add a,c
 2267 D1:C728 DD 86 01 -      add a,(ix+REGX)
 2268 D1:C72B 4F -  -  -      ld  c,a
 2269 D1:C72C DD 7E 04 -      ld  a,(ix+REGSR)
 2270 D1:C72F 1F -  -  -      rra
 2271 D1:C730 0A -  -  -      ld  a,(bc)
 2272 D1:C731 1F -  -  -      rra
 2273 D1:C732 02 -  -  -      ld  (bc),a
 2274 D1:C733 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2275 D1:C74D C3 6D B4 D1     jp i6502NextLoad
 2276 D1:C751 -  -  -  -  
 2277 D1:C751 -  -  -  -  ;absolute	ROR oper	6E	3	6  
 2278 D1:C751 -  -  -  -  inst6502_ror_abs:
 2279 D1:C751 ED 33 06 -      ADDCYC(6)
 2280 D1:C754 CD F8 B4 D1     call subroutine6502_abs_split_start
 2281 D1:C758 E5 -  -  -      push hl
 2282 D1:C759 50 -  -  -          ld  d,b
 2283 D1:C75A 79 -  -  -          ld  a,c
 2284 D1:C75B 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2285 D1:C75D ED 4C -  -          mlt bc
 2286 D1:C75F 21 00 40 D0         ld  hl,PAGETABLE
 2287 D1:C763 09 -  -  -          add hl,bc
 2288 D1:C764 ED 27 -  -          ld  hl,(hl)
 2289 D1:C766 06 00 -  -          ld  b,0
 2290 D1:C768 4F -  -  -          ld  c,a
 2291 D1:C769 09 -  -  -          add hl,bc   ;full address
 2292 D1:C76A CD E9 AD D1         READ_ACCESS
 2293 D1:C76E DD 46 04 -          ld  b,(ix+REGSR)
 2294 D1:C771 CB 18 -  -          rr b
 2295 D1:C773 1F -  -  -          rra
 2296 D1:C774 4F -  -  -          ld  c,a
 2297 D1:C775 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2298 D1:C78F 41 -  -  -          ld  b,c
 2299 D1:C790 CD 0C AE D1         WRITE_ACCESS
 2300 D1:C794 E1 -  -  -      pop hl
 2301 D1:C795 C3 6D B4 D1     jp i6502NextLoad
 2302 D1:C799 -  -  -  -  
 2303 D1:C799 -  -  -  -  ;absolute,X	ROR oper,X	7E	3	7  
 2304 D1:C799 -  -  -  -  inst6502_ror_absx:
 2305 D1:C799 ED 33 07 -      ADDCYC(7)
 2306 D1:C79C CD 55 B5 D1     PUSH_ABSXSPLIT_NODEP
 2307 D1:C7A0 CD E9 AD D1         READ_ACCESS
 2308 D1:C7A4 DD 46 04 -          ld  b,(ix+REGSR)
 2309 D1:C7A7 CB 18 -  -          rr b
 2310 D1:C7A9 1F -  -  -          rra
 2311 D1:C7AA 4F -  -  -          ld  c,a
 2312 D1:C7AB DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2313 D1:C7C5 41 -  -  -          ld  b,c
 2314 D1:C7C6 CD 0C AE D1         WRITE_ACCESS
 2315 D1:C7CA E1 -  -  -      pop hl
 2316 D1:C7CB C3 6D B4 D1     jp i6502NextLoad
 2317 D1:C7CF -  -  -  -  
 2318 D1:C7CF -  -  -  -  ;-----------------------------------------------------------------------------
 2319 D1:C7CF -  -  -  -  ;-----------------------------------------------------------------------------
 2320 D1:C7CF -  -  -  -  ;-----------------------------------------------------------------------------
 2321 D1:C7CF -  -  -  -  ;Instructions by type: Flag Instructions
 2322 D1:C7CF -  -  -  -  
 2323 D1:C7CF -  -  -  -  ;CLC - Clear Carry Flag
 2324 D1:C7CF -  -  -  -  ;0 -> C
 2325 D1:C7CF -  -  -  -  ;N	Z	C	I	D	V
 2326 D1:C7CF -  -  -  -  ;-	-	0	-	-	-
 2327 D1:C7CF -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2328 D1:C7CF -  -  -  -  ;implied	CLC	18	1	2  
 2329 D1:C7CF -  -  -  -  inst6502_clc:
 2330 D1:C7CF ED 33 02 -      ADDCYC(2)
 2331 D1:C7D2 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 2332 D1:C7D6 C3 86 B4 D1     jp  i6502FinishLoad
 2333 D1:C7DA -  -  -  -  
 2334 D1:C7DA -  -  -  -  ;CLD - Clear Decimal Mode
 2335 D1:C7DA -  -  -  -  ;0 -> D
 2336 D1:C7DA -  -  -  -  ;N	Z	C	I	D	V
 2337 D1:C7DA -  -  -  -  ;-	-	-	-	0	-
 2338 D1:C7DA -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2339 D1:C7DA -  -  -  -  ;implied	CLD	D8	1	2  
 2340 D1:C7DA -  -  -  -  inst6502_cld:
 2341 D1:C7DA ED 33 02 -      ADDCYC(2)
 2342 D1:C7DD DD CB 04 9E     res SF_DEC,(ix+REGSR)
 2343 D1:C7E1 C3 86 B4 D1     jp  i6502FinishLoad
 2344 D1:C7E5 -  -  -  -  
 2345 D1:C7E5 -  -  -  -  ;CLI -  Clear Interrupt Disable Bit
 2346 D1:C7E5 -  -  -  -  ;0 -> I
 2347 D1:C7E5 -  -  -  -  ;N	Z	C	I	D	V
 2348 D1:C7E5 -  -  -  -  ;-	-	-	0	-	-
 2349 D1:C7E5 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2350 D1:C7E5 -  -  -  -  ;implied	CLI	58	1	2  
 2351 D1:C7E5 -  -  -  -  inst6502_cli:
 2352 D1:C7E5 ED 33 02 -      ADDCYC(2)
 2353 D1:C7E8 DD CB 04 96     res SF_INT,(ix+REGSR)
 2354 D1:C7EC C3 86 B4 D1     jp  i6502FinishLoad
 2355 D1:C7F0 -  -  -  -  
 2356 D1:C7F0 -  -  -  -  ;CLV - Clear Overflow Flag
 2357 D1:C7F0 -  -  -  -  ;0 -> V
 2358 D1:C7F0 -  -  -  -  ;N	Z	C	I	D	V
 2359 D1:C7F0 -  -  -  -  ;-	-	-	-	-	0
 2360 D1:C7F0 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2361 D1:C7F0 -  -  -  -  ;implied	CLV	B8	1	2  
 2362 D1:C7F0 -  -  -  -  inst6502_clv:
 2363 D1:C7F0 ED 33 02 -      ADDCYC(2)
 2364 D1:C7F3 DD CB 04 B6     res SF_OVER,(ix+REGSR)
 2365 D1:C7F7 C3 86 B4 D1     jp  i6502FinishLoad
 2366 D1:C7FB -  -  -  -  
 2367 D1:C7FB -  -  -  -  ;SEC - Set Carry Flag
 2368 D1:C7FB -  -  -  -  ;1 -> C
 2369 D1:C7FB -  -  -  -  ;N	Z	C	I	D	V
 2370 D1:C7FB -  -  -  -  ;-	-	1	-	-	-
 2371 D1:C7FB -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2372 D1:C7FB -  -  -  -  ;implied	SEC	38	1	2  
 2373 D1:C7FB -  -  -  -  inst6502_sec:
 2374 D1:C7FB ED 33 02 -      ADDCYC(2)
 2375 D1:C7FE DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 2376 D1:C802 C3 86 B4 D1     jp  i6502FinishLoad
 2377 D1:C806 -  -  -  -  
 2378 D1:C806 -  -  -  -  ;SED - Set Decimal Flag
 2379 D1:C806 -  -  -  -  ;1 -> D
 2380 D1:C806 -  -  -  -  ;N	Z	C	I	D	V
 2381 D1:C806 -  -  -  -  ;-	-	-	-	1	-
 2382 D1:C806 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2383 D1:C806 -  -  -  -  ;implied	SED	F8	1	2  
 2384 D1:C806 -  -  -  -  inst6502_sed:
 2385 D1:C806 ED 33 02 -      ADDCYC(2)
 2386 D1:C809 DD CB 04 DE     set SF_DEC,(ix+REGSR)
 2387 D1:C80D C3 86 B4 D1     jp  i6502FinishLoad
 2388 D1:C811 -  -  -  -  
 2389 D1:C811 -  -  -  -  ;SEI - Set Interrupt Disable Status
 2390 D1:C811 -  -  -  -  ;1 -> I
 2391 D1:C811 -  -  -  -  ;N	Z	C	I	D	V
 2392 D1:C811 -  -  -  -  ;-	-	-	1	-	-
 2393 D1:C811 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2394 D1:C811 -  -  -  -  ;implied	SEI	78	1	2  
 2395 D1:C811 -  -  -  -  inst6502_sei:
 2396 D1:C811 ED 33 02 -      ADDCYC(2)
 2397 D1:C814 DD CB 04 D6     set SF_INT,(ix+REGSR)
 2398 D1:C818 C3 86 B4 D1     jp  i6502FinishLoad
 2399 D1:C81C -  -  -  -  
 2400 D1:C81C -  -  -  -  ;-----------------------------------------------------------------------------
 2401 D1:C81C -  -  -  -  ;-----------------------------------------------------------------------------
 2402 D1:C81C -  -  -  -  ;-----------------------------------------------------------------------------
 2403 D1:C81C -  -  -  -  ;Instructions by type: Comparisons
 2404 D1:C81C -  -  -  -  
 2405 D1:C81C -  -  -  -  ;CMP - Compare Memory with Accumulator
 2406 D1:C81C -  -  -  -  ;A - M
 2407 D1:C81C -  -  -  -  ;N	Z	C	I	D	V
 2408 D1:C81C -  -  -  -  ;+	+	+	-	-	-
 2409 D1:C81C -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2410 D1:C81C -  -  -  -  
 2411 D1:C81C -  -  -  -  ;immediate	CMP #oper	C9	2	2  
 2412 D1:C81C -  -  -  -  inst6502_cmp_imm:
 2413 D1:C81C ED 33 02 -      ADDCYC(2)
 2414 D1:C81F 46 -  -  -      ld  b,(hl)
 2415 D1:C820 C3 EE B5 D1     jp  subroutine6502_cmp_combined_end
 2416 D1:C824 -  -  -  -  
 2417 D1:C824 -  -  -  -  ;zeropage	CMP oper	C5	2	3  
 2418 D1:C824 -  -  -  -  inst6502_cmp_zp:
 2419 D1:C824 ED 33 03 -      ADDCYC(3)
 2420 D1:C827 7E -  -  -      ld  a,(hl)
 2421 D1:C828 01 00 38 D0     ld  bc,ZEROPAGE
 2422 D1:C82C 81 -  -  -      add a,c
 2423 D1:C82D 4F -  -  -      ld  c,a
 2424 D1:C82E 0A -  -  -      ld  a,(bc)
 2425 D1:C82F 47 -  -  -      ld  b,a
 2426 D1:C830 C3 EE B5 D1     jp  subroutine6502_cmp_combined_end
 2427 D1:C834 -  -  -  -  
 2428 D1:C834 -  -  -  -  ;zeropage,X	CMP oper,X	D5	2	4  
 2429 D1:C834 -  -  -  -  inst6502_cmp_zpx:
 2430 D1:C834 ED 33 04 -      ADDCYC(4)
 2431 D1:C837 7E -  -  -      ld  a,(hl)
 2432 D1:C838 01 00 38 D0     ld  bc,ZEROPAGE
 2433 D1:C83C 81 -  -  -      add a,c
 2434 D1:C83D DD 86 01 -      add a,(ix+REGX)
 2435 D1:C840 4F -  -  -      ld  c,a
 2436 D1:C841 0A -  -  -      ld  a,(bc)
 2437 D1:C842 47 -  -  -      ld  b,a
 2438 D1:C843 C3 EE B5 D1     jp  subroutine6502_cmp_combined_end
 2439 D1:C847 -  -  -  -  
 2440 D1:C847 -  -  -  -  ;absolute	CMP oper	CD	3	4  
 2441 D1:C847 -  -  -  -  inst6502_cmp_abs:
 2442 D1:C847 ED 33 04 -      ADDCYC(4)
 2443 D1:C84A CD F8 B4 D1     call subroutine6502_abs_split_start
 2444 D1:C84E E5 -  -  -      push hl
 2445 D1:C84F 50 -  -  -          ld  d,b
 2446 D1:C850 79 -  -  -          ld  a,c
 2447 D1:C851 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2448 D1:C853 ED 4C -  -          mlt bc
 2449 D1:C855 21 00 40 D0         ld  hl,PAGETABLE
 2450 D1:C859 09 -  -  -          add hl,bc
 2451 D1:C85A ED 27 -  -          ld  hl,(hl)
 2452 D1:C85C 06 00 -  -          ld  b,0
 2453 D1:C85E 4F -  -  -          ld  c,a
 2454 D1:C85F 09 -  -  -          add hl,bc   ;full address
 2455 D1:C860 CD E9 AD D1         READ_ACCESS
 2456 D1:C864 E1 -  -  -      pop hl
 2457 D1:C865 47 -  -  -      ld  b,a
 2458 D1:C866 C3 EE B5 D1     jp  subroutine6502_cmp_combined_end
 2459 D1:C86A -  -  -  -  
 2460 D1:C86A -  -  -  -  ;absolute,X	CMP oper,X	DD	3	4* 
 2461 D1:C86A -  -  -  -  inst6502_cmp_absx:
 2462 D1:C86A ED 33 04 -      ADDCYC(4)
 2463 D1:C86D CD 19 B5 D1     PUSH_ABSXSPLIT
 2464 D1:C871 CD E9 AD D1         READ_ACCESS
 2465 D1:C875 E1 -  -  -      pop hl
 2466 D1:C876 47 -  -  -      ld  b,a
 2467 D1:C877 C3 EE B5 D1     jp  subroutine6502_cmp_combined_end
 2468 D1:C87B -  -  -  -  
 2469 D1:C87B -  -  -  -  ;absolute,Y	CMP oper,Y	D9	3	4* 
 2470 D1:C87B -  -  -  -  inst6502_cmp_absy:
 2471 D1:C87B ED 33 04 -      ADDCYC(4)
 2472 D1:C87E CD 14 B5 D1     PUSH_ABSYSPLIT
 2473 D1:C882 CD E9 AD D1         READ_ACCESS
 2474 D1:C886 E1 -  -  -      pop hl
 2475 D1:C887 47 -  -  -      ld  b,a
 2476 D1:C888 C3 EE B5 D1     jp  subroutine6502_cmp_combined_end
 2477 D1:C88C -  -  -  -  
 2478 D1:C88C -  -  -  -  ;(indirect,X)	CMP (oper,X)	C1	2	6  
 2479 D1:C88C -  -  -  -  inst6502_cmp_indx:
 2480 D1:C88C ED 33 06 -      ADDCYC(6)
 2481 D1:C88F E5 -  -  -      push hl
 2482 D1:C890 7E -  -  -          ld  a,(hl)
 2483 D1:C891 21 00 38 D0         ld  hl,ZEROPAGE
 2484 D1:C895 85 -  -  -          add a,L
 2485 D1:C896 DD 86 01 -          add a,(ix+REGX)
 2486 D1:C899 6F -  -  -          ld  L,a
 2487 D1:C89A 7E -  -  -          ld  a,(hl)
 2488 D1:C89B 2C -  -  -          inc L
 2489 D1:C89C 56 -  -  -          ld  d,(hl)
 2490 D1:C89D 42 -  -  -          ld  b,d
 2491 D1:C89E 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2492 D1:C8A0 ED 4C -  -          mlt bc
 2493 D1:C8A2 21 00 40 D0         ld  hl,PAGETABLE
 2494 D1:C8A6 09 -  -  -          add hl,bc
 2495 D1:C8A7 ED 27 -  -          ld  hl,(hl)
 2496 D1:C8A9 06 00 -  -          ld  b,0
 2497 D1:C8AB 4F -  -  -          ld  c,a
 2498 D1:C8AC 09 -  -  -          add hl,bc
 2499 D1:C8AD CD E9 AD D1         READ_ACCESS
 2500 D1:C8B1 E1 -  -  -      pop hl
 2501 D1:C8B2 47 -  -  -      ld  b,a
 2502 D1:C8B3 C3 EE B5 D1     jp  subroutine6502_cmp_combined_end
 2503 D1:C8B7 -  -  -  -  
 2504 D1:C8B7 -  -  -  -  ;(indirect),Y	CMP (oper),Y	D1	2	5* 
 2505 D1:C8B7 -  -  -  -  inst6502_cmp_indy:
 2506 D1:C8B7 ED 33 05 -      ADDCYC(5)
 2507 D1:C8BA E5 -  -  -      push hl
 2508 D1:C8BB 7E -  -  -          ld  a,(hl)
 2509 D1:C8BC 21 00 38 D0         ld  hl,ZEROPAGE
 2510 D1:C8C0 85 -  -  -          add a,L
 2511 D1:C8C1 6F -  -  -          ld  L,a
 2512 D1:C8C2 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 2513 D1:C8C3 2C -  -  -          inc L
 2514 D1:C8C4 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 2515 D1:C8C7 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 2516 D1:C8C8 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 2517 D1:C8CA 24 -  -  -          inc h
 2518 D1:C8CB FD 23 -  -          ADDCYC(1)
 2519 D1:C8CD 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 2520 D1:C8CE 2E 0C -  -          ld  L,BASETABLE_STRIDE
 2521 D1:C8D0 ED 6C -  -          mlt hl          ;23.
 2522 D1:C8D2 01 00 40 D0         ld  bc,PAGETABLE
 2523 D1:C8D6 09 -  -  -          add hl,bc
 2524 D1:C8D7 ED 27 -  -          ld  hl,(hl)     ;address get.
 2525 D1:C8D9 01 00 00 00         ld  bc,0
 2526 D1:C8DD 4F -  -  -          ld  c,a
 2527 D1:C8DE 09 -  -  -          add hl,bc       ;Full address get.
 2528 D1:C8DF CD E9 AD D1         READ_ACCESS
 2529 D1:C8E3 E1 -  -  -      pop hl
 2530 D1:C8E4 47 -  -  -      ld  b,a
 2531 D1:C8E5 C3 EE B5 D1     jp  subroutine6502_cmp_combined_end
 2532 D1:C8E9 -  -  -  -  
 2533 D1:C8E9 -  -  -  -  ;-----------------------------------------------------------------------------
 2534 D1:C8E9 -  -  -  -  ;CPX - Compare Memory and Index X
 2535 D1:C8E9 -  -  -  -  ;X - M
 2536 D1:C8E9 -  -  -  -  ;N	Z	C	I	D	V
 2537 D1:C8E9 -  -  -  -  ;+	+	+	-	-	-
 2538 D1:C8E9 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2539 D1:C8E9 -  -  -  -  ;immediate	CPX #oper	E0	2	2  
 2540 D1:C8E9 -  -  -  -  inst6502_cpx_imm:
 2541 D1:C8E9 ED 33 02 -      ADDCYC(2)
 2542 D1:C8EC DD 7E 01 -      ld  a,(ix+REGX)
 2543 D1:C8EF 96 -  -  -      sub a,(hl)
 2544 D1:C8F0 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2545 D1:C8F1 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2546 D1:C90B C3 6D B4 D1     jp  i6502NextLoad
 2547 D1:C90F -  -  -  -  
 2548 D1:C90F -  -  -  -  ;zeropage	CPX oper	E4	2	3  
 2549 D1:C90F -  -  -  -  inst6502_cpx_zp:
 2550 D1:C90F ED 33 03 -      ADDCYC(3)
 2551 D1:C912 7E -  -  -      ld  a,(hl)
 2552 D1:C913 01 00 38 D0     ld  bc,ZEROPAGE
 2553 D1:C917 81 -  -  -      add a,c
 2554 D1:C918 4F -  -  -      ld  c,a
 2555 D1:C919 0A -  -  -      ld  a,(bc)
 2556 D1:C91A 47 -  -  -      ld  b,a
 2557 D1:C91B DD 7E 01 -      ld  a,(ix+REGX)
 2558 D1:C91E 90 -  -  -      sub a,b
 2559 D1:C91F 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2560 D1:C920 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2561 D1:C93A C3 6D B4 D1     jp i6502NextLoad
 2562 D1:C93E -  -  -  -  ;absolute	CPX oper	EC	3	4  
 2563 D1:C93E -  -  -  -  inst6502_cpx_abs:
 2564 D1:C93E ED 33 04 -      ADDCYC(4)
 2565 D1:C941 CD F8 B4 D1     call subroutine6502_abs_split_start
 2566 D1:C945 E5 -  -  -      push hl
 2567 D1:C946 50 -  -  -          ld  d,b
 2568 D1:C947 79 -  -  -          ld  a,c
 2569 D1:C948 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2570 D1:C94A ED 4C -  -          mlt bc
 2571 D1:C94C 21 00 40 D0         ld  hl,PAGETABLE
 2572 D1:C950 09 -  -  -          add hl,bc
 2573 D1:C951 ED 27 -  -          ld  hl,(hl)
 2574 D1:C953 06 00 -  -          ld  b,0
 2575 D1:C955 4F -  -  -          ld  c,a
 2576 D1:C956 09 -  -  -          add hl,bc   ;full address
 2577 D1:C957 CD E9 AD D1         READ_ACCESS
 2578 D1:C95B E1 -  -  -      pop hl
 2579 D1:C95C 47 -  -  -      ld  b,a
 2580 D1:C95D DD 7E 01 -      ld  a,(ix+REGX)
 2581 D1:C960 90 -  -  -      sub a,b
 2582 D1:C961 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2583 D1:C962 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2584 D1:C97C C3 6D B4 D1     jp i6502NextLoad
 2585 D1:C980 -  -  -  -  
 2586 D1:C980 -  -  -  -  ;-----------------------------------------------------------------------------
 2587 D1:C980 -  -  -  -  ;CPY - Compare Memory and Index Y
 2588 D1:C980 -  -  -  -  ;Y - M
 2589 D1:C980 -  -  -  -  ;N	Z	C	I	D	V
 2590 D1:C980 -  -  -  -  ;+	+	+	-	-	-
 2591 D1:C980 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2592 D1:C980 -  -  -  -  ;immediate	CPY #oper	C0	2	2  
 2593 D1:C980 -  -  -  -  inst6502_cpy_imm:
 2594 D1:C980 ED 33 02 -      ADDCYC(2)
 2595 D1:C983 DD 7E 02 -      ld  a,(ix+REGY)
 2596 D1:C986 96 -  -  -      sub a,(hl)
 2597 D1:C987 3F -  -  -      ccf
 2598 D1:C988 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2599 D1:C9A2 C3 6D B4 D1     jp  i6502NextLoad
 2600 D1:C9A6 -  -  -  -  
 2601 D1:C9A6 -  -  -  -  ;zeropage	CPY oper	C4	2	3  
 2602 D1:C9A6 -  -  -  -  inst6502_cpy_zp:
 2603 D1:C9A6 ED 33 03 -      ADDCYC(3)
 2604 D1:C9A9 7E -  -  -      ld  a,(hl)
 2605 D1:C9AA 01 00 38 D0     ld  bc,ZEROPAGE
 2606 D1:C9AE 81 -  -  -      add a,c
 2607 D1:C9AF 4F -  -  -      ld  c,a
 2608 D1:C9B0 0A -  -  -      ld  a,(bc)
 2609 D1:C9B1 47 -  -  -      ld  b,a
 2610 D1:C9B2 DD 7E 02 -      ld  a,(ix+REGY)
 2611 D1:C9B5 90 -  -  -      sub a,b
 2612 D1:C9B6 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2613 D1:C9B7 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2614 D1:C9D1 C3 6D B4 D1     jp i6502NextLoad
 2615 D1:C9D5 -  -  -  -  
 2616 D1:C9D5 -  -  -  -  ;absolute	CPY oper	CC	3	4  
 2617 D1:C9D5 -  -  -  -  inst6502_cpy_abs:
 2618 D1:C9D5 ED 33 04 -      ADDCYC(4)
 2619 D1:C9D8 CD F8 B4 D1     call subroutine6502_abs_split_start
 2620 D1:C9DC E5 -  -  -      push hl
 2621 D1:C9DD 50 -  -  -          ld  d,b
 2622 D1:C9DE 79 -  -  -          ld  a,c
 2623 D1:C9DF 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2624 D1:C9E1 ED 4C -  -          mlt bc
 2625 D1:C9E3 21 00 40 D0         ld  hl,PAGETABLE
 2626 D1:C9E7 09 -  -  -          add hl,bc
 2627 D1:C9E8 ED 27 -  -          ld  hl,(hl)
 2628 D1:C9EA 06 00 -  -          ld  b,0
 2629 D1:C9EC 4F -  -  -          ld  c,a
 2630 D1:C9ED 09 -  -  -          add hl,bc   ;full address
 2631 D1:C9EE CD E9 AD D1         READ_ACCESS
 2632 D1:C9F2 E1 -  -  -      pop hl
 2633 D1:C9F3 47 -  -  -      ld  b,a
 2634 D1:C9F4 DD 7E 02 -      ld  a,(ix+REGY)
 2635 D1:C9F7 90 -  -  -      sub a,b
 2636 D1:C9F8 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2637 D1:C9F9 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2638 D1:CA13 C3 6D B4 D1     jp i6502NextLoad
 2639 D1:CA17 -  -  -  -  
 2640 D1:CA17 -  -  -  -  
 2641 D1:CA17 -  -  -  -  ;-----------------------------------------------------------------------------
 2642 D1:CA17 -  -  -  -  ;-----------------------------------------------------------------------------
 2643 D1:CA17 -  -  -  -  ;-----------------------------------------------------------------------------
 2644 D1:CA17 -  -  -  -  ;Instructions by type: Conditional Branch Instructions
 2645 D1:CA17 -  -  -  -  
 2646 D1:CA17 -  -  -  -  ;branch on C=0
 2647 D1:CA17 -  -  -  -  ;relative	BCC oper	90	2	2**
 2648 D1:CA17 -  -  -  -  inst6502_bcc:
 2649 D1:CA17 ED 33 02 -      ADDCYC(2)
 2650 D1:CA1A DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2651 D1:CA1E C2 6D B4 D1     jp  nz,i6502NextLoad
 2652 D1:CA22 C3 11 B6 D1     jp  subroutine6502_take_branch
 2653 D1:CA26 -  -  -  -  
 2654 D1:CA26 -  -  -  -  ;branch on C=1
 2655 D1:CA26 -  -  -  -  ;relative	BCS oper	B0	2	2**
 2656 D1:CA26 -  -  -  -  inst6502_bcs:
 2657 D1:CA26 ED 33 02 -      ADDCYC(2)
 2658 D1:CA29 DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2659 D1:CA2D CA 6D B4 D1     jp  z,i6502NextLoad
 2660 D1:CA31 C3 11 B6 D1     jp  subroutine6502_take_branch
 2661 D1:CA35 -  -  -  -  
 2662 D1:CA35 -  -  -  -  ;branch on Z=1
 2663 D1:CA35 -  -  -  -  ;relative	BEQ oper	F0	2	2**
 2664 D1:CA35 -  -  -  -  inst6502_beq:
 2665 D1:CA35 ED 33 02 -      ADDCYC(2)
 2666 D1:CA38 DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2667 D1:CA3C CA 6D B4 D1     jp  z,i6502NextLoad
 2668 D1:CA40 C3 11 B6 D1     jp  subroutine6502_take_branch
 2669 D1:CA44 -  -  -  -  
 2670 D1:CA44 -  -  -  -  ;branch on N=1
 2671 D1:CA44 -  -  -  -  ;relative	BMI oper	30	2	2**
 2672 D1:CA44 -  -  -  -  inst6502_bmi:
 2673 D1:CA44 ED 33 02 -      ADDCYC(2)
 2674 D1:CA47 DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2675 D1:CA4B CA 6D B4 D1     jp  z,i6502NextLoad
 2676 D1:CA4F C3 11 B6 D1     jp  subroutine6502_take_branch
 2677 D1:CA53 -  -  -  -  
 2678 D1:CA53 -  -  -  -  
 2679 D1:CA53 -  -  -  -  ;branch on Z=0
 2680 D1:CA53 -  -  -  -  ;relative	BNE oper	D0	2	2**
 2681 D1:CA53 -  -  -  -  inst6502_bne:
 2682 D1:CA53 ED 33 02 -      ADDCYC(2)
 2683 D1:CA56 DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2684 D1:CA5A C2 6D B4 D1     jp  nz,i6502NextLoad
 2685 D1:CA5E C3 11 B6 D1     jp  subroutine6502_take_branch
 2686 D1:CA62 -  -  -  -  
 2687 D1:CA62 -  -  -  -  ;branch on N=0
 2688 D1:CA62 -  -  -  -  ;relative	BPL oper	10	2	2**
 2689 D1:CA62 -  -  -  -  inst6502_bpl:
 2690 D1:CA62 ED 33 02 -      ADDCYC(2)
 2691 D1:CA65 DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2692 D1:CA69 C2 6D B4 D1     jp  nz,i6502NextLoad
 2693 D1:CA6D C3 11 B6 D1     jp  subroutine6502_take_branch
 2694 D1:CA71 -  -  -  -  
 2695 D1:CA71 -  -  -  -  ;branch on V=0
 2696 D1:CA71 -  -  -  -  ;relative	BVC oper	50	2	2**
 2697 D1:CA71 -  -  -  -  inst6502_bvc:
 2698 D1:CA71 ED 33 02 -      ADDCYC(2)
 2699 D1:CA74 DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2700 D1:CA78 C2 6D B4 D1     jp  nz,i6502NextLoad
 2701 D1:CA7C C3 11 B6 D1     jp  subroutine6502_take_branch
 2702 D1:CA80 -  -  -  -  
 2703 D1:CA80 -  -  -  -  ;branch on V=1
 2704 D1:CA80 -  -  -  -  ;relative	BVS oper	70	2	2**
 2705 D1:CA80 -  -  -  -  inst6502_bvs:
 2706 D1:CA80 ED 33 02 -      ADDCYC(2)
 2707 D1:CA83 DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2708 D1:CA87 CA 6D B4 D1     jp  z,i6502NextLoad
 2709 D1:CA8B C3 11 B6 D1     jp  subroutine6502_take_branch
 2710 D1:CA8F -  -  -  -  
 2711 D1:CA8F -  -  -  -  ;-----------------------------------------------------------------------------
 2712 D1:CA8F -  -  -  -  ;-----------------------------------------------------------------------------
 2713 D1:CA8F -  -  -  -  ;-----------------------------------------------------------------------------
 2714 D1:CA8F -  -  -  -  ;Instructions by type: Interrupts
 2715 D1:CA8F -  -  -  -  
 2716 D1:CA8F -  -  -  -  ;BRK - Force Break
 2717 D1:CA8F -  -  -  -  ;BRK initiates a software interrupt similar to a hardware
 2718 D1:CA8F -  -  -  -  ;interrupt (IRQ). The return address pushed to the stack is
 2719 D1:CA8F -  -  -  -  ;PC+2, providing an extra byte of spacing for a break mark
 2720 D1:CA8F -  -  -  -  ;(identifying a reason for the break.)
 2721 D1:CA8F -  -  -  -  ;The status register will be pushed to the stack with the break
 2722 D1:CA8F -  -  -  -  ;flag set to 1. However, when retrieved during RTI or by a PLP
 2723 D1:CA8F -  -  -  -  ;instruction, the break flag will be ignored.
 2724 D1:CA8F -  -  -  -  ;The interrupt disable flag is not set automatically.
 2725 D1:CA8F -  -  -  -  ;
 2726 D1:CA8F -  -  -  -  ;interrupt,             N	Z	C	I	D	V
 2727 D1:CA8F -  -  -  -  ;push PC+2, push SR     -	-	-	1	-	-
 2728 D1:CA8F -  -  -  -  ;implied	BRK	00	1	7  
 2729 D1:CA8F -  -  -  -  inst6502_brk:
 2730 D1:CA8F ED 33 07 -      ADDCYC(7)
 2731 D1:CA92 21 00 39 D0     ld  hl,STACKBASE
 2732 D1:CA96 DD 6E 03 -      ld  L,(ix+REGSP)
 2733 D1:CA99 52 DD 17 05     ld.s de,(ix+REGPC)
 2734 D1:CA9D 13 -  -  -      inc de      ;that extra spacer.
 2735 D1:CA9E 72 -  -  -      ld  (hl),d
 2736 D1:CA9F 2D -  -  -      dec L
 2737 D1:CAA0 73 -  -  -      ld  (hl),e
 2738 D1:CAA1 2D -  -  -      dec L
 2739 D1:CAA2 DD 7E 04 -      ld  a,(ix+REGSR)
 2740 D1:CAA5 CB D7 -  -      set SF_INT,a
 2741 D1:CAA7 77 -  -  -      ld  (hl),a
 2742 D1:CAA8 2D -  -  -      dec L
 2743 D1:CAA9 DD 75 03 -      ld  (ix+REGSP),L
 2744 D1:CAAC B7 -  -  -      WAS_NMI_TRIGGERED
 2745 D1:CAAD 01 FE 00 00     ld  bc,$FE  ;IRQ vector
 2746 D1:CAB1 28 04 -  -      jr  z,+_
 2747 D1:CAB3 01 FA 00 00     ld  bc,$FA  ;NMI vector, if NMI is hijacking this instruction.
 2748 D1:CAB7 21 F4 4B D0 _:  ld  hl,(BASETABLE_STRIDE*$FF)+PAGETABLE
 2749 D1:CABB ED 27 -  -      ld  hl,(hl)
 2750 D1:CABD 09 -  -  -      add hl,bc
 2751 D1:CABE ED 17 -  -      ld  de,(hl)
 2752 D1:CAC0 52 DD 1F 05     ld.s (ix+REGPC),de
 2753 D1:CAC4 C3 57 B4 D1     jp  i6502FirstLoad
 2754 D1:CAC8 -  -  -  -  
 2755 D1:CAC8 -  -  -  -  ;RTI - Return from Interrupt
 2756 D1:CAC8 -  -  -  -  ;The status register is pulled with the break flag
 2757 D1:CAC8 -  -  -  -  ;and bit 5 ignored. Then PC is pulled from the stack.
 2758 D1:CAC8 -  -  -  -  ;pull SR, pull PC      N Z C I D V
 2759 D1:CAC8 -  -  -  -  ;                      from stack
 2760 D1:CAC8 -  -  -  -  ;implied	RTI	40	1	6  
 2761 D1:CAC8 -  -  -  -  inst6502_rti:
 2762 D1:CAC8 21 00 39 D0     ld  hl,STACKBASE
 2763 D1:CACC DD 6E 03 -      ld  l,(ix+REGSP)
 2764 D1:CACF 2C -  -  -      inc l
 2765 D1:CAD0 7E -  -  -      ld  a,(hl)
 2766 D1:CAD1 2C -  -  -      inc l
 2767 D1:CAD2 5E -  -  -      ld  e,(hl)
 2768 D1:CAD3 2C -  -  -      inc l
 2769 D1:CAD4 56 -  -  -      ld  d,(hl)
 2770 D1:CAD5 DD 75 03 -      ld  (ix+REGSP),l
 2771 D1:CAD8 52 DD 1F 05     ld.s (ix+REGPC),de
 2772 D1:CADC DD 46 04 -      ld  b,(ix+REGSR)
 2773 D1:CADF A8 -  -  -      xor a,b
 2774 D1:CAE0 E6 DF -  -      and a,%11011111
 2775 D1:CAE2 A8 -  -  -      xor a,b
 2776 D1:CAE3 DD 77 04 -      ld  (ix+REGSR),a
 2777 D1:CAE6 ED 33 06 -      ADDCYC(6)
 2778 D1:CAE9 C3 57 B4 D1     jp  i6502FirstLoad
 2779 D1:CAED -  -  -  -  
 2780 D1:CAED -  -  -  -  
 2781 D1:CAED -  -  -  -  
 2782 D1:CAED -  -  -  -  ;-----------------------------------------------------------------------------
 2783 D1:CAED -  -  -  -  ;-----------------------------------------------------------------------------
 2784 D1:CAED -  -  -  -  ;-----------------------------------------------------------------------------
 2785 D1:CAED -  -  -  -  ;Instructions by type: Jumps and Subroutines
 2786 D1:CAED -  -  -  -  
 2787 D1:CAED -  -  -  -  ;absolute	JMP oper	4C	3	3  
 2788 D1:CAED -  -  -  -  inst6052_jmp_abs:
 2789 D1:CAED 7E -  -  -      ld  a,(hl)
 2790 D1:CAEE 23 -  -  -      inc hl
 2791 D1:CAEF 1C -  -  -      inc e
 2792 D1:CAF0 20 0F -  -      jr  nz,+_
 2793 D1:CAF2 DD 56 06 -      ld  d,(ix+REGPC+1)
 2794 D1:CAF5 14 -  -  -      inc d
 2795 D1:CAF6 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2796 D1:CAF8 ED 5C -  -      mlt de
 2797 D1:CAFA 21 00 40 D0     ld  hl,PAGETABLE
 2798 D1:CAFE 19 -  -  -      add hl,de
 2799 D1:CAFF ED 27 -  -      ld  hl,(hl)
 2800 D1:CB01 DD 77 05 -  _:  ld  (ix+REGPC+0),a
 2801 D1:CB04 7E -  -  -      ld  a,(hl)
 2802 D1:CB05 DD 77 06 -      ld  (ix+REGPC+1),a
 2803 D1:CB08 ED 33 03 -      ADDCYC(3)
 2804 D1:CB0B C3 57 B4 D1     jp i6502FirstLoad
 2805 D1:CB0F -  -  -  -  
 2806 D1:CB0F -  -  -  -  
 2807 D1:CB0F -  -  -  -  ;Note: In earlier 6502 implementations, cross-page reads on indirect is bugged.
 2808 D1:CB0F -  -  -  -  ;   The end effect would be that inst6502_jmp_indir_splitread would wrap around
 2809 D1:CB0F -  -  -  -  ;   to the start of the current page rather than try to read the next page.
 2810 D1:CB0F -  -  -  -  ;indirect	JMP (oper)	6C	3	5  
 2811 D1:CB0F -  -  -  -  inst6502_jmp_indir:
 2812 D1:CB0F ED 33 05 -      ADDCYC(5)
 2813 D1:CB12 -  -  -  -      ;Doing much the same as abs_split_start below, except with fewer things
 2814 D1:CB12 -  -  -  -      ;because we don't need to preserve any of the other stuff.
 2815 D1:CB12 4E -  -  -      ld  c,(hl)
 2816 D1:CB13 23 -  -  -      inc hl
 2817 D1:CB14 1C -  -  -      inc e
 2818 D1:CB15 20 0F -  -      jr  nz,+_
 2819 D1:CB17 DD 56 06 -      ld  d,(ix+REGPC+1)
 2820 D1:CB1A 14 -  -  -      inc d
 2821 D1:CB1B 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2822 D1:CB1D ED 5C -  -      mlt de
 2823 D1:CB1F 21 00 40 D0     ld  hl,PAGETABLE
 2824 D1:CB23 19 -  -  -      add hl,de
 2825 D1:CB24 ED 27 -  -      ld  hl,(hl)
 2826 D1:CB26 46 -  -  -  _:  ld  b,(hl)
 2827 D1:CB27 79 -  -  -      ld  a,c
 2828 D1:CB28 0C -  -  -      inc c   ;check if there will be a split read.
 2829 D1:CB29 0E 0C -  -      ld  c,BASETABLE_STRIDE  ;Flags not affected
 2830 D1:CB2B ED 4C -  -      mlt bc                  ;Flags not affected
 2831 D1:CB2D 21 00 40 D0     ld  hl,PAGETABLE        ;Flags not affected
 2832 D1:CB31 CA 46 CB D1     jp  z,inst6502_jmp_indir_splitRead
 2833 D1:CB35 09 -  -  -      add hl,bc
 2834 D1:CB36 ED 27 -  -      ld  hl,(hl)
 2835 D1:CB38 06 00 -  -      ld  b,0
 2836 D1:CB3A 4F -  -  -      ld  c,a
 2837 D1:CB3B 09 -  -  -      add hl,bc
 2838 D1:CB3C ED 27 -  -      ld  hl,(hl)
 2839 D1:CB3E 52 DD 2F 05     ld.s (ix+REGPC),hl
 2840 D1:CB42 C3 57 B4 D1     jp  i6502FirstLoad
 2841 D1:CB46 -  -  -  -  inst6502_jmp_indir_splitRead:
 2842 D1:CB46 09 -  -  -      add hl,bc
 2843 D1:CB47 ED 27 -  -      ld  hl,(hl)
 2844 D1:CB49 7E -  -  -      ld  a,(hl)  ;high byte
 2845 D1:CB4A 01 FF 00 00     ld  bc,255
 2846 D1:CB4E 09 -  -  -      add hl,bc
 2847 D1:CB4F 4E -  -  -      ld  c,(hl)  ;low byte
 2848 D1:CB50 47 -  -  -      ld  b,a
 2849 D1:CB51 52 DD 0F 05     ld.s (ix+REGPC),bc
 2850 D1:CB55 C3 57 B4 D1     jp  i6502FirstLoad
 2851 D1:CB59 -  -  -  -  
 2852 D1:CB59 -  -  -  -  
 2853 D1:CB59 -  -  -  -  
 2854 D1:CB59 -  -  -  -  
 2855 D1:CB59 -  -  -  -  
 2856 D1:CB59 -  -  -  -  ;absolute	JSR oper	20	3	6  
 2857 D1:CB59 -  -  -  -  inst6502_jsr:
 2858 D1:CB59 DD 56 06 -      ld  d,(ix+REGPC+1)
 2859 D1:CB5C 4E -  -  -      ld  c,(hl)
 2860 D1:CB5D 23 -  -  -      inc hl
 2861 D1:CB5E 1C -  -  -      inc e
 2862 D1:CB5F 20 10 -  -      jr  nz,+_
 2863 D1:CB61 14 -  -  -      inc d
 2864 D1:CB62 7A -  -  -      ld  a,d
 2865 D1:CB63 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2866 D1:CB65 ED 5C -  -      mlt de
 2867 D1:CB67 21 00 40 D0     ld  hl,PAGETABLE
 2868 D1:CB6B 19 -  -  -      add hl,de
 2869 D1:CB6C ED 27 -  -      ld  hl,(hl)
 2870 D1:CB6E 57 -  -  -      ld  d,a
 2871 D1:CB6F 1E 00 -  -      ld  e,0
 2872 D1:CB71 46 -  -  -  _:  ld  b,(hl)
 2873 D1:CB72 -  -  -  -      ;push de to 6502stack
 2874 D1:CB72 21 00 39 D0     ld  hl,STACKBASE
 2875 D1:CB76 DD 6E 03 -      ld  l,(ix+REGSP)
 2876 D1:CB79 72 -  -  -      ld  (hl),d
 2877 D1:CB7A 2D -  -  -      dec l
 2878 D1:CB7B 73 -  -  -      ld  (hl),e
 2879 D1:CB7C 2D -  -  -      dec l
 2880 D1:CB7D DD 75 03 -      ld  (ix+REGSP),l
 2881 D1:CB80 52 DD 0F 05     ld.s (ix+REGPC),bc
 2882 D1:CB84 ED 33 06 -      ADDCYC(6)
 2883 D1:CB87 C3 57 B4 D1     jp  i6502FirstLoad
 2884 D1:CB8B -  -  -  -  
 2885 D1:CB8B -  -  -  -  ;implied	RTS	60	1	6
 2886 D1:CB8B -  -  -  -  inst6502_rts:
 2887 D1:CB8B 21 00 39 D0     ld  hl,STACKBASE
 2888 D1:CB8F DD 6E 03 -      ld  l,(ix+REGSP)
 2889 D1:CB92 2C -  -  -      inc l
 2890 D1:CB93 5E -  -  -      ld  e,(hl)
 2891 D1:CB94 2C -  -  -      inc l
 2892 D1:CB95 56 -  -  -      ld  d,(hl)
 2893 D1:CB96 DD 75 03 -      ld  (ix+REGSP),l
 2894 D1:CB99 13 -  -  -      inc de
 2895 D1:CB9A 52 DD 1F 05     ld.s (ix+REGPC),de
 2896 D1:CB9E ED 33 06 -      ADDCYC(6)
 2897 D1:CBA1 C3 57 B4 D1     jp  i6502FirstLoad
 2898 D1:CBA5 -  -  -  -  
 2899 D1:CBA5 -  -  -  -  
 2900 D1:CBA5 -  -  -  -  ;-----------------------------------------------------------------------------
 2901 D1:CBA5 -  -  -  -  ;-----------------------------------------------------------------------------
 2902 D1:CBA5 -  -  -  -  ;-----------------------------------------------------------------------------
 2903 D1:CBA5 -  -  -  -  ;Instructions by type: Miscellaneous
 2904 D1:CBA5 -  -  -  -  ;BIT - Test Bits in Memory with Accumulator
 2905 D1:CBA5 -  -  -  -  ;
 2906 D1:CBA5 -  -  -  -  ;bits 7 and 6 of operand are transfered to bit 7 and 6 of SR (N,V);
 2907 D1:CBA5 -  -  -  -  ;the zero-flag is set according to the result of the operand AND
 2908 D1:CBA5 -  -  -  -  ;the accumulator (set, if the result is zero, unset otherwise).
 2909 D1:CBA5 -  -  -  -  ;This allows a quick check of a few bits at once without affecting
 2910 D1:CBA5 -  -  -  -  ;any of the registers, other than the status register (SR).
 2911 D1:CBA5 -  -  -  -  
 2912 D1:CBA5 -  -  -  -  ;A AND M -> Z, M7 -> N, M6 -> V             N	Z	C	I	D	V
 2913 D1:CBA5 -  -  -  -  ;                                           M7	+	-	-	-	M6
 2914 D1:CBA5 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2915 D1:CBA5 -  -  -  -  ;zeropage	BIT oper	24	2	3  
 2916 D1:CBA5 -  -  -  -  inst6502_bit_zp:
 2917 D1:CBA5 ED 33 03 -      ADDCYC(3)
 2918 D1:CBA8 7E -  -  -      ld  a,(hl)
 2919 D1:CBA9 01 00 38 D0     ld  bc,ZEROPAGE
 2920 D1:CBAD 81 -  -  -      add a,c
 2921 D1:CBAE 4F -  -  -      ld  c,a
 2922 D1:CBAF 0A -  -  -      ld  a,(bc)
 2923 D1:CBB0 4F -  -  -      ld  c,a
 2924 D1:CBB1 DD A6 00 -  _:  and a,(ix+REGA)
 2925 D1:CBB4 79 -  -  -      ld  a,c     ;discard result, get bits from OPERANDs
 2926 D1:CBB5 CB 8F -  -      res SF_ZERO,a
 2927 D1:CBB7 20 02 -  -      jr  nz,$+4
 2928 D1:CBB9 CB CF -  -      set SF_ZERO,a
 2929 D1:CBBB DD 46 04 -      ld  b,(ix+REGSR)    ;keep bits in flag other than NZ and V
 2930 D1:CBBE A8 -  -  -      xor a,b
 2931 D1:CBBF E6 C2 -  -      and a,%11000010     ;1=keepA, 0=discardA,keepB
 2932 D1:CBC1 A8 -  -  -      xor a,b
 2933 D1:CBC2 DD 77 04 -      ld  (ix+REGSR),a
 2934 D1:CBC5 C3 6D B4 D1     jp  i6502NextLoad
 2935 D1:CBC9 -  -  -  -  
 2936 D1:CBC9 -  -  -  -  ;absolute	BIT oper	2C	3	4  
 2937 D1:CBC9 -  -  -  -  inst6502_bit_abs:
 2938 D1:CBC9 ED 33 04 -      ADDCYC(4)
 2939 D1:CBCC CD F8 B4 D1     call subroutine6502_abs_split_start
 2940 D1:CBD0 E5 -  -  -      push hl
 2941 D1:CBD1 50 -  -  -          ld  d,b
 2942 D1:CBD2 79 -  -  -          ld  a,c
 2943 D1:CBD3 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2944 D1:CBD5 ED 4C -  -          mlt bc
 2945 D1:CBD7 21 00 40 D0         ld  hl,PAGETABLE
 2946 D1:CBDB 09 -  -  -          add hl,bc
 2947 D1:CBDC ED 27 -  -          ld  hl,(hl)
 2948 D1:CBDE 06 00 -  -          ld  b,0
 2949 D1:CBE0 4F -  -  -          ld  c,a
 2950 D1:CBE1 09 -  -  -          add hl,bc   ;full address
 2951 D1:CBE2 CD E9 AD D1         READ_ACCESS
 2952 D1:CBE6 4F -  -  -          ld  c,a
 2953 D1:CBE7 E1 -  -  -      pop hl
 2954 D1:CBE8 18 C7 -  -      jr  -_    
 2955 D1:CBEA -  -  -  -  
 2956 D1:CBEA -  -  -  -  ;NOP - No Operation
 2957 D1:CBEA -  -  -  -  ;implied	NOP	EA	1	2  
 2958 D1:CBEA -  -  -  -  inst6502_nop:
 2959 D1:CBEA ED 33 02 -      ADDCYC(2)
 2960 D1:CBED C3 86 B4 D1     jp  i6502FinishLoad
 2961 D1:CBF1 -  -  -  -  
 2962 D1:CBF1 -  -  -  -  
 2963 D1:CBF1 -  -  -  -  
 2964 D1:CBF1 -  -  -  -  ;##############################################################################
 2965 D1:CBF1 -  -  -  -  ;##############################################################################
 2966 D1:CBF1 -  -  -  -  ;##############################################################################
 2967 D1:CBF1 -  -  -  -  ;##-----#-#####-#####-----##---###---##-########-----#--##-##---#-----#----####
 2968 D1:CBF1 -  -  -  -  ;####-###-#####-#####-#####-#####-###-#-##########-###--##-#-######-###-###-###
 2969 D1:CBF1 -  -  -  -  ;####-###-#####-#####---###-##--#-----#-##########-###-#-#-##---###-###-----###
 2970 D1:CBF1 -  -  -  -  ;####-###-#####-#####-#####-###-#-###-#-##########-###-##--#####-##-###-##-####
 2971 D1:CBF1 -  -  -  -  ;##-----#-----#-----#-----##----#-###-#-----####-----#-##--#----###-###-###-#-#
 2972 D1:CBF1 -  -  -  -  ;##############################################################################
 2973 D1:CBF1 -  -  -  -  ;##############################################################################
 2974 D1:CBF1 -  -  -  -  ;##############################################################################
 2975 D1:CBF1 -  -  -  -  ;Instructions by type: Illegal Instructions
 2976 D1:CBF1 -  -  -  -  
 2977 D1:CBF1 -  -  -  -  ;NOP - No operations. All the no-operations. Even the ones that are linked
 2978 D1:CBF1 -  -  -  -  ;to the machinery that operates an addressing mode, but does nothing with it.
 2979 D1:CBF1 -  -  -  -  ;A whole lotta nothing.
 2980 D1:CBF1 -  -  -  -  
 2981 D1:CBF1 -  -  -  -  ;Bytes:1, Cycles:2, Opcodes: 1A, 3A, 5A, 7A, DA, FA
 2982 D1:CBF1 -  -  -  -  inst6502_nop_implied:
 2983 D1:CBF1 ED 33 02 -      ADDCYC(2)
 2984 D1:CBF4 C3 86 B4 D1     jp  i6502FinishLoad
 2985 D1:CBF8 -  -  -  -  
 2986 D1:CBF8 -  -  -  -  ;Bytes:2, Cycles:2, Opcodes: 80, 82, 89, C2, E2
 2987 D1:CBF8 -  -  -  -  inst6502_nop_imm:
 2988 D1:CBF8 ED 33 02 -      ADDCYC(2)
 2989 D1:CBFB C3 6D B4 D1     jp  i6502NextLoad
 2990 D1:CBFF -  -  -  -  
 2991 D1:CBFF -  -  -  -  ;Bytes:2, Cycles:3, Opcodes: 04, 44, 64
 2992 D1:CBFF -  -  -  -  inst6502_nop_zp:
 2993 D1:CBFF ED 33 03 -      ADDCYC(3)
 2994 D1:CC02 C3 6D B4 D1     jp  i6502NextLoad
 2995 D1:CC06 -  -  -  -  
 2996 D1:CC06 -  -  -  -  ;Bytes:2, Cycles:4, Opcodes: 14, 34, 54, 74, D4, F4
 2997 D1:CC06 -  -  -  -  inst6502_nop_zpx:
 2998 D1:CC06 ED 33 04 -      ADDCYC(4)
 2999 D1:CC09 C3 6D B4 D1     jp  i6502NextLoad
 3000 D1:CC0D -  -  -  -  
 3001 D1:CC0D -  -  -  -  ;Bytes:3, Cycles:4, Opcode: 0C
 3002 D1:CC0D -  -  -  -  inst6502_nop_abs:
 3003 D1:CC0D ED 33 04 -      ADDCYC(4)
 3004 D1:CC10 CD F8 B4 D1     call subroutine6502_abs_split_start
 3005 D1:CC14 E5 -  -  -      push hl
 3006 D1:CC15 CD E9 AD D1         READ_ACCESS
 3007 D1:CC19 E1 -  -  -      pop hl
 3008 D1:CC1A C3 6D B4 D1     jp  i6502NextLoad
 3009 D1:CC1E -  -  -  -  
 3010 D1:CC1E -  -  -  -  ;Note: This thing latches all over the place but does nothing. All these
 3011 D1:CC1E -  -  -  -  ;READ_ACCESS thingies are in case the ROM wants to clear PPU flags or something
 3012 D1:CC1E -  -  -  -  ;using these instructions. But the one below is noted to do the touchy-feelies
 3013 D1:CC1E -  -  -  -  ;at ABS and (ABS+X)&0xFF
 3014 D1:CC1E -  -  -  -  ;Bytes:3, Cycles:4*, Opcodes: 1C, 3C, 5C, 7C, DC, FC
 3015 D1:CC1E -  -  -  -  inst6502_nop_absx:
 3016 D1:CC1E ED 33 04 -      ADDCYC(4)
 3017 D1:CC21 CD 19 B5 D1     PUSH_ABSXSPLIT
 3018 D1:CC25 CD E9 AD D1         READ_ACCESS
 3019 D1:CC29 E1 -  -  -      pop hl
 3020 D1:CC2A C3 6D B4 D1     jp  i6502NextLoad
 3021 D1:CC2E -  -  -  -  
 3022 D1:CC2E -  -  -  -  ;-----------------------------------------------------------------------------
 3023 D1:CC2E -  -  -  -  ;ALR (ASR) - AND oper + LSR
 3024 D1:CC2E -  -  -  -  ;Affects CZN
 3025 D1:CC2E -  -  -  -  
 3026 D1:CC2E -  -  -  -  ;immediate	ALR #oper	4B	2	2 
 3027 D1:CC2E -  -  -  -  inst6502_alr_imm:
 3028 D1:CC2E ED 33 02 -      ADDCYC(2)
 3029 D1:CC31 DD 7E 00 -      ld  a,(ix+REGA)
 3030 D1:CC34 A6 -  -  -      and a,(hl)
 3031 D1:CC35 CB 3F -  -      srl a   ;Must do it this way. A-optimized instr do not affect Z
 3032 D1:CC37 DD 77 00 -      ld  (ix+REGA),a
 3033 D1:CC3A DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3034 D1:CC54 C3 6D B4 D1     jp  i6502NextLoad
 3035 D1:CC58 -  -  -  -  
 3036 D1:CC58 -  -  -  -  ;-----------------------------------------------------------------------------
 3037 D1:CC58 -  -  -  -  
 3038 D1:CC58 -  -  -  -  ;ANC [ANC (ANC2)] - AND oper + set Carry as if ASL [ROL]
 3039 D1:CC58 -  -  -  -  
 3040 D1:CC58 -  -  -  -  ;immediate	ANC #oper	0B	2	2 
 3041 D1:CC58 -  -  -  -  ;immediate	ANC #oper	2B	2	2
 3042 D1:CC58 -  -  -  -  instr6502_anc_imm:
 3043 D1:CC58 -  -  -  -  instr6502_anc2_imm:
 3044 D1:CC58 ED 33 02 -      ADDCYC(2)
 3045 D1:CC5B DD 7E 00 -      ld  a,(ix+REGA)
 3046 D1:CC5E A6 -  -  -      and a,(hl)
 3047 D1:CC5F DD 77 00 -      ld  (ix+REGA),a
 3048 D1:CC62 CB 07 -  -      rlc a
 3049 D1:CC64 DD 7E 04 -      ld  a,(ix+REGSR)
 3050 D1:CC67 -  -  -  -      ;A small optimiztion here, letting us merge OPRFLG_C and OPRFLG_N
 3051 D1:CC67 CB 87 -  -      res SF_CARRY,a
 3052 D1:CC69 CB BF -  -      res SF_NEG,a
 3053 D1:CC6B 30 04 -  -      jr  nc,+_
 3054 D1:CC6D CB C7 -  -      set SF_CARRY,a
 3055 D1:CC6F CB FF -  -      set SF_NEG,a
 3056 D1:CC71 CB 8F -  -  _:  res SF_ZERO,a
 3057 D1:CC73 20 02 -  -      jr  nz,$+4
 3058 D1:CC75 CB CF -  -      set SF_ZERO,a
 3059 D1:CC77 DD 77 04 -      ld  (ix+REGSR),a
 3060 D1:CC7A C3 6D B4 D1     jp  i6502NextLoad
 3061 D1:CC7E -  -  -  -  
 3062 D1:CC7E -  -  -  -  ;-----------------------------------------------------------------------------
 3063 D1:CC7E -  -  -  -  
 3064 D1:CC7E -  -  -  -  ;ANE (XAA) - (A OR ??) AND X AND oper -> A
 3065 D1:CC7E -  -  -  -  ;immediate	ANE #oper	8B	2	2  	††
 3066 D1:CC7E -  -  -  -  instr6502_ane_imm:
 3067 D1:CC7E ED 33 02 -      ADDCYC(2)
 3068 D1:CC81 ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3069 D1:CC83 DD B6 00 -      or  a,(ix+REGA)
 3070 D1:CC86 DD A6 01 -      and a,(ix+REGX)
 3071 D1:CC89 A6 -  -  -      and a,(hl)
 3072 D1:CC8A DD 77 00 -      ld  (ix+REGA),a
 3073 D1:CC8D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3074 D1:CCA1 C3 6D B4 D1     jp  i6502NextLoad
 3075 D1:CCA5 -  -  -  -  
 3076 D1:CCA5 -  -  -  -  ;-----------------------------------------------------------------------------
 3077 D1:CCA5 -  -  -  -  
 3078 D1:CCA5 -  -  -  -  
 3079 D1:CCA5 -  -  -  -  ;ARR - AND OPER + ROR
 3080 D1:CCA5 -  -  -  -  ;Something hinky is going on with the flags. "This operation involves the adder"
 3081 D1:CCA5 -  -  -  -  ;I need to get a better handle over what that might be.
 3082 D1:CCA5 -  -  -  -  ;CVZN flags affected.
 3083 D1:CCA5 -  -  -  -  ;
 3084 D1:CCA5 -  -  -  -  ;Primary sources reads:
 3085 D1:CCA5 -  -  -  -  ;----------------------
 3086 D1:CCA5 -  -  -  -  ;This operation involves the adder:
 3087 D1:CCA5 -  -  -  -  ;V-flag is set according to (A AND oper) + oper
 3088 D1:CCA5 -  -  -  -  ;The carry is not set, but bit 7 (sign) is exchanged with the carry
 3089 D1:CCA5 -  -  -  -  ;A AND oper, C -> [76543210] -> C
 3090 D1:CCA5 -  -  -  -  ;
 3091 D1:CCA5 -  -  -  -  ;Secondary source reads:
 3092 D1:CCA5 -  -  -  -  ;-----------------------
 3093 D1:CCA5 -  -  -  -  ;Similar to AND #i then ROR A, except sets the flags differently. 
 3094 D1:CCA5 -  -  -  -  ;N and Z are normal, but C is bit 6 and V is bit 6 xor bit 5. 
 3095 D1:CCA5 -  -  -  -  ;A fast way to perform signed division by 4 is: CMP #$80; ARR #$FF; ROR. 
 3096 D1:CCA5 -  -  -  -  ;This can be extended to larger powers of two.
 3097 D1:CCA5 -  -  -  -  
 3098 D1:CCA5 -  -  -  -  ;immediate	ARR #oper	6B	2	2  
 3099 D1:CCA5 -  -  -  -  instr6502_arr_imm:
 3100 D1:CCA5 ED 33 02 -      ADDCYC(2)
 3101 D1:CCA8 DD 7E 00 -      ld  a,(ix+REGA)
 3102 D1:CCAB A6 -  -  -      and a,(hl)
 3103 D1:CCAC 47 -  -  -      ld  b,a
 3104 D1:CCAD DD 7E 04 -      ld  a,(ix+REGSR)
 3105 D1:CCB0 4F -  -  -      ld  c,a
 3106 D1:CCB1 0F -  -  -      rrca    ;extract carry. This carry will go into sign bit of result
 3107 D1:CCB2 CB B9 -  -      res SF_NEG,c
 3108 D1:CCB4 30 02 -  -      jr  nc,$+4
 3109 D1:CCB6 CB F9 -  -      set SF_NEG,c
 3110 D1:CCB8 CB 18 -  -      rr b
 3111 D1:CCBA CB 89 -  -      res SF_ZERO,c
 3112 D1:CCBC 20 02 -  -      jr  nz,$+4
 3113 D1:CCBE CB C9 -  -      set SF_ZERO,c
 3114 D1:CCC0 DD 70 00 -      ld  (ix+REGA),b
 3115 D1:CCC3 78 -  -  -      ld  a,b
 3116 D1:CCC4 E6 40 -  -      and a,%01000000
 3117 D1:CCC6 CB 81 -  -      res SF_CARRY,c
 3118 D1:CCC8 28 02 -  -      jr  z,$+4
 3119 D1:CCCA CB C1 -  -      set SF_CARRY,c
 3120 D1:CCCC 0F -  -  -      rrca
 3121 D1:CCCD EE 20 -  -      xor a,%00100000
 3122 D1:CCCF E6 20 -  -      and a,%00100000
 3123 D1:CCD1 CB B1 -  -      res SF_OVER,c
 3124 D1:CCD3 28 02 -  -      jr  z,$+4
 3125 D1:CCD5 CB F1 -  -      set SF_OVER,c
 3126 D1:CCD7 DD 71 04 -      ld  (ix+REGSR),c
 3127 D1:CCDA -  -  -  -      ;TODO: Figure out a more efficient way to emulate this instruction.
 3128 D1:CCDA C3 6D B4 D1     jp  i6502NextLoad
 3129 D1:CCDE -  -  -  -  
 3130 D1:CCDE -  -  -  -  ;-----------------------------------------------------------------------------
 3131 D1:CCDE -  -  -  -  ;DCP (DCM) - DEC oper + CMP oper
 3132 D1:CCDE -  -  -  -  ;M-1->M, A-M. Affects CZN
 3133 D1:CCDE -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3134 D1:CCDE -  -  -  -  
 3135 D1:CCDE -  -  -  -  ;zeropage	DCP oper	C7	2	5  	
 3136 D1:CCDE -  -  -  -  inst6502_dcp_zp:
 3137 D1:CCDE ED 33 05 -      ADDCYC(5)
 3138 D1:CCE1 7E -  -  -      ld  a,(hl)
 3139 D1:CCE2 01 00 38 D0     ld  bc,ZEROPAGE
 3140 D1:CCE6 81 -  -  -      add a,c
 3141 D1:CCE7 4F -  -  -      ld  c,a
 3142 D1:CCE8 0A -  -  -      ld  a,(bc)
 3143 D1:CCE9 3D -  -  -      dec a
 3144 D1:CCEA 02 -  -  -      ld  (bc),a
 3145 D1:CCEB 47 -  -  -      ld  b,a
 3146 D1:CCEC C3 EE B5 D1     jp  subroutine6502_cmp_combined_end
 3147 D1:CCF0 -  -  -  -  
 3148 D1:CCF0 -  -  -  -  ;zeropage,X	DCP oper,X	D7	2	6  	
 3149 D1:CCF0 -  -  -  -  inst6520_dcp_zpx:
 3150 D1:CCF0 ED 33 06 -      ADDCYC(6)
 3151 D1:CCF3 7E -  -  -      ld  a,(hl)
 3152 D1:CCF4 01 00 38 D0     ld  bc,ZEROPAGE
 3153 D1:CCF8 81 -  -  -      add a,c
 3154 D1:CCF9 DD 86 01 -      add a,(ix+REGX)
 3155 D1:CCFC 4F -  -  -      ld  c,a
 3156 D1:CCFD 0A -  -  -      ld  a,(bc)
 3157 D1:CCFE 3D -  -  -      dec a
 3158 D1:CCFF 02 -  -  -      ld  (bc),a
 3159 D1:CD00 47 -  -  -      ld  b,a
 3160 D1:CD01 C3 EE B5 D1     jp  subroutine6502_cmp_combined_end
 3161 D1:CD05 -  -  -  -  
 3162 D1:CD05 -  -  -  -  ;absolute	DCP oper	CF	3	6  	
 3163 D1:CD05 -  -  -  -  inst6502_dcp_abs:
 3164 D1:CD05 ED 33 06 -      ADDCYC(6)
 3165 D1:CD08 CD F8 B4 D1     call subroutine6502_abs_split_start
 3166 D1:CD0C E5 -  -  -      push hl
 3167 D1:CD0D 50 -  -  -          ld  d,b
 3168 D1:CD0E 79 -  -  -          ld  a,c
 3169 D1:CD0F 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3170 D1:CD11 ED 4C -  -          mlt bc
 3171 D1:CD13 21 00 40 D0         ld  hl,PAGETABLE
 3172 D1:CD17 09 -  -  -          add hl,bc
 3173 D1:CD18 ED 27 -  -          ld  hl,(hl)
 3174 D1:CD1A 06 00 -  -          ld  b,0
 3175 D1:CD1C 4F -  -  -          ld  c,a
 3176 D1:CD1D 09 -  -  -          add hl,bc   ;full address
 3177 D1:CD1E CD E9 AD D1         READ_ACCESS
 3178 D1:CD22 3D -  -  -          dec a
 3179 D1:CD23 47 -  -  -          ld b,a
 3180 D1:CD24 C5 -  -  -          push bc
 3181 D1:CD25 CD 0C AE D1             WRITE_ACCESS
 3182 D1:CD29 C1 -  -  -          pop bc
 3183 D1:CD2A E1 -  -  -      pop hl
 3184 D1:CD2B C3 EE B5 D1     jp  subroutine6502_cmp_combined_end
 3185 D1:CD2F -  -  -  -  
 3186 D1:CD2F -  -  -  -  ;absolut,X	DCP oper,X	DF	3	7  	
 3187 D1:CD2F -  -  -  -  inst6502_dcp_absx:
 3188 D1:CD2F ED 33 07 -      ADDCYC(7)
 3189 D1:CD32 CD 55 B5 D1     PUSH_ABSXSPLIT_NODEP
 3190 D1:CD36 CD E9 AD D1         READ_ACCESS
 3191 D1:CD3A 3D -  -  -          dec a
 3192 D1:CD3B 47 -  -  -          ld  b,a
 3193 D1:CD3C C5 -  -  -          push bc
 3194 D1:CD3D CD 0C AE D1             WRITE_ACCESS
 3195 D1:CD41 C1 -  -  -          pop bc
 3196 D1:CD42 E1 -  -  -      pop hl
 3197 D1:CD43 C3 EE B5 D1     jp  subroutine6502_cmp_combined_end
 3198 D1:CD47 -  -  -  -  
 3199 D1:CD47 -  -  -  -  ;absolut,Y	DCP oper,Y	DB	3	7  	
 3200 D1:CD47 -  -  -  -  inst6502_dcp_absy:
 3201 D1:CD47 ED 33 07 -      ADDCYC(7)
 3202 D1:CD4A CD 50 B5 D1     PUSH_ABSYSPLIT_NODEP
 3203 D1:CD4E CD E9 AD D1         READ_ACCESS
 3204 D1:CD52 3D -  -  -          dec a
 3205 D1:CD53 47 -  -  -          ld  b,a
 3206 D1:CD54 C5 -  -  -          push bc
 3207 D1:CD55 CD 0C AE D1             WRITE_ACCESS
 3208 D1:CD59 C1 -  -  -          pop bc
 3209 D1:CD5A E1 -  -  -      pop hl
 3210 D1:CD5B C3 EE B5 D1     jp  subroutine6502_cmp_combined_end
 3211 D1:CD5F -  -  -  -  
 3212 D1:CD5F -  -  -  -  ;(indirect,X)	DCP (oper,X)	C3	2	8  	
 3213 D1:CD5F -  -  -  -  inst6502_dcp_indx:
 3214 D1:CD5F ED 33 08 -      ADDCYC(8)
 3215 D1:CD62 E5 -  -  -      push hl
 3216 D1:CD63 7E -  -  -          ld  a,(hl)
 3217 D1:CD64 21 00 38 D0         ld  hl,ZEROPAGE
 3218 D1:CD68 85 -  -  -          add a,L
 3219 D1:CD69 DD 86 01 -          add a,(ix+REGX)
 3220 D1:CD6C 6F -  -  -          ld  L,a
 3221 D1:CD6D 7E -  -  -          ld  a,(hl)
 3222 D1:CD6E 2C -  -  -          inc L
 3223 D1:CD6F 56 -  -  -          ld  d,(hl)
 3224 D1:CD70 42 -  -  -          ld  b,d
 3225 D1:CD71 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3226 D1:CD73 ED 4C -  -          mlt bc
 3227 D1:CD75 21 00 40 D0         ld  hl,PAGETABLE
 3228 D1:CD79 09 -  -  -          add hl,bc
 3229 D1:CD7A ED 27 -  -          ld  hl,(hl)
 3230 D1:CD7C 06 00 -  -          ld  b,0
 3231 D1:CD7E 4F -  -  -          ld  c,a
 3232 D1:CD7F 09 -  -  -          add hl,bc
 3233 D1:CD80 CD E9 AD D1         READ_ACCESS
 3234 D1:CD84 3D -  -  -          dec a
 3235 D1:CD85 47 -  -  -          ld  b,a
 3236 D1:CD86 C5 -  -  -          push bc
 3237 D1:CD87 CD 0C AE D1             WRITE_ACCESS
 3238 D1:CD8B C1 -  -  -          pop bc
 3239 D1:CD8C E1 -  -  -      pop hl
 3240 D1:CD8D C3 EE B5 D1     jp  subroutine6502_cmp_combined_end
 3241 D1:CD91 -  -  -  -  
 3242 D1:CD91 -  -  -  -  ;(indirect),Y	DCP (oper),Y	D3	2	8  
 3243 D1:CD91 -  -  -  -  inst6502_dcp_indy:
 3244 D1:CD91 ED 33 08 -      ADDCYC(8)
 3245 D1:CD94 E5 -  -  -      push hl
 3246 D1:CD95 7E -  -  -          ld  a,(hl)
 3247 D1:CD96 21 00 38 D0         ld  hl,ZEROPAGE
 3248 D1:CD9A 85 -  -  -          add a,L
 3249 D1:CD9B 6F -  -  -          ld  L,a
 3250 D1:CD9C 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3251 D1:CD9D 2C -  -  -          inc L
 3252 D1:CD9E DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3253 D1:CDA1 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3254 D1:CDA2 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3255 D1:CDA4 24 -  -  -          inc h
 3256 D1:CDA5 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3257 D1:CDA6 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3258 D1:CDA8 ED 6C -  -          mlt hl          ;23.
 3259 D1:CDAA 01 00 40 D0         ld  bc,PAGETABLE
 3260 D1:CDAE 09 -  -  -          add hl,bc
 3261 D1:CDAF ED 27 -  -          ld  hl,(hl)     ;address get.
 3262 D1:CDB1 01 00 00 00         ld  bc,0
 3263 D1:CDB5 4F -  -  -          ld  c,a
 3264 D1:CDB6 09 -  -  -          add hl,bc       ;Full address get.
 3265 D1:CDB7 CD E9 AD D1         READ_ACCESS
 3266 D1:CDBB 3D -  -  -          dec a
 3267 D1:CDBC 47 -  -  -          ld  b,a
 3268 D1:CDBD C5 -  -  -          push bc
 3269 D1:CDBE CD 0C AE D1             WRITE_ACCESS
 3270 D1:CDC2 C1 -  -  -          pop bc
 3271 D1:CDC3 E1 -  -  -      pop hl
 3272 D1:CDC4 C3 EE B5 D1     jp  subroutine6502_cmp_combined_end
 3273 D1:CDC8 -  -  -  -  
 3274 D1:CDC8 -  -  -  -  ;-----------------------------------------------------------------------------
 3275 D1:CDC8 -  -  -  -  ;ISC (ISB, INS) - INC oper + SBC oper
 3276 D1:CDC8 -  -  -  -  ;M+1->M, A-M-not(C)->A, affects VCZN
 3277 D1:CDC8 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3278 D1:CDC8 -  -  -  -  
 3279 D1:CDC8 -  -  -  -  
 3280 D1:CDC8 -  -  -  -  
 3281 D1:CDC8 -  -  -  -  ;zeropage	ISC oper	E7	2	5  	
 3282 D1:CDC8 -  -  -  -  inst6502_isc_zp:
 3283 D1:CDC8 ED 33 05 -      ADDCYC(5)
 3284 D1:CDCB 7E -  -  -      ld  a,(hl)
 3285 D1:CDCC 01 00 38 D0     ld  bc,ZEROPAGE
 3286 D1:CDD0 81 -  -  -      add a,c
 3287 D1:CDD1 4F -  -  -      ld  c,a
 3288 D1:CDD2 0A -  -  -      ld  a,(bc)
 3289 D1:CDD3 3C -  -  -      inc a
 3290 D1:CDD4 02 -  -  -      ld  (bc),a
 3291 D1:CDD5 4F -  -  -      ld  c,a
 3292 D1:CDD6 C3 BB B5 D1     jp  subroutine6502_sbc_combined_end
 3293 D1:CDDA -  -  -  -  
 3294 D1:CDDA -  -  -  -  ;zeropage,X	ISC oper,X	F7	2	6  
 3295 D1:CDDA -  -  -  -  inst6520_isc_zpx:
 3296 D1:CDDA ED 33 06 -      ADDCYC(6)
 3297 D1:CDDD 7E -  -  -      ld  a,(hl)
 3298 D1:CDDE 01 00 38 D0     ld  bc,ZEROPAGE
 3299 D1:CDE2 81 -  -  -      add a,c
 3300 D1:CDE3 DD 86 01 -      add a,(ix+REGX)
 3301 D1:CDE6 4F -  -  -      ld  c,a
 3302 D1:CDE7 0A -  -  -      ld  a,(bc)
 3303 D1:CDE8 3C -  -  -      inc a
 3304 D1:CDE9 02 -  -  -      ld  (bc),a
 3305 D1:CDEA 4F -  -  -      ld  c,a
 3306 D1:CDEB C3 BB B5 D1     jp  subroutine6502_sbc_combined_end
 3307 D1:CDEF -  -  -  -  
 3308 D1:CDEF -  -  -  -  ;absolute	ISC oper	EF	3	6  	
 3309 D1:CDEF -  -  -  -  inst6502_isc_abs:
 3310 D1:CDEF ED 33 06 -      ADDCYC(6)
 3311 D1:CDF2 CD F8 B4 D1     call subroutine6502_abs_split_start
 3312 D1:CDF6 E5 -  -  -      push hl
 3313 D1:CDF7 50 -  -  -          ld  d,b
 3314 D1:CDF8 79 -  -  -          ld  a,c
 3315 D1:CDF9 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3316 D1:CDFB ED 4C -  -          mlt bc
 3317 D1:CDFD 21 00 40 D0         ld  hl,PAGETABLE
 3318 D1:CE01 09 -  -  -          add hl,bc
 3319 D1:CE02 ED 27 -  -          ld  hl,(hl)
 3320 D1:CE04 06 00 -  -          ld  b,0
 3321 D1:CE06 4F -  -  -          ld  c,a
 3322 D1:CE07 09 -  -  -          add hl,bc   ;full address
 3323 D1:CE08 CD E9 AD D1         READ_ACCESS
 3324 D1:CE0C 3C -  -  -          inc a
 3325 D1:CE0D 47 -  -  -          ld b,a
 3326 D1:CE0E 4F -  -  -          ld c,a
 3327 D1:CE0F C5 -  -  -          push bc
 3328 D1:CE10 CD 0C AE D1             WRITE_ACCESS
 3329 D1:CE14 C1 -  -  -          pop bc
 3330 D1:CE15 E1 -  -  -      pop hl
 3331 D1:CE16 C3 BB B5 D1     jp  subroutine6502_sbc_combined_end
 3332 D1:CE1A -  -  -  -  
 3333 D1:CE1A -  -  -  -  ;absolut,X	ISC oper,X	FF	3	7  	
 3334 D1:CE1A -  -  -  -  inst6502_isc_absx:
 3335 D1:CE1A ED 33 07 -      ADDCYC(7)
 3336 D1:CE1D CD 55 B5 D1     PUSH_ABSXSPLIT_NODEP
 3337 D1:CE21 CD E9 AD D1         READ_ACCESS
 3338 D1:CE25 3C -  -  -          inc a
 3339 D1:CE26 47 -  -  -          ld  b,a
 3340 D1:CE27 4F -  -  -          ld  c,a
 3341 D1:CE28 C5 -  -  -          push bc
 3342 D1:CE29 CD 0C AE D1             WRITE_ACCESS
 3343 D1:CE2D C1 -  -  -          pop bc
 3344 D1:CE2E E1 -  -  -      pop hl
 3345 D1:CE2F C3 BB B5 D1     jp  subroutine6502_sbc_combined_end
 3346 D1:CE33 -  -  -  -  
 3347 D1:CE33 -  -  -  -  ;absolut,Y	ISC oper,Y	FB	3	7  	
 3348 D1:CE33 -  -  -  -  inst6502_isc_absy:
 3349 D1:CE33 ED 33 07 -      ADDCYC(7)
 3350 D1:CE36 CD 50 B5 D1     PUSH_ABSYSPLIT_NODEP
 3351 D1:CE3A CD E9 AD D1         READ_ACCESS
 3352 D1:CE3E 3C -  -  -          inc a
 3353 D1:CE3F 47 -  -  -          ld  b,a
 3354 D1:CE40 4F -  -  -          ld  c,a
 3355 D1:CE41 C5 -  -  -          push bc
 3356 D1:CE42 CD 0C AE D1             WRITE_ACCESS
 3357 D1:CE46 C1 -  -  -          pop bc
 3358 D1:CE47 E1 -  -  -      pop hl
 3359 D1:CE48 C3 BB B5 D1     jp  subroutine6502_sbc_combined_end
 3360 D1:CE4C -  -  -  -  
 3361 D1:CE4C -  -  -  -  ;(indirect,X)	ISC (oper,X)	E3	2	8  	
 3362 D1:CE4C -  -  -  -  inst6502_isc_indx:
 3363 D1:CE4C ED 33 08 -      ADDCYC(8)
 3364 D1:CE4F E5 -  -  -      push hl
 3365 D1:CE50 7E -  -  -          ld  a,(hl)
 3366 D1:CE51 21 00 38 D0         ld  hl,ZEROPAGE
 3367 D1:CE55 85 -  -  -          add a,L
 3368 D1:CE56 DD 86 01 -          add a,(ix+REGX)
 3369 D1:CE59 6F -  -  -          ld  L,a
 3370 D1:CE5A 7E -  -  -          ld  a,(hl)
 3371 D1:CE5B 2C -  -  -          inc L
 3372 D1:CE5C 56 -  -  -          ld  d,(hl)
 3373 D1:CE5D 42 -  -  -          ld  b,d
 3374 D1:CE5E 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3375 D1:CE60 ED 4C -  -          mlt bc
 3376 D1:CE62 21 00 40 D0         ld  hl,PAGETABLE
 3377 D1:CE66 09 -  -  -          add hl,bc
 3378 D1:CE67 ED 27 -  -          ld  hl,(hl)
 3379 D1:CE69 06 00 -  -          ld  b,0
 3380 D1:CE6B 4F -  -  -          ld  c,a
 3381 D1:CE6C 09 -  -  -          add hl,bc
 3382 D1:CE6D CD E9 AD D1         READ_ACCESS
 3383 D1:CE71 3C -  -  -          inc a
 3384 D1:CE72 47 -  -  -          ld  b,a
 3385 D1:CE73 4F -  -  -          ld  c,a
 3386 D1:CE74 C5 -  -  -          push bc
 3387 D1:CE75 CD 0C AE D1             WRITE_ACCESS
 3388 D1:CE79 C1 -  -  -          pop bc
 3389 D1:CE7A E1 -  -  -      pop hl
 3390 D1:CE7B C3 BB B5 D1     jp  subroutine6502_sbc_combined_end
 3391 D1:CE7F -  -  -  -  
 3392 D1:CE7F -  -  -  -  ;(indirect),Y	ISC (oper),Y	F3	2	8  
 3393 D1:CE7F -  -  -  -  inst6502_isc_indy:
 3394 D1:CE7F ED 33 08 -      ADDCYC(8)
 3395 D1:CE82 E5 -  -  -      push hl
 3396 D1:CE83 7E -  -  -          ld  a,(hl)
 3397 D1:CE84 21 00 38 D0         ld  hl,ZEROPAGE
 3398 D1:CE88 85 -  -  -          add a,L
 3399 D1:CE89 6F -  -  -          ld  L,a
 3400 D1:CE8A 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3401 D1:CE8B 2C -  -  -          inc L
 3402 D1:CE8C DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3403 D1:CE8F 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3404 D1:CE90 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3405 D1:CE92 24 -  -  -          inc h
 3406 D1:CE93 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3407 D1:CE94 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3408 D1:CE96 ED 6C -  -          mlt hl          ;23.
 3409 D1:CE98 01 00 40 D0         ld  bc,PAGETABLE
 3410 D1:CE9C 09 -  -  -          add hl,bc
 3411 D1:CE9D ED 27 -  -          ld  hl,(hl)     ;address get.
 3412 D1:CE9F 01 00 00 00         ld  bc,0
 3413 D1:CEA3 4F -  -  -          ld  c,a
 3414 D1:CEA4 09 -  -  -          add hl,bc       ;Full address get.
 3415 D1:CEA5 CD E9 AD D1         READ_ACCESS
 3416 D1:CEA9 3C -  -  -          inc a
 3417 D1:CEAA 47 -  -  -          ld  b,a
 3418 D1:CEAB 4F -  -  -          ld  c,a
 3419 D1:CEAC C5 -  -  -          push bc
 3420 D1:CEAD CD 0C AE D1             WRITE_ACCESS
 3421 D1:CEB1 C1 -  -  -          pop bc
 3422 D1:CEB2 E1 -  -  -      pop hl
 3423 D1:CEB3 C3 BB B5 D1     jp  subroutine6502_sbc_combined_end
 3424 D1:CEB7 -  -  -  -  ;-----------------------------------------------------------------------------
 3425 D1:CEB7 -  -  -  -  ;LAS (LAR) - LDA/TSX oper
 3426 D1:CEB7 -  -  -  -  ;M AND SP -> A, X, SP. Affects ZN
 3427 D1:CEB7 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3428 D1:CEB7 -  -  -  -  ;absolut,Y	LAS oper,Y	BB	3	4* 
 3429 D1:CEB7 -  -  -  -  inst6502_las_absy:
 3430 D1:CEB7 ED 33 04 -      ADDCYC(4)
 3431 D1:CEBA CD 14 B5 D1     PUSH_ABSYSPLIT
 3432 D1:CEBE CD E9 AD D1         READ_ACCESS
 3433 D1:CEC2 E1 -  -  -      pop hl
 3434 D1:CEC3 DD A6 03 -      and a,(ix+REGSP)
 3435 D1:CEC6 DD 77 00 -      ld  (ix+REGA),A
 3436 D1:CEC9 DD 77 01 -      ld  (ix+REGX),A
 3437 D1:CECC DD 77 03 -      ld  (ix+REGSP),A
 3438 D1:CECF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3439 D1:CEE3 C3 6D B4 D1     jp i6502NextLoad
 3440 D1:CEE7 -  -  -  -  
 3441 D1:CEE7 -  -  -  -  ;-----------------------------------------------------------------------------
 3442 D1:CEE7 -  -  -  -  ;LAX - LDA oper + LDX oper
 3443 D1:CEE7 -  -  -  -  ;M -> A -> X. Flags affected: ZN
 3444 D1:CEE7 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3445 D1:CEE7 -  -  -  -  ;zeropage	LAX oper	A7	2	3  	
 3446 D1:CEE7 -  -  -  -  inst6502_lax_zp:
 3447 D1:CEE7 ED 33 03 -      ADDCYC(3)
 3448 D1:CEEA 7E -  -  -      ld  a,(hl)
 3449 D1:CEEB 01 00 38 D0     ld  bc,ZEROPAGE
 3450 D1:CEEF 81 -  -  -      add a,c
 3451 D1:CEF0 4F -  -  -      ld  c,a
 3452 D1:CEF1 0A -  -  -      ld  a,(bc)
 3453 D1:CEF2 DD 77 00 -      ld  (ix+REGA),a
 3454 D1:CEF5 DD 77 01 -      ld  (ix+REGX),a
 3455 D1:CEF8 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3456 D1:CF0C C3 6D B4 D1     jp i6502NextLoad
 3457 D1:CF10 -  -  -  -  
 3458 D1:CF10 -  -  -  -  ;zeropage,Y	LAX oper,Y	B7	2	4  	
 3459 D1:CF10 -  -  -  -  inst6502_lax_zpy:
 3460 D1:CF10 ED 33 04 -      ADDCYC(4)
 3461 D1:CF13 7E -  -  -      ld  a,(hl)
 3462 D1:CF14 01 00 38 D0     ld  bc,ZEROPAGE
 3463 D1:CF18 81 -  -  -      add a,c
 3464 D1:CF19 DD 86 02 -      add a,(ix+REGY)
 3465 D1:CF1C 4F -  -  -      ld  c,a
 3466 D1:CF1D 0A -  -  -      ld  a,(bc)
 3467 D1:CF1E DD 77 00 -      ld  (ix+REGA),a
 3468 D1:CF21 DD 77 01 -      ld  (ix+REGX),a
 3469 D1:CF24 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3470 D1:CF38 C3 6D B4 D1     jp i6502NextLoad
 3471 D1:CF3C -  -  -  -  
 3472 D1:CF3C -  -  -  -  ;absolute	LAX oper	AF	3	4  	
 3473 D1:CF3C -  -  -  -  inst6502_lax_abs:
 3474 D1:CF3C ED 33 04 -      ADDCYC(4)
 3475 D1:CF3F CD F8 B4 D1     call subroutine6502_abs_split_start
 3476 D1:CF43 E5 -  -  -      push hl
 3477 D1:CF44 50 -  -  -          ld  d,b
 3478 D1:CF45 79 -  -  -          ld  a,c
 3479 D1:CF46 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3480 D1:CF48 ED 4C -  -          mlt bc
 3481 D1:CF4A 21 00 40 D0         ld  hl,PAGETABLE
 3482 D1:CF4E 09 -  -  -          add hl,bc
 3483 D1:CF4F ED 27 -  -          ld  hl,(hl)
 3484 D1:CF51 06 00 -  -          ld  b,0
 3485 D1:CF53 4F -  -  -          ld  c,a
 3486 D1:CF54 09 -  -  -          add hl,bc   ;full address
 3487 D1:CF55 CD E9 AD D1         READ_ACCESS
 3488 D1:CF59 DD 77 00 -          ld (ix+REGA),a
 3489 D1:CF5C DD 77 01 -          ld (ix+REGX),a
 3490 D1:CF5F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3491 D1:CF73 E1 -  -  -      pop hl
 3492 D1:CF74 C3 6D B4 D1     jp i6502NextLoad
 3493 D1:CF78 -  -  -  -  
 3494 D1:CF78 -  -  -  -  ;absolut,Y	LAX oper,Y	BF	3	4* 	
 3495 D1:CF78 -  -  -  -  inst6502_lax_absy:
 3496 D1:CF78 ED 33 04 -      ADDCYC(4)
 3497 D1:CF7B CD 14 B5 D1     PUSH_ABSYSPLIT
 3498 D1:CF7F CD E9 AD D1         READ_ACCESS
 3499 D1:CF83 DD 77 00 -          ld (ix+REGA),a
 3500 D1:CF86 DD 77 01 -          ld (ix+REGX),a
 3501 D1:CF89 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3502 D1:CF9D E1 -  -  -      pop hl
 3503 D1:CF9E C3 6D B4 D1     jp i6502NextLoad
 3504 D1:CFA2 -  -  -  -  
 3505 D1:CFA2 -  -  -  -  ;(indirect,X)	LAX (oper,X)	A3	2	6  	
 3506 D1:CFA2 -  -  -  -  inst6502_lax_indx:
 3507 D1:CFA2 ED 33 06 -      ADDCYC(6)
 3508 D1:CFA5 E5 -  -  -      push hl
 3509 D1:CFA6 7E -  -  -          ld  a,(hl)
 3510 D1:CFA7 21 00 38 D0         ld  hl,ZEROPAGE
 3511 D1:CFAB 85 -  -  -          add a,L
 3512 D1:CFAC DD 86 01 -          add a,(ix+REGX)
 3513 D1:CFAF 6F -  -  -          ld  L,a
 3514 D1:CFB0 7E -  -  -          ld  a,(hl)
 3515 D1:CFB1 2C -  -  -          inc L
 3516 D1:CFB2 56 -  -  -          ld  d,(hl)
 3517 D1:CFB3 42 -  -  -          ld  b,d
 3518 D1:CFB4 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3519 D1:CFB6 ED 4C -  -          mlt bc
 3520 D1:CFB8 21 00 40 D0         ld  hl,PAGETABLE
 3521 D1:CFBC 09 -  -  -          add hl,bc
 3522 D1:CFBD ED 27 -  -          ld  hl,(hl)
 3523 D1:CFBF 06 00 -  -          ld  b,0
 3524 D1:CFC1 4F -  -  -          ld  c,a
 3525 D1:CFC2 09 -  -  -          add hl,bc
 3526 D1:CFC3 CD E9 AD D1         READ_ACCESS
 3527 D1:CFC7 DD 77 00 -          ld (ix+REGA),a
 3528 D1:CFCA DD 77 01 -          ld (ix+REGX),a
 3529 D1:CFCD DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3530 D1:CFE1 E1 -  -  -      pop hl
 3531 D1:CFE2 C3 6D B4 D1     jp i6502NextLoad
 3532 D1:CFE6 -  -  -  -  
 3533 D1:CFE6 -  -  -  -  ;(indirect),Y	LAX (oper),Y	B3	2	5* 
 3534 D1:CFE6 -  -  -  -  inst6502_lax_indy:
 3535 D1:CFE6 ED 33 05 -      ADDCYC(5)
 3536 D1:CFE9 E5 -  -  -      push hl
 3537 D1:CFEA 7E -  -  -          ld  a,(hl)
 3538 D1:CFEB 21 00 38 D0         ld  hl,ZEROPAGE
 3539 D1:CFEF 85 -  -  -          add a,L
 3540 D1:CFF0 6F -  -  -          ld  L,a
 3541 D1:CFF1 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3542 D1:CFF2 2C -  -  -          inc L
 3543 D1:CFF3 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3544 D1:CFF6 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3545 D1:CFF7 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3546 D1:CFF9 FD 23 -  -          ADDCYC(1)
 3547 D1:CFFB 24 -  -  -          inc h
 3548 D1:CFFC 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3549 D1:CFFD 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3550 D1:CFFF ED 6C -  -          mlt hl          ;23.
 3551 D1:D001 01 00 40 D0         ld  bc,PAGETABLE
 3552 D1:D005 09 -  -  -          add hl,bc
 3553 D1:D006 ED 27 -  -          ld  hl,(hl)     ;address get.
 3554 D1:D008 01 00 00 00         ld  bc,0
 3555 D1:D00C 4F -  -  -          ld  c,a
 3556 D1:D00D 09 -  -  -          add hl,bc       ;Full address get.
 3557 D1:D00E CD E9 AD D1         READ_ACCESS
 3558 D1:D012 DD 77 00 -          ld  (ix+REGA),a
 3559 D1:D015 DD 77 01 -          ld  (ix+REGX),a
 3560 D1:D018 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3561 D1:D02C E1 -  -  -      pop hl
 3562 D1:D02D C3 6D B4 D1     jp i6502NextLoad
 3563 D1:D031 -  -  -  -  
 3564 D1:D031 -  -  -  -  ;-----------------------------------------------------------------------------
 3565 D1:D031 -  -  -  -  ;LXA (LAX immediate)
 3566 D1:D031 -  -  -  -  ;Store * AND oper in A and X
 3567 D1:D031 -  -  -  -  ;Highly unstable, involves a 'magic' constant, see ANE
 3568 D1:D031 -  -  -  -  ;(A OR CONST) AND oper -> A -> X
 3569 D1:D031 -  -  -  -  ;immediate	LXA #oper	AB	2	2  	††
 3570 D1:D031 -  -  -  -  inst6502_lxa:
 3571 D1:D031 ED 33 02 -      ADDCYC(2)
 3572 D1:D034 ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3573 D1:D036 DD B6 00 -      or  a,(ix+REGA)
 3574 D1:D039 A6 -  -  -      and a,(hl)
 3575 D1:D03A DD 77 00 -      ld  (ix+REGA),a
 3576 D1:D03D DD 77 01 -      ld  (ix+REGX),a
 3577 D1:D040 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3578 D1:D054 C3 6D B4 D1     jp  i6502NextLoad
 3579 D1:D058 -  -  -  -  
 3580 D1:D058 -  -  -  -  ;-----------------------------------------------------------------------------
 3581 D1:D058 -  -  -  -  ;RLA - ROL oper + AND oper
 3582 D1:D058 -  -  -  -  ;M = C <- [76543210] <- C, A AND M -> A. flags CZN
 3583 D1:D058 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3584 D1:D058 -  -  -  -  ;zeropage	RLA oper	27	2	5  	
 3585 D1:D058 -  -  -  -  inst6502_rla_zp:
 3586 D1:D058 ED 33 05 -      ADDCYC(5)
 3587 D1:D05B 7E -  -  -      ld  a,(hl)
 3588 D1:D05C 01 00 38 D0     ld  bc,ZEROPAGE
 3589 D1:D060 81 -  -  -      add a,c
 3590 D1:D061 4F -  -  -      ld  c,a
 3591 D1:D062 DD 7E 04 -      ld  a,(ix+REGSR)
 3592 D1:D065 1F -  -  -      rra
 3593 D1:D066 0A -  -  -      ld  a,(bc)
 3594 D1:D067 17 -  -  -      rla
 3595 D1:D068 02 -  -  -      ld  (bc),a
 3596 D1:D069 -  -  -  -      ;Flag breakdown to optimize for split operation
 3597 D1:D069 DD 46 04 -      ld  b,(ix+REGSR)
 3598 D1:D06C CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3599 D1:D072 DD A6 00 -      and a,(ix+REGA)
 3600 D1:D075 DD 77 00 -      ld  (ix+REGA),a
 3601 D1:D078 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3602 D1:D07E 87 -  -  -      add a,a
 3603 D1:D07F CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3604 D1:D085 DD 70 04 -      ld  (ix+REGSR),b
 3605 D1:D088 C3 6D B4 D1     jp i6502NextLoad
 3606 D1:D08C -  -  -  -  
 3607 D1:D08C -  -  -  -  ;zeropage,X	RLA oper,X	37	2	6  	
 3608 D1:D08C -  -  -  -  inst6502_rla_zpx:
 3609 D1:D08C ED 33 06 -      ADDCYC(6)
 3610 D1:D08F 7E -  -  -      ld  a,(hl)
 3611 D1:D090 01 00 38 D0     ld  bc,ZEROPAGE
 3612 D1:D094 81 -  -  -      add a,c
 3613 D1:D095 DD 86 01 -      add a,(ix+REGX)
 3614 D1:D098 4F -  -  -      ld  c,a
 3615 D1:D099 DD 7E 04 -      ld  a,(ix+REGSR)
 3616 D1:D09C 1F -  -  -      rra
 3617 D1:D09D 0A -  -  -      ld  a,(bc)
 3618 D1:D09E 17 -  -  -      rla
 3619 D1:D09F 02 -  -  -      ld  (bc),a
 3620 D1:D0A0 -  -  -  -      ;Flag breakdown to optimize for split operation
 3621 D1:D0A0 DD 46 04 -      ld  b,(ix+REGSR)
 3622 D1:D0A3 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3623 D1:D0A9 DD A6 00 -      and a,(ix+REGA)
 3624 D1:D0AC DD 77 00 -      ld  (ix+REGA),a
 3625 D1:D0AF CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3626 D1:D0B5 87 -  -  -      add a,a
 3627 D1:D0B6 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3628 D1:D0BC DD 70 04 -      ld  (ix+REGSR),b
 3629 D1:D0BF C3 6D B4 D1     jp i6502NextLoad
 3630 D1:D0C3 -  -  -  -  
 3631 D1:D0C3 -  -  -  -  ;absolute	RLA oper	2F	3	6  	
 3632 D1:D0C3 -  -  -  -  inst6502_rla_abs:
 3633 D1:D0C3 ED 33 06 -      ADDCYC(6)
 3634 D1:D0C6 CD F8 B4 D1     call subroutine6502_abs_split_start
 3635 D1:D0CA E5 -  -  -      push hl
 3636 D1:D0CB 50 -  -  -          ld  d,b
 3637 D1:D0CC 79 -  -  -          ld  a,c
 3638 D1:D0CD 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3639 D1:D0CF ED 4C -  -          mlt bc
 3640 D1:D0D1 21 00 40 D0         ld  hl,PAGETABLE
 3641 D1:D0D5 09 -  -  -          add hl,bc
 3642 D1:D0D6 ED 27 -  -          ld  hl,(hl)
 3643 D1:D0D8 06 00 -  -          ld  b,0
 3644 D1:D0DA 4F -  -  -          ld  c,a
 3645 D1:D0DB 09 -  -  -          add hl,bc   ;full address
 3646 D1:D0DC CD E9 AD D1         READ_ACCESS
 3647 D1:D0E0 DD 46 04 -          ld  b,(ix+REGSR)
 3648 D1:D0E3 CB 18 -  -          rr b
 3649 D1:D0E5 17 -  -  -          rla
 3650 D1:D0E6 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3651 D1:D0E7 -  -  -  -          ;Split oper
 3652 D1:D0E7 DD 46 04 -          ld  b,(ix+REGSR)
 3653 D1:D0EA CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3654 D1:D0F0 DD A6 00 -          and a,(ix+REGA)
 3655 D1:D0F3 DD 77 00 -          ld  (ix+REGA),a
 3656 D1:D0F6 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3657 D1:D0FC 87 -  -  -          add a,a
 3658 D1:D0FD CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3659 D1:D103 DD 70 04 -          ld  (ix+REGSR),b
 3660 D1:D106 41 -  -  -          ld  b,c
 3661 D1:D107 CD 0C AE D1         WRITE_ACCESS
 3662 D1:D10B E1 -  -  -      pop hl
 3663 D1:D10C C3 6D B4 D1     jp i6502NextLoad
 3664 D1:D110 -  -  -  -  
 3665 D1:D110 -  -  -  -  ;absolut,X	RLA oper,X	3F	3	7  	
 3666 D1:D110 -  -  -  -  inst6502_rla_absx:
 3667 D1:D110 ED 33 07 -      ADDCYC(7)
 3668 D1:D113 CD 55 B5 D1     PUSH_ABSXSPLIT_NODEP
 3669 D1:D117 CD E9 AD D1         READ_ACCESS
 3670 D1:D11B DD 46 04 -          ld  b,(ix+REGSR)
 3671 D1:D11E CB 18 -  -          rr b
 3672 D1:D120 17 -  -  -          rla
 3673 D1:D121 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3674 D1:D122 -  -  -  -          ;Split oper
 3675 D1:D122 DD 46 04 -          ld  b,(ix+REGSR)
 3676 D1:D125 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3677 D1:D12B DD A6 00 -          and a,(ix+REGA)
 3678 D1:D12E DD 77 00 -          ld  (ix+REGA),a
 3679 D1:D131 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3680 D1:D137 87 -  -  -          add a,a
 3681 D1:D138 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3682 D1:D13E DD 70 04 -          ld  (ix+REGSR),b
 3683 D1:D141 41 -  -  -          ld  b,c
 3684 D1:D142 CD 0C AE D1         WRITE_ACCESS
 3685 D1:D146 E1 -  -  -      pop hl
 3686 D1:D147 C3 6D B4 D1     jp i6502NextLoad
 3687 D1:D14B -  -  -  -  
 3688 D1:D14B -  -  -  -  ;absolut,Y	RLA oper,Y	3B	3	7  	
 3689 D1:D14B -  -  -  -  inst6502_rla_absy:
 3690 D1:D14B ED 33 07 -      ADDCYC(7)
 3691 D1:D14E CD 50 B5 D1     PUSH_ABSYSPLIT_NODEP
 3692 D1:D152 CD E9 AD D1         READ_ACCESS
 3693 D1:D156 DD 46 04 -          ld  b,(ix+REGSR)
 3694 D1:D159 CB 18 -  -          rr b
 3695 D1:D15B 17 -  -  -          rla
 3696 D1:D15C 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3697 D1:D15D -  -  -  -          ;Split oper
 3698 D1:D15D DD 46 04 -          ld  b,(ix+REGSR)
 3699 D1:D160 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3700 D1:D166 DD A6 00 -          and a,(ix+REGA)
 3701 D1:D169 DD 77 00 -          ld  (ix+REGA),a
 3702 D1:D16C CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3703 D1:D172 87 -  -  -          add a,a
 3704 D1:D173 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3705 D1:D179 DD 70 04 -          ld  (ix+REGSR),b
 3706 D1:D17C 41 -  -  -          ld  b,c
 3707 D1:D17D CD 0C AE D1         WRITE_ACCESS
 3708 D1:D181 E1 -  -  -      pop hl
 3709 D1:D182 C3 6D B4 D1     jp i6502NextLoad
 3710 D1:D186 -  -  -  -  
 3711 D1:D186 -  -  -  -  ;(indirect,X)	RLA (oper,X)	23	2	8  	
 3712 D1:D186 -  -  -  -  isnt6502_rla_indx:
 3713 D1:D186 ED 33 08 -      ADDCYC(8)
 3714 D1:D189 E5 -  -  -      push hl
 3715 D1:D18A 7E -  -  -          ld  a,(hl)
 3716 D1:D18B 21 00 38 D0         ld  hl,ZEROPAGE
 3717 D1:D18F 85 -  -  -          add a,L
 3718 D1:D190 DD 86 01 -          add a,(ix+REGX)
 3719 D1:D193 6F -  -  -          ld  L,a
 3720 D1:D194 7E -  -  -          ld  a,(hl)
 3721 D1:D195 2C -  -  -          inc L
 3722 D1:D196 56 -  -  -          ld  d,(hl)
 3723 D1:D197 42 -  -  -          ld  b,d
 3724 D1:D198 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3725 D1:D19A ED 4C -  -          mlt bc
 3726 D1:D19C 21 00 40 D0         ld  hl,PAGETABLE
 3727 D1:D1A0 09 -  -  -          add hl,bc
 3728 D1:D1A1 ED 27 -  -          ld  hl,(hl)
 3729 D1:D1A3 06 00 -  -          ld  b,0
 3730 D1:D1A5 4F -  -  -          ld  c,a
 3731 D1:D1A6 09 -  -  -          add hl,bc
 3732 D1:D1A7 CD E9 AD D1         READ_ACCESS
 3733 D1:D1AB DD 46 04 -          ld  b,(ix+REGSR)
 3734 D1:D1AE CB 18 -  -          rr b
 3735 D1:D1B0 17 -  -  -          rla
 3736 D1:D1B1 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3737 D1:D1B2 -  -  -  -          ;Split oper
 3738 D1:D1B2 DD 46 04 -          ld  b,(ix+REGSR)
 3739 D1:D1B5 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3740 D1:D1BB DD A6 00 -          and a,(ix+REGA)
 3741 D1:D1BE DD 77 00 -          ld  (ix+REGA),a
 3742 D1:D1C1 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3743 D1:D1C7 87 -  -  -          add a,a
 3744 D1:D1C8 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3745 D1:D1CE DD 70 04 -          ld  (ix+REGSR),b
 3746 D1:D1D1 41 -  -  -          ld  b,c
 3747 D1:D1D2 CD 0C AE D1         WRITE_ACCESS
 3748 D1:D1D6 E1 -  -  -      pop hl
 3749 D1:D1D7 C3 6D B4 D1     jp  i6502NextLoad
 3750 D1:D1DB -  -  -  -  
 3751 D1:D1DB -  -  -  -  ;(indirect),Y	RLA (oper),Y	33	2	8  
 3752 D1:D1DB -  -  -  -  inst6502_rla_indy:
 3753 D1:D1DB ED 33 08 -      ADDCYC(8)
 3754 D1:D1DE E5 -  -  -      push hl
 3755 D1:D1DF 7E -  -  -          ld  a,(hl)
 3756 D1:D1E0 21 00 38 D0         ld  hl,ZEROPAGE
 3757 D1:D1E4 85 -  -  -          add a,L
 3758 D1:D1E5 6F -  -  -          ld  L,a
 3759 D1:D1E6 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3760 D1:D1E7 2C -  -  -          inc L
 3761 D1:D1E8 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3762 D1:D1EB 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3763 D1:D1EC 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3764 D1:D1EE 24 -  -  -          inc h
 3765 D1:D1EF 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3766 D1:D1F0 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3767 D1:D1F2 ED 6C -  -          mlt hl          ;23.
 3768 D1:D1F4 01 00 40 D0         ld  bc,PAGETABLE
 3769 D1:D1F8 09 -  -  -          add hl,bc
 3770 D1:D1F9 ED 27 -  -          ld  hl,(hl)     ;address get.
 3771 D1:D1FB 01 00 00 00         ld  bc,0
 3772 D1:D1FF 4F -  -  -          ld  c,a
 3773 D1:D200 09 -  -  -          add hl,bc       ;Full address get.
 3774 D1:D201 CD E9 AD D1         READ_ACCESS
 3775 D1:D205 DD 46 04 -          ld  b,(ix+REGSR)
 3776 D1:D208 CB 18 -  -          rr b
 3777 D1:D20A 17 -  -  -          rla
 3778 D1:D20B 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3779 D1:D20C -  -  -  -          ;Split oper
 3780 D1:D20C DD 46 04 -          ld  b,(ix+REGSR)
 3781 D1:D20F CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3782 D1:D215 DD A6 00 -          and a,(ix+REGA)
 3783 D1:D218 DD 77 00 -          ld  (ix+REGA),a
 3784 D1:D21B CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3785 D1:D221 87 -  -  -          add a,a
 3786 D1:D222 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3787 D1:D228 DD 70 04 -          ld  (ix+REGSR),b
 3788 D1:D22B 41 -  -  -          ld  b,c
 3789 D1:D22C CD 0C AE D1         WRITE_ACCESS
 3790 D1:D230 E1 -  -  -      pop hl
 3791 D1:D231 C3 6D B4 D1     jp  i6502NextLoad
 3792 D1:D235 -  -  -  -  
 3793 D1:D235 -  -  -  -  ;-----------------------------------------------------------------------------
 3794 D1:D235 -  -  -  -  ;RRA
 3795 D1:D235 -  -  -  -  ;ROR oper + ADC oper
 3796 D1:D235 -  -  -  -  ;M = C -> [76543210] -> C, A + M + C -> A, C. Affects VCZN
 3797 D1:D235 -  -  -  -  
 3798 D1:D235 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3799 D1:D235 -  -  -  -  ;zeropage	RRA oper	67	2	5  	
 3800 D1:D235 -  -  -  -  inst6502_rra_zp:
 3801 D1:D235 ED 33 05 -      ADDCYC(5)
 3802 D1:D238 7E -  -  -      ld  a,(hl)
 3803 D1:D239 01 00 38 D0     ld  bc,ZEROPAGE
 3804 D1:D23D 81 -  -  -      add a,c
 3805 D1:D23E 4F -  -  -      ld  c,a
 3806 D1:D23F DD 7E 04 -      ld  a,(ix+REGSR)
 3807 D1:D242 1F -  -  -      rra
 3808 D1:D243 0A -  -  -      ld  a,(bc)
 3809 D1:D244 1F -  -  -      rra
 3810 D1:D245 02 -  -  -      ld  (bc),a
 3811 D1:D246 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 3812 D1:D24A 30 04 -  -      jr nc,$+6
 3813 D1:D24C DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 3814 D1:D250 4F -  -  -      ld  c,a
 3815 D1:D251 C3 8A B5 D1     jp  subroutine6502_adc_combined_end
 3816 D1:D255 -  -  -  -  
 3817 D1:D255 -  -  -  -  ;zeropage,X	RRA oper,X	77	2	6  	
 3818 D1:D255 -  -  -  -  inst6502_rra_zpx:
 3819 D1:D255 ED 33 06 -      ADDCYC(6)
 3820 D1:D258 7E -  -  -      ld  a,(hl)
 3821 D1:D259 01 00 38 D0     ld  bc,ZEROPAGE
 3822 D1:D25D 81 -  -  -      add a,c
 3823 D1:D25E DD 86 01 -      add a,(ix+REGX)
 3824 D1:D261 4F -  -  -      ld  c,a
 3825 D1:D262 DD 7E 04 -      ld  a,(ix+REGSR)
 3826 D1:D265 1F -  -  -      rra
 3827 D1:D266 0A -  -  -      ld  a,(bc)
 3828 D1:D267 1F -  -  -      rra
 3829 D1:D268 02 -  -  -      ld  (bc),a
 3830 D1:D269 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 3831 D1:D26D 30 04 -  -      jr nc,$+6
 3832 D1:D26F DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 3833 D1:D273 4F -  -  -      ld  c,a
 3834 D1:D274 C3 8A B5 D1     jp  subroutine6502_adc_combined_end
 3835 D1:D278 -  -  -  -  
 3836 D1:D278 -  -  -  -  ;absolute	RRA oper	6F	3	6  	
 3837 D1:D278 -  -  -  -  inst6502_rra_abs:
 3838 D1:D278 ED 33 06 -      ADDCYC(6)
 3839 D1:D27B CD F8 B4 D1     call subroutine6502_abs_split_start
 3840 D1:D27F E5 -  -  -      push hl
 3841 D1:D280 50 -  -  -          ld  d,b
 3842 D1:D281 79 -  -  -          ld  a,c
 3843 D1:D282 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3844 D1:D284 ED 4C -  -          mlt bc
 3845 D1:D286 21 00 40 D0         ld  hl,PAGETABLE
 3846 D1:D28A 09 -  -  -          add hl,bc
 3847 D1:D28B ED 27 -  -          ld  hl,(hl)
 3848 D1:D28D 06 00 -  -          ld  b,0
 3849 D1:D28F 4F -  -  -          ld  c,a
 3850 D1:D290 09 -  -  -          add hl,bc   ;full address
 3851 D1:D291 CD E9 AD D1         READ_ACCESS
 3852 D1:D295 DD 46 04 -          ld  b,(ix+REGSR)
 3853 D1:D298 CB 18 -  -          rr b
 3854 D1:D29A 1F -  -  -          rra
 3855 D1:D29B DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3856 D1:D29F 30 04 -  -          jr nc,$+6
 3857 D1:D2A1 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3858 D1:D2A5 47 -  -  -          ld  b,a
 3859 D1:D2A6 C5 -  -  -          push bc
 3860 D1:D2A7 CD 0C AE D1             WRITE_ACCESS
 3861 D1:D2AB C1 -  -  -          pop bc
 3862 D1:D2AC 48 -  -  -          ld c,b
 3863 D1:D2AD E1 -  -  -      pop hl
 3864 D1:D2AE C3 8A B5 D1     jp  subroutine6502_adc_combined_end
 3865 D1:D2B2 -  -  -  -  
 3866 D1:D2B2 -  -  -  -  ;absolut,X	RRA oper,X	7F	3	7  	
 3867 D1:D2B2 -  -  -  -  inst6502_rra_absx:
 3868 D1:D2B2 ED 33 07 -      ADDCYC(7)
 3869 D1:D2B5 CD 55 B5 D1     PUSH_ABSXSPLIT_NODEP
 3870 D1:D2B9 CD E9 AD D1         READ_ACCESS
 3871 D1:D2BD DD 46 04 -          ld  b,(ix+REGSR)
 3872 D1:D2C0 CB 18 -  -          rr b
 3873 D1:D2C2 1F -  -  -          rra
 3874 D1:D2C3 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3875 D1:D2C7 30 04 -  -          jr nc,$+6
 3876 D1:D2C9 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3877 D1:D2CD 47 -  -  -          ld  b,a
 3878 D1:D2CE C5 -  -  -          push bc
 3879 D1:D2CF CD 0C AE D1             WRITE_ACCESS
 3880 D1:D2D3 C1 -  -  -          pop bc
 3881 D1:D2D4 48 -  -  -          ld c,b
 3882 D1:D2D5 E1 -  -  -      pop hl
 3883 D1:D2D6 C3 8A B5 D1     jp  subroutine6502_adc_combined_end
 3884 D1:D2DA -  -  -  -  
 3885 D1:D2DA -  -  -  -  ;absolut,Y	RRA oper,Y	7B	3	7  	
 3886 D1:D2DA -  -  -  -  inst6502_rra_absy:
 3887 D1:D2DA ED 33 07 -      ADDCYC(7)
 3888 D1:D2DD CD 50 B5 D1     PUSH_ABSYSPLIT_NODEP
 3889 D1:D2E1 CD E9 AD D1         READ_ACCESS
 3890 D1:D2E5 DD 46 04 -          ld  b,(ix+REGSR)
 3891 D1:D2E8 CB 18 -  -          rr b
 3892 D1:D2EA 1F -  -  -          rra
 3893 D1:D2EB DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3894 D1:D2EF 30 04 -  -          jr nc,$+6
 3895 D1:D2F1 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3896 D1:D2F5 47 -  -  -          ld  b,a
 3897 D1:D2F6 C5 -  -  -          push bc
 3898 D1:D2F7 CD 0C AE D1             WRITE_ACCESS
 3899 D1:D2FB C1 -  -  -          pop bc
 3900 D1:D2FC 48 -  -  -          ld c,b
 3901 D1:D2FD E1 -  -  -      pop hl
 3902 D1:D2FE C3 8A B5 D1     jp  subroutine6502_adc_combined_end
 3903 D1:D302 -  -  -  -  
 3904 D1:D302 -  -  -  -  ;(indirect,X)	RRA (oper,X)	63	2	8  	
 3905 D1:D302 -  -  -  -  isnt6502_rra_indx:
 3906 D1:D302 ED 33 08 -      ADDCYC(8)
 3907 D1:D305 E5 -  -  -      push hl
 3908 D1:D306 7E -  -  -          ld  a,(hl)
 3909 D1:D307 21 00 38 D0         ld  hl,ZEROPAGE
 3910 D1:D30B 85 -  -  -          add a,L
 3911 D1:D30C DD 86 01 -          add a,(ix+REGX)
 3912 D1:D30F 6F -  -  -          ld  L,a
 3913 D1:D310 7E -  -  -          ld  a,(hl)
 3914 D1:D311 2C -  -  -          inc L
 3915 D1:D312 56 -  -  -          ld  d,(hl)
 3916 D1:D313 42 -  -  -          ld  b,d
 3917 D1:D314 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3918 D1:D316 ED 4C -  -          mlt bc
 3919 D1:D318 21 00 40 D0         ld  hl,PAGETABLE
 3920 D1:D31C 09 -  -  -          add hl,bc
 3921 D1:D31D ED 27 -  -          ld  hl,(hl)
 3922 D1:D31F 06 00 -  -          ld  b,0
 3923 D1:D321 4F -  -  -          ld  c,a
 3924 D1:D322 09 -  -  -          add hl,bc
 3925 D1:D323 CD E9 AD D1         READ_ACCESS
 3926 D1:D327 DD 46 04 -          ld  b,(ix+REGSR)
 3927 D1:D32A CB 18 -  -          rr b
 3928 D1:D32C 1F -  -  -          rra
 3929 D1:D32D DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3930 D1:D331 30 04 -  -          jr nc,$+6
 3931 D1:D333 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3932 D1:D337 47 -  -  -          ld  b,a
 3933 D1:D338 C5 -  -  -          push bc
 3934 D1:D339 CD 0C AE D1             WRITE_ACCESS
 3935 D1:D33D C1 -  -  -          pop bc
 3936 D1:D33E 48 -  -  -          ld c,b
 3937 D1:D33F E1 -  -  -      pop hl
 3938 D1:D340 C3 8A B5 D1     jp  subroutine6502_adc_combined_end
 3939 D1:D344 -  -  -  -  
 3940 D1:D344 -  -  -  -  ;(indirect),Y	RRA (oper),Y	73	2	8  
 3941 D1:D344 -  -  -  -  inst6502_rra_indy:
 3942 D1:D344 ED 33 08 -      ADDCYC(8)
 3943 D1:D347 E5 -  -  -      push hl
 3944 D1:D348 7E -  -  -          ld  a,(hl)
 3945 D1:D349 21 00 38 D0         ld  hl,ZEROPAGE
 3946 D1:D34D 85 -  -  -          add a,L
 3947 D1:D34E 6F -  -  -          ld  L,a
 3948 D1:D34F 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3949 D1:D350 2C -  -  -          inc L
 3950 D1:D351 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3951 D1:D354 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3952 D1:D355 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3953 D1:D357 24 -  -  -          inc h
 3954 D1:D358 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3955 D1:D359 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3956 D1:D35B ED 6C -  -          mlt hl          ;23.
 3957 D1:D35D 01 00 40 D0         ld  bc,PAGETABLE
 3958 D1:D361 09 -  -  -          add hl,bc
 3959 D1:D362 ED 27 -  -          ld  hl,(hl)     ;address get.
 3960 D1:D364 01 00 00 00         ld  bc,0
 3961 D1:D368 4F -  -  -          ld  c,a
 3962 D1:D369 09 -  -  -          add hl,bc       ;Full address get.
 3963 D1:D36A CD E9 AD D1         READ_ACCESS
 3964 D1:D36E DD 46 04 -          ld  b,(ix+REGSR)
 3965 D1:D371 CB 18 -  -          rr b
 3966 D1:D373 1F -  -  -          rra
 3967 D1:D374 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3968 D1:D378 30 04 -  -          jr nc,$+6
 3969 D1:D37A DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3970 D1:D37E 47 -  -  -          ld  b,a
 3971 D1:D37F C5 -  -  -          push bc
 3972 D1:D380 CD 0C AE D1             WRITE_ACCESS
 3973 D1:D384 C1 -  -  -          pop bc
 3974 D1:D385 48 -  -  -          ld c,b
 3975 D1:D386 E1 -  -  -      pop hl
 3976 D1:D387 C3 8A B5 D1     jp  subroutine6502_adc_combined_end
 3977 D1:D38B -  -  -  -  
 3978 D1:D38B -  -  -  -  ;-----------------------------------------------------------------------------
 3979 D1:D38B -  -  -  -  ;SAX (AXS, AAX) - A AND X -> M
 3980 D1:D38B -  -  -  -  ;A and X are put on the bus at the same time (resulting effectively in an 
 3981 D1:D38B -  -  -  -  ;AND operation) and stored in M. Flags not affected.
 3982 D1:D38B -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3983 D1:D38B -  -  -  -  ;zeropage	SAX oper	87	2	3  	
 3984 D1:D38B -  -  -  -  inst6502_sax_zp:
 3985 D1:D38B ED 33 03 -      ADDCYC(3)
 3986 D1:D38E 7E -  -  -      ld  a,(hl)
 3987 D1:D38F 01 00 38 D0     ld  bc,ZEROPAGE
 3988 D1:D393 81 -  -  -      add a,c
 3989 D1:D394 4F -  -  -      ld  c,a
 3990 D1:D395 DD 7E 00 -      ld  a,(ix+REGA)
 3991 D1:D398 DD A6 01 -      and a,(ix+REGX)
 3992 D1:D39B 02 -  -  -      ld  (bc),a
 3993 D1:D39C C3 6D B4 D1     jp i6502NextLoad
 3994 D1:D3A0 -  -  -  -  
 3995 D1:D3A0 -  -  -  -  
 3996 D1:D3A0 -  -  -  -  ;zeropage,Y	SAX oper,Y	97	2	4  	
 3997 D1:D3A0 -  -  -  -  inst6502_sax_zpy:
 3998 D1:D3A0 ED 33 04 -      ADDCYC(4)
 3999 D1:D3A3 7E -  -  -      ld  a,(hl)
 4000 D1:D3A4 01 00 38 D0     ld  bc,ZEROPAGE
 4001 D1:D3A8 81 -  -  -      add a,c
 4002 D1:D3A9 DD 86 02 -      add a,(ix+REGY)
 4003 D1:D3AC 4F -  -  -      ld  c,a
 4004 D1:D3AD DD 7E 00 -      ld  a,(ix+REGA)
 4005 D1:D3B0 DD A6 01 -      and a,(ix+REGX)
 4006 D1:D3B3 02 -  -  -      ld  (bc),a
 4007 D1:D3B4 C3 6D B4 D1     jp i6502NextLoad
 4008 D1:D3B8 -  -  -  -  
 4009 D1:D3B8 -  -  -  -  
 4010 D1:D3B8 -  -  -  -  ;absolute	SAX oper	8F	3	4  	
 4011 D1:D3B8 -  -  -  -  inst6502_sax_abs:
 4012 D1:D3B8 ED 33 04 -      ADDCYC(4)
 4013 D1:D3BB CD F8 B4 D1     call subroutine6502_abs_split_start
 4014 D1:D3BF E5 -  -  -      push hl
 4015 D1:D3C0 50 -  -  -          ld  d,b
 4016 D1:D3C1 79 -  -  -          ld  a,c
 4017 D1:D3C2 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4018 D1:D3C4 ED 4C -  -          mlt bc
 4019 D1:D3C6 21 00 40 D0         ld  hl,PAGETABLE
 4020 D1:D3CA 09 -  -  -          add hl,bc
 4021 D1:D3CB ED 27 -  -          ld  hl,(hl)
 4022 D1:D3CD 06 00 -  -          ld  b,0
 4023 D1:D3CF 4F -  -  -          ld  c,a
 4024 D1:D3D0 09 -  -  -          add hl,bc   ;full address
 4025 D1:D3D1 DD 7E 00 -          ld  a,(ix+REGA)
 4026 D1:D3D4 DD A6 01 -          and a,(ix+REGX)
 4027 D1:D3D7 47 -  -  -          ld  b,a
 4028 D1:D3D8 CD 0C AE D1         WRITE_ACCESS
 4029 D1:D3DC E1 -  -  -      pop hl
 4030 D1:D3DD C3 6D B4 D1     jp i6502NextLoad
 4031 D1:D3E1 -  -  -  -  
 4032 D1:D3E1 -  -  -  -  ;(indirect,X)	SAX (oper,X)	83	2	6  
 4033 D1:D3E1 -  -  -  -  inst6502_sax_indx:
 4034 D1:D3E1 ED 33 06 -      ADDCYC(6)
 4035 D1:D3E4 E5 -  -  -      push hl
 4036 D1:D3E5 7E -  -  -          ld  a,(hl)
 4037 D1:D3E6 21 00 38 D0         ld  hl,ZEROPAGE
 4038 D1:D3EA 85 -  -  -          add a,L
 4039 D1:D3EB DD 86 01 -          add a,(ix+REGX)
 4040 D1:D3EE 6F -  -  -          ld  L,a
 4041 D1:D3EF 7E -  -  -          ld  a,(hl)
 4042 D1:D3F0 2C -  -  -          inc L
 4043 D1:D3F1 56 -  -  -          ld  d,(hl)
 4044 D1:D3F2 42 -  -  -          ld  b,d
 4045 D1:D3F3 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4046 D1:D3F5 ED 4C -  -          mlt bc
 4047 D1:D3F7 21 00 40 D0         ld  hl,PAGETABLE
 4048 D1:D3FB 09 -  -  -          add hl,bc
 4049 D1:D3FC ED 27 -  -          ld  hl,(hl)
 4050 D1:D3FE 06 00 -  -          ld  b,0
 4051 D1:D400 4F -  -  -          ld  c,a
 4052 D1:D401 09 -  -  -          add hl,bc
 4053 D1:D402 DD 7E 00 -          ld  a,(ix+REGA)
 4054 D1:D405 DD A6 01 -          and a,(ix+REGX)
 4055 D1:D408 47 -  -  -          ld  b,a
 4056 D1:D409 CD 0C AE D1         WRITE_ACCESS
 4057 D1:D40D E1 -  -  -      pop hl
 4058 D1:D40E C3 6D B4 D1     jp i6502NextLoad
 4059 D1:D412 -  -  -  -  
 4060 D1:D412 -  -  -  -  ;-----------------------------------------------------------------------------
 4061 D1:D412 -  -  -  -  ;SBX (AXS, SAX) - CMP and DEX at once, sets flags like CMP
 4062 D1:D412 -  -  -  -  ;(A AND X) - oper -> X.  Flags affected: CZN
 4063 D1:D412 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4064 D1:D412 -  -  -  -  ;immediate	SBX #oper	CB	2	2  
 4065 D1:D412 -  -  -  -  inst6502_sbx_imm:
 4066 D1:D412 DD 7E 00 -      ld  a,(ix+REGA)
 4067 D1:D415 DD A6 01 -      and a,(ix+REGX)
 4068 D1:D418 96 -  -  -      sub a,(hl)
 4069 D1:D419 DD 77 01 -      ld  (ix+REGX),a
 4070 D1:D41C 3F -  -  -      ccf
 4071 D1:D41D DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 4072 D1:D437 C3 6D B4 D1     jp  i6502NextLoad
 4073 D1:D43B -  -  -  -  
 4074 D1:D43B -  -  -  -  ;-----------------------------------------------------------------------------
 4075 D1:D43B -  -  -  -  ;SHA (AHX, AXA) - Stores A AND X AND (high-byte of addr. + 1) at addr.
 4076 D1:D43B -  -  -  -  ;unstable: sometimes 'AND (H+1)' is dropped, 
 4077 D1:D43B -  -  -  -  ;page boundary crossings may not work 
 4078 D1:D43B -  -  -  -  ;(with the high-byte of the value used as the high-byte of the address)
 4079 D1:D43B -  -  -  -  ;A AND X AND (H+1) -> M
 4080 D1:D43B -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4081 D1:D43B -  -  -  -  ;
 4082 D1:D43B -  -  -  -  ;NOTE: NOT GOING TO IMPLEMENT THESE. THEY'LL ADVANCE THE 6502 PC IN THE CORRECT
 4083 D1:D43B -  -  -  -  ;MANNER BUT NOTHING MORE. THE CPU WILL HALT WHEN ENCOUNTERING ONE OF THESE.
 4084 D1:D43B -  -  -  -  ;
 4085 D1:D43B -  -  -  -  ;absolut,Y	SHA oper,Y	9F	3	5  	†
 4086 D1:D43B -  -  -  -  inst6502_sha_absy:
 4087 D1:D43B ED 33 05 -      ADDCYC(5)
 4088 D1:D43E CD 14 B5 D1     PUSH_ABSYSPLIT
 4089 D1:D442 18 FE -  -          jr $
 4090 D1:D444 E1 -  -  -      pop hl
 4091 D1:D445 C3 6D B4 D1     jp i6502NextLoad
 4092 D1:D449 -  -  -  -  
 4093 D1:D449 -  -  -  -  ;(indirect),Y	SHA (oper),Y	93	2	6  	†
 4094 D1:D449 -  -  -  -  inst6502_sha_indy:
 4095 D1:D449 ED 33 06 -      ADDCYC(6)
 4096 D1:D44C E5 -  -  -      push hl
 4097 D1:D44D 7E -  -  -          ld  a,(hl)
 4098 D1:D44E 21 00 38 D0         ld  hl,ZEROPAGE
 4099 D1:D452 85 -  -  -          add a,L
 4100 D1:D453 6F -  -  -          ld  L,a
 4101 D1:D454 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4102 D1:D455 2C -  -  -          inc L
 4103 D1:D456 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4104 D1:D459 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4105 D1:D45A 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4106 D1:D45C 24 -  -  -          inc h
 4107 D1:D45D 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4108 D1:D45E 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4109 D1:D460 ED 6C -  -          mlt hl          ;23.
 4110 D1:D462 01 00 40 D0         ld  bc,PAGETABLE
 4111 D1:D466 09 -  -  -          add hl,bc
 4112 D1:D467 ED 27 -  -          ld  hl,(hl)     ;address get.
 4113 D1:D469 01 00 00 00         ld  bc,0
 4114 D1:D46D 4F -  -  -          ld  c,a
 4115 D1:D46E 09 -  -  -          add hl,bc       ;Full address get.
 4116 D1:D46F CD E9 AD D1         READ_ACCESS
 4117 D1:D473 18 FE -  -          jr $
 4118 D1:D475 E1 -  -  -      pop hl
 4119 D1:D476 C3 6D B4 D1     jp i6502NextLoad
 4120 D1:D47A -  -  -  -  
 4121 D1:D47A -  -  -  -  ;-----------------------------------------------------------------------------
 4122 D1:D47A -  -  -  -  ;SHX (A11, SXA, XAS)
 4123 D1:D47A -  -  -  -  ;SHY (A11, SYA, SAY)
 4124 D1:D47A -  -  -  -  ;TAS (XAS, SHS)
 4125 D1:D47A -  -  -  -  ;Not going to implement these, but they'll still get the program
 4126 D1:D47A -  -  -  -  ;counter to make the correct noises. Right before locking up the core.
 4127 D1:D47A -  -  -  -  ;All of these instructions are marked as "unstable" in that they'll sometimes
 4128 D1:D47A -  -  -  -  ;drop the high byte, and page crossings sometimes won't work.
 4129 D1:D47A -  -  -  -  
 4130 D1:D47A -  -  -  -  ;absolut,Y	SHX oper,Y	9E	3	5  	†
 4131 D1:D47A -  -  -  -  inst6502_shx_absy:
 4132 D1:D47A ED 33 05 -      ADDCYC(5)
 4133 D1:D47D CD 50 B5 D1     PUSH_ABSYSPLIT_NODEP
 4134 D1:D481 18 FE -  -          jr $
 4135 D1:D483 E1 -  -  -      pop hl
 4136 D1:D484 C3 6D B4 D1     jp i6502NextLoad
 4137 D1:D488 -  -  -  -  
 4138 D1:D488 -  -  -  -  ;absolut,X	SHY oper,X	9C	3	5  	†
 4139 D1:D488 -  -  -  -  inst6502_shy_absx:
 4140 D1:D488 ED 33 05 -      ADDCYC(5)
 4141 D1:D48B CD 55 B5 D1     PUSH_ABSXSPLIT_NODEP
 4142 D1:D48F 18 FE -  -          jr $
 4143 D1:D491 E1 -  -  -      pop hl
 4144 D1:D492 C3 6D B4 D1     jp i6502NextLoad
 4145 D1:D496 -  -  -  -  
 4146 D1:D496 -  -  -  -  ;absolut,Y	TAS oper,Y	9B	3	5  	†
 4147 D1:D496 -  -  -  -  inst6502_tas_absy:
 4148 D1:D496 ED 33 05 -      ADDCYC(5)
 4149 D1:D499 CD 50 B5 D1     PUSH_ABSYSPLIT_NODEP
 4150 D1:D49D 18 FE -  -          jr $
 4151 D1:D49F E1 -  -  -      pop hl
 4152 D1:D4A0 C3 6D B4 D1     jp i6502NextLoad
 4153 D1:D4A4 -  -  -  -  
 4154 D1:D4A4 -  -  -  -  ;-----------------------------------------------------------------------------
 4155 D1:D4A4 -  -  -  -  ;SLO (ASO) - ASL oper + ORA oper
 4156 D1:D4A4 -  -  -  -  ;M = C <- [76543210] <- 0, A OR M -> A. Affects: CZN
 4157 D1:D4A4 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4158 D1:D4A4 -  -  -  -  
 4159 D1:D4A4 -  -  -  -  ;zeropage	SLO oper	07	2	5  	
 4160 D1:D4A4 -  -  -  -  inst6502_slo_zp:
 4161 D1:D4A4 ED 33 05 -      ADDCYC(5)
 4162 D1:D4A7 7E -  -  -      ld  a,(hl)
 4163 D1:D4A8 01 00 38 D0     ld  bc,ZEROPAGE
 4164 D1:D4AC 81 -  -  -      add a,c
 4165 D1:D4AD 4F -  -  -      ld  c,a
 4166 D1:D4AE 0A -  -  -      ld  a,(bc)
 4167 D1:D4AF CB 27 -  -      sla a
 4168 D1:D4B1 02 -  -  -      ld  (bc),a
 4169 D1:D4B2 -  -  -  -      ;Flag breakdown to optimize for split operation
 4170 D1:D4B2 DD 46 04 -      ld  b,(ix+REGSR)
 4171 D1:D4B5 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4172 D1:D4BB DD B6 00 -      or  a,(ix+REGA)
 4173 D1:D4BE DD 77 00 -      ld  (ix+REGA),a
 4174 D1:D4C1 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4175 D1:D4C7 87 -  -  -      add a,a
 4176 D1:D4C8 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4177 D1:D4CE DD 70 04 -      ld  (ix+REGSR),b
 4178 D1:D4D1 C3 6D B4 D1     jp i6502NextLoad
 4179 D1:D4D5 -  -  -  -  
 4180 D1:D4D5 -  -  -  -  ;zeropage,X	SLO oper,X	17	2	6  	
 4181 D1:D4D5 -  -  -  -  inst6502_slo_zpx:
 4182 D1:D4D5 ED 33 06 -      ADDCYC(6)
 4183 D1:D4D8 7E -  -  -      ld  a,(hl)
 4184 D1:D4D9 01 00 38 D0     ld  bc,ZEROPAGE
 4185 D1:D4DD 81 -  -  -      add a,c
 4186 D1:D4DE DD 86 01 -      add a,(ix+REGX)
 4187 D1:D4E1 4F -  -  -      ld  c,a
 4188 D1:D4E2 0A -  -  -      ld  a,(bc)
 4189 D1:D4E3 CB 27 -  -      sla a
 4190 D1:D4E5 02 -  -  -      ld  (bc),a
 4191 D1:D4E6 -  -  -  -      ;Flag breakdown to optimize for split operation
 4192 D1:D4E6 DD 46 04 -      ld  b,(ix+REGSR)
 4193 D1:D4E9 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4194 D1:D4EF DD B6 00 -      or  a,(ix+REGA)
 4195 D1:D4F2 DD 77 00 -      ld  (ix+REGA),a
 4196 D1:D4F5 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4197 D1:D4FB 87 -  -  -      add a,a
 4198 D1:D4FC CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4199 D1:D502 DD 70 04 -      ld  (ix+REGSR),b
 4200 D1:D505 C3 6D B4 D1     jp i6502NextLoad
 4201 D1:D509 -  -  -  -  
 4202 D1:D509 -  -  -  -  ;absolute	SLO oper	0F	3	6  	
 4203 D1:D509 -  -  -  -  inst6502_slo_abs:
 4204 D1:D509 ED 33 06 -      ADDCYC(6)
 4205 D1:D50C CD F8 B4 D1     call subroutine6502_abs_split_start
 4206 D1:D510 E5 -  -  -      push hl
 4207 D1:D511 50 -  -  -          ld  d,b
 4208 D1:D512 79 -  -  -          ld  a,c
 4209 D1:D513 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4210 D1:D515 ED 4C -  -          mlt bc
 4211 D1:D517 21 00 40 D0         ld  hl,PAGETABLE
 4212 D1:D51B 09 -  -  -          add hl,bc
 4213 D1:D51C ED 27 -  -          ld  hl,(hl)
 4214 D1:D51E 06 00 -  -          ld  b,0
 4215 D1:D520 4F -  -  -          ld  c,a
 4216 D1:D521 09 -  -  -          add hl,bc   ;full address
 4217 D1:D522 CD E9 AD D1         READ_ACCESS
 4218 D1:D526 CB 27 -  -          sla a
 4219 D1:D528 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4220 D1:D529 -  -  -  -          ;Split oper
 4221 D1:D529 DD 46 04 -          ld  b,(ix+REGSR)
 4222 D1:D52C CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4223 D1:D532 DD B6 00 -          or  a,(ix+REGA)
 4224 D1:D535 DD 77 00 -          ld  (ix+REGA),a
 4225 D1:D538 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4226 D1:D53E 87 -  -  -          add a,a
 4227 D1:D53F CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4228 D1:D545 DD 70 04 -          ld  (ix+REGSR),b
 4229 D1:D548 41 -  -  -          ld  b,c
 4230 D1:D549 CD 0C AE D1         WRITE_ACCESS
 4231 D1:D54D E1 -  -  -      pop hl
 4232 D1:D54E C3 6D B4 D1     jp i6502NextLoad
 4233 D1:D552 -  -  -  -  
 4234 D1:D552 -  -  -  -  ;absolut,X	SLO oper,X	1F	3	7  	
 4235 D1:D552 -  -  -  -  inst6502_slo_absx:
 4236 D1:D552 ED 33 07 -      ADDCYC(7)
 4237 D1:D555 CD 55 B5 D1     PUSH_ABSXSPLIT_NODEP
 4238 D1:D559 CD E9 AD D1         READ_ACCESS
 4239 D1:D55D CB 27 -  -          sla a
 4240 D1:D55F 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4241 D1:D560 -  -  -  -          ;Split oper
 4242 D1:D560 DD 46 04 -          ld  b,(ix+REGSR)
 4243 D1:D563 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4244 D1:D569 DD B6 00 -          or  a,(ix+REGA)
 4245 D1:D56C DD 77 00 -          ld  (ix+REGA),a
 4246 D1:D56F CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4247 D1:D575 87 -  -  -          add a,a
 4248 D1:D576 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4249 D1:D57C DD 70 04 -          ld  (ix+REGSR),b
 4250 D1:D57F 41 -  -  -          ld  b,c
 4251 D1:D580 CD 0C AE D1         WRITE_ACCESS
 4252 D1:D584 E1 -  -  -      pop hl
 4253 D1:D585 C3 6D B4 D1     jp i6502NextLoad
 4254 D1:D589 -  -  -  -  
 4255 D1:D589 -  -  -  -  ;absolut,Y	SLO oper,Y	1B	3	7  	
 4256 D1:D589 -  -  -  -  inst6502_slo_absy:
 4257 D1:D589 ED 33 07 -      ADDCYC(7)
 4258 D1:D58C CD 50 B5 D1     PUSH_ABSYSPLIT_NODEP
 4259 D1:D590 CD E9 AD D1         READ_ACCESS
 4260 D1:D594 CB 27 -  -          sla a
 4261 D1:D596 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4262 D1:D597 -  -  -  -          ;Split oper
 4263 D1:D597 DD 46 04 -          ld  b,(ix+REGSR)
 4264 D1:D59A CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4265 D1:D5A0 DD B6 00 -          or  a,(ix+REGA)
 4266 D1:D5A3 DD 77 00 -          ld  (ix+REGA),a
 4267 D1:D5A6 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4268 D1:D5AC 87 -  -  -          add a,a
 4269 D1:D5AD CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4270 D1:D5B3 DD 70 04 -          ld  (ix+REGSR),b
 4271 D1:D5B6 41 -  -  -          ld  b,c
 4272 D1:D5B7 CD 0C AE D1         WRITE_ACCESS
 4273 D1:D5BB E1 -  -  -      pop hl
 4274 D1:D5BC C3 6D B4 D1     jp i6502NextLoad
 4275 D1:D5C0 -  -  -  -  
 4276 D1:D5C0 -  -  -  -  ;(indirect,X)	SLO (oper,X)	03	2	8  	
 4277 D1:D5C0 -  -  -  -  isnt6502_slo_indx:
 4278 D1:D5C0 ED 33 08 -      ADDCYC(8)
 4279 D1:D5C3 E5 -  -  -      push hl
 4280 D1:D5C4 7E -  -  -          ld  a,(hl)
 4281 D1:D5C5 21 00 38 D0         ld  hl,ZEROPAGE
 4282 D1:D5C9 85 -  -  -          add a,L
 4283 D1:D5CA DD 86 01 -          add a,(ix+REGX)
 4284 D1:D5CD 6F -  -  -          ld  L,a
 4285 D1:D5CE 7E -  -  -          ld  a,(hl)
 4286 D1:D5CF 2C -  -  -          inc L
 4287 D1:D5D0 56 -  -  -          ld  d,(hl)
 4288 D1:D5D1 42 -  -  -          ld  b,d
 4289 D1:D5D2 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4290 D1:D5D4 ED 4C -  -          mlt bc
 4291 D1:D5D6 21 00 40 D0         ld  hl,PAGETABLE
 4292 D1:D5DA 09 -  -  -          add hl,bc
 4293 D1:D5DB ED 27 -  -          ld  hl,(hl)
 4294 D1:D5DD 06 00 -  -          ld  b,0
 4295 D1:D5DF 4F -  -  -          ld  c,a
 4296 D1:D5E0 09 -  -  -          add hl,bc
 4297 D1:D5E1 CD E9 AD D1         READ_ACCESS
 4298 D1:D5E5 CB 27 -  -          sla a
 4299 D1:D5E7 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4300 D1:D5E8 -  -  -  -          ;Split oper
 4301 D1:D5E8 DD 46 04 -          ld  b,(ix+REGSR)
 4302 D1:D5EB CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4303 D1:D5F1 DD B6 00 -          or  a,(ix+REGA)
 4304 D1:D5F4 DD 77 00 -          ld  (ix+REGA),a
 4305 D1:D5F7 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4306 D1:D5FD 87 -  -  -          add a,a
 4307 D1:D5FE CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4308 D1:D604 DD 70 04 -          ld  (ix+REGSR),b
 4309 D1:D607 41 -  -  -          ld  b,c
 4310 D1:D608 CD 0C AE D1         WRITE_ACCESS
 4311 D1:D60C E1 -  -  -      pop hl
 4312 D1:D60D C3 6D B4 D1     jp  i6502NextLoad
 4313 D1:D611 -  -  -  -  
 4314 D1:D611 -  -  -  -  ;(indirect),Y	SLO (oper),Y	13	2	8  
 4315 D1:D611 -  -  -  -  inst6502_slo_indy:
 4316 D1:D611 ED 33 08 -      ADDCYC(8)
 4317 D1:D614 E5 -  -  -      push hl
 4318 D1:D615 7E -  -  -          ld  a,(hl)
 4319 D1:D616 21 00 38 D0         ld  hl,ZEROPAGE
 4320 D1:D61A 85 -  -  -          add a,L
 4321 D1:D61B 6F -  -  -          ld  L,a
 4322 D1:D61C 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4323 D1:D61D 2C -  -  -          inc L
 4324 D1:D61E DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4325 D1:D621 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4326 D1:D622 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4327 D1:D624 24 -  -  -          inc h
 4328 D1:D625 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4329 D1:D626 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4330 D1:D628 ED 6C -  -          mlt hl          ;23.
 4331 D1:D62A 01 00 40 D0         ld  bc,PAGETABLE
 4332 D1:D62E 09 -  -  -          add hl,bc
 4333 D1:D62F ED 27 -  -          ld  hl,(hl)     ;address get.
 4334 D1:D631 01 00 00 00         ld  bc,0
 4335 D1:D635 4F -  -  -          ld  c,a
 4336 D1:D636 09 -  -  -          add hl,bc       ;Full address get.
 4337 D1:D637 CD E9 AD D1         READ_ACCESS
 4338 D1:D63B CB 27 -  -          sla a
 4339 D1:D63D 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4340 D1:D63E -  -  -  -          ;Split oper
 4341 D1:D63E DD 46 04 -          ld  b,(ix+REGSR)
 4342 D1:D641 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4343 D1:D647 DD B6 00 -          or  a,(ix+REGA)
 4344 D1:D64A DD 77 00 -          ld  (ix+REGA),a
 4345 D1:D64D CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4346 D1:D653 87 -  -  -          add a,a
 4347 D1:D654 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4348 D1:D65A DD 70 04 -          ld  (ix+REGSR),b
 4349 D1:D65D 41 -  -  -          ld  b,c
 4350 D1:D65E CD 0C AE D1         WRITE_ACCESS
 4351 D1:D662 E1 -  -  -      pop hl
 4352 D1:D663 C3 6D B4 D1     jp  i6502NextLoad
 4353 D1:D667 -  -  -  -  
 4354 D1:D667 -  -  -  -  ;-----------------------------------------------------------------------------
 4355 D1:D667 -  -  -  -  ;SRE (LSE) - LSR oper + EOR oper
 4356 D1:D667 -  -  -  -  ;M = 0 -> [76543210] -> C, A EOR M -> A. Affects: CZN
 4357 D1:D667 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4358 D1:D667 -  -  -  -  
 4359 D1:D667 -  -  -  -  ;zeropage	SRE oper	47	2	5  	
 4360 D1:D667 -  -  -  -  inst6502_sre_zp:
 4361 D1:D667 ED 33 05 -      ADDCYC(5)
 4362 D1:D66A 7E -  -  -      ld  a,(hl)
 4363 D1:D66B 01 00 38 D0     ld  bc,ZEROPAGE
 4364 D1:D66F 81 -  -  -      add a,c
 4365 D1:D670 4F -  -  -      ld  c,a
 4366 D1:D671 0A -  -  -      ld  a,(bc)
 4367 D1:D672 CB 3F -  -      srl a
 4368 D1:D674 02 -  -  -      ld  (bc),a
 4369 D1:D675 -  -  -  -      ;Flag breakdown to optimize for split operation
 4370 D1:D675 DD 46 04 -      ld  b,(ix+REGSR)
 4371 D1:D678 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4372 D1:D67E DD AE 00 -      xor a,(ix+REGA)
 4373 D1:D681 DD 77 00 -      ld  (ix+REGA),a
 4374 D1:D684 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4375 D1:D68A 87 -  -  -      add a,a
 4376 D1:D68B CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4377 D1:D691 DD 70 04 -      ld  (ix+REGSR),b
 4378 D1:D694 C3 6D B4 D1     jp i6502NextLoad
 4379 D1:D698 -  -  -  -  
 4380 D1:D698 -  -  -  -  ;zeropage,X	SRE oper,X	57	2	6  	
 4381 D1:D698 -  -  -  -  inst6502_sre_zpx:
 4382 D1:D698 ED 33 06 -      ADDCYC(6)
 4383 D1:D69B 7E -  -  -      ld  a,(hl)
 4384 D1:D69C 01 00 38 D0     ld  bc,ZEROPAGE
 4385 D1:D6A0 81 -  -  -      add a,c
 4386 D1:D6A1 DD 86 01 -      add a,(ix+REGX)
 4387 D1:D6A4 4F -  -  -      ld  c,a
 4388 D1:D6A5 0A -  -  -      ld  a,(bc)
 4389 D1:D6A6 CB 3F -  -      srl a
 4390 D1:D6A8 02 -  -  -      ld  (bc),a
 4391 D1:D6A9 -  -  -  -      ;Flag breakdown to optimize for split operation
 4392 D1:D6A9 DD 46 04 -      ld  b,(ix+REGSR)
 4393 D1:D6AC CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4394 D1:D6B2 DD AE 00 -      xor a,(ix+REGA)
 4395 D1:D6B5 DD 77 00 -      ld  (ix+REGA),a
 4396 D1:D6B8 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4397 D1:D6BE 87 -  -  -      add a,a
 4398 D1:D6BF CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4399 D1:D6C5 DD 70 04 -      ld  (ix+REGSR),b
 4400 D1:D6C8 C3 6D B4 D1     jp i6502NextLoad
 4401 D1:D6CC -  -  -  -  
 4402 D1:D6CC -  -  -  -  ;absolute	SRE oper	4F	3	6  	
 4403 D1:D6CC -  -  -  -  inst6502_sre_abs:
 4404 D1:D6CC ED 33 06 -      ADDCYC(6)
 4405 D1:D6CF CD F8 B4 D1     call subroutine6502_abs_split_start
 4406 D1:D6D3 E5 -  -  -      push hl
 4407 D1:D6D4 50 -  -  -          ld  d,b
 4408 D1:D6D5 79 -  -  -          ld  a,c
 4409 D1:D6D6 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4410 D1:D6D8 ED 4C -  -          mlt bc
 4411 D1:D6DA 21 00 40 D0         ld  hl,PAGETABLE
 4412 D1:D6DE 09 -  -  -          add hl,bc
 4413 D1:D6DF ED 27 -  -          ld  hl,(hl)
 4414 D1:D6E1 06 00 -  -          ld  b,0
 4415 D1:D6E3 4F -  -  -          ld  c,a
 4416 D1:D6E4 09 -  -  -          add hl,bc   ;full address
 4417 D1:D6E5 CD E9 AD D1         READ_ACCESS
 4418 D1:D6E9 CB 3F -  -          srl a
 4419 D1:D6EB 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4420 D1:D6EC -  -  -  -          ;Split oper
 4421 D1:D6EC DD 46 04 -          ld  b,(ix+REGSR)
 4422 D1:D6EF CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4423 D1:D6F5 DD AE 00 -          xor a,(ix+REGA)
 4424 D1:D6F8 DD 77 00 -          ld  (ix+REGA),a
 4425 D1:D6FB CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4426 D1:D701 87 -  -  -          add a,a
 4427 D1:D702 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4428 D1:D708 DD 70 04 -          ld  (ix+REGSR),b
 4429 D1:D70B 41 -  -  -          ld  b,c
 4430 D1:D70C CD 0C AE D1         WRITE_ACCESS
 4431 D1:D710 E1 -  -  -      pop hl
 4432 D1:D711 C3 6D B4 D1     jp i6502NextLoad
 4433 D1:D715 -  -  -  -  
 4434 D1:D715 -  -  -  -  ;absolut,X	SRE oper,X	5F	3	7  	
 4435 D1:D715 -  -  -  -  inst6502_sre_absx:
 4436 D1:D715 ED 33 07 -      ADDCYC(7)
 4437 D1:D718 CD 55 B5 D1     PUSH_ABSXSPLIT_NODEP
 4438 D1:D71C CD E9 AD D1         READ_ACCESS
 4439 D1:D720 CB 3F -  -          srl a
 4440 D1:D722 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4441 D1:D723 -  -  -  -          ;Split oper
 4442 D1:D723 DD 46 04 -          ld  b,(ix+REGSR)
 4443 D1:D726 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4444 D1:D72C DD AE 00 -          xor a,(ix+REGA)
 4445 D1:D72F DD 77 00 -          ld  (ix+REGA),a
 4446 D1:D732 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4447 D1:D738 87 -  -  -          add a,a
 4448 D1:D739 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4449 D1:D73F DD 70 04 -          ld  (ix+REGSR),b
 4450 D1:D742 41 -  -  -          ld  b,c
 4451 D1:D743 CD 0C AE D1         WRITE_ACCESS
 4452 D1:D747 E1 -  -  -      pop hl
 4453 D1:D748 C3 6D B4 D1     jp i6502NextLoad
 4454 D1:D74C -  -  -  -  
 4455 D1:D74C -  -  -  -  ;absolut,Y	SRE oper,Y	5B	3	7  	
 4456 D1:D74C -  -  -  -  inst6502_sre_absy:
 4457 D1:D74C ED 33 07 -      ADDCYC(7)
 4458 D1:D74F CD 50 B5 D1     PUSH_ABSYSPLIT_NODEP
 4459 D1:D753 CD E9 AD D1         READ_ACCESS
 4460 D1:D757 CB 3F -  -          srl a
 4461 D1:D759 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4462 D1:D75A -  -  -  -          ;Split oper
 4463 D1:D75A DD 46 04 -          ld  b,(ix+REGSR)
 4464 D1:D75D CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4465 D1:D763 DD AE 00 -          xor a,(ix+REGA)
 4466 D1:D766 DD 77 00 -          ld  (ix+REGA),a
 4467 D1:D769 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4468 D1:D76F 87 -  -  -          add a,a
 4469 D1:D770 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4470 D1:D776 DD 70 04 -          ld  (ix+REGSR),b
 4471 D1:D779 41 -  -  -          ld  b,c
 4472 D1:D77A CD 0C AE D1         WRITE_ACCESS
 4473 D1:D77E E1 -  -  -      pop hl
 4474 D1:D77F C3 6D B4 D1     jp i6502NextLoad
 4475 D1:D783 -  -  -  -  
 4476 D1:D783 -  -  -  -  ;(indirect,X)	SRE (oper,X)	43	2	8  	
 4477 D1:D783 -  -  -  -  isnt6502_sre_indx:
 4478 D1:D783 ED 33 08 -      ADDCYC(8)
 4479 D1:D786 E5 -  -  -      push hl
 4480 D1:D787 7E -  -  -          ld  a,(hl)
 4481 D1:D788 21 00 38 D0         ld  hl,ZEROPAGE
 4482 D1:D78C 85 -  -  -          add a,L
 4483 D1:D78D DD 86 01 -          add a,(ix+REGX)
 4484 D1:D790 6F -  -  -          ld  L,a
 4485 D1:D791 7E -  -  -          ld  a,(hl)
 4486 D1:D792 2C -  -  -          inc L
 4487 D1:D793 56 -  -  -          ld  d,(hl)
 4488 D1:D794 42 -  -  -          ld  b,d
 4489 D1:D795 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4490 D1:D797 ED 4C -  -          mlt bc
 4491 D1:D799 21 00 40 D0         ld  hl,PAGETABLE
 4492 D1:D79D 09 -  -  -          add hl,bc
 4493 D1:D79E ED 27 -  -          ld  hl,(hl)
 4494 D1:D7A0 06 00 -  -          ld  b,0
 4495 D1:D7A2 4F -  -  -          ld  c,a
 4496 D1:D7A3 09 -  -  -          add hl,bc
 4497 D1:D7A4 CD E9 AD D1         READ_ACCESS
 4498 D1:D7A8 CB 3F -  -          srl a
 4499 D1:D7AA 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4500 D1:D7AB -  -  -  -          ;Split oper
 4501 D1:D7AB DD 46 04 -          ld  b,(ix+REGSR)
 4502 D1:D7AE CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4503 D1:D7B4 DD AE 00 -          xor a,(ix+REGA)
 4504 D1:D7B7 DD 77 00 -          ld  (ix+REGA),a
 4505 D1:D7BA CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4506 D1:D7C0 87 -  -  -          add a,a
 4507 D1:D7C1 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4508 D1:D7C7 DD 70 04 -          ld  (ix+REGSR),b
 4509 D1:D7CA 41 -  -  -          ld  b,c
 4510 D1:D7CB CD 0C AE D1         WRITE_ACCESS
 4511 D1:D7CF E1 -  -  -      pop hl
 4512 D1:D7D0 C3 6D B4 D1     jp  i6502NextLoad
 4513 D1:D7D4 -  -  -  -  
 4514 D1:D7D4 -  -  -  -  ;(indirect),Y	SRE (oper),Y	53	2	8  
 4515 D1:D7D4 -  -  -  -  inst6502_sre_indy:
 4516 D1:D7D4 ED 33 08 -      ADDCYC(8)
 4517 D1:D7D7 E5 -  -  -      push hl
 4518 D1:D7D8 7E -  -  -          ld  a,(hl)
 4519 D1:D7D9 21 00 38 D0         ld  hl,ZEROPAGE
 4520 D1:D7DD 85 -  -  -          add a,L
 4521 D1:D7DE 6F -  -  -          ld  L,a
 4522 D1:D7DF 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4523 D1:D7E0 2C -  -  -          inc L
 4524 D1:D7E1 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4525 D1:D7E4 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4526 D1:D7E5 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4527 D1:D7E7 24 -  -  -          inc h
 4528 D1:D7E8 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4529 D1:D7E9 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4530 D1:D7EB ED 6C -  -          mlt hl          ;23.
 4531 D1:D7ED 01 00 40 D0         ld  bc,PAGETABLE
 4532 D1:D7F1 09 -  -  -          add hl,bc
 4533 D1:D7F2 ED 27 -  -          ld  hl,(hl)     ;address get.
 4534 D1:D7F4 01 00 00 00         ld  bc,0
 4535 D1:D7F8 4F -  -  -          ld  c,a
 4536 D1:D7F9 09 -  -  -          add hl,bc       ;Full address get.
 4537 D1:D7FA CD E9 AD D1         READ_ACCESS
 4538 D1:D7FE CB 3F -  -          srl a
 4539 D1:D800 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4540 D1:D801 -  -  -  -          ;Split oper
 4541 D1:D801 DD 46 04 -          ld  b,(ix+REGSR)
 4542 D1:D804 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4543 D1:D80A DD AE 00 -          xor a,(ix+REGA)
 4544 D1:D80D DD 77 00 -          ld  (ix+REGA),a
 4545 D1:D810 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4546 D1:D816 87 -  -  -          add a,a
 4547 D1:D817 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4548 D1:D81D DD 70 04 -          ld  (ix+REGSR),b
 4549 D1:D820 41 -  -  -          ld  b,c
 4550 D1:D821 CD 0C AE D1         WRITE_ACCESS
 4551 D1:D825 E1 -  -  -      pop hl
 4552 D1:D826 C3 6D B4 D1     jp  i6502NextLoad
 4553 D1:D82A -  -  -  -  
 4554 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4555 D1:D82A -  -  -  -  ;USBC (USBC)
 4556 D1:D82A -  -  -  -  ;immediate	USBC #oper	EB	2	2  
 4557 D1:D82A -  -  -  -  ;Map this to instruction $E9 (inst6502_sbc_imm)
 4558 D1:D82A -  -  -  -  
 4559 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4560 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4561 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4562 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4563 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4564 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4565 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4566 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4567 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4568 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4569 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4570 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4571 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4572 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4573 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4574 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4575 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4576 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4577 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4578 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4579 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4580 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4581 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4582 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4583 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4584 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4585 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4586 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4587 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4588 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4589 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4590 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4591 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4592 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4593 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4594 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4595 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4596 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4597 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4598 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4599 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4600 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4601 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4602 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4603 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4604 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4605 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4606 D1:D82A -  -  -  -  ;-----------------------------------------------------------------------------
 4607 D1:D82A -  -  -  -  
 4608 D1:D82A -  -  -  -  inst6502_instruction_set:
 4609 D1:D82A 8F CA D1 -  .dl	inst6502_brk					;00
 4610 D1:D82D 36 C3 D1 -  .dl	inst6502_ora_indx				;01
 4611 D1:D830 31 DB D1 -  .dl	inst6502_jam_02 				;02
 4612 D1:D833 C0 D5 D1 -  .dl	isnt6502_slo_indx				;03
 4613 D1:D836 FF CB D1 -  .dl	inst6502_nop_zp 				;04
 4614 D1:D839 51 C2 D1 -  .dl	inst6502_ora_zp					;05
 4615 D1:D83C EE C3 D1 -  .dl	inst6502_asl_zp					;06
 4616 D1:D83F A4 D4 D1 -  .dl	inst6502_slo_zp 				;07
 4617 D1:D842 77 BB D1 -  .dl	inst6502_php					;08
 4618 D1:D845 2F C2 D1 -  .dl	inst6502_ora_imm				;09
 4619 D1:D848 C5 C3 D1 -  .dl	inst6502_asl					;0A
 4620 D1:D84B 58 CC D1 -  .dl	instr6502_anc_imm				;0B
 4621 D1:D84E 0D CC D1 -  .dl	inst6502_nop_abs				;0C
 4622 D1:D851 A6 C2 D1 -  .dl	inst6502_ora_abs				;0D
 4623 D1:D854 49 C4 D1 -  .dl	inst6502_asl_abs				;0E
 4624 D1:D857 09 D5 D1 -  .dl	inst6502_slo_abs				;0F
 4625 D1:D85A 62 CA D1 -  .dl	inst6502_bpl					;10
 4626 D1:D85D 7A C3 D1 -  .dl	inst6502_ora_indy				;11
 4627 D1:D860 2B DB D1 -  .dl	inst6502_jam_12_halt			;12 JAM. Used to halt emulation for inspection
 4628 D1:D863 11 D6 D1 -  .dl	inst6502_slo_indy				;13
 4629 D1:D866 06 CC D1 -  .dl	inst6502_nop_zpx				;14
 4630 D1:D869 7A C2 D1 -  .dl	inst6502_ora_zpx				;15
 4631 D1:D86C 1A C4 D1 -  .dl	inst6502_asl_zpx				;16
 4632 D1:D86F D5 D4 D1 -  .dl	inst6502_slo_zpx				;17
 4633 D1:D872 CF C7 D1 -  .dl	inst6502_clc					;18
 4634 D1:D875 0C C3 D1 -  .dl	inst6502_ora_absy				;19
 4635 D1:D878 F1 CB D1 -  .dl	inst6502_nop_implied    		;1A
 4636 D1:D87B 89 D5 D1 -  .dl	inst6502_slo_absy				;1B
 4637 D1:D87E 1E CC D1 -  .dl	inst6502_nop_absx				;1C
 4638 D1:D881 E2 C2 D1 -  .dl	inst6502_ora_absx				;1D
 4639 D1:D884 8D C4 D1 -  .dl	inst6502_asl_absx				;1E
 4640 D1:D887 52 D5 D1 -  .dl	inst6502_slo_absx				;1F
 4641 D1:D88A 59 CB D1 -  .dl	inst6502_jsr					;20
 4642 D1:D88D 0A C0 D1 -  .dl	inst6502_and_indx				;21
 4643 D1:D890 31 DB D1 -  .dl	inst6502_jam_22 				;22
 4644 D1:D893 86 D1 D1 -  .dl	isnt6502_rla_indx				;23
 4645 D1:D896 A5 CB D1 -  .dl	inst6502_bit_zp					;24
 4646 D1:D899 25 BF D1 -  .dl	inst6502_and_zp					;25
 4647 D1:D89C E5 C5 D1 -  .dl	inst6502_rol_zp					;26
 4648 D1:D89F 58 D0 D1 -  .dl	inst6502_rla_zp 				;27
 4649 D1:D8A2 B9 BB D1 -  .dl	inst6502_plp					;28
 4650 D1:D8A5 03 BF D1 -  .dl	inst6502_and_imm				;29
 4651 D1:D8A8 B9 C5 D1 -  .dl	inst6502_rol					;2A
 4652 D1:D8AB 58 CC D1 -  .dl	instr6502_anc2_imm				;2B
 4653 D1:D8AE C9 CB D1 -  .dl	inst6502_bit_abs				;2C
 4654 D1:D8B1 7A BF D1 -  .dl	inst6502_and_abs				;2D
 4655 D1:D8B4 46 C6 D1 -  .dl	inst6502_rol_abs				;2E
 4656 D1:D8B7 C3 D0 D1 -  .dl	inst6502_rla_abs				;2F
 4657 D1:D8BA 44 CA D1 -  .dl	inst6502_bmi					;30
 4658 D1:D8BD 4E C0 D1 -  .dl	inst6502_and_indy				;31
 4659 D1:D8C0 31 DB D1 -  .dl	inst6502_jam_32 				;32
 4660 D1:D8C3 DB D1 D1 -  .dl	inst6502_rla_indy				;33
 4661 D1:D8C6 06 CC D1 -  .dl	inst6502_nop_zpx				;34
 4662 D1:D8C9 4E BF D1 -  .dl	inst6502_and_zpx				;35
 4663 D1:D8CC 14 C6 D1 -  .dl	inst6502_rol_zpx				;36
 4664 D1:D8CF 8C D0 D1 -  .dl	inst6502_rla_zpx				;37
 4665 D1:D8D2 FB C7 D1 -  .dl	inst6502_sec					;38
 4666 D1:D8D5 E0 BF D1 -  .dl	inst6502_and_absy				;39
 4667 D1:D8D8 F1 CB D1 -  .dl	inst6502_nop_implied			;3A
 4668 D1:D8DB 4B D1 D1 -  .dl	inst6502_rla_absy   			;3B
 4669 D1:D8DE 1E CC D1 -  .dl	inst6502_nop_absx   			;3C
 4670 D1:D8E1 B6 BF D1 -  .dl	inst6502_and_absx				;3D
 4671 D1:D8E4 8E C6 D1 -  .dl	inst6502_rol_absx				;3E
 4672 D1:D8E7 10 D1 D1 -  .dl	inst6502_rla_absx   			;3F
 4673 D1:D8EA C8 CA D1 -  .dl	inst6502_rti					;40
 4674 D1:D8ED A0 C1 D1 -  .dl	inst6502_eor_indx				;41
 4675 D1:D8F0 31 DB D1 -  .dl	inst6502_jam_42     			;42
 4676 D1:D8F3 83 D7 D1 -  .dl	isnt6502_sre_indx   			;43
 4677 D1:D8F6 FF CB D1 -  .dl	inst6502_nop_zp     			;44
 4678 D1:D8F9 BB C0 D1 -  .dl	inst6502_eor_zp					;45
 4679 D1:D8FC E8 C4 D1 -  .dl	inst6502_lsr_zp					;46
 4680 D1:D8FF 67 D6 D1 -  .dl	inst6502_sre_zp     			;47
 4681 D1:D902 61 BB D1 -  .dl	inst6502_pha					;48
 4682 D1:D905 99 C0 D1 -  .dl	inst6502_eor_imm				;49
 4683 D1:D908 BF C4 D1 -  .dl	inst6502_lsr					;4A
 4684 D1:D90B 2E CC D1 -  .dl	inst6502_alr_imm    			;4B
 4685 D1:D90E ED CA D1 -  .dl	inst6052_jmp_abs				;4C
 4686 D1:D911 10 C1 D1 -  .dl	inst6502_eor_abs				;4D
 4687 D1:D914 43 C5 D1 -  .dl	inst6502_lsr_abs				;4E
 4688 D1:D917 CC D6 D1 -  .dl	inst6502_sre_abs    			;4F
 4689 D1:D91A 71 CA D1 -  .dl	inst6502_bvc					;50
 4690 D1:D91D E4 C1 D1 -  .dl	inst6502_eor_indy				;51
 4691 D1:D920 31 DB D1 -  .dl	inst6502_jam_52     			;52
 4692 D1:D923 D4 D7 D1 -  .dl	inst6502_sre_indy   			;53
 4693 D1:D926 06 CC D1 -  .dl	inst6502_nop_zpx    			;54
 4694 D1:D929 E4 C0 D1 -  .dl	inst6502_eor_zpx				;55
 4695 D1:D92C 14 C5 D1 -  .dl	inst6502_lsr_zpx				;56
 4696 D1:D92F 98 D6 D1 -  .dl	inst6502_sre_zpx    			;57
 4697 D1:D932 E5 C7 D1 -  .dl	inst6502_cli					;58
 4698 D1:D935 76 C1 D1 -  .dl	inst6502_eor_absy				;59
 4699 D1:D938 F1 CB D1 -  .dl	inst6502_nop_implied			;5A
 4700 D1:D93B 4C D7 D1 -  .dl	inst6502_sre_absy   			;5B
 4701 D1:D93E 1E CC D1 -  .dl	inst6502_nop_absx   			;5C
 4702 D1:D941 4C C1 D1 -  .dl	inst6502_eor_absx				;5D
 4703 D1:D944 87 C5 D1 -  .dl	inst6502_lsr_absx				;5E
 4704 D1:D947 15 D7 D1 -  .dl	inst6502_sre_absx   			;5F
 4705 D1:D94A 8B CB D1 -  .dl	inst6502_rts					;60
 4706 D1:D94D D9 BD D1 -  .dl	inst6502_adc_indx				;61
 4707 D1:D950 31 DB D1 -  .dl	inst6502_jam_62     			;62
 4708 D1:D953 02 D3 D1 -  .dl	isnt6502_rra_indx   			;63
 4709 D1:D956 FF CB D1 -  .dl	inst6502_nop_zp     			;64
 4710 D1:D959 71 BD D1 -  .dl	inst6502_adc_zp					;65
 4711 D1:D95C F0 C6 D1 -  .dl	inst6502_ror_zp					;66
 4712 D1:D95F 35 D2 D1 -  .dl	inst6502_rra_zp     			;67
 4713 D1:D962 8F BB D1 -  .dl	inst6502_pla					;68
 4714 D1:D965 69 BD D1 -  .dl	inst6502_adc_imm				;69
 4715 D1:D968 C4 C6 D1 -  .dl	inst6502_ror					;6A
 4716 D1:D96B A5 CC D1 -  .dl	instr6502_arr_imm   			;6B
 4717 D1:D96E 0F CB D1 -  .dl	inst6502_jmp_indir				;6C
 4718 D1:D971 94 BD D1 -  .dl	inst6502_adc_abs				;6D
 4719 D1:D974 51 C7 D1 -  .dl	inst6502_ror_abs				;6E
 4720 D1:D977 78 D2 D1 -  .dl	inst6502_rra_abs    			;6F
 4721 D1:D97A 80 CA D1 -  .dl	inst6502_bvs					;70
 4722 D1:D97D 04 BE D1 -  .dl	inst6502_adc_indy				;71
 4723 D1:D980 31 DB D1 -  .dl	inst6502_jam_72     			;72
 4724 D1:D983 44 D3 D1 -  .dl	inst6502_rra_indy   			;73
 4725 D1:D986 06 CC D1 -  .dl	inst6502_nop_zpx    			;74
 4726 D1:D989 81 BD D1 -  .dl	inst6502_adc_zpx				;75
 4727 D1:D98C 1F C7 D1 -  .dl	inst6502_ror_zpx				;76
 4728 D1:D98F 55 D2 D1 -  .dl	inst6502_rra_zpx    			;77
 4729 D1:D992 11 C8 D1 -  .dl	inst6502_sei					;78
 4730 D1:D995 C8 BD D1 -  .dl	inst6502_adc_absy				;79
 4731 D1:D998 F1 CB D1 -  .dl	inst6502_nop_implied			;7A
 4732 D1:D99B DA D2 D1 -  .dl	inst6502_rra_absy   			;7B
 4733 D1:D99E 1E CC D1 -  .dl	inst6502_nop_absx   			;7C
 4734 D1:D9A1 B7 BD D1 -  .dl	inst6502_adc_absx				;7D
 4735 D1:D9A4 99 C7 D1 -  .dl	inst6502_ror_absx				;7E
 4736 D1:D9A7 B2 D2 D1 -  .dl	inst6502_rra_absx   			;7F
 4737 D1:D9AA F8 CB D1 -  .dl	inst6502_nop_imm    			;80
 4738 D1:D9AD B8 B9 D1 -  .dl	inst6502_sta_indx				;81
 4739 D1:D9B0 F8 CB D1 -  .dl	inst6502_nop_imm    			;82
 4740 D1:D9B3 E1 D3 D1 -  .dl	inst6502_sax_indx   			;83
 4741 D1:D9B6 63 BA D1 -  .dl	inst6502_sty_zp					;84
 4742 D1:D9B9 46 B9 D1 -  .dl	inst6502_sta_zp					;85
 4743 D1:D9BC 17 BA D1 -  .dl	inst6502_stx_zp					;86
 4744 D1:D9BF 8B D3 D1 -  .dl	inst6502_sax_zp     			;87
 4745 D1:D9C2 A7 BC D1 -  .dl	inst6502_dey					;88
 4746 D1:D9C5 F8 CB D1 -  .dl	inst6502_nop_imm    			;89
 4747 D1:D9C8 12 BB D1 -  .dl	inst6502_txa					;8A
 4748 D1:D9CB 7E CC D1 -  .dl	instr6502_ane_imm   			;8B
 4749 D1:D9CE 8A BA D1 -  .dl	inst6502_sty_abs				;8C
 4750 D1:D9D1 6D B9 D1 -  .dl	inst6502_sta_abs				;8D
 4751 D1:D9D4 3E BA D1 -  .dl	inst6502_stx_abs				;8E
 4752 D1:D9D7 B8 D3 D1 -  .dl	inst6502_sax_abs    			;8F
 4753 D1:D9DA 17 CA D1 -  .dl	inst6502_bcc					;90
 4754 D1:D9DD E5 B9 D1 -  .dl	inst6502_sta_indy				;91
 4755 D1:D9E0 31 DB D1 -  .dl	inst6502_jam_92     			;92
 4756 D1:D9E3 49 D4 D1 -  .dl	inst6502_sha_indy   			;93
 4757 D1:D9E6 75 BA D1 -  .dl	inst6502_sty_zpx				;94
 4758 D1:D9E9 58 B9 D1 -  .dl	inst6502_sta_zpx				;95
 4759 D1:D9EC 29 BA D1 -  .dl	inst6502_stx_zpy				;96
 4760 D1:D9EF A0 D3 D1 -  .dl	inst6502_sax_zpy    			;97
 4761 D1:D9F2 40 BB D1 -  .dl	inst6502_tya					;98
 4762 D1:D9F5 A5 B9 D1 -  .dl	inst6502_sta_absy				;99
 4763 D1:D9F8 33 BB D1 -  .dl	inst6502_txs					;9A
 4764 D1:D9FB 96 D4 D1 -  .dl	inst6502_tas_absy   			;9B
 4765 D1:D9FE 88 D4 D1 -  .dl	inst6502_shy_absx   			;9C
 4766 D1:DA01 92 B9 D1 -  .dl	inst6502_sta_absx				;9D
 4767 D1:DA04 7A D4 D1 -  .dl	inst6502_shx_absy   			;9E
 4768 D1:DA07 3B D4 D1 -  .dl	inst6502_sha_absy   			;9F
 4769 D1:DA0A 78 B8 D1 -  .dl	inst6502_ldy_imm				;A0
 4770 D1:DA0D 21 B7 D1 -  .dl	inst6502_lda_indx				;A1
 4771 D1:DA10 AA B7 D1 -  .dl	inst6502_ldx_imm				;A2
 4772 D1:DA13 A2 CF D1 -  .dl	inst6502_lax_indx   			;A3
 4773 D1:DA16 97 B8 D1 -  .dl	inst6502_ldy_zp					;A4
 4774 D1:DA19 4B B6 D1 -  .dl	inst6502_lda_zp					;A5
 4775 D1:DA1C C9 B7 D1 -  .dl	inst6502_ldx_zp					;A6
 4776 D1:DA1F E7 CE D1 -  .dl	inst6502_lax_zp     			;A7
 4777 D1:DA22 D0 BA D1 -  .dl	inst6502_tay					;A8
 4778 D1:DA25 2C B6 D1 -  .dl	inst6502_lda_imm				;A9
 4779 D1:DA28 AF BA D1 -  .dl	inst6502_tax					;AA
 4780 D1:DA2B 31 D0 D1 -  .dl	inst6502_lxa        			;AB
 4781 D1:DA2E E6 B8 D1 -  .dl	inst6502_ldy_abs				;AC
 4782 D1:DA31 9A B6 D1 -  .dl	inst6502_lda_abs				;AD
 4783 D1:DA34 18 B8 D1 -  .dl	inst6502_ldx_abs				;AE
 4784 D1:DA37 3C CF D1 -  .dl	inst6502_lax_abs    			;AF
 4785 D1:DA3A 26 CA D1 -  .dl	inst6502_bcs					;B0
 4786 D1:DA3D 62 B7 D1 -  .dl	inst6502_lda_indy				;B1
 4787 D1:DA40 31 DB D1 -  .dl	inst6502_jam_B2     			;B2
 4788 D1:DA43 E6 CF D1 -  .dl	inst6502_lax_indy   			;B3
 4789 D1:DA46 BD B8 D1 -  .dl	inst6502_ldy_zpx				;B4
 4790 D1:DA49 71 B6 D1 -  .dl	inst6502_lda_zpx				;B5
 4791 D1:DA4C EF B7 D1 -  .dl	inst6502_ldx_zpy				;B6
 4792 D1:DA4F 10 CF D1 -  .dl	inst6502_lax_zpy    			;B7
 4793 D1:DA52 F0 C7 D1 -  .dl	inst6502_clv					;B8
 4794 D1:DA55 FA B6 D1 -  .dl	inst6502_lda_absy				;B9
 4795 D1:DA58 F1 BA D1 -  .dl	inst6502_tsx					;BA
 4796 D1:DA5B B7 CE D1 -  .dl	inst6502_las_absy   			;BB
 4797 D1:DA5E 1F B9 D1 -  .dl	inst6502_ldy_absx				;BC
 4798 D1:DA61 D3 B6 D1 -  .dl	inst6502_lda_absx				;BD
 4799 D1:DA64 51 B8 D1 -  .dl	inst6502_ldx_absy				;BE
 4800 D1:DA67 78 CF D1 -  .dl	inst6502_lax_absy   			;BF
 4801 D1:DA6A 80 C9 D1 -  .dl	inst6502_cpy_imm				;C0
 4802 D1:DA6D 8C C8 D1 -  .dl	inst6502_cmp_indx				;C1
 4803 D1:DA70 F8 CB D1 -  .dl	inst6502_nop_imm    			;C2
 4804 D1:DA73 5F CD D1 -  .dl	inst6502_dcp_indx   			;C3
 4805 D1:DA76 A6 C9 D1 -  .dl	inst6502_cpy_zp					;C4
 4806 D1:DA79 24 C8 D1 -  .dl	inst6502_cmp_zp					;C5
 4807 D1:DA7C D6 BB D1 -  .dl	inst6502_dec_zp					;C6
 4808 D1:DA7F DE CC D1 -  .dl	inst6502_dcp_zp     			;C7
 4809 D1:DA82 B1 BC D1 -  .dl	inst6502_iny					;C8
 4810 D1:DA85 1C C8 D1 -  .dl	inst6502_cmp_imm				;C9
 4811 D1:DA88 89 BC D1 -  .dl	inst6502_dex					;CA
 4812 D1:DA8B 12 D4 D1 -  .dl	inst6502_sbx_imm    			;CB
 4813 D1:DA8E D5 C9 D1 -  .dl	inst6502_cpy_abs				;CC
 4814 D1:DA91 47 C8 D1 -  .dl	inst6502_cmp_abs				;CD
 4815 D1:DA94 23 BC D1 -  .dl	inst6502_dec_abs				;CE
 4816 D1:DA97 05 CD D1 -  .dl	inst6502_dcp_abs    			;CF
 4817 D1:DA9A 53 CA D1 -  .dl	inst6502_bne					;D0
 4818 D1:DA9D B7 C8 D1 -  .dl	inst6502_cmp_indy				;D1
 4819 D1:DAA0 31 DB D1 -  .dl	inst6502_jam_D2     			;D2
 4820 D1:DAA3 91 CD D1 -  .dl	inst6502_dcp_indy   			;D3
 4821 D1:DAA6 06 CC D1 -  .dl	inst6502_nop_zpx    			;D4
 4822 D1:DAA9 34 C8 D1 -  .dl	inst6502_cmp_zpx				;D5
 4823 D1:DAAC FB BB D1 -  .dl	inst6502_dec_zpx				;D6
 4824 D1:DAAF F0 CC D1 -  .dl	inst6520_dcp_zpx    			;D7
 4825 D1:DAB2 DA C7 D1 -  .dl	inst6502_cld					;D8
 4826 D1:DAB5 7B C8 D1 -  .dl	inst6502_cmp_absy				;D9
 4827 D1:DAB8 F1 CB D1 -  .dl	inst6502_nop_implied			;DA
 4828 D1:DABB 47 CD D1 -  .dl	inst6502_dcp_absy   			;DB
 4829 D1:DABE 1E CC D1 -  .dl	inst6502_nop_absx   			;DC
 4830 D1:DAC1 6A C8 D1 -  .dl	inst6502_cmp_absx				;DD
 4831 D1:DAC4 5F BC D1 -  .dl	inst6502_dec_absx				;DE
 4832 D1:DAC7 2F CD D1 -  .dl	inst6502_dcp_absx   			;DF
 4833 D1:DACA E9 C8 D1 -  .dl	inst6502_cpx_imm				;E0
 4834 D1:DACD A6 BE D1 -  .dl	inst6502_sbc_indx				;E1
 4835 D1:DAD0 F8 CB D1 -  .dl	inst6502_nop_imm    			;E2
 4836 D1:DAD3 4C CE D1 -  .dl	inst6502_isc_indx   			;E3
 4837 D1:DAD6 0F C9 D1 -  .dl	inst6502_cpx_zp					;E4
 4838 D1:DAD9 3E BE D1 -  .dl	inst6502_sbc_zp					;E5
 4839 D1:DADC B6 BC D1 -  .dl	inst6502_inc_zp					;E6
 4840 D1:DADF C8 CD D1 -  .dl	inst6502_isc_zp     			;E7
 4841 D1:DAE2 AC BC D1 -  .dl	inst6502_inx					;E8
 4842 D1:DAE5 36 BE D1 -  .dl	inst6502_sbc_imm				;E9
 4843 D1:DAE8 EA CB D1 -  .dl	inst6502_nop					;EA
 4844 D1:DAEB 36 BE D1 -  .dl	inst6502_sbc_imm			    ;EB *DUPLICATE OF E9
 4845 D1:DAEE 3E C9 D1 -  .dl	inst6502_cpx_abs				;EC
 4846 D1:DAF1 61 BE D1 -  .dl	inst6502_sbc_abs				;ED
 4847 D1:DAF4 03 BD D1 -  .dl	inst6502_inc_abs				;EE
 4848 D1:DAF7 EF CD D1 -  .dl	inst6502_isc_abs    			;EF
 4849 D1:DAFA 35 CA D1 -  .dl	inst6502_beq					;F0
 4850 D1:DAFD D1 BE D1 -  .dl	inst6502_sbc_indy				;F1
 4851 D1:DB00 31 DB D1 -  .dl	inst6502_jam_F2     			;F2
 4852 D1:DB03 7F CE D1 -  .dl	inst6502_isc_indy   			;F3
 4853 D1:DB06 06 CC D1 -  .dl	inst6502_nop_zpx    			;F4
 4854 D1:DB09 4E BE D1 -  .dl	inst6502_sbc_zpx				;F5
 4855 D1:DB0C DB BC D1 -  .dl	inst6502_inc_zpx				;F6
 4856 D1:DB0F DA CD D1 -  .dl	inst6520_isc_zpx    			;F7
 4857 D1:DB12 06 C8 D1 -  .dl	inst6502_sed					;F8
 4858 D1:DB15 95 BE D1 -  .dl	inst6502_sbc_absy				;F9
 4859 D1:DB18 F1 CB D1 -  .dl	inst6502_nop_implied			;FA
 4860 D1:DB1B 33 CE D1 -  .dl	inst6502_isc_absy   			;FB
 4861 D1:DB1E 1E CC D1 -  .dl	inst6502_nop_absx   			;FC
 4862 D1:DB21 84 BE D1 -  .dl	inst6502_sbc_absx				;FD
 4863 D1:DB24 3F BD D1 -  .dl	inst6502_inc_absx				;FE
 4864 D1:DB27 1A CE D1 -  .dl	inst6502_isc_absx   			;FF
 4865 D1:DB2A -  -  -  -  
 4866 D1:DB2A -  -  -  -  ;-----------------------------------------------------------------------------
 4867 D1:DB2A -  -  -  -  ;-----------------------------------------------------------------------------
 4868 D1:DB2A -  -  -  -  ;-----------------------------------------------------------------------------
 4869 D1:DB2A -  -  -  -  ;These instructions are located here because they perform a function outside
 4870 D1:DB2A -  -  -  -  ;the context of emulating instructions. These are mapped to instructions that
 4871 D1:DB2A -  -  -  -  ;would, on the real hardware, freeze the CPU and require a reset to continue.
 4872 D1:DB2A -  -  -  -  ;
 4873 D1:DB2A -  -  -  -  ;Here, they'll let us perform useful things. Like exiting the emulator.
 4874 D1:DB2A -  -  -  -  ;Or jamming in one spot. Or other things in the future. Debugging things.
 4875 D1:DB2A -  -  -  -  ;Future stuff like breakpoints and console output. That sorta thing.
 4876 D1:DB2A -  -  -  -  ;
 4877 D1:DB2A -  -  -  -  
 4878 D1:DB2A -  -  -  -  inst6502_:
 4879 D1:DB2A C9 -  -  -      ret
 4880 D1:DB2B -  -  -  -  
 4881 D1:DB2B -  -  -  -  inst6502_jam_12_halt:
 4882 D1:DB2B 18 FE -  -      jr $
 4883 D1:DB2D C3 86 B4 D1     jp i6502FinishLoad
 4884 D1:DB31 -  -  -  -  
 4885 D1:DB31 -  -  -  -  inst6502_jam_02:
 4886 D1:DB31 -  -  -  -  inst6502_jam_22:
 4887 D1:DB31 -  -  -  -  inst6502_jam_32:
 4888 D1:DB31 -  -  -  -  inst6502_jam_42:
 4889 D1:DB31 -  -  -  -  inst6502_jam_52:
 4890 D1:DB31 -  -  -  -  inst6502_jam_62:
 4891 D1:DB31 -  -  -  -  inst6502_jam_72:
 4892 D1:DB31 -  -  -  -  inst6502_jam_92:
 4893 D1:DB31 -  -  -  -  inst6502_jam_B2:
 4894 D1:DB31 -  -  -  -  inst6502_jam_D2:
 4895 D1:DB31 -  -  -  -  inst6502_jam_F2:
 4896 D1:DB31 C9 -  -  -      ret
 4897 D1:DB32 -  -  -  -  
 4898 D1:DB32 -  -  -  -  
 4899 D1:DB32 -  -  -  -  
 4900 D1:DB32 -  -  -  -  
 4901 D1:DB32 -  -  -  -  
 4902 D1:DB32 -  -  -  -  
 4903 D1:DB32 -  -  -  -  
 4904 D1:DB32 -  -  -  -  
 4905 D1:DB32 -  -  -  -  
 4906 D1:DB32 -  -  -  -  
 4907 D1:DB32 -  -  -  -  
 4908 D1:DB32 -  -  -  -  
 4909 D1:DB32 -  -  -  -  
Listing for file "main.z80"
  783 D1:DB32 -  -  -  -  #include "debug.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    1 D1:DB32 -  -  -  -  ;This has all the tables needed to drive the debugger.
    2 D1:DB32 -  -  -  -  #include "debug_itab.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug_itab.z80"
    1 D1:DB32 -  -  -  -  inst6502_opcode_width_table:
    2 D1:DB32 01 -  -  -  .db 1    ;0: 
    3 D1:DB33 02 -  -  -  .db 2    ;1: zpg,X
    4 D1:DB34 03 -  -  -  .db 3    ;2: ind
    5 D1:DB35 03 -  -  -  .db 3    ;3: abs
    6 D1:DB36 03 -  -  -  .db 3    ;4: abs,X
    7 D1:DB37 02 -  -  -  .db 2    ;5: X,ind
    8 D1:DB38 01 -  -  -  .db 1    ;6: A
    9 D1:DB39 02 -  -  -  .db 2    ;7: zpg
   10 D1:DB3A 02 -  -  -  .db 2    ;8: rel
   11 D1:DB3B 02 -  -  -  .db 2    ;9: #
   12 D1:DB3C 01 -  -  -  .db 1    ;10: impl
   13 D1:DB3D 02 -  -  -  .db 2    ;11: ind,Y
   14 D1:DB3E 03 -  -  -  .db 3    ;12: abs,Y
   15 D1:DB3F 02 -  -  -  .db 2    ;13: zpg,Y
   16 D1:DB40 -  -  -  -  
   17 D1:DB40 -  -  -  -  
   18 D1:DB40 -  -  -  -  ;Note: 1=1byteOper, 2=2byteOper, -=1byteRelOper. Other chrs are literal
   19 D1:DB40 -  -  -  -  
   20 D1:DB40 -  -  -  -  inst6502_disassembler:
   21 D1:DB40 01 -  -  -  .db 1,""  ;
   22 D1:DB41 04 31 2C 58 .db 4,"1,X"  ;
   23 D1:DB45 04 28 32 29 .db 4,"(2)"  ;
   24 D1:DB49 02 32 -  -  .db 2,"2"  ;
   25 D1:DB4B 04 32 2C 58 .db 4,"2,X"  ;
   26 D1:DB4F 06 28 31 2C 
              58 29 -  -  .db 6,"(1,X)"  ;
   27 D1:DB55 02 41 -  -  .db 2,"A"  ;
   28 D1:DB57 02 31 -  -  .db 2,"1"  ;
   29 D1:DB59 02 2D -  -  .db 2,"-"  ;
   30 D1:DB5B 03 23 31 -  .db 3,"#1"  ;
   31 D1:DB5E 01 -  -  -  .db 1,""  ;
   32 D1:DB5F 06 28 31 29 
              2C 59 -  -  .db 6,"(1),Y"  ;
   33 D1:DB65 04 32 2C 59 .db 4,"2,Y"  ;
   34 D1:DB69 04 31 2C 59 .db 4,"1,Y"  ;
   35 D1:DB6D -  -  -  -  
   36 D1:DB6D -  -  -  -  inst6502_disassembly_table:
   37 D1:DB6D 42 52 4B 0A .db "BRK", 10     ;0x00
   38 D1:DB71 4F 52 41 05 .db "ORA", 5     ;0x01
   39 D1:DB75 4A 41 4D 00 .db "JAM", 0     ;0x02
   40 D1:DB79 53 4C 4F 05 .db "SLO", 5     ;0x03
   41 D1:DB7D 4E 4F 50 07 .db "NOP", 7     ;0x04
   42 D1:DB81 4F 52 41 07 .db "ORA", 7     ;0x05
   43 D1:DB85 41 53 4C 07 .db "ASL", 7     ;0x06
   44 D1:DB89 53 4C 4F 07 .db "SLO", 7     ;0x07
   45 D1:DB8D 50 48 50 0A .db "PHP", 10     ;0x08
   46 D1:DB91 4F 52 41 09 .db "ORA", 9     ;0x09
   47 D1:DB95 41 53 4C 06 .db "ASL", 6     ;0x0A
   48 D1:DB99 41 4E 43 09 .db "ANC", 9     ;0x0B
   49 D1:DB9D 4E 4F 50 03 .db "NOP", 3     ;0x0C
   50 D1:DBA1 4F 52 41 03 .db "ORA", 3     ;0x0D
   51 D1:DBA5 41 53 4C 03 .db "ASL", 3     ;0x0E
   52 D1:DBA9 53 4C 4F 03 .db "SLO", 3     ;0x0F
   53 D1:DBAD 42 50 4C 08 .db "BPL", 8     ;0x10
   54 D1:DBB1 4F 52 41 0B .db "ORA", 11     ;0x11
   55 D1:DBB5 4A 41 4D 00 .db "JAM", 0     ;0x12
   56 D1:DBB9 53 4C 4F 0B .db "SLO", 11     ;0x13
   57 D1:DBBD 4E 4F 50 01 .db "NOP", 1     ;0x14
   58 D1:DBC1 4F 52 41 01 .db "ORA", 1     ;0x15
   59 D1:DBC5 41 53 4C 01 .db "ASL", 1     ;0x16
   60 D1:DBC9 53 4C 4F 01 .db "SLO", 1     ;0x17
   61 D1:DBCD 43 4C 43 0A .db "CLC", 10     ;0x18
   62 D1:DBD1 4F 52 41 0C .db "ORA", 12     ;0x19
   63 D1:DBD5 4E 4F 50 0A .db "NOP", 10     ;0x1A
   64 D1:DBD9 53 4C 4F 0C .db "SLO", 12     ;0x1B
   65 D1:DBDD 4E 4F 50 04 .db "NOP", 4     ;0x1C
   66 D1:DBE1 4F 52 41 04 .db "ORA", 4     ;0x1D
   67 D1:DBE5 41 53 4C 04 .db "ASL", 4     ;0x1E
   68 D1:DBE9 53 4C 4F 04 .db "SLO", 4     ;0x1F
   69 D1:DBED 4A 53 52 03 .db "JSR", 3     ;0x20
   70 D1:DBF1 41 4E 44 05 .db "AND", 5     ;0x21
   71 D1:DBF5 4A 41 4D 00 .db "JAM", 0     ;0x22
   72 D1:DBF9 52 4C 41 05 .db "RLA", 5     ;0x23
   73 D1:DBFD 42 49 54 07 .db "BIT", 7     ;0x24
   74 D1:DC01 41 4E 44 07 .db "AND", 7     ;0x25
   75 D1:DC05 52 4F 4C 07 .db "ROL", 7     ;0x26
   76 D1:DC09 52 4C 41 07 .db "RLA", 7     ;0x27
   77 D1:DC0D 50 4C 50 0A .db "PLP", 10     ;0x28
   78 D1:DC11 41 4E 44 09 .db "AND", 9     ;0x29
   79 D1:DC15 52 4F 4C 06 .db "ROL", 6     ;0x2A
   80 D1:DC19 41 4E 43 09 .db "ANC", 9     ;0x2B
   81 D1:DC1D 42 49 54 03 .db "BIT", 3     ;0x2C
   82 D1:DC21 41 4E 44 03 .db "AND", 3     ;0x2D
   83 D1:DC25 52 4F 4C 03 .db "ROL", 3     ;0x2E
   84 D1:DC29 52 4C 41 03 .db "RLA", 3     ;0x2F
   85 D1:DC2D 42 4D 49 08 .db "BMI", 8     ;0x30
   86 D1:DC31 41 4E 44 0B .db "AND", 11     ;0x31
   87 D1:DC35 4A 41 4D 00 .db "JAM", 0     ;0x32
   88 D1:DC39 52 4C 41 0B .db "RLA", 11     ;0x33
   89 D1:DC3D 4E 4F 50 01 .db "NOP", 1     ;0x34
   90 D1:DC41 41 4E 44 01 .db "AND", 1     ;0x35
   91 D1:DC45 52 4F 4C 01 .db "ROL", 1     ;0x36
   92 D1:DC49 52 4C 41 01 .db "RLA", 1     ;0x37
   93 D1:DC4D 53 45 43 0A .db "SEC", 10     ;0x38
   94 D1:DC51 41 4E 44 0C .db "AND", 12     ;0x39
   95 D1:DC55 4E 4F 50 0A .db "NOP", 10     ;0x3A
   96 D1:DC59 52 4C 41 0C .db "RLA", 12     ;0x3B
   97 D1:DC5D 4E 4F 50 04 .db "NOP", 4     ;0x3C
   98 D1:DC61 41 4E 44 04 .db "AND", 4     ;0x3D
   99 D1:DC65 52 4F 4C 04 .db "ROL", 4     ;0x3E
  100 D1:DC69 52 4C 41 04 .db "RLA", 4     ;0x3F
  101 D1:DC6D 52 54 49 0A .db "RTI", 10     ;0x40
  102 D1:DC71 45 4F 52 05 .db "EOR", 5     ;0x41
  103 D1:DC75 4A 41 4D 00 .db "JAM", 0     ;0x42
  104 D1:DC79 53 52 45 05 .db "SRE", 5     ;0x43
  105 D1:DC7D 4E 4F 50 07 .db "NOP", 7     ;0x44
  106 D1:DC81 45 4F 52 07 .db "EOR", 7     ;0x45
  107 D1:DC85 4C 53 52 07 .db "LSR", 7     ;0x46
  108 D1:DC89 53 52 45 07 .db "SRE", 7     ;0x47
  109 D1:DC8D 50 48 41 0A .db "PHA", 10     ;0x48
  110 D1:DC91 45 4F 52 09 .db "EOR", 9     ;0x49
  111 D1:DC95 4C 53 52 06 .db "LSR", 6     ;0x4A
  112 D1:DC99 41 4C 52 09 .db "ALR", 9     ;0x4B
  113 D1:DC9D 4A 4D 50 03 .db "JMP", 3     ;0x4C
  114 D1:DCA1 45 4F 52 03 .db "EOR", 3     ;0x4D
  115 D1:DCA5 4C 53 52 03 .db "LSR", 3     ;0x4E
  116 D1:DCA9 53 52 45 03 .db "SRE", 3     ;0x4F
  117 D1:DCAD 42 56 43 08 .db "BVC", 8     ;0x50
  118 D1:DCB1 45 4F 52 0B .db "EOR", 11     ;0x51
  119 D1:DCB5 4A 41 4D 00 .db "JAM", 0     ;0x52
  120 D1:DCB9 53 52 45 0B .db "SRE", 11     ;0x53
  121 D1:DCBD 4E 4F 50 01 .db "NOP", 1     ;0x54
  122 D1:DCC1 45 4F 52 01 .db "EOR", 1     ;0x55
  123 D1:DCC5 4C 53 52 01 .db "LSR", 1     ;0x56
  124 D1:DCC9 53 52 45 01 .db "SRE", 1     ;0x57
  125 D1:DCCD 43 4C 49 0A .db "CLI", 10     ;0x58
  126 D1:DCD1 45 4F 52 0C .db "EOR", 12     ;0x59
  127 D1:DCD5 4E 4F 50 0A .db "NOP", 10     ;0x5A
  128 D1:DCD9 53 52 45 0C .db "SRE", 12     ;0x5B
  129 D1:DCDD 4E 4F 50 04 .db "NOP", 4     ;0x5C
  130 D1:DCE1 45 4F 52 04 .db "EOR", 4     ;0x5D
  131 D1:DCE5 4C 53 52 04 .db "LSR", 4     ;0x5E
  132 D1:DCE9 53 52 45 04 .db "SRE", 4     ;0x5F
  133 D1:DCED 52 54 53 0A .db "RTS", 10     ;0x60
  134 D1:DCF1 41 44 43 05 .db "ADC", 5     ;0x61
  135 D1:DCF5 4A 41 4D 00 .db "JAM", 0     ;0x62
  136 D1:DCF9 52 52 41 05 .db "RRA", 5     ;0x63
  137 D1:DCFD 4E 4F 50 07 .db "NOP", 7     ;0x64
  138 D1:DD01 41 44 43 07 .db "ADC", 7     ;0x65
  139 D1:DD05 52 4F 52 07 .db "ROR", 7     ;0x66
  140 D1:DD09 52 52 41 07 .db "RRA", 7     ;0x67
  141 D1:DD0D 50 4C 41 0A .db "PLA", 10     ;0x68
  142 D1:DD11 41 44 43 09 .db "ADC", 9     ;0x69
  143 D1:DD15 52 4F 52 06 .db "ROR", 6     ;0x6A
  144 D1:DD19 41 52 52 09 .db "ARR", 9     ;0x6B
  145 D1:DD1D 4A 4D 50 02 .db "JMP", 2     ;0x6C
  146 D1:DD21 41 44 43 03 .db "ADC", 3     ;0x6D
  147 D1:DD25 52 4F 52 03 .db "ROR", 3     ;0x6E
  148 D1:DD29 52 52 41 03 .db "RRA", 3     ;0x6F
  149 D1:DD2D 42 56 53 08 .db "BVS", 8     ;0x70
  150 D1:DD31 41 44 43 0B .db "ADC", 11     ;0x71
  151 D1:DD35 4A 41 4D 00 .db "JAM", 0     ;0x72
  152 D1:DD39 52 52 41 0B .db "RRA", 11     ;0x73
  153 D1:DD3D 4E 4F 50 01 .db "NOP", 1     ;0x74
  154 D1:DD41 41 44 43 01 .db "ADC", 1     ;0x75
  155 D1:DD45 52 4F 52 01 .db "ROR", 1     ;0x76
  156 D1:DD49 52 52 41 01 .db "RRA", 1     ;0x77
  157 D1:DD4D 53 45 49 0A .db "SEI", 10     ;0x78
  158 D1:DD51 41 44 43 0C .db "ADC", 12     ;0x79
  159 D1:DD55 4E 4F 50 0A .db "NOP", 10     ;0x7A
  160 D1:DD59 52 52 41 0C .db "RRA", 12     ;0x7B
  161 D1:DD5D 4E 4F 50 04 .db "NOP", 4     ;0x7C
  162 D1:DD61 41 44 43 04 .db "ADC", 4     ;0x7D
  163 D1:DD65 52 4F 52 04 .db "ROR", 4     ;0x7E
  164 D1:DD69 52 52 41 04 .db "RRA", 4     ;0x7F
  165 D1:DD6D 4E 4F 50 09 .db "NOP", 9     ;0x80
  166 D1:DD71 53 54 41 05 .db "STA", 5     ;0x81
  167 D1:DD75 4E 4F 50 09 .db "NOP", 9     ;0x82
  168 D1:DD79 53 41 58 05 .db "SAX", 5     ;0x83
  169 D1:DD7D 53 54 59 07 .db "STY", 7     ;0x84
  170 D1:DD81 53 54 41 07 .db "STA", 7     ;0x85
  171 D1:DD85 53 54 58 07 .db "STX", 7     ;0x86
  172 D1:DD89 53 41 58 07 .db "SAX", 7     ;0x87
  173 D1:DD8D 44 45 59 0A .db "DEY", 10     ;0x88
  174 D1:DD91 4E 4F 50 09 .db "NOP", 9     ;0x89
  175 D1:DD95 54 58 41 0A .db "TXA", 10     ;0x8A
  176 D1:DD99 41 4E 45 09 .db "ANE", 9     ;0x8B
  177 D1:DD9D 53 54 59 03 .db "STY", 3     ;0x8C
  178 D1:DDA1 53 54 41 03 .db "STA", 3     ;0x8D
  179 D1:DDA5 53 54 58 03 .db "STX", 3     ;0x8E
  180 D1:DDA9 53 41 58 03 .db "SAX", 3     ;0x8F
  181 D1:DDAD 42 43 43 08 .db "BCC", 8     ;0x90
  182 D1:DDB1 53 54 41 0B .db "STA", 11     ;0x91
  183 D1:DDB5 4A 41 4D 00 .db "JAM", 0     ;0x92
  184 D1:DDB9 53 48 41 0B .db "SHA", 11     ;0x93
  185 D1:DDBD 53 54 59 01 .db "STY", 1     ;0x94
  186 D1:DDC1 53 54 41 01 .db "STA", 1     ;0x95
  187 D1:DDC5 53 54 58 0D .db "STX", 13     ;0x96
  188 D1:DDC9 53 41 58 0D .db "SAX", 13     ;0x97
  189 D1:DDCD 54 59 41 0A .db "TYA", 10     ;0x98
  190 D1:DDD1 53 54 41 0C .db "STA", 12     ;0x99
  191 D1:DDD5 54 58 53 0A .db "TXS", 10     ;0x9A
  192 D1:DDD9 54 41 53 0C .db "TAS", 12     ;0x9B
  193 D1:DDDD 53 48 59 04 .db "SHY", 4     ;0x9C
  194 D1:DDE1 53 54 41 04 .db "STA", 4     ;0x9D
  195 D1:DDE5 53 48 58 0C .db "SHX", 12     ;0x9E
  196 D1:DDE9 53 48 41 0C .db "SHA", 12     ;0x9F
  197 D1:DDED 4C 44 59 09 .db "LDY", 9     ;0xA0
  198 D1:DDF1 4C 44 41 05 .db "LDA", 5     ;0xA1
  199 D1:DDF5 4C 44 58 09 .db "LDX", 9     ;0xA2
  200 D1:DDF9 4C 41 58 05 .db "LAX", 5     ;0xA3
  201 D1:DDFD 4C 44 59 07 .db "LDY", 7     ;0xA4
  202 D1:DE01 4C 44 41 07 .db "LDA", 7     ;0xA5
  203 D1:DE05 4C 44 58 07 .db "LDX", 7     ;0xA6
  204 D1:DE09 4C 41 58 07 .db "LAX", 7     ;0xA7
  205 D1:DE0D 54 41 59 0A .db "TAY", 10     ;0xA8
  206 D1:DE11 4C 44 41 09 .db "LDA", 9     ;0xA9
  207 D1:DE15 54 41 58 0A .db "TAX", 10     ;0xAA
  208 D1:DE19 4C 58 41 09 .db "LXA", 9     ;0xAB
  209 D1:DE1D 4C 44 59 03 .db "LDY", 3     ;0xAC
  210 D1:DE21 4C 44 41 03 .db "LDA", 3     ;0xAD
  211 D1:DE25 4C 44 58 03 .db "LDX", 3     ;0xAE
  212 D1:DE29 4C 41 58 03 .db "LAX", 3     ;0xAF
  213 D1:DE2D 42 43 53 08 .db "BCS", 8     ;0xB0
  214 D1:DE31 4C 44 41 0B .db "LDA", 11     ;0xB1
  215 D1:DE35 4A 41 4D 00 .db "JAM", 0     ;0xB2
  216 D1:DE39 4C 41 58 0B .db "LAX", 11     ;0xB3
  217 D1:DE3D 4C 44 59 01 .db "LDY", 1     ;0xB4
  218 D1:DE41 4C 44 41 01 .db "LDA", 1     ;0xB5
  219 D1:DE45 4C 44 58 0D .db "LDX", 13     ;0xB6
  220 D1:DE49 4C 41 58 0D .db "LAX", 13     ;0xB7
  221 D1:DE4D 43 4C 56 0A .db "CLV", 10     ;0xB8
  222 D1:DE51 4C 44 41 0C .db "LDA", 12     ;0xB9
  223 D1:DE55 54 53 58 0A .db "TSX", 10     ;0xBA
  224 D1:DE59 4C 41 53 0C .db "LAS", 12     ;0xBB
  225 D1:DE5D 4C 44 59 04 .db "LDY", 4     ;0xBC
  226 D1:DE61 4C 44 41 04 .db "LDA", 4     ;0xBD
  227 D1:DE65 4C 44 58 0C .db "LDX", 12     ;0xBE
  228 D1:DE69 4C 41 58 0C .db "LAX", 12     ;0xBF
  229 D1:DE6D 43 50 59 09 .db "CPY", 9     ;0xC0
  230 D1:DE71 43 4D 50 05 .db "CMP", 5     ;0xC1
  231 D1:DE75 4E 4F 50 09 .db "NOP", 9     ;0xC2
  232 D1:DE79 44 43 50 05 .db "DCP", 5     ;0xC3
  233 D1:DE7D 43 50 59 07 .db "CPY", 7     ;0xC4
  234 D1:DE81 43 4D 50 07 .db "CMP", 7     ;0xC5
  235 D1:DE85 44 45 43 07 .db "DEC", 7     ;0xC6
  236 D1:DE89 44 43 50 07 .db "DCP", 7     ;0xC7
  237 D1:DE8D 49 4E 59 0A .db "INY", 10     ;0xC8
  238 D1:DE91 43 4D 50 09 .db "CMP", 9     ;0xC9
  239 D1:DE95 44 45 58 0A .db "DEX", 10     ;0xCA
  240 D1:DE99 53 42 58 09 .db "SBX", 9     ;0xCB
  241 D1:DE9D 43 50 59 03 .db "CPY", 3     ;0xCC
  242 D1:DEA1 43 4D 50 03 .db "CMP", 3     ;0xCD
  243 D1:DEA5 44 45 43 03 .db "DEC", 3     ;0xCE
  244 D1:DEA9 44 43 50 03 .db "DCP", 3     ;0xCF
  245 D1:DEAD 42 4E 45 08 .db "BNE", 8     ;0xD0
  246 D1:DEB1 43 4D 50 0B .db "CMP", 11     ;0xD1
  247 D1:DEB5 4A 41 4D 00 .db "JAM", 0     ;0xD2
  248 D1:DEB9 44 43 50 0B .db "DCP", 11     ;0xD3
  249 D1:DEBD 4E 4F 50 01 .db "NOP", 1     ;0xD4
  250 D1:DEC1 43 4D 50 01 .db "CMP", 1     ;0xD5
  251 D1:DEC5 44 45 43 01 .db "DEC", 1     ;0xD6
  252 D1:DEC9 44 43 50 01 .db "DCP", 1     ;0xD7
  253 D1:DECD 43 4C 44 0A .db "CLD", 10     ;0xD8
  254 D1:DED1 43 4D 50 0C .db "CMP", 12     ;0xD9
  255 D1:DED5 4E 4F 50 0A .db "NOP", 10     ;0xDA
  256 D1:DED9 44 43 50 0C .db "DCP", 12     ;0xDB
  257 D1:DEDD 4E 4F 50 04 .db "NOP", 4     ;0xDC
  258 D1:DEE1 43 4D 50 04 .db "CMP", 4     ;0xDD
  259 D1:DEE5 44 45 43 04 .db "DEC", 4     ;0xDE
  260 D1:DEE9 44 43 50 04 .db "DCP", 4     ;0xDF
  261 D1:DEED 43 50 58 09 .db "CPX", 9     ;0xE0
  262 D1:DEF1 53 42 43 05 .db "SBC", 5     ;0xE1
  263 D1:DEF5 4E 4F 50 09 .db "NOP", 9     ;0xE2
  264 D1:DEF9 49 53 43 05 .db "ISC", 5     ;0xE3
  265 D1:DEFD 43 50 58 07 .db "CPX", 7     ;0xE4
  266 D1:DF01 53 42 43 07 .db "SBC", 7     ;0xE5
  267 D1:DF05 49 4E 43 07 .db "INC", 7     ;0xE6
  268 D1:DF09 49 53 43 07 .db "ISC", 7     ;0xE7
  269 D1:DF0D 49 4E 58 0A .db "INX", 10     ;0xE8
  270 D1:DF11 53 42 43 09 .db "SBC", 9     ;0xE9
  271 D1:DF15 4E 4F 50 0A .db "NOP", 10     ;0xEA
  272 D1:DF19 55 53 42 09 .db "USB", 9     ;0xEB
  273 D1:DF1D 43 50 58 03 .db "CPX", 3     ;0xEC
  274 D1:DF21 53 42 43 03 .db "SBC", 3     ;0xED
  275 D1:DF25 49 4E 43 03 .db "INC", 3     ;0xEE
  276 D1:DF29 49 53 43 03 .db "ISC", 3     ;0xEF
  277 D1:DF2D 42 45 51 08 .db "BEQ", 8     ;0xF0
  278 D1:DF31 53 42 43 0B .db "SBC", 11     ;0xF1
  279 D1:DF35 4A 41 4D 00 .db "JAM", 0     ;0xF2
  280 D1:DF39 49 53 43 0B .db "ISC", 11     ;0xF3
  281 D1:DF3D 4E 4F 50 01 .db "NOP", 1     ;0xF4
  282 D1:DF41 53 42 43 01 .db "SBC", 1     ;0xF5
  283 D1:DF45 49 4E 43 01 .db "INC", 1     ;0xF6
  284 D1:DF49 49 53 43 01 .db "ISC", 1     ;0xF7
  285 D1:DF4D 53 45 44 0A .db "SED", 10     ;0xF8
  286 D1:DF51 53 42 43 0C .db "SBC", 12     ;0xF9
  287 D1:DF55 4E 4F 50 0A .db "NOP", 10     ;0xFA
  288 D1:DF59 49 53 43 0C .db "ISC", 12     ;0xFB
  289 D1:DF5D 4E 4F 50 04 .db "NOP", 4     ;0xFC
  290 D1:DF61 53 42 43 04 .db "SBC", 4     ;0xFD
  291 D1:DF65 49 4E 43 04 .db "INC", 4     ;0xFE
  292 D1:DF69 49 53 43 04 .db "ISC", 4     ;0xFF
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    3 D1:DF6D -  -  -  -  
    4 D1:DF6D -  -  -  -  
    5 D1:DF6D -  -  -  -  ;You must assign a print character routine.
    6 D1:DF6D -  -  -  -  ;You must also write all opcode bytes to operbuf or map operbuf to where written
    7 D1:DF6D -  -  -  -  dbg_printChr    = PrintBigFont
    8 D1:DF6D -  -  -  -  operbuf         = debugram
    9 D1:DF6D -  -  -  -  
   10 D1:DF6D -  -  -  -  
   11 D1:DF6D -  -  -  -  dbg_resetScreen:
   12 D1:DF6D 21 00 00 D4     ld  hl,screenBuf1
   13 D1:DF71 11 01 00 D4     ld  de,screenBuf1+1
   14 D1:DF75 01 FF 57 02     ld  bc,(2*240*320)-1
   15 D1:DF79 36 00 -  -      ld  (hl),$00
   16 D1:DF7B ED B0 -  -      ldir
   17 D1:DF7D AF -  -  -      xor a,a
   18 D1:DF7E CD CE AF D1     call setLineStart
   19 D1:DF82 CD D7 AF D1     call setCurLine
   20 D1:DF86 C9 -  -  -      ret
   21 D1:DF87 -  -  -  -  
   22 D1:DF87 -  -  -  -  dbg_prepNextLine:
   23 D1:DF87 AF -  -  -      xor a,a
   24 D1:DF88 32 F6 31 D0     ld  (xPos),a
   25 D1:DF8C CD A4 B0 D1     call calculateScreenPtr
   26 D1:DF90 EB -  -  -      ex  de,hl
   27 D1:DF91 21 FF 2B D5     ld  hl,screenBuf2-1
   28 D1:DF95 B7 -  -  -      or  a,a
   29 D1:DF96 ED 52 -  -      sbc hl,de
   30 D1:DF98 -  -  -  -  ;If C: DE in sb2. subtract to set in sb1.
   31 D1:DF98 -  -  -  -  ;If NC: DE in sb1. add to set in sb2.
   32 D1:DF98 21 00 2C 01     ld  hl,320*240
   33 D1:DF9C 30 04 -  -      jr  nc,+_
   34 D1:DF9E 21 00 D4 FE     ld  hl,-(320*240)+0
   35 D1:DFA2 19 -  -  -  _:  add hl,de   ;HL set to other buffer. DE points to current buffer.
   36 D1:DFA3 01 00 0A 00     ld  bc,320*8    ;copy one line from other buffer to current buffer.
   37 D1:DFA7 7E -  -  -  _:  ld  a,(hl)
   38 D1:DFA8 C6 01 -  -      add a,1     ;carry if $FF (white), NC if not
   39 D1:DFAA 9F -  -  -      sbc a,a     ;if carry, returns to $FF, else is black
   40 D1:DFAB 77 -  -  -      ld  (hl),a
   41 D1:DFAC ED A0 -  -      ldi
   42 D1:DFAE EA A7 DF D1     jp  pe,-_
   43 D1:DFB2 3A F7 31 D0     ld  a,(yPos)
   44 D1:DFB6 FE 1D -  -      cp  a,29
   45 D1:DFB8 20 06 -  -      jr  nz,+_
   46 D1:DFBA 21 00 D4 FE     ld  hl,-(320*240)
   47 D1:DFBE 19 -  -  -      add hl,de
   48 D1:DFBF EB -  -  -      ex de,hl        ;if bottom of screen, then reset DE to top of screen.
   49 D1:DFC0 D5 -  -  -  _:  push de
   50 D1:DFC1 E1 -  -  -      pop hl
   51 D1:DFC2 13 -  -  -      inc de
   52 D1:DFC3 71 -  -  -      ld  (hl),c
   53 D1:DFC4 01 BF 08 00     ld  bc,(320*7)-1    ;erase whole line below it to prepare for writing.
   54 D1:DFC8 ED B0 -  -      ldir
   55 D1:DFCA C9 -  -  -      ret
   56 D1:DFCB -  -  -  -  
   57 D1:DFCB -  -  -  -  ;Input: ix = core_memory_ix 
   58 D1:DFCB -  -  -  -  ;Output: Text onscreen
   59 D1:DFCB -  -  -  -  dbg_printLine:
   60 D1:DFCB E5 C5 D5 DD 
              E5 FD E5 F5     push hl \ push bc \ push de \ push ix \ push iy \ push af
   61 D1:DFD3 ED 23 00 -      lea hl,iy+0
   62 D1:DFD6 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl
   63 D1:DFD9 11 00 00 00     ld  de,DEBUG_PRINT_START_CYCLE
   64 D1:DFDD B7 -  -  -      or  a,a
   65 D1:DFDE ED 52 -  -      sbc hl,de
   66 D1:DFE0 DA C4 E0 D1     jp  c,dbg_printLine_noPrint
   67 D1:DFE4 -  -  -  -  
   68 D1:DFE4 3E 1A -  -      ld  a,$1A   ;blue
   69 D1:DFE6 32 26 B0 D1     ld  (fontBGColor_var),a
   70 D1:DFEA 32 73 B0 D1     ld  (smallFontBGColor_var),a
   71 D1:DFEE DD 27 0E -      ld  hl,(ix+CURRENT_OPCODES)
   72 D1:DFF1 22 F9 31 D0     ld  (operbuf),hl
   73 D1:DFF5 CD 87 DF D1     call dbg_prepNextLine
   74 D1:DFF9 CD E2 AF D1     call newLine
   75 D1:DFFD DD 7E 06 -      ld  a,(ix+REGPC+1)
   76 D1:E000 CD 3F B0 D1     call printSmallNumPair
   77 D1:E004 DD 7E 05 -      ld  a,(ix+REGPC+0)
   78 D1:E007 CD 3F B0 D1     call printSmallNumPair
   79 D1:E00B 3E 20 -  -      ld  a,' '
   80 D1:E00D CD 0F B0 D1     call printBigFont
   81 D1:E011 -  -  -  -      ;
   82 D1:E011 3E 41 -  -      ld  a,'A'
   83 D1:E013 CD 0F B0 D1     call printBigFont
   84 D1:E017 DD 7E 00 -      ld  a,(ix+REGA)
   85 D1:E01A CD 3F B0 D1     call printSmallNumPair
   86 D1:E01E 3E 20 -  -      ld  a,' '
   87 D1:E020 CD 0F B0 D1     call printBigFont
   88 D1:E024 -  -  -  -      ;
   89 D1:E024 3E 58 -  -      ld  a,'X'
   90 D1:E026 CD 0F B0 D1     call printBigFont
   91 D1:E02A DD 7E 01 -      ld  a,(ix+REGX)
   92 D1:E02D CD 3F B0 D1     call printSmallNumPair
   93 D1:E031 3E 20 -  -      ld  a,' '
   94 D1:E033 CD 0F B0 D1     call printBigFont
   95 D1:E037 -  -  -  -      ;
   96 D1:E037 3E 59 -  -      ld  a,'Y'
   97 D1:E039 CD 0F B0 D1     call printBigFont
   98 D1:E03D DD 7E 02 -      ld  a,(ix+REGY)
   99 D1:E040 CD 3F B0 D1     call printSmallNumPair
  100 D1:E044 3E 20 -  -      ld  a,' '
  101 D1:E046 CD 0F B0 D1     call printBigFont
  102 D1:E04A -  -  -  -      ;
  103 D1:E04A 3E 53 -  -      ld  a,'S'
  104 D1:E04C CD 0F B0 D1     call printBigFont
  105 D1:E050 DD 7E 03 -      ld  a,(ix+REGSP)
  106 D1:E053 CD 3F B0 D1     call printSmallNumPair
  107 D1:E057 3E 20 -  -      ld  a,' '
  108 D1:E059 CD 0F B0 D1     call printBigFont
  109 D1:E05D -  -  -  -      ;
  110 D1:E05D 3E 50 -  -      ld  a,'P'
  111 D1:E05F CD 0F B0 D1     call printBigFont
  112 D1:E063 DD 7E 04 -      ld  a,(ix+REGSR)
  113 D1:E066 CD 3F B0 D1     call printSmallNumPair
  114 D1:E06A 3E 20 -  -      ld  a,' '
  115 D1:E06C CD 0F B0 D1     call printBigFont
  116 D1:E070 -  -  -  -  
  117 D1:E070 -  -  -  -      ;
  118 D1:E070 -  -  -  -  ;    ld  hl,dbg_printLine_str001
  119 D1:E070 -  -  -  -  ;    call printString
  120 D1:E070 -  -  -  -  ;    ld  b,5
  121 D1:E070 -  -  -  -  ;    lea hl,ix+0
  122 D1:E070 -  -  -  -  ;_:  ld  a,(hl)
  123 D1:E070 -  -  -  -  ;    inc hl
  124 D1:E070 -  -  -  -  ;    push bc
  125 D1:E070 -  -  -  -  ;        push hl
  126 D1:E070 -  -  -  -  ;            call printSmallNumPair
  127 D1:E070 -  -  -  -  ;            ld  a,' '
  128 D1:E070 -  -  -  -  ;            call printBigFont
  129 D1:E070 -  -  -  -  ;        pop hl
  130 D1:E070 -  -  -  -  ;    pop bc
  131 D1:E070 -  -  -  -  ;    djnz -_
  132 D1:E070 -  -  -  -  
  133 D1:E070 DD 7E 0D -      ld  a,(ix+CYCLES_CURRENT+2)
  134 D1:E073 CD 3F B0 D1     call printSmallNumPair
  135 D1:E077 DD 7E 0C -      ld  a,(ix+CYCLES_CURRENT+1)
  136 D1:E07A CD 3F B0 D1     call printSmallNumPair
  137 D1:E07E DD 7E 0B -      ld  a,(ix+CYCLES_CURRENT+0)
  138 D1:E081 CD 3F B0 D1     call printSmallNumPair
  139 D1:E085 3E 20 -  -      ld  a,' '
  140 D1:E087 CD 0F B0 D1     call printBigFont
  141 D1:E08B 2A F9 31 D0     ld  hl,(operbuf)
  142 D1:E08F DD 2F 0E -      ld  (ix+CURRENT_OPCODES),hl
  143 D1:E092 7D -  -  -      ld  a,L
  144 D1:E093 CD B4 E1 D1     call dbg_getInstSize
  145 D1:E097 06 03 -  -      ld  b,3
  146 D1:E099 4F -  -  -      ld  c,a
  147 D1:E09A 0C -  -  -      inc c
  148 D1:E09B ED 22 0E -      lea hl,ix+CURRENT_OPCODES
  149 D1:E09E 7E -  -  -  _:  ld  a,(hl)
  150 D1:E09F 23 -  -  -      inc hl
  151 D1:E0A0 E5 -  -  -      push hl
  152 D1:E0A1 0D -  -  -          dec c
  153 D1:E0A2 F2 A7 E0 D1         jp p,+_
  154 D1:E0A6 0C -  -  -          inc c   ;never let c go below zero.
  155 D1:E0A7 C5 -  -  -  _:      push bc
  156 D1:E0A8 28 06 -  -              jr  z,+_
  157 D1:E0AA CD 3F B0 D1             call printSmallNumPair
  158 D1:E0AE 18 06 -  -              jr ++_
  159 D1:E0B0 3E 20 -  -  _:          ld  a,' '
  160 D1:E0B2 CD 0F B0 D1             call printBigFont
  161 D1:E0B6 C1 -  -  -  _:      pop bc
  162 D1:E0B7 E1 -  -  -      pop hl
  163 D1:E0B8 10 E4 -  -      djnz ----_
  164 D1:E0BA 3E 20 -  -      ld  a,' '
  165 D1:E0BC CD 0F B0 D1     call printBigFont
  166 D1:E0C0 CD CC E1 D1     call dbg_printDisassembly
  167 D1:E0C4 -  -  -  -  
  168 D1:E0C4 -  -  -  -      ;
  169 D1:E0C4 -  -  -  -      ;Remove section below when done testing nestest for timings
  170 D1:E0C4 -  -  -  -      ;
  171 D1:E0C4 -  -  -  -  dbg_printLine_noPrint:
  172 D1:E0C4 11 00 00 00     ld  de,0
  173 D1:E0C8 2A 1F 34 D0     ld  hl,(timings_base)
  174 D1:E0CC 5E -  -  -      ld  e,(hl)
  175 D1:E0CD 23 -  -  -      inc hl
  176 D1:E0CE 56 -  -  -      ld  d,(hl)
  177 D1:E0CF 23 -  -  -      inc hl
  178 D1:E0D0 22 1F 34 D0     ld  (timings_base),hl
  179 D1:E0D4 DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  180 D1:E0D7 B7 -  -  -      or  a,a
  181 D1:E0D8 ED 52 -  -      sbc hl,de
  182 D1:E0DA 28 17 -  -      jr  z,+_
  183 D1:E0DC 21 FF FF FF     ld  hl,-1
  184 D1:E0E0 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  185 D1:E0E3 CD E2 AF D1     call newLine
  186 D1:E0E7 21 77 E1 D1     ld  hl,dbg_printLine_timeMismatch
  187 D1:E0EB CD F9 AF D1     call printString
  188 D1:E0EF DD 36 14 01     ld  (ix+CORE_ERROR_LEVEL),1
  189 D1:E0F3 2A 1F 34 D0 _:  ld  hl,(timings_base)
  190 D1:E0F7 7E -  -  -      ld  a,(hl)
  191 D1:E0F8 23 -  -  -      inc hl
  192 D1:E0F9 22 1F 34 D0     ld  (timings_base),hl
  193 D1:E0FD DD BE 04 -      cp  a,(ix+REGSR)
  194 D1:E100 28 17 -  -      jr  z,+_
  195 D1:E102 21 FF FF FF     ld  hl,-1
  196 D1:E106 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  197 D1:E109 CD E2 AF D1     call newLine
  198 D1:E10D 21 91 E1 D1     ld  hl,dbg_printLine_statusRegisterMismatch
  199 D1:E111 CD F9 AF D1     call printString
  200 D1:E115 DD 36 14 02     ld  (ix+CORE_ERROR_LEVEL),2
  201 D1:E119 -  -  -  -  _:
  202 D1:E119 -  -  -  -      ;
  203 D1:E119 -  -  -  -      ;End debug-debug section
  204 D1:E119 -  -  -  -      ;
  205 D1:E119 CD 05 AF D1     call fastCopy
  206 D1:E11D AF -  -  -      xor a,a     ;black
  207 D1:E11E 32 26 B0 D1     ld  (fontBGColor_var),a
  208 D1:E122 32 73 B0 D1     ld  (smallFontBGColor_var),a
  209 D1:E126 -  -  -  -  
  210 D1:E126 F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  211 D1:E12E -  -  -  -      ;push hl \ push bc \ push de \ push ix \ push iy \ push af
  212 D1:E12E C9 -  -  -      ret
  213 D1:E12F -  -  -  -  
  214 D1:E12F -  -  -  -  
  215 D1:E12F -  -  -  -      ;also remove this when done timing debugging
  216 D1:E12F 11 00 00 00     ld  de,0
  217 D1:E133 2A 1F 34 D0     ld  hl,(timings_base)
  218 D1:E137 5E -  -  -      ld  e,(hl)
  219 D1:E138 23 -  -  -      inc hl
  220 D1:E139 56 -  -  -      ld  d,(hl)
  221 D1:E13A 23 -  -  -      inc hl
  222 D1:E13B 22 1F 34 D0     ld  (timings_base),hl
  223 D1:E13F DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  224 D1:E142 B7 -  -  -      or  a,a
  225 D1:E143 ED 52 -  -      sbc hl,de
  226 D1:E145 28 13 -  -      jr  z,+_
  227 D1:E147 21 FF FF FF     ld  hl,-1
  228 D1:E14B DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  229 D1:E14E CD E2 AF D1     call newLine
  230 D1:E152 21 77 E1 D1     ld  hl,dbg_printLine_timeMismatch
  231 D1:E156 CD F9 AF D1     call printString
  232 D1:E15A -  -  -  -  _:  ;
  233 D1:E15A -  -  -  -      ;End debug-debug section
  234 D1:E15A -  -  -  -      ;
  235 D1:E15A CD 05 AF D1     call fastCopy
  236 D1:E15E AF -  -  -      xor a,a     ;black
  237 D1:E15F 32 26 B0 D1     ld  (fontBGColor_var),a
  238 D1:E163 32 73 B0 D1     ld  (smallFontBGColor_var),a
  239 D1:E167 F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  240 D1:E16F C9 -  -  -      ret
  241 D1:E170 -  -  -  -  
  242 D1:E170 -  -  -  -  dbg_printLine_str001:
  243 D1:E170 41 58 59 53 
              50 20 00 -  .db "AXYSP ",0
  244 D1:E177 -  -  -  -  dbg_printLine_timeMismatch:
  245 D1:E177 43 50 55 20 
              54 65 73 74 
              20 74 69 6D 
              69 6E 67 20 
              6D 69 73 6D 
              61 74 63 68 
              2E 00 -  -  .db "CPU Test timing mismatch.",0
  246 D1:E191 -  -  -  -  dbg_printLine_statusRegisterMismatch:
  247 D1:E191 -  -  -  -  ;    0123456789012345678901234567890123456789
  248 D1:E191 43 50 55 20 
              54 65 73 74 
              20 73 74 61 
              74 75 73 20 
              72 65 67 69 
              73 74 65 72 
              20 6D 69 73 
              6D 61 74 63 
              68 2E 00 -  .db "CPU Test status register mismatch.",0
  249 D1:E1B4 -  -  -  -  
  250 D1:E1B4 -  -  -  -  
  251 D1:E1B4 -  -  -  -  
  252 D1:E1B4 -  -  -  -  
  253 D1:E1B4 -  -  -  -  
  254 D1:E1B4 -  -  -  -  
  255 D1:E1B4 -  -  -  -  ;A=instruction. Returns: A=size
  256 D1:E1B4 -  -  -  -  dbg_getInstSize:
  257 D1:E1B4 E5 D5 -  -      push hl \ push de
  258 D1:E1B6 57 -  -  -          ld  d,a
  259 D1:E1B7 1E 04 -  -          ld  e,4
  260 D1:E1B9 ED 5C -  -          mlt de
  261 D1:E1BB 21 70 DB D1         ld  hl,inst6502_disassembly_table+3
  262 D1:E1BF 19 -  -  -          add hl,de
  263 D1:E1C0 16 00 -  -          ld  d,0
  264 D1:E1C2 5E -  -  -          ld  e,(hl)
  265 D1:E1C3 21 32 DB D1         ld  hl,inst6502_opcode_width_table
  266 D1:E1C7 19 -  -  -          add hl,de
  267 D1:E1C8 7E -  -  -          ld  a,(hl)
  268 D1:E1C9 D1 E1 -  -      pop de \ pop hl
  269 D1:E1CB C9 -  -  -      ret
  270 D1:E1CC -  -  -  -  
  271 D1:E1CC -  -  -  -  dbg_printDisassembly:
  272 D1:E1CC F5 C5 D5 E5 
              DD E5 -  -      push af \ push bc \ push de \ push hl \ push ix
  273 D1:E1D2 -  -  -  -      ;find entry in disassembly table
  274 D1:E1D2 2A F9 31 D0     ld  hl,(operbuf)
  275 D1:E1D6 26 04 -  -      ld  H,4
  276 D1:E1D8 ED 6C -  -      mlt hl
  277 D1:E1DA 11 6D DB D1     ld  de,inst6502_disassembly_table
  278 D1:E1DE 19 -  -  -      add hl,de
  279 D1:E1DF 06 03 -  -      ld  b,3
  280 D1:E1E1 7E -  -  -  _:  ld  a,(hl)
  281 D1:E1E2 23 -  -  -      inc hl
  282 D1:E1E3 CD 69 E2 D1     call dbg_printC
  283 D1:E1E7 10 F8 -  -      djnz -_
  284 D1:E1E9 3E 20 -  -      ld  a,' '
  285 D1:E1EB CD 69 E2 D1     call dbg_printC
  286 D1:E1EF 46 -  -  -      ld  b,(hl)
  287 D1:E1F0 04 -  -  -      inc b
  288 D1:E1F1 -  -  -  -      ;Instruction addressing mode in B. Now find text for that address mode.
  289 D1:E1F1 21 40 DB D1     ld  hl,inst6502_disassembler
  290 D1:E1F5 11 00 00 00     ld  de,0
  291 D1:E1F9 5E -  -  -  _:  ld  e,(hl)
  292 D1:E1FA 19 -  -  -      add hl,de
  293 D1:E1FB 10 FC -  -      djnz -_
  294 D1:E1FD 1D -  -  -      dec e
  295 D1:E1FE 28 29 -  -      jr  z,dbg_printDisassembly_end  ;stop if text is zero-sized
  296 D1:E200 ED 52 -  -      sbc hl,de   ;rewind to start of text part of instruction. E is text length.
  297 D1:E202 43 -  -  -      ld  b,e
  298 D1:E203 -  -  -  -  dbg_printDisassembly_printOperandLoop:
  299 D1:E203 7E -  -  -      ld  a,(hl)
  300 D1:E204 23 -  -  -      inc hl
  301 D1:E205 FE 31 -  -      cp  a,'1'
  302 D1:E207 20 06 -  -      jr  nz,+_
  303 D1:E209 CD 4D E2 D1     call dbg_printOperand1
  304 D1:E20D 18 18 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  305 D1:E20F FE 32 -  -  _:  cp  a,'2'
  306 D1:E211 20 06 -  -      jr  nz,+_
  307 D1:E213 CD 45 E2 D1     call dbg_printOperand2
  308 D1:E217 18 0E -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  309 D1:E219 FE 2D -  -  _:  cp  a,'-'
  310 D1:E21B 20 06 -  -      jr  nz,+_
  311 D1:E21D CD 30 E2 D1     call dbg_printRel1
  312 D1:E221 18 04 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  313 D1:E223 CD 69 E2 D1 _:  call dbg_printC
  314 D1:E227 -  -  -  -  dbg_PrintDisassembly_printOperandFallthrough:
  315 D1:E227 10 DA -  -      djnz dbg_printDisassembly_printOperandLoop
  316 D1:E229 -  -  -  -  dbg_printDisassembly_end:
  317 D1:E229 DD E1 E1 D1 
              C1 F1 -  -      pop ix \ pop hl \ pop de \ pop bc \ pop af
  318 D1:E22F C9 -  -  -      ret
  319 D1:E230 -  -  -  -  
  320 D1:E230 -  -  -  -  dbg_printRel1:
  321 D1:E230 3A FA 31 D0     ld  a,(operbuf+1)
  322 D1:E234 B7 -  -  -      or  a,a
  323 D1:E235 F2 43 E2 D1     jp  p,dbg_printRel1_skipNeg
  324 D1:E239 F5 -  -  -      push af
  325 D1:E23A 3E 2D -  -          ld   a,'-'
  326 D1:E23C CD 69 E2 D1         call dbg_printC
  327 D1:E240 F1 -  -  -      pop af
  328 D1:E241 ED 44 -  -      neg
  329 D1:E243 -  -  -  -  dbg_printRel1_skipNeg:
  330 D1:E243 18 0C -  -      jr dbg_printHex
  331 D1:E245 -  -  -  -  
  332 D1:E245 -  -  -  -  dbg_printOperand2:
  333 D1:E245 3A FB 31 D0     ld  a,(operbuf+2)
  334 D1:E249 CD 51 E2 D1     call dbg_printHex
  335 D1:E24D -  -  -  -  dbg_printOperand1:
  336 D1:E24D 3A FA 31 D0     ld  a,(operbuf+1)
  337 D1:E251 -  -  -  -  dbg_printHex:
  338 D1:E251 CD 56 E2 D1     call dispAHex
  339 D1:E255 C9 -  -  -      ret
  340 D1:E256 -  -  -  -  
  341 D1:E256 -  -  -  -  dispAHex:
  342 D1:E256 F5 -  -  -      push af
  343 D1:E257 CD 5E E2 D1         call +_
  344 D1:E25B F1 -  -  -      pop af
  345 D1:E25C 18 04 -  -      jr  ++_
  346 D1:E25E 1F -  -  -  _:  rra
  347 D1:E25F 1F -  -  -      rra
  348 D1:E260 1F -  -  -      rra
  349 D1:E261 1F -  -  -      rra
  350 D1:E262 F6 F0 -  -  _:  or  a,$F0
  351 D1:E264 27 -  -  -      daa
  352 D1:E265 C6 A0 -  -      add a,$A0
  353 D1:E267 CE 40 -  -      adc a,$40
  354 D1:E269 -  -  -  -  dbg_printC:
  355 D1:E269 E5 -  -  -      push hl
  356 D1:E26A C5 -  -  -          push bc
  357 D1:E26B CD 0F B0 D1             call dbg_printChr
  358 D1:E26F C1 -  -  -          pop bc
  359 D1:E270 E1 -  -  -      pop hl
  360 D1:E271 C9 -  -  -      ret
Listing for file "main.z80"
  784 D1:E272 -  -  -  -  .echo "Main program size: ",$-programStart
