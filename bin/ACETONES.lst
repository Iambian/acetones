    1 00:0000 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "main.z80"
    2 00:0000 -  -  -  -  .org userMem-2
    3 D1:A87F EF 7B -  -  .db $EF, $7B
    4 D1:A881 -  -  -  -  
    5 D1:A881 -  -  -  -  ;SPASM help msg
    6 D1:A881 -  -  -  -  ;-E = Assemble eZ80 code
    7 D1:A881 -  -  -  -  ;-T = Generate code listing
    8 D1:A881 -  -  -  -  ;-C = Code counter mode
    9 D1:A881 -  -  -  -  ;-L = Symbol table mode
   10 D1:A881 -  -  -  -  ;-S = Stats mode
   11 D1:A881 -  -  -  -  ;-O = Don't write to output file
   12 D1:A881 -  -  -  -  ;-I [directory] = Add include directory
   13 D1:A881 -  -  -  -  ;-A = Labels are cAse-sensitive
   14 D1:A881 -  -  -  -  ;-D<name>[=value] = Create a define 'name' [with 'value']
   15 D1:A881 -  -  -  -  ;-N = Don't use colors for messages
   16 D1:A881 -  -  -  -  ;-V <Expression> = Pipe expression directly into assembly
   17 D1:A881 -  -  -  -  ;-H = Print this help message
   18 D1:A881 -  -  -  -  
   19 D1:A881 -  -  -  -  
   20 D1:A881 -  -  -  -  
   21 D1:A881 -  -  -  -  
   22 D1:A881 -  -  -  -  programStart:
   23 D1:A881 F3 -  -  -      di
   24 D1:A882 DD 21 00 00 
              F0 -  -  -      ld  ix,$F00000
   25 D1:A887 DD CB 2C C6     set 0,(ix+$2C)      ;Enable ON latch
   26 D1:A88B DD 36 28 01     ld  (ix+$28),1      ;If latch was set, clear it.
   27 D1:A88F -  -  -  -  
   28 D1:A88F -  -  -  -      ;Continuous. Else it'd be possible for an NES ROM to tank the CPU
   29 D1:A88F -  -  -  -      ;performance by constantly polling the keyboard.
   30 D1:A88F 21 00 00 F5     ld  hl,mpKeyMode
   31 D1:A893 36 03 -  -      ld  (hl),3      
   32 D1:A895 ED 73 FC 31 
              D0 -  -  -      ld  (save_spl),sp
   33 D1:A89A ED 6E -  -      ld  a,MB
   34 D1:A89C 32 FF 31 D0     ld  (save_mbase),a
   35 D1:A8A0 3E D0 -  -      ld  a,$D0
   36 D1:A8A2 ED 6D -  -      ld  MB,a
   37 D1:A8A4 CD BE B2 D1     call startGfx
   38 D1:A8A8 -  -  -  -  
   39 D1:A8A8 21 00 00 D4     ld  hl,vRam
   40 D1:A8AC 22 10 00 E3     ld  (mpLcdBase),hl
   41 D1:A8B0 11 01 00 D4     ld  de,vRam+1
   42 D1:A8B4 01 FF 2B 01     ld  bc,320*240-1
   43 D1:A8B8 36 00 -  -      ld  (hl),0
   44 D1:A8BA ED B0 -  -      ldir
   45 D1:A8BC CD 89 B2 D1     call waituntilnewkeypress
   46 D1:A8C0 CD 81 B2 D1     call waituntilkeyrelease
   47 D1:A8C4 -  -  -  -  
   48 D1:A8C4 -  -  -  -  
   49 D1:A8C4 -  -  -  -      ;Set primecell window parameters, then set sitronix window params.
   50 D1:A8C4 -  -  -  -      ;In that order.
   51 D1:A8C4 21 34 03 0A     ld  hl,$0A0300|(13<<2)   ;6b:(PIX/16)-1. Default 14 (240). Need 224 -> 13.
   52 D1:A8C8 22 00 00 E3     ld  (mpLcdTiming0),hl
   53 D1:A8CC 21 FF 08 02     ld  hl,$020800|(255)     ;10b:PIX. Default 319 (230). Need 256 -> 255
   54 D1:A8D0 22 04 00 E3     ld  (mpLcdTiming1),hl
   55 D1:A8D4 -  -  -  -      ;Column address set
   56 D1:A8D4 3E 2A -  -      ld  a,$2A
   57 D1:A8D6 CD 50 B4 D1     call spiCmd
   58 D1:A8DA 3E 00 CD 4E 
              B4 D1 3E 20 
              CD 4E B4 D1     ld  a,$00   \ call spiParam \ ld  a,$20 \ call spiParam ;hi, then lo bytes
   59 D1:A8E6 3E 01 CD 4E 
              B4 D1 3E 1F 
              CD 4E B4 D1     ld  a,$01   \ call spiParam \ ld  a,$1F \ call spiParam ;hi, then lo bytes
   60 D1:A8F2 -  -  -  -      ;Row address set
   61 D1:A8F2 3E 2B -  -      ld  a,$2B
   62 D1:A8F4 CD 50 B4 D1     call spiCmd
   63 D1:A8F8 3E 00 CD 4E 
              B4 D1 3E 08 
              CD 4E B4 D1     ld  a,$00   \ call spiParam \ ld  a,$08 \ call spiParam ;hi, then lo bytes
   64 D1:A904 3E 00 CD 4E 
              B4 D1 3E E7 
              CD 4E B4 D1     ld  a,$00   \ call spiParam \ ld  a,$E7 \ call spiParam ;hi, then lo bytes
   65 D1:A910 21 00 00 D4     ld  hl,vRam
   66 D1:A914 22 10 00 E3     ld  (mpLcdBase),hl
   67 D1:A918 21 00 00 00     ld  hl,$0000
   68 D1:A91C -  -  -  -      ;Write data into vRam. Draw a simple box.
   69 D1:A91C 21 00 00 D4     ld  hl,vRam
   70 D1:A920 11 01 00 D4     ld  de,vRam+1
   71 D1:A924 01 FF DF 00     ld  bc,256*224-1
   72 D1:A928 36 E8 -  -      ld  (hl),$E8        ;red box. Rose?
   73 D1:A92A ED B0 -  -      ldir
   74 D1:A92C 21 00 00 D4     ld  hl,vRam
   75 D1:A930 11 01 00 D4     ld  de,vRam+1
   76 D1:A934 01 FF 00 00     ld  bc,255
   77 D1:A938 36 57 -  -      ld  (hl),$57
   78 D1:A93A ED B0 -  -      ldir                ;top side. blue
   79 D1:A93C 21 00 DF D4     ld  hl,vRam+(256*223)
   80 D1:A940 11 01 DF D4     ld  de,vRam+(256*223)+1
   81 D1:A944 01 FF 00 00     ld  bc,255
   82 D1:A948 36 57 -  -      ld  (hl),$57
   83 D1:A94A ED B0 -  -      ldir                ;bottom side. blue
   84 D1:A94C 21 00 01 D4     ld  hl,vRam+256
   85 D1:A950 11 FF 00 00     ld  de,255
   86 D1:A954 06 DE -  -      ld  b,224-2
   87 D1:A956 36 25 -  -  _:  ld  (hl),$25        ;green left/right sides
   88 D1:A958 19 -  -  -      add hl,de
   89 D1:A959 36 25 -  -      ld  (hl),$25
   90 D1:A95B 23 -  -  -      inc hl
   91 D1:A95C 10 F8 -  -      djnz -_
   92 D1:A95E -  -  -  -  
   93 D1:A95E CD 89 B2 D1     call waituntilnewkeypress
   94 D1:A962 CD 81 B2 D1     call waituntilkeyrelease
   95 D1:A966 -  -  -  -  
   96 D1:A966 -  -  -  -  
   97 D1:A966 -  -  -  -      ;Restore defaults. First set sitronix window params, then primecell params.
   98 D1:A966 -  -  -  -  
   99 D1:A966 21 38 03 0A     ld  hl,$0A0338
  100 D1:A96A 22 00 00 E3     ld  (mpLcdTiming0),hl
  101 D1:A96E 21 3F 09 02     ld  hl,$02093F
  102 D1:A972 22 04 00 E3     ld  (mpLcdTiming1),hl
  103 D1:A976 -  -  -  -      ;Column address set
  104 D1:A976 3E 2A -  -      ld  a,$2A
  105 D1:A978 CD 50 B4 D1     call spiCmd
  106 D1:A97C 3E 00 CD 4E 
              B4 D1 3E 00 
              CD 4E B4 D1     ld  a,$00   \ call spiParam \ ld  a,$00 \ call spiParam ;hi, then lo bytes
  107 D1:A988 3E 01 CD 4E 
              B4 D1 3E 3F 
              CD 4E B4 D1     ld  a,$01   \ call spiParam \ ld  a,$3F \ call spiParam ;hi, then lo bytes
  108 D1:A994 -  -  -  -      ;Row address set
  109 D1:A994 3E 2B -  -      ld  a,$2B
  110 D1:A996 CD 50 B4 D1     call spiCmd
  111 D1:A99A 3E 00 CD 4E 
              B4 D1 3E 00 
              CD 4E B4 D1     ld  a,$00   \ call spiParam \ ld  a,$00 \ call spiParam ;hi, then lo bytes
  112 D1:A9A6 3E 00 CD 4E 
              B4 D1 3E EF 
              CD 4E B4 D1     ld  a,$00   \ call spiParam \ ld  a,$EF \ call spiParam ;hi, then lo bytes
  113 D1:A9B2 -  -  -  -  
  114 D1:A9B2 -  -  -  -  
  115 D1:A9B2 C3 6E AB D1     jp endCurrentRun
  116 D1:A9B6 -  -  -  -  
  117 D1:A9B6 -  -  -  -  
  118 D1:A9B6 -  -  -  -  
  119 D1:A9B6 -  -  -  -  
  120 D1:A9B6 -  -  -  -  
  121 D1:A9B6 -  -  -  -  
  122 D1:A9B6 -  -  -  -      ;
  123 D1:A9B6 -  -  -  -      ; todo; write test 6502 program, map it into rom.
  124 D1:A9B6 -  -  -  -      ; map virtual screen device into ram too. 32x30 screen ascii display
  125 D1:A9B6 -  -  -  -      ; is probably looking nice right about now.
  126 D1:A9B6 -  -  -  -      ; Could probably map it into PPU space since we're not actually doing
  127 D1:A9B6 -  -  -  -      ; anything about that until long after we're done testing core integrity
  128 D1:A9B6 -  -  -  -      ; You'll probably want to create a mockup vector table then do some equate
  129 D1:A9B6 -  -  -  -      ; magic to offset it and map it to $FFXX such that the three vectors will
  130 D1:A9B6 -  -  -  -      ; magically line up with $FFFA-$FFFF. NMI, RES, and IRQ. In that order.
  131 D1:A9B6 -  -  -  -      ; The rest of the page won't need to matter. It could literally be the
  132 D1:A9B6 -  -  -  -      ; surrounding eZ80 data/code. Just... don't allow writes to it.
  133 D1:A9B6 -  -  -  -      ;
  134 D1:A9B6 -  -  -  -  
  135 D1:A9B6 21 00 00 D4     ld  hl,screenBuf1
  136 D1:A9BA 11 01 00 D4     ld  de,screenBuf1+1
  137 D1:A9BE 01 FF 57 02     ld  bc,(2*240*320)-1
  138 D1:A9C2 36 00 -  -      ld  (hl),$00
  139 D1:A9C4 ED B0 -  -      ldir
  140 D1:A9C6 -  -  -  -  
  141 D1:A9C6 -  -  -  -      ;Makes sure all non-ROM areas have a mapping
  142 D1:A9C6 21 00 33 D0     ld  hl,scrap_mapping
  143 D1:A9CA 01 01 80 00     ld  bc,$008001
  144 D1:A9CE 1E 00 -  -      ld  e,0
  145 D1:A9D0 CD 9C B9 D1     call i6502_map_pages
  146 D1:A9D4 -  -  -  -  
  147 D1:A9D4 -  -  -  -  
  148 D1:A9D4 -  -  -  -  
  149 D1:A9D4 -  -  -  -      ;load reset vectors
  150 D1:A9D4 21 BC AA D1     ld  hl,testVectors
  151 D1:A9D8 01 01 01 00     ld  bc,$000101
  152 D1:A9DC 1E FF -  -      ld  e,$FF
  153 D1:A9DE CD 9C B9 D1     call i6502_map_pages
  154 D1:A9E2 -  -  -  -      ;load program ROM to lowmem
  155 D1:A9E2 21 BC AB D1     ld  hl,testCode
  156 D1:A9E6 01 08 20 00     ld  bc,$002008
  157 D1:A9EA 1E 80 -  -      ld  e,$80
  158 D1:A9EC CD 9C B9 D1     call i6502_map_pages
  159 D1:A9F0 -  -  -  -      ;map nametable to writeable address space. Write routine to mirror this
  160 D1:A9F0 -  -  -  -      ;memory to screen.
  161 D1:A9F0 21 00 58 D0     ld  hl,NAMETABLE1
  162 D1:A9F4 01 04 20 00     ld  bc,$002004
  163 D1:A9F8 1E 40 -  -      ld  e,$40
  164 D1:A9FA CD 9C B9 D1     call i6502_map_pages
  165 D1:A9FE -  -  -  -      ;Default mappings have been mapped. Let's search for and load a ROM file
  166 D1:A9FE -  -  -  -      ;to acquire additional mappings. And maybe load in something that'll run.
  167 D1:A9FE CD 11 B3 D1     call clearTextBuf
  168 D1:AA02 3E 01 -  -      ld  a,1
  169 D1:AA04 CD 5E B3 D1     call setLineStart
  170 D1:AA08 CD 67 B3 D1     call setCurLine
  171 D1:AA0C 21 15 AC D1     ld  hl,text001
  172 D1:AA10 CD 89 B3 D1     call printString
  173 D1:AA14 FD 21 8C AC 
              D1 -  -  -      ld  iy,firstFileHeader
  174 D1:AA19 01 00 00 00     ld  bc,0
  175 D1:AA1D FD 4E FF -      ld  c,(iy-1)
  176 D1:AA20 CD 0C B2 D1     call vatTraverse
  177 D1:AA24 DA A9 AC D1     jp  c,err_noContainersFound
  178 D1:AA28 D5 -  -  -      push de
  179 D1:AA29 21 35 AC D1         ld  hl,text003
  180 D1:AA2D CD 89 B3 D1         call printString
  181 D1:AA31 DD 46 FA -          ld  b,(ix-6)
  182 D1:AA34 ED 22 F9 -          lea hl,ix-7
  183 D1:AA37 7E -  -  -  _:      ld  a,(hl)
  184 D1:AA38 2B -  -  -          dec hl
  185 D1:AA39 E5 -  -  -          push hl
  186 D1:AA3A C5 -  -  -              push bc
  187 D1:AA3B CD 9F B3 D1                 call PrintBigFont
  188 D1:AA3F C1 -  -  -              pop bc
  189 D1:AA40 E1 -  -  -          pop hl
  190 D1:AA41 10 F4 -  -          djnz -_
  191 D1:AA43 CD 72 B3 D1         call newLine
  192 D1:AA47 D1 -  -  -      pop de
  193 D1:AA48 CD 03 AE D1     call loadROMFile
  194 D1:AA4C -  -  -  -  
  195 D1:AA4C 21 42 AC D1     ld  hl,text004
  196 D1:AA50 CD 89 B3 D1     call printString
  197 D1:AA54 -  -  -  -  
  198 D1:AA54 -  -  -  -      ;load perf timers
  199 D1:AA54 -  -  -  -  
  200 D1:AA54 DD 21 00 00 
              F2 -  -  -      ld  ix,$F20000
  201 D1:AA59 DD 27 30 -      ld  hl,(ix+$30)
  202 D1:AA5C CB 85 -  -      res 0,L ;turn off timer 0
  203 D1:AA5E CB CD -  -      set 1,L ;timer 0 uses 32KHz clock
  204 D1:AA60 CB 95 -  -      res 2,L ;disables timer 0 interrupt generator
  205 D1:AA62 CB CC -  -      set 1,H ;timer 0 counts upward
  206 D1:AA64 DD 2F 30 -      ld  (ix+$30),hl
  207 D1:AA67 -  -  -  -      
  208 D1:AA67 AF -  -  -      xor a,a
  209 D1:AA68 ED 62 -  -      sbc hl,hl
  210 D1:AA6A DD 2F 00 -      ld  (ix+0),hl
  211 D1:AA6D DD 77 03 -      ld  (ix+3),a
  212 D1:AA70 -  -  -  -  
  213 D1:AA70 -  -  -  -      ;Initialize all (additional) state machines,
  214 D1:AA70 -  -  -  -      ;then initialize/start the emulation core
  215 D1:AA70 -  -  -  -  
  216 D1:AA70 CD CA B7 D1     call int6502_init
  217 D1:AA74 CD 29 E8 D1     call ppu_init
  218 D1:AA78 CD 8F B8 D1     call i6502Init
  219 D1:AA7C -  -  -  -  
  220 D1:AA7C -  -  -  -      ;===========================================================================
  221 D1:AA7C -  -  -  -      ;===========================================================================
  222 D1:AA7C -  -  -  -      ;===========================================================================
  223 D1:AA7C -  -  -  -      ; TODO: This is where you'll insert code to test the PPU by manually
  224 D1:AA7C -  -  -  -      ; manipulating memory and registers, then calling its render function.
  225 D1:AA7C -  -  -  -      ; All mappings have been set up by the mappers. All you got to do is
  226 D1:AA7C -  -  -  -      ; use them. For initialization purposes, note these addresses:
  227 D1:AA7C -  -  -  -      ;
  228 D1:AA7C -  -  -  -      ; NAMETABLE1, NAMETABLE2, OBJECT_ATTRIB_MEM, vram_palette
  229 D1:AA7C -  -  -  -      ;
  230 D1:AA7C -  -  -  -      ; Configure the PPU registers. Notably:
  231 D1:AA7C -  -  -  -      ;
  232 D1:AA7C -  -  -  -      ; IX+PPU_CTRL, IX+PPU_MASK, IX+PPU_SCROLL
  233 D1:AA7C -  -  -  -      ;
  234 D1:AA7C -  -  -  -      ; After all these, you'll want to come up with a way to deal with drawlists
  235 D1:AA7C -  -  -  -      ; so games can alter PPU_SCROLL mid-frame. Sprite 0 hits is the popular
  236 D1:AA7C -  -  -  -      ; way to do that, so take note of when that happens.
  237 D1:AA7C -  -  -  -      ;
  238 D1:AA7C -  -  -  -      ;===========================================================================
  239 D1:AA7C -  -  -  -      ;===========================================================================
  240 D1:AA7C -  -  -  -      ;===========================================================================
  241 D1:AA7C -  -  -  -      ;nametable fill
  242 D1:AA7C 21 00 58 D0     ld  hl,NAMETABLE1
  243 D1:AA80 E5 D1 -  -      push hl \ pop de
  244 D1:AA82 13 -  -  -      inc de
  245 D1:AA83 01 BF 03 00     ld  bc,(32*30)-1
  246 D1:AA87 36 5F -  -      ld  (hl),'_'
  247 D1:AA89 ED B0 -  -      ldir
  248 D1:AA8B 21 00 5C D0     ld  hl,NAMETABLE2
  249 D1:AA8F E5 D1 -  -      push hl \ pop de
  250 D1:AA91 13 -  -  -      inc de
  251 D1:AA92 01 BF 03 00     ld  bc,(32*30)-1
  252 D1:AA96 36 2A -  -      ld  (hl),'*'
  253 D1:AA98 ED B0 -  -      ldir
  254 D1:AA9A -  -  -  -      ;hide all sprites
  255 D1:AA9A 21 00 60 D0     ld  hl,OBJECT_ATTRIB_MEM
  256 D1:AA9E E5 D1 -  -      push hl \ pop de
  257 D1:AAA0 13 -  -  -      inc de
  258 D1:AAA1 01 FF 00 00     ld  bc,255
  259 D1:AAA5 36 FF -  -      ld  (hl),$FF
  260 D1:AAA7 ED B0 -  -      ldir
  261 D1:AAA9 -  -  -  -      ;nametable 1 box pattern on displayable area (omit top and bottom 8 pixels)
  262 D1:AAA9 21 00 58 D0     ld  hl,NAMETABLE1
  263 D1:AAAD E5 D1 -  -      push hl \ pop de
  264 D1:AAAF 13 -  -  -      inc de
  265 D1:AAB0 01 BF 03 00     ld  bc,(32*30)-1
  266 D1:AAB4 36 5A -  -      ld  (hl),'Z'
  267 D1:AAB6 ED B0 -  -      ldir
  268 D1:AAB8 21 20 58 D0     ld  hl,NAMETABLE1+32
  269 D1:AABC E5 D1 -  -      push hl \ pop de
  270 D1:AABE 13 -  -  -      inc de
  271 D1:AABF 01 1F 00 00     ld  bc,31
  272 D1:AAC3 36 77 -  -      ld  (hl),'w'
  273 D1:AAC5 ED B0 -  -      ldir
  274 D1:AAC7 21 A0 5B D0     ld  hl,NAMETABLE1+(32*29)
  275 D1:AACB E5 D1 -  -      push hl \ pop de
  276 D1:AACD 13 -  -  -      inc de
  277 D1:AACE 01 1F 00 00     ld  bc,31
  278 D1:AAD2 36 77 -  -      ld  (hl),'w'
  279 D1:AAD4 ED B0 -  -      ldir
  280 D1:AAD6 21 40 58 D0     ld  hl,NAMETABLE1+64
  281 D1:AADA 06 1A -  -      ld  b,26
  282 D1:AADC 11 1F 00 00     ld  de,31
  283 D1:AAE0 36 69 -  -  _:  ld  (hl),'i'
  284 D1:AAE2 19 -  -  -      add hl,de
  285 D1:AAE3 36 6C -  -      ld  (hl),'l'
  286 D1:AAE5 23 -  -  -      inc hl
  287 D1:AAE6 10 F8 -  -      djnz -_
  288 D1:AAE8 -  -  -  -      ;clear attribute memory
  289 D1:AAE8 21 C0 5B D0     ld  hl,NAMETABLE1+960
  290 D1:AAEC 11 C1 5B D0     ld  de,NAMETABLE1+961
  291 D1:AAF0 01 3F 00 00     ld  bc,63
  292 D1:AAF4 36 00 -  -      ld  (hl),0
  293 D1:AAF6 ED B0 -  -      ldir
  294 D1:AAF8 21 C0 5F D0     ld  hl,NAMETABLE2+960
  295 D1:AAFC 11 C1 5F D0     ld  de,NAMETABLE2+961
  296 D1:AB00 01 3F 00 00     ld  bc,63
  297 D1:AB04 36 00 -  -      ld  (hl),0
  298 D1:AB06 ED B0 -  -      ldir
  299 D1:AB08 -  -  -  -  
  300 D1:AB08 -  -  -  -  
  301 D1:AB08 -  -  -  -  
  302 D1:AB08 18 20 -  -      jr ++_
  303 D1:AB0A -  -  -  -  _:  
  304 D1:AB0A 0E 30 30 30 .db $0E,$30,$30,$30 ;bg0
  305 D1:AB0E 0E 30 30 30 .db $0E,$30,$30,$30 ;bg1
  306 D1:AB12 0E 30 30 30 .db $0E,$30,$30,$30 ;bg2
  307 D1:AB16 0E 30 30 30 .db $0E,$30,$30,$30 ;bg4
  308 D1:AB1A 0E 30 30 30 .db $0E,$30,$30,$30 ;sp0
  309 D1:AB1E 0E 30 30 30 .db $0E,$30,$30,$30 ;sp1
  310 D1:AB22 0E 30 30 30 .db $0E,$30,$30,$30 ;sp2
  311 D1:AB26 0E 30 30 30 .db $0E,$30,$30,$30 ;sp3
  312 D1:AB2A -  -  -  -  
  313 D1:AB2A -  -  -  -  
  314 D1:AB2A 00 -  -  -  _:  nop
  315 D1:AB2B -  -  -  -      ;load palette RAM
  316 D1:AB2B 21 0A AB D1     ld  hl,--_
  317 D1:AB2F 11 00 32 D0     ld  de,vram_palette
  318 D1:AB33 01 20 00 00     ld  bc,32
  319 D1:AB37 ED B0 -  -      ldir
  320 D1:AB39 -  -  -  -  
  321 D1:AB39 -  -  -  -  
  322 D1:AB39 -  -  -  -      ;set registers
  323 D1:AB39 DD 36 FC 00     ld  (ix+PPU_XSCROLL),0      ;PPU_SCROLL is write-only. Data gets...
  324 D1:AB3D DD 36 FD 00     ld  (ix+PPU_YSCROLL),0      ;... deposited into these two registers.
  325 D1:AB41 DD 36 E0 88     ld  (ix+PPU_CTRL),%10001000 ;NMI on, 1PPU, 8x8, BG0k, SP1k, VRC horiz, BNA00
  326 D1:AB45 DD 36 E1 1E     ld  (ix+PPU_MASK),%00011110 ;0emph, draw BG/spr, draw BG/spr left, no gs.
  327 D1:AB49 -  -  -  -  
  328 D1:AB49 CD CB E8 D1     call ppu_drawFrame
  329 D1:AB4D -  -  -  -  
  330 D1:AB4D CD 95 B2 D1     call fastCopy
  331 D1:AB51 -  -  -  -  
  332 D1:AB51 CD 89 B2 D1     call waituntilnewkeypress
  333 D1:AB55 CD 81 B2 D1     call waituntilkeyrelease
  334 D1:AB59 -  -  -  -  
  335 D1:AB59 -  -  -  -  
  336 D1:AB59 -  -  -  -      ;Performance timer disable and read.
  337 D1:AB59 -  -  -  -  
  338 D1:AB59 DD 21 00 00 
              F2 -  -  -      ld  ix,$F20000
  339 D1:AB5E DD 7E 30 -      ld  a,(ix+$30)
  340 D1:AB61 CB 87 -  -      res 0,a ;turn off timer 0
  341 D1:AB63 CB CF -  -      set 1,a ;timer 0 uses 32768Hz clock
  342 D1:AB65 CB 97 -  -      res 2,a ;disables timer 0 interrupt generator
  343 D1:AB67 DD 77 30 -      ld  (ix+$30),a
  344 D1:AB6A -  -  -  -      ;
  345 D1:AB6A 2A 00 00 F2     ld  hl,($F20000)
  346 D1:AB6E -  -  -  -  
  347 D1:AB6E -  -  -  -  endCurrentRun:
  348 D1:AB6E -  -  -  -      ;call dbg_prepNextLine
  349 D1:AB6E -  -  -  -      ;call newLine
  350 D1:AB6E 21 64 AC D1     ld  hl,text005
  351 D1:AB72 CD 89 B3 D1     call printString
  352 D1:AB76 -  -  -  -  
  353 D1:AB76 -  -  -  -      ;call printTextBuf
  354 D1:AB76 CD 95 B2 D1     call fastCopy
  355 D1:AB7A -  -  -  -  
  356 D1:AB7A DD 21 00 00 
              F0 -  -  -  _:  ld  ix,$F00000
  357 D1:AB7F DD 36 28 01     ld  (ix+$28),1      ;If latch was set, clear it.
  358 D1:AB83 DD 7E 20 -      ld  a,(ix+$20)      ;Check state of latch.
  359 D1:AB86 E6 01 -  -      and a,%00000001
  360 D1:AB88 C2 7A AB D1     jp  nz,-_           ;wait until ON key is released.
  361 D1:AB8C DD 21 00 00 
              F0 -  -  -      ld  ix,$F00000
  362 D1:AB91 DD CB 2C 86     res 0,(ix+$2C)      ;Disable ON latch
  363 D1:AB95 DD 36 28 01     ld  (ix+$28),1      ;If latch was set, clear it.
  364 D1:AB99 -  -  -  -  
  365 D1:AB99 -  -  -  -  ;    nop
  366 D1:AB99 CD 89 B2 D1     call waituntilnewkeypress
  367 D1:AB9D CD 81 B2 D1     call waituntilkeyrelease
  368 D1:ABA1 -  -  -  -  
  369 D1:ABA1 -  -  -  -      ;
  370 D1:ABA1 -  -  -  -      ;
  371 D1:ABA1 -  -  -  -      ;
  372 D1:ABA1 -  -  -  -  programExit:
  373 D1:ABA1 CD B0 B2 D1     call stopGfx
  374 D1:ABA5 ED 7B FC 31 
              D0 -  -  -      ld  sp,(save_spl)
  375 D1:ABAA 3A FF 31 D0     ld  a,(save_mbase)
  376 D1:ABAE ED 6D -  -      ld  MB,a
  377 D1:ABB0 FD 21 80 00 
              D0 -  -  -      ld  iy,flags
  378 D1:ABB5 C9 -  -  -      ret
  379 D1:ABB6 -  -  -  -  
  380 D1:ABB6 -  -  -  -  ;NMI, RES, and IRQ. In that order.
  381 D1:ABB6 -  -  -  -  testVectors .equ $-(256-6)
  382 D1:ABB6 00 80 -  -  .dw $8000
  383 D1:ABB8 00 80 -  -  .dw $8000
  384 D1:ABBA 00 80 -  -  .dw $8000
  385 D1:ABBC -  -  -  -  testCode:
  386 D1:ABBC A9 00 AA A8 .db $A9,$00,$AA,$A8
  387 D1:ABC0 BD 14 80 -  .db $BD,$14,$80
  388 D1:ABC3 C9 00 -  -  .db $C9,$00
  389 D1:ABC5 F0 08 -  -  .db $F0,$08
  390 D1:ABC7 99 21 40 -  .db $99,$21,$40
  391 D1:ABCA E8 C8 -  -  .db $E8,$C8
  392 D1:ABCC -  -  -  -  ;.db $12
  393 D1:ABCC 4C 04 80 02 .db $4C,$04,$80,$02
  394 D1:ABD0 48 65 6C 6C 
              6F 2C 20 57 
              6F -  -  -  .db $48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F
  395 D1:ABD9 72 6C 64 21 
              00 -  -  -  .db $72,$6C,$64,$21,$00
  396 D1:ABDE -  -  -  -  
  397 D1:ABDE -  -  -  -  
  398 D1:ABDE A9 00 AA A8 
              BD 11 80 C9 
              00 F0 05 99 
              21 40 D0 -  .db $A9,$00,$AA,$A8,$BD,$11,$80,$C9,$00,$F0,$05,$99,$21,$40,$D0
  399 D1:ABED F4 02 48 65 
              6C 6C 6F 2C 
              20 57 6F 72 
              6C 64 21 00 .db $F4,$02,$48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F,$72,$6C,$64,$21,$00
  400 D1:ABFD 02 -  -  -  .db $02     ;JAM. Emulator terminates on unsupported instructions or JAMs.
  401 D1:ABFE -  -  -  -  
  402 D1:ABFE -  -  -  -  helloWorld:
  403 D1:ABFE 48 65 6C 6C 
              6F 2C 20 57 
              6F 72 6C 64 
              21 00 -  -  .db "Hello, World!",0
  404 D1:AC0C -  -  -  -  
  405 D1:AC0C -  -  -  -  timings_file:
  406 D1:AC0C 15 74 69 6D 
              69 6E 67 73 
              00 -  -  -  .db AppVarObj,"timings",0
  407 D1:AC15 -  -  -  -  
  408 D1:AC15 -  -  -  -  text001:
  409 D1:AC15 4C 6F 6F 6B 
              69 6E 67 20 
              75 70 20 6E 
              65 61 72 65 
              73 74 20 52 
              4F 4D 20 66 
              69 6C 65 2E 
              2E 2E 0A 00 .db "Looking up nearest ROM file...\n",0
  410 D1:AC35 -  -  -  -  text003:
  411 D1:AC35 46 69 6C 65 
              20 66 6F 75 
              6E 64 3A 20 
              00 -  -  -  .db "File found: ",0
  412 D1:AC42 -  -  -  -  text004:
  413 D1:AC42 52 4F 4D 46 
              69 6C 65 20 
              6C 6F 61 64 
              65 64 20 61 
              6E 64 20 72 
              65 61 64 79 
              20 74 6F 20 
              72 75 6E 2E 
              0A 00 -  -  .db "ROMFile loaded and ready to run.\n",0
  414 D1:AC64 -  -  -  -  text005:
  415 D1:AC64 -  -  -  -  ;    0123456789012345678901234567890123456789
  416 D1:AC64 43 50 55 20 
              45 78 65 63 
              75 74 69 6F 
              6E 20 48 61 
              6C 74 65 64 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 00 -  .db "CPU Execution Halted                  ",0
  417 D1:AC8B -  -  -  -  text006:
  418 D1:AC8B -  -  -  -  
  419 D1:AC8B -  -  -  -  
  420 D1:AC8B 07 -  -  -  .db 7
  421 D1:AC8C -  -  -  -  firstFileHeader:
  422 D1:AC8C 43 45 4E 52 
              4F 4D 00 -  .db "CENROM",0
  423 D1:AC93 -  -  -  -  
  424 D1:AC93 -  -  -  -  err_:
  425 D1:AC93 -  -  -  -  
  426 D1:AC93 -  -  -  -  err_err:
  427 D1:AC93 E1 -  -  -      pop hl
  428 D1:AC94 CD 89 B3 D1     call printString
  429 D1:AC98 -  -  -  -  err_err_quit:
  430 D1:AC98 CD 95 B2 D1     call fastCopy
  431 D1:AC9C 00 -  -  -      nop
  432 D1:AC9D CD 89 B2 D1     call waituntilnewkeypress
  433 D1:ACA1 CD 81 B2 D1     call waituntilkeyrelease
  434 D1:ACA5 C3 A1 AB D1     jp programExit
  435 D1:ACA9 -  -  -  -  
  436 D1:ACA9 -  -  -  -  err_noContainersFound:
  437 D1:ACA9 CD 93 AC D1     call err_err
  438 D1:ACAD -  -  -  -      ;0123456789012345678901234567890123456789
  439 D1:ACAD 54 72 61 76 
              65 72 73 65 
              20 66 6F 75 
              6E 64 20 6E 
              6F 20 63 61 
              6E 64 69 64 
              61 74 65 20 
              52 4F 4D 53 
              2E 0A 00 -  .db "Traverse found no candidate ROMS.\n",0
  440 D1:ACD0 -  -  -  -  
  441 D1:ACD0 -  -  -  -  err_missingFiles:
  442 D1:ACD0 F5 -  -  -      push af
  443 D1:ACD1 21 E2 AC D1         ld  hl,err_missingFiles_str
  444 D1:ACD5 CD 89 B3 D1         call printString
  445 D1:ACD9 F1 -  -  -      pop af
  446 D1:ACDA CD CF B3 D1     call printSmallNumPair
  447 D1:ACDE C3 98 AC D1     jp err_err_quit
  448 D1:ACE2 -  -  -  -  err_missingFiles_str:
  449 D1:ACE2 4E 75 6D 62 
              65 72 20 6F 
              66 20 66 69 
              6C 65 73 20 
              6D 69 73 73 
              69 6E 67 3A 
              20 00 -  -  .db "Number of files missing: ",0
  450 D1:ACFC -  -  -  -  
  451 D1:ACFC -  -  -  -  err_tooManyFiles:
  452 D1:ACFC CD 93 AC D1     call err_err
  453 D1:AD00 -  -  -  -      ;0123456789012345678901234567890123456789
  454 D1:AD00 4D 61 78 20 
              66 69 6C 65 
              20 63 6F 75 
              6E 74 20 70 
              65 72 20 52 
              4F 4D 20 69 
              6D 61 67 65 
              20 65 78 63 
              65 65 64 65 
              64 2E 00 -  .db "Max file count per ROM image exceeded.",0
  455 D1:AD27 -  -  -  -  
  456 D1:AD27 -  -  -  -  err_PRGROMTooLarge:
  457 D1:AD27 CD 93 AC D1     call err_err
  458 D1:AD2B 4D 61 78 69 
              6D 75 6D 20 
              73 75 70 70 
              6F 72 74 65 
              64 20 50 52 
              47 5F 52 4F 
              4D 20 65 78 
              63 65 65 64 
              65 64 2E 00 .db "Maximum supported PRG_ROM exceeded.",0
  459 D1:AD4F -  -  -  -  err_CHRROMTooLarge:
  460 D1:AD4F CD 93 AC D1     call err_err
  461 D1:AD53 4D 61 78 69 
              6D 75 6D 20 
              73 75 70 70 
              6F 72 74 65 
              64 20 43 48 
              52 5F 52 4F 
              4D 20 65 78 
              63 65 65 64 
              65 64 2E 00 .db "Maximum supported CHR_ROM exceeded.",0
  462 D1:AD77 -  -  -  -  
  463 D1:AD77 -  -  -  -  err_missingROMDetected:
  464 D1:AD77 CD 93 AC D1     call err_err
  465 D1:AD7B 46 69 6C 65 
              20 74 6F 6F 
              20 73 6D 61 
              6C 6C 20 74 
              6F 20 68 6F 
              6C 64 20 64 
              65 63 6C 61 
              72 65 64 20 
              50 52 47 2B 
              43 48 52 00 .db "File too small to hold declared PRG+CHR",0
  466 D1:ADA3 -  -  -  -  
  467 D1:ADA3 -  -  -  -  err_ROMHeaderDamaged:
  468 D1:ADA3 CD 93 AC D1     call err_err
  469 D1:ADA7 69 4E 45 53 
              20 52 4F 4D 
              20 68 65 61 
              64 65 72 20 
              64 61 6D 61 
              67 65 64 2E 
              00 -  -  -  .db "iNES ROM header damaged.",0
  470 D1:ADC0 -  -  -  -  
  471 D1:ADC0 -  -  -  -  err_MapperOutOfRange:
  472 D1:ADC0 CD 93 AC D1     call err_err
  473 D1:ADC4 55 6E 73 75 
              70 70 6F 72 
              74 65 64 20 
              6D 61 70 70 
              65 72 20 64 
              65 74 65 63 
              74 65 64 2E 
              00 -  -  -  .db "Unsupported mapper detected.",0
  474 D1:ADE1 -  -  -  -  
  475 D1:ADE1 -  -  -  -  err_CHRROMNotFound:
  476 D1:ADE1 CD 93 AC D1     call err_err
  477 D1:ADE5 43 48 52 5F 
              52 4F 4D 20 
              6E 6F 74 20 
              66 6F 75 6E 
              64 20 69 6E 
              73 69 64 65 
              20 66 69 6C 
              65 00 -  -  .db "CHR_ROM not found inside file",0
  478 D1:AE03 -  -  -  -  
  479 D1:AE03 -  -  -  -  
  480 D1:AE03 -  -  -  -  ;Input: DE = Address of first file after the container header signature
  481 D1:AE03 -  -  -  -  ;Outputs: ROM vectors recorded and ready to map
  482 D1:AE03 -  -  -  -  ;Destroys: All registers.
  483 D1:AE03 -  -  -  -  loadROMFile:
  484 D1:AE03 EB -  -  -      ex  de,hl
  485 D1:AE04 AF -  -  -      xor a,a
  486 D1:AE05 32 33 34 D0     ld  (missing_files),a
  487 D1:AE09 BE -  -  -  _:  cp  (hl)    ;
  488 D1:AE0A 23 -  -  -      inc hl      ;
  489 D1:AE0B 20 FC -  -      jr  nz,-_   ;skips past zero-terminated string containing full ROM name
  490 D1:AE0D 22 30 34 D0     ld  (basefile_sig),hl
  491 D1:AE11 01 10 00 00     ld  bc,SIZEOF_INTEGRITY_HASH
  492 D1:AE15 09 -  -  -      add hl,bc
  493 D1:AE16 7E -  -  -      ld  a,(hl)
  494 D1:AE17 FE 01 -  -      cp  a,MAXNUMFILES
  495 D1:AE19 D2 FC AC D1     jp  nc,err_tooManyFiles
  496 D1:AE1D 32 2F 34 D0     ld  (inputNumFiles),a
  497 D1:AE21 47 -  -  -      ld  b,a
  498 D1:AE22 -  -  -  -  ;    ld  c,SIZEOF_INTEGRITY_HASH     ;c already set to this value from earlier.
  499 D1:AE22 ED 4C -  -      mlt bc
  500 D1:AE24 23 -  -  -      inc hl
  501 D1:AE25 E5 -  -  -      push hl
  502 D1:AE26 09 -  -  -          add hl,bc
  503 D1:AE27 FD 21 50 34 
              D0 -  -  -          ld  iy,FILETABLE
  504 D1:AE2C 4E -  -  -          ld  c,(hl)
  505 D1:AE2D 23 -  -  -          inc hl
  506 D1:AE2E 46 -  -  -          ld  b,(hl)
  507 D1:AE2F 23 -  -  -          inc hl
  508 D1:AE30 52 FD 0F 00         ld.s (iy+FILE_SIZE_OFFSET),bc
  509 D1:AE34 FD 2F 02 -          ld  (iy+FILE_ADR_OFFSET),hl
  510 D1:AE37 E1 -  -  -      pop hl
  511 D1:AE38 3C -  -  -      inc a
  512 D1:AE39 3D -  -  -      dec a
  513 D1:AE3A 28 47 -  -      jr  z,loadROMFile_singleFileLoad
  514 D1:AE3C -  -  -  -      ;If more than one file, fill FILETABLE.
  515 D1:AE3C -  -  -  -      ;NOTE: For now, this machinery is disabled. Only a single file is allowed.
  516 D1:AE3C ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  517 D1:AE3F 47 -  -  -      ld  b,a
  518 D1:AE40 -  -  -  -  loadROMFile_multiFileLoadLoop:
  519 D1:AE40 C5 -  -  -      push bc
  520 D1:AE41 FD 2F 05 -          ld  (iy+FILE_SIG_ADR_OFFSET),hl
  521 D1:AE44 01 10 00 00         ld  bc,16
  522 D1:AE48 11 FC B1 D1         ld  de,loadROMFile_tempSigHash
  523 D1:AE4C ED B0 -  -          ldir
  524 D1:AE4E E5 -  -  -          push hl
  525 D1:AE4F FD E5 -  -              push iy
  526 D1:AE51 01 17 00 00                 ld  bc,23
  527 D1:AE55 FD 21 F5 B1 
              D1 -  -  -                  ld  iy,loadROMFile_tempSig
  528 D1:AE5A CD 0C B2 D1                 call vatTraverse    ;returns DE @ datasection size if found
  529 D1:AE5E 30 05 -  -                  jr  nc,+_
  530 D1:AE60 21 33 34 D0                 ld  hl,missing_files
  531 D1:AE64 34 -  -  -                  inc (hl)
  532 D1:AE65 FD E1 -  -  _:          pop iy
  533 D1:AE67 EB -  -  -              ex  de,hl
  534 D1:AE68 5E -  -  -              ld  e,(hl)
  535 D1:AE69 23 -  -  -              inc hl
  536 D1:AE6A 56 -  -  -              ld  d,(hl)
  537 D1:AE6B 23 -  -  -              inc hl
  538 D1:AE6C 52 FD 1F 00             ld.s (iy+FILE_SIZE_OFFSET),de
  539 D1:AE70 FD 2F 02 -              ld  (iy+FILE_ADR_OFFSET),hl
  540 D1:AE73 E1 -  -  -          pop hl
  541 D1:AE74 C1 -  -  -      pop bc
  542 D1:AE75 ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  543 D1:AE78 10 C6 -  -      djnz loadROMFile_multiFileLoadLoop
  544 D1:AE7A 3A 33 34 D0     ld  a,(missing_files)
  545 D1:AE7E B7 -  -  -      or  a,a
  546 D1:AE7F C2 D0 AC D1     jp  nz,err_missingFiles
  547 D1:AE83 -  -  -  -  loadROMFile_singleFileLoad:
  548 D1:AE83 -  -  -  -      ;Compute size of ROM by summing filesizes, less INES header
  549 D1:AE83 3A 2F 34 D0     ld  a,(inputNumFiles)
  550 D1:AE87 3C -  -  -      inc a
  551 D1:AE88 47 -  -  -      ld  b,a
  552 D1:AE89 21 00 00 00     ld  hl,0
  553 D1:AE8D DD 21 50 34 
              D0 -  -  -      ld  ix,FILETABLE
  554 D1:AE92 52 DD 17 00 _:  ld.s de,(ix+FILE_SIZE_OFFSET)
  555 D1:AE96 19 -  -  -      add hl,de
  556 D1:AE97 ED 32 08 -      lea ix,ix+FILETABLE_STRIDE
  557 D1:AE9A 10 F6 -  -      djnz -_
  558 D1:AE9C 01 F0 FF FF     ld  bc,-16
  559 D1:AEA0 09 -  -  -      add hl,bc   ;subtract INES header
  560 D1:AEA1 22 34 34 D0     ld  (total_rom_size),hl
  561 D1:AEA5 -  -  -  -      ;Verify that the file actually contains an INES header.
  562 D1:AEA5 -  -  -  -      ;TODO: Do this at an earlier stage. Such as file selection.
  563 D1:AEA5 DD 2A 52 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  564 D1:AEAA DD 27 00 -      ld  hl,(ix+0)
  565 D1:AEAD 11 4E 45 53     ld  de,$53454E         ;4E 45 53 == "NES"
  566 D1:AEB1 B7 -  -  -      or  a,a
  567 D1:AEB2 ED 52 -  -      sbc hl,de   ;Note: add does not affect zero flag. Can't test this via -DE
  568 D1:AEB4 C2 A3 AD D1 _:  jp  nz,err_ROMHeaderDamaged
  569 D1:AEB8 DD 7E 03 -      ld  a,(ix+3)
  570 D1:AEBB FE 1A -  -      cp  a,$1A
  571 D1:AEBD 20 F5 -  -      jr  nz,-_   ;19
  572 D1:AEBF -  -  -  -      ;Compute ROM size by reading INES header. This should be equ or lt above.
  573 D1:AEBF -  -  -  -      ;Note: The below line is optimized from...
  574 D1:AEBF DD 2A 52 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  575 D1:AEC4 -  -  -  -      ;... these lines. But the intent might not be perfectly clear. We'll keep
  576 D1:AEC4 -  -  -  -      ;these here just in case there's ever a question about it.
  577 D1:AEC4 -  -  -  -  ;    ld  ix,FILETABLE
  578 D1:AEC4 -  -  -  -  ;    ld  ix,(ix+FILE_ADR_OFFSET)
  579 D1:AEC4 DD 6E 04 -      ld  L,(ix+4)    ;PRG ROM count, low
  580 D1:AEC7 DD 5E 05 -      ld  e,(ix+5)    ;CHR ROM count, low
  581 D1:AECA 26 00 -  -      ld  h,0
  582 D1:AECC 54 -  -  -      ld  d,h
  583 D1:AECD DD 7E 07 -      ld  a,(ix+7)    ;Check for INES2 bits
  584 D1:AED0 E6 0C -  -      and a,%00001100
  585 D1:AED2 FE 08 -  -      cp  a,%00001000
  586 D1:AED4 20 1B -  -      jr  nz,+_
  587 D1:AED6 DD 7E 09 -      ld  a,(ix+9)
  588 D1:AED9 47 -  -  -      ld  b,a
  589 D1:AEDA E6 0F -  -      and a,$0F
  590 D1:AEDC FE 02 -  -      cp  a,MAXPRGROM_HINIB+1
  591 D1:AEDE D2 27 AD D1     jp  nc,err_PRGROMTooLarge
  592 D1:AEE2 67 -  -  -      ld  h,a
  593 D1:AEE3 78 -  -  -      ld  a,b
  594 D1:AEE4 E6 F0 -  -      and a,$F0
  595 D1:AEE6 07 -  -  -      rlca
  596 D1:AEE7 07 -  -  -      rlca
  597 D1:AEE8 07 -  -  -      rlca
  598 D1:AEE9 07 -  -  -      rlca
  599 D1:AEEA FE 04 -  -      cp  a,MAXCHRROM_HINIB+1
  600 D1:AEEC D2 4F AD D1     jp  nc,err_CHRROMTooLarge
  601 D1:AEF0 57 -  -  -      ld  d,a
  602 D1:AEF1 AF -  -  -  _:  xor a,a
  603 D1:AEF2 32 37 34 D0     ld  (prg_rom_size),a
  604 D1:AEF6 32 3A 34 D0     ld  (chr_rom_size),a
  605 D1:AEFA 29 -  -  -      add hl,hl   ;x2
  606 D1:AEFB 29 -  -  -      add hl,hl   ;x4
  607 D1:AEFC 29 -  -  -      add hl,hl   ;x8
  608 D1:AEFD 29 -  -  -      add hl,hl   ;x16
  609 D1:AEFE 29 -  -  -      add hl,hl   ;x32
  610 D1:AEFF 29 -  -  -      add hl,hl   ;x64
  611 D1:AF00 52 22 38 34 
              D0 -  -  -      ld.s (prg_rom_size+1),hl    ;x64x256
  612 D1:AF05 EB -  -  -      ex  de,hl
  613 D1:AF06 29 -  -  -      add hl,hl   ;x2
  614 D1:AF07 29 -  -  -      add hl,hl   ;x4
  615 D1:AF08 29 -  -  -      add hl,hl   ;x8
  616 D1:AF09 29 -  -  -      add hl,hl   ;x16
  617 D1:AF0A 29 -  -  -      add hl,hl   ;x32
  618 D1:AF0B 52 22 3B 34 
              D0 -  -  -      ld.s (chr_rom_size+1),hl    ;x32x256
  619 D1:AF10 2A 3A 34 D0     ld  hl,(chr_rom_size)
  620 D1:AF14 ED 5B 37 34 
              D0 -  -  -      ld  de,(prg_rom_size)
  621 D1:AF19 19 -  -  -      add hl,de
  622 D1:AF1A ED 5B 34 34 
              D0 -  -  -      ld  de,(total_rom_size)
  623 D1:AF1F B7 -  -  -      or  a,a
  624 D1:AF20 ED 52 -  -      sbc hl,de   ;declared-actual. declared must be equal to or smaller.
  625 D1:AF22 28 04 -  -      jr  z,+_
  626 D1:AF24 D2 77 AD D1     jp  nc,err_missingROMDetected
  627 D1:AF28 -  -  -  -  _:  ;Find trainer, PRG, and CHR base addresses
  628 D1:AF28 ED 22 10 -      lea hl,ix+16
  629 D1:AF2B 22 43 34 D0     ld  (trainer_base),hl   ;whether it exists or not.
  630 D1:AF2F 11 00 00 00     ld  de,0
  631 D1:AF33 DD CB 06 56     bit 2,(ix+6)
  632 D1:AF37 28 04 -  -      jr  z,+_
  633 D1:AF39 11 00 02 00     ld  de,512
  634 D1:AF3D 19 -  -  -  _:  add hl,de
  635 D1:AF3E 22 43 34 D0     ld  (prg_rom_base),hl
  636 D1:AF42 FD 21 50 34 
              D0 -  -  -      ld  iy,FILETABLE
  637 D1:AF47 52 FD 27 00     ld.s hl,(iy+FILE_SIZE_OFFSET)
  638 D1:AF4B B7 -  -  -      or  a,a
  639 D1:AF4C ED 52 -  -      sbc hl,de   ;less possible trainer
  640 D1:AF4E 11 10 00 00     ld  de,16
  641 D1:AF52 ED 52 -  -      sbc hl,de   ;less iNES header. Remaining is now size of current file.
  642 D1:AF54 EB -  -  -      ex  de,hl   ;curfilesize is now in DE
  643 D1:AF55 2A 37 34 D0     ld  hl,(prg_rom_size)   ;keep subtracting filesize from this until carry.
  644 D1:AF59 B7 -  -  -      or  a,a
  645 D1:AF5A ED 52 -  -      sbc hl,de   ;if carry, prg_rom end is inside this file. Undo: HL is offset.
  646 D1:AF5C 0E 00 -  -      ld  c,0     ;0th file current
  647 D1:AF5E 38 1D -  -      jr  c,loadROMFile_locatedCHRROM
  648 D1:AF60 3A 2F 34 D0     ld  a,(inputNumFiles)
  649 D1:AF64 B7 -  -  -      or  a,a
  650 D1:AF65 28 12 -  -      jr  z,loadROMFile_noCHRROMFound
  651 D1:AF67 47 -  -  -      ld  b,a
  652 D1:AF68 ED 33 08 -  _:  lea iy,iy+FILETABLE_STRIDE
  653 D1:AF6B 52 ED 5B 00 
              00 00 -  -      ld.s de,(FILE_SIZE_OFFSET)
  654 D1:AF71 0C -  -  -      inc c
  655 D1:AF72 B7 -  -  -      or  a,a
  656 D1:AF73 ED 52 -  -      sbc hl,de   ;
  657 D1:AF75 38 06 -  -      jr  c,loadROMFile_locatedCHRROM
  658 D1:AF77 10 EF -  -      djnz -_
  659 D1:AF79 -  -  -  -  loadROMFile_noCHRROMFound:
  660 D1:AF79 C3 E1 AD D1     jp  err_CHRROMNotFound
  661 D1:AF7D -  -  -  -  loadROMFile_locatedCHRROM:
  662 D1:AF7D 19 -  -  -      add hl,de       ;Undid subtract. HL is now offset in current file
  663 D1:AF7E FD 17 02 -      ld  de,(iy+FILE_ADR_OFFSET) ;so get address inside that file.
  664 D1:AF81 19 -  -  -      add hl,de
  665 D1:AF82 79 -  -  -      ld  a,c
  666 D1:AF83 22 46 34 D0     ld  (chr_rom_base),hl
  667 D1:AF87 32 49 34 D0     ld  (chr_rom_base_file),a
  668 D1:AF8B -  -  -  -      ;Detect mapper and run its initializer
  669 D1:AF8B DD 7E 06 -      ld  a,(ix+6)
  670 D1:AF8E DD 46 07 -      ld  b,(ix+7)
  671 D1:AF91 07 -  -  -      rlca
  672 D1:AF92 07 -  -  -      rlca
  673 D1:AF93 07 -  -  -      rlca
  674 D1:AF94 07 -  -  -      rlca
  675 D1:AF95 A8 -  -  -      xor a,b
  676 D1:AF96 E6 0F -  -      and a,$0F
  677 D1:AF98 A8 -  -  -      xor a,b
  678 D1:AF99 52 EB -  -      ex.s de,hl  ;clears HLU,DEU
  679 D1:AF9B 5F -  -  -      ld  e,a
  680 D1:AF9C 21 3D 34 D0     ld  hl,submapper
  681 D1:AFA0 36 00 -  -      ld  (hl),0
  682 D1:AFA2 78 -  -  -      ld  a,b
  683 D1:AFA3 E6 0C -  -      and a,%00001100
  684 D1:AFA5 FE 08 -  -      cp  a,%00001000
  685 D1:AFA7 3E 00 -  -      ld  a,0
  686 D1:AFA9 20 0E -  -      jr  nz,+_
  687 D1:AFAB DD 46 08 -      ld  b,(ix+8)
  688 D1:AFAE 78 -  -  -      ld  a,b
  689 D1:AFAF 07 -  -  -      rlca
  690 D1:AFB0 07 -  -  -      rlca
  691 D1:AFB1 07 -  -  -      rlca
  692 D1:AFB2 07 -  -  -      rlca
  693 D1:AFB3 E6 0F -  -      and a,$0F
  694 D1:AFB5 77 -  -  -      ld  (hl),a
  695 D1:AFB6 78 -  -  -      ld  a,b
  696 D1:AFB7 E6 0F -  -      and a,$0F
  697 D1:AFB9 57 -  -  -  _:  ld  d,a
  698 D1:AFBA ED 53 3F 34 
              D0 -  -  -      ld  (mapper_id),de
  699 D1:AFBF 21 FF FF FF     ld  hl,-NUMBER_OF_MAPPERS
  700 D1:AFC3 19 -  -  -      add hl,de
  701 D1:AFC4 DA C0 AD D1     jp  c,err_MapperOutOfRange
  702 D1:AFC8 ED 62 -  -      sbc hl,hl
  703 D1:AFCA 19 -  -  -      add hl,de               ;hl=de. both are mapper IDs
  704 D1:AFCB 2E 09 -  -      ld  L,MAPPER_STRIDE
  705 D1:AFCD 55 -  -  -      ld  d,L
  706 D1:AFCE ED 6C -  -      mlt hl                  ;high byte multiply
  707 D1:AFD0 65 -  -  -      ld  h,L
  708 D1:AFD1 2E 00 -  -      ld  L,0
  709 D1:AFD3 ED 5C -  -      mlt de                  ;low byte multiply
  710 D1:AFD5 19 -  -  -      add hl,de               ;This is the best 16bit * 8bit I know to do.
  711 D1:AFD6 11 E2 AF D1     ld  de,mapper_table
  712 D1:AFDA 19 -  -  -      add hl,de
  713 D1:AFDB 22 40 34 D0     ld  (mapper_adr_base),hl
  714 D1:AFDF ED 27 -  -      ld  hl,(hl)
  715 D1:AFE1 E9 -  -  -      jp  (hl)
  716 D1:AFE2 -  -  -  -  
  717 D1:AFE2 -  -  -  -  mapper_table:   ;entries 9 wide
  718 D1:AFE2 EB AF D1 -  .dl mapper0_init
  719 D1:AFE5 68 B0 D1 -  .dl mapper0_read
  720 D1:AFE8 10 B1 D1 -  .dl mapper0_write
  721 D1:AFEB -  -  -  -  
  722 D1:AFEB -  -  -  -  mapper0_init:
  723 D1:AFEB -  -  -  -      ;map trainer, if exist
  724 D1:AFEB DD CB 06 56     bit 2,(ix+6)
  725 D1:AFEF 28 0D -  -      jr  z,+_
  726 D1:AFF1 2A 43 34 D0     ld  hl,(trainer_base)
  727 D1:AFF5 1E 70 -  -      ld  e,$70
  728 D1:AFF7 0E 02 -  -      ld  c,2
  729 D1:AFF9 41 -  -  -      ld  b,c
  730 D1:AFFA CD 9C B9 D1     call i6502_map_pages
  731 D1:AFFE 2A 37 34 D0 _:  ld  hl,(prg_rom_size)
  732 D1:B002 11 FF BF FF     ld  de,-(16384+1)
  733 D1:B006 19 -  -  -      add hl,de   ;carry if more than 1 16KB segment
  734 D1:B007 2A 43 34 D0     ld  hl,(prg_rom_base)
  735 D1:B00B -  -  -  -      ;jr  $
  736 D1:B00B 06 80 -  -      ld  b,$80
  737 D1:B00D 58 -  -  -      ld  e,b
  738 D1:B00E 0E 40 -  -      ld  c,$40
  739 D1:B010 30 02 -  -      jr  nc,+_
  740 D1:B012 CB 21 -  -      sla c
  741 D1:B014 CD 9C B9 D1 _:  call i6502_map_pages
  742 D1:B018 -  -  -  -      ;map in nametable mirroring
  743 D1:B018 21 00 58 D0     ld  hl,NAMETABLE1
  744 D1:B01C 11 00 5C D0     ld  de,NAMETABLE2
  745 D1:B020 22 00 34 D0     ld  (nametable00),hl
  746 D1:B024 ED 53 0C 34 
              D0 -  -  -      ld  (nametable11),de
  747 D1:B029 DD CB 06 46     bit 0,(ix+6)    ;nametable arrangement. Mapper 0 has no alternates.
  748 D1:B02D 28 01 -  -      jr  z,+_
  749 D1:B02F EB -  -  -      ex  de,hl
  750 D1:B030 22 04 34 D0 _:  ld  (nametable01),hl
  751 D1:B034 ED 53 08 34 
              D0 -  -  -      ld  (nametable10),de
  752 D1:B039 -  -  -  -      ;Fill out nametable attrib pointers
  753 D1:B039 21 00 34 D0     ld  hl,nametable00
  754 D1:B03D 01 C0 03 00     ld  bc,960
  755 D1:B041 3E 04 -  -      ld  a,4
  756 D1:B043 ED 17 -  -  _:  ld  de,(hl)
  757 D1:B045 CB E5 -  -      set 4,L
  758 D1:B047 EB -  -  -      ex  de,hl
  759 D1:B048 09 -  -  -      add hl,bc
  760 D1:B049 EB -  -  -      ex  de,hl
  761 D1:B04A ED 1F -  -      ld  (hl),de
  762 D1:B04C CB A5 -  -      res 4,L
  763 D1:B04E 23 -  -  -      inc hl
  764 D1:B04F 23 -  -  -      inc hl
  765 D1:B050 23 -  -  -      inc hl
  766 D1:B051 23 -  -  -      inc hl
  767 D1:B052 3D -  -  -      dec a
  768 D1:B053 20 EE -  -      jr  nz,-_
  769 D1:B055 -  -  -  -      ;initilize chr_rom current bank address.
  770 D1:B055 -  -  -  -      ;This mapper does not allow any additional banks, but if it does, this
  771 D1:B055 -  -  -  -      ;value must be recalculated from chr_rom_base
  772 D1:B055 2A 46 34 D0     ld  hl,(chr_rom_base)
  773 D1:B059 22 2C 34 D0     ld  (chr_rom_curbank),hl
  774 D1:B05D 21 83 B1 D1     ld  hl,mapper0_ppu_write
  775 D1:B061 22 4A 34 D0     ld  (ppu_smc_gate),hl
  776 D1:B065 36 C9 -  -      ld  (hl),$C9    ;ret. Will write nop here during first NMI handle
  777 D1:B067 C9 -  -  -      ret
  778 D1:B068 -  -  -  -  
  779 D1:B068 -  -  -  -  
  780 D1:B068 -  -  -  -  mapper0_read:
  781 D1:B068 7A -  -  -      ld  a,d
  782 D1:B069 87 -  -  -      add a,a
  783 D1:B06A 30 08 -  -      jr  nc,+_
  784 D1:B06C 7E -  -  -      ld  a,(hl)  ;is $8000 or above
  785 D1:B06D C9 -  -  -      ret
  786 D1:B06E FE 40 -  -      cp  a,$20*2
  787 D1:B070 38 02 -  -      jr  c,+_
  788 D1:B072 7E -  -  -      ld  a,(hl)  ;is below $2000
  789 D1:B073 C9 -  -  -      ret
  790 D1:B074 87 -  -  -  _:  add a,a
  791 D1:B075 30 13 -  -      jr  nc,mapper0_ppu_read     ;wasn't $4000 or higher.
  792 D1:B077 28 02 -  -      jr  z,mapper0_apu_read      ;high byte was exactly $40
  793 D1:B079 7E -  -  -      ld  a,(hl)
  794 D1:B07A C9 -  -  -      ret
  795 D1:B07B -  -  -  -  mapper0_apu_read:
  796 D1:B07B 79 -  -  -      ld  a,c
  797 D1:B07C FE 16 -  -      cp  a,$16
  798 D1:B07E 20 08 -  -      jr  nz,+_
  799 D1:B080 37 -  -  -      scf
  800 D1:B081 DD CB FE 1E     rr  (ix+APU_KEYPAD)     ;after bits are exhausted, should read '1'
  801 D1:B085 CE 40 -  -      adc a,$40               ;Simulate open bus behavior
  802 D1:B087 C9 -  -  -      ret
  803 D1:B088 7E -  -  -  _:  ld  a,(hl)  ;hope that the dummy map page is good enough to not crash.
  804 D1:B089 C9 -  -  -      ret
  805 D1:B08A -  -  -  -  mapper0_ppu_read:
  806 D1:B08A 79 -  -  -      ld  a,c
  807 D1:B08B E6 07 -  -      and a,%00000111
  808 D1:B08D FE 07 -  -      cp  a,$07
  809 D1:B08F 28 1C -  -      jr  z,mapper0_ppu_read_ppudata
  810 D1:B091 FE 04 -  -      cp  a,$04
  811 D1:B093 28 72 -  -      jr  z,mapper0_ppu_read_oamdata
  812 D1:B095 FE 02 -  -      cp  a,$02   ;gotta break this out since reading ppustatus does other stuff
  813 D1:B097 28 08 -  -      jr  z,mapper0_ppu_read_ppustatus
  814 D1:B099 -  -  -  -      ;We should ignore reads from write-only registers but i'm sure nothing
  815 D1:B099 -  -  -  -      ;will come of allowing it.
  816 D1:B099 ED 22 E0 -  _:  lea hl,ix+PPU_CTRL
  817 D1:B09C 7D -  -  -      ld  a,l
  818 D1:B09D 81 -  -  -      add a,c
  819 D1:B09E 6F -  -  -      ld  l,a
  820 D1:B09F 7E -  -  -      ld  a,(hl)  
  821 D1:B0A0 C9 -  -  -      ret
  822 D1:B0A1 -  -  -  -  mapper0_ppu_read_ppustatus:
  823 D1:B0A1 -  -  -  -      ;reading ppustatus does additional things.
  824 D1:B0A1 3E 55 -  -      ld  a,WREG_CONST
  825 D1:B0A3 DD 77 F4 -      ld  (ix+PPU_W),a
  826 D1:B0A6 ED 22 E2 -      lea hl,ix+PPU_STATUS
  827 D1:B0A9 7E -  -  -      ld  a,(hl)
  828 D1:B0AA CB BE -  -      res 7,(hl)  ;clears VBlank flag if it was set. But only after read.
  829 D1:B0AC -  -  -  -      ;!!! NOTE:
  830 D1:B0AC -  -  -  -      ; In the future, sprite 0 hit flag is set in a generated "interrupt" event
  831 D1:B0AC -  -  -  -      ; created by another "interrupt" event that the PPU ISR generates. The PPU
  832 D1:B0AC -  -  -  -      ; event triggers at the end VBlank, clearing the sprite 0 flag and creating
  833 D1:B0AC -  -  -  -      ; the sprite 0 hit event flag, where it is set. But only if sprite 0 can
  834 D1:B0AC -  -  -  -      ; be hit.
  835 D1:B0AC C9 -  -  -      ret
  836 D1:B0AD -  -  -  -  mapper0_ppu_read_ppudata:
  837 D1:B0AD DD 7E F3 -      ld  a,(ix+PPU_V+1)
  838 D1:B0B0 4F -  -  -      ld  c,a
  839 D1:B0B1 E6 3F -  -      and a,%00111111
  840 D1:B0B3 FE 20 -  -      cp  a,$20
  841 D1:B0B5 30 0F -  -      jr  nc,+_   ;skip reading from CHR_ROM
  842 D1:B0B7 D5 -  -  -      push de
  843 D1:B0B8 52 EB -  -          ex.s de,hl  ;clears DEU
  844 D1:B0BA 2A 2C 34 D0         ld  hl,(chr_rom_curbank)
  845 D1:B0BE 57 -  -  -          ld  d,a
  846 D1:B0BF DD 5E F2 -          ld  e,(ix+PPU_V+0)
  847 D1:B0C2 19 -  -  -          add hl,de
  848 D1:B0C3 D1 -  -  -      pop de
  849 D1:B0C4 7E -  -  -      ld  a,(hl)
  850 D1:B0C5 C9 -  -  -      ret
  851 D1:B0C6 FE 3F -  -  _:  cp  a,$3F
  852 D1:B0C8 20 0C -  -      jr  nz,+_
  853 D1:B0CA DD 7E F2 -      ld  a,(ix+PPU_V+0)
  854 D1:B0CD E6 3F -  -      and a,%00111111
  855 D1:B0CF 21 00 32 D0     ld  hl,vram_palette
  856 D1:B0D3 6F -  -  -      ld  L,a
  857 D1:B0D4 7E -  -  -      ld  a,(hl)
  858 D1:B0D5 C9 -  -  -      ret
  859 D1:B0D6 E6 0C -  -  _:  and a,%00001100     ;%00ZZTTaa Z:00,01=CHR,02=NT,03=PAL; T:WhichNT; a:adrHI
  860 D1:B0D8 21 00 34 D0     ld  hl,nametable00
  861 D1:B0DC 6F -  -  -      ld  L,a             ;bits already in position to index the table
  862 D1:B0DD ED 27 -  -      ld  hl,(hl)
  863 D1:B0DF DD 6E F2 -      ld  L,(ix+PPU_V+0)
  864 D1:B0E2 DD 7E F3 -      ld  a,(ix+PPU_V+1)
  865 D1:B0E5 AC -  -  -      xor a,h     ;
  866 D1:B0E6 E6 03 -  -      and a,%00000011 ;keep low bits of address in A. H keep is location-specific.
  867 D1:B0E8 AC -  -  -      xor a,h
  868 D1:B0E9 67 -  -  -      ld  h,a
  869 D1:B0EA DD CB E0 56     bit 2,(ix+PPU_CTRL) ;VRAM cursor direction
  870 D1:B0EE 3E 01 -  -      ld  a,1
  871 D1:B0F0 28 02 -  -      jr  z,+_
  872 D1:B0F2 C6 1F -  -      add a,31
  873 D1:B0F4 DD 86 F2 -  _:  add a,(ix+PPU_V)
  874 D1:B0F7 DD 77 F2 -      ld  (ix+PPU_V),a
  875 D1:B0FA 30 03 -  -      jr  nc,+_
  876 D1:B0FC DD 34 F3 -      inc (ix+PPU_V+1)
  877 D1:B0FF DD 7E E7 -  _:  ld  a,(ix+PPU_DATA) ;following dance simulates delayed buffer read
  878 D1:B102 46 -  -  -      ld  b,(hl)
  879 D1:B103 DD 70 E7 -      ld  (ix+PPU_DATA),b
  880 D1:B106 C9 -  -  -      ret
  881 D1:B107 -  -  -  -  mapper0_ppu_read_oamdata:
  882 D1:B107 -  -  -  -      ;this needs to be more complex than this. But I'm not. I won't.
  883 D1:B107 -  -  -  -      ;Not now. Not going to play Micro Machines. I don't wanna.
  884 D1:B107 21 00 60 D0     ld  hl,OBJECT_ATTRIB_MEM
  885 D1:B10B DD 6E E3 -      ld  L,(ix+PPU_OAMADDR)
  886 D1:B10E 7E -  -  -      ld  a,(hl)
  887 D1:B10F C9 -  -  -      ret
  888 D1:B110 -  -  -  -  
  889 D1:B110 -  -  -  -  
  890 D1:B110 -  -  -  -  mapper0_write:
  891 D1:B110 7A -  -  -      ld  a,d
  892 D1:B111 FE 20 -  -      cp  a,$20
  893 D1:B113 30 02 -  -      jr  nc,+_
  894 D1:B115 70 -  -  -      ld  (hl),b
  895 D1:B116 C9 -  -  -      ret
  896 D1:B117 FE 40 -  -  _:  cp  a,$40
  897 D1:B119 38 68 -  -      jr  c,mapper0_ppu_write
  898 D1:B11B 28 04 -  -      jr  z,mapper0_apu_write
  899 D1:B11D 87 -  -  -      add a,a
  900 D1:B11E D8 -  -  -      ret c       ;don't write anything to above $8000
  901 D1:B11F 70 -  -  -      ld  (hl),b  ;but allow it in $4100-$7FFF because it might be RAM.
  902 D1:B120 C9 -  -  -      ret
  903 D1:B121 -  -  -  -  mapper0_apu_write:
  904 D1:B121 79 -  -  -      ld  a,c
  905 D1:B122 FE 16 -  -      cp  a,$16
  906 D1:B124 20 3B -  -      jr  nz,+_
  907 D1:B126 DD 7E FF -      ld  a,(ix+APU_KEYLATCH)
  908 D1:B129 A8 -  -  -      xor a,b     ;Bit 0 is set if we're trying to change controller poll state.
  909 D1:B12A 0F -  -  -      rrca        ;And this is how we're going to get it.
  910 D1:B12B D0 -  -  -      ret nc      ;Only support NES standard controller.
  911 D1:B12C CB 40 -  -      bit 0,b     ;So... what are we changing it to?
  912 D1:B12E DD 70 FF -      ld  (ix+APU_KEYLATCH),b
  913 D1:B131 21 00 00 F5     ld  hl,mpKeyMode
  914 D1:B135 28 06 -  -      jr  z,mapper0_apu_stop_keyboard ;jump to strobe stop
  915 D1:B137 7E -  -  -      ld  a,(hl)
  916 D1:B138 FE 03 -  -      cp  a,3
  917 D1:B13A C8 -  -  -      ret z       ;don't do anything to the keyboard if running continuous.
  918 D1:B13B 77 -  -  -      ld  (hl),a  ;else set to continuous and keep going.
  919 D1:B13C C9 -  -  -      ret
  920 D1:B13D -  -  -  -  mapper0_apu_stop_keyboard:
  921 D1:B13D 2E 12 -  -      ld  L,$12   ;76543210 : del mode 2nd y= wind zoom trace graph
  922 D1:B13F 7E -  -  -      ld  a,(hl)
  923 D1:B140 2E 1E -  -      ld  L,$1E   ;----3210 : up right left down
  924 D1:B142 4E -  -  -      ld  c,(hl)
  925 D1:B143 A9 -  -  -      xor a,c
  926 D1:B144 E6 F0 -  -      and a,%11110000
  927 D1:B146 A9 -  -  -      xor a,c     ;keymapping has changed. We need to further alter it.
  928 D1:B147 -  -  -  -      ;[DE MO 2N Y= UP RI LE DO] maps to [SE, B, A, ST, UP, RI, LE, DO]
  929 D1:B147 -  -  -  -      ;The above must be rearranged to become:
  930 D1:B147 -  -  -  -      ;            [RI, LE, DO, UP, ST, SE, B , A ]
  931 D1:B147 -  -  -  -      ;as compared to
  932 D1:B147 -  -  -  -      ;            [SE, B , A , ST, UP, RI, LE, DO]
  933 D1:B147 07 -  -  -      rlca        ;[B , A , ST, UP, RI, LE, DO, SE]
  934 D1:B148 4F -  -  -      ld  c,a     ;b4  : UP is in correct position.
  935 D1:B149 07 -  -  -      rlca        ;[A , ST, UP, RI, LE, DO, SE, B ]
  936 D1:B14A 07 -  -  -      rlca        ;[ST, UP, RI, LE, DO, SE, B , A ]
  937 D1:B14B 47 -  -  -      ld  b,a     ;b0-2:SE, B , and A are in the correct position
  938 D1:B14C 07 -  -  -      rlca        ;[UP, RI, LE, DO, SE, B , A , ST]
  939 D1:B14D 07 -  -  -      rlca        ;[RI, LE, DO, SE, B , A , ST, UP]
  940 D1:B14E 57 -  -  -      ld  d,a     ;b5-7: RI LE DO in correct position.
  941 D1:B14F 07 -  -  -      rlca        ;[LE, DO, SE, B , A , ST, UP, RI]
  942 D1:B150 07 -  -  -      rlca        ;b3: ST is in the correct position.
  943 D1:B151 A9 -  -  -      xor a,c     ;
  944 D1:B152 E6 08 -  -      and a,%00001000 ;keep A3, merge others
  945 D1:B154 A9 -  -  -      xor a,c     ;Has: A3. Merge-in contains b4
  946 D1:B155 A8 -  -  -      xor a,b     ;
  947 D1:B156 E6 18 -  -      and a,%00011000 ;keep A3-4
  948 D1:B158 A8 -  -  -      xor a,b     ;Merge-in contains b0-2
  949 D1:B159 AA -  -  -      xor a,d     ;
  950 D1:B15A E6 1F -  -      and a,%00011111 ;keep A0-4
  951 D1:B15C AA -  -  -      xor a,d     ;Merge-in contains b5-7. Is complete.
  952 D1:B15D DD 77 FE -      ld  (ix+APU_KEYPAD),a
  953 D1:B160 C9 -  -  -      ret
  954 D1:B161 FE 14 -  -  _:  cp  a,$14   ;OAM DMA
  955 D1:B163 20 1C -  -      jr  nz,+_
  956 D1:B165 C5 -  -  -      push bc
  957 D1:B166 D5 -  -  -          push de
  958 D1:B167 11 01 02 00             ld  de,513  ;or 514. Not going to emulate put/get cycles
  959 D1:B16B FD 19 -  -              add iy,de
  960 D1:B16D 0E 0C -  -              ld  c,BASETABLE_STRIDE
  961 D1:B16F 21 00 40 D0             ld  hl,PAGETABLE
  962 D1:B173 09 -  -  -              add hl,bc
  963 D1:B174 11 00 60 D0             ld  de,OBJECT_ATTRIB_MEM
  964 D1:B178 01 00 01 00             ld  bc,256
  965 D1:B17C ED B0 -  -              ldir
  966 D1:B17E D1 -  -  -          pop de
  967 D1:B17F C1 -  -  -      pop bc
  968 D1:B180 C9 -  -  -      ret
  969 D1:B181 70 -  -  -  _:  ld  (hl),b
  970 D1:B182 C9 -  -  -      ret
  971 D1:B183 -  -  -  -  mapper0_ppu_write:
  972 D1:B183 C9 -  -  -      ret
  973 D1:B184 -  -  -  -      ;TODO: gate off access outside VBlank
  974 D1:B184 -  -  -  -      ;TODO: Replace cp/jr chain with DJNZ chain for more optimal branching.
  975 D1:B184 79 -  -  -      ld  a,c
  976 D1:B185 E6 07 -  -      and a,%00000111
  977 D1:B187 -  -  -  -  ;    cp  a,$01  ;Once midframe is supported, uncomment this.
  978 D1:B187 -  -  -  -  ;    jr  z,mapper0_ppu_write_ppumask
  979 D1:B187 FE 02 -  -      cp  a,$02
  980 D1:B189 C8 -  -  -      ret z   ;read-only register. do not write to it.
  981 D1:B18A FE 04 -  -      cp  a,$04
  982 D1:B18C 28 08 -  -      jr  z,mapper0_ppu_write_oamdata
  983 D1:B18E FE 06 -  -      cp a,$06
  984 D1:B190 28 0D -  -      jr  z,mapper0_ppu_write_ppuaddr
  985 D1:B192 FE 07 -  -      cp  a,$07
  986 D1:B194 28 17 -  -      jr  z,mapper0_ppu_write_ppudata
  987 D1:B196 -  -  -  -  ;    cp  a,$05  ;Once midframe is supported, uncomment this.
  988 D1:B196 -  -  -  -  ;    jr  z,mapper0_ppu_write_ppuscroll
  989 D1:B196 -  -  -  -  
  990 D1:B196 -  -  -  -  
  991 D1:B196 -  -  -  -  mapper0_ppu_write_oamdata:
  992 D1:B196 -  -  -  -      ;Doesn't check anything. So sad.
  993 D1:B196 21 00 60 D0     ld  hl,OBJECT_ATTRIB_MEM
  994 D1:B19A DD 6E E3 -      ld  L,(ix+PPU_OAMADDR)
  995 D1:B19D 70 -  -  -      ld  (hl),b
  996 D1:B19E C9 -  -  -      ret
  997 D1:B19F -  -  -  -  mapper0_ppu_write_ppuaddr:
  998 D1:B19F DD CB F4 0E     rrc (ix+PPU_W)
  999 D1:B1A3 38 04 -  -      jr  c,+_
 1000 D1:B1A5 DD 70 F2 -      ld  (ix+PPU_V+0),b
 1001 D1:B1A8 C9 -  -  -      ret
 1002 D1:B1A9 DD 70 F3 -  _:  ld  (ix+PPU_V+1),b
 1003 D1:B1AC C9 -  -  -      ret
 1004 D1:B1AD -  -  -  -  
 1005 D1:B1AD -  -  -  -  mapper0_ppu_write_ppudata:
 1006 D1:B1AD DD 7E F3 -      ld  a,(ix+PPU_V+1)
 1007 D1:B1B0 4F -  -  -      ld  c,a
 1008 D1:B1B1 E6 3F -  -      and a,%00111111
 1009 D1:B1B3 FE 20 -  -      cp  a,$20
 1010 D1:B1B5 D8 -  -  -      ret c   ;Mapper 0 does not allow writing to CHR_ROM
 1011 D1:B1B6 FE 3F -  -      cp  a,$3F
 1012 D1:B1B8 28 2B -  -      jr  z,+++_    ;write to palette table
 1013 D1:B1BA E6 0C -  -      and a,%00001100     ;%00ZZTTaa Z:00,01=CHR,02=NT,03=PAL; T:WhichNT; a:adrHI
 1014 D1:B1BC 21 00 34 D0     ld  hl,nametable00
 1015 D1:B1C0 6F -  -  -      ld  L,a             ;bits already in position to index the table
 1016 D1:B1C1 ED 27 -  -      ld  hl,(hl)
 1017 D1:B1C3 DD 6E F2 -      ld  L,(ix+PPU_V+0)
 1018 D1:B1C6 DD 7E F3 -      ld  a,(ix+PPU_V+1)
 1019 D1:B1C9 AC -  -  -      xor a,h     ;
 1020 D1:B1CA E6 03 -  -      and a,%00000011 ;keep low bits of address in A. H keep is location-specific.
 1021 D1:B1CC AC -  -  -      xor a,h
 1022 D1:B1CD 67 -  -  -      ld  h,a
 1023 D1:B1CE 70 -  -  -      ld  (hl),b
 1024 D1:B1CF DD CB E0 56     bit 2,(ix+PPU_CTRL) ;VRAM cursor direction
 1025 D1:B1D3 3E 01 -  -      ld  a,1
 1026 D1:B1D5 28 02 -  -      jr  z,+_
 1027 D1:B1D7 C6 1F -  -      add a,31
 1028 D1:B1D9 DD 86 F2 -  _:  add a,(ix+PPU_V)
 1029 D1:B1DC DD 77 F2 -      ld  (ix+PPU_V),a
 1030 D1:B1DF 30 03 -  -      jr  nc,+_
 1031 D1:B1E1 DD 34 F3 -      inc (ix+PPU_V+1)
 1032 D1:B1E4 C9 -  -  -  _:  ret
 1033 D1:B1E5 21 00 32 D0 _:  ld  hl,vram_palette
 1034 D1:B1E9 DD 7E F2 -      ld  a,(ix+PPU_V+0)
 1035 D1:B1EC E6 3F -  -      and a,%00111111
 1036 D1:B1EE 6F -  -  -      ld  L,a
 1037 D1:B1EF 70 -  -  -      ld  (hl),b
 1038 D1:B1F0 C9 -  -  -      ret
 1039 D1:B1F1 -  -  -  -  
 1040 D1:B1F1 -  -  -  -  mapper0_ppu_write_ppumask:
 1041 D1:B1F1 -  -  -  -      ;TODO: Allow queueing for midframe writes.
 1042 D1:B1F1 70 -  -  -      ld  (hl),b
 1043 D1:B1F2 C9 -  -  -      ret
 1044 D1:B1F3 -  -  -  -  mapper0_ppu_write_ppuscroll:
 1045 D1:B1F3 -  -  -  -      ;TODO: Allow queueing for midframe writes. Often used in conjunction
 1046 D1:B1F3 -  -  -  -      ;with Sprite0 hits for status bar rendering.
 1047 D1:B1F3 70 -  -  -      ld  (hl),b
 1048 D1:B1F4 C9 -  -  -      ret
 1049 D1:B1F5 -  -  -  -  
 1050 D1:B1F5 -  -  -  -  
 1051 D1:B1F5 -  -  -  -  loadROMFile_tempSig:    ;total 23 bytes
 1052 D1:B1F5 43 45 4E 52 
              4F 32 00 -  .db "CENRO2",0
 1053 D1:B1FC -  -  -  -  loadROMFile_tempSigHash:
 1054 D1:B1FC 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;16 bytes for hash
 1055 D1:B20C -  -  -  -  
 1056 D1:B20C -  -  -  -  
 1057 D1:B20C -  -  -  -  ;Input: IY = locationOfSignature. 
 1058 D1:B20C -  -  -  -  ;       BC=size of signature (long load to clear BCU), still limited to 255.
 1059 D1:B20C -  -  -  -  ;Output: carry=1: Variable not found.
 1060 D1:B20C -  -  -  -  ;Output: carry=0: DE=address of variable data start after the signature
 1061 D1:B20C -  -  -  -  ;        IX=location of current variable's VAT location.
 1062 D1:B20C -  -  -  -  ;Destroys: All registers not in use.
 1063 D1:B20C -  -  -  -  ;NOTES: This routine is capable of resuming a search that has ended.
 1064 D1:B20C -  -  -  -  
 1065 D1:B20C -  -  -  -  ;To continue searching:
 1066 D1:B20C -  -  -  -  ;call vatTraverse_continue with the following inputs:
 1067 D1:B20C -  -  -  -  ;   IX preserved from a non-carry return of vatTraverse.
 1068 D1:B20C -  -  -  -  ;   BC = same as input for vatTraverse. vatTraverse does not destroy this reg.
 1069 D1:B20C -  -  -  -  ;   WARNING: DO NOT KEEP SEARCHING AFTER CALL RETURNS CARRY. START A NEW SEARCH.
 1070 D1:B20C -  -  -  -  vatTraverse:
 1071 D1:B20C -  -  -  -      ;progPtr = progvat start; ptemp = progvatend
 1072 D1:B20C DD 2A 9D 25 
              D0 -  -  -      ld  ix,(progPtr)
 1073 D1:B211 -  -  -  -  vatTraverse_loop:
 1074 D1:B211 2A 9A 25 D0     ld  hl,(pTemp)
 1075 D1:B215 ED 12 00 -      lea de,ix+0
 1076 D1:B218 B7 -  -  -      or  a,a
 1077 D1:B219 ED 52 -  -      sbc hl,de   ;HL<DE while in pVAT, else carry set.
 1078 D1:B21B 3F -  -  -      ccf
 1079 D1:B21C D8 -  -  -      ret c
 1080 D1:B21D 1A -  -  -      ld  a,(de)
 1081 D1:B21E E6 1F -  -      and a,$1F
 1082 D1:B220 FE 15 -  -      cp  a,AppVarObj
 1083 D1:B222 20 34 -  -      jr  nz,vatTraverse_skip
 1084 D1:B224 DD 17 F9 -      ld  de,(ix-7)   ;puts "page" byte in DEU
 1085 D1:B227 DD 5E FD -      ld  e,(ix-3)
 1086 D1:B22A DD 56 FC -      ld  d,(ix-4)
 1087 D1:B22D CD 98 1F 02     call _ChkInRam
 1088 D1:B231 EB -  -  -      ex  de,hl
 1089 D1:B232 30 08 -  -      jr  nc,+_
 1090 D1:B234 11 09 00 00     ld  de,9
 1091 D1:B238 19 -  -  -      add hl,de
 1092 D1:B239 5E -  -  -      ld  e,(hl)
 1093 D1:B23A 19 -  -  -      add hl,de
 1094 D1:B23B 23 -  -  -      inc hl
 1095 D1:B23C 5E -  -  -  _:  ld  e,(hl)
 1096 D1:B23D 23 -  -  -      inc hl
 1097 D1:B23E 56 -  -  -      ld  d,(hl)
 1098 D1:B23F 23 -  -  -      inc hl
 1099 D1:B240 EB -  -  -      ex  de,hl
 1100 D1:B241 B7 -  -  -      or  a,a
 1101 D1:B242 ED 42 -  -      sbc hl,bc   ;varsize-entrysize. If carry, entry cannot possibly be in var.
 1102 D1:B244 38 12 -  -      jr  c,vatTraverse_skip
 1103 D1:B246 ED 23 00 -      lea hl,iy+0
 1104 D1:B249 C5 -  -  -      push bc
 1105 D1:B24A 1A -  -  -  _:      ld  a,(de)
 1106 D1:B24B 13 -  -  -          inc de
 1107 D1:B24C ED A1 -  -          cpi
 1108 D1:B24E 20 07 -  -          jr  nz,vatTraverse_sigNoMatch
 1109 D1:B250 EA 4A B2 D1         jp  pe,-_
 1110 D1:B254 C1 -  -  -      pop bc
 1111 D1:B255 B7 -  -  -      or  a,a
 1112 D1:B256 C9 -  -  -      ret         ;NC. DE = past the signature.
 1113 D1:B257 -  -  -  -  vatTraverse_sigNoMatch:
 1114 D1:B257 C1 -  -  -      pop bc
 1115 D1:B258 -  -  -  -  vatTraverse_continue:
 1116 D1:B258 -  -  -  -  vatTraverse_skip:
 1117 D1:B258 3E 07 -  -      ld  a,7
 1118 D1:B25A 11 FF FF FF     ld  de,-1
 1119 D1:B25E DD 86 FA -      add a,(ix-6)
 1120 D1:B261 ED 44 -  -      neg
 1121 D1:B263 5F -  -  -      ld  e,a
 1122 D1:B264 DD 19 -  -      add ix,de   ;because "sbc ix,de" isn't a thing. Boo.
 1123 D1:B266 18 A9 -  -      jr  vatTraverse_loop
 1124 D1:B268 -  -  -  -  
 1125 D1:B268 -  -  -  -  ;Copied from my Falldown2 project. I didn't want to have to
 1126 D1:B268 -  -  -  -  ;find yet another hardware reference for something I already did.
 1127 D1:B268 -  -  -  -  ;But I'll have to do it again anyway because this isn't exactly
 1128 D1:B268 -  -  -  -  ;what we're looking for. Here, we output the same sort of
 1129 D1:B268 -  -  -  -  ;game keys that I've used basically all my programming life.
 1130 D1:B268 -  -  -  -  ;Anyhoo. We'll be using the following:
 1131 D1:B268 -  -  -  -  ;kbitDown	equ 00h
 1132 D1:B268 -  -  -  -  ;kbitLeft	equ 01h
 1133 D1:B268 -  -  -  -  ;kbitRight	equ 02h
 1134 D1:B268 -  -  -  -  ;kbitUp		equ 03h
 1135 D1:B268 -  -  -  -  ;kbitYequ equ 04h
 1136 D1:B268 -  -  -  -  ;kbit2nd		equ 05h
 1137 D1:B268 -  -  -  -  ;kbitMode	equ 06h
 1138 D1:B268 -  -  -  -  ;kbitDel		equ 07h
 1139 D1:B268 -  -  -  -  ;You can find the other defines approximately where I found the stuff above.
 1140 D1:B268 -  -  -  -  
 1141 D1:B268 -  -  -  -  getkbd_adl:
 1142 D1:B268 DD 21 00 00 
              F5 -  -  -  	ld  ix,mpKeyMode
 1143 D1:B26D ED 22 00 -  	lea hl,ix+0
 1144 D1:B270 36 02 -  -  	ld  (hl),keyModeScanOnce
 1145 D1:B272 AF -  -  -  	xor a
 1146 D1:B273 BE -  -  -  _:  cp  (hl)
 1147 D1:B274 20 FD -  -  	jr  nz,-_
 1148 D1:B276 DD 7E 12 -  	ld  a,(ix+kbdG1-mpKeyRange)
 1149 D1:B279 DD 6E 1E -  	ld  l,(ix+kbdG7-mpKeyRange)
 1150 D1:B27C AD -  -  -  	xor L
 1151 D1:B27D E6 F0 -  -  	and 11110000b	;mask out lower bits to let me shove dpad bits in
 1152 D1:B27F AD -  -  -  	xor L
 1153 D1:B280 C9 -  -  -  	ret
 1154 D1:B281 -  -  -  -  
 1155 D1:B281 -  -  -  -  waituntilkeyrelease:
 1156 D1:B281 CD 68 B2 D1     call getkbd_adl
 1157 D1:B285 B7 -  -  -      or  a,a
 1158 D1:B286 20 F9 -  -      jr  nz,waituntilkeyrelease
 1159 D1:B288 C9 -  -  -  	ret
 1160 D1:B289 -  -  -  -  
 1161 D1:B289 -  -  -  -  waituntilnewkeypress:
 1162 D1:B289 CD 81 B2 D1     call waituntilkeyrelease
 1163 D1:B28D CD 68 B2 D1 _:  call getkbd_adl
 1164 D1:B291 B7 -  -  -  	or  a,a
 1165 D1:B292 28 F9 -  -  	jr  z,-_
 1166 D1:B294 C9 -  -  -      ret
 1167 D1:B295 -  -  -  -  
 1168 D1:B295 -  -  -  -  #include "lcd.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    1 D1:B295 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 D1:B295 -  -  -  -  ;TI-84 Plus CE Include File
    2 D1:B295 -  -  -  -  
    3 D1:B295 -  -  -  -  ;Various Parts Contributed by
    4 D1:B295 -  -  -  -  ;- BrandonW
    5 D1:B295 -  -  -  -  ;- calc84
    6 D1:B295 -  -  -  -  ;- MateoConLechuga
    7 D1:B295 -  -  -  -  ;- Runer112
    8 D1:B295 -  -  -  -  ;- tr1p1ea
    9 D1:B295 -  -  -  -  ;- Kerm Martian
   10 D1:B295 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    2 D1:B295 -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
    5 D1:B295 -  -  -  -  ;
    6 D1:B295 -  -  -  -  ;
    7 D1:B295 -  -  -  -  ;
    8 D1:B295 -  -  -  -  
    9 D1:B295 -  -  -  -  ;Undefine this to speed up core process by losing debug state
   10 D1:B295 -  -  -  -  ;#define COREDEBUG
   11 D1:B295 -  -  -  -  
   12 D1:B295 -  -  -  -  DEBUG_PRINT_START_CYCLE .equ 0
   13 D1:B295 -  -  -  -  DEBUG_STEP_START_CYCLE  .equ 30000 ;26485
   14 D1:B295 -  -  -  -  
   15 D1:B295 -  -  -  -  
   16 D1:B295 -  -  -  -  
   17 D1:B295 -  -  -  -  FONTFGCOLOR .EQU $FF ;$29
   18 D1:B295 -  -  -  -  FONTBGCOLOR .EQU $00
   19 D1:B295 -  -  -  -  
   20 D1:B295 -  -  -  -  screenBuf1      .equ vRam
   21 D1:B295 -  -  -  -  screenBuf2      .equ vRam+(320*240)
   22 D1:B295 -  -  -  -  ;DO NOT MOVE THESE.
   23 D1:B295 -  -  -  -  xPos                .equ $D031F6
   24 D1:B295 -  -  -  -  yPos                .equ $D031F7
   25 D1:B295 -  -  -  -  slopPos             .equ $D031F8        ;extra byte here
   26 D1:B295 -  -  -  -  debugram            .equ $D031F9        ;FA and FB occupied too.
   27 D1:B295 -  -  -  -  save_spl            .equ $D031FC        ;FD and FE occupied too.
   28 D1:B295 -  -  -  -  save_mbase          .equ $D031FF        ;
   29 D1:B295 -  -  -  -  vram_palette        .equ $D03200        ;32 bytes. PPU palette RAM (bg, spr)
   30 D1:B295 -  -  -  -  core_memory_ix      .equ $D03280        ;IX range -128 to -64 already in use.
   31 D1:B295 -  -  -  -  scrap_mapping       .equ $D03300        ;256 bytes. maps to nowhere important.
   32 D1:B295 -  -  -  -  saferam1            .equ $D03400        ;1024 bytes available. Define later.
   33 D1:B295 -  -  -  -  main_ram            .equ $D03800        ;$0800 bytes of main system memory
   34 D1:B295 -  -  -  -  
   35 D1:B295 -  -  -  -  ZEROPAGE            .equ main_ram+(0*256)
   36 D1:B295 -  -  -  -  STACKBASE           .equ main_ram+(1*256)
   37 D1:B295 -  -  -  -  
   38 D1:B295 -  -  -  -  BASETABLE           .equ $D04000        ;variable size. 256*BASETABLE_STRIDE
   39 D1:B295 -  -  -  -  BASETABLE_STRIDE    .equ 12
   40 D1:B295 -  -  -  -  PAGETABLE_OFFSET    .equ 0
   41 D1:B295 -  -  -  -  PAGETABLE           .equ BASETABLE+PAGETABLE_OFFSET
   42 D1:B295 -  -  -  -  JUMPTABLE_OFFSET    .equ 4
   43 D1:B295 -  -  -  -  JUMPTABLE           .equ BASETABLE+JUMPTABLE_OFFSET
   44 D1:B295 -  -  -  -  USETABLE_OFFSET     .equ 8
   45 D1:B295 -  -  -  -  USETABLE            .equ BASETABLE+USETABLE_OFFSET
   46 D1:B295 -  -  -  -  
   47 D1:B295 -  -  -  -  NAMETABLE1          .equ BASETABLE+(512*BASETABLE_STRIDE)
   48 D1:B295 -  -  -  -  NAMETABLE2          .equ NAMETABLE1 + 1024  ;1024 BYTES
   49 D1:B295 -  -  -  -  OBJECT_ATTRIB_MEM   .equ NAMETABLE2 + 1024  ;256 BYTES
   50 D1:B295 -  -  -  -  
   51 D1:B295 -  -  -  -  ;
   52 D1:B295 -  -  -  -  ;saferam1 1024 bytes storage
   53 D1:B295 -  -  -  -  ;
   54 D1:B295 -  -  -  -  nametable00         .equ saferam1           ;4b Do not move these vars
   55 D1:B295 -  -  -  -  nametable01         .equ nametable00+4      ;4b
   56 D1:B295 -  -  -  -  nametable10         .equ nametable01+4      ;4b
   57 D1:B295 -  -  -  -  nametable11         .equ nametable10+4      ;4b
   58 D1:B295 -  -  -  -  nametable00_attrib  .equ nametable11+4      ;4b
   59 D1:B295 -  -  -  -  nametable01_attrib  .equ nametable00_attrib+4   ;4b
   60 D1:B295 -  -  -  -  nametable10_attrib  .equ nametable01_attrib+4   ;4b
   61 D1:B295 -  -  -  -  nametable11_attrib  .equ nametable10_attrib+4   ;4b
   62 D1:B295 -  -  -  -  chr_rom_tiles       .equ nametable11_attrib+4   ;4b
   63 D1:B295 -  -  -  -  chr_rom_sprites     .equ chr_rom_tiles+4    ;4b
   64 D1:B295 -  -  -  -  curScreenBuf        .equ chr_rom_sprites+4  ;4b
   65 D1:B295 -  -  -  -  linestart           .equ curScreenBuf+3     ;1b
   66 D1:B295 -  -  -  -  chr_rom_curbank     .equ linestart+1        ;3b Base used for PPU stuff.
   67 D1:B295 -  -  -  -  inputNumFiles       .equ chr_rom_curbank+3  ;1b
   68 D1:B295 -  -  -  -  basefile_sig        .equ inputNumFiles+1    ;3b pointer to 16b hash
   69 D1:B295 -  -  -  -  missing_files       .equ basefile_sig+3     ;1b
   70 D1:B295 -  -  -  -  total_rom_size      .equ missing_files+1    ;3b
   71 D1:B295 -  -  -  -  prg_rom_size        .equ total_rom_size+3   ;3b
   72 D1:B295 -  -  -  -  chr_rom_size        .equ prg_rom_size+3     ;3b
   73 D1:B295 -  -  -  -  submapper           .equ chr_rom_size+3     ;1b. iNES2 thing. Not often used.
   74 D1:B295 -  -  -  -  ines_flag_6         .equ submapper+1        ;1b. Flags that a mapper may need.
   75 D1:B295 -  -  -  -  mapper_id           .equ ines_flag_6+1      ;3b. Convenience load for 12 bits
   76 D1:B295 -  -  -  -  mapper_adr_base     .equ mapper_id+1        ;3b. Used to load mapper
   77 D1:B295 -  -  -  -  trainer_base        .equ mapper_adr_base+3  ;3b. If exist, starts here
   78 D1:B295 -  -  -  -  prg_rom_base        .equ mapper_adr_base+3  ;3b. Adjusted in case of trainer.
   79 D1:B295 -  -  -  -  chr_rom_base        .equ prg_rom_base+3     ;3b. Located somewhere.
   80 D1:B295 -  -  -  -  chr_rom_base_file   .equ chr_rom_base+3     ;1b. Nonzero if not in first file.
   81 D1:B295 -  -  -  -  ppu_smc_gate        .equ chr_rom_base_file+1 ;3b write address to ungate PPU
   82 D1:B295 -  -  -  -  timings_base        .equ ppu_smc_gate+3    ;3b. Current pointer to timings
   83 D1:B295 -  -  -  -  
   84 D1:B295 -  -  -  -  SIZEOF_INTEGRITY_HASH    .equ 16
   85 D1:B295 -  -  -  -  MAXPRGROM_HINIB     .equ 1
   86 D1:B295 -  -  -  -  MAXCHRROM_HINIB     .equ 3
   87 D1:B295 -  -  -  -  NUMBER_OF_MAPPERS   .equ 1
   88 D1:B295 -  -  -  -  MAPPER_STRIDE       .equ 9
   89 D1:B295 -  -  -  -  
   90 D1:B295 -  -  -  -  MAXNUMFILES         .equ 1                  ;set to 32 later. that's like 1.5MB
   91 D1:B295 -  -  -  -  FILETABLE_STRIDE    .equ 8
   92 D1:B295 -  -  -  -  FILETABLE           .equ timings_base+3   ;(MAXNUMFILES*FILETABLE_STRIDE)b
   93 D1:B295 -  -  -  -  FILE_SIZE_OFFSET    .equ 0
   94 D1:B295 -  -  -  -  FILE_ADR_OFFSET     .equ 2
   95 D1:B295 -  -  -  -  FILE_SIG_ADR_OFFSET .equ 5
   96 D1:B295 -  -  -  -  
   97 D1:B295 -  -  -  -  int_table_len       .equ FILETABLE+((MAXNUMFILES+1)*FILETABLE_STRIDE)
   98 D1:B295 -  -  -  -  INT_TABLE           .equ int_table_len+1
   99 D1:B295 -  -  -  -  INT_TABLE_MAXLEN    .equ 8
  100 D1:B295 -  -  -  -  INT_TABLE_STRIDE    .equ 6
  101 D1:B295 -  -  -  -  INT_ADDR_OFFSET     .equ 0
  102 D1:B295 -  -  -  -  INT_CYCLE_OFFSET    .equ 3
  103 D1:B295 -  -  -  -  
  104 D1:B295 -  -  -  -  
  105 D1:B295 -  -  -  -  
  106 D1:B295 -  -  -  -  ;
  107 D1:B295 -  -  -  -  ;
  108 D1:B295 -  -  -  -  ;
  109 D1:B295 -  -  -  -  ;
  110 D1:B295 -  -  -  -  #define WREG_CONST %01010101
  111 D1:B295 -  -  -  -  
  112 D1:B295 -  -  -  -  ;PPU default locations. Some are not used
  113 D1:B295 -  -  -  -  #define DEBUGCONTROL ($40-$80)
  114 D1:B295 -  -  -  -  #define PPU_CTRL -32
  115 D1:B295 -  -  -  -  #define PPU_MASK -31
  116 D1:B295 -  -  -  -  #define PPU_STATUS -30
  117 D1:B295 -  -  -  -  #define PPU_OAMADDR -29
  118 D1:B295 -  -  -  -  #define PPU_OAMDATA -28
  119 D1:B295 -  -  -  -  #define PPU_SCROLL -27
  120 D1:B295 -  -  -  -  #define PPU_ADDR -26
  121 D1:B295 -  -  -  -  #define PPU_DATA -25
  122 D1:B295 -  -  -  -  ;PPU internal stuff
  123 D1:B295 -  -  -  -  #define PPU_SUBCYCLE -15    ;0, 1, or 2.
  124 D1:B295 -  -  -  -  #define PPU_V -14           ;USED TO STORE VRAM ADDRESS (PPU ADDRESS SPACE)
  125 D1:B295 -  -  -  -  #define PPU_W -12           ;INTERNAL W REGISTER FOR HIGH/LOW BYTE PORT WRITES
  126 D1:B295 -  -  -  -  #define PPU_FRAMECOUNT -11  ;USED FOR EVEN/ODD
  127 D1:B295 -  -  -  -  #define PPU_NAMETABLE_PTR -10   ;Pointer cache
  128 D1:B295 -  -  -  -  #define PPU_VCOUNT -7
  129 D1:B295 -  -  -  -  #define PPU_HCOUNT -6
  130 D1:B295 -  -  -  -  #define PPU_TCOUNT -5
  131 D1:B295 -  -  -  -  #define PPU_XSCROLL -4  ;Should be constructed from PPU_SCROLL
  132 D1:B295 -  -  -  -  #define PPU_YSCROLL -3  ;
  133 D1:B295 -  -  -  -  #define APU_KEYPAD -2   ;First to last: A,B,SE,ST,UP,DO,LE,RI. 01234567.
  134 D1:B295 -  -  -  -  #define APU_KEYLATCH -1
  135 D1:B295 -  -  -  -  ;core memory
  136 D1:B295 -  -  -  -  #define REGA 0
  137 D1:B295 -  -  -  -  #define REGX 1
  138 D1:B295 -  -  -  -  #define REGY 2
  139 D1:B295 -  -  -  -  #define REGSP 3
  140 D1:B295 -  -  -  -  #define REGSR 4
  141 D1:B295 -  -  -  -  #define REGPC 5
  142 D1:B295 -  -  -  -  #define CYCLES_REMAIN 8
  143 D1:B295 -  -  -  -  #define CYCLES_CURRENT 11
  144 D1:B295 -  -  -  -  #define CURRENT_OPCODES 14
  145 D1:B295 -  -  -  -  #define CORE_STACK_BASE 17
  146 D1:B295 -  -  -  -  #define CORE_ERROR_LEVEL 20
  147 D1:B295 -  -  -  -  #define SCRAP_COUNTER 21
  148 D1:B295 -  -  -  -  #define PORT_WRITE_TIMESTAMP 24
  149 D1:B295 -  -  -  -  #define TEMP_MEMORY 27
  150 D1:B295 -  -  -  -  #define NMI_TRIGGERED 30 
  151 D1:B295 -  -  -  -  #define PREV_INSTR 31
  152 D1:B295 -  -  -  -  ;flag IDs
  153 D1:B295 -  -  -  -  #define SF_NEG 7
  154 D1:B295 -  -  -  -  #define SF_OVER 6 
  155 D1:B295 -  -  -  -  #define SF_RESERVED 5 
  156 D1:B295 -  -  -  -  #define SF_BRK 4
  157 D1:B295 -  -  -  -  #define SF_DEC 3
  158 D1:B295 -  -  -  -  #define SF_INT 2
  159 D1:B295 -  -  -  -  #define SF_ZERO 1
  160 D1:B295 -  -  -  -  #define SF_CARRY 0
  161 D1:B295 -  -  -  -  
  162 D1:B295 -  -  -  -  #macro ADDCYC(X)
  163 D1:B295                 #if (x < 1)
  164 D1:B295                     nop
  165 D1:B295                 #elif (X = 1)
  166 D1:B295                     inc iy
  167 D1:B295                 #else
  168 D1:B295                     lea iy,iy+X
  169 D1:B295                 #endif
  170 D1:B295             #endmacro
  171 D1:B295 -  -  -  -  
  172 D1:B295 -  -  -  -  ;
  173 D1:B295 -  -  -  -  ;
  174 D1:B295 -  -  -  -  ;
  175 D1:B295 -  -  -  -  #endif
  176 D1:B295 -  -  -  -  .list
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    3 D1:B295 -  -  -  -  
    4 D1:B295 -  -  -  -  ;Function list:
    5 D1:B295 -  -  -  -  ; fastCopy - Swaps drawing buffer to display what is currently written there.
    6 D1:B295 -  -  -  -  ; startGfx - Configures LCD to run in graphx mode. UNSAFE TO RUN MORE THAN ONCE
    7 D1:B295 -  -  -  -  ; stopGfx - Restores LCD configuration to TI-OS default.
    8 D1:B295 -  -  -  -  ; configureScreen - Swaps screen configuration betwen current and stored.
    9 D1:B295 -  -  -  -  ; setDefaultPalette - Sets default (XLIBC) color palette.
   10 D1:B295 -  -  -  -  ; clearTextBuf - no inputs. Sets text buffer to all spaces.
   11 D1:B295 -  -  -  -  ; printTextBuf - no inputs. Mirrors buffer to screen.
   12 D1:B295 -  -  -  -  ; setLineStart - A=xpos. Set xPos and linestart
   13 D1:B295 -  -  -  -  ; setCurLine - A=ypos. Set yPos.
   14 D1:B295 -  -  -  -  ; newLine - no inputs. sets linestart = xPos, increments yPos
   15 D1:B295 -  -  -  -  ; newPage - no inputs. sets linestart = xPos, yPos = 0
   16 D1:B295 -  -  -  -  ; printString - HL=address to string. destroys all.
   17 D1:B295 -  -  -  -  ; printBigFont - A=ASCII char to print at xPos,yPos. Advances xPos by 1.
   18 D1:B295 -  -  -  -  ; printSmallNumPair - A=0-255 to print at xPos,Ypos. Advances xPos by 1.
   19 D1:B295 -  -  -  -  ; calculateScreenPtr - Converts xPos,yPos into HL= screen buffer address.
   20 D1:B295 -  -  -  -  ; calculateScreenPtrDE - Converts E=xPos,D=yPos into HL= screen buffer address.
   21 D1:B295 -  -  -  -  ;
   22 D1:B295 -  -  -  -  ;
   23 D1:B295 -  -  -  -  ;
   24 D1:B295 -  -  -  -  ;
   25 D1:B295 -  -  -  -  ;
   26 D1:B295 -  -  -  -  ;
   27 D1:B295 -  -  -  -  ;
   28 D1:B295 -  -  -  -  
   29 D1:B295 -  -  -  -  
   30 D1:B295 -  -  -  -  
   31 D1:B295 -  -  -  -  
   32 D1:B295 -  -  -  -  ;-----------------------------------------------------------------------------
   33 D1:B295 -  -  -  -  ;Screen hardware interface stuff
   34 D1:B295 -  -  -  -  
   35 D1:B295 -  -  -  -  ;It ought to be called "bufSwap" but I just can't. I won't.
   36 D1:B295 -  -  -  -  fastCopy:
   37 D1:B295 11 00 00 D4     ld  de,screenBuf1
   38 D1:B299 2A 10 00 E3     ld  hl,(mpLcdBase)
   39 D1:B29D 22 28 34 D0     ld  (curScreenBuf),hl
   40 D1:B2A1 B7 -  -  -      or  a,a
   41 D1:B2A2 ED 52 -  -      sbc hl,de
   42 D1:B2A4 EB -  -  -      ex  de,hl
   43 D1:B2A5 20 04 -  -      jr  nz,+_
   44 D1:B2A7 21 00 2C D5     ld  hl,screenBuf2
   45 D1:B2AB 22 10 00 E3 _:  ld  (mpLcdBase),hl
   46 D1:B2AF C9 -  -  -      ret
   47 D1:B2B0 -  -  -  -  
   48 D1:B2B0 -  -  -  -  stopGfx:
   49 D1:B2B0 CD 74 03 00     call _boot_ClearVRAM
   50 D1:B2B4 11 2D 09 00     ld  de,lcdNormalMode
   51 D1:B2B8 01 00 00 D4     ld  bc,screenBuf1
   52 D1:B2BC 18 0C -  -      jr  configureScreen
   53 D1:B2BE -  -  -  -  
   54 D1:B2BE -  -  -  -  startGfx:
   55 D1:B2BE CD 74 03 00     call _boot_ClearVRAM
   56 D1:B2C2 11 27 38 01     ld  de,lcdWatermark+lcdIntFront+lcdPwr+lcdBpp8 ;+lcdBgr
   57 D1:B2C6 01 00 00 D4     ld  bc,screenBuf1
   58 D1:B2CA -  -  -  -  configureScreen:
   59 D1:B2CA 21 10 00 E3     ld  hl,mpLcdBase
   60 D1:B2CE ED 0F -  -      ld  (hl),bc
   61 D1:B2D0 2E 18 -  -      ld  L,lcdCtrl
   62 D1:B2D2 ED 1F -  -      ld  (hl),de
   63 D1:B2D4 2E 01 -  -      ld  L,lcdTiming0 + 1
   64 D1:B2D6 01 08 00 00     ld  bc,8
   65 D1:B2DA 11 09 B3 D1     ld  de,screenSettings
   66 D1:B2DE 1A -  -  -  _:  ld  a,(de)
   67 D1:B2DF ED A0 -  -      ldi
   68 D1:B2E1 2B -  -  -      dec hl
   69 D1:B2E2 77 -  -  -      ld  (hl),a
   70 D1:B2E3 23 -  -  -      inc hl
   71 D1:B2E4 EA DE B2 D1     jp  pe,-_
   72 D1:B2E8 21 00 2C D5     ld  hl,screenBuf2
   73 D1:B2EC 22 28 34 D0     ld  (curScreenBuf),hl
   74 D1:B2F0 -  -  -  -  ;Also copied from graphx
   75 D1:B2F0 -  -  -  -  setDefaultPalette:
   76 D1:B2F0 11 00 02 E3 	ld	de,mpLcdPalette	    ; address of mmio palette
   77 D1:B2F4 43 -  -  -  	ld	b,e			        ; b = 0
   78 D1:B2F5 78 -  -  -  _:	ld	a,b
   79 D1:B2F6 0F -  -  -  	rrca
   80 D1:B2F7 A8 -  -  -  	xor	a,b
   81 D1:B2F8 E6 E0 -  -  	and	a,224
   82 D1:B2FA A8 -  -  -  	xor	a,b
   83 D1:B2FB 12 -  -  -  	ld	(de),a
   84 D1:B2FC 13 -  -  -  	inc	de
   85 D1:B2FD 78 -  -  -  	ld	a,b
   86 D1:B2FE 17 -  -  -  	rla
   87 D1:B2FF 17 -  -  -  	rla
   88 D1:B300 17 -  -  -  	rla
   89 D1:B301 78 -  -  -  	ld	a,b
   90 D1:B302 1F -  -  -  	rra
   91 D1:B303 12 -  -  -  	ld	(de),a
   92 D1:B304 13 -  -  -  	inc	de
   93 D1:B305 04 -  -  -  	inc	b
   94 D1:B306 20 ED -  -  	jr	nz,-_		    ; loop for 256 times to fill palette
   95 D1:B308 C9 -  -  -  	ret
   96 D1:B309 -  -  -  -  
   97 D1:B309 -  -  -  -  screenSettings:
   98 D1:B309 -  -  -  -  ;Copied from my old Falldown2 project, which was also copied from graphx.asm
   99 D1:B309 -  -  -  -  ;	.db	14 shl 2			; PPL shl 2
  100 D1:B309 07 -  -  -  	.db	7					; HSW
  101 D1:B30A 57 -  -  -  	.db	87					; HFP
  102 D1:B30B 3F -  -  -  	.db	63					; HBP
  103 D1:B30C 3F 01 -  -  	.dw	(0 >> 10)+319		; (VSW shl 10)+LPP
  104 D1:B30E B3 -  -  -  	.db	179					; VFP
  105 D1:B30F 00 -  -  -  	.db	0					; VBP
  106 D1:B310 00 -  -  -  	.db	(0 >> 6)+(0 >> 5)+0	; (ACB shl 6)+(CLKSEL shl 5)+PCD_LO
  107 D1:B311 -  -  -  -  ;  H = ((PPL+1)*16)+(HSW+1)+(HFP+1)+(HBP+1) = 240+8+88+64 = 400
  108 D1:B311 -  -  -  -  ;  V = (LPP+1)+(VSW+1)+VFP+VBP = 320+1+179+0 = 500
  109 D1:B311 -  -  -  -  ; CC = H*V*PCD*2 = 400*500*2*2 = 800000
  110 D1:B311 -  -  -  -  ; Hz = 48000000/CC = 60
  111 D1:B311 -  -  -  -  
  112 D1:B311 -  -  -  -  
  113 D1:B311 -  -  -  -  ;-----------------------------------------------------------------------------
  114 D1:B311 -  -  -  -  ; Text Rendering
  115 D1:B311 -  -  -  -  
  116 D1:B311 -  -  -  -  clearTextBuf:
  117 D1:B311 21 00 58 D0     ld  hl,NAMETABLE1
  118 D1:B315 11 01 58 D0     ld  de,NAMETABLE1+1
  119 D1:B319 01 FF 03 00     ld  bc,1023
  120 D1:B31D 36 20 -  -      ld  (hl),' '
  121 D1:B31F ED B0 -  -      ldir
  122 D1:B321 C9 -  -  -      ret
  123 D1:B322 -  -  -  -  
  124 D1:B322 -  -  -  -  printTextBuf:
  125 D1:B322 2A F6 31 D0     ld  hl,(xPos)
  126 D1:B326 22 56 B3 D1     ld  (printTextBuf_smcPosRecovery),hl
  127 D1:B32A 21 00 58 D0     ld  hl,NAMETABLE1
  128 D1:B32E AF -  -  -      xor a,a
  129 D1:B32F 32 F7 31 D0     ld  (yPos),a
  130 D1:B333 0E 1E -  -      ld  c,30
  131 D1:B335 3E 08 -  -  _:  ld  a,8
  132 D1:B337 32 F6 31 D0     ld  (xPos),a
  133 D1:B33B 06 20 -  -      ld  b,$20
  134 D1:B33D 7E -  -  -  _:  ld  a,(hl)
  135 D1:B33E 23 -  -  -      inc hl
  136 D1:B33F C5 -  -  -      push bc
  137 D1:B340 E5 -  -  -          push hl
  138 D1:B341 CD 9F B3 D1             call printBigFont
  139 D1:B345 E1 -  -  -          pop hl
  140 D1:B346 C1 -  -  -      pop bc
  141 D1:B347 10 F4 -  -      djnz -_
  142 D1:B349 3A F7 31 D0     ld  a,(yPos)
  143 D1:B34D 3C -  -  -      inc a
  144 D1:B34E 32 F7 31 D0     ld  (yPos),a
  145 D1:B352 0D -  -  -      dec  c
  146 D1:B353 20 E0 -  -      jr  nz,--_
  147 D1:B355 -  -  -  -  printTextBuf_smcPosRecovery .equ $+1
  148 D1:B355 21 00 00 00     ld  hl,0
  149 D1:B359 22 F6 31 D0     ld  (xPos),hl
  150 D1:B35D C9 -  -  -      ret
  151 D1:B35E -  -  -  -  
  152 D1:B35E -  -  -  -  ;A=column to start on
  153 D1:B35E -  -  -  -  setLineStart:
  154 D1:B35E 32 F6 31 D0     ld  (xPos),a
  155 D1:B362 32 2B 34 D0     ld  (linestart),a
  156 D1:B366 C9 -  -  -      ret
  157 D1:B367 -  -  -  -  
  158 D1:B367 -  -  -  -  ;A=row to start on
  159 D1:B367 -  -  -  -  setCurLine:
  160 D1:B367 32 F7 31 D0     ld  (yPos),a
  161 D1:B36B C9 -  -  -      ret
  162 D1:B36C -  -  -  -  
  163 D1:B36C -  -  -  -  newPage:
  164 D1:B36C 3E FF -  -      ld  a,$FF
  165 D1:B36E 32 F7 31 D0     ld  (yPos),a
  166 D1:B372 -  -  -  -  newLine:
  167 D1:B372 3A 2B 34 D0     ld  a,(linestart)
  168 D1:B376 32 F6 31 D0     ld  (xPos),a
  169 D1:B37A 3A F7 31 D0     ld  a,(yPos)
  170 D1:B37E 3C -  -  -      inc a
  171 D1:B37F FE 1E -  -      cp  30
  172 D1:B381 38 01 -  -      jr  c,+_
  173 D1:B383 AF -  -  -      xor a,a
  174 D1:B384 32 F7 31 D0 _:  ld  (yPos),a
  175 D1:B388 C9 -  -  -      ret
  176 D1:B389 -  -  -  -  
  177 D1:B389 -  -  -  -      
  178 D1:B389 -  -  -  -      
  179 D1:B389 -  -  -  -  
  180 D1:B389 -  -  -  -  ;HL=address to string
  181 D1:B389 -  -  -  -  printString:
  182 D1:B389 7E -  -  -      ld  a,(hl)
  183 D1:B38A 23 -  -  -      inc hl
  184 D1:B38B B7 -  -  -      or  a,a
  185 D1:B38C C8 -  -  -      ret z
  186 D1:B38D FE 0A -  -      cp  a,'\n'
  187 D1:B38F 20 06 -  -      jr nz,+_
  188 D1:B391 CD 72 B3 D1     call newLine
  189 D1:B395 18 F2 -  -      jr  printString
  190 D1:B397 E5 -  -  -  _:  push hl
  191 D1:B398 CD 9F B3 D1         call printBigFont
  192 D1:B39C E1 -  -  -      pop hl
  193 D1:B39D 18 EA -  -      jr printString
  194 D1:B39F -  -  -  -  
  195 D1:B39F -  -  -  -  
  196 D1:B39F -  -  -  -  ;in: A=chrToPrint
  197 D1:B39F -  -  -  -  printBigFont:
  198 D1:B39F CD 34 B4 D1     call calculateScreenPtr
  199 D1:B3A3 EB -  -  -      ex  de,hl
  200 D1:B3A4 6F -  -  -      ld  L,a
  201 D1:B3A5 26 08 -  -      ld  H,8
  202 D1:B3A7 ED 6C -  -      mlt hl
  203 D1:B3A9 01 74 B3 D1     ld  bc,graphx_textdata
  204 D1:B3AD 09 -  -  -      add hl,bc
  205 D1:B3AE EB -  -  -      ex  de,hl
  206 D1:B3AF 0E 08 -  -      ld  c,8
  207 D1:B3B1 06 08 -  -  _:  ld  b,8
  208 D1:B3B3 1A -  -  -      ld  a,(de)
  209 D1:B3B4 87 -  -  -  _:  add a,a
  210 D1:B3B5 -  -  -  -  fontBGColor_var .equ $+1
  211 D1:B3B5 36 00 -  -      ld  (hl),FONTBGCOLOR
  212 D1:B3B7 30 02 -  -      jr  nc,$+4
  213 D1:B3B9 -  -  -  -  fontFGColor_var .equ $+1
  214 D1:B3B9 36 FF -  -      ld  (hl),FONTFGCOLOR
  215 D1:B3BB 23 -  -  -      inc hl
  216 D1:B3BC 10 F6 -  -      djnz -_
  217 D1:B3BE 79 -  -  -      ld  a,c
  218 D1:B3BF 01 38 01 00     ld  bc,320-8
  219 D1:B3C3 09 -  -  -      add hl,bc
  220 D1:B3C4 4F -  -  -      ld  c,a
  221 D1:B3C5 13 -  -  -      inc de
  222 D1:B3C6 0D -  -  -      dec c
  223 D1:B3C7 20 E8 -  -      jr  nz,--_
  224 D1:B3C9 21 F6 31 D0     ld  hl,xPos
  225 D1:B3CD 34 -  -  -      inc (hl)
  226 D1:B3CE C9 -  -  -      ret
  227 D1:B3CF -  -  -  -  
  228 D1:B3CF -  -  -  -  ;A= 0-255 numeric value to display as hex
  229 D1:B3CF -  -  -  -  printSmallNumPair:
  230 D1:B3CF CD 34 B4 D1     call calculateScreenPtr
  231 D1:B3D3 F5 -  -  -      push af
  232 D1:B3D4 1F -  -  -          rra
  233 D1:B3D5 1F -  -  -          rra
  234 D1:B3D6 1F -  -  -          rra
  235 D1:B3D7 1F -  -  -          rra
  236 D1:B3D8 CD E7 B3 D1         call +_
  237 D1:B3DC F1 -  -  -      pop af
  238 D1:B3DD CD E7 B3 D1     call +_
  239 D1:B3E1 21 F6 31 D0     ld  hl,xPos
  240 D1:B3E5 34 -  -  -      inc (hl)
  241 D1:B3E6 C9 -  -  -      ret
  242 D1:B3E7 E6 0F -  -  _:  and a,$0F
  243 D1:B3E9 01 40 01 00     ld  bc,320
  244 D1:B3ED 09 -  -  -      add hl,bc   ;drop height by one. These small chars are *short*
  245 D1:B3EE EB -  -  -      ex  de,hl
  246 D1:B3EF 6F -  -  -      ld  L,a
  247 D1:B3F0 26 03 -  -      ld  H,3
  248 D1:B3F2 ED 6C -  -      mlt hl
  249 D1:B3F4 01 74 B7 D1     ld  bc,SmallHexFont
  250 D1:B3F8 09 -  -  -      add hl,bc
  251 D1:B3F9 EB -  -  -      ex  de,hl
  252 D1:B3FA 0E 03 -  -      ld  c,3
  253 D1:B3FC 18 14 -  -      jr  printSmallNumPair_2ndHalf
  254 D1:B3FE -  -  -  -  printSmallNumPair_1stHalf:
  255 D1:B3FE 1A -  -  -      ld  a,(de)
  256 D1:B3FF 06 04 -  -      ld  b,4
  257 D1:B401 87 -  -  -  _:  add a,a
  258 D1:B402 -  -  -  -  smallFontBGColor_var .equ $+1
  259 D1:B402 36 00 -  -      ld  (hl),FONTBGCOLOR
  260 D1:B404 30 02 -  -      jr  nc,$+4
  261 D1:B406 -  -  -  -  smallFontFGColor_var .equ $+1
  262 D1:B406 36 FF -  -      ld  (hl),FONTFGCOLOR
  263 D1:B408 23 -  -  -      inc hl
  264 D1:B409 10 F6 -  -      djnz -_
  265 D1:B40B 79 -  -  -      ld  a,c
  266 D1:B40C 01 3C 01 00     ld  bc,320-4
  267 D1:B410 09 -  -  -      add hl,bc
  268 D1:B411 4F -  -  -      ld  c,a
  269 D1:B412 -  -  -  -  printSmallNumPair_2ndHalf:
  270 D1:B412 1A -  -  -      ld  a,(de)
  271 D1:B413 07 -  -  -      rlca
  272 D1:B414 07 -  -  -      rlca
  273 D1:B415 07 -  -  -      rlca
  274 D1:B416 07 -  -  -      rlca
  275 D1:B417 06 04 -  -      ld  b,4
  276 D1:B419 87 -  -  -  _:  add a,a
  277 D1:B41A 36 00 -  -      ld  (hl),FONTBGCOLOR
  278 D1:B41C 30 02 -  -      jr  nc,$+4
  279 D1:B41E 36 FF -  -      ld  (hl),FONTFGCOLOR
  280 D1:B420 23 -  -  -      inc hl
  281 D1:B421 10 F6 -  -      djnz -_
  282 D1:B423 13 -  -  -      inc de
  283 D1:B424 79 -  -  -      ld  a,c
  284 D1:B425 01 3C 01 00     ld  bc,320-4
  285 D1:B429 09 -  -  -      add hl,bc
  286 D1:B42A 4F -  -  -      ld  c,a
  287 D1:B42B 0D -  -  -      dec c
  288 D1:B42C 20 D0 -  -      jr  nz,printSmallNumPair_1stHalf
  289 D1:B42E 01 84 F8 FF     ld  bc,-(320*(1+5))+4
  290 D1:B432 09 -  -  -      add hl,bc
  291 D1:B433 C9 -  -  -      ret
  292 D1:B434 -  -  -  -  
  293 D1:B434 -  -  -  -  calculateScreenPtr:
  294 D1:B434 -  -  -  -      ;xcoord: x * 8 
  295 D1:B434 -  -  -  -      ;ycoord: 320 * 8 * y
  296 D1:B434 -  -  -  -      ;coord: (8x)+320*8y -> 8(x+320y)
  297 D1:B434 ED 5B F6 31 
              D0 -  -  -      ld  de,(xPos)
  298 D1:B439 -  -  -  -  calculateScreenPtrDE:
  299 D1:B439 6A -  -  -      ld  L,d     ;yPos
  300 D1:B43A 26 A0 -  -      ld  h,160
  301 D1:B43C ED 6C -  -      mlt hl
  302 D1:B43E 29 -  -  -      add hl,hl
  303 D1:B43F 16 01 -  -      ld  d,1
  304 D1:B441 ED 5C -  -      mlt de      ;DE=E. Clears high bytes.
  305 D1:B443 19 -  -  -      add hl,de
  306 D1:B444 29 -  -  -      add hl,hl
  307 D1:B445 29 -  -  -      add hl,hl
  308 D1:B446 29 -  -  -      add hl,hl
  309 D1:B447 ED 5B 28 34 
              D0 -  -  -      ld  de,(curScreenBuf)
  310 D1:B44C 19 -  -  -      add hl,de
  311 D1:B44D C9 -  -  -      ret
  312 D1:B44E -  -  -  -  
  313 D1:B44E -  -  -  -  
  314 D1:B44E -  -  -  -  
  315 D1:B44E -  -  -  -  ;Example code, also ripped from the page below.
  316 D1:B44E -  -  -  -  ; ld a,036h ; Flips the lcd horizontally, vertically, and swaps the b and r components
  317 D1:B44E -  -  -  -  ; call spiCmd
  318 D1:B44E -  -  -  -  ; ld a,0C0h
  319 D1:B44E -  -  -  -  ; call spiParam
  320 D1:B44E -  -  -  -  ;
  321 D1:B44E -  -  -  -  ; ld a,002h ; Resetting the lcd on exit
  322 D1:B44E -  -  -  -  ; call spiCmd
  323 D1:B44E -  -  -  -  ; jp boot_InitializeHardware
  324 D1:B44E -  -  -  -  
  325 D1:B44E -  -  -  -  ;Copied shamelessly from:
  326 D1:B44E -  -  -  -  ;https://wikiti.brandonw.net/index.php?title=84PCE:Ports:D000
  327 D1:B44E -  -  -  -  ; Input: A = parameter
  328 D1:B44E -  -  -  -  spiParam:
  329 D1:B44E 37 -  -  -   scf ; First bit is set for data
  330 D1:B44F 30 -  -  -   .db 030h ; jr nc,? ; skips over one byte
  331 D1:B450 -  -  -  -  ; Input: A = command
  332 D1:B450 -  -  -  -  spiCmd:
  333 D1:B450 B7 -  -  -   or a,a ; First bit is clear for commands
  334 D1:B451 21 18 08 F8  ld hl,0F80818h
  335 D1:B455 CD 6B B4 D1  call spiWrite
  336 D1:B459 6C -  -  -   ld l,h
  337 D1:B45A 36 01 -  -   ld (hl),001h
  338 D1:B45C -  -  -  -  spiWait:
  339 D1:B45C 2E 0D -  -   ld l,00Dh
  340 D1:B45E -  -  -  -  spiWait1:
  341 D1:B45E 7E -  -  -   ld a,(hl)
  342 D1:B45F E6 F0 -  -   and a,0F0h
  343 D1:B461 20 FB -  -   jr nz,spiWait1
  344 D1:B463 2D -  -  -   dec l
  345 D1:B464 -  -  -  -  spiWait2:
  346 D1:B464 CB 56 -  -   bit 2,(hl)
  347 D1:B466 20 FC -  -   jr nz,spiWait2
  348 D1:B468 6C -  -  -   ld l,h
  349 D1:B469 77 -  -  -   ld (hl),a
  350 D1:B46A C9 -  -  -   ret
  351 D1:B46B -  -  -  -  spiWrite:
  352 D1:B46B 06 03 -  -   ld b,3
  353 D1:B46D -  -  -  -  spiWriteLoop:
  354 D1:B46D 17 -  -  -   rla
  355 D1:B46E 17 -  -  -   rla
  356 D1:B46F 17 -  -  -   rla
  357 D1:B470 77 -  -  -   ld (hl),a ; send 3 bits
  358 D1:B471 10 FA -  -   djnz spiWriteLoop
  359 D1:B473 C9 -  -  -   ret
  360 D1:B474 -  -  -  -  
  361 D1:B474 -  -  -  -  
  362 D1:B474 -  -  -  -  
  363 D1:B474 -  -  -  -  
  364 D1:B474 -  -  -  -  
  365 D1:B474 -  -  -  -  ;-----------------------------------------------------------------------------
  366 D1:B474 -  -  -  -  ; Data Section
  367 D1:B474 -  -  -  -  
  368 D1:B474 -  -  -  -  graphx_textdata		.EQU $-(8*' ')		;points to what would be start of ASCII
  369 D1:B474 00 00 00 00 
              00 00 00 00 .db	$00,$00,$00,$00,$00,$00,$00,$00 ;
  370 D1:B47C C0 C0 C0 C0 
              C0 00 C0 00 .db	$C0,$C0,$C0,$C0,$C0,$00,$C0,$00 ; !
  371 D1:B484 D8 D8 D8 00 
              00 00 00 00 .db	$D8,$D8,$D8,$00,$00,$00,$00,$00 ; "
  372 D1:B48C 6C 6C FE 6C 
              FE 6C 6C 00 .db	$6C,$6C,$FE,$6C,$FE,$6C,$6C,$00 ; #
  373 D1:B494 18 7E C0 7C 
              06 FC 18 00 .db	$18,$7E,$C0,$7C,$06,$FC,$18,$00 ; $
  374 D1:B49C 00 C6 CC 18 
              30 66 C6 00 .db	$00,$C6,$CC,$18,$30,$66,$C6,$00 ; %
  375 D1:B4A4 38 6C 38 76 
              DC CC 76 00 .db	$38,$6C,$38,$76,$DC,$CC,$76,$00 ; &
  376 D1:B4AC 30 30 60 00 
              00 00 00 00 .db	$30,$30,$60,$00,$00,$00,$00,$00 ; '
  377 D1:B4B4 30 60 C0 C0 
              C0 60 30 00 .db	$30,$60,$C0,$C0,$C0,$60,$30,$00 ; (
  378 D1:B4BC C0 60 30 30 
              30 60 C0 00 .db	$C0,$60,$30,$30,$30,$60,$C0,$00 ; )
  379 D1:B4C4 00 66 3C FF 
              3C 66 00 00 .db	$00,$66,$3C,$FF,$3C,$66,$00,$00 ; *
  380 D1:B4CC 00 30 30 FC 
              FC 30 30 00 .db	$00,$30,$30,$FC,$FC,$30,$30,$00 ; +
  381 D1:B4D4 00 00 00 00 
              00 60 60 C0 .db	$00,$00,$00,$00,$00,$60,$60,$C0 ; ,
  382 D1:B4DC 00 00 00 FC 
              00 00 00 00 .db	$00,$00,$00,$FC,$00,$00,$00,$00 ; -
  383 D1:B4E4 00 00 00 00 
              00 C0 C0 00 .db	$00,$00,$00,$00,$00,$C0,$C0,$00 ; .
  384 D1:B4EC 06 0C 18 30 
              60 C0 80 00 .db	$06,$0C,$18,$30,$60,$C0,$80,$00 ; /
  385 D1:B4F4 7C CE DE F6 
              E6 C6 7C 00 .db	$7C,$CE,$DE,$F6,$E6,$C6,$7C,$00 ; 0
  386 D1:B4FC 30 70 30 30 
              30 30 FC 00 .db	$30,$70,$30,$30,$30,$30,$FC,$00 ; 1
  387 D1:B504 7C C6 06 7C 
              C0 C0 FE 00 .db	$7C,$C6,$06,$7C,$C0,$C0,$FE,$00 ; 2
  388 D1:B50C FC 06 06 3C 
              06 06 FC 00 .db	$FC,$06,$06,$3C,$06,$06,$FC,$00 ; 3
  389 D1:B514 0C CC CC CC 
              FE 0C 0C 00 .db	$0C,$CC,$CC,$CC,$FE,$0C,$0C,$00 ; 4
  390 D1:B51C FE C0 FC 06 
              06 C6 7C 00 .db	$FE,$C0,$FC,$06,$06,$C6,$7C,$00 ; 5
  391 D1:B524 7C C0 C0 FC 
              C6 C6 7C 00 .db	$7C,$C0,$C0,$FC,$C6,$C6,$7C,$00 ; 6
  392 D1:B52C FE 06 06 0C 
              18 30 30 00 .db	$FE,$06,$06,$0C,$18,$30,$30,$00 ; 7
  393 D1:B534 7C C6 C6 7C 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$7C,$C6,$C6,$7C,$00 ; 8
  394 D1:B53C 7C C6 C6 7E 
              06 06 7C 00 .db	$7C,$C6,$C6,$7E,$06,$06,$7C,$00 ; 9
  395 D1:B544 00 C0 C0 00 
              00 C0 C0 00 .db	$00,$C0,$C0,$00,$00,$C0,$C0,$00 ; :
  396 D1:B54C 00 60 60 00 
              00 60 60 C0 .db	$00,$60,$60,$00,$00,$60,$60,$C0 ; ;
  397 D1:B554 18 30 60 C0 
              60 30 18 00 .db	$18,$30,$60,$C0,$60,$30,$18,$00 ; <
  398 D1:B55C 00 00 FC 00 
              FC 00 00 00 .db	$00,$00,$FC,$00,$FC,$00,$00,$00 ; =
  399 D1:B564 C0 60 30 18 
              30 60 C0 00 .db	$C0,$60,$30,$18,$30,$60,$C0,$00 ; >
  400 D1:B56C 78 CC 18 30 
              30 00 30 00 .db	$78,$CC,$18,$30,$30,$00,$30,$00 ; ?
  401 D1:B574 7C C6 DE DE 
              DE C0 7E 00 .db	$7C,$C6,$DE,$DE,$DE,$C0,$7E,$00 ; @
  402 D1:B57C 38 6C C6 C6 
              FE C6 C6 00 .db	$38,$6C,$C6,$C6,$FE,$C6,$C6,$00 ; A
  403 D1:B584 FC C6 C6 FC 
              C6 C6 FC 00 .db	$FC,$C6,$C6,$FC,$C6,$C6,$FC,$00 ; B
  404 D1:B58C 7C C6 C0 C0 
              C0 C6 7C 00 .db	$7C,$C6,$C0,$C0,$C0,$C6,$7C,$00 ; C
  405 D1:B594 F8 CC C6 C6 
              C6 CC F8 00 .db	$F8,$CC,$C6,$C6,$C6,$CC,$F8,$00 ; D
  406 D1:B59C FE C0 C0 F8 
              C0 C0 FE 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$FE,$00 ; E
  407 D1:B5A4 FE C0 C0 F8 
              C0 C0 C0 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$C0,$00 ; F
  408 D1:B5AC 7C C6 C0 C0 
              CE C6 7C 00 .db	$7C,$C6,$C0,$C0,$CE,$C6,$7C,$00 ; G
  409 D1:B5B4 C6 C6 C6 FE 
              C6 C6 C6 00 .db	$C6,$C6,$C6,$FE,$C6,$C6,$C6,$00 ; H
  410 D1:B5BC 7E 18 18 18 
              18 18 7E 00 .db	$7E,$18,$18,$18,$18,$18,$7E,$00 ; I
  411 D1:B5C4 06 06 06 06 
              06 C6 7C 00 .db	$06,$06,$06,$06,$06,$C6,$7C,$00 ; J
  412 D1:B5CC C6 CC D8 F0 
              D8 CC C6 00 .db	$C6,$CC,$D8,$F0,$D8,$CC,$C6,$00 ; K
  413 D1:B5D4 C0 C0 C0 C0 
              C0 C0 FE 00 .db	$C0,$C0,$C0,$C0,$C0,$C0,$FE,$00 ; L
  414 D1:B5DC C6 EE FE FE 
              D6 C6 C6 00 .db	$C6,$EE,$FE,$FE,$D6,$C6,$C6,$00 ; M
  415 D1:B5E4 C6 E6 F6 DE 
              CE C6 C6 00 .db	$C6,$E6,$F6,$DE,$CE,$C6,$C6,$00 ; N
  416 D1:B5EC 7C C6 C6 C6 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$C6,$C6,$C6,$7C,$00 ; O
  417 D1:B5F4 FC C6 C6 FC 
              C0 C0 C0 00 .db	$FC,$C6,$C6,$FC,$C0,$C0,$C0,$00 ; P
  418 D1:B5FC 7C C6 C6 C6 
              D6 DE 7C 06 .db	$7C,$C6,$C6,$C6,$D6,$DE,$7C,$06 ; Q
  419 D1:B604 FC C6 C6 FC 
              D8 CC C6 00 .db	$FC,$C6,$C6,$FC,$D8,$CC,$C6,$00 ; R
  420 D1:B60C 7C C6 C0 7C 
              06 C6 7C 00 .db	$7C,$C6,$C0,$7C,$06,$C6,$7C,$00 ; S
  421 D1:B614 FF 18 18 18 
              18 18 18 00 .db	$FF,$18,$18,$18,$18,$18,$18,$00 ; T
  422 D1:B61C C6 C6 C6 C6 
              C6 C6 FE 00 .db	$C6,$C6,$C6,$C6,$C6,$C6,$FE,$00 ; U
  423 D1:B624 C6 C6 C6 C6 
              C6 7C 38 00 .db	$C6,$C6,$C6,$C6,$C6,$7C,$38,$00 ; V
  424 D1:B62C C6 C6 C6 C6 
              D6 FE 6C 00 .db	$C6,$C6,$C6,$C6,$D6,$FE,$6C,$00 ; W
  425 D1:B634 C6 C6 6C 38 
              6C C6 C6 00 .db	$C6,$C6,$6C,$38,$6C,$C6,$C6,$00 ; X
  426 D1:B63C C6 C6 C6 7C 
              18 30 E0 00 .db	$C6,$C6,$C6,$7C,$18,$30,$E0,$00 ; Y
  427 D1:B644 FE 06 0C 18 
              30 60 FE 00 .db	$FE,$06,$0C,$18,$30,$60,$FE,$00 ; Z
  428 D1:B64C F0 C0 C0 C0 
              C0 C0 F0 00 .db	$F0,$C0,$C0,$C0,$C0,$C0,$F0,$00 ; [
  429 D1:B654 C0 60 30 18 
              0C 06 02 00 .db	$C0,$60,$30,$18,$0C,$06,$02,$00 ; \
  430 D1:B65C F0 30 30 30 
              30 30 F0 00 .db	$F0,$30,$30,$30,$30,$30,$F0,$00 ; ]
  431 D1:B664 10 38 6C C6 
              00 00 00 00 .db	$10,$38,$6C,$C6,$00,$00,$00,$00 ; ^
  432 D1:B66C 00 00 00 00 
              00 00 00 FF .db	$00,$00,$00,$00,$00,$00,$00,$FF ; _
  433 D1:B674 C0 C0 60 00 
              00 00 00 00 .db	$C0,$C0,$60,$00,$00,$00,$00,$00 ; `
  434 D1:B67C 00 00 7C 06 
              7E C6 7E 00 .db	$00,$00,$7C,$06,$7E,$C6,$7E,$00 ; a
  435 D1:B684 C0 C0 C0 FC 
              C6 C6 FC 00 .db	$C0,$C0,$C0,$FC,$C6,$C6,$FC,$00 ; b
  436 D1:B68C 00 00 7C C6 
              C0 C6 7C 00 .db	$00,$00,$7C,$C6,$C0,$C6,$7C,$00 ; c
  437 D1:B694 06 06 06 7E 
              C6 C6 7E 00 .db	$06,$06,$06,$7E,$C6,$C6,$7E,$00 ; d
  438 D1:B69C 00 00 7C C6 
              FE C0 7C 00 .db	$00,$00,$7C,$C6,$FE,$C0,$7C,$00 ; e
  439 D1:B6A4 1C 36 30 78 
              30 30 78 00 .db	$1C,$36,$30,$78,$30,$30,$78,$00 ; f
  440 D1:B6AC 00 00 7E C6 
              C6 7E 06 FC .db	$00,$00,$7E,$C6,$C6,$7E,$06,$FC ; g
  441 D1:B6B4 C0 C0 FC C6 
              C6 C6 C6 00 .db	$C0,$C0,$FC,$C6,$C6,$C6,$C6,$00 ; h
  442 D1:B6BC 18 00 38 18 
              18 18 3C 00 .db	$18,$00,$38,$18,$18,$18,$3C,$00 ; i
  443 D1:B6C4 06 00 06 06 
              06 06 C6 7C .db	$06,$00,$06,$06,$06,$06,$C6,$7C ; j
  444 D1:B6CC C0 C0 CC D8 
              F8 CC C6 00 .db	$C0,$C0,$CC,$D8,$F8,$CC,$C6,$00 ; k
  445 D1:B6D4 38 18 18 18 
              18 18 3C 00 .db	$38,$18,$18,$18,$18,$18,$3C,$00 ; l
  446 D1:B6DC 00 00 CC FE 
              FE D6 D6 00 .db	$00,$00,$CC,$FE,$FE,$D6,$D6,$00 ; m
  447 D1:B6E4 00 00 FC C6 
              C6 C6 C6 00 .db	$00,$00,$FC,$C6,$C6,$C6,$C6,$00 ; n
  448 D1:B6EC 00 00 7C C6 
              C6 C6 7C 00 .db	$00,$00,$7C,$C6,$C6,$C6,$7C,$00 ; o
  449 D1:B6F4 00 00 FC C6 
              C6 FC C0 C0 .db	$00,$00,$FC,$C6,$C6,$FC,$C0,$C0 ; p
  450 D1:B6FC 00 00 7E C6 
              C6 7E 06 06 .db	$00,$00,$7E,$C6,$C6,$7E,$06,$06 ; q
  451 D1:B704 00 00 FC C6 
              C0 C0 C0 00 .db	$00,$00,$FC,$C6,$C0,$C0,$C0,$00 ; r
  452 D1:B70C 00 00 7E C0 
              7C 06 FC 00 .db	$00,$00,$7E,$C0,$7C,$06,$FC,$00 ; s
  453 D1:B714 30 30 FC 30 
              30 30 1C 00 .db	$30,$30,$FC,$30,$30,$30,$1C,$00 ; t
  454 D1:B71C 00 00 C6 C6 
              C6 C6 7E 00 .db	$00,$00,$C6,$C6,$C6,$C6,$7E,$00 ; u
  455 D1:B724 00 00 C6 C6 
              C6 7C 38 00 .db	$00,$00,$C6,$C6,$C6,$7C,$38,$00 ; v
  456 D1:B72C 00 00 C6 C6 
              D6 FE 6C 00 .db	$00,$00,$C6,$C6,$D6,$FE,$6C,$00 ; w
  457 D1:B734 00 00 C6 6C 
              38 6C C6 00 .db	$00,$00,$C6,$6C,$38,$6C,$C6,$00 ; x
  458 D1:B73C 00 00 C6 C6 
              C6 7E 06 FC .db	$00,$00,$C6,$C6,$C6,$7E,$06,$FC ; y
  459 D1:B744 00 00 FE 0C 
              38 60 FE 00 .db	$00,$00,$FE,$0C,$38,$60,$FE,$00 ; z
  460 D1:B74C 1C 30 30 E0 
              30 30 1C 00 .db	$1C,$30,$30,$E0,$30,$30,$1C,$00 ; {
  461 D1:B754 C0 C0 C0 00 
              C0 C0 C0 00 .db	$C0,$C0,$C0,$00,$C0,$C0,$C0,$00 ; |
  462 D1:B75C E0 30 30 1C 
              30 30 E0 00 .db	$E0,$30,$30,$1C,$30,$30,$E0,$00 ; }
  463 D1:B764 76 DC 00 00 
              00 00 00 00 .db	$76,$DC,$00,$00,$00,$00,$00,$00 ; ~
  464 D1:B76C 00 10 38 6C 
              C6 C6 FE 00 .db	$00,$10,$38,$6C,$C6,$C6,$FE,$00 ; △
  465 D1:B774 -  -  -  -  
  466 D1:B774 -  -  -  -  ;Copied from the Escheron: Twilight over Ragnoth project
  467 D1:B774 -  -  -  -  ;whose format was copied from a (then-)authorized source
  468 D1:B774 -  -  -  -  ;for DoorsCS (I think? The one for the 83+) by "Kerm Martian".
  469 D1:B774 -  -  -  -  SmallHexFont:
  470 D1:B774 4E AA AE -  .db $4E,$AA,$AE				;zero
  471 D1:B777 44 C4 4E -  .db $44,$C4,$4E				;one
  472 D1:B77A 4C 24 8E -  .db $4C,$24,$8E				;two
  473 D1:B77D 4C 24 2C -  .db $4C,$24,$2C				;three
  474 D1:B780 48 AE 22 -  .db $48,$AE,$22				;four
  475 D1:B783 4E 8C 2C -  .db $4E,$8C,$2C				;five
  476 D1:B786 46 8E AE -  .db $46,$8E,$AE				;six
  477 D1:B789 4E 24 88 -  .db $4E,$24,$88				;seven
  478 D1:B78C 4E AE AE -  .db $4E,$AE,$AE				;eight
  479 D1:B78F 4E AE 2C -  .db $4E,$AE,$2C				;nine
  480 D1:B792 44 AE AA -  .db $44,$AE,$AA				;A
  481 D1:B795 4C AC AC -  .db $4C,$AC,$AC				;B
  482 D1:B798 46 88 86 -  .db $46,$88,$86				;C
  483 D1:B79B 4C AA AC -  .db $4C,$AA,$AC				;D
  484 D1:B79E 4E 8C 8E -  .db $4E,$8C,$8E				;E
  485 D1:B7A1 4E 8C 88 -  .db $4E,$8C,$88				;F
  486 D1:B7A4 -  -  -  -  
  487 D1:B7A4 -  -  -  -  
  488 D1:B7A4 -  -  -  -  
Listing for file "main.z80"
 1169 D1:B7A4 -  -  -  -  #include "coreint.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\coreint.z80"
    1 D1:B7A4 -  -  -  -  ; Code to handle interrup servicer. Note: This hinges on 
    2 D1:B7A4 -  -  -  -  ; PPU timing, so some of its initilization code will end up here too.
    3 D1:B7A4 -  -  -  -  ;
    4 D1:B7A4 -  -  -  -  
    5 D1:B7A4 -  -  -  -  
    6 D1:B7A4 -  -  -  -  ;This routine is called after the end of every insert/push/pop operation
    7 D1:B7A4 -  -  -  -  int6502_updateIntCounter:
    8 D1:B7A4 21 60 34 D0     ld  hl,int_table_len
    9 D1:B7A8 7E -  -  -      ld  a,(hl)
   10 D1:B7A9 B7 -  -  -      or  a,a
   11 D1:B7AA C8 -  -  -      ret z
   12 D1:B7AB 23 -  -  -      inc hl  ;advance to first pointer
   13 D1:B7AC 23 -  -  -      inc hl
   14 D1:B7AD 23 -  -  -      inc hl
   15 D1:B7AE 23 -  -  -      inc hl  ;advanced to first time
   16 D1:B7AF ED 27 -  -      ld  hl,(hl)
   17 D1:B7B1 -  -  -  -      ;neg hl
   18 D1:B7B1 DD 2F 1B -      ld  (ix+TEMP_MEMORY),hl
   19 D1:B7B4 DD 7E 1D -      ld  a,(ix+TEMP_MEMORY+2)
   20 D1:B7B7 2F -  -  -      cpl
   21 D1:B7B8 DD 77 1D -      ld  (ix+TEMP_MEMORY+2),a
   22 D1:B7BB DD 27 1B -      ld  hl,(ix+TEMP_MEMORY)
   23 D1:B7BE 7D -  -  -      ld  a,l
   24 D1:B7BF 2F -  -  -      cpl
   25 D1:B7C0 6F -  -  -      ld  l,a
   26 D1:B7C1 7C -  -  -      ld  a,h
   27 D1:B7C2 2F -  -  -      cpl
   28 D1:B7C3 67 -  -  -      ld  h,a
   29 D1:B7C4 23 -  -  -      inc hl
   30 D1:B7C5 -  -  -  -      ;load to clock counter in "core.z80"
   31 D1:B7C5 22 4B B9 D1     ld  (i6502_interrupt_timer),hl
   32 D1:B7C9 C9 -  -  -      ret
   33 D1:B7CA -  -  -  -  
   34 D1:B7CA -  -  -  -  int6502_init:
   35 D1:B7CA AF -  -  -      xor a,a
   36 D1:B7CB 32 60 34 D0     ld  (int_table_len),a
   37 D1:B7CF C9 -  -  -      ret
   38 D1:B7D0 -  -  -  -  
   39 D1:B7D0 -  -  -  -  
   40 D1:B7D0 -  -  -  -  ;Only call this inside the NMI handler, since that is the routine that adjusts
   41 D1:B7D0 -  -  -  -  ;the cycle counter downard. All entries that remain on the table will by
   42 D1:B7D0 -  -  -  -  ;have a higher count than the NMI. The table's probably empty, though.
   43 D1:B7D0 -  -  -  -  ;BC=timeToAdjust IX=thing
   44 D1:B7D0 -  -  -  -  int6502_adjustTimings:
   45 D1:B7D0 DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
   46 D1:B7D5 DD 7E FF -      ld  a,(ix-1)
   47 D1:B7D8 B7 -  -  -      or  a,a
   48 D1:B7D9 20 0F -  -      jr  nz,int6502_adjustTimings_noAdjust
   49 D1:B7DB -  -  -  -  int6502_adjustTimings_loop:
   50 D1:B7DB DD 27 03 -      ld  hl,(ix+INT_CYCLE_OFFSET)
   51 D1:B7DE B7 -  -  -      or  a,a
   52 D1:B7DF ED 42 -  -      sbc hl,bc
   53 D1:B7E1 DD 2F 03 -      ld  (ix+INT_CYCLE_OFFSET),hl
   54 D1:B7E4 ED 32 06 -      lea ix,ix+INT_TABLE_STRIDE
   55 D1:B7E7 3D -  -  -      dec a
   56 D1:B7E8 20 F1 -  -      jr  nz,int6502_adjustTimings_loop
   57 D1:B7EA -  -  -  -  int6502_adjustTimings_noAdjust:
   58 D1:B7EA DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   59 D1:B7EF C9 -  -  -      ret
   60 D1:B7F0 -  -  -  -  
   61 D1:B7F0 -  -  -  -  ;DE=ISRToPush, BC=CallWhenThisClockIsPassed
   62 D1:B7F0 -  -  -  -  ;This routine is called in the ISR handler to both acknowledge the consumption
   63 D1:B7F0 -  -  -  -  ;of its turn at the ISR, and to (potentially) push another entry to the stack.
   64 D1:B7F0 -  -  -  -  ;This does not affect ths size of a table since this is a combined
   65 D1:B7F0 -  -  -  -  ;pop-and-insert operation
   66 D1:B7F0 -  -  -  -  int6502_pushISRAfterPop:
   67 D1:B7F0 DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
   68 D1:B7F5 DD 7E FF -      ld  a,(ix-1)        ;length of the table
   69 D1:B7F8 B7 -  -  -      or  a,a
   70 D1:B7F9 20 13 -  -      jr  nz,int6502_pushISRAfterPop_keepChecking
   71 D1:B7FB -  -  -  -  int6502_pushISRAfterPop_writeFirstEntry:
   72 D1:B7FB DD 36 FF 01     ld  (ix-1),1
   73 D1:B7FF -  -  -  -  int6502_pushISRAfterPop_writeEntry:
   74 D1:B7FF DD 1F 00 -      ld  (ix+0),de
   75 D1:B802 DD 0F 03 -      ld  (ix+3),bc
   76 D1:B805 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   77 D1:B80A C3 A4 B7 D1     jp  int6502_updateIntCounter
   78 D1:B80E -  -  -  -  int6502_pushISRAfterPop_keepChecking:
   79 D1:B80E 3D -  -  -      dec a
   80 D1:B80F 28 EA -  -      jr  z,int6502_pushISRAfterPop_writeFirstEntry
   81 D1:B811 -  -  -  -      ;Loop steps:
   82 D1:B811 -  -  -  -      ;If not loopCounter or BC < ix[0].T:
   83 D1:B811 -  -  -  -      ;   ix[-1] = DE,BC
   84 D1:B811 -  -  -  -      ;   STOP.
   85 D1:B811 -  -  -  -      ;Else:
   86 D1:B811 -  -  -  -      ;   ix[-1] = ix[0]
   87 D1:B811 -  -  -  -      ;   ix += STRIDE
   88 D1:B811 -  -  -  -      ;   --loopCounter;
   89 D1:B811 -  -  -  -  int6502_pushISRAfterPop_loop:
   90 D1:B811 ED 32 06 -      lea ix,ix+INT_TABLE_STRIDE
   91 D1:B814 B7 -  -  -      or  a,a
   92 D1:B815 28 E8 -  -      jr  z,int6502_pushISRAfterPop_writeEntry
   93 D1:B817 DD 27 03 -      ld  hl,(ix+INT_CYCLE_OFFSET)
   94 D1:B81A ED 42 -  -      sbc hl,bc   ;C if ix[0]<BC
   95 D1:B81C 38 E1 -  -      jr  c,int6502_pushISRAfterPop_writeEntry
   96 D1:B81E DD 27 00 -      ld  hl,(ix+INT_ADDR_OFFSET)
   97 D1:B821 DD 2F FA -      ld  (ix+INT_ADDR_OFFSET-INT_TABLE_STRIDE),hl
   98 D1:B824 DD 27 03 -      ld  hl,(ix+INT_CYCLE_OFFSET)
   99 D1:B827 DD 2F FD -      ld  (ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE),hl
  100 D1:B82A 3D -  -  -      dec a
  101 D1:B82B 18 E4 -  -      jr int6502_pushISRAfterPop_loop
  102 D1:B82D -  -  -  -      
  103 D1:B82D -  -  -  -  ;DE=ISRToPush, BC=CallWhenThisClockIsPassed
  104 D1:B82D -  -  -  -  ;This actually adds an entry to the stack.
  105 D1:B82D -  -  -  -  int6502_insertISA:
  106 D1:B82D DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
  107 D1:B832 DD 7E FF -      ld  a,(ix-1)
  108 D1:B835 B7 -  -  -      or  a,a
  109 D1:B836 28 C3 -  -      jr  z,int6502_pushISRAfterPop_writeFirstEntry
  110 D1:B838 FE 08 -  -      cp  a,INT_TABLE_MAXLEN
  111 D1:B83A C8 -  -  -      ret z       ;do not attempt to insert if table is maxed out
  112 D1:B83B C5 -  -  -      push bc
  113 D1:B83C 47 -  -  -          ld  b,a
  114 D1:B83D 0E 06 -  -          ld  c,INT_TABLE_STRIDE
  115 D1:B83F ED 4C -  -          mlt bc
  116 D1:B841 DD 09 -  -          add ix,bc   ;at end of table
  117 D1:B843 C1 -  -  -      pop bc
  118 D1:B844 -  -  -  -      ;Loop details. IX points at entry after last:
  119 D1:B844 -  -  -  -      ;if not loopCtr or ix[-1].T < BC:
  120 D1:B844 -  -  -  -      ;   ix[0] = DE,BC , STOP.
  121 D1:B844 -  -  -  -      ;else:
  122 D1:B844 -  -  -  -      ;   ix[0] = ix[-1], ix-=STRIDE, loopCtr--
  123 D1:B844 -  -  -  -  int6502_insertISA_Loop:
  124 D1:B844 B7 -  -  -      or  a,a
  125 D1:B845 28 B4 -  -      jr  z,int6502_pushISRAfterPop_writeFirstEntry
  126 D1:B847 DD 27 FD -      ld  hl,(ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE)
  127 D1:B84A ED 42 -  -      sbc hl,bc   ;C if ix[-1]<BC
  128 D1:B84C 30 AD -  -      jr  nc,int6502_pushISRAfterPop_writeFirstEntry
  129 D1:B84E DD 27 FA -      ld  hl,(ix+INT_ADDR_OFFSET-INT_TABLE_STRIDE)
  130 D1:B851 DD 2F 00 -      ld  (ix+INT_ADDR_OFFSET),hl
  131 D1:B854 DD 27 FD -      ld  hl,(ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE)
  132 D1:B857 DD 2F 03 -      ld  (ix+INT_CYCLE_OFFSET),hl
  133 D1:B85A ED 32 FA -      lea ix,ix-INT_TABLE_STRIDE
  134 D1:B85D 3D -  -  -      dec a
  135 D1:B85E 18 E4 -  -      jr int6502_insertISA_Loop
  136 D1:B860 -  -  -  -      
  137 D1:B860 -  -  -  -  
  138 D1:B860 -  -  -  -  int6502_removeTop:
  139 D1:B860 DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
  140 D1:B865 DD 7E FF -      ld  a,(ix-1)
  141 D1:B868 B7 -  -  -      or  a,a
  142 D1:B869 28 1B -  -      jr  z,+_
  143 D1:B86B DD 35 FF -      dec (ix-1)
  144 D1:B86E 4F -  -  -      ld  c,a
  145 D1:B86F 06 06 -  -      ld  b,INT_TABLE_STRIDE
  146 D1:B871 ED 4C -  -      mlt bc
  147 D1:B873 ED 32 06 -      lea ix,ix+INT_TABLE_STRIDE
  148 D1:B876 ED 12 FA -      lea de,ix-INT_TABLE_STRIDE
  149 D1:B879 ED 22 00 -      lea hl,ix+0
  150 D1:B87C ED B0 -  -      ldir
  151 D1:B87E D5 -  -  -      push de
  152 D1:B87F E1 -  -  -      pop hl
  153 D1:B880 13 -  -  -      inc de
  154 D1:B881 71 -  -  -      ld  (hl),c
  155 D1:B882 0E 05 -  -      ld  c,INT_TABLE_STRIDE-1
  156 D1:B884 ED B0 -  -      ldir
  157 D1:B886 DD 21 80 32 
              D0 -  -  -  _:  ld ix,core_memory_ix
  158 D1:B88B C3 A4 B7 D1     jp int6502_updateIntCounter
  159 D1:B88F -  -  -  -  
  160 D1:B88F -  -  -  -  
  161 D1:B88F -  -  -  -  
  162 D1:B88F -  -  -  -  
  163 D1:B88F -  -  -  -  
  164 D1:B88F -  -  -  -  
  165 D1:B88F -  -  -  -  
  166 D1:B88F -  -  -  -  
  167 D1:B88F -  -  -  -  
  168 D1:B88F -  -  -  -  
  169 D1:B88F -  -  -  -  
  170 D1:B88F -  -  -  -  
  171 D1:B88F -  -  -  -  
  172 D1:B88F -  -  -  -  
Listing for file "main.z80"
 1170 D1:B88F -  -  -  -  #include "core.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    1 D1:B88F -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    2 D1:B88F -  -  -  -  
    3 D1:B88F -  -  -  -  ;TODO: DEFINE MEMORY ACCESS MACROS. ONE OR MORE FOR READ AND WRITE.
    4 D1:B88F -  -  -  -  ;FIGURE OUT HOW TO GET BOTH HIGH AND LOW BYTE OF ORIGINAL ADDRESS
    5 D1:B88F -  -  -  -  ;AND PERFORM ALTERNATE ACTIONS BASED ON WHAT HARDWARE WAS ACCESSED.
    6 D1:B88F -  -  -  -  ;NOTE: PATTERN SHOWS THAT D=MSB, C=LSB OF 6502 ADDRESS. USE THIS.
    7 D1:B88F -  -  -  -  ;
    8 D1:B88F -  -  -  -  ;THESE MACROS ARE PLACEHOLDERS. CHANGE THEM LATER ON TO REFLECT ACTUAL
    9 D1:B88F -  -  -  -  ;HARDWARE SHENANIGANS.
   10 D1:B88F -  -  -  -  ;
   11 D1:B88F -  -  -  -  ;NOTE: WRITE ACCESSES RELY ON KNOWING WHAT DATA TO WRITE. CAN'T STORE THAT IN A
   12 D1:B88F -  -  -  -  ;      SINCE WE NEED TO DO CONDITIONING. REGISTER B IS UNUSED SO LET'S USE THAT.
   13 D1:B88F -  -  -  -  ;
   14 D1:B88F -  -  -  -  #define READ_ACCESS call mapper0_read
   15 D1:B88F -  -  -  -  #define WRITE_ACCESS call mapper0_write
   16 D1:B88F -  -  -  -  ;Later, put in actual test. Z if not triggered, NZ if triggered. This
   17 D1:B88F -  -  -  -  ;alters the behavior of the BRK instruction.
   18 D1:B88F -  -  -  -  #define WAS_NMI_TRIGGERED bit 0,(ix+NMI_TRIGGERED)
   19 D1:B88F -  -  -  -  
   20 D1:B88F -  -  -  -  #define OPRFLG_C res SF_CARRY,b \ jr nc,$+4 \ set SF_CARRY,b
   21 D1:B88F -  -  -  -  #define OPRFLG_V res SF_OVER,b \ jp po,$+6 \ set SF_OVER,b
   22 D1:B88F -  -  -  -  #define OPRFLG_Z res SF_ZERO,b \ jr nz,$+4 \ set SF_ZERO,b
   23 D1:B88F -  -  -  -  #define OPRFLG_N res SF_NEG,b \ jr nc,$+4 \ set SF_NEG,b
   24 D1:B88F -  -  -  -  
   25 D1:B88F -  -  -  -  #define FLAGS_ZN ld b,(ix+REGSR) \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   26 D1:B88F -  -  -  -  #define FLAGS_CZN ld b,(ix+REGSR) \ OPRFLG_C \ rlc a  \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   27 D1:B88F -  -  -  -  #define FLAGS_VCZN ld b,(ix+REGSR) \ OPRFLG_V \ OPRFLG_C \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   28 D1:B88F -  -  -  -  
   29 D1:B88F -  -  -  -  
   30 D1:B88F -  -  -  -  ;Modify later to include provisions for hardware i/o based on page
   31 D1:B88F -  -  -  -  #define HW_READ(src_reg) ld a,(src_reg)
   32 D1:B88F -  -  -  -  #define HW_WRITE(dst_reg) ld (dst_reg),a
   33 D1:B88F -  -  -  -  
   34 D1:B88F -  -  -  -  
   35 D1:B88F -  -  -  -  
   36 D1:B88F -  -  -  -  
   37 D1:B88F -  -  -  -  ;=============================================================================
   38 D1:B88F -  -  -  -  ;=============================================================================
   39 D1:B88F -  -  -  -  ;=============================================================================
   40 D1:B88F -  -  -  -  ;=============================================================================
   41 D1:B88F -  -  -  -  ;You should have set up the mappings already. This is because
   42 D1:B88F -  -  -  -  ;mappings are program-dependant. Only $0000-$3FFF will be mapped in here
   43 D1:B88F -  -  -  -  ;more or less because I don't expect anything else to map that.
   44 D1:B88F -  -  -  -  i6502Init:
   45 D1:B88F -  -  -  -      ;
   46 D1:B88F -  -  -  -      ; At this point, you may need to randomize 2048 bytes at main_ram
   47 D1:B88F -  -  -  -      ;
   48 D1:B88F 21 00 38 D0     ld  hl,main_ram
   49 D1:B893 01 08 20 00     ld  bc,$002008
   50 D1:B897 1E 00 -  -      ld  e,$00
   51 D1:B899 CD 9C B9 D1     call i6502_map_pages
   52 D1:B89D 21 00 33 D0     ld  hl,scrap_mapping
   53 D1:B8A1 01 01 20 00     ld  bc,$002001
   54 D1:B8A5 1E 20 -  -      ld  e,$20
   55 D1:B8A7 CD 9C B9 D1     call i6502_map_pages
   56 D1:B8AB CD 83 B9 D1     call i6502_load_instruction_set
   57 D1:B8AF -  -  -  -      ;
   58 D1:B8AF DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   59 D1:B8B4 FD 21 08 00 
              00 -  -  -      ld  iy,8    ;8 cycle startup. Hooking into inst6502_jsr for init
   60 D1:B8B9 ED 22 00 -      lea hl,ix
   61 D1:B8BC ED 12 01 -      lea de,ix+1
   62 D1:B8BF 01 7E 00 00     ld  bc,126
   63 D1:B8C3 36 00 -  -      ld  (hl),$00
   64 D1:B8C5 ED B0 -  -      ldir
   65 D1:B8C7 -  -  -  -      ;
   66 D1:B8C7 21 00 00 00     ld  hl,0
   67 D1:B8CB 39 -  -  -      add hl,sp
   68 D1:B8CC DD 2F 11 -      ld  (ix+CORE_STACK_BASE),hl
   69 D1:B8CF -  -  -  -      ;
   70 D1:B8CF DD 36 03 FD     ld  (ix+REGSP),$FD  ;init does a BRK-like action without the actual pushes.
   71 D1:B8D3 DD 36 04 24     ld  (ix+REGSR),$24  ;Presumably, this is what status register starts with?
   72 D1:B8D7 21 F4 4B D0     ld  hl,PAGETABLE+(255*BASETABLE_STRIDE)
   73 D1:B8DB ED 27 -  -      ld  hl,(hl)
   74 D1:B8DD 11 FC 00 00     ld  de,$0000FC
   75 D1:B8E1 19 -  -  -      add hl,de
   76 D1:B8E2 ED 27 -  -      ld  hl,(hl) ;get RST vector
   77 D1:B8E4 52 DD 2F 05     ld.s (ix+REGPC),hl
   78 D1:B8E8 -  -  -  -      ;-- debug stuff. Timer things.
   79 D1:B8E8 3A 30 00 F2     ld  a,($F20030)
   80 D1:B8EC CB C7 -  -      set 0,a ;turn on timer 1
   81 D1:B8EE 32 30 00 F2     ld  ($F20030),a
   82 D1:B8F2 -  -  -  -      ; Core initialized. Begin fetching instructions
   83 D1:B8F2 18 07 -  -      jr  i6502FirstLoad
   84 D1:B8F4 -  -  -  -  
   85 D1:B8F4 -  -  -  -  i6502RetryFirstLoad:    ;reentrant from ISR handler
   86 D1:B8F4 52 DD 17 05     ld.s de,(ix+REGPC)
   87 D1:B8F8 1B -  -  -      dec de
   88 D1:B8F9 18 04 -  -      jr +_
   89 D1:B8FB -  -  -  -  i6502FirstLoad:
   90 D1:B8FB 52 DD 17 05     ld.s de,(ix+REGPC)
   91 D1:B8FF 7B -  -  -  _:  ld  a,e
   92 D1:B900 1E 0C -  -      ld  e,BASETABLE_STRIDE
   93 D1:B902 ED 5C -  -      mlt de
   94 D1:B904 21 00 40 D0     ld  hl,PAGETABLE
   95 D1:B908 19 -  -  -      add hl,de
   96 D1:B909 ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
   97 D1:B90B 16 00 -  -      ld  d,0
   98 D1:B90D 5F -  -  -      ld  e,a
   99 D1:B90E 19 -  -  -      add hl,de       ;resolve final address
  100 D1:B90F 18 19 -  -      jr  i6502FinishLoad
  101 D1:B911 -  -  -  -  i6502NextLoad:
  102 D1:B911 23 -  -  -      inc hl
  103 D1:B912 1C -  -  -      inc e
  104 D1:B913 20 15 -  -      jr  nz,i6502FinishLoad
  105 D1:B915 DD 56 06 -      ld  d,(ix+REGPC+1)
  106 D1:B918 14 -  -  -      inc d
  107 D1:B919 52 DD 1F 05     ld.s (ix+REGPC),de
  108 D1:B91D 1E 0C -  -      ld  e,BASETABLE_STRIDE
  109 D1:B91F ED 5C -  -      mlt de
  110 D1:B921 21 00 40 D0     ld  hl,PAGETABLE
  111 D1:B925 19 -  -  -      add hl,de
  112 D1:B926 ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
  113 D1:B928 1E 00 -  -      ld  e,0         ;PCL known to be zero at this point.
  114 D1:B92A -  -  -  -  i6502FinishLoad:
  115 D1:B92A 7E -  -  -      ld  a,(hl)
  116 D1:B92B -  -  -  -  
  117 D1:B92B -  -  -  -  #ifdef COREDEBUG
  118 D1:B92B                 ld  (ix+CURRENT_OPCODES+0),a
  119 D1:B92B                 ld  (ix+REGPC+0),e
  120 D1:B92B             #endif
  121 D1:B92B 23 -  -  -      inc hl
  122 D1:B92C 1C -  -  -      inc e
  123 D1:B92D 20 15 -  -      jr  nz,i6502PrepNextPage
  124 D1:B92F DD 56 06 -      ld  d,(ix+REGPC+1)
  125 D1:B932 14 -  -  -      inc d
  126 D1:B933 52 DD 1F 05     ld.s (ix+REGPC),de
  127 D1:B937 1E 0C -  -      ld  e,BASETABLE_STRIDE
  128 D1:B939 ED 5C -  -      mlt de
  129 D1:B93B 21 00 40 D0     ld  hl,PAGETABLE
  130 D1:B93F 19 -  -  -      add hl,de
  131 D1:B940 ED 27 -  -      ld  hl,(hl)
  132 D1:B942 1E 00 -  -      ld  e,0
  133 D1:B944 -  -  -  -  i6502PrepNextPage:
  134 D1:B944 -  -  -  -  #ifdef COREDEBUG
  135 D1:B944                 push af
  136 D1:B944                     ld  a,(hl)
  137 D1:B944                     ld  (ix+CURRENT_OPCODES+1),a
  138 D1:B944                     push de
  139 D1:B944                         push hl
  140 D1:B944                             push ix
  141 D1:B944                                 inc hl
  142 D1:B944                                 inc e
  143 D1:B944                                 jr  nz,+_
  144 D1:B944                                 ld  d,(ix+REGPC+1)
  145 D1:B944                                 inc d
  146 D1:B944                                 ld  e,BASETABLE_STRIDE
  147 D1:B944                                 mlt de
  148 D1:B944                                 ld  hl,PAGETABLE
  149 D1:B944                                 add hl,de
  150 D1:B944                                 ld  hl,(hl)
  151 D1:B944             _:                  ld  a,(hl)
  152 D1:B944                                 ld  (ix+CURRENT_OPCODES+2),a
  153 D1:B944                                 lea hl,ix
  154 D1:B944                                 ld  de,core_memory_ix
  155 D1:B944                                 or  a,a
  156 D1:B944                                 sbc hl,de
  157 D1:B944                                 jr  nz,$    ;halt program if IX is not core_memory_ix
  158 D1:B944                                 ;jr $
  159 D1:B944                                 push iy
  160 D1:B944                                     call dbg_printLine
  161 D1:B944                                 pop iy
  162 D1:B944                                 ld  a,(ix+CORE_ERROR_LEVEL)
  163 D1:B944                                 or  a,a
  164 D1:B944                                 jr  z,+_
  165 D1:B944                                 ld  hl,(ix+CORE_STACK_BASE)
  166 D1:B944                                 ld  sp,hl
  167 D1:B944                                 ret
  168 D1:B944             _:                  ld  iy,(ix+CYCLES_CURRENT)  ;remove when done with timings
  169 D1:B944                                 lea hl,iy+0
  170 D1:B944                                 ld  de,DEBUG_STEP_START_CYCLE
  171 D1:B944                                 or  a,a
  172 D1:B944                                 sbc hl,de
  173 D1:B944                                 call nc,waituntilnewkeypress
  174 D1:B944                             pop ix
  175 D1:B944                         pop hl
  176 D1:B944                     pop de
  177 D1:B944                 pop af
  178 D1:B944             #endif
  179 D1:B944 E5 -  -  -      push hl
  180 D1:B945 F5 -  -  -          push af
  181 D1:B946 -  -  -  -              ;ld  a,(ix+PPU_FRAMECOUNT)
  182 D1:B946 -  -  -  -              ;or  a,a
  183 D1:B946 -  -  -  -              ;cp  a,$20
  184 D1:B946 -  -  -  -              ;jr  c,+_
  185 D1:B946 -  -  -  -              ;ld  bc,-25000
  186 D1:B946 -  -  -  -              ;lea hl,iy
  187 D1:B946 -  -  -  -              ;add hl,bc
  188 D1:B946 -  -  -  -              ;jr  c,$
  189 D1:B946 F1 -  -  -  _:      pop af
  190 D1:B947 ED 23 00 -          lea hl,iy
  191 D1:B94A -  -  -  -  i6502_interrupt_timer   .equ $+1
  192 D1:B94A 01 DD 92 FF         ld  bc,-27939
  193 D1:B94E 09 -  -  -          add hl,bc
  194 D1:B94F 38 1A -  -          jr  c,i6502_take_interrupt
  195 D1:B951 -  -  -  -  i6502_continue_instruction_fetch:
  196 D1:B951 67 -  -  -          ld  h,a
  197 D1:B952 2E 0C -  -          ld  l,BASETABLE_STRIDE
  198 D1:B954 ED 6C -  -          mlt hl
  199 D1:B956 01 04 40 D0         ld  bc,JUMPTABLE
  200 D1:B95A 09 -  -  -          add hl,bc
  201 D1:B95B ED 27 -  -          ld  hl,(hl)     ;jumptable
  202 D1:B95D E3 -  -  -          ex  (sp),hl     ;exch with exec addr, jumpto-via-ret
  203 D1:B95E C9 -  -  -      ret
  204 D1:B95F -  -  -  -  
  205 D1:B95F -  -  -  -  i6502_no_interrupts:
  206 D1:B95F -  -  -  -          ;This is what happens when you let the core run without setting
  207 D1:B95F -  -  -  -          ;up interrupts. It'll be up to the hardware access subroutines
  208 D1:B95F -  -  -  -          ;to configure interrupts from now on. See "coreint.z80" for
  209 D1:B95F -  -  -  -          ;more information
  210 D1:B95F 21 00 00 80         ld  hl,$800000  ;INT_MIN. Prevent retry for as long as possible.
  211 D1:B963 22 6B B9 D1         ld  (i6502_take_interrupt),hl
  212 D1:B967 C3 51 B9 D1         jp  i6502_continue_instruction_fetch
  213 D1:B96B -  -  -  -  
  214 D1:B96B -  -  -  -  i6502_take_interrupt:
  215 D1:B96B 29 -  -  -          add hl,hl   ;Check sign bit. Keep going if neg result. Fit inside timer
  216 D1:B96C DA 51 B9 D1         jp  c,i6502_continue_instruction_fetch
  217 D1:B970 67 -  -  -          ld  h,a
  218 D1:B971 3A 60 34 D0         ld  a,(int_table_len)
  219 D1:B975 B7 -  -  -          or  a,a
  220 D1:B976 7C -  -  -          ld  a,h
  221 D1:B977 28 E6 -  -          jr  z,i6502_no_interrupts
  222 D1:B979 E1 -  -  -      pop hl
  223 D1:B97A AF -  -  -      xor a,a
  224 D1:B97B DD 73 05 -      ld  (ix+REGPC+0),e
  225 D1:B97E 2A 61 34 D0     ld  hl,(INT_TABLE)  ;Find the routines in "coreint.z80" that handles
  226 D1:B982 E9 -  -  -      jp  (hl)            ;and maintains the interrupt table being used here.
  227 D1:B983 -  -  -  -  
  228 D1:B983 -  -  -  -  
  229 D1:B983 -  -  -  -  ;Instructions one byte wide returns to the main loop via:
  230 D1:B983 -  -  -  -  ;   JP i6502FinishLoad
  231 D1:B983 -  -  -  -  ;Those with parameters have HL at the address in quetion, and is expected to
  232 D1:B983 -  -  -  -  ;advance HL and E at the end of the instruction. You return to main loop via:
  233 D1:B983 -  -  -  -  ;   JP i6502NextLoad
  234 D1:B983 -  -  -  -  ;Unless you manually advance the pointer to the next instruction.
  235 D1:B983 -  -  -  -  ;You really shouldn't but if you must do that, then also do this:
  236 D1:B983 -  -  -  -  ;   JP i6502FinishLoad
  237 D1:B983 -  -  -  -  ;Remember that register E is very important; it tells you about page boundaries.
  238 D1:B983 -  -  -  -  
  239 D1:B983 -  -  -  -  
  240 D1:B983 -  -  -  -  ;-----------------------------------------------------------------------------
  241 D1:B983 -  -  -  -  ;-----------------------------------------------------------------------------
  242 D1:B983 -  -  -  -  ;-----------------------------------------------------------------------------
  243 D1:B983 -  -  -  -  
  244 D1:B983 -  -  -  -  ;  ***  *   * ****  ****   ***  *   * ***** ***** **  * *****  ***  
  245 D1:B983 -  -  -  -  ; *     *   * *   * *   * *   * *   *   *     *   **  * *     *     
  246 D1:B983 -  -  -  -  ;  ***  *   * ****  ****  *   * *   *   *     *   * * * ***    ***  
  247 D1:B983 -  -  -  -  ;     * *   * *   * *   * *   * *   *   *     *   *  ** *         * 
  248 D1:B983 -  -  -  -  ;  ***   ***  ****  *   *  ***   ***    *   ***** *  ** *****  ***  
  249 D1:B983 -  -  -  -  
  250 D1:B983 -  -  -  -  ;-----------------------------------------------------------------------------
  251 D1:B983 -  -  -  -  
  252 D1:B983 -  -  -  -  i6502_load_instruction_set:
  253 D1:B983 DD 21 04 40 
              D0 -  -  -      ld  ix,JUMPTABLE
  254 D1:B988 21 5C DD D1     ld  hl,inst6502_instruction_set
  255 D1:B98C 06 00 -  -      ld  b,0
  256 D1:B98E ED 17 -  -  _:  ld  de,(hl)
  257 D1:B990 DD 1F 00 -      ld  (ix+0),de
  258 D1:B993 23 -  -  -      inc hl
  259 D1:B994 23 -  -  -      inc hl
  260 D1:B995 23 -  -  -      inc hl
  261 D1:B996 ED 32 0C -      lea ix,ix+BASETABLE_STRIDE
  262 D1:B999 10 F3 -  -      djnz -_
  263 D1:B99B C9 -  -  -      ret
  264 D1:B99C -  -  -  -  
  265 D1:B99C -  -  -  -  ;HL=Base_ez80_address, C=Numpages_in_map, B=numpages_in_space, E=starting_page
  266 D1:B99C -  -  -  -  ;Example: To map and mirror 2KB RAM at $D03800 inside first 8KB of 6502 space
  267 D1:B99C -  -  -  -  ;HL=$D03800, C=$08, B=$20, E=$00
  268 D1:B99C -  -  -  -  ;Note: B should be a power of two and evenly divisible by C.
  269 D1:B99C -  -  -  -  i6502_map_pages:
  270 D1:B99C 16 0C -  -      ld  d,BASETABLE_STRIDE
  271 D1:B99E ED 5C -  -      mlt de
  272 D1:B9A0 DD 21 00 40 
              D0 -  -  -      ld  ix,PAGETABLE
  273 D1:B9A5 DD 19 -  -      add ix,de
  274 D1:B9A7 78 -  -  -      ld  a,b     ;A = main counter for total number of pages in mapping space
  275 D1:B9A8 11 00 01 00     ld  de,256
  276 D1:B9AC E5 -  -  -      push hl
  277 D1:B9AD FD E1 -  -      pop iy
  278 D1:B9AF 41 -  -  -  _:  ld  b,c     ;looping for number of pages to map
  279 D1:B9B0 DD 2F 00 -  _:  ld  (ix+0),hl
  280 D1:B9B3 19 -  -  -      add hl,de                   ;next page z80
  281 D1:B9B4 ED 32 0C -      lea ix,ix+BASETABLE_STRIDE  ;next page entry
  282 D1:B9B7 3D -  -  -      dec a
  283 D1:B9B8 C8 -  -  -      ret z
  284 D1:B9B9 10 F5 -  -      djnz -_
  285 D1:B9BB ED 23 00 -      lea hl,iy+0     ;start z80 pages over again for mirroring
  286 D1:B9BE 18 EF -  -      jr --_
  287 D1:B9C0 -  -  -  -  
  288 D1:B9C0 -  -  -  -  
  289 D1:B9C0 -  -  -  -  subroutine6502_abs_split_start:
  290 D1:B9C0 4E -  -  -      ld  c,(hl)
  291 D1:B9C1 23 -  -  -      inc hl
  292 D1:B9C2 1C -  -  -      inc e
  293 D1:B9C3 20 15 -  -      jr nz,+_
  294 D1:B9C5 DD 56 06 -      ld  d,(ix+REGPC+1)
  295 D1:B9C8 14 -  -  -      inc d
  296 D1:B9C9 52 DD 1F 05     ld.s (ix+REGPC),de
  297 D1:B9CD 1E 0C -  -      ld  e,BASETABLE_STRIDE
  298 D1:B9CF ED 5C -  -      mlt de
  299 D1:B9D1 21 00 40 D0     ld  hl,PAGETABLE
  300 D1:B9D5 19 -  -  -      add hl,de
  301 D1:B9D6 ED 27 -  -      ld  hl,(hl) ;
  302 D1:B9D8 1E 00 -  -      ld  e,0
  303 D1:B9DA 46 -  -  -  _:  ld  b,(hl)
  304 D1:B9DB C9 -  -  -      ret
  305 D1:B9DC -  -  -  -  
  306 D1:B9DC -  -  -  -  #define PUSH_ABSXSPLIT call subroutine6502_absx_split_start
  307 D1:B9DC -  -  -  -  #define PUSH_ABSXSPLIT_NODEP call subroutine6502_absx_ss_noDep
  308 D1:B9DC -  -  -  -  #define PUSH_ABSYSPLIT call subroutine6502_absy_split_start
  309 D1:B9DC -  -  -  -  #define PUSH_ABSYSPLIT_NODEP call subroutine6502_absy_ss_noDep
  310 D1:B9DC -  -  -  -  
  311 D1:B9DC -  -  -  -  subroutine6502_absy_split_start:
  312 D1:B9DC DD 4E 02 -      ld  c,(ix+REGY)
  313 D1:B9DF 18 03 -  -      jr +_
  314 D1:B9E1 -  -  -  -  
  315 D1:B9E1 -  -  -  -  subroutine6502_absx_split_start:
  316 D1:B9E1 DD 4E 01 -      ld  c,(ix+REGX)
  317 D1:B9E4 7E -  -  -  _:  ld  a,(hl)
  318 D1:B9E5 23 -  -  -      inc hl
  319 D1:B9E6 1C -  -  -      inc e
  320 D1:B9E7 20 15 -  -      jr nz,+_
  321 D1:B9E9 DD 56 06 -      ld  d,(ix+REGPC+1)
  322 D1:B9EC 14 -  -  -      inc d
  323 D1:B9ED 52 DD 1F 05     ld.s (ix+REGPC),de
  324 D1:B9F1 1E 0C -  -      ld  e,BASETABLE_STRIDE
  325 D1:B9F3 ED 5C -  -      mlt de
  326 D1:B9F5 21 00 40 D0     ld  hl,PAGETABLE
  327 D1:B9F9 19 -  -  -      add hl,de
  328 D1:B9FA ED 27 -  -      ld  hl,(hl) ;
  329 D1:B9FC 1E 00 -  -      ld  e,0
  330 D1:B9FE 46 -  -  -  _:  ld  b,(hl)
  331 D1:B9FF E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  332 D1:BA00 E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  333 D1:BA01 81 -  -  -          add a,c
  334 D1:BA02 30 03 -  -          jr  nc,+_
  335 D1:BA04 FD 23 -  -          ADDCYC(1)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  336 D1:BA06 04 -  -  -          inc b
  337 D1:BA07 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  338 D1:BA08 0E 0C -  -          ld  c,BASETABLE_STRIDE
  339 D1:BA0A ED 4C -  -          mlt bc
  340 D1:BA0C 21 00 40 D0         ld  hl,PAGETABLE
  341 D1:BA10 09 -  -  -          add hl,bc
  342 D1:BA11 ED 27 -  -          ld  hl,(hl)
  343 D1:BA13 06 00 -  -          ld  b,0
  344 D1:BA15 4F -  -  -          ld  c,a
  345 D1:BA16 09 -  -  -          add hl,bc
  346 D1:BA17 C9 -  -  -      ret
  347 D1:BA18 -  -  -  -      
  348 D1:BA18 -  -  -  -  subroutine6502_absy_ss_noDep:
  349 D1:BA18 DD 4E 02 -      ld  c,(ix+REGY)
  350 D1:BA1B 18 03 -  -      jr +_
  351 D1:BA1D -  -  -  -  subroutine6502_absx_ss_noDep:
  352 D1:BA1D DD 4E 01 -      ld  c,(ix+REGX)
  353 D1:BA20 7E -  -  -  _:  ld  a,(hl)
  354 D1:BA21 23 -  -  -      inc hl
  355 D1:BA22 1C -  -  -      inc e
  356 D1:BA23 20 15 -  -      jr nz,+_
  357 D1:BA25 DD 56 06 -      ld  d,(ix+REGPC+1)
  358 D1:BA28 14 -  -  -      inc d
  359 D1:BA29 52 DD 1F 05     ld.s (ix+REGPC),de
  360 D1:BA2D 1E 0C -  -      ld  e,BASETABLE_STRIDE
  361 D1:BA2F ED 5C -  -      mlt de
  362 D1:BA31 21 00 40 D0     ld  hl,PAGETABLE
  363 D1:BA35 19 -  -  -      add hl,de
  364 D1:BA36 ED 27 -  -      ld  hl,(hl) ;
  365 D1:BA38 1E 00 -  -      ld  e,0
  366 D1:BA3A 46 -  -  -  _:  ld  b,(hl)
  367 D1:BA3B E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  368 D1:BA3C E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  369 D1:BA3D 81 -  -  -          add a,c
  370 D1:BA3E 30 01 -  -          jr  nc,+_
  371 D1:BA40 04 -  -  -          inc b
  372 D1:BA41 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  373 D1:BA42 0E 0C -  -          ld  c,BASETABLE_STRIDE
  374 D1:BA44 ED 4C -  -          mlt bc
  375 D1:BA46 21 00 40 D0         ld  hl,PAGETABLE
  376 D1:BA4A 09 -  -  -          add hl,bc
  377 D1:BA4B ED 27 -  -          ld  hl,(hl)
  378 D1:BA4D 06 00 -  -          ld  b,0
  379 D1:BA4F 4F -  -  -          ld  c,a
  380 D1:BA50 09 -  -  -          add hl,bc
  381 D1:BA51 C9 -  -  -      ret
  382 D1:BA52 -  -  -  -  
  383 D1:BA52 -  -  -  -  
  384 D1:BA52 -  -  -  -  
  385 D1:BA52 -  -  -  -  
  386 D1:BA52 -  -  -  -  
  387 D1:BA52 -  -  -  -  
  388 D1:BA52 -  -  -  -  
  389 D1:BA52 -  -  -  -  subroutine6502_adc_combined_end:
  390 D1:BA52 DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  391 D1:BA55 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  392 D1:BA56 DD 7E 00 -      ld  a,(ix+REGA)
  393 D1:BA59 89 -  -  -      adc a,c
  394 D1:BA5A DD 77 00 -      ld  (ix+REGA),a
  395 D1:BA5D DD 46 04 CB 
              B0 E2 68 BA 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  396 D1:BA7F C3 11 B9 D1     jp i6502NextLoad
  397 D1:BA83 -  -  -  -  
  398 D1:BA83 -  -  -  -  subroutine6502_sbc_combined_end:
  399 D1:BA83 DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  400 D1:BA86 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  401 D1:BA87 DD 7E 00 -      ld  a,(ix+REGA)
  402 D1:BA8A 3F -  -  -      ccf
  403 D1:BA8B 99 -  -  -      sbc a,c
  404 D1:BA8C 3F -  -  -      ccf
  405 D1:BA8D DD 77 00 -      ld  (ix+REGA),a
  406 D1:BA90 DD 46 04 CB 
              B0 E2 9B BA 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  407 D1:BAB2 C3 11 B9 D1     jp i6502NextLoad
  408 D1:BAB6 -  -  -  -  
  409 D1:BAB6 -  -  -  -  subroutine6502_cmp_combined_end:
  410 D1:BAB6 DD 7E 00 -      ld  a,(ix+REGA)
  411 D1:BAB9 90 -  -  -      sub a,b
  412 D1:BABA 3F -  -  -      ccf     ;because the 6502 is strange like that.
  413 D1:BABB DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  414 D1:BAD5 C3 11 B9 D1     jp i6502NextLoad
  415 D1:BAD9 -  -  -  -  
  416 D1:BAD9 -  -  -  -  subroutine6502_take_branch:
  417 D1:BAD9 FD 23 -  -      ADDCYC(1)
  418 D1:BADB 7E -  -  -      ld  a,(hl)  ;offset byte
  419 D1:BADC 6F -  -  -      ld  L,a
  420 D1:BADD 87 -  -  -      add a,a
  421 D1:BADE 9F -  -  -      sbc a,a
  422 D1:BADF 67 -  -  -      ld  H,a     ;sign-extending offset byte
  423 D1:BAE0 DD 56 06 -      ld  d,(ix+REGPC+1)
  424 D1:BAE3 13 -  -  -      inc de
  425 D1:BAE4 52 19 -  -      add.s hl,de
  426 D1:BAE6 7C -  -  -      ld  a,h
  427 D1:BAE7 BA -  -  -      cp  d       ;is high byte the same?
  428 D1:BAE8 28 02 -  -      jr  z,+_    ;if so, do not add another clock
  429 D1:BAEA FD 23 -  -      ADDCYC(1)
  430 D1:BAEC 52 DD 2F 05 _:  ld.s (ix+REGPC),hl
  431 D1:BAF0 C3 FB B8 D1     jp  i6502FirstLoad
  432 D1:BAF4 -  -  -  -  
  433 D1:BAF4 -  -  -  -  subroutine6502_take_branch_waitloop_detect:
  434 D1:BAF4 7E -  -  -      ld  a,(hl)      ;offset byte
  435 D1:BAF5 4F -  -  -      ld  c,a         ;keep that offset byte for now. We'll need it later.
  436 D1:BAF6 6F -  -  -      ld  l,a
  437 D1:BAF7 87 -  -  -      add a,a
  438 D1:BAF8 9F -  -  -      sbc a,a
  439 D1:BAF9 67 -  -  -      ld  h,a         ;sign-extend into HL
  440 D1:BAFA DD 56 06 -      ld  d,(ix+REGPC+1)
  441 D1:BAFD 13 -  -  -      inc de
  442 D1:BAFE 19 -  -  -      add hl,de           ;HLU unimportant for any further checks
  443 D1:BAFF 52 DD 2F 05     ld.s (ix+REGPC),hl  ;since we aren't going to store it anyway
  444 D1:BB03 5C -  -  -      ld  e,h             ;D=newMSB, E=oldMSB
  445 D1:BB04 -  -  -  -      ;Now we have to check the instruction we landed on to see 
  446 D1:BB04 79 -  -  -      ld  a,c             ;Check offset byte if in range for waitloop things
  447 D1:BB05 FE FC -  -      cp  a,-2-2          ;-2 to reach back to itself, and -2 for the inst before
  448 D1:BB07 28 0C -  -      jr  z,subroutine6502_tbwd_2bcheck
  449 D1:BB09 -  -  -  -      ;insert other offset-based checks here
  450 D1:BB09 -  -  -  -  subroutine6502_tbwd_check_failed:
  451 D1:BB09 FD 23 -  -      ADDCYC(1)
  452 D1:BB0B 7B -  -  -      ld  a,e
  453 D1:BB0C BA -  -  -      cp  a,d     ;Check if high byte changed. If so, it's a page crossing.
  454 D1:BB0D 28 02 -  -      jr  z,+_
  455 D1:BB0F FD 23 -  -      ADDCYC(1)
  456 D1:BB11 C3 FB B8 D1 _:  jp  i6502FirstLoad
  457 D1:BB15 -  -  -  -  ;Note: By the time we're checking for waitloop status, the jump's already
  458 D1:BB15 -  -  -  -  ;been recorded for next execution. Thus, when the next interrupt occurs,
  459 D1:BB15 -  -  -  -  ;that instruction will be retried and the loop will fall through, preventing
  460 D1:BB15 -  -  -  -  ;the sort of lockup that would've needed additional flags to handle.
  461 D1:BB15 -  -  -  -  subroutine6502_tbwd_2bcheck:
  462 D1:BB15 ED 33 FE -      lea iy,iy-2     ;undo the first addcyc
  463 D1:BB18 7D -  -  -      ld  a,L         ;preserve LSB for later thingies.
  464 D1:BB19 44 -  -  -      ld  b,h
  465 D1:BB1A 0E 0C -  -      ld  c,BASETABLE_STRIDE
  466 D1:BB1C ED 4C -  -      mlt bc
  467 D1:BB1E 21 00 40 D0     ld  hl,PAGETABLE
  468 D1:BB22 09 -  -  -      add hl,bc
  469 D1:BB23 ED 27 -  -      ld  hl,(hl)
  470 D1:BB25 06 00 -  -      ld  b,0
  471 D1:BB27 4F -  -  -      ld  c,a
  472 D1:BB28 09 -  -  -      add hl,bc       ;Address to prior instruction reconstructed.
  473 D1:BB29 7E -  -  -      ld  a,(hl)
  474 D1:BB2A FE C5 -  -      cp  a,$C5       ;CMP_ZP, seen in Nestest
  475 D1:BB2C 28 02 -  -      jr  z,subroutine6502_tbwd_waitloop
  476 D1:BB2E 18 D9 -  -      jr  subroutine6502_tbwd_check_failed
  477 D1:BB30 -  -  -  -  
  478 D1:BB30 -  -  -  -  subroutine6502_tbwd_waitloop:
  479 D1:BB30 -  -  -  -  ;I don't particularly care about timing consistency here. 3 or more ccs per
  480 D1:BB30 -  -  -  -  ;iteration, I'll fix that later if it ever truly becomes a problem.
  481 D1:BB30 C3 1F D0 D1     jp  inst6052_jmp_abs_inf_loop   
  482 D1:BB34 -  -  -  -  
  483 D1:BB34 -  -  -  -  ;-----------------------------------------------------------------------------
  484 D1:BB34 -  -  -  -  
  485 D1:BB34 -  -  -  -  ; *** **  *  *** ***** ***  *   *  *** ***** *** ***  **  *     ***  ***** *****                                                
  486 D1:BB34 -  -  -  -  ;  *  **  * *      *   *  * *   * *      *    * *   * **  *    *     *       *                   
  487 D1:BB34 -  -  -  -  ;  *  * * *  ***   *   ***  *   * *      *    * *   * * * *     ***  ***     *                          
  488 D1:BB34 -  -  -  -  ;  *  *  **     *  *   *  * *   * *      *    * *   * *  **        * *       *                   
  489 D1:BB34 -  -  -  -  ; *** *  **  ***   *   *  *  ***   ***   *   *** ***  *  **     ***  *****   *                                 
  490 D1:BB34 -  -  -  -  
  491 D1:BB34 -  -  -  -  ;-----------------------------------------------------------------------------
  492 D1:BB34 -  -  -  -  
  493 D1:BB34 -  -  -  -  ;-----------------------------------------------------------------------------
  494 D1:BB34 -  -  -  -  ;-----------------------------------------------------------------------------
  495 D1:BB34 -  -  -  -  ;-----------------------------------------------------------------------------
  496 D1:BB34 -  -  -  -  ;Instructions by type: Transfer Instructions
  497 D1:BB34 -  -  -  -  ;LDA - Load Accumulator with Memory
  498 D1:BB34 -  -  -  -  ;    M -> A
  499 D1:BB34 -  -  -  -  ;    N	Z	C	I	D	V
  500 D1:BB34 -  -  -  -  ;    +	+	-	-	-	-
  501 D1:BB34 -  -  -  -  
  502 D1:BB34 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
  503 D1:BB34 -  -  -  -  ;immediate	LDA #oper	A9	2	2
  504 D1:BB34 -  -  -  -  inst6502_lda_imm:
  505 D1:BB34 7E -  -  -      ld  a,(hl)
  506 D1:BB35 DD 77 00 -      ld  (ix+REGA),a
  507 D1:BB38 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  508 D1:BB4C ED 33 02 -      ADDCYC(2)
  509 D1:BB4F C3 11 B9 D1     jp i6502NextLoad
  510 D1:BB53 -  -  -  -  
  511 D1:BB53 -  -  -  -  ;zeropage	LDA oper	A5	2	3
  512 D1:BB53 -  -  -  -  inst6502_lda_zp:
  513 D1:BB53 7E -  -  -      ld  a,(hl)
  514 D1:BB54 01 00 38 D0     ld  bc,ZEROPAGE
  515 D1:BB58 81 -  -  -      add a,c
  516 D1:BB59 4F -  -  -      ld  c,a
  517 D1:BB5A 0A -  -  -      ld  a,(bc)
  518 D1:BB5B DD 77 00 -      ld  (ix+REGA),a
  519 D1:BB5E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  520 D1:BB72 ED 33 03 -      ADDCYC(3)
  521 D1:BB75 C3 11 B9 D1     jp i6502NextLoad
  522 D1:BB79 -  -  -  -  
  523 D1:BB79 -  -  -  -  ;zeropage,X	LDA oper,X	B5	2	4 
  524 D1:BB79 -  -  -  -  inst6502_lda_zpx:
  525 D1:BB79 7E -  -  -      ld  a,(hl)
  526 D1:BB7A 01 00 38 D0     ld  bc,ZEROPAGE
  527 D1:BB7E 81 -  -  -      add a,c
  528 D1:BB7F DD 86 01 -      add a,(ix+REGX)
  529 D1:BB82 4F -  -  -      ld  c,a
  530 D1:BB83 0A -  -  -      ld  a,(bc)
  531 D1:BB84 DD 77 00 -      ld  (ix+REGA),a
  532 D1:BB87 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  533 D1:BB9B ED 33 04 -      ADDCYC(4)
  534 D1:BB9E C3 11 B9 D1     jp i6502NextLoad
  535 D1:BBA2 -  -  -  -  
  536 D1:BBA2 -  -  -  -  ;absolute	LDA oper	AD	3	4
  537 D1:BBA2 -  -  -  -  inst6502_lda_abs:
  538 D1:BBA2 CD C0 B9 D1     call subroutine6502_abs_split_start
  539 D1:BBA6 E5 -  -  -      push hl
  540 D1:BBA7 50 -  -  -          ld  d,b
  541 D1:BBA8 79 -  -  -          ld  a,c
  542 D1:BBA9 0E 0C -  -          ld  c,BASETABLE_STRIDE
  543 D1:BBAB ED 4C -  -          mlt bc
  544 D1:BBAD 21 00 40 D0         ld  hl,PAGETABLE
  545 D1:BBB1 09 -  -  -          add hl,bc
  546 D1:BBB2 ED 27 -  -          ld  hl,(hl)
  547 D1:BBB4 06 00 -  -          ld  b,0
  548 D1:BBB6 4F -  -  -          ld  c,a
  549 D1:BBB7 09 -  -  -          add hl,bc   ;full address
  550 D1:BBB8 CD 68 B0 D1         READ_ACCESS
  551 D1:BBBC DD 77 00 -          ld (ix+REGA),a
  552 D1:BBBF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  553 D1:BBD3 ED 33 04 -          ADDCYC(4)
  554 D1:BBD6 E1 -  -  -      pop hl
  555 D1:BBD7 C3 11 B9 D1     jp i6502NextLoad
  556 D1:BBDB -  -  -  -  
  557 D1:BBDB -  -  -  -  ;absolute,X	LDA oper,X	BD	3	4* 
  558 D1:BBDB -  -  -  -  inst6502_lda_absx:
  559 D1:BBDB ED 33 04 -      ADDCYC(4)
  560 D1:BBDE CD E1 B9 D1     PUSH_ABSXSPLIT
  561 D1:BBE2 CD 68 B0 D1         READ_ACCESS
  562 D1:BBE6 DD 77 00 -          ld (ix+REGA),a
  563 D1:BBE9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  564 D1:BBFD E1 -  -  -      pop hl
  565 D1:BBFE C3 11 B9 D1     jp i6502NextLoad
  566 D1:BC02 -  -  -  -  
  567 D1:BC02 -  -  -  -  ;absolute,Y	LDA oper,Y	B9	3	4* 
  568 D1:BC02 -  -  -  -  inst6502_lda_absy:
  569 D1:BC02 ED 33 04 -      ADDCYC(4)
  570 D1:BC05 CD DC B9 D1     PUSH_ABSYSPLIT
  571 D1:BC09 CD 68 B0 D1         READ_ACCESS
  572 D1:BC0D DD 77 00 -          ld (ix+REGA),a
  573 D1:BC10 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  574 D1:BC24 E1 -  -  -      pop hl
  575 D1:BC25 C3 11 B9 D1     jp i6502NextLoad
  576 D1:BC29 -  -  -  -  
  577 D1:BC29 -  -  -  -  ;(indirect,X)	LDA (oper,X)	A1	2	6
  578 D1:BC29 -  -  -  -  inst6502_lda_indx:
  579 D1:BC29 E5 -  -  -      push hl
  580 D1:BC2A 7E -  -  -          ld  a,(hl)
  581 D1:BC2B 21 00 38 D0         ld  hl,ZEROPAGE
  582 D1:BC2F 85 -  -  -          add a,L
  583 D1:BC30 DD 86 01 -          add a,(ix+REGX)
  584 D1:BC33 6F -  -  -          ld  L,a
  585 D1:BC34 7E -  -  -          ld  a,(hl)
  586 D1:BC35 2C -  -  -          inc L
  587 D1:BC36 56 -  -  -          ld  d,(hl)
  588 D1:BC37 42 -  -  -          ld  b,d
  589 D1:BC38 0E 0C -  -          ld  c,BASETABLE_STRIDE
  590 D1:BC3A ED 4C -  -          mlt bc
  591 D1:BC3C 21 00 40 D0         ld  hl,PAGETABLE
  592 D1:BC40 09 -  -  -          add hl,bc
  593 D1:BC41 ED 27 -  -          ld  hl,(hl)
  594 D1:BC43 06 00 -  -          ld  b,0
  595 D1:BC45 4F -  -  -          ld  c,a
  596 D1:BC46 09 -  -  -          add hl,bc
  597 D1:BC47 CD 68 B0 D1         READ_ACCESS
  598 D1:BC4B DD 77 00 -          ld (ix+REGA),a
  599 D1:BC4E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  600 D1:BC62 ED 33 06 -          ADDCYC(6)
  601 D1:BC65 E1 -  -  -      pop hl
  602 D1:BC66 C3 11 B9 D1     jp i6502NextLoad
  603 D1:BC6A -  -  -  -  
  604 D1:BC6A -  -  -  -  ;(indirect),Y	LDA (oper),Y	B1	2	5*
  605 D1:BC6A -  -  -  -  inst6502_lda_indy:
  606 D1:BC6A E5 -  -  -      push hl
  607 D1:BC6B 7E -  -  -          ld  a,(hl)
  608 D1:BC6C 21 00 38 D0         ld  hl,ZEROPAGE
  609 D1:BC70 85 -  -  -          add a,L
  610 D1:BC71 6F -  -  -          ld  L,a
  611 D1:BC72 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  612 D1:BC73 2C -  -  -          inc L
  613 D1:BC74 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  614 D1:BC77 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  615 D1:BC78 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  616 D1:BC7A FD 23 -  -          ADDCYC(1)
  617 D1:BC7C 24 -  -  -          inc h
  618 D1:BC7D 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  619 D1:BC7E 2E 0C -  -          ld  L,BASETABLE_STRIDE
  620 D1:BC80 ED 6C -  -          mlt hl          ;23.
  621 D1:BC82 01 00 40 D0         ld  bc,PAGETABLE
  622 D1:BC86 09 -  -  -          add hl,bc
  623 D1:BC87 ED 27 -  -          ld  hl,(hl)     ;address get.
  624 D1:BC89 01 00 00 00         ld  bc,0
  625 D1:BC8D 4F -  -  -          ld  c,a
  626 D1:BC8E 09 -  -  -          add hl,bc       ;Full address get.
  627 D1:BC8F CD 68 B0 D1         READ_ACCESS
  628 D1:BC93 DD 77 00 -          ld  (ix+REGA),a
  629 D1:BC96 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  630 D1:BCAA ED 33 05 -          ADDCYC(5)
  631 D1:BCAD E1 -  -  -      pop hl
  632 D1:BCAE C3 11 B9 D1     jp i6502NextLoad
  633 D1:BCB2 -  -  -  -  
  634 D1:BCB2 -  -  -  -  ;-----------------------------------------------------------------------------
  635 D1:BCB2 -  -  -  -  ;LDX - Load Index X with Memory
  636 D1:BCB2 -  -  -  -  ;    M -> X
  637 D1:BCB2 -  -  -  -  ;    N	Z	C	I	D	V
  638 D1:BCB2 -  -  -  -  ;    +	+	-	-	-	-
  639 D1:BCB2 -  -  -  -  
  640 D1:BCB2 -  -  -  -  ;immediate	LDX #oper	A2	2	2  
  641 D1:BCB2 -  -  -  -  inst6502_ldx_imm:
  642 D1:BCB2 7E -  -  -      ld  a,(hl)
  643 D1:BCB3 DD 77 01 -      ld  (ix+REGX),a
  644 D1:BCB6 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  645 D1:BCCA ED 33 02 -      ADDCYC(2)
  646 D1:BCCD C3 11 B9 D1     jp i6502NextLoad
  647 D1:BCD1 -  -  -  -  
  648 D1:BCD1 -  -  -  -  ;zeropage	LDX oper	A6	2	3 
  649 D1:BCD1 -  -  -  -  inst6502_ldx_zp:
  650 D1:BCD1 7E -  -  -      ld  a,(hl)
  651 D1:BCD2 01 00 38 D0     ld  bc,ZEROPAGE
  652 D1:BCD6 81 -  -  -      add a,c
  653 D1:BCD7 4F -  -  -      ld  c,a
  654 D1:BCD8 0A -  -  -      ld  a,(bc)
  655 D1:BCD9 DD 77 01 -      ld  (ix+REGX),a
  656 D1:BCDC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  657 D1:BCF0 ED 33 03 -      ADDCYC(3)
  658 D1:BCF3 C3 11 B9 D1     jp i6502NextLoad
  659 D1:BCF7 -  -  -  -  
  660 D1:BCF7 -  -  -  -  ;zeropage,Y	LDX oper,Y	B6	2	4  
  661 D1:BCF7 -  -  -  -  inst6502_ldx_zpy:
  662 D1:BCF7 7E -  -  -      ld  a,(hl)
  663 D1:BCF8 01 00 38 D0     ld  bc,ZEROPAGE
  664 D1:BCFC 81 -  -  -      add a,c
  665 D1:BCFD DD 86 02 -      add a,(ix+REGY)
  666 D1:BD00 4F -  -  -      ld  c,a
  667 D1:BD01 0A -  -  -      ld  a,(bc)
  668 D1:BD02 DD 77 01 -      ld  (ix+REGX),a
  669 D1:BD05 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  670 D1:BD19 ED 33 04 -      ADDCYC(4)
  671 D1:BD1C C3 11 B9 D1     jp i6502NextLoad
  672 D1:BD20 -  -  -  -  
  673 D1:BD20 -  -  -  -  ;absolute	LDX oper	AE	3	4  
  674 D1:BD20 -  -  -  -  inst6502_ldx_abs:
  675 D1:BD20 CD C0 B9 D1     call subroutine6502_abs_split_start
  676 D1:BD24 E5 -  -  -      push hl
  677 D1:BD25 50 -  -  -          ld  d,b
  678 D1:BD26 79 -  -  -          ld  a,c
  679 D1:BD27 0E 0C -  -          ld  c,BASETABLE_STRIDE
  680 D1:BD29 ED 4C -  -          mlt bc
  681 D1:BD2B 21 00 40 D0         ld  hl,PAGETABLE
  682 D1:BD2F 09 -  -  -          add hl,bc
  683 D1:BD30 ED 27 -  -          ld  hl,(hl)
  684 D1:BD32 06 00 -  -          ld  b,0
  685 D1:BD34 4F -  -  -          ld  c,a
  686 D1:BD35 09 -  -  -          add hl,bc   ;full address
  687 D1:BD36 CD 68 B0 D1         READ_ACCESS
  688 D1:BD3A DD 77 01 -          ld (ix+REGX),a
  689 D1:BD3D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  690 D1:BD51 ED 33 04 -          ADDCYC(4)
  691 D1:BD54 E1 -  -  -      pop hl
  692 D1:BD55 C3 11 B9 D1     jp i6502NextLoad
  693 D1:BD59 -  -  -  -  
  694 D1:BD59 -  -  -  -  ;absolute,Y	LDX oper,Y	BE	3	4* 
  695 D1:BD59 -  -  -  -  inst6502_ldx_absy:
  696 D1:BD59 ED 33 04 -      ADDCYC(4)
  697 D1:BD5C CD DC B9 D1     PUSH_ABSYSPLIT
  698 D1:BD60 CD 68 B0 D1         READ_ACCESS
  699 D1:BD64 DD 77 01 -          ld (ix+REGX),a
  700 D1:BD67 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  701 D1:BD7B E1 -  -  -      pop hl
  702 D1:BD7C C3 11 B9 D1     jp i6502NextLoad
  703 D1:BD80 -  -  -  -  
  704 D1:BD80 -  -  -  -  ;-----------------------------------------------------------------------------
  705 D1:BD80 -  -  -  -  ;LDY -  Load Index Y with Memory
  706 D1:BD80 -  -  -  -  ;    M -> Y
  707 D1:BD80 -  -  -  -  ;    N	Z	C	I	D	V
  708 D1:BD80 -  -  -  -  ;    +	+	-	-	-	-
  709 D1:BD80 -  -  -  -  
  710 D1:BD80 -  -  -  -  ;immediate	LDY #oper	A0	2	2  
  711 D1:BD80 -  -  -  -  inst6502_ldy_imm:
  712 D1:BD80 7E -  -  -      ld  a,(hl)
  713 D1:BD81 DD 77 02 -      ld  (ix+REGY),a
  714 D1:BD84 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  715 D1:BD98 ED 33 02 -      ADDCYC(2)
  716 D1:BD9B C3 11 B9 D1     jp i6502NextLoad
  717 D1:BD9F -  -  -  -  
  718 D1:BD9F -  -  -  -  ;zeropage	LDY oper	A4	2	3  
  719 D1:BD9F -  -  -  -  inst6502_ldy_zp:
  720 D1:BD9F 7E -  -  -      ld  a,(hl)
  721 D1:BDA0 01 00 38 D0     ld  bc,ZEROPAGE
  722 D1:BDA4 81 -  -  -      add a,c
  723 D1:BDA5 4F -  -  -      ld  c,a
  724 D1:BDA6 0A -  -  -      ld  a,(bc)
  725 D1:BDA7 DD 77 02 -      ld  (ix+REGY),a
  726 D1:BDAA DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  727 D1:BDBE ED 33 03 -      ADDCYC(3)
  728 D1:BDC1 C3 11 B9 D1     jp i6502NextLoad
  729 D1:BDC5 -  -  -  -  
  730 D1:BDC5 -  -  -  -  ;zeropage,X	LDY oper,X	B4	2	4  
  731 D1:BDC5 -  -  -  -  inst6502_ldy_zpx:
  732 D1:BDC5 7E -  -  -      ld  a,(hl)
  733 D1:BDC6 01 00 38 D0     ld  bc,ZEROPAGE
  734 D1:BDCA 81 -  -  -      add a,c
  735 D1:BDCB DD 86 01 -      add a,(ix+REGX)
  736 D1:BDCE 4F -  -  -      ld  c,a
  737 D1:BDCF 0A -  -  -      ld  a,(bc)
  738 D1:BDD0 DD 77 02 -      ld  (ix+REGY),a
  739 D1:BDD3 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  740 D1:BDE7 ED 33 04 -      ADDCYC(4)
  741 D1:BDEA C3 11 B9 D1     jp i6502NextLoad
  742 D1:BDEE -  -  -  -  
  743 D1:BDEE -  -  -  -  ;absolute	LDY oper	AC	3	4  
  744 D1:BDEE -  -  -  -  inst6502_ldy_abs:
  745 D1:BDEE CD C0 B9 D1     call subroutine6502_abs_split_start
  746 D1:BDF2 E5 -  -  -      push hl
  747 D1:BDF3 50 -  -  -          ld  d,b
  748 D1:BDF4 79 -  -  -          ld  a,c
  749 D1:BDF5 0E 0C -  -          ld  c,BASETABLE_STRIDE
  750 D1:BDF7 ED 4C -  -          mlt bc
  751 D1:BDF9 21 00 40 D0         ld  hl,PAGETABLE
  752 D1:BDFD 09 -  -  -          add hl,bc
  753 D1:BDFE ED 27 -  -          ld  hl,(hl)
  754 D1:BE00 06 00 -  -          ld  b,0
  755 D1:BE02 4F -  -  -          ld  c,a
  756 D1:BE03 09 -  -  -          add hl,bc   ;full address
  757 D1:BE04 CD 68 B0 D1         READ_ACCESS
  758 D1:BE08 DD 77 02 -          ld (ix+REGY),a
  759 D1:BE0B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  760 D1:BE1F ED 33 04 -          ADDCYC(4)
  761 D1:BE22 E1 -  -  -      pop hl
  762 D1:BE23 C3 11 B9 D1     jp i6502NextLoad
  763 D1:BE27 -  -  -  -  
  764 D1:BE27 -  -  -  -  ;absolute,X	LDY oper,X	BC	3	4* 
  765 D1:BE27 -  -  -  -  inst6502_ldy_absx:
  766 D1:BE27 ED 33 04 -      ADDCYC(4)
  767 D1:BE2A CD E1 B9 D1     PUSH_ABSXSPLIT
  768 D1:BE2E CD 68 B0 D1         READ_ACCESS
  769 D1:BE32 DD 77 02 -          ld (ix+REGY),a
  770 D1:BE35 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  771 D1:BE49 E1 -  -  -      pop hl
  772 D1:BE4A C3 11 B9 D1     jp i6502NextLoad
  773 D1:BE4E -  -  -  -  
  774 D1:BE4E -  -  -  -  ;-----------------------------------------------------------------------------
  775 D1:BE4E -  -  -  -  ;STA - Store Accumulator in Memory
  776 D1:BE4E -  -  -  -  ;    A -> M
  777 D1:BE4E -  -  -  -  ;    N	Z	C	I	D	V
  778 D1:BE4E -  -  -  -  ;    -	-	-	-	-	-
  779 D1:BE4E -  -  -  -  
  780 D1:BE4E -  -  -  -  ;zeropage	STA oper	85	2	3  
  781 D1:BE4E -  -  -  -  inst6502_sta_zp:
  782 D1:BE4E 7E -  -  -      ld  a,(hl)
  783 D1:BE4F 01 00 38 D0     ld  bc,ZEROPAGE
  784 D1:BE53 81 -  -  -      add a,c
  785 D1:BE54 4F -  -  -      ld  c,a
  786 D1:BE55 DD 7E 00 -      ld  a,(ix+REGA)
  787 D1:BE58 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  788 D1:BE59 ED 33 03 -      ADDCYC(3)
  789 D1:BE5C C3 11 B9 D1     jp i6502NextLoad
  790 D1:BE60 -  -  -  -  
  791 D1:BE60 -  -  -  -  ;zeropage,X	STA oper,X	95	2	4  
  792 D1:BE60 -  -  -  -  inst6502_sta_zpx:
  793 D1:BE60 7E -  -  -      ld  a,(hl)
  794 D1:BE61 01 00 38 D0     ld  bc,ZEROPAGE
  795 D1:BE65 81 -  -  -      add a,c
  796 D1:BE66 DD 86 01 -      add a,(ix+REGX)
  797 D1:BE69 4F -  -  -      ld  c,a
  798 D1:BE6A DD 7E 00 -      ld  a,(ix+REGA)
  799 D1:BE6D 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  800 D1:BE6E ED 33 04 -      ADDCYC(4)
  801 D1:BE71 C3 11 B9 D1     jp i6502NextLoad
  802 D1:BE75 -  -  -  -  
  803 D1:BE75 -  -  -  -  ;absolute	STA oper	8D	3	4
  804 D1:BE75 -  -  -  -  inst6502_sta_abs:
  805 D1:BE75 CD C0 B9 D1     call subroutine6502_abs_split_start
  806 D1:BE79 E5 -  -  -      push hl
  807 D1:BE7A 50 -  -  -          ld  d,b
  808 D1:BE7B 79 -  -  -          ld  a,c
  809 D1:BE7C 0E 0C -  -          ld  c,BASETABLE_STRIDE
  810 D1:BE7E ED 4C -  -          mlt bc
  811 D1:BE80 21 00 40 D0         ld  hl,PAGETABLE
  812 D1:BE84 09 -  -  -          add hl,bc
  813 D1:BE85 ED 27 -  -          ld  hl,(hl)
  814 D1:BE87 06 00 -  -          ld  b,0
  815 D1:BE89 4F -  -  -          ld  c,a
  816 D1:BE8A 09 -  -  -          add hl,bc   ;full address
  817 D1:BE8B DD 46 00 -          ld  b,(ix+REGA)
  818 D1:BE8E CD 10 B1 D1         WRITE_ACCESS
  819 D1:BE92 ED 33 04 -          ADDCYC(4)
  820 D1:BE95 E1 -  -  -      pop hl
  821 D1:BE96 C3 11 B9 D1     jp i6502NextLoad
  822 D1:BE9A -  -  -  -  
  823 D1:BE9A -  -  -  -  ;absolute,X	STA oper,X	9D	3	5  
  824 D1:BE9A -  -  -  -  inst6502_sta_absx:
  825 D1:BE9A ED 33 05 -      ADDCYC(5)
  826 D1:BE9D CD 1D BA D1     PUSH_ABSXSPLIT_NODEP
  827 D1:BEA1 DD 46 00 -          ld  b,(ix+REGA)
  828 D1:BEA4 CD 10 B1 D1         WRITE_ACCESS
  829 D1:BEA8 E1 -  -  -      pop hl
  830 D1:BEA9 C3 11 B9 D1     jp i6502NextLoad
  831 D1:BEAD -  -  -  -  
  832 D1:BEAD -  -  -  -  ;absolute,Y	STA oper,Y	99	3	5  
  833 D1:BEAD -  -  -  -  inst6502_sta_absy:
  834 D1:BEAD ED 33 05 -      ADDCYC(5)
  835 D1:BEB0 CD 18 BA D1     PUSH_ABSYSPLIT_NODEP
  836 D1:BEB4 DD 46 00 -          ld  b,(ix+REGA)
  837 D1:BEB7 CD 10 B1 D1         WRITE_ACCESS
  838 D1:BEBB E1 -  -  -      pop hl
  839 D1:BEBC C3 11 B9 D1     jp i6502NextLoad
  840 D1:BEC0 -  -  -  -  
  841 D1:BEC0 -  -  -  -  ;(indirect,X)	STA (oper,X)	81	2	6  
  842 D1:BEC0 -  -  -  -  inst6502_sta_indx:
  843 D1:BEC0 E5 -  -  -      push hl
  844 D1:BEC1 7E -  -  -          ld  a,(hl)
  845 D1:BEC2 21 00 38 D0         ld  hl,ZEROPAGE
  846 D1:BEC6 85 -  -  -          add a,L
  847 D1:BEC7 DD 86 01 -          add a,(ix+REGX)
  848 D1:BECA 6F -  -  -          ld  L,a
  849 D1:BECB 7E -  -  -          ld  a,(hl)
  850 D1:BECC 2C -  -  -          inc L
  851 D1:BECD 56 -  -  -          ld  d,(hl)
  852 D1:BECE 42 -  -  -          ld  b,d
  853 D1:BECF 0E 0C -  -          ld  c,BASETABLE_STRIDE
  854 D1:BED1 ED 4C -  -          mlt bc
  855 D1:BED3 21 00 40 D0         ld  hl,PAGETABLE
  856 D1:BED7 09 -  -  -          add hl,bc
  857 D1:BED8 ED 27 -  -          ld  hl,(hl)
  858 D1:BEDA 06 00 -  -          ld  b,0
  859 D1:BEDC 4F -  -  -          ld  c,a
  860 D1:BEDD 09 -  -  -          add hl,bc
  861 D1:BEDE DD 46 00 -          ld  b,(ix+REGA)
  862 D1:BEE1 CD 10 B1 D1         WRITE_ACCESS
  863 D1:BEE5 ED 33 06 -          ADDCYC(6)
  864 D1:BEE8 E1 -  -  -      pop hl
  865 D1:BEE9 C3 11 B9 D1     jp i6502NextLoad
  866 D1:BEED -  -  -  -  
  867 D1:BEED -  -  -  -  ;(indirect),Y	STA (oper),Y	91	2	6  
  868 D1:BEED -  -  -  -  inst6502_sta_indy:
  869 D1:BEED E5 -  -  -      push hl
  870 D1:BEEE 7E -  -  -          ld  a,(hl)
  871 D1:BEEF 21 00 38 D0         ld  hl,ZEROPAGE
  872 D1:BEF3 85 -  -  -          add a,L
  873 D1:BEF4 6F -  -  -          ld  L,a
  874 D1:BEF5 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  875 D1:BEF6 2C -  -  -          inc L
  876 D1:BEF7 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  877 D1:BEFA 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  878 D1:BEFB 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  879 D1:BEFD 24 -  -  -          inc h
  880 D1:BEFE 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  881 D1:BEFF 2E 0C -  -          ld  L,BASETABLE_STRIDE
  882 D1:BF01 ED 6C -  -          mlt hl          ;23.
  883 D1:BF03 01 00 40 D0         ld  bc,PAGETABLE
  884 D1:BF07 09 -  -  -          add hl,bc
  885 D1:BF08 ED 27 -  -          ld  hl,(hl)     ;address get.
  886 D1:BF0A 01 00 00 00         ld  bc,0
  887 D1:BF0E 4F -  -  -          ld  c,a
  888 D1:BF0F 09 -  -  -          add hl,bc       ;Full address get.
  889 D1:BF10 DD 46 00 -          ld  b,(ix+REGA)
  890 D1:BF13 CD 10 B1 D1         WRITE_ACCESS
  891 D1:BF17 ED 33 06 -          ADDCYC(6)
  892 D1:BF1A E1 -  -  -      pop hl
  893 D1:BF1B C3 11 B9 D1     jp i6502NextLoad
  894 D1:BF1F -  -  -  -  
  895 D1:BF1F -  -  -  -  ;-----------------------------------------------------------------------------
  896 D1:BF1F -  -  -  -  ;STX - Store Index X in Memory
  897 D1:BF1F -  -  -  -  ;    X -> M
  898 D1:BF1F -  -  -  -  ;    N	Z	C	I	D	V
  899 D1:BF1F -  -  -  -  ;    -	-	-	-	-	-
  900 D1:BF1F -  -  -  -  
  901 D1:BF1F -  -  -  -  ;zeropage	STX oper	86	2	3  
  902 D1:BF1F -  -  -  -  inst6502_stx_zp:
  903 D1:BF1F 7E -  -  -      ld  a,(hl)
  904 D1:BF20 01 00 38 D0     ld  bc,ZEROPAGE
  905 D1:BF24 81 -  -  -      add a,c
  906 D1:BF25 4F -  -  -      ld  c,a
  907 D1:BF26 DD 7E 01 -      ld  a,(ix+REGX)
  908 D1:BF29 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  909 D1:BF2A ED 33 03 -      ADDCYC(3)
  910 D1:BF2D C3 11 B9 D1     jp i6502NextLoad
  911 D1:BF31 -  -  -  -  
  912 D1:BF31 -  -  -  -  ;zeropage,Y	STX oper,Y	96	2	4  
  913 D1:BF31 -  -  -  -  inst6502_stx_zpy:
  914 D1:BF31 7E -  -  -      ld  a,(hl)
  915 D1:BF32 01 00 38 D0     ld  bc,ZEROPAGE
  916 D1:BF36 81 -  -  -      add a,c
  917 D1:BF37 DD 86 02 -      add a,(ix+REGY)
  918 D1:BF3A 4F -  -  -      ld  c,a
  919 D1:BF3B DD 7E 01 -      ld  a,(ix+REGX)
  920 D1:BF3E 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  921 D1:BF3F ED 33 04 -      ADDCYC(4)
  922 D1:BF42 C3 11 B9 D1     jp i6502NextLoad
  923 D1:BF46 -  -  -  -  
  924 D1:BF46 -  -  -  -  ;absolute	STX oper	8E	3	4  
  925 D1:BF46 -  -  -  -  inst6502_stx_abs:
  926 D1:BF46 CD C0 B9 D1     call subroutine6502_abs_split_start
  927 D1:BF4A E5 -  -  -      push hl
  928 D1:BF4B 50 -  -  -          ld  d,b
  929 D1:BF4C 79 -  -  -          ld  a,c
  930 D1:BF4D 0E 0C -  -          ld  c,BASETABLE_STRIDE
  931 D1:BF4F ED 4C -  -          mlt bc
  932 D1:BF51 21 00 40 D0         ld  hl,PAGETABLE
  933 D1:BF55 09 -  -  -          add hl,bc
  934 D1:BF56 ED 27 -  -          ld  hl,(hl)
  935 D1:BF58 06 00 -  -          ld  b,0
  936 D1:BF5A 4F -  -  -          ld  c,a
  937 D1:BF5B 09 -  -  -          add hl,bc   ;full address
  938 D1:BF5C DD 46 01 -          ld  b,(ix+REGX)
  939 D1:BF5F CD 10 B1 D1         WRITE_ACCESS
  940 D1:BF63 ED 33 04 -          ADDCYC(4)
  941 D1:BF66 E1 -  -  -      pop hl
  942 D1:BF67 C3 11 B9 D1     jp i6502NextLoad
  943 D1:BF6B -  -  -  -  
  944 D1:BF6B -  -  -  -  ;-----------------------------------------------------------------------------
  945 D1:BF6B -  -  -  -  ;STY - Store Index Y in Memory
  946 D1:BF6B -  -  -  -  ;    Y -> M
  947 D1:BF6B -  -  -  -  ;    N	Z	C	I	D	V
  948 D1:BF6B -  -  -  -  ;    -	-	-	-	-	-
  949 D1:BF6B -  -  -  -  
  950 D1:BF6B -  -  -  -  ;zeropage	STY oper	84	2	3  
  951 D1:BF6B -  -  -  -  inst6502_sty_zp:
  952 D1:BF6B 7E -  -  -      ld  a,(hl)
  953 D1:BF6C 01 00 38 D0     ld  bc,ZEROPAGE
  954 D1:BF70 81 -  -  -      add a,c
  955 D1:BF71 4F -  -  -      ld  c,a
  956 D1:BF72 DD 7E 02 -      ld  a,(ix+REGY)
  957 D1:BF75 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  958 D1:BF76 ED 33 03 -      ADDCYC(3)
  959 D1:BF79 C3 11 B9 D1     jp i6502NextLoad
  960 D1:BF7D -  -  -  -  
  961 D1:BF7D -  -  -  -  ;zeropage,X	STY oper,X	94	2	4  
  962 D1:BF7D -  -  -  -  inst6502_sty_zpx:
  963 D1:BF7D 7E -  -  -      ld  a,(hl)
  964 D1:BF7E 01 00 38 D0     ld  bc,ZEROPAGE
  965 D1:BF82 81 -  -  -      add a,c
  966 D1:BF83 DD 86 01 -      add a,(ix+REGX)
  967 D1:BF86 4F -  -  -      ld  c,a
  968 D1:BF87 DD 7E 02 -      ld  a,(ix+REGY)
  969 D1:BF8A 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  970 D1:BF8B ED 33 04 -      ADDCYC(4)
  971 D1:BF8E C3 11 B9 D1     jp i6502NextLoad
  972 D1:BF92 -  -  -  -  
  973 D1:BF92 -  -  -  -  ;absolute	STY oper	8C	3	4  
  974 D1:BF92 -  -  -  -  inst6502_sty_abs:
  975 D1:BF92 CD C0 B9 D1     call subroutine6502_abs_split_start
  976 D1:BF96 E5 -  -  -      push hl
  977 D1:BF97 50 -  -  -          ld  d,b
  978 D1:BF98 79 -  -  -          ld  a,c
  979 D1:BF99 0E 0C -  -          ld  c,BASETABLE_STRIDE
  980 D1:BF9B ED 4C -  -          mlt bc
  981 D1:BF9D 21 00 40 D0         ld  hl,PAGETABLE
  982 D1:BFA1 09 -  -  -          add hl,bc
  983 D1:BFA2 ED 27 -  -          ld  hl,(hl)
  984 D1:BFA4 06 00 -  -          ld  b,0
  985 D1:BFA6 4F -  -  -          ld  c,a
  986 D1:BFA7 09 -  -  -          add hl,bc   ;full address
  987 D1:BFA8 DD 46 02 -          ld  b,(ix+REGY)
  988 D1:BFAB CD 10 B1 D1         WRITE_ACCESS
  989 D1:BFAF ED 33 04 -          ADDCYC(4)
  990 D1:BFB2 E1 -  -  -      pop hl
  991 D1:BFB3 C3 11 B9 D1     jp i6502NextLoad
  992 D1:BFB7 -  -  -  -  
  993 D1:BFB7 -  -  -  -  ;-----------------------------------------------------------------------------
  994 D1:BFB7 -  -  -  -  ;TAX - Transfer Accumulator to Index X [A -> X]
  995 D1:BFB7 -  -  -  -  ;N	Z	C	I	D	V
  996 D1:BFB7 -  -  -  -  ;+	+	-	-	-	-
  997 D1:BFB7 -  -  -  -  ;implied	TAX	AA	1	2
  998 D1:BFB7 -  -  -  -  inst6502_tax:
  999 D1:BFB7 DD 7E 00 -      ld  a,(ix+REGA)
 1000 D1:BFBA DD 77 01 -      ld  (ix+REGX),a
 1001 D1:BFBD DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1002 D1:BFD1 ED 33 02 -      ADDCYC(2)
 1003 D1:BFD4 C3 2A B9 D1     jp i6502FinishLoad
 1004 D1:BFD8 -  -  -  -  
 1005 D1:BFD8 -  -  -  -  ;TAY - Transfer Accumulator to Index Y [A -> Y]
 1006 D1:BFD8 -  -  -  -  ;N	Z	C	I	D	V
 1007 D1:BFD8 -  -  -  -  ;+	+	-	-	-	-
 1008 D1:BFD8 -  -  -  -  ;implied	TAY	A8	1	2
 1009 D1:BFD8 -  -  -  -  inst6502_tay:
 1010 D1:BFD8 DD 7E 00 -      ld  a,(ix+REGA)
 1011 D1:BFDB DD 77 02 -      ld  (ix+REGY),a
 1012 D1:BFDE DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1013 D1:BFF2 ED 33 02 -      ADDCYC(2)
 1014 D1:BFF5 C3 2A B9 D1     jp i6502FinishLoad
 1015 D1:BFF9 -  -  -  -  
 1016 D1:BFF9 -  -  -  -  ;TSX - Transfer Stack Pointer to Index X [SP -> X]
 1017 D1:BFF9 -  -  -  -  ;N	Z	C	I	D	V
 1018 D1:BFF9 -  -  -  -  ;+	+	-	-	-	-
 1019 D1:BFF9 -  -  -  -  ;implied	TSX	BA	1	2
 1020 D1:BFF9 -  -  -  -  inst6502_tsx:
 1021 D1:BFF9 DD 7E 03 -      ld  a,(ix+REGSP)
 1022 D1:BFFC DD 77 01 -      ld  (ix+REGX),a
 1023 D1:BFFF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1024 D1:C013 ED 33 02 -      ADDCYC(2)
 1025 D1:C016 C3 2A B9 D1     jp i6502FinishLoad
 1026 D1:C01A -  -  -  -  
 1027 D1:C01A -  -  -  -  ;TXA - Transfer Index X to Accumulator [X -> A]
 1028 D1:C01A -  -  -  -  ;N	Z	C	I	D	V
 1029 D1:C01A -  -  -  -  ;+	+	-	-	-	-
 1030 D1:C01A -  -  -  -  ;implied	TXA	8A	1	2
 1031 D1:C01A -  -  -  -  inst6502_txa:
 1032 D1:C01A DD 7E 01 -      ld  a,(ix+REGX)
 1033 D1:C01D DD 77 00 -      ld  (ix+REGA),a
 1034 D1:C020 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1035 D1:C034 ED 33 02 -      ADDCYC(2)
 1036 D1:C037 C3 2A B9 D1     jp i6502FinishLoad
 1037 D1:C03B -  -  -  -  
 1038 D1:C03B -  -  -  -  ;TXS - Transfer Index X to Stack Pointer [X -> SP]
 1039 D1:C03B -  -  -  -  ;N	Z	C	I	D	V
 1040 D1:C03B -  -  -  -  ;-	-	-	-	-	-
 1041 D1:C03B -  -  -  -  ;implied	TXS	9A	1	2
 1042 D1:C03B -  -  -  -  inst6502_txs:
 1043 D1:C03B DD 7E 01 -      ld  a,(ix+REGX)
 1044 D1:C03E DD 77 03 -      ld  (ix+REGSP),a
 1045 D1:C041 ED 33 02 -      ADDCYC(2)
 1046 D1:C044 C3 2A B9 D1     jp i6502FinishLoad
 1047 D1:C048 -  -  -  -  
 1048 D1:C048 -  -  -  -  ;TYA - Transfer Index Y to Accumulator [Y -> A]
 1049 D1:C048 -  -  -  -  ;N	Z	C	I	D	V
 1050 D1:C048 -  -  -  -  ;+	+	-	-	-	-
 1051 D1:C048 -  -  -  -  ;implied	TYA	98	1	2
 1052 D1:C048 -  -  -  -  inst6502_tya:
 1053 D1:C048 DD 7E 02 -      ld  a,(ix+REGY)
 1054 D1:C04B DD 77 00 -      ld  (ix+REGA),a
 1055 D1:C04E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1056 D1:C062 ED 33 02 -      ADDCYC(2)
 1057 D1:C065 C3 2A B9 D1     jp i6502FinishLoad
 1058 D1:C069 -  -  -  -  
 1059 D1:C069 -  -  -  -  ;-----------------------------------------------------------------------------
 1060 D1:C069 -  -  -  -  ;-----------------------------------------------------------------------------
 1061 D1:C069 -  -  -  -  ;-----------------------------------------------------------------------------
 1062 D1:C069 -  -  -  -  ;Instructions by type: Stack Instructions
 1063 D1:C069 -  -  -  -  ;PHA - Push Accumulator on Stack
 1064 D1:C069 -  -  -  -  ;    push A
 1065 D1:C069 -  -  -  -  ;    N	Z	C	I	D	V
 1066 D1:C069 -  -  -  -  ;    -	-	-	-	-	-
 1067 D1:C069 -  -  -  -  ;implied	PHA	48	1	3 
 1068 D1:C069 -  -  -  -  inst6502_pha:
 1069 D1:C069 ED 33 03 -      ADDCYC(3)
 1070 D1:C06C DD 7E 00 -      ld  a,(ix+REGA)
 1071 D1:C06F 01 00 39 D0     ld  bc,STACKBASE
 1072 D1:C073 DD 4E 03 -      ld  c,(ix+REGSP)
 1073 D1:C076 02 -  -  -      ld  (bc),a
 1074 D1:C077 0D -  -  -      dec c
 1075 D1:C078 DD 71 03 -      ld  (ix+REGSP),c
 1076 D1:C07B C3 2A B9 D1     jp i6502FinishLoad
 1077 D1:C07F -  -  -  -  
 1078 D1:C07F -  -  -  -  ;PHP - Push Processor Status on Stack
 1079 D1:C07F -  -  -  -  ;    The status register will be pushed with the break
 1080 D1:C07F -  -  -  -  ;    flag and bit 5 set to 1.
 1081 D1:C07F -  -  -  -  ;    push SR
 1082 D1:C07F -  -  -  -  ;    N	Z	C	I	D	V
 1083 D1:C07F -  -  -  -  ;    -	-	-	-	-	-
 1084 D1:C07F -  -  -  -  ;implied	PHP	08	1	3  
 1085 D1:C07F -  -  -  -  inst6502_php:
 1086 D1:C07F ED 33 03 -      ADDCYC(3)
 1087 D1:C082 DD 7E 04 -      ld  a,(ix+REGSR)
 1088 D1:C085 F6 30 -  -      or  a,%00110000
 1089 D1:C087 01 00 39 D0     ld  bc,STACKBASE
 1090 D1:C08B DD 4E 03 -      ld  c,(ix+REGSP)
 1091 D1:C08E 02 -  -  -      ld  (bc),a
 1092 D1:C08F 0D -  -  -      dec c
 1093 D1:C090 DD 71 03 -      ld  (ix+REGSP),c
 1094 D1:C093 C3 2A B9 D1     jp i6502FinishLoad
 1095 D1:C097 -  -  -  -  
 1096 D1:C097 -  -  -  -  
 1097 D1:C097 -  -  -  -  
 1098 D1:C097 -  -  -  -  ;PLA - Pull Accumulator from Stack
 1099 D1:C097 -  -  -  -  ;    pull A
 1100 D1:C097 -  -  -  -  ;    N	Z	C	I	D	V
 1101 D1:C097 -  -  -  -  ;    +	+	-	-	-	-
 1102 D1:C097 -  -  -  -  ;implied	PLA	68	1	4  
 1103 D1:C097 -  -  -  -  inst6502_pla:
 1104 D1:C097 ED 33 04 -      ADDCYC(4)
 1105 D1:C09A 01 00 39 D0     ld  bc,STACKBASE
 1106 D1:C09E DD 4E 03 -      ld  c,(ix+REGSP)
 1107 D1:C0A1 0C -  -  -      inc c
 1108 D1:C0A2 0A -  -  -      ld  a,(bc)
 1109 D1:C0A3 DD 71 03 -      ld  (ix+REGSP),c
 1110 D1:C0A6 DD 77 00 -      ld  (ix+REGA),a
 1111 D1:C0A9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1112 D1:C0BD C3 2A B9 D1     jp i6502FinishLoad
 1113 D1:C0C1 -  -  -  -  
 1114 D1:C0C1 -  -  -  -  ;PLP - Pull Processor Status from Stack
 1115 D1:C0C1 -  -  -  -  ;    The status register will be pulled with the break
 1116 D1:C0C1 -  -  -  -  ;    flag and bit 5 ignored.
 1117 D1:C0C1 -  -  -  -  ;    pull SR
 1118 D1:C0C1 -  -  -  -  ;    N	Z	C	I	D	V
 1119 D1:C0C1 -  -  -  -  ;    from stack
 1120 D1:C0C1 -  -  -  -  ;implied	PLP	28	1	4  
 1121 D1:C0C1 -  -  -  -  inst6502_plp:
 1122 D1:C0C1 ED 33 04 -      ADDCYC(4)
 1123 D1:C0C4 01 00 39 D0     ld  bc,STACKBASE
 1124 D1:C0C8 DD 4E 03 -      ld  c,(ix+REGSP)
 1125 D1:C0CB 0C -  -  -      inc c
 1126 D1:C0CC 0A -  -  -      ld  a,(bc)
 1127 D1:C0CD DD 71 03 -      ld  (ix+REGSP),c
 1128 D1:C0D0 DD 46 04 -      ld  b,(ix+REGSR)
 1129 D1:C0D3 A8 -  -  -      xor a,b
 1130 D1:C0D4 E6 CF -  -      and a,%11001111
 1131 D1:C0D6 A8 -  -  -      xor a,b
 1132 D1:C0D7 DD 77 04 -      ld  (ix+REGSR),a
 1133 D1:C0DA C3 2A B9 D1     jp i6502FinishLoad
 1134 D1:C0DE -  -  -  -  
 1135 D1:C0DE -  -  -  -  
 1136 D1:C0DE -  -  -  -  ;-----------------------------------------------------------------------------
 1137 D1:C0DE -  -  -  -  ;-----------------------------------------------------------------------------
 1138 D1:C0DE -  -  -  -  ;-----------------------------------------------------------------------------
 1139 D1:C0DE -  -  -  -  ;Instructions by type: Decrements and Increments
 1140 D1:C0DE -  -  -  -  
 1141 D1:C0DE -  -  -  -  ;DEC -  Decrement Memory by One
 1142 D1:C0DE -  -  -  -  ;    M - 1 -> M
 1143 D1:C0DE -  -  -  -  ;    N	Z	C	I	D	V
 1144 D1:C0DE -  -  -  -  ;    +	+	-	-	-	-
 1145 D1:C0DE -  -  -  -  ;    addressing	assembler	opc	bytes	cycles
 1146 D1:C0DE -  -  -  -  
 1147 D1:C0DE -  -  -  -  ;    zeropage	DEC oper	C6	2	5  
 1148 D1:C0DE -  -  -  -  inst6502_dec_zp:
 1149 D1:C0DE 7E -  -  -      ld  a,(hl)
 1150 D1:C0DF 01 00 38 D0     ld  bc,ZEROPAGE
 1151 D1:C0E3 81 -  -  -      add a,c
 1152 D1:C0E4 4F -  -  -      ld  c,a
 1153 D1:C0E5 0A -  -  -      ld  a,(bc)
 1154 D1:C0E6 3D -  -  -      dec a
 1155 D1:C0E7 02 -  -  -      ld  (bc),a
 1156 D1:C0E8 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1157 D1:C0FC ED 33 05 -      ADDCYC(5)
 1158 D1:C0FF C3 11 B9 D1     jp i6502NextLoad
 1159 D1:C103 -  -  -  -  
 1160 D1:C103 -  -  -  -  ;    zeropage,X	DEC oper,X	D6	2	6  
 1161 D1:C103 -  -  -  -  inst6502_dec_zpx:
 1162 D1:C103 7E -  -  -      ld  a,(hl)
 1163 D1:C104 01 00 38 D0     ld  bc,ZEROPAGE
 1164 D1:C108 81 -  -  -      add a,c
 1165 D1:C109 DD 86 01 -      add a,(ix+REGX)
 1166 D1:C10C 4F -  -  -      ld  c,a
 1167 D1:C10D 0A -  -  -      ld  a,(bc)
 1168 D1:C10E 3D -  -  -      dec a
 1169 D1:C10F 02 -  -  -      ld  (bc),a
 1170 D1:C110 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1171 D1:C124 ED 33 06 -      ADDCYC(6)
 1172 D1:C127 C3 11 B9 D1     jp i6502NextLoad
 1173 D1:C12B -  -  -  -  
 1174 D1:C12B -  -  -  -  ;    absolute	DEC oper	CE	3	6  
 1175 D1:C12B -  -  -  -  inst6502_dec_abs:
 1176 D1:C12B CD C0 B9 D1     call subroutine6502_abs_split_start
 1177 D1:C12F E5 -  -  -      push hl
 1178 D1:C130 50 -  -  -          ld  d,b
 1179 D1:C131 79 -  -  -          ld  a,c
 1180 D1:C132 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1181 D1:C134 ED 4C -  -          mlt bc
 1182 D1:C136 21 00 40 D0         ld  hl,PAGETABLE
 1183 D1:C13A 09 -  -  -          add hl,bc
 1184 D1:C13B ED 27 -  -          ld  hl,(hl)
 1185 D1:C13D 06 00 -  -          ld  b,0
 1186 D1:C13F 4F -  -  -          ld  c,a
 1187 D1:C140 09 -  -  -          add hl,bc   ;full address
 1188 D1:C141 CD 68 B0 D1         READ_ACCESS
 1189 D1:C145 3D -  -  -          dec a
 1190 D1:C146 47 -  -  -          ld  b,a
 1191 D1:C147 -  -  -  -          ;
 1192 D1:C147 DD 7E 04 -          ld  a,(ix+REGSR)
 1193 D1:C14A CB 8F -  -          res SF_ZERO,a
 1194 D1:C14C 20 02 -  -          jr  nz,$+4
 1195 D1:C14E CB CF -  -          set SF_ZERO,a
 1196 D1:C150 CB BF -  -          res SF_NEG,a
 1197 D1:C152 F2 58 C1 D1         jp  p,$+6
 1198 D1:C156 CB FF -  -          set SF_NEG,a
 1199 D1:C158 DD 77 04 -          ld  (ix+REGSR),a
 1200 D1:C15B -  -  -  -          ;
 1201 D1:C15B CD 10 B1 D1         WRITE_ACCESS
 1202 D1:C15F ED 33 06 -          ADDCYC(6)
 1203 D1:C162 E1 -  -  -      pop hl
 1204 D1:C163 C3 11 B9 D1     jp i6502NextLoad
 1205 D1:C167 -  -  -  -  
 1206 D1:C167 -  -  -  -  ;    absolute,X	DEC oper,X	DE	3	7  
 1207 D1:C167 -  -  -  -  inst6502_dec_absx:
 1208 D1:C167 ED 33 07 -      ADDCYC(7)
 1209 D1:C16A CD 1D BA D1     PUSH_ABSXSPLIT_NODEP
 1210 D1:C16E CD 68 B0 D1         READ_ACCESS
 1211 D1:C172 3D -  -  -          dec a
 1212 D1:C173 47 -  -  -          ld  b,a
 1213 D1:C174 -  -  -  -          ;
 1214 D1:C174 DD 7E 04 -          ld  a,(ix+REGSR)
 1215 D1:C177 CB 8F -  -          res SF_ZERO,a
 1216 D1:C179 20 02 -  -          jr  nz,$+4
 1217 D1:C17B CB CF -  -          set SF_ZERO,a
 1218 D1:C17D CB BF -  -          res SF_NEG,a
 1219 D1:C17F F2 85 C1 D1         jp  p,$+6
 1220 D1:C183 CB FF -  -          set SF_NEG,a
 1221 D1:C185 DD 77 04 -          ld  (ix+REGSR),a
 1222 D1:C188 -  -  -  -          ;
 1223 D1:C188 CD 10 B1 D1         WRITE_ACCESS
 1224 D1:C18C E1 -  -  -      pop hl
 1225 D1:C18D C3 11 B9 D1     jp i6502NextLoad
 1226 D1:C191 -  -  -  -  
 1227 D1:C191 -  -  -  -  ;DEX - Decrement Index X by One [X - 1 -> X]
 1228 D1:C191 -  -  -  -  ;Flags altered: NZ
 1229 D1:C191 -  -  -  -  ;implied	DEX	CA	1	2  
 1230 D1:C191 -  -  -  -  inst6502_dex:
 1231 D1:C191 DD 35 01 -      dec (ix+REGX)
 1232 D1:C194 DD 7E 04 -  _:  ld  a,(ix+REGSR)
 1233 D1:C197 CB 8F -  -      res SF_ZERO,a
 1234 D1:C199 20 02 -  -      jr  nz,$+4
 1235 D1:C19B CB CF -  -      set SF_ZERO,a
 1236 D1:C19D CB BF -  -      res SF_NEG,a
 1237 D1:C19F F2 A5 C1 D1     jp  p,$+6
 1238 D1:C1A3 CB FF -  -      set SF_NEG,a
 1239 D1:C1A5 DD 77 04 -      ld  (ix+REGSR),a
 1240 D1:C1A8 ED 33 02 -      ADDCYC(2)
 1241 D1:C1AB C3 2A B9 D1     jp i6502FinishLoad
 1242 D1:C1AF -  -  -  -  
 1243 D1:C1AF -  -  -  -  ;DEY - Decrement Index Y by One [Y - 1 -> Y]
 1244 D1:C1AF -  -  -  -  ;Flags altered: NZ
 1245 D1:C1AF -  -  -  -  ;implied	DEY	88	1	2  
 1246 D1:C1AF -  -  -  -  inst6502_dey:
 1247 D1:C1AF DD 35 02 -      dec (ix+REGY)
 1248 D1:C1B2 18 E0 -  -      jr  -_
 1249 D1:C1B4 -  -  -  -  
 1250 D1:C1B4 -  -  -  -  
 1251 D1:C1B4 -  -  -  -  ;INX - Increment Index X by One [X + 1 -> X]
 1252 D1:C1B4 -  -  -  -  ;Flags altered: NZ
 1253 D1:C1B4 -  -  -  -  ;implied	INX	E8	1	2  
 1254 D1:C1B4 -  -  -  -  inst6502_inx:
 1255 D1:C1B4 DD 34 01 -      inc (ix+REGX)
 1256 D1:C1B7 18 DB -  -      jr  -_
 1257 D1:C1B9 -  -  -  -  
 1258 D1:C1B9 -  -  -  -  
 1259 D1:C1B9 -  -  -  -  ;INY - Increment Index Y by One [Y + 1 -> Y]
 1260 D1:C1B9 -  -  -  -  ;Flags altered: NZ
 1261 D1:C1B9 -  -  -  -  ;implied	INY	C8	1	2  
 1262 D1:C1B9 -  -  -  -  inst6502_iny:
 1263 D1:C1B9 DD 34 02 -      inc (ix+REGY)
 1264 D1:C1BC 18 D6 -  -      jr  -_
 1265 D1:C1BE -  -  -  -  
 1266 D1:C1BE -  -  -  -  
 1267 D1:C1BE -  -  -  -  ;INC - Increment Memory by One
 1268 D1:C1BE -  -  -  -  ;    M + 1 -> M
 1269 D1:C1BE -  -  -  -  ;    N	Z	C	I	D	V
 1270 D1:C1BE -  -  -  -  ;    +	+	-	-	-	-
 1271 D1:C1BE -  -  -  -  
 1272 D1:C1BE -  -  -  -  ;zeropage	INC oper	E6	2	5  
 1273 D1:C1BE -  -  -  -  inst6502_inc_zp:
 1274 D1:C1BE 7E -  -  -      ld  a,(hl)
 1275 D1:C1BF 01 00 38 D0     ld  bc,ZEROPAGE
 1276 D1:C1C3 81 -  -  -      add a,c
 1277 D1:C1C4 4F -  -  -      ld  c,a
 1278 D1:C1C5 0A -  -  -      ld  a,(bc)
 1279 D1:C1C6 3C -  -  -      inc a
 1280 D1:C1C7 02 -  -  -      ld  (bc),a
 1281 D1:C1C8 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1282 D1:C1DC ED 33 05 -      ADDCYC(5)
 1283 D1:C1DF C3 11 B9 D1     jp i6502NextLoad
 1284 D1:C1E3 -  -  -  -  
 1285 D1:C1E3 -  -  -  -  ;zeropage,X	INC oper,X	F6	2	6  
 1286 D1:C1E3 -  -  -  -  inst6502_inc_zpx:
 1287 D1:C1E3 7E -  -  -      ld  a,(hl)
 1288 D1:C1E4 01 00 38 D0     ld  bc,ZEROPAGE
 1289 D1:C1E8 81 -  -  -      add a,c
 1290 D1:C1E9 DD 86 01 -      add a,(ix+REGX)
 1291 D1:C1EC 4F -  -  -      ld  c,a
 1292 D1:C1ED 0A -  -  -      ld  a,(bc)
 1293 D1:C1EE 3C -  -  -      inc a
 1294 D1:C1EF 02 -  -  -      ld  (bc),a
 1295 D1:C1F0 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1296 D1:C204 ED 33 06 -      ADDCYC(6)
 1297 D1:C207 C3 11 B9 D1     jp i6502NextLoad
 1298 D1:C20B -  -  -  -      
 1299 D1:C20B -  -  -  -  ;absolute	INC oper	EE	3	6
 1300 D1:C20B -  -  -  -  inst6502_inc_abs:
 1301 D1:C20B CD C0 B9 D1     call subroutine6502_abs_split_start
 1302 D1:C20F E5 -  -  -      push hl
 1303 D1:C210 50 -  -  -          ld  d,b
 1304 D1:C211 79 -  -  -          ld  a,c
 1305 D1:C212 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1306 D1:C214 ED 4C -  -          mlt bc
 1307 D1:C216 21 00 40 D0         ld  hl,PAGETABLE
 1308 D1:C21A 09 -  -  -          add hl,bc
 1309 D1:C21B ED 27 -  -          ld  hl,(hl)
 1310 D1:C21D 06 00 -  -          ld  b,0
 1311 D1:C21F 4F -  -  -          ld  c,a
 1312 D1:C220 09 -  -  -          add hl,bc   ;full address
 1313 D1:C221 CD 68 B0 D1         READ_ACCESS
 1314 D1:C225 3C -  -  -          inc a
 1315 D1:C226 47 -  -  -          ld  b,a
 1316 D1:C227 -  -  -  -          ;
 1317 D1:C227 DD 7E 04 -          ld  a,(ix+REGSR)
 1318 D1:C22A CB 8F -  -          res SF_ZERO,a
 1319 D1:C22C 20 02 -  -          jr  nz,$+4
 1320 D1:C22E CB CF -  -          set SF_ZERO,a
 1321 D1:C230 CB BF -  -          res SF_NEG,a
 1322 D1:C232 F2 38 C2 D1         jp  p,$+6
 1323 D1:C236 CB FF -  -          set SF_NEG,a
 1324 D1:C238 DD 77 04 -          ld  (ix+REGSR),a
 1325 D1:C23B -  -  -  -          ;
 1326 D1:C23B CD 10 B1 D1         WRITE_ACCESS
 1327 D1:C23F ED 33 06 -          ADDCYC(6)
 1328 D1:C242 E1 -  -  -      pop hl
 1329 D1:C243 C3 11 B9 D1     jp i6502NextLoad
 1330 D1:C247 -  -  -  -  
 1331 D1:C247 -  -  -  -  ;absolute,X	INC oper,X	FE	3	7  
 1332 D1:C247 -  -  -  -  inst6502_inc_absx:
 1333 D1:C247 ED 33 07 -      ADDCYC(7)
 1334 D1:C24A CD 1D BA D1     PUSH_ABSXSPLIT_NODEP
 1335 D1:C24E CD 68 B0 D1         READ_ACCESS
 1336 D1:C252 3C -  -  -          inc a
 1337 D1:C253 47 -  -  -          ld  b,a
 1338 D1:C254 -  -  -  -          ;
 1339 D1:C254 DD 7E 04 -          ld  a,(ix+REGSR)
 1340 D1:C257 CB 8F -  -          res SF_ZERO,a
 1341 D1:C259 20 02 -  -          jr  nz,$+4
 1342 D1:C25B CB CF -  -          set SF_ZERO,a
 1343 D1:C25D CB BF -  -          res SF_NEG,a
 1344 D1:C25F F2 65 C2 D1         jp  p,$+6
 1345 D1:C263 CB FF -  -          set SF_NEG,a
 1346 D1:C265 DD 77 04 -          ld  (ix+REGSR),a
 1347 D1:C268 -  -  -  -          ;
 1348 D1:C268 CD 10 B1 D1         WRITE_ACCESS
 1349 D1:C26C E1 -  -  -      pop hl
 1350 D1:C26D C3 11 B9 D1     jp i6502NextLoad
 1351 D1:C271 -  -  -  -  
 1352 D1:C271 -  -  -  -  ;-----------------------------------------------------------------------------
 1353 D1:C271 -  -  -  -  ;-----------------------------------------------------------------------------
 1354 D1:C271 -  -  -  -  ;-----------------------------------------------------------------------------
 1355 D1:C271 -  -  -  -  ;Instructions by type: Arithmetic Operations
 1356 D1:C271 -  -  -  -  ;ADC - Add Memory to Accumulator with Carry  [A + M + C -> A, C]
 1357 D1:C271 -  -  -  -  ;    N	Z	C	I	D	V
 1358 D1:C271 -  -  -  -  ;    +	+	+	-	-	+
 1359 D1:C271 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1360 D1:C271 -  -  -  -  
 1361 D1:C271 -  -  -  -  ;immediate	ADC #oper	69	2	2  
 1362 D1:C271 -  -  -  -  inst6502_adc_imm:
 1363 D1:C271 ED 33 02 -      ADDCYC(2)
 1364 D1:C274 4E -  -  -      ld  c,(hl)
 1365 D1:C275 C3 52 BA D1     jp  subroutine6502_adc_combined_end
 1366 D1:C279 -  -  -  -      
 1367 D1:C279 -  -  -  -  
 1368 D1:C279 -  -  -  -  ;zeropage	ADC oper	65	2	3
 1369 D1:C279 -  -  -  -  inst6502_adc_zp:
 1370 D1:C279 ED 33 03 -      ADDCYC(3)
 1371 D1:C27C 7E -  -  -      ld  a,(hl)
 1372 D1:C27D 01 00 38 D0     ld  bc,ZEROPAGE
 1373 D1:C281 81 -  -  -      add a,c
 1374 D1:C282 4F -  -  -      ld  c,a
 1375 D1:C283 0A -  -  -      ld  a,(bc)
 1376 D1:C284 4F -  -  -      ld  c,a
 1377 D1:C285 C3 52 BA D1     jp  subroutine6502_adc_combined_end
 1378 D1:C289 -  -  -  -  
 1379 D1:C289 -  -  -  -  ;zeropage,X	ADC oper,X	75	2	4  
 1380 D1:C289 -  -  -  -  inst6502_adc_zpx:
 1381 D1:C289 ED 33 04 -      ADDCYC(4)
 1382 D1:C28C 7E -  -  -      ld  a,(hl)
 1383 D1:C28D DD 86 01 -      add a,(ix+REGX)
 1384 D1:C290 01 00 38 D0     ld  bc,ZEROPAGE
 1385 D1:C294 81 -  -  -      add a,c
 1386 D1:C295 4F -  -  -      ld  c,a
 1387 D1:C296 0A -  -  -      ld  a,(bc)
 1388 D1:C297 4F -  -  -      ld  c,a
 1389 D1:C298 C3 52 BA D1     jp  subroutine6502_adc_combined_end
 1390 D1:C29C -  -  -  -  
 1391 D1:C29C -  -  -  -  ;absolute	ADC oper	6D	3	4  
 1392 D1:C29C -  -  -  -  inst6502_adc_abs:
 1393 D1:C29C ED 33 04 -      ADDCYC(4)
 1394 D1:C29F CD C0 B9 D1     call subroutine6502_abs_split_start
 1395 D1:C2A3 E5 -  -  -      push hl
 1396 D1:C2A4 50 -  -  -          ld  d,b
 1397 D1:C2A5 79 -  -  -          ld  a,c
 1398 D1:C2A6 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1399 D1:C2A8 ED 4C -  -          mlt bc
 1400 D1:C2AA 21 00 40 D0         ld  hl,PAGETABLE
 1401 D1:C2AE 09 -  -  -          add hl,bc
 1402 D1:C2AF ED 27 -  -          ld  hl,(hl)
 1403 D1:C2B1 06 00 -  -          ld  b,0
 1404 D1:C2B3 4F -  -  -          ld  c,a
 1405 D1:C2B4 09 -  -  -          add hl,bc   ;full address
 1406 D1:C2B5 CD 68 B0 D1         READ_ACCESS
 1407 D1:C2B9 E1 -  -  -      pop hl
 1408 D1:C2BA 4F -  -  -      ld  c,a
 1409 D1:C2BB C3 52 BA D1     jp  subroutine6502_adc_combined_end
 1410 D1:C2BF -  -  -  -  
 1411 D1:C2BF -  -  -  -  ;absolute,X	ADC oper,X	7D	3	4* 
 1412 D1:C2BF -  -  -  -  inst6502_adc_absx:
 1413 D1:C2BF ED 33 04 -      ADDCYC(4)
 1414 D1:C2C2 CD E1 B9 D1     PUSH_ABSXSPLIT
 1415 D1:C2C6 CD 68 B0 D1         READ_ACCESS
 1416 D1:C2CA E1 -  -  -      pop hl
 1417 D1:C2CB 4F -  -  -      ld  c,a
 1418 D1:C2CC C3 52 BA D1     jp  subroutine6502_adc_combined_end
 1419 D1:C2D0 -  -  -  -  
 1420 D1:C2D0 -  -  -  -  ;absolute,Y	ADC oper,Y	79	3	4*
 1421 D1:C2D0 -  -  -  -  inst6502_adc_absy:
 1422 D1:C2D0 ED 33 04 -      ADDCYC(4)
 1423 D1:C2D3 CD DC B9 D1     PUSH_ABSYSPLIT
 1424 D1:C2D7 CD 68 B0 D1         READ_ACCESS
 1425 D1:C2DB E1 -  -  -      pop hl
 1426 D1:C2DC 4F -  -  -      ld  c,a
 1427 D1:C2DD C3 52 BA D1     jp  subroutine6502_adc_combined_end
 1428 D1:C2E1 -  -  -  -  
 1429 D1:C2E1 -  -  -  -  ;(indirect,X)	ADC (oper,X)	61	2	6  
 1430 D1:C2E1 -  -  -  -  inst6502_adc_indx:
 1431 D1:C2E1 ED 33 06 -      ADDCYC(6)
 1432 D1:C2E4 E5 -  -  -      push hl
 1433 D1:C2E5 7E -  -  -          ld  a,(hl)
 1434 D1:C2E6 21 00 38 D0         ld  hl,ZEROPAGE
 1435 D1:C2EA 85 -  -  -          add a,L
 1436 D1:C2EB DD 86 01 -          add a,(ix+REGX)
 1437 D1:C2EE 6F -  -  -          ld  L,a
 1438 D1:C2EF 7E -  -  -          ld  a,(hl)
 1439 D1:C2F0 2C -  -  -          inc L
 1440 D1:C2F1 56 -  -  -          ld  d,(hl)
 1441 D1:C2F2 42 -  -  -          ld  b,d
 1442 D1:C2F3 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1443 D1:C2F5 ED 4C -  -          mlt bc
 1444 D1:C2F7 21 00 40 D0         ld  hl,PAGETABLE
 1445 D1:C2FB 09 -  -  -          add hl,bc
 1446 D1:C2FC ED 27 -  -          ld  hl,(hl)
 1447 D1:C2FE 06 00 -  -          ld  b,0
 1448 D1:C300 4F -  -  -          ld  c,a
 1449 D1:C301 09 -  -  -          add hl,bc
 1450 D1:C302 CD 68 B0 D1         READ_ACCESS
 1451 D1:C306 E1 -  -  -      pop hl
 1452 D1:C307 4F -  -  -      ld  c,a
 1453 D1:C308 C3 52 BA D1     jp  subroutine6502_adc_combined_end
 1454 D1:C30C -  -  -  -  
 1455 D1:C30C -  -  -  -  ;(indirect),Y	ADC (oper),Y	71	2	5* 
 1456 D1:C30C -  -  -  -  inst6502_adc_indy:
 1457 D1:C30C ED 33 05 -      ADDCYC(5)
 1458 D1:C30F E5 -  -  -      push hl
 1459 D1:C310 7E -  -  -          ld  a,(hl)
 1460 D1:C311 21 00 38 D0         ld  hl,ZEROPAGE
 1461 D1:C315 85 -  -  -          add a,L
 1462 D1:C316 6F -  -  -          ld  L,a
 1463 D1:C317 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1464 D1:C318 2C -  -  -          inc L
 1465 D1:C319 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1466 D1:C31C 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1467 D1:C31D 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1468 D1:C31F FD 23 -  -          ADDCYC(1)
 1469 D1:C321 24 -  -  -          inc h
 1470 D1:C322 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1471 D1:C323 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1472 D1:C325 ED 6C -  -          mlt hl          ;23.
 1473 D1:C327 01 00 40 D0         ld  bc,PAGETABLE
 1474 D1:C32B 09 -  -  -          add hl,bc
 1475 D1:C32C ED 27 -  -          ld  hl,(hl)     ;address get.
 1476 D1:C32E 01 00 00 00         ld  bc,0
 1477 D1:C332 4F -  -  -          ld  c,a
 1478 D1:C333 09 -  -  -          add hl,bc       ;Full address get.
 1479 D1:C334 CD 68 B0 D1         READ_ACCESS
 1480 D1:C338 E1 -  -  -      pop hl
 1481 D1:C339 4F -  -  -      ld  c,a
 1482 D1:C33A C3 52 BA D1     jp  subroutine6502_adc_combined_end
 1483 D1:C33E -  -  -  -  
 1484 D1:C33E -  -  -  -  
 1485 D1:C33E -  -  -  -  ;SBC - Subtract Memory from Accumulator with Borrow
 1486 D1:C33E -  -  -  -  ;A - M - C̅ -> A
 1487 D1:C33E -  -  -  -  ;N	Z	C	I	D	V
 1488 D1:C33E -  -  -  -  ;+	+	+	-	-	+
 1489 D1:C33E -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1490 D1:C33E -  -  -  -  
 1491 D1:C33E -  -  -  -  ;immediate	SBC #oper	E9	2	2  
 1492 D1:C33E -  -  -  -  inst6502_sbc_imm:
 1493 D1:C33E ED 33 02 -      ADDCYC(2)
 1494 D1:C341 4E -  -  -      ld  c,(hl)
 1495 D1:C342 C3 83 BA D1     jp  subroutine6502_sbc_combined_end
 1496 D1:C346 -  -  -  -  
 1497 D1:C346 -  -  -  -  ;zeropage	SBC oper	E5	2	3  
 1498 D1:C346 -  -  -  -  inst6502_sbc_zp:
 1499 D1:C346 ED 33 03 -      ADDCYC(3)
 1500 D1:C349 7E -  -  -      ld  a,(hl)
 1501 D1:C34A 01 00 38 D0     ld  bc,ZEROPAGE
 1502 D1:C34E 81 -  -  -      add a,c
 1503 D1:C34F 4F -  -  -      ld  c,a
 1504 D1:C350 0A -  -  -      ld  a,(bc)
 1505 D1:C351 4F -  -  -      ld  c,a
 1506 D1:C352 C3 83 BA D1     jp  subroutine6502_sbc_combined_end
 1507 D1:C356 -  -  -  -  
 1508 D1:C356 -  -  -  -  ;zeropage,X	SBC oper,X	F5	2	4  
 1509 D1:C356 -  -  -  -  inst6502_sbc_zpx:
 1510 D1:C356 ED 33 04 -      ADDCYC(4)
 1511 D1:C359 7E -  -  -      ld  a,(hl)
 1512 D1:C35A DD 86 01 -      add a,(ix+REGX)
 1513 D1:C35D 01 00 38 D0     ld  bc,ZEROPAGE
 1514 D1:C361 81 -  -  -      add a,c
 1515 D1:C362 4F -  -  -      ld  c,a
 1516 D1:C363 0A -  -  -      ld  a,(bc)
 1517 D1:C364 4F -  -  -      ld  c,a
 1518 D1:C365 C3 83 BA D1     jp  subroutine6502_sbc_combined_end
 1519 D1:C369 -  -  -  -  
 1520 D1:C369 -  -  -  -  ;absolute	SBC oper	ED	3	4  
 1521 D1:C369 -  -  -  -  inst6502_sbc_abs:
 1522 D1:C369 ED 33 04 -      ADDCYC(4)
 1523 D1:C36C CD C0 B9 D1     call subroutine6502_abs_split_start
 1524 D1:C370 E5 -  -  -      push hl
 1525 D1:C371 50 -  -  -          ld  d,b
 1526 D1:C372 79 -  -  -          ld  a,c
 1527 D1:C373 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1528 D1:C375 ED 4C -  -          mlt bc
 1529 D1:C377 21 00 40 D0         ld  hl,PAGETABLE
 1530 D1:C37B 09 -  -  -          add hl,bc
 1531 D1:C37C ED 27 -  -          ld  hl,(hl)
 1532 D1:C37E 06 00 -  -          ld  b,0
 1533 D1:C380 4F -  -  -          ld  c,a
 1534 D1:C381 09 -  -  -          add hl,bc   ;full address
 1535 D1:C382 CD 68 B0 D1         READ_ACCESS
 1536 D1:C386 E1 -  -  -      pop hl
 1537 D1:C387 4F -  -  -      ld  c,a
 1538 D1:C388 C3 83 BA D1     jp  subroutine6502_sbc_combined_end
 1539 D1:C38C -  -  -  -  
 1540 D1:C38C -  -  -  -  ;absolute,X	SBC oper,X	FD	3	4* 
 1541 D1:C38C -  -  -  -  inst6502_sbc_absx:
 1542 D1:C38C ED 33 04 -      ADDCYC(4)
 1543 D1:C38F CD E1 B9 D1     PUSH_ABSXSPLIT
 1544 D1:C393 CD 68 B0 D1         READ_ACCESS
 1545 D1:C397 E1 -  -  -      pop hl
 1546 D1:C398 4F -  -  -      ld  c,a
 1547 D1:C399 C3 83 BA D1     jp  subroutine6502_sbc_combined_end
 1548 D1:C39D -  -  -  -  
 1549 D1:C39D -  -  -  -  ;absolute,Y	SBC oper,Y	F9	3	4* 
 1550 D1:C39D -  -  -  -  inst6502_sbc_absy:
 1551 D1:C39D ED 33 04 -      ADDCYC(4)
 1552 D1:C3A0 CD DC B9 D1     PUSH_ABSYSPLIT
 1553 D1:C3A4 CD 68 B0 D1         READ_ACCESS
 1554 D1:C3A8 E1 -  -  -      pop hl
 1555 D1:C3A9 4F -  -  -      ld  c,a
 1556 D1:C3AA C3 83 BA D1     jp  subroutine6502_sbc_combined_end
 1557 D1:C3AE -  -  -  -  
 1558 D1:C3AE -  -  -  -  ;(indirect,X)	SBC (oper,X)	E1	2	6  
 1559 D1:C3AE -  -  -  -  inst6502_sbc_indx:
 1560 D1:C3AE ED 33 06 -      ADDCYC(6)
 1561 D1:C3B1 E5 -  -  -      push hl
 1562 D1:C3B2 7E -  -  -          ld  a,(hl)
 1563 D1:C3B3 21 00 38 D0         ld  hl,ZEROPAGE
 1564 D1:C3B7 85 -  -  -          add a,L
 1565 D1:C3B8 DD 86 01 -          add a,(ix+REGX)
 1566 D1:C3BB 6F -  -  -          ld  L,a
 1567 D1:C3BC 7E -  -  -          ld  a,(hl)
 1568 D1:C3BD 2C -  -  -          inc L
 1569 D1:C3BE 56 -  -  -          ld  d,(hl)
 1570 D1:C3BF 42 -  -  -          ld  b,d
 1571 D1:C3C0 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1572 D1:C3C2 ED 4C -  -          mlt bc
 1573 D1:C3C4 21 00 40 D0         ld  hl,PAGETABLE
 1574 D1:C3C8 09 -  -  -          add hl,bc
 1575 D1:C3C9 ED 27 -  -          ld  hl,(hl)
 1576 D1:C3CB 06 00 -  -          ld  b,0
 1577 D1:C3CD 4F -  -  -          ld  c,a
 1578 D1:C3CE 09 -  -  -          add hl,bc
 1579 D1:C3CF CD 68 B0 D1         READ_ACCESS
 1580 D1:C3D3 E1 -  -  -      pop hl
 1581 D1:C3D4 4F -  -  -      ld  c,a
 1582 D1:C3D5 C3 83 BA D1     jp  subroutine6502_sbc_combined_end
 1583 D1:C3D9 -  -  -  -  
 1584 D1:C3D9 -  -  -  -  ;(indirect),Y	SBC (oper),Y	F1	2	5* 
 1585 D1:C3D9 -  -  -  -  inst6502_sbc_indy:
 1586 D1:C3D9 ED 33 05 -      ADDCYC(5)
 1587 D1:C3DC E5 -  -  -      push hl
 1588 D1:C3DD 7E -  -  -          ld  a,(hl)
 1589 D1:C3DE 21 00 38 D0         ld  hl,ZEROPAGE
 1590 D1:C3E2 85 -  -  -          add a,L
 1591 D1:C3E3 6F -  -  -          ld  L,a
 1592 D1:C3E4 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1593 D1:C3E5 2C -  -  -          inc L
 1594 D1:C3E6 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1595 D1:C3E9 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1596 D1:C3EA 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1597 D1:C3EC FD 23 -  -          ADDCYC(1)
 1598 D1:C3EE 24 -  -  -          inc h
 1599 D1:C3EF 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1600 D1:C3F0 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1601 D1:C3F2 ED 6C -  -          mlt hl          ;23.
 1602 D1:C3F4 01 00 40 D0         ld  bc,PAGETABLE
 1603 D1:C3F8 09 -  -  -          add hl,bc
 1604 D1:C3F9 ED 27 -  -          ld  hl,(hl)     ;address get.
 1605 D1:C3FB 01 00 00 00         ld  bc,0
 1606 D1:C3FF 4F -  -  -          ld  c,a
 1607 D1:C400 09 -  -  -          add hl,bc       ;Full address get.
 1608 D1:C401 CD 68 B0 D1         READ_ACCESS
 1609 D1:C405 E1 -  -  -      pop hl
 1610 D1:C406 4F -  -  -      ld  c,a
 1611 D1:C407 C3 83 BA D1     jp  subroutine6502_sbc_combined_end
 1612 D1:C40B -  -  -  -  
 1613 D1:C40B -  -  -  -  
 1614 D1:C40B -  -  -  -  
 1615 D1:C40B -  -  -  -  ;-----------------------------------------------------------------------------
 1616 D1:C40B -  -  -  -  ;-----------------------------------------------------------------------------
 1617 D1:C40B -  -  -  -  ;-----------------------------------------------------------------------------
 1618 D1:C40B -  -  -  -  ;Instructions by type: Logical Operations
 1619 D1:C40B -  -  -  -  
 1620 D1:C40B -  -  -  -  ;AND - AND Memory with Accumulator
 1621 D1:C40B -  -  -  -  ;A AND M -> A
 1622 D1:C40B -  -  -  -  ;N	Z	C	I	D	V
 1623 D1:C40B -  -  -  -  ;+	+	-	-	-	-
 1624 D1:C40B -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1625 D1:C40B -  -  -  -  
 1626 D1:C40B -  -  -  -  ;immediate	AND #oper	29	2	2  
 1627 D1:C40B -  -  -  -  inst6502_and_imm:
 1628 D1:C40B ED 33 02 -      ADDCYC(2)
 1629 D1:C40E 7E -  -  -      ld  a,(hl)
 1630 D1:C40F DD A6 00 -      and a,(ix+REGA)
 1631 D1:C412 DD 77 00 -      ld  (ix+REGA),A
 1632 D1:C415 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1633 D1:C429 C3 11 B9 D1     jp i6502NextLoad
 1634 D1:C42D -  -  -  -  
 1635 D1:C42D -  -  -  -  ;zeropage	AND oper	25	2	3  
 1636 D1:C42D -  -  -  -  inst6502_and_zp:
 1637 D1:C42D ED 33 03 -      ADDCYC(3)
 1638 D1:C430 7E -  -  -      ld  a,(hl)
 1639 D1:C431 01 00 38 D0     ld  bc,ZEROPAGE
 1640 D1:C435 81 -  -  -      add a,c
 1641 D1:C436 4F -  -  -      ld  c,a
 1642 D1:C437 0A -  -  -      ld  a,(bc)
 1643 D1:C438 DD A6 00 -      and a,(ix+REGA)
 1644 D1:C43B DD 77 00 -      ld  (ix+REGA),A
 1645 D1:C43E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1646 D1:C452 C3 11 B9 D1     jp i6502NextLoad
 1647 D1:C456 -  -  -  -  
 1648 D1:C456 -  -  -  -  ;zeropage,X	AND oper,X	35	2	4  
 1649 D1:C456 -  -  -  -  inst6502_and_zpx:
 1650 D1:C456 ED 33 04 -      ADDCYC(4)
 1651 D1:C459 7E -  -  -      ld  a,(hl)
 1652 D1:C45A 01 00 38 D0     ld  bc,ZEROPAGE
 1653 D1:C45E 81 -  -  -      add a,c
 1654 D1:C45F DD 86 01 -      add a,(ix+REGX)
 1655 D1:C462 4F -  -  -      ld  c,a
 1656 D1:C463 0A -  -  -      ld  a,(bc)
 1657 D1:C464 DD A6 00 -      and a,(ix+REGA)
 1658 D1:C467 DD 77 00 -      ld  (ix+REGA),A
 1659 D1:C46A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1660 D1:C47E C3 11 B9 D1     jp i6502NextLoad
 1661 D1:C482 -  -  -  -  
 1662 D1:C482 -  -  -  -  ;absolute	AND oper	2D	3	4  
 1663 D1:C482 -  -  -  -  inst6502_and_abs:
 1664 D1:C482 ED 33 04 -      ADDCYC(4)
 1665 D1:C485 CD C0 B9 D1     call subroutine6502_abs_split_start
 1666 D1:C489 E5 -  -  -      push hl
 1667 D1:C48A 50 -  -  -          ld  d,b
 1668 D1:C48B 79 -  -  -          ld  a,c
 1669 D1:C48C 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1670 D1:C48E ED 4C -  -          mlt bc
 1671 D1:C490 21 00 40 D0         ld  hl,PAGETABLE
 1672 D1:C494 09 -  -  -          add hl,bc
 1673 D1:C495 ED 27 -  -          ld  hl,(hl)
 1674 D1:C497 06 00 -  -          ld  b,0
 1675 D1:C499 4F -  -  -          ld  c,a
 1676 D1:C49A 09 -  -  -          add hl,bc   ;full address
 1677 D1:C49B CD 68 B0 D1         READ_ACCESS
 1678 D1:C49F E1 -  -  -      pop hl
 1679 D1:C4A0 DD A6 00 -      and a,(ix+REGA)
 1680 D1:C4A3 DD 77 00 -      ld  (ix+REGA),A
 1681 D1:C4A6 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1682 D1:C4BA C3 11 B9 D1     jp i6502NextLoad
 1683 D1:C4BE -  -  -  -  
 1684 D1:C4BE -  -  -  -  ;absolute,X	AND oper,X	3D	3	4* 
 1685 D1:C4BE -  -  -  -  inst6502_and_absx:
 1686 D1:C4BE ED 33 04 -      ADDCYC(4)
 1687 D1:C4C1 CD E1 B9 D1     PUSH_ABSXSPLIT
 1688 D1:C4C5 CD 68 B0 D1         READ_ACCESS
 1689 D1:C4C9 DD A6 00 -          and a,(ix+REGA)
 1690 D1:C4CC DD 77 00 -          ld  (ix+REGA),A
 1691 D1:C4CF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1692 D1:C4E3 E1 -  -  -      pop hl
 1693 D1:C4E4 C3 11 B9 D1     jp i6502NextLoad
 1694 D1:C4E8 -  -  -  -  
 1695 D1:C4E8 -  -  -  -  ;absolute,Y	AND oper,Y	39	3	4* 
 1696 D1:C4E8 -  -  -  -  inst6502_and_absy:
 1697 D1:C4E8 ED 33 04 -      ADDCYC(4)
 1698 D1:C4EB CD DC B9 D1     PUSH_ABSYSPLIT
 1699 D1:C4EF CD 68 B0 D1         READ_ACCESS
 1700 D1:C4F3 E1 -  -  -      pop hl
 1701 D1:C4F4 DD A6 00 -      and a,(ix+REGA)
 1702 D1:C4F7 DD 77 00 -      ld  (ix+REGA),A
 1703 D1:C4FA DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1704 D1:C50E C3 11 B9 D1     jp i6502NextLoad
 1705 D1:C512 -  -  -  -  
 1706 D1:C512 -  -  -  -  ;(indirect,X)	AND (oper,X)	21	2	6  
 1707 D1:C512 -  -  -  -  inst6502_and_indx:
 1708 D1:C512 ED 33 06 -      ADDCYC(6)
 1709 D1:C515 E5 -  -  -      push hl
 1710 D1:C516 7E -  -  -          ld  a,(hl)
 1711 D1:C517 21 00 38 D0         ld  hl,ZEROPAGE
 1712 D1:C51B 85 -  -  -          add a,L
 1713 D1:C51C DD 86 01 -          add a,(ix+REGX)
 1714 D1:C51F 6F -  -  -          ld  L,a
 1715 D1:C520 7E -  -  -          ld  a,(hl)
 1716 D1:C521 2C -  -  -          inc L
 1717 D1:C522 56 -  -  -          ld  d,(hl)
 1718 D1:C523 42 -  -  -          ld  b,d
 1719 D1:C524 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1720 D1:C526 ED 4C -  -          mlt bc
 1721 D1:C528 21 00 40 D0         ld  hl,PAGETABLE
 1722 D1:C52C 09 -  -  -          add hl,bc
 1723 D1:C52D ED 27 -  -          ld  hl,(hl)
 1724 D1:C52F 06 00 -  -          ld  b,0
 1725 D1:C531 4F -  -  -          ld  c,a
 1726 D1:C532 09 -  -  -          add hl,bc
 1727 D1:C533 CD 68 B0 D1         READ_ACCESS
 1728 D1:C537 E1 -  -  -      pop hl
 1729 D1:C538 DD A6 00 -      and a,(ix+REGA)
 1730 D1:C53B DD 77 00 -      ld  (ix+REGA),A
 1731 D1:C53E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1732 D1:C552 C3 11 B9 D1     jp i6502NextLoad
 1733 D1:C556 -  -  -  -  
 1734 D1:C556 -  -  -  -  ;(indirect),Y	AND (oper),Y	31	2	5* 
 1735 D1:C556 -  -  -  -  inst6502_and_indy:
 1736 D1:C556 ED 33 05 -      ADDCYC(5)
 1737 D1:C559 E5 -  -  -      push hl
 1738 D1:C55A 7E -  -  -          ld  a,(hl)
 1739 D1:C55B 21 00 38 D0         ld  hl,ZEROPAGE
 1740 D1:C55F 85 -  -  -          add a,L
 1741 D1:C560 6F -  -  -          ld  L,a
 1742 D1:C561 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1743 D1:C562 2C -  -  -          inc L
 1744 D1:C563 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1745 D1:C566 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1746 D1:C567 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1747 D1:C569 24 -  -  -          inc h
 1748 D1:C56A FD 23 -  -          ADDCYC(1)
 1749 D1:C56C 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1750 D1:C56D 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1751 D1:C56F ED 6C -  -          mlt hl          ;23.
 1752 D1:C571 01 00 40 D0         ld  bc,PAGETABLE
 1753 D1:C575 09 -  -  -          add hl,bc
 1754 D1:C576 ED 27 -  -          ld  hl,(hl)     ;address get.
 1755 D1:C578 01 00 00 00         ld  bc,0
 1756 D1:C57C 4F -  -  -          ld  c,a
 1757 D1:C57D 09 -  -  -          add hl,bc       ;Full address get.
 1758 D1:C57E CD 68 B0 D1         READ_ACCESS
 1759 D1:C582 E1 -  -  -      pop hl
 1760 D1:C583 DD A6 00 -      and a,(ix+REGA)
 1761 D1:C586 DD 77 00 -      ld  (ix+REGA),A
 1762 D1:C589 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1763 D1:C59D C3 11 B9 D1     jp i6502NextLoad
 1764 D1:C5A1 -  -  -  -  
 1765 D1:C5A1 -  -  -  -  ;-----------------------------------------------------------------------------
 1766 D1:C5A1 -  -  -  -  ;EOR - Exclusive-OR Memory with Accumulator
 1767 D1:C5A1 -  -  -  -  ;A EOR M -> A
 1768 D1:C5A1 -  -  -  -  ;N	Z	C	I	D	V
 1769 D1:C5A1 -  -  -  -  ;+	+	-	-	-	-
 1770 D1:C5A1 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1771 D1:C5A1 -  -  -  -  
 1772 D1:C5A1 -  -  -  -  ;immediate	EOR #oper	49	2	2  
 1773 D1:C5A1 -  -  -  -  inst6502_eor_imm:
 1774 D1:C5A1 ED 33 02 -      ADDCYC(2)
 1775 D1:C5A4 7E -  -  -      ld  a,(hl)
 1776 D1:C5A5 DD AE 00 -      xor a,(ix+REGA)
 1777 D1:C5A8 DD 77 00 -      ld  (ix+REGA),A
 1778 D1:C5AB DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1779 D1:C5BF C3 11 B9 D1     jp i6502NextLoad
 1780 D1:C5C3 -  -  -  -  
 1781 D1:C5C3 -  -  -  -  ;zeropage	EOR oper	45	2	3  
 1782 D1:C5C3 -  -  -  -  inst6502_eor_zp:
 1783 D1:C5C3 ED 33 03 -      ADDCYC(3)
 1784 D1:C5C6 7E -  -  -      ld  a,(hl)
 1785 D1:C5C7 01 00 38 D0     ld  bc,ZEROPAGE
 1786 D1:C5CB 81 -  -  -      add a,c
 1787 D1:C5CC 4F -  -  -      ld  c,a
 1788 D1:C5CD 0A -  -  -      ld  a,(bc)
 1789 D1:C5CE DD AE 00 -      xor a,(ix+REGA)
 1790 D1:C5D1 DD 77 00 -      ld  (ix+REGA),A
 1791 D1:C5D4 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1792 D1:C5E8 C3 11 B9 D1     jp i6502NextLoad
 1793 D1:C5EC -  -  -  -  
 1794 D1:C5EC -  -  -  -  
 1795 D1:C5EC -  -  -  -  ;zeropage,X	EOR oper,X	55	2	4  
 1796 D1:C5EC -  -  -  -  inst6502_eor_zpx:
 1797 D1:C5EC ED 33 04 -      ADDCYC(4)
 1798 D1:C5EF 7E -  -  -      ld  a,(hl)
 1799 D1:C5F0 01 00 38 D0     ld  bc,ZEROPAGE
 1800 D1:C5F4 81 -  -  -      add a,c
 1801 D1:C5F5 DD 86 01 -      add a,(ix+REGX)
 1802 D1:C5F8 4F -  -  -      ld  c,a
 1803 D1:C5F9 0A -  -  -      ld  a,(bc)
 1804 D1:C5FA DD AE 00 -      xor a,(ix+REGA)
 1805 D1:C5FD DD 77 00 -      ld  (ix+REGA),A
 1806 D1:C600 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1807 D1:C614 C3 11 B9 D1     jp i6502NextLoad
 1808 D1:C618 -  -  -  -  
 1809 D1:C618 -  -  -  -  ;absolute	EOR oper	4D	3	4  
 1810 D1:C618 -  -  -  -  inst6502_eor_abs:
 1811 D1:C618 ED 33 04 -      ADDCYC(4)
 1812 D1:C61B CD C0 B9 D1     call subroutine6502_abs_split_start
 1813 D1:C61F E5 -  -  -      push hl
 1814 D1:C620 50 -  -  -          ld  d,b
 1815 D1:C621 79 -  -  -          ld  a,c
 1816 D1:C622 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1817 D1:C624 ED 4C -  -          mlt bc
 1818 D1:C626 21 00 40 D0         ld  hl,PAGETABLE
 1819 D1:C62A 09 -  -  -          add hl,bc
 1820 D1:C62B ED 27 -  -          ld  hl,(hl)
 1821 D1:C62D 06 00 -  -          ld  b,0
 1822 D1:C62F 4F -  -  -          ld  c,a
 1823 D1:C630 09 -  -  -          add hl,bc   ;full address
 1824 D1:C631 CD 68 B0 D1         READ_ACCESS
 1825 D1:C635 E1 -  -  -      pop hl
 1826 D1:C636 DD AE 00 -      xor a,(ix+REGA)
 1827 D1:C639 DD 77 00 -      ld  (ix+REGA),A
 1828 D1:C63C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1829 D1:C650 C3 11 B9 D1     jp i6502NextLoad
 1830 D1:C654 -  -  -  -  
 1831 D1:C654 -  -  -  -  ;absolute,X	EOR oper,X	5D	3	4* 
 1832 D1:C654 -  -  -  -  inst6502_eor_absx:
 1833 D1:C654 ED 33 04 -      ADDCYC(4)
 1834 D1:C657 CD E1 B9 D1     PUSH_ABSXSPLIT
 1835 D1:C65B CD 68 B0 D1         READ_ACCESS
 1836 D1:C65F DD AE 00 -          xor a,(ix+REGA)
 1837 D1:C662 DD 77 00 -          ld  (ix+REGA),A
 1838 D1:C665 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1839 D1:C679 E1 -  -  -      pop hl
 1840 D1:C67A C3 11 B9 D1     jp i6502NextLoad
 1841 D1:C67E -  -  -  -  
 1842 D1:C67E -  -  -  -  ;absolute,Y	EOR oper,Y	59	3	4* 
 1843 D1:C67E -  -  -  -  inst6502_eor_absy:
 1844 D1:C67E ED 33 04 -      ADDCYC(4)
 1845 D1:C681 CD DC B9 D1     PUSH_ABSYSPLIT
 1846 D1:C685 CD 68 B0 D1         READ_ACCESS
 1847 D1:C689 E1 -  -  -      pop hl
 1848 D1:C68A DD AE 00 -      xor a,(ix+REGA)
 1849 D1:C68D DD 77 00 -      ld  (ix+REGA),A
 1850 D1:C690 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1851 D1:C6A4 C3 11 B9 D1     jp i6502NextLoad
 1852 D1:C6A8 -  -  -  -  
 1853 D1:C6A8 -  -  -  -  ;(indirect,X)	EOR (oper,X)	41	2	6  
 1854 D1:C6A8 -  -  -  -  inst6502_eor_indx:
 1855 D1:C6A8 ED 33 06 -      ADDCYC(6)
 1856 D1:C6AB E5 -  -  -      push hl
 1857 D1:C6AC 7E -  -  -          ld  a,(hl)
 1858 D1:C6AD 21 00 38 D0         ld  hl,ZEROPAGE
 1859 D1:C6B1 85 -  -  -          add a,L
 1860 D1:C6B2 DD 86 01 -          add a,(ix+REGX)
 1861 D1:C6B5 6F -  -  -          ld  L,a
 1862 D1:C6B6 7E -  -  -          ld  a,(hl)
 1863 D1:C6B7 2C -  -  -          inc L
 1864 D1:C6B8 56 -  -  -          ld  d,(hl)
 1865 D1:C6B9 42 -  -  -          ld  b,d
 1866 D1:C6BA 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1867 D1:C6BC ED 4C -  -          mlt bc
 1868 D1:C6BE 21 00 40 D0         ld  hl,PAGETABLE
 1869 D1:C6C2 09 -  -  -          add hl,bc
 1870 D1:C6C3 ED 27 -  -          ld  hl,(hl)
 1871 D1:C6C5 06 00 -  -          ld  b,0
 1872 D1:C6C7 4F -  -  -          ld  c,a
 1873 D1:C6C8 09 -  -  -          add hl,bc
 1874 D1:C6C9 CD 68 B0 D1         READ_ACCESS
 1875 D1:C6CD E1 -  -  -      pop hl
 1876 D1:C6CE DD AE 00 -      xor a,(ix+REGA)
 1877 D1:C6D1 DD 77 00 -      ld  (ix+REGA),A
 1878 D1:C6D4 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1879 D1:C6E8 C3 11 B9 D1     jp i6502NextLoad
 1880 D1:C6EC -  -  -  -  
 1881 D1:C6EC -  -  -  -  ;(indirect),Y	EOR (oper),Y	51	2	5* 
 1882 D1:C6EC -  -  -  -  inst6502_eor_indy:
 1883 D1:C6EC ED 33 05 -      ADDCYC(5)
 1884 D1:C6EF E5 -  -  -      push hl
 1885 D1:C6F0 7E -  -  -          ld  a,(hl)
 1886 D1:C6F1 21 00 38 D0         ld  hl,ZEROPAGE
 1887 D1:C6F5 85 -  -  -          add a,L
 1888 D1:C6F6 6F -  -  -          ld  L,a
 1889 D1:C6F7 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1890 D1:C6F8 2C -  -  -          inc L
 1891 D1:C6F9 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1892 D1:C6FC 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1893 D1:C6FD 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1894 D1:C6FF 24 -  -  -          inc h
 1895 D1:C700 FD 23 -  -          ADDCYC(1)
 1896 D1:C702 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1897 D1:C703 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1898 D1:C705 ED 6C -  -          mlt hl          ;23.
 1899 D1:C707 01 00 40 D0         ld  bc,PAGETABLE
 1900 D1:C70B 09 -  -  -          add hl,bc
 1901 D1:C70C ED 27 -  -          ld  hl,(hl)     ;address get.
 1902 D1:C70E 01 00 00 00         ld  bc,0
 1903 D1:C712 4F -  -  -          ld  c,a
 1904 D1:C713 09 -  -  -          add hl,bc       ;Full address get.
 1905 D1:C714 CD 68 B0 D1         READ_ACCESS
 1906 D1:C718 E1 -  -  -      pop hl
 1907 D1:C719 DD AE 00 -      xor a,(ix+REGA)
 1908 D1:C71C DD 77 00 -      ld  (ix+REGA),A
 1909 D1:C71F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1910 D1:C733 C3 11 B9 D1     jp i6502NextLoad
 1911 D1:C737 -  -  -  -  
 1912 D1:C737 -  -  -  -  ;-----------------------------------------------------------------------------
 1913 D1:C737 -  -  -  -  ;ORA - OR Memory with Accumulator
 1914 D1:C737 -  -  -  -  ;A OR M -> A
 1915 D1:C737 -  -  -  -  ;N	Z	C	I	D	V
 1916 D1:C737 -  -  -  -  ;+	+	-	-	-	-
 1917 D1:C737 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1918 D1:C737 -  -  -  -  
 1919 D1:C737 -  -  -  -  ;immediate	ORA #oper	09	2	2  
 1920 D1:C737 -  -  -  -  inst6502_ora_imm:
 1921 D1:C737 ED 33 02 -      ADDCYC(2)
 1922 D1:C73A 7E -  -  -      ld  a,(hl)
 1923 D1:C73B DD B6 00 -      or  a,(ix+REGA)
 1924 D1:C73E DD 77 00 -      ld  (ix+REGA),A
 1925 D1:C741 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1926 D1:C755 C3 11 B9 D1     jp i6502NextLoad
 1927 D1:C759 -  -  -  -  
 1928 D1:C759 -  -  -  -  ;zeropage	ORA oper	05	2	3  
 1929 D1:C759 -  -  -  -  inst6502_ora_zp:
 1930 D1:C759 ED 33 03 -      ADDCYC(3)
 1931 D1:C75C 7E -  -  -      ld  a,(hl)
 1932 D1:C75D 01 00 38 D0     ld  bc,ZEROPAGE
 1933 D1:C761 81 -  -  -      add a,c
 1934 D1:C762 4F -  -  -      ld  c,a
 1935 D1:C763 0A -  -  -      ld  a,(bc)
 1936 D1:C764 DD B6 00 -      or  a,(ix+REGA)
 1937 D1:C767 DD 77 00 -      ld  (ix+REGA),A
 1938 D1:C76A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1939 D1:C77E C3 11 B9 D1     jp i6502NextLoad
 1940 D1:C782 -  -  -  -  
 1941 D1:C782 -  -  -  -  ;zeropage,X	ORA oper,X	15	2	4  
 1942 D1:C782 -  -  -  -  inst6502_ora_zpx:
 1943 D1:C782 ED 33 04 -      ADDCYC(4)
 1944 D1:C785 7E -  -  -      ld  a,(hl)
 1945 D1:C786 01 00 38 D0     ld  bc,ZEROPAGE
 1946 D1:C78A 81 -  -  -      add a,c
 1947 D1:C78B DD 86 01 -      add a,(ix+REGX)
 1948 D1:C78E 4F -  -  -      ld  c,a
 1949 D1:C78F 0A -  -  -      ld  a,(bc)
 1950 D1:C790 DD B6 00 -      or  a,(ix+REGA)
 1951 D1:C793 DD 77 00 -      ld  (ix+REGA),A
 1952 D1:C796 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1953 D1:C7AA C3 11 B9 D1     jp i6502NextLoad
 1954 D1:C7AE -  -  -  -  
 1955 D1:C7AE -  -  -  -  ;absolute	ORA oper	0D	3	4  
 1956 D1:C7AE -  -  -  -  inst6502_ora_abs:
 1957 D1:C7AE ED 33 04 -      ADDCYC(4)
 1958 D1:C7B1 CD C0 B9 D1     call subroutine6502_abs_split_start
 1959 D1:C7B5 E5 -  -  -      push hl
 1960 D1:C7B6 50 -  -  -          ld  d,b
 1961 D1:C7B7 79 -  -  -          ld  a,c
 1962 D1:C7B8 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1963 D1:C7BA ED 4C -  -          mlt bc
 1964 D1:C7BC 21 00 40 D0         ld  hl,PAGETABLE
 1965 D1:C7C0 09 -  -  -          add hl,bc
 1966 D1:C7C1 ED 27 -  -          ld  hl,(hl)
 1967 D1:C7C3 06 00 -  -          ld  b,0
 1968 D1:C7C5 4F -  -  -          ld  c,a
 1969 D1:C7C6 09 -  -  -          add hl,bc   ;full address
 1970 D1:C7C7 CD 68 B0 D1         READ_ACCESS
 1971 D1:C7CB E1 -  -  -      pop hl
 1972 D1:C7CC DD B6 00 -      or  a,(ix+REGA)
 1973 D1:C7CF DD 77 00 -      ld  (ix+REGA),A
 1974 D1:C7D2 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1975 D1:C7E6 C3 11 B9 D1     jp i6502NextLoad
 1976 D1:C7EA -  -  -  -  
 1977 D1:C7EA -  -  -  -  ;absolute,X	ORA oper,X	1D	3	4* 
 1978 D1:C7EA -  -  -  -  inst6502_ora_absx:
 1979 D1:C7EA ED 33 04 -      ADDCYC(4)
 1980 D1:C7ED CD E1 B9 D1     PUSH_ABSXSPLIT
 1981 D1:C7F1 CD 68 B0 D1         READ_ACCESS
 1982 D1:C7F5 DD B6 00 -          or  a,(ix+REGA)
 1983 D1:C7F8 DD 77 00 -          ld  (ix+REGA),A
 1984 D1:C7FB DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1985 D1:C80F E1 -  -  -      pop hl
 1986 D1:C810 C3 11 B9 D1     jp i6502NextLoad
 1987 D1:C814 -  -  -  -  
 1988 D1:C814 -  -  -  -  ;absolute,Y	ORA oper,Y	19	3	4* 
 1989 D1:C814 -  -  -  -  inst6502_ora_absy:
 1990 D1:C814 ED 33 04 -      ADDCYC(4)
 1991 D1:C817 CD DC B9 D1     PUSH_ABSYSPLIT
 1992 D1:C81B CD 68 B0 D1         READ_ACCESS
 1993 D1:C81F E1 -  -  -      pop hl
 1994 D1:C820 DD B6 00 -      or  a,(ix+REGA)
 1995 D1:C823 DD 77 00 -      ld  (ix+REGA),A
 1996 D1:C826 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1997 D1:C83A C3 11 B9 D1     jp i6502NextLoad
 1998 D1:C83E -  -  -  -  
 1999 D1:C83E -  -  -  -  ;(indirect,X)	ORA (oper,X)	01	2	6  
 2000 D1:C83E -  -  -  -  inst6502_ora_indx:
 2001 D1:C83E ED 33 06 -      ADDCYC(6)
 2002 D1:C841 E5 -  -  -      push hl
 2003 D1:C842 7E -  -  -          ld  a,(hl)
 2004 D1:C843 21 00 38 D0         ld  hl,ZEROPAGE
 2005 D1:C847 85 -  -  -          add a,L
 2006 D1:C848 DD 86 01 -          add a,(ix+REGX)
 2007 D1:C84B 6F -  -  -          ld  L,a
 2008 D1:C84C 7E -  -  -          ld  a,(hl)
 2009 D1:C84D 2C -  -  -          inc L
 2010 D1:C84E 56 -  -  -          ld  d,(hl)
 2011 D1:C84F 42 -  -  -          ld  b,d
 2012 D1:C850 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2013 D1:C852 ED 4C -  -          mlt bc
 2014 D1:C854 21 00 40 D0         ld  hl,PAGETABLE
 2015 D1:C858 09 -  -  -          add hl,bc
 2016 D1:C859 ED 27 -  -          ld  hl,(hl)
 2017 D1:C85B 06 00 -  -          ld  b,0
 2018 D1:C85D 4F -  -  -          ld  c,a
 2019 D1:C85E 09 -  -  -          add hl,bc
 2020 D1:C85F CD 68 B0 D1         READ_ACCESS
 2021 D1:C863 E1 -  -  -      pop hl
 2022 D1:C864 DD B6 00 -      or  a,(ix+REGA)
 2023 D1:C867 DD 77 00 -      ld  (ix+REGA),A
 2024 D1:C86A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2025 D1:C87E C3 11 B9 D1     jp i6502NextLoad
 2026 D1:C882 -  -  -  -  
 2027 D1:C882 -  -  -  -  ;(indirect),Y	ORA (oper),Y	11	2	5* 
 2028 D1:C882 -  -  -  -  inst6502_ora_indy:
 2029 D1:C882 ED 33 05 -      ADDCYC(5)
 2030 D1:C885 E5 -  -  -      push hl
 2031 D1:C886 7E -  -  -          ld  a,(hl)
 2032 D1:C887 21 00 38 D0         ld  hl,ZEROPAGE
 2033 D1:C88B 85 -  -  -          add a,L
 2034 D1:C88C 6F -  -  -          ld  L,a
 2035 D1:C88D 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 2036 D1:C88E 2C -  -  -          inc L
 2037 D1:C88F DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 2038 D1:C892 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 2039 D1:C893 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 2040 D1:C895 24 -  -  -          inc h
 2041 D1:C896 FD 23 -  -          ADDCYC(1)
 2042 D1:C898 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 2043 D1:C899 2E 0C -  -          ld  L,BASETABLE_STRIDE
 2044 D1:C89B ED 6C -  -          mlt hl          ;23.
 2045 D1:C89D 01 00 40 D0         ld  bc,PAGETABLE
 2046 D1:C8A1 09 -  -  -          add hl,bc
 2047 D1:C8A2 ED 27 -  -          ld  hl,(hl)     ;address get.
 2048 D1:C8A4 01 00 00 00         ld  bc,0
 2049 D1:C8A8 4F -  -  -          ld  c,a
 2050 D1:C8A9 09 -  -  -          add hl,bc       ;Full address get.
 2051 D1:C8AA CD 68 B0 D1         READ_ACCESS
 2052 D1:C8AE E1 -  -  -      pop hl
 2053 D1:C8AF DD B6 00 -      or  a,(ix+REGA)
 2054 D1:C8B2 DD 77 00 -      ld  (ix+REGA),A
 2055 D1:C8B5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2056 D1:C8C9 C3 11 B9 D1     jp i6502NextLoad
 2057 D1:C8CD -  -  -  -  
 2058 D1:C8CD -  -  -  -  ;-----------------------------------------------------------------------------
 2059 D1:C8CD -  -  -  -  ;-----------------------------------------------------------------------------
 2060 D1:C8CD -  -  -  -  ;-----------------------------------------------------------------------------
 2061 D1:C8CD -  -  -  -  ;Instructions by type: Shift & Rotate Instructions
 2062 D1:C8CD -  -  -  -  ;ASL - Shift Left One Bit (Memory or Accumulator)
 2063 D1:C8CD -  -  -  -  ;C <- [76543210] <- 0
 2064 D1:C8CD -  -  -  -  ;N	Z	C	I	D	V
 2065 D1:C8CD -  -  -  -  ;+	+	+	-	-	-
 2066 D1:C8CD -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2067 D1:C8CD -  -  -  -  
 2068 D1:C8CD -  -  -  -  ;accumulator	ASL A	0A	1	2  
 2069 D1:C8CD -  -  -  -  inst6502_asl:
 2070 D1:C8CD ED 33 02 -      ADDCYC(2)
 2071 D1:C8D0 DD 7E 00 -      ld  a,(ix+REGA)
 2072 D1:C8D3 CB 27 -  -      sla a
 2073 D1:C8D5 DD 77 00 -      ld  (ix+REGA),a
 2074 D1:C8D8 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2075 D1:C8F2 C3 2A B9 D1     jp i6502FinishLoad
 2076 D1:C8F6 -  -  -  -  
 2077 D1:C8F6 -  -  -  -  ;zeropage	ASL oper	06	2	5  
 2078 D1:C8F6 -  -  -  -  inst6502_asl_zp:
 2079 D1:C8F6 ED 33 05 -      ADDCYC(5)
 2080 D1:C8F9 7E -  -  -      ld  a,(hl)
 2081 D1:C8FA 01 00 38 D0     ld  bc,ZEROPAGE
 2082 D1:C8FE 81 -  -  -      add a,c
 2083 D1:C8FF 4F -  -  -      ld  c,a
 2084 D1:C900 0A -  -  -      ld  a,(bc)
 2085 D1:C901 CB 27 -  -      sla a
 2086 D1:C903 02 -  -  -      ld  (bc),a
 2087 D1:C904 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2088 D1:C91E C3 11 B9 D1     jp i6502NextLoad
 2089 D1:C922 -  -  -  -  
 2090 D1:C922 -  -  -  -  ;zeropage,X	ASL oper,X	16	2	6  
 2091 D1:C922 -  -  -  -  inst6502_asl_zpx:
 2092 D1:C922 ED 33 06 -      ADDCYC(6)
 2093 D1:C925 7E -  -  -      ld  a,(hl)
 2094 D1:C926 01 00 38 D0     ld  bc,ZEROPAGE
 2095 D1:C92A 81 -  -  -      add a,c
 2096 D1:C92B DD 86 01 -      add a,(ix+REGX)
 2097 D1:C92E 4F -  -  -      ld  c,a
 2098 D1:C92F 0A -  -  -      ld  a,(bc)
 2099 D1:C930 CB 27 -  -      sla a
 2100 D1:C932 02 -  -  -      ld  (bc),a
 2101 D1:C933 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2102 D1:C94D C3 11 B9 D1     jp i6502NextLoad
 2103 D1:C951 -  -  -  -  
 2104 D1:C951 -  -  -  -  ;absolute	ASL oper	0E	3	6  
 2105 D1:C951 -  -  -  -  inst6502_asl_abs:
 2106 D1:C951 ED 33 06 -      ADDCYC(6)
 2107 D1:C954 CD C0 B9 D1     call subroutine6502_abs_split_start
 2108 D1:C958 E5 -  -  -      push hl
 2109 D1:C959 50 -  -  -          ld  d,b
 2110 D1:C95A 79 -  -  -          ld  a,c
 2111 D1:C95B 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2112 D1:C95D ED 4C -  -          mlt bc
 2113 D1:C95F 21 00 40 D0         ld  hl,PAGETABLE
 2114 D1:C963 09 -  -  -          add hl,bc
 2115 D1:C964 ED 27 -  -          ld  hl,(hl)
 2116 D1:C966 06 00 -  -          ld  b,0
 2117 D1:C968 4F -  -  -          ld  c,a
 2118 D1:C969 09 -  -  -          add hl,bc   ;full address
 2119 D1:C96A CD 68 B0 D1         READ_ACCESS
 2120 D1:C96E CB 27 -  -          sla a
 2121 D1:C970 4F -  -  -          ld  c,a
 2122 D1:C971 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2123 D1:C98B 41 -  -  -          ld  b,c
 2124 D1:C98C CD 10 B1 D1         WRITE_ACCESS
 2125 D1:C990 E1 -  -  -      pop hl
 2126 D1:C991 C3 11 B9 D1     jp i6502NextLoad
 2127 D1:C995 -  -  -  -  
 2128 D1:C995 -  -  -  -  ;absolute,X	ASL oper,X	1E	3	7  
 2129 D1:C995 -  -  -  -  inst6502_asl_absx:
 2130 D1:C995 ED 33 07 -      ADDCYC(7)
 2131 D1:C998 CD 1D BA D1     PUSH_ABSXSPLIT_NODEP
 2132 D1:C99C CD 68 B0 D1         READ_ACCESS
 2133 D1:C9A0 CB 27 -  -          sla a
 2134 D1:C9A2 4F -  -  -          ld  c,a
 2135 D1:C9A3 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2136 D1:C9BD 41 -  -  -          ld  b,c
 2137 D1:C9BE CD 10 B1 D1         WRITE_ACCESS
 2138 D1:C9C2 E1 -  -  -      pop hl
 2139 D1:C9C3 C3 11 B9 D1     jp i6502NextLoad
 2140 D1:C9C7 -  -  -  -  
 2141 D1:C9C7 -  -  -  -  ;-----------------------------------------------------------------------------
 2142 D1:C9C7 -  -  -  -  ;LSR - Shift One Bit Right (Memory or Accumulator)
 2143 D1:C9C7 -  -  -  -  ;0 -> [76543210] -> C
 2144 D1:C9C7 -  -  -  -  ;N	Z	C	I	D	V
 2145 D1:C9C7 -  -  -  -  ;0	+	+	-	-	-
 2146 D1:C9C7 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2147 D1:C9C7 -  -  -  -  
 2148 D1:C9C7 -  -  -  -  ;accumulator	LSR A	4A	1	2  
 2149 D1:C9C7 -  -  -  -  inst6502_lsr:
 2150 D1:C9C7 ED 33 02 -      ADDCYC(2)
 2151 D1:C9CA DD 7E 00 -      ld  a,(ix+REGA)
 2152 D1:C9CD CB 3F -  -      srl a
 2153 D1:C9CF DD 77 00 -      ld  (ix+REGA),a
 2154 D1:C9D2 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2155 D1:C9EC C3 2A B9 D1     jp i6502FinishLoad
 2156 D1:C9F0 -  -  -  -  
 2157 D1:C9F0 -  -  -  -  ;zeropage	LSR oper	46	2	5  
 2158 D1:C9F0 -  -  -  -  inst6502_lsr_zp:
 2159 D1:C9F0 ED 33 05 -      ADDCYC(5)
 2160 D1:C9F3 7E -  -  -      ld  a,(hl)
 2161 D1:C9F4 01 00 38 D0     ld  bc,ZEROPAGE
 2162 D1:C9F8 81 -  -  -      add a,c
 2163 D1:C9F9 4F -  -  -      ld  c,a
 2164 D1:C9FA 0A -  -  -      ld  a,(bc)
 2165 D1:C9FB CB 3F -  -      srl a
 2166 D1:C9FD 02 -  -  -      ld  (bc),a
 2167 D1:C9FE DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2168 D1:CA18 C3 11 B9 D1     jp i6502NextLoad
 2169 D1:CA1C -  -  -  -  
 2170 D1:CA1C -  -  -  -  ;zeropage,X	LSR oper,X	56	2	6  
 2171 D1:CA1C -  -  -  -  inst6502_lsr_zpx:
 2172 D1:CA1C ED 33 06 -      ADDCYC(6)
 2173 D1:CA1F 7E -  -  -      ld  a,(hl)
 2174 D1:CA20 01 00 38 D0     ld  bc,ZEROPAGE
 2175 D1:CA24 81 -  -  -      add a,c
 2176 D1:CA25 DD 86 01 -      add a,(ix+REGX)
 2177 D1:CA28 4F -  -  -      ld  c,a
 2178 D1:CA29 0A -  -  -      ld  a,(bc)
 2179 D1:CA2A CB 3F -  -      srl a
 2180 D1:CA2C 02 -  -  -      ld  (bc),a
 2181 D1:CA2D DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2182 D1:CA47 C3 11 B9 D1     jp i6502NextLoad
 2183 D1:CA4B -  -  -  -      
 2184 D1:CA4B -  -  -  -  ;absolute	LSR oper	4E	3	6  
 2185 D1:CA4B -  -  -  -  inst6502_lsr_abs:
 2186 D1:CA4B ED 33 06 -      ADDCYC(6)
 2187 D1:CA4E CD C0 B9 D1     call subroutine6502_abs_split_start
 2188 D1:CA52 E5 -  -  -      push hl
 2189 D1:CA53 50 -  -  -          ld  d,b
 2190 D1:CA54 79 -  -  -          ld  a,c
 2191 D1:CA55 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2192 D1:CA57 ED 4C -  -          mlt bc
 2193 D1:CA59 21 00 40 D0         ld  hl,PAGETABLE
 2194 D1:CA5D 09 -  -  -          add hl,bc
 2195 D1:CA5E ED 27 -  -          ld  hl,(hl)
 2196 D1:CA60 06 00 -  -          ld  b,0
 2197 D1:CA62 4F -  -  -          ld  c,a
 2198 D1:CA63 09 -  -  -          add hl,bc   ;full address
 2199 D1:CA64 CD 68 B0 D1         READ_ACCESS
 2200 D1:CA68 CB 3F -  -          srl a
 2201 D1:CA6A 4F -  -  -          ld  c,a
 2202 D1:CA6B DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2203 D1:CA85 41 -  -  -          ld  b,c
 2204 D1:CA86 CD 10 B1 D1         WRITE_ACCESS
 2205 D1:CA8A E1 -  -  -      pop hl
 2206 D1:CA8B C3 11 B9 D1     jp i6502NextLoad
 2207 D1:CA8F -  -  -  -  
 2208 D1:CA8F -  -  -  -  ;absolute,X	LSR oper,X	5E	3	7  
 2209 D1:CA8F -  -  -  -  inst6502_lsr_absx:
 2210 D1:CA8F ED 33 07 -      ADDCYC(7)
 2211 D1:CA92 CD 1D BA D1     PUSH_ABSXSPLIT_NODEP
 2212 D1:CA96 CD 68 B0 D1         READ_ACCESS
 2213 D1:CA9A CB 3F -  -          srl a
 2214 D1:CA9C 4F -  -  -          ld  c,a
 2215 D1:CA9D DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2216 D1:CAB7 41 -  -  -          ld  b,c
 2217 D1:CAB8 CD 10 B1 D1         WRITE_ACCESS
 2218 D1:CABC E1 -  -  -      pop hl
 2219 D1:CABD C3 11 B9 D1     jp i6502NextLoad
 2220 D1:CAC1 -  -  -  -  
 2221 D1:CAC1 -  -  -  -  ;-----------------------------------------------------------------------------
 2222 D1:CAC1 -  -  -  -  ;ROL - Rotate One Bit Left (Memory or Accumulator)
 2223 D1:CAC1 -  -  -  -  ;C <- [76543210] <- C
 2224 D1:CAC1 -  -  -  -  ;N	Z	C	I	D	V
 2225 D1:CAC1 -  -  -  -  ;+	+	+	-	-	-
 2226 D1:CAC1 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2227 D1:CAC1 -  -  -  -  
 2228 D1:CAC1 -  -  -  -  ;accumulator	ROL A	2A	1	2  
 2229 D1:CAC1 -  -  -  -  inst6502_rol:
 2230 D1:CAC1 ED 33 02 -      ADDCYC(2)
 2231 D1:CAC4 DD 7E 04 -      ld  a,(ix+REGSR)
 2232 D1:CAC7 1F -  -  -      rra
 2233 D1:CAC8 DD CB 00 16     rl  (ix+REGA)
 2234 D1:CACC DD 7E 00 -      ld  a,(ix+REGA)
 2235 D1:CACF DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2236 D1:CAE9 C3 2A B9 D1     jp i6502FinishLoad
 2237 D1:CAED -  -  -  -  
 2238 D1:CAED -  -  -  -  ;zeropage	ROL oper	26	2	5  
 2239 D1:CAED -  -  -  -  inst6502_rol_zp:
 2240 D1:CAED ED 33 05 -      ADDCYC(5)
 2241 D1:CAF0 7E -  -  -      ld  a,(hl)
 2242 D1:CAF1 01 00 38 D0     ld  bc,ZEROPAGE
 2243 D1:CAF5 81 -  -  -      add a,c
 2244 D1:CAF6 4F -  -  -      ld  c,a
 2245 D1:CAF7 DD 7E 04 -      ld  a,(ix+REGSR)
 2246 D1:CAFA 1F -  -  -      rra
 2247 D1:CAFB 0A -  -  -      ld  a,(bc)
 2248 D1:CAFC 17 -  -  -      rla
 2249 D1:CAFD 02 -  -  -      ld  (bc),a
 2250 D1:CAFE DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2251 D1:CB18 C3 11 B9 D1     jp i6502NextLoad
 2252 D1:CB1C -  -  -  -  
 2253 D1:CB1C -  -  -  -  ;zeropage,X	ROL oper,X	36	2	6  
 2254 D1:CB1C -  -  -  -  inst6502_rol_zpx:
 2255 D1:CB1C ED 33 06 -      ADDCYC(6)
 2256 D1:CB1F 7E -  -  -      ld  a,(hl)
 2257 D1:CB20 01 00 38 D0     ld  bc,ZEROPAGE
 2258 D1:CB24 81 -  -  -      add a,c
 2259 D1:CB25 DD 86 01 -      add a,(ix+REGX)
 2260 D1:CB28 4F -  -  -      ld  c,a
 2261 D1:CB29 DD 7E 04 -      ld  a,(ix+REGSR)
 2262 D1:CB2C 1F -  -  -      rra
 2263 D1:CB2D 0A -  -  -      ld  a,(bc)
 2264 D1:CB2E 17 -  -  -      rla
 2265 D1:CB2F 02 -  -  -      ld  (bc),a
 2266 D1:CB30 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2267 D1:CB4A C3 11 B9 D1     jp i6502NextLoad
 2268 D1:CB4E -  -  -  -  
 2269 D1:CB4E -  -  -  -  ;absolute	ROL oper	2E	3	6  
 2270 D1:CB4E -  -  -  -  inst6502_rol_abs:
 2271 D1:CB4E ED 33 06 -      ADDCYC(6)
 2272 D1:CB51 CD C0 B9 D1     call subroutine6502_abs_split_start
 2273 D1:CB55 E5 -  -  -      push hl
 2274 D1:CB56 50 -  -  -          ld  d,b
 2275 D1:CB57 79 -  -  -          ld  a,c
 2276 D1:CB58 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2277 D1:CB5A ED 4C -  -          mlt bc
 2278 D1:CB5C 21 00 40 D0         ld  hl,PAGETABLE
 2279 D1:CB60 09 -  -  -          add hl,bc
 2280 D1:CB61 ED 27 -  -          ld  hl,(hl)
 2281 D1:CB63 06 00 -  -          ld  b,0
 2282 D1:CB65 4F -  -  -          ld  c,a
 2283 D1:CB66 09 -  -  -          add hl,bc   ;full address
 2284 D1:CB67 CD 68 B0 D1         READ_ACCESS
 2285 D1:CB6B DD 46 04 -          ld  b,(ix+REGSR)
 2286 D1:CB6E CB 18 -  -          rr b
 2287 D1:CB70 17 -  -  -          rla
 2288 D1:CB71 4F -  -  -          ld  c,a
 2289 D1:CB72 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2290 D1:CB8C 41 -  -  -          ld  b,c
 2291 D1:CB8D CD 10 B1 D1         WRITE_ACCESS
 2292 D1:CB91 E1 -  -  -      pop hl
 2293 D1:CB92 C3 11 B9 D1     jp i6502NextLoad
 2294 D1:CB96 -  -  -  -  
 2295 D1:CB96 -  -  -  -  ;absolute,X	ROL oper,X	3E	3	7  
 2296 D1:CB96 -  -  -  -  inst6502_rol_absx:
 2297 D1:CB96 ED 33 07 -      ADDCYC(7)
 2298 D1:CB99 CD 1D BA D1     PUSH_ABSXSPLIT_NODEP
 2299 D1:CB9D CD 68 B0 D1         READ_ACCESS
 2300 D1:CBA1 DD 46 04 -          ld  b,(ix+REGSR)
 2301 D1:CBA4 CB 18 -  -          rr b
 2302 D1:CBA6 17 -  -  -          rla
 2303 D1:CBA7 4F -  -  -          ld  c,a
 2304 D1:CBA8 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2305 D1:CBC2 41 -  -  -          ld  b,c
 2306 D1:CBC3 CD 10 B1 D1         WRITE_ACCESS
 2307 D1:CBC7 E1 -  -  -      pop hl
 2308 D1:CBC8 C3 11 B9 D1     jp i6502NextLoad
 2309 D1:CBCC -  -  -  -  
 2310 D1:CBCC -  -  -  -  ;-----------------------------------------------------------------------------
 2311 D1:CBCC -  -  -  -  ;ROR - Rotate One Bit Right (Memory or Accumulator)
 2312 D1:CBCC -  -  -  -  ;C -> [76543210] -> C
 2313 D1:CBCC -  -  -  -  ;N	Z	C	I	D	V
 2314 D1:CBCC -  -  -  -  ;+	+	+	-	-	-
 2315 D1:CBCC -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2316 D1:CBCC -  -  -  -  
 2317 D1:CBCC -  -  -  -  ;accumulator	ROR A	6A	1	2  
 2318 D1:CBCC -  -  -  -  inst6502_ror:
 2319 D1:CBCC ED 33 02 -      ADDCYC(2)
 2320 D1:CBCF DD 7E 04 -      ld  a,(ix+REGSR)
 2321 D1:CBD2 1F -  -  -      rra
 2322 D1:CBD3 DD CB 00 1E     rr  (ix+REGA)
 2323 D1:CBD7 DD 7E 00 -      ld  a,(ix+REGA)
 2324 D1:CBDA DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2325 D1:CBF4 C3 2A B9 D1     jp i6502FinishLoad
 2326 D1:CBF8 -  -  -  -  
 2327 D1:CBF8 -  -  -  -  ;zeropage	ROR oper	66	2	5  
 2328 D1:CBF8 -  -  -  -  inst6502_ror_zp:
 2329 D1:CBF8 ED 33 05 -      ADDCYC(5)
 2330 D1:CBFB 7E -  -  -      ld  a,(hl)
 2331 D1:CBFC 01 00 38 D0     ld  bc,ZEROPAGE
 2332 D1:CC00 81 -  -  -      add a,c
 2333 D1:CC01 4F -  -  -      ld  c,a
 2334 D1:CC02 DD 7E 04 -      ld  a,(ix+REGSR)
 2335 D1:CC05 1F -  -  -      rra
 2336 D1:CC06 0A -  -  -      ld  a,(bc)
 2337 D1:CC07 1F -  -  -      rra
 2338 D1:CC08 02 -  -  -      ld  (bc),a
 2339 D1:CC09 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2340 D1:CC23 C3 11 B9 D1     jp i6502NextLoad
 2341 D1:CC27 -  -  -  -  
 2342 D1:CC27 -  -  -  -  ;zeropage,X	ROR oper,X	76	2	6  
 2343 D1:CC27 -  -  -  -  inst6502_ror_zpx:
 2344 D1:CC27 ED 33 06 -      ADDCYC(6)
 2345 D1:CC2A 7E -  -  -      ld  a,(hl)
 2346 D1:CC2B 01 00 38 D0     ld  bc,ZEROPAGE
 2347 D1:CC2F 81 -  -  -      add a,c
 2348 D1:CC30 DD 86 01 -      add a,(ix+REGX)
 2349 D1:CC33 4F -  -  -      ld  c,a
 2350 D1:CC34 DD 7E 04 -      ld  a,(ix+REGSR)
 2351 D1:CC37 1F -  -  -      rra
 2352 D1:CC38 0A -  -  -      ld  a,(bc)
 2353 D1:CC39 1F -  -  -      rra
 2354 D1:CC3A 02 -  -  -      ld  (bc),a
 2355 D1:CC3B DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2356 D1:CC55 C3 11 B9 D1     jp i6502NextLoad
 2357 D1:CC59 -  -  -  -  
 2358 D1:CC59 -  -  -  -  ;absolute	ROR oper	6E	3	6  
 2359 D1:CC59 -  -  -  -  inst6502_ror_abs:
 2360 D1:CC59 ED 33 06 -      ADDCYC(6)
 2361 D1:CC5C CD C0 B9 D1     call subroutine6502_abs_split_start
 2362 D1:CC60 E5 -  -  -      push hl
 2363 D1:CC61 50 -  -  -          ld  d,b
 2364 D1:CC62 79 -  -  -          ld  a,c
 2365 D1:CC63 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2366 D1:CC65 ED 4C -  -          mlt bc
 2367 D1:CC67 21 00 40 D0         ld  hl,PAGETABLE
 2368 D1:CC6B 09 -  -  -          add hl,bc
 2369 D1:CC6C ED 27 -  -          ld  hl,(hl)
 2370 D1:CC6E 06 00 -  -          ld  b,0
 2371 D1:CC70 4F -  -  -          ld  c,a
 2372 D1:CC71 09 -  -  -          add hl,bc   ;full address
 2373 D1:CC72 CD 68 B0 D1         READ_ACCESS
 2374 D1:CC76 DD 46 04 -          ld  b,(ix+REGSR)
 2375 D1:CC79 CB 18 -  -          rr b
 2376 D1:CC7B 1F -  -  -          rra
 2377 D1:CC7C 4F -  -  -          ld  c,a
 2378 D1:CC7D DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2379 D1:CC97 41 -  -  -          ld  b,c
 2380 D1:CC98 CD 10 B1 D1         WRITE_ACCESS
 2381 D1:CC9C E1 -  -  -      pop hl
 2382 D1:CC9D C3 11 B9 D1     jp i6502NextLoad
 2383 D1:CCA1 -  -  -  -  
 2384 D1:CCA1 -  -  -  -  ;absolute,X	ROR oper,X	7E	3	7  
 2385 D1:CCA1 -  -  -  -  inst6502_ror_absx:
 2386 D1:CCA1 ED 33 07 -      ADDCYC(7)
 2387 D1:CCA4 CD 1D BA D1     PUSH_ABSXSPLIT_NODEP
 2388 D1:CCA8 CD 68 B0 D1         READ_ACCESS
 2389 D1:CCAC DD 46 04 -          ld  b,(ix+REGSR)
 2390 D1:CCAF CB 18 -  -          rr b
 2391 D1:CCB1 1F -  -  -          rra
 2392 D1:CCB2 4F -  -  -          ld  c,a
 2393 D1:CCB3 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2394 D1:CCCD 41 -  -  -          ld  b,c
 2395 D1:CCCE CD 10 B1 D1         WRITE_ACCESS
 2396 D1:CCD2 E1 -  -  -      pop hl
 2397 D1:CCD3 C3 11 B9 D1     jp i6502NextLoad
 2398 D1:CCD7 -  -  -  -  
 2399 D1:CCD7 -  -  -  -  ;-----------------------------------------------------------------------------
 2400 D1:CCD7 -  -  -  -  ;-----------------------------------------------------------------------------
 2401 D1:CCD7 -  -  -  -  ;-----------------------------------------------------------------------------
 2402 D1:CCD7 -  -  -  -  ;Instructions by type: Flag Instructions
 2403 D1:CCD7 -  -  -  -  
 2404 D1:CCD7 -  -  -  -  ;CLC - Clear Carry Flag
 2405 D1:CCD7 -  -  -  -  ;0 -> C
 2406 D1:CCD7 -  -  -  -  ;N	Z	C	I	D	V
 2407 D1:CCD7 -  -  -  -  ;-	-	0	-	-	-
 2408 D1:CCD7 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2409 D1:CCD7 -  -  -  -  ;implied	CLC	18	1	2  
 2410 D1:CCD7 -  -  -  -  inst6502_clc:
 2411 D1:CCD7 ED 33 02 -      ADDCYC(2)
 2412 D1:CCDA DD CB 04 86     res SF_CARRY,(ix+REGSR)
 2413 D1:CCDE C3 2A B9 D1     jp  i6502FinishLoad
 2414 D1:CCE2 -  -  -  -  
 2415 D1:CCE2 -  -  -  -  ;CLD - Clear Decimal Mode
 2416 D1:CCE2 -  -  -  -  ;0 -> D
 2417 D1:CCE2 -  -  -  -  ;N	Z	C	I	D	V
 2418 D1:CCE2 -  -  -  -  ;-	-	-	-	0	-
 2419 D1:CCE2 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2420 D1:CCE2 -  -  -  -  ;implied	CLD	D8	1	2  
 2421 D1:CCE2 -  -  -  -  inst6502_cld:
 2422 D1:CCE2 ED 33 02 -      ADDCYC(2)
 2423 D1:CCE5 DD CB 04 9E     res SF_DEC,(ix+REGSR)
 2424 D1:CCE9 C3 2A B9 D1     jp  i6502FinishLoad
 2425 D1:CCED -  -  -  -  
 2426 D1:CCED -  -  -  -  ;CLI -  Clear Interrupt Disable Bit
 2427 D1:CCED -  -  -  -  ;0 -> I
 2428 D1:CCED -  -  -  -  ;N	Z	C	I	D	V
 2429 D1:CCED -  -  -  -  ;-	-	-	0	-	-
 2430 D1:CCED -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2431 D1:CCED -  -  -  -  ;implied	CLI	58	1	2  
 2432 D1:CCED -  -  -  -  inst6502_cli:
 2433 D1:CCED ED 33 02 -      ADDCYC(2)
 2434 D1:CCF0 DD CB 04 96     res SF_INT,(ix+REGSR)
 2435 D1:CCF4 C3 2A B9 D1     jp  i6502FinishLoad
 2436 D1:CCF8 -  -  -  -  
 2437 D1:CCF8 -  -  -  -  ;CLV - Clear Overflow Flag
 2438 D1:CCF8 -  -  -  -  ;0 -> V
 2439 D1:CCF8 -  -  -  -  ;N	Z	C	I	D	V
 2440 D1:CCF8 -  -  -  -  ;-	-	-	-	-	0
 2441 D1:CCF8 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2442 D1:CCF8 -  -  -  -  ;implied	CLV	B8	1	2  
 2443 D1:CCF8 -  -  -  -  inst6502_clv:
 2444 D1:CCF8 ED 33 02 -      ADDCYC(2)
 2445 D1:CCFB DD CB 04 B6     res SF_OVER,(ix+REGSR)
 2446 D1:CCFF C3 2A B9 D1     jp  i6502FinishLoad
 2447 D1:CD03 -  -  -  -  
 2448 D1:CD03 -  -  -  -  ;SEC - Set Carry Flag
 2449 D1:CD03 -  -  -  -  ;1 -> C
 2450 D1:CD03 -  -  -  -  ;N	Z	C	I	D	V
 2451 D1:CD03 -  -  -  -  ;-	-	1	-	-	-
 2452 D1:CD03 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2453 D1:CD03 -  -  -  -  ;implied	SEC	38	1	2  
 2454 D1:CD03 -  -  -  -  inst6502_sec:
 2455 D1:CD03 ED 33 02 -      ADDCYC(2)
 2456 D1:CD06 DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 2457 D1:CD0A C3 2A B9 D1     jp  i6502FinishLoad
 2458 D1:CD0E -  -  -  -  
 2459 D1:CD0E -  -  -  -  ;SED - Set Decimal Flag
 2460 D1:CD0E -  -  -  -  ;1 -> D
 2461 D1:CD0E -  -  -  -  ;N	Z	C	I	D	V
 2462 D1:CD0E -  -  -  -  ;-	-	-	-	1	-
 2463 D1:CD0E -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2464 D1:CD0E -  -  -  -  ;implied	SED	F8	1	2  
 2465 D1:CD0E -  -  -  -  inst6502_sed:
 2466 D1:CD0E ED 33 02 -      ADDCYC(2)
 2467 D1:CD11 DD CB 04 DE     set SF_DEC,(ix+REGSR)
 2468 D1:CD15 C3 2A B9 D1     jp  i6502FinishLoad
 2469 D1:CD19 -  -  -  -  
 2470 D1:CD19 -  -  -  -  ;SEI - Set Interrupt Disable Status
 2471 D1:CD19 -  -  -  -  ;1 -> I
 2472 D1:CD19 -  -  -  -  ;N	Z	C	I	D	V
 2473 D1:CD19 -  -  -  -  ;-	-	-	1	-	-
 2474 D1:CD19 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2475 D1:CD19 -  -  -  -  ;implied	SEI	78	1	2  
 2476 D1:CD19 -  -  -  -  inst6502_sei:
 2477 D1:CD19 ED 33 02 -      ADDCYC(2)
 2478 D1:CD1C DD CB 04 D6     set SF_INT,(ix+REGSR)
 2479 D1:CD20 C3 2A B9 D1     jp  i6502FinishLoad
 2480 D1:CD24 -  -  -  -  
 2481 D1:CD24 -  -  -  -  ;-----------------------------------------------------------------------------
 2482 D1:CD24 -  -  -  -  ;-----------------------------------------------------------------------------
 2483 D1:CD24 -  -  -  -  ;-----------------------------------------------------------------------------
 2484 D1:CD24 -  -  -  -  ;Instructions by type: Comparisons
 2485 D1:CD24 -  -  -  -  
 2486 D1:CD24 -  -  -  -  ;CMP - Compare Memory with Accumulator
 2487 D1:CD24 -  -  -  -  ;A - M
 2488 D1:CD24 -  -  -  -  ;N	Z	C	I	D	V
 2489 D1:CD24 -  -  -  -  ;+	+	+	-	-	-
 2490 D1:CD24 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2491 D1:CD24 -  -  -  -  
 2492 D1:CD24 -  -  -  -  ;immediate	CMP #oper	C9	2	2  
 2493 D1:CD24 -  -  -  -  inst6502_cmp_imm:
 2494 D1:CD24 ED 33 02 -      ADDCYC(2)
 2495 D1:CD27 46 -  -  -      ld  b,(hl)
 2496 D1:CD28 C3 B6 BA D1     jp  subroutine6502_cmp_combined_end
 2497 D1:CD2C -  -  -  -  
 2498 D1:CD2C -  -  -  -  ;zeropage	CMP oper	C5	2	3  
 2499 D1:CD2C -  -  -  -  inst6502_cmp_zp:
 2500 D1:CD2C ED 33 03 -      ADDCYC(3)
 2501 D1:CD2F 01 00 38 D0     ld  bc,ZEROPAGE
 2502 D1:CD33 4E -  -  -      ld  c,(hl)
 2503 D1:CD34 0A -  -  -      ld  a,(bc)
 2504 D1:CD35 47 -  -  -      ld  b,a
 2505 D1:CD36 C3 B6 BA D1     jp  subroutine6502_cmp_combined_end
 2506 D1:CD3A -  -  -  -  
 2507 D1:CD3A -  -  -  -  ;zeropage,X	CMP oper,X	D5	2	4  
 2508 D1:CD3A -  -  -  -  inst6502_cmp_zpx:
 2509 D1:CD3A ED 33 04 -      ADDCYC(4)
 2510 D1:CD3D 7E -  -  -      ld  a,(hl)
 2511 D1:CD3E 01 00 38 D0     ld  bc,ZEROPAGE
 2512 D1:CD42 81 -  -  -      add a,c
 2513 D1:CD43 DD 86 01 -      add a,(ix+REGX)
 2514 D1:CD46 4F -  -  -      ld  c,a
 2515 D1:CD47 0A -  -  -      ld  a,(bc)
 2516 D1:CD48 47 -  -  -      ld  b,a
 2517 D1:CD49 C3 B6 BA D1     jp  subroutine6502_cmp_combined_end
 2518 D1:CD4D -  -  -  -  
 2519 D1:CD4D -  -  -  -  ;absolute	CMP oper	CD	3	4  
 2520 D1:CD4D -  -  -  -  inst6502_cmp_abs:
 2521 D1:CD4D ED 33 04 -      ADDCYC(4)
 2522 D1:CD50 CD C0 B9 D1     call subroutine6502_abs_split_start
 2523 D1:CD54 E5 -  -  -      push hl
 2524 D1:CD55 50 -  -  -          ld  d,b
 2525 D1:CD56 79 -  -  -          ld  a,c
 2526 D1:CD57 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2527 D1:CD59 ED 4C -  -          mlt bc
 2528 D1:CD5B 21 00 40 D0         ld  hl,PAGETABLE
 2529 D1:CD5F 09 -  -  -          add hl,bc
 2530 D1:CD60 ED 27 -  -          ld  hl,(hl)
 2531 D1:CD62 06 00 -  -          ld  b,0
 2532 D1:CD64 4F -  -  -          ld  c,a
 2533 D1:CD65 09 -  -  -          add hl,bc   ;full address
 2534 D1:CD66 CD 68 B0 D1         READ_ACCESS
 2535 D1:CD6A E1 -  -  -      pop hl
 2536 D1:CD6B 47 -  -  -      ld  b,a
 2537 D1:CD6C C3 B6 BA D1     jp  subroutine6502_cmp_combined_end
 2538 D1:CD70 -  -  -  -  
 2539 D1:CD70 -  -  -  -  ;absolute,X	CMP oper,X	DD	3	4* 
 2540 D1:CD70 -  -  -  -  inst6502_cmp_absx:
 2541 D1:CD70 ED 33 04 -      ADDCYC(4)
 2542 D1:CD73 CD E1 B9 D1     PUSH_ABSXSPLIT
 2543 D1:CD77 CD 68 B0 D1         READ_ACCESS
 2544 D1:CD7B E1 -  -  -      pop hl
 2545 D1:CD7C 47 -  -  -      ld  b,a
 2546 D1:CD7D C3 B6 BA D1     jp  subroutine6502_cmp_combined_end
 2547 D1:CD81 -  -  -  -  
 2548 D1:CD81 -  -  -  -  ;absolute,Y	CMP oper,Y	D9	3	4* 
 2549 D1:CD81 -  -  -  -  inst6502_cmp_absy:
 2550 D1:CD81 ED 33 04 -      ADDCYC(4)
 2551 D1:CD84 CD DC B9 D1     PUSH_ABSYSPLIT
 2552 D1:CD88 CD 68 B0 D1         READ_ACCESS
 2553 D1:CD8C E1 -  -  -      pop hl
 2554 D1:CD8D 47 -  -  -      ld  b,a
 2555 D1:CD8E C3 B6 BA D1     jp  subroutine6502_cmp_combined_end
 2556 D1:CD92 -  -  -  -  
 2557 D1:CD92 -  -  -  -  ;(indirect,X)	CMP (oper,X)	C1	2	6  
 2558 D1:CD92 -  -  -  -  inst6502_cmp_indx:
 2559 D1:CD92 ED 33 06 -      ADDCYC(6)
 2560 D1:CD95 E5 -  -  -      push hl
 2561 D1:CD96 7E -  -  -          ld  a,(hl)
 2562 D1:CD97 21 00 38 D0         ld  hl,ZEROPAGE
 2563 D1:CD9B 85 -  -  -          add a,L
 2564 D1:CD9C DD 86 01 -          add a,(ix+REGX)
 2565 D1:CD9F 6F -  -  -          ld  L,a
 2566 D1:CDA0 7E -  -  -          ld  a,(hl)
 2567 D1:CDA1 2C -  -  -          inc L
 2568 D1:CDA2 56 -  -  -          ld  d,(hl)
 2569 D1:CDA3 42 -  -  -          ld  b,d
 2570 D1:CDA4 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2571 D1:CDA6 ED 4C -  -          mlt bc
 2572 D1:CDA8 21 00 40 D0         ld  hl,PAGETABLE
 2573 D1:CDAC 09 -  -  -          add hl,bc
 2574 D1:CDAD ED 27 -  -          ld  hl,(hl)
 2575 D1:CDAF 06 00 -  -          ld  b,0
 2576 D1:CDB1 4F -  -  -          ld  c,a
 2577 D1:CDB2 09 -  -  -          add hl,bc
 2578 D1:CDB3 CD 68 B0 D1         READ_ACCESS
 2579 D1:CDB7 E1 -  -  -      pop hl
 2580 D1:CDB8 47 -  -  -      ld  b,a
 2581 D1:CDB9 C3 B6 BA D1     jp  subroutine6502_cmp_combined_end
 2582 D1:CDBD -  -  -  -  
 2583 D1:CDBD -  -  -  -  ;(indirect),Y	CMP (oper),Y	D1	2	5* 
 2584 D1:CDBD -  -  -  -  inst6502_cmp_indy:
 2585 D1:CDBD ED 33 05 -      ADDCYC(5)
 2586 D1:CDC0 E5 -  -  -      push hl
 2587 D1:CDC1 7E -  -  -          ld  a,(hl)
 2588 D1:CDC2 21 00 38 D0         ld  hl,ZEROPAGE
 2589 D1:CDC6 85 -  -  -          add a,L
 2590 D1:CDC7 6F -  -  -          ld  L,a
 2591 D1:CDC8 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 2592 D1:CDC9 2C -  -  -          inc L
 2593 D1:CDCA DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 2594 D1:CDCD 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 2595 D1:CDCE 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 2596 D1:CDD0 24 -  -  -          inc h
 2597 D1:CDD1 FD 23 -  -          ADDCYC(1)
 2598 D1:CDD3 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 2599 D1:CDD4 2E 0C -  -          ld  L,BASETABLE_STRIDE
 2600 D1:CDD6 ED 6C -  -          mlt hl          ;23.
 2601 D1:CDD8 01 00 40 D0         ld  bc,PAGETABLE
 2602 D1:CDDC 09 -  -  -          add hl,bc
 2603 D1:CDDD ED 27 -  -          ld  hl,(hl)     ;address get.
 2604 D1:CDDF 01 00 00 00         ld  bc,0
 2605 D1:CDE3 4F -  -  -          ld  c,a
 2606 D1:CDE4 09 -  -  -          add hl,bc       ;Full address get.
 2607 D1:CDE5 CD 68 B0 D1         READ_ACCESS
 2608 D1:CDE9 E1 -  -  -      pop hl
 2609 D1:CDEA 47 -  -  -      ld  b,a
 2610 D1:CDEB C3 B6 BA D1     jp  subroutine6502_cmp_combined_end
 2611 D1:CDEF -  -  -  -  
 2612 D1:CDEF -  -  -  -  ;-----------------------------------------------------------------------------
 2613 D1:CDEF -  -  -  -  ;CPX - Compare Memory and Index X
 2614 D1:CDEF -  -  -  -  ;X - M
 2615 D1:CDEF -  -  -  -  ;N	Z	C	I	D	V
 2616 D1:CDEF -  -  -  -  ;+	+	+	-	-	-
 2617 D1:CDEF -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2618 D1:CDEF -  -  -  -  ;immediate	CPX #oper	E0	2	2  
 2619 D1:CDEF -  -  -  -  inst6502_cpx_imm:
 2620 D1:CDEF ED 33 02 -      ADDCYC(2)
 2621 D1:CDF2 DD 7E 01 -      ld  a,(ix+REGX)
 2622 D1:CDF5 96 -  -  -      sub a,(hl)
 2623 D1:CDF6 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2624 D1:CDF7 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2625 D1:CE11 C3 11 B9 D1     jp  i6502NextLoad
 2626 D1:CE15 -  -  -  -  
 2627 D1:CE15 -  -  -  -  ;zeropage	CPX oper	E4	2	3  
 2628 D1:CE15 -  -  -  -  inst6502_cpx_zp:
 2629 D1:CE15 ED 33 03 -      ADDCYC(3)
 2630 D1:CE18 01 00 38 D0     ld  bc,ZEROPAGE
 2631 D1:CE1C 4E -  -  -      ld  c,(hl)
 2632 D1:CE1D 0A -  -  -      ld  a,(bc)
 2633 D1:CE1E 47 -  -  -      ld  b,a
 2634 D1:CE1F DD 7E 01 -      ld  a,(ix+REGX)
 2635 D1:CE22 90 -  -  -      sub a,b
 2636 D1:CE23 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2637 D1:CE24 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2638 D1:CE3E C3 11 B9 D1     jp i6502NextLoad
 2639 D1:CE42 -  -  -  -  ;absolute	CPX oper	EC	3	4  
 2640 D1:CE42 -  -  -  -  inst6502_cpx_abs:
 2641 D1:CE42 ED 33 04 -      ADDCYC(4)
 2642 D1:CE45 CD C0 B9 D1     call subroutine6502_abs_split_start
 2643 D1:CE49 E5 -  -  -      push hl
 2644 D1:CE4A 50 -  -  -          ld  d,b
 2645 D1:CE4B 79 -  -  -          ld  a,c
 2646 D1:CE4C 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2647 D1:CE4E ED 4C -  -          mlt bc
 2648 D1:CE50 21 00 40 D0         ld  hl,PAGETABLE
 2649 D1:CE54 09 -  -  -          add hl,bc
 2650 D1:CE55 ED 27 -  -          ld  hl,(hl)
 2651 D1:CE57 06 00 -  -          ld  b,0
 2652 D1:CE59 4F -  -  -          ld  c,a
 2653 D1:CE5A 09 -  -  -          add hl,bc   ;full address
 2654 D1:CE5B CD 68 B0 D1         READ_ACCESS
 2655 D1:CE5F E1 -  -  -      pop hl
 2656 D1:CE60 47 -  -  -      ld  b,a
 2657 D1:CE61 DD 7E 01 -      ld  a,(ix+REGX)
 2658 D1:CE64 90 -  -  -      sub a,b
 2659 D1:CE65 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2660 D1:CE66 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2661 D1:CE80 C3 11 B9 D1     jp i6502NextLoad
 2662 D1:CE84 -  -  -  -  
 2663 D1:CE84 -  -  -  -  ;-----------------------------------------------------------------------------
 2664 D1:CE84 -  -  -  -  ;CPY - Compare Memory and Index Y
 2665 D1:CE84 -  -  -  -  ;Y - M
 2666 D1:CE84 -  -  -  -  ;N	Z	C	I	D	V
 2667 D1:CE84 -  -  -  -  ;+	+	+	-	-	-
 2668 D1:CE84 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2669 D1:CE84 -  -  -  -  ;immediate	CPY #oper	C0	2	2  
 2670 D1:CE84 -  -  -  -  inst6502_cpy_imm:
 2671 D1:CE84 ED 33 02 -      ADDCYC(2)
 2672 D1:CE87 DD 7E 02 -      ld  a,(ix+REGY)
 2673 D1:CE8A 96 -  -  -      sub a,(hl)
 2674 D1:CE8B 3F -  -  -      ccf
 2675 D1:CE8C DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2676 D1:CEA6 C3 11 B9 D1     jp  i6502NextLoad
 2677 D1:CEAA -  -  -  -  
 2678 D1:CEAA -  -  -  -  ;zeropage	CPY oper	C4	2	3  
 2679 D1:CEAA -  -  -  -  inst6502_cpy_zp:
 2680 D1:CEAA ED 33 03 -      ADDCYC(3)
 2681 D1:CEAD 7E -  -  -      ld  a,(hl)
 2682 D1:CEAE 01 00 38 D0     ld  bc,ZEROPAGE
 2683 D1:CEB2 81 -  -  -      add a,c
 2684 D1:CEB3 4F -  -  -      ld  c,a
 2685 D1:CEB4 0A -  -  -      ld  a,(bc)
 2686 D1:CEB5 47 -  -  -      ld  b,a
 2687 D1:CEB6 DD 7E 02 -      ld  a,(ix+REGY)
 2688 D1:CEB9 90 -  -  -      sub a,b
 2689 D1:CEBA 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2690 D1:CEBB DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2691 D1:CED5 C3 11 B9 D1     jp i6502NextLoad
 2692 D1:CED9 -  -  -  -  
 2693 D1:CED9 -  -  -  -  ;absolute	CPY oper	CC	3	4  
 2694 D1:CED9 -  -  -  -  inst6502_cpy_abs:
 2695 D1:CED9 ED 33 04 -      ADDCYC(4)
 2696 D1:CEDC CD C0 B9 D1     call subroutine6502_abs_split_start
 2697 D1:CEE0 E5 -  -  -      push hl
 2698 D1:CEE1 50 -  -  -          ld  d,b
 2699 D1:CEE2 79 -  -  -          ld  a,c
 2700 D1:CEE3 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2701 D1:CEE5 ED 4C -  -          mlt bc
 2702 D1:CEE7 21 00 40 D0         ld  hl,PAGETABLE
 2703 D1:CEEB 09 -  -  -          add hl,bc
 2704 D1:CEEC ED 27 -  -          ld  hl,(hl)
 2705 D1:CEEE 06 00 -  -          ld  b,0
 2706 D1:CEF0 4F -  -  -          ld  c,a
 2707 D1:CEF1 09 -  -  -          add hl,bc   ;full address
 2708 D1:CEF2 CD 68 B0 D1         READ_ACCESS
 2709 D1:CEF6 E1 -  -  -      pop hl
 2710 D1:CEF7 47 -  -  -      ld  b,a
 2711 D1:CEF8 DD 7E 02 -      ld  a,(ix+REGY)
 2712 D1:CEFB 90 -  -  -      sub a,b
 2713 D1:CEFC 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2714 D1:CEFD DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2715 D1:CF17 C3 11 B9 D1     jp i6502NextLoad
 2716 D1:CF1B -  -  -  -  
 2717 D1:CF1B -  -  -  -  
 2718 D1:CF1B -  -  -  -  ;-----------------------------------------------------------------------------
 2719 D1:CF1B -  -  -  -  ;-----------------------------------------------------------------------------
 2720 D1:CF1B -  -  -  -  ;-----------------------------------------------------------------------------
 2721 D1:CF1B -  -  -  -  ;Instructions by type: Conditional Branch Instructions
 2722 D1:CF1B -  -  -  -  
 2723 D1:CF1B -  -  -  -  ;branch on C=0
 2724 D1:CF1B -  -  -  -  ;relative	BCC oper	90	2	2**
 2725 D1:CF1B -  -  -  -  inst6502_bcc:
 2726 D1:CF1B ED 33 02 -      ADDCYC(2)
 2727 D1:CF1E DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2728 D1:CF22 C2 11 B9 D1     jp  nz,i6502NextLoad
 2729 D1:CF26 C3 D9 BA D1     jp  subroutine6502_take_branch
 2730 D1:CF2A -  -  -  -  
 2731 D1:CF2A -  -  -  -  ;branch on C=1
 2732 D1:CF2A -  -  -  -  ;relative	BCS oper	B0	2	2**
 2733 D1:CF2A -  -  -  -  inst6502_bcs:
 2734 D1:CF2A ED 33 02 -      ADDCYC(2)
 2735 D1:CF2D DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2736 D1:CF31 CA 11 B9 D1     jp  z,i6502NextLoad
 2737 D1:CF35 C3 D9 BA D1     jp  subroutine6502_take_branch
 2738 D1:CF39 -  -  -  -  
 2739 D1:CF39 -  -  -  -  ;branch on Z=1
 2740 D1:CF39 -  -  -  -  ;relative	BEQ oper	F0	2	2**
 2741 D1:CF39 -  -  -  -  inst6502_beq:
 2742 D1:CF39 ED 33 02 -      ADDCYC(2)
 2743 D1:CF3C DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2744 D1:CF40 CA 11 B9 D1     jp  z,i6502NextLoad
 2745 D1:CF44 C3 F4 BA D1     jp  subroutine6502_take_branch_waitloop_detect
 2746 D1:CF48 -  -  -  -  
 2747 D1:CF48 -  -  -  -  ;branch on N=1
 2748 D1:CF48 -  -  -  -  ;relative	BMI oper	30	2	2**
 2749 D1:CF48 -  -  -  -  inst6502_bmi:
 2750 D1:CF48 ED 33 02 -      ADDCYC(2)
 2751 D1:CF4B DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2752 D1:CF4F CA 11 B9 D1     jp  z,i6502NextLoad
 2753 D1:CF53 C3 D9 BA D1     jp  subroutine6502_take_branch
 2754 D1:CF57 -  -  -  -  
 2755 D1:CF57 -  -  -  -  
 2756 D1:CF57 -  -  -  -  ;branch on Z=0
 2757 D1:CF57 -  -  -  -  ;relative	BNE oper	D0	2	2**
 2758 D1:CF57 -  -  -  -  inst6502_bne:
 2759 D1:CF57 ED 33 02 -      ADDCYC(2)
 2760 D1:CF5A DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2761 D1:CF5E C2 11 B9 D1     jp  nz,i6502NextLoad
 2762 D1:CF62 C3 D9 BA D1     jp  subroutine6502_take_branch
 2763 D1:CF66 -  -  -  -  
 2764 D1:CF66 -  -  -  -  ;branch on N=0
 2765 D1:CF66 -  -  -  -  ;relative	BPL oper	10	2	2**
 2766 D1:CF66 -  -  -  -  inst6502_bpl:
 2767 D1:CF66 ED 33 02 -      ADDCYC(2)
 2768 D1:CF69 DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2769 D1:CF6D C2 11 B9 D1     jp  nz,i6502NextLoad
 2770 D1:CF71 C3 D9 BA D1     jp  subroutine6502_take_branch
 2771 D1:CF75 -  -  -  -  
 2772 D1:CF75 -  -  -  -  ;branch on V=0
 2773 D1:CF75 -  -  -  -  ;relative	BVC oper	50	2	2**
 2774 D1:CF75 -  -  -  -  inst6502_bvc:
 2775 D1:CF75 ED 33 02 -      ADDCYC(2)
 2776 D1:CF78 DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2777 D1:CF7C C2 11 B9 D1     jp  nz,i6502NextLoad
 2778 D1:CF80 C3 D9 BA D1     jp  subroutine6502_take_branch
 2779 D1:CF84 -  -  -  -  
 2780 D1:CF84 -  -  -  -  ;branch on V=1
 2781 D1:CF84 -  -  -  -  ;relative	BVS oper	70	2	2**
 2782 D1:CF84 -  -  -  -  inst6502_bvs:
 2783 D1:CF84 ED 33 02 -      ADDCYC(2)
 2784 D1:CF87 DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2785 D1:CF8B CA 11 B9 D1     jp  z,i6502NextLoad
 2786 D1:CF8F C3 D9 BA D1     jp  subroutine6502_take_branch
 2787 D1:CF93 -  -  -  -  
 2788 D1:CF93 -  -  -  -  ;-----------------------------------------------------------------------------
 2789 D1:CF93 -  -  -  -  ;-----------------------------------------------------------------------------
 2790 D1:CF93 -  -  -  -  ;-----------------------------------------------------------------------------
 2791 D1:CF93 -  -  -  -  ;Instructions by type: Interrupts
 2792 D1:CF93 -  -  -  -  
 2793 D1:CF93 -  -  -  -  ;BRK - Force Break
 2794 D1:CF93 -  -  -  -  ;BRK initiates a software interrupt similar to a hardware
 2795 D1:CF93 -  -  -  -  ;interrupt (IRQ). The return address pushed to the stack is
 2796 D1:CF93 -  -  -  -  ;PC+2, providing an extra byte of spacing for a break mark
 2797 D1:CF93 -  -  -  -  ;(identifying a reason for the break.)
 2798 D1:CF93 -  -  -  -  ;The status register will be pushed to the stack with the break
 2799 D1:CF93 -  -  -  -  ;flag set to 1. However, when retrieved during RTI or by a PLP
 2800 D1:CF93 -  -  -  -  ;instruction, the break flag will be ignored.
 2801 D1:CF93 -  -  -  -  ;The interrupt disable flag is not set automatically.
 2802 D1:CF93 -  -  -  -  ;
 2803 D1:CF93 -  -  -  -  ;interrupt,             N	Z	C	I	D	V
 2804 D1:CF93 -  -  -  -  ;push PC+2, push SR     -	-	-	1	-	-
 2805 D1:CF93 -  -  -  -  ;implied	BRK	00	1	7  
 2806 D1:CF93 -  -  -  -  inst6502_brk:
 2807 D1:CF93 ED 33 07 -      ADDCYC(7)
 2808 D1:CF96 21 00 39 D0     ld  hl,STACKBASE
 2809 D1:CF9A DD 6E 03 -      ld  L,(ix+REGSP)
 2810 D1:CF9D 52 DD 17 05     ld.s de,(ix+REGPC)
 2811 D1:CFA1 13 -  -  -      inc de      ;that extra spacer.
 2812 D1:CFA2 72 -  -  -      ld  (hl),d
 2813 D1:CFA3 2D -  -  -      dec L
 2814 D1:CFA4 73 -  -  -      ld  (hl),e
 2815 D1:CFA5 2D -  -  -      dec L
 2816 D1:CFA6 DD 7E 04 -      ld  a,(ix+REGSR)
 2817 D1:CFA9 CB D7 -  -      set SF_INT,a
 2818 D1:CFAB 77 -  -  -      ld  (hl),a
 2819 D1:CFAC 2D -  -  -      dec L
 2820 D1:CFAD DD 75 03 -      ld  (ix+REGSP),L
 2821 D1:CFB0 DD CB 1E 46     WAS_NMI_TRIGGERED
 2822 D1:CFB4 01 FE 00 00     ld  bc,$FE  ;IRQ vector
 2823 D1:CFB8 28 04 -  -      jr  z,+_
 2824 D1:CFBA 01 FA 00 00     ld  bc,$FA  ;NMI vector, if NMI is hijacking this instruction.
 2825 D1:CFBE 21 F4 4B D0 _:  ld  hl,(BASETABLE_STRIDE*$FF)+PAGETABLE
 2826 D1:CFC2 ED 27 -  -      ld  hl,(hl)
 2827 D1:CFC4 09 -  -  -      add hl,bc
 2828 D1:CFC5 ED 17 -  -      ld  de,(hl)
 2829 D1:CFC7 52 DD 1F 05     ld.s (ix+REGPC),de
 2830 D1:CFCB C3 FB B8 D1     jp  i6502FirstLoad
 2831 D1:CFCF -  -  -  -  
 2832 D1:CFCF -  -  -  -  ;RTI - Return from Interrupt
 2833 D1:CFCF -  -  -  -  ;The status register is pulled with the break flag
 2834 D1:CFCF -  -  -  -  ;and bit 5 ignored. Then PC is pulled from the stack.
 2835 D1:CFCF -  -  -  -  ;pull SR, pull PC      N Z C I D V
 2836 D1:CFCF -  -  -  -  ;                      from stack
 2837 D1:CFCF -  -  -  -  ;implied	RTI	40	1	6  
 2838 D1:CFCF -  -  -  -  inst6502_rti:
 2839 D1:CFCF 21 00 39 D0     ld  hl,STACKBASE
 2840 D1:CFD3 DD 6E 03 -      ld  l,(ix+REGSP)
 2841 D1:CFD6 2C -  -  -      inc l
 2842 D1:CFD7 7E -  -  -      ld  a,(hl)
 2843 D1:CFD8 2C -  -  -      inc l
 2844 D1:CFD9 5E -  -  -      ld  e,(hl)
 2845 D1:CFDA 2C -  -  -      inc l
 2846 D1:CFDB 56 -  -  -      ld  d,(hl)
 2847 D1:CFDC DD 75 03 -      ld  (ix+REGSP),l
 2848 D1:CFDF 52 DD 1F 05     ld.s (ix+REGPC),de
 2849 D1:CFE3 DD 46 04 -      ld  b,(ix+REGSR)
 2850 D1:CFE6 A8 -  -  -      xor a,b
 2851 D1:CFE7 E6 DF -  -      and a,%11011111
 2852 D1:CFE9 A8 -  -  -      xor a,b
 2853 D1:CFEA DD 77 04 -      ld  (ix+REGSR),a
 2854 D1:CFED ED 33 06 -      ADDCYC(6)
 2855 D1:CFF0 C3 FB B8 D1     jp  i6502FirstLoad
 2856 D1:CFF4 -  -  -  -  
 2857 D1:CFF4 -  -  -  -  
 2858 D1:CFF4 -  -  -  -  
 2859 D1:CFF4 -  -  -  -  ;-----------------------------------------------------------------------------
 2860 D1:CFF4 -  -  -  -  ;-----------------------------------------------------------------------------
 2861 D1:CFF4 -  -  -  -  ;-----------------------------------------------------------------------------
 2862 D1:CFF4 -  -  -  -  ;Instructions by type: Jumps and Subroutines
 2863 D1:CFF4 -  -  -  -  
 2864 D1:CFF4 -  -  -  -  ;absolute	JMP oper	4C	3	3  
 2865 D1:CFF4 -  -  -  -  inst6052_jmp_abs:
 2866 D1:CFF4 -  -  -  -      ;The waitloop handler requires that the ADDCYC() is NOT done until
 2867 D1:CFF4 -  -  -  -      ;after the jump to do the wait happens. This is because it's possible
 2868 D1:CFF4 -  -  -  -      ;that an IRQ/NMI may be skipped if ADDCYC() is done first.
 2869 D1:CFF4 DD 56 06 -      ld  d,(ix+REGPC+1)
 2870 D1:CFF7 7E -  -  -      ld  a,(hl)
 2871 D1:CFF8 23 -  -  -      inc hl
 2872 D1:CFF9 1C -  -  -      inc e
 2873 D1:CFFA 20 0D -  -      jr  nz,+_
 2874 D1:CFFC 14 -  -  -      inc d
 2875 D1:CFFD 4A -  -  -      ld  c,d
 2876 D1:CFFE 06 0C -  -      ld  b,BASETABLE_STRIDE
 2877 D1:D000 ED 4C -  -      mlt bc
 2878 D1:D002 21 00 40 D0     ld  hl,PAGETABLE
 2879 D1:D006 09 -  -  -      add hl,bc
 2880 D1:D007 ED 27 -  -      ld  hl,(hl)
 2881 D1:D009 66 -  -  -  _:  ld  h,(hl)
 2882 D1:D00A 6F -  -  -      ld  l,a     ;HL=newaddr
 2883 D1:D00B 1B -  -  -      dec de
 2884 D1:D00C 1B -  -  -      dec de      ;DE=oldaddr, at start of instruction
 2885 D1:D00D 52 EB -  -      ex.s de,hl  ;HL=oldaddr, DE=newaddr. Upper bytes cleared.
 2886 D1:D00F B7 -  -  -      or  a,a
 2887 D1:D010 ED 52 -  -      sbc hl,de   ;infinite loop detection
 2888 D1:D012 52 DD 1F 05     ld.s (ix+REGPC),de
 2889 D1:D016 28 07 -  -      jr  z,inst6052_jmp_abs_inf_loop
 2890 D1:D018 ED 33 03 -      ADDCYC(3)
 2891 D1:D01B C3 FB B8 D1     jp i6502FirstLoad
 2892 D1:D01F -  -  -  -  
 2893 D1:D01F -  -  -  -  inst6052_jmp_abs_inf_loop:
 2894 D1:D01F ED 03 00 -      lea bc,iy+0
 2895 D1:D022 2A 4B B9 D1     ld  hl,(i6502_interrupt_timer)
 2896 D1:D026 DD 2F 1B -      ld  (ix+TEMP_MEMORY),hl
 2897 D1:D029 DD 7E 1D -      ld  a,(ix+TEMP_MEMORY+2)
 2898 D1:D02C 2F -  -  -      cpl
 2899 D1:D02D DD 77 1D -      ld  (ix+TEMP_MEMORY+2),a
 2900 D1:D030 DD 27 1B -      ld  hl,(ix+TEMP_MEMORY)
 2901 D1:D033 7D -  -  -      ld  a,l
 2902 D1:D034 2F -  -  -      cpl
 2903 D1:D035 6F -  -  -      ld  l,a
 2904 D1:D036 7C -  -  -      ld  a,h
 2905 D1:D037 2F -  -  -      cpl
 2906 D1:D038 67 -  -  -      ld  h,a
 2907 D1:D039 23 -  -  -      inc hl
 2908 D1:D03A E5 -  -  -      push hl
 2909 D1:D03B FD E1 -  -      pop iy      ;screw accurate timing. I just want it to go brrt
 2910 D1:D03D -  -  -  -      ;TODO: Accurate timing is probably a necessary thing. Maybe do proper
 2911 D1:D03D -  -  -  -      ;math to figure this one out.
 2912 D1:D03D C3 FB B8 D1     jp  i6502FirstLoad  
 2913 D1:D041 -  -  -  -      
 2914 D1:D041 -  -  -  -  
 2915 D1:D041 -  -  -  -  
 2916 D1:D041 -  -  -  -  
 2917 D1:D041 -  -  -  -  ;Note: In earlier 6502 implementations, cross-page reads on indirect is bugged.
 2918 D1:D041 -  -  -  -  ;   The end effect would be that inst6502_jmp_indir_splitread would wrap around
 2919 D1:D041 -  -  -  -  ;   to the start of the current page rather than try to read the next page.
 2920 D1:D041 -  -  -  -  ;indirect	JMP (oper)	6C	3	5  
 2921 D1:D041 -  -  -  -  inst6502_jmp_indir:
 2922 D1:D041 ED 33 05 -      ADDCYC(5)
 2923 D1:D044 -  -  -  -      ;Doing much the same as abs_split_start below, except with fewer things
 2924 D1:D044 -  -  -  -      ;because we don't need to preserve any of the other stuff.
 2925 D1:D044 4E -  -  -      ld  c,(hl)
 2926 D1:D045 23 -  -  -      inc hl
 2927 D1:D046 1C -  -  -      inc e
 2928 D1:D047 20 0F -  -      jr  nz,+_
 2929 D1:D049 DD 56 06 -      ld  d,(ix+REGPC+1)
 2930 D1:D04C 14 -  -  -      inc d
 2931 D1:D04D 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2932 D1:D04F ED 5C -  -      mlt de
 2933 D1:D051 21 00 40 D0     ld  hl,PAGETABLE
 2934 D1:D055 19 -  -  -      add hl,de
 2935 D1:D056 ED 27 -  -      ld  hl,(hl)
 2936 D1:D058 46 -  -  -  _:  ld  b,(hl)
 2937 D1:D059 79 -  -  -      ld  a,c
 2938 D1:D05A 0C -  -  -      inc c   ;check if there will be a split read.
 2939 D1:D05B 0E 0C -  -      ld  c,BASETABLE_STRIDE  ;Flags not affected
 2940 D1:D05D ED 4C -  -      mlt bc                  ;Flags not affected
 2941 D1:D05F 21 00 40 D0     ld  hl,PAGETABLE        ;Flags not affected
 2942 D1:D063 CA 78 D0 D1     jp  z,inst6502_jmp_indir_splitRead
 2943 D1:D067 09 -  -  -      add hl,bc
 2944 D1:D068 ED 27 -  -      ld  hl,(hl)
 2945 D1:D06A 06 00 -  -      ld  b,0
 2946 D1:D06C 4F -  -  -      ld  c,a
 2947 D1:D06D 09 -  -  -      add hl,bc
 2948 D1:D06E ED 27 -  -      ld  hl,(hl)
 2949 D1:D070 52 DD 2F 05     ld.s (ix+REGPC),hl
 2950 D1:D074 C3 FB B8 D1     jp  i6502FirstLoad
 2951 D1:D078 -  -  -  -  inst6502_jmp_indir_splitRead:
 2952 D1:D078 09 -  -  -      add hl,bc
 2953 D1:D079 ED 27 -  -      ld  hl,(hl)
 2954 D1:D07B 7E -  -  -      ld  a,(hl)  ;high byte
 2955 D1:D07C 01 FF 00 00     ld  bc,255
 2956 D1:D080 09 -  -  -      add hl,bc
 2957 D1:D081 4E -  -  -      ld  c,(hl)  ;low byte
 2958 D1:D082 47 -  -  -      ld  b,a
 2959 D1:D083 52 DD 0F 05     ld.s (ix+REGPC),bc
 2960 D1:D087 C3 FB B8 D1     jp  i6502FirstLoad
 2961 D1:D08B -  -  -  -  
 2962 D1:D08B -  -  -  -  
 2963 D1:D08B -  -  -  -  
 2964 D1:D08B -  -  -  -  
 2965 D1:D08B -  -  -  -  
 2966 D1:D08B -  -  -  -  ;absolute	JSR oper	20	3	6  
 2967 D1:D08B -  -  -  -  inst6502_jsr:
 2968 D1:D08B DD 56 06 -      ld  d,(ix+REGPC+1)
 2969 D1:D08E 4E -  -  -      ld  c,(hl)
 2970 D1:D08F 23 -  -  -      inc hl
 2971 D1:D090 1C -  -  -      inc e
 2972 D1:D091 20 10 -  -      jr  nz,+_
 2973 D1:D093 14 -  -  -      inc d
 2974 D1:D094 7A -  -  -      ld  a,d
 2975 D1:D095 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2976 D1:D097 ED 5C -  -      mlt de
 2977 D1:D099 21 00 40 D0     ld  hl,PAGETABLE
 2978 D1:D09D 19 -  -  -      add hl,de
 2979 D1:D09E ED 27 -  -      ld  hl,(hl)
 2980 D1:D0A0 57 -  -  -      ld  d,a
 2981 D1:D0A1 1E 00 -  -      ld  e,0
 2982 D1:D0A3 46 -  -  -  _:  ld  b,(hl)
 2983 D1:D0A4 -  -  -  -      ;push de to 6502stack
 2984 D1:D0A4 21 00 39 D0     ld  hl,STACKBASE
 2985 D1:D0A8 DD 6E 03 -      ld  l,(ix+REGSP)
 2986 D1:D0AB 72 -  -  -      ld  (hl),d
 2987 D1:D0AC 2D -  -  -      dec l
 2988 D1:D0AD 73 -  -  -      ld  (hl),e
 2989 D1:D0AE 2D -  -  -      dec l
 2990 D1:D0AF DD 75 03 -      ld  (ix+REGSP),l
 2991 D1:D0B2 52 DD 0F 05     ld.s (ix+REGPC),bc
 2992 D1:D0B6 ED 33 06 -      ADDCYC(6)
 2993 D1:D0B9 C3 FB B8 D1     jp  i6502FirstLoad
 2994 D1:D0BD -  -  -  -  
 2995 D1:D0BD -  -  -  -  ;implied	RTS	60	1	6
 2996 D1:D0BD -  -  -  -  inst6502_rts:
 2997 D1:D0BD 21 00 39 D0     ld  hl,STACKBASE
 2998 D1:D0C1 DD 6E 03 -      ld  l,(ix+REGSP)
 2999 D1:D0C4 2C -  -  -      inc l
 3000 D1:D0C5 5E -  -  -      ld  e,(hl)
 3001 D1:D0C6 2C -  -  -      inc l
 3002 D1:D0C7 56 -  -  -      ld  d,(hl)
 3003 D1:D0C8 DD 75 03 -      ld  (ix+REGSP),l
 3004 D1:D0CB 13 -  -  -      inc de
 3005 D1:D0CC 52 DD 1F 05     ld.s (ix+REGPC),de
 3006 D1:D0D0 ED 33 06 -      ADDCYC(6)
 3007 D1:D0D3 C3 FB B8 D1     jp  i6502FirstLoad
 3008 D1:D0D7 -  -  -  -  
 3009 D1:D0D7 -  -  -  -  
 3010 D1:D0D7 -  -  -  -  ;-----------------------------------------------------------------------------
 3011 D1:D0D7 -  -  -  -  ;-----------------------------------------------------------------------------
 3012 D1:D0D7 -  -  -  -  ;-----------------------------------------------------------------------------
 3013 D1:D0D7 -  -  -  -  ;Instructions by type: Miscellaneous
 3014 D1:D0D7 -  -  -  -  ;BIT - Test Bits in Memory with Accumulator
 3015 D1:D0D7 -  -  -  -  ;
 3016 D1:D0D7 -  -  -  -  ;bits 7 and 6 of operand are transfered to bit 7 and 6 of SR (N,V);
 3017 D1:D0D7 -  -  -  -  ;the zero-flag is set according to the result of the operand AND
 3018 D1:D0D7 -  -  -  -  ;the accumulator (set, if the result is zero, unset otherwise).
 3019 D1:D0D7 -  -  -  -  ;This allows a quick check of a few bits at once without affecting
 3020 D1:D0D7 -  -  -  -  ;any of the registers, other than the status register (SR).
 3021 D1:D0D7 -  -  -  -  
 3022 D1:D0D7 -  -  -  -  ;A AND M -> Z, M7 -> N, M6 -> V             N	Z	C	I	D	V
 3023 D1:D0D7 -  -  -  -  ;                                           M7	+	-	-	-	M6
 3024 D1:D0D7 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 3025 D1:D0D7 -  -  -  -  ;zeropage	BIT oper	24	2	3  
 3026 D1:D0D7 -  -  -  -  inst6502_bit_zp:
 3027 D1:D0D7 ED 33 03 -      ADDCYC(3)
 3028 D1:D0DA 7E -  -  -      ld  a,(hl)
 3029 D1:D0DB 01 00 38 D0     ld  bc,ZEROPAGE
 3030 D1:D0DF 81 -  -  -      add a,c
 3031 D1:D0E0 4F -  -  -      ld  c,a
 3032 D1:D0E1 0A -  -  -      ld  a,(bc)
 3033 D1:D0E2 4F -  -  -      ld  c,a
 3034 D1:D0E3 DD A6 00 -  _:  and a,(ix+REGA)
 3035 D1:D0E6 79 -  -  -      ld  a,c     ;discard result, get bits from OPERANDs
 3036 D1:D0E7 CB 8F -  -      res SF_ZERO,a
 3037 D1:D0E9 20 02 -  -      jr  nz,$+4
 3038 D1:D0EB CB CF -  -      set SF_ZERO,a
 3039 D1:D0ED DD 46 04 -      ld  b,(ix+REGSR)    ;keep bits in flag other than NZ and V
 3040 D1:D0F0 A8 -  -  -      xor a,b
 3041 D1:D0F1 E6 C2 -  -      and a,%11000010     ;1=keepA, 0=discardA,keepB
 3042 D1:D0F3 A8 -  -  -      xor a,b
 3043 D1:D0F4 DD 77 04 -      ld  (ix+REGSR),a
 3044 D1:D0F7 C3 11 B9 D1     jp  i6502NextLoad
 3045 D1:D0FB -  -  -  -  
 3046 D1:D0FB -  -  -  -  ;absolute	BIT oper	2C	3	4  
 3047 D1:D0FB -  -  -  -  inst6502_bit_abs:
 3048 D1:D0FB ED 33 04 -      ADDCYC(4)
 3049 D1:D0FE CD C0 B9 D1     call subroutine6502_abs_split_start
 3050 D1:D102 E5 -  -  -      push hl
 3051 D1:D103 50 -  -  -          ld  d,b
 3052 D1:D104 79 -  -  -          ld  a,c
 3053 D1:D105 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3054 D1:D107 ED 4C -  -          mlt bc
 3055 D1:D109 21 00 40 D0         ld  hl,PAGETABLE
 3056 D1:D10D 09 -  -  -          add hl,bc
 3057 D1:D10E ED 27 -  -          ld  hl,(hl)
 3058 D1:D110 06 00 -  -          ld  b,0
 3059 D1:D112 4F -  -  -          ld  c,a
 3060 D1:D113 09 -  -  -          add hl,bc   ;full address
 3061 D1:D114 CD 68 B0 D1         READ_ACCESS
 3062 D1:D118 4F -  -  -          ld  c,a
 3063 D1:D119 E1 -  -  -      pop hl
 3064 D1:D11A 18 C7 -  -      jr  -_    
 3065 D1:D11C -  -  -  -  
 3066 D1:D11C -  -  -  -  ;NOP - No Operation
 3067 D1:D11C -  -  -  -  ;implied	NOP	EA	1	2  
 3068 D1:D11C -  -  -  -  inst6502_nop:
 3069 D1:D11C ED 33 02 -      ADDCYC(2)
 3070 D1:D11F C3 2A B9 D1     jp  i6502FinishLoad
 3071 D1:D123 -  -  -  -  
 3072 D1:D123 -  -  -  -  
 3073 D1:D123 -  -  -  -  
 3074 D1:D123 -  -  -  -  ;##############################################################################
 3075 D1:D123 -  -  -  -  ;##############################################################################
 3076 D1:D123 -  -  -  -  ;##############################################################################
 3077 D1:D123 -  -  -  -  ;##-----#-#####-#####-----##---###---##-########-----#--##-##---#-----#----####
 3078 D1:D123 -  -  -  -  ;####-###-#####-#####-#####-#####-###-#-##########-###--##-#-######-###-###-###
 3079 D1:D123 -  -  -  -  ;####-###-#####-#####---###-##--#-----#-##########-###-#-#-##---###-###-----###
 3080 D1:D123 -  -  -  -  ;####-###-#####-#####-#####-###-#-###-#-##########-###-##--#####-##-###-##-####
 3081 D1:D123 -  -  -  -  ;##-----#-----#-----#-----##----#-###-#-----####-----#-##--#----###-###-###-#-#
 3082 D1:D123 -  -  -  -  ;##############################################################################
 3083 D1:D123 -  -  -  -  ;##############################################################################
 3084 D1:D123 -  -  -  -  ;##############################################################################
 3085 D1:D123 -  -  -  -  ;Instructions by type: Illegal Instructions
 3086 D1:D123 -  -  -  -  
 3087 D1:D123 -  -  -  -  ;NOP - No operations. All the no-operations. Even the ones that are linked
 3088 D1:D123 -  -  -  -  ;to the machinery that operates an addressing mode, but does nothing with it.
 3089 D1:D123 -  -  -  -  ;A whole lotta nothing.
 3090 D1:D123 -  -  -  -  
 3091 D1:D123 -  -  -  -  ;Bytes:1, Cycles:2, Opcodes: 1A, 3A, 5A, 7A, DA, FA
 3092 D1:D123 -  -  -  -  inst6502_nop_implied:
 3093 D1:D123 ED 33 02 -      ADDCYC(2)
 3094 D1:D126 C3 2A B9 D1     jp  i6502FinishLoad
 3095 D1:D12A -  -  -  -  
 3096 D1:D12A -  -  -  -  ;Bytes:2, Cycles:2, Opcodes: 80, 82, 89, C2, E2
 3097 D1:D12A -  -  -  -  inst6502_nop_imm:
 3098 D1:D12A ED 33 02 -      ADDCYC(2)
 3099 D1:D12D C3 11 B9 D1     jp  i6502NextLoad
 3100 D1:D131 -  -  -  -  
 3101 D1:D131 -  -  -  -  ;Bytes:2, Cycles:3, Opcodes: 04, 44, 64
 3102 D1:D131 -  -  -  -  inst6502_nop_zp:
 3103 D1:D131 ED 33 03 -      ADDCYC(3)
 3104 D1:D134 C3 11 B9 D1     jp  i6502NextLoad
 3105 D1:D138 -  -  -  -  
 3106 D1:D138 -  -  -  -  ;Bytes:2, Cycles:4, Opcodes: 14, 34, 54, 74, D4, F4
 3107 D1:D138 -  -  -  -  inst6502_nop_zpx:
 3108 D1:D138 ED 33 04 -      ADDCYC(4)
 3109 D1:D13B C3 11 B9 D1     jp  i6502NextLoad
 3110 D1:D13F -  -  -  -  
 3111 D1:D13F -  -  -  -  ;Bytes:3, Cycles:4, Opcode: 0C
 3112 D1:D13F -  -  -  -  inst6502_nop_abs:
 3113 D1:D13F ED 33 04 -      ADDCYC(4)
 3114 D1:D142 CD C0 B9 D1     call subroutine6502_abs_split_start
 3115 D1:D146 E5 -  -  -      push hl
 3116 D1:D147 CD 68 B0 D1         READ_ACCESS
 3117 D1:D14B E1 -  -  -      pop hl
 3118 D1:D14C C3 11 B9 D1     jp  i6502NextLoad
 3119 D1:D150 -  -  -  -  
 3120 D1:D150 -  -  -  -  ;Note: This thing latches all over the place but does nothing. All these
 3121 D1:D150 -  -  -  -  ;READ_ACCESS thingies are in case the ROM wants to clear PPU flags or something
 3122 D1:D150 -  -  -  -  ;using these instructions. But the one below is noted to do the touchy-feelies
 3123 D1:D150 -  -  -  -  ;at ABS and (ABS+X)&0xFF
 3124 D1:D150 -  -  -  -  ;Bytes:3, Cycles:4*, Opcodes: 1C, 3C, 5C, 7C, DC, FC
 3125 D1:D150 -  -  -  -  inst6502_nop_absx:
 3126 D1:D150 ED 33 04 -      ADDCYC(4)
 3127 D1:D153 CD E1 B9 D1     PUSH_ABSXSPLIT
 3128 D1:D157 CD 68 B0 D1         READ_ACCESS
 3129 D1:D15B E1 -  -  -      pop hl
 3130 D1:D15C C3 11 B9 D1     jp  i6502NextLoad
 3131 D1:D160 -  -  -  -  
 3132 D1:D160 -  -  -  -  ;-----------------------------------------------------------------------------
 3133 D1:D160 -  -  -  -  ;ALR (ASR) - AND oper + LSR
 3134 D1:D160 -  -  -  -  ;Affects CZN
 3135 D1:D160 -  -  -  -  
 3136 D1:D160 -  -  -  -  ;immediate	ALR #oper	4B	2	2 
 3137 D1:D160 -  -  -  -  inst6502_alr_imm:
 3138 D1:D160 ED 33 02 -      ADDCYC(2)
 3139 D1:D163 DD 7E 00 -      ld  a,(ix+REGA)
 3140 D1:D166 A6 -  -  -      and a,(hl)
 3141 D1:D167 CB 3F -  -      srl a   ;Must do it this way. A-optimized instr do not affect Z
 3142 D1:D169 DD 77 00 -      ld  (ix+REGA),a
 3143 D1:D16C DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3144 D1:D186 C3 11 B9 D1     jp  i6502NextLoad
 3145 D1:D18A -  -  -  -  
 3146 D1:D18A -  -  -  -  ;-----------------------------------------------------------------------------
 3147 D1:D18A -  -  -  -  
 3148 D1:D18A -  -  -  -  ;ANC [ANC (ANC2)] - AND oper + set Carry as if ASL [ROL]
 3149 D1:D18A -  -  -  -  
 3150 D1:D18A -  -  -  -  ;immediate	ANC #oper	0B	2	2 
 3151 D1:D18A -  -  -  -  ;immediate	ANC #oper	2B	2	2
 3152 D1:D18A -  -  -  -  instr6502_anc_imm:
 3153 D1:D18A -  -  -  -  instr6502_anc2_imm:
 3154 D1:D18A ED 33 02 -      ADDCYC(2)
 3155 D1:D18D DD 7E 00 -      ld  a,(ix+REGA)
 3156 D1:D190 A6 -  -  -      and a,(hl)
 3157 D1:D191 DD 77 00 -      ld  (ix+REGA),a
 3158 D1:D194 CB 07 -  -      rlc a
 3159 D1:D196 DD 7E 04 -      ld  a,(ix+REGSR)
 3160 D1:D199 -  -  -  -      ;A small optimiztion here, letting us merge OPRFLG_C and OPRFLG_N
 3161 D1:D199 CB 87 -  -      res SF_CARRY,a
 3162 D1:D19B CB BF -  -      res SF_NEG,a
 3163 D1:D19D 30 04 -  -      jr  nc,+_
 3164 D1:D19F CB C7 -  -      set SF_CARRY,a
 3165 D1:D1A1 CB FF -  -      set SF_NEG,a
 3166 D1:D1A3 CB 8F -  -  _:  res SF_ZERO,a
 3167 D1:D1A5 20 02 -  -      jr  nz,$+4
 3168 D1:D1A7 CB CF -  -      set SF_ZERO,a
 3169 D1:D1A9 DD 77 04 -      ld  (ix+REGSR),a
 3170 D1:D1AC C3 11 B9 D1     jp  i6502NextLoad
 3171 D1:D1B0 -  -  -  -  
 3172 D1:D1B0 -  -  -  -  ;-----------------------------------------------------------------------------
 3173 D1:D1B0 -  -  -  -  
 3174 D1:D1B0 -  -  -  -  ;ANE (XAA) - (A OR ??) AND X AND oper -> A
 3175 D1:D1B0 -  -  -  -  ;immediate	ANE #oper	8B	2	2  	††
 3176 D1:D1B0 -  -  -  -  instr6502_ane_imm:
 3177 D1:D1B0 ED 33 02 -      ADDCYC(2)
 3178 D1:D1B3 ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3179 D1:D1B5 DD B6 00 -      or  a,(ix+REGA)
 3180 D1:D1B8 DD A6 01 -      and a,(ix+REGX)
 3181 D1:D1BB A6 -  -  -      and a,(hl)
 3182 D1:D1BC DD 77 00 -      ld  (ix+REGA),a
 3183 D1:D1BF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3184 D1:D1D3 C3 11 B9 D1     jp  i6502NextLoad
 3185 D1:D1D7 -  -  -  -  
 3186 D1:D1D7 -  -  -  -  ;-----------------------------------------------------------------------------
 3187 D1:D1D7 -  -  -  -  
 3188 D1:D1D7 -  -  -  -  
 3189 D1:D1D7 -  -  -  -  ;ARR - AND OPER + ROR
 3190 D1:D1D7 -  -  -  -  ;Something hinky is going on with the flags. "This operation involves the adder"
 3191 D1:D1D7 -  -  -  -  ;I need to get a better handle over what that might be.
 3192 D1:D1D7 -  -  -  -  ;CVZN flags affected.
 3193 D1:D1D7 -  -  -  -  ;
 3194 D1:D1D7 -  -  -  -  ;Primary sources reads:
 3195 D1:D1D7 -  -  -  -  ;----------------------
 3196 D1:D1D7 -  -  -  -  ;This operation involves the adder:
 3197 D1:D1D7 -  -  -  -  ;V-flag is set according to (A AND oper) + oper
 3198 D1:D1D7 -  -  -  -  ;The carry is not set, but bit 7 (sign) is exchanged with the carry
 3199 D1:D1D7 -  -  -  -  ;A AND oper, C -> [76543210] -> C
 3200 D1:D1D7 -  -  -  -  ;
 3201 D1:D1D7 -  -  -  -  ;Secondary source reads:
 3202 D1:D1D7 -  -  -  -  ;-----------------------
 3203 D1:D1D7 -  -  -  -  ;Similar to AND #i then ROR A, except sets the flags differently. 
 3204 D1:D1D7 -  -  -  -  ;N and Z are normal, but C is bit 6 and V is bit 6 xor bit 5. 
 3205 D1:D1D7 -  -  -  -  ;A fast way to perform signed division by 4 is: CMP #$80; ARR #$FF; ROR. 
 3206 D1:D1D7 -  -  -  -  ;This can be extended to larger powers of two.
 3207 D1:D1D7 -  -  -  -  
 3208 D1:D1D7 -  -  -  -  ;immediate	ARR #oper	6B	2	2  
 3209 D1:D1D7 -  -  -  -  instr6502_arr_imm:
 3210 D1:D1D7 ED 33 02 -      ADDCYC(2)
 3211 D1:D1DA DD 7E 00 -      ld  a,(ix+REGA)
 3212 D1:D1DD A6 -  -  -      and a,(hl)
 3213 D1:D1DE 47 -  -  -      ld  b,a
 3214 D1:D1DF DD 7E 04 -      ld  a,(ix+REGSR)
 3215 D1:D1E2 4F -  -  -      ld  c,a
 3216 D1:D1E3 0F -  -  -      rrca    ;extract carry. This carry will go into sign bit of result
 3217 D1:D1E4 CB B9 -  -      res SF_NEG,c
 3218 D1:D1E6 30 02 -  -      jr  nc,$+4
 3219 D1:D1E8 CB F9 -  -      set SF_NEG,c
 3220 D1:D1EA CB 18 -  -      rr b
 3221 D1:D1EC CB 89 -  -      res SF_ZERO,c
 3222 D1:D1EE 20 02 -  -      jr  nz,$+4
 3223 D1:D1F0 CB C9 -  -      set SF_ZERO,c
 3224 D1:D1F2 DD 70 00 -      ld  (ix+REGA),b
 3225 D1:D1F5 78 -  -  -      ld  a,b
 3226 D1:D1F6 E6 40 -  -      and a,%01000000
 3227 D1:D1F8 CB 81 -  -      res SF_CARRY,c
 3228 D1:D1FA 28 02 -  -      jr  z,$+4
 3229 D1:D1FC CB C1 -  -      set SF_CARRY,c
 3230 D1:D1FE 0F -  -  -      rrca
 3231 D1:D1FF EE 20 -  -      xor a,%00100000
 3232 D1:D201 E6 20 -  -      and a,%00100000
 3233 D1:D203 CB B1 -  -      res SF_OVER,c
 3234 D1:D205 28 02 -  -      jr  z,$+4
 3235 D1:D207 CB F1 -  -      set SF_OVER,c
 3236 D1:D209 DD 71 04 -      ld  (ix+REGSR),c
 3237 D1:D20C -  -  -  -      ;TODO: Figure out a more efficient way to emulate this instruction.
 3238 D1:D20C C3 11 B9 D1     jp  i6502NextLoad
 3239 D1:D210 -  -  -  -  
 3240 D1:D210 -  -  -  -  ;-----------------------------------------------------------------------------
 3241 D1:D210 -  -  -  -  ;DCP (DCM) - DEC oper + CMP oper
 3242 D1:D210 -  -  -  -  ;M-1->M, A-M. Affects CZN
 3243 D1:D210 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3244 D1:D210 -  -  -  -  
 3245 D1:D210 -  -  -  -  ;zeropage	DCP oper	C7	2	5  	
 3246 D1:D210 -  -  -  -  inst6502_dcp_zp:
 3247 D1:D210 ED 33 05 -      ADDCYC(5)
 3248 D1:D213 7E -  -  -      ld  a,(hl)
 3249 D1:D214 01 00 38 D0     ld  bc,ZEROPAGE
 3250 D1:D218 81 -  -  -      add a,c
 3251 D1:D219 4F -  -  -      ld  c,a
 3252 D1:D21A 0A -  -  -      ld  a,(bc)
 3253 D1:D21B 3D -  -  -      dec a
 3254 D1:D21C 02 -  -  -      ld  (bc),a
 3255 D1:D21D 47 -  -  -      ld  b,a
 3256 D1:D21E C3 B6 BA D1     jp  subroutine6502_cmp_combined_end
 3257 D1:D222 -  -  -  -  
 3258 D1:D222 -  -  -  -  ;zeropage,X	DCP oper,X	D7	2	6  	
 3259 D1:D222 -  -  -  -  inst6520_dcp_zpx:
 3260 D1:D222 ED 33 06 -      ADDCYC(6)
 3261 D1:D225 7E -  -  -      ld  a,(hl)
 3262 D1:D226 01 00 38 D0     ld  bc,ZEROPAGE
 3263 D1:D22A 81 -  -  -      add a,c
 3264 D1:D22B DD 86 01 -      add a,(ix+REGX)
 3265 D1:D22E 4F -  -  -      ld  c,a
 3266 D1:D22F 0A -  -  -      ld  a,(bc)
 3267 D1:D230 3D -  -  -      dec a
 3268 D1:D231 02 -  -  -      ld  (bc),a
 3269 D1:D232 47 -  -  -      ld  b,a
 3270 D1:D233 C3 B6 BA D1     jp  subroutine6502_cmp_combined_end
 3271 D1:D237 -  -  -  -  
 3272 D1:D237 -  -  -  -  ;absolute	DCP oper	CF	3	6  	
 3273 D1:D237 -  -  -  -  inst6502_dcp_abs:
 3274 D1:D237 ED 33 06 -      ADDCYC(6)
 3275 D1:D23A CD C0 B9 D1     call subroutine6502_abs_split_start
 3276 D1:D23E E5 -  -  -      push hl
 3277 D1:D23F 50 -  -  -          ld  d,b
 3278 D1:D240 79 -  -  -          ld  a,c
 3279 D1:D241 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3280 D1:D243 ED 4C -  -          mlt bc
 3281 D1:D245 21 00 40 D0         ld  hl,PAGETABLE
 3282 D1:D249 09 -  -  -          add hl,bc
 3283 D1:D24A ED 27 -  -          ld  hl,(hl)
 3284 D1:D24C 06 00 -  -          ld  b,0
 3285 D1:D24E 4F -  -  -          ld  c,a
 3286 D1:D24F 09 -  -  -          add hl,bc   ;full address
 3287 D1:D250 CD 68 B0 D1         READ_ACCESS
 3288 D1:D254 3D -  -  -          dec a
 3289 D1:D255 47 -  -  -          ld b,a
 3290 D1:D256 C5 -  -  -          push bc
 3291 D1:D257 CD 10 B1 D1             WRITE_ACCESS
 3292 D1:D25B C1 -  -  -          pop bc
 3293 D1:D25C E1 -  -  -      pop hl
 3294 D1:D25D C3 B6 BA D1     jp  subroutine6502_cmp_combined_end
 3295 D1:D261 -  -  -  -  
 3296 D1:D261 -  -  -  -  ;absolut,X	DCP oper,X	DF	3	7  	
 3297 D1:D261 -  -  -  -  inst6502_dcp_absx:
 3298 D1:D261 ED 33 07 -      ADDCYC(7)
 3299 D1:D264 CD 1D BA D1     PUSH_ABSXSPLIT_NODEP
 3300 D1:D268 CD 68 B0 D1         READ_ACCESS
 3301 D1:D26C 3D -  -  -          dec a
 3302 D1:D26D 47 -  -  -          ld  b,a
 3303 D1:D26E C5 -  -  -          push bc
 3304 D1:D26F CD 10 B1 D1             WRITE_ACCESS
 3305 D1:D273 C1 -  -  -          pop bc
 3306 D1:D274 E1 -  -  -      pop hl
 3307 D1:D275 C3 B6 BA D1     jp  subroutine6502_cmp_combined_end
 3308 D1:D279 -  -  -  -  
 3309 D1:D279 -  -  -  -  ;absolut,Y	DCP oper,Y	DB	3	7  	
 3310 D1:D279 -  -  -  -  inst6502_dcp_absy:
 3311 D1:D279 ED 33 07 -      ADDCYC(7)
 3312 D1:D27C CD 18 BA D1     PUSH_ABSYSPLIT_NODEP
 3313 D1:D280 CD 68 B0 D1         READ_ACCESS
 3314 D1:D284 3D -  -  -          dec a
 3315 D1:D285 47 -  -  -          ld  b,a
 3316 D1:D286 C5 -  -  -          push bc
 3317 D1:D287 CD 10 B1 D1             WRITE_ACCESS
 3318 D1:D28B C1 -  -  -          pop bc
 3319 D1:D28C E1 -  -  -      pop hl
 3320 D1:D28D C3 B6 BA D1     jp  subroutine6502_cmp_combined_end
 3321 D1:D291 -  -  -  -  
 3322 D1:D291 -  -  -  -  ;(indirect,X)	DCP (oper,X)	C3	2	8  	
 3323 D1:D291 -  -  -  -  inst6502_dcp_indx:
 3324 D1:D291 ED 33 08 -      ADDCYC(8)
 3325 D1:D294 E5 -  -  -      push hl
 3326 D1:D295 7E -  -  -          ld  a,(hl)
 3327 D1:D296 21 00 38 D0         ld  hl,ZEROPAGE
 3328 D1:D29A 85 -  -  -          add a,L
 3329 D1:D29B DD 86 01 -          add a,(ix+REGX)
 3330 D1:D29E 6F -  -  -          ld  L,a
 3331 D1:D29F 7E -  -  -          ld  a,(hl)
 3332 D1:D2A0 2C -  -  -          inc L
 3333 D1:D2A1 56 -  -  -          ld  d,(hl)
 3334 D1:D2A2 42 -  -  -          ld  b,d
 3335 D1:D2A3 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3336 D1:D2A5 ED 4C -  -          mlt bc
 3337 D1:D2A7 21 00 40 D0         ld  hl,PAGETABLE
 3338 D1:D2AB 09 -  -  -          add hl,bc
 3339 D1:D2AC ED 27 -  -          ld  hl,(hl)
 3340 D1:D2AE 06 00 -  -          ld  b,0
 3341 D1:D2B0 4F -  -  -          ld  c,a
 3342 D1:D2B1 09 -  -  -          add hl,bc
 3343 D1:D2B2 CD 68 B0 D1         READ_ACCESS
 3344 D1:D2B6 3D -  -  -          dec a
 3345 D1:D2B7 47 -  -  -          ld  b,a
 3346 D1:D2B8 C5 -  -  -          push bc
 3347 D1:D2B9 CD 10 B1 D1             WRITE_ACCESS
 3348 D1:D2BD C1 -  -  -          pop bc
 3349 D1:D2BE E1 -  -  -      pop hl
 3350 D1:D2BF C3 B6 BA D1     jp  subroutine6502_cmp_combined_end
 3351 D1:D2C3 -  -  -  -  
 3352 D1:D2C3 -  -  -  -  ;(indirect),Y	DCP (oper),Y	D3	2	8  
 3353 D1:D2C3 -  -  -  -  inst6502_dcp_indy:
 3354 D1:D2C3 ED 33 08 -      ADDCYC(8)
 3355 D1:D2C6 E5 -  -  -      push hl
 3356 D1:D2C7 7E -  -  -          ld  a,(hl)
 3357 D1:D2C8 21 00 38 D0         ld  hl,ZEROPAGE
 3358 D1:D2CC 85 -  -  -          add a,L
 3359 D1:D2CD 6F -  -  -          ld  L,a
 3360 D1:D2CE 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3361 D1:D2CF 2C -  -  -          inc L
 3362 D1:D2D0 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3363 D1:D2D3 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3364 D1:D2D4 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3365 D1:D2D6 24 -  -  -          inc h
 3366 D1:D2D7 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3367 D1:D2D8 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3368 D1:D2DA ED 6C -  -          mlt hl          ;23.
 3369 D1:D2DC 01 00 40 D0         ld  bc,PAGETABLE
 3370 D1:D2E0 09 -  -  -          add hl,bc
 3371 D1:D2E1 ED 27 -  -          ld  hl,(hl)     ;address get.
 3372 D1:D2E3 01 00 00 00         ld  bc,0
 3373 D1:D2E7 4F -  -  -          ld  c,a
 3374 D1:D2E8 09 -  -  -          add hl,bc       ;Full address get.
 3375 D1:D2E9 CD 68 B0 D1         READ_ACCESS
 3376 D1:D2ED 3D -  -  -          dec a
 3377 D1:D2EE 47 -  -  -          ld  b,a
 3378 D1:D2EF C5 -  -  -          push bc
 3379 D1:D2F0 CD 10 B1 D1             WRITE_ACCESS
 3380 D1:D2F4 C1 -  -  -          pop bc
 3381 D1:D2F5 E1 -  -  -      pop hl
 3382 D1:D2F6 C3 B6 BA D1     jp  subroutine6502_cmp_combined_end
 3383 D1:D2FA -  -  -  -  
 3384 D1:D2FA -  -  -  -  ;-----------------------------------------------------------------------------
 3385 D1:D2FA -  -  -  -  ;ISC (ISB, INS) - INC oper + SBC oper
 3386 D1:D2FA -  -  -  -  ;M+1->M, A-M-not(C)->A, affects VCZN
 3387 D1:D2FA -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3388 D1:D2FA -  -  -  -  
 3389 D1:D2FA -  -  -  -  
 3390 D1:D2FA -  -  -  -  
 3391 D1:D2FA -  -  -  -  ;zeropage	ISC oper	E7	2	5  	
 3392 D1:D2FA -  -  -  -  inst6502_isc_zp:
 3393 D1:D2FA ED 33 05 -      ADDCYC(5)
 3394 D1:D2FD 7E -  -  -      ld  a,(hl)
 3395 D1:D2FE 01 00 38 D0     ld  bc,ZEROPAGE
 3396 D1:D302 81 -  -  -      add a,c
 3397 D1:D303 4F -  -  -      ld  c,a
 3398 D1:D304 0A -  -  -      ld  a,(bc)
 3399 D1:D305 3C -  -  -      inc a
 3400 D1:D306 02 -  -  -      ld  (bc),a
 3401 D1:D307 4F -  -  -      ld  c,a
 3402 D1:D308 C3 83 BA D1     jp  subroutine6502_sbc_combined_end
 3403 D1:D30C -  -  -  -  
 3404 D1:D30C -  -  -  -  ;zeropage,X	ISC oper,X	F7	2	6  
 3405 D1:D30C -  -  -  -  inst6520_isc_zpx:
 3406 D1:D30C ED 33 06 -      ADDCYC(6)
 3407 D1:D30F 7E -  -  -      ld  a,(hl)
 3408 D1:D310 01 00 38 D0     ld  bc,ZEROPAGE
 3409 D1:D314 81 -  -  -      add a,c
 3410 D1:D315 DD 86 01 -      add a,(ix+REGX)
 3411 D1:D318 4F -  -  -      ld  c,a
 3412 D1:D319 0A -  -  -      ld  a,(bc)
 3413 D1:D31A 3C -  -  -      inc a
 3414 D1:D31B 02 -  -  -      ld  (bc),a
 3415 D1:D31C 4F -  -  -      ld  c,a
 3416 D1:D31D C3 83 BA D1     jp  subroutine6502_sbc_combined_end
 3417 D1:D321 -  -  -  -  
 3418 D1:D321 -  -  -  -  ;absolute	ISC oper	EF	3	6  	
 3419 D1:D321 -  -  -  -  inst6502_isc_abs:
 3420 D1:D321 ED 33 06 -      ADDCYC(6)
 3421 D1:D324 CD C0 B9 D1     call subroutine6502_abs_split_start
 3422 D1:D328 E5 -  -  -      push hl
 3423 D1:D329 50 -  -  -          ld  d,b
 3424 D1:D32A 79 -  -  -          ld  a,c
 3425 D1:D32B 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3426 D1:D32D ED 4C -  -          mlt bc
 3427 D1:D32F 21 00 40 D0         ld  hl,PAGETABLE
 3428 D1:D333 09 -  -  -          add hl,bc
 3429 D1:D334 ED 27 -  -          ld  hl,(hl)
 3430 D1:D336 06 00 -  -          ld  b,0
 3431 D1:D338 4F -  -  -          ld  c,a
 3432 D1:D339 09 -  -  -          add hl,bc   ;full address
 3433 D1:D33A CD 68 B0 D1         READ_ACCESS
 3434 D1:D33E 3C -  -  -          inc a
 3435 D1:D33F 47 -  -  -          ld b,a
 3436 D1:D340 4F -  -  -          ld c,a
 3437 D1:D341 C5 -  -  -          push bc
 3438 D1:D342 CD 10 B1 D1             WRITE_ACCESS
 3439 D1:D346 C1 -  -  -          pop bc
 3440 D1:D347 E1 -  -  -      pop hl
 3441 D1:D348 C3 83 BA D1     jp  subroutine6502_sbc_combined_end
 3442 D1:D34C -  -  -  -  
 3443 D1:D34C -  -  -  -  ;absolut,X	ISC oper,X	FF	3	7  	
 3444 D1:D34C -  -  -  -  inst6502_isc_absx:
 3445 D1:D34C ED 33 07 -      ADDCYC(7)
 3446 D1:D34F CD 1D BA D1     PUSH_ABSXSPLIT_NODEP
 3447 D1:D353 CD 68 B0 D1         READ_ACCESS
 3448 D1:D357 3C -  -  -          inc a
 3449 D1:D358 47 -  -  -          ld  b,a
 3450 D1:D359 4F -  -  -          ld  c,a
 3451 D1:D35A C5 -  -  -          push bc
 3452 D1:D35B CD 10 B1 D1             WRITE_ACCESS
 3453 D1:D35F C1 -  -  -          pop bc
 3454 D1:D360 E1 -  -  -      pop hl
 3455 D1:D361 C3 83 BA D1     jp  subroutine6502_sbc_combined_end
 3456 D1:D365 -  -  -  -  
 3457 D1:D365 -  -  -  -  ;absolut,Y	ISC oper,Y	FB	3	7  	
 3458 D1:D365 -  -  -  -  inst6502_isc_absy:
 3459 D1:D365 ED 33 07 -      ADDCYC(7)
 3460 D1:D368 CD 18 BA D1     PUSH_ABSYSPLIT_NODEP
 3461 D1:D36C CD 68 B0 D1         READ_ACCESS
 3462 D1:D370 3C -  -  -          inc a
 3463 D1:D371 47 -  -  -          ld  b,a
 3464 D1:D372 4F -  -  -          ld  c,a
 3465 D1:D373 C5 -  -  -          push bc
 3466 D1:D374 CD 10 B1 D1             WRITE_ACCESS
 3467 D1:D378 C1 -  -  -          pop bc
 3468 D1:D379 E1 -  -  -      pop hl
 3469 D1:D37A C3 83 BA D1     jp  subroutine6502_sbc_combined_end
 3470 D1:D37E -  -  -  -  
 3471 D1:D37E -  -  -  -  ;(indirect,X)	ISC (oper,X)	E3	2	8  	
 3472 D1:D37E -  -  -  -  inst6502_isc_indx:
 3473 D1:D37E ED 33 08 -      ADDCYC(8)
 3474 D1:D381 E5 -  -  -      push hl
 3475 D1:D382 7E -  -  -          ld  a,(hl)
 3476 D1:D383 21 00 38 D0         ld  hl,ZEROPAGE
 3477 D1:D387 85 -  -  -          add a,L
 3478 D1:D388 DD 86 01 -          add a,(ix+REGX)
 3479 D1:D38B 6F -  -  -          ld  L,a
 3480 D1:D38C 7E -  -  -          ld  a,(hl)
 3481 D1:D38D 2C -  -  -          inc L
 3482 D1:D38E 56 -  -  -          ld  d,(hl)
 3483 D1:D38F 42 -  -  -          ld  b,d
 3484 D1:D390 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3485 D1:D392 ED 4C -  -          mlt bc
 3486 D1:D394 21 00 40 D0         ld  hl,PAGETABLE
 3487 D1:D398 09 -  -  -          add hl,bc
 3488 D1:D399 ED 27 -  -          ld  hl,(hl)
 3489 D1:D39B 06 00 -  -          ld  b,0
 3490 D1:D39D 4F -  -  -          ld  c,a
 3491 D1:D39E 09 -  -  -          add hl,bc
 3492 D1:D39F CD 68 B0 D1         READ_ACCESS
 3493 D1:D3A3 3C -  -  -          inc a
 3494 D1:D3A4 47 -  -  -          ld  b,a
 3495 D1:D3A5 4F -  -  -          ld  c,a
 3496 D1:D3A6 C5 -  -  -          push bc
 3497 D1:D3A7 CD 10 B1 D1             WRITE_ACCESS
 3498 D1:D3AB C1 -  -  -          pop bc
 3499 D1:D3AC E1 -  -  -      pop hl
 3500 D1:D3AD C3 83 BA D1     jp  subroutine6502_sbc_combined_end
 3501 D1:D3B1 -  -  -  -  
 3502 D1:D3B1 -  -  -  -  ;(indirect),Y	ISC (oper),Y	F3	2	8  
 3503 D1:D3B1 -  -  -  -  inst6502_isc_indy:
 3504 D1:D3B1 ED 33 08 -      ADDCYC(8)
 3505 D1:D3B4 E5 -  -  -      push hl
 3506 D1:D3B5 7E -  -  -          ld  a,(hl)
 3507 D1:D3B6 21 00 38 D0         ld  hl,ZEROPAGE
 3508 D1:D3BA 85 -  -  -          add a,L
 3509 D1:D3BB 6F -  -  -          ld  L,a
 3510 D1:D3BC 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3511 D1:D3BD 2C -  -  -          inc L
 3512 D1:D3BE DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3513 D1:D3C1 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3514 D1:D3C2 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3515 D1:D3C4 24 -  -  -          inc h
 3516 D1:D3C5 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3517 D1:D3C6 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3518 D1:D3C8 ED 6C -  -          mlt hl          ;23.
 3519 D1:D3CA 01 00 40 D0         ld  bc,PAGETABLE
 3520 D1:D3CE 09 -  -  -          add hl,bc
 3521 D1:D3CF ED 27 -  -          ld  hl,(hl)     ;address get.
 3522 D1:D3D1 01 00 00 00         ld  bc,0
 3523 D1:D3D5 4F -  -  -          ld  c,a
 3524 D1:D3D6 09 -  -  -          add hl,bc       ;Full address get.
 3525 D1:D3D7 CD 68 B0 D1         READ_ACCESS
 3526 D1:D3DB 3C -  -  -          inc a
 3527 D1:D3DC 47 -  -  -          ld  b,a
 3528 D1:D3DD 4F -  -  -          ld  c,a
 3529 D1:D3DE C5 -  -  -          push bc
 3530 D1:D3DF CD 10 B1 D1             WRITE_ACCESS
 3531 D1:D3E3 C1 -  -  -          pop bc
 3532 D1:D3E4 E1 -  -  -      pop hl
 3533 D1:D3E5 C3 83 BA D1     jp  subroutine6502_sbc_combined_end
 3534 D1:D3E9 -  -  -  -  ;-----------------------------------------------------------------------------
 3535 D1:D3E9 -  -  -  -  ;LAS (LAR) - LDA/TSX oper
 3536 D1:D3E9 -  -  -  -  ;M AND SP -> A, X, SP. Affects ZN
 3537 D1:D3E9 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3538 D1:D3E9 -  -  -  -  ;absolut,Y	LAS oper,Y	BB	3	4* 
 3539 D1:D3E9 -  -  -  -  inst6502_las_absy:
 3540 D1:D3E9 ED 33 04 -      ADDCYC(4)
 3541 D1:D3EC CD DC B9 D1     PUSH_ABSYSPLIT
 3542 D1:D3F0 CD 68 B0 D1         READ_ACCESS
 3543 D1:D3F4 E1 -  -  -      pop hl
 3544 D1:D3F5 DD A6 03 -      and a,(ix+REGSP)
 3545 D1:D3F8 DD 77 00 -      ld  (ix+REGA),A
 3546 D1:D3FB DD 77 01 -      ld  (ix+REGX),A
 3547 D1:D3FE DD 77 03 -      ld  (ix+REGSP),A
 3548 D1:D401 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3549 D1:D415 C3 11 B9 D1     jp i6502NextLoad
 3550 D1:D419 -  -  -  -  
 3551 D1:D419 -  -  -  -  ;-----------------------------------------------------------------------------
 3552 D1:D419 -  -  -  -  ;LAX - LDA oper + LDX oper
 3553 D1:D419 -  -  -  -  ;M -> A -> X. Flags affected: ZN
 3554 D1:D419 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3555 D1:D419 -  -  -  -  ;zeropage	LAX oper	A7	2	3  	
 3556 D1:D419 -  -  -  -  inst6502_lax_zp:
 3557 D1:D419 ED 33 03 -      ADDCYC(3)
 3558 D1:D41C 7E -  -  -      ld  a,(hl)
 3559 D1:D41D 01 00 38 D0     ld  bc,ZEROPAGE
 3560 D1:D421 81 -  -  -      add a,c
 3561 D1:D422 4F -  -  -      ld  c,a
 3562 D1:D423 0A -  -  -      ld  a,(bc)
 3563 D1:D424 DD 77 00 -      ld  (ix+REGA),a
 3564 D1:D427 DD 77 01 -      ld  (ix+REGX),a
 3565 D1:D42A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3566 D1:D43E C3 11 B9 D1     jp i6502NextLoad
 3567 D1:D442 -  -  -  -  
 3568 D1:D442 -  -  -  -  ;zeropage,Y	LAX oper,Y	B7	2	4  	
 3569 D1:D442 -  -  -  -  inst6502_lax_zpy:
 3570 D1:D442 ED 33 04 -      ADDCYC(4)
 3571 D1:D445 7E -  -  -      ld  a,(hl)
 3572 D1:D446 01 00 38 D0     ld  bc,ZEROPAGE
 3573 D1:D44A 81 -  -  -      add a,c
 3574 D1:D44B DD 86 02 -      add a,(ix+REGY)
 3575 D1:D44E 4F -  -  -      ld  c,a
 3576 D1:D44F 0A -  -  -      ld  a,(bc)
 3577 D1:D450 DD 77 00 -      ld  (ix+REGA),a
 3578 D1:D453 DD 77 01 -      ld  (ix+REGX),a
 3579 D1:D456 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3580 D1:D46A C3 11 B9 D1     jp i6502NextLoad
 3581 D1:D46E -  -  -  -  
 3582 D1:D46E -  -  -  -  ;absolute	LAX oper	AF	3	4  	
 3583 D1:D46E -  -  -  -  inst6502_lax_abs:
 3584 D1:D46E ED 33 04 -      ADDCYC(4)
 3585 D1:D471 CD C0 B9 D1     call subroutine6502_abs_split_start
 3586 D1:D475 E5 -  -  -      push hl
 3587 D1:D476 50 -  -  -          ld  d,b
 3588 D1:D477 79 -  -  -          ld  a,c
 3589 D1:D478 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3590 D1:D47A ED 4C -  -          mlt bc
 3591 D1:D47C 21 00 40 D0         ld  hl,PAGETABLE
 3592 D1:D480 09 -  -  -          add hl,bc
 3593 D1:D481 ED 27 -  -          ld  hl,(hl)
 3594 D1:D483 06 00 -  -          ld  b,0
 3595 D1:D485 4F -  -  -          ld  c,a
 3596 D1:D486 09 -  -  -          add hl,bc   ;full address
 3597 D1:D487 CD 68 B0 D1         READ_ACCESS
 3598 D1:D48B DD 77 00 -          ld (ix+REGA),a
 3599 D1:D48E DD 77 01 -          ld (ix+REGX),a
 3600 D1:D491 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3601 D1:D4A5 E1 -  -  -      pop hl
 3602 D1:D4A6 C3 11 B9 D1     jp i6502NextLoad
 3603 D1:D4AA -  -  -  -  
 3604 D1:D4AA -  -  -  -  ;absolut,Y	LAX oper,Y	BF	3	4* 	
 3605 D1:D4AA -  -  -  -  inst6502_lax_absy:
 3606 D1:D4AA ED 33 04 -      ADDCYC(4)
 3607 D1:D4AD CD DC B9 D1     PUSH_ABSYSPLIT
 3608 D1:D4B1 CD 68 B0 D1         READ_ACCESS
 3609 D1:D4B5 DD 77 00 -          ld (ix+REGA),a
 3610 D1:D4B8 DD 77 01 -          ld (ix+REGX),a
 3611 D1:D4BB DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3612 D1:D4CF E1 -  -  -      pop hl
 3613 D1:D4D0 C3 11 B9 D1     jp i6502NextLoad
 3614 D1:D4D4 -  -  -  -  
 3615 D1:D4D4 -  -  -  -  ;(indirect,X)	LAX (oper,X)	A3	2	6  	
 3616 D1:D4D4 -  -  -  -  inst6502_lax_indx:
 3617 D1:D4D4 ED 33 06 -      ADDCYC(6)
 3618 D1:D4D7 E5 -  -  -      push hl
 3619 D1:D4D8 7E -  -  -          ld  a,(hl)
 3620 D1:D4D9 21 00 38 D0         ld  hl,ZEROPAGE
 3621 D1:D4DD 85 -  -  -          add a,L
 3622 D1:D4DE DD 86 01 -          add a,(ix+REGX)
 3623 D1:D4E1 6F -  -  -          ld  L,a
 3624 D1:D4E2 7E -  -  -          ld  a,(hl)
 3625 D1:D4E3 2C -  -  -          inc L
 3626 D1:D4E4 56 -  -  -          ld  d,(hl)
 3627 D1:D4E5 42 -  -  -          ld  b,d
 3628 D1:D4E6 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3629 D1:D4E8 ED 4C -  -          mlt bc
 3630 D1:D4EA 21 00 40 D0         ld  hl,PAGETABLE
 3631 D1:D4EE 09 -  -  -          add hl,bc
 3632 D1:D4EF ED 27 -  -          ld  hl,(hl)
 3633 D1:D4F1 06 00 -  -          ld  b,0
 3634 D1:D4F3 4F -  -  -          ld  c,a
 3635 D1:D4F4 09 -  -  -          add hl,bc
 3636 D1:D4F5 CD 68 B0 D1         READ_ACCESS
 3637 D1:D4F9 DD 77 00 -          ld (ix+REGA),a
 3638 D1:D4FC DD 77 01 -          ld (ix+REGX),a
 3639 D1:D4FF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3640 D1:D513 E1 -  -  -      pop hl
 3641 D1:D514 C3 11 B9 D1     jp i6502NextLoad
 3642 D1:D518 -  -  -  -  
 3643 D1:D518 -  -  -  -  ;(indirect),Y	LAX (oper),Y	B3	2	5* 
 3644 D1:D518 -  -  -  -  inst6502_lax_indy:
 3645 D1:D518 ED 33 05 -      ADDCYC(5)
 3646 D1:D51B E5 -  -  -      push hl
 3647 D1:D51C 7E -  -  -          ld  a,(hl)
 3648 D1:D51D 21 00 38 D0         ld  hl,ZEROPAGE
 3649 D1:D521 85 -  -  -          add a,L
 3650 D1:D522 6F -  -  -          ld  L,a
 3651 D1:D523 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3652 D1:D524 2C -  -  -          inc L
 3653 D1:D525 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3654 D1:D528 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3655 D1:D529 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3656 D1:D52B FD 23 -  -          ADDCYC(1)
 3657 D1:D52D 24 -  -  -          inc h
 3658 D1:D52E 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3659 D1:D52F 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3660 D1:D531 ED 6C -  -          mlt hl          ;23.
 3661 D1:D533 01 00 40 D0         ld  bc,PAGETABLE
 3662 D1:D537 09 -  -  -          add hl,bc
 3663 D1:D538 ED 27 -  -          ld  hl,(hl)     ;address get.
 3664 D1:D53A 01 00 00 00         ld  bc,0
 3665 D1:D53E 4F -  -  -          ld  c,a
 3666 D1:D53F 09 -  -  -          add hl,bc       ;Full address get.
 3667 D1:D540 CD 68 B0 D1         READ_ACCESS
 3668 D1:D544 DD 77 00 -          ld  (ix+REGA),a
 3669 D1:D547 DD 77 01 -          ld  (ix+REGX),a
 3670 D1:D54A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3671 D1:D55E E1 -  -  -      pop hl
 3672 D1:D55F C3 11 B9 D1     jp i6502NextLoad
 3673 D1:D563 -  -  -  -  
 3674 D1:D563 -  -  -  -  ;-----------------------------------------------------------------------------
 3675 D1:D563 -  -  -  -  ;LXA (LAX immediate)
 3676 D1:D563 -  -  -  -  ;Store * AND oper in A and X
 3677 D1:D563 -  -  -  -  ;Highly unstable, involves a 'magic' constant, see ANE
 3678 D1:D563 -  -  -  -  ;(A OR CONST) AND oper -> A -> X
 3679 D1:D563 -  -  -  -  ;immediate	LXA #oper	AB	2	2  	††
 3680 D1:D563 -  -  -  -  inst6502_lxa:
 3681 D1:D563 ED 33 02 -      ADDCYC(2)
 3682 D1:D566 ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3683 D1:D568 DD B6 00 -      or  a,(ix+REGA)
 3684 D1:D56B A6 -  -  -      and a,(hl)
 3685 D1:D56C DD 77 00 -      ld  (ix+REGA),a
 3686 D1:D56F DD 77 01 -      ld  (ix+REGX),a
 3687 D1:D572 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3688 D1:D586 C3 11 B9 D1     jp  i6502NextLoad
 3689 D1:D58A -  -  -  -  
 3690 D1:D58A -  -  -  -  ;-----------------------------------------------------------------------------
 3691 D1:D58A -  -  -  -  ;RLA - ROL oper + AND oper
 3692 D1:D58A -  -  -  -  ;M = C <- [76543210] <- C, A AND M -> A. flags CZN
 3693 D1:D58A -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3694 D1:D58A -  -  -  -  ;zeropage	RLA oper	27	2	5  	
 3695 D1:D58A -  -  -  -  inst6502_rla_zp:
 3696 D1:D58A ED 33 05 -      ADDCYC(5)
 3697 D1:D58D 7E -  -  -      ld  a,(hl)
 3698 D1:D58E 01 00 38 D0     ld  bc,ZEROPAGE
 3699 D1:D592 81 -  -  -      add a,c
 3700 D1:D593 4F -  -  -      ld  c,a
 3701 D1:D594 DD 7E 04 -      ld  a,(ix+REGSR)
 3702 D1:D597 1F -  -  -      rra
 3703 D1:D598 0A -  -  -      ld  a,(bc)
 3704 D1:D599 17 -  -  -      rla
 3705 D1:D59A 02 -  -  -      ld  (bc),a
 3706 D1:D59B -  -  -  -      ;Flag breakdown to optimize for split operation
 3707 D1:D59B DD 46 04 -      ld  b,(ix+REGSR)
 3708 D1:D59E CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3709 D1:D5A4 DD A6 00 -      and a,(ix+REGA)
 3710 D1:D5A7 DD 77 00 -      ld  (ix+REGA),a
 3711 D1:D5AA CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3712 D1:D5B0 87 -  -  -      add a,a
 3713 D1:D5B1 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3714 D1:D5B7 DD 70 04 -      ld  (ix+REGSR),b
 3715 D1:D5BA C3 11 B9 D1     jp i6502NextLoad
 3716 D1:D5BE -  -  -  -  
 3717 D1:D5BE -  -  -  -  ;zeropage,X	RLA oper,X	37	2	6  	
 3718 D1:D5BE -  -  -  -  inst6502_rla_zpx:
 3719 D1:D5BE ED 33 06 -      ADDCYC(6)
 3720 D1:D5C1 7E -  -  -      ld  a,(hl)
 3721 D1:D5C2 01 00 38 D0     ld  bc,ZEROPAGE
 3722 D1:D5C6 81 -  -  -      add a,c
 3723 D1:D5C7 DD 86 01 -      add a,(ix+REGX)
 3724 D1:D5CA 4F -  -  -      ld  c,a
 3725 D1:D5CB DD 7E 04 -      ld  a,(ix+REGSR)
 3726 D1:D5CE 1F -  -  -      rra
 3727 D1:D5CF 0A -  -  -      ld  a,(bc)
 3728 D1:D5D0 17 -  -  -      rla
 3729 D1:D5D1 02 -  -  -      ld  (bc),a
 3730 D1:D5D2 -  -  -  -      ;Flag breakdown to optimize for split operation
 3731 D1:D5D2 DD 46 04 -      ld  b,(ix+REGSR)
 3732 D1:D5D5 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3733 D1:D5DB DD A6 00 -      and a,(ix+REGA)
 3734 D1:D5DE DD 77 00 -      ld  (ix+REGA),a
 3735 D1:D5E1 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3736 D1:D5E7 87 -  -  -      add a,a
 3737 D1:D5E8 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3738 D1:D5EE DD 70 04 -      ld  (ix+REGSR),b
 3739 D1:D5F1 C3 11 B9 D1     jp i6502NextLoad
 3740 D1:D5F5 -  -  -  -  
 3741 D1:D5F5 -  -  -  -  ;absolute	RLA oper	2F	3	6  	
 3742 D1:D5F5 -  -  -  -  inst6502_rla_abs:
 3743 D1:D5F5 ED 33 06 -      ADDCYC(6)
 3744 D1:D5F8 CD C0 B9 D1     call subroutine6502_abs_split_start
 3745 D1:D5FC E5 -  -  -      push hl
 3746 D1:D5FD 50 -  -  -          ld  d,b
 3747 D1:D5FE 79 -  -  -          ld  a,c
 3748 D1:D5FF 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3749 D1:D601 ED 4C -  -          mlt bc
 3750 D1:D603 21 00 40 D0         ld  hl,PAGETABLE
 3751 D1:D607 09 -  -  -          add hl,bc
 3752 D1:D608 ED 27 -  -          ld  hl,(hl)
 3753 D1:D60A 06 00 -  -          ld  b,0
 3754 D1:D60C 4F -  -  -          ld  c,a
 3755 D1:D60D 09 -  -  -          add hl,bc   ;full address
 3756 D1:D60E CD 68 B0 D1         READ_ACCESS
 3757 D1:D612 DD 46 04 -          ld  b,(ix+REGSR)
 3758 D1:D615 CB 18 -  -          rr b
 3759 D1:D617 17 -  -  -          rla
 3760 D1:D618 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3761 D1:D619 -  -  -  -          ;Split oper
 3762 D1:D619 DD 46 04 -          ld  b,(ix+REGSR)
 3763 D1:D61C CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3764 D1:D622 DD A6 00 -          and a,(ix+REGA)
 3765 D1:D625 DD 77 00 -          ld  (ix+REGA),a
 3766 D1:D628 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3767 D1:D62E 87 -  -  -          add a,a
 3768 D1:D62F CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3769 D1:D635 DD 70 04 -          ld  (ix+REGSR),b
 3770 D1:D638 41 -  -  -          ld  b,c
 3771 D1:D639 CD 10 B1 D1         WRITE_ACCESS
 3772 D1:D63D E1 -  -  -      pop hl
 3773 D1:D63E C3 11 B9 D1     jp i6502NextLoad
 3774 D1:D642 -  -  -  -  
 3775 D1:D642 -  -  -  -  ;absolut,X	RLA oper,X	3F	3	7  	
 3776 D1:D642 -  -  -  -  inst6502_rla_absx:
 3777 D1:D642 ED 33 07 -      ADDCYC(7)
 3778 D1:D645 CD 1D BA D1     PUSH_ABSXSPLIT_NODEP
 3779 D1:D649 CD 68 B0 D1         READ_ACCESS
 3780 D1:D64D DD 46 04 -          ld  b,(ix+REGSR)
 3781 D1:D650 CB 18 -  -          rr b
 3782 D1:D652 17 -  -  -          rla
 3783 D1:D653 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3784 D1:D654 -  -  -  -          ;Split oper
 3785 D1:D654 DD 46 04 -          ld  b,(ix+REGSR)
 3786 D1:D657 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3787 D1:D65D DD A6 00 -          and a,(ix+REGA)
 3788 D1:D660 DD 77 00 -          ld  (ix+REGA),a
 3789 D1:D663 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3790 D1:D669 87 -  -  -          add a,a
 3791 D1:D66A CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3792 D1:D670 DD 70 04 -          ld  (ix+REGSR),b
 3793 D1:D673 41 -  -  -          ld  b,c
 3794 D1:D674 CD 10 B1 D1         WRITE_ACCESS
 3795 D1:D678 E1 -  -  -      pop hl
 3796 D1:D679 C3 11 B9 D1     jp i6502NextLoad
 3797 D1:D67D -  -  -  -  
 3798 D1:D67D -  -  -  -  ;absolut,Y	RLA oper,Y	3B	3	7  	
 3799 D1:D67D -  -  -  -  inst6502_rla_absy:
 3800 D1:D67D ED 33 07 -      ADDCYC(7)
 3801 D1:D680 CD 18 BA D1     PUSH_ABSYSPLIT_NODEP
 3802 D1:D684 CD 68 B0 D1         READ_ACCESS
 3803 D1:D688 DD 46 04 -          ld  b,(ix+REGSR)
 3804 D1:D68B CB 18 -  -          rr b
 3805 D1:D68D 17 -  -  -          rla
 3806 D1:D68E 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3807 D1:D68F -  -  -  -          ;Split oper
 3808 D1:D68F DD 46 04 -          ld  b,(ix+REGSR)
 3809 D1:D692 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3810 D1:D698 DD A6 00 -          and a,(ix+REGA)
 3811 D1:D69B DD 77 00 -          ld  (ix+REGA),a
 3812 D1:D69E CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3813 D1:D6A4 87 -  -  -          add a,a
 3814 D1:D6A5 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3815 D1:D6AB DD 70 04 -          ld  (ix+REGSR),b
 3816 D1:D6AE 41 -  -  -          ld  b,c
 3817 D1:D6AF CD 10 B1 D1         WRITE_ACCESS
 3818 D1:D6B3 E1 -  -  -      pop hl
 3819 D1:D6B4 C3 11 B9 D1     jp i6502NextLoad
 3820 D1:D6B8 -  -  -  -  
 3821 D1:D6B8 -  -  -  -  ;(indirect,X)	RLA (oper,X)	23	2	8  	
 3822 D1:D6B8 -  -  -  -  isnt6502_rla_indx:
 3823 D1:D6B8 ED 33 08 -      ADDCYC(8)
 3824 D1:D6BB E5 -  -  -      push hl
 3825 D1:D6BC 7E -  -  -          ld  a,(hl)
 3826 D1:D6BD 21 00 38 D0         ld  hl,ZEROPAGE
 3827 D1:D6C1 85 -  -  -          add a,L
 3828 D1:D6C2 DD 86 01 -          add a,(ix+REGX)
 3829 D1:D6C5 6F -  -  -          ld  L,a
 3830 D1:D6C6 7E -  -  -          ld  a,(hl)
 3831 D1:D6C7 2C -  -  -          inc L
 3832 D1:D6C8 56 -  -  -          ld  d,(hl)
 3833 D1:D6C9 42 -  -  -          ld  b,d
 3834 D1:D6CA 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3835 D1:D6CC ED 4C -  -          mlt bc
 3836 D1:D6CE 21 00 40 D0         ld  hl,PAGETABLE
 3837 D1:D6D2 09 -  -  -          add hl,bc
 3838 D1:D6D3 ED 27 -  -          ld  hl,(hl)
 3839 D1:D6D5 06 00 -  -          ld  b,0
 3840 D1:D6D7 4F -  -  -          ld  c,a
 3841 D1:D6D8 09 -  -  -          add hl,bc
 3842 D1:D6D9 CD 68 B0 D1         READ_ACCESS
 3843 D1:D6DD DD 46 04 -          ld  b,(ix+REGSR)
 3844 D1:D6E0 CB 18 -  -          rr b
 3845 D1:D6E2 17 -  -  -          rla
 3846 D1:D6E3 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3847 D1:D6E4 -  -  -  -          ;Split oper
 3848 D1:D6E4 DD 46 04 -          ld  b,(ix+REGSR)
 3849 D1:D6E7 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3850 D1:D6ED DD A6 00 -          and a,(ix+REGA)
 3851 D1:D6F0 DD 77 00 -          ld  (ix+REGA),a
 3852 D1:D6F3 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3853 D1:D6F9 87 -  -  -          add a,a
 3854 D1:D6FA CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3855 D1:D700 DD 70 04 -          ld  (ix+REGSR),b
 3856 D1:D703 41 -  -  -          ld  b,c
 3857 D1:D704 CD 10 B1 D1         WRITE_ACCESS
 3858 D1:D708 E1 -  -  -      pop hl
 3859 D1:D709 C3 11 B9 D1     jp  i6502NextLoad
 3860 D1:D70D -  -  -  -  
 3861 D1:D70D -  -  -  -  ;(indirect),Y	RLA (oper),Y	33	2	8  
 3862 D1:D70D -  -  -  -  inst6502_rla_indy:
 3863 D1:D70D ED 33 08 -      ADDCYC(8)
 3864 D1:D710 E5 -  -  -      push hl
 3865 D1:D711 7E -  -  -          ld  a,(hl)
 3866 D1:D712 21 00 38 D0         ld  hl,ZEROPAGE
 3867 D1:D716 85 -  -  -          add a,L
 3868 D1:D717 6F -  -  -          ld  L,a
 3869 D1:D718 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3870 D1:D719 2C -  -  -          inc L
 3871 D1:D71A DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3872 D1:D71D 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3873 D1:D71E 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3874 D1:D720 24 -  -  -          inc h
 3875 D1:D721 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3876 D1:D722 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3877 D1:D724 ED 6C -  -          mlt hl          ;23.
 3878 D1:D726 01 00 40 D0         ld  bc,PAGETABLE
 3879 D1:D72A 09 -  -  -          add hl,bc
 3880 D1:D72B ED 27 -  -          ld  hl,(hl)     ;address get.
 3881 D1:D72D 01 00 00 00         ld  bc,0
 3882 D1:D731 4F -  -  -          ld  c,a
 3883 D1:D732 09 -  -  -          add hl,bc       ;Full address get.
 3884 D1:D733 CD 68 B0 D1         READ_ACCESS
 3885 D1:D737 DD 46 04 -          ld  b,(ix+REGSR)
 3886 D1:D73A CB 18 -  -          rr b
 3887 D1:D73C 17 -  -  -          rla
 3888 D1:D73D 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3889 D1:D73E -  -  -  -          ;Split oper
 3890 D1:D73E DD 46 04 -          ld  b,(ix+REGSR)
 3891 D1:D741 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3892 D1:D747 DD A6 00 -          and a,(ix+REGA)
 3893 D1:D74A DD 77 00 -          ld  (ix+REGA),a
 3894 D1:D74D CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3895 D1:D753 87 -  -  -          add a,a
 3896 D1:D754 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3897 D1:D75A DD 70 04 -          ld  (ix+REGSR),b
 3898 D1:D75D 41 -  -  -          ld  b,c
 3899 D1:D75E CD 10 B1 D1         WRITE_ACCESS
 3900 D1:D762 E1 -  -  -      pop hl
 3901 D1:D763 C3 11 B9 D1     jp  i6502NextLoad
 3902 D1:D767 -  -  -  -  
 3903 D1:D767 -  -  -  -  ;-----------------------------------------------------------------------------
 3904 D1:D767 -  -  -  -  ;RRA
 3905 D1:D767 -  -  -  -  ;ROR oper + ADC oper
 3906 D1:D767 -  -  -  -  ;M = C -> [76543210] -> C, A + M + C -> A, C. Affects VCZN
 3907 D1:D767 -  -  -  -  
 3908 D1:D767 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3909 D1:D767 -  -  -  -  ;zeropage	RRA oper	67	2	5  	
 3910 D1:D767 -  -  -  -  inst6502_rra_zp:
 3911 D1:D767 ED 33 05 -      ADDCYC(5)
 3912 D1:D76A 7E -  -  -      ld  a,(hl)
 3913 D1:D76B 01 00 38 D0     ld  bc,ZEROPAGE
 3914 D1:D76F 81 -  -  -      add a,c
 3915 D1:D770 4F -  -  -      ld  c,a
 3916 D1:D771 DD 7E 04 -      ld  a,(ix+REGSR)
 3917 D1:D774 1F -  -  -      rra
 3918 D1:D775 0A -  -  -      ld  a,(bc)
 3919 D1:D776 1F -  -  -      rra
 3920 D1:D777 02 -  -  -      ld  (bc),a
 3921 D1:D778 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 3922 D1:D77C 30 04 -  -      jr nc,$+6
 3923 D1:D77E DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 3924 D1:D782 4F -  -  -      ld  c,a
 3925 D1:D783 C3 52 BA D1     jp  subroutine6502_adc_combined_end
 3926 D1:D787 -  -  -  -  
 3927 D1:D787 -  -  -  -  ;zeropage,X	RRA oper,X	77	2	6  	
 3928 D1:D787 -  -  -  -  inst6502_rra_zpx:
 3929 D1:D787 ED 33 06 -      ADDCYC(6)
 3930 D1:D78A 7E -  -  -      ld  a,(hl)
 3931 D1:D78B 01 00 38 D0     ld  bc,ZEROPAGE
 3932 D1:D78F 81 -  -  -      add a,c
 3933 D1:D790 DD 86 01 -      add a,(ix+REGX)
 3934 D1:D793 4F -  -  -      ld  c,a
 3935 D1:D794 DD 7E 04 -      ld  a,(ix+REGSR)
 3936 D1:D797 1F -  -  -      rra
 3937 D1:D798 0A -  -  -      ld  a,(bc)
 3938 D1:D799 1F -  -  -      rra
 3939 D1:D79A 02 -  -  -      ld  (bc),a
 3940 D1:D79B DD CB 04 86     res SF_CARRY,(ix+REGSR)
 3941 D1:D79F 30 04 -  -      jr nc,$+6
 3942 D1:D7A1 DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 3943 D1:D7A5 4F -  -  -      ld  c,a
 3944 D1:D7A6 C3 52 BA D1     jp  subroutine6502_adc_combined_end
 3945 D1:D7AA -  -  -  -  
 3946 D1:D7AA -  -  -  -  ;absolute	RRA oper	6F	3	6  	
 3947 D1:D7AA -  -  -  -  inst6502_rra_abs:
 3948 D1:D7AA ED 33 06 -      ADDCYC(6)
 3949 D1:D7AD CD C0 B9 D1     call subroutine6502_abs_split_start
 3950 D1:D7B1 E5 -  -  -      push hl
 3951 D1:D7B2 50 -  -  -          ld  d,b
 3952 D1:D7B3 79 -  -  -          ld  a,c
 3953 D1:D7B4 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3954 D1:D7B6 ED 4C -  -          mlt bc
 3955 D1:D7B8 21 00 40 D0         ld  hl,PAGETABLE
 3956 D1:D7BC 09 -  -  -          add hl,bc
 3957 D1:D7BD ED 27 -  -          ld  hl,(hl)
 3958 D1:D7BF 06 00 -  -          ld  b,0
 3959 D1:D7C1 4F -  -  -          ld  c,a
 3960 D1:D7C2 09 -  -  -          add hl,bc   ;full address
 3961 D1:D7C3 CD 68 B0 D1         READ_ACCESS
 3962 D1:D7C7 DD 46 04 -          ld  b,(ix+REGSR)
 3963 D1:D7CA CB 18 -  -          rr b
 3964 D1:D7CC 1F -  -  -          rra
 3965 D1:D7CD DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3966 D1:D7D1 30 04 -  -          jr nc,$+6
 3967 D1:D7D3 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3968 D1:D7D7 47 -  -  -          ld  b,a
 3969 D1:D7D8 C5 -  -  -          push bc
 3970 D1:D7D9 CD 10 B1 D1             WRITE_ACCESS
 3971 D1:D7DD C1 -  -  -          pop bc
 3972 D1:D7DE 48 -  -  -          ld c,b
 3973 D1:D7DF E1 -  -  -      pop hl
 3974 D1:D7E0 C3 52 BA D1     jp  subroutine6502_adc_combined_end
 3975 D1:D7E4 -  -  -  -  
 3976 D1:D7E4 -  -  -  -  ;absolut,X	RRA oper,X	7F	3	7  	
 3977 D1:D7E4 -  -  -  -  inst6502_rra_absx:
 3978 D1:D7E4 ED 33 07 -      ADDCYC(7)
 3979 D1:D7E7 CD 1D BA D1     PUSH_ABSXSPLIT_NODEP
 3980 D1:D7EB CD 68 B0 D1         READ_ACCESS
 3981 D1:D7EF DD 46 04 -          ld  b,(ix+REGSR)
 3982 D1:D7F2 CB 18 -  -          rr b
 3983 D1:D7F4 1F -  -  -          rra
 3984 D1:D7F5 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3985 D1:D7F9 30 04 -  -          jr nc,$+6
 3986 D1:D7FB DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3987 D1:D7FF 47 -  -  -          ld  b,a
 3988 D1:D800 C5 -  -  -          push bc
 3989 D1:D801 CD 10 B1 D1             WRITE_ACCESS
 3990 D1:D805 C1 -  -  -          pop bc
 3991 D1:D806 48 -  -  -          ld c,b
 3992 D1:D807 E1 -  -  -      pop hl
 3993 D1:D808 C3 52 BA D1     jp  subroutine6502_adc_combined_end
 3994 D1:D80C -  -  -  -  
 3995 D1:D80C -  -  -  -  ;absolut,Y	RRA oper,Y	7B	3	7  	
 3996 D1:D80C -  -  -  -  inst6502_rra_absy:
 3997 D1:D80C ED 33 07 -      ADDCYC(7)
 3998 D1:D80F CD 18 BA D1     PUSH_ABSYSPLIT_NODEP
 3999 D1:D813 CD 68 B0 D1         READ_ACCESS
 4000 D1:D817 DD 46 04 -          ld  b,(ix+REGSR)
 4001 D1:D81A CB 18 -  -          rr b
 4002 D1:D81C 1F -  -  -          rra
 4003 D1:D81D DD CB 04 86         res SF_CARRY,(ix+REGSR)
 4004 D1:D821 30 04 -  -          jr nc,$+6
 4005 D1:D823 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 4006 D1:D827 47 -  -  -          ld  b,a
 4007 D1:D828 C5 -  -  -          push bc
 4008 D1:D829 CD 10 B1 D1             WRITE_ACCESS
 4009 D1:D82D C1 -  -  -          pop bc
 4010 D1:D82E 48 -  -  -          ld c,b
 4011 D1:D82F E1 -  -  -      pop hl
 4012 D1:D830 C3 52 BA D1     jp  subroutine6502_adc_combined_end
 4013 D1:D834 -  -  -  -  
 4014 D1:D834 -  -  -  -  ;(indirect,X)	RRA (oper,X)	63	2	8  	
 4015 D1:D834 -  -  -  -  isnt6502_rra_indx:
 4016 D1:D834 ED 33 08 -      ADDCYC(8)
 4017 D1:D837 E5 -  -  -      push hl
 4018 D1:D838 7E -  -  -          ld  a,(hl)
 4019 D1:D839 21 00 38 D0         ld  hl,ZEROPAGE
 4020 D1:D83D 85 -  -  -          add a,L
 4021 D1:D83E DD 86 01 -          add a,(ix+REGX)
 4022 D1:D841 6F -  -  -          ld  L,a
 4023 D1:D842 7E -  -  -          ld  a,(hl)
 4024 D1:D843 2C -  -  -          inc L
 4025 D1:D844 56 -  -  -          ld  d,(hl)
 4026 D1:D845 42 -  -  -          ld  b,d
 4027 D1:D846 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4028 D1:D848 ED 4C -  -          mlt bc
 4029 D1:D84A 21 00 40 D0         ld  hl,PAGETABLE
 4030 D1:D84E 09 -  -  -          add hl,bc
 4031 D1:D84F ED 27 -  -          ld  hl,(hl)
 4032 D1:D851 06 00 -  -          ld  b,0
 4033 D1:D853 4F -  -  -          ld  c,a
 4034 D1:D854 09 -  -  -          add hl,bc
 4035 D1:D855 CD 68 B0 D1         READ_ACCESS
 4036 D1:D859 DD 46 04 -          ld  b,(ix+REGSR)
 4037 D1:D85C CB 18 -  -          rr b
 4038 D1:D85E 1F -  -  -          rra
 4039 D1:D85F DD CB 04 86         res SF_CARRY,(ix+REGSR)
 4040 D1:D863 30 04 -  -          jr nc,$+6
 4041 D1:D865 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 4042 D1:D869 47 -  -  -          ld  b,a
 4043 D1:D86A C5 -  -  -          push bc
 4044 D1:D86B CD 10 B1 D1             WRITE_ACCESS
 4045 D1:D86F C1 -  -  -          pop bc
 4046 D1:D870 48 -  -  -          ld c,b
 4047 D1:D871 E1 -  -  -      pop hl
 4048 D1:D872 C3 52 BA D1     jp  subroutine6502_adc_combined_end
 4049 D1:D876 -  -  -  -  
 4050 D1:D876 -  -  -  -  ;(indirect),Y	RRA (oper),Y	73	2	8  
 4051 D1:D876 -  -  -  -  inst6502_rra_indy:
 4052 D1:D876 ED 33 08 -      ADDCYC(8)
 4053 D1:D879 E5 -  -  -      push hl
 4054 D1:D87A 7E -  -  -          ld  a,(hl)
 4055 D1:D87B 21 00 38 D0         ld  hl,ZEROPAGE
 4056 D1:D87F 85 -  -  -          add a,L
 4057 D1:D880 6F -  -  -          ld  L,a
 4058 D1:D881 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4059 D1:D882 2C -  -  -          inc L
 4060 D1:D883 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4061 D1:D886 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4062 D1:D887 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4063 D1:D889 24 -  -  -          inc h
 4064 D1:D88A 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4065 D1:D88B 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4066 D1:D88D ED 6C -  -          mlt hl          ;23.
 4067 D1:D88F 01 00 40 D0         ld  bc,PAGETABLE
 4068 D1:D893 09 -  -  -          add hl,bc
 4069 D1:D894 ED 27 -  -          ld  hl,(hl)     ;address get.
 4070 D1:D896 01 00 00 00         ld  bc,0
 4071 D1:D89A 4F -  -  -          ld  c,a
 4072 D1:D89B 09 -  -  -          add hl,bc       ;Full address get.
 4073 D1:D89C CD 68 B0 D1         READ_ACCESS
 4074 D1:D8A0 DD 46 04 -          ld  b,(ix+REGSR)
 4075 D1:D8A3 CB 18 -  -          rr b
 4076 D1:D8A5 1F -  -  -          rra
 4077 D1:D8A6 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 4078 D1:D8AA 30 04 -  -          jr nc,$+6
 4079 D1:D8AC DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 4080 D1:D8B0 47 -  -  -          ld  b,a
 4081 D1:D8B1 C5 -  -  -          push bc
 4082 D1:D8B2 CD 10 B1 D1             WRITE_ACCESS
 4083 D1:D8B6 C1 -  -  -          pop bc
 4084 D1:D8B7 48 -  -  -          ld c,b
 4085 D1:D8B8 E1 -  -  -      pop hl
 4086 D1:D8B9 C3 52 BA D1     jp  subroutine6502_adc_combined_end
 4087 D1:D8BD -  -  -  -  
 4088 D1:D8BD -  -  -  -  ;-----------------------------------------------------------------------------
 4089 D1:D8BD -  -  -  -  ;SAX (AXS, AAX) - A AND X -> M
 4090 D1:D8BD -  -  -  -  ;A and X are put on the bus at the same time (resulting effectively in an 
 4091 D1:D8BD -  -  -  -  ;AND operation) and stored in M. Flags not affected.
 4092 D1:D8BD -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4093 D1:D8BD -  -  -  -  ;zeropage	SAX oper	87	2	3  	
 4094 D1:D8BD -  -  -  -  inst6502_sax_zp:
 4095 D1:D8BD ED 33 03 -      ADDCYC(3)
 4096 D1:D8C0 7E -  -  -      ld  a,(hl)
 4097 D1:D8C1 01 00 38 D0     ld  bc,ZEROPAGE
 4098 D1:D8C5 81 -  -  -      add a,c
 4099 D1:D8C6 4F -  -  -      ld  c,a
 4100 D1:D8C7 DD 7E 00 -      ld  a,(ix+REGA)
 4101 D1:D8CA DD A6 01 -      and a,(ix+REGX)
 4102 D1:D8CD 02 -  -  -      ld  (bc),a
 4103 D1:D8CE C3 11 B9 D1     jp i6502NextLoad
 4104 D1:D8D2 -  -  -  -  
 4105 D1:D8D2 -  -  -  -  
 4106 D1:D8D2 -  -  -  -  ;zeropage,Y	SAX oper,Y	97	2	4  	
 4107 D1:D8D2 -  -  -  -  inst6502_sax_zpy:
 4108 D1:D8D2 ED 33 04 -      ADDCYC(4)
 4109 D1:D8D5 7E -  -  -      ld  a,(hl)
 4110 D1:D8D6 01 00 38 D0     ld  bc,ZEROPAGE
 4111 D1:D8DA 81 -  -  -      add a,c
 4112 D1:D8DB DD 86 02 -      add a,(ix+REGY)
 4113 D1:D8DE 4F -  -  -      ld  c,a
 4114 D1:D8DF DD 7E 00 -      ld  a,(ix+REGA)
 4115 D1:D8E2 DD A6 01 -      and a,(ix+REGX)
 4116 D1:D8E5 02 -  -  -      ld  (bc),a
 4117 D1:D8E6 C3 11 B9 D1     jp i6502NextLoad
 4118 D1:D8EA -  -  -  -  
 4119 D1:D8EA -  -  -  -  
 4120 D1:D8EA -  -  -  -  ;absolute	SAX oper	8F	3	4  	
 4121 D1:D8EA -  -  -  -  inst6502_sax_abs:
 4122 D1:D8EA ED 33 04 -      ADDCYC(4)
 4123 D1:D8ED CD C0 B9 D1     call subroutine6502_abs_split_start
 4124 D1:D8F1 E5 -  -  -      push hl
 4125 D1:D8F2 50 -  -  -          ld  d,b
 4126 D1:D8F3 79 -  -  -          ld  a,c
 4127 D1:D8F4 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4128 D1:D8F6 ED 4C -  -          mlt bc
 4129 D1:D8F8 21 00 40 D0         ld  hl,PAGETABLE
 4130 D1:D8FC 09 -  -  -          add hl,bc
 4131 D1:D8FD ED 27 -  -          ld  hl,(hl)
 4132 D1:D8FF 06 00 -  -          ld  b,0
 4133 D1:D901 4F -  -  -          ld  c,a
 4134 D1:D902 09 -  -  -          add hl,bc   ;full address
 4135 D1:D903 DD 7E 00 -          ld  a,(ix+REGA)
 4136 D1:D906 DD A6 01 -          and a,(ix+REGX)
 4137 D1:D909 47 -  -  -          ld  b,a
 4138 D1:D90A CD 10 B1 D1         WRITE_ACCESS
 4139 D1:D90E E1 -  -  -      pop hl
 4140 D1:D90F C3 11 B9 D1     jp i6502NextLoad
 4141 D1:D913 -  -  -  -  
 4142 D1:D913 -  -  -  -  ;(indirect,X)	SAX (oper,X)	83	2	6  
 4143 D1:D913 -  -  -  -  inst6502_sax_indx:
 4144 D1:D913 ED 33 06 -      ADDCYC(6)
 4145 D1:D916 E5 -  -  -      push hl
 4146 D1:D917 7E -  -  -          ld  a,(hl)
 4147 D1:D918 21 00 38 D0         ld  hl,ZEROPAGE
 4148 D1:D91C 85 -  -  -          add a,L
 4149 D1:D91D DD 86 01 -          add a,(ix+REGX)
 4150 D1:D920 6F -  -  -          ld  L,a
 4151 D1:D921 7E -  -  -          ld  a,(hl)
 4152 D1:D922 2C -  -  -          inc L
 4153 D1:D923 56 -  -  -          ld  d,(hl)
 4154 D1:D924 42 -  -  -          ld  b,d
 4155 D1:D925 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4156 D1:D927 ED 4C -  -          mlt bc
 4157 D1:D929 21 00 40 D0         ld  hl,PAGETABLE
 4158 D1:D92D 09 -  -  -          add hl,bc
 4159 D1:D92E ED 27 -  -          ld  hl,(hl)
 4160 D1:D930 06 00 -  -          ld  b,0
 4161 D1:D932 4F -  -  -          ld  c,a
 4162 D1:D933 09 -  -  -          add hl,bc
 4163 D1:D934 DD 7E 00 -          ld  a,(ix+REGA)
 4164 D1:D937 DD A6 01 -          and a,(ix+REGX)
 4165 D1:D93A 47 -  -  -          ld  b,a
 4166 D1:D93B CD 10 B1 D1         WRITE_ACCESS
 4167 D1:D93F E1 -  -  -      pop hl
 4168 D1:D940 C3 11 B9 D1     jp i6502NextLoad
 4169 D1:D944 -  -  -  -  
 4170 D1:D944 -  -  -  -  ;-----------------------------------------------------------------------------
 4171 D1:D944 -  -  -  -  ;SBX (AXS, SAX) - CMP and DEX at once, sets flags like CMP
 4172 D1:D944 -  -  -  -  ;(A AND X) - oper -> X.  Flags affected: CZN
 4173 D1:D944 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4174 D1:D944 -  -  -  -  ;immediate	SBX #oper	CB	2	2  
 4175 D1:D944 -  -  -  -  inst6502_sbx_imm:
 4176 D1:D944 DD 7E 00 -      ld  a,(ix+REGA)
 4177 D1:D947 DD A6 01 -      and a,(ix+REGX)
 4178 D1:D94A 96 -  -  -      sub a,(hl)
 4179 D1:D94B DD 77 01 -      ld  (ix+REGX),a
 4180 D1:D94E 3F -  -  -      ccf
 4181 D1:D94F DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 4182 D1:D969 C3 11 B9 D1     jp  i6502NextLoad
 4183 D1:D96D -  -  -  -  
 4184 D1:D96D -  -  -  -  ;-----------------------------------------------------------------------------
 4185 D1:D96D -  -  -  -  ;SHA (AHX, AXA) - Stores A AND X AND (high-byte of addr. + 1) at addr.
 4186 D1:D96D -  -  -  -  ;unstable: sometimes 'AND (H+1)' is dropped, 
 4187 D1:D96D -  -  -  -  ;page boundary crossings may not work 
 4188 D1:D96D -  -  -  -  ;(with the high-byte of the value used as the high-byte of the address)
 4189 D1:D96D -  -  -  -  ;A AND X AND (H+1) -> M
 4190 D1:D96D -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4191 D1:D96D -  -  -  -  ;
 4192 D1:D96D -  -  -  -  ;NOTE: NOT GOING TO IMPLEMENT THESE. THEY'LL ADVANCE THE 6502 PC IN THE CORRECT
 4193 D1:D96D -  -  -  -  ;MANNER BUT NOTHING MORE. THE CPU WILL HALT WHEN ENCOUNTERING ONE OF THESE.
 4194 D1:D96D -  -  -  -  ;
 4195 D1:D96D -  -  -  -  ;absolut,Y	SHA oper,Y	9F	3	5  	†
 4196 D1:D96D -  -  -  -  inst6502_sha_absy:
 4197 D1:D96D ED 33 05 -      ADDCYC(5)
 4198 D1:D970 CD DC B9 D1     PUSH_ABSYSPLIT
 4199 D1:D974 18 FE -  -          jr $
 4200 D1:D976 E1 -  -  -      pop hl
 4201 D1:D977 C3 11 B9 D1     jp i6502NextLoad
 4202 D1:D97B -  -  -  -  
 4203 D1:D97B -  -  -  -  ;(indirect),Y	SHA (oper),Y	93	2	6  	†
 4204 D1:D97B -  -  -  -  inst6502_sha_indy:
 4205 D1:D97B ED 33 06 -      ADDCYC(6)
 4206 D1:D97E E5 -  -  -      push hl
 4207 D1:D97F 7E -  -  -          ld  a,(hl)
 4208 D1:D980 21 00 38 D0         ld  hl,ZEROPAGE
 4209 D1:D984 85 -  -  -          add a,L
 4210 D1:D985 6F -  -  -          ld  L,a
 4211 D1:D986 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4212 D1:D987 2C -  -  -          inc L
 4213 D1:D988 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4214 D1:D98B 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4215 D1:D98C 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4216 D1:D98E 24 -  -  -          inc h
 4217 D1:D98F 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4218 D1:D990 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4219 D1:D992 ED 6C -  -          mlt hl          ;23.
 4220 D1:D994 01 00 40 D0         ld  bc,PAGETABLE
 4221 D1:D998 09 -  -  -          add hl,bc
 4222 D1:D999 ED 27 -  -          ld  hl,(hl)     ;address get.
 4223 D1:D99B 01 00 00 00         ld  bc,0
 4224 D1:D99F 4F -  -  -          ld  c,a
 4225 D1:D9A0 09 -  -  -          add hl,bc       ;Full address get.
 4226 D1:D9A1 CD 68 B0 D1         READ_ACCESS
 4227 D1:D9A5 18 FE -  -          jr $
 4228 D1:D9A7 E1 -  -  -      pop hl
 4229 D1:D9A8 C3 11 B9 D1     jp i6502NextLoad
 4230 D1:D9AC -  -  -  -  
 4231 D1:D9AC -  -  -  -  ;-----------------------------------------------------------------------------
 4232 D1:D9AC -  -  -  -  ;SHX (A11, SXA, XAS)
 4233 D1:D9AC -  -  -  -  ;SHY (A11, SYA, SAY)
 4234 D1:D9AC -  -  -  -  ;TAS (XAS, SHS)
 4235 D1:D9AC -  -  -  -  ;Not going to implement these, but they'll still get the program
 4236 D1:D9AC -  -  -  -  ;counter to make the correct noises. Right before locking up the core.
 4237 D1:D9AC -  -  -  -  ;All of these instructions are marked as "unstable" in that they'll sometimes
 4238 D1:D9AC -  -  -  -  ;drop the high byte, and page crossings sometimes won't work.
 4239 D1:D9AC -  -  -  -  
 4240 D1:D9AC -  -  -  -  ;absolut,Y	SHX oper,Y	9E	3	5  	†
 4241 D1:D9AC -  -  -  -  inst6502_shx_absy:
 4242 D1:D9AC ED 33 05 -      ADDCYC(5)
 4243 D1:D9AF CD 18 BA D1     PUSH_ABSYSPLIT_NODEP
 4244 D1:D9B3 18 FE -  -          jr $
 4245 D1:D9B5 E1 -  -  -      pop hl
 4246 D1:D9B6 C3 11 B9 D1     jp i6502NextLoad
 4247 D1:D9BA -  -  -  -  
 4248 D1:D9BA -  -  -  -  ;absolut,X	SHY oper,X	9C	3	5  	†
 4249 D1:D9BA -  -  -  -  inst6502_shy_absx:
 4250 D1:D9BA ED 33 05 -      ADDCYC(5)
 4251 D1:D9BD CD 1D BA D1     PUSH_ABSXSPLIT_NODEP
 4252 D1:D9C1 18 FE -  -          jr $
 4253 D1:D9C3 E1 -  -  -      pop hl
 4254 D1:D9C4 C3 11 B9 D1     jp i6502NextLoad
 4255 D1:D9C8 -  -  -  -  
 4256 D1:D9C8 -  -  -  -  ;absolut,Y	TAS oper,Y	9B	3	5  	†
 4257 D1:D9C8 -  -  -  -  inst6502_tas_absy:
 4258 D1:D9C8 ED 33 05 -      ADDCYC(5)
 4259 D1:D9CB CD 18 BA D1     PUSH_ABSYSPLIT_NODEP
 4260 D1:D9CF 18 FE -  -          jr $
 4261 D1:D9D1 E1 -  -  -      pop hl
 4262 D1:D9D2 C3 11 B9 D1     jp i6502NextLoad
 4263 D1:D9D6 -  -  -  -  
 4264 D1:D9D6 -  -  -  -  ;-----------------------------------------------------------------------------
 4265 D1:D9D6 -  -  -  -  ;SLO (ASO) - ASL oper + ORA oper
 4266 D1:D9D6 -  -  -  -  ;M = C <- [76543210] <- 0, A OR M -> A. Affects: CZN
 4267 D1:D9D6 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4268 D1:D9D6 -  -  -  -  
 4269 D1:D9D6 -  -  -  -  ;zeropage	SLO oper	07	2	5  	
 4270 D1:D9D6 -  -  -  -  inst6502_slo_zp:
 4271 D1:D9D6 ED 33 05 -      ADDCYC(5)
 4272 D1:D9D9 7E -  -  -      ld  a,(hl)
 4273 D1:D9DA 01 00 38 D0     ld  bc,ZEROPAGE
 4274 D1:D9DE 81 -  -  -      add a,c
 4275 D1:D9DF 4F -  -  -      ld  c,a
 4276 D1:D9E0 0A -  -  -      ld  a,(bc)
 4277 D1:D9E1 CB 27 -  -      sla a
 4278 D1:D9E3 02 -  -  -      ld  (bc),a
 4279 D1:D9E4 -  -  -  -      ;Flag breakdown to optimize for split operation
 4280 D1:D9E4 DD 46 04 -      ld  b,(ix+REGSR)
 4281 D1:D9E7 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4282 D1:D9ED DD B6 00 -      or  a,(ix+REGA)
 4283 D1:D9F0 DD 77 00 -      ld  (ix+REGA),a
 4284 D1:D9F3 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4285 D1:D9F9 87 -  -  -      add a,a
 4286 D1:D9FA CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4287 D1:DA00 DD 70 04 -      ld  (ix+REGSR),b
 4288 D1:DA03 C3 11 B9 D1     jp i6502NextLoad
 4289 D1:DA07 -  -  -  -  
 4290 D1:DA07 -  -  -  -  ;zeropage,X	SLO oper,X	17	2	6  	
 4291 D1:DA07 -  -  -  -  inst6502_slo_zpx:
 4292 D1:DA07 ED 33 06 -      ADDCYC(6)
 4293 D1:DA0A 7E -  -  -      ld  a,(hl)
 4294 D1:DA0B 01 00 38 D0     ld  bc,ZEROPAGE
 4295 D1:DA0F 81 -  -  -      add a,c
 4296 D1:DA10 DD 86 01 -      add a,(ix+REGX)
 4297 D1:DA13 4F -  -  -      ld  c,a
 4298 D1:DA14 0A -  -  -      ld  a,(bc)
 4299 D1:DA15 CB 27 -  -      sla a
 4300 D1:DA17 02 -  -  -      ld  (bc),a
 4301 D1:DA18 -  -  -  -      ;Flag breakdown to optimize for split operation
 4302 D1:DA18 DD 46 04 -      ld  b,(ix+REGSR)
 4303 D1:DA1B CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4304 D1:DA21 DD B6 00 -      or  a,(ix+REGA)
 4305 D1:DA24 DD 77 00 -      ld  (ix+REGA),a
 4306 D1:DA27 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4307 D1:DA2D 87 -  -  -      add a,a
 4308 D1:DA2E CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4309 D1:DA34 DD 70 04 -      ld  (ix+REGSR),b
 4310 D1:DA37 C3 11 B9 D1     jp i6502NextLoad
 4311 D1:DA3B -  -  -  -  
 4312 D1:DA3B -  -  -  -  ;absolute	SLO oper	0F	3	6  	
 4313 D1:DA3B -  -  -  -  inst6502_slo_abs:
 4314 D1:DA3B ED 33 06 -      ADDCYC(6)
 4315 D1:DA3E CD C0 B9 D1     call subroutine6502_abs_split_start
 4316 D1:DA42 E5 -  -  -      push hl
 4317 D1:DA43 50 -  -  -          ld  d,b
 4318 D1:DA44 79 -  -  -          ld  a,c
 4319 D1:DA45 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4320 D1:DA47 ED 4C -  -          mlt bc
 4321 D1:DA49 21 00 40 D0         ld  hl,PAGETABLE
 4322 D1:DA4D 09 -  -  -          add hl,bc
 4323 D1:DA4E ED 27 -  -          ld  hl,(hl)
 4324 D1:DA50 06 00 -  -          ld  b,0
 4325 D1:DA52 4F -  -  -          ld  c,a
 4326 D1:DA53 09 -  -  -          add hl,bc   ;full address
 4327 D1:DA54 CD 68 B0 D1         READ_ACCESS
 4328 D1:DA58 CB 27 -  -          sla a
 4329 D1:DA5A 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4330 D1:DA5B -  -  -  -          ;Split oper
 4331 D1:DA5B DD 46 04 -          ld  b,(ix+REGSR)
 4332 D1:DA5E CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4333 D1:DA64 DD B6 00 -          or  a,(ix+REGA)
 4334 D1:DA67 DD 77 00 -          ld  (ix+REGA),a
 4335 D1:DA6A CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4336 D1:DA70 87 -  -  -          add a,a
 4337 D1:DA71 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4338 D1:DA77 DD 70 04 -          ld  (ix+REGSR),b
 4339 D1:DA7A 41 -  -  -          ld  b,c
 4340 D1:DA7B CD 10 B1 D1         WRITE_ACCESS
 4341 D1:DA7F E1 -  -  -      pop hl
 4342 D1:DA80 C3 11 B9 D1     jp i6502NextLoad
 4343 D1:DA84 -  -  -  -  
 4344 D1:DA84 -  -  -  -  ;absolut,X	SLO oper,X	1F	3	7  	
 4345 D1:DA84 -  -  -  -  inst6502_slo_absx:
 4346 D1:DA84 ED 33 07 -      ADDCYC(7)
 4347 D1:DA87 CD 1D BA D1     PUSH_ABSXSPLIT_NODEP
 4348 D1:DA8B CD 68 B0 D1         READ_ACCESS
 4349 D1:DA8F CB 27 -  -          sla a
 4350 D1:DA91 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4351 D1:DA92 -  -  -  -          ;Split oper
 4352 D1:DA92 DD 46 04 -          ld  b,(ix+REGSR)
 4353 D1:DA95 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4354 D1:DA9B DD B6 00 -          or  a,(ix+REGA)
 4355 D1:DA9E DD 77 00 -          ld  (ix+REGA),a
 4356 D1:DAA1 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4357 D1:DAA7 87 -  -  -          add a,a
 4358 D1:DAA8 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4359 D1:DAAE DD 70 04 -          ld  (ix+REGSR),b
 4360 D1:DAB1 41 -  -  -          ld  b,c
 4361 D1:DAB2 CD 10 B1 D1         WRITE_ACCESS
 4362 D1:DAB6 E1 -  -  -      pop hl
 4363 D1:DAB7 C3 11 B9 D1     jp i6502NextLoad
 4364 D1:DABB -  -  -  -  
 4365 D1:DABB -  -  -  -  ;absolut,Y	SLO oper,Y	1B	3	7  	
 4366 D1:DABB -  -  -  -  inst6502_slo_absy:
 4367 D1:DABB ED 33 07 -      ADDCYC(7)
 4368 D1:DABE CD 18 BA D1     PUSH_ABSYSPLIT_NODEP
 4369 D1:DAC2 CD 68 B0 D1         READ_ACCESS
 4370 D1:DAC6 CB 27 -  -          sla a
 4371 D1:DAC8 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4372 D1:DAC9 -  -  -  -          ;Split oper
 4373 D1:DAC9 DD 46 04 -          ld  b,(ix+REGSR)
 4374 D1:DACC CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4375 D1:DAD2 DD B6 00 -          or  a,(ix+REGA)
 4376 D1:DAD5 DD 77 00 -          ld  (ix+REGA),a
 4377 D1:DAD8 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4378 D1:DADE 87 -  -  -          add a,a
 4379 D1:DADF CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4380 D1:DAE5 DD 70 04 -          ld  (ix+REGSR),b
 4381 D1:DAE8 41 -  -  -          ld  b,c
 4382 D1:DAE9 CD 10 B1 D1         WRITE_ACCESS
 4383 D1:DAED E1 -  -  -      pop hl
 4384 D1:DAEE C3 11 B9 D1     jp i6502NextLoad
 4385 D1:DAF2 -  -  -  -  
 4386 D1:DAF2 -  -  -  -  ;(indirect,X)	SLO (oper,X)	03	2	8  	
 4387 D1:DAF2 -  -  -  -  isnt6502_slo_indx:
 4388 D1:DAF2 ED 33 08 -      ADDCYC(8)
 4389 D1:DAF5 E5 -  -  -      push hl
 4390 D1:DAF6 7E -  -  -          ld  a,(hl)
 4391 D1:DAF7 21 00 38 D0         ld  hl,ZEROPAGE
 4392 D1:DAFB 85 -  -  -          add a,L
 4393 D1:DAFC DD 86 01 -          add a,(ix+REGX)
 4394 D1:DAFF 6F -  -  -          ld  L,a
 4395 D1:DB00 7E -  -  -          ld  a,(hl)
 4396 D1:DB01 2C -  -  -          inc L
 4397 D1:DB02 56 -  -  -          ld  d,(hl)
 4398 D1:DB03 42 -  -  -          ld  b,d
 4399 D1:DB04 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4400 D1:DB06 ED 4C -  -          mlt bc
 4401 D1:DB08 21 00 40 D0         ld  hl,PAGETABLE
 4402 D1:DB0C 09 -  -  -          add hl,bc
 4403 D1:DB0D ED 27 -  -          ld  hl,(hl)
 4404 D1:DB0F 06 00 -  -          ld  b,0
 4405 D1:DB11 4F -  -  -          ld  c,a
 4406 D1:DB12 09 -  -  -          add hl,bc
 4407 D1:DB13 CD 68 B0 D1         READ_ACCESS
 4408 D1:DB17 CB 27 -  -          sla a
 4409 D1:DB19 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4410 D1:DB1A -  -  -  -          ;Split oper
 4411 D1:DB1A DD 46 04 -          ld  b,(ix+REGSR)
 4412 D1:DB1D CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4413 D1:DB23 DD B6 00 -          or  a,(ix+REGA)
 4414 D1:DB26 DD 77 00 -          ld  (ix+REGA),a
 4415 D1:DB29 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4416 D1:DB2F 87 -  -  -          add a,a
 4417 D1:DB30 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4418 D1:DB36 DD 70 04 -          ld  (ix+REGSR),b
 4419 D1:DB39 41 -  -  -          ld  b,c
 4420 D1:DB3A CD 10 B1 D1         WRITE_ACCESS
 4421 D1:DB3E E1 -  -  -      pop hl
 4422 D1:DB3F C3 11 B9 D1     jp  i6502NextLoad
 4423 D1:DB43 -  -  -  -  
 4424 D1:DB43 -  -  -  -  ;(indirect),Y	SLO (oper),Y	13	2	8  
 4425 D1:DB43 -  -  -  -  inst6502_slo_indy:
 4426 D1:DB43 ED 33 08 -      ADDCYC(8)
 4427 D1:DB46 E5 -  -  -      push hl
 4428 D1:DB47 7E -  -  -          ld  a,(hl)
 4429 D1:DB48 21 00 38 D0         ld  hl,ZEROPAGE
 4430 D1:DB4C 85 -  -  -          add a,L
 4431 D1:DB4D 6F -  -  -          ld  L,a
 4432 D1:DB4E 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4433 D1:DB4F 2C -  -  -          inc L
 4434 D1:DB50 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4435 D1:DB53 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4436 D1:DB54 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4437 D1:DB56 24 -  -  -          inc h
 4438 D1:DB57 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4439 D1:DB58 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4440 D1:DB5A ED 6C -  -          mlt hl          ;23.
 4441 D1:DB5C 01 00 40 D0         ld  bc,PAGETABLE
 4442 D1:DB60 09 -  -  -          add hl,bc
 4443 D1:DB61 ED 27 -  -          ld  hl,(hl)     ;address get.
 4444 D1:DB63 01 00 00 00         ld  bc,0
 4445 D1:DB67 4F -  -  -          ld  c,a
 4446 D1:DB68 09 -  -  -          add hl,bc       ;Full address get.
 4447 D1:DB69 CD 68 B0 D1         READ_ACCESS
 4448 D1:DB6D CB 27 -  -          sla a
 4449 D1:DB6F 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4450 D1:DB70 -  -  -  -          ;Split oper
 4451 D1:DB70 DD 46 04 -          ld  b,(ix+REGSR)
 4452 D1:DB73 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4453 D1:DB79 DD B6 00 -          or  a,(ix+REGA)
 4454 D1:DB7C DD 77 00 -          ld  (ix+REGA),a
 4455 D1:DB7F CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4456 D1:DB85 87 -  -  -          add a,a
 4457 D1:DB86 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4458 D1:DB8C DD 70 04 -          ld  (ix+REGSR),b
 4459 D1:DB8F 41 -  -  -          ld  b,c
 4460 D1:DB90 CD 10 B1 D1         WRITE_ACCESS
 4461 D1:DB94 E1 -  -  -      pop hl
 4462 D1:DB95 C3 11 B9 D1     jp  i6502NextLoad
 4463 D1:DB99 -  -  -  -  
 4464 D1:DB99 -  -  -  -  ;-----------------------------------------------------------------------------
 4465 D1:DB99 -  -  -  -  ;SRE (LSE) - LSR oper + EOR oper
 4466 D1:DB99 -  -  -  -  ;M = 0 -> [76543210] -> C, A EOR M -> A. Affects: CZN
 4467 D1:DB99 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4468 D1:DB99 -  -  -  -  
 4469 D1:DB99 -  -  -  -  ;zeropage	SRE oper	47	2	5  	
 4470 D1:DB99 -  -  -  -  inst6502_sre_zp:
 4471 D1:DB99 ED 33 05 -      ADDCYC(5)
 4472 D1:DB9C 7E -  -  -      ld  a,(hl)
 4473 D1:DB9D 01 00 38 D0     ld  bc,ZEROPAGE
 4474 D1:DBA1 81 -  -  -      add a,c
 4475 D1:DBA2 4F -  -  -      ld  c,a
 4476 D1:DBA3 0A -  -  -      ld  a,(bc)
 4477 D1:DBA4 CB 3F -  -      srl a
 4478 D1:DBA6 02 -  -  -      ld  (bc),a
 4479 D1:DBA7 -  -  -  -      ;Flag breakdown to optimize for split operation
 4480 D1:DBA7 DD 46 04 -      ld  b,(ix+REGSR)
 4481 D1:DBAA CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4482 D1:DBB0 DD AE 00 -      xor a,(ix+REGA)
 4483 D1:DBB3 DD 77 00 -      ld  (ix+REGA),a
 4484 D1:DBB6 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4485 D1:DBBC 87 -  -  -      add a,a
 4486 D1:DBBD CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4487 D1:DBC3 DD 70 04 -      ld  (ix+REGSR),b
 4488 D1:DBC6 C3 11 B9 D1     jp i6502NextLoad
 4489 D1:DBCA -  -  -  -  
 4490 D1:DBCA -  -  -  -  ;zeropage,X	SRE oper,X	57	2	6  	
 4491 D1:DBCA -  -  -  -  inst6502_sre_zpx:
 4492 D1:DBCA ED 33 06 -      ADDCYC(6)
 4493 D1:DBCD 7E -  -  -      ld  a,(hl)
 4494 D1:DBCE 01 00 38 D0     ld  bc,ZEROPAGE
 4495 D1:DBD2 81 -  -  -      add a,c
 4496 D1:DBD3 DD 86 01 -      add a,(ix+REGX)
 4497 D1:DBD6 4F -  -  -      ld  c,a
 4498 D1:DBD7 0A -  -  -      ld  a,(bc)
 4499 D1:DBD8 CB 3F -  -      srl a
 4500 D1:DBDA 02 -  -  -      ld  (bc),a
 4501 D1:DBDB -  -  -  -      ;Flag breakdown to optimize for split operation
 4502 D1:DBDB DD 46 04 -      ld  b,(ix+REGSR)
 4503 D1:DBDE CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4504 D1:DBE4 DD AE 00 -      xor a,(ix+REGA)
 4505 D1:DBE7 DD 77 00 -      ld  (ix+REGA),a
 4506 D1:DBEA CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4507 D1:DBF0 87 -  -  -      add a,a
 4508 D1:DBF1 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4509 D1:DBF7 DD 70 04 -      ld  (ix+REGSR),b
 4510 D1:DBFA C3 11 B9 D1     jp i6502NextLoad
 4511 D1:DBFE -  -  -  -  
 4512 D1:DBFE -  -  -  -  ;absolute	SRE oper	4F	3	6  	
 4513 D1:DBFE -  -  -  -  inst6502_sre_abs:
 4514 D1:DBFE ED 33 06 -      ADDCYC(6)
 4515 D1:DC01 CD C0 B9 D1     call subroutine6502_abs_split_start
 4516 D1:DC05 E5 -  -  -      push hl
 4517 D1:DC06 50 -  -  -          ld  d,b
 4518 D1:DC07 79 -  -  -          ld  a,c
 4519 D1:DC08 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4520 D1:DC0A ED 4C -  -          mlt bc
 4521 D1:DC0C 21 00 40 D0         ld  hl,PAGETABLE
 4522 D1:DC10 09 -  -  -          add hl,bc
 4523 D1:DC11 ED 27 -  -          ld  hl,(hl)
 4524 D1:DC13 06 00 -  -          ld  b,0
 4525 D1:DC15 4F -  -  -          ld  c,a
 4526 D1:DC16 09 -  -  -          add hl,bc   ;full address
 4527 D1:DC17 CD 68 B0 D1         READ_ACCESS
 4528 D1:DC1B CB 3F -  -          srl a
 4529 D1:DC1D 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4530 D1:DC1E -  -  -  -          ;Split oper
 4531 D1:DC1E DD 46 04 -          ld  b,(ix+REGSR)
 4532 D1:DC21 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4533 D1:DC27 DD AE 00 -          xor a,(ix+REGA)
 4534 D1:DC2A DD 77 00 -          ld  (ix+REGA),a
 4535 D1:DC2D CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4536 D1:DC33 87 -  -  -          add a,a
 4537 D1:DC34 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4538 D1:DC3A DD 70 04 -          ld  (ix+REGSR),b
 4539 D1:DC3D 41 -  -  -          ld  b,c
 4540 D1:DC3E CD 10 B1 D1         WRITE_ACCESS
 4541 D1:DC42 E1 -  -  -      pop hl
 4542 D1:DC43 C3 11 B9 D1     jp i6502NextLoad
 4543 D1:DC47 -  -  -  -  
 4544 D1:DC47 -  -  -  -  ;absolut,X	SRE oper,X	5F	3	7  	
 4545 D1:DC47 -  -  -  -  inst6502_sre_absx:
 4546 D1:DC47 ED 33 07 -      ADDCYC(7)
 4547 D1:DC4A CD 1D BA D1     PUSH_ABSXSPLIT_NODEP
 4548 D1:DC4E CD 68 B0 D1         READ_ACCESS
 4549 D1:DC52 CB 3F -  -          srl a
 4550 D1:DC54 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4551 D1:DC55 -  -  -  -          ;Split oper
 4552 D1:DC55 DD 46 04 -          ld  b,(ix+REGSR)
 4553 D1:DC58 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4554 D1:DC5E DD AE 00 -          xor a,(ix+REGA)
 4555 D1:DC61 DD 77 00 -          ld  (ix+REGA),a
 4556 D1:DC64 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4557 D1:DC6A 87 -  -  -          add a,a
 4558 D1:DC6B CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4559 D1:DC71 DD 70 04 -          ld  (ix+REGSR),b
 4560 D1:DC74 41 -  -  -          ld  b,c
 4561 D1:DC75 CD 10 B1 D1         WRITE_ACCESS
 4562 D1:DC79 E1 -  -  -      pop hl
 4563 D1:DC7A C3 11 B9 D1     jp i6502NextLoad
 4564 D1:DC7E -  -  -  -  
 4565 D1:DC7E -  -  -  -  ;absolut,Y	SRE oper,Y	5B	3	7  	
 4566 D1:DC7E -  -  -  -  inst6502_sre_absy:
 4567 D1:DC7E ED 33 07 -      ADDCYC(7)
 4568 D1:DC81 CD 18 BA D1     PUSH_ABSYSPLIT_NODEP
 4569 D1:DC85 CD 68 B0 D1         READ_ACCESS
 4570 D1:DC89 CB 3F -  -          srl a
 4571 D1:DC8B 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4572 D1:DC8C -  -  -  -          ;Split oper
 4573 D1:DC8C DD 46 04 -          ld  b,(ix+REGSR)
 4574 D1:DC8F CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4575 D1:DC95 DD AE 00 -          xor a,(ix+REGA)
 4576 D1:DC98 DD 77 00 -          ld  (ix+REGA),a
 4577 D1:DC9B CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4578 D1:DCA1 87 -  -  -          add a,a
 4579 D1:DCA2 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4580 D1:DCA8 DD 70 04 -          ld  (ix+REGSR),b
 4581 D1:DCAB 41 -  -  -          ld  b,c
 4582 D1:DCAC CD 10 B1 D1         WRITE_ACCESS
 4583 D1:DCB0 E1 -  -  -      pop hl
 4584 D1:DCB1 C3 11 B9 D1     jp i6502NextLoad
 4585 D1:DCB5 -  -  -  -  
 4586 D1:DCB5 -  -  -  -  ;(indirect,X)	SRE (oper,X)	43	2	8  	
 4587 D1:DCB5 -  -  -  -  isnt6502_sre_indx:
 4588 D1:DCB5 ED 33 08 -      ADDCYC(8)
 4589 D1:DCB8 E5 -  -  -      push hl
 4590 D1:DCB9 7E -  -  -          ld  a,(hl)
 4591 D1:DCBA 21 00 38 D0         ld  hl,ZEROPAGE
 4592 D1:DCBE 85 -  -  -          add a,L
 4593 D1:DCBF DD 86 01 -          add a,(ix+REGX)
 4594 D1:DCC2 6F -  -  -          ld  L,a
 4595 D1:DCC3 7E -  -  -          ld  a,(hl)
 4596 D1:DCC4 2C -  -  -          inc L
 4597 D1:DCC5 56 -  -  -          ld  d,(hl)
 4598 D1:DCC6 42 -  -  -          ld  b,d
 4599 D1:DCC7 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4600 D1:DCC9 ED 4C -  -          mlt bc
 4601 D1:DCCB 21 00 40 D0         ld  hl,PAGETABLE
 4602 D1:DCCF 09 -  -  -          add hl,bc
 4603 D1:DCD0 ED 27 -  -          ld  hl,(hl)
 4604 D1:DCD2 06 00 -  -          ld  b,0
 4605 D1:DCD4 4F -  -  -          ld  c,a
 4606 D1:DCD5 09 -  -  -          add hl,bc
 4607 D1:DCD6 CD 68 B0 D1         READ_ACCESS
 4608 D1:DCDA CB 3F -  -          srl a
 4609 D1:DCDC 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4610 D1:DCDD -  -  -  -          ;Split oper
 4611 D1:DCDD DD 46 04 -          ld  b,(ix+REGSR)
 4612 D1:DCE0 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4613 D1:DCE6 DD AE 00 -          xor a,(ix+REGA)
 4614 D1:DCE9 DD 77 00 -          ld  (ix+REGA),a
 4615 D1:DCEC CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4616 D1:DCF2 87 -  -  -          add a,a
 4617 D1:DCF3 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4618 D1:DCF9 DD 70 04 -          ld  (ix+REGSR),b
 4619 D1:DCFC 41 -  -  -          ld  b,c
 4620 D1:DCFD CD 10 B1 D1         WRITE_ACCESS
 4621 D1:DD01 E1 -  -  -      pop hl
 4622 D1:DD02 C3 11 B9 D1     jp  i6502NextLoad
 4623 D1:DD06 -  -  -  -  
 4624 D1:DD06 -  -  -  -  ;(indirect),Y	SRE (oper),Y	53	2	8  
 4625 D1:DD06 -  -  -  -  inst6502_sre_indy:
 4626 D1:DD06 ED 33 08 -      ADDCYC(8)
 4627 D1:DD09 E5 -  -  -      push hl
 4628 D1:DD0A 7E -  -  -          ld  a,(hl)
 4629 D1:DD0B 21 00 38 D0         ld  hl,ZEROPAGE
 4630 D1:DD0F 85 -  -  -          add a,L
 4631 D1:DD10 6F -  -  -          ld  L,a
 4632 D1:DD11 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4633 D1:DD12 2C -  -  -          inc L
 4634 D1:DD13 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4635 D1:DD16 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4636 D1:DD17 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4637 D1:DD19 24 -  -  -          inc h
 4638 D1:DD1A 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4639 D1:DD1B 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4640 D1:DD1D ED 6C -  -          mlt hl          ;23.
 4641 D1:DD1F 01 00 40 D0         ld  bc,PAGETABLE
 4642 D1:DD23 09 -  -  -          add hl,bc
 4643 D1:DD24 ED 27 -  -          ld  hl,(hl)     ;address get.
 4644 D1:DD26 01 00 00 00         ld  bc,0
 4645 D1:DD2A 4F -  -  -          ld  c,a
 4646 D1:DD2B 09 -  -  -          add hl,bc       ;Full address get.
 4647 D1:DD2C CD 68 B0 D1         READ_ACCESS
 4648 D1:DD30 CB 3F -  -          srl a
 4649 D1:DD32 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4650 D1:DD33 -  -  -  -          ;Split oper
 4651 D1:DD33 DD 46 04 -          ld  b,(ix+REGSR)
 4652 D1:DD36 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4653 D1:DD3C DD AE 00 -          xor a,(ix+REGA)
 4654 D1:DD3F DD 77 00 -          ld  (ix+REGA),a
 4655 D1:DD42 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4656 D1:DD48 87 -  -  -          add a,a
 4657 D1:DD49 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4658 D1:DD4F DD 70 04 -          ld  (ix+REGSR),b
 4659 D1:DD52 41 -  -  -          ld  b,c
 4660 D1:DD53 CD 10 B1 D1         WRITE_ACCESS
 4661 D1:DD57 E1 -  -  -      pop hl
 4662 D1:DD58 C3 11 B9 D1     jp  i6502NextLoad
 4663 D1:DD5C -  -  -  -  
 4664 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4665 D1:DD5C -  -  -  -  ;USBC (USBC)
 4666 D1:DD5C -  -  -  -  ;immediate	USBC #oper	EB	2	2  
 4667 D1:DD5C -  -  -  -  ;Map this to instruction $E9 (inst6502_sbc_imm)
 4668 D1:DD5C -  -  -  -  
 4669 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4670 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4671 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4672 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4673 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4674 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4675 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4676 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4677 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4678 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4679 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4680 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4681 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4682 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4683 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4684 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4685 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4686 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4687 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4688 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4689 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4690 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4691 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4692 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4693 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4694 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4695 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4696 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4697 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4698 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4699 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4700 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4701 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4702 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4703 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4704 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4705 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4706 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4707 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4708 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4709 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4710 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4711 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4712 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4713 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4714 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4715 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4716 D1:DD5C -  -  -  -  ;-----------------------------------------------------------------------------
 4717 D1:DD5C -  -  -  -  
 4718 D1:DD5C -  -  -  -  inst6502_instruction_set:
 4719 D1:DD5C 93 CF D1 -  .dl	inst6502_brk					;00
 4720 D1:DD5F 3E C8 D1 -  .dl	inst6502_ora_indx				;01
 4721 D1:DD62 63 E0 D1 -  .dl	inst6502_jam_02 				;02
 4722 D1:DD65 F2 DA D1 -  .dl	isnt6502_slo_indx				;03
 4723 D1:DD68 31 D1 D1 -  .dl	inst6502_nop_zp 				;04
 4724 D1:DD6B 59 C7 D1 -  .dl	inst6502_ora_zp					;05
 4725 D1:DD6E F6 C8 D1 -  .dl	inst6502_asl_zp					;06
 4726 D1:DD71 D6 D9 D1 -  .dl	inst6502_slo_zp 				;07
 4727 D1:DD74 7F C0 D1 -  .dl	inst6502_php					;08
 4728 D1:DD77 37 C7 D1 -  .dl	inst6502_ora_imm				;09
 4729 D1:DD7A CD C8 D1 -  .dl	inst6502_asl					;0A
 4730 D1:DD7D 8A D1 D1 -  .dl	instr6502_anc_imm				;0B
 4731 D1:DD80 3F D1 D1 -  .dl	inst6502_nop_abs				;0C
 4732 D1:DD83 AE C7 D1 -  .dl	inst6502_ora_abs				;0D
 4733 D1:DD86 51 C9 D1 -  .dl	inst6502_asl_abs				;0E
 4734 D1:DD89 3B DA D1 -  .dl	inst6502_slo_abs				;0F
 4735 D1:DD8C 66 CF D1 -  .dl	inst6502_bpl					;10
 4736 D1:DD8F 82 C8 D1 -  .dl	inst6502_ora_indy				;11
 4737 D1:DD92 5D E0 D1 -  .dl	inst6502_jam_12_halt			;12 JAM. Used to halt emulation for inspection
 4738 D1:DD95 43 DB D1 -  .dl	inst6502_slo_indy				;13
 4739 D1:DD98 38 D1 D1 -  .dl	inst6502_nop_zpx				;14
 4740 D1:DD9B 82 C7 D1 -  .dl	inst6502_ora_zpx				;15
 4741 D1:DD9E 22 C9 D1 -  .dl	inst6502_asl_zpx				;16
 4742 D1:DDA1 07 DA D1 -  .dl	inst6502_slo_zpx				;17
 4743 D1:DDA4 D7 CC D1 -  .dl	inst6502_clc					;18
 4744 D1:DDA7 14 C8 D1 -  .dl	inst6502_ora_absy				;19
 4745 D1:DDAA 23 D1 D1 -  .dl	inst6502_nop_implied    		;1A
 4746 D1:DDAD BB DA D1 -  .dl	inst6502_slo_absy				;1B
 4747 D1:DDB0 50 D1 D1 -  .dl	inst6502_nop_absx				;1C
 4748 D1:DDB3 EA C7 D1 -  .dl	inst6502_ora_absx				;1D
 4749 D1:DDB6 95 C9 D1 -  .dl	inst6502_asl_absx				;1E
 4750 D1:DDB9 84 DA D1 -  .dl	inst6502_slo_absx				;1F
 4751 D1:DDBC 8B D0 D1 -  .dl	inst6502_jsr					;20
 4752 D1:DDBF 12 C5 D1 -  .dl	inst6502_and_indx				;21
 4753 D1:DDC2 63 E0 D1 -  .dl	inst6502_jam_22 				;22
 4754 D1:DDC5 B8 D6 D1 -  .dl	isnt6502_rla_indx				;23
 4755 D1:DDC8 D7 D0 D1 -  .dl	inst6502_bit_zp					;24
 4756 D1:DDCB 2D C4 D1 -  .dl	inst6502_and_zp					;25
 4757 D1:DDCE ED CA D1 -  .dl	inst6502_rol_zp					;26
 4758 D1:DDD1 8A D5 D1 -  .dl	inst6502_rla_zp 				;27
 4759 D1:DDD4 C1 C0 D1 -  .dl	inst6502_plp					;28
 4760 D1:DDD7 0B C4 D1 -  .dl	inst6502_and_imm				;29
 4761 D1:DDDA C1 CA D1 -  .dl	inst6502_rol					;2A
 4762 D1:DDDD 8A D1 D1 -  .dl	instr6502_anc2_imm				;2B
 4763 D1:DDE0 FB D0 D1 -  .dl	inst6502_bit_abs				;2C
 4764 D1:DDE3 82 C4 D1 -  .dl	inst6502_and_abs				;2D
 4765 D1:DDE6 4E CB D1 -  .dl	inst6502_rol_abs				;2E
 4766 D1:DDE9 F5 D5 D1 -  .dl	inst6502_rla_abs				;2F
 4767 D1:DDEC 48 CF D1 -  .dl	inst6502_bmi					;30
 4768 D1:DDEF 56 C5 D1 -  .dl	inst6502_and_indy				;31
 4769 D1:DDF2 63 E0 D1 -  .dl	inst6502_jam_32 				;32
 4770 D1:DDF5 0D D7 D1 -  .dl	inst6502_rla_indy				;33
 4771 D1:DDF8 38 D1 D1 -  .dl	inst6502_nop_zpx				;34
 4772 D1:DDFB 56 C4 D1 -  .dl	inst6502_and_zpx				;35
 4773 D1:DDFE 1C CB D1 -  .dl	inst6502_rol_zpx				;36
 4774 D1:DE01 BE D5 D1 -  .dl	inst6502_rla_zpx				;37
 4775 D1:DE04 03 CD D1 -  .dl	inst6502_sec					;38
 4776 D1:DE07 E8 C4 D1 -  .dl	inst6502_and_absy				;39
 4777 D1:DE0A 23 D1 D1 -  .dl	inst6502_nop_implied			;3A
 4778 D1:DE0D 7D D6 D1 -  .dl	inst6502_rla_absy   			;3B
 4779 D1:DE10 50 D1 D1 -  .dl	inst6502_nop_absx   			;3C
 4780 D1:DE13 BE C4 D1 -  .dl	inst6502_and_absx				;3D
 4781 D1:DE16 96 CB D1 -  .dl	inst6502_rol_absx				;3E
 4782 D1:DE19 42 D6 D1 -  .dl	inst6502_rla_absx   			;3F
 4783 D1:DE1C CF CF D1 -  .dl	inst6502_rti					;40
 4784 D1:DE1F A8 C6 D1 -  .dl	inst6502_eor_indx				;41
 4785 D1:DE22 63 E0 D1 -  .dl	inst6502_jam_42     			;42
 4786 D1:DE25 B5 DC D1 -  .dl	isnt6502_sre_indx   			;43
 4787 D1:DE28 31 D1 D1 -  .dl	inst6502_nop_zp     			;44
 4788 D1:DE2B C3 C5 D1 -  .dl	inst6502_eor_zp					;45
 4789 D1:DE2E F0 C9 D1 -  .dl	inst6502_lsr_zp					;46
 4790 D1:DE31 99 DB D1 -  .dl	inst6502_sre_zp     			;47
 4791 D1:DE34 69 C0 D1 -  .dl	inst6502_pha					;48
 4792 D1:DE37 A1 C5 D1 -  .dl	inst6502_eor_imm				;49
 4793 D1:DE3A C7 C9 D1 -  .dl	inst6502_lsr					;4A
 4794 D1:DE3D 60 D1 D1 -  .dl	inst6502_alr_imm    			;4B
 4795 D1:DE40 F4 CF D1 -  .dl	inst6052_jmp_abs				;4C
 4796 D1:DE43 18 C6 D1 -  .dl	inst6502_eor_abs				;4D
 4797 D1:DE46 4B CA D1 -  .dl	inst6502_lsr_abs				;4E
 4798 D1:DE49 FE DB D1 -  .dl	inst6502_sre_abs    			;4F
 4799 D1:DE4C 75 CF D1 -  .dl	inst6502_bvc					;50
 4800 D1:DE4F EC C6 D1 -  .dl	inst6502_eor_indy				;51
 4801 D1:DE52 63 E0 D1 -  .dl	inst6502_jam_52     			;52
 4802 D1:DE55 06 DD D1 -  .dl	inst6502_sre_indy   			;53
 4803 D1:DE58 38 D1 D1 -  .dl	inst6502_nop_zpx    			;54
 4804 D1:DE5B EC C5 D1 -  .dl	inst6502_eor_zpx				;55
 4805 D1:DE5E 1C CA D1 -  .dl	inst6502_lsr_zpx				;56
 4806 D1:DE61 CA DB D1 -  .dl	inst6502_sre_zpx    			;57
 4807 D1:DE64 ED CC D1 -  .dl	inst6502_cli					;58
 4808 D1:DE67 7E C6 D1 -  .dl	inst6502_eor_absy				;59
 4809 D1:DE6A 23 D1 D1 -  .dl	inst6502_nop_implied			;5A
 4810 D1:DE6D 7E DC D1 -  .dl	inst6502_sre_absy   			;5B
 4811 D1:DE70 50 D1 D1 -  .dl	inst6502_nop_absx   			;5C
 4812 D1:DE73 54 C6 D1 -  .dl	inst6502_eor_absx				;5D
 4813 D1:DE76 8F CA D1 -  .dl	inst6502_lsr_absx				;5E
 4814 D1:DE79 47 DC D1 -  .dl	inst6502_sre_absx   			;5F
 4815 D1:DE7C BD D0 D1 -  .dl	inst6502_rts					;60
 4816 D1:DE7F E1 C2 D1 -  .dl	inst6502_adc_indx				;61
 4817 D1:DE82 63 E0 D1 -  .dl	inst6502_jam_62     			;62
 4818 D1:DE85 34 D8 D1 -  .dl	isnt6502_rra_indx   			;63
 4819 D1:DE88 31 D1 D1 -  .dl	inst6502_nop_zp     			;64
 4820 D1:DE8B 79 C2 D1 -  .dl	inst6502_adc_zp					;65
 4821 D1:DE8E F8 CB D1 -  .dl	inst6502_ror_zp					;66
 4822 D1:DE91 67 D7 D1 -  .dl	inst6502_rra_zp     			;67
 4823 D1:DE94 97 C0 D1 -  .dl	inst6502_pla					;68
 4824 D1:DE97 71 C2 D1 -  .dl	inst6502_adc_imm				;69
 4825 D1:DE9A CC CB D1 -  .dl	inst6502_ror					;6A
 4826 D1:DE9D D7 D1 D1 -  .dl	instr6502_arr_imm   			;6B
 4827 D1:DEA0 41 D0 D1 -  .dl	inst6502_jmp_indir				;6C
 4828 D1:DEA3 9C C2 D1 -  .dl	inst6502_adc_abs				;6D
 4829 D1:DEA6 59 CC D1 -  .dl	inst6502_ror_abs				;6E
 4830 D1:DEA9 AA D7 D1 -  .dl	inst6502_rra_abs    			;6F
 4831 D1:DEAC 84 CF D1 -  .dl	inst6502_bvs					;70
 4832 D1:DEAF 0C C3 D1 -  .dl	inst6502_adc_indy				;71
 4833 D1:DEB2 63 E0 D1 -  .dl	inst6502_jam_72     			;72
 4834 D1:DEB5 76 D8 D1 -  .dl	inst6502_rra_indy   			;73
 4835 D1:DEB8 38 D1 D1 -  .dl	inst6502_nop_zpx    			;74
 4836 D1:DEBB 89 C2 D1 -  .dl	inst6502_adc_zpx				;75
 4837 D1:DEBE 27 CC D1 -  .dl	inst6502_ror_zpx				;76
 4838 D1:DEC1 87 D7 D1 -  .dl	inst6502_rra_zpx    			;77
 4839 D1:DEC4 19 CD D1 -  .dl	inst6502_sei					;78
 4840 D1:DEC7 D0 C2 D1 -  .dl	inst6502_adc_absy				;79
 4841 D1:DECA 23 D1 D1 -  .dl	inst6502_nop_implied			;7A
 4842 D1:DECD 0C D8 D1 -  .dl	inst6502_rra_absy   			;7B
 4843 D1:DED0 50 D1 D1 -  .dl	inst6502_nop_absx   			;7C
 4844 D1:DED3 BF C2 D1 -  .dl	inst6502_adc_absx				;7D
 4845 D1:DED6 A1 CC D1 -  .dl	inst6502_ror_absx				;7E
 4846 D1:DED9 E4 D7 D1 -  .dl	inst6502_rra_absx   			;7F
 4847 D1:DEDC 2A D1 D1 -  .dl	inst6502_nop_imm    			;80
 4848 D1:DEDF C0 BE D1 -  .dl	inst6502_sta_indx				;81
 4849 D1:DEE2 2A D1 D1 -  .dl	inst6502_nop_imm    			;82
 4850 D1:DEE5 13 D9 D1 -  .dl	inst6502_sax_indx   			;83
 4851 D1:DEE8 6B BF D1 -  .dl	inst6502_sty_zp					;84
 4852 D1:DEEB 4E BE D1 -  .dl	inst6502_sta_zp					;85
 4853 D1:DEEE 1F BF D1 -  .dl	inst6502_stx_zp					;86
 4854 D1:DEF1 BD D8 D1 -  .dl	inst6502_sax_zp     			;87
 4855 D1:DEF4 AF C1 D1 -  .dl	inst6502_dey					;88
 4856 D1:DEF7 2A D1 D1 -  .dl	inst6502_nop_imm    			;89
 4857 D1:DEFA 1A C0 D1 -  .dl	inst6502_txa					;8A
 4858 D1:DEFD B0 D1 D1 -  .dl	instr6502_ane_imm   			;8B
 4859 D1:DF00 92 BF D1 -  .dl	inst6502_sty_abs				;8C
 4860 D1:DF03 75 BE D1 -  .dl	inst6502_sta_abs				;8D
 4861 D1:DF06 46 BF D1 -  .dl	inst6502_stx_abs				;8E
 4862 D1:DF09 EA D8 D1 -  .dl	inst6502_sax_abs    			;8F
 4863 D1:DF0C 1B CF D1 -  .dl	inst6502_bcc					;90
 4864 D1:DF0F ED BE D1 -  .dl	inst6502_sta_indy				;91
 4865 D1:DF12 63 E0 D1 -  .dl	inst6502_jam_92     			;92
 4866 D1:DF15 7B D9 D1 -  .dl	inst6502_sha_indy   			;93
 4867 D1:DF18 7D BF D1 -  .dl	inst6502_sty_zpx				;94
 4868 D1:DF1B 60 BE D1 -  .dl	inst6502_sta_zpx				;95
 4869 D1:DF1E 31 BF D1 -  .dl	inst6502_stx_zpy				;96
 4870 D1:DF21 D2 D8 D1 -  .dl	inst6502_sax_zpy    			;97
 4871 D1:DF24 48 C0 D1 -  .dl	inst6502_tya					;98
 4872 D1:DF27 AD BE D1 -  .dl	inst6502_sta_absy				;99
 4873 D1:DF2A 3B C0 D1 -  .dl	inst6502_txs					;9A
 4874 D1:DF2D C8 D9 D1 -  .dl	inst6502_tas_absy   			;9B
 4875 D1:DF30 BA D9 D1 -  .dl	inst6502_shy_absx   			;9C
 4876 D1:DF33 9A BE D1 -  .dl	inst6502_sta_absx				;9D
 4877 D1:DF36 AC D9 D1 -  .dl	inst6502_shx_absy   			;9E
 4878 D1:DF39 6D D9 D1 -  .dl	inst6502_sha_absy   			;9F
 4879 D1:DF3C 80 BD D1 -  .dl	inst6502_ldy_imm				;A0
 4880 D1:DF3F 29 BC D1 -  .dl	inst6502_lda_indx				;A1
 4881 D1:DF42 B2 BC D1 -  .dl	inst6502_ldx_imm				;A2
 4882 D1:DF45 D4 D4 D1 -  .dl	inst6502_lax_indx   			;A3
 4883 D1:DF48 9F BD D1 -  .dl	inst6502_ldy_zp					;A4
 4884 D1:DF4B 53 BB D1 -  .dl	inst6502_lda_zp					;A5
 4885 D1:DF4E D1 BC D1 -  .dl	inst6502_ldx_zp					;A6
 4886 D1:DF51 19 D4 D1 -  .dl	inst6502_lax_zp     			;A7
 4887 D1:DF54 D8 BF D1 -  .dl	inst6502_tay					;A8
 4888 D1:DF57 34 BB D1 -  .dl	inst6502_lda_imm				;A9
 4889 D1:DF5A B7 BF D1 -  .dl	inst6502_tax					;AA
 4890 D1:DF5D 63 D5 D1 -  .dl	inst6502_lxa        			;AB
 4891 D1:DF60 EE BD D1 -  .dl	inst6502_ldy_abs				;AC
 4892 D1:DF63 A2 BB D1 -  .dl	inst6502_lda_abs				;AD
 4893 D1:DF66 20 BD D1 -  .dl	inst6502_ldx_abs				;AE
 4894 D1:DF69 6E D4 D1 -  .dl	inst6502_lax_abs    			;AF
 4895 D1:DF6C 2A CF D1 -  .dl	inst6502_bcs					;B0
 4896 D1:DF6F 6A BC D1 -  .dl	inst6502_lda_indy				;B1
 4897 D1:DF72 63 E0 D1 -  .dl	inst6502_jam_B2     			;B2
 4898 D1:DF75 18 D5 D1 -  .dl	inst6502_lax_indy   			;B3
 4899 D1:DF78 C5 BD D1 -  .dl	inst6502_ldy_zpx				;B4
 4900 D1:DF7B 79 BB D1 -  .dl	inst6502_lda_zpx				;B5
 4901 D1:DF7E F7 BC D1 -  .dl	inst6502_ldx_zpy				;B6
 4902 D1:DF81 42 D4 D1 -  .dl	inst6502_lax_zpy    			;B7
 4903 D1:DF84 F8 CC D1 -  .dl	inst6502_clv					;B8
 4904 D1:DF87 02 BC D1 -  .dl	inst6502_lda_absy				;B9
 4905 D1:DF8A F9 BF D1 -  .dl	inst6502_tsx					;BA
 4906 D1:DF8D E9 D3 D1 -  .dl	inst6502_las_absy   			;BB
 4907 D1:DF90 27 BE D1 -  .dl	inst6502_ldy_absx				;BC
 4908 D1:DF93 DB BB D1 -  .dl	inst6502_lda_absx				;BD
 4909 D1:DF96 59 BD D1 -  .dl	inst6502_ldx_absy				;BE
 4910 D1:DF99 AA D4 D1 -  .dl	inst6502_lax_absy   			;BF
 4911 D1:DF9C 84 CE D1 -  .dl	inst6502_cpy_imm				;C0
 4912 D1:DF9F 92 CD D1 -  .dl	inst6502_cmp_indx				;C1
 4913 D1:DFA2 2A D1 D1 -  .dl	inst6502_nop_imm    			;C2
 4914 D1:DFA5 91 D2 D1 -  .dl	inst6502_dcp_indx   			;C3
 4915 D1:DFA8 AA CE D1 -  .dl	inst6502_cpy_zp					;C4
 4916 D1:DFAB 2C CD D1 -  .dl	inst6502_cmp_zp					;C5
 4917 D1:DFAE DE C0 D1 -  .dl	inst6502_dec_zp					;C6
 4918 D1:DFB1 10 D2 D1 -  .dl	inst6502_dcp_zp     			;C7
 4919 D1:DFB4 B9 C1 D1 -  .dl	inst6502_iny					;C8
 4920 D1:DFB7 24 CD D1 -  .dl	inst6502_cmp_imm				;C9
 4921 D1:DFBA 91 C1 D1 -  .dl	inst6502_dex					;CA
 4922 D1:DFBD 44 D9 D1 -  .dl	inst6502_sbx_imm    			;CB
 4923 D1:DFC0 D9 CE D1 -  .dl	inst6502_cpy_abs				;CC
 4924 D1:DFC3 4D CD D1 -  .dl	inst6502_cmp_abs				;CD
 4925 D1:DFC6 2B C1 D1 -  .dl	inst6502_dec_abs				;CE
 4926 D1:DFC9 37 D2 D1 -  .dl	inst6502_dcp_abs    			;CF
 4927 D1:DFCC 57 CF D1 -  .dl	inst6502_bne					;D0
 4928 D1:DFCF BD CD D1 -  .dl	inst6502_cmp_indy				;D1
 4929 D1:DFD2 63 E0 D1 -  .dl	inst6502_jam_D2     			;D2
 4930 D1:DFD5 C3 D2 D1 -  .dl	inst6502_dcp_indy   			;D3
 4931 D1:DFD8 38 D1 D1 -  .dl	inst6502_nop_zpx    			;D4
 4932 D1:DFDB 3A CD D1 -  .dl	inst6502_cmp_zpx				;D5
 4933 D1:DFDE 03 C1 D1 -  .dl	inst6502_dec_zpx				;D6
 4934 D1:DFE1 22 D2 D1 -  .dl	inst6520_dcp_zpx    			;D7
 4935 D1:DFE4 E2 CC D1 -  .dl	inst6502_cld					;D8
 4936 D1:DFE7 81 CD D1 -  .dl	inst6502_cmp_absy				;D9
 4937 D1:DFEA 23 D1 D1 -  .dl	inst6502_nop_implied			;DA
 4938 D1:DFED 79 D2 D1 -  .dl	inst6502_dcp_absy   			;DB
 4939 D1:DFF0 50 D1 D1 -  .dl	inst6502_nop_absx   			;DC
 4940 D1:DFF3 70 CD D1 -  .dl	inst6502_cmp_absx				;DD
 4941 D1:DFF6 67 C1 D1 -  .dl	inst6502_dec_absx				;DE
 4942 D1:DFF9 61 D2 D1 -  .dl	inst6502_dcp_absx   			;DF
 4943 D1:DFFC EF CD D1 -  .dl	inst6502_cpx_imm				;E0
 4944 D1:DFFF AE C3 D1 -  .dl	inst6502_sbc_indx				;E1
 4945 D1:E002 2A D1 D1 -  .dl	inst6502_nop_imm    			;E2
 4946 D1:E005 7E D3 D1 -  .dl	inst6502_isc_indx   			;E3
 4947 D1:E008 15 CE D1 -  .dl	inst6502_cpx_zp					;E4
 4948 D1:E00B 46 C3 D1 -  .dl	inst6502_sbc_zp					;E5
 4949 D1:E00E BE C1 D1 -  .dl	inst6502_inc_zp					;E6
 4950 D1:E011 FA D2 D1 -  .dl	inst6502_isc_zp     			;E7
 4951 D1:E014 B4 C1 D1 -  .dl	inst6502_inx					;E8
 4952 D1:E017 3E C3 D1 -  .dl	inst6502_sbc_imm				;E9
 4953 D1:E01A 1C D1 D1 -  .dl	inst6502_nop					;EA
 4954 D1:E01D 3E C3 D1 -  .dl	inst6502_sbc_imm			    ;EB *DUPLICATE OF E9
 4955 D1:E020 42 CE D1 -  .dl	inst6502_cpx_abs				;EC
 4956 D1:E023 69 C3 D1 -  .dl	inst6502_sbc_abs				;ED
 4957 D1:E026 0B C2 D1 -  .dl	inst6502_inc_abs				;EE
 4958 D1:E029 21 D3 D1 -  .dl	inst6502_isc_abs    			;EF
 4959 D1:E02C 39 CF D1 -  .dl	inst6502_beq					;F0
 4960 D1:E02F D9 C3 D1 -  .dl	inst6502_sbc_indy				;F1
 4961 D1:E032 63 E0 D1 -  .dl	inst6502_jam_F2     			;F2
 4962 D1:E035 B1 D3 D1 -  .dl	inst6502_isc_indy   			;F3
 4963 D1:E038 38 D1 D1 -  .dl	inst6502_nop_zpx    			;F4
 4964 D1:E03B 56 C3 D1 -  .dl	inst6502_sbc_zpx				;F5
 4965 D1:E03E E3 C1 D1 -  .dl	inst6502_inc_zpx				;F6
 4966 D1:E041 0C D3 D1 -  .dl	inst6520_isc_zpx    			;F7
 4967 D1:E044 0E CD D1 -  .dl	inst6502_sed					;F8
 4968 D1:E047 9D C3 D1 -  .dl	inst6502_sbc_absy				;F9
 4969 D1:E04A 23 D1 D1 -  .dl	inst6502_nop_implied			;FA
 4970 D1:E04D 65 D3 D1 -  .dl	inst6502_isc_absy   			;FB
 4971 D1:E050 50 D1 D1 -  .dl	inst6502_nop_absx   			;FC
 4972 D1:E053 8C C3 D1 -  .dl	inst6502_sbc_absx				;FD
 4973 D1:E056 47 C2 D1 -  .dl	inst6502_inc_absx				;FE
 4974 D1:E059 4C D3 D1 -  .dl	inst6502_isc_absx   			;FF
 4975 D1:E05C -  -  -  -  
 4976 D1:E05C -  -  -  -  ;-----------------------------------------------------------------------------
 4977 D1:E05C -  -  -  -  ;-----------------------------------------------------------------------------
 4978 D1:E05C -  -  -  -  ;-----------------------------------------------------------------------------
 4979 D1:E05C -  -  -  -  ;These instructions are located here because they perform a function outside
 4980 D1:E05C -  -  -  -  ;the context of emulating instructions. These are mapped to instructions that
 4981 D1:E05C -  -  -  -  ;would, on the real hardware, freeze the CPU and require a reset to continue.
 4982 D1:E05C -  -  -  -  ;
 4983 D1:E05C -  -  -  -  ;Here, they'll let us perform useful things. Like exiting the emulator.
 4984 D1:E05C -  -  -  -  ;Or jamming in one spot. Or other things in the future. Debugging things.
 4985 D1:E05C -  -  -  -  ;Future stuff like breakpoints and console output. That sorta thing.
 4986 D1:E05C -  -  -  -  ;
 4987 D1:E05C -  -  -  -  
 4988 D1:E05C -  -  -  -  inst6502_:
 4989 D1:E05C C9 -  -  -      ret
 4990 D1:E05D -  -  -  -  
 4991 D1:E05D -  -  -  -  inst6502_jam_12_halt:
 4992 D1:E05D 18 FE -  -      jr $
 4993 D1:E05F C3 2A B9 D1     jp i6502FinishLoad
 4994 D1:E063 -  -  -  -  
 4995 D1:E063 -  -  -  -  inst6502_jam_02:
 4996 D1:E063 -  -  -  -  inst6502_jam_22:
 4997 D1:E063 -  -  -  -  inst6502_jam_32:
 4998 D1:E063 -  -  -  -  inst6502_jam_42:
 4999 D1:E063 -  -  -  -  inst6502_jam_52:
 5000 D1:E063 -  -  -  -  inst6502_jam_62:
 5001 D1:E063 -  -  -  -  inst6502_jam_72:
 5002 D1:E063 -  -  -  -  inst6502_jam_92:
 5003 D1:E063 -  -  -  -  inst6502_jam_B2:
 5004 D1:E063 -  -  -  -  inst6502_jam_D2:
 5005 D1:E063 -  -  -  -  inst6502_jam_F2:
 5006 D1:E063 C9 -  -  -      ret
 5007 D1:E064 -  -  -  -  
 5008 D1:E064 -  -  -  -  
 5009 D1:E064 -  -  -  -  
 5010 D1:E064 -  -  -  -  
 5011 D1:E064 -  -  -  -  
 5012 D1:E064 -  -  -  -  
 5013 D1:E064 -  -  -  -  
 5014 D1:E064 -  -  -  -  
 5015 D1:E064 -  -  -  -  
 5016 D1:E064 -  -  -  -  
 5017 D1:E064 -  -  -  -  
 5018 D1:E064 -  -  -  -  
 5019 D1:E064 -  -  -  -  
Listing for file "main.z80"
 1171 D1:E064 -  -  -  -  #include "debug.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    1 D1:E064 -  -  -  -  ;This has all the tables needed to drive the debugger.
    2 D1:E064 -  -  -  -  #include "debug_itab.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug_itab.z80"
    1 D1:E064 -  -  -  -  inst6502_opcode_width_table:
    2 D1:E064 01 -  -  -  .db 1    ;0: 
    3 D1:E065 02 -  -  -  .db 2    ;1: zpg,X
    4 D1:E066 03 -  -  -  .db 3    ;2: ind
    5 D1:E067 03 -  -  -  .db 3    ;3: abs
    6 D1:E068 03 -  -  -  .db 3    ;4: abs,X
    7 D1:E069 02 -  -  -  .db 2    ;5: X,ind
    8 D1:E06A 01 -  -  -  .db 1    ;6: A
    9 D1:E06B 02 -  -  -  .db 2    ;7: zpg
   10 D1:E06C 02 -  -  -  .db 2    ;8: rel
   11 D1:E06D 02 -  -  -  .db 2    ;9: #
   12 D1:E06E 01 -  -  -  .db 1    ;10: impl
   13 D1:E06F 02 -  -  -  .db 2    ;11: ind,Y
   14 D1:E070 03 -  -  -  .db 3    ;12: abs,Y
   15 D1:E071 02 -  -  -  .db 2    ;13: zpg,Y
   16 D1:E072 -  -  -  -  
   17 D1:E072 -  -  -  -  
   18 D1:E072 -  -  -  -  ;Note: 1=1byteOper, 2=2byteOper, -=1byteRelOper. Other chrs are literal
   19 D1:E072 -  -  -  -  
   20 D1:E072 -  -  -  -  inst6502_disassembler:
   21 D1:E072 01 -  -  -  .db 1,""  ;
   22 D1:E073 04 31 2C 58 .db 4,"1,X"  ;
   23 D1:E077 04 28 32 29 .db 4,"(2)"  ;
   24 D1:E07B 02 32 -  -  .db 2,"2"  ;
   25 D1:E07D 04 32 2C 58 .db 4,"2,X"  ;
   26 D1:E081 06 28 31 2C 
              58 29 -  -  .db 6,"(1,X)"  ;
   27 D1:E087 02 41 -  -  .db 2,"A"  ;
   28 D1:E089 02 31 -  -  .db 2,"1"  ;
   29 D1:E08B 02 2D -  -  .db 2,"-"  ;
   30 D1:E08D 03 23 31 -  .db 3,"#1"  ;
   31 D1:E090 01 -  -  -  .db 1,""  ;
   32 D1:E091 06 28 31 29 
              2C 59 -  -  .db 6,"(1),Y"  ;
   33 D1:E097 04 32 2C 59 .db 4,"2,Y"  ;
   34 D1:E09B 04 31 2C 59 .db 4,"1,Y"  ;
   35 D1:E09F -  -  -  -  
   36 D1:E09F -  -  -  -  inst6502_disassembly_table:
   37 D1:E09F 42 52 4B 0A .db "BRK", 10     ;0x00
   38 D1:E0A3 4F 52 41 05 .db "ORA", 5     ;0x01
   39 D1:E0A7 4A 41 4D 00 .db "JAM", 0     ;0x02
   40 D1:E0AB 53 4C 4F 05 .db "SLO", 5     ;0x03
   41 D1:E0AF 4E 4F 50 07 .db "NOP", 7     ;0x04
   42 D1:E0B3 4F 52 41 07 .db "ORA", 7     ;0x05
   43 D1:E0B7 41 53 4C 07 .db "ASL", 7     ;0x06
   44 D1:E0BB 53 4C 4F 07 .db "SLO", 7     ;0x07
   45 D1:E0BF 50 48 50 0A .db "PHP", 10     ;0x08
   46 D1:E0C3 4F 52 41 09 .db "ORA", 9     ;0x09
   47 D1:E0C7 41 53 4C 06 .db "ASL", 6     ;0x0A
   48 D1:E0CB 41 4E 43 09 .db "ANC", 9     ;0x0B
   49 D1:E0CF 4E 4F 50 03 .db "NOP", 3     ;0x0C
   50 D1:E0D3 4F 52 41 03 .db "ORA", 3     ;0x0D
   51 D1:E0D7 41 53 4C 03 .db "ASL", 3     ;0x0E
   52 D1:E0DB 53 4C 4F 03 .db "SLO", 3     ;0x0F
   53 D1:E0DF 42 50 4C 08 .db "BPL", 8     ;0x10
   54 D1:E0E3 4F 52 41 0B .db "ORA", 11     ;0x11
   55 D1:E0E7 4A 41 4D 00 .db "JAM", 0     ;0x12
   56 D1:E0EB 53 4C 4F 0B .db "SLO", 11     ;0x13
   57 D1:E0EF 4E 4F 50 01 .db "NOP", 1     ;0x14
   58 D1:E0F3 4F 52 41 01 .db "ORA", 1     ;0x15
   59 D1:E0F7 41 53 4C 01 .db "ASL", 1     ;0x16
   60 D1:E0FB 53 4C 4F 01 .db "SLO", 1     ;0x17
   61 D1:E0FF 43 4C 43 0A .db "CLC", 10     ;0x18
   62 D1:E103 4F 52 41 0C .db "ORA", 12     ;0x19
   63 D1:E107 4E 4F 50 0A .db "NOP", 10     ;0x1A
   64 D1:E10B 53 4C 4F 0C .db "SLO", 12     ;0x1B
   65 D1:E10F 4E 4F 50 04 .db "NOP", 4     ;0x1C
   66 D1:E113 4F 52 41 04 .db "ORA", 4     ;0x1D
   67 D1:E117 41 53 4C 04 .db "ASL", 4     ;0x1E
   68 D1:E11B 53 4C 4F 04 .db "SLO", 4     ;0x1F
   69 D1:E11F 4A 53 52 03 .db "JSR", 3     ;0x20
   70 D1:E123 41 4E 44 05 .db "AND", 5     ;0x21
   71 D1:E127 4A 41 4D 00 .db "JAM", 0     ;0x22
   72 D1:E12B 52 4C 41 05 .db "RLA", 5     ;0x23
   73 D1:E12F 42 49 54 07 .db "BIT", 7     ;0x24
   74 D1:E133 41 4E 44 07 .db "AND", 7     ;0x25
   75 D1:E137 52 4F 4C 07 .db "ROL", 7     ;0x26
   76 D1:E13B 52 4C 41 07 .db "RLA", 7     ;0x27
   77 D1:E13F 50 4C 50 0A .db "PLP", 10     ;0x28
   78 D1:E143 41 4E 44 09 .db "AND", 9     ;0x29
   79 D1:E147 52 4F 4C 06 .db "ROL", 6     ;0x2A
   80 D1:E14B 41 4E 43 09 .db "ANC", 9     ;0x2B
   81 D1:E14F 42 49 54 03 .db "BIT", 3     ;0x2C
   82 D1:E153 41 4E 44 03 .db "AND", 3     ;0x2D
   83 D1:E157 52 4F 4C 03 .db "ROL", 3     ;0x2E
   84 D1:E15B 52 4C 41 03 .db "RLA", 3     ;0x2F
   85 D1:E15F 42 4D 49 08 .db "BMI", 8     ;0x30
   86 D1:E163 41 4E 44 0B .db "AND", 11     ;0x31
   87 D1:E167 4A 41 4D 00 .db "JAM", 0     ;0x32
   88 D1:E16B 52 4C 41 0B .db "RLA", 11     ;0x33
   89 D1:E16F 4E 4F 50 01 .db "NOP", 1     ;0x34
   90 D1:E173 41 4E 44 01 .db "AND", 1     ;0x35
   91 D1:E177 52 4F 4C 01 .db "ROL", 1     ;0x36
   92 D1:E17B 52 4C 41 01 .db "RLA", 1     ;0x37
   93 D1:E17F 53 45 43 0A .db "SEC", 10     ;0x38
   94 D1:E183 41 4E 44 0C .db "AND", 12     ;0x39
   95 D1:E187 4E 4F 50 0A .db "NOP", 10     ;0x3A
   96 D1:E18B 52 4C 41 0C .db "RLA", 12     ;0x3B
   97 D1:E18F 4E 4F 50 04 .db "NOP", 4     ;0x3C
   98 D1:E193 41 4E 44 04 .db "AND", 4     ;0x3D
   99 D1:E197 52 4F 4C 04 .db "ROL", 4     ;0x3E
  100 D1:E19B 52 4C 41 04 .db "RLA", 4     ;0x3F
  101 D1:E19F 52 54 49 0A .db "RTI", 10     ;0x40
  102 D1:E1A3 45 4F 52 05 .db "EOR", 5     ;0x41
  103 D1:E1A7 4A 41 4D 00 .db "JAM", 0     ;0x42
  104 D1:E1AB 53 52 45 05 .db "SRE", 5     ;0x43
  105 D1:E1AF 4E 4F 50 07 .db "NOP", 7     ;0x44
  106 D1:E1B3 45 4F 52 07 .db "EOR", 7     ;0x45
  107 D1:E1B7 4C 53 52 07 .db "LSR", 7     ;0x46
  108 D1:E1BB 53 52 45 07 .db "SRE", 7     ;0x47
  109 D1:E1BF 50 48 41 0A .db "PHA", 10     ;0x48
  110 D1:E1C3 45 4F 52 09 .db "EOR", 9     ;0x49
  111 D1:E1C7 4C 53 52 06 .db "LSR", 6     ;0x4A
  112 D1:E1CB 41 4C 52 09 .db "ALR", 9     ;0x4B
  113 D1:E1CF 4A 4D 50 03 .db "JMP", 3     ;0x4C
  114 D1:E1D3 45 4F 52 03 .db "EOR", 3     ;0x4D
  115 D1:E1D7 4C 53 52 03 .db "LSR", 3     ;0x4E
  116 D1:E1DB 53 52 45 03 .db "SRE", 3     ;0x4F
  117 D1:E1DF 42 56 43 08 .db "BVC", 8     ;0x50
  118 D1:E1E3 45 4F 52 0B .db "EOR", 11     ;0x51
  119 D1:E1E7 4A 41 4D 00 .db "JAM", 0     ;0x52
  120 D1:E1EB 53 52 45 0B .db "SRE", 11     ;0x53
  121 D1:E1EF 4E 4F 50 01 .db "NOP", 1     ;0x54
  122 D1:E1F3 45 4F 52 01 .db "EOR", 1     ;0x55
  123 D1:E1F7 4C 53 52 01 .db "LSR", 1     ;0x56
  124 D1:E1FB 53 52 45 01 .db "SRE", 1     ;0x57
  125 D1:E1FF 43 4C 49 0A .db "CLI", 10     ;0x58
  126 D1:E203 45 4F 52 0C .db "EOR", 12     ;0x59
  127 D1:E207 4E 4F 50 0A .db "NOP", 10     ;0x5A
  128 D1:E20B 53 52 45 0C .db "SRE", 12     ;0x5B
  129 D1:E20F 4E 4F 50 04 .db "NOP", 4     ;0x5C
  130 D1:E213 45 4F 52 04 .db "EOR", 4     ;0x5D
  131 D1:E217 4C 53 52 04 .db "LSR", 4     ;0x5E
  132 D1:E21B 53 52 45 04 .db "SRE", 4     ;0x5F
  133 D1:E21F 52 54 53 0A .db "RTS", 10     ;0x60
  134 D1:E223 41 44 43 05 .db "ADC", 5     ;0x61
  135 D1:E227 4A 41 4D 00 .db "JAM", 0     ;0x62
  136 D1:E22B 52 52 41 05 .db "RRA", 5     ;0x63
  137 D1:E22F 4E 4F 50 07 .db "NOP", 7     ;0x64
  138 D1:E233 41 44 43 07 .db "ADC", 7     ;0x65
  139 D1:E237 52 4F 52 07 .db "ROR", 7     ;0x66
  140 D1:E23B 52 52 41 07 .db "RRA", 7     ;0x67
  141 D1:E23F 50 4C 41 0A .db "PLA", 10     ;0x68
  142 D1:E243 41 44 43 09 .db "ADC", 9     ;0x69
  143 D1:E247 52 4F 52 06 .db "ROR", 6     ;0x6A
  144 D1:E24B 41 52 52 09 .db "ARR", 9     ;0x6B
  145 D1:E24F 4A 4D 50 02 .db "JMP", 2     ;0x6C
  146 D1:E253 41 44 43 03 .db "ADC", 3     ;0x6D
  147 D1:E257 52 4F 52 03 .db "ROR", 3     ;0x6E
  148 D1:E25B 52 52 41 03 .db "RRA", 3     ;0x6F
  149 D1:E25F 42 56 53 08 .db "BVS", 8     ;0x70
  150 D1:E263 41 44 43 0B .db "ADC", 11     ;0x71
  151 D1:E267 4A 41 4D 00 .db "JAM", 0     ;0x72
  152 D1:E26B 52 52 41 0B .db "RRA", 11     ;0x73
  153 D1:E26F 4E 4F 50 01 .db "NOP", 1     ;0x74
  154 D1:E273 41 44 43 01 .db "ADC", 1     ;0x75
  155 D1:E277 52 4F 52 01 .db "ROR", 1     ;0x76
  156 D1:E27B 52 52 41 01 .db "RRA", 1     ;0x77
  157 D1:E27F 53 45 49 0A .db "SEI", 10     ;0x78
  158 D1:E283 41 44 43 0C .db "ADC", 12     ;0x79
  159 D1:E287 4E 4F 50 0A .db "NOP", 10     ;0x7A
  160 D1:E28B 52 52 41 0C .db "RRA", 12     ;0x7B
  161 D1:E28F 4E 4F 50 04 .db "NOP", 4     ;0x7C
  162 D1:E293 41 44 43 04 .db "ADC", 4     ;0x7D
  163 D1:E297 52 4F 52 04 .db "ROR", 4     ;0x7E
  164 D1:E29B 52 52 41 04 .db "RRA", 4     ;0x7F
  165 D1:E29F 4E 4F 50 09 .db "NOP", 9     ;0x80
  166 D1:E2A3 53 54 41 05 .db "STA", 5     ;0x81
  167 D1:E2A7 4E 4F 50 09 .db "NOP", 9     ;0x82
  168 D1:E2AB 53 41 58 05 .db "SAX", 5     ;0x83
  169 D1:E2AF 53 54 59 07 .db "STY", 7     ;0x84
  170 D1:E2B3 53 54 41 07 .db "STA", 7     ;0x85
  171 D1:E2B7 53 54 58 07 .db "STX", 7     ;0x86
  172 D1:E2BB 53 41 58 07 .db "SAX", 7     ;0x87
  173 D1:E2BF 44 45 59 0A .db "DEY", 10     ;0x88
  174 D1:E2C3 4E 4F 50 09 .db "NOP", 9     ;0x89
  175 D1:E2C7 54 58 41 0A .db "TXA", 10     ;0x8A
  176 D1:E2CB 41 4E 45 09 .db "ANE", 9     ;0x8B
  177 D1:E2CF 53 54 59 03 .db "STY", 3     ;0x8C
  178 D1:E2D3 53 54 41 03 .db "STA", 3     ;0x8D
  179 D1:E2D7 53 54 58 03 .db "STX", 3     ;0x8E
  180 D1:E2DB 53 41 58 03 .db "SAX", 3     ;0x8F
  181 D1:E2DF 42 43 43 08 .db "BCC", 8     ;0x90
  182 D1:E2E3 53 54 41 0B .db "STA", 11     ;0x91
  183 D1:E2E7 4A 41 4D 00 .db "JAM", 0     ;0x92
  184 D1:E2EB 53 48 41 0B .db "SHA", 11     ;0x93
  185 D1:E2EF 53 54 59 01 .db "STY", 1     ;0x94
  186 D1:E2F3 53 54 41 01 .db "STA", 1     ;0x95
  187 D1:E2F7 53 54 58 0D .db "STX", 13     ;0x96
  188 D1:E2FB 53 41 58 0D .db "SAX", 13     ;0x97
  189 D1:E2FF 54 59 41 0A .db "TYA", 10     ;0x98
  190 D1:E303 53 54 41 0C .db "STA", 12     ;0x99
  191 D1:E307 54 58 53 0A .db "TXS", 10     ;0x9A
  192 D1:E30B 54 41 53 0C .db "TAS", 12     ;0x9B
  193 D1:E30F 53 48 59 04 .db "SHY", 4     ;0x9C
  194 D1:E313 53 54 41 04 .db "STA", 4     ;0x9D
  195 D1:E317 53 48 58 0C .db "SHX", 12     ;0x9E
  196 D1:E31B 53 48 41 0C .db "SHA", 12     ;0x9F
  197 D1:E31F 4C 44 59 09 .db "LDY", 9     ;0xA0
  198 D1:E323 4C 44 41 05 .db "LDA", 5     ;0xA1
  199 D1:E327 4C 44 58 09 .db "LDX", 9     ;0xA2
  200 D1:E32B 4C 41 58 05 .db "LAX", 5     ;0xA3
  201 D1:E32F 4C 44 59 07 .db "LDY", 7     ;0xA4
  202 D1:E333 4C 44 41 07 .db "LDA", 7     ;0xA5
  203 D1:E337 4C 44 58 07 .db "LDX", 7     ;0xA6
  204 D1:E33B 4C 41 58 07 .db "LAX", 7     ;0xA7
  205 D1:E33F 54 41 59 0A .db "TAY", 10     ;0xA8
  206 D1:E343 4C 44 41 09 .db "LDA", 9     ;0xA9
  207 D1:E347 54 41 58 0A .db "TAX", 10     ;0xAA
  208 D1:E34B 4C 58 41 09 .db "LXA", 9     ;0xAB
  209 D1:E34F 4C 44 59 03 .db "LDY", 3     ;0xAC
  210 D1:E353 4C 44 41 03 .db "LDA", 3     ;0xAD
  211 D1:E357 4C 44 58 03 .db "LDX", 3     ;0xAE
  212 D1:E35B 4C 41 58 03 .db "LAX", 3     ;0xAF
  213 D1:E35F 42 43 53 08 .db "BCS", 8     ;0xB0
  214 D1:E363 4C 44 41 0B .db "LDA", 11     ;0xB1
  215 D1:E367 4A 41 4D 00 .db "JAM", 0     ;0xB2
  216 D1:E36B 4C 41 58 0B .db "LAX", 11     ;0xB3
  217 D1:E36F 4C 44 59 01 .db "LDY", 1     ;0xB4
  218 D1:E373 4C 44 41 01 .db "LDA", 1     ;0xB5
  219 D1:E377 4C 44 58 0D .db "LDX", 13     ;0xB6
  220 D1:E37B 4C 41 58 0D .db "LAX", 13     ;0xB7
  221 D1:E37F 43 4C 56 0A .db "CLV", 10     ;0xB8
  222 D1:E383 4C 44 41 0C .db "LDA", 12     ;0xB9
  223 D1:E387 54 53 58 0A .db "TSX", 10     ;0xBA
  224 D1:E38B 4C 41 53 0C .db "LAS", 12     ;0xBB
  225 D1:E38F 4C 44 59 04 .db "LDY", 4     ;0xBC
  226 D1:E393 4C 44 41 04 .db "LDA", 4     ;0xBD
  227 D1:E397 4C 44 58 0C .db "LDX", 12     ;0xBE
  228 D1:E39B 4C 41 58 0C .db "LAX", 12     ;0xBF
  229 D1:E39F 43 50 59 09 .db "CPY", 9     ;0xC0
  230 D1:E3A3 43 4D 50 05 .db "CMP", 5     ;0xC1
  231 D1:E3A7 4E 4F 50 09 .db "NOP", 9     ;0xC2
  232 D1:E3AB 44 43 50 05 .db "DCP", 5     ;0xC3
  233 D1:E3AF 43 50 59 07 .db "CPY", 7     ;0xC4
  234 D1:E3B3 43 4D 50 07 .db "CMP", 7     ;0xC5
  235 D1:E3B7 44 45 43 07 .db "DEC", 7     ;0xC6
  236 D1:E3BB 44 43 50 07 .db "DCP", 7     ;0xC7
  237 D1:E3BF 49 4E 59 0A .db "INY", 10     ;0xC8
  238 D1:E3C3 43 4D 50 09 .db "CMP", 9     ;0xC9
  239 D1:E3C7 44 45 58 0A .db "DEX", 10     ;0xCA
  240 D1:E3CB 53 42 58 09 .db "SBX", 9     ;0xCB
  241 D1:E3CF 43 50 59 03 .db "CPY", 3     ;0xCC
  242 D1:E3D3 43 4D 50 03 .db "CMP", 3     ;0xCD
  243 D1:E3D7 44 45 43 03 .db "DEC", 3     ;0xCE
  244 D1:E3DB 44 43 50 03 .db "DCP", 3     ;0xCF
  245 D1:E3DF 42 4E 45 08 .db "BNE", 8     ;0xD0
  246 D1:E3E3 43 4D 50 0B .db "CMP", 11     ;0xD1
  247 D1:E3E7 4A 41 4D 00 .db "JAM", 0     ;0xD2
  248 D1:E3EB 44 43 50 0B .db "DCP", 11     ;0xD3
  249 D1:E3EF 4E 4F 50 01 .db "NOP", 1     ;0xD4
  250 D1:E3F3 43 4D 50 01 .db "CMP", 1     ;0xD5
  251 D1:E3F7 44 45 43 01 .db "DEC", 1     ;0xD6
  252 D1:E3FB 44 43 50 01 .db "DCP", 1     ;0xD7
  253 D1:E3FF 43 4C 44 0A .db "CLD", 10     ;0xD8
  254 D1:E403 43 4D 50 0C .db "CMP", 12     ;0xD9
  255 D1:E407 4E 4F 50 0A .db "NOP", 10     ;0xDA
  256 D1:E40B 44 43 50 0C .db "DCP", 12     ;0xDB
  257 D1:E40F 4E 4F 50 04 .db "NOP", 4     ;0xDC
  258 D1:E413 43 4D 50 04 .db "CMP", 4     ;0xDD
  259 D1:E417 44 45 43 04 .db "DEC", 4     ;0xDE
  260 D1:E41B 44 43 50 04 .db "DCP", 4     ;0xDF
  261 D1:E41F 43 50 58 09 .db "CPX", 9     ;0xE0
  262 D1:E423 53 42 43 05 .db "SBC", 5     ;0xE1
  263 D1:E427 4E 4F 50 09 .db "NOP", 9     ;0xE2
  264 D1:E42B 49 53 43 05 .db "ISC", 5     ;0xE3
  265 D1:E42F 43 50 58 07 .db "CPX", 7     ;0xE4
  266 D1:E433 53 42 43 07 .db "SBC", 7     ;0xE5
  267 D1:E437 49 4E 43 07 .db "INC", 7     ;0xE6
  268 D1:E43B 49 53 43 07 .db "ISC", 7     ;0xE7
  269 D1:E43F 49 4E 58 0A .db "INX", 10     ;0xE8
  270 D1:E443 53 42 43 09 .db "SBC", 9     ;0xE9
  271 D1:E447 4E 4F 50 0A .db "NOP", 10     ;0xEA
  272 D1:E44B 55 53 42 09 .db "USB", 9     ;0xEB
  273 D1:E44F 43 50 58 03 .db "CPX", 3     ;0xEC
  274 D1:E453 53 42 43 03 .db "SBC", 3     ;0xED
  275 D1:E457 49 4E 43 03 .db "INC", 3     ;0xEE
  276 D1:E45B 49 53 43 03 .db "ISC", 3     ;0xEF
  277 D1:E45F 42 45 51 08 .db "BEQ", 8     ;0xF0
  278 D1:E463 53 42 43 0B .db "SBC", 11     ;0xF1
  279 D1:E467 4A 41 4D 00 .db "JAM", 0     ;0xF2
  280 D1:E46B 49 53 43 0B .db "ISC", 11     ;0xF3
  281 D1:E46F 4E 4F 50 01 .db "NOP", 1     ;0xF4
  282 D1:E473 53 42 43 01 .db "SBC", 1     ;0xF5
  283 D1:E477 49 4E 43 01 .db "INC", 1     ;0xF6
  284 D1:E47B 49 53 43 01 .db "ISC", 1     ;0xF7
  285 D1:E47F 53 45 44 0A .db "SED", 10     ;0xF8
  286 D1:E483 53 42 43 0C .db "SBC", 12     ;0xF9
  287 D1:E487 4E 4F 50 0A .db "NOP", 10     ;0xFA
  288 D1:E48B 49 53 43 0C .db "ISC", 12     ;0xFB
  289 D1:E48F 4E 4F 50 04 .db "NOP", 4     ;0xFC
  290 D1:E493 53 42 43 04 .db "SBC", 4     ;0xFD
  291 D1:E497 49 4E 43 04 .db "INC", 4     ;0xFE
  292 D1:E49B 49 53 43 04 .db "ISC", 4     ;0xFF
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    3 D1:E49F -  -  -  -  
    4 D1:E49F -  -  -  -  
    5 D1:E49F -  -  -  -  ;You must assign a print character routine.
    6 D1:E49F -  -  -  -  ;You must also write all opcode bytes to operbuf or map operbuf to where written
    7 D1:E49F -  -  -  -  dbg_printChr    = PrintBigFont
    8 D1:E49F -  -  -  -  operbuf         = debugram
    9 D1:E49F -  -  -  -  
   10 D1:E49F -  -  -  -  
   11 D1:E49F -  -  -  -  dbg_resetScreen:
   12 D1:E49F 21 00 00 D4     ld  hl,screenBuf1
   13 D1:E4A3 11 01 00 D4     ld  de,screenBuf1+1
   14 D1:E4A7 01 FF 57 02     ld  bc,(2*240*320)-1
   15 D1:E4AB 36 00 -  -      ld  (hl),$00
   16 D1:E4AD ED B0 -  -      ldir
   17 D1:E4AF AF -  -  -      xor a,a
   18 D1:E4B0 CD 5E B3 D1     call setLineStart
   19 D1:E4B4 CD 67 B3 D1     call setCurLine
   20 D1:E4B8 C9 -  -  -      ret
   21 D1:E4B9 -  -  -  -  
   22 D1:E4B9 -  -  -  -  dbg_prepNextLine:
   23 D1:E4B9 AF -  -  -      xor a,a
   24 D1:E4BA 32 F6 31 D0     ld  (xPos),a
   25 D1:E4BE CD 34 B4 D1     call calculateScreenPtr
   26 D1:E4C2 EB -  -  -      ex  de,hl
   27 D1:E4C3 21 FF 2B D5     ld  hl,screenBuf2-1
   28 D1:E4C7 B7 -  -  -      or  a,a
   29 D1:E4C8 ED 52 -  -      sbc hl,de
   30 D1:E4CA -  -  -  -  ;If C: DE in sb2. subtract to set in sb1.
   31 D1:E4CA -  -  -  -  ;If NC: DE in sb1. add to set in sb2.
   32 D1:E4CA 21 00 2C 01     ld  hl,320*240
   33 D1:E4CE 30 04 -  -      jr  nc,+_
   34 D1:E4D0 21 00 D4 FE     ld  hl,-(320*240)+0
   35 D1:E4D4 19 -  -  -  _:  add hl,de   ;HL set to other buffer. DE points to current buffer.
   36 D1:E4D5 01 00 0A 00     ld  bc,320*8    ;copy one line from other buffer to current buffer.
   37 D1:E4D9 7E -  -  -  _:  ld  a,(hl)
   38 D1:E4DA C6 01 -  -      add a,1     ;carry if $FF (white), NC if not
   39 D1:E4DC 9F -  -  -      sbc a,a     ;if carry, returns to $FF, else is black
   40 D1:E4DD 77 -  -  -      ld  (hl),a
   41 D1:E4DE ED A0 -  -      ldi
   42 D1:E4E0 EA D9 E4 D1     jp  pe,-_
   43 D1:E4E4 3A F7 31 D0     ld  a,(yPos)
   44 D1:E4E8 FE 1D -  -      cp  a,29
   45 D1:E4EA 20 06 -  -      jr  nz,+_
   46 D1:E4EC 21 00 D4 FE     ld  hl,-(320*240)
   47 D1:E4F0 19 -  -  -      add hl,de
   48 D1:E4F1 EB -  -  -      ex de,hl        ;if bottom of screen, then reset DE to top of screen.
   49 D1:E4F2 D5 -  -  -  _:  push de
   50 D1:E4F3 E1 -  -  -      pop hl
   51 D1:E4F4 13 -  -  -      inc de
   52 D1:E4F5 71 -  -  -      ld  (hl),c
   53 D1:E4F6 01 BF 08 00     ld  bc,(320*7)-1    ;erase whole line below it to prepare for writing.
   54 D1:E4FA ED B0 -  -      ldir
   55 D1:E4FC C9 -  -  -      ret
   56 D1:E4FD -  -  -  -  
   57 D1:E4FD -  -  -  -  ;Input: ix = core_memory_ix 
   58 D1:E4FD -  -  -  -  ;Output: Text onscreen
   59 D1:E4FD -  -  -  -  dbg_printLine:
   60 D1:E4FD E5 C5 D5 DD 
              E5 FD E5 F5     push hl \ push bc \ push de \ push ix \ push iy \ push af
   61 D1:E505 ED 23 00 -      lea hl,iy+0
   62 D1:E508 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl
   63 D1:E50B 11 00 00 00     ld  de,DEBUG_PRINT_START_CYCLE
   64 D1:E50F B7 -  -  -      or  a,a
   65 D1:E510 ED 52 -  -      sbc hl,de
   66 D1:E512 DA F6 E5 D1     jp  c,dbg_printLine_noPrint
   67 D1:E516 -  -  -  -  
   68 D1:E516 3E 1A -  -      ld  a,$1A   ;blue
   69 D1:E518 32 B6 B3 D1     ld  (fontBGColor_var),a
   70 D1:E51C 32 03 B4 D1     ld  (smallFontBGColor_var),a
   71 D1:E520 DD 27 0E -      ld  hl,(ix+CURRENT_OPCODES)
   72 D1:E523 22 F9 31 D0     ld  (operbuf),hl
   73 D1:E527 CD B9 E4 D1     call dbg_prepNextLine
   74 D1:E52B CD 72 B3 D1     call newLine
   75 D1:E52F DD 7E 06 -      ld  a,(ix+REGPC+1)
   76 D1:E532 CD CF B3 D1     call printSmallNumPair
   77 D1:E536 DD 7E 05 -      ld  a,(ix+REGPC+0)
   78 D1:E539 CD CF B3 D1     call printSmallNumPair
   79 D1:E53D 3E 20 -  -      ld  a,' '
   80 D1:E53F CD 9F B3 D1     call printBigFont
   81 D1:E543 -  -  -  -      ;
   82 D1:E543 3E 41 -  -      ld  a,'A'
   83 D1:E545 CD 9F B3 D1     call printBigFont
   84 D1:E549 DD 7E 00 -      ld  a,(ix+REGA)
   85 D1:E54C CD CF B3 D1     call printSmallNumPair
   86 D1:E550 3E 20 -  -      ld  a,' '
   87 D1:E552 CD 9F B3 D1     call printBigFont
   88 D1:E556 -  -  -  -      ;
   89 D1:E556 3E 58 -  -      ld  a,'X'
   90 D1:E558 CD 9F B3 D1     call printBigFont
   91 D1:E55C DD 7E 01 -      ld  a,(ix+REGX)
   92 D1:E55F CD CF B3 D1     call printSmallNumPair
   93 D1:E563 3E 20 -  -      ld  a,' '
   94 D1:E565 CD 9F B3 D1     call printBigFont
   95 D1:E569 -  -  -  -      ;
   96 D1:E569 3E 59 -  -      ld  a,'Y'
   97 D1:E56B CD 9F B3 D1     call printBigFont
   98 D1:E56F DD 7E 02 -      ld  a,(ix+REGY)
   99 D1:E572 CD CF B3 D1     call printSmallNumPair
  100 D1:E576 3E 20 -  -      ld  a,' '
  101 D1:E578 CD 9F B3 D1     call printBigFont
  102 D1:E57C -  -  -  -      ;
  103 D1:E57C 3E 53 -  -      ld  a,'S'
  104 D1:E57E CD 9F B3 D1     call printBigFont
  105 D1:E582 DD 7E 03 -      ld  a,(ix+REGSP)
  106 D1:E585 CD CF B3 D1     call printSmallNumPair
  107 D1:E589 3E 20 -  -      ld  a,' '
  108 D1:E58B CD 9F B3 D1     call printBigFont
  109 D1:E58F -  -  -  -      ;
  110 D1:E58F 3E 50 -  -      ld  a,'P'
  111 D1:E591 CD 9F B3 D1     call printBigFont
  112 D1:E595 DD 7E 04 -      ld  a,(ix+REGSR)
  113 D1:E598 CD CF B3 D1     call printSmallNumPair
  114 D1:E59C 3E 20 -  -      ld  a,' '
  115 D1:E59E CD 9F B3 D1     call printBigFont
  116 D1:E5A2 -  -  -  -  
  117 D1:E5A2 -  -  -  -      ;
  118 D1:E5A2 -  -  -  -  ;    ld  hl,dbg_printLine_str001
  119 D1:E5A2 -  -  -  -  ;    call printString
  120 D1:E5A2 -  -  -  -  ;    ld  b,5
  121 D1:E5A2 -  -  -  -  ;    lea hl,ix+0
  122 D1:E5A2 -  -  -  -  ;_:  ld  a,(hl)
  123 D1:E5A2 -  -  -  -  ;    inc hl
  124 D1:E5A2 -  -  -  -  ;    push bc
  125 D1:E5A2 -  -  -  -  ;        push hl
  126 D1:E5A2 -  -  -  -  ;            call printSmallNumPair
  127 D1:E5A2 -  -  -  -  ;            ld  a,' '
  128 D1:E5A2 -  -  -  -  ;            call printBigFont
  129 D1:E5A2 -  -  -  -  ;        pop hl
  130 D1:E5A2 -  -  -  -  ;    pop bc
  131 D1:E5A2 -  -  -  -  ;    djnz -_
  132 D1:E5A2 -  -  -  -  
  133 D1:E5A2 DD 7E 0D -      ld  a,(ix+CYCLES_CURRENT+2)
  134 D1:E5A5 CD CF B3 D1     call printSmallNumPair
  135 D1:E5A9 DD 7E 0C -      ld  a,(ix+CYCLES_CURRENT+1)
  136 D1:E5AC CD CF B3 D1     call printSmallNumPair
  137 D1:E5B0 DD 7E 0B -      ld  a,(ix+CYCLES_CURRENT+0)
  138 D1:E5B3 CD CF B3 D1     call printSmallNumPair
  139 D1:E5B7 3E 20 -  -      ld  a,' '
  140 D1:E5B9 CD 9F B3 D1     call printBigFont
  141 D1:E5BD 2A F9 31 D0     ld  hl,(operbuf)
  142 D1:E5C1 DD 2F 0E -      ld  (ix+CURRENT_OPCODES),hl
  143 D1:E5C4 7D -  -  -      ld  a,L
  144 D1:E5C5 CD E6 E6 D1     call dbg_getInstSize
  145 D1:E5C9 06 03 -  -      ld  b,3
  146 D1:E5CB 4F -  -  -      ld  c,a
  147 D1:E5CC 0C -  -  -      inc c
  148 D1:E5CD ED 22 0E -      lea hl,ix+CURRENT_OPCODES
  149 D1:E5D0 7E -  -  -  _:  ld  a,(hl)
  150 D1:E5D1 23 -  -  -      inc hl
  151 D1:E5D2 E5 -  -  -      push hl
  152 D1:E5D3 0D -  -  -          dec c
  153 D1:E5D4 F2 D9 E5 D1         jp p,+_
  154 D1:E5D8 0C -  -  -          inc c   ;never let c go below zero.
  155 D1:E5D9 C5 -  -  -  _:      push bc
  156 D1:E5DA 28 06 -  -              jr  z,+_
  157 D1:E5DC CD CF B3 D1             call printSmallNumPair
  158 D1:E5E0 18 06 -  -              jr ++_
  159 D1:E5E2 3E 20 -  -  _:          ld  a,' '
  160 D1:E5E4 CD 9F B3 D1             call printBigFont
  161 D1:E5E8 C1 -  -  -  _:      pop bc
  162 D1:E5E9 E1 -  -  -      pop hl
  163 D1:E5EA 10 E4 -  -      djnz ----_
  164 D1:E5EC 3E 20 -  -      ld  a,' '
  165 D1:E5EE CD 9F B3 D1     call printBigFont
  166 D1:E5F2 CD FE E6 D1     call dbg_printDisassembly
  167 D1:E5F6 -  -  -  -  
  168 D1:E5F6 -  -  -  -      ;
  169 D1:E5F6 -  -  -  -      ;Remove section below when done testing nestest for timings
  170 D1:E5F6 -  -  -  -      ;
  171 D1:E5F6 -  -  -  -  dbg_printLine_noPrint:
  172 D1:E5F6 11 00 00 00     ld  de,0
  173 D1:E5FA 2A 4D 34 D0     ld  hl,(timings_base)
  174 D1:E5FE 5E -  -  -      ld  e,(hl)
  175 D1:E5FF 23 -  -  -      inc hl
  176 D1:E600 56 -  -  -      ld  d,(hl)
  177 D1:E601 23 -  -  -      inc hl
  178 D1:E602 22 4D 34 D0     ld  (timings_base),hl
  179 D1:E606 DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  180 D1:E609 B7 -  -  -      or  a,a
  181 D1:E60A ED 52 -  -      sbc hl,de
  182 D1:E60C 28 17 -  -      jr  z,+_
  183 D1:E60E 21 FF FF FF     ld  hl,-1
  184 D1:E612 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  185 D1:E615 CD 72 B3 D1     call newLine
  186 D1:E619 21 A9 E6 D1     ld  hl,dbg_printLine_timeMismatch
  187 D1:E61D CD 89 B3 D1     call printString
  188 D1:E621 DD 36 14 01     ld  (ix+CORE_ERROR_LEVEL),1
  189 D1:E625 2A 4D 34 D0 _:  ld  hl,(timings_base)
  190 D1:E629 7E -  -  -      ld  a,(hl)
  191 D1:E62A 23 -  -  -      inc hl
  192 D1:E62B 22 4D 34 D0     ld  (timings_base),hl
  193 D1:E62F DD BE 04 -      cp  a,(ix+REGSR)
  194 D1:E632 28 17 -  -      jr  z,+_
  195 D1:E634 21 FF FF FF     ld  hl,-1
  196 D1:E638 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  197 D1:E63B CD 72 B3 D1     call newLine
  198 D1:E63F 21 C3 E6 D1     ld  hl,dbg_printLine_statusRegisterMismatch
  199 D1:E643 CD 89 B3 D1     call printString
  200 D1:E647 DD 36 14 02     ld  (ix+CORE_ERROR_LEVEL),2
  201 D1:E64B -  -  -  -  _:
  202 D1:E64B -  -  -  -      ;
  203 D1:E64B -  -  -  -      ;End debug-debug section
  204 D1:E64B -  -  -  -      ;
  205 D1:E64B CD 95 B2 D1     call fastCopy
  206 D1:E64F AF -  -  -      xor a,a     ;black
  207 D1:E650 32 B6 B3 D1     ld  (fontBGColor_var),a
  208 D1:E654 32 03 B4 D1     ld  (smallFontBGColor_var),a
  209 D1:E658 -  -  -  -  
  210 D1:E658 F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  211 D1:E660 -  -  -  -      ;push hl \ push bc \ push de \ push ix \ push iy \ push af
  212 D1:E660 C9 -  -  -      ret
  213 D1:E661 -  -  -  -  
  214 D1:E661 -  -  -  -  
  215 D1:E661 -  -  -  -      ;also remove this when done timing debugging
  216 D1:E661 11 00 00 00     ld  de,0
  217 D1:E665 2A 4D 34 D0     ld  hl,(timings_base)
  218 D1:E669 5E -  -  -      ld  e,(hl)
  219 D1:E66A 23 -  -  -      inc hl
  220 D1:E66B 56 -  -  -      ld  d,(hl)
  221 D1:E66C 23 -  -  -      inc hl
  222 D1:E66D 22 4D 34 D0     ld  (timings_base),hl
  223 D1:E671 DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  224 D1:E674 B7 -  -  -      or  a,a
  225 D1:E675 ED 52 -  -      sbc hl,de
  226 D1:E677 28 13 -  -      jr  z,+_
  227 D1:E679 21 FF FF FF     ld  hl,-1
  228 D1:E67D DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  229 D1:E680 CD 72 B3 D1     call newLine
  230 D1:E684 21 A9 E6 D1     ld  hl,dbg_printLine_timeMismatch
  231 D1:E688 CD 89 B3 D1     call printString
  232 D1:E68C -  -  -  -  _:  ;
  233 D1:E68C -  -  -  -      ;End debug-debug section
  234 D1:E68C -  -  -  -      ;
  235 D1:E68C CD 95 B2 D1     call fastCopy
  236 D1:E690 AF -  -  -      xor a,a     ;black
  237 D1:E691 32 B6 B3 D1     ld  (fontBGColor_var),a
  238 D1:E695 32 03 B4 D1     ld  (smallFontBGColor_var),a
  239 D1:E699 F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  240 D1:E6A1 C9 -  -  -      ret
  241 D1:E6A2 -  -  -  -  
  242 D1:E6A2 -  -  -  -  dbg_printLine_str001:
  243 D1:E6A2 41 58 59 53 
              50 20 00 -  .db "AXYSP ",0
  244 D1:E6A9 -  -  -  -  dbg_printLine_timeMismatch:
  245 D1:E6A9 43 50 55 20 
              54 65 73 74 
              20 74 69 6D 
              69 6E 67 20 
              6D 69 73 6D 
              61 74 63 68 
              2E 00 -  -  .db "CPU Test timing mismatch.",0
  246 D1:E6C3 -  -  -  -  dbg_printLine_statusRegisterMismatch:
  247 D1:E6C3 -  -  -  -  ;    0123456789012345678901234567890123456789
  248 D1:E6C3 43 50 55 20 
              54 65 73 74 
              20 73 74 61 
              74 75 73 20 
              72 65 67 69 
              73 74 65 72 
              20 6D 69 73 
              6D 61 74 63 
              68 2E 00 -  .db "CPU Test status register mismatch.",0
  249 D1:E6E6 -  -  -  -  
  250 D1:E6E6 -  -  -  -  
  251 D1:E6E6 -  -  -  -  
  252 D1:E6E6 -  -  -  -  
  253 D1:E6E6 -  -  -  -  
  254 D1:E6E6 -  -  -  -  
  255 D1:E6E6 -  -  -  -  ;A=instruction. Returns: A=size
  256 D1:E6E6 -  -  -  -  dbg_getInstSize:
  257 D1:E6E6 E5 D5 -  -      push hl \ push de
  258 D1:E6E8 57 -  -  -          ld  d,a
  259 D1:E6E9 1E 04 -  -          ld  e,4
  260 D1:E6EB ED 5C -  -          mlt de
  261 D1:E6ED 21 A2 E0 D1         ld  hl,inst6502_disassembly_table+3
  262 D1:E6F1 19 -  -  -          add hl,de
  263 D1:E6F2 16 00 -  -          ld  d,0
  264 D1:E6F4 5E -  -  -          ld  e,(hl)
  265 D1:E6F5 21 64 E0 D1         ld  hl,inst6502_opcode_width_table
  266 D1:E6F9 19 -  -  -          add hl,de
  267 D1:E6FA 7E -  -  -          ld  a,(hl)
  268 D1:E6FB D1 E1 -  -      pop de \ pop hl
  269 D1:E6FD C9 -  -  -      ret
  270 D1:E6FE -  -  -  -  
  271 D1:E6FE -  -  -  -  dbg_printDisassembly:
  272 D1:E6FE F5 C5 D5 E5 
              DD E5 -  -      push af \ push bc \ push de \ push hl \ push ix
  273 D1:E704 -  -  -  -      ;find entry in disassembly table
  274 D1:E704 2A F9 31 D0     ld  hl,(operbuf)
  275 D1:E708 26 04 -  -      ld  H,4
  276 D1:E70A ED 6C -  -      mlt hl
  277 D1:E70C 11 9F E0 D1     ld  de,inst6502_disassembly_table
  278 D1:E710 19 -  -  -      add hl,de
  279 D1:E711 06 03 -  -      ld  b,3
  280 D1:E713 7E -  -  -  _:  ld  a,(hl)
  281 D1:E714 23 -  -  -      inc hl
  282 D1:E715 CD 9B E7 D1     call dbg_printC
  283 D1:E719 10 F8 -  -      djnz -_
  284 D1:E71B 3E 20 -  -      ld  a,' '
  285 D1:E71D CD 9B E7 D1     call dbg_printC
  286 D1:E721 46 -  -  -      ld  b,(hl)
  287 D1:E722 04 -  -  -      inc b
  288 D1:E723 -  -  -  -      ;Instruction addressing mode in B. Now find text for that address mode.
  289 D1:E723 21 72 E0 D1     ld  hl,inst6502_disassembler
  290 D1:E727 11 00 00 00     ld  de,0
  291 D1:E72B 5E -  -  -  _:  ld  e,(hl)
  292 D1:E72C 19 -  -  -      add hl,de
  293 D1:E72D 10 FC -  -      djnz -_
  294 D1:E72F 1D -  -  -      dec e
  295 D1:E730 28 29 -  -      jr  z,dbg_printDisassembly_end  ;stop if text is zero-sized
  296 D1:E732 ED 52 -  -      sbc hl,de   ;rewind to start of text part of instruction. E is text length.
  297 D1:E734 43 -  -  -      ld  b,e
  298 D1:E735 -  -  -  -  dbg_printDisassembly_printOperandLoop:
  299 D1:E735 7E -  -  -      ld  a,(hl)
  300 D1:E736 23 -  -  -      inc hl
  301 D1:E737 FE 31 -  -      cp  a,'1'
  302 D1:E739 20 06 -  -      jr  nz,+_
  303 D1:E73B CD 7F E7 D1     call dbg_printOperand1
  304 D1:E73F 18 18 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  305 D1:E741 FE 32 -  -  _:  cp  a,'2'
  306 D1:E743 20 06 -  -      jr  nz,+_
  307 D1:E745 CD 77 E7 D1     call dbg_printOperand2
  308 D1:E749 18 0E -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  309 D1:E74B FE 2D -  -  _:  cp  a,'-'
  310 D1:E74D 20 06 -  -      jr  nz,+_
  311 D1:E74F CD 62 E7 D1     call dbg_printRel1
  312 D1:E753 18 04 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  313 D1:E755 CD 9B E7 D1 _:  call dbg_printC
  314 D1:E759 -  -  -  -  dbg_PrintDisassembly_printOperandFallthrough:
  315 D1:E759 10 DA -  -      djnz dbg_printDisassembly_printOperandLoop
  316 D1:E75B -  -  -  -  dbg_printDisassembly_end:
  317 D1:E75B DD E1 E1 D1 
              C1 F1 -  -      pop ix \ pop hl \ pop de \ pop bc \ pop af
  318 D1:E761 C9 -  -  -      ret
  319 D1:E762 -  -  -  -  
  320 D1:E762 -  -  -  -  dbg_printRel1:
  321 D1:E762 3A FA 31 D0     ld  a,(operbuf+1)
  322 D1:E766 B7 -  -  -      or  a,a
  323 D1:E767 F2 75 E7 D1     jp  p,dbg_printRel1_skipNeg
  324 D1:E76B F5 -  -  -      push af
  325 D1:E76C 3E 2D -  -          ld   a,'-'
  326 D1:E76E CD 9B E7 D1         call dbg_printC
  327 D1:E772 F1 -  -  -      pop af
  328 D1:E773 ED 44 -  -      neg
  329 D1:E775 -  -  -  -  dbg_printRel1_skipNeg:
  330 D1:E775 18 0C -  -      jr dbg_printHex
  331 D1:E777 -  -  -  -  
  332 D1:E777 -  -  -  -  dbg_printOperand2:
  333 D1:E777 3A FB 31 D0     ld  a,(operbuf+2)
  334 D1:E77B CD 83 E7 D1     call dbg_printHex
  335 D1:E77F -  -  -  -  dbg_printOperand1:
  336 D1:E77F 3A FA 31 D0     ld  a,(operbuf+1)
  337 D1:E783 -  -  -  -  dbg_printHex:
  338 D1:E783 CD 88 E7 D1     call dispAHex
  339 D1:E787 C9 -  -  -      ret
  340 D1:E788 -  -  -  -  
  341 D1:E788 -  -  -  -  dispAHex:
  342 D1:E788 F5 -  -  -      push af
  343 D1:E789 CD 90 E7 D1         call +_
  344 D1:E78D F1 -  -  -      pop af
  345 D1:E78E 18 04 -  -      jr  ++_
  346 D1:E790 1F -  -  -  _:  rra
  347 D1:E791 1F -  -  -      rra
  348 D1:E792 1F -  -  -      rra
  349 D1:E793 1F -  -  -      rra
  350 D1:E794 F6 F0 -  -  _:  or  a,$F0
  351 D1:E796 27 -  -  -      daa
  352 D1:E797 C6 A0 -  -      add a,$A0
  353 D1:E799 CE 40 -  -      adc a,$40
  354 D1:E79B -  -  -  -  dbg_printC:
  355 D1:E79B E5 -  -  -      push hl
  356 D1:E79C C5 -  -  -          push bc
  357 D1:E79D CD 9F B3 D1             call dbg_printChr
  358 D1:E7A1 C1 -  -  -          pop bc
  359 D1:E7A2 E1 -  -  -      pop hl
  360 D1:E7A3 C9 -  -  -      ret
Listing for file "main.z80"
 1172 D1:E7A4 -  -  -  -  #include "ppu.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ppu.z80"
    1 D1:E7A4 -  -  -  -  ;PPU-related stuff is written here, though not all of it is localized in
    2 D1:E7A4 -  -  -  -  ;this file. Some of it will necessarily be located with the mapper code
    3 D1:E7A4 -  -  -  -  ;that handles PPU I/O.
    4 D1:E7A4 -  -  -  -  
    5 D1:E7A4 -  -  -  -  ; NOTES ON SPRITE 0 HIT IS LOCATED IN MAIN.Z80, AROUND THE CODE WHERE
    6 D1:E7A4 -  -  -  -  ; MAPPER 0 READ HANDLER HANDLES READING PPU_STATUS.
    7 D1:E7A4 -  -  -  -  
    8 D1:E7A4 -  -  -  -  
    9 D1:E7A4 -  -  -  -  
   10 D1:E7A4 -  -  -  -      ;Do this before a lot of other things.
   11 D1:E7A4 -  -  -  -      ;Select current character rom banks from PPU settings.
   12 D1:E7A4 2A 46 34 D0     ld  hl,(chr_rom_base)
   13 D1:E7A8 01 00 10 00     ld  bc,$001000
   14 D1:E7AC DD 7E E0 -      ld  a,(ix+PPU_CTRL)
   15 D1:E7AF E5 -  -  -      push hl
   16 D1:E7B0 CB 67 -  -          bit 4,a     ;background pattern base offset
   17 D1:E7B2 28 01 -  -          jr  z,+_
   18 D1:E7B4 09 -  -  -          add hl,bc
   19 D1:E7B5 22 20 34 D0 _:      ld  (chr_rom_tiles),hl
   20 D1:E7B9 E1 -  -  -      pop hl
   21 D1:E7BA CB 6F -  -      bit 5,a     ;sprite pattern base offset
   22 D1:E7BC 28 01 -  -      jr  z,+_
   23 D1:E7BE 09 -  -  -      add hl,bc
   24 D1:E7BF 22 24 34 D0 _:  ld  (chr_rom_sprites),hl
   25 D1:E7C3 -  -  -  -  
   26 D1:E7C3 -  -  -  -  
   27 D1:E7C3 -  -  -  -  
   28 D1:E7C3 -  -  -  -      ;B=Y, C=X. Obtain nametable address
   29 D1:E7C3 -  -  -  -      ;You must preserve BC yourself. Somehow. Or not depending on how you loop.
   30 D1:E7C3 -  -  -  -      ;B and C are modified to fit inside the nametable selected.
   31 D1:E7C3 21 80 06 1A     ld  hl,nametable00>>3
   32 D1:E7C7 78 -  -  -      ld  a,b
   33 D1:E7C8 D6 20 -  -      sub 32
   34 D1:E7CA 38 01 -  -      jr  c,+_
   35 D1:E7CC 78 -  -  -      ld  a,b
   36 D1:E7CD 47 -  -  -  _:  ld  b,a
   37 D1:E7CE 3F -  -  -      ccf
   38 D1:E7CF ED 6A -  -      adc hl,hl
   39 D1:E7D1 79 -  -  -      ld  a,c
   40 D1:E7D2 D6 1E -  -      sub 30
   41 D1:E7D4 38 01 -  -      jr  c,+_
   42 D1:E7D6 79 -  -  -      ld  a,c
   43 D1:E7D7 4F -  -  -  _:  ld  c,a
   44 D1:E7D8 3F -  -  -      ccf
   45 D1:E7D9 ED 6A -  -      adc hl,hl
   46 D1:E7DB 29 -  -  -      add hl,hl   ;HL is now a pointer. do ld hl,(hl) to get actual NT address.
   47 D1:E7DC -  -  -  -  
   48 D1:E7DC -  -  -  -  
   49 D1:E7DC -  -  -  -      ;Increment C=X, adjusting nametable pointer table in HL if crossover
   50 D1:E7DC 0C -  -  -      inc c
   51 D1:E7DD 79 -  -  -      ld  a,c
   52 D1:E7DE FE 20 -  -      cp  a,32
   53 D1:E7E0 38 06 -  -      jr  c,+_
   54 D1:E7E2 0E 00 -  -      ld  c,0
   55 D1:E7E4 7D -  -  -      ld  a,L
   56 D1:E7E5 EE 04 -  -      xor a,%00000100
   57 D1:E7E7 6F -  -  -      ld  L,a
   58 D1:E7E8 00 -  -  -  _:  nop
   59 D1:E7E9 -  -  -  -  
   60 D1:E7E9 -  -  -  -      ;Increment B=Y, adjusting nametable pointer table in HL if crossover
   61 D1:E7E9 04 -  -  -      inc b
   62 D1:E7EA 78 -  -  -      ld  a,b
   63 D1:E7EB FE 1E -  -      cp  a,30
   64 D1:E7ED 38 06 -  -      jr  c,+_
   65 D1:E7EF 06 00 -  -      ld  b,0
   66 D1:E7F1 7D -  -  -      ld  a,L
   67 D1:E7F2 EE 08 -  -      xor a,%00001000
   68 D1:E7F4 6F -  -  -      ld  L,a
   69 D1:E7F5 00 -  -  -  _:  nop
   70 D1:E7F6 -  -  -  -  
   71 D1:E7F6 -  -  -  -      ;Retrieves attribute byte from B=Y, C=X
   72 D1:E7F6 -  -  -  -      ;HL=nametable pointer table
   73 D1:E7F6 -  -  -  -      ;NTptr tab low byte fmt: %000TIIAA. T=attrib, I=ID, A=address bytes
   74 D1:E7F6 D5 -  -  -      push de
   75 D1:E7F7 79 -  -  -          ld  a,c
   76 D1:E7F8 CB 3F -  -          srl a
   77 D1:E7FA CB 3F -  -          srl a   ;change 0-30 to 0-7. Discards low 2 bits.
   78 D1:E7FC 5F -  -  -          ld  e,a
   79 D1:E7FD 78 -  -  -          ld  a,b
   80 D1:E7FE E6 03 -  -          and a,3 ;discard two lower bits
   81 D1:E800 87 -  -  -          add a,a ;But place remaining bits up higher
   82 D1:E801 83 -  -  -          add a,e ;A=%00YYYXXX
   83 D1:E802 CB E5 -  -          set 4,L ;swap to attrib
   84 D1:E804 ED 17 -  -          ld  de,(hl)
   85 D1:E806 CB A5 -  -          res 4,L ;swap back to main nametable pointers
   86 D1:E808 83 -  -  -          add a,e ;base is $C0. This will not produce a carry.
   87 D1:E809 5F -  -  -          ld  e,a
   88 D1:E80A 1A -  -  -          ld  a,(de)
   89 D1:E80B D1 -  -  -      pop de
   90 D1:E80C -  -  -  -  
   91 D1:E80C -  -  -  -      ;Selects attribute from A from B=Y, C=X in format %0000AA00
   92 D1:E80C CB 48 -  -      bit 1,b
   93 D1:E80E 28 04 -  -      jr  z,+_
   94 D1:E810 07 -  -  -      rlca    ;If not zero, shift upper nibble into lower nibble
   95 D1:E811 07 -  -  -      rlca    ;for further selection.
   96 D1:E812 07 -  -  -      rlca
   97 D1:E813 07 -  -  -      rlca
   98 D1:E814 CB 49 -  -  _:  bit 1,c
   99 D1:E816 20 02 -  -      jr  nz,+_   ;If not zero, upper 2 bits of lower nibble already in position
  100 D1:E818 07 -  -  -      rlca        ;Otherwise, move them into position
  101 D1:E819 07 -  -  -      rlca        
  102 D1:E81A E6 0C -  -  _:  and a,%00001100
  103 D1:E81C -  -  -  -  
  104 D1:E81C -  -  -  -      ;Nametable/tilemap variant
  105 D1:E81C -  -  -  -      ;Sets DE to current location in nametable wrt B=Y, C=X
  106 D1:E81C -  -  -  -      ;HL=current nametable pointer
  107 D1:E81C E5 -  -  -      push hl
  108 D1:E81D ED 27 -  -          ld  hl,(hl)
  109 D1:E81F 1E 20 -  -          ld  e,32
  110 D1:E821 50 -  -  -          ld  d,b
  111 D1:E822 ED 5C -  -          mlt de
  112 D1:E824 7B -  -  -          ld  a,e
  113 D1:E825 81 -  -  -          add a,c
  114 D1:E826 5F -  -  -          ld  e,a
  115 D1:E827 19 -  -  -          add hl,de
  116 D1:E828 -  -  -  -          ;ex  de,hl
  117 D1:E828 E1 -  -  -      pop hl
  118 D1:E829 -  -  -  -  
  119 D1:E829 -  -  -  -      ;TODO: Find way to link stuff above. The task set forth is the following:
  120 D1:E829 -  -  -  -      ;Create the main tile rendering loop. We must track the following:
  121 D1:E829 -  -  -  -      ;   Screen pointer, nametable position, loop parameters.
  122 D1:E829 -  -  -  -      ;With these, we will:
  123 D1:E829 -  -  -  -      ;1. Get tileID from nametable position
  124 D1:E829 -  -  -  -      ;2. Get attribute data associated with that tile.
  125 D1:E829 -  -  -  -      ;3. Retrieve CHR_ROM data and
  126 D1:E829 -  -  -  -      ;4. Combine it to retrieve color data, then write it to screen buffer.
  127 D1:E829 -  -  -  -      ;
  128 D1:E829 -  -  -  -      ;Later on, insert a cacheing step between 2 and 3. to selectively
  129 D1:E829 -  -  -  -      ;modify step 4.
  130 D1:E829 -  -  -  -      ;
  131 D1:E829 -  -  -  -      ; Do in the inlining thing later.
  132 D1:E829 -  -  -  -      ;
  133 D1:E829 -  -  -  -  
  134 D1:E829 -  -  -  -  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 D1:E829 -  -  -  -  ;    ***   *** ***** *   *  ***  *          *** ***** *   * ***** *****
  136 D1:E829 -  -  -  -  ;   *   * *      *   *   * *   * *         *      *   *   * *     *    
  137 D1:E829 -  -  -  -  ;   ***** *      *   *   * ***** *          ***   *   *   * ***   ***  
  138 D1:E829 -  -  -  -  ;   *   * *      *   *   * *   * *             *  *   *   * *     *    
  139 D1:E829 -  -  -  -  ;   *   *  ***   *    ***  *   * *****      ***   *    ***  *     *    
  140 D1:E829 -  -  -  -  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  141 D1:E829 -  -  -  -  
  142 D1:E829 -  -  -  -  
  143 D1:E829 -  -  -  -  
  144 D1:E829 -  -  -  -  ;
  145 D1:E829 -  -  -  -  ppu_init:
  146 D1:E829 -  -  -  -      ; Reset palette RAM, PPU, and APU registers
  147 D1:E829 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
  148 D1:E82E ED 22 80 -      lea hl,ix-128
  149 D1:E831 ED 12 81 -      lea de,ix-127
  150 D1:E834 01 7E 00 00     ld  bc,126
  151 D1:E838 36 00 -  -      ld  (hl),$00
  152 D1:E83A ED B0 -  -      ldir
  153 D1:E83C -  -  -  -      ; Bit pattern used in detecting even-odd frames
  154 D1:E83C 3E 55 -  -      ld  a,WREG_CONST
  155 D1:E83E DD 77 F4 -      ld  (ix+PPU_W),a
  156 D1:E841 -  -  -  -      ; Copies converted 64 colors to hardware LCD palette RAM.
  157 D1:E841 -  -  -  -      ; The data is from https://www.nesdev.org/wiki/PPU_palettes
  158 D1:E841 -  -  -  -      ; The destination is the Primecell PL111 LCD controller, documented here:
  159 D1:E841 -  -  -  -      ; https://wikiti.brandonw.net/index.php?title=84PCE:Ports:4000
  160 D1:E841 11 00 02 E3     ld  de,mpLcdPalette
  161 D1:E845 21 13 EB D1     ld  hl,paletteData
  162 D1:E849 01 80 00 00     ld  bc,64*2
  163 D1:E84D ED B0 -  -      ldir
  164 D1:E84F -  -  -  -      ; Sets up the core's interrupt subsystem
  165 D1:E84F AF -  -  -      xor a,a
  166 D1:E850 32 60 34 D0     ld  (int_table_len),a
  167 D1:E854 11 65 E8 D1     ld  de,ppu_isr
  168 D1:E858 01 23 6D 00     ld  bc,27939
  169 D1:E85C CD 2D B8 D1     call int6502_insertISA  ;sets ix. ix before this unknown.
  170 D1:E860 DD 36 F1 02     ld  (ix+PPU_SUBCYCLE),2
  171 D1:E864 C9 -  -  -      ret
  172 D1:E865 -  -  -  -  
  173 D1:E865 -  -  -  -  
  174 D1:E865 -  -  -  -  
  175 D1:E865 -  -  -  -  ;Some bits of this is in "coreint.z80"
  176 D1:E865 -  -  -  -  ppu_isr:
  177 D1:E865 3A 20 00 F0     ld  a,($F00020)
  178 D1:E869 E6 01 -  -      and a,%0000001
  179 D1:E86B C2 6E AB D1     jp  nz,endCurrentRun    ;stop execution when ON key is pressed
  180 D1:E86F -  -  -  -  
  181 D1:E86F DD 7E E0 -      ld  a,(ix+PPU_CTRL)
  182 D1:E872 E6 18 -  -      and a,%00011000     ;sprite and background. if zero, no rendering happens.
  183 D1:E874 -  -  -  -      ;jr  z,ppu_isr_nodraw
  184 D1:E874 -  -  -  -      ;perform the check that makes odd cycles one ppu cc shorter, but only if
  185 D1:E874 -  -  -  -      ;something is being rendered to the screen
  186 D1:E874 DD 7E F5 -      ld  a,(ix+PPU_FRAMECOUNT)
  187 D1:E877 0F -  -  -      rrca
  188 D1:E878 30 03 -  -      jr  nc,+_
  189 D1:E87A DD 35 F1 -      dec (ix+PPU_SUBCYCLE)
  190 D1:E87D -  -  -  -  _:  ;there... should be something else to do?
  191 D1:E87D -  -  -  -      ;call ppu_drawBGSprites
  192 D1:E87D FD E5 -  -      push iy
  193 D1:E87F CD CB E8 D1         call ppu_drawFrame
  194 D1:E883 FD E1 -  -      pop iy
  195 D1:E885 -  -  -  -      ;call ppu_drawFGSprites
  196 D1:E885 -  -  -  -  ppu_isr_nodraw:
  197 D1:E885 DD 34 F5 -      inc (ix+PPU_FRAMECOUNT)
  198 D1:E888 01 23 6D 00     ld  bc,27939
  199 D1:E88C DD 7E F1 -      ld  a,(ix+PPU_SUBCYCLE)
  200 D1:E88F C6 02 -  -      add a,2     ;add the 2/3rds cycle
  201 D1:E891 FE 03 -  -      cp  a,3     ;but is it more than 3? (0,1,2)
  202 D1:E893 38 03 -  -      jr  c,+_
  203 D1:E895 D6 03 -  -      sub a,3
  204 D1:E897 03 -  -  -      inc bc
  205 D1:E898 DD 77 F1 -  _:  ld  (ix+PPU_SUBCYCLE),a
  206 D1:E89B ED 23 00 -      lea hl,iy+0
  207 D1:E89E B7 -  -  -      or  a,a
  208 D1:E89F ED 42 -  -      sbc hl,bc
  209 D1:E8A1 E5 -  -  -      push hl
  210 D1:E8A2 FD E1 -  -      pop iy
  211 D1:E8A4 11 65 E8 D1     ld  de,ppu_isr
  212 D1:E8A8 CD D0 B7 D1     call int6502_adjustTimings
  213 D1:E8AC CD F0 B7 D1     call int6502_pushISRAfterPop
  214 D1:E8B0 DD CB E2 FE     set 7,(ix+PPU_STATUS)
  215 D1:E8B4 2A 4A 34 D0     ld  hl,(ppu_smc_gate)
  216 D1:E8B8 36 00 -  -      ld  (hl),$00        ;nop out ret so writes no longer ignored.
  217 D1:E8BA -  -  -  -      ;
  218 D1:E8BA -  -  -  -      ; TODO: Figure this one out:
  219 D1:E8BA -  -  -  -      ; Do we need something to unset VBlank active flag at the end of
  220 D1:E8BA -  -  -  -      ; VBlank if left unread?
  221 D1:E8BA -  -  -  -      ;
  222 D1:E8BA DD CB E0 7E     bit 7,(ix+PPU_CTRL)     ;VBlank NMI enable flag
  223 D1:E8BE CA F4 B8 D1     jp  z,i6502RetryFirstLoad
  224 D1:E8C2 3E FF -  -      ld  a,$FF
  225 D1:E8C4 DD 77 1E -      ld  (ix+NMI_TRIGGERED),a
  226 D1:E8C7 C3 93 CF D1     jp  inst6502_brk
  227 D1:E8CB -  -  -  -  
  228 D1:E8CB -  -  -  -  
  229 D1:E8CB -  -  -  -  
  230 D1:E8CB -  -  -  -  
  231 D1:E8CB -  -  -  -  
  232 D1:E8CB -  -  -  -  
  233 D1:E8CB -  -  -  -  ppu_drawFrame:
  234 D1:E8CB -  -  -  -  
  235 D1:E8CB -  -  -  -  ;backdrop color. Do not render the following if there are no
  236 D1:E8CB -  -  -  -  ;sprites to hide in the background.
  237 D1:E8CB 2A 28 34 D0     ld  hl,(curScreenBuf)
  238 D1:E8CF 01 00 2C 01     ld  bc,320*240
  239 D1:E8D3 09 -  -  -      add hl,bc
  240 D1:E8D4 ED 73 47 E9 
              D1 -  -  -      ld  (++_+1),sp
  241 D1:E8D9 F9 -  -  -      ld  sp,hl
  242 D1:E8DA 06 00 -  -      ld  b,0
  243 D1:E8DC 11 00 00 00     ld  de,0
  244 D1:E8E0 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -  _:  push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  245 D1:E8EA D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  246 D1:E8F4 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  247 D1:E8FE D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  248 D1:E908 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  249 D1:E912 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  250 D1:E91C D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  251 D1:E926 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  252 D1:E930 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  253 D1:E93A D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  254 D1:E944 10 9A -  -      djnz -_
  255 D1:E946 31 00 00 00 _:  ld  sp,0
  256 D1:E94A -  -  -  -  ;The following is a framecounter. Mask out if needed.
  257 D1:E94A 21 01 00 00     ld  hl,1
  258 D1:E94E 22 F6 31 D0     ld  (xPos),hl   
  259 D1:E952 DD 7E F5 -      ld  a,(ix+PPU_FRAMECOUNT)
  260 D1:E955 CD CF B3 D1     call printSmallNumPair
  261 D1:E959 3E 20 -  -      ld  a,' '
  262 D1:E95B CD 9F B3 D1     call printBigFont
  263 D1:E95F AF -  -  -      xor a,a
  264 D1:E960 ED 62 -  -      sbc hl,hl
  265 D1:E962 ED 5B 00 00 
              F2 -  -  -      ld  de,($F20000)
  266 D1:E967 7A -  -  -      ld  a,d
  267 D1:E968 B7 -  -  -      or  a,a     ;Framerate too large to bother calculating. Or far too small.
  268 D1:E969 28 30 -  -      jr  z,ppu_noframerate
  269 D1:E96B 22 00 00 F2     ld  ($F20000),hl
  270 D1:E96F 21 00 80 00     ld  hl,32768
  271 D1:E973 AF -  -  -      xor a,a
  272 D1:E974 3C -  -  -  _:  inc a
  273 D1:E975 ED 52 -  -      sbc hl,de
  274 D1:E977 30 FB -  -      jr  nc,-_
  275 D1:E979 3D -  -  -      dec a
  276 D1:E97A B7 -  -  -      or  a,a ;clears necessary flags
  277 D1:E97B 27 -  -  -      daa
  278 D1:E97C D5 -  -  -      push de
  279 D1:E97D CD CF B3 D1         call printSmallNumPair
  280 D1:E981 3E 2E -  -          ld  a,'.'
  281 D1:E983 CD 9F B3 D1         call printBigFont
  282 D1:E987 D1 -  -  -      pop de
  283 D1:E988 AF -  -  -      xor a,a
  284 D1:E989 5A -  -  -      ld  e,d
  285 D1:E98A 57 -  -  -      ld  d,a
  286 D1:E98B 21 00 32 00     ld  hl,32768/256*100
  287 D1:E98F 3C -  -  -  _:  inc a
  288 D1:E990 ED 52 -  -      sbc hl,de
  289 D1:E992 30 FB -  -      jr  nc,-_
  290 D1:E994 3D -  -  -      dec a
  291 D1:E995 B7 -  -  -      or  a,a ;clears necessary flags
  292 D1:E996 27 -  -  -      daa
  293 D1:E997 CD CF B3 D1     call printSmallNumPair
  294 D1:E99B -  -  -  -  ppu_noframerate:
  295 D1:E99B CD 95 B2 D1     call fastCopy
  296 D1:E99F C9 -  -  -      ret
  297 D1:E9A0 -  -  -  -  
  298 D1:E9A0 -  -  -  -      
  299 D1:E9A0 -  -  -  -      
  300 D1:E9A0 -  -  -  -  
  301 D1:E9A0 -  -  -  -  
  302 D1:E9A0 -  -  -  -  
  303 D1:E9A0 -  -  -  -  
  304 D1:E9A0 -  -  -  -  
  305 D1:E9A0 -  -  -  -  
  306 D1:E9A0 -  -  -  -  
  307 D1:E9A0 -  -  -  -  
  308 D1:E9A0 -  -  -  -  
  309 D1:E9A0 -  -  -  -      ;set base rom addresses
  310 D1:E9A0 2A 46 34 D0     ld  hl,(chr_rom_base)
  311 D1:E9A4 01 00 10 00     ld  bc,$001000
  312 D1:E9A8 DD 7E E0 -      ld  a,(ix+PPU_CTRL)
  313 D1:E9AB E5 -  -  -      push hl
  314 D1:E9AC CB 67 -  -          bit 4,a     ;background pattern base offset
  315 D1:E9AE 28 01 -  -          jr  z,+_
  316 D1:E9B0 09 -  -  -          add hl,bc
  317 D1:E9B1 22 20 34 D0 _:      ld  (chr_rom_tiles),hl
  318 D1:E9B5 E1 -  -  -      pop hl
  319 D1:E9B6 CB 6F -  -      bit 5,a     ;sprite pattern base offset
  320 D1:E9B8 28 01 -  -      jr  z,+_
  321 D1:E9BA 09 -  -  -      add hl,bc
  322 D1:E9BB 22 24 34 D0 _:  ld  (chr_rom_sprites),hl
  323 D1:E9BF -  -  -  -      ;set coarse x,y scroll positions. B=Y, C=x
  324 D1:E9BF DD 07 FC -      ld  bc,(ix+PPU_XSCROLL)
  325 D1:E9C2 CB 20 -  -      sla b
  326 D1:E9C4 CB 20 -  -      sla b
  327 D1:E9C6 CB 20 -  -      sla b
  328 D1:E9C8 CB 21 -  -      sla c
  329 D1:E9CA CB 21 -  -      sla c
  330 D1:E9CC CB 21 -  -      sla c
  331 D1:E9CE -  -  -  -      ;set base nametable addresses
  332 D1:E9CE 21 00 34 D0     ld  hl,nametable00
  333 D1:E9D2 DD 7E E0 -      ld  a,(ix+PPU_CTRL)
  334 D1:E9D5 E6 03 -  -      and a,3
  335 D1:E9D7 87 -  -  -      add a,a
  336 D1:E9D8 87 -  -  -      add a,a
  337 D1:E9D9 6F -  -  -      ld  L,a
  338 D1:E9DA DD 2F F6 -      ld  (ix+PPU_NAMETABLE_PTR),hl   ;yeah. let's cache this so we don't lose it
  339 D1:E9DD -  -  -  -      ;In-place setting of nametable address wrt X,Y
  340 D1:E9DD -  -  -  -      ;%------YY YYYXXXXX
  341 D1:E9DD ED 17 -  -      ld  de,(hl)
  342 D1:E9DF 79 -  -  -      ld  a,c
  343 D1:E9E0 07 -  -  -      rlca
  344 D1:E9E1 07 -  -  -      rlca
  345 D1:E9E2 07 -  -  -      rlca
  346 D1:E9E3 5F -  -  -      ld  e,a
  347 D1:E9E4 AA -  -  -      xor a,d
  348 D1:E9E5 E6 03 -  -      and a,%00000011
  349 D1:E9E7 AA -  -  -      xor a,d
  350 D1:E9E8 7B -  -  -      ld  a,e
  351 D1:E9E9 A8 -  -  -      xor a,b
  352 D1:E9EA E6 E0 -  -      and %11100000
  353 D1:E9EC A8 -  -  -      xor a,b
  354 D1:E9ED 5F -  -  -      ld  e,a
  355 D1:E9EE -  -  -  -      ;Fetch first attribute byte from address
  356 D1:E9EE -  -  -  -      ;%------YY YYYXXXXX -> %------11 11YYYXXX
  357 D1:E9EE D5 -  -  -      push de
  358 D1:E9EF 7A -  -  -          ld  a,d
  359 D1:E9F0 1F -  -  -          rra
  360 D1:E9F1 CB 3B -  -          srl e
  361 D1:E9F3 1F -  -  -          rra
  362 D1:E9F4 CB 3B -  -          srl e       ;YYYYYXXX
  363 D1:E9F6 CB C2 -  -          set 0,d
  364 D1:E9F8 CB CA -  -          set 1,d
  365 D1:E9FA 7B -  -  -          ld  a,e
  366 D1:E9FB 07 -  -  -          rlca
  367 D1:E9FC 07 -  -  -          rlca
  368 D1:E9FD F6 C0 -  -          or  a,%11000000
  369 D1:E9FF AB -  -  -          xor a,e
  370 D1:EA00 E6 F8 -  -          and a,%11111000
  371 D1:EA02 AB -  -  -          xor a,e
  372 D1:EA03 5F -  -  -          ld  e,a
  373 D1:EA04 1A -  -  -          ld  a,(de)
  374 D1:EA05 D1 -  -  -      pop de
  375 D1:EA06 -  -  -  -      ;Selects attribute from A from B=Y, C=X in format %0000AA00
  376 D1:EA06 -  -  -  -      ;Let's instead use DE %------yy yYyxxxXx y: e6, x: e1
  377 D1:EA06 CB 73 -  -      bit 6,e
  378 D1:EA08 28 04 -  -      jr  z,+_
  379 D1:EA0A 07 -  -  -      rlca    ;If not zero, shift upper nibble into lower nibble
  380 D1:EA0B 07 -  -  -      rlca    ;for further selection.
  381 D1:EA0C 07 -  -  -      rlca
  382 D1:EA0D 07 -  -  -      rlca
  383 D1:EA0E CB 4B -  -  _:  bit 1,e
  384 D1:EA10 20 02 -  -      jr  nz,+_   ;If not zero, upper 2 bits of lower nibble already in position
  385 D1:EA12 07 -  -  -      rlca        ;Otherwise, move them into position
  386 D1:EA13 07 -  -  -      rlca        
  387 D1:EA14 E6 0C -  -  _:  and a,%00001100
  388 D1:EA16 32 4C EA D1     ld  (ppu_mainTileLoop_attribute_write),a
  389 D1:EA1A -  -  -  -  
  390 D1:EA1A DD 36 F9 1E     ld  (ix+PPU_VCOUNT),30
  391 D1:EA1E FD 2A 28 34 
              D0 -  -  -      ld  iy,(curScreenBuf)
  392 D1:EA23 ED 33 20 -      lea iy,iy+32
  393 D1:EA26 -  -  -  -  ppu_verticalLoop:
  394 D1:EA26 DD 36 FA 20     ld  (ix+PPU_HCOUNT),32
  395 D1:EA2A -  -  -  -  ppu_horizontalLoop:
  396 D1:EA2A 1A -  -  -      ld  a,(de)
  397 D1:EA2B E5 -  -  -      push hl
  398 D1:EA2C D5 -  -  -          push de
  399 D1:EA2D 2A 20 34 D0             ld  hl,(chr_rom_tiles)
  400 D1:EA31 4F -  -  -              ld  c,a
  401 D1:EA32 06 10 -  -              ld  b,16
  402 D1:EA34 ED 4C -  -              mlt bc
  403 D1:EA36 09 -  -  -              add hl,bc
  404 D1:EA37 DD 36 FB 08             ld  (ix+PPU_TCOUNT),8
  405 D1:EA3B ED 13 00 -              lea de,iy+0
  406 D1:EA3E -  -  -  -  ppu_mainTileLoop:
  407 D1:EA3E 7E -  -  -              ld  a,(hl)
  408 D1:EA3F 01 08 00 00             ld  bc,8
  409 D1:EA43 09 -  -  -              add hl,bc
  410 D1:EA44 46 -  -  -              ld  b,(hl)
  411 D1:EA45 4F -  -  -              ld  c,a
  412 D1:EA46 E5 -  -  -              push hl
  413 D1:EA47 21 00 32 D0                 ld  hl,vram_palette
  414 D1:EA4B -  -  -  -  ppu_mainTileLoop_attribute_write    .equ $+1
  415 D1:EA4B 3E 00 -  -                  ld  a,0
  416 D1:EA4D -  -  -  -                  ;Attrib to LSB of VRAM_PALETTE, shift CHR_ROM data to LSB to
  417 D1:EA4D -  -  -  -                  ;form full address+offset. Copy from palette to buffer.
  418 D1:EA4D 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;1/8 12b apiece
  419 D1:EA59 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;2/8
  420 D1:EA65 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;3/8
  421 D1:EA71 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;4/8
  422 D1:EA7D 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;5/8
  423 D1:EA89 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;6/8
  424 D1:EA95 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;7/8
  425 D1:EAA1 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;8/8 96b tot
  426 D1:EAAD 21 38 01 00                 ld  hl,320-8
  427 D1:EAB1 19 -  -  -                  add hl,de
  428 D1:EAB2 EB -  -  -                  ex  de,hl
  429 D1:EAB3 E1 -  -  -              pop hl
  430 D1:EAB4 01 F9 FF FF             ld  bc,-7
  431 D1:EAB8 09 -  -  -              add hl,bc
  432 D1:EAB9 DD 35 FB -              dec (ix+PPU_TCOUNT)
  433 D1:EABC 20 80 -  -              jr  nz,ppu_mainTileLoop
  434 D1:EABE -  -  -  -              ;start wrapping up the horizontal loop
  435 D1:EABE D1 -  -  -          pop de
  436 D1:EABF E1 -  -  -      pop hl
  437 D1:EAC0 7B -  -  -      ld  a,e
  438 D1:EAC1 13 -  -  -      inc de
  439 D1:EAC2 AB -  -  -      xor a,e
  440 D1:EAC3 CB 6F -  -      bit 5,a     ;A carry in X would result in a change in bit 5
  441 D1:EAC5 28 14 -  -      jr  z,+_    ;Which means there's no crossover if no sign change
  442 D1:EAC7 1B -  -  -      dec de      ;revert those changes in case they cascaded past E
  443 D1:EAC8 1C -  -  -      inc e
  444 D1:EAC9 E6 E0 -  -      and a,%11100000     ;The funny thing is that the XOR above...
  445 D1:EACB AB -  -  -      xor a,e             ;... is still valid for this masking technique.
  446 D1:EACC 4F -  -  -      ld  c,a     ;And now let's squirrel this and...
  447 D1:EACD 42 -  -  -      ld  b,d     ;...D for later merge magic
  448 D1:EACE 7C -  -  -      ld  a,h
  449 D1:EACF EE 04 -  -      xor a,%00000100 ;flip to the next horizontal buffer...
  450 D1:EAD1 67 -  -  -      ld  h,a
  451 D1:EAD2 ED 17 -  -      ld  de,(hl)
  452 D1:EAD4 59 -  -  -      ld  e,c
  453 D1:EAD5 78 -  -  -      ld  a,b
  454 D1:EAD6 AA -  -  -      xor d
  455 D1:EAD7 E6 03 -  -      and a,%00000011
  456 D1:EAD9 AA -  -  -      xor d
  457 D1:EADA 57 -  -  -      ld  d,a         ;and map coords into a new nametable
  458 D1:EADB ED 33 08 -  _:  lea iy,iy+8     ;next position on the buffer.
  459 D1:EADE DD 35 FA -      dec (ix+PPU_HCOUNT)
  460 D1:EAE1 C2 2A EA D1     jp  nz,ppu_horizontalLoop
  461 D1:EAE5 -  -  -  -      ;the X buffer *will* have changed at some point and rolled around
  462 D1:EAE5 -  -  -  -      ;so there's no need to deal with X. Still gotta do Y first...
  463 D1:EAE5 EB -  -  -      ex  de,hl
  464 D1:EAE6 7C -  -  -      ld  a,h
  465 D1:EAE7 01 20 00 00     ld  bc,%00100000
  466 D1:EAEB 09 -  -  -      add hl,bc   ;%-----^yy yYyxxxXx
  467 D1:EAEC EB -  -  -      ex  de,hl
  468 D1:EAED 4B -  -  -      ld  c,e     ;coordinate storage.
  469 D1:EAEE 42 -  -  -      ld  b,d
  470 D1:EAEF AA -  -  -      xor a,d     ;detect sign change in bit 2
  471 D1:EAF0 CB 57 -  -      bit 2,a
  472 D1:EAF2 28 04 -  -      jr  z,+_
  473 D1:EAF4 7D -  -  -      ld  a,L
  474 D1:EAF5 EE 08 -  -      xor a,%00001000 ;flip to the next vertical buffer...
  475 D1:EAF7 6F -  -  -      ld  L,a
  476 D1:EAF8 7D -  -  -  _:  ld  a,L
  477 D1:EAF9 EE 04 -  -      xor a,%00000100 ;flip back the horizontal buffer that must've been flipped.
  478 D1:EAFB 6F -  -  -      ld  L,a
  479 D1:EAFC ED 17 -  -      ld  de,(hl)
  480 D1:EAFE 59 -  -  -      ld  e,c
  481 D1:EAFF 78 -  -  -      ld  a,b
  482 D1:EB00 AA -  -  -      xor d
  483 D1:EB01 E6 03 -  -      and a,%00000011
  484 D1:EB03 AA -  -  -      xor d
  485 D1:EB04 57 -  -  -      ld  d,a         ;and map coords into a new nametable
  486 D1:EB05 01 00 09 00     ld  bc,(320*7)+(320-256)
  487 D1:EB09 FD 09 -  -      add iy,bc       ;move cursor pointer to the next row
  488 D1:EB0B DD 35 F9 -      dec (ix+PPU_VCOUNT)
  489 D1:EB0E C2 26 EA D1     jp  nz,ppu_verticalLoop
  490 D1:EB12 C9 -  -  -      ret
  491 D1:EB13 -  -  -  -  
  492 D1:EB13 -  -  -  -  ;TODO: Test changes to the PPU and link together something in the mapper
  493 D1:EB13 -  -  -  -  ;to perform controls. Also. Those freakin' interrupts. DO THEM.
  494 D1:EB13 -  -  -  -  ;Might also want to implement a drawlist of sorts since writes to the ports
  495 D1:EB13 -  -  -  -  ;ought to be timestamped. That way, we'll be able to tell what the hell is
  496 D1:EB13 -  -  -  -  ;being done mid-frame and then make adjustments to such things as
  497 D1:EB13 -  -  -  -  ;BG rendering mid-draw, if necessary. Or be able to detect such attempts as
  498 D1:EB13 -  -  -  -  ;I don't think I want to deal with that. Only deal with stuff that should
  499 D1:EB13 -  -  -  -  ;be occurring within the VBlank period.
  500 D1:EB13 -  -  -  -  
  501 D1:EB13 -  -  -  -  
  502 D1:EB13 -  -  -  -  
  503 D1:EB13 -  -  -  -  
  504 D1:EB13 -  -  -  -  
  505 D1:EB13 -  -  -  -  
  506 D1:EB13 -  -  -  -  
  507 D1:EB13 -  -  -  -  
  508 D1:EB13 -  -  -  -  
  509 D1:EB13 -  -  -  -  
  510 D1:EB13 -  -  -  -  
Listing for file "main.z80"
 1173 D1:EB13 -  -  -  -  #include "palette.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\palette.z80"
    1 D1:EB13 -  -  -  -  paletteData:
    2 D1:EB13 8C B1 A0 BC 
              42 CC 06 CC 
              0A BC 0C A0 
              0C 80 6A 80 .dw $B18C, $BCA0, $CC42, $CC06, $BC0A, $A00C, $800C, $806A
    3 D1:EB23 C6 80 02 81 
              20 81 20 81 
              00 A1 00 80 
              00 80 00 80 .dw $80C6, $8102, $8120, $8120, $A100, $8000, $8000, $8000
    4 D1:EB33 B5 D6 82 E5 
              07 FD AD FC 
              73 E4 76 C0 
              B6 94 33 81 .dw $D6B5, $E582, $FD07, $FCAD, $E473, $C076, $94B6, $8133
    5 D1:EB43 AD 81 07 82 
              22 82 20 96 
              E0 C1 00 80 
              00 80 00 80 .dw $81AD, $8207, $8222, $9620, $C1E0, $8000, $8000, $8000
    6 D1:EB53 FF FF CC FE 
              51 FE F8 FD 
              BD FD BF E9 
              FF BD 7D 96 .dw $FFFF, $FECC, $FE51, $FDF8, $FDBD, $E9BF, $BDFF, $967D
    7 D1:EB63 F8 82 51 83 
              8C 97 88 BF 
              28 EB 29 A5 
              00 80 00 80 .dw $82F8, $8351, $978C, $BF88, $EB28, $A529, $8000, $8000
    8 D1:EB73 FF FF 97 FF 
              5A FF 3C FF 
              1E FF 1F F7 
              3F E7 5E D7 .dw $FFFF, $FF97, $FF5A, $FF3C, $FF1E, $F71F, $E73F, $D75E
    9 D1:EB83 9C CB BA CB 
              D7 D7 D6 E7 
              B6 F7 F7 DE 
              00 80 00 80 .dw $CB9C, $CBBA, $D7D7, $E7D6, $F7B6, $DEF7, $8000, $8000
   10 D1:EB93 0C A1 40 AC 
              02 BC 06 BC 
              0A B0 0C 98 
              0D 80 2A 80 .dw $A10C, $AC40, $BC02, $BC06, $B00A, $980C, $800D, $802A
   11 D1:EBA3 86 80 A2 80 
              C0 80 C0 80 
              80 90 00 80 
              00 80 00 80 .dw $8086, $80A2, $80C0, $80C0, $9080, $8000, $8000, $8000
   12 D1:EBB3 15 C2 02 D1 
              87 E4 4D E4 
              32 D4 55 B4 
              96 8C F3 80 .dw $C215, $D102, $E487, $E44D, $D432, $B455, $8C96, $80F3
   13 D1:EBC3 4E 81 88 81 
              A2 81 A0 85 
              40 AD 00 80 
              00 80 00 80 .dw $814E, $8188, $81A2, $85A0, $AD40, $8000, $8000, $8000
   14 D1:EBD3 3F E7 0C F6 
              B1 FD 78 FD 
              3D F9 5F D5 
              9F AD FD 89 .dw $E73F, $F60C, $FDB1, $FD78, $F93D, $D55F, $AD9F, $89FD
   15 D1:EBE3 58 82 B2 82 
              CC 86 C9 AA 
              69 D2 C9 98 
              00 80 00 80 .dw $8258, $82B2, $86CC, $AAC9, $D269, $98C9, $8000, $8000
   16 D1:EBF3 3F E7 D8 EE 
              9A F6 7C F6 
              7F EE 7F E2 
              9F D2 BF C2 .dw $E73F, $EED8, $F69A, $F67C, $EE7F, $E27F, $D29F, $C2BF
   17 D1:EC03 FD BA 1A B7 
              18 BF 17 CF 
              F7 DE 57 C6 
              00 80 00 80 .dw $BAFD, $B71A, $BF18, $CF17, $DEF7, $C657, $8000, $8000
   18 D1:EC13 68 99 80 A8 
              40 B8 03 B4 
              06 A4 08 8C 
              09 80 67 80 .dw $9968, $A880, $B840, $B403, $A406, $8C08, $8009, $8067
   19 D1:EC23 A4 80 00 81 
              20 81 20 81 
              E0 90 00 80 
              00 80 00 80 .dw $80A4, $8100, $8120, $8120, $90E0, $8000, $8000, $8000
   20 D1:EC33 8F B6 60 C9 
              E3 DC 88 DC 
              4D C4 70 A4 
              B0 80 0E 81 .dw $B68F, $C960, $DCE3, $DC88, $C44D, $A470, $80B0, $810E
   21 D1:EC43 89 81 E4 81 
              20 82 00 86 
              C0 A9 00 80 
              00 80 00 80 .dw $8189, $81E4, $8220, $8600, $A9C0, $8000, $8000, $8000
   22 D1:EC53 D8 DB A7 EE 
              2C FE B1 FD 
              96 E9 99 C5 
              D9 9D 57 82 .dw $DBD8, $EEA7, $FE2C, $FDB1, $E996, $C599, $9DD9, $8257
   23 D1:EC63 D2 82 2D 83 
              68 83 65 A3 
              04 CB 26 91 
              00 80 00 80 .dw $82D2, $832D, $8368, $A365, $CB04, $9126, $8000, $8000
   24 D1:EC73 D8 DB 51 E3 
              33 EB F5 EA 
              F7 DE F8 D2 
              19 C3 37 B3 .dw $DBD8, $E351, $EB33, $EAF5, $DEF7, $D2F8, $C319, $B337
   25 D1:EC83 76 AB 93 AB 
              B1 B7 B0 C3 
              90 D3 B0 BA 
              00 80 00 80 .dw $AB76, $AB93, $B7B1, $C3B0, $D390, $BAB0, $8000, $8000
   26 D1:EC93 08 99 40 A4 
              00 B0 03 B0 
              06 A4 09 8C 
              09 80 27 80 .dw $9908, $A440, $B000, $B003, $A406, $8C09, $8009, $8027
   27 D1:ECA3 64 80 A0 80 
              C0 80 C0 80 
              80 90 00 80 
              00 80 00 80 .dw $8064, $80A0, $80C0, $80C0, $9080, $8000, $8000, $8000
   28 D1:ECB3 10 B2 E0 C4 
              84 D4 49 D4 
              2D C4 30 A4 
              71 80 CE 80 .dw $B210, $C4E0, $D484, $D449, $C42D, $A430, $8071, $80CE
   29 D1:ECC3 2A 81 85 81 
              A1 81 80 81 
              40 A5 00 80 
              00 80 00 80 .dw $812A, $8185, $81A1, $8180, $A540, $8000, $8000, $8000
   30 D1:ECD3 39 D7 08 EA 
              AD F9 52 F9 
              36 E9 5A C5 
              9A 9D F7 81 .dw $D739, $EA08, $F9AD, $F952, $E936, $C55A, $9D9A, $81F7
   31 D1:ECE3 53 82 AD 82 
              C9 82 A6 9E 
              65 C6 C6 90 
              00 80 00 80 .dw $8253, $82AD, $82C9, $9EA6, $C665, $90C6, $8000, $8000
   32 D1:ECF3 39 D7 B2 DE 
              94 E2 76 E2 
              58 DE 79 CE 
              99 BE B8 B2 .dw $D739, $DEB2, $E294, $E276, $DE58, $CE79, $BE99, $B2B8
   33 D1:ED03 D7 AA F4 AA 
              12 B3 11 BF 
              F1 CE 31 BA 
              00 80 00 80 .dw $AAD7, $AAF4, $B312, $BF11, $CEF1, $BA31, $8000, $8000
   34 D1:ED13 29 B9 80 C0 
              21 D0 05 CC 
              08 C0 0A A4 
              09 88 27 80 .dw $B929, $C080, $D021, $CC05, $C008, $A40A, $8809, $8027
   35 D1:ED23 63 80 A0 80 
              E0 80 E0 88 
              C0 A4 00 80 
              00 80 00 80 .dw $8063, $80A0, $80E0, $88E0, $A4C0, $8000, $8000, $8000
   36 D1:ED33 31 E2 21 E9 
              C6 FC 6B FC 
              2F E8 32 C4 
              71 9C CE 80 .dw $E231, $E921, $FCC6, $FC6B, $E82F, $C432, $9C71, $80CE
   37 D1:ED43 29 81 84 81 
              C0 81 C0 9D 
              80 C9 00 84 
              00 80 00 80 .dw $8129, $8184, $81C0, $9DC0, $C980, $8400, $8000, $8000
   38 D1:ED53 5A FF 69 FE 
              EE FD 94 FD 
              59 FD 5B F1 
              9B C9 F8 A1 .dw $FF5A, $FE69, $FDEE, $FD94, $FD59, $F15B, $C99B, $A1F8
   39 D1:ED63 52 8E AD 8E 
              E8 A6 E5 CA 
              A6 F6 E7 AC 
              00 80 00 80 .dw $8E52, $8EAD, $A6E8, $CAE5, $F6A6, $ACE7, $8000, $8000
   40 D1:ED73 5A FF F3 FE 
              D5 FE 98 FE 
              99 FE 9B FE 
              9A F2 D9 E2 .dw $FF5A, $FEF3, $FED5, $FE98, $FE99, $FE9B, $F29A, $E2D9
   41 D1:ED83 F7 DA 15 DB 
              33 E7 32 F3 
              12 FF 52 EA 
              00 80 00 80 .dw $DAF7, $DB15, $E733, $F332, $FF12, $EA52, $8000, $8000
   42 D1:ED93 E9 A8 40 AC 
              01 BC 04 BC 
              08 B0 09 9C 
              09 80 07 80 .dw $A8E9, $AC40, $BC01, $BC04, $B008, $9C09, $8009, $8007
   43 D1:EDA3 43 80 80 80 
              A0 80 A0 80 
              80 94 00 80 
              00 80 00 80 .dw $8043, $8080, $80A0, $80A0, $9480, $8000, $8000, $8000
   44 D1:EDB3 D1 C9 E1 D0 
              86 E8 2B E8 
              0F D4 11 B8 
              51 94 AE 80 .dw $C9D1, $D0E1, $E886, $E82B, $D40F, $B811, $9451, $80AE
   45 D1:EDC3 09 81 44 81 
              80 81 60 8D 
              40 AD 00 80 
              00 80 00 80 .dw $8109, $8144, $8180, $8D60, $AD40, $8000, $8000, $8000
   46 D1:EDD3 FA EE E9 F9 
              8F FD 34 FD 
              18 FD 1B DD 
              5B B9 B8 91 .dw $EEFA, $F9E9, $FD8F, $FD34, $FD18, $DD1B, $B95B, $91B8
   47 D1:EDE3 12 82 6D 82 
              89 92 86 B2 
              46 D6 A7 9C 
              00 80 00 80 .dw $8212, $826D, $9289, $B286, $D646, $9CA7, $8000, $8000
   48 D1:EDF3 FA EE 93 F6 
              75 FE 58 FE 
              39 F6 3A EA 
              5A DA 79 CA .dw $EEFA, $F693, $FE75, $FE58, $F639, $EA3A, $DA5A, $CA79
   49 D1:EE03 97 C2 B5 C2 
              D3 CA D2 D6 
              B2 E6 12 CE 
              00 80 00 80 .dw $C297, $C2B5, $CAD3, $D6D2, $E6B2, $CE12, $8000, $8000
   50 D1:EE13 07 A5 60 AC 
              20 B8 02 B8 
              06 A8 08 94 
              08 80 26 80 .dw $A507, $AC60, $B820, $B802, $A806, $9408, $8008, $8026
   51 D1:EE23 63 80 A0 80 
              C0 80 C0 80 
              A0 98 00 80 
              00 80 00 80 .dw $8063, $80A0, $80C0, $80C0, $98A0, $8000, $8000, $8000
   52 D1:EE33 0E C2 20 D1 
              C3 E0 68 E0 
              2C C8 2F AC 
              6F 88 AC 80 .dw $C20E, $D120, $E0C3, $E068, $C82C, $AC2F, $886F, $80AC
   53 D1:EE43 08 81 83 81 
              A0 81 A0 8D 
              60 B1 00 80 
              00 80 00 80 .dw $8108, $8183, $81A0, $8DA0, $B160, $8000, $8000, $8000
   54 D1:EE53 36 EB 46 F6 
              CB FD 70 FD 
              35 F1 37 D1 
              77 AD D5 8D .dw $EB36, $F646, $FDCB, $FD70, $F135, $D137, $AD77, $8DD5
   55 D1:EE63 30 82 AB 82 
              E6 92 C4 B2 
              84 D6 C5 98 
              00 80 00 80 .dw $8230, $82AB, $92E6, $B2C4, $D684, $98C5, $8000, $8000
   56 D1:EE73 36 EB D0 EE 
              B2 F6 94 F6 
              76 EE 77 DE 
              97 D2 B6 C2 .dw $EB36, $EED0, $F6B2, $F694, $EE76, $DE77, $D297, $C2B6
   57 D1:EE83 D4 BA 12 BB 
              10 C7 0F D3 
              EF E2 4F CA 
              00 80 00 80 .dw $BAD4, $BB12, $C710, $D30F, $E2EF, $CA4F, $8000, $8000
   58 D1:EE93 E7 9C 40 A8 
              00 B4 03 B4 
              06 A8 08 90 
              08 80 06 80 .dw $9CE7, $A840, $B400, $B403, $A806, $9008, $8008, $8006
   59 D1:EEA3 43 80 80 80 
              A0 80 A0 80 
              80 90 00 80 
              00 80 00 80 .dw $8043, $8080, $80A0, $80A0, $9080, $8000, $8000, $8000
   60 D1:EEB3 CE B9 E0 C8 
              83 D8 28 D8 
              0C C8 0F A8 
              4F 84 AC 80 .dw $B9CE, $C8E0, $D883, $D828, $C80C, $A80F, $844F, $80AC
   61 D1:EEC3 08 81 43 81 
              80 81 60 85 
              40 A9 00 80 
              00 80 00 80 .dw $8108, $8143, $8180, $8560, $A940, $8000, $8000, $8000
   62 D1:EED3 F7 DE E7 ED 
              8C FD 31 FD 
              15 ED 18 CD 
              58 A5 B5 85 .dw $DEF7, $EDE7, $FD8C, $FD31, $ED15, $CD18, $A558, $85B5
   63 D1:EEE3 11 82 6C 82 
              87 86 84 A6 
              44 CE A5 94 
              00 80 00 80 .dw $8211, $826C, $8687, $A684, $CE44, $94A5, $8000, $8000
   64 D1:EEF3 F7 DE 91 E6 
              72 EE 55 EE 
              36 E6 37 D6 
              57 CA 76 BA .dw $DEF7, $E691, $EE72, $EE55, $E636, $D637, $CA57, $BA76
   65 D1:EF03 95 B2 B2 B2 
              D1 BA CF CA 
              AF D6 10 C2 
              00 80 00 80 .dw $B295, $B2B2, $BAD1, $CACF, $D6AF, $C210, $8000, $8000
Listing for file "main.z80"
 1174 D1:EF13 -  -  -  -  
 1175 D1:EF13 -  -  -  -  .echo "Main program size: ",$-programStart
