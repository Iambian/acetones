    1 00:0000 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "main.z80"
    2 00:0000 -  -  -  -  .org userMem-2
    3 D1:A87F EF 7B -  -  .db $EF, $7B
    4 D1:A881 -  -  -  -  
    5 D1:A881 -  -  -  -  ;SPASM help msg
    6 D1:A881 -  -  -  -  ;-E = Assemble eZ80 code
    7 D1:A881 -  -  -  -  ;-T = Generate code listing
    8 D1:A881 -  -  -  -  ;-C = Code counter mode
    9 D1:A881 -  -  -  -  ;-L = Symbol table mode
   10 D1:A881 -  -  -  -  ;-S = Stats mode
   11 D1:A881 -  -  -  -  ;-O = Don't write to output file
   12 D1:A881 -  -  -  -  ;-I [directory] = Add include directory
   13 D1:A881 -  -  -  -  ;-A = Labels are cAse-sensitive
   14 D1:A881 -  -  -  -  ;-D<name>[=value] = Create a define 'name' [with 'value']
   15 D1:A881 -  -  -  -  ;-N = Don't use colors for messages
   16 D1:A881 -  -  -  -  ;-V <Expression> = Pipe expression directly into assembly
   17 D1:A881 -  -  -  -  ;-H = Print this help message
   18 D1:A881 -  -  -  -  
   19 D1:A881 -  -  -  -  
   20 D1:A881 -  -  -  -  
   21 D1:A881 -  -  -  -  
   22 D1:A881 -  -  -  -  programStart:
   23 D1:A881 F3 -  -  -      di
   24 D1:A882 -  -  -  -      ;Continuous. Else it'd be possible for an NES ROM to tank the CPU
   25 D1:A882 -  -  -  -      ;performance by constantly polling the keyboard.
   26 D1:A882 21 00 00 F5     ld  hl,mpKeyMode
   27 D1:A886 36 03 -  -      ld  (hl),3      
   28 D1:A888 ED 73 FC 31 
              D0 -  -  -      ld  (save_spl),sp
   29 D1:A88D ED 6E -  -      ld  a,MB
   30 D1:A88F 32 FF 31 D0     ld  (save_mbase),a
   31 D1:A893 3E D0 -  -      ld  a,$D0
   32 D1:A895 ED 6D -  -      ld  MB,a
   33 D1:A897 CD 90 B0 D1     call startGfx
   34 D1:A89B -  -  -  -      ;
   35 D1:A89B -  -  -  -      ; todo; write test 6502 program, map it into rom.
   36 D1:A89B -  -  -  -      ; map virtual screen device into ram too. 32x30 screen ascii display
   37 D1:A89B -  -  -  -      ; is probably looking nice right about now.
   38 D1:A89B -  -  -  -      ; Could probably map it into PPU space since we're not actually doing
   39 D1:A89B -  -  -  -      ; anything about that until long after we're done testing core integrity
   40 D1:A89B -  -  -  -      ; You'll probably want to create a mockup vector table then do some equate
   41 D1:A89B -  -  -  -      ; magic to offset it and map it to $FFXX such that the three vectors will
   42 D1:A89B -  -  -  -      ; magically line up with $FFFA-$FFFF. NMI, RES, and IRQ. In that order.
   43 D1:A89B -  -  -  -      ; The rest of the page won't need to matter. It could literally be the
   44 D1:A89B -  -  -  -      ; surrounding eZ80 data/code. Just... don't allow writes to it.
   45 D1:A89B -  -  -  -      ;
   46 D1:A89B -  -  -  -  
   47 D1:A89B 21 00 00 D4     ld  hl,screenBuf1
   48 D1:A89F 11 01 00 D4     ld  de,screenBuf1+1
   49 D1:A8A3 01 FF 57 02     ld  bc,(2*240*320)-1
   50 D1:A8A7 36 00 -  -      ld  (hl),$00
   51 D1:A8A9 ED B0 -  -      ldir
   52 D1:A8AB -  -  -  -  
   53 D1:A8AB -  -  -  -      ;Makes sure all non-ROM areas have a mapping
   54 D1:A8AB 21 00 33 D0     ld  hl,scrap_mapping
   55 D1:A8AF 01 01 80 00     ld  bc,$008001
   56 D1:A8B3 1E 00 -  -      ld  e,0
   57 D1:A8B5 CD 53 B7 D1     call i6502_map_pages
   58 D1:A8B9 -  -  -  -  
   59 D1:A8B9 -  -  -  -  
   60 D1:A8B9 -  -  -  -  
   61 D1:A8B9 -  -  -  -      ;load reset vectors
   62 D1:A8B9 21 DE A8 D1     ld  hl,testVectors
   63 D1:A8BD 01 01 01 00     ld  bc,$000101
   64 D1:A8C1 1E FF -  -      ld  e,$FF
   65 D1:A8C3 CD 53 B7 D1     call i6502_map_pages
   66 D1:A8C7 -  -  -  -      ;load program ROM to lowmem
   67 D1:A8C7 21 DE A9 D1     ld  hl,testCode
   68 D1:A8CB 01 08 20 00     ld  bc,$002008
   69 D1:A8CF 1E 80 -  -      ld  e,$80
   70 D1:A8D1 CD 53 B7 D1     call i6502_map_pages
   71 D1:A8D5 -  -  -  -      ;map nametable to writeable address space. Write routine to mirror this
   72 D1:A8D5 -  -  -  -      ;memory to screen.
   73 D1:A8D5 21 00 58 D0     ld  hl,NAMETABLE1
   74 D1:A8D9 01 04 20 00     ld  bc,$002004
   75 D1:A8DD 1E 40 -  -      ld  e,$40
   76 D1:A8DF CD 53 B7 D1     call i6502_map_pages
   77 D1:A8E3 -  -  -  -      ;Everything should be ready. Set up the debug environment and then
   78 D1:A8E3 -  -  -  -      ;start the emulation.
   79 D1:A8E3 -  -  -  -      ;jr $
   80 D1:A8E3 CD E3 B0 D1     call clearTextBuf
   81 D1:A8E7 3E 01 -  -      ld  a,1
   82 D1:A8E9 CD 30 B1 D1     call setLineStart
   83 D1:A8ED CD 39 B1 D1     call setCurLine
   84 D1:A8F1 21 37 AA D1     ld  hl,text001
   85 D1:A8F5 CD 5B B1 D1     call printString
   86 D1:A8F9 FD 21 A5 AA 
              D1 -  -  -      ld  iy,firstFileHeader
   87 D1:A8FE 01 00 00 00     ld  bc,0
   88 D1:A902 FD 4E FF -      ld  c,(iy-1)
   89 D1:A905 CD DE AF D1     call vatTraverse
   90 D1:A909 DA C2 AA D1     jp  c,err_noContainersFound
   91 D1:A90D D5 -  -  -      push de
   92 D1:A90E 21 4E AA D1         ld  hl,text003
   93 D1:A912 CD 5B B1 D1         call printString
   94 D1:A916 DD 46 FA -          ld  b,(ix-6)
   95 D1:A919 ED 22 F9 -          lea hl,ix-7
   96 D1:A91C 7E -  -  -  _:      ld  a,(hl)
   97 D1:A91D 2B -  -  -          dec hl
   98 D1:A91E E5 -  -  -          push hl
   99 D1:A91F C5 -  -  -              push bc
  100 D1:A920 CD 71 B1 D1                 call PrintBigFont
  101 D1:A924 C1 -  -  -              pop bc
  102 D1:A925 E1 -  -  -          pop hl
  103 D1:A926 10 F4 -  -          djnz -_
  104 D1:A928 CD 44 B1 D1         call newLine
  105 D1:A92C D1 -  -  -      pop de
  106 D1:A92D CD DB AB D1     call loadROMFile
  107 D1:A931 -  -  -  -  
  108 D1:A931 -  -  -  -      ;REMOVE THE FOLLOWING BLOCK WHEN DONE TESTING NESTEST
  109 D1:A931 -  -  -  -      ;
  110 D1:A931 -  -  -  -      ;
  111 D1:A931 21 2E AA D1     ld  hl,timings_file
  112 D1:A935 CD 20 03 02     call _Mov9ToOP1
  113 D1:A939 CD 0C 05 02     call _ChkFindSym
  114 D1:A93D DA 9D A9 D1     jp  c,endCurrentRun
  115 D1:A941 CD 98 1F 02     call _ChkInRam
  116 D1:A945 EB -  -  -      ex  de,hl
  117 D1:A946 30 08 -  -      jr  nc,+_
  118 D1:A948 11 09 00 00     ld  de,9
  119 D1:A94C 19 -  -  -      add hl,de
  120 D1:A94D 5E -  -  -      ld  e,(hl)
  121 D1:A94E 19 -  -  -      add hl,de
  122 D1:A94F 23 -  -  -      inc hl
  123 D1:A950 5E -  -  -  _:  ld  e,(hl)
  124 D1:A951 23 -  -  -      inc hl
  125 D1:A952 56 -  -  -      ld  d,(hl)
  126 D1:A953 23 -  -  -      inc hl
  127 D1:A954 22 4D 34 D0     ld  (timings_base),hl
  128 D1:A958 -  -  -  -      ;
  129 D1:A958 -  -  -  -      ;
  130 D1:A958 -  -  -  -      ;
  131 D1:A958 -  -  -  -  
  132 D1:A958 -  -  -  -  
  133 D1:A958 21 5B AA D1     ld  hl,text004
  134 D1:A95C CD 5B B1 D1     call printString
  135 D1:A960 -  -  -  -  
  136 D1:A960 -  -  -  -      ;jr $
  137 D1:A960 -  -  -  -  #ifdef COREDEBUG
  138 D1:A960                 call dbg_resetScreen
  139 D1:A960             #endif
  140 D1:A960 DD 21 00 00 
              F2 -  -  -      ld  ix,$F20000
  141 D1:A965 DD 27 30 -      ld  hl,(ix+$30)
  142 D1:A968 CB 85 -  -      res 0,L ;turn off timer 0
  143 D1:A96A CB 8D -  -      res 1,L ;timer 0 uses CPU clock
  144 D1:A96C CB 95 -  -      res 2,L ;disables timer 0 interrupt generator
  145 D1:A96E CB CC -  -      set 1,H ;timer 0 counts upward
  146 D1:A970 DD 2F 30 -      ld  (ix+$30),hl
  147 D1:A973 -  -  -  -      
  148 D1:A973 AF -  -  -      xor a,a
  149 D1:A974 ED 62 -  -      sbc hl,hl
  150 D1:A976 DD 2F 00 -      ld  (ix+0),hl
  151 D1:A979 DD 77 03 -      ld  (ix+3),a
  152 D1:A97C -  -  -  -  
  153 D1:A97C CD 79 B5 D1     call int6502_init
  154 D1:A980 CD 79 E5 D1     call ppu_init
  155 D1:A984 CD 49 B6 D1     call i6502Init
  156 D1:A988 -  -  -  -  
  157 D1:A988 -  -  -  -  
  158 D1:A988 DD 21 00 00 
              F2 -  -  -      ld  ix,$F20000
  159 D1:A98D DD 7E 30 -      ld  a,(ix+$30)
  160 D1:A990 CB 87 -  -      res 0,a ;turn off timer 0
  161 D1:A992 CB CF -  -      set 1,a ;timer 0 uses 32768Hz clock
  162 D1:A994 CB 97 -  -      res 2,a ;disables timer 0 interrupt generator
  163 D1:A996 DD 77 30 -      ld  (ix+$30),a
  164 D1:A999 -  -  -  -      ;
  165 D1:A999 2A 00 00 F2     ld  hl,($F20000)
  166 D1:A99D -  -  -  -  
  167 D1:A99D -  -  -  -  endCurrentRun:
  168 D1:A99D CD 09 E2 D1     call dbg_prepNextLine
  169 D1:A9A1 CD 44 B1 D1     call newLine
  170 D1:A9A5 21 7D AA D1     ld  hl,text005
  171 D1:A9A9 CD 5B B1 D1     call printString
  172 D1:A9AD -  -  -  -  
  173 D1:A9AD -  -  -  -      ;call printTextBuf
  174 D1:A9AD CD 67 B0 D1     call fastCopy
  175 D1:A9B1 00 -  -  -      nop
  176 D1:A9B2 CD 5B B0 D1     call waituntilnewkeypress
  177 D1:A9B6 CD 53 B0 D1     call waituntilkeyrelease
  178 D1:A9BA -  -  -  -  
  179 D1:A9BA -  -  -  -      ;
  180 D1:A9BA -  -  -  -      ;
  181 D1:A9BA -  -  -  -      ;
  182 D1:A9BA -  -  -  -  programExit:
  183 D1:A9BA CD 82 B0 D1     call stopGfx
  184 D1:A9BE ED 7B FC 31 
              D0 -  -  -      ld  sp,(save_spl)
  185 D1:A9C3 3A FF 31 D0     ld  a,(save_mbase)
  186 D1:A9C7 ED 6D -  -      ld  MB,a
  187 D1:A9C9 FD 21 80 00 
              D0 -  -  -      ld  iy,flags
  188 D1:A9CE C9 -  -  -      ret
  189 D1:A9CF -  -  -  -  
  190 D1:A9CF -  -  -  -  
  191 D1:A9CF -  -  -  -  testFilename:
  192 D1:A9CF 15 4E 45 53 
              54 45 53 54 
              00 -  -  -  .db AppVarObj,"NESTEST",0
  193 D1:A9D8 -  -  -  -  
  194 D1:A9D8 -  -  -  -  
  195 D1:A9D8 -  -  -  -  ;NMI, RES, and IRQ. In that order.
  196 D1:A9D8 -  -  -  -  testVectors .equ $-(256-6)
  197 D1:A9D8 00 80 -  -  .dw $8000
  198 D1:A9DA 00 80 -  -  .dw $8000
  199 D1:A9DC 00 80 -  -  .dw $8000
  200 D1:A9DE -  -  -  -  testCode:
  201 D1:A9DE A9 00 AA A8 .db $A9,$00,$AA,$A8
  202 D1:A9E2 BD 14 80 -  .db $BD,$14,$80
  203 D1:A9E5 C9 00 -  -  .db $C9,$00
  204 D1:A9E7 F0 08 -  -  .db $F0,$08
  205 D1:A9E9 99 21 40 -  .db $99,$21,$40
  206 D1:A9EC E8 C8 -  -  .db $E8,$C8
  207 D1:A9EE -  -  -  -  ;.db $12
  208 D1:A9EE 4C 04 80 02 .db $4C,$04,$80,$02
  209 D1:A9F2 48 65 6C 6C 
              6F 2C 20 57 
              6F -  -  -  .db $48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F
  210 D1:A9FB 72 6C 64 21 
              00 -  -  -  .db $72,$6C,$64,$21,$00
  211 D1:AA00 -  -  -  -  
  212 D1:AA00 -  -  -  -  
  213 D1:AA00 A9 00 AA A8 
              BD 11 80 C9 
              00 F0 05 99 
              21 40 D0 -  .db $A9,$00,$AA,$A8,$BD,$11,$80,$C9,$00,$F0,$05,$99,$21,$40,$D0
  214 D1:AA0F F4 02 48 65 
              6C 6C 6F 2C 
              20 57 6F 72 
              6C 64 21 00 .db $F4,$02,$48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F,$72,$6C,$64,$21,$00
  215 D1:AA1F 02 -  -  -  .db $02     ;JAM. Emulator terminates on unsupported instructions or JAMs.
  216 D1:AA20 -  -  -  -  
  217 D1:AA20 -  -  -  -  helloWorld:
  218 D1:AA20 48 65 6C 6C 
              6F 2C 20 57 
              6F 72 6C 64 
              21 00 -  -  .db "Hello, World!",0
  219 D1:AA2E -  -  -  -  
  220 D1:AA2E -  -  -  -  timings_file:
  221 D1:AA2E 15 74 69 6D 
              69 6E 67 73 
              00 -  -  -  .db AppVarObj,"timings",0
  222 D1:AA37 -  -  -  -  
  223 D1:AA37 -  -  -  -  text001:
  224 D1:AA37 4C 6F 6F 6B 
              69 6E 67 20 
              75 70 20 6E 
              65 73 74 65 
              73 74 2E 2E 
              2E 0A 00 -  .db "Looking up nestest...\n",0
  225 D1:AA4E -  -  -  -  text003:
  226 D1:AA4E 46 69 6C 65 
              20 66 6F 75 
              6E 64 3A 20 
              00 -  -  -  .db "File found: ",0
  227 D1:AA5B -  -  -  -  text004:
  228 D1:AA5B 52 4F 4D 46 
              69 6C 65 20 
              6C 6F 61 64 
              65 64 20 61 
              6E 64 20 72 
              65 61 64 79 
              20 74 6F 20 
              72 75 6E 2E 
              0A 00 -  -  .db "ROMFile loaded and ready to run.\n",0
  229 D1:AA7D -  -  -  -  text005:
  230 D1:AA7D -  -  -  -  ;    0123456789012345678901234567890123456789
  231 D1:AA7D 43 50 55 20 
              45 78 65 63 
              75 74 69 6F 
              6E 20 48 61 
              6C 74 65 64 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 00 -  .db "CPU Execution Halted                  ",0
  232 D1:AAA4 -  -  -  -  text006:
  233 D1:AAA4 -  -  -  -  
  234 D1:AAA4 -  -  -  -  
  235 D1:AAA4 07 -  -  -  .db 7
  236 D1:AAA5 -  -  -  -  firstFileHeader:
  237 D1:AAA5 43 45 4E 52 
              4F 4D 00 -  .db "CENROM",0
  238 D1:AAAC -  -  -  -  
  239 D1:AAAC -  -  -  -  err_:
  240 D1:AAAC -  -  -  -  
  241 D1:AAAC -  -  -  -  err_err:
  242 D1:AAAC E1 -  -  -      pop hl
  243 D1:AAAD CD 5B B1 D1     call printString
  244 D1:AAB1 -  -  -  -  err_err_quit:
  245 D1:AAB1 CD 67 B0 D1     call fastCopy
  246 D1:AAB5 00 -  -  -      nop
  247 D1:AAB6 CD 5B B0 D1     call waituntilnewkeypress
  248 D1:AABA CD 53 B0 D1     call waituntilkeyrelease
  249 D1:AABE C3 BA A9 D1     jp programExit
  250 D1:AAC2 -  -  -  -  
  251 D1:AAC2 -  -  -  -  err_noContainersFound:
  252 D1:AAC2 CD AC AA D1     call err_err
  253 D1:AAC6 54 72 61 76 
              65 72 73 65 
              20 66 6F 75 
              6E 64 20 6E 
              6F 20 63 61 
              6E 64 69 64 
              61 74 65 73 
              2E 0A 00 -  .db "Traverse found no candidates.\n",0
  254 D1:AAE5 -  -  -  -  
  255 D1:AAE5 -  -  -  -  err_missingFiles:
  256 D1:AAE5 F5 -  -  -      push af
  257 D1:AAE6 21 F7 AA D1         ld  hl,err_missingFiles_str
  258 D1:AAEA CD 5B B1 D1         call printString
  259 D1:AAEE F1 -  -  -      pop af
  260 D1:AAEF CD A1 B1 D1     call printSmallNumPair
  261 D1:AAF3 C3 B1 AA D1     jp err_err_quit
  262 D1:AAF7 -  -  -  -  err_missingFiles_str:
  263 D1:AAF7 4E 75 6D 62 
              65 72 20 6F 
              66 20 66 69 
              6C 65 73 20 
              6D 69 73 73 
              69 6E 67 3A 
              20 00 -  -  .db "Number of files missing: ",0
  264 D1:AB11 -  -  -  -  
  265 D1:AB11 -  -  -  -  err_tooManyFiles:
  266 D1:AB11 CD AC AA D1     call err_err
  267 D1:AB15 54 6F 6F 20 
              6D 61 6E 79 
              20 66 69 6C 
              65 73 20 66 
              6F 75 6E 64 
              2E 00 -  -  .db "Too many files found.",0
  268 D1:AB2B -  -  -  -  
  269 D1:AB2B -  -  -  -  err_PRGROMTooLarge:
  270 D1:AB2B CD AC AA D1     call err_err
  271 D1:AB2F 50 52 47 5F 
              52 4F 4D 20 
              74 6F 6F 20 
              6C 61 72 67 
              65 2E 00 -  .db "PRG_ROM too large.",0
  272 D1:AB42 -  -  -  -  err_CHRROMTooLarge:
  273 D1:AB42 CD AC AA D1     call err_err
  274 D1:AB46 43 48 52 5F 
              52 4F 4D 20 
              74 6F 6F 20 
              6C 61 72 67 
              65 2E 00 -  .db "CHR_ROM too large.",0
  275 D1:AB59 -  -  -  -  
  276 D1:AB59 -  -  -  -  err_missingROMDetected:
  277 D1:AB59 CD AC AA D1     call err_err
  278 D1:AB5D 50 52 47 2B 
              43 48 52 20 
              3E 20 41 63 
              74 75 61 6C 
              20 66 69 6C 
              65 20 64 61 
              74 61 2E 00 .db "PRG+CHR > Actual file data.",0
  279 D1:AB79 -  -  -  -  
  280 D1:AB79 -  -  -  -  err_ROMHeaderDamaged:
  281 D1:AB79 CD AC AA D1     call err_err
  282 D1:AB7D 49 4E 45 53 
              20 52 4F 4D 
              20 68 65 61 
              64 65 72 20 
              64 61 6D 61 
              67 65 64 2E 
              00 -  -  -  .db "INES ROM header damaged.",0
  283 D1:AB96 -  -  -  -  
  284 D1:AB96 -  -  -  -  err_MapperOutOfRange:
  285 D1:AB96 CD AC AA D1     call err_err
  286 D1:AB9A 4D 61 70 70 
              65 72 20 73 
              70 65 63 69 
              66 69 65 64 
              20 6F 75 74 
              20 6F 66 20 
              72 61 6E 67 
              65 2E 00 -  .db "Mapper specified out of range.",0
  287 D1:ABB9 -  -  -  -  
  288 D1:ABB9 -  -  -  -  err_CHRROMNotFound:
  289 D1:ABB9 CD AC AA D1     call err_err
  290 D1:ABBD 43 48 52 5F 
              52 4F 4D 20 
              6E 6F 74 20 
              66 6F 75 6E 
              64 20 69 6E 
              73 69 64 65 
              20 66 69 6C 
              65 00 -  -  .db "CHR_ROM not found inside file",0
  291 D1:ABDB -  -  -  -  
  292 D1:ABDB -  -  -  -  
  293 D1:ABDB -  -  -  -  ;Input: DE = Address of first file after the container header signature
  294 D1:ABDB -  -  -  -  ;Outputs: ROM vectors recorded and ready to map
  295 D1:ABDB -  -  -  -  ;Destroys: All registers.
  296 D1:ABDB -  -  -  -  loadROMFile:
  297 D1:ABDB EB -  -  -      ex  de,hl
  298 D1:ABDC AF -  -  -      xor a,a
  299 D1:ABDD 32 33 34 D0     ld  (missing_files),a
  300 D1:ABE1 BE -  -  -  _:  cp  (hl)    ;
  301 D1:ABE2 23 -  -  -      inc hl      ;
  302 D1:ABE3 20 FC -  -      jr  nz,-_   ;skips past zero-terminated string containing full ROM name
  303 D1:ABE5 22 30 34 D0     ld  (basefile_sig),hl
  304 D1:ABE9 01 10 00 00     ld  bc,SIZEOF_INTEGRITY_HASH
  305 D1:ABED 09 -  -  -      add hl,bc
  306 D1:ABEE 7E -  -  -      ld  a,(hl)
  307 D1:ABEF FE 01 -  -      cp  a,MAXNUMFILES
  308 D1:ABF1 D2 11 AB D1     jp  nc,err_tooManyFiles
  309 D1:ABF5 32 2F 34 D0     ld  (inputNumFiles),a
  310 D1:ABF9 47 -  -  -      ld  b,a
  311 D1:ABFA -  -  -  -  ;    ld  c,SIZEOF_INTEGRITY_HASH     ;c already set to this value from earlier.
  312 D1:ABFA ED 4C -  -      mlt bc
  313 D1:ABFC 23 -  -  -      inc hl
  314 D1:ABFD E5 -  -  -      push hl
  315 D1:ABFE 09 -  -  -          add hl,bc
  316 D1:ABFF FD 21 50 34 
              D0 -  -  -          ld  iy,FILETABLE
  317 D1:AC04 4E -  -  -          ld  c,(hl)
  318 D1:AC05 23 -  -  -          inc hl
  319 D1:AC06 46 -  -  -          ld  b,(hl)
  320 D1:AC07 23 -  -  -          inc hl
  321 D1:AC08 52 FD 0F 00         ld.s (iy+FILE_SIZE_OFFSET),bc
  322 D1:AC0C FD 2F 02 -          ld  (iy+FILE_ADR_OFFSET),hl
  323 D1:AC0F E1 -  -  -      pop hl
  324 D1:AC10 3C -  -  -      inc a
  325 D1:AC11 3D -  -  -      dec a
  326 D1:AC12 28 47 -  -      jr  z,loadROMFile_singleFileLoad
  327 D1:AC14 -  -  -  -      ;If more than one file, fill FILETABLE.
  328 D1:AC14 -  -  -  -      ;NOTE: For now, this machinery is disabled. Only a single file is allowed.
  329 D1:AC14 ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  330 D1:AC17 47 -  -  -      ld  b,a
  331 D1:AC18 -  -  -  -  loadROMFile_multiFileLoadLoop:
  332 D1:AC18 C5 -  -  -      push bc
  333 D1:AC19 FD 2F 05 -          ld  (iy+FILE_SIG_ADR_OFFSET),hl
  334 D1:AC1C 01 10 00 00         ld  bc,16
  335 D1:AC20 11 CE AF D1         ld  de,loadROMFile_tempSigHash
  336 D1:AC24 ED B0 -  -          ldir
  337 D1:AC26 E5 -  -  -          push hl
  338 D1:AC27 FD E5 -  -              push iy
  339 D1:AC29 01 17 00 00                 ld  bc,23
  340 D1:AC2D FD 21 C7 AF 
              D1 -  -  -                  ld  iy,loadROMFile_tempSig
  341 D1:AC32 CD DE AF D1                 call vatTraverse    ;returns DE @ datasection size if found
  342 D1:AC36 30 05 -  -                  jr  nc,+_
  343 D1:AC38 21 33 34 D0                 ld  hl,missing_files
  344 D1:AC3C 34 -  -  -                  inc (hl)
  345 D1:AC3D FD E1 -  -  _:          pop iy
  346 D1:AC3F EB -  -  -              ex  de,hl
  347 D1:AC40 5E -  -  -              ld  e,(hl)
  348 D1:AC41 23 -  -  -              inc hl
  349 D1:AC42 56 -  -  -              ld  d,(hl)
  350 D1:AC43 23 -  -  -              inc hl
  351 D1:AC44 52 FD 1F 00             ld.s (iy+FILE_SIZE_OFFSET),de
  352 D1:AC48 FD 2F 02 -              ld  (iy+FILE_ADR_OFFSET),hl
  353 D1:AC4B E1 -  -  -          pop hl
  354 D1:AC4C C1 -  -  -      pop bc
  355 D1:AC4D ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  356 D1:AC50 10 C6 -  -      djnz loadROMFile_multiFileLoadLoop
  357 D1:AC52 3A 33 34 D0     ld  a,(missing_files)
  358 D1:AC56 B7 -  -  -      or  a,a
  359 D1:AC57 C2 E5 AA D1     jp  nz,err_missingFiles
  360 D1:AC5B -  -  -  -  loadROMFile_singleFileLoad:
  361 D1:AC5B -  -  -  -      ;Compute size of ROM by summing filesizes, less INES header
  362 D1:AC5B 3A 2F 34 D0     ld  a,(inputNumFiles)
  363 D1:AC5F 3C -  -  -      inc a
  364 D1:AC60 47 -  -  -      ld  b,a
  365 D1:AC61 21 00 00 00     ld  hl,0
  366 D1:AC65 DD 21 50 34 
              D0 -  -  -      ld  ix,FILETABLE
  367 D1:AC6A 52 DD 17 00 _:  ld.s de,(ix+FILE_SIZE_OFFSET)
  368 D1:AC6E 19 -  -  -      add hl,de
  369 D1:AC6F ED 32 08 -      lea ix,ix+FILETABLE_STRIDE
  370 D1:AC72 10 F6 -  -      djnz -_
  371 D1:AC74 01 F0 FF FF     ld  bc,-16
  372 D1:AC78 09 -  -  -      add hl,bc   ;subtract INES header
  373 D1:AC79 22 34 34 D0     ld  (total_rom_size),hl
  374 D1:AC7D -  -  -  -      ;Verify that the file actually contains an INES header.
  375 D1:AC7D -  -  -  -      ;TODO: Do this at an earlier stage. Such as file selection.
  376 D1:AC7D DD 2A 52 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  377 D1:AC82 DD 27 00 -      ld  hl,(ix+0)
  378 D1:AC85 11 4E 45 53     ld  de,$53454E         ;4E 45 53 == "NES"
  379 D1:AC89 B7 -  -  -      or  a,a
  380 D1:AC8A ED 52 -  -      sbc hl,de   ;Note: add does not affect zero flag. Can't test this via -DE
  381 D1:AC8C C2 79 AB D1 _:  jp  nz,err_ROMHeaderDamaged
  382 D1:AC90 DD 7E 03 -      ld  a,(ix+3)
  383 D1:AC93 FE 1A -  -      cp  a,$1A
  384 D1:AC95 20 F5 -  -      jr  nz,-_   ;19
  385 D1:AC97 -  -  -  -      ;Compute ROM size by reading INES header. This should be equ or lt above.
  386 D1:AC97 -  -  -  -      ;Note: The below line is optimized from...
  387 D1:AC97 DD 2A 52 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  388 D1:AC9C -  -  -  -      ;... these lines. But the intent might not be perfectly clear. We'll keep
  389 D1:AC9C -  -  -  -      ;these here just in case there's ever a question about it.
  390 D1:AC9C -  -  -  -  ;    ld  ix,FILETABLE
  391 D1:AC9C -  -  -  -  ;    ld  ix,(ix+FILE_ADR_OFFSET)
  392 D1:AC9C DD 6E 04 -      ld  L,(ix+4)    ;PRG ROM count, low
  393 D1:AC9F DD 5E 05 -      ld  e,(ix+5)    ;CHR ROM count, low
  394 D1:ACA2 26 00 -  -      ld  h,0
  395 D1:ACA4 54 -  -  -      ld  d,h
  396 D1:ACA5 DD 7E 07 -      ld  a,(ix+7)    ;Check for INES2 bits
  397 D1:ACA8 E6 0C -  -      and a,%00001100
  398 D1:ACAA FE 08 -  -      cp  a,%00001000
  399 D1:ACAC 20 1B -  -      jr  nz,+_
  400 D1:ACAE DD 7E 09 -      ld  a,(ix+9)
  401 D1:ACB1 47 -  -  -      ld  b,a
  402 D1:ACB2 E6 0F -  -      and a,$0F
  403 D1:ACB4 FE 02 -  -      cp  a,MAXPRGROM_HINIB+1
  404 D1:ACB6 D2 2B AB D1     jp  nc,err_PRGROMTooLarge
  405 D1:ACBA 67 -  -  -      ld  h,a
  406 D1:ACBB 78 -  -  -      ld  a,b
  407 D1:ACBC E6 F0 -  -      and a,$F0
  408 D1:ACBE 07 -  -  -      rlca
  409 D1:ACBF 07 -  -  -      rlca
  410 D1:ACC0 07 -  -  -      rlca
  411 D1:ACC1 07 -  -  -      rlca
  412 D1:ACC2 FE 04 -  -      cp  a,MAXCHRROM_HINIB+1
  413 D1:ACC4 D2 42 AB D1     jp  nc,err_CHRROMTooLarge
  414 D1:ACC8 57 -  -  -      ld  d,a
  415 D1:ACC9 AF -  -  -  _:  xor a,a
  416 D1:ACCA 32 37 34 D0     ld  (prg_rom_size),a
  417 D1:ACCE 32 3A 34 D0     ld  (chr_rom_size),a
  418 D1:ACD2 29 -  -  -      add hl,hl   ;x2
  419 D1:ACD3 29 -  -  -      add hl,hl   ;x4
  420 D1:ACD4 29 -  -  -      add hl,hl   ;x8
  421 D1:ACD5 29 -  -  -      add hl,hl   ;x16
  422 D1:ACD6 29 -  -  -      add hl,hl   ;x32
  423 D1:ACD7 29 -  -  -      add hl,hl   ;x64
  424 D1:ACD8 52 22 38 34 
              D0 -  -  -      ld.s (prg_rom_size+1),hl    ;x64x256
  425 D1:ACDD EB -  -  -      ex  de,hl
  426 D1:ACDE 29 -  -  -      add hl,hl   ;x2
  427 D1:ACDF 29 -  -  -      add hl,hl   ;x4
  428 D1:ACE0 29 -  -  -      add hl,hl   ;x8
  429 D1:ACE1 29 -  -  -      add hl,hl   ;x16
  430 D1:ACE2 29 -  -  -      add hl,hl   ;x32
  431 D1:ACE3 52 22 3B 34 
              D0 -  -  -      ld.s (chr_rom_size+1),hl    ;x32x256
  432 D1:ACE8 2A 3A 34 D0     ld  hl,(chr_rom_size)
  433 D1:ACEC ED 5B 37 34 
              D0 -  -  -      ld  de,(prg_rom_size)
  434 D1:ACF1 19 -  -  -      add hl,de
  435 D1:ACF2 ED 5B 34 34 
              D0 -  -  -      ld  de,(total_rom_size)
  436 D1:ACF7 B7 -  -  -      or  a,a
  437 D1:ACF8 ED 52 -  -      sbc hl,de   ;declared-actual. declared must be equal to or smaller.
  438 D1:ACFA 28 04 -  -      jr  z,+_
  439 D1:ACFC D2 59 AB D1     jp  nc,err_missingROMDetected
  440 D1:AD00 -  -  -  -  _:  ;Find trainer, PRG, and CHR base addresses
  441 D1:AD00 ED 22 10 -      lea hl,ix+16
  442 D1:AD03 22 43 34 D0     ld  (trainer_base),hl   ;whether it exists or not.
  443 D1:AD07 11 00 00 00     ld  de,0
  444 D1:AD0B DD CB 06 56     bit 2,(ix+6)
  445 D1:AD0F 28 04 -  -      jr  z,+_
  446 D1:AD11 11 00 02 00     ld  de,512
  447 D1:AD15 19 -  -  -  _:  add hl,de
  448 D1:AD16 22 43 34 D0     ld  (prg_rom_base),hl
  449 D1:AD1A FD 21 50 34 
              D0 -  -  -      ld  iy,FILETABLE
  450 D1:AD1F 52 FD 27 00     ld.s hl,(iy+FILE_SIZE_OFFSET)
  451 D1:AD23 B7 -  -  -      or  a,a
  452 D1:AD24 ED 52 -  -      sbc hl,de   ;less possible trainer
  453 D1:AD26 11 10 00 00     ld  de,16
  454 D1:AD2A ED 52 -  -      sbc hl,de   ;less iNES header. Remaining is now size of current file.
  455 D1:AD2C EB -  -  -      ex  de,hl   ;curfilesize is now in DE
  456 D1:AD2D 2A 37 34 D0     ld  hl,(prg_rom_size)   ;keep subtracting filesize from this until carry.
  457 D1:AD31 B7 -  -  -      or  a,a
  458 D1:AD32 ED 52 -  -      sbc hl,de   ;if carry, prg_rom end is inside this file. Undo: HL is offset.
  459 D1:AD34 0E 00 -  -      ld  c,0     ;0th file current
  460 D1:AD36 38 1D -  -      jr  c,loadROMFile_locatedCHRROM
  461 D1:AD38 3A 2F 34 D0     ld  a,(inputNumFiles)
  462 D1:AD3C B7 -  -  -      or  a,a
  463 D1:AD3D 28 12 -  -      jr  z,loadROMFile_noCHRROMFound
  464 D1:AD3F 47 -  -  -      ld  b,a
  465 D1:AD40 ED 33 08 -  _:  lea iy,iy+FILETABLE_STRIDE
  466 D1:AD43 52 ED 5B 00 
              00 00 -  -      ld.s de,(FILE_SIZE_OFFSET)
  467 D1:AD49 0C -  -  -      inc c
  468 D1:AD4A B7 -  -  -      or  a,a
  469 D1:AD4B ED 52 -  -      sbc hl,de   ;
  470 D1:AD4D 38 06 -  -      jr  c,loadROMFile_locatedCHRROM
  471 D1:AD4F 10 EF -  -      djnz -_
  472 D1:AD51 -  -  -  -  loadROMFile_noCHRROMFound:
  473 D1:AD51 C3 B9 AB D1     jp  err_CHRROMNotFound
  474 D1:AD55 -  -  -  -  loadROMFile_locatedCHRROM:
  475 D1:AD55 19 -  -  -      add hl,de       ;Undid subtract. HL is now offset in current file
  476 D1:AD56 FD 17 02 -      ld  de,(iy+FILE_ADR_OFFSET) ;so get address inside that file.
  477 D1:AD59 19 -  -  -      add hl,de
  478 D1:AD5A 79 -  -  -      ld  a,c
  479 D1:AD5B 22 46 34 D0     ld  (chr_rom_base),hl
  480 D1:AD5F 32 49 34 D0     ld  (chr_rom_base_file),a
  481 D1:AD63 -  -  -  -      ;Detect mapper and run its initializer
  482 D1:AD63 DD 7E 06 -      ld  a,(ix+6)
  483 D1:AD66 DD 46 07 -      ld  b,(ix+7)
  484 D1:AD69 07 -  -  -      rlca
  485 D1:AD6A 07 -  -  -      rlca
  486 D1:AD6B 07 -  -  -      rlca
  487 D1:AD6C 07 -  -  -      rlca
  488 D1:AD6D A8 -  -  -      xor a,b
  489 D1:AD6E E6 0F -  -      and a,$0F
  490 D1:AD70 A8 -  -  -      xor a,b
  491 D1:AD71 52 EB -  -      ex.s de,hl  ;clears HLU,DEU
  492 D1:AD73 5F -  -  -      ld  e,a
  493 D1:AD74 21 3D 34 D0     ld  hl,submapper
  494 D1:AD78 36 00 -  -      ld  (hl),0
  495 D1:AD7A 78 -  -  -      ld  a,b
  496 D1:AD7B E6 0C -  -      and a,%00001100
  497 D1:AD7D FE 08 -  -      cp  a,%00001000
  498 D1:AD7F 3E 00 -  -      ld  a,0
  499 D1:AD81 20 0E -  -      jr  nz,+_
  500 D1:AD83 DD 46 08 -      ld  b,(ix+8)
  501 D1:AD86 78 -  -  -      ld  a,b
  502 D1:AD87 07 -  -  -      rlca
  503 D1:AD88 07 -  -  -      rlca
  504 D1:AD89 07 -  -  -      rlca
  505 D1:AD8A 07 -  -  -      rlca
  506 D1:AD8B E6 0F -  -      and a,$0F
  507 D1:AD8D 77 -  -  -      ld  (hl),a
  508 D1:AD8E 78 -  -  -      ld  a,b
  509 D1:AD8F E6 0F -  -      and a,$0F
  510 D1:AD91 57 -  -  -  _:  ld  d,a
  511 D1:AD92 ED 53 3F 34 
              D0 -  -  -      ld  (mapper_id),de
  512 D1:AD97 21 FF FF FF     ld  hl,-NUMBER_OF_MAPPERS
  513 D1:AD9B 19 -  -  -      add hl,de
  514 D1:AD9C DA 96 AB D1     jp  c,err_MapperOutOfRange
  515 D1:ADA0 ED 62 -  -      sbc hl,hl
  516 D1:ADA2 19 -  -  -      add hl,de               ;hl=de. both are mapper IDs
  517 D1:ADA3 2E 09 -  -      ld  L,MAPPER_STRIDE
  518 D1:ADA5 55 -  -  -      ld  d,L
  519 D1:ADA6 ED 6C -  -      mlt hl                  ;high byte multiply
  520 D1:ADA8 65 -  -  -      ld  h,L
  521 D1:ADA9 2E 00 -  -      ld  L,0
  522 D1:ADAB ED 5C -  -      mlt de                  ;low byte multiply
  523 D1:ADAD 19 -  -  -      add hl,de               ;This is the best 16bit * 8bit I know to do.
  524 D1:ADAE 11 BA AD D1     ld  de,mapper_table
  525 D1:ADB2 19 -  -  -      add hl,de
  526 D1:ADB3 22 40 34 D0     ld  (mapper_adr_base),hl
  527 D1:ADB7 ED 27 -  -      ld  hl,(hl)
  528 D1:ADB9 E9 -  -  -      jp  (hl)
  529 D1:ADBA -  -  -  -  
  530 D1:ADBA -  -  -  -  mapper_table:   ;entries 9 wide
  531 D1:ADBA C3 AD D1 -  .dl mapper0_init
  532 D1:ADBD 40 AE D1 -  .dl mapper0_read
  533 D1:ADC0 E2 AE D1 -  .dl mapper0_write
  534 D1:ADC3 -  -  -  -  
  535 D1:ADC3 -  -  -  -  mapper0_init:
  536 D1:ADC3 -  -  -  -      ;map trainer, if exist
  537 D1:ADC3 DD CB 06 56     bit 2,(ix+6)
  538 D1:ADC7 28 0D -  -      jr  z,+_
  539 D1:ADC9 2A 43 34 D0     ld  hl,(trainer_base)
  540 D1:ADCD 1E 70 -  -      ld  e,$70
  541 D1:ADCF 0E 02 -  -      ld  c,2
  542 D1:ADD1 41 -  -  -      ld  b,c
  543 D1:ADD2 CD 53 B7 D1     call i6502_map_pages
  544 D1:ADD6 2A 37 34 D0 _:  ld  hl,(prg_rom_size)
  545 D1:ADDA 11 FF BF FF     ld  de,-(16384+1)
  546 D1:ADDE 19 -  -  -      add hl,de   ;carry if more than 1 16KB segment
  547 D1:ADDF 2A 43 34 D0     ld  hl,(prg_rom_base)
  548 D1:ADE3 -  -  -  -      ;jr  $
  549 D1:ADE3 06 80 -  -      ld  b,$80
  550 D1:ADE5 58 -  -  -      ld  e,b
  551 D1:ADE6 0E 40 -  -      ld  c,$40
  552 D1:ADE8 30 02 -  -      jr  nc,+_
  553 D1:ADEA CB 21 -  -      sla c
  554 D1:ADEC CD 53 B7 D1 _:  call i6502_map_pages
  555 D1:ADF0 -  -  -  -      ;map in nametable mirroring
  556 D1:ADF0 21 00 58 D0     ld  hl,NAMETABLE1
  557 D1:ADF4 11 00 5C D0     ld  de,NAMETABLE2
  558 D1:ADF8 22 00 34 D0     ld  (nametable00),hl
  559 D1:ADFC ED 53 0C 34 
              D0 -  -  -      ld  (nametable11),de
  560 D1:AE01 DD CB 06 46     bit 0,(ix+6)    ;nametable arrangement. Mapper 0 has no alternates.
  561 D1:AE05 28 01 -  -      jr  z,+_
  562 D1:AE07 EB -  -  -      ex  de,hl
  563 D1:AE08 22 04 34 D0 _:  ld  (nametable01),hl
  564 D1:AE0C ED 53 08 34 
              D0 -  -  -      ld  (nametable10),de
  565 D1:AE11 -  -  -  -      ;Fill out nametable attrib pointers
  566 D1:AE11 21 00 34 D0     ld  hl,nametable00
  567 D1:AE15 01 C0 03 00     ld  bc,960
  568 D1:AE19 3E 04 -  -      ld  a,4
  569 D1:AE1B ED 17 -  -  _:  ld  de,(hl)
  570 D1:AE1D CB E5 -  -      set 4,L
  571 D1:AE1F EB -  -  -      ex  de,hl
  572 D1:AE20 09 -  -  -      add hl,bc
  573 D1:AE21 EB -  -  -      ex  de,hl
  574 D1:AE22 ED 1F -  -      ld  (hl),de
  575 D1:AE24 CB A5 -  -      res 4,L
  576 D1:AE26 23 -  -  -      inc hl
  577 D1:AE27 23 -  -  -      inc hl
  578 D1:AE28 23 -  -  -      inc hl
  579 D1:AE29 23 -  -  -      inc hl
  580 D1:AE2A 3D -  -  -      dec a
  581 D1:AE2B 20 EE -  -      jr  nz,-_
  582 D1:AE2D -  -  -  -      ;initilize chr_rom current bank address.
  583 D1:AE2D -  -  -  -      ;This mapper does not allow any additional banks, but if it does, this
  584 D1:AE2D -  -  -  -      ;value must be recalculated from chr_rom_base
  585 D1:AE2D 2A 46 34 D0     ld  hl,(chr_rom_base)
  586 D1:AE31 22 2C 34 D0     ld  (chr_rom_curbank),hl
  587 D1:AE35 21 55 AF D1     ld  hl,mapper0_ppu_write
  588 D1:AE39 22 4A 34 D0     ld  (ppu_smc_gate),hl
  589 D1:AE3D 36 C9 -  -      ld  (hl),$C9    ;ret. Will write nop here during first NMI handle
  590 D1:AE3F C9 -  -  -      ret
  591 D1:AE40 -  -  -  -  
  592 D1:AE40 -  -  -  -  
  593 D1:AE40 -  -  -  -  mapper0_read:
  594 D1:AE40 7A -  -  -      ld  a,d
  595 D1:AE41 87 -  -  -      add a,a
  596 D1:AE42 30 08 -  -      jr  nc,+_
  597 D1:AE44 7E -  -  -      ld  a,(hl)  ;is $8000 or above
  598 D1:AE45 C9 -  -  -      ret
  599 D1:AE46 FE 40 -  -      cp  a,$20*2
  600 D1:AE48 38 02 -  -      jr  c,+_
  601 D1:AE4A 7E -  -  -      ld  a,(hl)  ;is below $2000
  602 D1:AE4B C9 -  -  -      ret
  603 D1:AE4C 87 -  -  -  _:  add a,a
  604 D1:AE4D 30 12 -  -      jr  nc,mapper0_ppu_read     ;wasn't $4000 or higher.
  605 D1:AE4F 28 02 -  -      jr  z,mapper0_apu_read      ;high byte was exactly $40
  606 D1:AE51 7E -  -  -      ld  a,(hl)
  607 D1:AE52 C9 -  -  -      ret
  608 D1:AE53 -  -  -  -  mapper0_apu_read:
  609 D1:AE53 79 -  -  -      ld  a,c
  610 D1:AE54 FE 16 -  -      cp  a,$16
  611 D1:AE56 20 07 -  -      jr  nz,+_
  612 D1:AE58 AF -  -  -      xor a,a
  613 D1:AE59 DD CB FE 3E     srl (ix+APU_KEYPAD)
  614 D1:AE5D 8F -  -  -      adc a,a                 ;TODO: Open bus behavior on bits 5-7
  615 D1:AE5E C9 -  -  -      ret
  616 D1:AE5F 7E -  -  -  _:  ld  a,(hl)  ;hope that the dummy map page is good enough to not crash.
  617 D1:AE60 C9 -  -  -      ret
  618 D1:AE61 -  -  -  -  mapper0_ppu_read:
  619 D1:AE61 79 -  -  -      ld  a,c
  620 D1:AE62 E6 07 -  -      and a,%00000111
  621 D1:AE64 FE 07 -  -      cp  a,$07
  622 D1:AE66 28 17 -  -      jr  z,mapper0_ppu_read_ppudata
  623 D1:AE68 FE 04 -  -      cp  a,$04
  624 D1:AE6A 28 6D -  -      jr  z,mapper0_ppu_read_oamdata
  625 D1:AE6C FE 02 -  -      cp  a,$02   ;gotta break this out since reading ppustatus does other stuff
  626 D1:AE6E 28 08 -  -      jr  z,mapper0_ppu_read_ppustatus
  627 D1:AE70 -  -  -  -      ;We should ignore reads from write-only registers but i'm sure nothing
  628 D1:AE70 -  -  -  -      ;will come of allowing it.
  629 D1:AE70 ED 22 E0 -  _:  lea hl,ix+PPU_CTRL
  630 D1:AE73 7D -  -  -      ld  a,l
  631 D1:AE74 81 -  -  -      add a,c
  632 D1:AE75 6F -  -  -      ld  l,a
  633 D1:AE76 7E -  -  -      ld  a,(hl)  
  634 D1:AE77 C9 -  -  -      ret
  635 D1:AE78 -  -  -  -  mapper0_ppu_read_ppustatus:
  636 D1:AE78 -  -  -  -      ;reading ppustatus does additional things.
  637 D1:AE78 3E 55 -  -      ld  a,WREG_CONST
  638 D1:AE7A DD 77 F4 -      ld  (ix+PPU_W),a
  639 D1:AE7D 18 F1 -  -      jr -_
  640 D1:AE7F -  -  -  -  mapper0_ppu_read_ppudata:
  641 D1:AE7F DD 7E F3 -      ld  a,(ix+PPU_V+1)
  642 D1:AE82 4F -  -  -      ld  c,a
  643 D1:AE83 E6 3F -  -      and a,%00111111
  644 D1:AE85 FE 20 -  -      cp  a,$20
  645 D1:AE87 30 0F -  -      jr  nc,+_   ;skip reading from CHR_ROM
  646 D1:AE89 D5 -  -  -      push de
  647 D1:AE8A 52 EB -  -          ex.s de,hl  ;clears DEU
  648 D1:AE8C 2A 2C 34 D0         ld  hl,(chr_rom_curbank)
  649 D1:AE90 57 -  -  -          ld  d,a
  650 D1:AE91 DD 5E F2 -          ld  e,(ix+PPU_V+0)
  651 D1:AE94 19 -  -  -          add hl,de
  652 D1:AE95 D1 -  -  -      pop de
  653 D1:AE96 7E -  -  -      ld  a,(hl)
  654 D1:AE97 C9 -  -  -      ret
  655 D1:AE98 FE 3F -  -  _:  cp  a,$3F
  656 D1:AE9A 20 0C -  -      jr  nz,+_
  657 D1:AE9C DD 7E F2 -      ld  a,(ix+PPU_V+0)
  658 D1:AE9F E6 3F -  -      and a,%00111111
  659 D1:AEA1 21 00 32 D0     ld  hl,vram_palette
  660 D1:AEA5 6F -  -  -      ld  L,a
  661 D1:AEA6 7E -  -  -      ld  a,(hl)
  662 D1:AEA7 C9 -  -  -      ret
  663 D1:AEA8 E6 0C -  -  _:  and a,%00001100     ;%00ZZTTaa Z:00,01=CHR,02=NT,03=PAL; T:WhichNT; a:adrHI
  664 D1:AEAA 21 00 34 D0     ld  hl,nametable00
  665 D1:AEAE 6F -  -  -      ld  L,a             ;bits already in position to index the table
  666 D1:AEAF ED 27 -  -      ld  hl,(hl)
  667 D1:AEB1 DD 6E F2 -      ld  L,(ix+PPU_V+0)
  668 D1:AEB4 DD 7E F3 -      ld  a,(ix+PPU_V+1)
  669 D1:AEB7 AC -  -  -      xor a,h     ;
  670 D1:AEB8 E6 03 -  -      and a,%00000011 ;keep low bits of address in A. H keep is location-specific.
  671 D1:AEBA AC -  -  -      xor a,h
  672 D1:AEBB 67 -  -  -      ld  h,a
  673 D1:AEBC DD CB E0 56     bit 2,(ix+PPU_CTRL) ;VRAM cursor direction
  674 D1:AEC0 3E 01 -  -      ld  a,1
  675 D1:AEC2 28 02 -  -      jr  z,+_
  676 D1:AEC4 C6 1F -  -      add a,31
  677 D1:AEC6 DD 86 F2 -  _:  add a,(ix+PPU_V)
  678 D1:AEC9 DD 77 F2 -      ld  (ix+PPU_V),a
  679 D1:AECC 30 03 -  -      jr  nc,+_
  680 D1:AECE DD 34 F3 -      inc (ix+PPU_V+1)
  681 D1:AED1 DD 7E E7 -  _:  ld  a,(ix+PPU_DATA) ;following dance simulates delayed buffer read
  682 D1:AED4 46 -  -  -      ld  b,(hl)
  683 D1:AED5 DD 70 E7 -      ld  (ix+PPU_DATA),b
  684 D1:AED8 C9 -  -  -      ret
  685 D1:AED9 -  -  -  -  mapper0_ppu_read_oamdata:
  686 D1:AED9 -  -  -  -      ;this needs to be more complex than this. But I'm not. I won't.
  687 D1:AED9 -  -  -  -      ;Not now. Not going to play Micro Machines. I don't wanna.
  688 D1:AED9 21 00 60 D0     ld  hl,OBJECT_ATTRIB_MEM
  689 D1:AEDD DD 6E E3 -      ld  L,(ix+PPU_OAMADDR)
  690 D1:AEE0 7E -  -  -      ld  a,(hl)
  691 D1:AEE1 C9 -  -  -      ret
  692 D1:AEE2 -  -  -  -  
  693 D1:AEE2 -  -  -  -  
  694 D1:AEE2 -  -  -  -  mapper0_write:
  695 D1:AEE2 7A -  -  -      ld  a,d
  696 D1:AEE3 FE 20 -  -      cp  a,$20
  697 D1:AEE5 30 02 -  -      jr  nc,+_
  698 D1:AEE7 70 -  -  -      ld  (hl),b
  699 D1:AEE8 C9 -  -  -      ret
  700 D1:AEE9 FE 40 -  -  _:  cp  a,$40
  701 D1:AEEB 38 68 -  -      jr  c,mapper0_ppu_write
  702 D1:AEED 28 04 -  -      jr  z,mapper0_apu_write
  703 D1:AEEF 87 -  -  -      add a,a
  704 D1:AEF0 D8 -  -  -      ret c       ;don't write anything to above $8000
  705 D1:AEF1 70 -  -  -      ld  (hl),b  ;but allow it in $4100-$7FFF because it might be RAM.
  706 D1:AEF2 C9 -  -  -      ret
  707 D1:AEF3 -  -  -  -  mapper0_apu_write:
  708 D1:AEF3 79 -  -  -      ld  a,c
  709 D1:AEF4 FE 16 -  -      cp  a,$16
  710 D1:AEF6 20 3B -  -      jr  nz,+_
  711 D1:AEF8 DD 7E FF -      ld  a,(ix+APU_KEYLATCH)
  712 D1:AEFB A8 -  -  -      xor a,b     ;Bit 0 is set if we're trying to change controller poll state.
  713 D1:AEFC 0F -  -  -      rrca        ;And this is how we're going to get it.
  714 D1:AEFD D0 -  -  -      ret nc      ;Only support NES standard controller.
  715 D1:AEFE CB 40 -  -      bit 0,b     ;So... what are we changing it to?
  716 D1:AF00 DD 70 FF -      ld  (ix+APU_KEYLATCH),b
  717 D1:AF03 21 00 00 F5     ld  hl,mpKeyMode
  718 D1:AF07 28 06 -  -      jr  z,mapper0_apu_stop_keyboard
  719 D1:AF09 7E -  -  -      ld  a,(hl)
  720 D1:AF0A FE 03 -  -      cp  a,3
  721 D1:AF0C C8 -  -  -      ret z       ;don't do anything to the keyboard if running continuous.
  722 D1:AF0D 77 -  -  -      ld  (hl),a  ;else set to continuous and keep going.
  723 D1:AF0E C9 -  -  -      ret
  724 D1:AF0F -  -  -  -  mapper0_apu_stop_keyboard:
  725 D1:AF0F 2E 12 -  -      ld  L,$12   ;76543210 : del mode 2nd y= wind zoom trace graph
  726 D1:AF11 7E -  -  -      ld  a,(hl)
  727 D1:AF12 2E 1E -  -      ld  L,$1E   ;----3210 : up right left down
  728 D1:AF14 4E -  -  -      ld  c,(hl)
  729 D1:AF15 A9 -  -  -      xor a,c
  730 D1:AF16 E6 F0 -  -      and a,%11110000
  731 D1:AF18 A9 -  -  -      xor a,c     ;keymapping has changed. We need to further alter it.
  732 D1:AF19 -  -  -  -      ;[DE MO 2N Y= UP RI LE DO] maps to [SE, B, A, ST, UP, RI, LE, DO]
  733 D1:AF19 -  -  -  -      ;The above must be rearranged to become:
  734 D1:AF19 -  -  -  -      ;            [RI, LE, DO, UP, ST, SE, B , A ]
  735 D1:AF19 -  -  -  -      ;as compared to
  736 D1:AF19 -  -  -  -      ;            [SE, B , A , ST, UP, RI, LE, DO]
  737 D1:AF19 07 -  -  -      rlca        ;[B , A , ST, UP, RI, LE, DO, SE]
  738 D1:AF1A 4F -  -  -      ld  c,a     ;b4  : UP is in correct position.
  739 D1:AF1B 07 -  -  -      rlca        ;[A , ST, UP, RI, LE, DO, SE, B ]
  740 D1:AF1C 07 -  -  -      rlca        ;[ST, UP, RI, LE, DO, SE, B , A ]
  741 D1:AF1D 47 -  -  -      ld  b,a     ;b0-2:SE, B , and A are in the correct position
  742 D1:AF1E 07 -  -  -      rlca        ;[UP, RI, LE, DO, SE, B , A , ST]
  743 D1:AF1F 07 -  -  -      rlca        ;[RI, LE, DO, SE, B , A , ST, UP]
  744 D1:AF20 57 -  -  -      ld  d,a     ;b5-7: RI LE DO in correct position.
  745 D1:AF21 07 -  -  -      rlca        ;[LE, DO, SE, B , A , ST, UP, RI]
  746 D1:AF22 07 -  -  -      rlca        ;b3: ST is in the correct position.
  747 D1:AF23 A9 -  -  -      xor a,c     ;
  748 D1:AF24 E6 08 -  -      and a,%00001000 ;keep A3, merge others
  749 D1:AF26 A9 -  -  -      xor a,c     ;Has: A3. Merge-in contains b4
  750 D1:AF27 A8 -  -  -      xor a,b     ;
  751 D1:AF28 E6 18 -  -      and a,%00011000 ;keep A3-4
  752 D1:AF2A A8 -  -  -      xor a,b     ;Merge-in contains b0-2
  753 D1:AF2B AA -  -  -      xor a,d     ;
  754 D1:AF2C E6 1F -  -      and a,%00011111 ;keep A0-4
  755 D1:AF2E AA -  -  -      xor a,d     ;Merge-in contains b5-7. Is complete.
  756 D1:AF2F DD 77 FE -      ld  (ix+APU_KEYPAD),a
  757 D1:AF32 C9 -  -  -      ret
  758 D1:AF33 FE 14 -  -  _:  cp  a,$14   ;OAM DMA
  759 D1:AF35 20 1C -  -      jr  nz,+_
  760 D1:AF37 C5 -  -  -      push bc
  761 D1:AF38 D5 -  -  -          push de
  762 D1:AF39 11 01 02 00             ld  de,513  ;or 514. Not going to emulate put/get cycles
  763 D1:AF3D FD 19 -  -              add iy,de
  764 D1:AF3F 0E 0C -  -              ld  c,BASETABLE_STRIDE
  765 D1:AF41 21 00 40 D0             ld  hl,PAGETABLE
  766 D1:AF45 09 -  -  -              add hl,bc
  767 D1:AF46 11 00 60 D0             ld  de,OBJECT_ATTRIB_MEM
  768 D1:AF4A 01 00 01 00             ld  bc,256
  769 D1:AF4E ED B0 -  -              ldir
  770 D1:AF50 D1 -  -  -          pop de
  771 D1:AF51 C1 -  -  -      pop bc
  772 D1:AF52 C9 -  -  -      ret
  773 D1:AF53 70 -  -  -  _:  ld  (hl),b
  774 D1:AF54 C9 -  -  -      ret
  775 D1:AF55 -  -  -  -  mapper0_ppu_write:
  776 D1:AF55 C9 -  -  -      ret
  777 D1:AF56 -  -  -  -      ;TODO: gate off access outside VBlank
  778 D1:AF56 -  -  -  -      ;TODO: Replace cp/jr chain with DJNZ chain for more optimal branching.
  779 D1:AF56 79 -  -  -      ld  a,c
  780 D1:AF57 E6 07 -  -      and a,%00000111
  781 D1:AF59 -  -  -  -  ;    cp  a,$01  ;Once midframe is supported, uncomment this.
  782 D1:AF59 -  -  -  -  ;    jr  z,mapper0_ppu_write_ppumask
  783 D1:AF59 FE 02 -  -      cp  a,$02
  784 D1:AF5B C8 -  -  -      ret z   ;read-only register. do not write to it.
  785 D1:AF5C FE 04 -  -      cp  a,$04
  786 D1:AF5E 28 08 -  -      jr  z,mapper0_ppu_write_oamdata
  787 D1:AF60 FE 06 -  -      cp a,$06
  788 D1:AF62 28 0D -  -      jr  z,mapper0_ppu_write_ppuaddr
  789 D1:AF64 FE 07 -  -      cp  a,$07
  790 D1:AF66 28 17 -  -      jr  z,mapper0_ppu_write_ppudata
  791 D1:AF68 -  -  -  -  ;    cp  a,$05  ;Once midframe is supported, uncomment this.
  792 D1:AF68 -  -  -  -  ;    jr  z,mapper0_ppu_write_ppuscroll
  793 D1:AF68 -  -  -  -  
  794 D1:AF68 -  -  -  -  
  795 D1:AF68 -  -  -  -  mapper0_ppu_write_oamdata:
  796 D1:AF68 -  -  -  -      ;Doesn't check anything. So sad.
  797 D1:AF68 21 00 60 D0     ld  hl,OBJECT_ATTRIB_MEM
  798 D1:AF6C DD 6E E3 -      ld  L,(ix+PPU_OAMADDR)
  799 D1:AF6F 70 -  -  -      ld  (hl),b
  800 D1:AF70 C9 -  -  -      ret
  801 D1:AF71 -  -  -  -  mapper0_ppu_write_ppuaddr:
  802 D1:AF71 DD CB F4 0E     rrc (ix+PPU_W)
  803 D1:AF75 38 04 -  -      jr  c,+_
  804 D1:AF77 DD 70 F2 -      ld  (ix+PPU_V+0),b
  805 D1:AF7A C9 -  -  -      ret
  806 D1:AF7B DD 70 F3 -  _:  ld  (ix+PPU_V+1),b
  807 D1:AF7E C9 -  -  -      ret
  808 D1:AF7F -  -  -  -  
  809 D1:AF7F -  -  -  -  mapper0_ppu_write_ppudata:
  810 D1:AF7F DD 7E F3 -      ld  a,(ix+PPU_V+1)
  811 D1:AF82 4F -  -  -      ld  c,a
  812 D1:AF83 E6 3F -  -      and a,%00111111
  813 D1:AF85 FE 20 -  -      cp  a,$20
  814 D1:AF87 D8 -  -  -      ret c   ;Mapper 0 does not allow writing to CHR_ROM
  815 D1:AF88 FE 3F -  -      cp  a,$3F
  816 D1:AF8A 28 2B -  -      jr  z,+++_    ;write to palette table
  817 D1:AF8C E6 0C -  -      and a,%00001100     ;%00ZZTTaa Z:00,01=CHR,02=NT,03=PAL; T:WhichNT; a:adrHI
  818 D1:AF8E 21 00 34 D0     ld  hl,nametable00
  819 D1:AF92 6F -  -  -      ld  L,a             ;bits already in position to index the table
  820 D1:AF93 ED 27 -  -      ld  hl,(hl)
  821 D1:AF95 DD 6E F2 -      ld  L,(ix+PPU_V+0)
  822 D1:AF98 DD 7E F3 -      ld  a,(ix+PPU_V+1)
  823 D1:AF9B AC -  -  -      xor a,h     ;
  824 D1:AF9C E6 03 -  -      and a,%00000011 ;keep low bits of address in A. H keep is location-specific.
  825 D1:AF9E AC -  -  -      xor a,h
  826 D1:AF9F 67 -  -  -      ld  h,a
  827 D1:AFA0 70 -  -  -      ld  (hl),b
  828 D1:AFA1 DD CB E0 56     bit 2,(ix+PPU_CTRL) ;VRAM cursor direction
  829 D1:AFA5 3E 01 -  -      ld  a,1
  830 D1:AFA7 28 02 -  -      jr  z,+_
  831 D1:AFA9 C6 1F -  -      add a,31
  832 D1:AFAB DD 86 F2 -  _:  add a,(ix+PPU_V)
  833 D1:AFAE DD 77 F2 -      ld  (ix+PPU_V),a
  834 D1:AFB1 30 03 -  -      jr  nc,+_
  835 D1:AFB3 DD 34 F3 -      inc (ix+PPU_V+1)
  836 D1:AFB6 C9 -  -  -  _:  ret
  837 D1:AFB7 21 00 32 D0 _:  ld  hl,vram_palette
  838 D1:AFBB DD 7E F2 -      ld  a,(ix+PPU_V+0)
  839 D1:AFBE E6 3F -  -      and a,%00111111
  840 D1:AFC0 6F -  -  -      ld  L,a
  841 D1:AFC1 70 -  -  -      ld  (hl),b
  842 D1:AFC2 C9 -  -  -      ret
  843 D1:AFC3 -  -  -  -  
  844 D1:AFC3 -  -  -  -  mapper0_ppu_write_ppumask:
  845 D1:AFC3 -  -  -  -      ;TODO: Allow queueing for midframe writes.
  846 D1:AFC3 70 -  -  -      ld  (hl),b
  847 D1:AFC4 C9 -  -  -      ret
  848 D1:AFC5 -  -  -  -  mapper0_ppu_write_ppuscroll:
  849 D1:AFC5 -  -  -  -      ;TODO: Allow queueing for midframe writes. Often used in conjunction
  850 D1:AFC5 -  -  -  -      ;with Sprite0 hits for status bar rendering.
  851 D1:AFC5 70 -  -  -      ld  (hl),b
  852 D1:AFC6 C9 -  -  -      ret
  853 D1:AFC7 -  -  -  -  
  854 D1:AFC7 -  -  -  -  
  855 D1:AFC7 -  -  -  -  loadROMFile_tempSig:    ;total 23 bytes
  856 D1:AFC7 43 45 4E 52 
              4F 32 00 -  .db "CENRO2",0
  857 D1:AFCE -  -  -  -  loadROMFile_tempSigHash:
  858 D1:AFCE 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;16 bytes for hash
  859 D1:AFDE -  -  -  -  
  860 D1:AFDE -  -  -  -  
  861 D1:AFDE -  -  -  -  ;Input: IY = locationOfSignature. 
  862 D1:AFDE -  -  -  -  ;       BC=size of signature (long load to clear BCU), still limited to 255.
  863 D1:AFDE -  -  -  -  ;Output: carry=1: Variable not found.
  864 D1:AFDE -  -  -  -  ;Output: carry=0: DE=address of variable data start after the signature
  865 D1:AFDE -  -  -  -  ;        IX=location of current variable's VAT location.
  866 D1:AFDE -  -  -  -  ;Destroys: All registers not in use.
  867 D1:AFDE -  -  -  -  ;NOTES: This routine is capable of resuming a search that has ended.
  868 D1:AFDE -  -  -  -  
  869 D1:AFDE -  -  -  -  ;To continue searching:
  870 D1:AFDE -  -  -  -  ;call vatTraverse_continue with the following inputs:
  871 D1:AFDE -  -  -  -  ;   IX preserved from a non-carry return of vatTraverse.
  872 D1:AFDE -  -  -  -  ;   BC = same as input for vatTraverse. vatTraverse does not destroy this reg.
  873 D1:AFDE -  -  -  -  ;   WARNING: DO NOT KEEP SEARCHING AFTER CALL RETURNS CARRY. START A NEW SEARCH.
  874 D1:AFDE -  -  -  -  vatTraverse:
  875 D1:AFDE -  -  -  -      ;progPtr = progvat start; ptemp = progvatend
  876 D1:AFDE DD 2A 9D 25 
              D0 -  -  -      ld  ix,(progPtr)
  877 D1:AFE3 -  -  -  -  vatTraverse_loop:
  878 D1:AFE3 2A 9A 25 D0     ld  hl,(pTemp)
  879 D1:AFE7 ED 12 00 -      lea de,ix+0
  880 D1:AFEA B7 -  -  -      or  a,a
  881 D1:AFEB ED 52 -  -      sbc hl,de   ;HL<DE while in pVAT, else carry set.
  882 D1:AFED 3F -  -  -      ccf
  883 D1:AFEE D8 -  -  -      ret c
  884 D1:AFEF 1A -  -  -      ld  a,(de)
  885 D1:AFF0 E6 1F -  -      and a,$1F
  886 D1:AFF2 FE 15 -  -      cp  a,AppVarObj
  887 D1:AFF4 20 34 -  -      jr  nz,vatTraverse_skip
  888 D1:AFF6 DD 17 F9 -      ld  de,(ix-7)   ;puts "page" byte in DEU
  889 D1:AFF9 DD 5E FD -      ld  e,(ix-3)
  890 D1:AFFC DD 56 FC -      ld  d,(ix-4)
  891 D1:AFFF CD 98 1F 02     call _ChkInRam
  892 D1:B003 EB -  -  -      ex  de,hl
  893 D1:B004 30 08 -  -      jr  nc,+_
  894 D1:B006 11 09 00 00     ld  de,9
  895 D1:B00A 19 -  -  -      add hl,de
  896 D1:B00B 5E -  -  -      ld  e,(hl)
  897 D1:B00C 19 -  -  -      add hl,de
  898 D1:B00D 23 -  -  -      inc hl
  899 D1:B00E 5E -  -  -  _:  ld  e,(hl)
  900 D1:B00F 23 -  -  -      inc hl
  901 D1:B010 56 -  -  -      ld  d,(hl)
  902 D1:B011 23 -  -  -      inc hl
  903 D1:B012 EB -  -  -      ex  de,hl
  904 D1:B013 B7 -  -  -      or  a,a
  905 D1:B014 ED 42 -  -      sbc hl,bc   ;varsize-entrysize. If carry, entry cannot possibly be in var.
  906 D1:B016 38 12 -  -      jr  c,vatTraverse_skip
  907 D1:B018 ED 23 00 -      lea hl,iy+0
  908 D1:B01B C5 -  -  -      push bc
  909 D1:B01C 1A -  -  -  _:      ld  a,(de)
  910 D1:B01D 13 -  -  -          inc de
  911 D1:B01E ED A1 -  -          cpi
  912 D1:B020 20 07 -  -          jr  nz,vatTraverse_sigNoMatch
  913 D1:B022 EA 1C B0 D1         jp  pe,-_
  914 D1:B026 C1 -  -  -      pop bc
  915 D1:B027 B7 -  -  -      or  a,a
  916 D1:B028 C9 -  -  -      ret         ;NC. DE = past the signature.
  917 D1:B029 -  -  -  -  vatTraverse_sigNoMatch:
  918 D1:B029 C1 -  -  -      pop bc
  919 D1:B02A -  -  -  -  vatTraverse_continue:
  920 D1:B02A -  -  -  -  vatTraverse_skip:
  921 D1:B02A 3E 07 -  -      ld  a,7
  922 D1:B02C 11 FF FF FF     ld  de,-1
  923 D1:B030 DD 86 FA -      add a,(ix-6)
  924 D1:B033 ED 44 -  -      neg
  925 D1:B035 5F -  -  -      ld  e,a
  926 D1:B036 DD 19 -  -      add ix,de   ;because "sbc ix,de" isn't a thing. Boo.
  927 D1:B038 18 A9 -  -      jr  vatTraverse_loop
  928 D1:B03A -  -  -  -  
  929 D1:B03A -  -  -  -  ;Copied from my Falldown2 project. I didn't want to have to
  930 D1:B03A -  -  -  -  ;find yet another hardware reference for something I already did.
  931 D1:B03A -  -  -  -  ;But I'll have to do it again anyway because this isn't exactly
  932 D1:B03A -  -  -  -  ;what we're looking for. Here, we output the same sort of
  933 D1:B03A -  -  -  -  ;game keys that I've used basically all my programming life.
  934 D1:B03A -  -  -  -  ;Anyhoo. We'll be using the following:
  935 D1:B03A -  -  -  -  ;kbitDown	equ 00h
  936 D1:B03A -  -  -  -  ;kbitLeft	equ 01h
  937 D1:B03A -  -  -  -  ;kbitRight	equ 02h
  938 D1:B03A -  -  -  -  ;kbitUp		equ 03h
  939 D1:B03A -  -  -  -  ;kbitYequ equ 04h
  940 D1:B03A -  -  -  -  ;kbit2nd		equ 05h
  941 D1:B03A -  -  -  -  ;kbitMode	equ 06h
  942 D1:B03A -  -  -  -  ;kbitDel		equ 07h
  943 D1:B03A -  -  -  -  ;You can find the other defines approximately where I found the stuff above.
  944 D1:B03A -  -  -  -  
  945 D1:B03A -  -  -  -  getkbd_adl:
  946 D1:B03A DD 21 00 00 
              F5 -  -  -  	ld  ix,mpKeyMode
  947 D1:B03F ED 22 00 -  	lea hl,ix+0
  948 D1:B042 36 02 -  -  	ld  (hl),keyModeScanOnce
  949 D1:B044 AF -  -  -  	xor a
  950 D1:B045 BE -  -  -  _:  cp  (hl)
  951 D1:B046 20 FD -  -  	jr  nz,-_
  952 D1:B048 DD 7E 12 -  	ld  a,(ix+kbdG1-mpKeyRange)
  953 D1:B04B DD 6E 1E -  	ld  l,(ix+kbdG7-mpKeyRange)
  954 D1:B04E AD -  -  -  	xor L
  955 D1:B04F E6 F0 -  -  	and 11110000b	;mask out lower bits to let me shove dpad bits in
  956 D1:B051 AD -  -  -  	xor L
  957 D1:B052 C9 -  -  -  	ret
  958 D1:B053 -  -  -  -  
  959 D1:B053 -  -  -  -  waituntilkeyrelease:
  960 D1:B053 CD 3A B0 D1     call getkbd_adl
  961 D1:B057 B7 -  -  -      or  a,a
  962 D1:B058 20 F9 -  -      jr  nz,waituntilkeyrelease
  963 D1:B05A C9 -  -  -  	ret
  964 D1:B05B -  -  -  -  
  965 D1:B05B -  -  -  -  waituntilnewkeypress:
  966 D1:B05B CD 53 B0 D1     call waituntilkeyrelease
  967 D1:B05F CD 3A B0 D1 _:  call getkbd_adl
  968 D1:B063 B7 -  -  -  	or  a,a
  969 D1:B064 28 F9 -  -  	jr  z,-_
  970 D1:B066 C9 -  -  -      ret
  971 D1:B067 -  -  -  -  
  972 D1:B067 -  -  -  -  #include "lcd.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    1 D1:B067 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 D1:B067 -  -  -  -  ;TI-84 Plus CE Include File
    2 D1:B067 -  -  -  -  
    3 D1:B067 -  -  -  -  ;Various Parts Contributed by
    4 D1:B067 -  -  -  -  ;- BrandonW
    5 D1:B067 -  -  -  -  ;- calc84
    6 D1:B067 -  -  -  -  ;- MateoConLechuga
    7 D1:B067 -  -  -  -  ;- Runer112
    8 D1:B067 -  -  -  -  ;- tr1p1ea
    9 D1:B067 -  -  -  -  ;- Kerm Martian
   10 D1:B067 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    2 D1:B067 -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
    5 D1:B067 -  -  -  -  ;
    6 D1:B067 -  -  -  -  ;
    7 D1:B067 -  -  -  -  ;
    8 D1:B067 -  -  -  -  
    9 D1:B067 -  -  -  -  ;Undefine this to speed up core process by losing debug state
   10 D1:B067 -  -  -  -  ;#define COREDEBUG
   11 D1:B067 -  -  -  -  
   12 D1:B067 -  -  -  -  DEBUG_PRINT_START_CYCLE .equ 0
   13 D1:B067 -  -  -  -  DEBUG_STEP_START_CYCLE  .equ 30000 ;26485
   14 D1:B067 -  -  -  -  
   15 D1:B067 -  -  -  -  
   16 D1:B067 -  -  -  -  
   17 D1:B067 -  -  -  -  FONTFGCOLOR .EQU $FF
   18 D1:B067 -  -  -  -  FONTBGCOLOR .EQU $00
   19 D1:B067 -  -  -  -  
   20 D1:B067 -  -  -  -  screenBuf1      .equ vRam
   21 D1:B067 -  -  -  -  screenBuf2      .equ vRam+(320*240)
   22 D1:B067 -  -  -  -  ;DO NOT MOVE THESE.
   23 D1:B067 -  -  -  -  xPos                .equ $D031F6
   24 D1:B067 -  -  -  -  yPos                .equ $D031F7
   25 D1:B067 -  -  -  -  slopPos             .equ $D031F8        ;extra byte here
   26 D1:B067 -  -  -  -  debugram            .equ $D031F9        ;FA and FB occupied too.
   27 D1:B067 -  -  -  -  save_spl            .equ $D031FC        ;FD and FE occupied too.
   28 D1:B067 -  -  -  -  save_mbase          .equ $D031FF        ;
   29 D1:B067 -  -  -  -  vram_palette        .equ $D03200        ;64 bytes of color. It looks like itself
   30 D1:B067 -  -  -  -  core_memory_ix      .equ $D03280        ;IX range -128 to -64 already in use.
   31 D1:B067 -  -  -  -  scrap_mapping       .equ $D03300        ;256 bytes. maps to nowhere important.
   32 D1:B067 -  -  -  -  saferam1            .equ $D03400        ;1024 bytes available. Define later.
   33 D1:B067 -  -  -  -  main_ram            .equ $D03800        ;$0800 bytes of main system memory
   34 D1:B067 -  -  -  -  
   35 D1:B067 -  -  -  -  ZEROPAGE            .equ main_ram+(0*256)
   36 D1:B067 -  -  -  -  STACKBASE           .equ main_ram+(1*256)
   37 D1:B067 -  -  -  -  
   38 D1:B067 -  -  -  -  BASETABLE           .equ $D04000        ;variable size. 256*BASETABLE_STRIDE
   39 D1:B067 -  -  -  -  BASETABLE_STRIDE    .equ 12
   40 D1:B067 -  -  -  -  PAGETABLE_OFFSET    .equ 0
   41 D1:B067 -  -  -  -  PAGETABLE           .equ BASETABLE+PAGETABLE_OFFSET
   42 D1:B067 -  -  -  -  JUMPTABLE_OFFSET    .equ 4
   43 D1:B067 -  -  -  -  JUMPTABLE           .equ BASETABLE+JUMPTABLE_OFFSET
   44 D1:B067 -  -  -  -  USETABLE_OFFSET     .equ 8
   45 D1:B067 -  -  -  -  USETABLE            .equ BASETABLE+USETABLE_OFFSET
   46 D1:B067 -  -  -  -  
   47 D1:B067 -  -  -  -  NAMETABLE1          .equ BASETABLE+(512*BASETABLE_STRIDE)
   48 D1:B067 -  -  -  -  NAMETABLE2          .equ NAMETABLE1 + 1024  ;1024 BYTES
   49 D1:B067 -  -  -  -  OBJECT_ATTRIB_MEM   .equ NAMETABLE2 + 1024  ;256 BYTES
   50 D1:B067 -  -  -  -  
   51 D1:B067 -  -  -  -  ;
   52 D1:B067 -  -  -  -  ;saferam1 1024 bytes storage
   53 D1:B067 -  -  -  -  ;
   54 D1:B067 -  -  -  -  nametable00         .equ saferam1           ;4b Do not move these vars
   55 D1:B067 -  -  -  -  nametable01         .equ nametable00+4      ;4b
   56 D1:B067 -  -  -  -  nametable10         .equ nametable01+4      ;4b
   57 D1:B067 -  -  -  -  nametable11         .equ nametable10+4      ;4b
   58 D1:B067 -  -  -  -  nametable00_attrib  .equ nametable11+4      ;4b
   59 D1:B067 -  -  -  -  nametable01_attrib  .equ nametable00_attrib+4   ;4b
   60 D1:B067 -  -  -  -  nametable10_attrib  .equ nametable01_attrib+4   ;4b
   61 D1:B067 -  -  -  -  nametable11_attrib  .equ nametable10_attrib+4   ;4b
   62 D1:B067 -  -  -  -  chr_rom_tiles       .equ nametable11_attrib+4   ;4b
   63 D1:B067 -  -  -  -  chr_rom_sprites     .equ chr_rom_tiles+4    ;4b
   64 D1:B067 -  -  -  -  curScreenBuf        .equ chr_rom_sprites+4  ;4b
   65 D1:B067 -  -  -  -  linestart           .equ curScreenBuf+3     ;1b
   66 D1:B067 -  -  -  -  chr_rom_curbank     .equ linestart+1        ;3b Base used for PPU stuff.
   67 D1:B067 -  -  -  -  inputNumFiles       .equ chr_rom_curbank+3  ;1b
   68 D1:B067 -  -  -  -  basefile_sig        .equ inputNumFiles+1    ;3b pointer to 16b hash
   69 D1:B067 -  -  -  -  missing_files       .equ basefile_sig+3     ;1b
   70 D1:B067 -  -  -  -  total_rom_size      .equ missing_files+1    ;3b
   71 D1:B067 -  -  -  -  prg_rom_size        .equ total_rom_size+3   ;3b
   72 D1:B067 -  -  -  -  chr_rom_size        .equ prg_rom_size+3     ;3b
   73 D1:B067 -  -  -  -  submapper           .equ chr_rom_size+3     ;1b. iNES2 thing. Not often used.
   74 D1:B067 -  -  -  -  ines_flag_6         .equ submapper+1        ;1b. Flags that a mapper may need.
   75 D1:B067 -  -  -  -  mapper_id           .equ ines_flag_6+1      ;3b. Convenience load for 12 bits
   76 D1:B067 -  -  -  -  mapper_adr_base     .equ mapper_id+1        ;3b. Used to load mapper
   77 D1:B067 -  -  -  -  trainer_base        .equ mapper_adr_base+3  ;3b. If exist, starts here
   78 D1:B067 -  -  -  -  prg_rom_base        .equ mapper_adr_base+3  ;3b. Adjusted in case of trainer.
   79 D1:B067 -  -  -  -  chr_rom_base        .equ prg_rom_base+3     ;3b. Located somewhere.
   80 D1:B067 -  -  -  -  chr_rom_base_file   .equ chr_rom_base+3     ;1b. Nonzero if not in first file.
   81 D1:B067 -  -  -  -  ppu_smc_gate        .equ chr_rom_base_file+1 ;3b write address to ungate PPU
   82 D1:B067 -  -  -  -  timings_base        .equ ppu_smc_gate+3    ;3b. Current pointer to timings
   83 D1:B067 -  -  -  -  
   84 D1:B067 -  -  -  -  SIZEOF_INTEGRITY_HASH    .equ 16
   85 D1:B067 -  -  -  -  MAXPRGROM_HINIB     .equ 1
   86 D1:B067 -  -  -  -  MAXCHRROM_HINIB     .equ 3
   87 D1:B067 -  -  -  -  NUMBER_OF_MAPPERS   .equ 1
   88 D1:B067 -  -  -  -  MAPPER_STRIDE       .equ 9
   89 D1:B067 -  -  -  -  
   90 D1:B067 -  -  -  -  MAXNUMFILES         .equ 1                  ;set to 32 later. that's like 1.5MB
   91 D1:B067 -  -  -  -  FILETABLE_STRIDE    .equ 8
   92 D1:B067 -  -  -  -  FILETABLE           .equ timings_base+3   ;(MAXNUMFILES*FILETABLE_STRIDE)b
   93 D1:B067 -  -  -  -  FILE_SIZE_OFFSET    .equ 0
   94 D1:B067 -  -  -  -  FILE_ADR_OFFSET     .equ 2
   95 D1:B067 -  -  -  -  FILE_SIG_ADR_OFFSET .equ 5
   96 D1:B067 -  -  -  -  
   97 D1:B067 -  -  -  -  int_table_len       .equ FILETABLE+((MAXNUMFILES+1)*FILETABLE_STRIDE)
   98 D1:B067 -  -  -  -  INT_TABLE           .equ int_table_len+1
   99 D1:B067 -  -  -  -  INT_TABLE_MAXLEN    .equ 8
  100 D1:B067 -  -  -  -  INT_TABLE_STRIDE    .equ 6
  101 D1:B067 -  -  -  -  INT_ADDR_OFFSET     .equ 0
  102 D1:B067 -  -  -  -  INT_CYCLE_OFFSET    .equ 3
  103 D1:B067 -  -  -  -  
  104 D1:B067 -  -  -  -  
  105 D1:B067 -  -  -  -  
  106 D1:B067 -  -  -  -  ;
  107 D1:B067 -  -  -  -  ;
  108 D1:B067 -  -  -  -  ;
  109 D1:B067 -  -  -  -  ;
  110 D1:B067 -  -  -  -  #define WREG_CONST %01010101
  111 D1:B067 -  -  -  -  
  112 D1:B067 -  -  -  -  ;PPU default locations. Some are not used
  113 D1:B067 -  -  -  -  #define PPU_CTRL -32
  114 D1:B067 -  -  -  -  #define PPU_MASK -31
  115 D1:B067 -  -  -  -  #define PPU_STATUS -30
  116 D1:B067 -  -  -  -  #define PPU_OAMADDR -29
  117 D1:B067 -  -  -  -  #define PPU_OAMDATA -28
  118 D1:B067 -  -  -  -  #define PPU_SCROLL -27
  119 D1:B067 -  -  -  -  #define PPU_ADDR -26
  120 D1:B067 -  -  -  -  #define PPU_DATA -25
  121 D1:B067 -  -  -  -  ;PPU internal stuff
  122 D1:B067 -  -  -  -  #define PPU_SUBCYCLE -15    ;0, 1, or 2.
  123 D1:B067 -  -  -  -  #define PPU_V -14           ;USED TO STORE VRAM ADDRESS (PPU ADDRESS SPACE)
  124 D1:B067 -  -  -  -  #define PPU_W -12           ;INTERNAL W REGISTER FOR HIGH/LOW BYTE PORT WRITES
  125 D1:B067 -  -  -  -  #define PPU_FRAMECOUNT -11  ;USED FOR EVEN/ODD
  126 D1:B067 -  -  -  -  #define PPU_NAMETABLE_PTR -10   ;Pointer cache
  127 D1:B067 -  -  -  -  #define PPU_VCOUNT -7
  128 D1:B067 -  -  -  -  #define PPU_HCOUNT -6
  129 D1:B067 -  -  -  -  #define PPU_TCOUNT -5
  130 D1:B067 -  -  -  -  #define PPU_XSCROLL -4  ;Should be constructed from PPU_SCROLL
  131 D1:B067 -  -  -  -  #define PPU_YSCROLL -3  ;
  132 D1:B067 -  -  -  -  #define APU_KEYPAD -2   ;First to last: A,B,SE,ST,UP,DO,LE,RI. 01234567.
  133 D1:B067 -  -  -  -  #define APU_KEYLATCH -1
  134 D1:B067 -  -  -  -  ;core memory
  135 D1:B067 -  -  -  -  #define REGA 0
  136 D1:B067 -  -  -  -  #define REGX 1
  137 D1:B067 -  -  -  -  #define REGY 2
  138 D1:B067 -  -  -  -  #define REGSP 3
  139 D1:B067 -  -  -  -  #define REGSR 4
  140 D1:B067 -  -  -  -  #define REGPC 5
  141 D1:B067 -  -  -  -  #define CYCLES_REMAIN 8
  142 D1:B067 -  -  -  -  #define CYCLES_CURRENT 11
  143 D1:B067 -  -  -  -  #define CURRENT_OPCODES 14
  144 D1:B067 -  -  -  -  #define CORE_STACK_BASE 17
  145 D1:B067 -  -  -  -  #define CORE_ERROR_LEVEL 20
  146 D1:B067 -  -  -  -  #define SCRAP_COUNTER 21
  147 D1:B067 -  -  -  -  #define PORT_WRITE_TIMESTAMP 24
  148 D1:B067 -  -  -  -  #define TEMP_MEMORY 27
  149 D1:B067 -  -  -  -  #define NMI_TRIGGERED 30 
  150 D1:B067 -  -  -  -  ;flag IDs
  151 D1:B067 -  -  -  -  #define SF_NEG 7
  152 D1:B067 -  -  -  -  #define SF_OVER 6 
  153 D1:B067 -  -  -  -  #define SF_RESERVED 5 
  154 D1:B067 -  -  -  -  #define SF_BRK 4
  155 D1:B067 -  -  -  -  #define SF_DEC 3
  156 D1:B067 -  -  -  -  #define SF_INT 2
  157 D1:B067 -  -  -  -  #define SF_ZERO 1
  158 D1:B067 -  -  -  -  #define SF_CARRY 0
  159 D1:B067 -  -  -  -  
  160 D1:B067 -  -  -  -  #macro ADDCYC(X)
  161 D1:B067                 #if (x < 1)
  162 D1:B067                     nop
  163 D1:B067                 #elif (X = 1)
  164 D1:B067                     inc iy
  165 D1:B067                 #else
  166 D1:B067                     lea iy,iy+X
  167 D1:B067                 #endif
  168 D1:B067             #endmacro
  169 D1:B067 -  -  -  -  
  170 D1:B067 -  -  -  -  ;
  171 D1:B067 -  -  -  -  ;
  172 D1:B067 -  -  -  -  ;
  173 D1:B067 -  -  -  -  #endif
  174 D1:B067 -  -  -  -  .list
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    3 D1:B067 -  -  -  -  
    4 D1:B067 -  -  -  -  ;Function list:
    5 D1:B067 -  -  -  -  ; fastCopy - Swaps drawing buffer to display what is currently written there.
    6 D1:B067 -  -  -  -  ; startGfx - Configures LCD to run in graphx mode. UNSAFE TO RUN MORE THAN ONCE
    7 D1:B067 -  -  -  -  ; stopGfx - Restores LCD configuration to TI-OS default.
    8 D1:B067 -  -  -  -  ; configureScreen - Swaps screen configuration betwen current and stored.
    9 D1:B067 -  -  -  -  ; setDefaultPalette - Sets default (XLIBC) color palette.
   10 D1:B067 -  -  -  -  ; clearTextBuf - no inputs. Sets text buffer to all spaces.
   11 D1:B067 -  -  -  -  ; printTextBuf - no inputs. Mirrors buffer to screen.
   12 D1:B067 -  -  -  -  ; setLineStart - A=xpos. Set xPos and linestart
   13 D1:B067 -  -  -  -  ; setCurLine - A=ypos. Set yPos.
   14 D1:B067 -  -  -  -  ; newLine - no inputs. sets linestart = xPos, increments yPos
   15 D1:B067 -  -  -  -  ; newPage - no inputs. sets linestart = xPos, yPos = 0
   16 D1:B067 -  -  -  -  ; printString - HL=address to string. destroys all.
   17 D1:B067 -  -  -  -  ; printBigFont - A=ASCII char to print at xPos,yPos. Advances xPos by 1.
   18 D1:B067 -  -  -  -  ; printSmallNumPair - A=0-255 to print at xPos,Ypos. Advances xPos by 1.
   19 D1:B067 -  -  -  -  ; calculateScreenPtr - Converts xPos,yPos into HL= screen buffer address.
   20 D1:B067 -  -  -  -  ; calculateScreenPtrDE - Converts E=xPos,D=yPos into HL= screen buffer address.
   21 D1:B067 -  -  -  -  ;
   22 D1:B067 -  -  -  -  ;
   23 D1:B067 -  -  -  -  ;
   24 D1:B067 -  -  -  -  ;
   25 D1:B067 -  -  -  -  ;
   26 D1:B067 -  -  -  -  ;
   27 D1:B067 -  -  -  -  ;
   28 D1:B067 -  -  -  -  
   29 D1:B067 -  -  -  -  
   30 D1:B067 -  -  -  -  
   31 D1:B067 -  -  -  -  
   32 D1:B067 -  -  -  -  ;-----------------------------------------------------------------------------
   33 D1:B067 -  -  -  -  ;Screen hardware interface stuff
   34 D1:B067 -  -  -  -  
   35 D1:B067 -  -  -  -  ;It ought to be called "bufSwap" but I just can't. I won't.
   36 D1:B067 -  -  -  -  fastCopy:
   37 D1:B067 11 00 00 D4     ld  de,screenBuf1
   38 D1:B06B 2A 10 00 E3     ld  hl,(mpLcdBase)
   39 D1:B06F 22 28 34 D0     ld  (curScreenBuf),hl
   40 D1:B073 B7 -  -  -      or  a,a
   41 D1:B074 ED 52 -  -      sbc hl,de
   42 D1:B076 EB -  -  -      ex  de,hl
   43 D1:B077 20 04 -  -      jr  nz,+_
   44 D1:B079 21 00 2C D5     ld  hl,screenBuf2
   45 D1:B07D 22 10 00 E3 _:  ld  (mpLcdBase),hl
   46 D1:B081 C9 -  -  -      ret
   47 D1:B082 -  -  -  -  
   48 D1:B082 -  -  -  -  stopGfx:
   49 D1:B082 CD 74 03 00     call _boot_ClearVRAM
   50 D1:B086 11 2D 09 00     ld  de,lcdNormalMode
   51 D1:B08A 01 00 00 D4     ld  bc,screenBuf1
   52 D1:B08E 18 0C -  -      jr  configureScreen
   53 D1:B090 -  -  -  -  
   54 D1:B090 -  -  -  -  startGfx:
   55 D1:B090 CD 74 03 00     call _boot_ClearVRAM
   56 D1:B094 11 27 39 01     ld  de,lcdWatermark+lcdIntFront+lcdPwr+lcdBgr+lcdBpp8
   57 D1:B098 01 00 00 D4     ld  bc,screenBuf1
   58 D1:B09C -  -  -  -  configureScreen:
   59 D1:B09C 21 10 00 E3     ld  hl,mpLcdBase
   60 D1:B0A0 ED 0F -  -      ld  (hl),bc
   61 D1:B0A2 2E 18 -  -      ld  L,lcdCtrl
   62 D1:B0A4 ED 1F -  -      ld  (hl),de
   63 D1:B0A6 2E 01 -  -      ld  L,lcdTiming0 + 1
   64 D1:B0A8 01 08 00 00     ld  bc,8
   65 D1:B0AC 11 DB B0 D1     ld  de,screenSettings
   66 D1:B0B0 1A -  -  -  _:  ld  a,(de)
   67 D1:B0B1 ED A0 -  -      ldi
   68 D1:B0B3 2B -  -  -      dec hl
   69 D1:B0B4 77 -  -  -      ld  (hl),a
   70 D1:B0B5 23 -  -  -      inc hl
   71 D1:B0B6 EA B0 B0 D1     jp  pe,-_
   72 D1:B0BA 21 00 2C D5     ld  hl,screenBuf2
   73 D1:B0BE 22 28 34 D0     ld  (curScreenBuf),hl
   74 D1:B0C2 -  -  -  -  ;Also copied from graphx
   75 D1:B0C2 -  -  -  -  setDefaultPalette:
   76 D1:B0C2 11 00 02 E3 	ld	de,mpLcdPalette	    ; address of mmio palette
   77 D1:B0C6 43 -  -  -  	ld	b,e			        ; b = 0
   78 D1:B0C7 78 -  -  -  _:	ld	a,b
   79 D1:B0C8 0F -  -  -  	rrca
   80 D1:B0C9 A8 -  -  -  	xor	a,b
   81 D1:B0CA E6 E0 -  -  	and	a,224
   82 D1:B0CC A8 -  -  -  	xor	a,b
   83 D1:B0CD 12 -  -  -  	ld	(de),a
   84 D1:B0CE 13 -  -  -  	inc	de
   85 D1:B0CF 78 -  -  -  	ld	a,b
   86 D1:B0D0 17 -  -  -  	rla
   87 D1:B0D1 17 -  -  -  	rla
   88 D1:B0D2 17 -  -  -  	rla
   89 D1:B0D3 78 -  -  -  	ld	a,b
   90 D1:B0D4 1F -  -  -  	rra
   91 D1:B0D5 12 -  -  -  	ld	(de),a
   92 D1:B0D6 13 -  -  -  	inc	de
   93 D1:B0D7 04 -  -  -  	inc	b
   94 D1:B0D8 20 ED -  -  	jr	nz,-_		    ; loop for 256 times to fill palette
   95 D1:B0DA C9 -  -  -  	ret
   96 D1:B0DB -  -  -  -  
   97 D1:B0DB -  -  -  -  screenSettings:
   98 D1:B0DB -  -  -  -  ;Copied from my old Falldown2 project, which was also copied from graphx.asm
   99 D1:B0DB -  -  -  -  ;	.db	14 shl 2			; PPL shl 2
  100 D1:B0DB 07 -  -  -  	.db	7					; HSW
  101 D1:B0DC 57 -  -  -  	.db	87					; HFP
  102 D1:B0DD 3F -  -  -  	.db	63					; HBP
  103 D1:B0DE 3F 01 -  -  	.dw	(0 >> 10)+319		; (VSW shl 10)+LPP
  104 D1:B0E0 B3 -  -  -  	.db	179					; VFP
  105 D1:B0E1 00 -  -  -  	.db	0					; VBP
  106 D1:B0E2 00 -  -  -  	.db	(0 >> 6)+(0 >> 5)+0	; (ACB shl 6)+(CLKSEL shl 5)+PCD_LO
  107 D1:B0E3 -  -  -  -  ;  H = ((PPL+1)*16)+(HSW+1)+(HFP+1)+(HBP+1) = 240+8+88+64 = 400
  108 D1:B0E3 -  -  -  -  ;  V = (LPP+1)+(VSW+1)+VFP+VBP = 320+1+179+0 = 500
  109 D1:B0E3 -  -  -  -  ; CC = H*V*PCD*2 = 400*500*2*2 = 800000
  110 D1:B0E3 -  -  -  -  ; Hz = 48000000/CC = 60
  111 D1:B0E3 -  -  -  -  
  112 D1:B0E3 -  -  -  -  
  113 D1:B0E3 -  -  -  -  ;-----------------------------------------------------------------------------
  114 D1:B0E3 -  -  -  -  ; Text Rendering
  115 D1:B0E3 -  -  -  -  
  116 D1:B0E3 -  -  -  -  clearTextBuf:
  117 D1:B0E3 21 00 58 D0     ld  hl,NAMETABLE1
  118 D1:B0E7 11 01 58 D0     ld  de,NAMETABLE1+1
  119 D1:B0EB 01 FF 03 00     ld  bc,1023
  120 D1:B0EF 36 20 -  -      ld  (hl),' '
  121 D1:B0F1 ED B0 -  -      ldir
  122 D1:B0F3 C9 -  -  -      ret
  123 D1:B0F4 -  -  -  -  
  124 D1:B0F4 -  -  -  -  printTextBuf:
  125 D1:B0F4 2A F6 31 D0     ld  hl,(xPos)
  126 D1:B0F8 22 28 B1 D1     ld  (printTextBuf_smcPosRecovery),hl
  127 D1:B0FC 21 00 58 D0     ld  hl,NAMETABLE1
  128 D1:B100 AF -  -  -      xor a,a
  129 D1:B101 32 F7 31 D0     ld  (yPos),a
  130 D1:B105 0E 1E -  -      ld  c,30
  131 D1:B107 3E 08 -  -  _:  ld  a,8
  132 D1:B109 32 F6 31 D0     ld  (xPos),a
  133 D1:B10D 06 20 -  -      ld  b,$20
  134 D1:B10F 7E -  -  -  _:  ld  a,(hl)
  135 D1:B110 23 -  -  -      inc hl
  136 D1:B111 C5 -  -  -      push bc
  137 D1:B112 E5 -  -  -          push hl
  138 D1:B113 CD 71 B1 D1             call printBigFont
  139 D1:B117 E1 -  -  -          pop hl
  140 D1:B118 C1 -  -  -      pop bc
  141 D1:B119 10 F4 -  -      djnz -_
  142 D1:B11B 3A F7 31 D0     ld  a,(yPos)
  143 D1:B11F 3C -  -  -      inc a
  144 D1:B120 32 F7 31 D0     ld  (yPos),a
  145 D1:B124 0D -  -  -      dec  c
  146 D1:B125 20 E0 -  -      jr  nz,--_
  147 D1:B127 -  -  -  -  printTextBuf_smcPosRecovery .equ $+1
  148 D1:B127 21 00 00 00     ld  hl,0
  149 D1:B12B 22 F6 31 D0     ld  (xPos),hl
  150 D1:B12F C9 -  -  -      ret
  151 D1:B130 -  -  -  -  
  152 D1:B130 -  -  -  -  ;A=column to start on
  153 D1:B130 -  -  -  -  setLineStart:
  154 D1:B130 32 F6 31 D0     ld  (xPos),a
  155 D1:B134 32 2B 34 D0     ld  (linestart),a
  156 D1:B138 C9 -  -  -      ret
  157 D1:B139 -  -  -  -  
  158 D1:B139 -  -  -  -  ;A=row to start on
  159 D1:B139 -  -  -  -  setCurLine:
  160 D1:B139 32 F7 31 D0     ld  (yPos),a
  161 D1:B13D C9 -  -  -      ret
  162 D1:B13E -  -  -  -  
  163 D1:B13E -  -  -  -  newPage:
  164 D1:B13E 3E FF -  -      ld  a,$FF
  165 D1:B140 32 F7 31 D0     ld  (yPos),a
  166 D1:B144 -  -  -  -  newLine:
  167 D1:B144 3A 2B 34 D0     ld  a,(linestart)
  168 D1:B148 32 F6 31 D0     ld  (xPos),a
  169 D1:B14C 3A F7 31 D0     ld  a,(yPos)
  170 D1:B150 3C -  -  -      inc a
  171 D1:B151 FE 1E -  -      cp  30
  172 D1:B153 38 01 -  -      jr  c,+_
  173 D1:B155 AF -  -  -      xor a,a
  174 D1:B156 32 F7 31 D0 _:  ld  (yPos),a
  175 D1:B15A C9 -  -  -      ret
  176 D1:B15B -  -  -  -  
  177 D1:B15B -  -  -  -      
  178 D1:B15B -  -  -  -      
  179 D1:B15B -  -  -  -  
  180 D1:B15B -  -  -  -  ;HL=address to string
  181 D1:B15B -  -  -  -  printString:
  182 D1:B15B 7E -  -  -      ld  a,(hl)
  183 D1:B15C 23 -  -  -      inc hl
  184 D1:B15D B7 -  -  -      or  a,a
  185 D1:B15E C8 -  -  -      ret z
  186 D1:B15F FE 0A -  -      cp  a,'\n'
  187 D1:B161 20 06 -  -      jr nz,+_
  188 D1:B163 CD 44 B1 D1     call newLine
  189 D1:B167 18 F2 -  -      jr  printString
  190 D1:B169 E5 -  -  -  _:  push hl
  191 D1:B16A CD 71 B1 D1         call printBigFont
  192 D1:B16E E1 -  -  -      pop hl
  193 D1:B16F 18 EA -  -      jr printString
  194 D1:B171 -  -  -  -  
  195 D1:B171 -  -  -  -  
  196 D1:B171 -  -  -  -  ;in: A=chrToPrint
  197 D1:B171 -  -  -  -  printBigFont:
  198 D1:B171 CD 06 B2 D1     call calculateScreenPtr
  199 D1:B175 EB -  -  -      ex  de,hl
  200 D1:B176 6F -  -  -      ld  L,a
  201 D1:B177 26 08 -  -      ld  H,8
  202 D1:B179 ED 6C -  -      mlt hl
  203 D1:B17B 01 20 B1 D1     ld  bc,graphx_textdata
  204 D1:B17F 09 -  -  -      add hl,bc
  205 D1:B180 EB -  -  -      ex  de,hl
  206 D1:B181 0E 08 -  -      ld  c,8
  207 D1:B183 06 08 -  -  _:  ld  b,8
  208 D1:B185 1A -  -  -      ld  a,(de)
  209 D1:B186 87 -  -  -  _:  add a,a
  210 D1:B187 -  -  -  -  fontBGColor_var .equ $+1
  211 D1:B187 36 00 -  -      ld  (hl),FONTBGCOLOR
  212 D1:B189 30 02 -  -      jr  nc,$+4
  213 D1:B18B -  -  -  -  fontFGColor_var .equ $+1
  214 D1:B18B 36 FF -  -      ld  (hl),FONTFGCOLOR
  215 D1:B18D 23 -  -  -      inc hl
  216 D1:B18E 10 F6 -  -      djnz -_
  217 D1:B190 79 -  -  -      ld  a,c
  218 D1:B191 01 38 01 00     ld  bc,320-8
  219 D1:B195 09 -  -  -      add hl,bc
  220 D1:B196 4F -  -  -      ld  c,a
  221 D1:B197 13 -  -  -      inc de
  222 D1:B198 0D -  -  -      dec c
  223 D1:B199 20 E8 -  -      jr  nz,--_
  224 D1:B19B 21 F6 31 D0     ld  hl,xPos
  225 D1:B19F 34 -  -  -      inc (hl)
  226 D1:B1A0 C9 -  -  -      ret
  227 D1:B1A1 -  -  -  -  
  228 D1:B1A1 -  -  -  -  ;A= 0-255 numeric value to display as hex
  229 D1:B1A1 -  -  -  -  printSmallNumPair:
  230 D1:B1A1 CD 06 B2 D1     call calculateScreenPtr
  231 D1:B1A5 F5 -  -  -      push af
  232 D1:B1A6 1F -  -  -          rra
  233 D1:B1A7 1F -  -  -          rra
  234 D1:B1A8 1F -  -  -          rra
  235 D1:B1A9 1F -  -  -          rra
  236 D1:B1AA CD B9 B1 D1         call +_
  237 D1:B1AE F1 -  -  -      pop af
  238 D1:B1AF CD B9 B1 D1     call +_
  239 D1:B1B3 21 F6 31 D0     ld  hl,xPos
  240 D1:B1B7 34 -  -  -      inc (hl)
  241 D1:B1B8 C9 -  -  -      ret
  242 D1:B1B9 E6 0F -  -  _:  and a,$0F
  243 D1:B1BB 01 40 01 00     ld  bc,320
  244 D1:B1BF 09 -  -  -      add hl,bc   ;drop height by one. These small chars are *short*
  245 D1:B1C0 EB -  -  -      ex  de,hl
  246 D1:B1C1 6F -  -  -      ld  L,a
  247 D1:B1C2 26 03 -  -      ld  H,3
  248 D1:B1C4 ED 6C -  -      mlt hl
  249 D1:B1C6 01 20 B5 D1     ld  bc,SmallHexFont
  250 D1:B1CA 09 -  -  -      add hl,bc
  251 D1:B1CB EB -  -  -      ex  de,hl
  252 D1:B1CC 0E 03 -  -      ld  c,3
  253 D1:B1CE 18 14 -  -      jr  printSmallNumPair_2ndHalf
  254 D1:B1D0 -  -  -  -  printSmallNumPair_1stHalf:
  255 D1:B1D0 1A -  -  -      ld  a,(de)
  256 D1:B1D1 06 04 -  -      ld  b,4
  257 D1:B1D3 87 -  -  -  _:  add a,a
  258 D1:B1D4 -  -  -  -  smallFontBGColor_var .equ $+1
  259 D1:B1D4 36 00 -  -      ld  (hl),FONTBGCOLOR
  260 D1:B1D6 30 02 -  -      jr  nc,$+4
  261 D1:B1D8 -  -  -  -  smallFontFGColor_var .equ $+1
  262 D1:B1D8 36 FF -  -      ld  (hl),FONTFGCOLOR
  263 D1:B1DA 23 -  -  -      inc hl
  264 D1:B1DB 10 F6 -  -      djnz -_
  265 D1:B1DD 79 -  -  -      ld  a,c
  266 D1:B1DE 01 3C 01 00     ld  bc,320-4
  267 D1:B1E2 09 -  -  -      add hl,bc
  268 D1:B1E3 4F -  -  -      ld  c,a
  269 D1:B1E4 -  -  -  -  printSmallNumPair_2ndHalf:
  270 D1:B1E4 1A -  -  -      ld  a,(de)
  271 D1:B1E5 07 -  -  -      rlca
  272 D1:B1E6 07 -  -  -      rlca
  273 D1:B1E7 07 -  -  -      rlca
  274 D1:B1E8 07 -  -  -      rlca
  275 D1:B1E9 06 04 -  -      ld  b,4
  276 D1:B1EB 87 -  -  -  _:  add a,a
  277 D1:B1EC 36 00 -  -      ld  (hl),FONTBGCOLOR
  278 D1:B1EE 30 02 -  -      jr  nc,$+4
  279 D1:B1F0 36 FF -  -      ld  (hl),FONTFGCOLOR
  280 D1:B1F2 23 -  -  -      inc hl
  281 D1:B1F3 10 F6 -  -      djnz -_
  282 D1:B1F5 13 -  -  -      inc de
  283 D1:B1F6 79 -  -  -      ld  a,c
  284 D1:B1F7 01 3C 01 00     ld  bc,320-4
  285 D1:B1FB 09 -  -  -      add hl,bc
  286 D1:B1FC 4F -  -  -      ld  c,a
  287 D1:B1FD 0D -  -  -      dec c
  288 D1:B1FE 20 D0 -  -      jr  nz,printSmallNumPair_1stHalf
  289 D1:B200 01 84 F8 FF     ld  bc,-(320*(1+5))+4
  290 D1:B204 09 -  -  -      add hl,bc
  291 D1:B205 C9 -  -  -      ret
  292 D1:B206 -  -  -  -  
  293 D1:B206 -  -  -  -  calculateScreenPtr:
  294 D1:B206 -  -  -  -      ;xcoord: x * 8 
  295 D1:B206 -  -  -  -      ;ycoord: 320 * 8 * y
  296 D1:B206 -  -  -  -      ;coord: (8x)+320*8y -> 8(x+320y)
  297 D1:B206 ED 5B F6 31 
              D0 -  -  -      ld  de,(xPos)
  298 D1:B20B -  -  -  -  calculateScreenPtrDE:
  299 D1:B20B 6A -  -  -      ld  L,d     ;yPos
  300 D1:B20C 26 A0 -  -      ld  h,160
  301 D1:B20E ED 6C -  -      mlt hl
  302 D1:B210 29 -  -  -      add hl,hl
  303 D1:B211 16 01 -  -      ld  d,1
  304 D1:B213 ED 5C -  -      mlt de      ;DE=E. Clears high bytes.
  305 D1:B215 19 -  -  -      add hl,de
  306 D1:B216 29 -  -  -      add hl,hl
  307 D1:B217 29 -  -  -      add hl,hl
  308 D1:B218 29 -  -  -      add hl,hl
  309 D1:B219 ED 5B 28 34 
              D0 -  -  -      ld  de,(curScreenBuf)
  310 D1:B21E 19 -  -  -      add hl,de
  311 D1:B21F C9 -  -  -      ret
  312 D1:B220 -  -  -  -  
  313 D1:B220 -  -  -  -  
  314 D1:B220 -  -  -  -  
  315 D1:B220 -  -  -  -  
  316 D1:B220 -  -  -  -  
  317 D1:B220 -  -  -  -  
  318 D1:B220 -  -  -  -  
  319 D1:B220 -  -  -  -  
  320 D1:B220 -  -  -  -  
  321 D1:B220 -  -  -  -  ;-----------------------------------------------------------------------------
  322 D1:B220 -  -  -  -  ; Data Section
  323 D1:B220 -  -  -  -  
  324 D1:B220 -  -  -  -  graphx_textdata		.EQU $-(8*' ')		;points to what would be start of ASCII
  325 D1:B220 00 00 00 00 
              00 00 00 00 .db	$00,$00,$00,$00,$00,$00,$00,$00 ;
  326 D1:B228 C0 C0 C0 C0 
              C0 00 C0 00 .db	$C0,$C0,$C0,$C0,$C0,$00,$C0,$00 ; !
  327 D1:B230 D8 D8 D8 00 
              00 00 00 00 .db	$D8,$D8,$D8,$00,$00,$00,$00,$00 ; "
  328 D1:B238 6C 6C FE 6C 
              FE 6C 6C 00 .db	$6C,$6C,$FE,$6C,$FE,$6C,$6C,$00 ; #
  329 D1:B240 18 7E C0 7C 
              06 FC 18 00 .db	$18,$7E,$C0,$7C,$06,$FC,$18,$00 ; $
  330 D1:B248 00 C6 CC 18 
              30 66 C6 00 .db	$00,$C6,$CC,$18,$30,$66,$C6,$00 ; %
  331 D1:B250 38 6C 38 76 
              DC CC 76 00 .db	$38,$6C,$38,$76,$DC,$CC,$76,$00 ; &
  332 D1:B258 30 30 60 00 
              00 00 00 00 .db	$30,$30,$60,$00,$00,$00,$00,$00 ; '
  333 D1:B260 30 60 C0 C0 
              C0 60 30 00 .db	$30,$60,$C0,$C0,$C0,$60,$30,$00 ; (
  334 D1:B268 C0 60 30 30 
              30 60 C0 00 .db	$C0,$60,$30,$30,$30,$60,$C0,$00 ; )
  335 D1:B270 00 66 3C FF 
              3C 66 00 00 .db	$00,$66,$3C,$FF,$3C,$66,$00,$00 ; *
  336 D1:B278 00 30 30 FC 
              FC 30 30 00 .db	$00,$30,$30,$FC,$FC,$30,$30,$00 ; +
  337 D1:B280 00 00 00 00 
              00 60 60 C0 .db	$00,$00,$00,$00,$00,$60,$60,$C0 ; ,
  338 D1:B288 00 00 00 FC 
              00 00 00 00 .db	$00,$00,$00,$FC,$00,$00,$00,$00 ; -
  339 D1:B290 00 00 00 00 
              00 C0 C0 00 .db	$00,$00,$00,$00,$00,$C0,$C0,$00 ; .
  340 D1:B298 06 0C 18 30 
              60 C0 80 00 .db	$06,$0C,$18,$30,$60,$C0,$80,$00 ; /
  341 D1:B2A0 7C CE DE F6 
              E6 C6 7C 00 .db	$7C,$CE,$DE,$F6,$E6,$C6,$7C,$00 ; 0
  342 D1:B2A8 30 70 30 30 
              30 30 FC 00 .db	$30,$70,$30,$30,$30,$30,$FC,$00 ; 1
  343 D1:B2B0 7C C6 06 7C 
              C0 C0 FE 00 .db	$7C,$C6,$06,$7C,$C0,$C0,$FE,$00 ; 2
  344 D1:B2B8 FC 06 06 3C 
              06 06 FC 00 .db	$FC,$06,$06,$3C,$06,$06,$FC,$00 ; 3
  345 D1:B2C0 0C CC CC CC 
              FE 0C 0C 00 .db	$0C,$CC,$CC,$CC,$FE,$0C,$0C,$00 ; 4
  346 D1:B2C8 FE C0 FC 06 
              06 C6 7C 00 .db	$FE,$C0,$FC,$06,$06,$C6,$7C,$00 ; 5
  347 D1:B2D0 7C C0 C0 FC 
              C6 C6 7C 00 .db	$7C,$C0,$C0,$FC,$C6,$C6,$7C,$00 ; 6
  348 D1:B2D8 FE 06 06 0C 
              18 30 30 00 .db	$FE,$06,$06,$0C,$18,$30,$30,$00 ; 7
  349 D1:B2E0 7C C6 C6 7C 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$7C,$C6,$C6,$7C,$00 ; 8
  350 D1:B2E8 7C C6 C6 7E 
              06 06 7C 00 .db	$7C,$C6,$C6,$7E,$06,$06,$7C,$00 ; 9
  351 D1:B2F0 00 C0 C0 00 
              00 C0 C0 00 .db	$00,$C0,$C0,$00,$00,$C0,$C0,$00 ; :
  352 D1:B2F8 00 60 60 00 
              00 60 60 C0 .db	$00,$60,$60,$00,$00,$60,$60,$C0 ; ;
  353 D1:B300 18 30 60 C0 
              60 30 18 00 .db	$18,$30,$60,$C0,$60,$30,$18,$00 ; <
  354 D1:B308 00 00 FC 00 
              FC 00 00 00 .db	$00,$00,$FC,$00,$FC,$00,$00,$00 ; =
  355 D1:B310 C0 60 30 18 
              30 60 C0 00 .db	$C0,$60,$30,$18,$30,$60,$C0,$00 ; >
  356 D1:B318 78 CC 18 30 
              30 00 30 00 .db	$78,$CC,$18,$30,$30,$00,$30,$00 ; ?
  357 D1:B320 7C C6 DE DE 
              DE C0 7E 00 .db	$7C,$C6,$DE,$DE,$DE,$C0,$7E,$00 ; @
  358 D1:B328 38 6C C6 C6 
              FE C6 C6 00 .db	$38,$6C,$C6,$C6,$FE,$C6,$C6,$00 ; A
  359 D1:B330 FC C6 C6 FC 
              C6 C6 FC 00 .db	$FC,$C6,$C6,$FC,$C6,$C6,$FC,$00 ; B
  360 D1:B338 7C C6 C0 C0 
              C0 C6 7C 00 .db	$7C,$C6,$C0,$C0,$C0,$C6,$7C,$00 ; C
  361 D1:B340 F8 CC C6 C6 
              C6 CC F8 00 .db	$F8,$CC,$C6,$C6,$C6,$CC,$F8,$00 ; D
  362 D1:B348 FE C0 C0 F8 
              C0 C0 FE 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$FE,$00 ; E
  363 D1:B350 FE C0 C0 F8 
              C0 C0 C0 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$C0,$00 ; F
  364 D1:B358 7C C6 C0 C0 
              CE C6 7C 00 .db	$7C,$C6,$C0,$C0,$CE,$C6,$7C,$00 ; G
  365 D1:B360 C6 C6 C6 FE 
              C6 C6 C6 00 .db	$C6,$C6,$C6,$FE,$C6,$C6,$C6,$00 ; H
  366 D1:B368 7E 18 18 18 
              18 18 7E 00 .db	$7E,$18,$18,$18,$18,$18,$7E,$00 ; I
  367 D1:B370 06 06 06 06 
              06 C6 7C 00 .db	$06,$06,$06,$06,$06,$C6,$7C,$00 ; J
  368 D1:B378 C6 CC D8 F0 
              D8 CC C6 00 .db	$C6,$CC,$D8,$F0,$D8,$CC,$C6,$00 ; K
  369 D1:B380 C0 C0 C0 C0 
              C0 C0 FE 00 .db	$C0,$C0,$C0,$C0,$C0,$C0,$FE,$00 ; L
  370 D1:B388 C6 EE FE FE 
              D6 C6 C6 00 .db	$C6,$EE,$FE,$FE,$D6,$C6,$C6,$00 ; M
  371 D1:B390 C6 E6 F6 DE 
              CE C6 C6 00 .db	$C6,$E6,$F6,$DE,$CE,$C6,$C6,$00 ; N
  372 D1:B398 7C C6 C6 C6 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$C6,$C6,$C6,$7C,$00 ; O
  373 D1:B3A0 FC C6 C6 FC 
              C0 C0 C0 00 .db	$FC,$C6,$C6,$FC,$C0,$C0,$C0,$00 ; P
  374 D1:B3A8 7C C6 C6 C6 
              D6 DE 7C 06 .db	$7C,$C6,$C6,$C6,$D6,$DE,$7C,$06 ; Q
  375 D1:B3B0 FC C6 C6 FC 
              D8 CC C6 00 .db	$FC,$C6,$C6,$FC,$D8,$CC,$C6,$00 ; R
  376 D1:B3B8 7C C6 C0 7C 
              06 C6 7C 00 .db	$7C,$C6,$C0,$7C,$06,$C6,$7C,$00 ; S
  377 D1:B3C0 FF 18 18 18 
              18 18 18 00 .db	$FF,$18,$18,$18,$18,$18,$18,$00 ; T
  378 D1:B3C8 C6 C6 C6 C6 
              C6 C6 FE 00 .db	$C6,$C6,$C6,$C6,$C6,$C6,$FE,$00 ; U
  379 D1:B3D0 C6 C6 C6 C6 
              C6 7C 38 00 .db	$C6,$C6,$C6,$C6,$C6,$7C,$38,$00 ; V
  380 D1:B3D8 C6 C6 C6 C6 
              D6 FE 6C 00 .db	$C6,$C6,$C6,$C6,$D6,$FE,$6C,$00 ; W
  381 D1:B3E0 C6 C6 6C 38 
              6C C6 C6 00 .db	$C6,$C6,$6C,$38,$6C,$C6,$C6,$00 ; X
  382 D1:B3E8 C6 C6 C6 7C 
              18 30 E0 00 .db	$C6,$C6,$C6,$7C,$18,$30,$E0,$00 ; Y
  383 D1:B3F0 FE 06 0C 18 
              30 60 FE 00 .db	$FE,$06,$0C,$18,$30,$60,$FE,$00 ; Z
  384 D1:B3F8 F0 C0 C0 C0 
              C0 C0 F0 00 .db	$F0,$C0,$C0,$C0,$C0,$C0,$F0,$00 ; [
  385 D1:B400 C0 60 30 18 
              0C 06 02 00 .db	$C0,$60,$30,$18,$0C,$06,$02,$00 ; \
  386 D1:B408 F0 30 30 30 
              30 30 F0 00 .db	$F0,$30,$30,$30,$30,$30,$F0,$00 ; ]
  387 D1:B410 10 38 6C C6 
              00 00 00 00 .db	$10,$38,$6C,$C6,$00,$00,$00,$00 ; ^
  388 D1:B418 00 00 00 00 
              00 00 00 FF .db	$00,$00,$00,$00,$00,$00,$00,$FF ; _
  389 D1:B420 C0 C0 60 00 
              00 00 00 00 .db	$C0,$C0,$60,$00,$00,$00,$00,$00 ; `
  390 D1:B428 00 00 7C 06 
              7E C6 7E 00 .db	$00,$00,$7C,$06,$7E,$C6,$7E,$00 ; a
  391 D1:B430 C0 C0 C0 FC 
              C6 C6 FC 00 .db	$C0,$C0,$C0,$FC,$C6,$C6,$FC,$00 ; b
  392 D1:B438 00 00 7C C6 
              C0 C6 7C 00 .db	$00,$00,$7C,$C6,$C0,$C6,$7C,$00 ; c
  393 D1:B440 06 06 06 7E 
              C6 C6 7E 00 .db	$06,$06,$06,$7E,$C6,$C6,$7E,$00 ; d
  394 D1:B448 00 00 7C C6 
              FE C0 7C 00 .db	$00,$00,$7C,$C6,$FE,$C0,$7C,$00 ; e
  395 D1:B450 1C 36 30 78 
              30 30 78 00 .db	$1C,$36,$30,$78,$30,$30,$78,$00 ; f
  396 D1:B458 00 00 7E C6 
              C6 7E 06 FC .db	$00,$00,$7E,$C6,$C6,$7E,$06,$FC ; g
  397 D1:B460 C0 C0 FC C6 
              C6 C6 C6 00 .db	$C0,$C0,$FC,$C6,$C6,$C6,$C6,$00 ; h
  398 D1:B468 18 00 38 18 
              18 18 3C 00 .db	$18,$00,$38,$18,$18,$18,$3C,$00 ; i
  399 D1:B470 06 00 06 06 
              06 06 C6 7C .db	$06,$00,$06,$06,$06,$06,$C6,$7C ; j
  400 D1:B478 C0 C0 CC D8 
              F8 CC C6 00 .db	$C0,$C0,$CC,$D8,$F8,$CC,$C6,$00 ; k
  401 D1:B480 38 18 18 18 
              18 18 3C 00 .db	$38,$18,$18,$18,$18,$18,$3C,$00 ; l
  402 D1:B488 00 00 CC FE 
              FE D6 D6 00 .db	$00,$00,$CC,$FE,$FE,$D6,$D6,$00 ; m
  403 D1:B490 00 00 FC C6 
              C6 C6 C6 00 .db	$00,$00,$FC,$C6,$C6,$C6,$C6,$00 ; n
  404 D1:B498 00 00 7C C6 
              C6 C6 7C 00 .db	$00,$00,$7C,$C6,$C6,$C6,$7C,$00 ; o
  405 D1:B4A0 00 00 FC C6 
              C6 FC C0 C0 .db	$00,$00,$FC,$C6,$C6,$FC,$C0,$C0 ; p
  406 D1:B4A8 00 00 7E C6 
              C6 7E 06 06 .db	$00,$00,$7E,$C6,$C6,$7E,$06,$06 ; q
  407 D1:B4B0 00 00 FC C6 
              C0 C0 C0 00 .db	$00,$00,$FC,$C6,$C0,$C0,$C0,$00 ; r
  408 D1:B4B8 00 00 7E C0 
              7C 06 FC 00 .db	$00,$00,$7E,$C0,$7C,$06,$FC,$00 ; s
  409 D1:B4C0 30 30 FC 30 
              30 30 1C 00 .db	$30,$30,$FC,$30,$30,$30,$1C,$00 ; t
  410 D1:B4C8 00 00 C6 C6 
              C6 C6 7E 00 .db	$00,$00,$C6,$C6,$C6,$C6,$7E,$00 ; u
  411 D1:B4D0 00 00 C6 C6 
              C6 7C 38 00 .db	$00,$00,$C6,$C6,$C6,$7C,$38,$00 ; v
  412 D1:B4D8 00 00 C6 C6 
              D6 FE 6C 00 .db	$00,$00,$C6,$C6,$D6,$FE,$6C,$00 ; w
  413 D1:B4E0 00 00 C6 6C 
              38 6C C6 00 .db	$00,$00,$C6,$6C,$38,$6C,$C6,$00 ; x
  414 D1:B4E8 00 00 C6 C6 
              C6 7E 06 FC .db	$00,$00,$C6,$C6,$C6,$7E,$06,$FC ; y
  415 D1:B4F0 00 00 FE 0C 
              38 60 FE 00 .db	$00,$00,$FE,$0C,$38,$60,$FE,$00 ; z
  416 D1:B4F8 1C 30 30 E0 
              30 30 1C 00 .db	$1C,$30,$30,$E0,$30,$30,$1C,$00 ; {
  417 D1:B500 C0 C0 C0 00 
              C0 C0 C0 00 .db	$C0,$C0,$C0,$00,$C0,$C0,$C0,$00 ; |
  418 D1:B508 E0 30 30 1C 
              30 30 E0 00 .db	$E0,$30,$30,$1C,$30,$30,$E0,$00 ; }
  419 D1:B510 76 DC 00 00 
              00 00 00 00 .db	$76,$DC,$00,$00,$00,$00,$00,$00 ; ~
  420 D1:B518 00 10 38 6C 
              C6 C6 FE 00 .db	$00,$10,$38,$6C,$C6,$C6,$FE,$00 ; △
  421 D1:B520 -  -  -  -  
  422 D1:B520 -  -  -  -  ;Copied from the Escheron: Twilight over Ragnoth project
  423 D1:B520 -  -  -  -  ;whose format was copied from a (then-)authorized source
  424 D1:B520 -  -  -  -  ;for DoorsCS (I think? The one for the 83+) by "Kerm Martian".
  425 D1:B520 -  -  -  -  SmallHexFont:
  426 D1:B520 4E AA AE -  .db $4E,$AA,$AE				;zero
  427 D1:B523 44 C4 4E -  .db $44,$C4,$4E				;one
  428 D1:B526 4C 24 8E -  .db $4C,$24,$8E				;two
  429 D1:B529 4C 24 2C -  .db $4C,$24,$2C				;three
  430 D1:B52C 48 AE 22 -  .db $48,$AE,$22				;four
  431 D1:B52F 4E 8C 2C -  .db $4E,$8C,$2C				;five
  432 D1:B532 46 8E AE -  .db $46,$8E,$AE				;six
  433 D1:B535 4E 24 88 -  .db $4E,$24,$88				;seven
  434 D1:B538 4E AE AE -  .db $4E,$AE,$AE				;eight
  435 D1:B53B 4E AE 2C -  .db $4E,$AE,$2C				;nine
  436 D1:B53E 44 AE AA -  .db $44,$AE,$AA				;A
  437 D1:B541 4C AC AC -  .db $4C,$AC,$AC				;B
  438 D1:B544 46 88 86 -  .db $46,$88,$86				;C
  439 D1:B547 4C AA AC -  .db $4C,$AA,$AC				;D
  440 D1:B54A 4E 8C 8E -  .db $4E,$8C,$8E				;E
  441 D1:B54D 4E 8C 88 -  .db $4E,$8C,$88				;F
  442 D1:B550 -  -  -  -  
  443 D1:B550 -  -  -  -  
  444 D1:B550 -  -  -  -  
Listing for file "main.z80"
  973 D1:B550 -  -  -  -  #include "coreint.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\coreint.z80"
    1 D1:B550 -  -  -  -  ; Code to handle interrup servicer. Note: This hinges on 
    2 D1:B550 -  -  -  -  ; PPU timing, so some of its initilization code will end up here too.
    3 D1:B550 -  -  -  -  ;
    4 D1:B550 -  -  -  -  
    5 D1:B550 -  -  -  -  
    6 D1:B550 -  -  -  -  
    7 D1:B550 -  -  -  -  int6502_updateIntCounter:
    8 D1:B550 21 60 34 D0     ld  hl,int_table_len
    9 D1:B554 7E -  -  -      ld  a,(hl)
   10 D1:B555 B7 -  -  -      or  a,a
   11 D1:B556 C8 -  -  -      ret z
   12 D1:B557 23 -  -  -      inc hl  ;advance to first pointer
   13 D1:B558 23 -  -  -      inc hl
   14 D1:B559 23 -  -  -      inc hl
   15 D1:B55A 23 -  -  -      inc hl  ;advanced to first time
   16 D1:B55B ED 27 -  -      ld  hl,(hl)
   17 D1:B55D -  -  -  -      ;neg hl
   18 D1:B55D DD 2F 1B -      ld  (ix+TEMP_MEMORY),hl
   19 D1:B560 DD 7E 1D -      ld  a,(ix+TEMP_MEMORY+2)
   20 D1:B563 2F -  -  -      cpl
   21 D1:B564 DD 77 1D -      ld  (ix+TEMP_MEMORY+2),a
   22 D1:B567 7D -  -  -      ld  a,l
   23 D1:B568 2F -  -  -      cpl
   24 D1:B569 6F -  -  -      ld  l,a
   25 D1:B56A 7C -  -  -      ld  a,h
   26 D1:B56B 2F -  -  -      cpl
   27 D1:B56C 67 -  -  -      ld  h,a
   28 D1:B56D 52 DD 2F 1B     ld.s (ix+TEMP_MEMORY),hl
   29 D1:B571 DD 27 1B -      ld  hl,(ix+TEMP_MEMORY)
   30 D1:B574 -  -  -  -      ;load to clock counter in "core.z80"
   31 D1:B574 22 07 B7 D1     ld  (i6502_interrupt_timer),hl
   32 D1:B578 C9 -  -  -      ret
   33 D1:B579 -  -  -  -  
   34 D1:B579 -  -  -  -  int6502_init:
   35 D1:B579 AF -  -  -      xor a,a
   36 D1:B57A 32 60 34 D0     ld  (int_table_len),a
   37 D1:B57E C9 -  -  -      ret
   38 D1:B57F -  -  -  -  
   39 D1:B57F -  -  -  -  ;DE=ISRToPush, BC=CallWhenThisClockIsPassed
   40 D1:B57F -  -  -  -  ;This routine is called in the ISR handler to both acknowledge the consumption
   41 D1:B57F -  -  -  -  ;of its turn at the ISR, and to (potentially) push another entry to the stack.
   42 D1:B57F -  -  -  -  ;This does not affect ths size of a table since this is a combined
   43 D1:B57F -  -  -  -  ;pop-and-insert operation
   44 D1:B57F -  -  -  -  int6502_pushISRAfterPop:
   45 D1:B57F DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
   46 D1:B584 DD 7E FF -      ld  a,(ix-1)        ;length of the table
   47 D1:B587 B7 -  -  -      or  a,a
   48 D1:B588 20 00 -  -      jr  nz,+_       ;Jump not taken: Push first and only entry
   49 D1:B58A DD 36 FF 01 _:  ld  (ix-1),1
   50 D1:B58E DD 1F 00 -      ld  (ix+0),de
   51 D1:B591 DD 0F 03 -      ld  (ix+3),bc
   52 D1:B594 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   53 D1:B599 C9 -  -  -      ret
   54 D1:B59A 3D -  -  -  _:  dec a
   55 D1:B59B 28 ED -  -      jr  z,--_       ;Jump taken: Replace first and only entry since we ate it.
   56 D1:B59D -  -  -  -      ;Loop steps:
   57 D1:B59D -  -  -  -      ;If not loopCounter or BC < ix[0].T:
   58 D1:B59D -  -  -  -      ;   ix[-1] = DE,BC
   59 D1:B59D -  -  -  -      ;   STOP.
   60 D1:B59D -  -  -  -      ;Else:
   61 D1:B59D -  -  -  -      ;   ix[-1] = ix[0]
   62 D1:B59D -  -  -  -      ;   ix += STRIDE
   63 D1:B59D -  -  -  -      ;   --loopCounter;
   64 D1:B59D -  -  -  -  int6502_pushISRAfterPop_loop:
   65 D1:B59D ED 32 06 -      lea ix,ix+INT_TABLE_STRIDE
   66 D1:B5A0 B7 -  -  -      or  a,a
   67 D1:B5A1 28 07 -  -      jr  z,+_
   68 D1:B5A3 DD 27 03 -      ld  hl,(ix+INT_CYCLE_OFFSET)
   69 D1:B5A6 ED 42 -  -      sbc hl,bc   ;C if ix[0]<BC
   70 D1:B5A8 30 0F -  -      jr  nc,++_
   71 D1:B5AA DD 1F 00 -  _:  ld  (ix+INT_ADDR_OFFSET),de
   72 D1:B5AD DD 0F 03 -      ld  (ix+INT_CYCLE_OFFSET),bc
   73 D1:B5B0 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   74 D1:B5B5 C3 50 B5 D1     jp  int6502_updateIntCounter
   75 D1:B5B9 DD 27 00 -  _:  ld  hl,(ix+INT_ADDR_OFFSET)
   76 D1:B5BC DD 2F FA -      ld  (ix+INT_ADDR_OFFSET-INT_TABLE_STRIDE),hl
   77 D1:B5BF DD 27 03 -      ld  hl,(ix+INT_CYCLE_OFFSET)
   78 D1:B5C2 DD 2F FD -      ld  (ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE),hl
   79 D1:B5C5 3D -  -  -      dec a
   80 D1:B5C6 18 D5 -  -      jr int6502_pushISRAfterPop_loop
   81 D1:B5C8 -  -  -  -      
   82 D1:B5C8 -  -  -  -  ;DE=ISRToPush, BC=CallWhenThisClockIsPassed
   83 D1:B5C8 -  -  -  -  ;This actually adds an entry to the stack.
   84 D1:B5C8 -  -  -  -  int6502_insertISA:
   85 D1:B5C8 DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
   86 D1:B5CD DD 7E FF -      ld  a,(ix-1)
   87 D1:B5D0 B7 -  -  -      or  a,a
   88 D1:B5D1 20 13 -  -      jr  nz,+_
   89 D1:B5D3 DD 36 FF 01     ld  (ix-1),1
   90 D1:B5D7 DD 1F 00 -      ld  (ix+0),de
   91 D1:B5DA DD 0F 03 -      ld  (ix+3),bc
   92 D1:B5DD DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   93 D1:B5E2 C3 50 B5 D1     jp  int6502_updateIntCounter
   94 D1:B5E6 FE 08 -  -  _:  cp  a,INT_TABLE_MAXLEN
   95 D1:B5E8 C8 -  -  -      ret z       ;do not attempt to insert if table is maxed out
   96 D1:B5E9 C5 -  -  -      push bc
   97 D1:B5EA 47 -  -  -          ld  b,a
   98 D1:B5EB 0E 06 -  -          ld  c,INT_TABLE_STRIDE
   99 D1:B5ED ED 4C -  -          mlt bc
  100 D1:B5EF DD 09 -  -          add ix,bc   ;at end of table
  101 D1:B5F1 C1 -  -  -      pop bc
  102 D1:B5F2 -  -  -  -      ;Loop details. IX points at entry after last:
  103 D1:B5F2 -  -  -  -      ;if not loopCtr or ix[-1].T < BC:
  104 D1:B5F2 -  -  -  -      ;   ix[0] = DE,BC , STOP.
  105 D1:B5F2 -  -  -  -      ;else:
  106 D1:B5F2 -  -  -  -      ;   ix[0] = ix[-1], ix-=STRIDE, loopCtr--
  107 D1:B5F2 -  -  -  -  int6502_insertISA_Loop:
  108 D1:B5F2 B7 -  -  -      or  a,a
  109 D1:B5F3 28 07 -  -      jr  z,+_
  110 D1:B5F5 DD 27 FD -      ld  hl,(ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE)
  111 D1:B5F8 ED 42 -  -      sbc hl,bc   ;C if ix[-1]<BC
  112 D1:B5FA 38 0F -  -      jr  c,++_
  113 D1:B5FC DD 1F 00 -  _:  ld  (ix+INT_ADDR_OFFSET),de
  114 D1:B5FF DD 0F 03 -      ld  (ix+INT_CYCLE_OFFSET),bc
  115 D1:B602 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
  116 D1:B607 C3 50 B5 D1     jp  int6502_updateIntCounter
  117 D1:B60B DD 27 FA -  _:  ld  hl,(ix+INT_ADDR_OFFSET-INT_TABLE_STRIDE)
  118 D1:B60E DD 2F 00 -      ld  (ix+INT_ADDR_OFFSET),hl
  119 D1:B611 DD 27 FD -      ld  hl,(ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE)
  120 D1:B614 DD 2F 03 -      ld  (ix+INT_CYCLE_OFFSET),hl
  121 D1:B617 ED 32 FA -      lea ix,ix-INT_TABLE_STRIDE
  122 D1:B61A 3D -  -  -      dec a
  123 D1:B61B 18 D5 -  -      jr int6502_insertISA_Loop
  124 D1:B61D -  -  -  -      
  125 D1:B61D -  -  -  -  
  126 D1:B61D -  -  -  -  int6502_removeTop:
  127 D1:B61D DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
  128 D1:B622 DD 7E FF -      ld  a,(ix-1)
  129 D1:B625 B7 -  -  -      or  a,a
  130 D1:B626 28 1B -  -      jr  z,+_
  131 D1:B628 DD 35 FF -      dec (ix-1)
  132 D1:B62B 4F -  -  -      ld  c,a
  133 D1:B62C 06 06 -  -      ld  b,INT_TABLE_STRIDE
  134 D1:B62E ED 4C -  -      mlt bc
  135 D1:B630 ED 32 06 -      lea ix,ix+INT_TABLE_STRIDE
  136 D1:B633 ED 12 FA -      lea de,ix-INT_TABLE_STRIDE
  137 D1:B636 ED 22 00 -      lea hl,ix+0
  138 D1:B639 ED B0 -  -      ldir
  139 D1:B63B D5 -  -  -      push de
  140 D1:B63C E1 -  -  -      pop hl
  141 D1:B63D 13 -  -  -      inc de
  142 D1:B63E 71 -  -  -      ld  (hl),c
  143 D1:B63F 0E 05 -  -      ld  c,INT_TABLE_STRIDE-1
  144 D1:B641 ED B0 -  -      ldir
  145 D1:B643 DD 21 80 32 
              D0 -  -  -  _:  ld ix,core_memory_ix
  146 D1:B648 C9 -  -  -      ret    
  147 D1:B649 -  -  -  -  
  148 D1:B649 -  -  -  -  
  149 D1:B649 -  -  -  -  
  150 D1:B649 -  -  -  -  
  151 D1:B649 -  -  -  -  
  152 D1:B649 -  -  -  -  
  153 D1:B649 -  -  -  -  
  154 D1:B649 -  -  -  -  
  155 D1:B649 -  -  -  -  
  156 D1:B649 -  -  -  -  
  157 D1:B649 -  -  -  -  
  158 D1:B649 -  -  -  -  
  159 D1:B649 -  -  -  -  
  160 D1:B649 -  -  -  -  
Listing for file "main.z80"
  974 D1:B649 -  -  -  -  #include "core.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    1 D1:B649 -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    2 D1:B649 -  -  -  -  
    3 D1:B649 -  -  -  -  ;TODO: DEFINE MEMORY ACCESS MACROS. ONE OR MORE FOR READ AND WRITE.
    4 D1:B649 -  -  -  -  ;FIGURE OUT HOW TO GET BOTH HIGH AND LOW BYTE OF ORIGINAL ADDRESS
    5 D1:B649 -  -  -  -  ;AND PERFORM ALTERNATE ACTIONS BASED ON WHAT HARDWARE WAS ACCESSED.
    6 D1:B649 -  -  -  -  ;NOTE: PATTERN SHOWS THAT D=MSB, C=LSB OF 6502 ADDRESS. USE THIS.
    7 D1:B649 -  -  -  -  ;
    8 D1:B649 -  -  -  -  ;THESE MACROS ARE PLACEHOLDERS. CHANGE THEM LATER ON TO REFLECT ACTUAL
    9 D1:B649 -  -  -  -  ;HARDWARE SHENANIGANS.
   10 D1:B649 -  -  -  -  ;
   11 D1:B649 -  -  -  -  ;NOTE: WRITE ACCESSES RELY ON KNOWING WHAT DATA TO WRITE. CAN'T STORE THAT IN A
   12 D1:B649 -  -  -  -  ;      SINCE WE NEED TO DO CONDITIONING. REGISTER B IS UNUSED SO LET'S USE THAT.
   13 D1:B649 -  -  -  -  ;
   14 D1:B649 -  -  -  -  #define READ_ACCESS call mapper0_read
   15 D1:B649 -  -  -  -  #define WRITE_ACCESS call mapper0_write
   16 D1:B649 -  -  -  -  ;Later, put in actual test. Z if not triggered, NZ if triggered. This
   17 D1:B649 -  -  -  -  ;alters the behavior of the BRK instruction.
   18 D1:B649 -  -  -  -  #define WAS_NMI_TRIGGERED bit 0,(ix+NMI_TRIGGERED)
   19 D1:B649 -  -  -  -  
   20 D1:B649 -  -  -  -  #define OPRFLG_C res SF_CARRY,b \ jr nc,$+4 \ set SF_CARRY,b
   21 D1:B649 -  -  -  -  #define OPRFLG_V res SF_OVER,b \ jp po,$+6 \ set SF_OVER,b
   22 D1:B649 -  -  -  -  #define OPRFLG_Z res SF_ZERO,b \ jr nz,$+4 \ set SF_ZERO,b
   23 D1:B649 -  -  -  -  #define OPRFLG_N res SF_NEG,b \ jr nc,$+4 \ set SF_NEG,b
   24 D1:B649 -  -  -  -  
   25 D1:B649 -  -  -  -  #define FLAGS_ZN ld b,(ix+REGSR) \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   26 D1:B649 -  -  -  -  #define FLAGS_CZN ld b,(ix+REGSR) \ OPRFLG_C \ rlc a  \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   27 D1:B649 -  -  -  -  #define FLAGS_VCZN ld b,(ix+REGSR) \ OPRFLG_V \ OPRFLG_C \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   28 D1:B649 -  -  -  -  
   29 D1:B649 -  -  -  -  
   30 D1:B649 -  -  -  -  ;Modify later to include provisions for hardware i/o based on page
   31 D1:B649 -  -  -  -  #define HW_READ(src_reg) ld a,(src_reg)
   32 D1:B649 -  -  -  -  #define HW_WRITE(dst_reg) ld (dst_reg),a
   33 D1:B649 -  -  -  -  
   34 D1:B649 -  -  -  -  
   35 D1:B649 -  -  -  -  
   36 D1:B649 -  -  -  -  
   37 D1:B649 -  -  -  -  ;=============================================================================
   38 D1:B649 -  -  -  -  ;=============================================================================
   39 D1:B649 -  -  -  -  ;=============================================================================
   40 D1:B649 -  -  -  -  ;=============================================================================
   41 D1:B649 -  -  -  -  ;You should have set up the mappings already. This is because
   42 D1:B649 -  -  -  -  ;mappings are program-dependant. Only $0000-$3FFF will be mapped in here
   43 D1:B649 -  -  -  -  ;more or less because I don't expect anything else to map that.
   44 D1:B649 -  -  -  -  i6502Init:
   45 D1:B649 -  -  -  -      ;
   46 D1:B649 -  -  -  -      ; At this point, you may need to randomize 2048 bytes at main_ram
   47 D1:B649 -  -  -  -      ;
   48 D1:B649 21 00 38 D0     ld  hl,main_ram
   49 D1:B64D 01 08 20 00     ld  bc,$002008
   50 D1:B651 1E 00 -  -      ld  e,$00
   51 D1:B653 CD 53 B7 D1     call i6502_map_pages
   52 D1:B657 21 00 33 D0     ld  hl,scrap_mapping
   53 D1:B65B 01 01 20 00     ld  bc,$002001
   54 D1:B65F 1E 20 -  -      ld  e,$20
   55 D1:B661 CD 53 B7 D1     call i6502_map_pages
   56 D1:B665 CD 3A B7 D1     call i6502_load_instruction_set
   57 D1:B669 -  -  -  -      ;
   58 D1:B669 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   59 D1:B66E FD 21 02 00 
              00 -  -  -      ld  iy,2    ;8 cycle startup. Hooking into inst6502_jsr for init
   60 D1:B673 ED 22 00 -      lea hl,ix
   61 D1:B676 ED 12 01 -      lea de,ix+1
   62 D1:B679 01 7E 00 00     ld  bc,126
   63 D1:B67D 36 00 -  -      ld  (hl),$00
   64 D1:B67F ED B0 -  -      ldir
   65 D1:B681 -  -  -  -      ;
   66 D1:B681 21 00 00 00     ld  hl,0
   67 D1:B685 39 -  -  -      add hl,sp
   68 D1:B686 DD 2F 11 -      ld  (ix+CORE_STACK_BASE),hl
   69 D1:B689 -  -  -  -  
   70 D1:B689 -  -  -  -      ;Note: SP may need initialization. So does SR for interrupts. Or somesuch.
   71 D1:B689 21 F4 4B D0     ld  hl,PAGETABLE+(255*BASETABLE_STRIDE)
   72 D1:B68D ED 27 -  -      ld  hl,(hl)
   73 D1:B68F 11 FC 00 00     ld  de,$0000FC
   74 D1:B693 19 -  -  -      add hl,de
   75 D1:B694 -  -  -  -      ;
   76 D1:B694 -  -  -  -      ;jp inst6502_jsr
   77 D1:B694 -  -  -  -      ;Manual loading below. Uncomment "jp inst6502_jsr" to return to original.
   78 D1:B694 -  -  -  -      ;Settings below is to run nestest CPU-only test. The reset vector above
   79 D1:B694 -  -  -  -      ;requires a working PPU (and probably APU) to be present.
   80 D1:B694 DD 36 04 24     ld  (ix+REGSR),$24      ;because that's what the log wants?
   81 D1:B698 21 00 C0 00     ld  hl,$C000
   82 D1:B69C DD 2F 05 -      ld  (ix+REGPC),HL
   83 D1:B69F FD 21 07 00 
              00 -  -  -      ld  iy,7
   84 D1:B6A4 DD 36 03 FD     ld  (ix+REGSP),$FD
   85 D1:B6A8 -  -  -  -      ;debug stuff
   86 D1:B6A8 3A 30 00 F2     ld  a,($F20030)
   87 D1:B6AC CB C7 -  -      set 0,a ;turn on timer 1
   88 D1:B6AE 32 30 00 F2     ld  ($F20030),a
   89 D1:B6B2 -  -  -  -  
   90 D1:B6B2 -  -  -  -  i6502RetryFirstLoad:    ;reentrant from ISR handler
   91 D1:B6B2 52 DD 17 05     ld.s de,(ix+REGPC)
   92 D1:B6B6 1B -  -  -      dec de
   93 D1:B6B7 18 04 -  -      jr +_
   94 D1:B6B9 -  -  -  -  i6502FirstLoad:
   95 D1:B6B9 52 DD 17 05     ld.s de,(ix+REGPC)
   96 D1:B6BD 7B -  -  -  _:  ld  a,e
   97 D1:B6BE 1E 0C -  -      ld  e,BASETABLE_STRIDE
   98 D1:B6C0 ED 5C -  -      mlt de
   99 D1:B6C2 21 00 40 D0     ld  hl,PAGETABLE
  100 D1:B6C6 19 -  -  -      add hl,de
  101 D1:B6C7 ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
  102 D1:B6C9 16 00 -  -      ld  d,0
  103 D1:B6CB 5F -  -  -      ld  e,a
  104 D1:B6CC 19 -  -  -      add hl,de       ;resolve final address
  105 D1:B6CD 18 19 -  -      jr  i6502FinishLoad
  106 D1:B6CF -  -  -  -  i6502NextLoad:
  107 D1:B6CF 23 -  -  -      inc hl
  108 D1:B6D0 1C -  -  -      inc e
  109 D1:B6D1 20 15 -  -      jr  nz,i6502FinishLoad
  110 D1:B6D3 DD 56 06 -      ld  d,(ix+REGPC+1)
  111 D1:B6D6 14 -  -  -      inc d
  112 D1:B6D7 52 DD 1F 05     ld.s (ix+REGPC),de
  113 D1:B6DB 1E 0C -  -      ld  e,BASETABLE_STRIDE
  114 D1:B6DD ED 5C -  -      mlt de
  115 D1:B6DF 21 00 40 D0     ld  hl,PAGETABLE
  116 D1:B6E3 19 -  -  -      add hl,de
  117 D1:B6E4 ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
  118 D1:B6E6 1E 00 -  -      ld  e,0         ;PCL known to be zero at this point.
  119 D1:B6E8 -  -  -  -  i6502FinishLoad:
  120 D1:B6E8 7E -  -  -      ld  a,(hl)
  121 D1:B6E9 -  -  -  -  
  122 D1:B6E9 -  -  -  -  #ifdef COREDEBUG
  123 D1:B6E9                 ld  (ix+CURRENT_OPCODES+0),a
  124 D1:B6E9                 ld  (ix+REGPC+0),e
  125 D1:B6E9             #endif
  126 D1:B6E9 23 -  -  -      inc hl
  127 D1:B6EA 1C -  -  -      inc e
  128 D1:B6EB 20 15 -  -      jr  nz,i6502PrepNextPage
  129 D1:B6ED DD 56 06 -      ld  d,(ix+REGPC+1)
  130 D1:B6F0 14 -  -  -      inc d
  131 D1:B6F1 52 DD 1F 05     ld.s (ix+REGPC),de
  132 D1:B6F5 1E 0C -  -      ld  e,BASETABLE_STRIDE
  133 D1:B6F7 ED 5C -  -      mlt de
  134 D1:B6F9 21 00 40 D0     ld  hl,PAGETABLE
  135 D1:B6FD 19 -  -  -      add hl,de
  136 D1:B6FE ED 27 -  -      ld  hl,(hl)
  137 D1:B700 1E 00 -  -      ld  e,0
  138 D1:B702 -  -  -  -  i6502PrepNextPage:
  139 D1:B702 -  -  -  -  #ifdef COREDEBUG
  140 D1:B702                 push af
  141 D1:B702                     ld  a,(hl)
  142 D1:B702                     ld  (ix+CURRENT_OPCODES+1),a
  143 D1:B702                     push de
  144 D1:B702                         push hl
  145 D1:B702                             push ix
  146 D1:B702                                 inc hl
  147 D1:B702                                 inc e
  148 D1:B702                                 jr  nz,+_
  149 D1:B702                                 ld  d,(ix+REGPC+1)
  150 D1:B702                                 inc d
  151 D1:B702                                 ld  e,BASETABLE_STRIDE
  152 D1:B702                                 mlt de
  153 D1:B702                                 ld  hl,PAGETABLE
  154 D1:B702                                 add hl,de
  155 D1:B702                                 ld  hl,(hl)
  156 D1:B702             _:                  ld  a,(hl)
  157 D1:B702                                 ld  (ix+CURRENT_OPCODES+2),a
  158 D1:B702                                 lea hl,ix
  159 D1:B702                                 ld  de,core_memory_ix
  160 D1:B702                                 or  a,a
  161 D1:B702                                 sbc hl,de
  162 D1:B702                                 jr  nz,$    ;halt program if IX is not core_memory_ix
  163 D1:B702                                 ;jr $
  164 D1:B702                                 push iy
  165 D1:B702                                     call dbg_printLine
  166 D1:B702                                 pop iy
  167 D1:B702                                 ld  a,(ix+CORE_ERROR_LEVEL)
  168 D1:B702                                 or  a,a
  169 D1:B702                                 jr  z,+_
  170 D1:B702                                 ld  hl,(ix+CORE_STACK_BASE)
  171 D1:B702                                 ld  sp,hl
  172 D1:B702                                 ret
  173 D1:B702             _:                  ld  iy,(ix+CYCLES_CURRENT)  ;remove when done with timings
  174 D1:B702                                 lea hl,iy+0
  175 D1:B702                                 ld  de,DEBUG_STEP_START_CYCLE
  176 D1:B702                                 or  a,a
  177 D1:B702                                 sbc hl,de
  178 D1:B702                                 call nc,waituntilnewkeypress
  179 D1:B702                             pop ix
  180 D1:B702                         pop hl
  181 D1:B702                     pop de
  182 D1:B702                 pop af
  183 D1:B702             #endif
  184 D1:B702 E5 -  -  -      push hl
  185 D1:B703 ED 23 00 -          lea hl,iy
  186 D1:B706 -  -  -  -  i6502_interrupt_timer   .equ $+1
  187 D1:B706 01 4C 98 FF         ld  bc,-26548
  188 D1:B70A 09 -  -  -          add hl,bc
  189 D1:B70B 38 1A -  -          jr  c,i6502_take_interrupt
  190 D1:B70D -  -  -  -  i6502_continue_instruction_fetch:
  191 D1:B70D 67 -  -  -          ld  h,a
  192 D1:B70E 2E 0C -  -          ld  l,BASETABLE_STRIDE
  193 D1:B710 ED 6C -  -          mlt hl
  194 D1:B712 01 04 40 D0         ld  bc,JUMPTABLE
  195 D1:B716 09 -  -  -          add hl,bc
  196 D1:B717 ED 27 -  -          ld  hl,(hl)     ;jumptable
  197 D1:B719 E3 -  -  -          ex  (sp),hl     ;exch with exec addr, jumpto-via-ret
  198 D1:B71A C9 -  -  -      ret
  199 D1:B71B -  -  -  -  
  200 D1:B71B -  -  -  -  i6502_no_interrupts:
  201 D1:B71B -  -  -  -          ;This is what happens when you let the core run without setting
  202 D1:B71B -  -  -  -          ;up interrupts. It'll be up to the hardware access subroutines
  203 D1:B71B -  -  -  -          ;to configure interrupts from now on. See "coreint.z80" for
  204 D1:B71B -  -  -  -          ;more information
  205 D1:B71B 21 00 00 80         ld  hl,$800000  ;INT_MIN. Prevent retry for as long as possible.
  206 D1:B71F 22 27 B7 D1         ld  (i6502_take_interrupt),hl
  207 D1:B723 C3 0D B7 D1         jp  i6502_continue_instruction_fetch
  208 D1:B727 -  -  -  -  
  209 D1:B727 -  -  -  -  i6502_take_interrupt:
  210 D1:B727 67 -  -  -          ld  h,a
  211 D1:B728 3A 60 34 D0         ld  a,(int_table_len)
  212 D1:B72C B7 -  -  -          or  a,a
  213 D1:B72D 7C -  -  -          ld  a,h
  214 D1:B72E 28 EB -  -          jr  z,i6502_no_interrupts
  215 D1:B730 E1 -  -  -      pop hl
  216 D1:B731 AF -  -  -      xor a,a
  217 D1:B732 DD 73 05 -      ld  (ix+REGPC+0),e
  218 D1:B735 2A 61 34 D0     ld  hl,(INT_TABLE)  ;Find the routines in "coreint.z80" that handles
  219 D1:B739 E9 -  -  -      jp  (hl)            ;and maintains the interrupt table being used here.
  220 D1:B73A -  -  -  -  
  221 D1:B73A -  -  -  -  
  222 D1:B73A -  -  -  -  ;Instructions one byte wide returns to the main loop via:
  223 D1:B73A -  -  -  -  ;   JP i6502FinishLoad
  224 D1:B73A -  -  -  -  ;Those with parameters have HL at the address in quetion, and is expected to
  225 D1:B73A -  -  -  -  ;advance HL and E at the end of the instruction. You return to main loop via:
  226 D1:B73A -  -  -  -  ;   JP i6502NextLoad
  227 D1:B73A -  -  -  -  ;Unless you manually advance the pointer to the next instruction.
  228 D1:B73A -  -  -  -  ;You really shouldn't but if you must do that, then also do this:
  229 D1:B73A -  -  -  -  ;   JP i6502FinishLoad
  230 D1:B73A -  -  -  -  ;Remember that register E is very important; it tells you about page boundaries.
  231 D1:B73A -  -  -  -  
  232 D1:B73A -  -  -  -  
  233 D1:B73A -  -  -  -  ;-----------------------------------------------------------------------------
  234 D1:B73A -  -  -  -  ;-----------------------------------------------------------------------------
  235 D1:B73A -  -  -  -  ;-----------------------------------------------------------------------------
  236 D1:B73A -  -  -  -  
  237 D1:B73A -  -  -  -  ;  ***  *   * ****  ****   ***  *   * ***** ***** **  * *****  ***  
  238 D1:B73A -  -  -  -  ; *     *   * *   * *   * *   * *   *   *     *   **  * *     *     
  239 D1:B73A -  -  -  -  ;  ***  *   * ****  ****  *   * *   *   *     *   * * * ***    ***  
  240 D1:B73A -  -  -  -  ;     * *   * *   * *   * *   * *   *   *     *   *  ** *         * 
  241 D1:B73A -  -  -  -  ;  ***   ***  ****  *   *  ***   ***    *   ***** *  ** *****  ***  
  242 D1:B73A -  -  -  -  
  243 D1:B73A -  -  -  -  ;-----------------------------------------------------------------------------
  244 D1:B73A -  -  -  -  
  245 D1:B73A -  -  -  -  i6502_load_instruction_set:
  246 D1:B73A DD 21 04 40 
              D0 -  -  -      ld  ix,JUMPTABLE
  247 D1:B73F 21 AC DA D1     ld  hl,inst6502_instruction_set
  248 D1:B743 06 00 -  -      ld  b,0
  249 D1:B745 ED 17 -  -  _:  ld  de,(hl)
  250 D1:B747 DD 1F 00 -      ld  (ix+0),de
  251 D1:B74A 23 -  -  -      inc hl
  252 D1:B74B 23 -  -  -      inc hl
  253 D1:B74C 23 -  -  -      inc hl
  254 D1:B74D ED 32 0C -      lea ix,ix+BASETABLE_STRIDE
  255 D1:B750 10 F3 -  -      djnz -_
  256 D1:B752 C9 -  -  -      ret
  257 D1:B753 -  -  -  -  
  258 D1:B753 -  -  -  -  ;HL=Base_ez80_address, C=Numpages_in_map, B=numpages_in_space, E=starting_page
  259 D1:B753 -  -  -  -  ;Example: To map and mirror 2KB RAM at $D03800 inside first 8KB of 6502 space
  260 D1:B753 -  -  -  -  ;HL=$D03800, C=$08, B=$20, E=$00
  261 D1:B753 -  -  -  -  ;Note: B should be a power of two and evenly divisible by C.
  262 D1:B753 -  -  -  -  i6502_map_pages:
  263 D1:B753 16 0C -  -      ld  d,BASETABLE_STRIDE
  264 D1:B755 ED 5C -  -      mlt de
  265 D1:B757 DD 21 00 40 
              D0 -  -  -      ld  ix,PAGETABLE
  266 D1:B75C DD 19 -  -      add ix,de
  267 D1:B75E 78 -  -  -      ld  a,b     ;A = main counter for total number of pages in mapping space
  268 D1:B75F 11 00 01 00     ld  de,256
  269 D1:B763 E5 -  -  -      push hl
  270 D1:B764 FD E1 -  -      pop iy
  271 D1:B766 41 -  -  -  _:  ld  b,c     ;looping for number of pages to map
  272 D1:B767 DD 2F 00 -  _:  ld  (ix+0),hl
  273 D1:B76A 19 -  -  -      add hl,de                   ;next page z80
  274 D1:B76B ED 32 0C -      lea ix,ix+BASETABLE_STRIDE  ;next page entry
  275 D1:B76E 3D -  -  -      dec a
  276 D1:B76F C8 -  -  -      ret z
  277 D1:B770 10 F5 -  -      djnz -_
  278 D1:B772 ED 23 00 -      lea hl,iy+0     ;start z80 pages over again for mirroring
  279 D1:B775 18 EF -  -      jr --_
  280 D1:B777 -  -  -  -  
  281 D1:B777 -  -  -  -  
  282 D1:B777 -  -  -  -  subroutine6502_abs_split_start:
  283 D1:B777 4E -  -  -      ld  c,(hl)
  284 D1:B778 23 -  -  -      inc hl
  285 D1:B779 1C -  -  -      inc e
  286 D1:B77A 20 15 -  -      jr nz,+_
  287 D1:B77C DD 56 06 -      ld  d,(ix+REGPC+1)
  288 D1:B77F 14 -  -  -      inc d
  289 D1:B780 52 DD 1F 05     ld.s (ix+REGPC),de
  290 D1:B784 1E 0C -  -      ld  e,BASETABLE_STRIDE
  291 D1:B786 ED 5C -  -      mlt de
  292 D1:B788 21 00 40 D0     ld  hl,PAGETABLE
  293 D1:B78C 19 -  -  -      add hl,de
  294 D1:B78D ED 27 -  -      ld  hl,(hl) ;
  295 D1:B78F 1E 00 -  -      ld  e,0
  296 D1:B791 46 -  -  -  _:  ld  b,(hl)
  297 D1:B792 C9 -  -  -      ret
  298 D1:B793 -  -  -  -  
  299 D1:B793 -  -  -  -  #define PUSH_ABSXSPLIT call subroutine6502_absx_split_start
  300 D1:B793 -  -  -  -  #define PUSH_ABSXSPLIT_NODEP call subroutine6502_absx_ss_noDep
  301 D1:B793 -  -  -  -  #define PUSH_ABSYSPLIT call subroutine6502_absy_split_start
  302 D1:B793 -  -  -  -  #define PUSH_ABSYSPLIT_NODEP call subroutine6502_absy_ss_noDep
  303 D1:B793 -  -  -  -  
  304 D1:B793 -  -  -  -  subroutine6502_absy_split_start:
  305 D1:B793 DD 4E 02 -      ld  c,(ix+REGY)
  306 D1:B796 18 03 -  -      jr +_
  307 D1:B798 -  -  -  -  
  308 D1:B798 -  -  -  -  subroutine6502_absx_split_start:
  309 D1:B798 DD 4E 01 -      ld  c,(ix+REGX)
  310 D1:B79B 7E -  -  -  _:  ld  a,(hl)
  311 D1:B79C 23 -  -  -      inc hl
  312 D1:B79D 1C -  -  -      inc e
  313 D1:B79E 20 15 -  -      jr nz,+_
  314 D1:B7A0 DD 56 06 -      ld  d,(ix+REGPC+1)
  315 D1:B7A3 14 -  -  -      inc d
  316 D1:B7A4 52 DD 1F 05     ld.s (ix+REGPC),de
  317 D1:B7A8 1E 0C -  -      ld  e,BASETABLE_STRIDE
  318 D1:B7AA ED 5C -  -      mlt de
  319 D1:B7AC 21 00 40 D0     ld  hl,PAGETABLE
  320 D1:B7B0 19 -  -  -      add hl,de
  321 D1:B7B1 ED 27 -  -      ld  hl,(hl) ;
  322 D1:B7B3 1E 00 -  -      ld  e,0
  323 D1:B7B5 46 -  -  -  _:  ld  b,(hl)
  324 D1:B7B6 E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  325 D1:B7B7 E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  326 D1:B7B8 81 -  -  -          add a,c
  327 D1:B7B9 30 03 -  -          jr  nc,+_
  328 D1:B7BB FD 23 -  -          ADDCYC(1)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  329 D1:B7BD 04 -  -  -          inc b
  330 D1:B7BE 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  331 D1:B7BF 0E 0C -  -          ld  c,BASETABLE_STRIDE
  332 D1:B7C1 ED 4C -  -          mlt bc
  333 D1:B7C3 21 00 40 D0         ld  hl,PAGETABLE
  334 D1:B7C7 09 -  -  -          add hl,bc
  335 D1:B7C8 ED 27 -  -          ld  hl,(hl)
  336 D1:B7CA 06 00 -  -          ld  b,0
  337 D1:B7CC 4F -  -  -          ld  c,a
  338 D1:B7CD 09 -  -  -          add hl,bc
  339 D1:B7CE C9 -  -  -      ret
  340 D1:B7CF -  -  -  -      
  341 D1:B7CF -  -  -  -  subroutine6502_absy_ss_noDep:
  342 D1:B7CF DD 4E 02 -      ld  c,(ix+REGY)
  343 D1:B7D2 18 03 -  -      jr +_
  344 D1:B7D4 -  -  -  -  subroutine6502_absx_ss_noDep:
  345 D1:B7D4 DD 4E 01 -      ld  c,(ix+REGX)
  346 D1:B7D7 7E -  -  -  _:  ld  a,(hl)
  347 D1:B7D8 23 -  -  -      inc hl
  348 D1:B7D9 1C -  -  -      inc e
  349 D1:B7DA 20 15 -  -      jr nz,+_
  350 D1:B7DC DD 56 06 -      ld  d,(ix+REGPC+1)
  351 D1:B7DF 14 -  -  -      inc d
  352 D1:B7E0 52 DD 1F 05     ld.s (ix+REGPC),de
  353 D1:B7E4 1E 0C -  -      ld  e,BASETABLE_STRIDE
  354 D1:B7E6 ED 5C -  -      mlt de
  355 D1:B7E8 21 00 40 D0     ld  hl,PAGETABLE
  356 D1:B7EC 19 -  -  -      add hl,de
  357 D1:B7ED ED 27 -  -      ld  hl,(hl) ;
  358 D1:B7EF 1E 00 -  -      ld  e,0
  359 D1:B7F1 46 -  -  -  _:  ld  b,(hl)
  360 D1:B7F2 E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  361 D1:B7F3 E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  362 D1:B7F4 81 -  -  -          add a,c
  363 D1:B7F5 30 01 -  -          jr  nc,+_
  364 D1:B7F7 04 -  -  -          inc b
  365 D1:B7F8 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  366 D1:B7F9 0E 0C -  -          ld  c,BASETABLE_STRIDE
  367 D1:B7FB ED 4C -  -          mlt bc
  368 D1:B7FD 21 00 40 D0         ld  hl,PAGETABLE
  369 D1:B801 09 -  -  -          add hl,bc
  370 D1:B802 ED 27 -  -          ld  hl,(hl)
  371 D1:B804 06 00 -  -          ld  b,0
  372 D1:B806 4F -  -  -          ld  c,a
  373 D1:B807 09 -  -  -          add hl,bc
  374 D1:B808 C9 -  -  -      ret
  375 D1:B809 -  -  -  -  
  376 D1:B809 -  -  -  -  
  377 D1:B809 -  -  -  -  
  378 D1:B809 -  -  -  -  
  379 D1:B809 -  -  -  -  
  380 D1:B809 -  -  -  -  
  381 D1:B809 -  -  -  -  
  382 D1:B809 -  -  -  -  subroutine6502_adc_combined_end:
  383 D1:B809 DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  384 D1:B80C 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  385 D1:B80D DD 7E 00 -      ld  a,(ix+REGA)
  386 D1:B810 89 -  -  -      adc a,c
  387 D1:B811 DD 77 00 -      ld  (ix+REGA),a
  388 D1:B814 DD 46 04 CB 
              B0 E2 1F B8 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  389 D1:B836 C3 CF B6 D1     jp i6502NextLoad
  390 D1:B83A -  -  -  -  
  391 D1:B83A -  -  -  -  subroutine6502_sbc_combined_end:
  392 D1:B83A DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  393 D1:B83D 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  394 D1:B83E DD 7E 00 -      ld  a,(ix+REGA)
  395 D1:B841 3F -  -  -      ccf
  396 D1:B842 99 -  -  -      sbc a,c
  397 D1:B843 3F -  -  -      ccf
  398 D1:B844 DD 77 00 -      ld  (ix+REGA),a
  399 D1:B847 DD 46 04 CB 
              B0 E2 52 B8 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  400 D1:B869 C3 CF B6 D1     jp i6502NextLoad
  401 D1:B86D -  -  -  -  
  402 D1:B86D -  -  -  -  subroutine6502_cmp_combined_end:
  403 D1:B86D DD 7E 00 -      ld  a,(ix+REGA)
  404 D1:B870 90 -  -  -      sub a,b
  405 D1:B871 3F -  -  -      ccf     ;because the 6502 is strange like that.
  406 D1:B872 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  407 D1:B88C C3 CF B6 D1     jp i6502NextLoad
  408 D1:B890 -  -  -  -  
  409 D1:B890 -  -  -  -  subroutine6502_take_branch:
  410 D1:B890 FD 23 -  -      ADDCYC(1)
  411 D1:B892 7E -  -  -      ld  a,(hl)  ;offset byte
  412 D1:B893 6F -  -  -      ld  L,a
  413 D1:B894 87 -  -  -      add a,a
  414 D1:B895 9F -  -  -      sbc a,a
  415 D1:B896 67 -  -  -      ld  H,a     ;sign-extending offset byte
  416 D1:B897 DD 56 06 -      ld  d,(ix+REGPC+1)
  417 D1:B89A 13 -  -  -      inc de
  418 D1:B89B 52 19 -  -      add.s hl,de
  419 D1:B89D 7C -  -  -      ld  a,h
  420 D1:B89E BA -  -  -      cp  d       ;is high byte the same?
  421 D1:B89F 28 02 -  -      jr  z,+_    ;if so, do not add another clock
  422 D1:B8A1 FD 23 -  -      ADDCYC(1)
  423 D1:B8A3 52 DD 2F 05 _:  ld.s (ix+REGPC),hl
  424 D1:B8A7 C3 B9 B6 D1     jp  i6502FirstLoad
  425 D1:B8AB -  -  -  -  
  426 D1:B8AB -  -  -  -  
  427 D1:B8AB -  -  -  -  ;-----------------------------------------------------------------------------
  428 D1:B8AB -  -  -  -  
  429 D1:B8AB -  -  -  -  ; *** **  *  *** ***** ***  *   *  *** ***** *** ***  **  *     ***  ***** *****                                                
  430 D1:B8AB -  -  -  -  ;  *  **  * *      *   *  * *   * *      *    * *   * **  *    *     *       *                   
  431 D1:B8AB -  -  -  -  ;  *  * * *  ***   *   ***  *   * *      *    * *   * * * *     ***  ***     *                          
  432 D1:B8AB -  -  -  -  ;  *  *  **     *  *   *  * *   * *      *    * *   * *  **        * *       *                   
  433 D1:B8AB -  -  -  -  ; *** *  **  ***   *   *  *  ***   ***   *   *** ***  *  **     ***  *****   *                                 
  434 D1:B8AB -  -  -  -  
  435 D1:B8AB -  -  -  -  ;-----------------------------------------------------------------------------
  436 D1:B8AB -  -  -  -  
  437 D1:B8AB -  -  -  -  ;-----------------------------------------------------------------------------
  438 D1:B8AB -  -  -  -  ;-----------------------------------------------------------------------------
  439 D1:B8AB -  -  -  -  ;-----------------------------------------------------------------------------
  440 D1:B8AB -  -  -  -  ;Instructions by type: Transfer Instructions
  441 D1:B8AB -  -  -  -  ;LDA - Load Accumulator with Memory
  442 D1:B8AB -  -  -  -  ;    M -> A
  443 D1:B8AB -  -  -  -  ;    N	Z	C	I	D	V
  444 D1:B8AB -  -  -  -  ;    +	+	-	-	-	-
  445 D1:B8AB -  -  -  -  
  446 D1:B8AB -  -  -  -  ;addressing	assembler	opc	bytes	cycles
  447 D1:B8AB -  -  -  -  ;immediate	LDA #oper	A9	2	2
  448 D1:B8AB -  -  -  -  inst6502_lda_imm:
  449 D1:B8AB 7E -  -  -      ld  a,(hl)
  450 D1:B8AC DD 77 00 -      ld  (ix+REGA),a
  451 D1:B8AF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  452 D1:B8C3 ED 33 02 -      ADDCYC(2)
  453 D1:B8C6 C3 CF B6 D1     jp i6502NextLoad
  454 D1:B8CA -  -  -  -  
  455 D1:B8CA -  -  -  -  ;zeropage	LDA oper	A5	2	3
  456 D1:B8CA -  -  -  -  inst6502_lda_zp:
  457 D1:B8CA 7E -  -  -      ld  a,(hl)
  458 D1:B8CB 01 00 38 D0     ld  bc,ZEROPAGE
  459 D1:B8CF 81 -  -  -      add a,c
  460 D1:B8D0 4F -  -  -      ld  c,a
  461 D1:B8D1 0A -  -  -      ld  a,(bc)
  462 D1:B8D2 DD 77 00 -      ld  (ix+REGA),a
  463 D1:B8D5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  464 D1:B8E9 ED 33 03 -      ADDCYC(3)
  465 D1:B8EC C3 CF B6 D1     jp i6502NextLoad
  466 D1:B8F0 -  -  -  -  
  467 D1:B8F0 -  -  -  -  ;zeropage,X	LDA oper,X	B5	2	4 
  468 D1:B8F0 -  -  -  -  inst6502_lda_zpx:
  469 D1:B8F0 7E -  -  -      ld  a,(hl)
  470 D1:B8F1 01 00 38 D0     ld  bc,ZEROPAGE
  471 D1:B8F5 81 -  -  -      add a,c
  472 D1:B8F6 DD 86 01 -      add a,(ix+REGX)
  473 D1:B8F9 4F -  -  -      ld  c,a
  474 D1:B8FA 0A -  -  -      ld  a,(bc)
  475 D1:B8FB DD 77 00 -      ld  (ix+REGA),a
  476 D1:B8FE DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  477 D1:B912 ED 33 04 -      ADDCYC(4)
  478 D1:B915 C3 CF B6 D1     jp i6502NextLoad
  479 D1:B919 -  -  -  -  
  480 D1:B919 -  -  -  -  ;absolute	LDA oper	AD	3	4
  481 D1:B919 -  -  -  -  inst6502_lda_abs:
  482 D1:B919 CD 77 B7 D1     call subroutine6502_abs_split_start
  483 D1:B91D E5 -  -  -      push hl
  484 D1:B91E 50 -  -  -          ld  d,b
  485 D1:B91F 79 -  -  -          ld  a,c
  486 D1:B920 0E 0C -  -          ld  c,BASETABLE_STRIDE
  487 D1:B922 ED 4C -  -          mlt bc
  488 D1:B924 21 00 40 D0         ld  hl,PAGETABLE
  489 D1:B928 09 -  -  -          add hl,bc
  490 D1:B929 ED 27 -  -          ld  hl,(hl)
  491 D1:B92B 06 00 -  -          ld  b,0
  492 D1:B92D 4F -  -  -          ld  c,a
  493 D1:B92E 09 -  -  -          add hl,bc   ;full address
  494 D1:B92F CD 40 AE D1         READ_ACCESS
  495 D1:B933 DD 77 00 -          ld (ix+REGA),a
  496 D1:B936 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  497 D1:B94A ED 33 04 -          ADDCYC(4)
  498 D1:B94D E1 -  -  -      pop hl
  499 D1:B94E C3 CF B6 D1     jp i6502NextLoad
  500 D1:B952 -  -  -  -  
  501 D1:B952 -  -  -  -  ;absolute,X	LDA oper,X	BD	3	4* 
  502 D1:B952 -  -  -  -  inst6502_lda_absx:
  503 D1:B952 ED 33 04 -      ADDCYC(4)
  504 D1:B955 CD 98 B7 D1     PUSH_ABSXSPLIT
  505 D1:B959 CD 40 AE D1         READ_ACCESS
  506 D1:B95D DD 77 00 -          ld (ix+REGA),a
  507 D1:B960 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  508 D1:B974 E1 -  -  -      pop hl
  509 D1:B975 C3 CF B6 D1     jp i6502NextLoad
  510 D1:B979 -  -  -  -  
  511 D1:B979 -  -  -  -  ;absolute,Y	LDA oper,Y	B9	3	4* 
  512 D1:B979 -  -  -  -  inst6502_lda_absy:
  513 D1:B979 ED 33 04 -      ADDCYC(4)
  514 D1:B97C CD 93 B7 D1     PUSH_ABSYSPLIT
  515 D1:B980 CD 40 AE D1         READ_ACCESS
  516 D1:B984 DD 77 00 -          ld (ix+REGA),a
  517 D1:B987 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  518 D1:B99B E1 -  -  -      pop hl
  519 D1:B99C C3 CF B6 D1     jp i6502NextLoad
  520 D1:B9A0 -  -  -  -  
  521 D1:B9A0 -  -  -  -  ;(indirect,X)	LDA (oper,X)	A1	2	6
  522 D1:B9A0 -  -  -  -  inst6502_lda_indx:
  523 D1:B9A0 E5 -  -  -      push hl
  524 D1:B9A1 7E -  -  -          ld  a,(hl)
  525 D1:B9A2 21 00 38 D0         ld  hl,ZEROPAGE
  526 D1:B9A6 85 -  -  -          add a,L
  527 D1:B9A7 DD 86 01 -          add a,(ix+REGX)
  528 D1:B9AA 6F -  -  -          ld  L,a
  529 D1:B9AB 7E -  -  -          ld  a,(hl)
  530 D1:B9AC 2C -  -  -          inc L
  531 D1:B9AD 56 -  -  -          ld  d,(hl)
  532 D1:B9AE 42 -  -  -          ld  b,d
  533 D1:B9AF 0E 0C -  -          ld  c,BASETABLE_STRIDE
  534 D1:B9B1 ED 4C -  -          mlt bc
  535 D1:B9B3 21 00 40 D0         ld  hl,PAGETABLE
  536 D1:B9B7 09 -  -  -          add hl,bc
  537 D1:B9B8 ED 27 -  -          ld  hl,(hl)
  538 D1:B9BA 06 00 -  -          ld  b,0
  539 D1:B9BC 4F -  -  -          ld  c,a
  540 D1:B9BD 09 -  -  -          add hl,bc
  541 D1:B9BE CD 40 AE D1         READ_ACCESS
  542 D1:B9C2 DD 77 00 -          ld (ix+REGA),a
  543 D1:B9C5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  544 D1:B9D9 ED 33 06 -          ADDCYC(6)
  545 D1:B9DC E1 -  -  -      pop hl
  546 D1:B9DD C3 CF B6 D1     jp i6502NextLoad
  547 D1:B9E1 -  -  -  -  
  548 D1:B9E1 -  -  -  -  ;(indirect),Y	LDA (oper),Y	B1	2	5*
  549 D1:B9E1 -  -  -  -  inst6502_lda_indy:
  550 D1:B9E1 E5 -  -  -      push hl
  551 D1:B9E2 7E -  -  -          ld  a,(hl)
  552 D1:B9E3 21 00 38 D0         ld  hl,ZEROPAGE
  553 D1:B9E7 85 -  -  -          add a,L
  554 D1:B9E8 6F -  -  -          ld  L,a
  555 D1:B9E9 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  556 D1:B9EA 2C -  -  -          inc L
  557 D1:B9EB DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  558 D1:B9EE 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  559 D1:B9EF 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  560 D1:B9F1 FD 23 -  -          ADDCYC(1)
  561 D1:B9F3 24 -  -  -          inc h
  562 D1:B9F4 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  563 D1:B9F5 2E 0C -  -          ld  L,BASETABLE_STRIDE
  564 D1:B9F7 ED 6C -  -          mlt hl          ;23.
  565 D1:B9F9 01 00 40 D0         ld  bc,PAGETABLE
  566 D1:B9FD 09 -  -  -          add hl,bc
  567 D1:B9FE ED 27 -  -          ld  hl,(hl)     ;address get.
  568 D1:BA00 01 00 00 00         ld  bc,0
  569 D1:BA04 4F -  -  -          ld  c,a
  570 D1:BA05 09 -  -  -          add hl,bc       ;Full address get.
  571 D1:BA06 CD 40 AE D1         READ_ACCESS
  572 D1:BA0A DD 77 00 -          ld  (ix+REGA),a
  573 D1:BA0D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  574 D1:BA21 ED 33 05 -          ADDCYC(5)
  575 D1:BA24 E1 -  -  -      pop hl
  576 D1:BA25 C3 CF B6 D1     jp i6502NextLoad
  577 D1:BA29 -  -  -  -  
  578 D1:BA29 -  -  -  -  ;-----------------------------------------------------------------------------
  579 D1:BA29 -  -  -  -  ;LDX - Load Index X with Memory
  580 D1:BA29 -  -  -  -  ;    M -> X
  581 D1:BA29 -  -  -  -  ;    N	Z	C	I	D	V
  582 D1:BA29 -  -  -  -  ;    +	+	-	-	-	-
  583 D1:BA29 -  -  -  -  
  584 D1:BA29 -  -  -  -  ;immediate	LDX #oper	A2	2	2  
  585 D1:BA29 -  -  -  -  inst6502_ldx_imm:
  586 D1:BA29 7E -  -  -      ld  a,(hl)
  587 D1:BA2A DD 77 01 -      ld  (ix+REGX),a
  588 D1:BA2D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  589 D1:BA41 ED 33 02 -      ADDCYC(2)
  590 D1:BA44 C3 CF B6 D1     jp i6502NextLoad
  591 D1:BA48 -  -  -  -  
  592 D1:BA48 -  -  -  -  ;zeropage	LDX oper	A6	2	3 
  593 D1:BA48 -  -  -  -  inst6502_ldx_zp:
  594 D1:BA48 7E -  -  -      ld  a,(hl)
  595 D1:BA49 01 00 38 D0     ld  bc,ZEROPAGE
  596 D1:BA4D 81 -  -  -      add a,c
  597 D1:BA4E 4F -  -  -      ld  c,a
  598 D1:BA4F 0A -  -  -      ld  a,(bc)
  599 D1:BA50 DD 77 01 -      ld  (ix+REGX),a
  600 D1:BA53 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  601 D1:BA67 ED 33 03 -      ADDCYC(3)
  602 D1:BA6A C3 CF B6 D1     jp i6502NextLoad
  603 D1:BA6E -  -  -  -  
  604 D1:BA6E -  -  -  -  ;zeropage,Y	LDX oper,Y	B6	2	4  
  605 D1:BA6E -  -  -  -  inst6502_ldx_zpy:
  606 D1:BA6E 7E -  -  -      ld  a,(hl)
  607 D1:BA6F 01 00 38 D0     ld  bc,ZEROPAGE
  608 D1:BA73 81 -  -  -      add a,c
  609 D1:BA74 DD 86 02 -      add a,(ix+REGY)
  610 D1:BA77 4F -  -  -      ld  c,a
  611 D1:BA78 0A -  -  -      ld  a,(bc)
  612 D1:BA79 DD 77 01 -      ld  (ix+REGX),a
  613 D1:BA7C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  614 D1:BA90 ED 33 04 -      ADDCYC(4)
  615 D1:BA93 C3 CF B6 D1     jp i6502NextLoad
  616 D1:BA97 -  -  -  -  
  617 D1:BA97 -  -  -  -  ;absolute	LDX oper	AE	3	4  
  618 D1:BA97 -  -  -  -  inst6502_ldx_abs:
  619 D1:BA97 CD 77 B7 D1     call subroutine6502_abs_split_start
  620 D1:BA9B E5 -  -  -      push hl
  621 D1:BA9C 50 -  -  -          ld  d,b
  622 D1:BA9D 79 -  -  -          ld  a,c
  623 D1:BA9E 0E 0C -  -          ld  c,BASETABLE_STRIDE
  624 D1:BAA0 ED 4C -  -          mlt bc
  625 D1:BAA2 21 00 40 D0         ld  hl,PAGETABLE
  626 D1:BAA6 09 -  -  -          add hl,bc
  627 D1:BAA7 ED 27 -  -          ld  hl,(hl)
  628 D1:BAA9 06 00 -  -          ld  b,0
  629 D1:BAAB 4F -  -  -          ld  c,a
  630 D1:BAAC 09 -  -  -          add hl,bc   ;full address
  631 D1:BAAD CD 40 AE D1         READ_ACCESS
  632 D1:BAB1 DD 77 01 -          ld (ix+REGX),a
  633 D1:BAB4 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  634 D1:BAC8 ED 33 04 -          ADDCYC(4)
  635 D1:BACB E1 -  -  -      pop hl
  636 D1:BACC C3 CF B6 D1     jp i6502NextLoad
  637 D1:BAD0 -  -  -  -  
  638 D1:BAD0 -  -  -  -  ;absolute,Y	LDX oper,Y	BE	3	4* 
  639 D1:BAD0 -  -  -  -  inst6502_ldx_absy:
  640 D1:BAD0 ED 33 04 -      ADDCYC(4)
  641 D1:BAD3 CD 93 B7 D1     PUSH_ABSYSPLIT
  642 D1:BAD7 CD 40 AE D1         READ_ACCESS
  643 D1:BADB DD 77 01 -          ld (ix+REGX),a
  644 D1:BADE DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  645 D1:BAF2 E1 -  -  -      pop hl
  646 D1:BAF3 C3 CF B6 D1     jp i6502NextLoad
  647 D1:BAF7 -  -  -  -  
  648 D1:BAF7 -  -  -  -  ;-----------------------------------------------------------------------------
  649 D1:BAF7 -  -  -  -  ;LDY -  Load Index Y with Memory
  650 D1:BAF7 -  -  -  -  ;    M -> Y
  651 D1:BAF7 -  -  -  -  ;    N	Z	C	I	D	V
  652 D1:BAF7 -  -  -  -  ;    +	+	-	-	-	-
  653 D1:BAF7 -  -  -  -  
  654 D1:BAF7 -  -  -  -  ;immediate	LDY #oper	A0	2	2  
  655 D1:BAF7 -  -  -  -  inst6502_ldy_imm:
  656 D1:BAF7 7E -  -  -      ld  a,(hl)
  657 D1:BAF8 DD 77 02 -      ld  (ix+REGY),a
  658 D1:BAFB DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  659 D1:BB0F ED 33 02 -      ADDCYC(2)
  660 D1:BB12 C3 CF B6 D1     jp i6502NextLoad
  661 D1:BB16 -  -  -  -  
  662 D1:BB16 -  -  -  -  ;zeropage	LDY oper	A4	2	3  
  663 D1:BB16 -  -  -  -  inst6502_ldy_zp:
  664 D1:BB16 7E -  -  -      ld  a,(hl)
  665 D1:BB17 01 00 38 D0     ld  bc,ZEROPAGE
  666 D1:BB1B 81 -  -  -      add a,c
  667 D1:BB1C 4F -  -  -      ld  c,a
  668 D1:BB1D 0A -  -  -      ld  a,(bc)
  669 D1:BB1E DD 77 02 -      ld  (ix+REGY),a
  670 D1:BB21 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  671 D1:BB35 ED 33 03 -      ADDCYC(3)
  672 D1:BB38 C3 CF B6 D1     jp i6502NextLoad
  673 D1:BB3C -  -  -  -  
  674 D1:BB3C -  -  -  -  ;zeropage,X	LDY oper,X	B4	2	4  
  675 D1:BB3C -  -  -  -  inst6502_ldy_zpx:
  676 D1:BB3C 7E -  -  -      ld  a,(hl)
  677 D1:BB3D 01 00 38 D0     ld  bc,ZEROPAGE
  678 D1:BB41 81 -  -  -      add a,c
  679 D1:BB42 DD 86 01 -      add a,(ix+REGX)
  680 D1:BB45 4F -  -  -      ld  c,a
  681 D1:BB46 0A -  -  -      ld  a,(bc)
  682 D1:BB47 DD 77 02 -      ld  (ix+REGY),a
  683 D1:BB4A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  684 D1:BB5E ED 33 04 -      ADDCYC(4)
  685 D1:BB61 C3 CF B6 D1     jp i6502NextLoad
  686 D1:BB65 -  -  -  -  
  687 D1:BB65 -  -  -  -  ;absolute	LDY oper	AC	3	4  
  688 D1:BB65 -  -  -  -  inst6502_ldy_abs:
  689 D1:BB65 CD 77 B7 D1     call subroutine6502_abs_split_start
  690 D1:BB69 E5 -  -  -      push hl
  691 D1:BB6A 50 -  -  -          ld  d,b
  692 D1:BB6B 79 -  -  -          ld  a,c
  693 D1:BB6C 0E 0C -  -          ld  c,BASETABLE_STRIDE
  694 D1:BB6E ED 4C -  -          mlt bc
  695 D1:BB70 21 00 40 D0         ld  hl,PAGETABLE
  696 D1:BB74 09 -  -  -          add hl,bc
  697 D1:BB75 ED 27 -  -          ld  hl,(hl)
  698 D1:BB77 06 00 -  -          ld  b,0
  699 D1:BB79 4F -  -  -          ld  c,a
  700 D1:BB7A 09 -  -  -          add hl,bc   ;full address
  701 D1:BB7B CD 40 AE D1         READ_ACCESS
  702 D1:BB7F DD 77 02 -          ld (ix+REGY),a
  703 D1:BB82 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  704 D1:BB96 ED 33 04 -          ADDCYC(4)
  705 D1:BB99 E1 -  -  -      pop hl
  706 D1:BB9A C3 CF B6 D1     jp i6502NextLoad
  707 D1:BB9E -  -  -  -  
  708 D1:BB9E -  -  -  -  ;absolute,X	LDY oper,X	BC	3	4* 
  709 D1:BB9E -  -  -  -  inst6502_ldy_absx:
  710 D1:BB9E ED 33 04 -      ADDCYC(4)
  711 D1:BBA1 CD 98 B7 D1     PUSH_ABSXSPLIT
  712 D1:BBA5 CD 40 AE D1         READ_ACCESS
  713 D1:BBA9 DD 77 02 -          ld (ix+REGY),a
  714 D1:BBAC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  715 D1:BBC0 E1 -  -  -      pop hl
  716 D1:BBC1 C3 CF B6 D1     jp i6502NextLoad
  717 D1:BBC5 -  -  -  -  
  718 D1:BBC5 -  -  -  -  ;-----------------------------------------------------------------------------
  719 D1:BBC5 -  -  -  -  ;STA - Store Accumulator in Memory
  720 D1:BBC5 -  -  -  -  ;    A -> M
  721 D1:BBC5 -  -  -  -  ;    N	Z	C	I	D	V
  722 D1:BBC5 -  -  -  -  ;    -	-	-	-	-	-
  723 D1:BBC5 -  -  -  -  
  724 D1:BBC5 -  -  -  -  ;zeropage	STA oper	85	2	3  
  725 D1:BBC5 -  -  -  -  inst6502_sta_zp:
  726 D1:BBC5 7E -  -  -      ld  a,(hl)
  727 D1:BBC6 01 00 38 D0     ld  bc,ZEROPAGE
  728 D1:BBCA 81 -  -  -      add a,c
  729 D1:BBCB 4F -  -  -      ld  c,a
  730 D1:BBCC DD 7E 00 -      ld  a,(ix+REGA)
  731 D1:BBCF 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  732 D1:BBD0 ED 33 03 -      ADDCYC(3)
  733 D1:BBD3 C3 CF B6 D1     jp i6502NextLoad
  734 D1:BBD7 -  -  -  -  
  735 D1:BBD7 -  -  -  -  ;zeropage,X	STA oper,X	95	2	4  
  736 D1:BBD7 -  -  -  -  inst6502_sta_zpx:
  737 D1:BBD7 7E -  -  -      ld  a,(hl)
  738 D1:BBD8 01 00 38 D0     ld  bc,ZEROPAGE
  739 D1:BBDC 81 -  -  -      add a,c
  740 D1:BBDD DD 86 01 -      add a,(ix+REGX)
  741 D1:BBE0 4F -  -  -      ld  c,a
  742 D1:BBE1 DD 7E 00 -      ld  a,(ix+REGA)
  743 D1:BBE4 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  744 D1:BBE5 ED 33 04 -      ADDCYC(4)
  745 D1:BBE8 C3 CF B6 D1     jp i6502NextLoad
  746 D1:BBEC -  -  -  -  
  747 D1:BBEC -  -  -  -  ;absolute	STA oper	8D	3	4
  748 D1:BBEC -  -  -  -  inst6502_sta_abs:
  749 D1:BBEC CD 77 B7 D1     call subroutine6502_abs_split_start
  750 D1:BBF0 E5 -  -  -      push hl
  751 D1:BBF1 50 -  -  -          ld  d,b
  752 D1:BBF2 79 -  -  -          ld  a,c
  753 D1:BBF3 0E 0C -  -          ld  c,BASETABLE_STRIDE
  754 D1:BBF5 ED 4C -  -          mlt bc
  755 D1:BBF7 21 00 40 D0         ld  hl,PAGETABLE
  756 D1:BBFB 09 -  -  -          add hl,bc
  757 D1:BBFC ED 27 -  -          ld  hl,(hl)
  758 D1:BBFE 06 00 -  -          ld  b,0
  759 D1:BC00 4F -  -  -          ld  c,a
  760 D1:BC01 09 -  -  -          add hl,bc   ;full address
  761 D1:BC02 DD 46 00 -          ld  b,(ix+REGA)
  762 D1:BC05 CD E2 AE D1         WRITE_ACCESS
  763 D1:BC09 ED 33 04 -          ADDCYC(4)
  764 D1:BC0C E1 -  -  -      pop hl
  765 D1:BC0D C3 CF B6 D1     jp i6502NextLoad
  766 D1:BC11 -  -  -  -  
  767 D1:BC11 -  -  -  -  ;absolute,X	STA oper,X	9D	3	5  
  768 D1:BC11 -  -  -  -  inst6502_sta_absx:
  769 D1:BC11 ED 33 05 -      ADDCYC(5)
  770 D1:BC14 CD D4 B7 D1     PUSH_ABSXSPLIT_NODEP
  771 D1:BC18 DD 46 00 -          ld  b,(ix+REGA)
  772 D1:BC1B CD E2 AE D1         WRITE_ACCESS
  773 D1:BC1F E1 -  -  -      pop hl
  774 D1:BC20 C3 CF B6 D1     jp i6502NextLoad
  775 D1:BC24 -  -  -  -  
  776 D1:BC24 -  -  -  -  ;absolute,Y	STA oper,Y	99	3	5  
  777 D1:BC24 -  -  -  -  inst6502_sta_absy:
  778 D1:BC24 ED 33 05 -      ADDCYC(5)
  779 D1:BC27 CD CF B7 D1     PUSH_ABSYSPLIT_NODEP
  780 D1:BC2B DD 46 00 -          ld  b,(ix+REGA)
  781 D1:BC2E CD E2 AE D1         WRITE_ACCESS
  782 D1:BC32 E1 -  -  -      pop hl
  783 D1:BC33 C3 CF B6 D1     jp i6502NextLoad
  784 D1:BC37 -  -  -  -  
  785 D1:BC37 -  -  -  -  ;(indirect,X)	STA (oper,X)	81	2	6  
  786 D1:BC37 -  -  -  -  inst6502_sta_indx:
  787 D1:BC37 E5 -  -  -      push hl
  788 D1:BC38 7E -  -  -          ld  a,(hl)
  789 D1:BC39 21 00 38 D0         ld  hl,ZEROPAGE
  790 D1:BC3D 85 -  -  -          add a,L
  791 D1:BC3E DD 86 01 -          add a,(ix+REGX)
  792 D1:BC41 6F -  -  -          ld  L,a
  793 D1:BC42 7E -  -  -          ld  a,(hl)
  794 D1:BC43 2C -  -  -          inc L
  795 D1:BC44 56 -  -  -          ld  d,(hl)
  796 D1:BC45 42 -  -  -          ld  b,d
  797 D1:BC46 0E 0C -  -          ld  c,BASETABLE_STRIDE
  798 D1:BC48 ED 4C -  -          mlt bc
  799 D1:BC4A 21 00 40 D0         ld  hl,PAGETABLE
  800 D1:BC4E 09 -  -  -          add hl,bc
  801 D1:BC4F ED 27 -  -          ld  hl,(hl)
  802 D1:BC51 06 00 -  -          ld  b,0
  803 D1:BC53 4F -  -  -          ld  c,a
  804 D1:BC54 09 -  -  -          add hl,bc
  805 D1:BC55 DD 46 00 -          ld  b,(ix+REGA)
  806 D1:BC58 CD E2 AE D1         WRITE_ACCESS
  807 D1:BC5C ED 33 06 -          ADDCYC(6)
  808 D1:BC5F E1 -  -  -      pop hl
  809 D1:BC60 C3 CF B6 D1     jp i6502NextLoad
  810 D1:BC64 -  -  -  -  
  811 D1:BC64 -  -  -  -  ;(indirect),Y	STA (oper),Y	91	2	6  
  812 D1:BC64 -  -  -  -  inst6502_sta_indy:
  813 D1:BC64 E5 -  -  -      push hl
  814 D1:BC65 7E -  -  -          ld  a,(hl)
  815 D1:BC66 21 00 38 D0         ld  hl,ZEROPAGE
  816 D1:BC6A 85 -  -  -          add a,L
  817 D1:BC6B 6F -  -  -          ld  L,a
  818 D1:BC6C 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  819 D1:BC6D 2C -  -  -          inc L
  820 D1:BC6E DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  821 D1:BC71 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  822 D1:BC72 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  823 D1:BC74 24 -  -  -          inc h
  824 D1:BC75 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  825 D1:BC76 2E 0C -  -          ld  L,BASETABLE_STRIDE
  826 D1:BC78 ED 6C -  -          mlt hl          ;23.
  827 D1:BC7A 01 00 40 D0         ld  bc,PAGETABLE
  828 D1:BC7E 09 -  -  -          add hl,bc
  829 D1:BC7F ED 27 -  -          ld  hl,(hl)     ;address get.
  830 D1:BC81 01 00 00 00         ld  bc,0
  831 D1:BC85 4F -  -  -          ld  c,a
  832 D1:BC86 09 -  -  -          add hl,bc       ;Full address get.
  833 D1:BC87 DD 46 00 -          ld  b,(ix+REGA)
  834 D1:BC8A CD E2 AE D1         WRITE_ACCESS
  835 D1:BC8E ED 33 06 -          ADDCYC(6)
  836 D1:BC91 E1 -  -  -      pop hl
  837 D1:BC92 C3 CF B6 D1     jp i6502NextLoad
  838 D1:BC96 -  -  -  -  
  839 D1:BC96 -  -  -  -  ;-----------------------------------------------------------------------------
  840 D1:BC96 -  -  -  -  ;STX - Store Index X in Memory
  841 D1:BC96 -  -  -  -  ;    X -> M
  842 D1:BC96 -  -  -  -  ;    N	Z	C	I	D	V
  843 D1:BC96 -  -  -  -  ;    -	-	-	-	-	-
  844 D1:BC96 -  -  -  -  
  845 D1:BC96 -  -  -  -  ;zeropage	STX oper	86	2	3  
  846 D1:BC96 -  -  -  -  inst6502_stx_zp:
  847 D1:BC96 7E -  -  -      ld  a,(hl)
  848 D1:BC97 01 00 38 D0     ld  bc,ZEROPAGE
  849 D1:BC9B 81 -  -  -      add a,c
  850 D1:BC9C 4F -  -  -      ld  c,a
  851 D1:BC9D DD 7E 01 -      ld  a,(ix+REGX)
  852 D1:BCA0 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  853 D1:BCA1 ED 33 03 -      ADDCYC(3)
  854 D1:BCA4 C3 CF B6 D1     jp i6502NextLoad
  855 D1:BCA8 -  -  -  -  
  856 D1:BCA8 -  -  -  -  ;zeropage,Y	STX oper,Y	96	2	4  
  857 D1:BCA8 -  -  -  -  inst6502_stx_zpy:
  858 D1:BCA8 7E -  -  -      ld  a,(hl)
  859 D1:BCA9 01 00 38 D0     ld  bc,ZEROPAGE
  860 D1:BCAD 81 -  -  -      add a,c
  861 D1:BCAE DD 86 02 -      add a,(ix+REGY)
  862 D1:BCB1 4F -  -  -      ld  c,a
  863 D1:BCB2 DD 7E 01 -      ld  a,(ix+REGX)
  864 D1:BCB5 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  865 D1:BCB6 ED 33 04 -      ADDCYC(4)
  866 D1:BCB9 C3 CF B6 D1     jp i6502NextLoad
  867 D1:BCBD -  -  -  -  
  868 D1:BCBD -  -  -  -  ;absolute	STX oper	8E	3	4  
  869 D1:BCBD -  -  -  -  inst6502_stx_abs:
  870 D1:BCBD CD 77 B7 D1     call subroutine6502_abs_split_start
  871 D1:BCC1 E5 -  -  -      push hl
  872 D1:BCC2 50 -  -  -          ld  d,b
  873 D1:BCC3 79 -  -  -          ld  a,c
  874 D1:BCC4 0E 0C -  -          ld  c,BASETABLE_STRIDE
  875 D1:BCC6 ED 4C -  -          mlt bc
  876 D1:BCC8 21 00 40 D0         ld  hl,PAGETABLE
  877 D1:BCCC 09 -  -  -          add hl,bc
  878 D1:BCCD ED 27 -  -          ld  hl,(hl)
  879 D1:BCCF 06 00 -  -          ld  b,0
  880 D1:BCD1 4F -  -  -          ld  c,a
  881 D1:BCD2 09 -  -  -          add hl,bc   ;full address
  882 D1:BCD3 DD 46 01 -          ld  b,(ix+REGX)
  883 D1:BCD6 CD E2 AE D1         WRITE_ACCESS
  884 D1:BCDA ED 33 04 -          ADDCYC(4)
  885 D1:BCDD E1 -  -  -      pop hl
  886 D1:BCDE C3 CF B6 D1     jp i6502NextLoad
  887 D1:BCE2 -  -  -  -  
  888 D1:BCE2 -  -  -  -  ;-----------------------------------------------------------------------------
  889 D1:BCE2 -  -  -  -  ;STY - Store Index Y in Memory
  890 D1:BCE2 -  -  -  -  ;    Y -> M
  891 D1:BCE2 -  -  -  -  ;    N	Z	C	I	D	V
  892 D1:BCE2 -  -  -  -  ;    -	-	-	-	-	-
  893 D1:BCE2 -  -  -  -  
  894 D1:BCE2 -  -  -  -  ;zeropage	STY oper	84	2	3  
  895 D1:BCE2 -  -  -  -  inst6502_sty_zp:
  896 D1:BCE2 7E -  -  -      ld  a,(hl)
  897 D1:BCE3 01 00 38 D0     ld  bc,ZEROPAGE
  898 D1:BCE7 81 -  -  -      add a,c
  899 D1:BCE8 4F -  -  -      ld  c,a
  900 D1:BCE9 DD 7E 02 -      ld  a,(ix+REGY)
  901 D1:BCEC 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  902 D1:BCED ED 33 03 -      ADDCYC(3)
  903 D1:BCF0 C3 CF B6 D1     jp i6502NextLoad
  904 D1:BCF4 -  -  -  -  
  905 D1:BCF4 -  -  -  -  ;zeropage,X	STY oper,X	94	2	4  
  906 D1:BCF4 -  -  -  -  inst6502_sty_zpx:
  907 D1:BCF4 7E -  -  -      ld  a,(hl)
  908 D1:BCF5 01 00 38 D0     ld  bc,ZEROPAGE
  909 D1:BCF9 81 -  -  -      add a,c
  910 D1:BCFA DD 86 01 -      add a,(ix+REGX)
  911 D1:BCFD 4F -  -  -      ld  c,a
  912 D1:BCFE DD 7E 02 -      ld  a,(ix+REGY)
  913 D1:BD01 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  914 D1:BD02 ED 33 04 -      ADDCYC(4)
  915 D1:BD05 C3 CF B6 D1     jp i6502NextLoad
  916 D1:BD09 -  -  -  -  
  917 D1:BD09 -  -  -  -  ;absolute	STY oper	8C	3	4  
  918 D1:BD09 -  -  -  -  inst6502_sty_abs:
  919 D1:BD09 CD 77 B7 D1     call subroutine6502_abs_split_start
  920 D1:BD0D E5 -  -  -      push hl
  921 D1:BD0E 50 -  -  -          ld  d,b
  922 D1:BD0F 79 -  -  -          ld  a,c
  923 D1:BD10 0E 0C -  -          ld  c,BASETABLE_STRIDE
  924 D1:BD12 ED 4C -  -          mlt bc
  925 D1:BD14 21 00 40 D0         ld  hl,PAGETABLE
  926 D1:BD18 09 -  -  -          add hl,bc
  927 D1:BD19 ED 27 -  -          ld  hl,(hl)
  928 D1:BD1B 06 00 -  -          ld  b,0
  929 D1:BD1D 4F -  -  -          ld  c,a
  930 D1:BD1E 09 -  -  -          add hl,bc   ;full address
  931 D1:BD1F DD 46 02 -          ld  b,(ix+REGY)
  932 D1:BD22 CD E2 AE D1         WRITE_ACCESS
  933 D1:BD26 ED 33 04 -          ADDCYC(4)
  934 D1:BD29 E1 -  -  -      pop hl
  935 D1:BD2A C3 CF B6 D1     jp i6502NextLoad
  936 D1:BD2E -  -  -  -  
  937 D1:BD2E -  -  -  -  ;-----------------------------------------------------------------------------
  938 D1:BD2E -  -  -  -  ;TAX - Transfer Accumulator to Index X [A -> X]
  939 D1:BD2E -  -  -  -  ;N	Z	C	I	D	V
  940 D1:BD2E -  -  -  -  ;+	+	-	-	-	-
  941 D1:BD2E -  -  -  -  ;implied	TAX	AA	1	2
  942 D1:BD2E -  -  -  -  inst6502_tax:
  943 D1:BD2E DD 7E 00 -      ld  a,(ix+REGA)
  944 D1:BD31 DD 77 01 -      ld  (ix+REGX),a
  945 D1:BD34 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  946 D1:BD48 ED 33 02 -      ADDCYC(2)
  947 D1:BD4B C3 E8 B6 D1     jp i6502FinishLoad
  948 D1:BD4F -  -  -  -  
  949 D1:BD4F -  -  -  -  ;TAY - Transfer Accumulator to Index Y [A -> Y]
  950 D1:BD4F -  -  -  -  ;N	Z	C	I	D	V
  951 D1:BD4F -  -  -  -  ;+	+	-	-	-	-
  952 D1:BD4F -  -  -  -  ;implied	TAY	A8	1	2
  953 D1:BD4F -  -  -  -  inst6502_tay:
  954 D1:BD4F DD 7E 00 -      ld  a,(ix+REGA)
  955 D1:BD52 DD 77 02 -      ld  (ix+REGY),a
  956 D1:BD55 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  957 D1:BD69 ED 33 02 -      ADDCYC(2)
  958 D1:BD6C C3 E8 B6 D1     jp i6502FinishLoad
  959 D1:BD70 -  -  -  -  
  960 D1:BD70 -  -  -  -  ;TSX - Transfer Stack Pointer to Index X [SP -> X]
  961 D1:BD70 -  -  -  -  ;N	Z	C	I	D	V
  962 D1:BD70 -  -  -  -  ;+	+	-	-	-	-
  963 D1:BD70 -  -  -  -  ;implied	TSX	BA	1	2
  964 D1:BD70 -  -  -  -  inst6502_tsx:
  965 D1:BD70 DD 7E 03 -      ld  a,(ix+REGSP)
  966 D1:BD73 DD 77 01 -      ld  (ix+REGX),a
  967 D1:BD76 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  968 D1:BD8A ED 33 02 -      ADDCYC(2)
  969 D1:BD8D C3 E8 B6 D1     jp i6502FinishLoad
  970 D1:BD91 -  -  -  -  
  971 D1:BD91 -  -  -  -  ;TXA - Transfer Index X to Accumulator [X -> A]
  972 D1:BD91 -  -  -  -  ;N	Z	C	I	D	V
  973 D1:BD91 -  -  -  -  ;+	+	-	-	-	-
  974 D1:BD91 -  -  -  -  ;implied	TXA	8A	1	2
  975 D1:BD91 -  -  -  -  inst6502_txa:
  976 D1:BD91 DD 7E 01 -      ld  a,(ix+REGX)
  977 D1:BD94 DD 77 00 -      ld  (ix+REGA),a
  978 D1:BD97 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  979 D1:BDAB ED 33 02 -      ADDCYC(2)
  980 D1:BDAE C3 E8 B6 D1     jp i6502FinishLoad
  981 D1:BDB2 -  -  -  -  
  982 D1:BDB2 -  -  -  -  ;TXS - Transfer Index X to Stack Pointer [X -> SP]
  983 D1:BDB2 -  -  -  -  ;N	Z	C	I	D	V
  984 D1:BDB2 -  -  -  -  ;-	-	-	-	-	-
  985 D1:BDB2 -  -  -  -  ;implied	TXS	9A	1	2
  986 D1:BDB2 -  -  -  -  inst6502_txs:
  987 D1:BDB2 DD 7E 01 -      ld  a,(ix+REGX)
  988 D1:BDB5 DD 77 03 -      ld  (ix+REGSP),a
  989 D1:BDB8 ED 33 02 -      ADDCYC(2)
  990 D1:BDBB C3 E8 B6 D1     jp i6502FinishLoad
  991 D1:BDBF -  -  -  -  
  992 D1:BDBF -  -  -  -  ;TYA - Transfer Index Y to Accumulator [Y -> A]
  993 D1:BDBF -  -  -  -  ;N	Z	C	I	D	V
  994 D1:BDBF -  -  -  -  ;+	+	-	-	-	-
  995 D1:BDBF -  -  -  -  ;implied	TYA	98	1	2
  996 D1:BDBF -  -  -  -  inst6502_tya:
  997 D1:BDBF DD 7E 02 -      ld  a,(ix+REGY)
  998 D1:BDC2 DD 77 00 -      ld  (ix+REGA),a
  999 D1:BDC5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1000 D1:BDD9 ED 33 02 -      ADDCYC(2)
 1001 D1:BDDC C3 E8 B6 D1     jp i6502FinishLoad
 1002 D1:BDE0 -  -  -  -  
 1003 D1:BDE0 -  -  -  -  ;-----------------------------------------------------------------------------
 1004 D1:BDE0 -  -  -  -  ;-----------------------------------------------------------------------------
 1005 D1:BDE0 -  -  -  -  ;-----------------------------------------------------------------------------
 1006 D1:BDE0 -  -  -  -  ;Instructions by type: Stack Instructions
 1007 D1:BDE0 -  -  -  -  ;PHA - Push Accumulator on Stack
 1008 D1:BDE0 -  -  -  -  ;    push A
 1009 D1:BDE0 -  -  -  -  ;    N	Z	C	I	D	V
 1010 D1:BDE0 -  -  -  -  ;    -	-	-	-	-	-
 1011 D1:BDE0 -  -  -  -  ;implied	PHA	48	1	3 
 1012 D1:BDE0 -  -  -  -  inst6502_pha:
 1013 D1:BDE0 ED 33 03 -      ADDCYC(3)
 1014 D1:BDE3 DD 7E 00 -      ld  a,(ix+REGA)
 1015 D1:BDE6 01 00 39 D0     ld  bc,STACKBASE
 1016 D1:BDEA DD 4E 03 -      ld  c,(ix+REGSP)
 1017 D1:BDED 02 -  -  -      ld  (bc),a
 1018 D1:BDEE 0D -  -  -      dec c
 1019 D1:BDEF DD 71 03 -      ld  (ix+REGSP),c
 1020 D1:BDF2 C3 E8 B6 D1     jp i6502FinishLoad
 1021 D1:BDF6 -  -  -  -  
 1022 D1:BDF6 -  -  -  -  ;PHP - Push Processor Status on Stack
 1023 D1:BDF6 -  -  -  -  ;    The status register will be pushed with the break
 1024 D1:BDF6 -  -  -  -  ;    flag and bit 5 set to 1.
 1025 D1:BDF6 -  -  -  -  ;    push SR
 1026 D1:BDF6 -  -  -  -  ;    N	Z	C	I	D	V
 1027 D1:BDF6 -  -  -  -  ;    -	-	-	-	-	-
 1028 D1:BDF6 -  -  -  -  ;implied	PHP	08	1	3  
 1029 D1:BDF6 -  -  -  -  inst6502_php:
 1030 D1:BDF6 ED 33 03 -      ADDCYC(3)
 1031 D1:BDF9 DD 7E 04 -      ld  a,(ix+REGSR)
 1032 D1:BDFC F6 30 -  -      or  a,%00110000
 1033 D1:BDFE 01 00 39 D0     ld  bc,STACKBASE
 1034 D1:BE02 DD 4E 03 -      ld  c,(ix+REGSP)
 1035 D1:BE05 02 -  -  -      ld  (bc),a
 1036 D1:BE06 0D -  -  -      dec c
 1037 D1:BE07 DD 71 03 -      ld  (ix+REGSP),c
 1038 D1:BE0A C3 E8 B6 D1     jp i6502FinishLoad
 1039 D1:BE0E -  -  -  -  
 1040 D1:BE0E -  -  -  -  
 1041 D1:BE0E -  -  -  -  
 1042 D1:BE0E -  -  -  -  ;PLA - Pull Accumulator from Stack
 1043 D1:BE0E -  -  -  -  ;    pull A
 1044 D1:BE0E -  -  -  -  ;    N	Z	C	I	D	V
 1045 D1:BE0E -  -  -  -  ;    +	+	-	-	-	-
 1046 D1:BE0E -  -  -  -  ;implied	PLA	68	1	4  
 1047 D1:BE0E -  -  -  -  inst6502_pla:
 1048 D1:BE0E ED 33 04 -      ADDCYC(4)
 1049 D1:BE11 01 00 39 D0     ld  bc,STACKBASE
 1050 D1:BE15 DD 4E 03 -      ld  c,(ix+REGSP)
 1051 D1:BE18 0C -  -  -      inc c
 1052 D1:BE19 0A -  -  -      ld  a,(bc)
 1053 D1:BE1A DD 71 03 -      ld  (ix+REGSP),c
 1054 D1:BE1D DD 77 00 -      ld  (ix+REGA),a
 1055 D1:BE20 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1056 D1:BE34 C3 E8 B6 D1     jp i6502FinishLoad
 1057 D1:BE38 -  -  -  -  
 1058 D1:BE38 -  -  -  -  ;PLP - Pull Processor Status from Stack
 1059 D1:BE38 -  -  -  -  ;    The status register will be pulled with the break
 1060 D1:BE38 -  -  -  -  ;    flag and bit 5 ignored.
 1061 D1:BE38 -  -  -  -  ;    pull SR
 1062 D1:BE38 -  -  -  -  ;    N	Z	C	I	D	V
 1063 D1:BE38 -  -  -  -  ;    from stack
 1064 D1:BE38 -  -  -  -  ;implied	PLP	28	1	4  
 1065 D1:BE38 -  -  -  -  inst6502_plp:
 1066 D1:BE38 ED 33 04 -      ADDCYC(4)
 1067 D1:BE3B 01 00 39 D0     ld  bc,STACKBASE
 1068 D1:BE3F DD 4E 03 -      ld  c,(ix+REGSP)
 1069 D1:BE42 0C -  -  -      inc c
 1070 D1:BE43 0A -  -  -      ld  a,(bc)
 1071 D1:BE44 DD 71 03 -      ld  (ix+REGSP),c
 1072 D1:BE47 DD 46 04 -      ld  b,(ix+REGSR)
 1073 D1:BE4A A8 -  -  -      xor a,b
 1074 D1:BE4B E6 CF -  -      and a,%11001111
 1075 D1:BE4D A8 -  -  -      xor a,b
 1076 D1:BE4E DD 77 04 -      ld  (ix+REGSR),a
 1077 D1:BE51 C3 E8 B6 D1     jp i6502FinishLoad
 1078 D1:BE55 -  -  -  -  
 1079 D1:BE55 -  -  -  -  
 1080 D1:BE55 -  -  -  -  ;-----------------------------------------------------------------------------
 1081 D1:BE55 -  -  -  -  ;-----------------------------------------------------------------------------
 1082 D1:BE55 -  -  -  -  ;-----------------------------------------------------------------------------
 1083 D1:BE55 -  -  -  -  ;Instructions by type: Decrements and Increments
 1084 D1:BE55 -  -  -  -  
 1085 D1:BE55 -  -  -  -  ;DEC -  Decrement Memory by One
 1086 D1:BE55 -  -  -  -  ;    M - 1 -> M
 1087 D1:BE55 -  -  -  -  ;    N	Z	C	I	D	V
 1088 D1:BE55 -  -  -  -  ;    +	+	-	-	-	-
 1089 D1:BE55 -  -  -  -  ;    addressing	assembler	opc	bytes	cycles
 1090 D1:BE55 -  -  -  -  
 1091 D1:BE55 -  -  -  -  ;    zeropage	DEC oper	C6	2	5  
 1092 D1:BE55 -  -  -  -  inst6502_dec_zp:
 1093 D1:BE55 7E -  -  -      ld  a,(hl)
 1094 D1:BE56 01 00 38 D0     ld  bc,ZEROPAGE
 1095 D1:BE5A 81 -  -  -      add a,c
 1096 D1:BE5B 4F -  -  -      ld  c,a
 1097 D1:BE5C 0A -  -  -      ld  a,(bc)
 1098 D1:BE5D 3D -  -  -      dec a
 1099 D1:BE5E 02 -  -  -      ld  (bc),a
 1100 D1:BE5F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1101 D1:BE73 ED 33 05 -      ADDCYC(5)
 1102 D1:BE76 C3 CF B6 D1     jp i6502NextLoad
 1103 D1:BE7A -  -  -  -  
 1104 D1:BE7A -  -  -  -  ;    zeropage,X	DEC oper,X	D6	2	6  
 1105 D1:BE7A -  -  -  -  inst6502_dec_zpx:
 1106 D1:BE7A 7E -  -  -      ld  a,(hl)
 1107 D1:BE7B 01 00 38 D0     ld  bc,ZEROPAGE
 1108 D1:BE7F 81 -  -  -      add a,c
 1109 D1:BE80 DD 86 01 -      add a,(ix+REGX)
 1110 D1:BE83 4F -  -  -      ld  c,a
 1111 D1:BE84 0A -  -  -      ld  a,(bc)
 1112 D1:BE85 3D -  -  -      dec a
 1113 D1:BE86 02 -  -  -      ld  (bc),a
 1114 D1:BE87 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1115 D1:BE9B ED 33 06 -      ADDCYC(6)
 1116 D1:BE9E C3 CF B6 D1     jp i6502NextLoad
 1117 D1:BEA2 -  -  -  -  
 1118 D1:BEA2 -  -  -  -  ;    absolute	DEC oper	CE	3	6  
 1119 D1:BEA2 -  -  -  -  inst6502_dec_abs:
 1120 D1:BEA2 CD 77 B7 D1     call subroutine6502_abs_split_start
 1121 D1:BEA6 E5 -  -  -      push hl
 1122 D1:BEA7 50 -  -  -          ld  d,b
 1123 D1:BEA8 79 -  -  -          ld  a,c
 1124 D1:BEA9 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1125 D1:BEAB ED 4C -  -          mlt bc
 1126 D1:BEAD 21 00 40 D0         ld  hl,PAGETABLE
 1127 D1:BEB1 09 -  -  -          add hl,bc
 1128 D1:BEB2 ED 27 -  -          ld  hl,(hl)
 1129 D1:BEB4 06 00 -  -          ld  b,0
 1130 D1:BEB6 4F -  -  -          ld  c,a
 1131 D1:BEB7 09 -  -  -          add hl,bc   ;full address
 1132 D1:BEB8 CD 40 AE D1         READ_ACCESS
 1133 D1:BEBC 3D -  -  -          dec a
 1134 D1:BEBD 47 -  -  -          ld  b,a
 1135 D1:BEBE -  -  -  -          ;
 1136 D1:BEBE DD 7E 04 -          ld  a,(ix+REGSR)
 1137 D1:BEC1 CB 8F -  -          res SF_ZERO,a
 1138 D1:BEC3 20 02 -  -          jr  nz,$+4
 1139 D1:BEC5 CB CF -  -          set SF_ZERO,a
 1140 D1:BEC7 CB BF -  -          res SF_NEG,a
 1141 D1:BEC9 F2 CF BE D1         jp  p,$+6
 1142 D1:BECD CB FF -  -          set SF_NEG,a
 1143 D1:BECF DD 77 04 -          ld  (ix+REGSR),a
 1144 D1:BED2 -  -  -  -          ;
 1145 D1:BED2 CD E2 AE D1         WRITE_ACCESS
 1146 D1:BED6 ED 33 06 -          ADDCYC(6)
 1147 D1:BED9 E1 -  -  -      pop hl
 1148 D1:BEDA C3 CF B6 D1     jp i6502NextLoad
 1149 D1:BEDE -  -  -  -  
 1150 D1:BEDE -  -  -  -  ;    absolute,X	DEC oper,X	DE	3	7  
 1151 D1:BEDE -  -  -  -  inst6502_dec_absx:
 1152 D1:BEDE ED 33 07 -      ADDCYC(7)
 1153 D1:BEE1 CD D4 B7 D1     PUSH_ABSXSPLIT_NODEP
 1154 D1:BEE5 CD 40 AE D1         READ_ACCESS
 1155 D1:BEE9 3D -  -  -          dec a
 1156 D1:BEEA 47 -  -  -          ld  b,a
 1157 D1:BEEB -  -  -  -          ;
 1158 D1:BEEB DD 7E 04 -          ld  a,(ix+REGSR)
 1159 D1:BEEE CB 8F -  -          res SF_ZERO,a
 1160 D1:BEF0 20 02 -  -          jr  nz,$+4
 1161 D1:BEF2 CB CF -  -          set SF_ZERO,a
 1162 D1:BEF4 CB BF -  -          res SF_NEG,a
 1163 D1:BEF6 F2 FC BE D1         jp  p,$+6
 1164 D1:BEFA CB FF -  -          set SF_NEG,a
 1165 D1:BEFC DD 77 04 -          ld  (ix+REGSR),a
 1166 D1:BEFF -  -  -  -          ;
 1167 D1:BEFF CD E2 AE D1         WRITE_ACCESS
 1168 D1:BF03 E1 -  -  -      pop hl
 1169 D1:BF04 C3 CF B6 D1     jp i6502NextLoad
 1170 D1:BF08 -  -  -  -  
 1171 D1:BF08 -  -  -  -  ;DEX - Decrement Index X by One [X - 1 -> X]
 1172 D1:BF08 -  -  -  -  ;Flags altered: NZ
 1173 D1:BF08 -  -  -  -  ;implied	DEX	CA	1	2  
 1174 D1:BF08 -  -  -  -  inst6502_dex:
 1175 D1:BF08 DD 35 01 -      dec (ix+REGX)
 1176 D1:BF0B DD 7E 04 -  _:  ld  a,(ix+REGSR)
 1177 D1:BF0E CB 8F -  -      res SF_ZERO,a
 1178 D1:BF10 20 02 -  -      jr  nz,$+4
 1179 D1:BF12 CB CF -  -      set SF_ZERO,a
 1180 D1:BF14 CB BF -  -      res SF_NEG,a
 1181 D1:BF16 F2 1C BF D1     jp  p,$+6
 1182 D1:BF1A CB FF -  -      set SF_NEG,a
 1183 D1:BF1C DD 77 04 -      ld  (ix+REGSR),a
 1184 D1:BF1F ED 33 02 -      ADDCYC(2)
 1185 D1:BF22 C3 E8 B6 D1     jp i6502FinishLoad
 1186 D1:BF26 -  -  -  -  
 1187 D1:BF26 -  -  -  -  ;DEY - Decrement Index Y by One [Y - 1 -> Y]
 1188 D1:BF26 -  -  -  -  ;Flags altered: NZ
 1189 D1:BF26 -  -  -  -  ;implied	DEY	88	1	2  
 1190 D1:BF26 -  -  -  -  inst6502_dey:
 1191 D1:BF26 DD 35 02 -      dec (ix+REGY)
 1192 D1:BF29 18 E0 -  -      jr  -_
 1193 D1:BF2B -  -  -  -  
 1194 D1:BF2B -  -  -  -  
 1195 D1:BF2B -  -  -  -  ;INX - Increment Index X by One [X + 1 -> X]
 1196 D1:BF2B -  -  -  -  ;Flags altered: NZ
 1197 D1:BF2B -  -  -  -  ;implied	INX	E8	1	2  
 1198 D1:BF2B -  -  -  -  inst6502_inx:
 1199 D1:BF2B DD 34 01 -      inc (ix+REGX)
 1200 D1:BF2E 18 DB -  -      jr  -_
 1201 D1:BF30 -  -  -  -  
 1202 D1:BF30 -  -  -  -  
 1203 D1:BF30 -  -  -  -  ;INY - Increment Index Y by One [Y + 1 -> Y]
 1204 D1:BF30 -  -  -  -  ;Flags altered: NZ
 1205 D1:BF30 -  -  -  -  ;implied	INY	C8	1	2  
 1206 D1:BF30 -  -  -  -  inst6502_iny:
 1207 D1:BF30 DD 34 02 -      inc (ix+REGY)
 1208 D1:BF33 18 D6 -  -      jr  -_
 1209 D1:BF35 -  -  -  -  
 1210 D1:BF35 -  -  -  -  
 1211 D1:BF35 -  -  -  -  ;INC - Increment Memory by One
 1212 D1:BF35 -  -  -  -  ;    M + 1 -> M
 1213 D1:BF35 -  -  -  -  ;    N	Z	C	I	D	V
 1214 D1:BF35 -  -  -  -  ;    +	+	-	-	-	-
 1215 D1:BF35 -  -  -  -  
 1216 D1:BF35 -  -  -  -  ;zeropage	INC oper	E6	2	5  
 1217 D1:BF35 -  -  -  -  inst6502_inc_zp:
 1218 D1:BF35 7E -  -  -      ld  a,(hl)
 1219 D1:BF36 01 00 38 D0     ld  bc,ZEROPAGE
 1220 D1:BF3A 81 -  -  -      add a,c
 1221 D1:BF3B 4F -  -  -      ld  c,a
 1222 D1:BF3C 0A -  -  -      ld  a,(bc)
 1223 D1:BF3D 3C -  -  -      inc a
 1224 D1:BF3E 02 -  -  -      ld  (bc),a
 1225 D1:BF3F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1226 D1:BF53 ED 33 05 -      ADDCYC(5)
 1227 D1:BF56 C3 CF B6 D1     jp i6502NextLoad
 1228 D1:BF5A -  -  -  -  
 1229 D1:BF5A -  -  -  -  ;zeropage,X	INC oper,X	F6	2	6  
 1230 D1:BF5A -  -  -  -  inst6502_inc_zpx:
 1231 D1:BF5A 7E -  -  -      ld  a,(hl)
 1232 D1:BF5B 01 00 38 D0     ld  bc,ZEROPAGE
 1233 D1:BF5F 81 -  -  -      add a,c
 1234 D1:BF60 DD 86 01 -      add a,(ix+REGX)
 1235 D1:BF63 4F -  -  -      ld  c,a
 1236 D1:BF64 0A -  -  -      ld  a,(bc)
 1237 D1:BF65 3C -  -  -      inc a
 1238 D1:BF66 02 -  -  -      ld  (bc),a
 1239 D1:BF67 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1240 D1:BF7B ED 33 06 -      ADDCYC(6)
 1241 D1:BF7E C3 CF B6 D1     jp i6502NextLoad
 1242 D1:BF82 -  -  -  -      
 1243 D1:BF82 -  -  -  -  ;absolute	INC oper	EE	3	6
 1244 D1:BF82 -  -  -  -  inst6502_inc_abs:
 1245 D1:BF82 CD 77 B7 D1     call subroutine6502_abs_split_start
 1246 D1:BF86 E5 -  -  -      push hl
 1247 D1:BF87 50 -  -  -          ld  d,b
 1248 D1:BF88 79 -  -  -          ld  a,c
 1249 D1:BF89 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1250 D1:BF8B ED 4C -  -          mlt bc
 1251 D1:BF8D 21 00 40 D0         ld  hl,PAGETABLE
 1252 D1:BF91 09 -  -  -          add hl,bc
 1253 D1:BF92 ED 27 -  -          ld  hl,(hl)
 1254 D1:BF94 06 00 -  -          ld  b,0
 1255 D1:BF96 4F -  -  -          ld  c,a
 1256 D1:BF97 09 -  -  -          add hl,bc   ;full address
 1257 D1:BF98 CD 40 AE D1         READ_ACCESS
 1258 D1:BF9C 3C -  -  -          inc a
 1259 D1:BF9D 47 -  -  -          ld  b,a
 1260 D1:BF9E -  -  -  -          ;
 1261 D1:BF9E DD 7E 04 -          ld  a,(ix+REGSR)
 1262 D1:BFA1 CB 8F -  -          res SF_ZERO,a
 1263 D1:BFA3 20 02 -  -          jr  nz,$+4
 1264 D1:BFA5 CB CF -  -          set SF_ZERO,a
 1265 D1:BFA7 CB BF -  -          res SF_NEG,a
 1266 D1:BFA9 F2 AF BF D1         jp  p,$+6
 1267 D1:BFAD CB FF -  -          set SF_NEG,a
 1268 D1:BFAF DD 77 04 -          ld  (ix+REGSR),a
 1269 D1:BFB2 -  -  -  -          ;
 1270 D1:BFB2 CD E2 AE D1         WRITE_ACCESS
 1271 D1:BFB6 ED 33 06 -          ADDCYC(6)
 1272 D1:BFB9 E1 -  -  -      pop hl
 1273 D1:BFBA C3 CF B6 D1     jp i6502NextLoad
 1274 D1:BFBE -  -  -  -  
 1275 D1:BFBE -  -  -  -  ;absolute,X	INC oper,X	FE	3	7  
 1276 D1:BFBE -  -  -  -  inst6502_inc_absx:
 1277 D1:BFBE ED 33 07 -      ADDCYC(7)
 1278 D1:BFC1 CD D4 B7 D1     PUSH_ABSXSPLIT_NODEP
 1279 D1:BFC5 CD 40 AE D1         READ_ACCESS
 1280 D1:BFC9 3C -  -  -          inc a
 1281 D1:BFCA 47 -  -  -          ld  b,a
 1282 D1:BFCB -  -  -  -          ;
 1283 D1:BFCB DD 7E 04 -          ld  a,(ix+REGSR)
 1284 D1:BFCE CB 8F -  -          res SF_ZERO,a
 1285 D1:BFD0 20 02 -  -          jr  nz,$+4
 1286 D1:BFD2 CB CF -  -          set SF_ZERO,a
 1287 D1:BFD4 CB BF -  -          res SF_NEG,a
 1288 D1:BFD6 F2 DC BF D1         jp  p,$+6
 1289 D1:BFDA CB FF -  -          set SF_NEG,a
 1290 D1:BFDC DD 77 04 -          ld  (ix+REGSR),a
 1291 D1:BFDF -  -  -  -          ;
 1292 D1:BFDF CD E2 AE D1         WRITE_ACCESS
 1293 D1:BFE3 E1 -  -  -      pop hl
 1294 D1:BFE4 C3 CF B6 D1     jp i6502NextLoad
 1295 D1:BFE8 -  -  -  -  
 1296 D1:BFE8 -  -  -  -  ;-----------------------------------------------------------------------------
 1297 D1:BFE8 -  -  -  -  ;-----------------------------------------------------------------------------
 1298 D1:BFE8 -  -  -  -  ;-----------------------------------------------------------------------------
 1299 D1:BFE8 -  -  -  -  ;Instructions by type: Arithmetic Operations
 1300 D1:BFE8 -  -  -  -  ;ADC - Add Memory to Accumulator with Carry  [A + M + C -> A, C]
 1301 D1:BFE8 -  -  -  -  ;    N	Z	C	I	D	V
 1302 D1:BFE8 -  -  -  -  ;    +	+	+	-	-	+
 1303 D1:BFE8 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1304 D1:BFE8 -  -  -  -  
 1305 D1:BFE8 -  -  -  -  ;immediate	ADC #oper	69	2	2  
 1306 D1:BFE8 -  -  -  -  inst6502_adc_imm:
 1307 D1:BFE8 ED 33 02 -      ADDCYC(2)
 1308 D1:BFEB 4E -  -  -      ld  c,(hl)
 1309 D1:BFEC C3 09 B8 D1     jp  subroutine6502_adc_combined_end
 1310 D1:BFF0 -  -  -  -      
 1311 D1:BFF0 -  -  -  -  
 1312 D1:BFF0 -  -  -  -  ;zeropage	ADC oper	65	2	3
 1313 D1:BFF0 -  -  -  -  inst6502_adc_zp:
 1314 D1:BFF0 ED 33 03 -      ADDCYC(3)
 1315 D1:BFF3 7E -  -  -      ld  a,(hl)
 1316 D1:BFF4 01 00 38 D0     ld  bc,ZEROPAGE
 1317 D1:BFF8 81 -  -  -      add a,c
 1318 D1:BFF9 4F -  -  -      ld  c,a
 1319 D1:BFFA 0A -  -  -      ld  a,(bc)
 1320 D1:BFFB 4F -  -  -      ld  c,a
 1321 D1:BFFC C3 09 B8 D1     jp  subroutine6502_adc_combined_end
 1322 D1:C000 -  -  -  -  
 1323 D1:C000 -  -  -  -  ;zeropage,X	ADC oper,X	75	2	4  
 1324 D1:C000 -  -  -  -  inst6502_adc_zpx:
 1325 D1:C000 ED 33 04 -      ADDCYC(4)
 1326 D1:C003 7E -  -  -      ld  a,(hl)
 1327 D1:C004 DD 86 01 -      add a,(ix+REGX)
 1328 D1:C007 01 00 38 D0     ld  bc,ZEROPAGE
 1329 D1:C00B 81 -  -  -      add a,c
 1330 D1:C00C 4F -  -  -      ld  c,a
 1331 D1:C00D 0A -  -  -      ld  a,(bc)
 1332 D1:C00E 4F -  -  -      ld  c,a
 1333 D1:C00F C3 09 B8 D1     jp  subroutine6502_adc_combined_end
 1334 D1:C013 -  -  -  -  
 1335 D1:C013 -  -  -  -  ;absolute	ADC oper	6D	3	4  
 1336 D1:C013 -  -  -  -  inst6502_adc_abs:
 1337 D1:C013 ED 33 04 -      ADDCYC(4)
 1338 D1:C016 CD 77 B7 D1     call subroutine6502_abs_split_start
 1339 D1:C01A E5 -  -  -      push hl
 1340 D1:C01B 50 -  -  -          ld  d,b
 1341 D1:C01C 79 -  -  -          ld  a,c
 1342 D1:C01D 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1343 D1:C01F ED 4C -  -          mlt bc
 1344 D1:C021 21 00 40 D0         ld  hl,PAGETABLE
 1345 D1:C025 09 -  -  -          add hl,bc
 1346 D1:C026 ED 27 -  -          ld  hl,(hl)
 1347 D1:C028 06 00 -  -          ld  b,0
 1348 D1:C02A 4F -  -  -          ld  c,a
 1349 D1:C02B 09 -  -  -          add hl,bc   ;full address
 1350 D1:C02C CD 40 AE D1         READ_ACCESS
 1351 D1:C030 E1 -  -  -      pop hl
 1352 D1:C031 4F -  -  -      ld  c,a
 1353 D1:C032 C3 09 B8 D1     jp  subroutine6502_adc_combined_end
 1354 D1:C036 -  -  -  -  
 1355 D1:C036 -  -  -  -  ;absolute,X	ADC oper,X	7D	3	4* 
 1356 D1:C036 -  -  -  -  inst6502_adc_absx:
 1357 D1:C036 ED 33 04 -      ADDCYC(4)
 1358 D1:C039 CD 98 B7 D1     PUSH_ABSXSPLIT
 1359 D1:C03D CD 40 AE D1         READ_ACCESS
 1360 D1:C041 E1 -  -  -      pop hl
 1361 D1:C042 4F -  -  -      ld  c,a
 1362 D1:C043 C3 09 B8 D1     jp  subroutine6502_adc_combined_end
 1363 D1:C047 -  -  -  -  
 1364 D1:C047 -  -  -  -  ;absolute,Y	ADC oper,Y	79	3	4*
 1365 D1:C047 -  -  -  -  inst6502_adc_absy:
 1366 D1:C047 ED 33 04 -      ADDCYC(4)
 1367 D1:C04A CD 93 B7 D1     PUSH_ABSYSPLIT
 1368 D1:C04E CD 40 AE D1         READ_ACCESS
 1369 D1:C052 E1 -  -  -      pop hl
 1370 D1:C053 4F -  -  -      ld  c,a
 1371 D1:C054 C3 09 B8 D1     jp  subroutine6502_adc_combined_end
 1372 D1:C058 -  -  -  -  
 1373 D1:C058 -  -  -  -  ;(indirect,X)	ADC (oper,X)	61	2	6  
 1374 D1:C058 -  -  -  -  inst6502_adc_indx:
 1375 D1:C058 ED 33 06 -      ADDCYC(6)
 1376 D1:C05B E5 -  -  -      push hl
 1377 D1:C05C 7E -  -  -          ld  a,(hl)
 1378 D1:C05D 21 00 38 D0         ld  hl,ZEROPAGE
 1379 D1:C061 85 -  -  -          add a,L
 1380 D1:C062 DD 86 01 -          add a,(ix+REGX)
 1381 D1:C065 6F -  -  -          ld  L,a
 1382 D1:C066 7E -  -  -          ld  a,(hl)
 1383 D1:C067 2C -  -  -          inc L
 1384 D1:C068 56 -  -  -          ld  d,(hl)
 1385 D1:C069 42 -  -  -          ld  b,d
 1386 D1:C06A 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1387 D1:C06C ED 4C -  -          mlt bc
 1388 D1:C06E 21 00 40 D0         ld  hl,PAGETABLE
 1389 D1:C072 09 -  -  -          add hl,bc
 1390 D1:C073 ED 27 -  -          ld  hl,(hl)
 1391 D1:C075 06 00 -  -          ld  b,0
 1392 D1:C077 4F -  -  -          ld  c,a
 1393 D1:C078 09 -  -  -          add hl,bc
 1394 D1:C079 CD 40 AE D1         READ_ACCESS
 1395 D1:C07D E1 -  -  -      pop hl
 1396 D1:C07E 4F -  -  -      ld  c,a
 1397 D1:C07F C3 09 B8 D1     jp  subroutine6502_adc_combined_end
 1398 D1:C083 -  -  -  -  
 1399 D1:C083 -  -  -  -  ;(indirect),Y	ADC (oper),Y	71	2	5* 
 1400 D1:C083 -  -  -  -  inst6502_adc_indy:
 1401 D1:C083 ED 33 05 -      ADDCYC(5)
 1402 D1:C086 E5 -  -  -      push hl
 1403 D1:C087 7E -  -  -          ld  a,(hl)
 1404 D1:C088 21 00 38 D0         ld  hl,ZEROPAGE
 1405 D1:C08C 85 -  -  -          add a,L
 1406 D1:C08D 6F -  -  -          ld  L,a
 1407 D1:C08E 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1408 D1:C08F 2C -  -  -          inc L
 1409 D1:C090 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1410 D1:C093 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1411 D1:C094 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1412 D1:C096 FD 23 -  -          ADDCYC(1)
 1413 D1:C098 24 -  -  -          inc h
 1414 D1:C099 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1415 D1:C09A 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1416 D1:C09C ED 6C -  -          mlt hl          ;23.
 1417 D1:C09E 01 00 40 D0         ld  bc,PAGETABLE
 1418 D1:C0A2 09 -  -  -          add hl,bc
 1419 D1:C0A3 ED 27 -  -          ld  hl,(hl)     ;address get.
 1420 D1:C0A5 01 00 00 00         ld  bc,0
 1421 D1:C0A9 4F -  -  -          ld  c,a
 1422 D1:C0AA 09 -  -  -          add hl,bc       ;Full address get.
 1423 D1:C0AB CD 40 AE D1         READ_ACCESS
 1424 D1:C0AF E1 -  -  -      pop hl
 1425 D1:C0B0 4F -  -  -      ld  c,a
 1426 D1:C0B1 C3 09 B8 D1     jp  subroutine6502_adc_combined_end
 1427 D1:C0B5 -  -  -  -  
 1428 D1:C0B5 -  -  -  -  
 1429 D1:C0B5 -  -  -  -  ;SBC - Subtract Memory from Accumulator with Borrow
 1430 D1:C0B5 -  -  -  -  ;A - M - C̅ -> A
 1431 D1:C0B5 -  -  -  -  ;N	Z	C	I	D	V
 1432 D1:C0B5 -  -  -  -  ;+	+	+	-	-	+
 1433 D1:C0B5 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1434 D1:C0B5 -  -  -  -  
 1435 D1:C0B5 -  -  -  -  ;immediate	SBC #oper	E9	2	2  
 1436 D1:C0B5 -  -  -  -  inst6502_sbc_imm:
 1437 D1:C0B5 ED 33 02 -      ADDCYC(2)
 1438 D1:C0B8 4E -  -  -      ld  c,(hl)
 1439 D1:C0B9 C3 3A B8 D1     jp  subroutine6502_sbc_combined_end
 1440 D1:C0BD -  -  -  -  
 1441 D1:C0BD -  -  -  -  ;zeropage	SBC oper	E5	2	3  
 1442 D1:C0BD -  -  -  -  inst6502_sbc_zp:
 1443 D1:C0BD ED 33 03 -      ADDCYC(3)
 1444 D1:C0C0 7E -  -  -      ld  a,(hl)
 1445 D1:C0C1 01 00 38 D0     ld  bc,ZEROPAGE
 1446 D1:C0C5 81 -  -  -      add a,c
 1447 D1:C0C6 4F -  -  -      ld  c,a
 1448 D1:C0C7 0A -  -  -      ld  a,(bc)
 1449 D1:C0C8 4F -  -  -      ld  c,a
 1450 D1:C0C9 C3 3A B8 D1     jp  subroutine6502_sbc_combined_end
 1451 D1:C0CD -  -  -  -  
 1452 D1:C0CD -  -  -  -  ;zeropage,X	SBC oper,X	F5	2	4  
 1453 D1:C0CD -  -  -  -  inst6502_sbc_zpx:
 1454 D1:C0CD ED 33 04 -      ADDCYC(4)
 1455 D1:C0D0 7E -  -  -      ld  a,(hl)
 1456 D1:C0D1 DD 86 01 -      add a,(ix+REGX)
 1457 D1:C0D4 01 00 38 D0     ld  bc,ZEROPAGE
 1458 D1:C0D8 81 -  -  -      add a,c
 1459 D1:C0D9 4F -  -  -      ld  c,a
 1460 D1:C0DA 0A -  -  -      ld  a,(bc)
 1461 D1:C0DB 4F -  -  -      ld  c,a
 1462 D1:C0DC C3 3A B8 D1     jp  subroutine6502_sbc_combined_end
 1463 D1:C0E0 -  -  -  -  
 1464 D1:C0E0 -  -  -  -  ;absolute	SBC oper	ED	3	4  
 1465 D1:C0E0 -  -  -  -  inst6502_sbc_abs:
 1466 D1:C0E0 ED 33 04 -      ADDCYC(4)
 1467 D1:C0E3 CD 77 B7 D1     call subroutine6502_abs_split_start
 1468 D1:C0E7 E5 -  -  -      push hl
 1469 D1:C0E8 50 -  -  -          ld  d,b
 1470 D1:C0E9 79 -  -  -          ld  a,c
 1471 D1:C0EA 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1472 D1:C0EC ED 4C -  -          mlt bc
 1473 D1:C0EE 21 00 40 D0         ld  hl,PAGETABLE
 1474 D1:C0F2 09 -  -  -          add hl,bc
 1475 D1:C0F3 ED 27 -  -          ld  hl,(hl)
 1476 D1:C0F5 06 00 -  -          ld  b,0
 1477 D1:C0F7 4F -  -  -          ld  c,a
 1478 D1:C0F8 09 -  -  -          add hl,bc   ;full address
 1479 D1:C0F9 CD 40 AE D1         READ_ACCESS
 1480 D1:C0FD E1 -  -  -      pop hl
 1481 D1:C0FE 4F -  -  -      ld  c,a
 1482 D1:C0FF C3 3A B8 D1     jp  subroutine6502_sbc_combined_end
 1483 D1:C103 -  -  -  -  
 1484 D1:C103 -  -  -  -  ;absolute,X	SBC oper,X	FD	3	4* 
 1485 D1:C103 -  -  -  -  inst6502_sbc_absx:
 1486 D1:C103 ED 33 04 -      ADDCYC(4)
 1487 D1:C106 CD 98 B7 D1     PUSH_ABSXSPLIT
 1488 D1:C10A CD 40 AE D1         READ_ACCESS
 1489 D1:C10E E1 -  -  -      pop hl
 1490 D1:C10F 4F -  -  -      ld  c,a
 1491 D1:C110 C3 3A B8 D1     jp  subroutine6502_sbc_combined_end
 1492 D1:C114 -  -  -  -  
 1493 D1:C114 -  -  -  -  ;absolute,Y	SBC oper,Y	F9	3	4* 
 1494 D1:C114 -  -  -  -  inst6502_sbc_absy:
 1495 D1:C114 ED 33 04 -      ADDCYC(4)
 1496 D1:C117 CD 93 B7 D1     PUSH_ABSYSPLIT
 1497 D1:C11B CD 40 AE D1         READ_ACCESS
 1498 D1:C11F E1 -  -  -      pop hl
 1499 D1:C120 4F -  -  -      ld  c,a
 1500 D1:C121 C3 3A B8 D1     jp  subroutine6502_sbc_combined_end
 1501 D1:C125 -  -  -  -  
 1502 D1:C125 -  -  -  -  ;(indirect,X)	SBC (oper,X)	E1	2	6  
 1503 D1:C125 -  -  -  -  inst6502_sbc_indx:
 1504 D1:C125 ED 33 06 -      ADDCYC(6)
 1505 D1:C128 E5 -  -  -      push hl
 1506 D1:C129 7E -  -  -          ld  a,(hl)
 1507 D1:C12A 21 00 38 D0         ld  hl,ZEROPAGE
 1508 D1:C12E 85 -  -  -          add a,L
 1509 D1:C12F DD 86 01 -          add a,(ix+REGX)
 1510 D1:C132 6F -  -  -          ld  L,a
 1511 D1:C133 7E -  -  -          ld  a,(hl)
 1512 D1:C134 2C -  -  -          inc L
 1513 D1:C135 56 -  -  -          ld  d,(hl)
 1514 D1:C136 42 -  -  -          ld  b,d
 1515 D1:C137 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1516 D1:C139 ED 4C -  -          mlt bc
 1517 D1:C13B 21 00 40 D0         ld  hl,PAGETABLE
 1518 D1:C13F 09 -  -  -          add hl,bc
 1519 D1:C140 ED 27 -  -          ld  hl,(hl)
 1520 D1:C142 06 00 -  -          ld  b,0
 1521 D1:C144 4F -  -  -          ld  c,a
 1522 D1:C145 09 -  -  -          add hl,bc
 1523 D1:C146 CD 40 AE D1         READ_ACCESS
 1524 D1:C14A E1 -  -  -      pop hl
 1525 D1:C14B 4F -  -  -      ld  c,a
 1526 D1:C14C C3 3A B8 D1     jp  subroutine6502_sbc_combined_end
 1527 D1:C150 -  -  -  -  
 1528 D1:C150 -  -  -  -  ;(indirect),Y	SBC (oper),Y	F1	2	5* 
 1529 D1:C150 -  -  -  -  inst6502_sbc_indy:
 1530 D1:C150 ED 33 05 -      ADDCYC(5)
 1531 D1:C153 E5 -  -  -      push hl
 1532 D1:C154 7E -  -  -          ld  a,(hl)
 1533 D1:C155 21 00 38 D0         ld  hl,ZEROPAGE
 1534 D1:C159 85 -  -  -          add a,L
 1535 D1:C15A 6F -  -  -          ld  L,a
 1536 D1:C15B 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1537 D1:C15C 2C -  -  -          inc L
 1538 D1:C15D DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1539 D1:C160 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1540 D1:C161 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1541 D1:C163 FD 23 -  -          ADDCYC(1)
 1542 D1:C165 24 -  -  -          inc h
 1543 D1:C166 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1544 D1:C167 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1545 D1:C169 ED 6C -  -          mlt hl          ;23.
 1546 D1:C16B 01 00 40 D0         ld  bc,PAGETABLE
 1547 D1:C16F 09 -  -  -          add hl,bc
 1548 D1:C170 ED 27 -  -          ld  hl,(hl)     ;address get.
 1549 D1:C172 01 00 00 00         ld  bc,0
 1550 D1:C176 4F -  -  -          ld  c,a
 1551 D1:C177 09 -  -  -          add hl,bc       ;Full address get.
 1552 D1:C178 CD 40 AE D1         READ_ACCESS
 1553 D1:C17C E1 -  -  -      pop hl
 1554 D1:C17D 4F -  -  -      ld  c,a
 1555 D1:C17E C3 3A B8 D1     jp  subroutine6502_sbc_combined_end
 1556 D1:C182 -  -  -  -  
 1557 D1:C182 -  -  -  -  
 1558 D1:C182 -  -  -  -  
 1559 D1:C182 -  -  -  -  ;-----------------------------------------------------------------------------
 1560 D1:C182 -  -  -  -  ;-----------------------------------------------------------------------------
 1561 D1:C182 -  -  -  -  ;-----------------------------------------------------------------------------
 1562 D1:C182 -  -  -  -  ;Instructions by type: Logical Operations
 1563 D1:C182 -  -  -  -  
 1564 D1:C182 -  -  -  -  ;AND - AND Memory with Accumulator
 1565 D1:C182 -  -  -  -  ;A AND M -> A
 1566 D1:C182 -  -  -  -  ;N	Z	C	I	D	V
 1567 D1:C182 -  -  -  -  ;+	+	-	-	-	-
 1568 D1:C182 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1569 D1:C182 -  -  -  -  
 1570 D1:C182 -  -  -  -  ;immediate	AND #oper	29	2	2  
 1571 D1:C182 -  -  -  -  inst6502_and_imm:
 1572 D1:C182 ED 33 02 -      ADDCYC(2)
 1573 D1:C185 7E -  -  -      ld  a,(hl)
 1574 D1:C186 DD A6 00 -      and a,(ix+REGA)
 1575 D1:C189 DD 77 00 -      ld  (ix+REGA),A
 1576 D1:C18C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1577 D1:C1A0 C3 CF B6 D1     jp i6502NextLoad
 1578 D1:C1A4 -  -  -  -  
 1579 D1:C1A4 -  -  -  -  ;zeropage	AND oper	25	2	3  
 1580 D1:C1A4 -  -  -  -  inst6502_and_zp:
 1581 D1:C1A4 ED 33 03 -      ADDCYC(3)
 1582 D1:C1A7 7E -  -  -      ld  a,(hl)
 1583 D1:C1A8 01 00 38 D0     ld  bc,ZEROPAGE
 1584 D1:C1AC 81 -  -  -      add a,c
 1585 D1:C1AD 4F -  -  -      ld  c,a
 1586 D1:C1AE 0A -  -  -      ld  a,(bc)
 1587 D1:C1AF DD A6 00 -      and a,(ix+REGA)
 1588 D1:C1B2 DD 77 00 -      ld  (ix+REGA),A
 1589 D1:C1B5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1590 D1:C1C9 C3 CF B6 D1     jp i6502NextLoad
 1591 D1:C1CD -  -  -  -  
 1592 D1:C1CD -  -  -  -  ;zeropage,X	AND oper,X	35	2	4  
 1593 D1:C1CD -  -  -  -  inst6502_and_zpx:
 1594 D1:C1CD ED 33 04 -      ADDCYC(4)
 1595 D1:C1D0 7E -  -  -      ld  a,(hl)
 1596 D1:C1D1 01 00 38 D0     ld  bc,ZEROPAGE
 1597 D1:C1D5 81 -  -  -      add a,c
 1598 D1:C1D6 DD 86 01 -      add a,(ix+REGX)
 1599 D1:C1D9 4F -  -  -      ld  c,a
 1600 D1:C1DA 0A -  -  -      ld  a,(bc)
 1601 D1:C1DB DD A6 00 -      and a,(ix+REGA)
 1602 D1:C1DE DD 77 00 -      ld  (ix+REGA),A
 1603 D1:C1E1 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1604 D1:C1F5 C3 CF B6 D1     jp i6502NextLoad
 1605 D1:C1F9 -  -  -  -  
 1606 D1:C1F9 -  -  -  -  ;absolute	AND oper	2D	3	4  
 1607 D1:C1F9 -  -  -  -  inst6502_and_abs:
 1608 D1:C1F9 ED 33 04 -      ADDCYC(4)
 1609 D1:C1FC CD 77 B7 D1     call subroutine6502_abs_split_start
 1610 D1:C200 E5 -  -  -      push hl
 1611 D1:C201 50 -  -  -          ld  d,b
 1612 D1:C202 79 -  -  -          ld  a,c
 1613 D1:C203 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1614 D1:C205 ED 4C -  -          mlt bc
 1615 D1:C207 21 00 40 D0         ld  hl,PAGETABLE
 1616 D1:C20B 09 -  -  -          add hl,bc
 1617 D1:C20C ED 27 -  -          ld  hl,(hl)
 1618 D1:C20E 06 00 -  -          ld  b,0
 1619 D1:C210 4F -  -  -          ld  c,a
 1620 D1:C211 09 -  -  -          add hl,bc   ;full address
 1621 D1:C212 CD 40 AE D1         READ_ACCESS
 1622 D1:C216 E1 -  -  -      pop hl
 1623 D1:C217 DD A6 00 -      and a,(ix+REGA)
 1624 D1:C21A DD 77 00 -      ld  (ix+REGA),A
 1625 D1:C21D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1626 D1:C231 C3 CF B6 D1     jp i6502NextLoad
 1627 D1:C235 -  -  -  -  
 1628 D1:C235 -  -  -  -  ;absolute,X	AND oper,X	3D	3	4* 
 1629 D1:C235 -  -  -  -  inst6502_and_absx:
 1630 D1:C235 ED 33 04 -      ADDCYC(4)
 1631 D1:C238 CD 98 B7 D1     PUSH_ABSXSPLIT
 1632 D1:C23C CD 40 AE D1         READ_ACCESS
 1633 D1:C240 DD A6 00 -          and a,(ix+REGA)
 1634 D1:C243 DD 77 00 -          ld  (ix+REGA),A
 1635 D1:C246 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1636 D1:C25A E1 -  -  -      pop hl
 1637 D1:C25B C3 CF B6 D1     jp i6502NextLoad
 1638 D1:C25F -  -  -  -  
 1639 D1:C25F -  -  -  -  ;absolute,Y	AND oper,Y	39	3	4* 
 1640 D1:C25F -  -  -  -  inst6502_and_absy:
 1641 D1:C25F ED 33 04 -      ADDCYC(4)
 1642 D1:C262 CD 93 B7 D1     PUSH_ABSYSPLIT
 1643 D1:C266 CD 40 AE D1         READ_ACCESS
 1644 D1:C26A E1 -  -  -      pop hl
 1645 D1:C26B DD A6 00 -      and a,(ix+REGA)
 1646 D1:C26E DD 77 00 -      ld  (ix+REGA),A
 1647 D1:C271 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1648 D1:C285 C3 CF B6 D1     jp i6502NextLoad
 1649 D1:C289 -  -  -  -  
 1650 D1:C289 -  -  -  -  ;(indirect,X)	AND (oper,X)	21	2	6  
 1651 D1:C289 -  -  -  -  inst6502_and_indx:
 1652 D1:C289 ED 33 06 -      ADDCYC(6)
 1653 D1:C28C E5 -  -  -      push hl
 1654 D1:C28D 7E -  -  -          ld  a,(hl)
 1655 D1:C28E 21 00 38 D0         ld  hl,ZEROPAGE
 1656 D1:C292 85 -  -  -          add a,L
 1657 D1:C293 DD 86 01 -          add a,(ix+REGX)
 1658 D1:C296 6F -  -  -          ld  L,a
 1659 D1:C297 7E -  -  -          ld  a,(hl)
 1660 D1:C298 2C -  -  -          inc L
 1661 D1:C299 56 -  -  -          ld  d,(hl)
 1662 D1:C29A 42 -  -  -          ld  b,d
 1663 D1:C29B 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1664 D1:C29D ED 4C -  -          mlt bc
 1665 D1:C29F 21 00 40 D0         ld  hl,PAGETABLE
 1666 D1:C2A3 09 -  -  -          add hl,bc
 1667 D1:C2A4 ED 27 -  -          ld  hl,(hl)
 1668 D1:C2A6 06 00 -  -          ld  b,0
 1669 D1:C2A8 4F -  -  -          ld  c,a
 1670 D1:C2A9 09 -  -  -          add hl,bc
 1671 D1:C2AA CD 40 AE D1         READ_ACCESS
 1672 D1:C2AE E1 -  -  -      pop hl
 1673 D1:C2AF DD A6 00 -      and a,(ix+REGA)
 1674 D1:C2B2 DD 77 00 -      ld  (ix+REGA),A
 1675 D1:C2B5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1676 D1:C2C9 C3 CF B6 D1     jp i6502NextLoad
 1677 D1:C2CD -  -  -  -  
 1678 D1:C2CD -  -  -  -  ;(indirect),Y	AND (oper),Y	31	2	5* 
 1679 D1:C2CD -  -  -  -  inst6502_and_indy:
 1680 D1:C2CD ED 33 05 -      ADDCYC(5)
 1681 D1:C2D0 E5 -  -  -      push hl
 1682 D1:C2D1 7E -  -  -          ld  a,(hl)
 1683 D1:C2D2 21 00 38 D0         ld  hl,ZEROPAGE
 1684 D1:C2D6 85 -  -  -          add a,L
 1685 D1:C2D7 6F -  -  -          ld  L,a
 1686 D1:C2D8 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1687 D1:C2D9 2C -  -  -          inc L
 1688 D1:C2DA DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1689 D1:C2DD 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1690 D1:C2DE 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1691 D1:C2E0 24 -  -  -          inc h
 1692 D1:C2E1 FD 23 -  -          ADDCYC(1)
 1693 D1:C2E3 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1694 D1:C2E4 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1695 D1:C2E6 ED 6C -  -          mlt hl          ;23.
 1696 D1:C2E8 01 00 40 D0         ld  bc,PAGETABLE
 1697 D1:C2EC 09 -  -  -          add hl,bc
 1698 D1:C2ED ED 27 -  -          ld  hl,(hl)     ;address get.
 1699 D1:C2EF 01 00 00 00         ld  bc,0
 1700 D1:C2F3 4F -  -  -          ld  c,a
 1701 D1:C2F4 09 -  -  -          add hl,bc       ;Full address get.
 1702 D1:C2F5 CD 40 AE D1         READ_ACCESS
 1703 D1:C2F9 E1 -  -  -      pop hl
 1704 D1:C2FA DD A6 00 -      and a,(ix+REGA)
 1705 D1:C2FD DD 77 00 -      ld  (ix+REGA),A
 1706 D1:C300 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1707 D1:C314 C3 CF B6 D1     jp i6502NextLoad
 1708 D1:C318 -  -  -  -  
 1709 D1:C318 -  -  -  -  ;-----------------------------------------------------------------------------
 1710 D1:C318 -  -  -  -  ;EOR - Exclusive-OR Memory with Accumulator
 1711 D1:C318 -  -  -  -  ;A EOR M -> A
 1712 D1:C318 -  -  -  -  ;N	Z	C	I	D	V
 1713 D1:C318 -  -  -  -  ;+	+	-	-	-	-
 1714 D1:C318 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1715 D1:C318 -  -  -  -  
 1716 D1:C318 -  -  -  -  ;immediate	EOR #oper	49	2	2  
 1717 D1:C318 -  -  -  -  inst6502_eor_imm:
 1718 D1:C318 ED 33 02 -      ADDCYC(2)
 1719 D1:C31B 7E -  -  -      ld  a,(hl)
 1720 D1:C31C DD AE 00 -      xor a,(ix+REGA)
 1721 D1:C31F DD 77 00 -      ld  (ix+REGA),A
 1722 D1:C322 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1723 D1:C336 C3 CF B6 D1     jp i6502NextLoad
 1724 D1:C33A -  -  -  -  
 1725 D1:C33A -  -  -  -  ;zeropage	EOR oper	45	2	3  
 1726 D1:C33A -  -  -  -  inst6502_eor_zp:
 1727 D1:C33A ED 33 03 -      ADDCYC(3)
 1728 D1:C33D 7E -  -  -      ld  a,(hl)
 1729 D1:C33E 01 00 38 D0     ld  bc,ZEROPAGE
 1730 D1:C342 81 -  -  -      add a,c
 1731 D1:C343 4F -  -  -      ld  c,a
 1732 D1:C344 0A -  -  -      ld  a,(bc)
 1733 D1:C345 DD AE 00 -      xor a,(ix+REGA)
 1734 D1:C348 DD 77 00 -      ld  (ix+REGA),A
 1735 D1:C34B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1736 D1:C35F C3 CF B6 D1     jp i6502NextLoad
 1737 D1:C363 -  -  -  -  
 1738 D1:C363 -  -  -  -  
 1739 D1:C363 -  -  -  -  ;zeropage,X	EOR oper,X	55	2	4  
 1740 D1:C363 -  -  -  -  inst6502_eor_zpx:
 1741 D1:C363 ED 33 04 -      ADDCYC(4)
 1742 D1:C366 7E -  -  -      ld  a,(hl)
 1743 D1:C367 01 00 38 D0     ld  bc,ZEROPAGE
 1744 D1:C36B 81 -  -  -      add a,c
 1745 D1:C36C DD 86 01 -      add a,(ix+REGX)
 1746 D1:C36F 4F -  -  -      ld  c,a
 1747 D1:C370 0A -  -  -      ld  a,(bc)
 1748 D1:C371 DD AE 00 -      xor a,(ix+REGA)
 1749 D1:C374 DD 77 00 -      ld  (ix+REGA),A
 1750 D1:C377 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1751 D1:C38B C3 CF B6 D1     jp i6502NextLoad
 1752 D1:C38F -  -  -  -  
 1753 D1:C38F -  -  -  -  ;absolute	EOR oper	4D	3	4  
 1754 D1:C38F -  -  -  -  inst6502_eor_abs:
 1755 D1:C38F ED 33 04 -      ADDCYC(4)
 1756 D1:C392 CD 77 B7 D1     call subroutine6502_abs_split_start
 1757 D1:C396 E5 -  -  -      push hl
 1758 D1:C397 50 -  -  -          ld  d,b
 1759 D1:C398 79 -  -  -          ld  a,c
 1760 D1:C399 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1761 D1:C39B ED 4C -  -          mlt bc
 1762 D1:C39D 21 00 40 D0         ld  hl,PAGETABLE
 1763 D1:C3A1 09 -  -  -          add hl,bc
 1764 D1:C3A2 ED 27 -  -          ld  hl,(hl)
 1765 D1:C3A4 06 00 -  -          ld  b,0
 1766 D1:C3A6 4F -  -  -          ld  c,a
 1767 D1:C3A7 09 -  -  -          add hl,bc   ;full address
 1768 D1:C3A8 CD 40 AE D1         READ_ACCESS
 1769 D1:C3AC E1 -  -  -      pop hl
 1770 D1:C3AD DD AE 00 -      xor a,(ix+REGA)
 1771 D1:C3B0 DD 77 00 -      ld  (ix+REGA),A
 1772 D1:C3B3 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1773 D1:C3C7 C3 CF B6 D1     jp i6502NextLoad
 1774 D1:C3CB -  -  -  -  
 1775 D1:C3CB -  -  -  -  ;absolute,X	EOR oper,X	5D	3	4* 
 1776 D1:C3CB -  -  -  -  inst6502_eor_absx:
 1777 D1:C3CB ED 33 04 -      ADDCYC(4)
 1778 D1:C3CE CD 98 B7 D1     PUSH_ABSXSPLIT
 1779 D1:C3D2 CD 40 AE D1         READ_ACCESS
 1780 D1:C3D6 DD AE 00 -          xor a,(ix+REGA)
 1781 D1:C3D9 DD 77 00 -          ld  (ix+REGA),A
 1782 D1:C3DC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1783 D1:C3F0 E1 -  -  -      pop hl
 1784 D1:C3F1 C3 CF B6 D1     jp i6502NextLoad
 1785 D1:C3F5 -  -  -  -  
 1786 D1:C3F5 -  -  -  -  ;absolute,Y	EOR oper,Y	59	3	4* 
 1787 D1:C3F5 -  -  -  -  inst6502_eor_absy:
 1788 D1:C3F5 ED 33 04 -      ADDCYC(4)
 1789 D1:C3F8 CD 93 B7 D1     PUSH_ABSYSPLIT
 1790 D1:C3FC CD 40 AE D1         READ_ACCESS
 1791 D1:C400 E1 -  -  -      pop hl
 1792 D1:C401 DD AE 00 -      xor a,(ix+REGA)
 1793 D1:C404 DD 77 00 -      ld  (ix+REGA),A
 1794 D1:C407 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1795 D1:C41B C3 CF B6 D1     jp i6502NextLoad
 1796 D1:C41F -  -  -  -  
 1797 D1:C41F -  -  -  -  ;(indirect,X)	EOR (oper,X)	41	2	6  
 1798 D1:C41F -  -  -  -  inst6502_eor_indx:
 1799 D1:C41F ED 33 06 -      ADDCYC(6)
 1800 D1:C422 E5 -  -  -      push hl
 1801 D1:C423 7E -  -  -          ld  a,(hl)
 1802 D1:C424 21 00 38 D0         ld  hl,ZEROPAGE
 1803 D1:C428 85 -  -  -          add a,L
 1804 D1:C429 DD 86 01 -          add a,(ix+REGX)
 1805 D1:C42C 6F -  -  -          ld  L,a
 1806 D1:C42D 7E -  -  -          ld  a,(hl)
 1807 D1:C42E 2C -  -  -          inc L
 1808 D1:C42F 56 -  -  -          ld  d,(hl)
 1809 D1:C430 42 -  -  -          ld  b,d
 1810 D1:C431 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1811 D1:C433 ED 4C -  -          mlt bc
 1812 D1:C435 21 00 40 D0         ld  hl,PAGETABLE
 1813 D1:C439 09 -  -  -          add hl,bc
 1814 D1:C43A ED 27 -  -          ld  hl,(hl)
 1815 D1:C43C 06 00 -  -          ld  b,0
 1816 D1:C43E 4F -  -  -          ld  c,a
 1817 D1:C43F 09 -  -  -          add hl,bc
 1818 D1:C440 CD 40 AE D1         READ_ACCESS
 1819 D1:C444 E1 -  -  -      pop hl
 1820 D1:C445 DD AE 00 -      xor a,(ix+REGA)
 1821 D1:C448 DD 77 00 -      ld  (ix+REGA),A
 1822 D1:C44B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1823 D1:C45F C3 CF B6 D1     jp i6502NextLoad
 1824 D1:C463 -  -  -  -  
 1825 D1:C463 -  -  -  -  ;(indirect),Y	EOR (oper),Y	51	2	5* 
 1826 D1:C463 -  -  -  -  inst6502_eor_indy:
 1827 D1:C463 ED 33 05 -      ADDCYC(5)
 1828 D1:C466 E5 -  -  -      push hl
 1829 D1:C467 7E -  -  -          ld  a,(hl)
 1830 D1:C468 21 00 38 D0         ld  hl,ZEROPAGE
 1831 D1:C46C 85 -  -  -          add a,L
 1832 D1:C46D 6F -  -  -          ld  L,a
 1833 D1:C46E 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1834 D1:C46F 2C -  -  -          inc L
 1835 D1:C470 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1836 D1:C473 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1837 D1:C474 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1838 D1:C476 24 -  -  -          inc h
 1839 D1:C477 FD 23 -  -          ADDCYC(1)
 1840 D1:C479 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1841 D1:C47A 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1842 D1:C47C ED 6C -  -          mlt hl          ;23.
 1843 D1:C47E 01 00 40 D0         ld  bc,PAGETABLE
 1844 D1:C482 09 -  -  -          add hl,bc
 1845 D1:C483 ED 27 -  -          ld  hl,(hl)     ;address get.
 1846 D1:C485 01 00 00 00         ld  bc,0
 1847 D1:C489 4F -  -  -          ld  c,a
 1848 D1:C48A 09 -  -  -          add hl,bc       ;Full address get.
 1849 D1:C48B CD 40 AE D1         READ_ACCESS
 1850 D1:C48F E1 -  -  -      pop hl
 1851 D1:C490 DD AE 00 -      xor a,(ix+REGA)
 1852 D1:C493 DD 77 00 -      ld  (ix+REGA),A
 1853 D1:C496 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1854 D1:C4AA C3 CF B6 D1     jp i6502NextLoad
 1855 D1:C4AE -  -  -  -  
 1856 D1:C4AE -  -  -  -  ;-----------------------------------------------------------------------------
 1857 D1:C4AE -  -  -  -  ;ORA - OR Memory with Accumulator
 1858 D1:C4AE -  -  -  -  ;A OR M -> A
 1859 D1:C4AE -  -  -  -  ;N	Z	C	I	D	V
 1860 D1:C4AE -  -  -  -  ;+	+	-	-	-	-
 1861 D1:C4AE -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1862 D1:C4AE -  -  -  -  
 1863 D1:C4AE -  -  -  -  ;immediate	ORA #oper	09	2	2  
 1864 D1:C4AE -  -  -  -  inst6502_ora_imm:
 1865 D1:C4AE ED 33 02 -      ADDCYC(2)
 1866 D1:C4B1 7E -  -  -      ld  a,(hl)
 1867 D1:C4B2 DD B6 00 -      or  a,(ix+REGA)
 1868 D1:C4B5 DD 77 00 -      ld  (ix+REGA),A
 1869 D1:C4B8 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1870 D1:C4CC C3 CF B6 D1     jp i6502NextLoad
 1871 D1:C4D0 -  -  -  -  
 1872 D1:C4D0 -  -  -  -  ;zeropage	ORA oper	05	2	3  
 1873 D1:C4D0 -  -  -  -  inst6502_ora_zp:
 1874 D1:C4D0 ED 33 03 -      ADDCYC(3)
 1875 D1:C4D3 7E -  -  -      ld  a,(hl)
 1876 D1:C4D4 01 00 38 D0     ld  bc,ZEROPAGE
 1877 D1:C4D8 81 -  -  -      add a,c
 1878 D1:C4D9 4F -  -  -      ld  c,a
 1879 D1:C4DA 0A -  -  -      ld  a,(bc)
 1880 D1:C4DB DD B6 00 -      or  a,(ix+REGA)
 1881 D1:C4DE DD 77 00 -      ld  (ix+REGA),A
 1882 D1:C4E1 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1883 D1:C4F5 C3 CF B6 D1     jp i6502NextLoad
 1884 D1:C4F9 -  -  -  -  
 1885 D1:C4F9 -  -  -  -  ;zeropage,X	ORA oper,X	15	2	4  
 1886 D1:C4F9 -  -  -  -  inst6502_ora_zpx:
 1887 D1:C4F9 ED 33 04 -      ADDCYC(4)
 1888 D1:C4FC 7E -  -  -      ld  a,(hl)
 1889 D1:C4FD 01 00 38 D0     ld  bc,ZEROPAGE
 1890 D1:C501 81 -  -  -      add a,c
 1891 D1:C502 DD 86 01 -      add a,(ix+REGX)
 1892 D1:C505 4F -  -  -      ld  c,a
 1893 D1:C506 0A -  -  -      ld  a,(bc)
 1894 D1:C507 DD B6 00 -      or  a,(ix+REGA)
 1895 D1:C50A DD 77 00 -      ld  (ix+REGA),A
 1896 D1:C50D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1897 D1:C521 C3 CF B6 D1     jp i6502NextLoad
 1898 D1:C525 -  -  -  -  
 1899 D1:C525 -  -  -  -  ;absolute	ORA oper	0D	3	4  
 1900 D1:C525 -  -  -  -  inst6502_ora_abs:
 1901 D1:C525 ED 33 04 -      ADDCYC(4)
 1902 D1:C528 CD 77 B7 D1     call subroutine6502_abs_split_start
 1903 D1:C52C E5 -  -  -      push hl
 1904 D1:C52D 50 -  -  -          ld  d,b
 1905 D1:C52E 79 -  -  -          ld  a,c
 1906 D1:C52F 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1907 D1:C531 ED 4C -  -          mlt bc
 1908 D1:C533 21 00 40 D0         ld  hl,PAGETABLE
 1909 D1:C537 09 -  -  -          add hl,bc
 1910 D1:C538 ED 27 -  -          ld  hl,(hl)
 1911 D1:C53A 06 00 -  -          ld  b,0
 1912 D1:C53C 4F -  -  -          ld  c,a
 1913 D1:C53D 09 -  -  -          add hl,bc   ;full address
 1914 D1:C53E CD 40 AE D1         READ_ACCESS
 1915 D1:C542 E1 -  -  -      pop hl
 1916 D1:C543 DD B6 00 -      or  a,(ix+REGA)
 1917 D1:C546 DD 77 00 -      ld  (ix+REGA),A
 1918 D1:C549 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1919 D1:C55D C3 CF B6 D1     jp i6502NextLoad
 1920 D1:C561 -  -  -  -  
 1921 D1:C561 -  -  -  -  ;absolute,X	ORA oper,X	1D	3	4* 
 1922 D1:C561 -  -  -  -  inst6502_ora_absx:
 1923 D1:C561 ED 33 04 -      ADDCYC(4)
 1924 D1:C564 CD 98 B7 D1     PUSH_ABSXSPLIT
 1925 D1:C568 CD 40 AE D1         READ_ACCESS
 1926 D1:C56C DD B6 00 -          or  a,(ix+REGA)
 1927 D1:C56F DD 77 00 -          ld  (ix+REGA),A
 1928 D1:C572 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1929 D1:C586 E1 -  -  -      pop hl
 1930 D1:C587 C3 CF B6 D1     jp i6502NextLoad
 1931 D1:C58B -  -  -  -  
 1932 D1:C58B -  -  -  -  ;absolute,Y	ORA oper,Y	19	3	4* 
 1933 D1:C58B -  -  -  -  inst6502_ora_absy:
 1934 D1:C58B ED 33 04 -      ADDCYC(4)
 1935 D1:C58E CD 93 B7 D1     PUSH_ABSYSPLIT
 1936 D1:C592 CD 40 AE D1         READ_ACCESS
 1937 D1:C596 E1 -  -  -      pop hl
 1938 D1:C597 DD B6 00 -      or  a,(ix+REGA)
 1939 D1:C59A DD 77 00 -      ld  (ix+REGA),A
 1940 D1:C59D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1941 D1:C5B1 C3 CF B6 D1     jp i6502NextLoad
 1942 D1:C5B5 -  -  -  -  
 1943 D1:C5B5 -  -  -  -  ;(indirect,X)	ORA (oper,X)	01	2	6  
 1944 D1:C5B5 -  -  -  -  inst6502_ora_indx:
 1945 D1:C5B5 ED 33 06 -      ADDCYC(6)
 1946 D1:C5B8 E5 -  -  -      push hl
 1947 D1:C5B9 7E -  -  -          ld  a,(hl)
 1948 D1:C5BA 21 00 38 D0         ld  hl,ZEROPAGE
 1949 D1:C5BE 85 -  -  -          add a,L
 1950 D1:C5BF DD 86 01 -          add a,(ix+REGX)
 1951 D1:C5C2 6F -  -  -          ld  L,a
 1952 D1:C5C3 7E -  -  -          ld  a,(hl)
 1953 D1:C5C4 2C -  -  -          inc L
 1954 D1:C5C5 56 -  -  -          ld  d,(hl)
 1955 D1:C5C6 42 -  -  -          ld  b,d
 1956 D1:C5C7 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1957 D1:C5C9 ED 4C -  -          mlt bc
 1958 D1:C5CB 21 00 40 D0         ld  hl,PAGETABLE
 1959 D1:C5CF 09 -  -  -          add hl,bc
 1960 D1:C5D0 ED 27 -  -          ld  hl,(hl)
 1961 D1:C5D2 06 00 -  -          ld  b,0
 1962 D1:C5D4 4F -  -  -          ld  c,a
 1963 D1:C5D5 09 -  -  -          add hl,bc
 1964 D1:C5D6 CD 40 AE D1         READ_ACCESS
 1965 D1:C5DA E1 -  -  -      pop hl
 1966 D1:C5DB DD B6 00 -      or  a,(ix+REGA)
 1967 D1:C5DE DD 77 00 -      ld  (ix+REGA),A
 1968 D1:C5E1 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1969 D1:C5F5 C3 CF B6 D1     jp i6502NextLoad
 1970 D1:C5F9 -  -  -  -  
 1971 D1:C5F9 -  -  -  -  ;(indirect),Y	ORA (oper),Y	11	2	5* 
 1972 D1:C5F9 -  -  -  -  inst6502_ora_indy:
 1973 D1:C5F9 ED 33 05 -      ADDCYC(5)
 1974 D1:C5FC E5 -  -  -      push hl
 1975 D1:C5FD 7E -  -  -          ld  a,(hl)
 1976 D1:C5FE 21 00 38 D0         ld  hl,ZEROPAGE
 1977 D1:C602 85 -  -  -          add a,L
 1978 D1:C603 6F -  -  -          ld  L,a
 1979 D1:C604 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1980 D1:C605 2C -  -  -          inc L
 1981 D1:C606 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1982 D1:C609 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1983 D1:C60A 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1984 D1:C60C 24 -  -  -          inc h
 1985 D1:C60D FD 23 -  -          ADDCYC(1)
 1986 D1:C60F 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1987 D1:C610 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1988 D1:C612 ED 6C -  -          mlt hl          ;23.
 1989 D1:C614 01 00 40 D0         ld  bc,PAGETABLE
 1990 D1:C618 09 -  -  -          add hl,bc
 1991 D1:C619 ED 27 -  -          ld  hl,(hl)     ;address get.
 1992 D1:C61B 01 00 00 00         ld  bc,0
 1993 D1:C61F 4F -  -  -          ld  c,a
 1994 D1:C620 09 -  -  -          add hl,bc       ;Full address get.
 1995 D1:C621 CD 40 AE D1         READ_ACCESS
 1996 D1:C625 E1 -  -  -      pop hl
 1997 D1:C626 DD B6 00 -      or  a,(ix+REGA)
 1998 D1:C629 DD 77 00 -      ld  (ix+REGA),A
 1999 D1:C62C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2000 D1:C640 C3 CF B6 D1     jp i6502NextLoad
 2001 D1:C644 -  -  -  -  
 2002 D1:C644 -  -  -  -  ;-----------------------------------------------------------------------------
 2003 D1:C644 -  -  -  -  ;-----------------------------------------------------------------------------
 2004 D1:C644 -  -  -  -  ;-----------------------------------------------------------------------------
 2005 D1:C644 -  -  -  -  ;Instructions by type: Shift & Rotate Instructions
 2006 D1:C644 -  -  -  -  ;ASL - Shift Left One Bit (Memory or Accumulator)
 2007 D1:C644 -  -  -  -  ;C <- [76543210] <- 0
 2008 D1:C644 -  -  -  -  ;N	Z	C	I	D	V
 2009 D1:C644 -  -  -  -  ;+	+	+	-	-	-
 2010 D1:C644 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2011 D1:C644 -  -  -  -  
 2012 D1:C644 -  -  -  -  ;accumulator	ASL A	0A	1	2  
 2013 D1:C644 -  -  -  -  inst6502_asl:
 2014 D1:C644 ED 33 02 -      ADDCYC(2)
 2015 D1:C647 DD 7E 00 -      ld  a,(ix+REGA)
 2016 D1:C64A CB 27 -  -      sla a
 2017 D1:C64C DD 77 00 -      ld  (ix+REGA),a
 2018 D1:C64F DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2019 D1:C669 C3 E8 B6 D1     jp i6502FinishLoad
 2020 D1:C66D -  -  -  -  
 2021 D1:C66D -  -  -  -  ;zeropage	ASL oper	06	2	5  
 2022 D1:C66D -  -  -  -  inst6502_asl_zp:
 2023 D1:C66D ED 33 05 -      ADDCYC(5)
 2024 D1:C670 7E -  -  -      ld  a,(hl)
 2025 D1:C671 01 00 38 D0     ld  bc,ZEROPAGE
 2026 D1:C675 81 -  -  -      add a,c
 2027 D1:C676 4F -  -  -      ld  c,a
 2028 D1:C677 0A -  -  -      ld  a,(bc)
 2029 D1:C678 CB 27 -  -      sla a
 2030 D1:C67A 02 -  -  -      ld  (bc),a
 2031 D1:C67B DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2032 D1:C695 C3 CF B6 D1     jp i6502NextLoad
 2033 D1:C699 -  -  -  -  
 2034 D1:C699 -  -  -  -  ;zeropage,X	ASL oper,X	16	2	6  
 2035 D1:C699 -  -  -  -  inst6502_asl_zpx:
 2036 D1:C699 ED 33 06 -      ADDCYC(6)
 2037 D1:C69C 7E -  -  -      ld  a,(hl)
 2038 D1:C69D 01 00 38 D0     ld  bc,ZEROPAGE
 2039 D1:C6A1 81 -  -  -      add a,c
 2040 D1:C6A2 DD 86 01 -      add a,(ix+REGX)
 2041 D1:C6A5 4F -  -  -      ld  c,a
 2042 D1:C6A6 0A -  -  -      ld  a,(bc)
 2043 D1:C6A7 CB 27 -  -      sla a
 2044 D1:C6A9 02 -  -  -      ld  (bc),a
 2045 D1:C6AA DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2046 D1:C6C4 C3 CF B6 D1     jp i6502NextLoad
 2047 D1:C6C8 -  -  -  -  
 2048 D1:C6C8 -  -  -  -  ;absolute	ASL oper	0E	3	6  
 2049 D1:C6C8 -  -  -  -  inst6502_asl_abs:
 2050 D1:C6C8 ED 33 06 -      ADDCYC(6)
 2051 D1:C6CB CD 77 B7 D1     call subroutine6502_abs_split_start
 2052 D1:C6CF E5 -  -  -      push hl
 2053 D1:C6D0 50 -  -  -          ld  d,b
 2054 D1:C6D1 79 -  -  -          ld  a,c
 2055 D1:C6D2 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2056 D1:C6D4 ED 4C -  -          mlt bc
 2057 D1:C6D6 21 00 40 D0         ld  hl,PAGETABLE
 2058 D1:C6DA 09 -  -  -          add hl,bc
 2059 D1:C6DB ED 27 -  -          ld  hl,(hl)
 2060 D1:C6DD 06 00 -  -          ld  b,0
 2061 D1:C6DF 4F -  -  -          ld  c,a
 2062 D1:C6E0 09 -  -  -          add hl,bc   ;full address
 2063 D1:C6E1 CD 40 AE D1         READ_ACCESS
 2064 D1:C6E5 CB 27 -  -          sla a
 2065 D1:C6E7 4F -  -  -          ld  c,a
 2066 D1:C6E8 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2067 D1:C702 41 -  -  -          ld  b,c
 2068 D1:C703 CD E2 AE D1         WRITE_ACCESS
 2069 D1:C707 E1 -  -  -      pop hl
 2070 D1:C708 C3 CF B6 D1     jp i6502NextLoad
 2071 D1:C70C -  -  -  -  
 2072 D1:C70C -  -  -  -  ;absolute,X	ASL oper,X	1E	3	7  
 2073 D1:C70C -  -  -  -  inst6502_asl_absx:
 2074 D1:C70C ED 33 07 -      ADDCYC(7)
 2075 D1:C70F CD D4 B7 D1     PUSH_ABSXSPLIT_NODEP
 2076 D1:C713 CD 40 AE D1         READ_ACCESS
 2077 D1:C717 CB 27 -  -          sla a
 2078 D1:C719 4F -  -  -          ld  c,a
 2079 D1:C71A DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2080 D1:C734 41 -  -  -          ld  b,c
 2081 D1:C735 CD E2 AE D1         WRITE_ACCESS
 2082 D1:C739 E1 -  -  -      pop hl
 2083 D1:C73A C3 CF B6 D1     jp i6502NextLoad
 2084 D1:C73E -  -  -  -  
 2085 D1:C73E -  -  -  -  ;-----------------------------------------------------------------------------
 2086 D1:C73E -  -  -  -  ;LSR - Shift One Bit Right (Memory or Accumulator)
 2087 D1:C73E -  -  -  -  ;0 -> [76543210] -> C
 2088 D1:C73E -  -  -  -  ;N	Z	C	I	D	V
 2089 D1:C73E -  -  -  -  ;0	+	+	-	-	-
 2090 D1:C73E -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2091 D1:C73E -  -  -  -  
 2092 D1:C73E -  -  -  -  ;accumulator	LSR A	4A	1	2  
 2093 D1:C73E -  -  -  -  inst6502_lsr:
 2094 D1:C73E ED 33 02 -      ADDCYC(2)
 2095 D1:C741 DD 7E 00 -      ld  a,(ix+REGA)
 2096 D1:C744 CB 3F -  -      srl a
 2097 D1:C746 DD 77 00 -      ld  (ix+REGA),a
 2098 D1:C749 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2099 D1:C763 C3 E8 B6 D1     jp i6502FinishLoad
 2100 D1:C767 -  -  -  -  
 2101 D1:C767 -  -  -  -  ;zeropage	LSR oper	46	2	5  
 2102 D1:C767 -  -  -  -  inst6502_lsr_zp:
 2103 D1:C767 ED 33 05 -      ADDCYC(5)
 2104 D1:C76A 7E -  -  -      ld  a,(hl)
 2105 D1:C76B 01 00 38 D0     ld  bc,ZEROPAGE
 2106 D1:C76F 81 -  -  -      add a,c
 2107 D1:C770 4F -  -  -      ld  c,a
 2108 D1:C771 0A -  -  -      ld  a,(bc)
 2109 D1:C772 CB 3F -  -      srl a
 2110 D1:C774 02 -  -  -      ld  (bc),a
 2111 D1:C775 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2112 D1:C78F C3 CF B6 D1     jp i6502NextLoad
 2113 D1:C793 -  -  -  -  
 2114 D1:C793 -  -  -  -  ;zeropage,X	LSR oper,X	56	2	6  
 2115 D1:C793 -  -  -  -  inst6502_lsr_zpx:
 2116 D1:C793 ED 33 06 -      ADDCYC(6)
 2117 D1:C796 7E -  -  -      ld  a,(hl)
 2118 D1:C797 01 00 38 D0     ld  bc,ZEROPAGE
 2119 D1:C79B 81 -  -  -      add a,c
 2120 D1:C79C DD 86 01 -      add a,(ix+REGX)
 2121 D1:C79F 4F -  -  -      ld  c,a
 2122 D1:C7A0 0A -  -  -      ld  a,(bc)
 2123 D1:C7A1 CB 3F -  -      srl a
 2124 D1:C7A3 02 -  -  -      ld  (bc),a
 2125 D1:C7A4 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2126 D1:C7BE C3 CF B6 D1     jp i6502NextLoad
 2127 D1:C7C2 -  -  -  -      
 2128 D1:C7C2 -  -  -  -  ;absolute	LSR oper	4E	3	6  
 2129 D1:C7C2 -  -  -  -  inst6502_lsr_abs:
 2130 D1:C7C2 ED 33 06 -      ADDCYC(6)
 2131 D1:C7C5 CD 77 B7 D1     call subroutine6502_abs_split_start
 2132 D1:C7C9 E5 -  -  -      push hl
 2133 D1:C7CA 50 -  -  -          ld  d,b
 2134 D1:C7CB 79 -  -  -          ld  a,c
 2135 D1:C7CC 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2136 D1:C7CE ED 4C -  -          mlt bc
 2137 D1:C7D0 21 00 40 D0         ld  hl,PAGETABLE
 2138 D1:C7D4 09 -  -  -          add hl,bc
 2139 D1:C7D5 ED 27 -  -          ld  hl,(hl)
 2140 D1:C7D7 06 00 -  -          ld  b,0
 2141 D1:C7D9 4F -  -  -          ld  c,a
 2142 D1:C7DA 09 -  -  -          add hl,bc   ;full address
 2143 D1:C7DB CD 40 AE D1         READ_ACCESS
 2144 D1:C7DF CB 3F -  -          srl a
 2145 D1:C7E1 4F -  -  -          ld  c,a
 2146 D1:C7E2 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2147 D1:C7FC 41 -  -  -          ld  b,c
 2148 D1:C7FD CD E2 AE D1         WRITE_ACCESS
 2149 D1:C801 E1 -  -  -      pop hl
 2150 D1:C802 C3 CF B6 D1     jp i6502NextLoad
 2151 D1:C806 -  -  -  -  
 2152 D1:C806 -  -  -  -  ;absolute,X	LSR oper,X	5E	3	7  
 2153 D1:C806 -  -  -  -  inst6502_lsr_absx:
 2154 D1:C806 ED 33 07 -      ADDCYC(7)
 2155 D1:C809 CD D4 B7 D1     PUSH_ABSXSPLIT_NODEP
 2156 D1:C80D CD 40 AE D1         READ_ACCESS
 2157 D1:C811 CB 3F -  -          srl a
 2158 D1:C813 4F -  -  -          ld  c,a
 2159 D1:C814 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2160 D1:C82E 41 -  -  -          ld  b,c
 2161 D1:C82F CD E2 AE D1         WRITE_ACCESS
 2162 D1:C833 E1 -  -  -      pop hl
 2163 D1:C834 C3 CF B6 D1     jp i6502NextLoad
 2164 D1:C838 -  -  -  -  
 2165 D1:C838 -  -  -  -  ;-----------------------------------------------------------------------------
 2166 D1:C838 -  -  -  -  ;ROL - Rotate One Bit Left (Memory or Accumulator)
 2167 D1:C838 -  -  -  -  ;C <- [76543210] <- C
 2168 D1:C838 -  -  -  -  ;N	Z	C	I	D	V
 2169 D1:C838 -  -  -  -  ;+	+	+	-	-	-
 2170 D1:C838 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2171 D1:C838 -  -  -  -  
 2172 D1:C838 -  -  -  -  ;accumulator	ROL A	2A	1	2  
 2173 D1:C838 -  -  -  -  inst6502_rol:
 2174 D1:C838 ED 33 02 -      ADDCYC(2)
 2175 D1:C83B DD 7E 04 -      ld  a,(ix+REGSR)
 2176 D1:C83E 1F -  -  -      rra
 2177 D1:C83F DD CB 00 16     rl  (ix+REGA)
 2178 D1:C843 DD 7E 00 -      ld  a,(ix+REGA)
 2179 D1:C846 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2180 D1:C860 C3 E8 B6 D1     jp i6502FinishLoad
 2181 D1:C864 -  -  -  -  
 2182 D1:C864 -  -  -  -  ;zeropage	ROL oper	26	2	5  
 2183 D1:C864 -  -  -  -  inst6502_rol_zp:
 2184 D1:C864 ED 33 05 -      ADDCYC(5)
 2185 D1:C867 7E -  -  -      ld  a,(hl)
 2186 D1:C868 01 00 38 D0     ld  bc,ZEROPAGE
 2187 D1:C86C 81 -  -  -      add a,c
 2188 D1:C86D 4F -  -  -      ld  c,a
 2189 D1:C86E DD 7E 04 -      ld  a,(ix+REGSR)
 2190 D1:C871 1F -  -  -      rra
 2191 D1:C872 0A -  -  -      ld  a,(bc)
 2192 D1:C873 17 -  -  -      rla
 2193 D1:C874 02 -  -  -      ld  (bc),a
 2194 D1:C875 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2195 D1:C88F C3 CF B6 D1     jp i6502NextLoad
 2196 D1:C893 -  -  -  -  
 2197 D1:C893 -  -  -  -  ;zeropage,X	ROL oper,X	36	2	6  
 2198 D1:C893 -  -  -  -  inst6502_rol_zpx:
 2199 D1:C893 ED 33 06 -      ADDCYC(6)
 2200 D1:C896 7E -  -  -      ld  a,(hl)
 2201 D1:C897 01 00 38 D0     ld  bc,ZEROPAGE
 2202 D1:C89B 81 -  -  -      add a,c
 2203 D1:C89C DD 86 01 -      add a,(ix+REGX)
 2204 D1:C89F 4F -  -  -      ld  c,a
 2205 D1:C8A0 DD 7E 04 -      ld  a,(ix+REGSR)
 2206 D1:C8A3 1F -  -  -      rra
 2207 D1:C8A4 0A -  -  -      ld  a,(bc)
 2208 D1:C8A5 17 -  -  -      rla
 2209 D1:C8A6 02 -  -  -      ld  (bc),a
 2210 D1:C8A7 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2211 D1:C8C1 C3 CF B6 D1     jp i6502NextLoad
 2212 D1:C8C5 -  -  -  -  
 2213 D1:C8C5 -  -  -  -  ;absolute	ROL oper	2E	3	6  
 2214 D1:C8C5 -  -  -  -  inst6502_rol_abs:
 2215 D1:C8C5 ED 33 06 -      ADDCYC(6)
 2216 D1:C8C8 CD 77 B7 D1     call subroutine6502_abs_split_start
 2217 D1:C8CC E5 -  -  -      push hl
 2218 D1:C8CD 50 -  -  -          ld  d,b
 2219 D1:C8CE 79 -  -  -          ld  a,c
 2220 D1:C8CF 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2221 D1:C8D1 ED 4C -  -          mlt bc
 2222 D1:C8D3 21 00 40 D0         ld  hl,PAGETABLE
 2223 D1:C8D7 09 -  -  -          add hl,bc
 2224 D1:C8D8 ED 27 -  -          ld  hl,(hl)
 2225 D1:C8DA 06 00 -  -          ld  b,0
 2226 D1:C8DC 4F -  -  -          ld  c,a
 2227 D1:C8DD 09 -  -  -          add hl,bc   ;full address
 2228 D1:C8DE CD 40 AE D1         READ_ACCESS
 2229 D1:C8E2 DD 46 04 -          ld  b,(ix+REGSR)
 2230 D1:C8E5 CB 18 -  -          rr b
 2231 D1:C8E7 17 -  -  -          rla
 2232 D1:C8E8 4F -  -  -          ld  c,a
 2233 D1:C8E9 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2234 D1:C903 41 -  -  -          ld  b,c
 2235 D1:C904 CD E2 AE D1         WRITE_ACCESS
 2236 D1:C908 E1 -  -  -      pop hl
 2237 D1:C909 C3 CF B6 D1     jp i6502NextLoad
 2238 D1:C90D -  -  -  -  
 2239 D1:C90D -  -  -  -  ;absolute,X	ROL oper,X	3E	3	7  
 2240 D1:C90D -  -  -  -  inst6502_rol_absx:
 2241 D1:C90D ED 33 07 -      ADDCYC(7)
 2242 D1:C910 CD D4 B7 D1     PUSH_ABSXSPLIT_NODEP
 2243 D1:C914 CD 40 AE D1         READ_ACCESS
 2244 D1:C918 DD 46 04 -          ld  b,(ix+REGSR)
 2245 D1:C91B CB 18 -  -          rr b
 2246 D1:C91D 17 -  -  -          rla
 2247 D1:C91E 4F -  -  -          ld  c,a
 2248 D1:C91F DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2249 D1:C939 41 -  -  -          ld  b,c
 2250 D1:C93A CD E2 AE D1         WRITE_ACCESS
 2251 D1:C93E E1 -  -  -      pop hl
 2252 D1:C93F C3 CF B6 D1     jp i6502NextLoad
 2253 D1:C943 -  -  -  -  
 2254 D1:C943 -  -  -  -  ;-----------------------------------------------------------------------------
 2255 D1:C943 -  -  -  -  ;ROR - Rotate One Bit Right (Memory or Accumulator)
 2256 D1:C943 -  -  -  -  ;C -> [76543210] -> C
 2257 D1:C943 -  -  -  -  ;N	Z	C	I	D	V
 2258 D1:C943 -  -  -  -  ;+	+	+	-	-	-
 2259 D1:C943 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2260 D1:C943 -  -  -  -  
 2261 D1:C943 -  -  -  -  ;accumulator	ROR A	6A	1	2  
 2262 D1:C943 -  -  -  -  inst6502_ror:
 2263 D1:C943 ED 33 02 -      ADDCYC(2)
 2264 D1:C946 DD 7E 04 -      ld  a,(ix+REGSR)
 2265 D1:C949 1F -  -  -      rra
 2266 D1:C94A DD CB 00 1E     rr  (ix+REGA)
 2267 D1:C94E DD 7E 00 -      ld  a,(ix+REGA)
 2268 D1:C951 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2269 D1:C96B C3 E8 B6 D1     jp i6502FinishLoad
 2270 D1:C96F -  -  -  -  
 2271 D1:C96F -  -  -  -  ;zeropage	ROR oper	66	2	5  
 2272 D1:C96F -  -  -  -  inst6502_ror_zp:
 2273 D1:C96F ED 33 05 -      ADDCYC(5)
 2274 D1:C972 7E -  -  -      ld  a,(hl)
 2275 D1:C973 01 00 38 D0     ld  bc,ZEROPAGE
 2276 D1:C977 81 -  -  -      add a,c
 2277 D1:C978 4F -  -  -      ld  c,a
 2278 D1:C979 DD 7E 04 -      ld  a,(ix+REGSR)
 2279 D1:C97C 1F -  -  -      rra
 2280 D1:C97D 0A -  -  -      ld  a,(bc)
 2281 D1:C97E 1F -  -  -      rra
 2282 D1:C97F 02 -  -  -      ld  (bc),a
 2283 D1:C980 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2284 D1:C99A C3 CF B6 D1     jp i6502NextLoad
 2285 D1:C99E -  -  -  -  
 2286 D1:C99E -  -  -  -  ;zeropage,X	ROR oper,X	76	2	6  
 2287 D1:C99E -  -  -  -  inst6502_ror_zpx:
 2288 D1:C99E ED 33 06 -      ADDCYC(6)
 2289 D1:C9A1 7E -  -  -      ld  a,(hl)
 2290 D1:C9A2 01 00 38 D0     ld  bc,ZEROPAGE
 2291 D1:C9A6 81 -  -  -      add a,c
 2292 D1:C9A7 DD 86 01 -      add a,(ix+REGX)
 2293 D1:C9AA 4F -  -  -      ld  c,a
 2294 D1:C9AB DD 7E 04 -      ld  a,(ix+REGSR)
 2295 D1:C9AE 1F -  -  -      rra
 2296 D1:C9AF 0A -  -  -      ld  a,(bc)
 2297 D1:C9B0 1F -  -  -      rra
 2298 D1:C9B1 02 -  -  -      ld  (bc),a
 2299 D1:C9B2 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2300 D1:C9CC C3 CF B6 D1     jp i6502NextLoad
 2301 D1:C9D0 -  -  -  -  
 2302 D1:C9D0 -  -  -  -  ;absolute	ROR oper	6E	3	6  
 2303 D1:C9D0 -  -  -  -  inst6502_ror_abs:
 2304 D1:C9D0 ED 33 06 -      ADDCYC(6)
 2305 D1:C9D3 CD 77 B7 D1     call subroutine6502_abs_split_start
 2306 D1:C9D7 E5 -  -  -      push hl
 2307 D1:C9D8 50 -  -  -          ld  d,b
 2308 D1:C9D9 79 -  -  -          ld  a,c
 2309 D1:C9DA 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2310 D1:C9DC ED 4C -  -          mlt bc
 2311 D1:C9DE 21 00 40 D0         ld  hl,PAGETABLE
 2312 D1:C9E2 09 -  -  -          add hl,bc
 2313 D1:C9E3 ED 27 -  -          ld  hl,(hl)
 2314 D1:C9E5 06 00 -  -          ld  b,0
 2315 D1:C9E7 4F -  -  -          ld  c,a
 2316 D1:C9E8 09 -  -  -          add hl,bc   ;full address
 2317 D1:C9E9 CD 40 AE D1         READ_ACCESS
 2318 D1:C9ED DD 46 04 -          ld  b,(ix+REGSR)
 2319 D1:C9F0 CB 18 -  -          rr b
 2320 D1:C9F2 1F -  -  -          rra
 2321 D1:C9F3 4F -  -  -          ld  c,a
 2322 D1:C9F4 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2323 D1:CA0E 41 -  -  -          ld  b,c
 2324 D1:CA0F CD E2 AE D1         WRITE_ACCESS
 2325 D1:CA13 E1 -  -  -      pop hl
 2326 D1:CA14 C3 CF B6 D1     jp i6502NextLoad
 2327 D1:CA18 -  -  -  -  
 2328 D1:CA18 -  -  -  -  ;absolute,X	ROR oper,X	7E	3	7  
 2329 D1:CA18 -  -  -  -  inst6502_ror_absx:
 2330 D1:CA18 ED 33 07 -      ADDCYC(7)
 2331 D1:CA1B CD D4 B7 D1     PUSH_ABSXSPLIT_NODEP
 2332 D1:CA1F CD 40 AE D1         READ_ACCESS
 2333 D1:CA23 DD 46 04 -          ld  b,(ix+REGSR)
 2334 D1:CA26 CB 18 -  -          rr b
 2335 D1:CA28 1F -  -  -          rra
 2336 D1:CA29 4F -  -  -          ld  c,a
 2337 D1:CA2A DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2338 D1:CA44 41 -  -  -          ld  b,c
 2339 D1:CA45 CD E2 AE D1         WRITE_ACCESS
 2340 D1:CA49 E1 -  -  -      pop hl
 2341 D1:CA4A C3 CF B6 D1     jp i6502NextLoad
 2342 D1:CA4E -  -  -  -  
 2343 D1:CA4E -  -  -  -  ;-----------------------------------------------------------------------------
 2344 D1:CA4E -  -  -  -  ;-----------------------------------------------------------------------------
 2345 D1:CA4E -  -  -  -  ;-----------------------------------------------------------------------------
 2346 D1:CA4E -  -  -  -  ;Instructions by type: Flag Instructions
 2347 D1:CA4E -  -  -  -  
 2348 D1:CA4E -  -  -  -  ;CLC - Clear Carry Flag
 2349 D1:CA4E -  -  -  -  ;0 -> C
 2350 D1:CA4E -  -  -  -  ;N	Z	C	I	D	V
 2351 D1:CA4E -  -  -  -  ;-	-	0	-	-	-
 2352 D1:CA4E -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2353 D1:CA4E -  -  -  -  ;implied	CLC	18	1	2  
 2354 D1:CA4E -  -  -  -  inst6502_clc:
 2355 D1:CA4E ED 33 02 -      ADDCYC(2)
 2356 D1:CA51 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 2357 D1:CA55 C3 E8 B6 D1     jp  i6502FinishLoad
 2358 D1:CA59 -  -  -  -  
 2359 D1:CA59 -  -  -  -  ;CLD - Clear Decimal Mode
 2360 D1:CA59 -  -  -  -  ;0 -> D
 2361 D1:CA59 -  -  -  -  ;N	Z	C	I	D	V
 2362 D1:CA59 -  -  -  -  ;-	-	-	-	0	-
 2363 D1:CA59 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2364 D1:CA59 -  -  -  -  ;implied	CLD	D8	1	2  
 2365 D1:CA59 -  -  -  -  inst6502_cld:
 2366 D1:CA59 ED 33 02 -      ADDCYC(2)
 2367 D1:CA5C DD CB 04 9E     res SF_DEC,(ix+REGSR)
 2368 D1:CA60 C3 E8 B6 D1     jp  i6502FinishLoad
 2369 D1:CA64 -  -  -  -  
 2370 D1:CA64 -  -  -  -  ;CLI -  Clear Interrupt Disable Bit
 2371 D1:CA64 -  -  -  -  ;0 -> I
 2372 D1:CA64 -  -  -  -  ;N	Z	C	I	D	V
 2373 D1:CA64 -  -  -  -  ;-	-	-	0	-	-
 2374 D1:CA64 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2375 D1:CA64 -  -  -  -  ;implied	CLI	58	1	2  
 2376 D1:CA64 -  -  -  -  inst6502_cli:
 2377 D1:CA64 ED 33 02 -      ADDCYC(2)
 2378 D1:CA67 DD CB 04 96     res SF_INT,(ix+REGSR)
 2379 D1:CA6B C3 E8 B6 D1     jp  i6502FinishLoad
 2380 D1:CA6F -  -  -  -  
 2381 D1:CA6F -  -  -  -  ;CLV - Clear Overflow Flag
 2382 D1:CA6F -  -  -  -  ;0 -> V
 2383 D1:CA6F -  -  -  -  ;N	Z	C	I	D	V
 2384 D1:CA6F -  -  -  -  ;-	-	-	-	-	0
 2385 D1:CA6F -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2386 D1:CA6F -  -  -  -  ;implied	CLV	B8	1	2  
 2387 D1:CA6F -  -  -  -  inst6502_clv:
 2388 D1:CA6F ED 33 02 -      ADDCYC(2)
 2389 D1:CA72 DD CB 04 B6     res SF_OVER,(ix+REGSR)
 2390 D1:CA76 C3 E8 B6 D1     jp  i6502FinishLoad
 2391 D1:CA7A -  -  -  -  
 2392 D1:CA7A -  -  -  -  ;SEC - Set Carry Flag
 2393 D1:CA7A -  -  -  -  ;1 -> C
 2394 D1:CA7A -  -  -  -  ;N	Z	C	I	D	V
 2395 D1:CA7A -  -  -  -  ;-	-	1	-	-	-
 2396 D1:CA7A -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2397 D1:CA7A -  -  -  -  ;implied	SEC	38	1	2  
 2398 D1:CA7A -  -  -  -  inst6502_sec:
 2399 D1:CA7A ED 33 02 -      ADDCYC(2)
 2400 D1:CA7D DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 2401 D1:CA81 C3 E8 B6 D1     jp  i6502FinishLoad
 2402 D1:CA85 -  -  -  -  
 2403 D1:CA85 -  -  -  -  ;SED - Set Decimal Flag
 2404 D1:CA85 -  -  -  -  ;1 -> D
 2405 D1:CA85 -  -  -  -  ;N	Z	C	I	D	V
 2406 D1:CA85 -  -  -  -  ;-	-	-	-	1	-
 2407 D1:CA85 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2408 D1:CA85 -  -  -  -  ;implied	SED	F8	1	2  
 2409 D1:CA85 -  -  -  -  inst6502_sed:
 2410 D1:CA85 ED 33 02 -      ADDCYC(2)
 2411 D1:CA88 DD CB 04 DE     set SF_DEC,(ix+REGSR)
 2412 D1:CA8C C3 E8 B6 D1     jp  i6502FinishLoad
 2413 D1:CA90 -  -  -  -  
 2414 D1:CA90 -  -  -  -  ;SEI - Set Interrupt Disable Status
 2415 D1:CA90 -  -  -  -  ;1 -> I
 2416 D1:CA90 -  -  -  -  ;N	Z	C	I	D	V
 2417 D1:CA90 -  -  -  -  ;-	-	-	1	-	-
 2418 D1:CA90 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2419 D1:CA90 -  -  -  -  ;implied	SEI	78	1	2  
 2420 D1:CA90 -  -  -  -  inst6502_sei:
 2421 D1:CA90 ED 33 02 -      ADDCYC(2)
 2422 D1:CA93 DD CB 04 D6     set SF_INT,(ix+REGSR)
 2423 D1:CA97 C3 E8 B6 D1     jp  i6502FinishLoad
 2424 D1:CA9B -  -  -  -  
 2425 D1:CA9B -  -  -  -  ;-----------------------------------------------------------------------------
 2426 D1:CA9B -  -  -  -  ;-----------------------------------------------------------------------------
 2427 D1:CA9B -  -  -  -  ;-----------------------------------------------------------------------------
 2428 D1:CA9B -  -  -  -  ;Instructions by type: Comparisons
 2429 D1:CA9B -  -  -  -  
 2430 D1:CA9B -  -  -  -  ;CMP - Compare Memory with Accumulator
 2431 D1:CA9B -  -  -  -  ;A - M
 2432 D1:CA9B -  -  -  -  ;N	Z	C	I	D	V
 2433 D1:CA9B -  -  -  -  ;+	+	+	-	-	-
 2434 D1:CA9B -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2435 D1:CA9B -  -  -  -  
 2436 D1:CA9B -  -  -  -  ;immediate	CMP #oper	C9	2	2  
 2437 D1:CA9B -  -  -  -  inst6502_cmp_imm:
 2438 D1:CA9B ED 33 02 -      ADDCYC(2)
 2439 D1:CA9E 46 -  -  -      ld  b,(hl)
 2440 D1:CA9F C3 6D B8 D1     jp  subroutine6502_cmp_combined_end
 2441 D1:CAA3 -  -  -  -  
 2442 D1:CAA3 -  -  -  -  ;zeropage	CMP oper	C5	2	3  
 2443 D1:CAA3 -  -  -  -  inst6502_cmp_zp:
 2444 D1:CAA3 ED 33 03 -      ADDCYC(3)
 2445 D1:CAA6 7E -  -  -      ld  a,(hl)
 2446 D1:CAA7 01 00 38 D0     ld  bc,ZEROPAGE
 2447 D1:CAAB 81 -  -  -      add a,c
 2448 D1:CAAC 4F -  -  -      ld  c,a
 2449 D1:CAAD 0A -  -  -      ld  a,(bc)
 2450 D1:CAAE 47 -  -  -      ld  b,a
 2451 D1:CAAF C3 6D B8 D1     jp  subroutine6502_cmp_combined_end
 2452 D1:CAB3 -  -  -  -  
 2453 D1:CAB3 -  -  -  -  ;zeropage,X	CMP oper,X	D5	2	4  
 2454 D1:CAB3 -  -  -  -  inst6502_cmp_zpx:
 2455 D1:CAB3 ED 33 04 -      ADDCYC(4)
 2456 D1:CAB6 7E -  -  -      ld  a,(hl)
 2457 D1:CAB7 01 00 38 D0     ld  bc,ZEROPAGE
 2458 D1:CABB 81 -  -  -      add a,c
 2459 D1:CABC DD 86 01 -      add a,(ix+REGX)
 2460 D1:CABF 4F -  -  -      ld  c,a
 2461 D1:CAC0 0A -  -  -      ld  a,(bc)
 2462 D1:CAC1 47 -  -  -      ld  b,a
 2463 D1:CAC2 C3 6D B8 D1     jp  subroutine6502_cmp_combined_end
 2464 D1:CAC6 -  -  -  -  
 2465 D1:CAC6 -  -  -  -  ;absolute	CMP oper	CD	3	4  
 2466 D1:CAC6 -  -  -  -  inst6502_cmp_abs:
 2467 D1:CAC6 ED 33 04 -      ADDCYC(4)
 2468 D1:CAC9 CD 77 B7 D1     call subroutine6502_abs_split_start
 2469 D1:CACD E5 -  -  -      push hl
 2470 D1:CACE 50 -  -  -          ld  d,b
 2471 D1:CACF 79 -  -  -          ld  a,c
 2472 D1:CAD0 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2473 D1:CAD2 ED 4C -  -          mlt bc
 2474 D1:CAD4 21 00 40 D0         ld  hl,PAGETABLE
 2475 D1:CAD8 09 -  -  -          add hl,bc
 2476 D1:CAD9 ED 27 -  -          ld  hl,(hl)
 2477 D1:CADB 06 00 -  -          ld  b,0
 2478 D1:CADD 4F -  -  -          ld  c,a
 2479 D1:CADE 09 -  -  -          add hl,bc   ;full address
 2480 D1:CADF CD 40 AE D1         READ_ACCESS
 2481 D1:CAE3 E1 -  -  -      pop hl
 2482 D1:CAE4 47 -  -  -      ld  b,a
 2483 D1:CAE5 C3 6D B8 D1     jp  subroutine6502_cmp_combined_end
 2484 D1:CAE9 -  -  -  -  
 2485 D1:CAE9 -  -  -  -  ;absolute,X	CMP oper,X	DD	3	4* 
 2486 D1:CAE9 -  -  -  -  inst6502_cmp_absx:
 2487 D1:CAE9 ED 33 04 -      ADDCYC(4)
 2488 D1:CAEC CD 98 B7 D1     PUSH_ABSXSPLIT
 2489 D1:CAF0 CD 40 AE D1         READ_ACCESS
 2490 D1:CAF4 E1 -  -  -      pop hl
 2491 D1:CAF5 47 -  -  -      ld  b,a
 2492 D1:CAF6 C3 6D B8 D1     jp  subroutine6502_cmp_combined_end
 2493 D1:CAFA -  -  -  -  
 2494 D1:CAFA -  -  -  -  ;absolute,Y	CMP oper,Y	D9	3	4* 
 2495 D1:CAFA -  -  -  -  inst6502_cmp_absy:
 2496 D1:CAFA ED 33 04 -      ADDCYC(4)
 2497 D1:CAFD CD 93 B7 D1     PUSH_ABSYSPLIT
 2498 D1:CB01 CD 40 AE D1         READ_ACCESS
 2499 D1:CB05 E1 -  -  -      pop hl
 2500 D1:CB06 47 -  -  -      ld  b,a
 2501 D1:CB07 C3 6D B8 D1     jp  subroutine6502_cmp_combined_end
 2502 D1:CB0B -  -  -  -  
 2503 D1:CB0B -  -  -  -  ;(indirect,X)	CMP (oper,X)	C1	2	6  
 2504 D1:CB0B -  -  -  -  inst6502_cmp_indx:
 2505 D1:CB0B ED 33 06 -      ADDCYC(6)
 2506 D1:CB0E E5 -  -  -      push hl
 2507 D1:CB0F 7E -  -  -          ld  a,(hl)
 2508 D1:CB10 21 00 38 D0         ld  hl,ZEROPAGE
 2509 D1:CB14 85 -  -  -          add a,L
 2510 D1:CB15 DD 86 01 -          add a,(ix+REGX)
 2511 D1:CB18 6F -  -  -          ld  L,a
 2512 D1:CB19 7E -  -  -          ld  a,(hl)
 2513 D1:CB1A 2C -  -  -          inc L
 2514 D1:CB1B 56 -  -  -          ld  d,(hl)
 2515 D1:CB1C 42 -  -  -          ld  b,d
 2516 D1:CB1D 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2517 D1:CB1F ED 4C -  -          mlt bc
 2518 D1:CB21 21 00 40 D0         ld  hl,PAGETABLE
 2519 D1:CB25 09 -  -  -          add hl,bc
 2520 D1:CB26 ED 27 -  -          ld  hl,(hl)
 2521 D1:CB28 06 00 -  -          ld  b,0
 2522 D1:CB2A 4F -  -  -          ld  c,a
 2523 D1:CB2B 09 -  -  -          add hl,bc
 2524 D1:CB2C CD 40 AE D1         READ_ACCESS
 2525 D1:CB30 E1 -  -  -      pop hl
 2526 D1:CB31 47 -  -  -      ld  b,a
 2527 D1:CB32 C3 6D B8 D1     jp  subroutine6502_cmp_combined_end
 2528 D1:CB36 -  -  -  -  
 2529 D1:CB36 -  -  -  -  ;(indirect),Y	CMP (oper),Y	D1	2	5* 
 2530 D1:CB36 -  -  -  -  inst6502_cmp_indy:
 2531 D1:CB36 ED 33 05 -      ADDCYC(5)
 2532 D1:CB39 E5 -  -  -      push hl
 2533 D1:CB3A 7E -  -  -          ld  a,(hl)
 2534 D1:CB3B 21 00 38 D0         ld  hl,ZEROPAGE
 2535 D1:CB3F 85 -  -  -          add a,L
 2536 D1:CB40 6F -  -  -          ld  L,a
 2537 D1:CB41 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 2538 D1:CB42 2C -  -  -          inc L
 2539 D1:CB43 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 2540 D1:CB46 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 2541 D1:CB47 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 2542 D1:CB49 24 -  -  -          inc h
 2543 D1:CB4A FD 23 -  -          ADDCYC(1)
 2544 D1:CB4C 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 2545 D1:CB4D 2E 0C -  -          ld  L,BASETABLE_STRIDE
 2546 D1:CB4F ED 6C -  -          mlt hl          ;23.
 2547 D1:CB51 01 00 40 D0         ld  bc,PAGETABLE
 2548 D1:CB55 09 -  -  -          add hl,bc
 2549 D1:CB56 ED 27 -  -          ld  hl,(hl)     ;address get.
 2550 D1:CB58 01 00 00 00         ld  bc,0
 2551 D1:CB5C 4F -  -  -          ld  c,a
 2552 D1:CB5D 09 -  -  -          add hl,bc       ;Full address get.
 2553 D1:CB5E CD 40 AE D1         READ_ACCESS
 2554 D1:CB62 E1 -  -  -      pop hl
 2555 D1:CB63 47 -  -  -      ld  b,a
 2556 D1:CB64 C3 6D B8 D1     jp  subroutine6502_cmp_combined_end
 2557 D1:CB68 -  -  -  -  
 2558 D1:CB68 -  -  -  -  ;-----------------------------------------------------------------------------
 2559 D1:CB68 -  -  -  -  ;CPX - Compare Memory and Index X
 2560 D1:CB68 -  -  -  -  ;X - M
 2561 D1:CB68 -  -  -  -  ;N	Z	C	I	D	V
 2562 D1:CB68 -  -  -  -  ;+	+	+	-	-	-
 2563 D1:CB68 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2564 D1:CB68 -  -  -  -  ;immediate	CPX #oper	E0	2	2  
 2565 D1:CB68 -  -  -  -  inst6502_cpx_imm:
 2566 D1:CB68 ED 33 02 -      ADDCYC(2)
 2567 D1:CB6B DD 7E 01 -      ld  a,(ix+REGX)
 2568 D1:CB6E 96 -  -  -      sub a,(hl)
 2569 D1:CB6F 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2570 D1:CB70 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2571 D1:CB8A C3 CF B6 D1     jp  i6502NextLoad
 2572 D1:CB8E -  -  -  -  
 2573 D1:CB8E -  -  -  -  ;zeropage	CPX oper	E4	2	3  
 2574 D1:CB8E -  -  -  -  inst6502_cpx_zp:
 2575 D1:CB8E ED 33 03 -      ADDCYC(3)
 2576 D1:CB91 7E -  -  -      ld  a,(hl)
 2577 D1:CB92 01 00 38 D0     ld  bc,ZEROPAGE
 2578 D1:CB96 81 -  -  -      add a,c
 2579 D1:CB97 4F -  -  -      ld  c,a
 2580 D1:CB98 0A -  -  -      ld  a,(bc)
 2581 D1:CB99 47 -  -  -      ld  b,a
 2582 D1:CB9A DD 7E 01 -      ld  a,(ix+REGX)
 2583 D1:CB9D 90 -  -  -      sub a,b
 2584 D1:CB9E 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2585 D1:CB9F DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2586 D1:CBB9 C3 CF B6 D1     jp i6502NextLoad
 2587 D1:CBBD -  -  -  -  ;absolute	CPX oper	EC	3	4  
 2588 D1:CBBD -  -  -  -  inst6502_cpx_abs:
 2589 D1:CBBD ED 33 04 -      ADDCYC(4)
 2590 D1:CBC0 CD 77 B7 D1     call subroutine6502_abs_split_start
 2591 D1:CBC4 E5 -  -  -      push hl
 2592 D1:CBC5 50 -  -  -          ld  d,b
 2593 D1:CBC6 79 -  -  -          ld  a,c
 2594 D1:CBC7 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2595 D1:CBC9 ED 4C -  -          mlt bc
 2596 D1:CBCB 21 00 40 D0         ld  hl,PAGETABLE
 2597 D1:CBCF 09 -  -  -          add hl,bc
 2598 D1:CBD0 ED 27 -  -          ld  hl,(hl)
 2599 D1:CBD2 06 00 -  -          ld  b,0
 2600 D1:CBD4 4F -  -  -          ld  c,a
 2601 D1:CBD5 09 -  -  -          add hl,bc   ;full address
 2602 D1:CBD6 CD 40 AE D1         READ_ACCESS
 2603 D1:CBDA E1 -  -  -      pop hl
 2604 D1:CBDB 47 -  -  -      ld  b,a
 2605 D1:CBDC DD 7E 01 -      ld  a,(ix+REGX)
 2606 D1:CBDF 90 -  -  -      sub a,b
 2607 D1:CBE0 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2608 D1:CBE1 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2609 D1:CBFB C3 CF B6 D1     jp i6502NextLoad
 2610 D1:CBFF -  -  -  -  
 2611 D1:CBFF -  -  -  -  ;-----------------------------------------------------------------------------
 2612 D1:CBFF -  -  -  -  ;CPY - Compare Memory and Index Y
 2613 D1:CBFF -  -  -  -  ;Y - M
 2614 D1:CBFF -  -  -  -  ;N	Z	C	I	D	V
 2615 D1:CBFF -  -  -  -  ;+	+	+	-	-	-
 2616 D1:CBFF -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2617 D1:CBFF -  -  -  -  ;immediate	CPY #oper	C0	2	2  
 2618 D1:CBFF -  -  -  -  inst6502_cpy_imm:
 2619 D1:CBFF ED 33 02 -      ADDCYC(2)
 2620 D1:CC02 DD 7E 02 -      ld  a,(ix+REGY)
 2621 D1:CC05 96 -  -  -      sub a,(hl)
 2622 D1:CC06 3F -  -  -      ccf
 2623 D1:CC07 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2624 D1:CC21 C3 CF B6 D1     jp  i6502NextLoad
 2625 D1:CC25 -  -  -  -  
 2626 D1:CC25 -  -  -  -  ;zeropage	CPY oper	C4	2	3  
 2627 D1:CC25 -  -  -  -  inst6502_cpy_zp:
 2628 D1:CC25 ED 33 03 -      ADDCYC(3)
 2629 D1:CC28 7E -  -  -      ld  a,(hl)
 2630 D1:CC29 01 00 38 D0     ld  bc,ZEROPAGE
 2631 D1:CC2D 81 -  -  -      add a,c
 2632 D1:CC2E 4F -  -  -      ld  c,a
 2633 D1:CC2F 0A -  -  -      ld  a,(bc)
 2634 D1:CC30 47 -  -  -      ld  b,a
 2635 D1:CC31 DD 7E 02 -      ld  a,(ix+REGY)
 2636 D1:CC34 90 -  -  -      sub a,b
 2637 D1:CC35 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2638 D1:CC36 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2639 D1:CC50 C3 CF B6 D1     jp i6502NextLoad
 2640 D1:CC54 -  -  -  -  
 2641 D1:CC54 -  -  -  -  ;absolute	CPY oper	CC	3	4  
 2642 D1:CC54 -  -  -  -  inst6502_cpy_abs:
 2643 D1:CC54 ED 33 04 -      ADDCYC(4)
 2644 D1:CC57 CD 77 B7 D1     call subroutine6502_abs_split_start
 2645 D1:CC5B E5 -  -  -      push hl
 2646 D1:CC5C 50 -  -  -          ld  d,b
 2647 D1:CC5D 79 -  -  -          ld  a,c
 2648 D1:CC5E 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2649 D1:CC60 ED 4C -  -          mlt bc
 2650 D1:CC62 21 00 40 D0         ld  hl,PAGETABLE
 2651 D1:CC66 09 -  -  -          add hl,bc
 2652 D1:CC67 ED 27 -  -          ld  hl,(hl)
 2653 D1:CC69 06 00 -  -          ld  b,0
 2654 D1:CC6B 4F -  -  -          ld  c,a
 2655 D1:CC6C 09 -  -  -          add hl,bc   ;full address
 2656 D1:CC6D CD 40 AE D1         READ_ACCESS
 2657 D1:CC71 E1 -  -  -      pop hl
 2658 D1:CC72 47 -  -  -      ld  b,a
 2659 D1:CC73 DD 7E 02 -      ld  a,(ix+REGY)
 2660 D1:CC76 90 -  -  -      sub a,b
 2661 D1:CC77 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2662 D1:CC78 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2663 D1:CC92 C3 CF B6 D1     jp i6502NextLoad
 2664 D1:CC96 -  -  -  -  
 2665 D1:CC96 -  -  -  -  
 2666 D1:CC96 -  -  -  -  ;-----------------------------------------------------------------------------
 2667 D1:CC96 -  -  -  -  ;-----------------------------------------------------------------------------
 2668 D1:CC96 -  -  -  -  ;-----------------------------------------------------------------------------
 2669 D1:CC96 -  -  -  -  ;Instructions by type: Conditional Branch Instructions
 2670 D1:CC96 -  -  -  -  
 2671 D1:CC96 -  -  -  -  ;branch on C=0
 2672 D1:CC96 -  -  -  -  ;relative	BCC oper	90	2	2**
 2673 D1:CC96 -  -  -  -  inst6502_bcc:
 2674 D1:CC96 ED 33 02 -      ADDCYC(2)
 2675 D1:CC99 DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2676 D1:CC9D C2 CF B6 D1     jp  nz,i6502NextLoad
 2677 D1:CCA1 C3 90 B8 D1     jp  subroutine6502_take_branch
 2678 D1:CCA5 -  -  -  -  
 2679 D1:CCA5 -  -  -  -  ;branch on C=1
 2680 D1:CCA5 -  -  -  -  ;relative	BCS oper	B0	2	2**
 2681 D1:CCA5 -  -  -  -  inst6502_bcs:
 2682 D1:CCA5 ED 33 02 -      ADDCYC(2)
 2683 D1:CCA8 DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2684 D1:CCAC CA CF B6 D1     jp  z,i6502NextLoad
 2685 D1:CCB0 C3 90 B8 D1     jp  subroutine6502_take_branch
 2686 D1:CCB4 -  -  -  -  
 2687 D1:CCB4 -  -  -  -  ;branch on Z=1
 2688 D1:CCB4 -  -  -  -  ;relative	BEQ oper	F0	2	2**
 2689 D1:CCB4 -  -  -  -  inst6502_beq:
 2690 D1:CCB4 ED 33 02 -      ADDCYC(2)
 2691 D1:CCB7 DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2692 D1:CCBB CA CF B6 D1     jp  z,i6502NextLoad
 2693 D1:CCBF C3 90 B8 D1     jp  subroutine6502_take_branch
 2694 D1:CCC3 -  -  -  -  
 2695 D1:CCC3 -  -  -  -  ;branch on N=1
 2696 D1:CCC3 -  -  -  -  ;relative	BMI oper	30	2	2**
 2697 D1:CCC3 -  -  -  -  inst6502_bmi:
 2698 D1:CCC3 ED 33 02 -      ADDCYC(2)
 2699 D1:CCC6 DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2700 D1:CCCA CA CF B6 D1     jp  z,i6502NextLoad
 2701 D1:CCCE C3 90 B8 D1     jp  subroutine6502_take_branch
 2702 D1:CCD2 -  -  -  -  
 2703 D1:CCD2 -  -  -  -  
 2704 D1:CCD2 -  -  -  -  ;branch on Z=0
 2705 D1:CCD2 -  -  -  -  ;relative	BNE oper	D0	2	2**
 2706 D1:CCD2 -  -  -  -  inst6502_bne:
 2707 D1:CCD2 ED 33 02 -      ADDCYC(2)
 2708 D1:CCD5 DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2709 D1:CCD9 C2 CF B6 D1     jp  nz,i6502NextLoad
 2710 D1:CCDD C3 90 B8 D1     jp  subroutine6502_take_branch
 2711 D1:CCE1 -  -  -  -  
 2712 D1:CCE1 -  -  -  -  ;branch on N=0
 2713 D1:CCE1 -  -  -  -  ;relative	BPL oper	10	2	2**
 2714 D1:CCE1 -  -  -  -  inst6502_bpl:
 2715 D1:CCE1 ED 33 02 -      ADDCYC(2)
 2716 D1:CCE4 DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2717 D1:CCE8 C2 CF B6 D1     jp  nz,i6502NextLoad
 2718 D1:CCEC C3 90 B8 D1     jp  subroutine6502_take_branch
 2719 D1:CCF0 -  -  -  -  
 2720 D1:CCF0 -  -  -  -  ;branch on V=0
 2721 D1:CCF0 -  -  -  -  ;relative	BVC oper	50	2	2**
 2722 D1:CCF0 -  -  -  -  inst6502_bvc:
 2723 D1:CCF0 ED 33 02 -      ADDCYC(2)
 2724 D1:CCF3 DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2725 D1:CCF7 C2 CF B6 D1     jp  nz,i6502NextLoad
 2726 D1:CCFB C3 90 B8 D1     jp  subroutine6502_take_branch
 2727 D1:CCFF -  -  -  -  
 2728 D1:CCFF -  -  -  -  ;branch on V=1
 2729 D1:CCFF -  -  -  -  ;relative	BVS oper	70	2	2**
 2730 D1:CCFF -  -  -  -  inst6502_bvs:
 2731 D1:CCFF ED 33 02 -      ADDCYC(2)
 2732 D1:CD02 DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2733 D1:CD06 CA CF B6 D1     jp  z,i6502NextLoad
 2734 D1:CD0A C3 90 B8 D1     jp  subroutine6502_take_branch
 2735 D1:CD0E -  -  -  -  
 2736 D1:CD0E -  -  -  -  ;-----------------------------------------------------------------------------
 2737 D1:CD0E -  -  -  -  ;-----------------------------------------------------------------------------
 2738 D1:CD0E -  -  -  -  ;-----------------------------------------------------------------------------
 2739 D1:CD0E -  -  -  -  ;Instructions by type: Interrupts
 2740 D1:CD0E -  -  -  -  
 2741 D1:CD0E -  -  -  -  ;BRK - Force Break
 2742 D1:CD0E -  -  -  -  ;BRK initiates a software interrupt similar to a hardware
 2743 D1:CD0E -  -  -  -  ;interrupt (IRQ). The return address pushed to the stack is
 2744 D1:CD0E -  -  -  -  ;PC+2, providing an extra byte of spacing for a break mark
 2745 D1:CD0E -  -  -  -  ;(identifying a reason for the break.)
 2746 D1:CD0E -  -  -  -  ;The status register will be pushed to the stack with the break
 2747 D1:CD0E -  -  -  -  ;flag set to 1. However, when retrieved during RTI or by a PLP
 2748 D1:CD0E -  -  -  -  ;instruction, the break flag will be ignored.
 2749 D1:CD0E -  -  -  -  ;The interrupt disable flag is not set automatically.
 2750 D1:CD0E -  -  -  -  ;
 2751 D1:CD0E -  -  -  -  ;interrupt,             N	Z	C	I	D	V
 2752 D1:CD0E -  -  -  -  ;push PC+2, push SR     -	-	-	1	-	-
 2753 D1:CD0E -  -  -  -  ;implied	BRK	00	1	7  
 2754 D1:CD0E -  -  -  -  inst6502_brk:
 2755 D1:CD0E ED 33 07 -      ADDCYC(7)
 2756 D1:CD11 21 00 39 D0     ld  hl,STACKBASE
 2757 D1:CD15 DD 6E 03 -      ld  L,(ix+REGSP)
 2758 D1:CD18 52 DD 17 05     ld.s de,(ix+REGPC)
 2759 D1:CD1C 13 -  -  -      inc de      ;that extra spacer.
 2760 D1:CD1D 72 -  -  -      ld  (hl),d
 2761 D1:CD1E 2D -  -  -      dec L
 2762 D1:CD1F 73 -  -  -      ld  (hl),e
 2763 D1:CD20 2D -  -  -      dec L
 2764 D1:CD21 DD 7E 04 -      ld  a,(ix+REGSR)
 2765 D1:CD24 CB D7 -  -      set SF_INT,a
 2766 D1:CD26 77 -  -  -      ld  (hl),a
 2767 D1:CD27 2D -  -  -      dec L
 2768 D1:CD28 DD 75 03 -      ld  (ix+REGSP),L
 2769 D1:CD2B DD CB 1E 46     WAS_NMI_TRIGGERED
 2770 D1:CD2F 01 FE 00 00     ld  bc,$FE  ;IRQ vector
 2771 D1:CD33 28 04 -  -      jr  z,+_
 2772 D1:CD35 01 FA 00 00     ld  bc,$FA  ;NMI vector, if NMI is hijacking this instruction.
 2773 D1:CD39 21 F4 4B D0 _:  ld  hl,(BASETABLE_STRIDE*$FF)+PAGETABLE
 2774 D1:CD3D ED 27 -  -      ld  hl,(hl)
 2775 D1:CD3F 09 -  -  -      add hl,bc
 2776 D1:CD40 ED 17 -  -      ld  de,(hl)
 2777 D1:CD42 52 DD 1F 05     ld.s (ix+REGPC),de
 2778 D1:CD46 C3 B9 B6 D1     jp  i6502FirstLoad
 2779 D1:CD4A -  -  -  -  
 2780 D1:CD4A -  -  -  -  ;RTI - Return from Interrupt
 2781 D1:CD4A -  -  -  -  ;The status register is pulled with the break flag
 2782 D1:CD4A -  -  -  -  ;and bit 5 ignored. Then PC is pulled from the stack.
 2783 D1:CD4A -  -  -  -  ;pull SR, pull PC      N Z C I D V
 2784 D1:CD4A -  -  -  -  ;                      from stack
 2785 D1:CD4A -  -  -  -  ;implied	RTI	40	1	6  
 2786 D1:CD4A -  -  -  -  inst6502_rti:
 2787 D1:CD4A 21 00 39 D0     ld  hl,STACKBASE
 2788 D1:CD4E DD 6E 03 -      ld  l,(ix+REGSP)
 2789 D1:CD51 2C -  -  -      inc l
 2790 D1:CD52 7E -  -  -      ld  a,(hl)
 2791 D1:CD53 2C -  -  -      inc l
 2792 D1:CD54 5E -  -  -      ld  e,(hl)
 2793 D1:CD55 2C -  -  -      inc l
 2794 D1:CD56 56 -  -  -      ld  d,(hl)
 2795 D1:CD57 DD 75 03 -      ld  (ix+REGSP),l
 2796 D1:CD5A 52 DD 1F 05     ld.s (ix+REGPC),de
 2797 D1:CD5E DD 46 04 -      ld  b,(ix+REGSR)
 2798 D1:CD61 A8 -  -  -      xor a,b
 2799 D1:CD62 E6 DF -  -      and a,%11011111
 2800 D1:CD64 A8 -  -  -      xor a,b
 2801 D1:CD65 DD 77 04 -      ld  (ix+REGSR),a
 2802 D1:CD68 ED 33 06 -      ADDCYC(6)
 2803 D1:CD6B C3 B9 B6 D1     jp  i6502FirstLoad
 2804 D1:CD6F -  -  -  -  
 2805 D1:CD6F -  -  -  -  
 2806 D1:CD6F -  -  -  -  
 2807 D1:CD6F -  -  -  -  ;-----------------------------------------------------------------------------
 2808 D1:CD6F -  -  -  -  ;-----------------------------------------------------------------------------
 2809 D1:CD6F -  -  -  -  ;-----------------------------------------------------------------------------
 2810 D1:CD6F -  -  -  -  ;Instructions by type: Jumps and Subroutines
 2811 D1:CD6F -  -  -  -  
 2812 D1:CD6F -  -  -  -  ;absolute	JMP oper	4C	3	3  
 2813 D1:CD6F -  -  -  -  inst6052_jmp_abs:
 2814 D1:CD6F 7E -  -  -      ld  a,(hl)
 2815 D1:CD70 23 -  -  -      inc hl
 2816 D1:CD71 1C -  -  -      inc e
 2817 D1:CD72 20 0F -  -      jr  nz,+_
 2818 D1:CD74 DD 56 06 -      ld  d,(ix+REGPC+1)
 2819 D1:CD77 14 -  -  -      inc d
 2820 D1:CD78 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2821 D1:CD7A ED 5C -  -      mlt de
 2822 D1:CD7C 21 00 40 D0     ld  hl,PAGETABLE
 2823 D1:CD80 19 -  -  -      add hl,de
 2824 D1:CD81 ED 27 -  -      ld  hl,(hl)
 2825 D1:CD83 DD 77 05 -  _:  ld  (ix+REGPC+0),a
 2826 D1:CD86 7E -  -  -      ld  a,(hl)
 2827 D1:CD87 DD 77 06 -      ld  (ix+REGPC+1),a
 2828 D1:CD8A ED 33 03 -      ADDCYC(3)
 2829 D1:CD8D C3 B9 B6 D1     jp i6502FirstLoad
 2830 D1:CD91 -  -  -  -  
 2831 D1:CD91 -  -  -  -  
 2832 D1:CD91 -  -  -  -  ;Note: In earlier 6502 implementations, cross-page reads on indirect is bugged.
 2833 D1:CD91 -  -  -  -  ;   The end effect would be that inst6502_jmp_indir_splitread would wrap around
 2834 D1:CD91 -  -  -  -  ;   to the start of the current page rather than try to read the next page.
 2835 D1:CD91 -  -  -  -  ;indirect	JMP (oper)	6C	3	5  
 2836 D1:CD91 -  -  -  -  inst6502_jmp_indir:
 2837 D1:CD91 ED 33 05 -      ADDCYC(5)
 2838 D1:CD94 -  -  -  -      ;Doing much the same as abs_split_start below, except with fewer things
 2839 D1:CD94 -  -  -  -      ;because we don't need to preserve any of the other stuff.
 2840 D1:CD94 4E -  -  -      ld  c,(hl)
 2841 D1:CD95 23 -  -  -      inc hl
 2842 D1:CD96 1C -  -  -      inc e
 2843 D1:CD97 20 0F -  -      jr  nz,+_
 2844 D1:CD99 DD 56 06 -      ld  d,(ix+REGPC+1)
 2845 D1:CD9C 14 -  -  -      inc d
 2846 D1:CD9D 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2847 D1:CD9F ED 5C -  -      mlt de
 2848 D1:CDA1 21 00 40 D0     ld  hl,PAGETABLE
 2849 D1:CDA5 19 -  -  -      add hl,de
 2850 D1:CDA6 ED 27 -  -      ld  hl,(hl)
 2851 D1:CDA8 46 -  -  -  _:  ld  b,(hl)
 2852 D1:CDA9 79 -  -  -      ld  a,c
 2853 D1:CDAA 0C -  -  -      inc c   ;check if there will be a split read.
 2854 D1:CDAB 0E 0C -  -      ld  c,BASETABLE_STRIDE  ;Flags not affected
 2855 D1:CDAD ED 4C -  -      mlt bc                  ;Flags not affected
 2856 D1:CDAF 21 00 40 D0     ld  hl,PAGETABLE        ;Flags not affected
 2857 D1:CDB3 CA C8 CD D1     jp  z,inst6502_jmp_indir_splitRead
 2858 D1:CDB7 09 -  -  -      add hl,bc
 2859 D1:CDB8 ED 27 -  -      ld  hl,(hl)
 2860 D1:CDBA 06 00 -  -      ld  b,0
 2861 D1:CDBC 4F -  -  -      ld  c,a
 2862 D1:CDBD 09 -  -  -      add hl,bc
 2863 D1:CDBE ED 27 -  -      ld  hl,(hl)
 2864 D1:CDC0 52 DD 2F 05     ld.s (ix+REGPC),hl
 2865 D1:CDC4 C3 B9 B6 D1     jp  i6502FirstLoad
 2866 D1:CDC8 -  -  -  -  inst6502_jmp_indir_splitRead:
 2867 D1:CDC8 09 -  -  -      add hl,bc
 2868 D1:CDC9 ED 27 -  -      ld  hl,(hl)
 2869 D1:CDCB 7E -  -  -      ld  a,(hl)  ;high byte
 2870 D1:CDCC 01 FF 00 00     ld  bc,255
 2871 D1:CDD0 09 -  -  -      add hl,bc
 2872 D1:CDD1 4E -  -  -      ld  c,(hl)  ;low byte
 2873 D1:CDD2 47 -  -  -      ld  b,a
 2874 D1:CDD3 52 DD 0F 05     ld.s (ix+REGPC),bc
 2875 D1:CDD7 C3 B9 B6 D1     jp  i6502FirstLoad
 2876 D1:CDDB -  -  -  -  
 2877 D1:CDDB -  -  -  -  
 2878 D1:CDDB -  -  -  -  
 2879 D1:CDDB -  -  -  -  
 2880 D1:CDDB -  -  -  -  
 2881 D1:CDDB -  -  -  -  ;absolute	JSR oper	20	3	6  
 2882 D1:CDDB -  -  -  -  inst6502_jsr:
 2883 D1:CDDB DD 56 06 -      ld  d,(ix+REGPC+1)
 2884 D1:CDDE 4E -  -  -      ld  c,(hl)
 2885 D1:CDDF 23 -  -  -      inc hl
 2886 D1:CDE0 1C -  -  -      inc e
 2887 D1:CDE1 20 10 -  -      jr  nz,+_
 2888 D1:CDE3 14 -  -  -      inc d
 2889 D1:CDE4 7A -  -  -      ld  a,d
 2890 D1:CDE5 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2891 D1:CDE7 ED 5C -  -      mlt de
 2892 D1:CDE9 21 00 40 D0     ld  hl,PAGETABLE
 2893 D1:CDED 19 -  -  -      add hl,de
 2894 D1:CDEE ED 27 -  -      ld  hl,(hl)
 2895 D1:CDF0 57 -  -  -      ld  d,a
 2896 D1:CDF1 1E 00 -  -      ld  e,0
 2897 D1:CDF3 46 -  -  -  _:  ld  b,(hl)
 2898 D1:CDF4 -  -  -  -      ;push de to 6502stack
 2899 D1:CDF4 21 00 39 D0     ld  hl,STACKBASE
 2900 D1:CDF8 DD 6E 03 -      ld  l,(ix+REGSP)
 2901 D1:CDFB 72 -  -  -      ld  (hl),d
 2902 D1:CDFC 2D -  -  -      dec l
 2903 D1:CDFD 73 -  -  -      ld  (hl),e
 2904 D1:CDFE 2D -  -  -      dec l
 2905 D1:CDFF DD 75 03 -      ld  (ix+REGSP),l
 2906 D1:CE02 52 DD 0F 05     ld.s (ix+REGPC),bc
 2907 D1:CE06 ED 33 06 -      ADDCYC(6)
 2908 D1:CE09 C3 B9 B6 D1     jp  i6502FirstLoad
 2909 D1:CE0D -  -  -  -  
 2910 D1:CE0D -  -  -  -  ;implied	RTS	60	1	6
 2911 D1:CE0D -  -  -  -  inst6502_rts:
 2912 D1:CE0D 21 00 39 D0     ld  hl,STACKBASE
 2913 D1:CE11 DD 6E 03 -      ld  l,(ix+REGSP)
 2914 D1:CE14 2C -  -  -      inc l
 2915 D1:CE15 5E -  -  -      ld  e,(hl)
 2916 D1:CE16 2C -  -  -      inc l
 2917 D1:CE17 56 -  -  -      ld  d,(hl)
 2918 D1:CE18 DD 75 03 -      ld  (ix+REGSP),l
 2919 D1:CE1B 13 -  -  -      inc de
 2920 D1:CE1C 52 DD 1F 05     ld.s (ix+REGPC),de
 2921 D1:CE20 ED 33 06 -      ADDCYC(6)
 2922 D1:CE23 C3 B9 B6 D1     jp  i6502FirstLoad
 2923 D1:CE27 -  -  -  -  
 2924 D1:CE27 -  -  -  -  
 2925 D1:CE27 -  -  -  -  ;-----------------------------------------------------------------------------
 2926 D1:CE27 -  -  -  -  ;-----------------------------------------------------------------------------
 2927 D1:CE27 -  -  -  -  ;-----------------------------------------------------------------------------
 2928 D1:CE27 -  -  -  -  ;Instructions by type: Miscellaneous
 2929 D1:CE27 -  -  -  -  ;BIT - Test Bits in Memory with Accumulator
 2930 D1:CE27 -  -  -  -  ;
 2931 D1:CE27 -  -  -  -  ;bits 7 and 6 of operand are transfered to bit 7 and 6 of SR (N,V);
 2932 D1:CE27 -  -  -  -  ;the zero-flag is set according to the result of the operand AND
 2933 D1:CE27 -  -  -  -  ;the accumulator (set, if the result is zero, unset otherwise).
 2934 D1:CE27 -  -  -  -  ;This allows a quick check of a few bits at once without affecting
 2935 D1:CE27 -  -  -  -  ;any of the registers, other than the status register (SR).
 2936 D1:CE27 -  -  -  -  
 2937 D1:CE27 -  -  -  -  ;A AND M -> Z, M7 -> N, M6 -> V             N	Z	C	I	D	V
 2938 D1:CE27 -  -  -  -  ;                                           M7	+	-	-	-	M6
 2939 D1:CE27 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2940 D1:CE27 -  -  -  -  ;zeropage	BIT oper	24	2	3  
 2941 D1:CE27 -  -  -  -  inst6502_bit_zp:
 2942 D1:CE27 ED 33 03 -      ADDCYC(3)
 2943 D1:CE2A 7E -  -  -      ld  a,(hl)
 2944 D1:CE2B 01 00 38 D0     ld  bc,ZEROPAGE
 2945 D1:CE2F 81 -  -  -      add a,c
 2946 D1:CE30 4F -  -  -      ld  c,a
 2947 D1:CE31 0A -  -  -      ld  a,(bc)
 2948 D1:CE32 4F -  -  -      ld  c,a
 2949 D1:CE33 DD A6 00 -  _:  and a,(ix+REGA)
 2950 D1:CE36 79 -  -  -      ld  a,c     ;discard result, get bits from OPERANDs
 2951 D1:CE37 CB 8F -  -      res SF_ZERO,a
 2952 D1:CE39 20 02 -  -      jr  nz,$+4
 2953 D1:CE3B CB CF -  -      set SF_ZERO,a
 2954 D1:CE3D DD 46 04 -      ld  b,(ix+REGSR)    ;keep bits in flag other than NZ and V
 2955 D1:CE40 A8 -  -  -      xor a,b
 2956 D1:CE41 E6 C2 -  -      and a,%11000010     ;1=keepA, 0=discardA,keepB
 2957 D1:CE43 A8 -  -  -      xor a,b
 2958 D1:CE44 DD 77 04 -      ld  (ix+REGSR),a
 2959 D1:CE47 C3 CF B6 D1     jp  i6502NextLoad
 2960 D1:CE4B -  -  -  -  
 2961 D1:CE4B -  -  -  -  ;absolute	BIT oper	2C	3	4  
 2962 D1:CE4B -  -  -  -  inst6502_bit_abs:
 2963 D1:CE4B ED 33 04 -      ADDCYC(4)
 2964 D1:CE4E CD 77 B7 D1     call subroutine6502_abs_split_start
 2965 D1:CE52 E5 -  -  -      push hl
 2966 D1:CE53 50 -  -  -          ld  d,b
 2967 D1:CE54 79 -  -  -          ld  a,c
 2968 D1:CE55 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2969 D1:CE57 ED 4C -  -          mlt bc
 2970 D1:CE59 21 00 40 D0         ld  hl,PAGETABLE
 2971 D1:CE5D 09 -  -  -          add hl,bc
 2972 D1:CE5E ED 27 -  -          ld  hl,(hl)
 2973 D1:CE60 06 00 -  -          ld  b,0
 2974 D1:CE62 4F -  -  -          ld  c,a
 2975 D1:CE63 09 -  -  -          add hl,bc   ;full address
 2976 D1:CE64 CD 40 AE D1         READ_ACCESS
 2977 D1:CE68 4F -  -  -          ld  c,a
 2978 D1:CE69 E1 -  -  -      pop hl
 2979 D1:CE6A 18 C7 -  -      jr  -_    
 2980 D1:CE6C -  -  -  -  
 2981 D1:CE6C -  -  -  -  ;NOP - No Operation
 2982 D1:CE6C -  -  -  -  ;implied	NOP	EA	1	2  
 2983 D1:CE6C -  -  -  -  inst6502_nop:
 2984 D1:CE6C ED 33 02 -      ADDCYC(2)
 2985 D1:CE6F C3 E8 B6 D1     jp  i6502FinishLoad
 2986 D1:CE73 -  -  -  -  
 2987 D1:CE73 -  -  -  -  
 2988 D1:CE73 -  -  -  -  
 2989 D1:CE73 -  -  -  -  ;##############################################################################
 2990 D1:CE73 -  -  -  -  ;##############################################################################
 2991 D1:CE73 -  -  -  -  ;##############################################################################
 2992 D1:CE73 -  -  -  -  ;##-----#-#####-#####-----##---###---##-########-----#--##-##---#-----#----####
 2993 D1:CE73 -  -  -  -  ;####-###-#####-#####-#####-#####-###-#-##########-###--##-#-######-###-###-###
 2994 D1:CE73 -  -  -  -  ;####-###-#####-#####---###-##--#-----#-##########-###-#-#-##---###-###-----###
 2995 D1:CE73 -  -  -  -  ;####-###-#####-#####-#####-###-#-###-#-##########-###-##--#####-##-###-##-####
 2996 D1:CE73 -  -  -  -  ;##-----#-----#-----#-----##----#-###-#-----####-----#-##--#----###-###-###-#-#
 2997 D1:CE73 -  -  -  -  ;##############################################################################
 2998 D1:CE73 -  -  -  -  ;##############################################################################
 2999 D1:CE73 -  -  -  -  ;##############################################################################
 3000 D1:CE73 -  -  -  -  ;Instructions by type: Illegal Instructions
 3001 D1:CE73 -  -  -  -  
 3002 D1:CE73 -  -  -  -  ;NOP - No operations. All the no-operations. Even the ones that are linked
 3003 D1:CE73 -  -  -  -  ;to the machinery that operates an addressing mode, but does nothing with it.
 3004 D1:CE73 -  -  -  -  ;A whole lotta nothing.
 3005 D1:CE73 -  -  -  -  
 3006 D1:CE73 -  -  -  -  ;Bytes:1, Cycles:2, Opcodes: 1A, 3A, 5A, 7A, DA, FA
 3007 D1:CE73 -  -  -  -  inst6502_nop_implied:
 3008 D1:CE73 ED 33 02 -      ADDCYC(2)
 3009 D1:CE76 C3 E8 B6 D1     jp  i6502FinishLoad
 3010 D1:CE7A -  -  -  -  
 3011 D1:CE7A -  -  -  -  ;Bytes:2, Cycles:2, Opcodes: 80, 82, 89, C2, E2
 3012 D1:CE7A -  -  -  -  inst6502_nop_imm:
 3013 D1:CE7A ED 33 02 -      ADDCYC(2)
 3014 D1:CE7D C3 CF B6 D1     jp  i6502NextLoad
 3015 D1:CE81 -  -  -  -  
 3016 D1:CE81 -  -  -  -  ;Bytes:2, Cycles:3, Opcodes: 04, 44, 64
 3017 D1:CE81 -  -  -  -  inst6502_nop_zp:
 3018 D1:CE81 ED 33 03 -      ADDCYC(3)
 3019 D1:CE84 C3 CF B6 D1     jp  i6502NextLoad
 3020 D1:CE88 -  -  -  -  
 3021 D1:CE88 -  -  -  -  ;Bytes:2, Cycles:4, Opcodes: 14, 34, 54, 74, D4, F4
 3022 D1:CE88 -  -  -  -  inst6502_nop_zpx:
 3023 D1:CE88 ED 33 04 -      ADDCYC(4)
 3024 D1:CE8B C3 CF B6 D1     jp  i6502NextLoad
 3025 D1:CE8F -  -  -  -  
 3026 D1:CE8F -  -  -  -  ;Bytes:3, Cycles:4, Opcode: 0C
 3027 D1:CE8F -  -  -  -  inst6502_nop_abs:
 3028 D1:CE8F ED 33 04 -      ADDCYC(4)
 3029 D1:CE92 CD 77 B7 D1     call subroutine6502_abs_split_start
 3030 D1:CE96 E5 -  -  -      push hl
 3031 D1:CE97 CD 40 AE D1         READ_ACCESS
 3032 D1:CE9B E1 -  -  -      pop hl
 3033 D1:CE9C C3 CF B6 D1     jp  i6502NextLoad
 3034 D1:CEA0 -  -  -  -  
 3035 D1:CEA0 -  -  -  -  ;Note: This thing latches all over the place but does nothing. All these
 3036 D1:CEA0 -  -  -  -  ;READ_ACCESS thingies are in case the ROM wants to clear PPU flags or something
 3037 D1:CEA0 -  -  -  -  ;using these instructions. But the one below is noted to do the touchy-feelies
 3038 D1:CEA0 -  -  -  -  ;at ABS and (ABS+X)&0xFF
 3039 D1:CEA0 -  -  -  -  ;Bytes:3, Cycles:4*, Opcodes: 1C, 3C, 5C, 7C, DC, FC
 3040 D1:CEA0 -  -  -  -  inst6502_nop_absx:
 3041 D1:CEA0 ED 33 04 -      ADDCYC(4)
 3042 D1:CEA3 CD 98 B7 D1     PUSH_ABSXSPLIT
 3043 D1:CEA7 CD 40 AE D1         READ_ACCESS
 3044 D1:CEAB E1 -  -  -      pop hl
 3045 D1:CEAC C3 CF B6 D1     jp  i6502NextLoad
 3046 D1:CEB0 -  -  -  -  
 3047 D1:CEB0 -  -  -  -  ;-----------------------------------------------------------------------------
 3048 D1:CEB0 -  -  -  -  ;ALR (ASR) - AND oper + LSR
 3049 D1:CEB0 -  -  -  -  ;Affects CZN
 3050 D1:CEB0 -  -  -  -  
 3051 D1:CEB0 -  -  -  -  ;immediate	ALR #oper	4B	2	2 
 3052 D1:CEB0 -  -  -  -  inst6502_alr_imm:
 3053 D1:CEB0 ED 33 02 -      ADDCYC(2)
 3054 D1:CEB3 DD 7E 00 -      ld  a,(ix+REGA)
 3055 D1:CEB6 A6 -  -  -      and a,(hl)
 3056 D1:CEB7 CB 3F -  -      srl a   ;Must do it this way. A-optimized instr do not affect Z
 3057 D1:CEB9 DD 77 00 -      ld  (ix+REGA),a
 3058 D1:CEBC DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3059 D1:CED6 C3 CF B6 D1     jp  i6502NextLoad
 3060 D1:CEDA -  -  -  -  
 3061 D1:CEDA -  -  -  -  ;-----------------------------------------------------------------------------
 3062 D1:CEDA -  -  -  -  
 3063 D1:CEDA -  -  -  -  ;ANC [ANC (ANC2)] - AND oper + set Carry as if ASL [ROL]
 3064 D1:CEDA -  -  -  -  
 3065 D1:CEDA -  -  -  -  ;immediate	ANC #oper	0B	2	2 
 3066 D1:CEDA -  -  -  -  ;immediate	ANC #oper	2B	2	2
 3067 D1:CEDA -  -  -  -  instr6502_anc_imm:
 3068 D1:CEDA -  -  -  -  instr6502_anc2_imm:
 3069 D1:CEDA ED 33 02 -      ADDCYC(2)
 3070 D1:CEDD DD 7E 00 -      ld  a,(ix+REGA)
 3071 D1:CEE0 A6 -  -  -      and a,(hl)
 3072 D1:CEE1 DD 77 00 -      ld  (ix+REGA),a
 3073 D1:CEE4 CB 07 -  -      rlc a
 3074 D1:CEE6 DD 7E 04 -      ld  a,(ix+REGSR)
 3075 D1:CEE9 -  -  -  -      ;A small optimiztion here, letting us merge OPRFLG_C and OPRFLG_N
 3076 D1:CEE9 CB 87 -  -      res SF_CARRY,a
 3077 D1:CEEB CB BF -  -      res SF_NEG,a
 3078 D1:CEED 30 04 -  -      jr  nc,+_
 3079 D1:CEEF CB C7 -  -      set SF_CARRY,a
 3080 D1:CEF1 CB FF -  -      set SF_NEG,a
 3081 D1:CEF3 CB 8F -  -  _:  res SF_ZERO,a
 3082 D1:CEF5 20 02 -  -      jr  nz,$+4
 3083 D1:CEF7 CB CF -  -      set SF_ZERO,a
 3084 D1:CEF9 DD 77 04 -      ld  (ix+REGSR),a
 3085 D1:CEFC C3 CF B6 D1     jp  i6502NextLoad
 3086 D1:CF00 -  -  -  -  
 3087 D1:CF00 -  -  -  -  ;-----------------------------------------------------------------------------
 3088 D1:CF00 -  -  -  -  
 3089 D1:CF00 -  -  -  -  ;ANE (XAA) - (A OR ??) AND X AND oper -> A
 3090 D1:CF00 -  -  -  -  ;immediate	ANE #oper	8B	2	2  	††
 3091 D1:CF00 -  -  -  -  instr6502_ane_imm:
 3092 D1:CF00 ED 33 02 -      ADDCYC(2)
 3093 D1:CF03 ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3094 D1:CF05 DD B6 00 -      or  a,(ix+REGA)
 3095 D1:CF08 DD A6 01 -      and a,(ix+REGX)
 3096 D1:CF0B A6 -  -  -      and a,(hl)
 3097 D1:CF0C DD 77 00 -      ld  (ix+REGA),a
 3098 D1:CF0F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3099 D1:CF23 C3 CF B6 D1     jp  i6502NextLoad
 3100 D1:CF27 -  -  -  -  
 3101 D1:CF27 -  -  -  -  ;-----------------------------------------------------------------------------
 3102 D1:CF27 -  -  -  -  
 3103 D1:CF27 -  -  -  -  
 3104 D1:CF27 -  -  -  -  ;ARR - AND OPER + ROR
 3105 D1:CF27 -  -  -  -  ;Something hinky is going on with the flags. "This operation involves the adder"
 3106 D1:CF27 -  -  -  -  ;I need to get a better handle over what that might be.
 3107 D1:CF27 -  -  -  -  ;CVZN flags affected.
 3108 D1:CF27 -  -  -  -  ;
 3109 D1:CF27 -  -  -  -  ;Primary sources reads:
 3110 D1:CF27 -  -  -  -  ;----------------------
 3111 D1:CF27 -  -  -  -  ;This operation involves the adder:
 3112 D1:CF27 -  -  -  -  ;V-flag is set according to (A AND oper) + oper
 3113 D1:CF27 -  -  -  -  ;The carry is not set, but bit 7 (sign) is exchanged with the carry
 3114 D1:CF27 -  -  -  -  ;A AND oper, C -> [76543210] -> C
 3115 D1:CF27 -  -  -  -  ;
 3116 D1:CF27 -  -  -  -  ;Secondary source reads:
 3117 D1:CF27 -  -  -  -  ;-----------------------
 3118 D1:CF27 -  -  -  -  ;Similar to AND #i then ROR A, except sets the flags differently. 
 3119 D1:CF27 -  -  -  -  ;N and Z are normal, but C is bit 6 and V is bit 6 xor bit 5. 
 3120 D1:CF27 -  -  -  -  ;A fast way to perform signed division by 4 is: CMP #$80; ARR #$FF; ROR. 
 3121 D1:CF27 -  -  -  -  ;This can be extended to larger powers of two.
 3122 D1:CF27 -  -  -  -  
 3123 D1:CF27 -  -  -  -  ;immediate	ARR #oper	6B	2	2  
 3124 D1:CF27 -  -  -  -  instr6502_arr_imm:
 3125 D1:CF27 ED 33 02 -      ADDCYC(2)
 3126 D1:CF2A DD 7E 00 -      ld  a,(ix+REGA)
 3127 D1:CF2D A6 -  -  -      and a,(hl)
 3128 D1:CF2E 47 -  -  -      ld  b,a
 3129 D1:CF2F DD 7E 04 -      ld  a,(ix+REGSR)
 3130 D1:CF32 4F -  -  -      ld  c,a
 3131 D1:CF33 0F -  -  -      rrca    ;extract carry. This carry will go into sign bit of result
 3132 D1:CF34 CB B9 -  -      res SF_NEG,c
 3133 D1:CF36 30 02 -  -      jr  nc,$+4
 3134 D1:CF38 CB F9 -  -      set SF_NEG,c
 3135 D1:CF3A CB 18 -  -      rr b
 3136 D1:CF3C CB 89 -  -      res SF_ZERO,c
 3137 D1:CF3E 20 02 -  -      jr  nz,$+4
 3138 D1:CF40 CB C9 -  -      set SF_ZERO,c
 3139 D1:CF42 DD 70 00 -      ld  (ix+REGA),b
 3140 D1:CF45 78 -  -  -      ld  a,b
 3141 D1:CF46 E6 40 -  -      and a,%01000000
 3142 D1:CF48 CB 81 -  -      res SF_CARRY,c
 3143 D1:CF4A 28 02 -  -      jr  z,$+4
 3144 D1:CF4C CB C1 -  -      set SF_CARRY,c
 3145 D1:CF4E 0F -  -  -      rrca
 3146 D1:CF4F EE 20 -  -      xor a,%00100000
 3147 D1:CF51 E6 20 -  -      and a,%00100000
 3148 D1:CF53 CB B1 -  -      res SF_OVER,c
 3149 D1:CF55 28 02 -  -      jr  z,$+4
 3150 D1:CF57 CB F1 -  -      set SF_OVER,c
 3151 D1:CF59 DD 71 04 -      ld  (ix+REGSR),c
 3152 D1:CF5C -  -  -  -      ;TODO: Figure out a more efficient way to emulate this instruction.
 3153 D1:CF5C C3 CF B6 D1     jp  i6502NextLoad
 3154 D1:CF60 -  -  -  -  
 3155 D1:CF60 -  -  -  -  ;-----------------------------------------------------------------------------
 3156 D1:CF60 -  -  -  -  ;DCP (DCM) - DEC oper + CMP oper
 3157 D1:CF60 -  -  -  -  ;M-1->M, A-M. Affects CZN
 3158 D1:CF60 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3159 D1:CF60 -  -  -  -  
 3160 D1:CF60 -  -  -  -  ;zeropage	DCP oper	C7	2	5  	
 3161 D1:CF60 -  -  -  -  inst6502_dcp_zp:
 3162 D1:CF60 ED 33 05 -      ADDCYC(5)
 3163 D1:CF63 7E -  -  -      ld  a,(hl)
 3164 D1:CF64 01 00 38 D0     ld  bc,ZEROPAGE
 3165 D1:CF68 81 -  -  -      add a,c
 3166 D1:CF69 4F -  -  -      ld  c,a
 3167 D1:CF6A 0A -  -  -      ld  a,(bc)
 3168 D1:CF6B 3D -  -  -      dec a
 3169 D1:CF6C 02 -  -  -      ld  (bc),a
 3170 D1:CF6D 47 -  -  -      ld  b,a
 3171 D1:CF6E C3 6D B8 D1     jp  subroutine6502_cmp_combined_end
 3172 D1:CF72 -  -  -  -  
 3173 D1:CF72 -  -  -  -  ;zeropage,X	DCP oper,X	D7	2	6  	
 3174 D1:CF72 -  -  -  -  inst6520_dcp_zpx:
 3175 D1:CF72 ED 33 06 -      ADDCYC(6)
 3176 D1:CF75 7E -  -  -      ld  a,(hl)
 3177 D1:CF76 01 00 38 D0     ld  bc,ZEROPAGE
 3178 D1:CF7A 81 -  -  -      add a,c
 3179 D1:CF7B DD 86 01 -      add a,(ix+REGX)
 3180 D1:CF7E 4F -  -  -      ld  c,a
 3181 D1:CF7F 0A -  -  -      ld  a,(bc)
 3182 D1:CF80 3D -  -  -      dec a
 3183 D1:CF81 02 -  -  -      ld  (bc),a
 3184 D1:CF82 47 -  -  -      ld  b,a
 3185 D1:CF83 C3 6D B8 D1     jp  subroutine6502_cmp_combined_end
 3186 D1:CF87 -  -  -  -  
 3187 D1:CF87 -  -  -  -  ;absolute	DCP oper	CF	3	6  	
 3188 D1:CF87 -  -  -  -  inst6502_dcp_abs:
 3189 D1:CF87 ED 33 06 -      ADDCYC(6)
 3190 D1:CF8A CD 77 B7 D1     call subroutine6502_abs_split_start
 3191 D1:CF8E E5 -  -  -      push hl
 3192 D1:CF8F 50 -  -  -          ld  d,b
 3193 D1:CF90 79 -  -  -          ld  a,c
 3194 D1:CF91 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3195 D1:CF93 ED 4C -  -          mlt bc
 3196 D1:CF95 21 00 40 D0         ld  hl,PAGETABLE
 3197 D1:CF99 09 -  -  -          add hl,bc
 3198 D1:CF9A ED 27 -  -          ld  hl,(hl)
 3199 D1:CF9C 06 00 -  -          ld  b,0
 3200 D1:CF9E 4F -  -  -          ld  c,a
 3201 D1:CF9F 09 -  -  -          add hl,bc   ;full address
 3202 D1:CFA0 CD 40 AE D1         READ_ACCESS
 3203 D1:CFA4 3D -  -  -          dec a
 3204 D1:CFA5 47 -  -  -          ld b,a
 3205 D1:CFA6 C5 -  -  -          push bc
 3206 D1:CFA7 CD E2 AE D1             WRITE_ACCESS
 3207 D1:CFAB C1 -  -  -          pop bc
 3208 D1:CFAC E1 -  -  -      pop hl
 3209 D1:CFAD C3 6D B8 D1     jp  subroutine6502_cmp_combined_end
 3210 D1:CFB1 -  -  -  -  
 3211 D1:CFB1 -  -  -  -  ;absolut,X	DCP oper,X	DF	3	7  	
 3212 D1:CFB1 -  -  -  -  inst6502_dcp_absx:
 3213 D1:CFB1 ED 33 07 -      ADDCYC(7)
 3214 D1:CFB4 CD D4 B7 D1     PUSH_ABSXSPLIT_NODEP
 3215 D1:CFB8 CD 40 AE D1         READ_ACCESS
 3216 D1:CFBC 3D -  -  -          dec a
 3217 D1:CFBD 47 -  -  -          ld  b,a
 3218 D1:CFBE C5 -  -  -          push bc
 3219 D1:CFBF CD E2 AE D1             WRITE_ACCESS
 3220 D1:CFC3 C1 -  -  -          pop bc
 3221 D1:CFC4 E1 -  -  -      pop hl
 3222 D1:CFC5 C3 6D B8 D1     jp  subroutine6502_cmp_combined_end
 3223 D1:CFC9 -  -  -  -  
 3224 D1:CFC9 -  -  -  -  ;absolut,Y	DCP oper,Y	DB	3	7  	
 3225 D1:CFC9 -  -  -  -  inst6502_dcp_absy:
 3226 D1:CFC9 ED 33 07 -      ADDCYC(7)
 3227 D1:CFCC CD CF B7 D1     PUSH_ABSYSPLIT_NODEP
 3228 D1:CFD0 CD 40 AE D1         READ_ACCESS
 3229 D1:CFD4 3D -  -  -          dec a
 3230 D1:CFD5 47 -  -  -          ld  b,a
 3231 D1:CFD6 C5 -  -  -          push bc
 3232 D1:CFD7 CD E2 AE D1             WRITE_ACCESS
 3233 D1:CFDB C1 -  -  -          pop bc
 3234 D1:CFDC E1 -  -  -      pop hl
 3235 D1:CFDD C3 6D B8 D1     jp  subroutine6502_cmp_combined_end
 3236 D1:CFE1 -  -  -  -  
 3237 D1:CFE1 -  -  -  -  ;(indirect,X)	DCP (oper,X)	C3	2	8  	
 3238 D1:CFE1 -  -  -  -  inst6502_dcp_indx:
 3239 D1:CFE1 ED 33 08 -      ADDCYC(8)
 3240 D1:CFE4 E5 -  -  -      push hl
 3241 D1:CFE5 7E -  -  -          ld  a,(hl)
 3242 D1:CFE6 21 00 38 D0         ld  hl,ZEROPAGE
 3243 D1:CFEA 85 -  -  -          add a,L
 3244 D1:CFEB DD 86 01 -          add a,(ix+REGX)
 3245 D1:CFEE 6F -  -  -          ld  L,a
 3246 D1:CFEF 7E -  -  -          ld  a,(hl)
 3247 D1:CFF0 2C -  -  -          inc L
 3248 D1:CFF1 56 -  -  -          ld  d,(hl)
 3249 D1:CFF2 42 -  -  -          ld  b,d
 3250 D1:CFF3 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3251 D1:CFF5 ED 4C -  -          mlt bc
 3252 D1:CFF7 21 00 40 D0         ld  hl,PAGETABLE
 3253 D1:CFFB 09 -  -  -          add hl,bc
 3254 D1:CFFC ED 27 -  -          ld  hl,(hl)
 3255 D1:CFFE 06 00 -  -          ld  b,0
 3256 D1:D000 4F -  -  -          ld  c,a
 3257 D1:D001 09 -  -  -          add hl,bc
 3258 D1:D002 CD 40 AE D1         READ_ACCESS
 3259 D1:D006 3D -  -  -          dec a
 3260 D1:D007 47 -  -  -          ld  b,a
 3261 D1:D008 C5 -  -  -          push bc
 3262 D1:D009 CD E2 AE D1             WRITE_ACCESS
 3263 D1:D00D C1 -  -  -          pop bc
 3264 D1:D00E E1 -  -  -      pop hl
 3265 D1:D00F C3 6D B8 D1     jp  subroutine6502_cmp_combined_end
 3266 D1:D013 -  -  -  -  
 3267 D1:D013 -  -  -  -  ;(indirect),Y	DCP (oper),Y	D3	2	8  
 3268 D1:D013 -  -  -  -  inst6502_dcp_indy:
 3269 D1:D013 ED 33 08 -      ADDCYC(8)
 3270 D1:D016 E5 -  -  -      push hl
 3271 D1:D017 7E -  -  -          ld  a,(hl)
 3272 D1:D018 21 00 38 D0         ld  hl,ZEROPAGE
 3273 D1:D01C 85 -  -  -          add a,L
 3274 D1:D01D 6F -  -  -          ld  L,a
 3275 D1:D01E 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3276 D1:D01F 2C -  -  -          inc L
 3277 D1:D020 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3278 D1:D023 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3279 D1:D024 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3280 D1:D026 24 -  -  -          inc h
 3281 D1:D027 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3282 D1:D028 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3283 D1:D02A ED 6C -  -          mlt hl          ;23.
 3284 D1:D02C 01 00 40 D0         ld  bc,PAGETABLE
 3285 D1:D030 09 -  -  -          add hl,bc
 3286 D1:D031 ED 27 -  -          ld  hl,(hl)     ;address get.
 3287 D1:D033 01 00 00 00         ld  bc,0
 3288 D1:D037 4F -  -  -          ld  c,a
 3289 D1:D038 09 -  -  -          add hl,bc       ;Full address get.
 3290 D1:D039 CD 40 AE D1         READ_ACCESS
 3291 D1:D03D 3D -  -  -          dec a
 3292 D1:D03E 47 -  -  -          ld  b,a
 3293 D1:D03F C5 -  -  -          push bc
 3294 D1:D040 CD E2 AE D1             WRITE_ACCESS
 3295 D1:D044 C1 -  -  -          pop bc
 3296 D1:D045 E1 -  -  -      pop hl
 3297 D1:D046 C3 6D B8 D1     jp  subroutine6502_cmp_combined_end
 3298 D1:D04A -  -  -  -  
 3299 D1:D04A -  -  -  -  ;-----------------------------------------------------------------------------
 3300 D1:D04A -  -  -  -  ;ISC (ISB, INS) - INC oper + SBC oper
 3301 D1:D04A -  -  -  -  ;M+1->M, A-M-not(C)->A, affects VCZN
 3302 D1:D04A -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3303 D1:D04A -  -  -  -  
 3304 D1:D04A -  -  -  -  
 3305 D1:D04A -  -  -  -  
 3306 D1:D04A -  -  -  -  ;zeropage	ISC oper	E7	2	5  	
 3307 D1:D04A -  -  -  -  inst6502_isc_zp:
 3308 D1:D04A ED 33 05 -      ADDCYC(5)
 3309 D1:D04D 7E -  -  -      ld  a,(hl)
 3310 D1:D04E 01 00 38 D0     ld  bc,ZEROPAGE
 3311 D1:D052 81 -  -  -      add a,c
 3312 D1:D053 4F -  -  -      ld  c,a
 3313 D1:D054 0A -  -  -      ld  a,(bc)
 3314 D1:D055 3C -  -  -      inc a
 3315 D1:D056 02 -  -  -      ld  (bc),a
 3316 D1:D057 4F -  -  -      ld  c,a
 3317 D1:D058 C3 3A B8 D1     jp  subroutine6502_sbc_combined_end
 3318 D1:D05C -  -  -  -  
 3319 D1:D05C -  -  -  -  ;zeropage,X	ISC oper,X	F7	2	6  
 3320 D1:D05C -  -  -  -  inst6520_isc_zpx:
 3321 D1:D05C ED 33 06 -      ADDCYC(6)
 3322 D1:D05F 7E -  -  -      ld  a,(hl)
 3323 D1:D060 01 00 38 D0     ld  bc,ZEROPAGE
 3324 D1:D064 81 -  -  -      add a,c
 3325 D1:D065 DD 86 01 -      add a,(ix+REGX)
 3326 D1:D068 4F -  -  -      ld  c,a
 3327 D1:D069 0A -  -  -      ld  a,(bc)
 3328 D1:D06A 3C -  -  -      inc a
 3329 D1:D06B 02 -  -  -      ld  (bc),a
 3330 D1:D06C 4F -  -  -      ld  c,a
 3331 D1:D06D C3 3A B8 D1     jp  subroutine6502_sbc_combined_end
 3332 D1:D071 -  -  -  -  
 3333 D1:D071 -  -  -  -  ;absolute	ISC oper	EF	3	6  	
 3334 D1:D071 -  -  -  -  inst6502_isc_abs:
 3335 D1:D071 ED 33 06 -      ADDCYC(6)
 3336 D1:D074 CD 77 B7 D1     call subroutine6502_abs_split_start
 3337 D1:D078 E5 -  -  -      push hl
 3338 D1:D079 50 -  -  -          ld  d,b
 3339 D1:D07A 79 -  -  -          ld  a,c
 3340 D1:D07B 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3341 D1:D07D ED 4C -  -          mlt bc
 3342 D1:D07F 21 00 40 D0         ld  hl,PAGETABLE
 3343 D1:D083 09 -  -  -          add hl,bc
 3344 D1:D084 ED 27 -  -          ld  hl,(hl)
 3345 D1:D086 06 00 -  -          ld  b,0
 3346 D1:D088 4F -  -  -          ld  c,a
 3347 D1:D089 09 -  -  -          add hl,bc   ;full address
 3348 D1:D08A CD 40 AE D1         READ_ACCESS
 3349 D1:D08E 3C -  -  -          inc a
 3350 D1:D08F 47 -  -  -          ld b,a
 3351 D1:D090 4F -  -  -          ld c,a
 3352 D1:D091 C5 -  -  -          push bc
 3353 D1:D092 CD E2 AE D1             WRITE_ACCESS
 3354 D1:D096 C1 -  -  -          pop bc
 3355 D1:D097 E1 -  -  -      pop hl
 3356 D1:D098 C3 3A B8 D1     jp  subroutine6502_sbc_combined_end
 3357 D1:D09C -  -  -  -  
 3358 D1:D09C -  -  -  -  ;absolut,X	ISC oper,X	FF	3	7  	
 3359 D1:D09C -  -  -  -  inst6502_isc_absx:
 3360 D1:D09C ED 33 07 -      ADDCYC(7)
 3361 D1:D09F CD D4 B7 D1     PUSH_ABSXSPLIT_NODEP
 3362 D1:D0A3 CD 40 AE D1         READ_ACCESS
 3363 D1:D0A7 3C -  -  -          inc a
 3364 D1:D0A8 47 -  -  -          ld  b,a
 3365 D1:D0A9 4F -  -  -          ld  c,a
 3366 D1:D0AA C5 -  -  -          push bc
 3367 D1:D0AB CD E2 AE D1             WRITE_ACCESS
 3368 D1:D0AF C1 -  -  -          pop bc
 3369 D1:D0B0 E1 -  -  -      pop hl
 3370 D1:D0B1 C3 3A B8 D1     jp  subroutine6502_sbc_combined_end
 3371 D1:D0B5 -  -  -  -  
 3372 D1:D0B5 -  -  -  -  ;absolut,Y	ISC oper,Y	FB	3	7  	
 3373 D1:D0B5 -  -  -  -  inst6502_isc_absy:
 3374 D1:D0B5 ED 33 07 -      ADDCYC(7)
 3375 D1:D0B8 CD CF B7 D1     PUSH_ABSYSPLIT_NODEP
 3376 D1:D0BC CD 40 AE D1         READ_ACCESS
 3377 D1:D0C0 3C -  -  -          inc a
 3378 D1:D0C1 47 -  -  -          ld  b,a
 3379 D1:D0C2 4F -  -  -          ld  c,a
 3380 D1:D0C3 C5 -  -  -          push bc
 3381 D1:D0C4 CD E2 AE D1             WRITE_ACCESS
 3382 D1:D0C8 C1 -  -  -          pop bc
 3383 D1:D0C9 E1 -  -  -      pop hl
 3384 D1:D0CA C3 3A B8 D1     jp  subroutine6502_sbc_combined_end
 3385 D1:D0CE -  -  -  -  
 3386 D1:D0CE -  -  -  -  ;(indirect,X)	ISC (oper,X)	E3	2	8  	
 3387 D1:D0CE -  -  -  -  inst6502_isc_indx:
 3388 D1:D0CE ED 33 08 -      ADDCYC(8)
 3389 D1:D0D1 E5 -  -  -      push hl
 3390 D1:D0D2 7E -  -  -          ld  a,(hl)
 3391 D1:D0D3 21 00 38 D0         ld  hl,ZEROPAGE
 3392 D1:D0D7 85 -  -  -          add a,L
 3393 D1:D0D8 DD 86 01 -          add a,(ix+REGX)
 3394 D1:D0DB 6F -  -  -          ld  L,a
 3395 D1:D0DC 7E -  -  -          ld  a,(hl)
 3396 D1:D0DD 2C -  -  -          inc L
 3397 D1:D0DE 56 -  -  -          ld  d,(hl)
 3398 D1:D0DF 42 -  -  -          ld  b,d
 3399 D1:D0E0 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3400 D1:D0E2 ED 4C -  -          mlt bc
 3401 D1:D0E4 21 00 40 D0         ld  hl,PAGETABLE
 3402 D1:D0E8 09 -  -  -          add hl,bc
 3403 D1:D0E9 ED 27 -  -          ld  hl,(hl)
 3404 D1:D0EB 06 00 -  -          ld  b,0
 3405 D1:D0ED 4F -  -  -          ld  c,a
 3406 D1:D0EE 09 -  -  -          add hl,bc
 3407 D1:D0EF CD 40 AE D1         READ_ACCESS
 3408 D1:D0F3 3C -  -  -          inc a
 3409 D1:D0F4 47 -  -  -          ld  b,a
 3410 D1:D0F5 4F -  -  -          ld  c,a
 3411 D1:D0F6 C5 -  -  -          push bc
 3412 D1:D0F7 CD E2 AE D1             WRITE_ACCESS
 3413 D1:D0FB C1 -  -  -          pop bc
 3414 D1:D0FC E1 -  -  -      pop hl
 3415 D1:D0FD C3 3A B8 D1     jp  subroutine6502_sbc_combined_end
 3416 D1:D101 -  -  -  -  
 3417 D1:D101 -  -  -  -  ;(indirect),Y	ISC (oper),Y	F3	2	8  
 3418 D1:D101 -  -  -  -  inst6502_isc_indy:
 3419 D1:D101 ED 33 08 -      ADDCYC(8)
 3420 D1:D104 E5 -  -  -      push hl
 3421 D1:D105 7E -  -  -          ld  a,(hl)
 3422 D1:D106 21 00 38 D0         ld  hl,ZEROPAGE
 3423 D1:D10A 85 -  -  -          add a,L
 3424 D1:D10B 6F -  -  -          ld  L,a
 3425 D1:D10C 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3426 D1:D10D 2C -  -  -          inc L
 3427 D1:D10E DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3428 D1:D111 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3429 D1:D112 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3430 D1:D114 24 -  -  -          inc h
 3431 D1:D115 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3432 D1:D116 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3433 D1:D118 ED 6C -  -          mlt hl          ;23.
 3434 D1:D11A 01 00 40 D0         ld  bc,PAGETABLE
 3435 D1:D11E 09 -  -  -          add hl,bc
 3436 D1:D11F ED 27 -  -          ld  hl,(hl)     ;address get.
 3437 D1:D121 01 00 00 00         ld  bc,0
 3438 D1:D125 4F -  -  -          ld  c,a
 3439 D1:D126 09 -  -  -          add hl,bc       ;Full address get.
 3440 D1:D127 CD 40 AE D1         READ_ACCESS
 3441 D1:D12B 3C -  -  -          inc a
 3442 D1:D12C 47 -  -  -          ld  b,a
 3443 D1:D12D 4F -  -  -          ld  c,a
 3444 D1:D12E C5 -  -  -          push bc
 3445 D1:D12F CD E2 AE D1             WRITE_ACCESS
 3446 D1:D133 C1 -  -  -          pop bc
 3447 D1:D134 E1 -  -  -      pop hl
 3448 D1:D135 C3 3A B8 D1     jp  subroutine6502_sbc_combined_end
 3449 D1:D139 -  -  -  -  ;-----------------------------------------------------------------------------
 3450 D1:D139 -  -  -  -  ;LAS (LAR) - LDA/TSX oper
 3451 D1:D139 -  -  -  -  ;M AND SP -> A, X, SP. Affects ZN
 3452 D1:D139 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3453 D1:D139 -  -  -  -  ;absolut,Y	LAS oper,Y	BB	3	4* 
 3454 D1:D139 -  -  -  -  inst6502_las_absy:
 3455 D1:D139 ED 33 04 -      ADDCYC(4)
 3456 D1:D13C CD 93 B7 D1     PUSH_ABSYSPLIT
 3457 D1:D140 CD 40 AE D1         READ_ACCESS
 3458 D1:D144 E1 -  -  -      pop hl
 3459 D1:D145 DD A6 03 -      and a,(ix+REGSP)
 3460 D1:D148 DD 77 00 -      ld  (ix+REGA),A
 3461 D1:D14B DD 77 01 -      ld  (ix+REGX),A
 3462 D1:D14E DD 77 03 -      ld  (ix+REGSP),A
 3463 D1:D151 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3464 D1:D165 C3 CF B6 D1     jp i6502NextLoad
 3465 D1:D169 -  -  -  -  
 3466 D1:D169 -  -  -  -  ;-----------------------------------------------------------------------------
 3467 D1:D169 -  -  -  -  ;LAX - LDA oper + LDX oper
 3468 D1:D169 -  -  -  -  ;M -> A -> X. Flags affected: ZN
 3469 D1:D169 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3470 D1:D169 -  -  -  -  ;zeropage	LAX oper	A7	2	3  	
 3471 D1:D169 -  -  -  -  inst6502_lax_zp:
 3472 D1:D169 ED 33 03 -      ADDCYC(3)
 3473 D1:D16C 7E -  -  -      ld  a,(hl)
 3474 D1:D16D 01 00 38 D0     ld  bc,ZEROPAGE
 3475 D1:D171 81 -  -  -      add a,c
 3476 D1:D172 4F -  -  -      ld  c,a
 3477 D1:D173 0A -  -  -      ld  a,(bc)
 3478 D1:D174 DD 77 00 -      ld  (ix+REGA),a
 3479 D1:D177 DD 77 01 -      ld  (ix+REGX),a
 3480 D1:D17A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3481 D1:D18E C3 CF B6 D1     jp i6502NextLoad
 3482 D1:D192 -  -  -  -  
 3483 D1:D192 -  -  -  -  ;zeropage,Y	LAX oper,Y	B7	2	4  	
 3484 D1:D192 -  -  -  -  inst6502_lax_zpy:
 3485 D1:D192 ED 33 04 -      ADDCYC(4)
 3486 D1:D195 7E -  -  -      ld  a,(hl)
 3487 D1:D196 01 00 38 D0     ld  bc,ZEROPAGE
 3488 D1:D19A 81 -  -  -      add a,c
 3489 D1:D19B DD 86 02 -      add a,(ix+REGY)
 3490 D1:D19E 4F -  -  -      ld  c,a
 3491 D1:D19F 0A -  -  -      ld  a,(bc)
 3492 D1:D1A0 DD 77 00 -      ld  (ix+REGA),a
 3493 D1:D1A3 DD 77 01 -      ld  (ix+REGX),a
 3494 D1:D1A6 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3495 D1:D1BA C3 CF B6 D1     jp i6502NextLoad
 3496 D1:D1BE -  -  -  -  
 3497 D1:D1BE -  -  -  -  ;absolute	LAX oper	AF	3	4  	
 3498 D1:D1BE -  -  -  -  inst6502_lax_abs:
 3499 D1:D1BE ED 33 04 -      ADDCYC(4)
 3500 D1:D1C1 CD 77 B7 D1     call subroutine6502_abs_split_start
 3501 D1:D1C5 E5 -  -  -      push hl
 3502 D1:D1C6 50 -  -  -          ld  d,b
 3503 D1:D1C7 79 -  -  -          ld  a,c
 3504 D1:D1C8 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3505 D1:D1CA ED 4C -  -          mlt bc
 3506 D1:D1CC 21 00 40 D0         ld  hl,PAGETABLE
 3507 D1:D1D0 09 -  -  -          add hl,bc
 3508 D1:D1D1 ED 27 -  -          ld  hl,(hl)
 3509 D1:D1D3 06 00 -  -          ld  b,0
 3510 D1:D1D5 4F -  -  -          ld  c,a
 3511 D1:D1D6 09 -  -  -          add hl,bc   ;full address
 3512 D1:D1D7 CD 40 AE D1         READ_ACCESS
 3513 D1:D1DB DD 77 00 -          ld (ix+REGA),a
 3514 D1:D1DE DD 77 01 -          ld (ix+REGX),a
 3515 D1:D1E1 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3516 D1:D1F5 E1 -  -  -      pop hl
 3517 D1:D1F6 C3 CF B6 D1     jp i6502NextLoad
 3518 D1:D1FA -  -  -  -  
 3519 D1:D1FA -  -  -  -  ;absolut,Y	LAX oper,Y	BF	3	4* 	
 3520 D1:D1FA -  -  -  -  inst6502_lax_absy:
 3521 D1:D1FA ED 33 04 -      ADDCYC(4)
 3522 D1:D1FD CD 93 B7 D1     PUSH_ABSYSPLIT
 3523 D1:D201 CD 40 AE D1         READ_ACCESS
 3524 D1:D205 DD 77 00 -          ld (ix+REGA),a
 3525 D1:D208 DD 77 01 -          ld (ix+REGX),a
 3526 D1:D20B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3527 D1:D21F E1 -  -  -      pop hl
 3528 D1:D220 C3 CF B6 D1     jp i6502NextLoad
 3529 D1:D224 -  -  -  -  
 3530 D1:D224 -  -  -  -  ;(indirect,X)	LAX (oper,X)	A3	2	6  	
 3531 D1:D224 -  -  -  -  inst6502_lax_indx:
 3532 D1:D224 ED 33 06 -      ADDCYC(6)
 3533 D1:D227 E5 -  -  -      push hl
 3534 D1:D228 7E -  -  -          ld  a,(hl)
 3535 D1:D229 21 00 38 D0         ld  hl,ZEROPAGE
 3536 D1:D22D 85 -  -  -          add a,L
 3537 D1:D22E DD 86 01 -          add a,(ix+REGX)
 3538 D1:D231 6F -  -  -          ld  L,a
 3539 D1:D232 7E -  -  -          ld  a,(hl)
 3540 D1:D233 2C -  -  -          inc L
 3541 D1:D234 56 -  -  -          ld  d,(hl)
 3542 D1:D235 42 -  -  -          ld  b,d
 3543 D1:D236 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3544 D1:D238 ED 4C -  -          mlt bc
 3545 D1:D23A 21 00 40 D0         ld  hl,PAGETABLE
 3546 D1:D23E 09 -  -  -          add hl,bc
 3547 D1:D23F ED 27 -  -          ld  hl,(hl)
 3548 D1:D241 06 00 -  -          ld  b,0
 3549 D1:D243 4F -  -  -          ld  c,a
 3550 D1:D244 09 -  -  -          add hl,bc
 3551 D1:D245 CD 40 AE D1         READ_ACCESS
 3552 D1:D249 DD 77 00 -          ld (ix+REGA),a
 3553 D1:D24C DD 77 01 -          ld (ix+REGX),a
 3554 D1:D24F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3555 D1:D263 E1 -  -  -      pop hl
 3556 D1:D264 C3 CF B6 D1     jp i6502NextLoad
 3557 D1:D268 -  -  -  -  
 3558 D1:D268 -  -  -  -  ;(indirect),Y	LAX (oper),Y	B3	2	5* 
 3559 D1:D268 -  -  -  -  inst6502_lax_indy:
 3560 D1:D268 ED 33 05 -      ADDCYC(5)
 3561 D1:D26B E5 -  -  -      push hl
 3562 D1:D26C 7E -  -  -          ld  a,(hl)
 3563 D1:D26D 21 00 38 D0         ld  hl,ZEROPAGE
 3564 D1:D271 85 -  -  -          add a,L
 3565 D1:D272 6F -  -  -          ld  L,a
 3566 D1:D273 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3567 D1:D274 2C -  -  -          inc L
 3568 D1:D275 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3569 D1:D278 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3570 D1:D279 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3571 D1:D27B FD 23 -  -          ADDCYC(1)
 3572 D1:D27D 24 -  -  -          inc h
 3573 D1:D27E 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3574 D1:D27F 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3575 D1:D281 ED 6C -  -          mlt hl          ;23.
 3576 D1:D283 01 00 40 D0         ld  bc,PAGETABLE
 3577 D1:D287 09 -  -  -          add hl,bc
 3578 D1:D288 ED 27 -  -          ld  hl,(hl)     ;address get.
 3579 D1:D28A 01 00 00 00         ld  bc,0
 3580 D1:D28E 4F -  -  -          ld  c,a
 3581 D1:D28F 09 -  -  -          add hl,bc       ;Full address get.
 3582 D1:D290 CD 40 AE D1         READ_ACCESS
 3583 D1:D294 DD 77 00 -          ld  (ix+REGA),a
 3584 D1:D297 DD 77 01 -          ld  (ix+REGX),a
 3585 D1:D29A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3586 D1:D2AE E1 -  -  -      pop hl
 3587 D1:D2AF C3 CF B6 D1     jp i6502NextLoad
 3588 D1:D2B3 -  -  -  -  
 3589 D1:D2B3 -  -  -  -  ;-----------------------------------------------------------------------------
 3590 D1:D2B3 -  -  -  -  ;LXA (LAX immediate)
 3591 D1:D2B3 -  -  -  -  ;Store * AND oper in A and X
 3592 D1:D2B3 -  -  -  -  ;Highly unstable, involves a 'magic' constant, see ANE
 3593 D1:D2B3 -  -  -  -  ;(A OR CONST) AND oper -> A -> X
 3594 D1:D2B3 -  -  -  -  ;immediate	LXA #oper	AB	2	2  	††
 3595 D1:D2B3 -  -  -  -  inst6502_lxa:
 3596 D1:D2B3 ED 33 02 -      ADDCYC(2)
 3597 D1:D2B6 ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3598 D1:D2B8 DD B6 00 -      or  a,(ix+REGA)
 3599 D1:D2BB A6 -  -  -      and a,(hl)
 3600 D1:D2BC DD 77 00 -      ld  (ix+REGA),a
 3601 D1:D2BF DD 77 01 -      ld  (ix+REGX),a
 3602 D1:D2C2 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3603 D1:D2D6 C3 CF B6 D1     jp  i6502NextLoad
 3604 D1:D2DA -  -  -  -  
 3605 D1:D2DA -  -  -  -  ;-----------------------------------------------------------------------------
 3606 D1:D2DA -  -  -  -  ;RLA - ROL oper + AND oper
 3607 D1:D2DA -  -  -  -  ;M = C <- [76543210] <- C, A AND M -> A. flags CZN
 3608 D1:D2DA -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3609 D1:D2DA -  -  -  -  ;zeropage	RLA oper	27	2	5  	
 3610 D1:D2DA -  -  -  -  inst6502_rla_zp:
 3611 D1:D2DA ED 33 05 -      ADDCYC(5)
 3612 D1:D2DD 7E -  -  -      ld  a,(hl)
 3613 D1:D2DE 01 00 38 D0     ld  bc,ZEROPAGE
 3614 D1:D2E2 81 -  -  -      add a,c
 3615 D1:D2E3 4F -  -  -      ld  c,a
 3616 D1:D2E4 DD 7E 04 -      ld  a,(ix+REGSR)
 3617 D1:D2E7 1F -  -  -      rra
 3618 D1:D2E8 0A -  -  -      ld  a,(bc)
 3619 D1:D2E9 17 -  -  -      rla
 3620 D1:D2EA 02 -  -  -      ld  (bc),a
 3621 D1:D2EB -  -  -  -      ;Flag breakdown to optimize for split operation
 3622 D1:D2EB DD 46 04 -      ld  b,(ix+REGSR)
 3623 D1:D2EE CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3624 D1:D2F4 DD A6 00 -      and a,(ix+REGA)
 3625 D1:D2F7 DD 77 00 -      ld  (ix+REGA),a
 3626 D1:D2FA CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3627 D1:D300 87 -  -  -      add a,a
 3628 D1:D301 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3629 D1:D307 DD 70 04 -      ld  (ix+REGSR),b
 3630 D1:D30A C3 CF B6 D1     jp i6502NextLoad
 3631 D1:D30E -  -  -  -  
 3632 D1:D30E -  -  -  -  ;zeropage,X	RLA oper,X	37	2	6  	
 3633 D1:D30E -  -  -  -  inst6502_rla_zpx:
 3634 D1:D30E ED 33 06 -      ADDCYC(6)
 3635 D1:D311 7E -  -  -      ld  a,(hl)
 3636 D1:D312 01 00 38 D0     ld  bc,ZEROPAGE
 3637 D1:D316 81 -  -  -      add a,c
 3638 D1:D317 DD 86 01 -      add a,(ix+REGX)
 3639 D1:D31A 4F -  -  -      ld  c,a
 3640 D1:D31B DD 7E 04 -      ld  a,(ix+REGSR)
 3641 D1:D31E 1F -  -  -      rra
 3642 D1:D31F 0A -  -  -      ld  a,(bc)
 3643 D1:D320 17 -  -  -      rla
 3644 D1:D321 02 -  -  -      ld  (bc),a
 3645 D1:D322 -  -  -  -      ;Flag breakdown to optimize for split operation
 3646 D1:D322 DD 46 04 -      ld  b,(ix+REGSR)
 3647 D1:D325 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3648 D1:D32B DD A6 00 -      and a,(ix+REGA)
 3649 D1:D32E DD 77 00 -      ld  (ix+REGA),a
 3650 D1:D331 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3651 D1:D337 87 -  -  -      add a,a
 3652 D1:D338 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3653 D1:D33E DD 70 04 -      ld  (ix+REGSR),b
 3654 D1:D341 C3 CF B6 D1     jp i6502NextLoad
 3655 D1:D345 -  -  -  -  
 3656 D1:D345 -  -  -  -  ;absolute	RLA oper	2F	3	6  	
 3657 D1:D345 -  -  -  -  inst6502_rla_abs:
 3658 D1:D345 ED 33 06 -      ADDCYC(6)
 3659 D1:D348 CD 77 B7 D1     call subroutine6502_abs_split_start
 3660 D1:D34C E5 -  -  -      push hl
 3661 D1:D34D 50 -  -  -          ld  d,b
 3662 D1:D34E 79 -  -  -          ld  a,c
 3663 D1:D34F 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3664 D1:D351 ED 4C -  -          mlt bc
 3665 D1:D353 21 00 40 D0         ld  hl,PAGETABLE
 3666 D1:D357 09 -  -  -          add hl,bc
 3667 D1:D358 ED 27 -  -          ld  hl,(hl)
 3668 D1:D35A 06 00 -  -          ld  b,0
 3669 D1:D35C 4F -  -  -          ld  c,a
 3670 D1:D35D 09 -  -  -          add hl,bc   ;full address
 3671 D1:D35E CD 40 AE D1         READ_ACCESS
 3672 D1:D362 DD 46 04 -          ld  b,(ix+REGSR)
 3673 D1:D365 CB 18 -  -          rr b
 3674 D1:D367 17 -  -  -          rla
 3675 D1:D368 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3676 D1:D369 -  -  -  -          ;Split oper
 3677 D1:D369 DD 46 04 -          ld  b,(ix+REGSR)
 3678 D1:D36C CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3679 D1:D372 DD A6 00 -          and a,(ix+REGA)
 3680 D1:D375 DD 77 00 -          ld  (ix+REGA),a
 3681 D1:D378 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3682 D1:D37E 87 -  -  -          add a,a
 3683 D1:D37F CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3684 D1:D385 DD 70 04 -          ld  (ix+REGSR),b
 3685 D1:D388 41 -  -  -          ld  b,c
 3686 D1:D389 CD E2 AE D1         WRITE_ACCESS
 3687 D1:D38D E1 -  -  -      pop hl
 3688 D1:D38E C3 CF B6 D1     jp i6502NextLoad
 3689 D1:D392 -  -  -  -  
 3690 D1:D392 -  -  -  -  ;absolut,X	RLA oper,X	3F	3	7  	
 3691 D1:D392 -  -  -  -  inst6502_rla_absx:
 3692 D1:D392 ED 33 07 -      ADDCYC(7)
 3693 D1:D395 CD D4 B7 D1     PUSH_ABSXSPLIT_NODEP
 3694 D1:D399 CD 40 AE D1         READ_ACCESS
 3695 D1:D39D DD 46 04 -          ld  b,(ix+REGSR)
 3696 D1:D3A0 CB 18 -  -          rr b
 3697 D1:D3A2 17 -  -  -          rla
 3698 D1:D3A3 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3699 D1:D3A4 -  -  -  -          ;Split oper
 3700 D1:D3A4 DD 46 04 -          ld  b,(ix+REGSR)
 3701 D1:D3A7 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3702 D1:D3AD DD A6 00 -          and a,(ix+REGA)
 3703 D1:D3B0 DD 77 00 -          ld  (ix+REGA),a
 3704 D1:D3B3 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3705 D1:D3B9 87 -  -  -          add a,a
 3706 D1:D3BA CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3707 D1:D3C0 DD 70 04 -          ld  (ix+REGSR),b
 3708 D1:D3C3 41 -  -  -          ld  b,c
 3709 D1:D3C4 CD E2 AE D1         WRITE_ACCESS
 3710 D1:D3C8 E1 -  -  -      pop hl
 3711 D1:D3C9 C3 CF B6 D1     jp i6502NextLoad
 3712 D1:D3CD -  -  -  -  
 3713 D1:D3CD -  -  -  -  ;absolut,Y	RLA oper,Y	3B	3	7  	
 3714 D1:D3CD -  -  -  -  inst6502_rla_absy:
 3715 D1:D3CD ED 33 07 -      ADDCYC(7)
 3716 D1:D3D0 CD CF B7 D1     PUSH_ABSYSPLIT_NODEP
 3717 D1:D3D4 CD 40 AE D1         READ_ACCESS
 3718 D1:D3D8 DD 46 04 -          ld  b,(ix+REGSR)
 3719 D1:D3DB CB 18 -  -          rr b
 3720 D1:D3DD 17 -  -  -          rla
 3721 D1:D3DE 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3722 D1:D3DF -  -  -  -          ;Split oper
 3723 D1:D3DF DD 46 04 -          ld  b,(ix+REGSR)
 3724 D1:D3E2 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3725 D1:D3E8 DD A6 00 -          and a,(ix+REGA)
 3726 D1:D3EB DD 77 00 -          ld  (ix+REGA),a
 3727 D1:D3EE CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3728 D1:D3F4 87 -  -  -          add a,a
 3729 D1:D3F5 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3730 D1:D3FB DD 70 04 -          ld  (ix+REGSR),b
 3731 D1:D3FE 41 -  -  -          ld  b,c
 3732 D1:D3FF CD E2 AE D1         WRITE_ACCESS
 3733 D1:D403 E1 -  -  -      pop hl
 3734 D1:D404 C3 CF B6 D1     jp i6502NextLoad
 3735 D1:D408 -  -  -  -  
 3736 D1:D408 -  -  -  -  ;(indirect,X)	RLA (oper,X)	23	2	8  	
 3737 D1:D408 -  -  -  -  isnt6502_rla_indx:
 3738 D1:D408 ED 33 08 -      ADDCYC(8)
 3739 D1:D40B E5 -  -  -      push hl
 3740 D1:D40C 7E -  -  -          ld  a,(hl)
 3741 D1:D40D 21 00 38 D0         ld  hl,ZEROPAGE
 3742 D1:D411 85 -  -  -          add a,L
 3743 D1:D412 DD 86 01 -          add a,(ix+REGX)
 3744 D1:D415 6F -  -  -          ld  L,a
 3745 D1:D416 7E -  -  -          ld  a,(hl)
 3746 D1:D417 2C -  -  -          inc L
 3747 D1:D418 56 -  -  -          ld  d,(hl)
 3748 D1:D419 42 -  -  -          ld  b,d
 3749 D1:D41A 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3750 D1:D41C ED 4C -  -          mlt bc
 3751 D1:D41E 21 00 40 D0         ld  hl,PAGETABLE
 3752 D1:D422 09 -  -  -          add hl,bc
 3753 D1:D423 ED 27 -  -          ld  hl,(hl)
 3754 D1:D425 06 00 -  -          ld  b,0
 3755 D1:D427 4F -  -  -          ld  c,a
 3756 D1:D428 09 -  -  -          add hl,bc
 3757 D1:D429 CD 40 AE D1         READ_ACCESS
 3758 D1:D42D DD 46 04 -          ld  b,(ix+REGSR)
 3759 D1:D430 CB 18 -  -          rr b
 3760 D1:D432 17 -  -  -          rla
 3761 D1:D433 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3762 D1:D434 -  -  -  -          ;Split oper
 3763 D1:D434 DD 46 04 -          ld  b,(ix+REGSR)
 3764 D1:D437 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3765 D1:D43D DD A6 00 -          and a,(ix+REGA)
 3766 D1:D440 DD 77 00 -          ld  (ix+REGA),a
 3767 D1:D443 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3768 D1:D449 87 -  -  -          add a,a
 3769 D1:D44A CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3770 D1:D450 DD 70 04 -          ld  (ix+REGSR),b
 3771 D1:D453 41 -  -  -          ld  b,c
 3772 D1:D454 CD E2 AE D1         WRITE_ACCESS
 3773 D1:D458 E1 -  -  -      pop hl
 3774 D1:D459 C3 CF B6 D1     jp  i6502NextLoad
 3775 D1:D45D -  -  -  -  
 3776 D1:D45D -  -  -  -  ;(indirect),Y	RLA (oper),Y	33	2	8  
 3777 D1:D45D -  -  -  -  inst6502_rla_indy:
 3778 D1:D45D ED 33 08 -      ADDCYC(8)
 3779 D1:D460 E5 -  -  -      push hl
 3780 D1:D461 7E -  -  -          ld  a,(hl)
 3781 D1:D462 21 00 38 D0         ld  hl,ZEROPAGE
 3782 D1:D466 85 -  -  -          add a,L
 3783 D1:D467 6F -  -  -          ld  L,a
 3784 D1:D468 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3785 D1:D469 2C -  -  -          inc L
 3786 D1:D46A DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3787 D1:D46D 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3788 D1:D46E 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3789 D1:D470 24 -  -  -          inc h
 3790 D1:D471 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3791 D1:D472 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3792 D1:D474 ED 6C -  -          mlt hl          ;23.
 3793 D1:D476 01 00 40 D0         ld  bc,PAGETABLE
 3794 D1:D47A 09 -  -  -          add hl,bc
 3795 D1:D47B ED 27 -  -          ld  hl,(hl)     ;address get.
 3796 D1:D47D 01 00 00 00         ld  bc,0
 3797 D1:D481 4F -  -  -          ld  c,a
 3798 D1:D482 09 -  -  -          add hl,bc       ;Full address get.
 3799 D1:D483 CD 40 AE D1         READ_ACCESS
 3800 D1:D487 DD 46 04 -          ld  b,(ix+REGSR)
 3801 D1:D48A CB 18 -  -          rr b
 3802 D1:D48C 17 -  -  -          rla
 3803 D1:D48D 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3804 D1:D48E -  -  -  -          ;Split oper
 3805 D1:D48E DD 46 04 -          ld  b,(ix+REGSR)
 3806 D1:D491 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3807 D1:D497 DD A6 00 -          and a,(ix+REGA)
 3808 D1:D49A DD 77 00 -          ld  (ix+REGA),a
 3809 D1:D49D CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3810 D1:D4A3 87 -  -  -          add a,a
 3811 D1:D4A4 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3812 D1:D4AA DD 70 04 -          ld  (ix+REGSR),b
 3813 D1:D4AD 41 -  -  -          ld  b,c
 3814 D1:D4AE CD E2 AE D1         WRITE_ACCESS
 3815 D1:D4B2 E1 -  -  -      pop hl
 3816 D1:D4B3 C3 CF B6 D1     jp  i6502NextLoad
 3817 D1:D4B7 -  -  -  -  
 3818 D1:D4B7 -  -  -  -  ;-----------------------------------------------------------------------------
 3819 D1:D4B7 -  -  -  -  ;RRA
 3820 D1:D4B7 -  -  -  -  ;ROR oper + ADC oper
 3821 D1:D4B7 -  -  -  -  ;M = C -> [76543210] -> C, A + M + C -> A, C. Affects VCZN
 3822 D1:D4B7 -  -  -  -  
 3823 D1:D4B7 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3824 D1:D4B7 -  -  -  -  ;zeropage	RRA oper	67	2	5  	
 3825 D1:D4B7 -  -  -  -  inst6502_rra_zp:
 3826 D1:D4B7 ED 33 05 -      ADDCYC(5)
 3827 D1:D4BA 7E -  -  -      ld  a,(hl)
 3828 D1:D4BB 01 00 38 D0     ld  bc,ZEROPAGE
 3829 D1:D4BF 81 -  -  -      add a,c
 3830 D1:D4C0 4F -  -  -      ld  c,a
 3831 D1:D4C1 DD 7E 04 -      ld  a,(ix+REGSR)
 3832 D1:D4C4 1F -  -  -      rra
 3833 D1:D4C5 0A -  -  -      ld  a,(bc)
 3834 D1:D4C6 1F -  -  -      rra
 3835 D1:D4C7 02 -  -  -      ld  (bc),a
 3836 D1:D4C8 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 3837 D1:D4CC 30 04 -  -      jr nc,$+6
 3838 D1:D4CE DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 3839 D1:D4D2 4F -  -  -      ld  c,a
 3840 D1:D4D3 C3 09 B8 D1     jp  subroutine6502_adc_combined_end
 3841 D1:D4D7 -  -  -  -  
 3842 D1:D4D7 -  -  -  -  ;zeropage,X	RRA oper,X	77	2	6  	
 3843 D1:D4D7 -  -  -  -  inst6502_rra_zpx:
 3844 D1:D4D7 ED 33 06 -      ADDCYC(6)
 3845 D1:D4DA 7E -  -  -      ld  a,(hl)
 3846 D1:D4DB 01 00 38 D0     ld  bc,ZEROPAGE
 3847 D1:D4DF 81 -  -  -      add a,c
 3848 D1:D4E0 DD 86 01 -      add a,(ix+REGX)
 3849 D1:D4E3 4F -  -  -      ld  c,a
 3850 D1:D4E4 DD 7E 04 -      ld  a,(ix+REGSR)
 3851 D1:D4E7 1F -  -  -      rra
 3852 D1:D4E8 0A -  -  -      ld  a,(bc)
 3853 D1:D4E9 1F -  -  -      rra
 3854 D1:D4EA 02 -  -  -      ld  (bc),a
 3855 D1:D4EB DD CB 04 86     res SF_CARRY,(ix+REGSR)
 3856 D1:D4EF 30 04 -  -      jr nc,$+6
 3857 D1:D4F1 DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 3858 D1:D4F5 4F -  -  -      ld  c,a
 3859 D1:D4F6 C3 09 B8 D1     jp  subroutine6502_adc_combined_end
 3860 D1:D4FA -  -  -  -  
 3861 D1:D4FA -  -  -  -  ;absolute	RRA oper	6F	3	6  	
 3862 D1:D4FA -  -  -  -  inst6502_rra_abs:
 3863 D1:D4FA ED 33 06 -      ADDCYC(6)
 3864 D1:D4FD CD 77 B7 D1     call subroutine6502_abs_split_start
 3865 D1:D501 E5 -  -  -      push hl
 3866 D1:D502 50 -  -  -          ld  d,b
 3867 D1:D503 79 -  -  -          ld  a,c
 3868 D1:D504 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3869 D1:D506 ED 4C -  -          mlt bc
 3870 D1:D508 21 00 40 D0         ld  hl,PAGETABLE
 3871 D1:D50C 09 -  -  -          add hl,bc
 3872 D1:D50D ED 27 -  -          ld  hl,(hl)
 3873 D1:D50F 06 00 -  -          ld  b,0
 3874 D1:D511 4F -  -  -          ld  c,a
 3875 D1:D512 09 -  -  -          add hl,bc   ;full address
 3876 D1:D513 CD 40 AE D1         READ_ACCESS
 3877 D1:D517 DD 46 04 -          ld  b,(ix+REGSR)
 3878 D1:D51A CB 18 -  -          rr b
 3879 D1:D51C 1F -  -  -          rra
 3880 D1:D51D DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3881 D1:D521 30 04 -  -          jr nc,$+6
 3882 D1:D523 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3883 D1:D527 47 -  -  -          ld  b,a
 3884 D1:D528 C5 -  -  -          push bc
 3885 D1:D529 CD E2 AE D1             WRITE_ACCESS
 3886 D1:D52D C1 -  -  -          pop bc
 3887 D1:D52E 48 -  -  -          ld c,b
 3888 D1:D52F E1 -  -  -      pop hl
 3889 D1:D530 C3 09 B8 D1     jp  subroutine6502_adc_combined_end
 3890 D1:D534 -  -  -  -  
 3891 D1:D534 -  -  -  -  ;absolut,X	RRA oper,X	7F	3	7  	
 3892 D1:D534 -  -  -  -  inst6502_rra_absx:
 3893 D1:D534 ED 33 07 -      ADDCYC(7)
 3894 D1:D537 CD D4 B7 D1     PUSH_ABSXSPLIT_NODEP
 3895 D1:D53B CD 40 AE D1         READ_ACCESS
 3896 D1:D53F DD 46 04 -          ld  b,(ix+REGSR)
 3897 D1:D542 CB 18 -  -          rr b
 3898 D1:D544 1F -  -  -          rra
 3899 D1:D545 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3900 D1:D549 30 04 -  -          jr nc,$+6
 3901 D1:D54B DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3902 D1:D54F 47 -  -  -          ld  b,a
 3903 D1:D550 C5 -  -  -          push bc
 3904 D1:D551 CD E2 AE D1             WRITE_ACCESS
 3905 D1:D555 C1 -  -  -          pop bc
 3906 D1:D556 48 -  -  -          ld c,b
 3907 D1:D557 E1 -  -  -      pop hl
 3908 D1:D558 C3 09 B8 D1     jp  subroutine6502_adc_combined_end
 3909 D1:D55C -  -  -  -  
 3910 D1:D55C -  -  -  -  ;absolut,Y	RRA oper,Y	7B	3	7  	
 3911 D1:D55C -  -  -  -  inst6502_rra_absy:
 3912 D1:D55C ED 33 07 -      ADDCYC(7)
 3913 D1:D55F CD CF B7 D1     PUSH_ABSYSPLIT_NODEP
 3914 D1:D563 CD 40 AE D1         READ_ACCESS
 3915 D1:D567 DD 46 04 -          ld  b,(ix+REGSR)
 3916 D1:D56A CB 18 -  -          rr b
 3917 D1:D56C 1F -  -  -          rra
 3918 D1:D56D DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3919 D1:D571 30 04 -  -          jr nc,$+6
 3920 D1:D573 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3921 D1:D577 47 -  -  -          ld  b,a
 3922 D1:D578 C5 -  -  -          push bc
 3923 D1:D579 CD E2 AE D1             WRITE_ACCESS
 3924 D1:D57D C1 -  -  -          pop bc
 3925 D1:D57E 48 -  -  -          ld c,b
 3926 D1:D57F E1 -  -  -      pop hl
 3927 D1:D580 C3 09 B8 D1     jp  subroutine6502_adc_combined_end
 3928 D1:D584 -  -  -  -  
 3929 D1:D584 -  -  -  -  ;(indirect,X)	RRA (oper,X)	63	2	8  	
 3930 D1:D584 -  -  -  -  isnt6502_rra_indx:
 3931 D1:D584 ED 33 08 -      ADDCYC(8)
 3932 D1:D587 E5 -  -  -      push hl
 3933 D1:D588 7E -  -  -          ld  a,(hl)
 3934 D1:D589 21 00 38 D0         ld  hl,ZEROPAGE
 3935 D1:D58D 85 -  -  -          add a,L
 3936 D1:D58E DD 86 01 -          add a,(ix+REGX)
 3937 D1:D591 6F -  -  -          ld  L,a
 3938 D1:D592 7E -  -  -          ld  a,(hl)
 3939 D1:D593 2C -  -  -          inc L
 3940 D1:D594 56 -  -  -          ld  d,(hl)
 3941 D1:D595 42 -  -  -          ld  b,d
 3942 D1:D596 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3943 D1:D598 ED 4C -  -          mlt bc
 3944 D1:D59A 21 00 40 D0         ld  hl,PAGETABLE
 3945 D1:D59E 09 -  -  -          add hl,bc
 3946 D1:D59F ED 27 -  -          ld  hl,(hl)
 3947 D1:D5A1 06 00 -  -          ld  b,0
 3948 D1:D5A3 4F -  -  -          ld  c,a
 3949 D1:D5A4 09 -  -  -          add hl,bc
 3950 D1:D5A5 CD 40 AE D1         READ_ACCESS
 3951 D1:D5A9 DD 46 04 -          ld  b,(ix+REGSR)
 3952 D1:D5AC CB 18 -  -          rr b
 3953 D1:D5AE 1F -  -  -          rra
 3954 D1:D5AF DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3955 D1:D5B3 30 04 -  -          jr nc,$+6
 3956 D1:D5B5 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3957 D1:D5B9 47 -  -  -          ld  b,a
 3958 D1:D5BA C5 -  -  -          push bc
 3959 D1:D5BB CD E2 AE D1             WRITE_ACCESS
 3960 D1:D5BF C1 -  -  -          pop bc
 3961 D1:D5C0 48 -  -  -          ld c,b
 3962 D1:D5C1 E1 -  -  -      pop hl
 3963 D1:D5C2 C3 09 B8 D1     jp  subroutine6502_adc_combined_end
 3964 D1:D5C6 -  -  -  -  
 3965 D1:D5C6 -  -  -  -  ;(indirect),Y	RRA (oper),Y	73	2	8  
 3966 D1:D5C6 -  -  -  -  inst6502_rra_indy:
 3967 D1:D5C6 ED 33 08 -      ADDCYC(8)
 3968 D1:D5C9 E5 -  -  -      push hl
 3969 D1:D5CA 7E -  -  -          ld  a,(hl)
 3970 D1:D5CB 21 00 38 D0         ld  hl,ZEROPAGE
 3971 D1:D5CF 85 -  -  -          add a,L
 3972 D1:D5D0 6F -  -  -          ld  L,a
 3973 D1:D5D1 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3974 D1:D5D2 2C -  -  -          inc L
 3975 D1:D5D3 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3976 D1:D5D6 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3977 D1:D5D7 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3978 D1:D5D9 24 -  -  -          inc h
 3979 D1:D5DA 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3980 D1:D5DB 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3981 D1:D5DD ED 6C -  -          mlt hl          ;23.
 3982 D1:D5DF 01 00 40 D0         ld  bc,PAGETABLE
 3983 D1:D5E3 09 -  -  -          add hl,bc
 3984 D1:D5E4 ED 27 -  -          ld  hl,(hl)     ;address get.
 3985 D1:D5E6 01 00 00 00         ld  bc,0
 3986 D1:D5EA 4F -  -  -          ld  c,a
 3987 D1:D5EB 09 -  -  -          add hl,bc       ;Full address get.
 3988 D1:D5EC CD 40 AE D1         READ_ACCESS
 3989 D1:D5F0 DD 46 04 -          ld  b,(ix+REGSR)
 3990 D1:D5F3 CB 18 -  -          rr b
 3991 D1:D5F5 1F -  -  -          rra
 3992 D1:D5F6 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3993 D1:D5FA 30 04 -  -          jr nc,$+6
 3994 D1:D5FC DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3995 D1:D600 47 -  -  -          ld  b,a
 3996 D1:D601 C5 -  -  -          push bc
 3997 D1:D602 CD E2 AE D1             WRITE_ACCESS
 3998 D1:D606 C1 -  -  -          pop bc
 3999 D1:D607 48 -  -  -          ld c,b
 4000 D1:D608 E1 -  -  -      pop hl
 4001 D1:D609 C3 09 B8 D1     jp  subroutine6502_adc_combined_end
 4002 D1:D60D -  -  -  -  
 4003 D1:D60D -  -  -  -  ;-----------------------------------------------------------------------------
 4004 D1:D60D -  -  -  -  ;SAX (AXS, AAX) - A AND X -> M
 4005 D1:D60D -  -  -  -  ;A and X are put on the bus at the same time (resulting effectively in an 
 4006 D1:D60D -  -  -  -  ;AND operation) and stored in M. Flags not affected.
 4007 D1:D60D -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4008 D1:D60D -  -  -  -  ;zeropage	SAX oper	87	2	3  	
 4009 D1:D60D -  -  -  -  inst6502_sax_zp:
 4010 D1:D60D ED 33 03 -      ADDCYC(3)
 4011 D1:D610 7E -  -  -      ld  a,(hl)
 4012 D1:D611 01 00 38 D0     ld  bc,ZEROPAGE
 4013 D1:D615 81 -  -  -      add a,c
 4014 D1:D616 4F -  -  -      ld  c,a
 4015 D1:D617 DD 7E 00 -      ld  a,(ix+REGA)
 4016 D1:D61A DD A6 01 -      and a,(ix+REGX)
 4017 D1:D61D 02 -  -  -      ld  (bc),a
 4018 D1:D61E C3 CF B6 D1     jp i6502NextLoad
 4019 D1:D622 -  -  -  -  
 4020 D1:D622 -  -  -  -  
 4021 D1:D622 -  -  -  -  ;zeropage,Y	SAX oper,Y	97	2	4  	
 4022 D1:D622 -  -  -  -  inst6502_sax_zpy:
 4023 D1:D622 ED 33 04 -      ADDCYC(4)
 4024 D1:D625 7E -  -  -      ld  a,(hl)
 4025 D1:D626 01 00 38 D0     ld  bc,ZEROPAGE
 4026 D1:D62A 81 -  -  -      add a,c
 4027 D1:D62B DD 86 02 -      add a,(ix+REGY)
 4028 D1:D62E 4F -  -  -      ld  c,a
 4029 D1:D62F DD 7E 00 -      ld  a,(ix+REGA)
 4030 D1:D632 DD A6 01 -      and a,(ix+REGX)
 4031 D1:D635 02 -  -  -      ld  (bc),a
 4032 D1:D636 C3 CF B6 D1     jp i6502NextLoad
 4033 D1:D63A -  -  -  -  
 4034 D1:D63A -  -  -  -  
 4035 D1:D63A -  -  -  -  ;absolute	SAX oper	8F	3	4  	
 4036 D1:D63A -  -  -  -  inst6502_sax_abs:
 4037 D1:D63A ED 33 04 -      ADDCYC(4)
 4038 D1:D63D CD 77 B7 D1     call subroutine6502_abs_split_start
 4039 D1:D641 E5 -  -  -      push hl
 4040 D1:D642 50 -  -  -          ld  d,b
 4041 D1:D643 79 -  -  -          ld  a,c
 4042 D1:D644 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4043 D1:D646 ED 4C -  -          mlt bc
 4044 D1:D648 21 00 40 D0         ld  hl,PAGETABLE
 4045 D1:D64C 09 -  -  -          add hl,bc
 4046 D1:D64D ED 27 -  -          ld  hl,(hl)
 4047 D1:D64F 06 00 -  -          ld  b,0
 4048 D1:D651 4F -  -  -          ld  c,a
 4049 D1:D652 09 -  -  -          add hl,bc   ;full address
 4050 D1:D653 DD 7E 00 -          ld  a,(ix+REGA)
 4051 D1:D656 DD A6 01 -          and a,(ix+REGX)
 4052 D1:D659 47 -  -  -          ld  b,a
 4053 D1:D65A CD E2 AE D1         WRITE_ACCESS
 4054 D1:D65E E1 -  -  -      pop hl
 4055 D1:D65F C3 CF B6 D1     jp i6502NextLoad
 4056 D1:D663 -  -  -  -  
 4057 D1:D663 -  -  -  -  ;(indirect,X)	SAX (oper,X)	83	2	6  
 4058 D1:D663 -  -  -  -  inst6502_sax_indx:
 4059 D1:D663 ED 33 06 -      ADDCYC(6)
 4060 D1:D666 E5 -  -  -      push hl
 4061 D1:D667 7E -  -  -          ld  a,(hl)
 4062 D1:D668 21 00 38 D0         ld  hl,ZEROPAGE
 4063 D1:D66C 85 -  -  -          add a,L
 4064 D1:D66D DD 86 01 -          add a,(ix+REGX)
 4065 D1:D670 6F -  -  -          ld  L,a
 4066 D1:D671 7E -  -  -          ld  a,(hl)
 4067 D1:D672 2C -  -  -          inc L
 4068 D1:D673 56 -  -  -          ld  d,(hl)
 4069 D1:D674 42 -  -  -          ld  b,d
 4070 D1:D675 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4071 D1:D677 ED 4C -  -          mlt bc
 4072 D1:D679 21 00 40 D0         ld  hl,PAGETABLE
 4073 D1:D67D 09 -  -  -          add hl,bc
 4074 D1:D67E ED 27 -  -          ld  hl,(hl)
 4075 D1:D680 06 00 -  -          ld  b,0
 4076 D1:D682 4F -  -  -          ld  c,a
 4077 D1:D683 09 -  -  -          add hl,bc
 4078 D1:D684 DD 7E 00 -          ld  a,(ix+REGA)
 4079 D1:D687 DD A6 01 -          and a,(ix+REGX)
 4080 D1:D68A 47 -  -  -          ld  b,a
 4081 D1:D68B CD E2 AE D1         WRITE_ACCESS
 4082 D1:D68F E1 -  -  -      pop hl
 4083 D1:D690 C3 CF B6 D1     jp i6502NextLoad
 4084 D1:D694 -  -  -  -  
 4085 D1:D694 -  -  -  -  ;-----------------------------------------------------------------------------
 4086 D1:D694 -  -  -  -  ;SBX (AXS, SAX) - CMP and DEX at once, sets flags like CMP
 4087 D1:D694 -  -  -  -  ;(A AND X) - oper -> X.  Flags affected: CZN
 4088 D1:D694 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4089 D1:D694 -  -  -  -  ;immediate	SBX #oper	CB	2	2  
 4090 D1:D694 -  -  -  -  inst6502_sbx_imm:
 4091 D1:D694 DD 7E 00 -      ld  a,(ix+REGA)
 4092 D1:D697 DD A6 01 -      and a,(ix+REGX)
 4093 D1:D69A 96 -  -  -      sub a,(hl)
 4094 D1:D69B DD 77 01 -      ld  (ix+REGX),a
 4095 D1:D69E 3F -  -  -      ccf
 4096 D1:D69F DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 4097 D1:D6B9 C3 CF B6 D1     jp  i6502NextLoad
 4098 D1:D6BD -  -  -  -  
 4099 D1:D6BD -  -  -  -  ;-----------------------------------------------------------------------------
 4100 D1:D6BD -  -  -  -  ;SHA (AHX, AXA) - Stores A AND X AND (high-byte of addr. + 1) at addr.
 4101 D1:D6BD -  -  -  -  ;unstable: sometimes 'AND (H+1)' is dropped, 
 4102 D1:D6BD -  -  -  -  ;page boundary crossings may not work 
 4103 D1:D6BD -  -  -  -  ;(with the high-byte of the value used as the high-byte of the address)
 4104 D1:D6BD -  -  -  -  ;A AND X AND (H+1) -> M
 4105 D1:D6BD -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4106 D1:D6BD -  -  -  -  ;
 4107 D1:D6BD -  -  -  -  ;NOTE: NOT GOING TO IMPLEMENT THESE. THEY'LL ADVANCE THE 6502 PC IN THE CORRECT
 4108 D1:D6BD -  -  -  -  ;MANNER BUT NOTHING MORE. THE CPU WILL HALT WHEN ENCOUNTERING ONE OF THESE.
 4109 D1:D6BD -  -  -  -  ;
 4110 D1:D6BD -  -  -  -  ;absolut,Y	SHA oper,Y	9F	3	5  	†
 4111 D1:D6BD -  -  -  -  inst6502_sha_absy:
 4112 D1:D6BD ED 33 05 -      ADDCYC(5)
 4113 D1:D6C0 CD 93 B7 D1     PUSH_ABSYSPLIT
 4114 D1:D6C4 18 FE -  -          jr $
 4115 D1:D6C6 E1 -  -  -      pop hl
 4116 D1:D6C7 C3 CF B6 D1     jp i6502NextLoad
 4117 D1:D6CB -  -  -  -  
 4118 D1:D6CB -  -  -  -  ;(indirect),Y	SHA (oper),Y	93	2	6  	†
 4119 D1:D6CB -  -  -  -  inst6502_sha_indy:
 4120 D1:D6CB ED 33 06 -      ADDCYC(6)
 4121 D1:D6CE E5 -  -  -      push hl
 4122 D1:D6CF 7E -  -  -          ld  a,(hl)
 4123 D1:D6D0 21 00 38 D0         ld  hl,ZEROPAGE
 4124 D1:D6D4 85 -  -  -          add a,L
 4125 D1:D6D5 6F -  -  -          ld  L,a
 4126 D1:D6D6 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4127 D1:D6D7 2C -  -  -          inc L
 4128 D1:D6D8 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4129 D1:D6DB 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4130 D1:D6DC 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4131 D1:D6DE 24 -  -  -          inc h
 4132 D1:D6DF 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4133 D1:D6E0 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4134 D1:D6E2 ED 6C -  -          mlt hl          ;23.
 4135 D1:D6E4 01 00 40 D0         ld  bc,PAGETABLE
 4136 D1:D6E8 09 -  -  -          add hl,bc
 4137 D1:D6E9 ED 27 -  -          ld  hl,(hl)     ;address get.
 4138 D1:D6EB 01 00 00 00         ld  bc,0
 4139 D1:D6EF 4F -  -  -          ld  c,a
 4140 D1:D6F0 09 -  -  -          add hl,bc       ;Full address get.
 4141 D1:D6F1 CD 40 AE D1         READ_ACCESS
 4142 D1:D6F5 18 FE -  -          jr $
 4143 D1:D6F7 E1 -  -  -      pop hl
 4144 D1:D6F8 C3 CF B6 D1     jp i6502NextLoad
 4145 D1:D6FC -  -  -  -  
 4146 D1:D6FC -  -  -  -  ;-----------------------------------------------------------------------------
 4147 D1:D6FC -  -  -  -  ;SHX (A11, SXA, XAS)
 4148 D1:D6FC -  -  -  -  ;SHY (A11, SYA, SAY)
 4149 D1:D6FC -  -  -  -  ;TAS (XAS, SHS)
 4150 D1:D6FC -  -  -  -  ;Not going to implement these, but they'll still get the program
 4151 D1:D6FC -  -  -  -  ;counter to make the correct noises. Right before locking up the core.
 4152 D1:D6FC -  -  -  -  ;All of these instructions are marked as "unstable" in that they'll sometimes
 4153 D1:D6FC -  -  -  -  ;drop the high byte, and page crossings sometimes won't work.
 4154 D1:D6FC -  -  -  -  
 4155 D1:D6FC -  -  -  -  ;absolut,Y	SHX oper,Y	9E	3	5  	†
 4156 D1:D6FC -  -  -  -  inst6502_shx_absy:
 4157 D1:D6FC ED 33 05 -      ADDCYC(5)
 4158 D1:D6FF CD CF B7 D1     PUSH_ABSYSPLIT_NODEP
 4159 D1:D703 18 FE -  -          jr $
 4160 D1:D705 E1 -  -  -      pop hl
 4161 D1:D706 C3 CF B6 D1     jp i6502NextLoad
 4162 D1:D70A -  -  -  -  
 4163 D1:D70A -  -  -  -  ;absolut,X	SHY oper,X	9C	3	5  	†
 4164 D1:D70A -  -  -  -  inst6502_shy_absx:
 4165 D1:D70A ED 33 05 -      ADDCYC(5)
 4166 D1:D70D CD D4 B7 D1     PUSH_ABSXSPLIT_NODEP
 4167 D1:D711 18 FE -  -          jr $
 4168 D1:D713 E1 -  -  -      pop hl
 4169 D1:D714 C3 CF B6 D1     jp i6502NextLoad
 4170 D1:D718 -  -  -  -  
 4171 D1:D718 -  -  -  -  ;absolut,Y	TAS oper,Y	9B	3	5  	†
 4172 D1:D718 -  -  -  -  inst6502_tas_absy:
 4173 D1:D718 ED 33 05 -      ADDCYC(5)
 4174 D1:D71B CD CF B7 D1     PUSH_ABSYSPLIT_NODEP
 4175 D1:D71F 18 FE -  -          jr $
 4176 D1:D721 E1 -  -  -      pop hl
 4177 D1:D722 C3 CF B6 D1     jp i6502NextLoad
 4178 D1:D726 -  -  -  -  
 4179 D1:D726 -  -  -  -  ;-----------------------------------------------------------------------------
 4180 D1:D726 -  -  -  -  ;SLO (ASO) - ASL oper + ORA oper
 4181 D1:D726 -  -  -  -  ;M = C <- [76543210] <- 0, A OR M -> A. Affects: CZN
 4182 D1:D726 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4183 D1:D726 -  -  -  -  
 4184 D1:D726 -  -  -  -  ;zeropage	SLO oper	07	2	5  	
 4185 D1:D726 -  -  -  -  inst6502_slo_zp:
 4186 D1:D726 ED 33 05 -      ADDCYC(5)
 4187 D1:D729 7E -  -  -      ld  a,(hl)
 4188 D1:D72A 01 00 38 D0     ld  bc,ZEROPAGE
 4189 D1:D72E 81 -  -  -      add a,c
 4190 D1:D72F 4F -  -  -      ld  c,a
 4191 D1:D730 0A -  -  -      ld  a,(bc)
 4192 D1:D731 CB 27 -  -      sla a
 4193 D1:D733 02 -  -  -      ld  (bc),a
 4194 D1:D734 -  -  -  -      ;Flag breakdown to optimize for split operation
 4195 D1:D734 DD 46 04 -      ld  b,(ix+REGSR)
 4196 D1:D737 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4197 D1:D73D DD B6 00 -      or  a,(ix+REGA)
 4198 D1:D740 DD 77 00 -      ld  (ix+REGA),a
 4199 D1:D743 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4200 D1:D749 87 -  -  -      add a,a
 4201 D1:D74A CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4202 D1:D750 DD 70 04 -      ld  (ix+REGSR),b
 4203 D1:D753 C3 CF B6 D1     jp i6502NextLoad
 4204 D1:D757 -  -  -  -  
 4205 D1:D757 -  -  -  -  ;zeropage,X	SLO oper,X	17	2	6  	
 4206 D1:D757 -  -  -  -  inst6502_slo_zpx:
 4207 D1:D757 ED 33 06 -      ADDCYC(6)
 4208 D1:D75A 7E -  -  -      ld  a,(hl)
 4209 D1:D75B 01 00 38 D0     ld  bc,ZEROPAGE
 4210 D1:D75F 81 -  -  -      add a,c
 4211 D1:D760 DD 86 01 -      add a,(ix+REGX)
 4212 D1:D763 4F -  -  -      ld  c,a
 4213 D1:D764 0A -  -  -      ld  a,(bc)
 4214 D1:D765 CB 27 -  -      sla a
 4215 D1:D767 02 -  -  -      ld  (bc),a
 4216 D1:D768 -  -  -  -      ;Flag breakdown to optimize for split operation
 4217 D1:D768 DD 46 04 -      ld  b,(ix+REGSR)
 4218 D1:D76B CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4219 D1:D771 DD B6 00 -      or  a,(ix+REGA)
 4220 D1:D774 DD 77 00 -      ld  (ix+REGA),a
 4221 D1:D777 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4222 D1:D77D 87 -  -  -      add a,a
 4223 D1:D77E CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4224 D1:D784 DD 70 04 -      ld  (ix+REGSR),b
 4225 D1:D787 C3 CF B6 D1     jp i6502NextLoad
 4226 D1:D78B -  -  -  -  
 4227 D1:D78B -  -  -  -  ;absolute	SLO oper	0F	3	6  	
 4228 D1:D78B -  -  -  -  inst6502_slo_abs:
 4229 D1:D78B ED 33 06 -      ADDCYC(6)
 4230 D1:D78E CD 77 B7 D1     call subroutine6502_abs_split_start
 4231 D1:D792 E5 -  -  -      push hl
 4232 D1:D793 50 -  -  -          ld  d,b
 4233 D1:D794 79 -  -  -          ld  a,c
 4234 D1:D795 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4235 D1:D797 ED 4C -  -          mlt bc
 4236 D1:D799 21 00 40 D0         ld  hl,PAGETABLE
 4237 D1:D79D 09 -  -  -          add hl,bc
 4238 D1:D79E ED 27 -  -          ld  hl,(hl)
 4239 D1:D7A0 06 00 -  -          ld  b,0
 4240 D1:D7A2 4F -  -  -          ld  c,a
 4241 D1:D7A3 09 -  -  -          add hl,bc   ;full address
 4242 D1:D7A4 CD 40 AE D1         READ_ACCESS
 4243 D1:D7A8 CB 27 -  -          sla a
 4244 D1:D7AA 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4245 D1:D7AB -  -  -  -          ;Split oper
 4246 D1:D7AB DD 46 04 -          ld  b,(ix+REGSR)
 4247 D1:D7AE CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4248 D1:D7B4 DD B6 00 -          or  a,(ix+REGA)
 4249 D1:D7B7 DD 77 00 -          ld  (ix+REGA),a
 4250 D1:D7BA CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4251 D1:D7C0 87 -  -  -          add a,a
 4252 D1:D7C1 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4253 D1:D7C7 DD 70 04 -          ld  (ix+REGSR),b
 4254 D1:D7CA 41 -  -  -          ld  b,c
 4255 D1:D7CB CD E2 AE D1         WRITE_ACCESS
 4256 D1:D7CF E1 -  -  -      pop hl
 4257 D1:D7D0 C3 CF B6 D1     jp i6502NextLoad
 4258 D1:D7D4 -  -  -  -  
 4259 D1:D7D4 -  -  -  -  ;absolut,X	SLO oper,X	1F	3	7  	
 4260 D1:D7D4 -  -  -  -  inst6502_slo_absx:
 4261 D1:D7D4 ED 33 07 -      ADDCYC(7)
 4262 D1:D7D7 CD D4 B7 D1     PUSH_ABSXSPLIT_NODEP
 4263 D1:D7DB CD 40 AE D1         READ_ACCESS
 4264 D1:D7DF CB 27 -  -          sla a
 4265 D1:D7E1 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4266 D1:D7E2 -  -  -  -          ;Split oper
 4267 D1:D7E2 DD 46 04 -          ld  b,(ix+REGSR)
 4268 D1:D7E5 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4269 D1:D7EB DD B6 00 -          or  a,(ix+REGA)
 4270 D1:D7EE DD 77 00 -          ld  (ix+REGA),a
 4271 D1:D7F1 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4272 D1:D7F7 87 -  -  -          add a,a
 4273 D1:D7F8 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4274 D1:D7FE DD 70 04 -          ld  (ix+REGSR),b
 4275 D1:D801 41 -  -  -          ld  b,c
 4276 D1:D802 CD E2 AE D1         WRITE_ACCESS
 4277 D1:D806 E1 -  -  -      pop hl
 4278 D1:D807 C3 CF B6 D1     jp i6502NextLoad
 4279 D1:D80B -  -  -  -  
 4280 D1:D80B -  -  -  -  ;absolut,Y	SLO oper,Y	1B	3	7  	
 4281 D1:D80B -  -  -  -  inst6502_slo_absy:
 4282 D1:D80B ED 33 07 -      ADDCYC(7)
 4283 D1:D80E CD CF B7 D1     PUSH_ABSYSPLIT_NODEP
 4284 D1:D812 CD 40 AE D1         READ_ACCESS
 4285 D1:D816 CB 27 -  -          sla a
 4286 D1:D818 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4287 D1:D819 -  -  -  -          ;Split oper
 4288 D1:D819 DD 46 04 -          ld  b,(ix+REGSR)
 4289 D1:D81C CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4290 D1:D822 DD B6 00 -          or  a,(ix+REGA)
 4291 D1:D825 DD 77 00 -          ld  (ix+REGA),a
 4292 D1:D828 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4293 D1:D82E 87 -  -  -          add a,a
 4294 D1:D82F CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4295 D1:D835 DD 70 04 -          ld  (ix+REGSR),b
 4296 D1:D838 41 -  -  -          ld  b,c
 4297 D1:D839 CD E2 AE D1         WRITE_ACCESS
 4298 D1:D83D E1 -  -  -      pop hl
 4299 D1:D83E C3 CF B6 D1     jp i6502NextLoad
 4300 D1:D842 -  -  -  -  
 4301 D1:D842 -  -  -  -  ;(indirect,X)	SLO (oper,X)	03	2	8  	
 4302 D1:D842 -  -  -  -  isnt6502_slo_indx:
 4303 D1:D842 ED 33 08 -      ADDCYC(8)
 4304 D1:D845 E5 -  -  -      push hl
 4305 D1:D846 7E -  -  -          ld  a,(hl)
 4306 D1:D847 21 00 38 D0         ld  hl,ZEROPAGE
 4307 D1:D84B 85 -  -  -          add a,L
 4308 D1:D84C DD 86 01 -          add a,(ix+REGX)
 4309 D1:D84F 6F -  -  -          ld  L,a
 4310 D1:D850 7E -  -  -          ld  a,(hl)
 4311 D1:D851 2C -  -  -          inc L
 4312 D1:D852 56 -  -  -          ld  d,(hl)
 4313 D1:D853 42 -  -  -          ld  b,d
 4314 D1:D854 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4315 D1:D856 ED 4C -  -          mlt bc
 4316 D1:D858 21 00 40 D0         ld  hl,PAGETABLE
 4317 D1:D85C 09 -  -  -          add hl,bc
 4318 D1:D85D ED 27 -  -          ld  hl,(hl)
 4319 D1:D85F 06 00 -  -          ld  b,0
 4320 D1:D861 4F -  -  -          ld  c,a
 4321 D1:D862 09 -  -  -          add hl,bc
 4322 D1:D863 CD 40 AE D1         READ_ACCESS
 4323 D1:D867 CB 27 -  -          sla a
 4324 D1:D869 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4325 D1:D86A -  -  -  -          ;Split oper
 4326 D1:D86A DD 46 04 -          ld  b,(ix+REGSR)
 4327 D1:D86D CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4328 D1:D873 DD B6 00 -          or  a,(ix+REGA)
 4329 D1:D876 DD 77 00 -          ld  (ix+REGA),a
 4330 D1:D879 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4331 D1:D87F 87 -  -  -          add a,a
 4332 D1:D880 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4333 D1:D886 DD 70 04 -          ld  (ix+REGSR),b
 4334 D1:D889 41 -  -  -          ld  b,c
 4335 D1:D88A CD E2 AE D1         WRITE_ACCESS
 4336 D1:D88E E1 -  -  -      pop hl
 4337 D1:D88F C3 CF B6 D1     jp  i6502NextLoad
 4338 D1:D893 -  -  -  -  
 4339 D1:D893 -  -  -  -  ;(indirect),Y	SLO (oper),Y	13	2	8  
 4340 D1:D893 -  -  -  -  inst6502_slo_indy:
 4341 D1:D893 ED 33 08 -      ADDCYC(8)
 4342 D1:D896 E5 -  -  -      push hl
 4343 D1:D897 7E -  -  -          ld  a,(hl)
 4344 D1:D898 21 00 38 D0         ld  hl,ZEROPAGE
 4345 D1:D89C 85 -  -  -          add a,L
 4346 D1:D89D 6F -  -  -          ld  L,a
 4347 D1:D89E 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4348 D1:D89F 2C -  -  -          inc L
 4349 D1:D8A0 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4350 D1:D8A3 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4351 D1:D8A4 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4352 D1:D8A6 24 -  -  -          inc h
 4353 D1:D8A7 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4354 D1:D8A8 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4355 D1:D8AA ED 6C -  -          mlt hl          ;23.
 4356 D1:D8AC 01 00 40 D0         ld  bc,PAGETABLE
 4357 D1:D8B0 09 -  -  -          add hl,bc
 4358 D1:D8B1 ED 27 -  -          ld  hl,(hl)     ;address get.
 4359 D1:D8B3 01 00 00 00         ld  bc,0
 4360 D1:D8B7 4F -  -  -          ld  c,a
 4361 D1:D8B8 09 -  -  -          add hl,bc       ;Full address get.
 4362 D1:D8B9 CD 40 AE D1         READ_ACCESS
 4363 D1:D8BD CB 27 -  -          sla a
 4364 D1:D8BF 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4365 D1:D8C0 -  -  -  -          ;Split oper
 4366 D1:D8C0 DD 46 04 -          ld  b,(ix+REGSR)
 4367 D1:D8C3 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4368 D1:D8C9 DD B6 00 -          or  a,(ix+REGA)
 4369 D1:D8CC DD 77 00 -          ld  (ix+REGA),a
 4370 D1:D8CF CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4371 D1:D8D5 87 -  -  -          add a,a
 4372 D1:D8D6 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4373 D1:D8DC DD 70 04 -          ld  (ix+REGSR),b
 4374 D1:D8DF 41 -  -  -          ld  b,c
 4375 D1:D8E0 CD E2 AE D1         WRITE_ACCESS
 4376 D1:D8E4 E1 -  -  -      pop hl
 4377 D1:D8E5 C3 CF B6 D1     jp  i6502NextLoad
 4378 D1:D8E9 -  -  -  -  
 4379 D1:D8E9 -  -  -  -  ;-----------------------------------------------------------------------------
 4380 D1:D8E9 -  -  -  -  ;SRE (LSE) - LSR oper + EOR oper
 4381 D1:D8E9 -  -  -  -  ;M = 0 -> [76543210] -> C, A EOR M -> A. Affects: CZN
 4382 D1:D8E9 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4383 D1:D8E9 -  -  -  -  
 4384 D1:D8E9 -  -  -  -  ;zeropage	SRE oper	47	2	5  	
 4385 D1:D8E9 -  -  -  -  inst6502_sre_zp:
 4386 D1:D8E9 ED 33 05 -      ADDCYC(5)
 4387 D1:D8EC 7E -  -  -      ld  a,(hl)
 4388 D1:D8ED 01 00 38 D0     ld  bc,ZEROPAGE
 4389 D1:D8F1 81 -  -  -      add a,c
 4390 D1:D8F2 4F -  -  -      ld  c,a
 4391 D1:D8F3 0A -  -  -      ld  a,(bc)
 4392 D1:D8F4 CB 3F -  -      srl a
 4393 D1:D8F6 02 -  -  -      ld  (bc),a
 4394 D1:D8F7 -  -  -  -      ;Flag breakdown to optimize for split operation
 4395 D1:D8F7 DD 46 04 -      ld  b,(ix+REGSR)
 4396 D1:D8FA CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4397 D1:D900 DD AE 00 -      xor a,(ix+REGA)
 4398 D1:D903 DD 77 00 -      ld  (ix+REGA),a
 4399 D1:D906 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4400 D1:D90C 87 -  -  -      add a,a
 4401 D1:D90D CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4402 D1:D913 DD 70 04 -      ld  (ix+REGSR),b
 4403 D1:D916 C3 CF B6 D1     jp i6502NextLoad
 4404 D1:D91A -  -  -  -  
 4405 D1:D91A -  -  -  -  ;zeropage,X	SRE oper,X	57	2	6  	
 4406 D1:D91A -  -  -  -  inst6502_sre_zpx:
 4407 D1:D91A ED 33 06 -      ADDCYC(6)
 4408 D1:D91D 7E -  -  -      ld  a,(hl)
 4409 D1:D91E 01 00 38 D0     ld  bc,ZEROPAGE
 4410 D1:D922 81 -  -  -      add a,c
 4411 D1:D923 DD 86 01 -      add a,(ix+REGX)
 4412 D1:D926 4F -  -  -      ld  c,a
 4413 D1:D927 0A -  -  -      ld  a,(bc)
 4414 D1:D928 CB 3F -  -      srl a
 4415 D1:D92A 02 -  -  -      ld  (bc),a
 4416 D1:D92B -  -  -  -      ;Flag breakdown to optimize for split operation
 4417 D1:D92B DD 46 04 -      ld  b,(ix+REGSR)
 4418 D1:D92E CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4419 D1:D934 DD AE 00 -      xor a,(ix+REGA)
 4420 D1:D937 DD 77 00 -      ld  (ix+REGA),a
 4421 D1:D93A CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4422 D1:D940 87 -  -  -      add a,a
 4423 D1:D941 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4424 D1:D947 DD 70 04 -      ld  (ix+REGSR),b
 4425 D1:D94A C3 CF B6 D1     jp i6502NextLoad
 4426 D1:D94E -  -  -  -  
 4427 D1:D94E -  -  -  -  ;absolute	SRE oper	4F	3	6  	
 4428 D1:D94E -  -  -  -  inst6502_sre_abs:
 4429 D1:D94E ED 33 06 -      ADDCYC(6)
 4430 D1:D951 CD 77 B7 D1     call subroutine6502_abs_split_start
 4431 D1:D955 E5 -  -  -      push hl
 4432 D1:D956 50 -  -  -          ld  d,b
 4433 D1:D957 79 -  -  -          ld  a,c
 4434 D1:D958 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4435 D1:D95A ED 4C -  -          mlt bc
 4436 D1:D95C 21 00 40 D0         ld  hl,PAGETABLE
 4437 D1:D960 09 -  -  -          add hl,bc
 4438 D1:D961 ED 27 -  -          ld  hl,(hl)
 4439 D1:D963 06 00 -  -          ld  b,0
 4440 D1:D965 4F -  -  -          ld  c,a
 4441 D1:D966 09 -  -  -          add hl,bc   ;full address
 4442 D1:D967 CD 40 AE D1         READ_ACCESS
 4443 D1:D96B CB 3F -  -          srl a
 4444 D1:D96D 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4445 D1:D96E -  -  -  -          ;Split oper
 4446 D1:D96E DD 46 04 -          ld  b,(ix+REGSR)
 4447 D1:D971 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4448 D1:D977 DD AE 00 -          xor a,(ix+REGA)
 4449 D1:D97A DD 77 00 -          ld  (ix+REGA),a
 4450 D1:D97D CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4451 D1:D983 87 -  -  -          add a,a
 4452 D1:D984 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4453 D1:D98A DD 70 04 -          ld  (ix+REGSR),b
 4454 D1:D98D 41 -  -  -          ld  b,c
 4455 D1:D98E CD E2 AE D1         WRITE_ACCESS
 4456 D1:D992 E1 -  -  -      pop hl
 4457 D1:D993 C3 CF B6 D1     jp i6502NextLoad
 4458 D1:D997 -  -  -  -  
 4459 D1:D997 -  -  -  -  ;absolut,X	SRE oper,X	5F	3	7  	
 4460 D1:D997 -  -  -  -  inst6502_sre_absx:
 4461 D1:D997 ED 33 07 -      ADDCYC(7)
 4462 D1:D99A CD D4 B7 D1     PUSH_ABSXSPLIT_NODEP
 4463 D1:D99E CD 40 AE D1         READ_ACCESS
 4464 D1:D9A2 CB 3F -  -          srl a
 4465 D1:D9A4 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4466 D1:D9A5 -  -  -  -          ;Split oper
 4467 D1:D9A5 DD 46 04 -          ld  b,(ix+REGSR)
 4468 D1:D9A8 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4469 D1:D9AE DD AE 00 -          xor a,(ix+REGA)
 4470 D1:D9B1 DD 77 00 -          ld  (ix+REGA),a
 4471 D1:D9B4 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4472 D1:D9BA 87 -  -  -          add a,a
 4473 D1:D9BB CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4474 D1:D9C1 DD 70 04 -          ld  (ix+REGSR),b
 4475 D1:D9C4 41 -  -  -          ld  b,c
 4476 D1:D9C5 CD E2 AE D1         WRITE_ACCESS
 4477 D1:D9C9 E1 -  -  -      pop hl
 4478 D1:D9CA C3 CF B6 D1     jp i6502NextLoad
 4479 D1:D9CE -  -  -  -  
 4480 D1:D9CE -  -  -  -  ;absolut,Y	SRE oper,Y	5B	3	7  	
 4481 D1:D9CE -  -  -  -  inst6502_sre_absy:
 4482 D1:D9CE ED 33 07 -      ADDCYC(7)
 4483 D1:D9D1 CD CF B7 D1     PUSH_ABSYSPLIT_NODEP
 4484 D1:D9D5 CD 40 AE D1         READ_ACCESS
 4485 D1:D9D9 CB 3F -  -          srl a
 4486 D1:D9DB 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4487 D1:D9DC -  -  -  -          ;Split oper
 4488 D1:D9DC DD 46 04 -          ld  b,(ix+REGSR)
 4489 D1:D9DF CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4490 D1:D9E5 DD AE 00 -          xor a,(ix+REGA)
 4491 D1:D9E8 DD 77 00 -          ld  (ix+REGA),a
 4492 D1:D9EB CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4493 D1:D9F1 87 -  -  -          add a,a
 4494 D1:D9F2 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4495 D1:D9F8 DD 70 04 -          ld  (ix+REGSR),b
 4496 D1:D9FB 41 -  -  -          ld  b,c
 4497 D1:D9FC CD E2 AE D1         WRITE_ACCESS
 4498 D1:DA00 E1 -  -  -      pop hl
 4499 D1:DA01 C3 CF B6 D1     jp i6502NextLoad
 4500 D1:DA05 -  -  -  -  
 4501 D1:DA05 -  -  -  -  ;(indirect,X)	SRE (oper,X)	43	2	8  	
 4502 D1:DA05 -  -  -  -  isnt6502_sre_indx:
 4503 D1:DA05 ED 33 08 -      ADDCYC(8)
 4504 D1:DA08 E5 -  -  -      push hl
 4505 D1:DA09 7E -  -  -          ld  a,(hl)
 4506 D1:DA0A 21 00 38 D0         ld  hl,ZEROPAGE
 4507 D1:DA0E 85 -  -  -          add a,L
 4508 D1:DA0F DD 86 01 -          add a,(ix+REGX)
 4509 D1:DA12 6F -  -  -          ld  L,a
 4510 D1:DA13 7E -  -  -          ld  a,(hl)
 4511 D1:DA14 2C -  -  -          inc L
 4512 D1:DA15 56 -  -  -          ld  d,(hl)
 4513 D1:DA16 42 -  -  -          ld  b,d
 4514 D1:DA17 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4515 D1:DA19 ED 4C -  -          mlt bc
 4516 D1:DA1B 21 00 40 D0         ld  hl,PAGETABLE
 4517 D1:DA1F 09 -  -  -          add hl,bc
 4518 D1:DA20 ED 27 -  -          ld  hl,(hl)
 4519 D1:DA22 06 00 -  -          ld  b,0
 4520 D1:DA24 4F -  -  -          ld  c,a
 4521 D1:DA25 09 -  -  -          add hl,bc
 4522 D1:DA26 CD 40 AE D1         READ_ACCESS
 4523 D1:DA2A CB 3F -  -          srl a
 4524 D1:DA2C 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4525 D1:DA2D -  -  -  -          ;Split oper
 4526 D1:DA2D DD 46 04 -          ld  b,(ix+REGSR)
 4527 D1:DA30 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4528 D1:DA36 DD AE 00 -          xor a,(ix+REGA)
 4529 D1:DA39 DD 77 00 -          ld  (ix+REGA),a
 4530 D1:DA3C CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4531 D1:DA42 87 -  -  -          add a,a
 4532 D1:DA43 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4533 D1:DA49 DD 70 04 -          ld  (ix+REGSR),b
 4534 D1:DA4C 41 -  -  -          ld  b,c
 4535 D1:DA4D CD E2 AE D1         WRITE_ACCESS
 4536 D1:DA51 E1 -  -  -      pop hl
 4537 D1:DA52 C3 CF B6 D1     jp  i6502NextLoad
 4538 D1:DA56 -  -  -  -  
 4539 D1:DA56 -  -  -  -  ;(indirect),Y	SRE (oper),Y	53	2	8  
 4540 D1:DA56 -  -  -  -  inst6502_sre_indy:
 4541 D1:DA56 ED 33 08 -      ADDCYC(8)
 4542 D1:DA59 E5 -  -  -      push hl
 4543 D1:DA5A 7E -  -  -          ld  a,(hl)
 4544 D1:DA5B 21 00 38 D0         ld  hl,ZEROPAGE
 4545 D1:DA5F 85 -  -  -          add a,L
 4546 D1:DA60 6F -  -  -          ld  L,a
 4547 D1:DA61 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4548 D1:DA62 2C -  -  -          inc L
 4549 D1:DA63 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4550 D1:DA66 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4551 D1:DA67 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4552 D1:DA69 24 -  -  -          inc h
 4553 D1:DA6A 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4554 D1:DA6B 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4555 D1:DA6D ED 6C -  -          mlt hl          ;23.
 4556 D1:DA6F 01 00 40 D0         ld  bc,PAGETABLE
 4557 D1:DA73 09 -  -  -          add hl,bc
 4558 D1:DA74 ED 27 -  -          ld  hl,(hl)     ;address get.
 4559 D1:DA76 01 00 00 00         ld  bc,0
 4560 D1:DA7A 4F -  -  -          ld  c,a
 4561 D1:DA7B 09 -  -  -          add hl,bc       ;Full address get.
 4562 D1:DA7C CD 40 AE D1         READ_ACCESS
 4563 D1:DA80 CB 3F -  -          srl a
 4564 D1:DA82 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4565 D1:DA83 -  -  -  -          ;Split oper
 4566 D1:DA83 DD 46 04 -          ld  b,(ix+REGSR)
 4567 D1:DA86 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4568 D1:DA8C DD AE 00 -          xor a,(ix+REGA)
 4569 D1:DA8F DD 77 00 -          ld  (ix+REGA),a
 4570 D1:DA92 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4571 D1:DA98 87 -  -  -          add a,a
 4572 D1:DA99 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4573 D1:DA9F DD 70 04 -          ld  (ix+REGSR),b
 4574 D1:DAA2 41 -  -  -          ld  b,c
 4575 D1:DAA3 CD E2 AE D1         WRITE_ACCESS
 4576 D1:DAA7 E1 -  -  -      pop hl
 4577 D1:DAA8 C3 CF B6 D1     jp  i6502NextLoad
 4578 D1:DAAC -  -  -  -  
 4579 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4580 D1:DAAC -  -  -  -  ;USBC (USBC)
 4581 D1:DAAC -  -  -  -  ;immediate	USBC #oper	EB	2	2  
 4582 D1:DAAC -  -  -  -  ;Map this to instruction $E9 (inst6502_sbc_imm)
 4583 D1:DAAC -  -  -  -  
 4584 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4585 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4586 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4587 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4588 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4589 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4590 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4591 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4592 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4593 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4594 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4595 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4596 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4597 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4598 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4599 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4600 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4601 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4602 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4603 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4604 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4605 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4606 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4607 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4608 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4609 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4610 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4611 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4612 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4613 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4614 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4615 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4616 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4617 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4618 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4619 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4620 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4621 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4622 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4623 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4624 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4625 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4626 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4627 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4628 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4629 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4630 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4631 D1:DAAC -  -  -  -  ;-----------------------------------------------------------------------------
 4632 D1:DAAC -  -  -  -  
 4633 D1:DAAC -  -  -  -  inst6502_instruction_set:
 4634 D1:DAAC 0E CD D1 -  .dl	inst6502_brk					;00
 4635 D1:DAAF B5 C5 D1 -  .dl	inst6502_ora_indx				;01
 4636 D1:DAB2 B3 DD D1 -  .dl	inst6502_jam_02 				;02
 4637 D1:DAB5 42 D8 D1 -  .dl	isnt6502_slo_indx				;03
 4638 D1:DAB8 81 CE D1 -  .dl	inst6502_nop_zp 				;04
 4639 D1:DABB D0 C4 D1 -  .dl	inst6502_ora_zp					;05
 4640 D1:DABE 6D C6 D1 -  .dl	inst6502_asl_zp					;06
 4641 D1:DAC1 26 D7 D1 -  .dl	inst6502_slo_zp 				;07
 4642 D1:DAC4 F6 BD D1 -  .dl	inst6502_php					;08
 4643 D1:DAC7 AE C4 D1 -  .dl	inst6502_ora_imm				;09
 4644 D1:DACA 44 C6 D1 -  .dl	inst6502_asl					;0A
 4645 D1:DACD DA CE D1 -  .dl	instr6502_anc_imm				;0B
 4646 D1:DAD0 8F CE D1 -  .dl	inst6502_nop_abs				;0C
 4647 D1:DAD3 25 C5 D1 -  .dl	inst6502_ora_abs				;0D
 4648 D1:DAD6 C8 C6 D1 -  .dl	inst6502_asl_abs				;0E
 4649 D1:DAD9 8B D7 D1 -  .dl	inst6502_slo_abs				;0F
 4650 D1:DADC E1 CC D1 -  .dl	inst6502_bpl					;10
 4651 D1:DADF F9 C5 D1 -  .dl	inst6502_ora_indy				;11
 4652 D1:DAE2 AD DD D1 -  .dl	inst6502_jam_12_halt			;12 JAM. Used to halt emulation for inspection
 4653 D1:DAE5 93 D8 D1 -  .dl	inst6502_slo_indy				;13
 4654 D1:DAE8 88 CE D1 -  .dl	inst6502_nop_zpx				;14
 4655 D1:DAEB F9 C4 D1 -  .dl	inst6502_ora_zpx				;15
 4656 D1:DAEE 99 C6 D1 -  .dl	inst6502_asl_zpx				;16
 4657 D1:DAF1 57 D7 D1 -  .dl	inst6502_slo_zpx				;17
 4658 D1:DAF4 4E CA D1 -  .dl	inst6502_clc					;18
 4659 D1:DAF7 8B C5 D1 -  .dl	inst6502_ora_absy				;19
 4660 D1:DAFA 73 CE D1 -  .dl	inst6502_nop_implied    		;1A
 4661 D1:DAFD 0B D8 D1 -  .dl	inst6502_slo_absy				;1B
 4662 D1:DB00 A0 CE D1 -  .dl	inst6502_nop_absx				;1C
 4663 D1:DB03 61 C5 D1 -  .dl	inst6502_ora_absx				;1D
 4664 D1:DB06 0C C7 D1 -  .dl	inst6502_asl_absx				;1E
 4665 D1:DB09 D4 D7 D1 -  .dl	inst6502_slo_absx				;1F
 4666 D1:DB0C DB CD D1 -  .dl	inst6502_jsr					;20
 4667 D1:DB0F 89 C2 D1 -  .dl	inst6502_and_indx				;21
 4668 D1:DB12 B3 DD D1 -  .dl	inst6502_jam_22 				;22
 4669 D1:DB15 08 D4 D1 -  .dl	isnt6502_rla_indx				;23
 4670 D1:DB18 27 CE D1 -  .dl	inst6502_bit_zp					;24
 4671 D1:DB1B A4 C1 D1 -  .dl	inst6502_and_zp					;25
 4672 D1:DB1E 64 C8 D1 -  .dl	inst6502_rol_zp					;26
 4673 D1:DB21 DA D2 D1 -  .dl	inst6502_rla_zp 				;27
 4674 D1:DB24 38 BE D1 -  .dl	inst6502_plp					;28
 4675 D1:DB27 82 C1 D1 -  .dl	inst6502_and_imm				;29
 4676 D1:DB2A 38 C8 D1 -  .dl	inst6502_rol					;2A
 4677 D1:DB2D DA CE D1 -  .dl	instr6502_anc2_imm				;2B
 4678 D1:DB30 4B CE D1 -  .dl	inst6502_bit_abs				;2C
 4679 D1:DB33 F9 C1 D1 -  .dl	inst6502_and_abs				;2D
 4680 D1:DB36 C5 C8 D1 -  .dl	inst6502_rol_abs				;2E
 4681 D1:DB39 45 D3 D1 -  .dl	inst6502_rla_abs				;2F
 4682 D1:DB3C C3 CC D1 -  .dl	inst6502_bmi					;30
 4683 D1:DB3F CD C2 D1 -  .dl	inst6502_and_indy				;31
 4684 D1:DB42 B3 DD D1 -  .dl	inst6502_jam_32 				;32
 4685 D1:DB45 5D D4 D1 -  .dl	inst6502_rla_indy				;33
 4686 D1:DB48 88 CE D1 -  .dl	inst6502_nop_zpx				;34
 4687 D1:DB4B CD C1 D1 -  .dl	inst6502_and_zpx				;35
 4688 D1:DB4E 93 C8 D1 -  .dl	inst6502_rol_zpx				;36
 4689 D1:DB51 0E D3 D1 -  .dl	inst6502_rla_zpx				;37
 4690 D1:DB54 7A CA D1 -  .dl	inst6502_sec					;38
 4691 D1:DB57 5F C2 D1 -  .dl	inst6502_and_absy				;39
 4692 D1:DB5A 73 CE D1 -  .dl	inst6502_nop_implied			;3A
 4693 D1:DB5D CD D3 D1 -  .dl	inst6502_rla_absy   			;3B
 4694 D1:DB60 A0 CE D1 -  .dl	inst6502_nop_absx   			;3C
 4695 D1:DB63 35 C2 D1 -  .dl	inst6502_and_absx				;3D
 4696 D1:DB66 0D C9 D1 -  .dl	inst6502_rol_absx				;3E
 4697 D1:DB69 92 D3 D1 -  .dl	inst6502_rla_absx   			;3F
 4698 D1:DB6C 4A CD D1 -  .dl	inst6502_rti					;40
 4699 D1:DB6F 1F C4 D1 -  .dl	inst6502_eor_indx				;41
 4700 D1:DB72 B3 DD D1 -  .dl	inst6502_jam_42     			;42
 4701 D1:DB75 05 DA D1 -  .dl	isnt6502_sre_indx   			;43
 4702 D1:DB78 81 CE D1 -  .dl	inst6502_nop_zp     			;44
 4703 D1:DB7B 3A C3 D1 -  .dl	inst6502_eor_zp					;45
 4704 D1:DB7E 67 C7 D1 -  .dl	inst6502_lsr_zp					;46
 4705 D1:DB81 E9 D8 D1 -  .dl	inst6502_sre_zp     			;47
 4706 D1:DB84 E0 BD D1 -  .dl	inst6502_pha					;48
 4707 D1:DB87 18 C3 D1 -  .dl	inst6502_eor_imm				;49
 4708 D1:DB8A 3E C7 D1 -  .dl	inst6502_lsr					;4A
 4709 D1:DB8D B0 CE D1 -  .dl	inst6502_alr_imm    			;4B
 4710 D1:DB90 6F CD D1 -  .dl	inst6052_jmp_abs				;4C
 4711 D1:DB93 8F C3 D1 -  .dl	inst6502_eor_abs				;4D
 4712 D1:DB96 C2 C7 D1 -  .dl	inst6502_lsr_abs				;4E
 4713 D1:DB99 4E D9 D1 -  .dl	inst6502_sre_abs    			;4F
 4714 D1:DB9C F0 CC D1 -  .dl	inst6502_bvc					;50
 4715 D1:DB9F 63 C4 D1 -  .dl	inst6502_eor_indy				;51
 4716 D1:DBA2 B3 DD D1 -  .dl	inst6502_jam_52     			;52
 4717 D1:DBA5 56 DA D1 -  .dl	inst6502_sre_indy   			;53
 4718 D1:DBA8 88 CE D1 -  .dl	inst6502_nop_zpx    			;54
 4719 D1:DBAB 63 C3 D1 -  .dl	inst6502_eor_zpx				;55
 4720 D1:DBAE 93 C7 D1 -  .dl	inst6502_lsr_zpx				;56
 4721 D1:DBB1 1A D9 D1 -  .dl	inst6502_sre_zpx    			;57
 4722 D1:DBB4 64 CA D1 -  .dl	inst6502_cli					;58
 4723 D1:DBB7 F5 C3 D1 -  .dl	inst6502_eor_absy				;59
 4724 D1:DBBA 73 CE D1 -  .dl	inst6502_nop_implied			;5A
 4725 D1:DBBD CE D9 D1 -  .dl	inst6502_sre_absy   			;5B
 4726 D1:DBC0 A0 CE D1 -  .dl	inst6502_nop_absx   			;5C
 4727 D1:DBC3 CB C3 D1 -  .dl	inst6502_eor_absx				;5D
 4728 D1:DBC6 06 C8 D1 -  .dl	inst6502_lsr_absx				;5E
 4729 D1:DBC9 97 D9 D1 -  .dl	inst6502_sre_absx   			;5F
 4730 D1:DBCC 0D CE D1 -  .dl	inst6502_rts					;60
 4731 D1:DBCF 58 C0 D1 -  .dl	inst6502_adc_indx				;61
 4732 D1:DBD2 B3 DD D1 -  .dl	inst6502_jam_62     			;62
 4733 D1:DBD5 84 D5 D1 -  .dl	isnt6502_rra_indx   			;63
 4734 D1:DBD8 81 CE D1 -  .dl	inst6502_nop_zp     			;64
 4735 D1:DBDB F0 BF D1 -  .dl	inst6502_adc_zp					;65
 4736 D1:DBDE 6F C9 D1 -  .dl	inst6502_ror_zp					;66
 4737 D1:DBE1 B7 D4 D1 -  .dl	inst6502_rra_zp     			;67
 4738 D1:DBE4 0E BE D1 -  .dl	inst6502_pla					;68
 4739 D1:DBE7 E8 BF D1 -  .dl	inst6502_adc_imm				;69
 4740 D1:DBEA 43 C9 D1 -  .dl	inst6502_ror					;6A
 4741 D1:DBED 27 CF D1 -  .dl	instr6502_arr_imm   			;6B
 4742 D1:DBF0 91 CD D1 -  .dl	inst6502_jmp_indir				;6C
 4743 D1:DBF3 13 C0 D1 -  .dl	inst6502_adc_abs				;6D
 4744 D1:DBF6 D0 C9 D1 -  .dl	inst6502_ror_abs				;6E
 4745 D1:DBF9 FA D4 D1 -  .dl	inst6502_rra_abs    			;6F
 4746 D1:DBFC FF CC D1 -  .dl	inst6502_bvs					;70
 4747 D1:DBFF 83 C0 D1 -  .dl	inst6502_adc_indy				;71
 4748 D1:DC02 B3 DD D1 -  .dl	inst6502_jam_72     			;72
 4749 D1:DC05 C6 D5 D1 -  .dl	inst6502_rra_indy   			;73
 4750 D1:DC08 88 CE D1 -  .dl	inst6502_nop_zpx    			;74
 4751 D1:DC0B 00 C0 D1 -  .dl	inst6502_adc_zpx				;75
 4752 D1:DC0E 9E C9 D1 -  .dl	inst6502_ror_zpx				;76
 4753 D1:DC11 D7 D4 D1 -  .dl	inst6502_rra_zpx    			;77
 4754 D1:DC14 90 CA D1 -  .dl	inst6502_sei					;78
 4755 D1:DC17 47 C0 D1 -  .dl	inst6502_adc_absy				;79
 4756 D1:DC1A 73 CE D1 -  .dl	inst6502_nop_implied			;7A
 4757 D1:DC1D 5C D5 D1 -  .dl	inst6502_rra_absy   			;7B
 4758 D1:DC20 A0 CE D1 -  .dl	inst6502_nop_absx   			;7C
 4759 D1:DC23 36 C0 D1 -  .dl	inst6502_adc_absx				;7D
 4760 D1:DC26 18 CA D1 -  .dl	inst6502_ror_absx				;7E
 4761 D1:DC29 34 D5 D1 -  .dl	inst6502_rra_absx   			;7F
 4762 D1:DC2C 7A CE D1 -  .dl	inst6502_nop_imm    			;80
 4763 D1:DC2F 37 BC D1 -  .dl	inst6502_sta_indx				;81
 4764 D1:DC32 7A CE D1 -  .dl	inst6502_nop_imm    			;82
 4765 D1:DC35 63 D6 D1 -  .dl	inst6502_sax_indx   			;83
 4766 D1:DC38 E2 BC D1 -  .dl	inst6502_sty_zp					;84
 4767 D1:DC3B C5 BB D1 -  .dl	inst6502_sta_zp					;85
 4768 D1:DC3E 96 BC D1 -  .dl	inst6502_stx_zp					;86
 4769 D1:DC41 0D D6 D1 -  .dl	inst6502_sax_zp     			;87
 4770 D1:DC44 26 BF D1 -  .dl	inst6502_dey					;88
 4771 D1:DC47 7A CE D1 -  .dl	inst6502_nop_imm    			;89
 4772 D1:DC4A 91 BD D1 -  .dl	inst6502_txa					;8A
 4773 D1:DC4D 00 CF D1 -  .dl	instr6502_ane_imm   			;8B
 4774 D1:DC50 09 BD D1 -  .dl	inst6502_sty_abs				;8C
 4775 D1:DC53 EC BB D1 -  .dl	inst6502_sta_abs				;8D
 4776 D1:DC56 BD BC D1 -  .dl	inst6502_stx_abs				;8E
 4777 D1:DC59 3A D6 D1 -  .dl	inst6502_sax_abs    			;8F
 4778 D1:DC5C 96 CC D1 -  .dl	inst6502_bcc					;90
 4779 D1:DC5F 64 BC D1 -  .dl	inst6502_sta_indy				;91
 4780 D1:DC62 B3 DD D1 -  .dl	inst6502_jam_92     			;92
 4781 D1:DC65 CB D6 D1 -  .dl	inst6502_sha_indy   			;93
 4782 D1:DC68 F4 BC D1 -  .dl	inst6502_sty_zpx				;94
 4783 D1:DC6B D7 BB D1 -  .dl	inst6502_sta_zpx				;95
 4784 D1:DC6E A8 BC D1 -  .dl	inst6502_stx_zpy				;96
 4785 D1:DC71 22 D6 D1 -  .dl	inst6502_sax_zpy    			;97
 4786 D1:DC74 BF BD D1 -  .dl	inst6502_tya					;98
 4787 D1:DC77 24 BC D1 -  .dl	inst6502_sta_absy				;99
 4788 D1:DC7A B2 BD D1 -  .dl	inst6502_txs					;9A
 4789 D1:DC7D 18 D7 D1 -  .dl	inst6502_tas_absy   			;9B
 4790 D1:DC80 0A D7 D1 -  .dl	inst6502_shy_absx   			;9C
 4791 D1:DC83 11 BC D1 -  .dl	inst6502_sta_absx				;9D
 4792 D1:DC86 FC D6 D1 -  .dl	inst6502_shx_absy   			;9E
 4793 D1:DC89 BD D6 D1 -  .dl	inst6502_sha_absy   			;9F
 4794 D1:DC8C F7 BA D1 -  .dl	inst6502_ldy_imm				;A0
 4795 D1:DC8F A0 B9 D1 -  .dl	inst6502_lda_indx				;A1
 4796 D1:DC92 29 BA D1 -  .dl	inst6502_ldx_imm				;A2
 4797 D1:DC95 24 D2 D1 -  .dl	inst6502_lax_indx   			;A3
 4798 D1:DC98 16 BB D1 -  .dl	inst6502_ldy_zp					;A4
 4799 D1:DC9B CA B8 D1 -  .dl	inst6502_lda_zp					;A5
 4800 D1:DC9E 48 BA D1 -  .dl	inst6502_ldx_zp					;A6
 4801 D1:DCA1 69 D1 D1 -  .dl	inst6502_lax_zp     			;A7
 4802 D1:DCA4 4F BD D1 -  .dl	inst6502_tay					;A8
 4803 D1:DCA7 AB B8 D1 -  .dl	inst6502_lda_imm				;A9
 4804 D1:DCAA 2E BD D1 -  .dl	inst6502_tax					;AA
 4805 D1:DCAD B3 D2 D1 -  .dl	inst6502_lxa        			;AB
 4806 D1:DCB0 65 BB D1 -  .dl	inst6502_ldy_abs				;AC
 4807 D1:DCB3 19 B9 D1 -  .dl	inst6502_lda_abs				;AD
 4808 D1:DCB6 97 BA D1 -  .dl	inst6502_ldx_abs				;AE
 4809 D1:DCB9 BE D1 D1 -  .dl	inst6502_lax_abs    			;AF
 4810 D1:DCBC A5 CC D1 -  .dl	inst6502_bcs					;B0
 4811 D1:DCBF E1 B9 D1 -  .dl	inst6502_lda_indy				;B1
 4812 D1:DCC2 B3 DD D1 -  .dl	inst6502_jam_B2     			;B2
 4813 D1:DCC5 68 D2 D1 -  .dl	inst6502_lax_indy   			;B3
 4814 D1:DCC8 3C BB D1 -  .dl	inst6502_ldy_zpx				;B4
 4815 D1:DCCB F0 B8 D1 -  .dl	inst6502_lda_zpx				;B5
 4816 D1:DCCE 6E BA D1 -  .dl	inst6502_ldx_zpy				;B6
 4817 D1:DCD1 92 D1 D1 -  .dl	inst6502_lax_zpy    			;B7
 4818 D1:DCD4 6F CA D1 -  .dl	inst6502_clv					;B8
 4819 D1:DCD7 79 B9 D1 -  .dl	inst6502_lda_absy				;B9
 4820 D1:DCDA 70 BD D1 -  .dl	inst6502_tsx					;BA
 4821 D1:DCDD 39 D1 D1 -  .dl	inst6502_las_absy   			;BB
 4822 D1:DCE0 9E BB D1 -  .dl	inst6502_ldy_absx				;BC
 4823 D1:DCE3 52 B9 D1 -  .dl	inst6502_lda_absx				;BD
 4824 D1:DCE6 D0 BA D1 -  .dl	inst6502_ldx_absy				;BE
 4825 D1:DCE9 FA D1 D1 -  .dl	inst6502_lax_absy   			;BF
 4826 D1:DCEC FF CB D1 -  .dl	inst6502_cpy_imm				;C0
 4827 D1:DCEF 0B CB D1 -  .dl	inst6502_cmp_indx				;C1
 4828 D1:DCF2 7A CE D1 -  .dl	inst6502_nop_imm    			;C2
 4829 D1:DCF5 E1 CF D1 -  .dl	inst6502_dcp_indx   			;C3
 4830 D1:DCF8 25 CC D1 -  .dl	inst6502_cpy_zp					;C4
 4831 D1:DCFB A3 CA D1 -  .dl	inst6502_cmp_zp					;C5
 4832 D1:DCFE 55 BE D1 -  .dl	inst6502_dec_zp					;C6
 4833 D1:DD01 60 CF D1 -  .dl	inst6502_dcp_zp     			;C7
 4834 D1:DD04 30 BF D1 -  .dl	inst6502_iny					;C8
 4835 D1:DD07 9B CA D1 -  .dl	inst6502_cmp_imm				;C9
 4836 D1:DD0A 08 BF D1 -  .dl	inst6502_dex					;CA
 4837 D1:DD0D 94 D6 D1 -  .dl	inst6502_sbx_imm    			;CB
 4838 D1:DD10 54 CC D1 -  .dl	inst6502_cpy_abs				;CC
 4839 D1:DD13 C6 CA D1 -  .dl	inst6502_cmp_abs				;CD
 4840 D1:DD16 A2 BE D1 -  .dl	inst6502_dec_abs				;CE
 4841 D1:DD19 87 CF D1 -  .dl	inst6502_dcp_abs    			;CF
 4842 D1:DD1C D2 CC D1 -  .dl	inst6502_bne					;D0
 4843 D1:DD1F 36 CB D1 -  .dl	inst6502_cmp_indy				;D1
 4844 D1:DD22 B3 DD D1 -  .dl	inst6502_jam_D2     			;D2
 4845 D1:DD25 13 D0 D1 -  .dl	inst6502_dcp_indy   			;D3
 4846 D1:DD28 88 CE D1 -  .dl	inst6502_nop_zpx    			;D4
 4847 D1:DD2B B3 CA D1 -  .dl	inst6502_cmp_zpx				;D5
 4848 D1:DD2E 7A BE D1 -  .dl	inst6502_dec_zpx				;D6
 4849 D1:DD31 72 CF D1 -  .dl	inst6520_dcp_zpx    			;D7
 4850 D1:DD34 59 CA D1 -  .dl	inst6502_cld					;D8
 4851 D1:DD37 FA CA D1 -  .dl	inst6502_cmp_absy				;D9
 4852 D1:DD3A 73 CE D1 -  .dl	inst6502_nop_implied			;DA
 4853 D1:DD3D C9 CF D1 -  .dl	inst6502_dcp_absy   			;DB
 4854 D1:DD40 A0 CE D1 -  .dl	inst6502_nop_absx   			;DC
 4855 D1:DD43 E9 CA D1 -  .dl	inst6502_cmp_absx				;DD
 4856 D1:DD46 DE BE D1 -  .dl	inst6502_dec_absx				;DE
 4857 D1:DD49 B1 CF D1 -  .dl	inst6502_dcp_absx   			;DF
 4858 D1:DD4C 68 CB D1 -  .dl	inst6502_cpx_imm				;E0
 4859 D1:DD4F 25 C1 D1 -  .dl	inst6502_sbc_indx				;E1
 4860 D1:DD52 7A CE D1 -  .dl	inst6502_nop_imm    			;E2
 4861 D1:DD55 CE D0 D1 -  .dl	inst6502_isc_indx   			;E3
 4862 D1:DD58 8E CB D1 -  .dl	inst6502_cpx_zp					;E4
 4863 D1:DD5B BD C0 D1 -  .dl	inst6502_sbc_zp					;E5
 4864 D1:DD5E 35 BF D1 -  .dl	inst6502_inc_zp					;E6
 4865 D1:DD61 4A D0 D1 -  .dl	inst6502_isc_zp     			;E7
 4866 D1:DD64 2B BF D1 -  .dl	inst6502_inx					;E8
 4867 D1:DD67 B5 C0 D1 -  .dl	inst6502_sbc_imm				;E9
 4868 D1:DD6A 6C CE D1 -  .dl	inst6502_nop					;EA
 4869 D1:DD6D B5 C0 D1 -  .dl	inst6502_sbc_imm			    ;EB *DUPLICATE OF E9
 4870 D1:DD70 BD CB D1 -  .dl	inst6502_cpx_abs				;EC
 4871 D1:DD73 E0 C0 D1 -  .dl	inst6502_sbc_abs				;ED
 4872 D1:DD76 82 BF D1 -  .dl	inst6502_inc_abs				;EE
 4873 D1:DD79 71 D0 D1 -  .dl	inst6502_isc_abs    			;EF
 4874 D1:DD7C B4 CC D1 -  .dl	inst6502_beq					;F0
 4875 D1:DD7F 50 C1 D1 -  .dl	inst6502_sbc_indy				;F1
 4876 D1:DD82 B3 DD D1 -  .dl	inst6502_jam_F2     			;F2
 4877 D1:DD85 01 D1 D1 -  .dl	inst6502_isc_indy   			;F3
 4878 D1:DD88 88 CE D1 -  .dl	inst6502_nop_zpx    			;F4
 4879 D1:DD8B CD C0 D1 -  .dl	inst6502_sbc_zpx				;F5
 4880 D1:DD8E 5A BF D1 -  .dl	inst6502_inc_zpx				;F6
 4881 D1:DD91 5C D0 D1 -  .dl	inst6520_isc_zpx    			;F7
 4882 D1:DD94 85 CA D1 -  .dl	inst6502_sed					;F8
 4883 D1:DD97 14 C1 D1 -  .dl	inst6502_sbc_absy				;F9
 4884 D1:DD9A 73 CE D1 -  .dl	inst6502_nop_implied			;FA
 4885 D1:DD9D B5 D0 D1 -  .dl	inst6502_isc_absy   			;FB
 4886 D1:DDA0 A0 CE D1 -  .dl	inst6502_nop_absx   			;FC
 4887 D1:DDA3 03 C1 D1 -  .dl	inst6502_sbc_absx				;FD
 4888 D1:DDA6 BE BF D1 -  .dl	inst6502_inc_absx				;FE
 4889 D1:DDA9 9C D0 D1 -  .dl	inst6502_isc_absx   			;FF
 4890 D1:DDAC -  -  -  -  
 4891 D1:DDAC -  -  -  -  ;-----------------------------------------------------------------------------
 4892 D1:DDAC -  -  -  -  ;-----------------------------------------------------------------------------
 4893 D1:DDAC -  -  -  -  ;-----------------------------------------------------------------------------
 4894 D1:DDAC -  -  -  -  ;These instructions are located here because they perform a function outside
 4895 D1:DDAC -  -  -  -  ;the context of emulating instructions. These are mapped to instructions that
 4896 D1:DDAC -  -  -  -  ;would, on the real hardware, freeze the CPU and require a reset to continue.
 4897 D1:DDAC -  -  -  -  ;
 4898 D1:DDAC -  -  -  -  ;Here, they'll let us perform useful things. Like exiting the emulator.
 4899 D1:DDAC -  -  -  -  ;Or jamming in one spot. Or other things in the future. Debugging things.
 4900 D1:DDAC -  -  -  -  ;Future stuff like breakpoints and console output. That sorta thing.
 4901 D1:DDAC -  -  -  -  ;
 4902 D1:DDAC -  -  -  -  
 4903 D1:DDAC -  -  -  -  inst6502_:
 4904 D1:DDAC C9 -  -  -      ret
 4905 D1:DDAD -  -  -  -  
 4906 D1:DDAD -  -  -  -  inst6502_jam_12_halt:
 4907 D1:DDAD 18 FE -  -      jr $
 4908 D1:DDAF C3 E8 B6 D1     jp i6502FinishLoad
 4909 D1:DDB3 -  -  -  -  
 4910 D1:DDB3 -  -  -  -  inst6502_jam_02:
 4911 D1:DDB3 -  -  -  -  inst6502_jam_22:
 4912 D1:DDB3 -  -  -  -  inst6502_jam_32:
 4913 D1:DDB3 -  -  -  -  inst6502_jam_42:
 4914 D1:DDB3 -  -  -  -  inst6502_jam_52:
 4915 D1:DDB3 -  -  -  -  inst6502_jam_62:
 4916 D1:DDB3 -  -  -  -  inst6502_jam_72:
 4917 D1:DDB3 -  -  -  -  inst6502_jam_92:
 4918 D1:DDB3 -  -  -  -  inst6502_jam_B2:
 4919 D1:DDB3 -  -  -  -  inst6502_jam_D2:
 4920 D1:DDB3 -  -  -  -  inst6502_jam_F2:
 4921 D1:DDB3 C9 -  -  -      ret
 4922 D1:DDB4 -  -  -  -  
 4923 D1:DDB4 -  -  -  -  
 4924 D1:DDB4 -  -  -  -  
 4925 D1:DDB4 -  -  -  -  
 4926 D1:DDB4 -  -  -  -  
 4927 D1:DDB4 -  -  -  -  
 4928 D1:DDB4 -  -  -  -  
 4929 D1:DDB4 -  -  -  -  
 4930 D1:DDB4 -  -  -  -  
 4931 D1:DDB4 -  -  -  -  
 4932 D1:DDB4 -  -  -  -  
 4933 D1:DDB4 -  -  -  -  
 4934 D1:DDB4 -  -  -  -  
Listing for file "main.z80"
  975 D1:DDB4 -  -  -  -  #include "debug.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    1 D1:DDB4 -  -  -  -  ;This has all the tables needed to drive the debugger.
    2 D1:DDB4 -  -  -  -  #include "debug_itab.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug_itab.z80"
    1 D1:DDB4 -  -  -  -  inst6502_opcode_width_table:
    2 D1:DDB4 01 -  -  -  .db 1    ;0: 
    3 D1:DDB5 02 -  -  -  .db 2    ;1: zpg,X
    4 D1:DDB6 03 -  -  -  .db 3    ;2: ind
    5 D1:DDB7 03 -  -  -  .db 3    ;3: abs
    6 D1:DDB8 03 -  -  -  .db 3    ;4: abs,X
    7 D1:DDB9 02 -  -  -  .db 2    ;5: X,ind
    8 D1:DDBA 01 -  -  -  .db 1    ;6: A
    9 D1:DDBB 02 -  -  -  .db 2    ;7: zpg
   10 D1:DDBC 02 -  -  -  .db 2    ;8: rel
   11 D1:DDBD 02 -  -  -  .db 2    ;9: #
   12 D1:DDBE 01 -  -  -  .db 1    ;10: impl
   13 D1:DDBF 02 -  -  -  .db 2    ;11: ind,Y
   14 D1:DDC0 03 -  -  -  .db 3    ;12: abs,Y
   15 D1:DDC1 02 -  -  -  .db 2    ;13: zpg,Y
   16 D1:DDC2 -  -  -  -  
   17 D1:DDC2 -  -  -  -  
   18 D1:DDC2 -  -  -  -  ;Note: 1=1byteOper, 2=2byteOper, -=1byteRelOper. Other chrs are literal
   19 D1:DDC2 -  -  -  -  
   20 D1:DDC2 -  -  -  -  inst6502_disassembler:
   21 D1:DDC2 01 -  -  -  .db 1,""  ;
   22 D1:DDC3 04 31 2C 58 .db 4,"1,X"  ;
   23 D1:DDC7 04 28 32 29 .db 4,"(2)"  ;
   24 D1:DDCB 02 32 -  -  .db 2,"2"  ;
   25 D1:DDCD 04 32 2C 58 .db 4,"2,X"  ;
   26 D1:DDD1 06 28 31 2C 
              58 29 -  -  .db 6,"(1,X)"  ;
   27 D1:DDD7 02 41 -  -  .db 2,"A"  ;
   28 D1:DDD9 02 31 -  -  .db 2,"1"  ;
   29 D1:DDDB 02 2D -  -  .db 2,"-"  ;
   30 D1:DDDD 03 23 31 -  .db 3,"#1"  ;
   31 D1:DDE0 01 -  -  -  .db 1,""  ;
   32 D1:DDE1 06 28 31 29 
              2C 59 -  -  .db 6,"(1),Y"  ;
   33 D1:DDE7 04 32 2C 59 .db 4,"2,Y"  ;
   34 D1:DDEB 04 31 2C 59 .db 4,"1,Y"  ;
   35 D1:DDEF -  -  -  -  
   36 D1:DDEF -  -  -  -  inst6502_disassembly_table:
   37 D1:DDEF 42 52 4B 0A .db "BRK", 10     ;0x00
   38 D1:DDF3 4F 52 41 05 .db "ORA", 5     ;0x01
   39 D1:DDF7 4A 41 4D 00 .db "JAM", 0     ;0x02
   40 D1:DDFB 53 4C 4F 05 .db "SLO", 5     ;0x03
   41 D1:DDFF 4E 4F 50 07 .db "NOP", 7     ;0x04
   42 D1:DE03 4F 52 41 07 .db "ORA", 7     ;0x05
   43 D1:DE07 41 53 4C 07 .db "ASL", 7     ;0x06
   44 D1:DE0B 53 4C 4F 07 .db "SLO", 7     ;0x07
   45 D1:DE0F 50 48 50 0A .db "PHP", 10     ;0x08
   46 D1:DE13 4F 52 41 09 .db "ORA", 9     ;0x09
   47 D1:DE17 41 53 4C 06 .db "ASL", 6     ;0x0A
   48 D1:DE1B 41 4E 43 09 .db "ANC", 9     ;0x0B
   49 D1:DE1F 4E 4F 50 03 .db "NOP", 3     ;0x0C
   50 D1:DE23 4F 52 41 03 .db "ORA", 3     ;0x0D
   51 D1:DE27 41 53 4C 03 .db "ASL", 3     ;0x0E
   52 D1:DE2B 53 4C 4F 03 .db "SLO", 3     ;0x0F
   53 D1:DE2F 42 50 4C 08 .db "BPL", 8     ;0x10
   54 D1:DE33 4F 52 41 0B .db "ORA", 11     ;0x11
   55 D1:DE37 4A 41 4D 00 .db "JAM", 0     ;0x12
   56 D1:DE3B 53 4C 4F 0B .db "SLO", 11     ;0x13
   57 D1:DE3F 4E 4F 50 01 .db "NOP", 1     ;0x14
   58 D1:DE43 4F 52 41 01 .db "ORA", 1     ;0x15
   59 D1:DE47 41 53 4C 01 .db "ASL", 1     ;0x16
   60 D1:DE4B 53 4C 4F 01 .db "SLO", 1     ;0x17
   61 D1:DE4F 43 4C 43 0A .db "CLC", 10     ;0x18
   62 D1:DE53 4F 52 41 0C .db "ORA", 12     ;0x19
   63 D1:DE57 4E 4F 50 0A .db "NOP", 10     ;0x1A
   64 D1:DE5B 53 4C 4F 0C .db "SLO", 12     ;0x1B
   65 D1:DE5F 4E 4F 50 04 .db "NOP", 4     ;0x1C
   66 D1:DE63 4F 52 41 04 .db "ORA", 4     ;0x1D
   67 D1:DE67 41 53 4C 04 .db "ASL", 4     ;0x1E
   68 D1:DE6B 53 4C 4F 04 .db "SLO", 4     ;0x1F
   69 D1:DE6F 4A 53 52 03 .db "JSR", 3     ;0x20
   70 D1:DE73 41 4E 44 05 .db "AND", 5     ;0x21
   71 D1:DE77 4A 41 4D 00 .db "JAM", 0     ;0x22
   72 D1:DE7B 52 4C 41 05 .db "RLA", 5     ;0x23
   73 D1:DE7F 42 49 54 07 .db "BIT", 7     ;0x24
   74 D1:DE83 41 4E 44 07 .db "AND", 7     ;0x25
   75 D1:DE87 52 4F 4C 07 .db "ROL", 7     ;0x26
   76 D1:DE8B 52 4C 41 07 .db "RLA", 7     ;0x27
   77 D1:DE8F 50 4C 50 0A .db "PLP", 10     ;0x28
   78 D1:DE93 41 4E 44 09 .db "AND", 9     ;0x29
   79 D1:DE97 52 4F 4C 06 .db "ROL", 6     ;0x2A
   80 D1:DE9B 41 4E 43 09 .db "ANC", 9     ;0x2B
   81 D1:DE9F 42 49 54 03 .db "BIT", 3     ;0x2C
   82 D1:DEA3 41 4E 44 03 .db "AND", 3     ;0x2D
   83 D1:DEA7 52 4F 4C 03 .db "ROL", 3     ;0x2E
   84 D1:DEAB 52 4C 41 03 .db "RLA", 3     ;0x2F
   85 D1:DEAF 42 4D 49 08 .db "BMI", 8     ;0x30
   86 D1:DEB3 41 4E 44 0B .db "AND", 11     ;0x31
   87 D1:DEB7 4A 41 4D 00 .db "JAM", 0     ;0x32
   88 D1:DEBB 52 4C 41 0B .db "RLA", 11     ;0x33
   89 D1:DEBF 4E 4F 50 01 .db "NOP", 1     ;0x34
   90 D1:DEC3 41 4E 44 01 .db "AND", 1     ;0x35
   91 D1:DEC7 52 4F 4C 01 .db "ROL", 1     ;0x36
   92 D1:DECB 52 4C 41 01 .db "RLA", 1     ;0x37
   93 D1:DECF 53 45 43 0A .db "SEC", 10     ;0x38
   94 D1:DED3 41 4E 44 0C .db "AND", 12     ;0x39
   95 D1:DED7 4E 4F 50 0A .db "NOP", 10     ;0x3A
   96 D1:DEDB 52 4C 41 0C .db "RLA", 12     ;0x3B
   97 D1:DEDF 4E 4F 50 04 .db "NOP", 4     ;0x3C
   98 D1:DEE3 41 4E 44 04 .db "AND", 4     ;0x3D
   99 D1:DEE7 52 4F 4C 04 .db "ROL", 4     ;0x3E
  100 D1:DEEB 52 4C 41 04 .db "RLA", 4     ;0x3F
  101 D1:DEEF 52 54 49 0A .db "RTI", 10     ;0x40
  102 D1:DEF3 45 4F 52 05 .db "EOR", 5     ;0x41
  103 D1:DEF7 4A 41 4D 00 .db "JAM", 0     ;0x42
  104 D1:DEFB 53 52 45 05 .db "SRE", 5     ;0x43
  105 D1:DEFF 4E 4F 50 07 .db "NOP", 7     ;0x44
  106 D1:DF03 45 4F 52 07 .db "EOR", 7     ;0x45
  107 D1:DF07 4C 53 52 07 .db "LSR", 7     ;0x46
  108 D1:DF0B 53 52 45 07 .db "SRE", 7     ;0x47
  109 D1:DF0F 50 48 41 0A .db "PHA", 10     ;0x48
  110 D1:DF13 45 4F 52 09 .db "EOR", 9     ;0x49
  111 D1:DF17 4C 53 52 06 .db "LSR", 6     ;0x4A
  112 D1:DF1B 41 4C 52 09 .db "ALR", 9     ;0x4B
  113 D1:DF1F 4A 4D 50 03 .db "JMP", 3     ;0x4C
  114 D1:DF23 45 4F 52 03 .db "EOR", 3     ;0x4D
  115 D1:DF27 4C 53 52 03 .db "LSR", 3     ;0x4E
  116 D1:DF2B 53 52 45 03 .db "SRE", 3     ;0x4F
  117 D1:DF2F 42 56 43 08 .db "BVC", 8     ;0x50
  118 D1:DF33 45 4F 52 0B .db "EOR", 11     ;0x51
  119 D1:DF37 4A 41 4D 00 .db "JAM", 0     ;0x52
  120 D1:DF3B 53 52 45 0B .db "SRE", 11     ;0x53
  121 D1:DF3F 4E 4F 50 01 .db "NOP", 1     ;0x54
  122 D1:DF43 45 4F 52 01 .db "EOR", 1     ;0x55
  123 D1:DF47 4C 53 52 01 .db "LSR", 1     ;0x56
  124 D1:DF4B 53 52 45 01 .db "SRE", 1     ;0x57
  125 D1:DF4F 43 4C 49 0A .db "CLI", 10     ;0x58
  126 D1:DF53 45 4F 52 0C .db "EOR", 12     ;0x59
  127 D1:DF57 4E 4F 50 0A .db "NOP", 10     ;0x5A
  128 D1:DF5B 53 52 45 0C .db "SRE", 12     ;0x5B
  129 D1:DF5F 4E 4F 50 04 .db "NOP", 4     ;0x5C
  130 D1:DF63 45 4F 52 04 .db "EOR", 4     ;0x5D
  131 D1:DF67 4C 53 52 04 .db "LSR", 4     ;0x5E
  132 D1:DF6B 53 52 45 04 .db "SRE", 4     ;0x5F
  133 D1:DF6F 52 54 53 0A .db "RTS", 10     ;0x60
  134 D1:DF73 41 44 43 05 .db "ADC", 5     ;0x61
  135 D1:DF77 4A 41 4D 00 .db "JAM", 0     ;0x62
  136 D1:DF7B 52 52 41 05 .db "RRA", 5     ;0x63
  137 D1:DF7F 4E 4F 50 07 .db "NOP", 7     ;0x64
  138 D1:DF83 41 44 43 07 .db "ADC", 7     ;0x65
  139 D1:DF87 52 4F 52 07 .db "ROR", 7     ;0x66
  140 D1:DF8B 52 52 41 07 .db "RRA", 7     ;0x67
  141 D1:DF8F 50 4C 41 0A .db "PLA", 10     ;0x68
  142 D1:DF93 41 44 43 09 .db "ADC", 9     ;0x69
  143 D1:DF97 52 4F 52 06 .db "ROR", 6     ;0x6A
  144 D1:DF9B 41 52 52 09 .db "ARR", 9     ;0x6B
  145 D1:DF9F 4A 4D 50 02 .db "JMP", 2     ;0x6C
  146 D1:DFA3 41 44 43 03 .db "ADC", 3     ;0x6D
  147 D1:DFA7 52 4F 52 03 .db "ROR", 3     ;0x6E
  148 D1:DFAB 52 52 41 03 .db "RRA", 3     ;0x6F
  149 D1:DFAF 42 56 53 08 .db "BVS", 8     ;0x70
  150 D1:DFB3 41 44 43 0B .db "ADC", 11     ;0x71
  151 D1:DFB7 4A 41 4D 00 .db "JAM", 0     ;0x72
  152 D1:DFBB 52 52 41 0B .db "RRA", 11     ;0x73
  153 D1:DFBF 4E 4F 50 01 .db "NOP", 1     ;0x74
  154 D1:DFC3 41 44 43 01 .db "ADC", 1     ;0x75
  155 D1:DFC7 52 4F 52 01 .db "ROR", 1     ;0x76
  156 D1:DFCB 52 52 41 01 .db "RRA", 1     ;0x77
  157 D1:DFCF 53 45 49 0A .db "SEI", 10     ;0x78
  158 D1:DFD3 41 44 43 0C .db "ADC", 12     ;0x79
  159 D1:DFD7 4E 4F 50 0A .db "NOP", 10     ;0x7A
  160 D1:DFDB 52 52 41 0C .db "RRA", 12     ;0x7B
  161 D1:DFDF 4E 4F 50 04 .db "NOP", 4     ;0x7C
  162 D1:DFE3 41 44 43 04 .db "ADC", 4     ;0x7D
  163 D1:DFE7 52 4F 52 04 .db "ROR", 4     ;0x7E
  164 D1:DFEB 52 52 41 04 .db "RRA", 4     ;0x7F
  165 D1:DFEF 4E 4F 50 09 .db "NOP", 9     ;0x80
  166 D1:DFF3 53 54 41 05 .db "STA", 5     ;0x81
  167 D1:DFF7 4E 4F 50 09 .db "NOP", 9     ;0x82
  168 D1:DFFB 53 41 58 05 .db "SAX", 5     ;0x83
  169 D1:DFFF 53 54 59 07 .db "STY", 7     ;0x84
  170 D1:E003 53 54 41 07 .db "STA", 7     ;0x85
  171 D1:E007 53 54 58 07 .db "STX", 7     ;0x86
  172 D1:E00B 53 41 58 07 .db "SAX", 7     ;0x87
  173 D1:E00F 44 45 59 0A .db "DEY", 10     ;0x88
  174 D1:E013 4E 4F 50 09 .db "NOP", 9     ;0x89
  175 D1:E017 54 58 41 0A .db "TXA", 10     ;0x8A
  176 D1:E01B 41 4E 45 09 .db "ANE", 9     ;0x8B
  177 D1:E01F 53 54 59 03 .db "STY", 3     ;0x8C
  178 D1:E023 53 54 41 03 .db "STA", 3     ;0x8D
  179 D1:E027 53 54 58 03 .db "STX", 3     ;0x8E
  180 D1:E02B 53 41 58 03 .db "SAX", 3     ;0x8F
  181 D1:E02F 42 43 43 08 .db "BCC", 8     ;0x90
  182 D1:E033 53 54 41 0B .db "STA", 11     ;0x91
  183 D1:E037 4A 41 4D 00 .db "JAM", 0     ;0x92
  184 D1:E03B 53 48 41 0B .db "SHA", 11     ;0x93
  185 D1:E03F 53 54 59 01 .db "STY", 1     ;0x94
  186 D1:E043 53 54 41 01 .db "STA", 1     ;0x95
  187 D1:E047 53 54 58 0D .db "STX", 13     ;0x96
  188 D1:E04B 53 41 58 0D .db "SAX", 13     ;0x97
  189 D1:E04F 54 59 41 0A .db "TYA", 10     ;0x98
  190 D1:E053 53 54 41 0C .db "STA", 12     ;0x99
  191 D1:E057 54 58 53 0A .db "TXS", 10     ;0x9A
  192 D1:E05B 54 41 53 0C .db "TAS", 12     ;0x9B
  193 D1:E05F 53 48 59 04 .db "SHY", 4     ;0x9C
  194 D1:E063 53 54 41 04 .db "STA", 4     ;0x9D
  195 D1:E067 53 48 58 0C .db "SHX", 12     ;0x9E
  196 D1:E06B 53 48 41 0C .db "SHA", 12     ;0x9F
  197 D1:E06F 4C 44 59 09 .db "LDY", 9     ;0xA0
  198 D1:E073 4C 44 41 05 .db "LDA", 5     ;0xA1
  199 D1:E077 4C 44 58 09 .db "LDX", 9     ;0xA2
  200 D1:E07B 4C 41 58 05 .db "LAX", 5     ;0xA3
  201 D1:E07F 4C 44 59 07 .db "LDY", 7     ;0xA4
  202 D1:E083 4C 44 41 07 .db "LDA", 7     ;0xA5
  203 D1:E087 4C 44 58 07 .db "LDX", 7     ;0xA6
  204 D1:E08B 4C 41 58 07 .db "LAX", 7     ;0xA7
  205 D1:E08F 54 41 59 0A .db "TAY", 10     ;0xA8
  206 D1:E093 4C 44 41 09 .db "LDA", 9     ;0xA9
  207 D1:E097 54 41 58 0A .db "TAX", 10     ;0xAA
  208 D1:E09B 4C 58 41 09 .db "LXA", 9     ;0xAB
  209 D1:E09F 4C 44 59 03 .db "LDY", 3     ;0xAC
  210 D1:E0A3 4C 44 41 03 .db "LDA", 3     ;0xAD
  211 D1:E0A7 4C 44 58 03 .db "LDX", 3     ;0xAE
  212 D1:E0AB 4C 41 58 03 .db "LAX", 3     ;0xAF
  213 D1:E0AF 42 43 53 08 .db "BCS", 8     ;0xB0
  214 D1:E0B3 4C 44 41 0B .db "LDA", 11     ;0xB1
  215 D1:E0B7 4A 41 4D 00 .db "JAM", 0     ;0xB2
  216 D1:E0BB 4C 41 58 0B .db "LAX", 11     ;0xB3
  217 D1:E0BF 4C 44 59 01 .db "LDY", 1     ;0xB4
  218 D1:E0C3 4C 44 41 01 .db "LDA", 1     ;0xB5
  219 D1:E0C7 4C 44 58 0D .db "LDX", 13     ;0xB6
  220 D1:E0CB 4C 41 58 0D .db "LAX", 13     ;0xB7
  221 D1:E0CF 43 4C 56 0A .db "CLV", 10     ;0xB8
  222 D1:E0D3 4C 44 41 0C .db "LDA", 12     ;0xB9
  223 D1:E0D7 54 53 58 0A .db "TSX", 10     ;0xBA
  224 D1:E0DB 4C 41 53 0C .db "LAS", 12     ;0xBB
  225 D1:E0DF 4C 44 59 04 .db "LDY", 4     ;0xBC
  226 D1:E0E3 4C 44 41 04 .db "LDA", 4     ;0xBD
  227 D1:E0E7 4C 44 58 0C .db "LDX", 12     ;0xBE
  228 D1:E0EB 4C 41 58 0C .db "LAX", 12     ;0xBF
  229 D1:E0EF 43 50 59 09 .db "CPY", 9     ;0xC0
  230 D1:E0F3 43 4D 50 05 .db "CMP", 5     ;0xC1
  231 D1:E0F7 4E 4F 50 09 .db "NOP", 9     ;0xC2
  232 D1:E0FB 44 43 50 05 .db "DCP", 5     ;0xC3
  233 D1:E0FF 43 50 59 07 .db "CPY", 7     ;0xC4
  234 D1:E103 43 4D 50 07 .db "CMP", 7     ;0xC5
  235 D1:E107 44 45 43 07 .db "DEC", 7     ;0xC6
  236 D1:E10B 44 43 50 07 .db "DCP", 7     ;0xC7
  237 D1:E10F 49 4E 59 0A .db "INY", 10     ;0xC8
  238 D1:E113 43 4D 50 09 .db "CMP", 9     ;0xC9
  239 D1:E117 44 45 58 0A .db "DEX", 10     ;0xCA
  240 D1:E11B 53 42 58 09 .db "SBX", 9     ;0xCB
  241 D1:E11F 43 50 59 03 .db "CPY", 3     ;0xCC
  242 D1:E123 43 4D 50 03 .db "CMP", 3     ;0xCD
  243 D1:E127 44 45 43 03 .db "DEC", 3     ;0xCE
  244 D1:E12B 44 43 50 03 .db "DCP", 3     ;0xCF
  245 D1:E12F 42 4E 45 08 .db "BNE", 8     ;0xD0
  246 D1:E133 43 4D 50 0B .db "CMP", 11     ;0xD1
  247 D1:E137 4A 41 4D 00 .db "JAM", 0     ;0xD2
  248 D1:E13B 44 43 50 0B .db "DCP", 11     ;0xD3
  249 D1:E13F 4E 4F 50 01 .db "NOP", 1     ;0xD4
  250 D1:E143 43 4D 50 01 .db "CMP", 1     ;0xD5
  251 D1:E147 44 45 43 01 .db "DEC", 1     ;0xD6
  252 D1:E14B 44 43 50 01 .db "DCP", 1     ;0xD7
  253 D1:E14F 43 4C 44 0A .db "CLD", 10     ;0xD8
  254 D1:E153 43 4D 50 0C .db "CMP", 12     ;0xD9
  255 D1:E157 4E 4F 50 0A .db "NOP", 10     ;0xDA
  256 D1:E15B 44 43 50 0C .db "DCP", 12     ;0xDB
  257 D1:E15F 4E 4F 50 04 .db "NOP", 4     ;0xDC
  258 D1:E163 43 4D 50 04 .db "CMP", 4     ;0xDD
  259 D1:E167 44 45 43 04 .db "DEC", 4     ;0xDE
  260 D1:E16B 44 43 50 04 .db "DCP", 4     ;0xDF
  261 D1:E16F 43 50 58 09 .db "CPX", 9     ;0xE0
  262 D1:E173 53 42 43 05 .db "SBC", 5     ;0xE1
  263 D1:E177 4E 4F 50 09 .db "NOP", 9     ;0xE2
  264 D1:E17B 49 53 43 05 .db "ISC", 5     ;0xE3
  265 D1:E17F 43 50 58 07 .db "CPX", 7     ;0xE4
  266 D1:E183 53 42 43 07 .db "SBC", 7     ;0xE5
  267 D1:E187 49 4E 43 07 .db "INC", 7     ;0xE6
  268 D1:E18B 49 53 43 07 .db "ISC", 7     ;0xE7
  269 D1:E18F 49 4E 58 0A .db "INX", 10     ;0xE8
  270 D1:E193 53 42 43 09 .db "SBC", 9     ;0xE9
  271 D1:E197 4E 4F 50 0A .db "NOP", 10     ;0xEA
  272 D1:E19B 55 53 42 09 .db "USB", 9     ;0xEB
  273 D1:E19F 43 50 58 03 .db "CPX", 3     ;0xEC
  274 D1:E1A3 53 42 43 03 .db "SBC", 3     ;0xED
  275 D1:E1A7 49 4E 43 03 .db "INC", 3     ;0xEE
  276 D1:E1AB 49 53 43 03 .db "ISC", 3     ;0xEF
  277 D1:E1AF 42 45 51 08 .db "BEQ", 8     ;0xF0
  278 D1:E1B3 53 42 43 0B .db "SBC", 11     ;0xF1
  279 D1:E1B7 4A 41 4D 00 .db "JAM", 0     ;0xF2
  280 D1:E1BB 49 53 43 0B .db "ISC", 11     ;0xF3
  281 D1:E1BF 4E 4F 50 01 .db "NOP", 1     ;0xF4
  282 D1:E1C3 53 42 43 01 .db "SBC", 1     ;0xF5
  283 D1:E1C7 49 4E 43 01 .db "INC", 1     ;0xF6
  284 D1:E1CB 49 53 43 01 .db "ISC", 1     ;0xF7
  285 D1:E1CF 53 45 44 0A .db "SED", 10     ;0xF8
  286 D1:E1D3 53 42 43 0C .db "SBC", 12     ;0xF9
  287 D1:E1D7 4E 4F 50 0A .db "NOP", 10     ;0xFA
  288 D1:E1DB 49 53 43 0C .db "ISC", 12     ;0xFB
  289 D1:E1DF 4E 4F 50 04 .db "NOP", 4     ;0xFC
  290 D1:E1E3 53 42 43 04 .db "SBC", 4     ;0xFD
  291 D1:E1E7 49 4E 43 04 .db "INC", 4     ;0xFE
  292 D1:E1EB 49 53 43 04 .db "ISC", 4     ;0xFF
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    3 D1:E1EF -  -  -  -  
    4 D1:E1EF -  -  -  -  
    5 D1:E1EF -  -  -  -  ;You must assign a print character routine.
    6 D1:E1EF -  -  -  -  ;You must also write all opcode bytes to operbuf or map operbuf to where written
    7 D1:E1EF -  -  -  -  dbg_printChr    = PrintBigFont
    8 D1:E1EF -  -  -  -  operbuf         = debugram
    9 D1:E1EF -  -  -  -  
   10 D1:E1EF -  -  -  -  
   11 D1:E1EF -  -  -  -  dbg_resetScreen:
   12 D1:E1EF 21 00 00 D4     ld  hl,screenBuf1
   13 D1:E1F3 11 01 00 D4     ld  de,screenBuf1+1
   14 D1:E1F7 01 FF 57 02     ld  bc,(2*240*320)-1
   15 D1:E1FB 36 00 -  -      ld  (hl),$00
   16 D1:E1FD ED B0 -  -      ldir
   17 D1:E1FF AF -  -  -      xor a,a
   18 D1:E200 CD 30 B1 D1     call setLineStart
   19 D1:E204 CD 39 B1 D1     call setCurLine
   20 D1:E208 C9 -  -  -      ret
   21 D1:E209 -  -  -  -  
   22 D1:E209 -  -  -  -  dbg_prepNextLine:
   23 D1:E209 AF -  -  -      xor a,a
   24 D1:E20A 32 F6 31 D0     ld  (xPos),a
   25 D1:E20E CD 06 B2 D1     call calculateScreenPtr
   26 D1:E212 EB -  -  -      ex  de,hl
   27 D1:E213 21 FF 2B D5     ld  hl,screenBuf2-1
   28 D1:E217 B7 -  -  -      or  a,a
   29 D1:E218 ED 52 -  -      sbc hl,de
   30 D1:E21A -  -  -  -  ;If C: DE in sb2. subtract to set in sb1.
   31 D1:E21A -  -  -  -  ;If NC: DE in sb1. add to set in sb2.
   32 D1:E21A 21 00 2C 01     ld  hl,320*240
   33 D1:E21E 30 04 -  -      jr  nc,+_
   34 D1:E220 21 00 D4 FE     ld  hl,-(320*240)+0
   35 D1:E224 19 -  -  -  _:  add hl,de   ;HL set to other buffer. DE points to current buffer.
   36 D1:E225 01 00 0A 00     ld  bc,320*8    ;copy one line from other buffer to current buffer.
   37 D1:E229 7E -  -  -  _:  ld  a,(hl)
   38 D1:E22A C6 01 -  -      add a,1     ;carry if $FF (white), NC if not
   39 D1:E22C 9F -  -  -      sbc a,a     ;if carry, returns to $FF, else is black
   40 D1:E22D 77 -  -  -      ld  (hl),a
   41 D1:E22E ED A0 -  -      ldi
   42 D1:E230 EA 29 E2 D1     jp  pe,-_
   43 D1:E234 3A F7 31 D0     ld  a,(yPos)
   44 D1:E238 FE 1D -  -      cp  a,29
   45 D1:E23A 20 06 -  -      jr  nz,+_
   46 D1:E23C 21 00 D4 FE     ld  hl,-(320*240)
   47 D1:E240 19 -  -  -      add hl,de
   48 D1:E241 EB -  -  -      ex de,hl        ;if bottom of screen, then reset DE to top of screen.
   49 D1:E242 D5 -  -  -  _:  push de
   50 D1:E243 E1 -  -  -      pop hl
   51 D1:E244 13 -  -  -      inc de
   52 D1:E245 71 -  -  -      ld  (hl),c
   53 D1:E246 01 BF 08 00     ld  bc,(320*7)-1    ;erase whole line below it to prepare for writing.
   54 D1:E24A ED B0 -  -      ldir
   55 D1:E24C C9 -  -  -      ret
   56 D1:E24D -  -  -  -  
   57 D1:E24D -  -  -  -  ;Input: ix = core_memory_ix 
   58 D1:E24D -  -  -  -  ;Output: Text onscreen
   59 D1:E24D -  -  -  -  dbg_printLine:
   60 D1:E24D E5 C5 D5 DD 
              E5 FD E5 F5     push hl \ push bc \ push de \ push ix \ push iy \ push af
   61 D1:E255 ED 23 00 -      lea hl,iy+0
   62 D1:E258 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl
   63 D1:E25B 11 00 00 00     ld  de,DEBUG_PRINT_START_CYCLE
   64 D1:E25F B7 -  -  -      or  a,a
   65 D1:E260 ED 52 -  -      sbc hl,de
   66 D1:E262 DA 46 E3 D1     jp  c,dbg_printLine_noPrint
   67 D1:E266 -  -  -  -  
   68 D1:E266 3E 1A -  -      ld  a,$1A   ;blue
   69 D1:E268 32 88 B1 D1     ld  (fontBGColor_var),a
   70 D1:E26C 32 D5 B1 D1     ld  (smallFontBGColor_var),a
   71 D1:E270 DD 27 0E -      ld  hl,(ix+CURRENT_OPCODES)
   72 D1:E273 22 F9 31 D0     ld  (operbuf),hl
   73 D1:E277 CD 09 E2 D1     call dbg_prepNextLine
   74 D1:E27B CD 44 B1 D1     call newLine
   75 D1:E27F DD 7E 06 -      ld  a,(ix+REGPC+1)
   76 D1:E282 CD A1 B1 D1     call printSmallNumPair
   77 D1:E286 DD 7E 05 -      ld  a,(ix+REGPC+0)
   78 D1:E289 CD A1 B1 D1     call printSmallNumPair
   79 D1:E28D 3E 20 -  -      ld  a,' '
   80 D1:E28F CD 71 B1 D1     call printBigFont
   81 D1:E293 -  -  -  -      ;
   82 D1:E293 3E 41 -  -      ld  a,'A'
   83 D1:E295 CD 71 B1 D1     call printBigFont
   84 D1:E299 DD 7E 00 -      ld  a,(ix+REGA)
   85 D1:E29C CD A1 B1 D1     call printSmallNumPair
   86 D1:E2A0 3E 20 -  -      ld  a,' '
   87 D1:E2A2 CD 71 B1 D1     call printBigFont
   88 D1:E2A6 -  -  -  -      ;
   89 D1:E2A6 3E 58 -  -      ld  a,'X'
   90 D1:E2A8 CD 71 B1 D1     call printBigFont
   91 D1:E2AC DD 7E 01 -      ld  a,(ix+REGX)
   92 D1:E2AF CD A1 B1 D1     call printSmallNumPair
   93 D1:E2B3 3E 20 -  -      ld  a,' '
   94 D1:E2B5 CD 71 B1 D1     call printBigFont
   95 D1:E2B9 -  -  -  -      ;
   96 D1:E2B9 3E 59 -  -      ld  a,'Y'
   97 D1:E2BB CD 71 B1 D1     call printBigFont
   98 D1:E2BF DD 7E 02 -      ld  a,(ix+REGY)
   99 D1:E2C2 CD A1 B1 D1     call printSmallNumPair
  100 D1:E2C6 3E 20 -  -      ld  a,' '
  101 D1:E2C8 CD 71 B1 D1     call printBigFont
  102 D1:E2CC -  -  -  -      ;
  103 D1:E2CC 3E 53 -  -      ld  a,'S'
  104 D1:E2CE CD 71 B1 D1     call printBigFont
  105 D1:E2D2 DD 7E 03 -      ld  a,(ix+REGSP)
  106 D1:E2D5 CD A1 B1 D1     call printSmallNumPair
  107 D1:E2D9 3E 20 -  -      ld  a,' '
  108 D1:E2DB CD 71 B1 D1     call printBigFont
  109 D1:E2DF -  -  -  -      ;
  110 D1:E2DF 3E 50 -  -      ld  a,'P'
  111 D1:E2E1 CD 71 B1 D1     call printBigFont
  112 D1:E2E5 DD 7E 04 -      ld  a,(ix+REGSR)
  113 D1:E2E8 CD A1 B1 D1     call printSmallNumPair
  114 D1:E2EC 3E 20 -  -      ld  a,' '
  115 D1:E2EE CD 71 B1 D1     call printBigFont
  116 D1:E2F2 -  -  -  -  
  117 D1:E2F2 -  -  -  -      ;
  118 D1:E2F2 -  -  -  -  ;    ld  hl,dbg_printLine_str001
  119 D1:E2F2 -  -  -  -  ;    call printString
  120 D1:E2F2 -  -  -  -  ;    ld  b,5
  121 D1:E2F2 -  -  -  -  ;    lea hl,ix+0
  122 D1:E2F2 -  -  -  -  ;_:  ld  a,(hl)
  123 D1:E2F2 -  -  -  -  ;    inc hl
  124 D1:E2F2 -  -  -  -  ;    push bc
  125 D1:E2F2 -  -  -  -  ;        push hl
  126 D1:E2F2 -  -  -  -  ;            call printSmallNumPair
  127 D1:E2F2 -  -  -  -  ;            ld  a,' '
  128 D1:E2F2 -  -  -  -  ;            call printBigFont
  129 D1:E2F2 -  -  -  -  ;        pop hl
  130 D1:E2F2 -  -  -  -  ;    pop bc
  131 D1:E2F2 -  -  -  -  ;    djnz -_
  132 D1:E2F2 -  -  -  -  
  133 D1:E2F2 DD 7E 0D -      ld  a,(ix+CYCLES_CURRENT+2)
  134 D1:E2F5 CD A1 B1 D1     call printSmallNumPair
  135 D1:E2F9 DD 7E 0C -      ld  a,(ix+CYCLES_CURRENT+1)
  136 D1:E2FC CD A1 B1 D1     call printSmallNumPair
  137 D1:E300 DD 7E 0B -      ld  a,(ix+CYCLES_CURRENT+0)
  138 D1:E303 CD A1 B1 D1     call printSmallNumPair
  139 D1:E307 3E 20 -  -      ld  a,' '
  140 D1:E309 CD 71 B1 D1     call printBigFont
  141 D1:E30D 2A F9 31 D0     ld  hl,(operbuf)
  142 D1:E311 DD 2F 0E -      ld  (ix+CURRENT_OPCODES),hl
  143 D1:E314 7D -  -  -      ld  a,L
  144 D1:E315 CD 36 E4 D1     call dbg_getInstSize
  145 D1:E319 06 03 -  -      ld  b,3
  146 D1:E31B 4F -  -  -      ld  c,a
  147 D1:E31C 0C -  -  -      inc c
  148 D1:E31D ED 22 0E -      lea hl,ix+CURRENT_OPCODES
  149 D1:E320 7E -  -  -  _:  ld  a,(hl)
  150 D1:E321 23 -  -  -      inc hl
  151 D1:E322 E5 -  -  -      push hl
  152 D1:E323 0D -  -  -          dec c
  153 D1:E324 F2 29 E3 D1         jp p,+_
  154 D1:E328 0C -  -  -          inc c   ;never let c go below zero.
  155 D1:E329 C5 -  -  -  _:      push bc
  156 D1:E32A 28 06 -  -              jr  z,+_
  157 D1:E32C CD A1 B1 D1             call printSmallNumPair
  158 D1:E330 18 06 -  -              jr ++_
  159 D1:E332 3E 20 -  -  _:          ld  a,' '
  160 D1:E334 CD 71 B1 D1             call printBigFont
  161 D1:E338 C1 -  -  -  _:      pop bc
  162 D1:E339 E1 -  -  -      pop hl
  163 D1:E33A 10 E4 -  -      djnz ----_
  164 D1:E33C 3E 20 -  -      ld  a,' '
  165 D1:E33E CD 71 B1 D1     call printBigFont
  166 D1:E342 CD 4E E4 D1     call dbg_printDisassembly
  167 D1:E346 -  -  -  -  
  168 D1:E346 -  -  -  -      ;
  169 D1:E346 -  -  -  -      ;Remove section below when done testing nestest for timings
  170 D1:E346 -  -  -  -      ;
  171 D1:E346 -  -  -  -  dbg_printLine_noPrint:
  172 D1:E346 11 00 00 00     ld  de,0
  173 D1:E34A 2A 4D 34 D0     ld  hl,(timings_base)
  174 D1:E34E 5E -  -  -      ld  e,(hl)
  175 D1:E34F 23 -  -  -      inc hl
  176 D1:E350 56 -  -  -      ld  d,(hl)
  177 D1:E351 23 -  -  -      inc hl
  178 D1:E352 22 4D 34 D0     ld  (timings_base),hl
  179 D1:E356 DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  180 D1:E359 B7 -  -  -      or  a,a
  181 D1:E35A ED 52 -  -      sbc hl,de
  182 D1:E35C 28 17 -  -      jr  z,+_
  183 D1:E35E 21 FF FF FF     ld  hl,-1
  184 D1:E362 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  185 D1:E365 CD 44 B1 D1     call newLine
  186 D1:E369 21 F9 E3 D1     ld  hl,dbg_printLine_timeMismatch
  187 D1:E36D CD 5B B1 D1     call printString
  188 D1:E371 DD 36 14 01     ld  (ix+CORE_ERROR_LEVEL),1
  189 D1:E375 2A 4D 34 D0 _:  ld  hl,(timings_base)
  190 D1:E379 7E -  -  -      ld  a,(hl)
  191 D1:E37A 23 -  -  -      inc hl
  192 D1:E37B 22 4D 34 D0     ld  (timings_base),hl
  193 D1:E37F DD BE 04 -      cp  a,(ix+REGSR)
  194 D1:E382 28 17 -  -      jr  z,+_
  195 D1:E384 21 FF FF FF     ld  hl,-1
  196 D1:E388 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  197 D1:E38B CD 44 B1 D1     call newLine
  198 D1:E38F 21 13 E4 D1     ld  hl,dbg_printLine_statusRegisterMismatch
  199 D1:E393 CD 5B B1 D1     call printString
  200 D1:E397 DD 36 14 02     ld  (ix+CORE_ERROR_LEVEL),2
  201 D1:E39B -  -  -  -  _:
  202 D1:E39B -  -  -  -      ;
  203 D1:E39B -  -  -  -      ;End debug-debug section
  204 D1:E39B -  -  -  -      ;
  205 D1:E39B CD 67 B0 D1     call fastCopy
  206 D1:E39F AF -  -  -      xor a,a     ;black
  207 D1:E3A0 32 88 B1 D1     ld  (fontBGColor_var),a
  208 D1:E3A4 32 D5 B1 D1     ld  (smallFontBGColor_var),a
  209 D1:E3A8 -  -  -  -  
  210 D1:E3A8 F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  211 D1:E3B0 -  -  -  -      ;push hl \ push bc \ push de \ push ix \ push iy \ push af
  212 D1:E3B0 C9 -  -  -      ret
  213 D1:E3B1 -  -  -  -  
  214 D1:E3B1 -  -  -  -  
  215 D1:E3B1 -  -  -  -      ;also remove this when done timing debugging
  216 D1:E3B1 11 00 00 00     ld  de,0
  217 D1:E3B5 2A 4D 34 D0     ld  hl,(timings_base)
  218 D1:E3B9 5E -  -  -      ld  e,(hl)
  219 D1:E3BA 23 -  -  -      inc hl
  220 D1:E3BB 56 -  -  -      ld  d,(hl)
  221 D1:E3BC 23 -  -  -      inc hl
  222 D1:E3BD 22 4D 34 D0     ld  (timings_base),hl
  223 D1:E3C1 DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  224 D1:E3C4 B7 -  -  -      or  a,a
  225 D1:E3C5 ED 52 -  -      sbc hl,de
  226 D1:E3C7 28 13 -  -      jr  z,+_
  227 D1:E3C9 21 FF FF FF     ld  hl,-1
  228 D1:E3CD DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  229 D1:E3D0 CD 44 B1 D1     call newLine
  230 D1:E3D4 21 F9 E3 D1     ld  hl,dbg_printLine_timeMismatch
  231 D1:E3D8 CD 5B B1 D1     call printString
  232 D1:E3DC -  -  -  -  _:  ;
  233 D1:E3DC -  -  -  -      ;End debug-debug section
  234 D1:E3DC -  -  -  -      ;
  235 D1:E3DC CD 67 B0 D1     call fastCopy
  236 D1:E3E0 AF -  -  -      xor a,a     ;black
  237 D1:E3E1 32 88 B1 D1     ld  (fontBGColor_var),a
  238 D1:E3E5 32 D5 B1 D1     ld  (smallFontBGColor_var),a
  239 D1:E3E9 F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  240 D1:E3F1 C9 -  -  -      ret
  241 D1:E3F2 -  -  -  -  
  242 D1:E3F2 -  -  -  -  dbg_printLine_str001:
  243 D1:E3F2 41 58 59 53 
              50 20 00 -  .db "AXYSP ",0
  244 D1:E3F9 -  -  -  -  dbg_printLine_timeMismatch:
  245 D1:E3F9 43 50 55 20 
              54 65 73 74 
              20 74 69 6D 
              69 6E 67 20 
              6D 69 73 6D 
              61 74 63 68 
              2E 00 -  -  .db "CPU Test timing mismatch.",0
  246 D1:E413 -  -  -  -  dbg_printLine_statusRegisterMismatch:
  247 D1:E413 -  -  -  -  ;    0123456789012345678901234567890123456789
  248 D1:E413 43 50 55 20 
              54 65 73 74 
              20 73 74 61 
              74 75 73 20 
              72 65 67 69 
              73 74 65 72 
              20 6D 69 73 
              6D 61 74 63 
              68 2E 00 -  .db "CPU Test status register mismatch.",0
  249 D1:E436 -  -  -  -  
  250 D1:E436 -  -  -  -  
  251 D1:E436 -  -  -  -  
  252 D1:E436 -  -  -  -  
  253 D1:E436 -  -  -  -  
  254 D1:E436 -  -  -  -  
  255 D1:E436 -  -  -  -  ;A=instruction. Returns: A=size
  256 D1:E436 -  -  -  -  dbg_getInstSize:
  257 D1:E436 E5 D5 -  -      push hl \ push de
  258 D1:E438 57 -  -  -          ld  d,a
  259 D1:E439 1E 04 -  -          ld  e,4
  260 D1:E43B ED 5C -  -          mlt de
  261 D1:E43D 21 F2 DD D1         ld  hl,inst6502_disassembly_table+3
  262 D1:E441 19 -  -  -          add hl,de
  263 D1:E442 16 00 -  -          ld  d,0
  264 D1:E444 5E -  -  -          ld  e,(hl)
  265 D1:E445 21 B4 DD D1         ld  hl,inst6502_opcode_width_table
  266 D1:E449 19 -  -  -          add hl,de
  267 D1:E44A 7E -  -  -          ld  a,(hl)
  268 D1:E44B D1 E1 -  -      pop de \ pop hl
  269 D1:E44D C9 -  -  -      ret
  270 D1:E44E -  -  -  -  
  271 D1:E44E -  -  -  -  dbg_printDisassembly:
  272 D1:E44E F5 C5 D5 E5 
              DD E5 -  -      push af \ push bc \ push de \ push hl \ push ix
  273 D1:E454 -  -  -  -      ;find entry in disassembly table
  274 D1:E454 2A F9 31 D0     ld  hl,(operbuf)
  275 D1:E458 26 04 -  -      ld  H,4
  276 D1:E45A ED 6C -  -      mlt hl
  277 D1:E45C 11 EF DD D1     ld  de,inst6502_disassembly_table
  278 D1:E460 19 -  -  -      add hl,de
  279 D1:E461 06 03 -  -      ld  b,3
  280 D1:E463 7E -  -  -  _:  ld  a,(hl)
  281 D1:E464 23 -  -  -      inc hl
  282 D1:E465 CD EB E4 D1     call dbg_printC
  283 D1:E469 10 F8 -  -      djnz -_
  284 D1:E46B 3E 20 -  -      ld  a,' '
  285 D1:E46D CD EB E4 D1     call dbg_printC
  286 D1:E471 46 -  -  -      ld  b,(hl)
  287 D1:E472 04 -  -  -      inc b
  288 D1:E473 -  -  -  -      ;Instruction addressing mode in B. Now find text for that address mode.
  289 D1:E473 21 C2 DD D1     ld  hl,inst6502_disassembler
  290 D1:E477 11 00 00 00     ld  de,0
  291 D1:E47B 5E -  -  -  _:  ld  e,(hl)
  292 D1:E47C 19 -  -  -      add hl,de
  293 D1:E47D 10 FC -  -      djnz -_
  294 D1:E47F 1D -  -  -      dec e
  295 D1:E480 28 29 -  -      jr  z,dbg_printDisassembly_end  ;stop if text is zero-sized
  296 D1:E482 ED 52 -  -      sbc hl,de   ;rewind to start of text part of instruction. E is text length.
  297 D1:E484 43 -  -  -      ld  b,e
  298 D1:E485 -  -  -  -  dbg_printDisassembly_printOperandLoop:
  299 D1:E485 7E -  -  -      ld  a,(hl)
  300 D1:E486 23 -  -  -      inc hl
  301 D1:E487 FE 31 -  -      cp  a,'1'
  302 D1:E489 20 06 -  -      jr  nz,+_
  303 D1:E48B CD CF E4 D1     call dbg_printOperand1
  304 D1:E48F 18 18 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  305 D1:E491 FE 32 -  -  _:  cp  a,'2'
  306 D1:E493 20 06 -  -      jr  nz,+_
  307 D1:E495 CD C7 E4 D1     call dbg_printOperand2
  308 D1:E499 18 0E -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  309 D1:E49B FE 2D -  -  _:  cp  a,'-'
  310 D1:E49D 20 06 -  -      jr  nz,+_
  311 D1:E49F CD B2 E4 D1     call dbg_printRel1
  312 D1:E4A3 18 04 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  313 D1:E4A5 CD EB E4 D1 _:  call dbg_printC
  314 D1:E4A9 -  -  -  -  dbg_PrintDisassembly_printOperandFallthrough:
  315 D1:E4A9 10 DA -  -      djnz dbg_printDisassembly_printOperandLoop
  316 D1:E4AB -  -  -  -  dbg_printDisassembly_end:
  317 D1:E4AB DD E1 E1 D1 
              C1 F1 -  -      pop ix \ pop hl \ pop de \ pop bc \ pop af
  318 D1:E4B1 C9 -  -  -      ret
  319 D1:E4B2 -  -  -  -  
  320 D1:E4B2 -  -  -  -  dbg_printRel1:
  321 D1:E4B2 3A FA 31 D0     ld  a,(operbuf+1)
  322 D1:E4B6 B7 -  -  -      or  a,a
  323 D1:E4B7 F2 C5 E4 D1     jp  p,dbg_printRel1_skipNeg
  324 D1:E4BB F5 -  -  -      push af
  325 D1:E4BC 3E 2D -  -          ld   a,'-'
  326 D1:E4BE CD EB E4 D1         call dbg_printC
  327 D1:E4C2 F1 -  -  -      pop af
  328 D1:E4C3 ED 44 -  -      neg
  329 D1:E4C5 -  -  -  -  dbg_printRel1_skipNeg:
  330 D1:E4C5 18 0C -  -      jr dbg_printHex
  331 D1:E4C7 -  -  -  -  
  332 D1:E4C7 -  -  -  -  dbg_printOperand2:
  333 D1:E4C7 3A FB 31 D0     ld  a,(operbuf+2)
  334 D1:E4CB CD D3 E4 D1     call dbg_printHex
  335 D1:E4CF -  -  -  -  dbg_printOperand1:
  336 D1:E4CF 3A FA 31 D0     ld  a,(operbuf+1)
  337 D1:E4D3 -  -  -  -  dbg_printHex:
  338 D1:E4D3 CD D8 E4 D1     call dispAHex
  339 D1:E4D7 C9 -  -  -      ret
  340 D1:E4D8 -  -  -  -  
  341 D1:E4D8 -  -  -  -  dispAHex:
  342 D1:E4D8 F5 -  -  -      push af
  343 D1:E4D9 CD E0 E4 D1         call +_
  344 D1:E4DD F1 -  -  -      pop af
  345 D1:E4DE 18 04 -  -      jr  ++_
  346 D1:E4E0 1F -  -  -  _:  rra
  347 D1:E4E1 1F -  -  -      rra
  348 D1:E4E2 1F -  -  -      rra
  349 D1:E4E3 1F -  -  -      rra
  350 D1:E4E4 F6 F0 -  -  _:  or  a,$F0
  351 D1:E4E6 27 -  -  -      daa
  352 D1:E4E7 C6 A0 -  -      add a,$A0
  353 D1:E4E9 CE 40 -  -      adc a,$40
  354 D1:E4EB -  -  -  -  dbg_printC:
  355 D1:E4EB E5 -  -  -      push hl
  356 D1:E4EC C5 -  -  -          push bc
  357 D1:E4ED CD 71 B1 D1             call dbg_printChr
  358 D1:E4F1 C1 -  -  -          pop bc
  359 D1:E4F2 E1 -  -  -      pop hl
  360 D1:E4F3 C9 -  -  -      ret
Listing for file "main.z80"
  976 D1:E4F4 -  -  -  -  #include "ppu.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ppu.z80"
    1 D1:E4F4 -  -  -  -  ;PPU-related stuff is written here, though not all of it is localized in
    2 D1:E4F4 -  -  -  -  ;this file. Some of it will necessarily be located with the mapper code
    3 D1:E4F4 -  -  -  -  ;that handles PPU I/O.
    4 D1:E4F4 -  -  -  -  
    5 D1:E4F4 -  -  -  -  
    6 D1:E4F4 -  -  -  -      ;Do this before a lot of other things.
    7 D1:E4F4 -  -  -  -      ;Select current character rom banks from PPU settings.
    8 D1:E4F4 2A 46 34 D0     ld  hl,(chr_rom_base)
    9 D1:E4F8 01 00 10 00     ld  bc,$001000
   10 D1:E4FC DD 7E E0 -      ld  a,(ix+PPU_CTRL)
   11 D1:E4FF E5 -  -  -      push hl
   12 D1:E500 CB 67 -  -          bit 4,a     ;background pattern base offset
   13 D1:E502 28 01 -  -          jr  z,+_
   14 D1:E504 09 -  -  -          add hl,bc
   15 D1:E505 22 20 34 D0 _:      ld  (chr_rom_tiles),hl
   16 D1:E509 E1 -  -  -      pop hl
   17 D1:E50A CB 6F -  -      bit 5,a     ;sprite pattern base offset
   18 D1:E50C 28 01 -  -      jr  z,+_
   19 D1:E50E 09 -  -  -      add hl,bc
   20 D1:E50F 22 24 34 D0 _:  ld  (chr_rom_sprites),hl
   21 D1:E513 -  -  -  -  
   22 D1:E513 -  -  -  -  
   23 D1:E513 -  -  -  -  
   24 D1:E513 -  -  -  -      ;B=Y, C=X. Obtain nametable address
   25 D1:E513 -  -  -  -      ;You must preserve BC yourself. Somehow. Or not depending on how you loop.
   26 D1:E513 -  -  -  -      ;B and C are modified to fit inside the nametable selected.
   27 D1:E513 21 80 06 1A     ld  hl,nametable00>>3
   28 D1:E517 78 -  -  -      ld  a,b
   29 D1:E518 D6 20 -  -      sub 32
   30 D1:E51A 38 01 -  -      jr  c,+_
   31 D1:E51C 78 -  -  -      ld  a,b
   32 D1:E51D 47 -  -  -  _:  ld  b,a
   33 D1:E51E 3F -  -  -      ccf
   34 D1:E51F ED 6A -  -      adc hl,hl
   35 D1:E521 79 -  -  -      ld  a,c
   36 D1:E522 D6 1E -  -      sub 30
   37 D1:E524 38 01 -  -      jr  c,+_
   38 D1:E526 79 -  -  -      ld  a,c
   39 D1:E527 4F -  -  -  _:  ld  c,a
   40 D1:E528 3F -  -  -      ccf
   41 D1:E529 ED 6A -  -      adc hl,hl
   42 D1:E52B 29 -  -  -      add hl,hl   ;HL is now a pointer. do ld hl,(hl) to get actual NT address.
   43 D1:E52C -  -  -  -  
   44 D1:E52C -  -  -  -  
   45 D1:E52C -  -  -  -      ;Increment C=X, adjusting nametable pointer table in HL if crossover
   46 D1:E52C 0C -  -  -      inc c
   47 D1:E52D 79 -  -  -      ld  a,c
   48 D1:E52E FE 20 -  -      cp  a,32
   49 D1:E530 38 06 -  -      jr  c,+_
   50 D1:E532 0E 00 -  -      ld  c,0
   51 D1:E534 7D -  -  -      ld  a,L
   52 D1:E535 EE 04 -  -      xor a,%00000100
   53 D1:E537 6F -  -  -      ld  L,a
   54 D1:E538 00 -  -  -  _:  nop
   55 D1:E539 -  -  -  -  
   56 D1:E539 -  -  -  -      ;Increment B=Y, adjusting nametable pointer table in HL if crossover
   57 D1:E539 04 -  -  -      inc b
   58 D1:E53A 78 -  -  -      ld  a,b
   59 D1:E53B FE 1E -  -      cp  a,30
   60 D1:E53D 38 06 -  -      jr  c,+_
   61 D1:E53F 06 00 -  -      ld  b,0
   62 D1:E541 7D -  -  -      ld  a,L
   63 D1:E542 EE 08 -  -      xor a,%00001000
   64 D1:E544 6F -  -  -      ld  L,a
   65 D1:E545 00 -  -  -  _:  nop
   66 D1:E546 -  -  -  -  
   67 D1:E546 -  -  -  -      ;Retrieves attribute byte from B=Y, C=X
   68 D1:E546 -  -  -  -      ;HL=nametable pointer table
   69 D1:E546 -  -  -  -      ;NTptr tab low byte fmt: %000TIIAA. T=attrib, I=ID, A=address bytes
   70 D1:E546 D5 -  -  -      push de
   71 D1:E547 79 -  -  -          ld  a,c
   72 D1:E548 CB 3F -  -          srl a
   73 D1:E54A CB 3F -  -          srl a   ;change 0-30 to 0-7. Discards low 2 bits.
   74 D1:E54C 5F -  -  -          ld  e,a
   75 D1:E54D 78 -  -  -          ld  a,b
   76 D1:E54E E6 03 -  -          and a,3 ;discard two lower bits
   77 D1:E550 87 -  -  -          add a,a ;But place remaining bits up higher
   78 D1:E551 83 -  -  -          add a,e ;A=%00YYYXXX
   79 D1:E552 CB E5 -  -          set 4,L ;swap to attrib
   80 D1:E554 ED 17 -  -          ld  de,(hl)
   81 D1:E556 CB A5 -  -          res 4,L ;swap back to main nametable pointers
   82 D1:E558 83 -  -  -          add a,e ;base is $C0. This will not produce a carry.
   83 D1:E559 5F -  -  -          ld  e,a
   84 D1:E55A 1A -  -  -          ld  a,(de)
   85 D1:E55B D1 -  -  -      pop de
   86 D1:E55C -  -  -  -  
   87 D1:E55C -  -  -  -      ;Selects attribute from A from B=Y, C=X in format %0000AA00
   88 D1:E55C CB 48 -  -      bit 1,b
   89 D1:E55E 28 04 -  -      jr  z,+_
   90 D1:E560 07 -  -  -      rlca    ;If not zero, shift upper nibble into lower nibble
   91 D1:E561 07 -  -  -      rlca    ;for further selection.
   92 D1:E562 07 -  -  -      rlca
   93 D1:E563 07 -  -  -      rlca
   94 D1:E564 CB 49 -  -  _:  bit 1,c
   95 D1:E566 20 02 -  -      jr  nz,+_   ;If not zero, upper 2 bits of lower nibble already in position
   96 D1:E568 07 -  -  -      rlca        ;Otherwise, move them into position
   97 D1:E569 07 -  -  -      rlca        
   98 D1:E56A E6 0C -  -  _:  and a,%00001100
   99 D1:E56C -  -  -  -  
  100 D1:E56C -  -  -  -      ;Nametable/tilemap variant
  101 D1:E56C -  -  -  -      ;Sets DE to current location in nametable wrt B=Y, C=X
  102 D1:E56C -  -  -  -      ;HL=current nametable pointer
  103 D1:E56C E5 -  -  -      push hl
  104 D1:E56D ED 27 -  -          ld  hl,(hl)
  105 D1:E56F 1E 20 -  -          ld  e,32
  106 D1:E571 50 -  -  -          ld  d,b
  107 D1:E572 ED 5C -  -          mlt de
  108 D1:E574 7B -  -  -          ld  a,e
  109 D1:E575 81 -  -  -          add a,c
  110 D1:E576 5F -  -  -          ld  e,a
  111 D1:E577 19 -  -  -          add hl,de
  112 D1:E578 -  -  -  -          ;ex  de,hl
  113 D1:E578 E1 -  -  -      pop hl
  114 D1:E579 -  -  -  -  
  115 D1:E579 -  -  -  -      ;TODO: Find way to link stuff above. The task set forth is the following:
  116 D1:E579 -  -  -  -      ;Create the main tile rendering loop. We must track the following:
  117 D1:E579 -  -  -  -      ;   Screen pointer, nametable position, loop parameters.
  118 D1:E579 -  -  -  -      ;With these, we will:
  119 D1:E579 -  -  -  -      ;1. Get tileID from nametable position
  120 D1:E579 -  -  -  -      ;2. Get attribute data associated with that tile.
  121 D1:E579 -  -  -  -      ;3. Retrieve CHR_ROM data and
  122 D1:E579 -  -  -  -      ;4. Combine it to retrieve color data, then write it to screen buffer.
  123 D1:E579 -  -  -  -      ;
  124 D1:E579 -  -  -  -      ;Later on, insert a cacheing step between 2 and 3. to selectively
  125 D1:E579 -  -  -  -      ;modify step 4.
  126 D1:E579 -  -  -  -      ;
  127 D1:E579 -  -  -  -      ; Do in the inlining thing later.
  128 D1:E579 -  -  -  -      ;
  129 D1:E579 -  -  -  -  
  130 D1:E579 -  -  -  -  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  131 D1:E579 -  -  -  -  ;    ***   *** ***** *   *  ***  *          *** ***** *   * ***** *****
  132 D1:E579 -  -  -  -  ;   *   * *      *   *   * *   * *         *      *   *   * *     *    
  133 D1:E579 -  -  -  -  ;   ***** *      *   *   * ***** *          ***   *   *   * ***   ***  
  134 D1:E579 -  -  -  -  ;   *   * *      *   *   * *   * *             *  *   *   * *     *    
  135 D1:E579 -  -  -  -  ;   *   *  ***   *    ***  *   * *****      ***   *    ***  *     *    
  136 D1:E579 -  -  -  -  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  137 D1:E579 -  -  -  -  
  138 D1:E579 -  -  -  -  
  139 D1:E579 -  -  -  -  
  140 D1:E579 -  -  -  -  ;
  141 D1:E579 -  -  -  -  ppu_init:
  142 D1:E579 -  -  -  -      ;
  143 D1:E579 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
  144 D1:E57E ED 22 80 -      lea hl,ix-128
  145 D1:E581 ED 12 81 -      lea de,ix-127
  146 D1:E584 01 7E 00 00     ld  bc,126
  147 D1:E588 36 00 -  -      ld  (hl),$00
  148 D1:E58A ED B0 -  -      ldir
  149 D1:E58C -  -  -  -      ;
  150 D1:E58C 3E 55 -  -      ld  a,WREG_CONST
  151 D1:E58E DD 77 F4 -      ld  (ix+PPU_W),a
  152 D1:E591 -  -  -  -      ;
  153 D1:E591 11 00 02 E3     ld  de,mpLcdPalette
  154 D1:E595 21 72 E7 D1     ld  hl,paletteData
  155 D1:E599 01 80 00 00     ld  bc,64*2
  156 D1:E59D ED B0 -  -      ldir
  157 D1:E59F -  -  -  -      ;
  158 D1:E59F -  -  -  -  
  159 D1:E59F -  -  -  -  
  160 D1:E59F AF -  -  -      xor a,a
  161 D1:E5A0 32 60 34 D0     ld  (int_table_len),a
  162 D1:E5A4 11 B5 E5 D1     ld  de,ppu_isr
  163 D1:E5A8 01 23 6D 00     ld  bc,27939
  164 D1:E5AC CD C8 B5 D1     call int6502_insertISA  ;sets ix. ix before this unknown.
  165 D1:E5B0 DD 36 F1 02     ld  (ix+PPU_SUBCYCLE),2
  166 D1:E5B4 C9 -  -  -      ret
  167 D1:E5B5 -  -  -  -  
  168 D1:E5B5 -  -  -  -  
  169 D1:E5B5 -  -  -  -  
  170 D1:E5B5 -  -  -  -  ;Some bits of this is in "coreint.z80"
  171 D1:E5B5 -  -  -  -  ppu_isr:
  172 D1:E5B5 DD 7E E0 -      ld  a,(ix+PPU_CTRL)
  173 D1:E5B8 E6 18 -  -      and a,%00011000     ;sprite and background. if zero, no rendering happens.
  174 D1:E5BA 28 0D -  -      jr  z,ppu_isr_nodraw
  175 D1:E5BC -  -  -  -      ;perform the check that makes odd cycles one ppu cc shorter, but only if
  176 D1:E5BC -  -  -  -      ;something is being rendered to the screen
  177 D1:E5BC DD 7E F5 -      ld  a,(ix+PPU_FRAMECOUNT)
  178 D1:E5BF 0F -  -  -      rrca
  179 D1:E5C0 30 03 -  -      jr  nc,+_
  180 D1:E5C2 DD 35 F1 -      dec (ix+PPU_SUBCYCLE)
  181 D1:E5C5 -  -  -  -  _:  ;there... should be something else to do?
  182 D1:E5C5 -  -  -  -      ;call ppu_drawBGSprites
  183 D1:E5C5 CD FF E5 D1     call ppu_drawBG
  184 D1:E5C9 -  -  -  -      ;call ppu_drawFGSprites
  185 D1:E5C9 -  -  -  -  ppu_isr_nodraw:
  186 D1:E5C9 01 23 6D 00     ld  bc,27939
  187 D1:E5CD DD 7E F1 -      ld  a,(ix+PPU_SUBCYCLE)
  188 D1:E5D0 C6 02 -  -      add a,2     ;add the 2/3rds cycle
  189 D1:E5D2 FE 03 -  -      cp  a,3     ;but is it more than 3? (0,1,2)
  190 D1:E5D4 38 03 -  -      jr  c,+_
  191 D1:E5D6 D6 03 -  -      sub a,3
  192 D1:E5D8 03 -  -  -      inc bc
  193 D1:E5D9 DD 77 F1 -  _:  ld  (ix+PPU_SUBCYCLE),a
  194 D1:E5DC 11 B5 E5 D1     ld  de,ppu_isr
  195 D1:E5E0 CD 7F B5 D1     call int6502_pushISRAfterPop
  196 D1:E5E4 DD CB E2 FE     set 7,(ix+PPU_STATUS)
  197 D1:E5E8 2A 4A 34 D0     ld  hl,(ppu_smc_gate)
  198 D1:E5EC 36 00 -  -      ld  (hl),$00        ;nop out ret so writes no longer ignored.
  199 D1:E5EE -  -  -  -      ;
  200 D1:E5EE -  -  -  -      ; TODO: Figure this one out:
  201 D1:E5EE -  -  -  -      ; Do we need something to unset VBlank active flag at the end of
  202 D1:E5EE -  -  -  -      ; VBlank if left unread?
  203 D1:E5EE -  -  -  -      ;
  204 D1:E5EE DD CB E0 7E     bit 7,(ix+PPU_CTRL)     ;VBlank NMI enable flag
  205 D1:E5F2 CA B2 B6 D1     jp  z,i6502RetryFirstLoad
  206 D1:E5F6 3E FF -  -      ld  a,$FF
  207 D1:E5F8 DD 77 1E -      ld  (ix+NMI_TRIGGERED),a
  208 D1:E5FB C3 0E CD D1     jp  inst6502_brk
  209 D1:E5FF -  -  -  -  
  210 D1:E5FF -  -  -  -  
  211 D1:E5FF -  -  -  -  
  212 D1:E5FF -  -  -  -  
  213 D1:E5FF -  -  -  -  
  214 D1:E5FF -  -  -  -  
  215 D1:E5FF -  -  -  -  ppu_drawBG:
  216 D1:E5FF -  -  -  -      ;set base rom addresses
  217 D1:E5FF 2A 46 34 D0     ld  hl,(chr_rom_base)
  218 D1:E603 01 00 10 00     ld  bc,$001000
  219 D1:E607 DD 7E E0 -      ld  a,(ix+PPU_CTRL)
  220 D1:E60A E5 -  -  -      push hl
  221 D1:E60B CB 67 -  -          bit 4,a     ;background pattern base offset
  222 D1:E60D 28 01 -  -          jr  z,+_
  223 D1:E60F 09 -  -  -          add hl,bc
  224 D1:E610 22 20 34 D0 _:      ld  (chr_rom_tiles),hl
  225 D1:E614 E1 -  -  -      pop hl
  226 D1:E615 CB 6F -  -      bit 5,a     ;sprite pattern base offset
  227 D1:E617 28 01 -  -      jr  z,+_
  228 D1:E619 09 -  -  -      add hl,bc
  229 D1:E61A 22 24 34 D0 _:  ld  (chr_rom_sprites),hl
  230 D1:E61E -  -  -  -      ;set coarse x,y scroll positions. B=Y, C=x
  231 D1:E61E DD 07 FC -      ld  bc,(ix+PPU_XSCROLL)
  232 D1:E621 CB 20 -  -      sla b
  233 D1:E623 CB 20 -  -      sla b
  234 D1:E625 CB 20 -  -      sla b
  235 D1:E627 CB 21 -  -      sla c
  236 D1:E629 CB 21 -  -      sla c
  237 D1:E62B CB 21 -  -      sla c
  238 D1:E62D -  -  -  -      ;set base nametable addresses
  239 D1:E62D 21 00 34 D0     ld  hl,nametable00
  240 D1:E631 DD 7E E0 -      ld  a,(ix+PPU_CTRL)
  241 D1:E634 E6 03 -  -      and a,3
  242 D1:E636 87 -  -  -      add a,a
  243 D1:E637 87 -  -  -      add a,a
  244 D1:E638 6F -  -  -      ld  L,a
  245 D1:E639 DD 2F F6 -      ld  (ix+PPU_NAMETABLE_PTR),hl   ;yeah. let's cache this so we don't lose it
  246 D1:E63C -  -  -  -      ;In-place setting of nametable address wrt X,Y
  247 D1:E63C -  -  -  -      ;%------YY YYYXXXXX
  248 D1:E63C ED 17 -  -      ld  de,(hl)
  249 D1:E63E 79 -  -  -      ld  a,c
  250 D1:E63F 07 -  -  -      rlca
  251 D1:E640 07 -  -  -      rlca
  252 D1:E641 07 -  -  -      rlca
  253 D1:E642 5F -  -  -      ld  e,a
  254 D1:E643 AA -  -  -      xor a,d
  255 D1:E644 E6 03 -  -      and a,%00000011
  256 D1:E646 AA -  -  -      xor a,d
  257 D1:E647 7B -  -  -      ld  a,e
  258 D1:E648 A8 -  -  -      xor a,b
  259 D1:E649 E6 E0 -  -      and %11100000
  260 D1:E64B A8 -  -  -      xor a,b
  261 D1:E64C 5F -  -  -      ld  e,a
  262 D1:E64D -  -  -  -      ;Fetch first attribute byte from address
  263 D1:E64D -  -  -  -      ;%------YY YYYXXXXX -> %------11 11YYYXXX
  264 D1:E64D D5 -  -  -      push de
  265 D1:E64E 7A -  -  -          ld  a,d
  266 D1:E64F 1F -  -  -          rra
  267 D1:E650 CB 3B -  -          srl e
  268 D1:E652 1F -  -  -          rra
  269 D1:E653 CB 3B -  -          srl e       ;YYYYYXXX
  270 D1:E655 CB C2 -  -          set 0,d
  271 D1:E657 CB CA -  -          set 1,d
  272 D1:E659 7B -  -  -          ld  a,e
  273 D1:E65A 07 -  -  -          rlca
  274 D1:E65B 07 -  -  -          rlca
  275 D1:E65C F6 C0 -  -          or  a,%11000000
  276 D1:E65E AB -  -  -          xor a,e
  277 D1:E65F E6 F8 -  -          and a,%11111000
  278 D1:E661 AB -  -  -          xor a,e
  279 D1:E662 5F -  -  -          ld  e,a
  280 D1:E663 1A -  -  -          ld  a,(de)
  281 D1:E664 D1 -  -  -      pop de
  282 D1:E665 -  -  -  -      ;Selects attribute from A from B=Y, C=X in format %0000AA00
  283 D1:E665 -  -  -  -      ;Let's instead use DE %------yy yYyxxxXx y: e6, x: e1
  284 D1:E665 CB 73 -  -      bit 6,e
  285 D1:E667 28 04 -  -      jr  z,+_
  286 D1:E669 07 -  -  -      rlca    ;If not zero, shift upper nibble into lower nibble
  287 D1:E66A 07 -  -  -      rlca    ;for further selection.
  288 D1:E66B 07 -  -  -      rlca
  289 D1:E66C 07 -  -  -      rlca
  290 D1:E66D CB 4B -  -  _:  bit 1,e
  291 D1:E66F 20 02 -  -      jr  nz,+_   ;If not zero, upper 2 bits of lower nibble already in position
  292 D1:E671 07 -  -  -      rlca        ;Otherwise, move them into position
  293 D1:E672 07 -  -  -      rlca        
  294 D1:E673 E6 0C -  -  _:  and a,%00001100
  295 D1:E675 32 AB E6 D1     ld  (ppu_mainTileLoop_attribute_write),a
  296 D1:E679 -  -  -  -  
  297 D1:E679 DD 36 F9 1E     ld  (ix+PPU_VCOUNT),30
  298 D1:E67D FD 2A 28 34 
              D0 -  -  -      ld  iy,(curScreenBuf)
  299 D1:E682 ED 33 20 -      lea iy,iy+32
  300 D1:E685 -  -  -  -  ppu_verticalLoop:
  301 D1:E685 DD 36 FA 20     ld  (ix+PPU_HCOUNT),32
  302 D1:E689 -  -  -  -  ppu_horizontalLoop:
  303 D1:E689 1A -  -  -      ld  a,(de)
  304 D1:E68A E5 -  -  -      push hl
  305 D1:E68B D5 -  -  -          push de
  306 D1:E68C 2A 20 34 D0             ld  hl,(chr_rom_tiles)
  307 D1:E690 4F -  -  -              ld  c,a
  308 D1:E691 06 10 -  -              ld  b,16
  309 D1:E693 ED 4C -  -              mlt bc
  310 D1:E695 09 -  -  -              add hl,bc
  311 D1:E696 DD 36 FB 08             ld  (ix+PPU_TCOUNT),8
  312 D1:E69A ED 13 00 -              lea de,iy+0
  313 D1:E69D -  -  -  -  ppu_mainTileLoop:
  314 D1:E69D 7E -  -  -              ld  a,(hl)
  315 D1:E69E 01 08 00 00             ld  bc,8
  316 D1:E6A2 09 -  -  -              add hl,bc
  317 D1:E6A3 46 -  -  -              ld  b,(hl)
  318 D1:E6A4 4F -  -  -              ld  c,a
  319 D1:E6A5 E5 -  -  -              push hl
  320 D1:E6A6 21 00 32 D0                 ld  hl,vram_palette
  321 D1:E6AA -  -  -  -  ppu_mainTileLoop_attribute_write    .equ $+1
  322 D1:E6AA 3E 00 -  -                  ld  a,0
  323 D1:E6AC -  -  -  -                  ;Attrib to LSB of VRAM_PALETTE, shift CHR_ROM data to LSB to
  324 D1:E6AC -  -  -  -                  ;form full address+offset. Copy from palette to buffer.
  325 D1:E6AC 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;1/8 12b apiece
  326 D1:E6B8 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;2/8
  327 D1:E6C4 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;3/8
  328 D1:E6D0 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;4/8
  329 D1:E6DC 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;5/8
  330 D1:E6E8 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;6/8
  331 D1:E6F4 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;7/8
  332 D1:E700 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;8/8 96b tot
  333 D1:E70C 21 38 01 00                 ld  hl,320-8
  334 D1:E710 19 -  -  -                  add hl,de
  335 D1:E711 EB -  -  -                  ex  de,hl
  336 D1:E712 E1 -  -  -              pop hl
  337 D1:E713 01 F9 FF FF             ld  bc,-7
  338 D1:E717 09 -  -  -              add hl,bc
  339 D1:E718 DD 35 FB -              dec (ix+PPU_TCOUNT)
  340 D1:E71B 20 80 -  -              jr  nz,ppu_mainTileLoop
  341 D1:E71D -  -  -  -              ;start wrapping up the horizontal loop
  342 D1:E71D D1 -  -  -          pop de
  343 D1:E71E E1 -  -  -      pop hl
  344 D1:E71F 7B -  -  -      ld  a,e
  345 D1:E720 13 -  -  -      inc de
  346 D1:E721 AB -  -  -      xor a,e
  347 D1:E722 CB 6F -  -      bit 5,a     ;A carry in X would result in a change in bit 5
  348 D1:E724 28 14 -  -      jr  z,+_    ;Which means there's no crossover if no sign change
  349 D1:E726 1B -  -  -      dec de      ;revert those changes in case they cascaded past E
  350 D1:E727 1C -  -  -      inc e
  351 D1:E728 E6 E0 -  -      and a,%11100000     ;The funny thing is that the XOR above...
  352 D1:E72A AB -  -  -      xor a,e             ;... is still valid for this masking technique.
  353 D1:E72B 4F -  -  -      ld  c,a     ;And now let's squirrel this and...
  354 D1:E72C 42 -  -  -      ld  b,d     ;...D for later merge magic
  355 D1:E72D 7C -  -  -      ld  a,h
  356 D1:E72E EE 04 -  -      xor a,%00000100 ;flip to the next horizontal buffer...
  357 D1:E730 67 -  -  -      ld  h,a
  358 D1:E731 ED 17 -  -      ld  de,(hl)
  359 D1:E733 59 -  -  -      ld  e,c
  360 D1:E734 78 -  -  -      ld  a,b
  361 D1:E735 AA -  -  -      xor d
  362 D1:E736 E6 03 -  -      and a,%00000011
  363 D1:E738 AA -  -  -      xor d
  364 D1:E739 57 -  -  -      ld  d,a         ;and map coords into a new nametable
  365 D1:E73A ED 33 08 -  _:  lea iy,iy+8     ;next position on the buffer.
  366 D1:E73D DD 35 FA -      dec (ix+PPU_HCOUNT)
  367 D1:E740 C2 89 E6 D1     jp  nz,ppu_horizontalLoop
  368 D1:E744 -  -  -  -      ;the X buffer *will* have changed at some point and rolled around
  369 D1:E744 -  -  -  -      ;so there's no need to deal with X. Still gotta do Y first...
  370 D1:E744 EB -  -  -      ex  de,hl
  371 D1:E745 7C -  -  -      ld  a,h
  372 D1:E746 01 20 00 00     ld  bc,%00100000
  373 D1:E74A 09 -  -  -      add hl,bc   ;%-----^yy yYyxxxXx
  374 D1:E74B EB -  -  -      ex  de,hl
  375 D1:E74C 4B -  -  -      ld  c,e     ;coordinate storage.
  376 D1:E74D 42 -  -  -      ld  b,d
  377 D1:E74E AA -  -  -      xor a,d     ;detect sign change in bit 2
  378 D1:E74F CB 57 -  -      bit 2,a
  379 D1:E751 28 04 -  -      jr  z,+_
  380 D1:E753 7D -  -  -      ld  a,L
  381 D1:E754 EE 08 -  -      xor a,%00001000 ;flip to the next vertical buffer...
  382 D1:E756 6F -  -  -      ld  L,a
  383 D1:E757 7D -  -  -  _:  ld  a,L
  384 D1:E758 EE 04 -  -      xor a,%00000100 ;flip back the horizontal buffer that must've been flipped.
  385 D1:E75A 6F -  -  -      ld  L,a
  386 D1:E75B ED 17 -  -      ld  de,(hl)
  387 D1:E75D 59 -  -  -      ld  e,c
  388 D1:E75E 78 -  -  -      ld  a,b
  389 D1:E75F AA -  -  -      xor d
  390 D1:E760 E6 03 -  -      and a,%00000011
  391 D1:E762 AA -  -  -      xor d
  392 D1:E763 57 -  -  -      ld  d,a         ;and map coords into a new nametable
  393 D1:E764 01 00 09 00     ld  bc,(320*7)+(320-256)
  394 D1:E768 FD 09 -  -      add iy,bc       ;move cursor pointer to the next row
  395 D1:E76A DD 35 F9 -      dec (ix+PPU_VCOUNT)
  396 D1:E76D C2 85 E6 D1     jp  nz,ppu_verticalLoop
  397 D1:E771 C9 -  -  -      ret
  398 D1:E772 -  -  -  -  
  399 D1:E772 -  -  -  -  ;TODO: Test changes to the PPU and link together something in the mapper
  400 D1:E772 -  -  -  -  ;to perform controls. Also. Those freakin' interrupts. DO THEM.
  401 D1:E772 -  -  -  -  ;Might also want to implement a drawlist of sorts since writes to the ports
  402 D1:E772 -  -  -  -  ;ought to be timestamped. That way, we'll be able to tell what the hell is
  403 D1:E772 -  -  -  -  ;being done mid-frame and then make adjustments to such things as
  404 D1:E772 -  -  -  -  ;BG rendering mid-draw, if necessary. Or be able to detect such attempts as
  405 D1:E772 -  -  -  -  ;I don't think I want to deal with that. Only deal with stuff that should
  406 D1:E772 -  -  -  -  ;be occurring within the VBlank period.
  407 D1:E772 -  -  -  -  
  408 D1:E772 -  -  -  -  
  409 D1:E772 -  -  -  -  
  410 D1:E772 -  -  -  -  
  411 D1:E772 -  -  -  -  
  412 D1:E772 -  -  -  -  
  413 D1:E772 -  -  -  -  
  414 D1:E772 -  -  -  -  
  415 D1:E772 -  -  -  -  
  416 D1:E772 -  -  -  -  
  417 D1:E772 -  -  -  -  
Listing for file "main.z80"
  977 D1:E772 -  -  -  -  #include "palette.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\palette.z80"
    1 D1:E772 -  -  -  -  paletteData:
    2 D1:E772 8C 31 E5 01 
              62 0A 60 1A 
              E0 29 00 31 
              00 30 03 28 .dw $318C, $01E5, $0A62, $1A60, $29E0, $3100, $3000, $2803
    3 D1:E782 06 18 08 08 
              09 00 09 00 
              08 01 00 00 
              00 00 00 00 .dw $1806, $0808, $0009, $0009, $0108, $0000, $0000, $0000
    4 D1:E792 B5 56 2C 0B 
              E8 1F E5 37 
              23 4F 03 5A 
              A5 58 09 4C .dw $56B5, $0B2C, $1FE8, $37E5, $4F23, $5A03, $58A5, $4C09
    5 D1:E7A2 0D 34 10 1C 
              11 08 B1 00 
              0F 02 00 00 
              00 00 00 00 .dw $340D, $1C10, $0811, $00B1, $020F, $0000, $0000, $0000
    6 D1:E7B2 FF 7F F6 33 
              F2 47 EF 63 
              ED 77 4D 7F 
              EF 7D B3 74 .dw $7FFF, $33F6, $47F2, $63EF, $77ED, $7F4D, $7DEF, $74B3
    7 D1:E7C2 17 60 1A 44 
              BC 30 FC 21 
              59 23 29 25 
              00 00 00 00 .dw $6017, $441A, $30BC, $21FC, $2359, $2529, $0000, $0000
    8 D1:E7D2 FF 7F FC 5F 
              FA 6B F9 73 
              F8 7B B8 7F 
              39 7F BA 7A .dw $7FFF, $5FFC, $6BFA, $73F9, $7BF8, $7FB8, $7F39, $7ABA
    9 D1:E7E2 5C 72 5D 6A 
              BE 5E 3E 5B 
              BD 5B F7 5E 
              00 00 00 00 .dw $725C, $6A5D, $5EBE, $5B3E, $5BBD, $5EF7, $0000, $0000
   10 D1:E7F2 08 31 62 01 
              E0 09 E0 19 
              80 29 C0 30 
              00 34 01 28 .dw $3108, $0162, $09E0, $19E0, $2980, $30C0, $3400, $2801
   11 D1:E802 04 18 05 08 
              06 00 06 00 
              84 00 00 00 
              00 00 00 00 .dw $1804, $0805, $0006, $0006, $0084, $0000, $0000, $0000
   12 D1:E812 10 56 88 0A 
              24 1F 22 37 
              A1 4A A2 55 
              64 58 07 4C .dw $5610, $0A88, $1F24, $3722, $4AA1, $55A2, $5864, $4C07
   13 D1:E822 0A 38 0C 20 
              0D 08 2D 00 
              6A 01 00 00 
              00 00 00 00 .dw $380A, $200C, $080D, $002D, $016A, $0000, $0000, $0000
   14 D1:E832 39 7F B0 33 
              ED 47 EB 63 
              C9 77 AA 7E 
              6C 7D 4F 74 .dw $7F39, $33B0, $47ED, $63EB, $77C9, $7EAA, $7D6C, $744F
   15 D1:E842 12 60 15 48 
              36 30 56 25 
              93 26 C6 24 
              00 00 00 00 .dw $6012, $4815, $3036, $2556, $2693, $24C6, $0000, $0000
   16 D1:E852 39 7F 76 63 
              B4 6B B3 73 
              73 7F 13 7F 
              94 7E 15 7E .dw $7F39, $6376, $6BB4, $73B3, $7F73, $7F13, $7E94, $7E15
   17 D1:E862 D7 75 B8 69 
              F8 61 78 5E 
              F7 5E 32 5E 
              00 00 00 00 .dw $75D7, $69B8, $61F8, $5E78, $5EF7, $5E32, $0000, $0000
   18 D1:E872 CB 20 44 01 
              C2 01 A0 0D 
              20 19 60 20 
              00 24 03 1C .dw $20CB, $0144, $01C2, $0DA0, $1920, $2060, $2400, $1C03
   19 D1:E882 05 10 08 00 
              09 00 09 00 
              87 00 00 00 
              00 00 00 00 .dw $1005, $0008, $0009, $0009, $0087, $0000, $0000, $0000
   20 D1:E892 B4 3D 4B 02 
              E7 0E E4 22 
              22 36 23 41 
              05 40 08 38 .dw $3DB4, $024B, $0EE7, $22E4, $3622, $4123, $4005, $3808
   21 D1:E8A2 0C 24 0F 10 
              11 00 30 00 
              4E 01 00 00 
              00 00 00 00 .dw $240C, $100F, $0011, $0030, $014E, $0000, $0000, $0000
   22 D1:E8B2 DE 62 75 1F 
              F1 33 ED 47 
              4C 5B 2C 66 
              EE 64 12 5C .dw $62DE, $1F75, $33F1, $47ED, $5B4C, $662C, $64EE, $5C12
   23 D1:E8C2 16 48 19 34 
              1B 20 1B 15 
              58 12 89 18 
              00 00 00 00 .dw $4816, $3419, $201B, $151B, $1258, $1889, $0000, $0000
   24 D1:E8D2 DE 62 1A 47 
              59 4F 57 57 
              F7 5E 97 62 
              18 66 99 5D .dw $62DE, $471A, $4F59, $5757, $5EF7, $6297, $6618, $5D99
   25 D1:E8E2 5B 59 5C 4D 
              BD 45 1D 42 
              9C 42 D5 41 
              00 00 00 00 .dw $595B, $4D5C, $45BD, $421D, $429C, $41D5, $0000, $0000
   26 D1:E8F2 C8 20 22 01 
              80 01 80 0D 
              20 19 60 24 
              00 24 01 1C .dw $20C8, $0122, $0180, $0D80, $1920, $2460, $2400, $1C01
   27 D1:E902 03 10 05 00 
              06 00 06 00 
              84 00 00 00 
              00 00 00 00 .dw $1003, $0005, $0006, $0006, $0084, $0000, $0000, $0000
   28 D1:E912 90 41 27 02 
              A4 12 A2 26 
              21 36 21 41 
              03 44 06 38 .dw $4190, $0227, $12A4, $26A2, $3621, $4121, $4403, $3806
   29 D1:E922 09 28 0C 14 
              0D 04 0C 00 
              2A 01 00 00 
              00 00 00 00 .dw $2809, $140C, $040D, $000C, $012A, $0000, $0000, $0000
   30 D1:E932 B9 66 50 23 
              CD 37 CA 4B 
              49 5B 2A 6A 
              EC 68 0F 5C .dw $66B9, $2350, $37CD, $4BCA, $5B49, $6A2A, $68EC, $5C0F
   31 D1:E942 12 4C 15 34 
              16 24 F5 18 
              33 16 86 18 
              00 00 00 00 .dw $4C12, $3415, $2416, $18F5, $1633, $1886, $0000, $0000
   32 D1:E952 B9 66 F5 4A 
              14 53 13 5B 
              F2 62 73 66 
              F4 65 95 61 .dw $66B9, $4AF5, $5314, $5B13, $62F2, $6673, $65F4, $6195
   33 D1:E962 56 5D 57 51 
              98 49 F8 45 
              77 46 D1 45 
              00 00 00 00 .dw $5D56, $5157, $4998, $45F8, $4677, $45D1, $0000, $0000
   34 D1:E972 C9 25 04 02 
              81 06 60 16 
              00 22 20 29 
              40 24 01 1C .dw $25C9, $0204, $0681, $1660, $2200, $2920, $2440, $1C01
   35 D1:E982 03 0C 05 00 
              07 00 47 00 
              26 01 00 00 
              00 00 00 00 .dw $0C03, $0005, $0007, $0047, $0126, $0000, $0000, $0000
   36 D1:E992 11 47 49 07 
              E6 1B E3 2F 
              41 3F 21 4A 
              E3 44 06 38 .dw $4711, $0749, $1BE6, $2FE3, $3F41, $4A21, $44E3, $3806
   37 D1:E9A2 09 24 0C 10 
              0E 00 EE 00 
              4C 02 20 00 
              00 00 00 00 .dw $2409, $100C, $000E, $00EE, $024C, $0020, $0000, $0000
   38 D1:E9B2 FA 6B F3 27 
              EF 3B EC 53 
              EA 67 8A 6F 
              4C 6E 0F 61 .dw $6BFA, $27F3, $3BEF, $53EC, $67EA, $6F8A, $6E4C, $610F
   39 D1:E9C2 72 48 75 34 
              37 21 57 16 
              B5 1B 67 1D 
              00 00 00 00 .dw $4872, $3475, $2137, $1657, $1BB5, $1D67, $0000, $0000
   40 D1:E9D2 FA 6B F7 4F 
              F6 57 F4 63 
              F4 67 F4 6F 
              94 6B 16 67 .dw $6BFA, $4FF7, $57F6, $63F4, $67F4, $6FF4, $6B94, $6716
   41 D1:E9E2 D7 5E D8 56 
              39 4F 99 4B 
              F8 4B 52 4B 
              00 00 00 00 .dw $5ED7, $56D8, $4F39, $4B99, $4BF8, $4B52, $0000, $0000
   42 D1:E9F2 47 25 62 01 
              E0 05 E0 11 
              80 21 E0 24 
              00 24 00 1C .dw $2547, $0162, $05E0, $11E0, $2180, $24E0, $2400, $1C00
   43 D1:EA02 02 0C 04 00 
              05 00 05 00 
              A4 00 00 00 
              00 00 00 00 .dw $0C02, $0004, $0005, $0005, $00A4, $0000, $0000, $0000
   44 D1:EA12 4E 46 87 06 
              44 1B 41 2F 
              A0 3E C0 45 
              A2 44 05 38 .dw $464E, $0687, $1B44, $2F41, $3EA0, $45C0, $44A2, $3805
   45 D1:EA22 08 24 0A 10 
              0C 00 6B 00 
              6A 01 00 00 
              00 00 00 00 .dw $2408, $100A, $000C, $006B, $016A, $0000, $0000, $0000
   46 D1:EA32 77 6B CF 27 
              EC 3F E9 53 
              E8 63 E8 6E 
              CA 6D 8D 60 .dw $6B77, $27CF, $3FEC, $53E9, $63E8, $6EE8, $6DCA, $608D
   47 D1:EA42 10 48 13 34 
              94 24 94 19 
              B2 1A E5 1C 
              00 00 00 00 .dw $4810, $3413, $2494, $1994, $1AB2, $1CE5, $0000, $0000
   48 D1:EA52 77 6B B4 4F 
              F3 57 F2 63 
              B1 67 51 6B 
              D2 6A 53 66 .dw $6B77, $4FB4, $57F3, $63F2, $67B1, $6B51, $6AD2, $6653
   49 D1:EA62 14 5E 15 56 
              56 4E B6 4A 
              35 4B 70 4A 
              00 00 00 00 .dw $5E14, $5615, $4E56, $4AB6, $4B35, $4A70, $0000, $0000
   50 D1:EA72 28 1D 63 01 
              C1 01 C0 09 
              40 19 A0 20 
              00 20 01 18 .dw $1D28, $0163, $01C1, $09C0, $1940, $20A0, $2000, $1801
   51 D1:EA82 03 0C 05 00 
              06 00 06 00 
              C5 00 00 00 
              00 00 00 00 .dw $0C03, $0005, $0006, $0006, $00C5, $0000, $0000, $0000
   52 D1:EA92 10 3A 89 02 
              06 0F 03 23 
              41 32 61 3D 
              43 3C 05 30 .dw $3A10, $0289, $0F06, $2303, $3241, $3D61, $3C43, $3005
   53 D1:EAA2 08 20 0C 0C 
              0D 00 6D 00 
              8B 01 00 00 
              00 00 00 00 .dw $2008, $0C0C, $000D, $006D, $018B, $0000, $0000, $0000
   54 D1:EAB2 59 5B B2 1B 
              EE 2F EB 43 
              89 57 89 5E 
              6B 5D 6E 54 .dw $5B59, $1BB2, $2FEE, $43EB, $5789, $5E89, $5D6B, $546E
   55 D1:EAC2 11 40 15 2C 
              97 18 96 11 
              B4 12 C6 14 
              00 00 00 00 .dw $4011, $2C15, $1897, $1196, $12B4, $14C6, $0000, $0000
   56 D1:EAD2 59 5B 76 43 
              B5 4B B4 53 
              73 5B F3 5E 
              94 5E 15 5A .dw $5B59, $4376, $4BB5, $53B4, $5B73, $5EF3, $5E94, $5A15
   57 D1:EAE2 D6 51 D8 49 
              38 42 98 3E 
              17 3F 52 3E 
              00 00 00 00 .dw $51D6, $49D8, $4238, $3E98, $3F17, $3E52, $0000, $0000
   58 D1:EAF2 E7 1C 42 01 
              A0 01 A0 0D 
              40 19 80 20 
              00 20 00 18 .dw $1CE7, $0142, $01A0, $0DA0, $1940, $2080, $2000, $1800
   59 D1:EB02 02 0C 04 00 
              05 00 05 00 
              84 00 00 00 
              00 00 00 00 .dw $0C02, $0004, $0005, $0005, $0084, $0000, $0000, $0000
   60 D1:EB12 CE 39 47 02 
              C4 0E C1 22 
              40 32 40 3D 
              22 3C 05 30 .dw $39CE, $0247, $0EC4, $22C1, $3240, $3D40, $3C22, $3005
   61 D1:EB22 08 20 0A 0C 
              0C 00 2B 00 
              4A 01 00 00 
              00 00 00 00 .dw $2008, $0C0A, $000C, $002B, $014A, $0000, $0000, $0000
   62 D1:EB32 F7 5E 6F 1F 
              EC 33 E9 47 
              68 57 68 62 
              2A 61 2D 54 .dw $5EF7, $1F6F, $33EC, $47E9, $5768, $6268, $612A, $542D
   63 D1:EB42 10 44 13 30 
              34 1C 34 11 
              72 12 A5 14 
              00 00 00 00 .dw $4410, $3013, $1C34, $1134, $1272, $14A5, $0000, $0000
   64 D1:EB52 F7 5E 34 47 
              73 4B 72 57 
              31 5B B1 5E 
              52 5E D3 59 .dw $5EF7, $4734, $4B73, $5772, $5B31, $5EB1, $5E52, $59D3
   65 D1:EB62 94 55 95 49 
              D6 45 56 3E 
              B5 3E 10 42 
              00 00 00 00 .dw $5594, $4995, $45D6, $3E56, $3EB5, $4210, $0000, $0000
Listing for file "main.z80"
  978 D1:EB72 -  -  -  -  
  979 D1:EB72 -  -  -  -  .echo "Main program size: ",$-programStart
