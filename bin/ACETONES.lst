    1 00:0000 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "main.z80"
    2 00:0000 -  -  -  -  .org userMem-2
    3 D1:A87F EF 7B -  -  .db $EF, $7B
    4 D1:A881 -  -  -  -  
    5 D1:A881 -  -  -  -  ;SPASM help msg
    6 D1:A881 -  -  -  -  ;-E = Assemble eZ80 code
    7 D1:A881 -  -  -  -  ;-T = Generate code listing
    8 D1:A881 -  -  -  -  ;-C = Code counter mode
    9 D1:A881 -  -  -  -  ;-L = Symbol table mode
   10 D1:A881 -  -  -  -  ;-S = Stats mode
   11 D1:A881 -  -  -  -  ;-O = Don't write to output file
   12 D1:A881 -  -  -  -  ;-I [directory] = Add include directory
   13 D1:A881 -  -  -  -  ;-A = Labels are cAse-sensitive
   14 D1:A881 -  -  -  -  ;-D<name>[=value] = Create a define 'name' [with 'value']
   15 D1:A881 -  -  -  -  ;-N = Don't use colors for messages
   16 D1:A881 -  -  -  -  ;-V <Expression> = Pipe expression directly into assembly
   17 D1:A881 -  -  -  -  ;-H = Print this help message
   18 D1:A881 -  -  -  -  
   19 D1:A881 -  -  -  -  
   20 D1:A881 -  -  -  -  
   21 D1:A881 -  -  -  -  
   22 D1:A881 -  -  -  -  programStart:
   23 D1:A881 F3 -  -  -      di
   24 D1:A882 ED 73 FC 31 
              D0 -  -  -      ld  (save_spl),sp
   25 D1:A887 ED 6E -  -      ld  a,MB
   26 D1:A889 32 FF 31 D0     ld  (save_mbase),a
   27 D1:A88D 3E D0 -  -      ld  a,$D0
   28 D1:A88F ED 6D -  -      ld  MB,a
   29 D1:A891 CD 7F AE D1     call startGfx
   30 D1:A895 -  -  -  -      ;
   31 D1:A895 -  -  -  -      ; todo; write test 6502 program, map it into rom.
   32 D1:A895 -  -  -  -      ; map virtual screen device into ram too. 32x30 screen ascii display
   33 D1:A895 -  -  -  -      ; is probably looking nice right about now.
   34 D1:A895 -  -  -  -      ; Could probably map it into PPU space since we're not actually doing
   35 D1:A895 -  -  -  -      ; anything about that until long after we're done testing core integrity
   36 D1:A895 -  -  -  -      ; You'll probably want to create a mockup vector table then do some equate
   37 D1:A895 -  -  -  -      ; magic to offset it and map it to $FFXX such that the three vectors will
   38 D1:A895 -  -  -  -      ; magically line up with $FFFA-$FFFF. NMI, RES, and IRQ. In that order.
   39 D1:A895 -  -  -  -      ; The rest of the page won't need to matter. It could literally be the
   40 D1:A895 -  -  -  -      ; surrounding eZ80 data/code. Just... don't allow writes to it.
   41 D1:A895 -  -  -  -      ;
   42 D1:A895 -  -  -  -  
   43 D1:A895 21 00 00 D4     ld  hl,screenBuf1
   44 D1:A899 11 01 00 D4     ld  de,screenBuf1+1
   45 D1:A89D 01 FF 57 02     ld  bc,(2*240*320)-1
   46 D1:A8A1 36 00 -  -      ld  (hl),$00
   47 D1:A8A3 ED B0 -  -      ldir
   48 D1:A8A5 -  -  -  -  
   49 D1:A8A5 -  -  -  -      ;Makes sure all non-ROM areas have a mapping
   50 D1:A8A5 21 00 33 D0     ld  hl,scrap_mapping
   51 D1:A8A9 01 01 80 00     ld  bc,$008001
   52 D1:A8AD 1E 00 -  -      ld  e,0
   53 D1:A8AF CD 10 B6 D1     call i6502_map_pages
   54 D1:A8B3 -  -  -  -  
   55 D1:A8B3 -  -  -  -  
   56 D1:A8B3 -  -  -  -  
   57 D1:A8B3 -  -  -  -      ;load reset vectors
   58 D1:A8B3 21 9F A8 D1     ld  hl,testVectors
   59 D1:A8B7 01 01 01 00     ld  bc,$000101
   60 D1:A8BB 1E FF -  -      ld  e,$FF
   61 D1:A8BD CD 10 B6 D1     call i6502_map_pages
   62 D1:A8C1 -  -  -  -      ;load program ROM to lowmem
   63 D1:A8C1 21 9F A9 D1     ld  hl,testCode
   64 D1:A8C5 01 08 20 00     ld  bc,$002008
   65 D1:A8C9 1E 80 -  -      ld  e,$80
   66 D1:A8CB CD 10 B6 D1     call i6502_map_pages
   67 D1:A8CF -  -  -  -      ;map nametable to writeable address space. Write routine to mirror this
   68 D1:A8CF -  -  -  -      ;memory to screen.
   69 D1:A8CF 21 00 50 D0     ld  hl,NAMETABLE1
   70 D1:A8D3 01 04 20 00     ld  bc,$002004
   71 D1:A8D7 1E 40 -  -      ld  e,$40
   72 D1:A8D9 CD 10 B6 D1     call i6502_map_pages
   73 D1:A8DD -  -  -  -      ;Everything should be ready. Set up the debug environment and then
   74 D1:A8DD -  -  -  -      ;start the emulation.
   75 D1:A8DD -  -  -  -      ;jr $
   76 D1:A8DD CD D2 AE D1     call clearTextBuf
   77 D1:A8E1 3E 01 -  -      ld  a,1
   78 D1:A8E3 CD 1F AF D1     call setLineStart
   79 D1:A8E7 CD 28 AF D1     call setCurLine
   80 D1:A8EB 21 25 AA D1     ld  hl,text001
   81 D1:A8EF CD 4A AF D1     call printString
   82 D1:A8F3 FD 21 93 AA 
              D1 -  -  -      ld  iy,firstFileHeader
   83 D1:A8F8 01 00 00 00     ld  bc,0
   84 D1:A8FC FD 4E FF -      ld  c,(iy-1)
   85 D1:A8FF CD FA AD D1     call vatTraverse
   86 D1:A903 DA B0 AA D1     jp  c,err_noContainersFound
   87 D1:A907 D5 -  -  -      push de
   88 D1:A908 21 3C AA D1         ld  hl,text003
   89 D1:A90C CD 4A AF D1         call printString
   90 D1:A910 DD 46 FA -          ld  b,(ix-6)
   91 D1:A913 ED 22 F9 -          lea hl,ix-7
   92 D1:A916 7E -  -  -  _:      ld  a,(hl)
   93 D1:A917 2B -  -  -          dec hl
   94 D1:A918 E5 -  -  -          push hl
   95 D1:A919 C5 -  -  -              push bc
   96 D1:A91A CD 60 AF D1                 call PrintBigFont
   97 D1:A91E C1 -  -  -              pop bc
   98 D1:A91F E1 -  -  -          pop hl
   99 D1:A920 10 F4 -  -          djnz -_
  100 D1:A922 CD 33 AF D1         call newLine
  101 D1:A926 D1 -  -  -      pop de
  102 D1:A927 CD C9 AB D1     call loadROMFile
  103 D1:A92B -  -  -  -  
  104 D1:A92B -  -  -  -      ;REMOVE THE FOLLOWING BLOCK WHEN DONE TESTING NESTEST
  105 D1:A92B -  -  -  -      ;
  106 D1:A92B -  -  -  -      ;
  107 D1:A92B 21 1C AA D1     ld  hl,timings_file
  108 D1:A92F CD 20 03 02     call _Mov9ToOP1
  109 D1:A933 CD 0C 05 02     call _ChkFindSym
  110 D1:A937 DA 5E A9 D1     jp  c,endCurrentRun
  111 D1:A93B CD 98 1F 02     call _ChkInRam
  112 D1:A93F EB -  -  -      ex  de,hl
  113 D1:A940 30 08 -  -      jr  nc,+_
  114 D1:A942 11 09 00 00     ld  de,9
  115 D1:A946 19 -  -  -      add hl,de
  116 D1:A947 5E -  -  -      ld  e,(hl)
  117 D1:A948 19 -  -  -      add hl,de
  118 D1:A949 23 -  -  -      inc hl
  119 D1:A94A 5E -  -  -  _:  ld  e,(hl)
  120 D1:A94B 23 -  -  -      inc hl
  121 D1:A94C 56 -  -  -      ld  d,(hl)
  122 D1:A94D 23 -  -  -      inc hl
  123 D1:A94E 22 1F 34 D0     ld  (timings_base),hl
  124 D1:A952 -  -  -  -      ;
  125 D1:A952 -  -  -  -      ;
  126 D1:A952 -  -  -  -      ;
  127 D1:A952 -  -  -  -  
  128 D1:A952 -  -  -  -  
  129 D1:A952 21 49 AA D1     ld  hl,text004
  130 D1:A956 CD 4A AF D1     call printString
  131 D1:A95A -  -  -  -  
  132 D1:A95A -  -  -  -      ;jr $
  133 D1:A95A -  -  -  -  #ifdef COREDEBUG
  134 D1:A95A                 call dbg_resetScreen
  135 D1:A95A             #endif
  136 D1:A95A CD 3F B3 D1     call i6502Init
  137 D1:A95E -  -  -  -  
  138 D1:A95E -  -  -  -  ;    call clearTextBuf
  139 D1:A95E -  -  -  -  ;    ld  hl,helloWorld
  140 D1:A95E -  -  -  -  ;    ld  de,NAMETABLE1+(32*1)+1
  141 D1:A95E -  -  -  -  ;    ld  bc,13
  142 D1:A95E -  -  -  -  ;    ldir
  143 D1:A95E -  -  -  -  
  144 D1:A95E -  -  -  -  endCurrentRun:
  145 D1:A95E CD 16 DF D1     call dbg_prepNextLine
  146 D1:A962 CD 33 AF D1     call newLine
  147 D1:A966 21 6B AA D1     ld  hl,text005
  148 D1:A96A CD 4A AF D1     call printString
  149 D1:A96E -  -  -  -  
  150 D1:A96E -  -  -  -      ;call printTextBuf
  151 D1:A96E CD 56 AE D1     call fastCopy
  152 D1:A972 00 -  -  -      nop
  153 D1:A973 CD 10 AA D1     call waituntilnewkeypress
  154 D1:A977 CD 08 AA D1     call waituntilkeyrelease
  155 D1:A97B -  -  -  -  
  156 D1:A97B -  -  -  -      ;
  157 D1:A97B -  -  -  -      ;
  158 D1:A97B -  -  -  -      ;
  159 D1:A97B -  -  -  -  programExit:
  160 D1:A97B CD 71 AE D1     call stopGfx
  161 D1:A97F ED 7B FC 31 
              D0 -  -  -      ld  sp,(save_spl)
  162 D1:A984 3A FF 31 D0     ld  a,(save_mbase)
  163 D1:A988 ED 6D -  -      ld  MB,a
  164 D1:A98A FD 21 80 00 
              D0 -  -  -      ld  iy,flags
  165 D1:A98F C9 -  -  -      ret
  166 D1:A990 -  -  -  -  
  167 D1:A990 -  -  -  -  
  168 D1:A990 -  -  -  -  testFilename:
  169 D1:A990 15 4E 45 53 
              54 45 53 54 
              00 -  -  -  .db AppVarObj,"NESTEST",0
  170 D1:A999 -  -  -  -  
  171 D1:A999 -  -  -  -  
  172 D1:A999 -  -  -  -  ;NMI, RES, and IRQ. In that order.
  173 D1:A999 -  -  -  -  testVectors .equ $-(256-6)
  174 D1:A999 00 80 -  -  .dw $8000
  175 D1:A99B 00 80 -  -  .dw $8000
  176 D1:A99D 00 80 -  -  .dw $8000
  177 D1:A99F -  -  -  -  testCode:
  178 D1:A99F A9 00 AA A8 .db $A9,$00,$AA,$A8
  179 D1:A9A3 BD 14 80 -  .db $BD,$14,$80
  180 D1:A9A6 C9 00 -  -  .db $C9,$00
  181 D1:A9A8 F0 08 -  -  .db $F0,$08
  182 D1:A9AA 99 21 40 -  .db $99,$21,$40
  183 D1:A9AD E8 C8 -  -  .db $E8,$C8
  184 D1:A9AF -  -  -  -  ;.db $12
  185 D1:A9AF 4C 04 80 02 .db $4C,$04,$80,$02
  186 D1:A9B3 48 65 6C 6C 
              6F 2C 20 57 
              6F -  -  -  .db $48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F
  187 D1:A9BC 72 6C 64 21 
              00 -  -  -  .db $72,$6C,$64,$21,$00
  188 D1:A9C1 -  -  -  -  
  189 D1:A9C1 -  -  -  -  
  190 D1:A9C1 A9 00 AA A8 
              BD 11 80 C9 
              00 F0 05 99 
              21 40 D0 -  .db $A9,$00,$AA,$A8,$BD,$11,$80,$C9,$00,$F0,$05,$99,$21,$40,$D0
  191 D1:A9D0 F4 02 48 65 
              6C 6C 6F 2C 
              20 57 6F 72 
              6C 64 21 00 .db $F4,$02,$48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F,$72,$6C,$64,$21,$00
  192 D1:A9E0 02 -  -  -  .db $02     ;JAM. Emulator terminates on unsupported instructions or JAMs.
  193 D1:A9E1 -  -  -  -  
  194 D1:A9E1 -  -  -  -  helloWorld:
  195 D1:A9E1 48 65 6C 6C 
              6F 2C 20 57 
              6F 72 6C 64 
              21 00 -  -  .db "Hello, World!",0
  196 D1:A9EF -  -  -  -  
  197 D1:A9EF -  -  -  -  ;Copied from my Falldown2 project. I didn't want to have to
  198 D1:A9EF -  -  -  -  ;find yet another hardware reference for something I already did.
  199 D1:A9EF -  -  -  -  ;But I'll have to do it again anyway because this isn't exactly
  200 D1:A9EF -  -  -  -  ;what we're looking for. Here, we output the same sort of
  201 D1:A9EF -  -  -  -  ;game keys that I've used basically all my programming life.
  202 D1:A9EF -  -  -  -  ;Anyhoo. We'll be using the following:
  203 D1:A9EF -  -  -  -  ;kbitDown	equ 00h
  204 D1:A9EF -  -  -  -  ;kbitLeft	equ 01h
  205 D1:A9EF -  -  -  -  ;kbitRight	equ 02h
  206 D1:A9EF -  -  -  -  ;kbitUp		equ 03h
  207 D1:A9EF -  -  -  -  ;kbitYequ equ 04h
  208 D1:A9EF -  -  -  -  ;kbit2nd		equ 05h
  209 D1:A9EF -  -  -  -  ;kbitMode	equ 06h
  210 D1:A9EF -  -  -  -  ;kbitDel		equ 07h
  211 D1:A9EF -  -  -  -  ;You can find the other defines approximately where I found the stuff above.
  212 D1:A9EF -  -  -  -  
  213 D1:A9EF -  -  -  -  getkbd_adl:
  214 D1:A9EF DD 21 00 00 
              F5 -  -  -  	ld  ix,mpKeyMode
  215 D1:A9F4 ED 22 00 -  	lea hl,ix+0
  216 D1:A9F7 36 02 -  -  	ld  (hl),keyModeScanOnce
  217 D1:A9F9 AF -  -  -  	xor a
  218 D1:A9FA BE -  -  -  _:  cp  (hl)
  219 D1:A9FB 20 FD -  -  	jr  nz,-_
  220 D1:A9FD DD 7E 12 -  	ld  a,(ix+kbdG1-mpKeyRange)
  221 D1:AA00 DD 6E 1E -  	ld  l,(ix+kbdG7-mpKeyRange)
  222 D1:AA03 AD -  -  -  	xor L
  223 D1:AA04 E6 F0 -  -  	and 11110000b	;mask out lower bits to let me shove dpad bits in
  224 D1:AA06 AD -  -  -  	xor L
  225 D1:AA07 C9 -  -  -  	ret
  226 D1:AA08 -  -  -  -  
  227 D1:AA08 -  -  -  -  
  228 D1:AA08 -  -  -  -  waituntilkeyrelease:
  229 D1:AA08 CD EF A9 D1     call getkbd_adl
  230 D1:AA0C B7 -  -  -      or  a,a
  231 D1:AA0D 20 F9 -  -      jr  nz,waituntilkeyrelease
  232 D1:AA0F C9 -  -  -  	ret
  233 D1:AA10 -  -  -  -  
  234 D1:AA10 -  -  -  -  waituntilnewkeypress:
  235 D1:AA10 CD 08 AA D1     call waituntilkeyrelease
  236 D1:AA14 CD EF A9 D1 _:  call getkbd_adl
  237 D1:AA18 B7 -  -  -  	or  a,a
  238 D1:AA19 28 F9 -  -  	jr  z,-_
  239 D1:AA1B C9 -  -  -      ret
  240 D1:AA1C -  -  -  -  
  241 D1:AA1C -  -  -  -  timings_file:
  242 D1:AA1C 15 74 69 6D 
              69 6E 67 73 
              00 -  -  -  .db AppVarObj,"timings",0
  243 D1:AA25 -  -  -  -  
  244 D1:AA25 -  -  -  -  text001:
  245 D1:AA25 4C 6F 6F 6B 
              69 6E 67 20 
              75 70 20 6E 
              65 73 74 65 
              73 74 2E 2E 
              2E 0A 00 -  .db "Looking up nestest...\n",0
  246 D1:AA3C -  -  -  -  text003:
  247 D1:AA3C 46 69 6C 65 
              20 66 6F 75 
              6E 64 3A 20 
              00 -  -  -  .db "File found: ",0
  248 D1:AA49 -  -  -  -  text004:
  249 D1:AA49 52 4F 4D 46 
              69 6C 65 20 
              6C 6F 61 64 
              65 64 20 61 
              6E 64 20 72 
              65 61 64 79 
              20 74 6F 20 
              72 75 6E 2E 
              0A 00 -  -  .db "ROMFile loaded and ready to run.\n",0
  250 D1:AA6B -  -  -  -  text005:
  251 D1:AA6B -  -  -  -  ;    0123456789012345678901234567890123456789
  252 D1:AA6B 43 50 55 20 
              45 78 65 63 
              75 74 69 6F 
              6E 20 48 61 
              6C 74 65 64 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 00 -  .db "CPU Execution Halted                  ",0
  253 D1:AA92 -  -  -  -  
  254 D1:AA92 -  -  -  -  
  255 D1:AA92 07 -  -  -  .db 7
  256 D1:AA93 -  -  -  -  firstFileHeader:
  257 D1:AA93 43 45 4E 52 
              4F 4D 00 -  .db "CENROM",0
  258 D1:AA9A -  -  -  -  
  259 D1:AA9A -  -  -  -  err_:
  260 D1:AA9A -  -  -  -  
  261 D1:AA9A -  -  -  -  err_err:
  262 D1:AA9A E1 -  -  -      pop hl
  263 D1:AA9B CD 4A AF D1     call printString
  264 D1:AA9F -  -  -  -  err_err_quit:
  265 D1:AA9F CD 56 AE D1     call fastCopy
  266 D1:AAA3 00 -  -  -      nop
  267 D1:AAA4 CD 10 AA D1     call waituntilnewkeypress
  268 D1:AAA8 CD 08 AA D1     call waituntilkeyrelease
  269 D1:AAAC C3 7B A9 D1     jp programExit
  270 D1:AAB0 -  -  -  -  
  271 D1:AAB0 -  -  -  -  err_noContainersFound:
  272 D1:AAB0 CD 9A AA D1     call err_err
  273 D1:AAB4 54 72 61 76 
              65 72 73 65 
              20 66 6F 75 
              6E 64 20 6E 
              6F 20 63 61 
              6E 64 69 64 
              61 74 65 73 
              2E 0A 00 -  .db "Traverse found no candidates.\n",0
  274 D1:AAD3 -  -  -  -  
  275 D1:AAD3 -  -  -  -  err_missingFiles:
  276 D1:AAD3 F5 -  -  -      push af
  277 D1:AAD4 21 E5 AA D1         ld  hl,err_missingFiles_str
  278 D1:AAD8 CD 4A AF D1         call printString
  279 D1:AADC F1 -  -  -      pop af
  280 D1:AADD CD 90 AF D1     call printSmallNumPair
  281 D1:AAE1 C3 9F AA D1     jp err_err_quit
  282 D1:AAE5 -  -  -  -  err_missingFiles_str:
  283 D1:AAE5 4E 75 6D 62 
              65 72 20 6F 
              66 20 66 69 
              6C 65 73 20 
              6D 69 73 73 
              69 6E 67 3A 
              20 00 -  -  .db "Number of files missing: ",0
  284 D1:AAFF -  -  -  -  
  285 D1:AAFF -  -  -  -  err_tooManyFiles:
  286 D1:AAFF CD 9A AA D1     call err_err
  287 D1:AB03 54 6F 6F 20 
              6D 61 6E 79 
              20 66 69 6C 
              65 73 20 66 
              6F 75 6E 64 
              2E 00 -  -  .db "Too many files found.",0
  288 D1:AB19 -  -  -  -  
  289 D1:AB19 -  -  -  -  err_PRGROMTooLarge:
  290 D1:AB19 CD 9A AA D1     call err_err
  291 D1:AB1D 50 52 47 5F 
              52 4F 4D 20 
              74 6F 6F 20 
              6C 61 72 67 
              65 2E 00 -  .db "PRG_ROM too large.",0
  292 D1:AB30 -  -  -  -  err_CHRROMTooLarge:
  293 D1:AB30 CD 9A AA D1     call err_err
  294 D1:AB34 43 48 52 5F 
              52 4F 4D 20 
              74 6F 6F 20 
              6C 61 72 67 
              65 2E 00 -  .db "CHR_ROM too large.",0
  295 D1:AB47 -  -  -  -  
  296 D1:AB47 -  -  -  -  err_missingROMDetected:
  297 D1:AB47 CD 9A AA D1     call err_err
  298 D1:AB4B 50 52 47 2B 
              43 48 52 20 
              3E 20 41 63 
              74 75 61 6C 
              20 66 69 6C 
              65 20 64 61 
              74 61 2E 00 .db "PRG+CHR > Actual file data.",0
  299 D1:AB67 -  -  -  -  
  300 D1:AB67 -  -  -  -  err_ROMHeaderDamaged:
  301 D1:AB67 CD 9A AA D1     call err_err
  302 D1:AB6B 49 4E 45 53 
              20 52 4F 4D 
              20 68 65 61 
              64 65 72 20 
              64 61 6D 61 
              67 65 64 2E 
              00 -  -  -  .db "INES ROM header damaged.",0
  303 D1:AB84 -  -  -  -  
  304 D1:AB84 -  -  -  -  err_MapperOutOfRange:
  305 D1:AB84 CD 9A AA D1     call err_err
  306 D1:AB88 4D 61 70 70 
              65 72 20 73 
              70 65 63 69 
              66 69 65 64 
              20 6F 75 74 
              20 6F 66 20 
              72 61 6E 67 
              65 2E 00 -  .db "Mapper specified out of range.",0
  307 D1:ABA7 -  -  -  -  
  308 D1:ABA7 -  -  -  -  err_CHRROMNotFound:
  309 D1:ABA7 CD 9A AA D1     call err_err
  310 D1:ABAB 43 48 52 5F 
              52 4F 4D 20 
              6E 6F 74 20 
              66 6F 75 6E 
              64 20 69 6E 
              73 69 64 65 
              20 66 69 6C 
              65 00 -  -  .db "CHR_ROM not found inside file",0
  311 D1:ABC9 -  -  -  -  
  312 D1:ABC9 -  -  -  -  
  313 D1:ABC9 -  -  -  -  ;Input: DE = Address of first file after the container header signature
  314 D1:ABC9 -  -  -  -  ;Outputs: ROM vectors recorded and ready to map
  315 D1:ABC9 -  -  -  -  ;Destroys: All registers.
  316 D1:ABC9 -  -  -  -  loadROMFile:
  317 D1:ABC9 EB -  -  -      ex  de,hl
  318 D1:ABCA AF -  -  -      xor a,a
  319 D1:ABCB 32 08 34 D0     ld  (missing_files),a
  320 D1:ABCF BE -  -  -  _:  cp  (hl)    ;
  321 D1:ABD0 23 -  -  -      inc hl      ;
  322 D1:ABD1 20 FC -  -      jr  nz,-_   ;skips past zero-terminated string containing full ROM name
  323 D1:ABD3 22 05 34 D0     ld  (basefile_sig),hl
  324 D1:ABD7 01 10 00 00     ld  bc,SIZEOF_INTEGRITY_HASH
  325 D1:ABDB 09 -  -  -      add hl,bc
  326 D1:ABDC 7E -  -  -      ld  a,(hl)
  327 D1:ABDD FE 01 -  -      cp  a,MAXNUMFILES
  328 D1:ABDF D2 FF AA D1     jp  nc,err_tooManyFiles
  329 D1:ABE3 32 04 34 D0     ld  (inputNumFiles),a
  330 D1:ABE7 47 -  -  -      ld  b,a
  331 D1:ABE8 -  -  -  -  ;    ld  c,SIZEOF_INTEGRITY_HASH     ;c already set to this value from earlier.
  332 D1:ABE8 ED 4C -  -      mlt bc
  333 D1:ABEA 23 -  -  -      inc hl
  334 D1:ABEB E5 -  -  -      push hl
  335 D1:ABEC 09 -  -  -          add hl,bc
  336 D1:ABED FD 21 22 34 
              D0 -  -  -          ld  iy,FILETABLE
  337 D1:ABF2 4E -  -  -          ld  c,(hl)
  338 D1:ABF3 23 -  -  -          inc hl
  339 D1:ABF4 46 -  -  -          ld  b,(hl)
  340 D1:ABF5 23 -  -  -          inc hl
  341 D1:ABF6 52 FD 0F 00         ld.s (iy+FILE_SIZE_OFFSET),bc
  342 D1:ABFA FD 2F 02 -          ld  (iy+FILE_ADR_OFFSET),hl
  343 D1:ABFD E1 -  -  -      pop hl
  344 D1:ABFE 3C -  -  -      inc a
  345 D1:ABFF 3D -  -  -      dec a
  346 D1:AC00 28 47 -  -      jr  z,loadROMFile_singleFileLoad
  347 D1:AC02 -  -  -  -      ;If more than one file, fill FILETABLE.
  348 D1:AC02 -  -  -  -      ;NOTE: For now, this machinery is disabled. Only a single file is allowed.
  349 D1:AC02 ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  350 D1:AC05 47 -  -  -      ld  b,a
  351 D1:AC06 -  -  -  -  loadROMFile_multiFileLoadLoop:
  352 D1:AC06 C5 -  -  -      push bc
  353 D1:AC07 FD 2F 05 -          ld  (iy+FILE_SIG_ADR_OFFSET),hl
  354 D1:AC0A 01 10 00 00         ld  bc,16
  355 D1:AC0E 11 EA AD D1         ld  de,loadROMFile_tempSigHash
  356 D1:AC12 ED B0 -  -          ldir
  357 D1:AC14 E5 -  -  -          push hl
  358 D1:AC15 FD E5 -  -              push iy
  359 D1:AC17 01 17 00 00                 ld  bc,23
  360 D1:AC1B FD 21 E3 AD 
              D1 -  -  -                  ld  iy,loadROMFile_tempSig
  361 D1:AC20 CD FA AD D1                 call vatTraverse    ;returns DE @ datasection size if found
  362 D1:AC24 30 05 -  -                  jr  nc,+_
  363 D1:AC26 21 08 34 D0                 ld  hl,missing_files
  364 D1:AC2A 34 -  -  -                  inc (hl)
  365 D1:AC2B FD E1 -  -  _:          pop iy
  366 D1:AC2D EB -  -  -              ex  de,hl
  367 D1:AC2E 5E -  -  -              ld  e,(hl)
  368 D1:AC2F 23 -  -  -              inc hl
  369 D1:AC30 56 -  -  -              ld  d,(hl)
  370 D1:AC31 23 -  -  -              inc hl
  371 D1:AC32 52 FD 1F 00             ld.s (iy+FILE_SIZE_OFFSET),de
  372 D1:AC36 FD 2F 02 -              ld  (iy+FILE_ADR_OFFSET),hl
  373 D1:AC39 E1 -  -  -          pop hl
  374 D1:AC3A C1 -  -  -      pop bc
  375 D1:AC3B ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  376 D1:AC3E 10 C6 -  -      djnz loadROMFile_multiFileLoadLoop
  377 D1:AC40 3A 08 34 D0     ld  a,(missing_files)
  378 D1:AC44 B7 -  -  -      or  a,a
  379 D1:AC45 C2 D3 AA D1     jp  nz,err_missingFiles
  380 D1:AC49 -  -  -  -  loadROMFile_singleFileLoad:
  381 D1:AC49 -  -  -  -      ;Compute size of ROM by summing filesizes, less INES header
  382 D1:AC49 3A 04 34 D0     ld  a,(inputNumFiles)
  383 D1:AC4D 3C -  -  -      inc a
  384 D1:AC4E 47 -  -  -      ld  b,a
  385 D1:AC4F 21 00 00 00     ld  hl,0
  386 D1:AC53 DD 21 22 34 
              D0 -  -  -      ld  ix,FILETABLE
  387 D1:AC58 52 DD 17 00 _:  ld.s de,(ix+FILE_SIZE_OFFSET)
  388 D1:AC5C 19 -  -  -      add hl,de
  389 D1:AC5D ED 32 08 -      lea ix,ix+FILETABLE_STRIDE
  390 D1:AC60 10 F6 -  -      djnz -_
  391 D1:AC62 01 F0 FF FF     ld  bc,-16
  392 D1:AC66 09 -  -  -      add hl,bc   ;subtract INES header
  393 D1:AC67 22 09 34 D0     ld  (total_rom_size),hl
  394 D1:AC6B -  -  -  -      ;Verify that the file actually contains an INES header.
  395 D1:AC6B -  -  -  -      ;TODO: Do this at an earlier stage. Such as file selection.
  396 D1:AC6B DD 2A 24 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  397 D1:AC70 DD 27 00 -      ld  hl,(ix+0)
  398 D1:AC73 11 4E 45 53     ld  de,$53454E         ;4E 45 53 == "NES"
  399 D1:AC77 B7 -  -  -      or  a,a
  400 D1:AC78 ED 52 -  -      sbc hl,de   ;Note: add does not affect zero flag. Can't test this via -DE
  401 D1:AC7A C2 67 AB D1 _:  jp  nz,err_ROMHeaderDamaged
  402 D1:AC7E DD 7E 03 -      ld  a,(ix+3)
  403 D1:AC81 FE 1A -  -      cp  a,$1A
  404 D1:AC83 20 F5 -  -      jr  nz,-_   ;19
  405 D1:AC85 -  -  -  -      ;Compute ROM size by reading INES header. This should be equ or lt above.
  406 D1:AC85 -  -  -  -      ;Note: The below line is optimized from...
  407 D1:AC85 DD 2A 24 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  408 D1:AC8A -  -  -  -      ;... these lines. But the intent might not be perfectly clear. We'll keep
  409 D1:AC8A -  -  -  -      ;these here just in case there's ever a question about it.
  410 D1:AC8A -  -  -  -  ;    ld  ix,FILETABLE
  411 D1:AC8A -  -  -  -  ;    ld  ix,(ix+FILE_ADR_OFFSET)
  412 D1:AC8A DD 6E 04 -      ld  L,(ix+4)    ;PRG ROM count, low
  413 D1:AC8D DD 5E 05 -      ld  e,(ix+5)    ;CHR ROM count, low
  414 D1:AC90 26 00 -  -      ld  h,0
  415 D1:AC92 54 -  -  -      ld  d,h
  416 D1:AC93 DD 7E 07 -      ld  a,(ix+7)    ;Check for INES2 bits
  417 D1:AC96 E6 0C -  -      and a,%00001100
  418 D1:AC98 FE 08 -  -      cp  a,%00001000
  419 D1:AC9A 20 1B -  -      jr  nz,+_
  420 D1:AC9C DD 7E 09 -      ld  a,(ix+9)
  421 D1:AC9F 47 -  -  -      ld  b,a
  422 D1:ACA0 E6 0F -  -      and a,$0F
  423 D1:ACA2 FE 02 -  -      cp  a,MAXPRGROM_HINIB+1
  424 D1:ACA4 D2 19 AB D1     jp  nc,err_PRGROMTooLarge
  425 D1:ACA8 67 -  -  -      ld  h,a
  426 D1:ACA9 78 -  -  -      ld  a,b
  427 D1:ACAA E6 F0 -  -      and a,$F0
  428 D1:ACAC 07 -  -  -      rlca
  429 D1:ACAD 07 -  -  -      rlca
  430 D1:ACAE 07 -  -  -      rlca
  431 D1:ACAF 07 -  -  -      rlca
  432 D1:ACB0 FE 04 -  -      cp  a,MAXCHRROM_HINIB+1
  433 D1:ACB2 D2 30 AB D1     jp  nc,err_CHRROMTooLarge
  434 D1:ACB6 57 -  -  -      ld  d,a
  435 D1:ACB7 AF -  -  -  _:  xor a,a
  436 D1:ACB8 32 0C 34 D0     ld  (prg_rom_size),a
  437 D1:ACBC 32 0F 34 D0     ld  (chr_rom_size),a
  438 D1:ACC0 29 -  -  -      add hl,hl   ;x2
  439 D1:ACC1 29 -  -  -      add hl,hl   ;x4
  440 D1:ACC2 29 -  -  -      add hl,hl   ;x8
  441 D1:ACC3 29 -  -  -      add hl,hl   ;x16
  442 D1:ACC4 29 -  -  -      add hl,hl   ;x32
  443 D1:ACC5 29 -  -  -      add hl,hl   ;x64
  444 D1:ACC6 52 22 0D 34 
              D0 -  -  -      ld.s (prg_rom_size+1),hl    ;x64x256
  445 D1:ACCB EB -  -  -      ex  de,hl
  446 D1:ACCC 29 -  -  -      add hl,hl   ;x2
  447 D1:ACCD 29 -  -  -      add hl,hl   ;x4
  448 D1:ACCE 29 -  -  -      add hl,hl   ;x8
  449 D1:ACCF 29 -  -  -      add hl,hl   ;x16
  450 D1:ACD0 29 -  -  -      add hl,hl   ;x32
  451 D1:ACD1 52 22 10 34 
              D0 -  -  -      ld.s (chr_rom_size+1),hl    ;x32x256
  452 D1:ACD6 2A 0F 34 D0     ld  hl,(chr_rom_size)
  453 D1:ACDA ED 5B 0C 34 
              D0 -  -  -      ld  de,(prg_rom_size)
  454 D1:ACDF 19 -  -  -      add hl,de
  455 D1:ACE0 ED 5B 09 34 
              D0 -  -  -      ld  de,(total_rom_size)
  456 D1:ACE5 B7 -  -  -      or  a,a
  457 D1:ACE6 ED 52 -  -      sbc hl,de   ;declared-actual. declared must be equal to or smaller.
  458 D1:ACE8 28 04 -  -      jr  z,+_
  459 D1:ACEA D2 47 AB D1     jp  nc,err_missingROMDetected
  460 D1:ACEE -  -  -  -  _:  ;Find trainer, PRG, and CHR base addresses
  461 D1:ACEE ED 22 10 -      lea hl,ix+16
  462 D1:ACF1 22 18 34 D0     ld  (trainer_base),hl   ;whether it exists or not.
  463 D1:ACF5 11 00 00 00     ld  de,0
  464 D1:ACF9 DD CB 06 56     bit 2,(ix+6)
  465 D1:ACFD 28 04 -  -      jr  z,+_
  466 D1:ACFF 11 00 02 00     ld  de,512
  467 D1:AD03 19 -  -  -  _:  add hl,de
  468 D1:AD04 22 18 34 D0     ld  (prg_rom_base),hl
  469 D1:AD08 FD 21 22 34 
              D0 -  -  -      ld  iy,FILETABLE
  470 D1:AD0D 52 FD 27 00     ld.s hl,(iy+FILE_SIZE_OFFSET)
  471 D1:AD11 B7 -  -  -      or  a,a
  472 D1:AD12 ED 52 -  -      sbc hl,de   ;less possible trainer
  473 D1:AD14 11 10 00 00     ld  de,16
  474 D1:AD18 ED 52 -  -      sbc hl,de   ;less iNES header. Remaining is now size of current file.
  475 D1:AD1A EB -  -  -      ex  de,hl   ;curfilesize is now in DE
  476 D1:AD1B 2A 0C 34 D0     ld  hl,(prg_rom_size)   ;keep subtracting filesize from this until carry.
  477 D1:AD1F B7 -  -  -      or  a,a
  478 D1:AD20 ED 52 -  -      sbc hl,de   ;if carry, prg_rom end is inside this file. Undo: HL is offset.
  479 D1:AD22 0E 00 -  -      ld  c,0     ;0th file current
  480 D1:AD24 38 1D -  -      jr  c,loadROMFile_locatedCHRROM
  481 D1:AD26 3A 04 34 D0     ld  a,(inputNumFiles)
  482 D1:AD2A B7 -  -  -      or  a,a
  483 D1:AD2B 28 12 -  -      jr  z,loadROMFile_noCHRROMFound
  484 D1:AD2D 47 -  -  -      ld  b,a
  485 D1:AD2E ED 33 08 -  _:  lea iy,iy+FILETABLE_STRIDE
  486 D1:AD31 52 ED 5B 00 
              00 00 -  -      ld.s de,(FILE_SIZE_OFFSET)
  487 D1:AD37 0C -  -  -      inc c
  488 D1:AD38 B7 -  -  -      or  a,a
  489 D1:AD39 ED 52 -  -      sbc hl,de   ;
  490 D1:AD3B 38 06 -  -      jr  c,loadROMFile_locatedCHRROM
  491 D1:AD3D 10 EF -  -      djnz -_
  492 D1:AD3F -  -  -  -  loadROMFile_noCHRROMFound:
  493 D1:AD3F C3 A7 AB D1     jp  err_CHRROMNotFound
  494 D1:AD43 -  -  -  -  loadROMFile_locatedCHRROM:
  495 D1:AD43 19 -  -  -      add hl,de       ;Undid subtract. HL is now offset in current file
  496 D1:AD44 FD 17 02 -      ld  de,(iy+FILE_ADR_OFFSET) ;so get address inside that file.
  497 D1:AD47 19 -  -  -      add hl,de
  498 D1:AD48 79 -  -  -      ld  a,c
  499 D1:AD49 22 1B 34 D0     ld  (chr_rom_base),hl
  500 D1:AD4D 32 1E 34 D0     ld  (chr_rom_base_file),a
  501 D1:AD51 -  -  -  -      ;Detect mapper and run its initializer
  502 D1:AD51 DD 7E 06 -      ld  a,(ix+6)
  503 D1:AD54 DD 46 07 -      ld  b,(ix+7)
  504 D1:AD57 07 -  -  -      rlca
  505 D1:AD58 07 -  -  -      rlca
  506 D1:AD59 07 -  -  -      rlca
  507 D1:AD5A 07 -  -  -      rlca
  508 D1:AD5B A8 -  -  -      xor a,b
  509 D1:AD5C E6 0F -  -      and a,$0F
  510 D1:AD5E A8 -  -  -      xor a,b
  511 D1:AD5F 52 EB -  -      ex.s de,hl  ;clears HLU,DEU
  512 D1:AD61 5F -  -  -      ld  e,a
  513 D1:AD62 21 12 34 D0     ld  hl,submapper
  514 D1:AD66 36 00 -  -      ld  (hl),0
  515 D1:AD68 78 -  -  -      ld  a,b
  516 D1:AD69 E6 0C -  -      and a,%00001100
  517 D1:AD6B FE 08 -  -      cp  a,%00001000
  518 D1:AD6D 3E 00 -  -      ld  a,0
  519 D1:AD6F 20 0E -  -      jr  nz,+_
  520 D1:AD71 DD 46 08 -      ld  b,(ix+8)
  521 D1:AD74 78 -  -  -      ld  a,b
  522 D1:AD75 07 -  -  -      rlca
  523 D1:AD76 07 -  -  -      rlca
  524 D1:AD77 07 -  -  -      rlca
  525 D1:AD78 07 -  -  -      rlca
  526 D1:AD79 E6 0F -  -      and a,$0F
  527 D1:AD7B 77 -  -  -      ld  (hl),a
  528 D1:AD7C 78 -  -  -      ld  a,b
  529 D1:AD7D E6 0F -  -      and a,$0F
  530 D1:AD7F 57 -  -  -  _:  ld  d,a
  531 D1:AD80 ED 53 14 34 
              D0 -  -  -      ld  (mapper_id),de
  532 D1:AD85 21 FF FF FF     ld  hl,-NUMBER_OF_MAPPERS
  533 D1:AD89 19 -  -  -      add hl,de
  534 D1:AD8A DA 84 AB D1     jp  c,err_MapperOutOfRange
  535 D1:AD8E ED 62 -  -      sbc hl,hl
  536 D1:AD90 19 -  -  -      add hl,de               ;hl=de. both are mapper IDs
  537 D1:AD91 2E 09 -  -      ld  L,MAPPER_STRIDE
  538 D1:AD93 55 -  -  -      ld  d,L
  539 D1:AD94 ED 6C -  -      mlt hl                  ;high byte multiply
  540 D1:AD96 65 -  -  -      ld  h,L
  541 D1:AD97 2E 00 -  -      ld  L,0
  542 D1:AD99 ED 5C -  -      mlt de                  ;low byte multiply
  543 D1:AD9B 19 -  -  -      add hl,de               ;This is the best 16bit * 8bit I know to do.
  544 D1:AD9C 11 A8 AD D1     ld  de,mapper_table
  545 D1:ADA0 19 -  -  -      add hl,de
  546 D1:ADA1 22 15 34 D0     ld  (mapper_adr_base),hl
  547 D1:ADA5 ED 27 -  -      ld  hl,(hl)
  548 D1:ADA7 E9 -  -  -      jp  (hl)
  549 D1:ADA8 -  -  -  -  
  550 D1:ADA8 -  -  -  -  mapper_table:   ;entries 9 wide
  551 D1:ADA8 B1 AD D1 -  .dl mapper0_init
  552 D1:ADAB DF AD D1 -  .dl mapper0_read
  553 D1:ADAE E1 AD D1 -  .dl mapper0_write
  554 D1:ADB1 -  -  -  -  
  555 D1:ADB1 -  -  -  -  mapper0_init:
  556 D1:ADB1 -  -  -  -      ;map trainer, if exist
  557 D1:ADB1 DD CB 06 56     bit 2,(ix+6)
  558 D1:ADB5 28 0D -  -      jr  z,+_
  559 D1:ADB7 2A 18 34 D0     ld  hl,(trainer_base)
  560 D1:ADBB 1E 70 -  -      ld  e,$70
  561 D1:ADBD 0E 02 -  -      ld  c,2
  562 D1:ADBF 41 -  -  -      ld  b,c
  563 D1:ADC0 CD 10 B6 D1     call i6502_map_pages
  564 D1:ADC4 2A 0C 34 D0 _:  ld  hl,(prg_rom_size)
  565 D1:ADC8 11 FF BF FF     ld  de,-(16384+1)
  566 D1:ADCC 19 -  -  -      add hl,de   ;carry if more than 1 16KB segment
  567 D1:ADCD 2A 18 34 D0     ld  hl,(prg_rom_base)
  568 D1:ADD1 -  -  -  -      ;jr  $
  569 D1:ADD1 06 80 -  -      ld  b,$80
  570 D1:ADD3 58 -  -  -      ld  e,b
  571 D1:ADD4 0E 40 -  -      ld  c,$40
  572 D1:ADD6 30 02 -  -      jr  nc,+_
  573 D1:ADD8 CB 21 -  -      sla c
  574 D1:ADDA CD 10 B6 D1 _:  call i6502_map_pages
  575 D1:ADDE C9 -  -  -      ret
  576 D1:ADDF -  -  -  -  
  577 D1:ADDF -  -  -  -  
  578 D1:ADDF -  -  -  -  mapper0_read:
  579 D1:ADDF 7E -  -  -      ld  a,(hl)
  580 D1:ADE0 C9 -  -  -      ret
  581 D1:ADE1 -  -  -  -  mapper0_write:
  582 D1:ADE1 70 -  -  -      ld  (hl),b
  583 D1:ADE2 C9 -  -  -      ret
  584 D1:ADE3 -  -  -  -  
  585 D1:ADE3 -  -  -  -  
  586 D1:ADE3 -  -  -  -  
  587 D1:ADE3 -  -  -  -  
  588 D1:ADE3 -  -  -  -  
  589 D1:ADE3 -  -  -  -  loadROMFile_tempSig:    ;total 23 bytes
  590 D1:ADE3 43 45 4E 52 
              4F 32 00 -  .db "CENRO2",0
  591 D1:ADEA -  -  -  -  loadROMFile_tempSigHash:
  592 D1:ADEA 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;16 bytes for hash
  593 D1:ADFA -  -  -  -  
  594 D1:ADFA -  -  -  -  
  595 D1:ADFA -  -  -  -  ;Input: IY = locationOfSignature. 
  596 D1:ADFA -  -  -  -  ;       BC=size of signature (long load to clear BCU), still limited to 255.
  597 D1:ADFA -  -  -  -  ;Output: carry=1: Variable not found.
  598 D1:ADFA -  -  -  -  ;Output: carry=0: DE=address of variable data start after the signature
  599 D1:ADFA -  -  -  -  ;        IX=location of current variable's VAT location.
  600 D1:ADFA -  -  -  -  ;Destroys: All registers not in use.
  601 D1:ADFA -  -  -  -  ;NOTES: This routine is capable of resuming a search that has ended.
  602 D1:ADFA -  -  -  -  
  603 D1:ADFA -  -  -  -  ;To continue searching:
  604 D1:ADFA -  -  -  -  ;call vatTraverse_continue with the following inputs:
  605 D1:ADFA -  -  -  -  ;   IX preserved from a non-carry return of vatTraverse.
  606 D1:ADFA -  -  -  -  ;   BC = same as input for vatTraverse. vatTraverse does not destroy this reg.
  607 D1:ADFA -  -  -  -  ;   WARNING: DO NOT KEEP SEARCHING AFTER CALL RETURNS CARRY. START A NEW SEARCH.
  608 D1:ADFA -  -  -  -  vatTraverse:
  609 D1:ADFA -  -  -  -      ;progPtr = progvat start; ptemp = progvatend
  610 D1:ADFA DD 2A 9D 25 
              D0 -  -  -      ld  ix,(progPtr)
  611 D1:ADFF -  -  -  -  vatTraverse_loop:
  612 D1:ADFF 2A 9A 25 D0     ld  hl,(pTemp)
  613 D1:AE03 ED 12 00 -      lea de,ix+0
  614 D1:AE06 B7 -  -  -      or  a,a
  615 D1:AE07 ED 52 -  -      sbc hl,de   ;HL<DE while in pVAT, else carry set.
  616 D1:AE09 3F -  -  -      ccf
  617 D1:AE0A D8 -  -  -      ret c
  618 D1:AE0B 1A -  -  -      ld  a,(de)
  619 D1:AE0C E6 1F -  -      and a,$1F
  620 D1:AE0E FE 15 -  -      cp  a,AppVarObj
  621 D1:AE10 20 34 -  -      jr  nz,vatTraverse_skip
  622 D1:AE12 DD 17 F9 -      ld  de,(ix-7)   ;puts "page" byte in DEU
  623 D1:AE15 DD 5E FD -      ld  e,(ix-3)
  624 D1:AE18 DD 56 FC -      ld  d,(ix-4)
  625 D1:AE1B CD 98 1F 02     call _ChkInRam
  626 D1:AE1F EB -  -  -      ex  de,hl
  627 D1:AE20 30 08 -  -      jr  nc,+_
  628 D1:AE22 11 09 00 00     ld  de,9
  629 D1:AE26 19 -  -  -      add hl,de
  630 D1:AE27 5E -  -  -      ld  e,(hl)
  631 D1:AE28 19 -  -  -      add hl,de
  632 D1:AE29 23 -  -  -      inc hl
  633 D1:AE2A 5E -  -  -  _:  ld  e,(hl)
  634 D1:AE2B 23 -  -  -      inc hl
  635 D1:AE2C 56 -  -  -      ld  d,(hl)
  636 D1:AE2D 23 -  -  -      inc hl
  637 D1:AE2E EB -  -  -      ex  de,hl
  638 D1:AE2F B7 -  -  -      or  a,a
  639 D1:AE30 ED 42 -  -      sbc hl,bc   ;varsize-entrysize. If carry, entry cannot possibly be in var.
  640 D1:AE32 38 12 -  -      jr  c,vatTraverse_skip
  641 D1:AE34 ED 23 00 -      lea hl,iy+0
  642 D1:AE37 C5 -  -  -      push bc
  643 D1:AE38 1A -  -  -  _:      ld  a,(de)
  644 D1:AE39 13 -  -  -          inc de
  645 D1:AE3A ED A1 -  -          cpi
  646 D1:AE3C 20 07 -  -          jr  nz,vatTraverse_sigNoMatch
  647 D1:AE3E EA 38 AE D1         jp  pe,-_
  648 D1:AE42 C1 -  -  -      pop bc
  649 D1:AE43 B7 -  -  -      or  a,a
  650 D1:AE44 C9 -  -  -      ret         ;NC. DE = past the signature.
  651 D1:AE45 -  -  -  -  vatTraverse_sigNoMatch:
  652 D1:AE45 C1 -  -  -      pop bc
  653 D1:AE46 -  -  -  -  vatTraverse_continue:
  654 D1:AE46 -  -  -  -  vatTraverse_skip:
  655 D1:AE46 3E 07 -  -      ld  a,7
  656 D1:AE48 11 FF FF FF     ld  de,-1
  657 D1:AE4C DD 86 FA -      add a,(ix-6)
  658 D1:AE4F ED 44 -  -      neg
  659 D1:AE51 5F -  -  -      ld  e,a
  660 D1:AE52 DD 19 -  -      add ix,de   ;because "sbc ix,de" isn't a thing. Boo.
  661 D1:AE54 18 A9 -  -      jr  vatTraverse_loop
  662 D1:AE56 -  -  -  -  
  663 D1:AE56 -  -  -  -  
  664 D1:AE56 -  -  -  -  
  665 D1:AE56 -  -  -  -  #include "lcd.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    1 D1:AE56 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 D1:AE56 -  -  -  -  ;TI-84 Plus CE Include File
    2 D1:AE56 -  -  -  -  
    3 D1:AE56 -  -  -  -  ;Various Parts Contributed by
    4 D1:AE56 -  -  -  -  ;- BrandonW
    5 D1:AE56 -  -  -  -  ;- calc84
    6 D1:AE56 -  -  -  -  ;- MateoConLechuga
    7 D1:AE56 -  -  -  -  ;- Runer112
    8 D1:AE56 -  -  -  -  ;- tr1p1ea
    9 D1:AE56 -  -  -  -  ;- Kerm Martian
   10 D1:AE56 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    2 D1:AE56 -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
    5 D1:AE56 -  -  -  -  ;
    6 D1:AE56 -  -  -  -  ;
    7 D1:AE56 -  -  -  -  ;
    8 D1:AE56 -  -  -  -  
    9 D1:AE56 -  -  -  -  DEBUG_PRINT_START_CYCLE .equ 26485
   10 D1:AE56 -  -  -  -  DEBUG_STEP_START_CYCLE  .equ 26485
   11 D1:AE56 -  -  -  -  
   12 D1:AE56 -  -  -  -  
   13 D1:AE56 -  -  -  -  
   14 D1:AE56 -  -  -  -  FONTFGCOLOR .EQU $FF
   15 D1:AE56 -  -  -  -  FONTBGCOLOR .EQU $00
   16 D1:AE56 -  -  -  -  
   17 D1:AE56 -  -  -  -  screenBuf1      .equ vRam
   18 D1:AE56 -  -  -  -  screenBuf2      .equ vRam+(320*240)
   19 D1:AE56 -  -  -  -  ;DO NOT MOVE THESE.
   20 D1:AE56 -  -  -  -  xPos                .equ $D031F6
   21 D1:AE56 -  -  -  -  yPos                .equ $D031F7
   22 D1:AE56 -  -  -  -  slopPos             .equ $D031F8        ;extra byte here
   23 D1:AE56 -  -  -  -  debugram            .equ $D031F9        ;FA and FB occupied too.
   24 D1:AE56 -  -  -  -  save_spl            .equ $D031FC        ;FD and FE occupied too.
   25 D1:AE56 -  -  -  -  save_mbase          .equ $D031FF        ;
   26 D1:AE56 -  -  -  -  core_memory_ix      .equ $D03280        ;occupies D03200 to D032FF
   27 D1:AE56 -  -  -  -  scrap_mapping       .equ $D03300        ;256 bytes. maps to nowhere important.
   28 D1:AE56 -  -  -  -  saferam1            .equ $D03400        ;1024 bytes available. Define later.
   29 D1:AE56 -  -  -  -  main_ram            .equ $D03800        ;$0800 bytes of main system memory
   30 D1:AE56 -  -  -  -  
   31 D1:AE56 -  -  -  -  ZEROPAGE            .equ main_ram+(0*256)
   32 D1:AE56 -  -  -  -  STACKBASE           .equ main_ram+(1*256)
   33 D1:AE56 -  -  -  -  
   34 D1:AE56 -  -  -  -  BASETABLE           .equ $D04000        ;variable size. 256*BASETABLE_STRIDE
   35 D1:AE56 -  -  -  -  BASETABLE_STRIDE    .equ 8
   36 D1:AE56 -  -  -  -  PAGETABLE_OFFSET    .equ 0
   37 D1:AE56 -  -  -  -  PAGETABLE           .equ BASETABLE+PAGETABLE_OFFSET
   38 D1:AE56 -  -  -  -  JUMPTABLE_OFFSET    .equ 4
   39 D1:AE56 -  -  -  -  JUMPTABLE           .equ BASETABLE+JUMPTABLE_OFFSET
   40 D1:AE56 -  -  -  -  
   41 D1:AE56 -  -  -  -  NAMETABLE1          .equ BASETABLE+(512*BASETABLE_STRIDE)
   42 D1:AE56 -  -  -  -  NAMETABLE2          .equ NAMETABLE1 + 1024
   43 D1:AE56 -  -  -  -  
   44 D1:AE56 -  -  -  -  ;saferam1 1024 bytes storage
   45 D1:AE56 -  -  -  -  ;
   46 D1:AE56 -  -  -  -  curScreenBuf        .equ saferam1           ;3b
   47 D1:AE56 -  -  -  -  linestart           .equ curScreenBuf+3     ;1b
   48 D1:AE56 -  -  -  -  inputNumFiles       .equ linestart+1        ;1b
   49 D1:AE56 -  -  -  -  basefile_sig        .equ inputNumFiles+1    ;3b pointer to 16b hash
   50 D1:AE56 -  -  -  -  missing_files       .equ basefile_sig+3     ;1b
   51 D1:AE56 -  -  -  -  total_rom_size      .equ missing_files+1    ;3b
   52 D1:AE56 -  -  -  -  prg_rom_size        .equ total_rom_size+3   ;3b
   53 D1:AE56 -  -  -  -  chr_rom_size        .equ prg_rom_size+3     ;3b
   54 D1:AE56 -  -  -  -  submapper           .equ chr_rom_size+3     ;1b. iNES2 thing. Not often used.
   55 D1:AE56 -  -  -  -  ines_flag_6         .equ submapper+1        ;1b. Flags that a mapper may need.
   56 D1:AE56 -  -  -  -  mapper_id           .equ ines_flag_6+1      ;3b. Convenience load for 12 bits
   57 D1:AE56 -  -  -  -  mapper_adr_base     .equ mapper_id+1        ;3b. Used to load mapper
   58 D1:AE56 -  -  -  -  trainer_base        .equ mapper_adr_base+3  ;3b. If exist, starts here
   59 D1:AE56 -  -  -  -  prg_rom_base        .equ mapper_adr_base+3  ;3b. Adjusted in case of trainer.
   60 D1:AE56 -  -  -  -  chr_rom_base        .equ prg_rom_base+3     ;3b. Located somewhere.
   61 D1:AE56 -  -  -  -  chr_rom_base_file   .equ chr_rom_base+3     ;1b. Nonzero if not in first file.
   62 D1:AE56 -  -  -  -  timings_base        .equ chr_rom_base_file+1    ;3b. Current pointer to timings
   63 D1:AE56 -  -  -  -  
   64 D1:AE56 -  -  -  -  SIZEOF_INTEGRITY_HASH    .equ 16
   65 D1:AE56 -  -  -  -  MAXPRGROM_HINIB     .equ 1
   66 D1:AE56 -  -  -  -  MAXCHRROM_HINIB     .equ 3
   67 D1:AE56 -  -  -  -  NUMBER_OF_MAPPERS   .equ 1
   68 D1:AE56 -  -  -  -  MAPPER_STRIDE       .equ 9
   69 D1:AE56 -  -  -  -  
   70 D1:AE56 -  -  -  -  MAXNUMFILES         .equ 1                  ;set to 32 later. that's like 1.5MB
   71 D1:AE56 -  -  -  -  FILETABLE_STRIDE    .equ 8
   72 D1:AE56 -  -  -  -  FILETABLE           .equ timings_base+3   ;(MAXNUMFILES*FILETABLE_STRIDE)b
   73 D1:AE56 -  -  -  -  FILE_SIZE_OFFSET    .equ 0
   74 D1:AE56 -  -  -  -  FILE_ADR_OFFSET     .equ 2
   75 D1:AE56 -  -  -  -  FILE_SIG_ADR_OFFSET .equ 5
   76 D1:AE56 -  -  -  -  
   77 D1:AE56 -  -  -  -  
   78 D1:AE56 -  -  -  -  ;
   79 D1:AE56 -  -  -  -  ;
   80 D1:AE56 -  -  -  -  
   81 D1:AE56 -  -  -  -  ;Undefine this to speed up core process by losing debug state
   82 D1:AE56 -  -  -  -  #define COREDEBUG
   83 D1:AE56 -  -  -  -  
   84 D1:AE56 -  -  -  -  ;core memory
   85 D1:AE56 -  -  -  -  #define REGA 0
   86 D1:AE56 -  -  -  -  #define REGX 1
   87 D1:AE56 -  -  -  -  #define REGY 2
   88 D1:AE56 -  -  -  -  #define REGSP 3
   89 D1:AE56 -  -  -  -  #define REGSR 4
   90 D1:AE56 -  -  -  -  #define REGPC 5
   91 D1:AE56 -  -  -  -  #define CYCLES_REMAIN 8
   92 D1:AE56 -  -  -  -  #define CYCLES_CURRENT 11
   93 D1:AE56 -  -  -  -  #define CURRENT_OPCODES 14
   94 D1:AE56 -  -  -  -  #define CORE_STACK_BASE 17
   95 D1:AE56 -  -  -  -  #define CORE_ERROR_LEVEL 20
   96 D1:AE56 -  -  -  -  ;flag IDs
   97 D1:AE56 -  -  -  -  #define SF_NEG 7
   98 D1:AE56 -  -  -  -  #define SF_OVER 6 
   99 D1:AE56 -  -  -  -  #define SF_RESERVED 5 
  100 D1:AE56 -  -  -  -  #define SF_BRK 4
  101 D1:AE56 -  -  -  -  #define SF_DEC 3
  102 D1:AE56 -  -  -  -  #define SF_INT 2
  103 D1:AE56 -  -  -  -  #define SF_ZERO 1
  104 D1:AE56 -  -  -  -  #define SF_CARRY 0
  105 D1:AE56 -  -  -  -  
  106 D1:AE56 -  -  -  -  #macro ADDCYC(X)
  107 D1:AE56                 #if (x < 1)
  108 D1:AE56                     nop
  109 D1:AE56                 #elif (X = 1)
  110 D1:AE56                     inc iy
  111 D1:AE56                 #else
  112 D1:AE56                     lea iy,iy+X
  113 D1:AE56                 #endif
  114 D1:AE56             #endmacro
  115 D1:AE56 -  -  -  -  
  116 D1:AE56 -  -  -  -  ;
  117 D1:AE56 -  -  -  -  ;
  118 D1:AE56 -  -  -  -  ;
  119 D1:AE56 -  -  -  -  #endif
  120 D1:AE56 -  -  -  -  .list
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    3 D1:AE56 -  -  -  -  
    4 D1:AE56 -  -  -  -  ;Function list:
    5 D1:AE56 -  -  -  -  ; fastCopy - Swaps drawing buffer to display what is currently written there.
    6 D1:AE56 -  -  -  -  ; startGfx - Configures LCD to run in graphx mode. UNSAFE TO RUN MORE THAN ONCE
    7 D1:AE56 -  -  -  -  ; stopGfx - Restores LCD configuration to TI-OS default.
    8 D1:AE56 -  -  -  -  ; configureScreen - Swaps screen configuration betwen current and stored.
    9 D1:AE56 -  -  -  -  ; setDefaultPalette - Sets default (XLIBC) color palette.
   10 D1:AE56 -  -  -  -  ; clearTextBuf - no inputs. Sets text buffer to all spaces.
   11 D1:AE56 -  -  -  -  ; printTextBuf - no inputs. Mirrors buffer to screen.
   12 D1:AE56 -  -  -  -  ; setLineStart - A=xpos. Set xPos and linestart
   13 D1:AE56 -  -  -  -  ; setCurLine - A=ypos. Set yPos.
   14 D1:AE56 -  -  -  -  ; newLine - no inputs. sets linestart = xPos, increments yPos
   15 D1:AE56 -  -  -  -  ; newPage - no inputs. sets linestart = xPos, yPos = 0
   16 D1:AE56 -  -  -  -  ; printString - HL=address to string. destroys all.
   17 D1:AE56 -  -  -  -  ; printBigFont - A=ASCII char to print at xPos,yPos. Advances xPos by 1.
   18 D1:AE56 -  -  -  -  ; printSmallNumPair - A=0-255 to print at xPos,Ypos. Advances xPos by 1.
   19 D1:AE56 -  -  -  -  ; calculateScreenPtr - Converts xPos,yPos into HL= screen buffer address.
   20 D1:AE56 -  -  -  -  ; calculateScreenPtrDE - Converts E=xPos,D=yPos into HL= screen buffer address.
   21 D1:AE56 -  -  -  -  ;
   22 D1:AE56 -  -  -  -  ;
   23 D1:AE56 -  -  -  -  ;
   24 D1:AE56 -  -  -  -  ;
   25 D1:AE56 -  -  -  -  ;
   26 D1:AE56 -  -  -  -  ;
   27 D1:AE56 -  -  -  -  ;
   28 D1:AE56 -  -  -  -  
   29 D1:AE56 -  -  -  -  
   30 D1:AE56 -  -  -  -  
   31 D1:AE56 -  -  -  -  
   32 D1:AE56 -  -  -  -  ;-----------------------------------------------------------------------------
   33 D1:AE56 -  -  -  -  ;Screen hardware interface stuff
   34 D1:AE56 -  -  -  -  
   35 D1:AE56 -  -  -  -  ;It ought to be called "bufSwap" but I just can't. I won't.
   36 D1:AE56 -  -  -  -  fastCopy:
   37 D1:AE56 11 00 00 D4     ld  de,screenBuf1
   38 D1:AE5A 2A 10 00 E3     ld  hl,(mpLcdBase)
   39 D1:AE5E 22 00 34 D0     ld  (curScreenBuf),hl
   40 D1:AE62 B7 -  -  -      or  a,a
   41 D1:AE63 ED 52 -  -      sbc hl,de
   42 D1:AE65 EB -  -  -      ex  de,hl
   43 D1:AE66 20 04 -  -      jr  nz,+_
   44 D1:AE68 21 00 2C D5     ld  hl,screenBuf2
   45 D1:AE6C 22 10 00 E3 _:  ld  (mpLcdBase),hl
   46 D1:AE70 C9 -  -  -      ret
   47 D1:AE71 -  -  -  -  
   48 D1:AE71 -  -  -  -  stopGfx:
   49 D1:AE71 CD 74 03 00     call _boot_ClearVRAM
   50 D1:AE75 11 2D 09 00     ld  de,lcdNormalMode
   51 D1:AE79 01 00 00 D4     ld  bc,screenBuf1
   52 D1:AE7D 18 0C -  -      jr  configureScreen
   53 D1:AE7F -  -  -  -  
   54 D1:AE7F -  -  -  -  startGfx:
   55 D1:AE7F CD 74 03 00     call _boot_ClearVRAM
   56 D1:AE83 11 27 39 01     ld  de,lcdWatermark+lcdIntFront+lcdPwr+lcdBgr+lcdBpp8
   57 D1:AE87 01 00 00 D4     ld  bc,screenBuf1
   58 D1:AE8B -  -  -  -  configureScreen:
   59 D1:AE8B 21 10 00 E3     ld  hl,mpLcdBase
   60 D1:AE8F ED 0F -  -      ld  (hl),bc
   61 D1:AE91 2E 18 -  -      ld  L,lcdCtrl
   62 D1:AE93 ED 1F -  -      ld  (hl),de
   63 D1:AE95 2E 01 -  -      ld  L,lcdTiming0 + 1
   64 D1:AE97 01 08 00 00     ld  bc,8
   65 D1:AE9B 11 CA AE D1     ld  de,screenSettings
   66 D1:AE9F 1A -  -  -  _:  ld  a,(de)
   67 D1:AEA0 ED A0 -  -      ldi
   68 D1:AEA2 2B -  -  -      dec hl
   69 D1:AEA3 77 -  -  -      ld  (hl),a
   70 D1:AEA4 23 -  -  -      inc hl
   71 D1:AEA5 EA 9F AE D1     jp  pe,-_
   72 D1:AEA9 21 00 2C D5     ld  hl,screenBuf2
   73 D1:AEAD 22 00 34 D0     ld  (curScreenBuf),hl
   74 D1:AEB1 -  -  -  -  ;Also copied from graphx
   75 D1:AEB1 -  -  -  -  setDefaultPalette:
   76 D1:AEB1 11 00 02 E3 	ld	de,mpLcdPalette	    ; address of mmio palette
   77 D1:AEB5 43 -  -  -  	ld	b,e			        ; b = 0
   78 D1:AEB6 78 -  -  -  _:	ld	a,b
   79 D1:AEB7 0F -  -  -  	rrca
   80 D1:AEB8 A8 -  -  -  	xor	a,b
   81 D1:AEB9 E6 E0 -  -  	and	a,224
   82 D1:AEBB A8 -  -  -  	xor	a,b
   83 D1:AEBC 12 -  -  -  	ld	(de),a
   84 D1:AEBD 13 -  -  -  	inc	de
   85 D1:AEBE 78 -  -  -  	ld	a,b
   86 D1:AEBF 17 -  -  -  	rla
   87 D1:AEC0 17 -  -  -  	rla
   88 D1:AEC1 17 -  -  -  	rla
   89 D1:AEC2 78 -  -  -  	ld	a,b
   90 D1:AEC3 1F -  -  -  	rra
   91 D1:AEC4 12 -  -  -  	ld	(de),a
   92 D1:AEC5 13 -  -  -  	inc	de
   93 D1:AEC6 04 -  -  -  	inc	b
   94 D1:AEC7 20 ED -  -  	jr	nz,-_		    ; loop for 256 times to fill palette
   95 D1:AEC9 C9 -  -  -  	ret
   96 D1:AECA -  -  -  -  
   97 D1:AECA -  -  -  -  screenSettings:
   98 D1:AECA -  -  -  -  ;Copied from my old Falldown2 project, which was also copied from graphx.asm
   99 D1:AECA -  -  -  -  ;	.db	14 shl 2			; PPL shl 2
  100 D1:AECA 07 -  -  -  	.db	7					; HSW
  101 D1:AECB 57 -  -  -  	.db	87					; HFP
  102 D1:AECC 3F -  -  -  	.db	63					; HBP
  103 D1:AECD 3F 01 -  -  	.dw	(0 >> 10)+319		; (VSW shl 10)+LPP
  104 D1:AECF B3 -  -  -  	.db	179					; VFP
  105 D1:AED0 00 -  -  -  	.db	0					; VBP
  106 D1:AED1 00 -  -  -  	.db	(0 >> 6)+(0 >> 5)+0	; (ACB shl 6)+(CLKSEL shl 5)+PCD_LO
  107 D1:AED2 -  -  -  -  ;  H = ((PPL+1)*16)+(HSW+1)+(HFP+1)+(HBP+1) = 240+8+88+64 = 400
  108 D1:AED2 -  -  -  -  ;  V = (LPP+1)+(VSW+1)+VFP+VBP = 320+1+179+0 = 500
  109 D1:AED2 -  -  -  -  ; CC = H*V*PCD*2 = 400*500*2*2 = 800000
  110 D1:AED2 -  -  -  -  ; Hz = 48000000/CC = 60
  111 D1:AED2 -  -  -  -  
  112 D1:AED2 -  -  -  -  
  113 D1:AED2 -  -  -  -  ;-----------------------------------------------------------------------------
  114 D1:AED2 -  -  -  -  ; Text Rendering
  115 D1:AED2 -  -  -  -  
  116 D1:AED2 -  -  -  -  clearTextBuf:
  117 D1:AED2 21 00 50 D0     ld  hl,NAMETABLE1
  118 D1:AED6 11 01 50 D0     ld  de,NAMETABLE1+1
  119 D1:AEDA 01 FF 03 00     ld  bc,1023
  120 D1:AEDE 36 20 -  -      ld  (hl),' '
  121 D1:AEE0 ED B0 -  -      ldir
  122 D1:AEE2 C9 -  -  -      ret
  123 D1:AEE3 -  -  -  -  
  124 D1:AEE3 -  -  -  -  printTextBuf:
  125 D1:AEE3 2A F6 31 D0     ld  hl,(xPos)
  126 D1:AEE7 22 17 AF D1     ld  (printTextBuf_smcPosRecovery),hl
  127 D1:AEEB 21 00 50 D0     ld  hl,NAMETABLE1
  128 D1:AEEF AF -  -  -      xor a,a
  129 D1:AEF0 32 F7 31 D0     ld  (yPos),a
  130 D1:AEF4 0E 1E -  -      ld  c,30
  131 D1:AEF6 3E 08 -  -  _:  ld  a,8
  132 D1:AEF8 32 F6 31 D0     ld  (xPos),a
  133 D1:AEFC 06 20 -  -      ld  b,$20
  134 D1:AEFE 7E -  -  -  _:  ld  a,(hl)
  135 D1:AEFF 23 -  -  -      inc hl
  136 D1:AF00 C5 -  -  -      push bc
  137 D1:AF01 E5 -  -  -          push hl
  138 D1:AF02 CD 60 AF D1             call printBigFont
  139 D1:AF06 E1 -  -  -          pop hl
  140 D1:AF07 C1 -  -  -      pop bc
  141 D1:AF08 10 F4 -  -      djnz -_
  142 D1:AF0A 3A F7 31 D0     ld  a,(yPos)
  143 D1:AF0E 3C -  -  -      inc a
  144 D1:AF0F 32 F7 31 D0     ld  (yPos),a
  145 D1:AF13 0D -  -  -      dec  c
  146 D1:AF14 20 E0 -  -      jr  nz,--_
  147 D1:AF16 -  -  -  -  printTextBuf_smcPosRecovery .equ $+1
  148 D1:AF16 21 00 00 00     ld  hl,0
  149 D1:AF1A 22 F6 31 D0     ld  (xPos),hl
  150 D1:AF1E C9 -  -  -      ret
  151 D1:AF1F -  -  -  -  
  152 D1:AF1F -  -  -  -  ;A=column to start on
  153 D1:AF1F -  -  -  -  setLineStart:
  154 D1:AF1F 32 F6 31 D0     ld  (xPos),a
  155 D1:AF23 32 03 34 D0     ld  (linestart),a
  156 D1:AF27 C9 -  -  -      ret
  157 D1:AF28 -  -  -  -  
  158 D1:AF28 -  -  -  -  ;A=row to start on
  159 D1:AF28 -  -  -  -  setCurLine:
  160 D1:AF28 32 F7 31 D0     ld  (yPos),a
  161 D1:AF2C C9 -  -  -      ret
  162 D1:AF2D -  -  -  -  
  163 D1:AF2D -  -  -  -  newPage:
  164 D1:AF2D 3E FF -  -      ld  a,$FF
  165 D1:AF2F 32 F7 31 D0     ld  (yPos),a
  166 D1:AF33 -  -  -  -  newLine:
  167 D1:AF33 3A 03 34 D0     ld  a,(linestart)
  168 D1:AF37 32 F6 31 D0     ld  (xPos),a
  169 D1:AF3B 3A F7 31 D0     ld  a,(yPos)
  170 D1:AF3F 3C -  -  -      inc a
  171 D1:AF40 FE 1E -  -      cp  30
  172 D1:AF42 38 01 -  -      jr  c,+_
  173 D1:AF44 AF -  -  -      xor a,a
  174 D1:AF45 32 F7 31 D0 _:  ld  (yPos),a
  175 D1:AF49 C9 -  -  -      ret
  176 D1:AF4A -  -  -  -  
  177 D1:AF4A -  -  -  -      
  178 D1:AF4A -  -  -  -      
  179 D1:AF4A -  -  -  -  
  180 D1:AF4A -  -  -  -  ;HL=address to string
  181 D1:AF4A -  -  -  -  printString:
  182 D1:AF4A 7E -  -  -      ld  a,(hl)
  183 D1:AF4B 23 -  -  -      inc hl
  184 D1:AF4C B7 -  -  -      or  a,a
  185 D1:AF4D C8 -  -  -      ret z
  186 D1:AF4E FE 0A -  -      cp  a,'\n'
  187 D1:AF50 20 06 -  -      jr nz,+_
  188 D1:AF52 CD 33 AF D1     call newLine
  189 D1:AF56 18 F2 -  -      jr  printString
  190 D1:AF58 E5 -  -  -  _:  push hl
  191 D1:AF59 CD 60 AF D1         call printBigFont
  192 D1:AF5D E1 -  -  -      pop hl
  193 D1:AF5E 18 EA -  -      jr printString
  194 D1:AF60 -  -  -  -  
  195 D1:AF60 -  -  -  -  
  196 D1:AF60 -  -  -  -  ;in: A=chrToPrint
  197 D1:AF60 -  -  -  -  printBigFont:
  198 D1:AF60 CD F5 AF D1     call calculateScreenPtr
  199 D1:AF64 EB -  -  -      ex  de,hl
  200 D1:AF65 6F -  -  -      ld  L,a
  201 D1:AF66 26 08 -  -      ld  H,8
  202 D1:AF68 ED 6C -  -      mlt hl
  203 D1:AF6A 01 0F AF D1     ld  bc,graphx_textdata
  204 D1:AF6E 09 -  -  -      add hl,bc
  205 D1:AF6F EB -  -  -      ex  de,hl
  206 D1:AF70 0E 08 -  -      ld  c,8
  207 D1:AF72 06 08 -  -  _:  ld  b,8
  208 D1:AF74 1A -  -  -      ld  a,(de)
  209 D1:AF75 87 -  -  -  _:  add a,a
  210 D1:AF76 -  -  -  -  fontBGColor_var .equ $+1
  211 D1:AF76 36 00 -  -      ld  (hl),FONTBGCOLOR
  212 D1:AF78 30 02 -  -      jr  nc,$+4
  213 D1:AF7A -  -  -  -  fontFGColor_var .equ $+1
  214 D1:AF7A 36 FF -  -      ld  (hl),FONTFGCOLOR
  215 D1:AF7C 23 -  -  -      inc hl
  216 D1:AF7D 10 F6 -  -      djnz -_
  217 D1:AF7F 79 -  -  -      ld  a,c
  218 D1:AF80 01 38 01 00     ld  bc,320-8
  219 D1:AF84 09 -  -  -      add hl,bc
  220 D1:AF85 4F -  -  -      ld  c,a
  221 D1:AF86 13 -  -  -      inc de
  222 D1:AF87 0D -  -  -      dec c
  223 D1:AF88 20 E8 -  -      jr  nz,--_
  224 D1:AF8A 21 F6 31 D0     ld  hl,xPos
  225 D1:AF8E 34 -  -  -      inc (hl)
  226 D1:AF8F C9 -  -  -      ret
  227 D1:AF90 -  -  -  -  
  228 D1:AF90 -  -  -  -  ;A= 0-255 numeric value to display as hex
  229 D1:AF90 -  -  -  -  printSmallNumPair:
  230 D1:AF90 CD F5 AF D1     call calculateScreenPtr
  231 D1:AF94 F5 -  -  -      push af
  232 D1:AF95 1F -  -  -          rra
  233 D1:AF96 1F -  -  -          rra
  234 D1:AF97 1F -  -  -          rra
  235 D1:AF98 1F -  -  -          rra
  236 D1:AF99 CD A8 AF D1         call +_
  237 D1:AF9D F1 -  -  -      pop af
  238 D1:AF9E CD A8 AF D1     call +_
  239 D1:AFA2 21 F6 31 D0     ld  hl,xPos
  240 D1:AFA6 34 -  -  -      inc (hl)
  241 D1:AFA7 C9 -  -  -      ret
  242 D1:AFA8 E6 0F -  -  _:  and a,$0F
  243 D1:AFAA 01 40 01 00     ld  bc,320
  244 D1:AFAE 09 -  -  -      add hl,bc   ;drop height by one. These small chars are *short*
  245 D1:AFAF EB -  -  -      ex  de,hl
  246 D1:AFB0 6F -  -  -      ld  L,a
  247 D1:AFB1 26 03 -  -      ld  H,3
  248 D1:AFB3 ED 6C -  -      mlt hl
  249 D1:AFB5 01 0F B3 D1     ld  bc,SmallHexFont
  250 D1:AFB9 09 -  -  -      add hl,bc
  251 D1:AFBA EB -  -  -      ex  de,hl
  252 D1:AFBB 0E 03 -  -      ld  c,3
  253 D1:AFBD 18 14 -  -      jr  printSmallNumPair_2ndHalf
  254 D1:AFBF -  -  -  -  printSmallNumPair_1stHalf:
  255 D1:AFBF 1A -  -  -      ld  a,(de)
  256 D1:AFC0 06 04 -  -      ld  b,4
  257 D1:AFC2 87 -  -  -  _:  add a,a
  258 D1:AFC3 -  -  -  -  smallFontBGColor_var .equ $+1
  259 D1:AFC3 36 00 -  -      ld  (hl),FONTBGCOLOR
  260 D1:AFC5 30 02 -  -      jr  nc,$+4
  261 D1:AFC7 -  -  -  -  smallFontFGColor_var .equ $+1
  262 D1:AFC7 36 FF -  -      ld  (hl),FONTFGCOLOR
  263 D1:AFC9 23 -  -  -      inc hl
  264 D1:AFCA 10 F6 -  -      djnz -_
  265 D1:AFCC 79 -  -  -      ld  a,c
  266 D1:AFCD 01 3C 01 00     ld  bc,320-4
  267 D1:AFD1 09 -  -  -      add hl,bc
  268 D1:AFD2 4F -  -  -      ld  c,a
  269 D1:AFD3 -  -  -  -  printSmallNumPair_2ndHalf:
  270 D1:AFD3 1A -  -  -      ld  a,(de)
  271 D1:AFD4 07 -  -  -      rlca
  272 D1:AFD5 07 -  -  -      rlca
  273 D1:AFD6 07 -  -  -      rlca
  274 D1:AFD7 07 -  -  -      rlca
  275 D1:AFD8 06 04 -  -      ld  b,4
  276 D1:AFDA 87 -  -  -  _:  add a,a
  277 D1:AFDB 36 00 -  -      ld  (hl),FONTBGCOLOR
  278 D1:AFDD 30 02 -  -      jr  nc,$+4
  279 D1:AFDF 36 FF -  -      ld  (hl),FONTFGCOLOR
  280 D1:AFE1 23 -  -  -      inc hl
  281 D1:AFE2 10 F6 -  -      djnz -_
  282 D1:AFE4 13 -  -  -      inc de
  283 D1:AFE5 79 -  -  -      ld  a,c
  284 D1:AFE6 01 3C 01 00     ld  bc,320-4
  285 D1:AFEA 09 -  -  -      add hl,bc
  286 D1:AFEB 4F -  -  -      ld  c,a
  287 D1:AFEC 0D -  -  -      dec c
  288 D1:AFED 20 D0 -  -      jr  nz,printSmallNumPair_1stHalf
  289 D1:AFEF 01 84 F8 FF     ld  bc,-(320*(1+5))+4
  290 D1:AFF3 09 -  -  -      add hl,bc
  291 D1:AFF4 C9 -  -  -      ret
  292 D1:AFF5 -  -  -  -  
  293 D1:AFF5 -  -  -  -  calculateScreenPtr:
  294 D1:AFF5 -  -  -  -      ;xcoord: x * 8 
  295 D1:AFF5 -  -  -  -      ;ycoord: 320 * 8 * y
  296 D1:AFF5 -  -  -  -      ;coord: (8x)+320*8y -> 8(x+320y)
  297 D1:AFF5 ED 5B F6 31 
              D0 -  -  -      ld  de,(xPos)
  298 D1:AFFA -  -  -  -  calculateScreenPtrDE:
  299 D1:AFFA 6A -  -  -      ld  L,d     ;yPos
  300 D1:AFFB 26 A0 -  -      ld  h,160
  301 D1:AFFD ED 6C -  -      mlt hl
  302 D1:AFFF 29 -  -  -      add hl,hl
  303 D1:B000 16 01 -  -      ld  d,1
  304 D1:B002 ED 5C -  -      mlt de      ;DE=E. Clears high bytes.
  305 D1:B004 19 -  -  -      add hl,de
  306 D1:B005 29 -  -  -      add hl,hl
  307 D1:B006 29 -  -  -      add hl,hl
  308 D1:B007 29 -  -  -      add hl,hl
  309 D1:B008 ED 5B 00 34 
              D0 -  -  -      ld  de,(curScreenBuf)
  310 D1:B00D 19 -  -  -      add hl,de
  311 D1:B00E C9 -  -  -      ret
  312 D1:B00F -  -  -  -  
  313 D1:B00F -  -  -  -  
  314 D1:B00F -  -  -  -  
  315 D1:B00F -  -  -  -  
  316 D1:B00F -  -  -  -  
  317 D1:B00F -  -  -  -  
  318 D1:B00F -  -  -  -  
  319 D1:B00F -  -  -  -  
  320 D1:B00F -  -  -  -  
  321 D1:B00F -  -  -  -  ;-----------------------------------------------------------------------------
  322 D1:B00F -  -  -  -  ; Data Section
  323 D1:B00F -  -  -  -  
  324 D1:B00F -  -  -  -  graphx_textdata		.EQU $-(8*' ')		;points to what would be start of ASCII
  325 D1:B00F 00 00 00 00 
              00 00 00 00 .db	$00,$00,$00,$00,$00,$00,$00,$00 ;
  326 D1:B017 C0 C0 C0 C0 
              C0 00 C0 00 .db	$C0,$C0,$C0,$C0,$C0,$00,$C0,$00 ; !
  327 D1:B01F D8 D8 D8 00 
              00 00 00 00 .db	$D8,$D8,$D8,$00,$00,$00,$00,$00 ; "
  328 D1:B027 6C 6C FE 6C 
              FE 6C 6C 00 .db	$6C,$6C,$FE,$6C,$FE,$6C,$6C,$00 ; #
  329 D1:B02F 18 7E C0 7C 
              06 FC 18 00 .db	$18,$7E,$C0,$7C,$06,$FC,$18,$00 ; $
  330 D1:B037 00 C6 CC 18 
              30 66 C6 00 .db	$00,$C6,$CC,$18,$30,$66,$C6,$00 ; %
  331 D1:B03F 38 6C 38 76 
              DC CC 76 00 .db	$38,$6C,$38,$76,$DC,$CC,$76,$00 ; &
  332 D1:B047 30 30 60 00 
              00 00 00 00 .db	$30,$30,$60,$00,$00,$00,$00,$00 ; '
  333 D1:B04F 30 60 C0 C0 
              C0 60 30 00 .db	$30,$60,$C0,$C0,$C0,$60,$30,$00 ; (
  334 D1:B057 C0 60 30 30 
              30 60 C0 00 .db	$C0,$60,$30,$30,$30,$60,$C0,$00 ; )
  335 D1:B05F 00 66 3C FF 
              3C 66 00 00 .db	$00,$66,$3C,$FF,$3C,$66,$00,$00 ; *
  336 D1:B067 00 30 30 FC 
              FC 30 30 00 .db	$00,$30,$30,$FC,$FC,$30,$30,$00 ; +
  337 D1:B06F 00 00 00 00 
              00 60 60 C0 .db	$00,$00,$00,$00,$00,$60,$60,$C0 ; ,
  338 D1:B077 00 00 00 FC 
              00 00 00 00 .db	$00,$00,$00,$FC,$00,$00,$00,$00 ; -
  339 D1:B07F 00 00 00 00 
              00 C0 C0 00 .db	$00,$00,$00,$00,$00,$C0,$C0,$00 ; .
  340 D1:B087 06 0C 18 30 
              60 C0 80 00 .db	$06,$0C,$18,$30,$60,$C0,$80,$00 ; /
  341 D1:B08F 7C CE DE F6 
              E6 C6 7C 00 .db	$7C,$CE,$DE,$F6,$E6,$C6,$7C,$00 ; 0
  342 D1:B097 30 70 30 30 
              30 30 FC 00 .db	$30,$70,$30,$30,$30,$30,$FC,$00 ; 1
  343 D1:B09F 7C C6 06 7C 
              C0 C0 FE 00 .db	$7C,$C6,$06,$7C,$C0,$C0,$FE,$00 ; 2
  344 D1:B0A7 FC 06 06 3C 
              06 06 FC 00 .db	$FC,$06,$06,$3C,$06,$06,$FC,$00 ; 3
  345 D1:B0AF 0C CC CC CC 
              FE 0C 0C 00 .db	$0C,$CC,$CC,$CC,$FE,$0C,$0C,$00 ; 4
  346 D1:B0B7 FE C0 FC 06 
              06 C6 7C 00 .db	$FE,$C0,$FC,$06,$06,$C6,$7C,$00 ; 5
  347 D1:B0BF 7C C0 C0 FC 
              C6 C6 7C 00 .db	$7C,$C0,$C0,$FC,$C6,$C6,$7C,$00 ; 6
  348 D1:B0C7 FE 06 06 0C 
              18 30 30 00 .db	$FE,$06,$06,$0C,$18,$30,$30,$00 ; 7
  349 D1:B0CF 7C C6 C6 7C 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$7C,$C6,$C6,$7C,$00 ; 8
  350 D1:B0D7 7C C6 C6 7E 
              06 06 7C 00 .db	$7C,$C6,$C6,$7E,$06,$06,$7C,$00 ; 9
  351 D1:B0DF 00 C0 C0 00 
              00 C0 C0 00 .db	$00,$C0,$C0,$00,$00,$C0,$C0,$00 ; :
  352 D1:B0E7 00 60 60 00 
              00 60 60 C0 .db	$00,$60,$60,$00,$00,$60,$60,$C0 ; ;
  353 D1:B0EF 18 30 60 C0 
              60 30 18 00 .db	$18,$30,$60,$C0,$60,$30,$18,$00 ; <
  354 D1:B0F7 00 00 FC 00 
              FC 00 00 00 .db	$00,$00,$FC,$00,$FC,$00,$00,$00 ; =
  355 D1:B0FF C0 60 30 18 
              30 60 C0 00 .db	$C0,$60,$30,$18,$30,$60,$C0,$00 ; >
  356 D1:B107 78 CC 18 30 
              30 00 30 00 .db	$78,$CC,$18,$30,$30,$00,$30,$00 ; ?
  357 D1:B10F 7C C6 DE DE 
              DE C0 7E 00 .db	$7C,$C6,$DE,$DE,$DE,$C0,$7E,$00 ; @
  358 D1:B117 38 6C C6 C6 
              FE C6 C6 00 .db	$38,$6C,$C6,$C6,$FE,$C6,$C6,$00 ; A
  359 D1:B11F FC C6 C6 FC 
              C6 C6 FC 00 .db	$FC,$C6,$C6,$FC,$C6,$C6,$FC,$00 ; B
  360 D1:B127 7C C6 C0 C0 
              C0 C6 7C 00 .db	$7C,$C6,$C0,$C0,$C0,$C6,$7C,$00 ; C
  361 D1:B12F F8 CC C6 C6 
              C6 CC F8 00 .db	$F8,$CC,$C6,$C6,$C6,$CC,$F8,$00 ; D
  362 D1:B137 FE C0 C0 F8 
              C0 C0 FE 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$FE,$00 ; E
  363 D1:B13F FE C0 C0 F8 
              C0 C0 C0 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$C0,$00 ; F
  364 D1:B147 7C C6 C0 C0 
              CE C6 7C 00 .db	$7C,$C6,$C0,$C0,$CE,$C6,$7C,$00 ; G
  365 D1:B14F C6 C6 C6 FE 
              C6 C6 C6 00 .db	$C6,$C6,$C6,$FE,$C6,$C6,$C6,$00 ; H
  366 D1:B157 7E 18 18 18 
              18 18 7E 00 .db	$7E,$18,$18,$18,$18,$18,$7E,$00 ; I
  367 D1:B15F 06 06 06 06 
              06 C6 7C 00 .db	$06,$06,$06,$06,$06,$C6,$7C,$00 ; J
  368 D1:B167 C6 CC D8 F0 
              D8 CC C6 00 .db	$C6,$CC,$D8,$F0,$D8,$CC,$C6,$00 ; K
  369 D1:B16F C0 C0 C0 C0 
              C0 C0 FE 00 .db	$C0,$C0,$C0,$C0,$C0,$C0,$FE,$00 ; L
  370 D1:B177 C6 EE FE FE 
              D6 C6 C6 00 .db	$C6,$EE,$FE,$FE,$D6,$C6,$C6,$00 ; M
  371 D1:B17F C6 E6 F6 DE 
              CE C6 C6 00 .db	$C6,$E6,$F6,$DE,$CE,$C6,$C6,$00 ; N
  372 D1:B187 7C C6 C6 C6 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$C6,$C6,$C6,$7C,$00 ; O
  373 D1:B18F FC C6 C6 FC 
              C0 C0 C0 00 .db	$FC,$C6,$C6,$FC,$C0,$C0,$C0,$00 ; P
  374 D1:B197 7C C6 C6 C6 
              D6 DE 7C 06 .db	$7C,$C6,$C6,$C6,$D6,$DE,$7C,$06 ; Q
  375 D1:B19F FC C6 C6 FC 
              D8 CC C6 00 .db	$FC,$C6,$C6,$FC,$D8,$CC,$C6,$00 ; R
  376 D1:B1A7 7C C6 C0 7C 
              06 C6 7C 00 .db	$7C,$C6,$C0,$7C,$06,$C6,$7C,$00 ; S
  377 D1:B1AF FF 18 18 18 
              18 18 18 00 .db	$FF,$18,$18,$18,$18,$18,$18,$00 ; T
  378 D1:B1B7 C6 C6 C6 C6 
              C6 C6 FE 00 .db	$C6,$C6,$C6,$C6,$C6,$C6,$FE,$00 ; U
  379 D1:B1BF C6 C6 C6 C6 
              C6 7C 38 00 .db	$C6,$C6,$C6,$C6,$C6,$7C,$38,$00 ; V
  380 D1:B1C7 C6 C6 C6 C6 
              D6 FE 6C 00 .db	$C6,$C6,$C6,$C6,$D6,$FE,$6C,$00 ; W
  381 D1:B1CF C6 C6 6C 38 
              6C C6 C6 00 .db	$C6,$C6,$6C,$38,$6C,$C6,$C6,$00 ; X
  382 D1:B1D7 C6 C6 C6 7C 
              18 30 E0 00 .db	$C6,$C6,$C6,$7C,$18,$30,$E0,$00 ; Y
  383 D1:B1DF FE 06 0C 18 
              30 60 FE 00 .db	$FE,$06,$0C,$18,$30,$60,$FE,$00 ; Z
  384 D1:B1E7 F0 C0 C0 C0 
              C0 C0 F0 00 .db	$F0,$C0,$C0,$C0,$C0,$C0,$F0,$00 ; [
  385 D1:B1EF C0 60 30 18 
              0C 06 02 00 .db	$C0,$60,$30,$18,$0C,$06,$02,$00 ; \
  386 D1:B1F7 F0 30 30 30 
              30 30 F0 00 .db	$F0,$30,$30,$30,$30,$30,$F0,$00 ; ]
  387 D1:B1FF 10 38 6C C6 
              00 00 00 00 .db	$10,$38,$6C,$C6,$00,$00,$00,$00 ; ^
  388 D1:B207 00 00 00 00 
              00 00 00 FF .db	$00,$00,$00,$00,$00,$00,$00,$FF ; _
  389 D1:B20F C0 C0 60 00 
              00 00 00 00 .db	$C0,$C0,$60,$00,$00,$00,$00,$00 ; `
  390 D1:B217 00 00 7C 06 
              7E C6 7E 00 .db	$00,$00,$7C,$06,$7E,$C6,$7E,$00 ; a
  391 D1:B21F C0 C0 C0 FC 
              C6 C6 FC 00 .db	$C0,$C0,$C0,$FC,$C6,$C6,$FC,$00 ; b
  392 D1:B227 00 00 7C C6 
              C0 C6 7C 00 .db	$00,$00,$7C,$C6,$C0,$C6,$7C,$00 ; c
  393 D1:B22F 06 06 06 7E 
              C6 C6 7E 00 .db	$06,$06,$06,$7E,$C6,$C6,$7E,$00 ; d
  394 D1:B237 00 00 7C C6 
              FE C0 7C 00 .db	$00,$00,$7C,$C6,$FE,$C0,$7C,$00 ; e
  395 D1:B23F 1C 36 30 78 
              30 30 78 00 .db	$1C,$36,$30,$78,$30,$30,$78,$00 ; f
  396 D1:B247 00 00 7E C6 
              C6 7E 06 FC .db	$00,$00,$7E,$C6,$C6,$7E,$06,$FC ; g
  397 D1:B24F C0 C0 FC C6 
              C6 C6 C6 00 .db	$C0,$C0,$FC,$C6,$C6,$C6,$C6,$00 ; h
  398 D1:B257 18 00 38 18 
              18 18 3C 00 .db	$18,$00,$38,$18,$18,$18,$3C,$00 ; i
  399 D1:B25F 06 00 06 06 
              06 06 C6 7C .db	$06,$00,$06,$06,$06,$06,$C6,$7C ; j
  400 D1:B267 C0 C0 CC D8 
              F8 CC C6 00 .db	$C0,$C0,$CC,$D8,$F8,$CC,$C6,$00 ; k
  401 D1:B26F 38 18 18 18 
              18 18 3C 00 .db	$38,$18,$18,$18,$18,$18,$3C,$00 ; l
  402 D1:B277 00 00 CC FE 
              FE D6 D6 00 .db	$00,$00,$CC,$FE,$FE,$D6,$D6,$00 ; m
  403 D1:B27F 00 00 FC C6 
              C6 C6 C6 00 .db	$00,$00,$FC,$C6,$C6,$C6,$C6,$00 ; n
  404 D1:B287 00 00 7C C6 
              C6 C6 7C 00 .db	$00,$00,$7C,$C6,$C6,$C6,$7C,$00 ; o
  405 D1:B28F 00 00 FC C6 
              C6 FC C0 C0 .db	$00,$00,$FC,$C6,$C6,$FC,$C0,$C0 ; p
  406 D1:B297 00 00 7E C6 
              C6 7E 06 06 .db	$00,$00,$7E,$C6,$C6,$7E,$06,$06 ; q
  407 D1:B29F 00 00 FC C6 
              C0 C0 C0 00 .db	$00,$00,$FC,$C6,$C0,$C0,$C0,$00 ; r
  408 D1:B2A7 00 00 7E C0 
              7C 06 FC 00 .db	$00,$00,$7E,$C0,$7C,$06,$FC,$00 ; s
  409 D1:B2AF 30 30 FC 30 
              30 30 1C 00 .db	$30,$30,$FC,$30,$30,$30,$1C,$00 ; t
  410 D1:B2B7 00 00 C6 C6 
              C6 C6 7E 00 .db	$00,$00,$C6,$C6,$C6,$C6,$7E,$00 ; u
  411 D1:B2BF 00 00 C6 C6 
              C6 7C 38 00 .db	$00,$00,$C6,$C6,$C6,$7C,$38,$00 ; v
  412 D1:B2C7 00 00 C6 C6 
              D6 FE 6C 00 .db	$00,$00,$C6,$C6,$D6,$FE,$6C,$00 ; w
  413 D1:B2CF 00 00 C6 6C 
              38 6C C6 00 .db	$00,$00,$C6,$6C,$38,$6C,$C6,$00 ; x
  414 D1:B2D7 00 00 C6 C6 
              C6 7E 06 FC .db	$00,$00,$C6,$C6,$C6,$7E,$06,$FC ; y
  415 D1:B2DF 00 00 FE 0C 
              38 60 FE 00 .db	$00,$00,$FE,$0C,$38,$60,$FE,$00 ; z
  416 D1:B2E7 1C 30 30 E0 
              30 30 1C 00 .db	$1C,$30,$30,$E0,$30,$30,$1C,$00 ; {
  417 D1:B2EF C0 C0 C0 00 
              C0 C0 C0 00 .db	$C0,$C0,$C0,$00,$C0,$C0,$C0,$00 ; |
  418 D1:B2F7 E0 30 30 1C 
              30 30 E0 00 .db	$E0,$30,$30,$1C,$30,$30,$E0,$00 ; }
  419 D1:B2FF 76 DC 00 00 
              00 00 00 00 .db	$76,$DC,$00,$00,$00,$00,$00,$00 ; ~
  420 D1:B307 00 10 38 6C 
              C6 C6 FE 00 .db	$00,$10,$38,$6C,$C6,$C6,$FE,$00 ; △
  421 D1:B30F -  -  -  -  
  422 D1:B30F -  -  -  -  ;Copied from the Escheron: Twilight over Ragnoth project
  423 D1:B30F -  -  -  -  ;whose format was copied from a (then-)authorized source
  424 D1:B30F -  -  -  -  ;for DoorsCS (I think? The one for the 83+) by "Kerm Martian".
  425 D1:B30F -  -  -  -  SmallHexFont:
  426 D1:B30F 4E AA AE -  .db $4E,$AA,$AE				;zero
  427 D1:B312 44 C4 4E -  .db $44,$C4,$4E				;one
  428 D1:B315 4C 24 8E -  .db $4C,$24,$8E				;two
  429 D1:B318 4C 24 2C -  .db $4C,$24,$2C				;three
  430 D1:B31B 48 AE 22 -  .db $48,$AE,$22				;four
  431 D1:B31E 4E 8C 2C -  .db $4E,$8C,$2C				;five
  432 D1:B321 46 8E AE -  .db $46,$8E,$AE				;six
  433 D1:B324 4E 24 88 -  .db $4E,$24,$88				;seven
  434 D1:B327 4E AE AE -  .db $4E,$AE,$AE				;eight
  435 D1:B32A 4E AE 2C -  .db $4E,$AE,$2C				;nine
  436 D1:B32D 44 AE AA -  .db $44,$AE,$AA				;A
  437 D1:B330 4C AC AC -  .db $4C,$AC,$AC				;B
  438 D1:B333 46 88 86 -  .db $46,$88,$86				;C
  439 D1:B336 4C AA AC -  .db $4C,$AA,$AC				;D
  440 D1:B339 4E 8C 8E -  .db $4E,$8C,$8E				;E
  441 D1:B33C 4E 8C 88 -  .db $4E,$8C,$88				;F
  442 D1:B33F -  -  -  -  
  443 D1:B33F -  -  -  -  
  444 D1:B33F -  -  -  -  
Listing for file "main.z80"
  666 D1:B33F -  -  -  -  #include "core.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    1 D1:B33F -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    2 D1:B33F -  -  -  -  
    3 D1:B33F -  -  -  -  ;TODO: DEFINE MEMORY ACCESS MACROS. ONE OR MORE FOR READ AND WRITE.
    4 D1:B33F -  -  -  -  ;FIGURE OUT HOW TO GET BOTH HIGH AND LOW BYTE OF ORIGINAL ADDRESS
    5 D1:B33F -  -  -  -  ;AND PERFORM ALTERNATE ACTIONS BASED ON WHAT HARDWARE WAS ACCESSED.
    6 D1:B33F -  -  -  -  ;NOTE: PATTERN SHOWS THAT D=MSB, C=LSB OF 6502 ADDRESS. USE THIS.
    7 D1:B33F -  -  -  -  ;
    8 D1:B33F -  -  -  -  ;THESE MACROS ARE PLACEHOLDERS. CHANGE THEM LATER ON TO REFLECT ACTUAL
    9 D1:B33F -  -  -  -  ;HARDWARE SHENANIGANS.
   10 D1:B33F -  -  -  -  ;
   11 D1:B33F -  -  -  -  ;NOTE: WRITE ACCESSES RELY ON KNOWING WHAT DATA TO WRITE. CAN'T STORE THAT IN A
   12 D1:B33F -  -  -  -  ;      SINCE WE NEED TO DO CONDITIONING. REGISTER B IS UNUSED SO LET'S USE THAT.
   13 D1:B33F -  -  -  -  ;
   14 D1:B33F -  -  -  -  #define READ_ACCESS ld a,(hl)
   15 D1:B33F -  -  -  -  #define WRITE_ACCESS ld (hl),b
   16 D1:B33F -  -  -  -  ;Later, put in actual test. Z if not triggered, NZ if triggered. This
   17 D1:B33F -  -  -  -  ;alters the behavior of the BRK instruction.
   18 D1:B33F -  -  -  -  #define WAS_NMI_TRIGGERED or  a
   19 D1:B33F -  -  -  -  
   20 D1:B33F -  -  -  -  #define OPRFLG_C res SF_CARRY,b \ jr nc,$+4 \ set SF_CARRY,b
   21 D1:B33F -  -  -  -  #define OPRFLG_V res SF_OVER,b \ jp po,$+6 \ set SF_OVER,b
   22 D1:B33F -  -  -  -  #define OPRFLG_Z res SF_ZERO,b \ jr nz,$+4 \ set SF_ZERO,b
   23 D1:B33F -  -  -  -  #define OPRFLG_N res SF_NEG,b \ jr nc,$+4 \ set SF_NEG,b
   24 D1:B33F -  -  -  -  
   25 D1:B33F -  -  -  -  #define FLAGS_ZN ld b,(ix+REGSR) \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   26 D1:B33F -  -  -  -  #define FLAGS_CZN ld b,(ix+REGSR) \ OPRFLG_C \ rlc a  \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   27 D1:B33F -  -  -  -  #define FLAGS_VCZN ld b,(ix+REGSR) \ OPRFLG_V \ OPRFLG_C \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   28 D1:B33F -  -  -  -  
   29 D1:B33F -  -  -  -  
   30 D1:B33F -  -  -  -  ;Modify later to include provisions for hardware i/o based on page
   31 D1:B33F -  -  -  -  #define HW_READ(src_reg) ld a,(src_reg)
   32 D1:B33F -  -  -  -  #define HW_WRITE(dst_reg) ld (dst_reg),a
   33 D1:B33F -  -  -  -  
   34 D1:B33F -  -  -  -  
   35 D1:B33F -  -  -  -  
   36 D1:B33F -  -  -  -  
   37 D1:B33F -  -  -  -  ;=============================================================================
   38 D1:B33F -  -  -  -  ;=============================================================================
   39 D1:B33F -  -  -  -  ;=============================================================================
   40 D1:B33F -  -  -  -  ;=============================================================================
   41 D1:B33F -  -  -  -  ;You should have set up the mappings already. This is because
   42 D1:B33F -  -  -  -  ;mappings are program-dependant. Only $0000-$3FFF will be mapped in here
   43 D1:B33F -  -  -  -  ;more or less because I don't expect anything else to map that.
   44 D1:B33F -  -  -  -  i6502Init:
   45 D1:B33F -  -  -  -      ;
   46 D1:B33F -  -  -  -      ; At this point, you may need to randomize 2048 bytes at main_ram
   47 D1:B33F -  -  -  -      ;
   48 D1:B33F 21 00 38 D0     ld  hl,main_ram
   49 D1:B343 01 08 20 00     ld  bc,$002008
   50 D1:B347 1E 00 -  -      ld  e,$00
   51 D1:B349 CD 10 B6 D1     call i6502_map_pages
   52 D1:B34D 21 00 33 D0     ld  hl,scrap_mapping
   53 D1:B351 01 01 20 00     ld  bc,$002001
   54 D1:B355 1E 20 -  -      ld  e,$20
   55 D1:B357 CD 10 B6 D1     call i6502_map_pages
   56 D1:B35B CD F7 B5 D1     call i6502_load_instruction_set
   57 D1:B35F -  -  -  -      ;
   58 D1:B35F DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   59 D1:B364 FD 21 02 00 
              00 -  -  -      ld  iy,2    ;8 cycle startup. Hooking into inst6502_jsr for init
   60 D1:B369 ED 22 80 -      lea hl,ix-128
   61 D1:B36C ED 12 81 -      lea de,ix-127
   62 D1:B36F 01 FF 00 00     ld  bc,255
   63 D1:B373 36 00 -  -      ld  (hl),$00
   64 D1:B375 ED B0 -  -      ldir
   65 D1:B377 -  -  -  -      ;
   66 D1:B377 21 00 00 00     ld  hl,0
   67 D1:B37B 39 -  -  -      add hl,sp
   68 D1:B37C DD 2F 11 -      ld  (ix+CORE_STACK_BASE),hl
   69 D1:B37F -  -  -  -  
   70 D1:B37F -  -  -  -      ;Note: SP may need initialization. So does SR for interrupts. Or somesuch.
   71 D1:B37F 21 F8 47 D0     ld  hl,PAGETABLE+(255*BASETABLE_STRIDE)
   72 D1:B383 ED 27 -  -      ld  hl,(hl)
   73 D1:B385 11 FC 00 00     ld  de,$0000FC
   74 D1:B389 19 -  -  -      add hl,de
   75 D1:B38A -  -  -  -      ;
   76 D1:B38A -  -  -  -      ;jp inst6502_jsr
   77 D1:B38A -  -  -  -      ;Manual loading below. Uncomment "jp inst6502_jsr" to return to original.
   78 D1:B38A -  -  -  -      ;Settings below is to run nestest CPU-only test. The reset vector above
   79 D1:B38A -  -  -  -      ;requires a working PPU (and probably APU) to be present.
   80 D1:B38A DD 36 04 24     ld  (ix+REGSR),$24      ;because that's what the log wants?
   81 D1:B38E 21 00 C0 00     ld  hl,$C000
   82 D1:B392 DD 2F 05 -      ld  (ix+REGPC),HL
   83 D1:B395 FD 21 07 00 
              00 -  -  -      ld  iy,7
   84 D1:B39A DD 36 03 FD     ld  (ix+REGSP),$FD
   85 D1:B39E -  -  -  -  
   86 D1:B39E -  -  -  -  i6502FirstLoad:
   87 D1:B39E 52 DD 17 05     ld.s de,(ix+REGPC)
   88 D1:B3A2 7B -  -  -      ld  a,e
   89 D1:B3A3 1E 08 -  -      ld  e,BASETABLE_STRIDE
   90 D1:B3A5 ED 5C -  -      mlt de
   91 D1:B3A7 21 00 40 D0     ld  hl,PAGETABLE
   92 D1:B3AB 19 -  -  -      add hl,de
   93 D1:B3AC ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
   94 D1:B3AE 16 00 -  -      ld  d,0
   95 D1:B3B0 5F -  -  -      ld  e,a
   96 D1:B3B1 19 -  -  -      add hl,de       ;resolve final address
   97 D1:B3B2 18 19 -  -      jr  i6502FinishLoad
   98 D1:B3B4 -  -  -  -  i6502NextLoad:
   99 D1:B3B4 23 -  -  -      inc hl
  100 D1:B3B5 1C -  -  -      inc e
  101 D1:B3B6 20 15 -  -      jr  nz,i6502FinishLoad
  102 D1:B3B8 DD 56 06 -      ld  d,(ix+REGPC+1)
  103 D1:B3BB 14 -  -  -      inc d
  104 D1:B3BC 52 DD 1F 05     ld.s (ix+REGPC),de
  105 D1:B3C0 1E 08 -  -      ld  e,BASETABLE_STRIDE
  106 D1:B3C2 ED 5C -  -      mlt de
  107 D1:B3C4 21 00 40 D0     ld  hl,PAGETABLE
  108 D1:B3C8 19 -  -  -      add hl,de
  109 D1:B3C9 ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
  110 D1:B3CB 1E 00 -  -      ld  e,0         ;PCL known to be zero at this point.
  111 D1:B3CD -  -  -  -  i6502FinishLoad:
  112 D1:B3CD 7E -  -  -      ld  a,(hl)
  113 D1:B3CE -  -  -  -  #ifdef COREDEBUG
  114 D1:B3CE DD 77 0E -      ld  (ix+CURRENT_OPCODES+0),a
  115 D1:B3D1 DD 73 05 -      ld  (ix+REGPC+0),e
  116 D1:B3D4 -  -  -  -  #endif
  117 D1:B3D4 23 -  -  -      inc hl
  118 D1:B3D5 1C -  -  -      inc e
  119 D1:B3D6 20 15 -  -      jr  nz,i6502PrepNextPage
  120 D1:B3D8 DD 56 06 -      ld  d,(ix+REGPC+1)
  121 D1:B3DB 14 -  -  -      inc d
  122 D1:B3DC 52 DD 1F 05     ld.s (ix+REGPC),de
  123 D1:B3E0 1E 08 -  -      ld  e,BASETABLE_STRIDE
  124 D1:B3E2 ED 5C -  -      mlt de
  125 D1:B3E4 21 00 40 D0     ld  hl,PAGETABLE
  126 D1:B3E8 19 -  -  -      add hl,de
  127 D1:B3E9 ED 27 -  -      ld  hl,(hl)
  128 D1:B3EB 1E 00 -  -      ld  e,0
  129 D1:B3ED -  -  -  -  i6502PrepNextPage:
  130 D1:B3ED -  -  -  -  #ifdef COREDEBUG
  131 D1:B3ED F5 -  -  -      push af
  132 D1:B3EE 7E -  -  -          ld  a,(hl)
  133 D1:B3EF DD 77 0F -          ld  (ix+CURRENT_OPCODES+1),a
  134 D1:B3F2 D5 -  -  -          push de
  135 D1:B3F3 E5 -  -  -              push hl
  136 D1:B3F4 DD E5 -  -                  push ix
  137 D1:B3F6 23 -  -  -                      inc hl
  138 D1:B3F7 1C -  -  -                      inc e
  139 D1:B3F8 20 0F -  -                      jr  nz,+_
  140 D1:B3FA DD 56 06 -                      ld  d,(ix+REGPC+1)
  141 D1:B3FD 14 -  -  -                      inc d
  142 D1:B3FE 1E 08 -  -                      ld  e,BASETABLE_STRIDE
  143 D1:B400 ED 5C -  -                      mlt de
  144 D1:B402 21 00 40 D0                     ld  hl,PAGETABLE
  145 D1:B406 19 -  -  -                      add hl,de
  146 D1:B407 ED 27 -  -                      ld  hl,(hl)
  147 D1:B409 7E -  -  -  _:                  ld  a,(hl)
  148 D1:B40A DD 77 10 -                      ld  (ix+CURRENT_OPCODES+2),a
  149 D1:B40D ED 22 00 -                      lea hl,ix
  150 D1:B410 11 80 32 D0                     ld  de,core_memory_ix
  151 D1:B414 B7 -  -  -                      or  a,a
  152 D1:B415 ED 52 -  -                      sbc hl,de
  153 D1:B417 20 FE -  -                      jr  nz,$    ;halt program if IX is not core_memory_ix
  154 D1:B419 -  -  -  -                      ;jr $
  155 D1:B419 FD E5 -  -                      push iy
  156 D1:B41B CD 5A DF D1                         call dbg_printLine
  157 D1:B41F FD E1 -  -                      pop iy
  158 D1:B421 DD 7E 14 -                      ld  a,(ix+CORE_ERROR_LEVEL)
  159 D1:B424 B7 -  -  -                      or  a,a
  160 D1:B425 28 05 -  -                      jr  z,+_
  161 D1:B427 DD 27 11 -                      ld  hl,(ix+CORE_STACK_BASE)
  162 D1:B42A F9 -  -  -                      ld  sp,hl
  163 D1:B42B C9 -  -  -                      ret
  164 D1:B42C DD 31 0B -  _:                  ld  iy,(ix+CYCLES_CURRENT)  ;remove when done with timings
  165 D1:B42F ED 23 00 -                      lea hl,iy+0
  166 D1:B432 11 75 67 00                     ld  de,DEBUG_STEP_START_CYCLE
  167 D1:B436 B7 -  -  -                      or  a,a
  168 D1:B437 ED 52 -  -                      sbc hl,de
  169 D1:B439 D4 10 AA D1                     call nc,waituntilnewkeypress
  170 D1:B43D DD E1 -  -                  pop ix
  171 D1:B43F E1 -  -  -              pop hl
  172 D1:B440 D1 -  -  -          pop de
  173 D1:B441 F1 -  -  -      pop af
  174 D1:B442 -  -  -  -  #endif
  175 D1:B442 E5 -  -  -      push hl
  176 D1:B443 67 -  -  -          ld  h,a
  177 D1:B444 2E 08 -  -          ld  l,BASETABLE_STRIDE
  178 D1:B446 ED 6C -  -          mlt hl
  179 D1:B448 01 04 40 D0         ld  bc,JUMPTABLE
  180 D1:B44C 09 -  -  -          add hl,bc
  181 D1:B44D ED 27 -  -          ld  hl,(hl)     ;jumptable
  182 D1:B44F E3 -  -  -          ex  (sp),hl     ;exch with exec addr, jumpto-via-ret
  183 D1:B450 C9 -  -  -      ret
  184 D1:B451 -  -  -  -  
  185 D1:B451 -  -  -  -  
  186 D1:B451 -  -  -  -  ;Instructions one byte wide returns to the main loop via:
  187 D1:B451 -  -  -  -  ;   JP i6502FinishLoad
  188 D1:B451 -  -  -  -  ;Those with parameters have HL at the address in quetion, and is expected to
  189 D1:B451 -  -  -  -  ;advance HL and E at the end of the instruction. You return to main loop via:
  190 D1:B451 -  -  -  -  ;   JP i6502NextLoad
  191 D1:B451 -  -  -  -  ;Unless you manually advance the pointer to the next instruction.
  192 D1:B451 -  -  -  -  ;You really shouldn't but if you must do that, then also do this:
  193 D1:B451 -  -  -  -  ;   JP i6502FinishLoad
  194 D1:B451 -  -  -  -  ;Remember that register E is very important; it tells you about page boundaries.
  195 D1:B451 -  -  -  -  
  196 D1:B451 -  -  -  -  
  197 D1:B451 -  -  -  -  ;-----------------------------------------------------------------------------    
  198 D1:B451 -  -  -  -  ;-----------------------------------------------------------------------------    
  199 D1:B451 -  -  -  -  
  200 D1:B451 -  -  -  -  ;    ***   *   *  *****  *      *****  **  *  ***** 
  201 D1:B451 -  -  -  -  ;   *   *  *   *    *    *        *    **  *  *     
  202 D1:B451 -  -  -  -  ;   *   *  *   *    *    *        *    * * *  ***   
  203 D1:B451 -  -  -  -  ;   *   *  *   *    *    *        *    *  **  *     
  204 D1:B451 -  -  -  -  ;    ***    ***     *    *****  *****  *  **  ***** 
  205 D1:B451 -  -  -  -  
  206 D1:B451 -  -  -  -  ;-----------------------------------------------------------------------------    
  207 D1:B451 -  -  -  -  ;-----------------------------------------------------------------------------    
  208 D1:B451 -  -  -  -  outline6502_imm:
  209 D1:B451 7E -  -  -      ld  a,(hl)  ;oper uses A
  210 D1:B452 -  -  -  -      ;oper
  211 D1:B452 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  212 D1:B466 ED 33 02 -      ADDCYC(2)
  213 D1:B469 C3 B4 B3 D1     jp i6502NextLoad
  214 D1:B46D -  -  -  -  
  215 D1:B46D -  -  -  -  outline6502_abs:
  216 D1:B46D 4E -  -  -      ld  c,(hl)
  217 D1:B46E 23 -  -  -      inc hl
  218 D1:B46F 1C -  -  -      inc e
  219 D1:B470 20 15 -  -      jr nz,+_
  220 D1:B472 DD 56 06 -      ld  d,(ix+REGPC+1)
  221 D1:B475 14 -  -  -      inc d
  222 D1:B476 52 DD 1F 05     ld.s (ix+REGPC),de
  223 D1:B47A 1E 08 -  -      ld  e,BASETABLE_STRIDE
  224 D1:B47C ED 5C -  -      mlt de
  225 D1:B47E 21 00 40 D0     ld  hl,PAGETABLE
  226 D1:B482 19 -  -  -      add hl,de
  227 D1:B483 ED 27 -  -      ld  hl,(hl) ;
  228 D1:B485 1E 00 -  -      ld  e,0
  229 D1:B487 46 -  -  -  _:  ld  b,(hl)
  230 D1:B488 E5 -  -  -      push hl
  231 D1:B489 50 -  -  -          ld  d,b
  232 D1:B48A 79 -  -  -          ld  a,c
  233 D1:B48B 0E 08 -  -          ld  c,BASETABLE_STRIDE
  234 D1:B48D ED 4C -  -          mlt bc
  235 D1:B48F 21 00 40 D0         ld  hl,PAGETABLE
  236 D1:B493 09 -  -  -          add hl,bc
  237 D1:B494 ED 27 -  -          ld  hl,(hl)
  238 D1:B496 06 00 -  -          ld  b,0
  239 D1:B498 4F -  -  -          ld  c,a
  240 D1:B499 09 -  -  -          add hl,bc   ;full address
  241 D1:B49A -  -  -  -          ;INSERT HARDWARE ACCESS PAGING. REGISTER D CONTAINS ACCESS PAGE
  242 D1:B49A 7E -  -  -          ld  a,(hl)  ;oper uses A
  243 D1:B49B -  -  -  -          ;oper
  244 D1:B49B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  245 D1:B4AF ED 33 03 -      ADDCYC(3)
  246 D1:B4B2 E1 -  -  -      pop hl
  247 D1:B4B3 C3 B4 B3 D1     jp i6502NextLoad
  248 D1:B4B7 -  -  -  -  
  249 D1:B4B7 -  -  -  -  outline6502_zeropage:
  250 D1:B4B7 7E -  -  -      ld  a,(hl)
  251 D1:B4B8 01 00 38 D0     ld  bc,ZEROPAGE
  252 D1:B4BC 81 -  -  -      add a,c
  253 D1:B4BD 4F -  -  -      ld  c,a
  254 D1:B4BE 0A -  -  -      ld  a,(bc)      ;oper uses A
  255 D1:B4BF -  -  -  -      ;HARDWARE ACCESS PAGING NOT ALLOWED. NO HARDWARE INTERACTS WITH PAGE ZERO.
  256 D1:B4BF -  -  -  -      ;oper
  257 D1:B4BF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  258 D1:B4D3 ED 33 03 -      ADDCYC(3)
  259 D1:B4D6 C3 B4 B3 D1     jp i6502NextLoad
  260 D1:B4DA -  -  -  -  
  261 D1:B4DA -  -  -  -  
  262 D1:B4DA -  -  -  -  ;Note: has same split start as abs
  263 D1:B4DA -  -  -  -  outline6502_abs_idx_x:  ;INDEXED WITH X. INDEX WITH Y VARIATION EXISTS. CAREFUL.
  264 D1:B4DA 4E -  -  -      ld  c,(hl)
  265 D1:B4DB 23 -  -  -      inc hl
  266 D1:B4DC 1C -  -  -      inc e
  267 D1:B4DD 20 15 -  -      jr nz,+_
  268 D1:B4DF DD 56 06 -      ld  d,(ix+REGPC+1)
  269 D1:B4E2 14 -  -  -      inc d
  270 D1:B4E3 52 DD 1F 05     ld.s (ix+REGPC),de
  271 D1:B4E7 1E 08 -  -      ld  e,BASETABLE_STRIDE
  272 D1:B4E9 ED 5C -  -      mlt de
  273 D1:B4EB 21 00 40 D0     ld  hl,PAGETABLE
  274 D1:B4EF 19 -  -  -      add hl,de
  275 D1:B4F0 ED 27 -  -      ld  hl,(hl) ;
  276 D1:B4F2 1E 00 -  -      ld  e,0
  277 D1:B4F4 46 -  -  -  _:  ld  b,(hl)
  278 D1:B4F5 E5 -  -  -      push hl
  279 D1:B4F6 50 -  -  -          ld  d,b
  280 D1:B4F7 79 -  -  -          ld  a,c
  281 D1:B4F8 0E 08 -  -          ld  c,BASETABLE_STRIDE
  282 D1:B4FA ED 4C -  -          mlt bc
  283 D1:B4FC 21 00 40 D0         ld  hl,PAGETABLE
  284 D1:B500 09 -  -  -          add hl,bc
  285 D1:B501 ED 27 -  -          ld  hl,(hl)
  286 D1:B503 06 00 -  -          ld  b,0
  287 D1:B505 4F -  -  -          ld  c,a
  288 D1:B506 DD 7E 01 -          ld  a,(ix+REGX)        ;REPLACE WITH REGY WHEN INSTRUCTION CALLS FOR IT
  289 D1:B509 81 -  -  -          add a,c
  290 D1:B50A 30 04 -  -          jr  nc,+_
  291 D1:B50C 04 -  -  -          inc b
  292 D1:B50D 14 -  -  -          inc d
  293 D1:B50E FD 23 -  -          ADDCYC(1)
  294 D1:B510 -  -  -  -  _:      ;INSERT HARDWARE ACCESS PAGING. REGISTER D CONTAINS ACCESS PAGE
  295 D1:B510 09 -  -  -          add hl,bc   ;full address
  296 D1:B511 7E -  -  -          ld  a,(hl)  ;oper uses A
  297 D1:B512 -  -  -  -          ;oper
  298 D1:B512 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  299 D1:B526 ED 33 04 -      ADDCYC(4)
  300 D1:B529 E1 -  -  -      pop hl
  301 D1:B52A C3 B4 B3 D1     jp i6502NextLoad
  302 D1:B52E -  -  -  -  
  303 D1:B52E -  -  -  -  
  304 D1:B52E -  -  -  -  outline6502_zpx:
  305 D1:B52E 7E -  -  -      ld  a,(hl)
  306 D1:B52F 01 00 38 D0     ld  bc,ZEROPAGE
  307 D1:B533 81 -  -  -      add a,c
  308 D1:B534 DD 86 01 -      add a,(ix+REGX)
  309 D1:B537 4F -  -  -      ld  c,a
  310 D1:B538 0A -  -  -      ld  a,(bc)      ;oper uses A
  311 D1:B539 -  -  -  -      ;HARDWARE PAGING NOT ALLOWED. HARDWARE DOES NOT INTERACT WITH PAGE ZERO
  312 D1:B539 -  -  -  -      ;oper
  313 D1:B539 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  314 D1:B54D ED 33 04 -      ADDCYC(4)
  315 D1:B550 C3 B4 B3 D1     jp i6502NextLoad
  316 D1:B554 -  -  -  -      
  317 D1:B554 -  -  -  -  outline6502_zpy:
  318 D1:B554 7E -  -  -      ld  a,(hl)
  319 D1:B555 01 00 38 D0     ld  bc,ZEROPAGE
  320 D1:B559 81 -  -  -      add a,c
  321 D1:B55A DD 86 02 -      add a,(ix+REGY)
  322 D1:B55D 4F -  -  -      ld  c,a
  323 D1:B55E 0A -  -  -      ld  a,(bc)      ;oper uses A
  324 D1:B55F -  -  -  -      ;HARDWARE PAGING NOT ALLOWED. HARDWARE DOES NOT INTERACT WITH PAGE ZERO
  325 D1:B55F -  -  -  -      ;oper
  326 D1:B55F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  327 D1:B573 ED 33 04 -      ADDCYC(4)
  328 D1:B576 C3 B4 B3 D1     jp i6502NextLoad
  329 D1:B57A -  -  -  -  
  330 D1:B57A -  -  -  -  outline6502_preidx_indir:
  331 D1:B57A E5 -  -  -      push hl
  332 D1:B57B 7E -  -  -          ld  a,(hl)
  333 D1:B57C 21 00 38 D0         ld  hl,ZEROPAGE
  334 D1:B580 85 -  -  -          add a,L
  335 D1:B581 DD 86 01 -          add a,(ix+REGX)
  336 D1:B584 6F -  -  -          ld  L,a
  337 D1:B585 7E -  -  -          ld  a,(hl)
  338 D1:B586 2C -  -  -          inc L
  339 D1:B587 56 -  -  -          ld  d,(hl)
  340 D1:B588 42 -  -  -          ld  b,d
  341 D1:B589 0E 08 -  -          ld  c,BASETABLE_STRIDE
  342 D1:B58B ED 4C -  -          mlt bc
  343 D1:B58D 21 00 40 D0         ld  hl,PAGETABLE
  344 D1:B591 09 -  -  -          add hl,bc
  345 D1:B592 ED 27 -  -          ld  hl,(hl)
  346 D1:B594 06 00 -  -          ld  b,0
  347 D1:B596 4F -  -  -          ld  c,a
  348 D1:B597 09 -  -  -          add hl,bc
  349 D1:B598 -  -  -  -          ;INSERT HARDWARE ACCESS PAGING. REGISTER D CONTAINS ACCESS PAGE
  350 D1:B598 7E -  -  -          ld  a,(hl)  ;oper uses A.
  351 D1:B599 -  -  -  -          ;oper
  352 D1:B599 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  353 D1:B5AD ED 33 06 -          ADDCYC(6)
  354 D1:B5B0 E1 -  -  -      pop hl
  355 D1:B5B1 C3 B4 B3 D1     jp i6502NextLoad
  356 D1:B5B5 -  -  -  -  
  357 D1:B5B5 -  -  -  -  outline6502_postidx_indir:
  358 D1:B5B5 E5 -  -  -      push hl
  359 D1:B5B6 7E -  -  -          ld  a,(hl)
  360 D1:B5B7 21 00 38 D0         ld  hl,ZEROPAGE
  361 D1:B5BB 85 -  -  -          add a,L
  362 D1:B5BC 6F -  -  -          ld  L,a
  363 D1:B5BD 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  364 D1:B5BE 2C -  -  -          inc L
  365 D1:B5BF DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  366 D1:B5C2 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  367 D1:B5C3 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  368 D1:B5C5 FD 23 -  -          ADDCYC(1)
  369 D1:B5C7 24 -  -  -          inc h
  370 D1:B5C8 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  371 D1:B5C9 2E 08 -  -          ld  L,BASETABLE_STRIDE
  372 D1:B5CB ED 6C -  -          mlt hl          ;23.
  373 D1:B5CD 01 00 40 D0         ld  bc,PAGETABLE
  374 D1:B5D1 09 -  -  -          add hl,bc
  375 D1:B5D2 ED 27 -  -          ld  hl,(hl)     ;address get.
  376 D1:B5D4 01 00 00 00         ld  bc,0
  377 D1:B5D8 4F -  -  -          ld  c,a
  378 D1:B5D9 09 -  -  -          add hl,bc       ;Full address get.
  379 D1:B5DA 7E -  -  -          ld  a,(hl)
  380 D1:B5DB -  -  -  -          ;INSERT HARDWARE ACCESS PAGING. REGISTER D CONTAINS ACCESS PAGE
  381 D1:B5DB -  -  -  -          ;oper
  382 D1:B5DB DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  383 D1:B5EF ED 33 05 -          ADDCYC(5)
  384 D1:B5F2 E1 -  -  -      pop hl
  385 D1:B5F3 C3 B4 B3 D1     jp i6502NextLoad
  386 D1:B5F7 -  -  -  -  
  387 D1:B5F7 -  -  -  -  ;-----------------------------------------------------------------------------
  388 D1:B5F7 -  -  -  -  ;-----------------------------------------------------------------------------
  389 D1:B5F7 -  -  -  -  ;-----------------------------------------------------------------------------
  390 D1:B5F7 -  -  -  -  
  391 D1:B5F7 -  -  -  -  ;  ***  *   * ****  ****   ***  *   * ***** ***** **  * *****  ***  
  392 D1:B5F7 -  -  -  -  ; *     *   * *   * *   * *   * *   *   *     *   **  * *     *     
  393 D1:B5F7 -  -  -  -  ;  ***  *   * ****  ****  *   * *   *   *     *   * * * ***    ***  
  394 D1:B5F7 -  -  -  -  ;     * *   * *   * *   * *   * *   *   *     *   *  ** *         * 
  395 D1:B5F7 -  -  -  -  ;  ***   ***  ****  *   *  ***   ***    *   ***** *  ** *****  ***  
  396 D1:B5F7 -  -  -  -  
  397 D1:B5F7 -  -  -  -  ;-----------------------------------------------------------------------------
  398 D1:B5F7 -  -  -  -  
  399 D1:B5F7 -  -  -  -  i6502_load_instruction_set:
  400 D1:B5F7 DD 21 04 40 
              D0 -  -  -      ld  ix,JUMPTABLE
  401 D1:B5FC 21 B9 D7 D1     ld  hl,inst6502_instruction_set
  402 D1:B600 06 00 -  -      ld  b,0
  403 D1:B602 ED 17 -  -  _:  ld  de,(hl)
  404 D1:B604 DD 1F 00 -      ld  (ix+0),de
  405 D1:B607 23 -  -  -      inc hl
  406 D1:B608 23 -  -  -      inc hl
  407 D1:B609 23 -  -  -      inc hl
  408 D1:B60A ED 32 08 -      lea ix,ix+BASETABLE_STRIDE
  409 D1:B60D 10 F3 -  -      djnz -_
  410 D1:B60F C9 -  -  -      ret
  411 D1:B610 -  -  -  -  
  412 D1:B610 -  -  -  -  ;HL=Base_ez80_address, C=Numpages_in_map, B=numpages_in_space, E=starting_page
  413 D1:B610 -  -  -  -  ;Example: To map and mirror 2KB RAM at $D03800 inside first 8KB of 6502 space
  414 D1:B610 -  -  -  -  ;HL=$D03800, C=$08, B=$20, E=$00
  415 D1:B610 -  -  -  -  ;Note: B should be a power of two and evenly divisible by C.
  416 D1:B610 -  -  -  -  i6502_map_pages:
  417 D1:B610 16 08 -  -      ld  d,BASETABLE_STRIDE
  418 D1:B612 ED 5C -  -      mlt de
  419 D1:B614 DD 21 00 40 
              D0 -  -  -      ld  ix,PAGETABLE
  420 D1:B619 DD 19 -  -      add ix,de
  421 D1:B61B 78 -  -  -      ld  a,b     ;A = main counter for total number of pages in mapping space
  422 D1:B61C 11 00 01 00     ld  de,256
  423 D1:B620 E5 -  -  -      push hl
  424 D1:B621 FD E1 -  -      pop iy
  425 D1:B623 41 -  -  -  _:  ld  b,c     ;looping for number of pages to map
  426 D1:B624 DD 2F 00 -  _:  ld  (ix+0),hl
  427 D1:B627 19 -  -  -      add hl,de                   ;next page z80
  428 D1:B628 ED 32 08 -      lea ix,ix+BASETABLE_STRIDE  ;next page entry
  429 D1:B62B 3D -  -  -      dec a
  430 D1:B62C C8 -  -  -      ret z
  431 D1:B62D 10 F5 -  -      djnz -_
  432 D1:B62F ED 23 00 -      lea hl,iy+0     ;start z80 pages over again for mirroring
  433 D1:B632 18 EF -  -      jr --_
  434 D1:B634 -  -  -  -  
  435 D1:B634 -  -  -  -  
  436 D1:B634 -  -  -  -  subroutine6502_abs_split_start:
  437 D1:B634 4E -  -  -      ld  c,(hl)
  438 D1:B635 23 -  -  -      inc hl
  439 D1:B636 1C -  -  -      inc e
  440 D1:B637 20 15 -  -      jr nz,+_
  441 D1:B639 DD 56 06 -      ld  d,(ix+REGPC+1)
  442 D1:B63C 14 -  -  -      inc d
  443 D1:B63D 52 DD 1F 05     ld.s (ix+REGPC),de
  444 D1:B641 1E 08 -  -      ld  e,BASETABLE_STRIDE
  445 D1:B643 ED 5C -  -      mlt de
  446 D1:B645 21 00 40 D0     ld  hl,PAGETABLE
  447 D1:B649 19 -  -  -      add hl,de
  448 D1:B64A ED 27 -  -      ld  hl,(hl) ;
  449 D1:B64C 1E 00 -  -      ld  e,0
  450 D1:B64E 46 -  -  -  _:  ld  b,(hl)
  451 D1:B64F C9 -  -  -      ret
  452 D1:B650 -  -  -  -  
  453 D1:B650 -  -  -  -  #define PUSH_ABSXSPLIT call subroutine6502_absx_split_start
  454 D1:B650 -  -  -  -  #define PUSH_ABSXSPLIT_NODEP call subroutine6502_absx_ss_noDep
  455 D1:B650 -  -  -  -  #define PUSH_ABSYSPLIT call subroutine6502_absy_split_start
  456 D1:B650 -  -  -  -  #define PUSH_ABSYSPLIT_NODEP call subroutine6502_absy_ss_noDep
  457 D1:B650 -  -  -  -  
  458 D1:B650 -  -  -  -  subroutine6502_absy_split_start:
  459 D1:B650 DD 4E 02 -      ld  c,(ix+REGY)
  460 D1:B653 18 03 -  -      jr +_
  461 D1:B655 -  -  -  -  
  462 D1:B655 -  -  -  -  subroutine6502_absx_split_start:
  463 D1:B655 DD 4E 01 -      ld  c,(ix+REGX)
  464 D1:B658 7E -  -  -  _:  ld  a,(hl)
  465 D1:B659 23 -  -  -      inc hl
  466 D1:B65A 1C -  -  -      inc e
  467 D1:B65B 20 15 -  -      jr nz,+_
  468 D1:B65D DD 56 06 -      ld  d,(ix+REGPC+1)
  469 D1:B660 14 -  -  -      inc d
  470 D1:B661 52 DD 1F 05     ld.s (ix+REGPC),de
  471 D1:B665 1E 08 -  -      ld  e,BASETABLE_STRIDE
  472 D1:B667 ED 5C -  -      mlt de
  473 D1:B669 21 00 40 D0     ld  hl,PAGETABLE
  474 D1:B66D 19 -  -  -      add hl,de
  475 D1:B66E ED 27 -  -      ld  hl,(hl) ;
  476 D1:B670 1E 00 -  -      ld  e,0
  477 D1:B672 46 -  -  -  _:  ld  b,(hl)
  478 D1:B673 E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  479 D1:B674 E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  480 D1:B675 81 -  -  -          add a,c
  481 D1:B676 30 03 -  -          jr  nc,+_
  482 D1:B678 FD 23 -  -          ADDCYC(1)
  483 D1:B67A 04 -  -  -          inc b
  484 D1:B67B 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  485 D1:B67C 0E 08 -  -          ld  c,BASETABLE_STRIDE
  486 D1:B67E ED 4C -  -          mlt bc
  487 D1:B680 21 00 40 D0         ld  hl,PAGETABLE
  488 D1:B684 09 -  -  -          add hl,bc
  489 D1:B685 ED 27 -  -          ld  hl,(hl)
  490 D1:B687 06 00 -  -          ld  b,0
  491 D1:B689 4F -  -  -          ld  c,a
  492 D1:B68A 09 -  -  -          add hl,bc
  493 D1:B68B C9 -  -  -      ret
  494 D1:B68C -  -  -  -      
  495 D1:B68C -  -  -  -  subroutine6502_absy_ss_noDep:
  496 D1:B68C DD 4E 02 -      ld  c,(ix+REGY)
  497 D1:B68F 18 03 -  -      jr +_
  498 D1:B691 -  -  -  -  subroutine6502_absx_ss_noDep:
  499 D1:B691 DD 4E 01 -      ld  c,(ix+REGX)
  500 D1:B694 7E -  -  -  _:  ld  a,(hl)
  501 D1:B695 23 -  -  -      inc hl
  502 D1:B696 1C -  -  -      inc e
  503 D1:B697 20 15 -  -      jr nz,+_
  504 D1:B699 DD 56 06 -      ld  d,(ix+REGPC+1)
  505 D1:B69C 14 -  -  -      inc d
  506 D1:B69D 52 DD 1F 05     ld.s (ix+REGPC),de
  507 D1:B6A1 1E 08 -  -      ld  e,BASETABLE_STRIDE
  508 D1:B6A3 ED 5C -  -      mlt de
  509 D1:B6A5 21 00 40 D0     ld  hl,PAGETABLE
  510 D1:B6A9 19 -  -  -      add hl,de
  511 D1:B6AA ED 27 -  -      ld  hl,(hl) ;
  512 D1:B6AC 1E 00 -  -      ld  e,0
  513 D1:B6AE 46 -  -  -  _:  ld  b,(hl)
  514 D1:B6AF E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  515 D1:B6B0 E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  516 D1:B6B1 81 -  -  -          add a,c
  517 D1:B6B2 30 01 -  -          jr  nc,+_
  518 D1:B6B4 04 -  -  -          inc b
  519 D1:B6B5 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  520 D1:B6B6 0E 08 -  -          ld  c,BASETABLE_STRIDE
  521 D1:B6B8 ED 4C -  -          mlt bc
  522 D1:B6BA 21 00 40 D0         ld  hl,PAGETABLE
  523 D1:B6BE 09 -  -  -          add hl,bc
  524 D1:B6BF ED 27 -  -          ld  hl,(hl)
  525 D1:B6C1 06 00 -  -          ld  b,0
  526 D1:B6C3 4F -  -  -          ld  c,a
  527 D1:B6C4 09 -  -  -          add hl,bc
  528 D1:B6C5 C9 -  -  -      ret
  529 D1:B6C6 -  -  -  -  
  530 D1:B6C6 -  -  -  -  
  531 D1:B6C6 -  -  -  -  
  532 D1:B6C6 -  -  -  -  
  533 D1:B6C6 -  -  -  -  
  534 D1:B6C6 -  -  -  -  
  535 D1:B6C6 -  -  -  -  
  536 D1:B6C6 -  -  -  -  subroutine6502_adc_combined_end:
  537 D1:B6C6 DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  538 D1:B6C9 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  539 D1:B6CA DD 7E 00 -      ld  a,(ix+REGA)
  540 D1:B6CD 89 -  -  -      adc a,c
  541 D1:B6CE DD 77 00 -      ld  (ix+REGA),a
  542 D1:B6D1 DD 46 04 CB 
              B0 E2 DC B6 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  543 D1:B6F3 C3 B4 B3 D1     jp i6502NextLoad
  544 D1:B6F7 -  -  -  -  
  545 D1:B6F7 -  -  -  -  subroutine6502_sbc_combined_end:
  546 D1:B6F7 DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  547 D1:B6FA 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  548 D1:B6FB DD 7E 00 -      ld  a,(ix+REGA)
  549 D1:B6FE 3F -  -  -      ccf
  550 D1:B6FF 99 -  -  -      sbc a,c
  551 D1:B700 3F -  -  -      ccf
  552 D1:B701 DD 77 00 -      ld  (ix+REGA),a
  553 D1:B704 DD 46 04 CB 
              B0 E2 0F B7 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  554 D1:B726 C3 B4 B3 D1     jp i6502NextLoad
  555 D1:B72A -  -  -  -  
  556 D1:B72A -  -  -  -  subroutine6502_cmp_combined_end:
  557 D1:B72A DD 7E 00 -      ld  a,(ix+REGA)
  558 D1:B72D 90 -  -  -      sub a,b
  559 D1:B72E 3F -  -  -      ccf     ;because the 6502 is strange like that.
  560 D1:B72F DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  561 D1:B749 C3 B4 B3 D1     jp i6502NextLoad
  562 D1:B74D -  -  -  -  
  563 D1:B74D -  -  -  -  subroutine6502_take_branch:
  564 D1:B74D FD 23 -  -      ADDCYC(1)
  565 D1:B74F 7E -  -  -      ld  a,(hl)  ;offset byte
  566 D1:B750 6F -  -  -      ld  L,a
  567 D1:B751 87 -  -  -      add a,a
  568 D1:B752 9F -  -  -      sbc a,a
  569 D1:B753 67 -  -  -      ld  H,a     ;sign-extending offset byte
  570 D1:B754 DD 56 06 -      ld  d,(ix+REGPC+1)
  571 D1:B757 13 -  -  -      inc de
  572 D1:B758 52 19 -  -      add.s hl,de
  573 D1:B75A 7C -  -  -      ld  a,h
  574 D1:B75B BA -  -  -      cp  d       ;is high byte the same?
  575 D1:B75C 28 02 -  -      jr  z,+_    ;if so, do not add another clock
  576 D1:B75E FD 23 -  -      ADDCYC(1)
  577 D1:B760 52 DD 2F 05 _:  ld.s (ix+REGPC),hl
  578 D1:B764 C3 9E B3 D1     jp  i6502FirstLoad
  579 D1:B768 -  -  -  -  
  580 D1:B768 -  -  -  -  
  581 D1:B768 -  -  -  -  ;-----------------------------------------------------------------------------
  582 D1:B768 -  -  -  -  
  583 D1:B768 -  -  -  -  ; *** **  *  *** ***** ***  *   *  *** ***** *** ***  **  *     ***  ***** *****                                                
  584 D1:B768 -  -  -  -  ;  *  **  * *      *   *  * *   * *      *    * *   * **  *    *     *       *                   
  585 D1:B768 -  -  -  -  ;  *  * * *  ***   *   ***  *   * *      *    * *   * * * *     ***  ***     *                          
  586 D1:B768 -  -  -  -  ;  *  *  **     *  *   *  * *   * *      *    * *   * *  **        * *       *                   
  587 D1:B768 -  -  -  -  ; *** *  **  ***   *   *  *  ***   ***   *   *** ***  *  **     ***  *****   *                                 
  588 D1:B768 -  -  -  -  
  589 D1:B768 -  -  -  -  ;-----------------------------------------------------------------------------
  590 D1:B768 -  -  -  -  
  591 D1:B768 -  -  -  -  ;-----------------------------------------------------------------------------
  592 D1:B768 -  -  -  -  ;-----------------------------------------------------------------------------
  593 D1:B768 -  -  -  -  ;-----------------------------------------------------------------------------
  594 D1:B768 -  -  -  -  ;Instructions by type: Transfer Instructions
  595 D1:B768 -  -  -  -  ;LDA - Load Accumulator with Memory
  596 D1:B768 -  -  -  -  ;    M -> A
  597 D1:B768 -  -  -  -  ;    N	Z	C	I	D	V
  598 D1:B768 -  -  -  -  ;    +	+	-	-	-	-
  599 D1:B768 -  -  -  -  
  600 D1:B768 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
  601 D1:B768 -  -  -  -  ;immediate	LDA #oper	A9	2	2
  602 D1:B768 -  -  -  -  inst6502_lda_imm:
  603 D1:B768 7E -  -  -      ld  a,(hl)
  604 D1:B769 DD 77 00 -      ld  (ix+REGA),a
  605 D1:B76C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  606 D1:B780 ED 33 02 -      ADDCYC(2)
  607 D1:B783 C3 B4 B3 D1     jp i6502NextLoad
  608 D1:B787 -  -  -  -  
  609 D1:B787 -  -  -  -  ;zeropage	LDA oper	A5	2	3
  610 D1:B787 -  -  -  -  inst6502_lda_zp:
  611 D1:B787 7E -  -  -      ld  a,(hl)
  612 D1:B788 01 00 38 D0     ld  bc,ZEROPAGE
  613 D1:B78C 81 -  -  -      add a,c
  614 D1:B78D 4F -  -  -      ld  c,a
  615 D1:B78E 0A -  -  -      ld  a,(bc)
  616 D1:B78F DD 77 00 -      ld  (ix+REGA),a
  617 D1:B792 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  618 D1:B7A6 ED 33 03 -      ADDCYC(3)
  619 D1:B7A9 C3 B4 B3 D1     jp i6502NextLoad
  620 D1:B7AD -  -  -  -  
  621 D1:B7AD -  -  -  -  ;zeropage,X	LDA oper,X	B5	2	4 
  622 D1:B7AD -  -  -  -  inst6502_lda_zpx:
  623 D1:B7AD 7E -  -  -      ld  a,(hl)
  624 D1:B7AE 01 00 38 D0     ld  bc,ZEROPAGE
  625 D1:B7B2 81 -  -  -      add a,c
  626 D1:B7B3 DD 86 01 -      add a,(ix+REGX)
  627 D1:B7B6 4F -  -  -      ld  c,a
  628 D1:B7B7 0A -  -  -      ld  a,(bc)
  629 D1:B7B8 DD 77 00 -      ld  (ix+REGA),a
  630 D1:B7BB DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  631 D1:B7CF ED 33 04 -      ADDCYC(4)
  632 D1:B7D2 C3 B4 B3 D1     jp i6502NextLoad
  633 D1:B7D6 -  -  -  -  
  634 D1:B7D6 -  -  -  -  ;absolute	LDA oper	AD	3	4
  635 D1:B7D6 -  -  -  -  inst6502_lda_abs:
  636 D1:B7D6 CD 34 B6 D1     call subroutine6502_abs_split_start
  637 D1:B7DA E5 -  -  -      push hl
  638 D1:B7DB 50 -  -  -          ld  d,b
  639 D1:B7DC 79 -  -  -          ld  a,c
  640 D1:B7DD 0E 08 -  -          ld  c,BASETABLE_STRIDE
  641 D1:B7DF ED 4C -  -          mlt bc
  642 D1:B7E1 21 00 40 D0         ld  hl,PAGETABLE
  643 D1:B7E5 09 -  -  -          add hl,bc
  644 D1:B7E6 ED 27 -  -          ld  hl,(hl)
  645 D1:B7E8 06 00 -  -          ld  b,0
  646 D1:B7EA 4F -  -  -          ld  c,a
  647 D1:B7EB 09 -  -  -          add hl,bc   ;full address
  648 D1:B7EC 7E -  -  -          READ_ACCESS
  649 D1:B7ED DD 77 00 -          ld (ix+REGA),a
  650 D1:B7F0 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  651 D1:B804 ED 33 04 -          ADDCYC(4)
  652 D1:B807 E1 -  -  -      pop hl
  653 D1:B808 C3 B4 B3 D1     jp i6502NextLoad
  654 D1:B80C -  -  -  -  
  655 D1:B80C -  -  -  -  ;absolute,X	LDA oper,X	BD	3	4* 
  656 D1:B80C -  -  -  -  inst6502_lda_absx:
  657 D1:B80C ED 33 04 -      ADDCYC(4)
  658 D1:B80F CD 55 B6 D1     PUSH_ABSXSPLIT
  659 D1:B813 7E -  -  -          READ_ACCESS
  660 D1:B814 DD 77 00 -          ld (ix+REGA),a
  661 D1:B817 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  662 D1:B82B E1 -  -  -      pop hl
  663 D1:B82C C3 B4 B3 D1     jp i6502NextLoad
  664 D1:B830 -  -  -  -  
  665 D1:B830 -  -  -  -  ;absolute,Y	LDA oper,Y	B9	3	4* 
  666 D1:B830 -  -  -  -  inst6502_lda_absy:
  667 D1:B830 ED 33 04 -      ADDCYC(4)
  668 D1:B833 CD 50 B6 D1     PUSH_ABSYSPLIT
  669 D1:B837 7E -  -  -          READ_ACCESS
  670 D1:B838 DD 77 00 -          ld (ix+REGA),a
  671 D1:B83B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  672 D1:B84F E1 -  -  -      pop hl
  673 D1:B850 C3 B4 B3 D1     jp i6502NextLoad
  674 D1:B854 -  -  -  -  
  675 D1:B854 -  -  -  -  ;(indirect,X)	LDA (oper,X)	A1	2	6
  676 D1:B854 -  -  -  -  inst6502_lda_indx:
  677 D1:B854 E5 -  -  -      push hl
  678 D1:B855 7E -  -  -          ld  a,(hl)
  679 D1:B856 21 00 38 D0         ld  hl,ZEROPAGE
  680 D1:B85A 85 -  -  -          add a,L
  681 D1:B85B DD 86 01 -          add a,(ix+REGX)
  682 D1:B85E 6F -  -  -          ld  L,a
  683 D1:B85F 7E -  -  -          ld  a,(hl)
  684 D1:B860 2C -  -  -          inc L
  685 D1:B861 56 -  -  -          ld  d,(hl)
  686 D1:B862 42 -  -  -          ld  b,d
  687 D1:B863 0E 08 -  -          ld  c,BASETABLE_STRIDE
  688 D1:B865 ED 4C -  -          mlt bc
  689 D1:B867 21 00 40 D0         ld  hl,PAGETABLE
  690 D1:B86B 09 -  -  -          add hl,bc
  691 D1:B86C ED 27 -  -          ld  hl,(hl)
  692 D1:B86E 06 00 -  -          ld  b,0
  693 D1:B870 4F -  -  -          ld  c,a
  694 D1:B871 09 -  -  -          add hl,bc
  695 D1:B872 7E -  -  -          READ_ACCESS
  696 D1:B873 DD 77 00 -          ld (ix+REGA),a
  697 D1:B876 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  698 D1:B88A ED 33 06 -          ADDCYC(6)
  699 D1:B88D E1 -  -  -      pop hl
  700 D1:B88E C3 B4 B3 D1     jp i6502NextLoad
  701 D1:B892 -  -  -  -  
  702 D1:B892 -  -  -  -  ;(indirect),Y	LDA (oper),Y	B1	2	5*
  703 D1:B892 -  -  -  -  inst6502_lda_indy:
  704 D1:B892 E5 -  -  -      push hl
  705 D1:B893 7E -  -  -          ld  a,(hl)
  706 D1:B894 21 00 38 D0         ld  hl,ZEROPAGE
  707 D1:B898 85 -  -  -          add a,L
  708 D1:B899 6F -  -  -          ld  L,a
  709 D1:B89A 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  710 D1:B89B 2C -  -  -          inc L
  711 D1:B89C DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  712 D1:B89F 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  713 D1:B8A0 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  714 D1:B8A2 FD 23 -  -          ADDCYC(1)
  715 D1:B8A4 24 -  -  -          inc h
  716 D1:B8A5 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  717 D1:B8A6 2E 08 -  -          ld  L,BASETABLE_STRIDE
  718 D1:B8A8 ED 6C -  -          mlt hl          ;23.
  719 D1:B8AA 01 00 40 D0         ld  bc,PAGETABLE
  720 D1:B8AE 09 -  -  -          add hl,bc
  721 D1:B8AF ED 27 -  -          ld  hl,(hl)     ;address get.
  722 D1:B8B1 01 00 00 00         ld  bc,0
  723 D1:B8B5 4F -  -  -          ld  c,a
  724 D1:B8B6 09 -  -  -          add hl,bc       ;Full address get.
  725 D1:B8B7 7E -  -  -          READ_ACCESS
  726 D1:B8B8 DD 77 00 -          ld  (ix+REGA),a
  727 D1:B8BB DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  728 D1:B8CF ED 33 05 -          ADDCYC(5)
  729 D1:B8D2 E1 -  -  -      pop hl
  730 D1:B8D3 C3 B4 B3 D1     jp i6502NextLoad
  731 D1:B8D7 -  -  -  -  
  732 D1:B8D7 -  -  -  -  ;-----------------------------------------------------------------------------
  733 D1:B8D7 -  -  -  -  ;LDX - Load Index X with Memory
  734 D1:B8D7 -  -  -  -  ;    M -> X
  735 D1:B8D7 -  -  -  -  ;    N	Z	C	I	D	V
  736 D1:B8D7 -  -  -  -  ;    +	+	-	-	-	-
  737 D1:B8D7 -  -  -  -  
  738 D1:B8D7 -  -  -  -  ;immediate	LDX #oper	A2	2	2  
  739 D1:B8D7 -  -  -  -  inst6502_ldx_imm:
  740 D1:B8D7 7E -  -  -      ld  a,(hl)
  741 D1:B8D8 DD 77 01 -      ld  (ix+REGX),a
  742 D1:B8DB DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  743 D1:B8EF ED 33 02 -      ADDCYC(2)
  744 D1:B8F2 C3 B4 B3 D1     jp i6502NextLoad
  745 D1:B8F6 -  -  -  -  
  746 D1:B8F6 -  -  -  -  ;zeropage	LDX oper	A6	2	3 
  747 D1:B8F6 -  -  -  -  inst6502_ldx_zp:
  748 D1:B8F6 7E -  -  -      ld  a,(hl)
  749 D1:B8F7 01 00 38 D0     ld  bc,ZEROPAGE
  750 D1:B8FB 81 -  -  -      add a,c
  751 D1:B8FC 4F -  -  -      ld  c,a
  752 D1:B8FD 0A -  -  -      ld  a,(bc)
  753 D1:B8FE DD 77 01 -      ld  (ix+REGX),a
  754 D1:B901 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  755 D1:B915 ED 33 03 -      ADDCYC(3)
  756 D1:B918 C3 B4 B3 D1     jp i6502NextLoad
  757 D1:B91C -  -  -  -  
  758 D1:B91C -  -  -  -  ;zeropage,Y	LDX oper,Y	B6	2	4  
  759 D1:B91C -  -  -  -  inst6502_ldx_zpy:
  760 D1:B91C 7E -  -  -      ld  a,(hl)
  761 D1:B91D 01 00 38 D0     ld  bc,ZEROPAGE
  762 D1:B921 81 -  -  -      add a,c
  763 D1:B922 DD 86 02 -      add a,(ix+REGY)
  764 D1:B925 4F -  -  -      ld  c,a
  765 D1:B926 0A -  -  -      ld  a,(bc)
  766 D1:B927 DD 77 01 -      ld  (ix+REGX),a
  767 D1:B92A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  768 D1:B93E ED 33 04 -      ADDCYC(4)
  769 D1:B941 C3 B4 B3 D1     jp i6502NextLoad
  770 D1:B945 -  -  -  -  
  771 D1:B945 -  -  -  -  ;absolute	LDX oper	AE	3	4  
  772 D1:B945 -  -  -  -  inst6502_ldx_abs:
  773 D1:B945 CD 34 B6 D1     call subroutine6502_abs_split_start
  774 D1:B949 E5 -  -  -      push hl
  775 D1:B94A 50 -  -  -          ld  d,b
  776 D1:B94B 79 -  -  -          ld  a,c
  777 D1:B94C 0E 08 -  -          ld  c,BASETABLE_STRIDE
  778 D1:B94E ED 4C -  -          mlt bc
  779 D1:B950 21 00 40 D0         ld  hl,PAGETABLE
  780 D1:B954 09 -  -  -          add hl,bc
  781 D1:B955 ED 27 -  -          ld  hl,(hl)
  782 D1:B957 06 00 -  -          ld  b,0
  783 D1:B959 4F -  -  -          ld  c,a
  784 D1:B95A 09 -  -  -          add hl,bc   ;full address
  785 D1:B95B 7E -  -  -          READ_ACCESS
  786 D1:B95C DD 77 01 -          ld (ix+REGX),a
  787 D1:B95F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  788 D1:B973 ED 33 04 -          ADDCYC(4)
  789 D1:B976 E1 -  -  -      pop hl
  790 D1:B977 C3 B4 B3 D1     jp i6502NextLoad
  791 D1:B97B -  -  -  -  
  792 D1:B97B -  -  -  -  ;absolute,Y	LDX oper,Y	BE	3	4* 
  793 D1:B97B -  -  -  -  inst6502_ldx_absy:
  794 D1:B97B ED 33 04 -      ADDCYC(4)
  795 D1:B97E CD 50 B6 D1     PUSH_ABSYSPLIT
  796 D1:B982 7E -  -  -          READ_ACCESS
  797 D1:B983 DD 77 01 -          ld (ix+REGX),a
  798 D1:B986 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  799 D1:B99A E1 -  -  -      pop hl
  800 D1:B99B C3 B4 B3 D1     jp i6502NextLoad
  801 D1:B99F -  -  -  -  
  802 D1:B99F -  -  -  -  ;-----------------------------------------------------------------------------
  803 D1:B99F -  -  -  -  ;LDY -  Load Index Y with Memory
  804 D1:B99F -  -  -  -  ;    M -> Y
  805 D1:B99F -  -  -  -  ;    N	Z	C	I	D	V
  806 D1:B99F -  -  -  -  ;    +	+	-	-	-	-
  807 D1:B99F -  -  -  -  
  808 D1:B99F -  -  -  -  ;immediate	LDY #oper	A0	2	2  
  809 D1:B99F -  -  -  -  inst6502_ldy_imm:
  810 D1:B99F 7E -  -  -      ld  a,(hl)
  811 D1:B9A0 DD 77 02 -      ld  (ix+REGY),a
  812 D1:B9A3 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  813 D1:B9B7 ED 33 02 -      ADDCYC(2)
  814 D1:B9BA C3 B4 B3 D1     jp i6502NextLoad
  815 D1:B9BE -  -  -  -  
  816 D1:B9BE -  -  -  -  ;zeropage	LDY oper	A4	2	3  
  817 D1:B9BE -  -  -  -  inst6502_ldy_zp:
  818 D1:B9BE 7E -  -  -      ld  a,(hl)
  819 D1:B9BF 01 00 38 D0     ld  bc,ZEROPAGE
  820 D1:B9C3 81 -  -  -      add a,c
  821 D1:B9C4 4F -  -  -      ld  c,a
  822 D1:B9C5 0A -  -  -      ld  a,(bc)
  823 D1:B9C6 DD 77 02 -      ld  (ix+REGY),a
  824 D1:B9C9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  825 D1:B9DD ED 33 03 -      ADDCYC(3)
  826 D1:B9E0 C3 B4 B3 D1     jp i6502NextLoad
  827 D1:B9E4 -  -  -  -  
  828 D1:B9E4 -  -  -  -  ;zeropage,X	LDY oper,X	B4	2	4  
  829 D1:B9E4 -  -  -  -  inst6502_ldy_zpx:
  830 D1:B9E4 7E -  -  -      ld  a,(hl)
  831 D1:B9E5 01 00 38 D0     ld  bc,ZEROPAGE
  832 D1:B9E9 81 -  -  -      add a,c
  833 D1:B9EA DD 86 01 -      add a,(ix+REGX)
  834 D1:B9ED 4F -  -  -      ld  c,a
  835 D1:B9EE 0A -  -  -      ld  a,(bc)
  836 D1:B9EF DD 77 02 -      ld  (ix+REGY),a
  837 D1:B9F2 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  838 D1:BA06 ED 33 04 -      ADDCYC(4)
  839 D1:BA09 C3 B4 B3 D1     jp i6502NextLoad
  840 D1:BA0D -  -  -  -  
  841 D1:BA0D -  -  -  -  ;absolute	LDY oper	AC	3	4  
  842 D1:BA0D -  -  -  -  inst6502_ldy_abs:
  843 D1:BA0D CD 34 B6 D1     call subroutine6502_abs_split_start
  844 D1:BA11 E5 -  -  -      push hl
  845 D1:BA12 50 -  -  -          ld  d,b
  846 D1:BA13 79 -  -  -          ld  a,c
  847 D1:BA14 0E 08 -  -          ld  c,BASETABLE_STRIDE
  848 D1:BA16 ED 4C -  -          mlt bc
  849 D1:BA18 21 00 40 D0         ld  hl,PAGETABLE
  850 D1:BA1C 09 -  -  -          add hl,bc
  851 D1:BA1D ED 27 -  -          ld  hl,(hl)
  852 D1:BA1F 06 00 -  -          ld  b,0
  853 D1:BA21 4F -  -  -          ld  c,a
  854 D1:BA22 09 -  -  -          add hl,bc   ;full address
  855 D1:BA23 7E -  -  -          READ_ACCESS
  856 D1:BA24 DD 77 02 -          ld (ix+REGY),a
  857 D1:BA27 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  858 D1:BA3B ED 33 04 -          ADDCYC(4)
  859 D1:BA3E E1 -  -  -      pop hl
  860 D1:BA3F C3 B4 B3 D1     jp i6502NextLoad
  861 D1:BA43 -  -  -  -  
  862 D1:BA43 -  -  -  -  ;absolute,X	LDY oper,X	BC	3	4* 
  863 D1:BA43 -  -  -  -  inst6502_ldy_absx:
  864 D1:BA43 ED 33 04 -      ADDCYC(4)
  865 D1:BA46 CD 55 B6 D1     PUSH_ABSXSPLIT
  866 D1:BA4A 7E -  -  -          READ_ACCESS
  867 D1:BA4B DD 77 02 -          ld (ix+REGY),a
  868 D1:BA4E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  869 D1:BA62 E1 -  -  -      pop hl
  870 D1:BA63 C3 B4 B3 D1     jp i6502NextLoad
  871 D1:BA67 -  -  -  -  
  872 D1:BA67 -  -  -  -  ;-----------------------------------------------------------------------------
  873 D1:BA67 -  -  -  -  ;STA - Store Accumulator in Memory
  874 D1:BA67 -  -  -  -  ;    A -> M
  875 D1:BA67 -  -  -  -  ;    N	Z	C	I	D	V
  876 D1:BA67 -  -  -  -  ;    -	-	-	-	-	-
  877 D1:BA67 -  -  -  -  
  878 D1:BA67 -  -  -  -  ;zeropage	STA oper	85	2	3  
  879 D1:BA67 -  -  -  -  inst6502_sta_zp:
  880 D1:BA67 7E -  -  -      ld  a,(hl)
  881 D1:BA68 01 00 38 D0     ld  bc,ZEROPAGE
  882 D1:BA6C 81 -  -  -      add a,c
  883 D1:BA6D 4F -  -  -      ld  c,a
  884 D1:BA6E DD 7E 00 -      ld  a,(ix+REGA)
  885 D1:BA71 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  886 D1:BA72 ED 33 03 -      ADDCYC(3)
  887 D1:BA75 C3 B4 B3 D1     jp i6502NextLoad
  888 D1:BA79 -  -  -  -  
  889 D1:BA79 -  -  -  -  ;zeropage,X	STA oper,X	95	2	4  
  890 D1:BA79 -  -  -  -  inst6502_sta_zpx:
  891 D1:BA79 7E -  -  -      ld  a,(hl)
  892 D1:BA7A 01 00 38 D0     ld  bc,ZEROPAGE
  893 D1:BA7E 81 -  -  -      add a,c
  894 D1:BA7F DD 86 01 -      add a,(ix+REGX)
  895 D1:BA82 4F -  -  -      ld  c,a
  896 D1:BA83 DD 7E 00 -      ld  a,(ix+REGA)
  897 D1:BA86 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  898 D1:BA87 ED 33 04 -      ADDCYC(4)
  899 D1:BA8A C3 B4 B3 D1     jp i6502NextLoad
  900 D1:BA8E -  -  -  -  
  901 D1:BA8E -  -  -  -  ;absolute	STA oper	8D	3	4
  902 D1:BA8E -  -  -  -  inst6502_sta_abs:
  903 D1:BA8E CD 34 B6 D1     call subroutine6502_abs_split_start
  904 D1:BA92 E5 -  -  -      push hl
  905 D1:BA93 50 -  -  -          ld  d,b
  906 D1:BA94 79 -  -  -          ld  a,c
  907 D1:BA95 0E 08 -  -          ld  c,BASETABLE_STRIDE
  908 D1:BA97 ED 4C -  -          mlt bc
  909 D1:BA99 21 00 40 D0         ld  hl,PAGETABLE
  910 D1:BA9D 09 -  -  -          add hl,bc
  911 D1:BA9E ED 27 -  -          ld  hl,(hl)
  912 D1:BAA0 06 00 -  -          ld  b,0
  913 D1:BAA2 4F -  -  -          ld  c,a
  914 D1:BAA3 09 -  -  -          add hl,bc   ;full address
  915 D1:BAA4 DD 46 00 -          ld  b,(ix+REGA)
  916 D1:BAA7 70 -  -  -          WRITE_ACCESS
  917 D1:BAA8 ED 33 04 -          ADDCYC(4)
  918 D1:BAAB E1 -  -  -      pop hl
  919 D1:BAAC C3 B4 B3 D1     jp i6502NextLoad
  920 D1:BAB0 -  -  -  -  
  921 D1:BAB0 -  -  -  -  ;absolute,X	STA oper,X	9D	3	5  
  922 D1:BAB0 -  -  -  -  inst6502_sta_absx:
  923 D1:BAB0 ED 33 05 -      ADDCYC(5)
  924 D1:BAB3 CD 91 B6 D1     PUSH_ABSXSPLIT_NODEP
  925 D1:BAB7 DD 46 00 -          ld  b,(ix+REGA)
  926 D1:BABA 70 -  -  -          WRITE_ACCESS
  927 D1:BABB E1 -  -  -      pop hl
  928 D1:BABC C3 B4 B3 D1     jp i6502NextLoad
  929 D1:BAC0 -  -  -  -  
  930 D1:BAC0 -  -  -  -  ;absolute,Y	STA oper,Y	99	3	5  
  931 D1:BAC0 -  -  -  -  inst6502_sta_absy:
  932 D1:BAC0 ED 33 05 -      ADDCYC(5)
  933 D1:BAC3 CD 8C B6 D1     PUSH_ABSYSPLIT_NODEP
  934 D1:BAC7 DD 46 00 -          ld  b,(ix+REGA)
  935 D1:BACA 70 -  -  -          WRITE_ACCESS
  936 D1:BACB E1 -  -  -      pop hl
  937 D1:BACC C3 B4 B3 D1     jp i6502NextLoad
  938 D1:BAD0 -  -  -  -  
  939 D1:BAD0 -  -  -  -  ;(indirect,X)	STA (oper,X)	81	2	6  
  940 D1:BAD0 -  -  -  -  inst6502_sta_indx:
  941 D1:BAD0 E5 -  -  -      push hl
  942 D1:BAD1 7E -  -  -          ld  a,(hl)
  943 D1:BAD2 21 00 38 D0         ld  hl,ZEROPAGE
  944 D1:BAD6 85 -  -  -          add a,L
  945 D1:BAD7 DD 86 01 -          add a,(ix+REGX)
  946 D1:BADA 6F -  -  -          ld  L,a
  947 D1:BADB 7E -  -  -          ld  a,(hl)
  948 D1:BADC 2C -  -  -          inc L
  949 D1:BADD 56 -  -  -          ld  d,(hl)
  950 D1:BADE 42 -  -  -          ld  b,d
  951 D1:BADF 0E 08 -  -          ld  c,BASETABLE_STRIDE
  952 D1:BAE1 ED 4C -  -          mlt bc
  953 D1:BAE3 21 00 40 D0         ld  hl,PAGETABLE
  954 D1:BAE7 09 -  -  -          add hl,bc
  955 D1:BAE8 ED 27 -  -          ld  hl,(hl)
  956 D1:BAEA 06 00 -  -          ld  b,0
  957 D1:BAEC 4F -  -  -          ld  c,a
  958 D1:BAED 09 -  -  -          add hl,bc
  959 D1:BAEE DD 46 00 -          ld  b,(ix+REGA)
  960 D1:BAF1 70 -  -  -          WRITE_ACCESS
  961 D1:BAF2 ED 33 06 -          ADDCYC(6)
  962 D1:BAF5 E1 -  -  -      pop hl
  963 D1:BAF6 C3 B4 B3 D1     jp i6502NextLoad
  964 D1:BAFA -  -  -  -  
  965 D1:BAFA -  -  -  -  ;(indirect),Y	STA (oper),Y	91	2	6  
  966 D1:BAFA -  -  -  -  inst6502_sta_indy:
  967 D1:BAFA E5 -  -  -      push hl
  968 D1:BAFB 7E -  -  -          ld  a,(hl)
  969 D1:BAFC 21 00 38 D0         ld  hl,ZEROPAGE
  970 D1:BB00 85 -  -  -          add a,L
  971 D1:BB01 6F -  -  -          ld  L,a
  972 D1:BB02 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  973 D1:BB03 2C -  -  -          inc L
  974 D1:BB04 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  975 D1:BB07 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  976 D1:BB08 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  977 D1:BB0A 24 -  -  -          inc h
  978 D1:BB0B 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  979 D1:BB0C 2E 08 -  -          ld  L,BASETABLE_STRIDE
  980 D1:BB0E ED 6C -  -          mlt hl          ;23.
  981 D1:BB10 01 00 40 D0         ld  bc,PAGETABLE
  982 D1:BB14 09 -  -  -          add hl,bc
  983 D1:BB15 ED 27 -  -          ld  hl,(hl)     ;address get.
  984 D1:BB17 01 00 00 00         ld  bc,0
  985 D1:BB1B 4F -  -  -          ld  c,a
  986 D1:BB1C 09 -  -  -          add hl,bc       ;Full address get.
  987 D1:BB1D DD 46 00 -          ld  b,(ix+REGA)
  988 D1:BB20 70 -  -  -          WRITE_ACCESS
  989 D1:BB21 ED 33 06 -          ADDCYC(6)
  990 D1:BB24 E1 -  -  -      pop hl
  991 D1:BB25 C3 B4 B3 D1     jp i6502NextLoad
  992 D1:BB29 -  -  -  -  
  993 D1:BB29 -  -  -  -  ;-----------------------------------------------------------------------------
  994 D1:BB29 -  -  -  -  ;STX - Store Index X in Memory
  995 D1:BB29 -  -  -  -  ;    X -> M
  996 D1:BB29 -  -  -  -  ;    N	Z	C	I	D	V
  997 D1:BB29 -  -  -  -  ;    -	-	-	-	-	-
  998 D1:BB29 -  -  -  -  
  999 D1:BB29 -  -  -  -  ;zeropage	STX oper	86	2	3  
 1000 D1:BB29 -  -  -  -  inst6502_stx_zp:
 1001 D1:BB29 7E -  -  -      ld  a,(hl)
 1002 D1:BB2A 01 00 38 D0     ld  bc,ZEROPAGE
 1003 D1:BB2E 81 -  -  -      add a,c
 1004 D1:BB2F 4F -  -  -      ld  c,a
 1005 D1:BB30 DD 7E 01 -      ld  a,(ix+REGX)
 1006 D1:BB33 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
 1007 D1:BB34 ED 33 03 -      ADDCYC(3)
 1008 D1:BB37 C3 B4 B3 D1     jp i6502NextLoad
 1009 D1:BB3B -  -  -  -  
 1010 D1:BB3B -  -  -  -  ;zeropage,Y	STX oper,Y	96	2	4  
 1011 D1:BB3B -  -  -  -  inst6502_stx_zpy:
 1012 D1:BB3B 7E -  -  -      ld  a,(hl)
 1013 D1:BB3C 01 00 38 D0     ld  bc,ZEROPAGE
 1014 D1:BB40 81 -  -  -      add a,c
 1015 D1:BB41 DD 86 02 -      add a,(ix+REGY)
 1016 D1:BB44 4F -  -  -      ld  c,a
 1017 D1:BB45 DD 7E 01 -      ld  a,(ix+REGX)
 1018 D1:BB48 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
 1019 D1:BB49 ED 33 04 -      ADDCYC(4)
 1020 D1:BB4C C3 B4 B3 D1     jp i6502NextLoad
 1021 D1:BB50 -  -  -  -  
 1022 D1:BB50 -  -  -  -  ;absolute	STX oper	8E	3	4  
 1023 D1:BB50 -  -  -  -  inst6502_stx_abs:
 1024 D1:BB50 CD 34 B6 D1     call subroutine6502_abs_split_start
 1025 D1:BB54 E5 -  -  -      push hl
 1026 D1:BB55 50 -  -  -          ld  d,b
 1027 D1:BB56 79 -  -  -          ld  a,c
 1028 D1:BB57 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1029 D1:BB59 ED 4C -  -          mlt bc
 1030 D1:BB5B 21 00 40 D0         ld  hl,PAGETABLE
 1031 D1:BB5F 09 -  -  -          add hl,bc
 1032 D1:BB60 ED 27 -  -          ld  hl,(hl)
 1033 D1:BB62 06 00 -  -          ld  b,0
 1034 D1:BB64 4F -  -  -          ld  c,a
 1035 D1:BB65 09 -  -  -          add hl,bc   ;full address
 1036 D1:BB66 DD 46 01 -          ld  b,(ix+REGX)
 1037 D1:BB69 70 -  -  -          WRITE_ACCESS
 1038 D1:BB6A ED 33 04 -          ADDCYC(4)
 1039 D1:BB6D E1 -  -  -      pop hl
 1040 D1:BB6E C3 B4 B3 D1     jp i6502NextLoad
 1041 D1:BB72 -  -  -  -  
 1042 D1:BB72 -  -  -  -  ;-----------------------------------------------------------------------------
 1043 D1:BB72 -  -  -  -  ;STY - Store Index Y in Memory
 1044 D1:BB72 -  -  -  -  ;    Y -> M
 1045 D1:BB72 -  -  -  -  ;    N	Z	C	I	D	V
 1046 D1:BB72 -  -  -  -  ;    -	-	-	-	-	-
 1047 D1:BB72 -  -  -  -  
 1048 D1:BB72 -  -  -  -  ;zeropage	STY oper	84	2	3  
 1049 D1:BB72 -  -  -  -  inst6502_sty_zp:
 1050 D1:BB72 7E -  -  -      ld  a,(hl)
 1051 D1:BB73 01 00 38 D0     ld  bc,ZEROPAGE
 1052 D1:BB77 81 -  -  -      add a,c
 1053 D1:BB78 4F -  -  -      ld  c,a
 1054 D1:BB79 DD 7E 02 -      ld  a,(ix+REGY)
 1055 D1:BB7C 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
 1056 D1:BB7D ED 33 03 -      ADDCYC(3)
 1057 D1:BB80 C3 B4 B3 D1     jp i6502NextLoad
 1058 D1:BB84 -  -  -  -  
 1059 D1:BB84 -  -  -  -  ;zeropage,X	STY oper,X	94	2	4  
 1060 D1:BB84 -  -  -  -  inst6502_sty_zpx:
 1061 D1:BB84 7E -  -  -      ld  a,(hl)
 1062 D1:BB85 01 00 38 D0     ld  bc,ZEROPAGE
 1063 D1:BB89 81 -  -  -      add a,c
 1064 D1:BB8A DD 86 01 -      add a,(ix+REGX)
 1065 D1:BB8D 4F -  -  -      ld  c,a
 1066 D1:BB8E DD 7E 02 -      ld  a,(ix+REGY)
 1067 D1:BB91 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
 1068 D1:BB92 ED 33 04 -      ADDCYC(4)
 1069 D1:BB95 C3 B4 B3 D1     jp i6502NextLoad
 1070 D1:BB99 -  -  -  -  
 1071 D1:BB99 -  -  -  -  ;absolute	STY oper	8C	3	4  
 1072 D1:BB99 -  -  -  -  inst6502_sty_abs:
 1073 D1:BB99 CD 34 B6 D1     call subroutine6502_abs_split_start
 1074 D1:BB9D E5 -  -  -      push hl
 1075 D1:BB9E 50 -  -  -          ld  d,b
 1076 D1:BB9F 79 -  -  -          ld  a,c
 1077 D1:BBA0 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1078 D1:BBA2 ED 4C -  -          mlt bc
 1079 D1:BBA4 21 00 40 D0         ld  hl,PAGETABLE
 1080 D1:BBA8 09 -  -  -          add hl,bc
 1081 D1:BBA9 ED 27 -  -          ld  hl,(hl)
 1082 D1:BBAB 06 00 -  -          ld  b,0
 1083 D1:BBAD 4F -  -  -          ld  c,a
 1084 D1:BBAE 09 -  -  -          add hl,bc   ;full address
 1085 D1:BBAF DD 46 02 -          ld  b,(ix+REGY)
 1086 D1:BBB2 70 -  -  -          WRITE_ACCESS
 1087 D1:BBB3 ED 33 04 -          ADDCYC(4)
 1088 D1:BBB6 E1 -  -  -      pop hl
 1089 D1:BBB7 C3 B4 B3 D1     jp i6502NextLoad
 1090 D1:BBBB -  -  -  -  
 1091 D1:BBBB -  -  -  -  ;-----------------------------------------------------------------------------
 1092 D1:BBBB -  -  -  -  ;TAX - Transfer Accumulator to Index X [A -> X]
 1093 D1:BBBB -  -  -  -  ;N	Z	C	I	D	V
 1094 D1:BBBB -  -  -  -  ;+	+	-	-	-	-
 1095 D1:BBBB -  -  -  -  ;implied	TAX	AA	1	2
 1096 D1:BBBB -  -  -  -  inst6502_tax:
 1097 D1:BBBB DD 7E 00 -      ld  a,(ix+REGA)
 1098 D1:BBBE DD 77 01 -      ld  (ix+REGX),a
 1099 D1:BBC1 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1100 D1:BBD5 ED 33 02 -      ADDCYC(2)
 1101 D1:BBD8 C3 CD B3 D1     jp i6502FinishLoad
 1102 D1:BBDC -  -  -  -  
 1103 D1:BBDC -  -  -  -  ;TAY - Transfer Accumulator to Index Y [A -> Y]
 1104 D1:BBDC -  -  -  -  ;N	Z	C	I	D	V
 1105 D1:BBDC -  -  -  -  ;+	+	-	-	-	-
 1106 D1:BBDC -  -  -  -  ;implied	TAY	A8	1	2
 1107 D1:BBDC -  -  -  -  inst6502_tay:
 1108 D1:BBDC DD 7E 00 -      ld  a,(ix+REGA)
 1109 D1:BBDF DD 77 02 -      ld  (ix+REGY),a
 1110 D1:BBE2 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1111 D1:BBF6 ED 33 02 -      ADDCYC(2)
 1112 D1:BBF9 C3 CD B3 D1     jp i6502FinishLoad
 1113 D1:BBFD -  -  -  -  
 1114 D1:BBFD -  -  -  -  ;TSX - Transfer Stack Pointer to Index X [SP -> X]
 1115 D1:BBFD -  -  -  -  ;N	Z	C	I	D	V
 1116 D1:BBFD -  -  -  -  ;+	+	-	-	-	-
 1117 D1:BBFD -  -  -  -  ;implied	TSX	BA	1	2
 1118 D1:BBFD -  -  -  -  inst6502_tsx:
 1119 D1:BBFD DD 7E 03 -      ld  a,(ix+REGSP)
 1120 D1:BC00 DD 77 01 -      ld  (ix+REGX),a
 1121 D1:BC03 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1122 D1:BC17 ED 33 02 -      ADDCYC(2)
 1123 D1:BC1A C3 CD B3 D1     jp i6502FinishLoad
 1124 D1:BC1E -  -  -  -  
 1125 D1:BC1E -  -  -  -  ;TXA - Transfer Index X to Accumulator [X -> A]
 1126 D1:BC1E -  -  -  -  ;N	Z	C	I	D	V
 1127 D1:BC1E -  -  -  -  ;+	+	-	-	-	-
 1128 D1:BC1E -  -  -  -  ;implied	TXA	8A	1	2
 1129 D1:BC1E -  -  -  -  inst6502_txa:
 1130 D1:BC1E DD 7E 01 -      ld  a,(ix+REGX)
 1131 D1:BC21 DD 77 00 -      ld  (ix+REGA),a
 1132 D1:BC24 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1133 D1:BC38 ED 33 02 -      ADDCYC(2)
 1134 D1:BC3B C3 CD B3 D1     jp i6502FinishLoad
 1135 D1:BC3F -  -  -  -  
 1136 D1:BC3F -  -  -  -  ;TXS - Transfer Index X to Stack Pointer [X -> SP]
 1137 D1:BC3F -  -  -  -  ;N	Z	C	I	D	V
 1138 D1:BC3F -  -  -  -  ;-	-	-	-	-	-
 1139 D1:BC3F -  -  -  -  ;implied	TXS	9A	1	2
 1140 D1:BC3F -  -  -  -  inst6502_txs:
 1141 D1:BC3F DD 7E 01 -      ld  a,(ix+REGX)
 1142 D1:BC42 DD 77 03 -      ld  (ix+REGSP),a
 1143 D1:BC45 ED 33 02 -      ADDCYC(2)
 1144 D1:BC48 C3 CD B3 D1     jp i6502FinishLoad
 1145 D1:BC4C -  -  -  -  
 1146 D1:BC4C -  -  -  -  ;TYA - Transfer Index Y to Accumulator [Y -> A]
 1147 D1:BC4C -  -  -  -  ;N	Z	C	I	D	V
 1148 D1:BC4C -  -  -  -  ;+	+	-	-	-	-
 1149 D1:BC4C -  -  -  -  ;implied	TYA	98	1	2
 1150 D1:BC4C -  -  -  -  inst6502_tya:
 1151 D1:BC4C DD 7E 02 -      ld  a,(ix+REGY)
 1152 D1:BC4F DD 77 00 -      ld  (ix+REGA),a
 1153 D1:BC52 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1154 D1:BC66 ED 33 02 -      ADDCYC(2)
 1155 D1:BC69 C3 CD B3 D1     jp i6502FinishLoad
 1156 D1:BC6D -  -  -  -  
 1157 D1:BC6D -  -  -  -  ;-----------------------------------------------------------------------------
 1158 D1:BC6D -  -  -  -  ;-----------------------------------------------------------------------------
 1159 D1:BC6D -  -  -  -  ;-----------------------------------------------------------------------------
 1160 D1:BC6D -  -  -  -  ;Instructions by type: Stack Instructions
 1161 D1:BC6D -  -  -  -  ;PHA - Push Accumulator on Stack
 1162 D1:BC6D -  -  -  -  ;    push A
 1163 D1:BC6D -  -  -  -  ;    N	Z	C	I	D	V
 1164 D1:BC6D -  -  -  -  ;    -	-	-	-	-	-
 1165 D1:BC6D -  -  -  -  ;implied	PHA	48	1	3 
 1166 D1:BC6D -  -  -  -  inst6502_pha:
 1167 D1:BC6D ED 33 03 -      ADDCYC(3)
 1168 D1:BC70 DD 7E 00 -      ld  a,(ix+REGA)
 1169 D1:BC73 01 00 39 D0     ld  bc,STACKBASE
 1170 D1:BC77 DD 4E 03 -      ld  c,(ix+REGSP)
 1171 D1:BC7A 02 -  -  -      ld  (bc),a
 1172 D1:BC7B 0D -  -  -      dec c
 1173 D1:BC7C DD 71 03 -      ld  (ix+REGSP),c
 1174 D1:BC7F C3 CD B3 D1     jp i6502FinishLoad
 1175 D1:BC83 -  -  -  -  
 1176 D1:BC83 -  -  -  -  ;PHP - Push Processor Status on Stack
 1177 D1:BC83 -  -  -  -  ;    The status register will be pushed with the break
 1178 D1:BC83 -  -  -  -  ;    flag and bit 5 set to 1.
 1179 D1:BC83 -  -  -  -  ;    push SR
 1180 D1:BC83 -  -  -  -  ;    N	Z	C	I	D	V
 1181 D1:BC83 -  -  -  -  ;    -	-	-	-	-	-
 1182 D1:BC83 -  -  -  -  ;implied	PHP	08	1	3  
 1183 D1:BC83 -  -  -  -  inst6502_php:
 1184 D1:BC83 ED 33 03 -      ADDCYC(3)
 1185 D1:BC86 DD 7E 04 -      ld  a,(ix+REGSR)
 1186 D1:BC89 F6 30 -  -      or  a,%00110000
 1187 D1:BC8B 01 00 39 D0     ld  bc,STACKBASE
 1188 D1:BC8F DD 4E 03 -      ld  c,(ix+REGSP)
 1189 D1:BC92 02 -  -  -      ld  (bc),a
 1190 D1:BC93 0D -  -  -      dec c
 1191 D1:BC94 DD 71 03 -      ld  (ix+REGSP),c
 1192 D1:BC97 C3 CD B3 D1     jp i6502FinishLoad
 1193 D1:BC9B -  -  -  -  
 1194 D1:BC9B -  -  -  -  
 1195 D1:BC9B -  -  -  -  
 1196 D1:BC9B -  -  -  -  ;PLA - Pull Accumulator from Stack
 1197 D1:BC9B -  -  -  -  ;    pull A
 1198 D1:BC9B -  -  -  -  ;    N	Z	C	I	D	V
 1199 D1:BC9B -  -  -  -  ;    +	+	-	-	-	-
 1200 D1:BC9B -  -  -  -  ;implied	PLA	68	1	4  
 1201 D1:BC9B -  -  -  -  inst6502_pla:
 1202 D1:BC9B ED 33 04 -      ADDCYC(4)
 1203 D1:BC9E 01 00 39 D0     ld  bc,STACKBASE
 1204 D1:BCA2 DD 4E 03 -      ld  c,(ix+REGSP)
 1205 D1:BCA5 0C -  -  -      inc c
 1206 D1:BCA6 0A -  -  -      ld  a,(bc)
 1207 D1:BCA7 DD 71 03 -      ld  (ix+REGSP),c
 1208 D1:BCAA DD 77 00 -      ld  (ix+REGA),a
 1209 D1:BCAD DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1210 D1:BCC1 C3 CD B3 D1     jp i6502FinishLoad
 1211 D1:BCC5 -  -  -  -  
 1212 D1:BCC5 -  -  -  -  ;PLP - Pull Processor Status from Stack
 1213 D1:BCC5 -  -  -  -  ;    The status register will be pulled with the break
 1214 D1:BCC5 -  -  -  -  ;    flag and bit 5 ignored.
 1215 D1:BCC5 -  -  -  -  ;    pull SR
 1216 D1:BCC5 -  -  -  -  ;    N	Z	C	I	D	V
 1217 D1:BCC5 -  -  -  -  ;    from stack
 1218 D1:BCC5 -  -  -  -  ;implied	PLP	28	1	4  
 1219 D1:BCC5 -  -  -  -  inst6502_plp:
 1220 D1:BCC5 ED 33 04 -      ADDCYC(4)
 1221 D1:BCC8 01 00 39 D0     ld  bc,STACKBASE
 1222 D1:BCCC DD 4E 03 -      ld  c,(ix+REGSP)
 1223 D1:BCCF 0C -  -  -      inc c
 1224 D1:BCD0 0A -  -  -      ld  a,(bc)
 1225 D1:BCD1 DD 71 03 -      ld  (ix+REGSP),c
 1226 D1:BCD4 DD 46 04 -      ld  b,(ix+REGSR)
 1227 D1:BCD7 A8 -  -  -      xor a,b
 1228 D1:BCD8 E6 CF -  -      and a,%11001111
 1229 D1:BCDA A8 -  -  -      xor a,b
 1230 D1:BCDB DD 77 04 -      ld  (ix+REGSR),a
 1231 D1:BCDE C3 CD B3 D1     jp i6502FinishLoad
 1232 D1:BCE2 -  -  -  -  
 1233 D1:BCE2 -  -  -  -  
 1234 D1:BCE2 -  -  -  -  ;-----------------------------------------------------------------------------
 1235 D1:BCE2 -  -  -  -  ;-----------------------------------------------------------------------------
 1236 D1:BCE2 -  -  -  -  ;-----------------------------------------------------------------------------
 1237 D1:BCE2 -  -  -  -  ;Instructions by type: Decrements and Increments
 1238 D1:BCE2 -  -  -  -  
 1239 D1:BCE2 -  -  -  -  ;DEC -  Decrement Memory by One
 1240 D1:BCE2 -  -  -  -  ;    M - 1 -> M
 1241 D1:BCE2 -  -  -  -  ;    N	Z	C	I	D	V
 1242 D1:BCE2 -  -  -  -  ;    +	+	-	-	-	-
 1243 D1:BCE2 -  -  -  -  ;    addressing	assembler	opc	bytes	cycles
 1244 D1:BCE2 -  -  -  -  
 1245 D1:BCE2 -  -  -  -  ;    zeropage	DEC oper	C6	2	5  
 1246 D1:BCE2 -  -  -  -  inst6502_dec_zp:
 1247 D1:BCE2 7E -  -  -      ld  a,(hl)
 1248 D1:BCE3 01 00 38 D0     ld  bc,ZEROPAGE
 1249 D1:BCE7 81 -  -  -      add a,c
 1250 D1:BCE8 4F -  -  -      ld  c,a
 1251 D1:BCE9 0A -  -  -      ld  a,(bc)
 1252 D1:BCEA 3D -  -  -      dec a
 1253 D1:BCEB 02 -  -  -      ld  (bc),a
 1254 D1:BCEC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1255 D1:BD00 ED 33 05 -      ADDCYC(5)
 1256 D1:BD03 C3 B4 B3 D1     jp i6502NextLoad
 1257 D1:BD07 -  -  -  -  
 1258 D1:BD07 -  -  -  -  ;    zeropage,X	DEC oper,X	D6	2	6  
 1259 D1:BD07 -  -  -  -  inst6502_dec_zpx:
 1260 D1:BD07 7E -  -  -      ld  a,(hl)
 1261 D1:BD08 01 00 38 D0     ld  bc,ZEROPAGE
 1262 D1:BD0C 81 -  -  -      add a,c
 1263 D1:BD0D DD 86 01 -      add a,(ix+REGX)
 1264 D1:BD10 4F -  -  -      ld  c,a
 1265 D1:BD11 0A -  -  -      ld  a,(bc)
 1266 D1:BD12 3D -  -  -      dec a
 1267 D1:BD13 02 -  -  -      ld  (bc),a
 1268 D1:BD14 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1269 D1:BD28 ED 33 06 -      ADDCYC(6)
 1270 D1:BD2B C3 B4 B3 D1     jp i6502NextLoad
 1271 D1:BD2F -  -  -  -  
 1272 D1:BD2F -  -  -  -  ;    absolute	DEC oper	CE	3	6  
 1273 D1:BD2F -  -  -  -  inst6502_dec_abs:
 1274 D1:BD2F CD 34 B6 D1     call subroutine6502_abs_split_start
 1275 D1:BD33 E5 -  -  -      push hl
 1276 D1:BD34 50 -  -  -          ld  d,b
 1277 D1:BD35 79 -  -  -          ld  a,c
 1278 D1:BD36 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1279 D1:BD38 ED 4C -  -          mlt bc
 1280 D1:BD3A 21 00 40 D0         ld  hl,PAGETABLE
 1281 D1:BD3E 09 -  -  -          add hl,bc
 1282 D1:BD3F ED 27 -  -          ld  hl,(hl)
 1283 D1:BD41 06 00 -  -          ld  b,0
 1284 D1:BD43 4F -  -  -          ld  c,a
 1285 D1:BD44 09 -  -  -          add hl,bc   ;full address
 1286 D1:BD45 7E -  -  -          READ_ACCESS
 1287 D1:BD46 3D -  -  -          dec a
 1288 D1:BD47 47 -  -  -          ld  b,a
 1289 D1:BD48 -  -  -  -          ;
 1290 D1:BD48 DD 7E 04 -          ld  a,(ix+REGSR)
 1291 D1:BD4B CB 8F -  -          res SF_ZERO,a
 1292 D1:BD4D 20 02 -  -          jr  nz,$+4
 1293 D1:BD4F CB CF -  -          set SF_ZERO,a
 1294 D1:BD51 CB BF -  -          res SF_NEG,a
 1295 D1:BD53 F2 59 BD D1         jp  p,$+6
 1296 D1:BD57 CB FF -  -          set SF_NEG,a
 1297 D1:BD59 DD 77 04 -          ld  (ix+REGSR),a
 1298 D1:BD5C -  -  -  -          ;
 1299 D1:BD5C 70 -  -  -          WRITE_ACCESS
 1300 D1:BD5D ED 33 06 -          ADDCYC(6)
 1301 D1:BD60 E1 -  -  -      pop hl
 1302 D1:BD61 C3 B4 B3 D1     jp i6502NextLoad
 1303 D1:BD65 -  -  -  -  
 1304 D1:BD65 -  -  -  -  ;    absolute,X	DEC oper,X	DE	3	7  
 1305 D1:BD65 -  -  -  -  inst6502_dec_absx:
 1306 D1:BD65 ED 33 07 -      ADDCYC(7)
 1307 D1:BD68 CD 91 B6 D1     PUSH_ABSXSPLIT_NODEP
 1308 D1:BD6C 7E -  -  -          READ_ACCESS
 1309 D1:BD6D 3D -  -  -          dec a
 1310 D1:BD6E 47 -  -  -          ld  b,a
 1311 D1:BD6F -  -  -  -          ;
 1312 D1:BD6F DD 7E 04 -          ld  a,(ix+REGSR)
 1313 D1:BD72 CB 8F -  -          res SF_ZERO,a
 1314 D1:BD74 20 02 -  -          jr  nz,$+4
 1315 D1:BD76 CB CF -  -          set SF_ZERO,a
 1316 D1:BD78 CB BF -  -          res SF_NEG,a
 1317 D1:BD7A F2 80 BD D1         jp  p,$+6
 1318 D1:BD7E CB FF -  -          set SF_NEG,a
 1319 D1:BD80 DD 77 04 -          ld  (ix+REGSR),a
 1320 D1:BD83 -  -  -  -          ;
 1321 D1:BD83 70 -  -  -          WRITE_ACCESS
 1322 D1:BD84 E1 -  -  -      pop hl
 1323 D1:BD85 C3 B4 B3 D1     jp i6502NextLoad
 1324 D1:BD89 -  -  -  -  
 1325 D1:BD89 -  -  -  -  ;DEX - Decrement Index X by One [X - 1 -> X]
 1326 D1:BD89 -  -  -  -  ;Flags altered: NZ
 1327 D1:BD89 -  -  -  -  ;implied	DEX	CA	1	2  
 1328 D1:BD89 -  -  -  -  inst6502_dex:
 1329 D1:BD89 DD 35 01 -      dec (ix+REGX)
 1330 D1:BD8C DD 7E 04 -  _:  ld  a,(ix+REGSR)
 1331 D1:BD8F CB 8F -  -      res SF_ZERO,a
 1332 D1:BD91 20 02 -  -      jr  nz,$+4
 1333 D1:BD93 CB CF -  -      set SF_ZERO,a
 1334 D1:BD95 CB BF -  -      res SF_NEG,a
 1335 D1:BD97 F2 9D BD D1     jp  p,$+6
 1336 D1:BD9B CB FF -  -      set SF_NEG,a
 1337 D1:BD9D DD 77 04 -      ld  (ix+REGSR),a
 1338 D1:BDA0 ED 33 02 -      ADDCYC(2)
 1339 D1:BDA3 C3 CD B3 D1     jp i6502FinishLoad
 1340 D1:BDA7 -  -  -  -  
 1341 D1:BDA7 -  -  -  -  ;DEY - Decrement Index Y by One [Y - 1 -> Y]
 1342 D1:BDA7 -  -  -  -  ;Flags altered: NZ
 1343 D1:BDA7 -  -  -  -  ;implied	DEY	88	1	2  
 1344 D1:BDA7 -  -  -  -  inst6502_dey:
 1345 D1:BDA7 DD 35 02 -      dec (ix+REGY)
 1346 D1:BDAA 18 E0 -  -      jr  -_
 1347 D1:BDAC -  -  -  -  
 1348 D1:BDAC -  -  -  -  
 1349 D1:BDAC -  -  -  -  ;INX - Increment Index X by One [X + 1 -> X]
 1350 D1:BDAC -  -  -  -  ;Flags altered: NZ
 1351 D1:BDAC -  -  -  -  ;implied	INX	E8	1	2  
 1352 D1:BDAC -  -  -  -  inst6502_inx:
 1353 D1:BDAC DD 34 01 -      inc (ix+REGX)
 1354 D1:BDAF 18 DB -  -      jr  -_
 1355 D1:BDB1 -  -  -  -  
 1356 D1:BDB1 -  -  -  -  
 1357 D1:BDB1 -  -  -  -  ;INY - Increment Index Y by One [Y + 1 -> Y]
 1358 D1:BDB1 -  -  -  -  ;Flags altered: NZ
 1359 D1:BDB1 -  -  -  -  ;implied	INY	C8	1	2  
 1360 D1:BDB1 -  -  -  -  inst6502_iny:
 1361 D1:BDB1 DD 34 02 -      inc (ix+REGY)
 1362 D1:BDB4 18 D6 -  -      jr  -_
 1363 D1:BDB6 -  -  -  -  
 1364 D1:BDB6 -  -  -  -  
 1365 D1:BDB6 -  -  -  -  ;INC - Increment Memory by One
 1366 D1:BDB6 -  -  -  -  ;    M + 1 -> M
 1367 D1:BDB6 -  -  -  -  ;    N	Z	C	I	D	V
 1368 D1:BDB6 -  -  -  -  ;    +	+	-	-	-	-
 1369 D1:BDB6 -  -  -  -  
 1370 D1:BDB6 -  -  -  -  ;zeropage	INC oper	E6	2	5  
 1371 D1:BDB6 -  -  -  -  inst6502_inc_zp:
 1372 D1:BDB6 7E -  -  -      ld  a,(hl)
 1373 D1:BDB7 01 00 38 D0     ld  bc,ZEROPAGE
 1374 D1:BDBB 81 -  -  -      add a,c
 1375 D1:BDBC 4F -  -  -      ld  c,a
 1376 D1:BDBD 0A -  -  -      ld  a,(bc)
 1377 D1:BDBE 3C -  -  -      inc a
 1378 D1:BDBF 02 -  -  -      ld  (bc),a
 1379 D1:BDC0 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1380 D1:BDD4 ED 33 05 -      ADDCYC(5)
 1381 D1:BDD7 C3 B4 B3 D1     jp i6502NextLoad
 1382 D1:BDDB -  -  -  -  
 1383 D1:BDDB -  -  -  -  ;zeropage,X	INC oper,X	F6	2	6  
 1384 D1:BDDB -  -  -  -  inst6502_inc_zpx:
 1385 D1:BDDB 7E -  -  -      ld  a,(hl)
 1386 D1:BDDC 01 00 38 D0     ld  bc,ZEROPAGE
 1387 D1:BDE0 81 -  -  -      add a,c
 1388 D1:BDE1 DD 86 01 -      add a,(ix+REGX)
 1389 D1:BDE4 4F -  -  -      ld  c,a
 1390 D1:BDE5 0A -  -  -      ld  a,(bc)
 1391 D1:BDE6 3C -  -  -      inc a
 1392 D1:BDE7 02 -  -  -      ld  (bc),a
 1393 D1:BDE8 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1394 D1:BDFC ED 33 06 -      ADDCYC(6)
 1395 D1:BDFF C3 B4 B3 D1     jp i6502NextLoad
 1396 D1:BE03 -  -  -  -      
 1397 D1:BE03 -  -  -  -  ;absolute	INC oper	EE	3	6
 1398 D1:BE03 -  -  -  -  inst6502_inc_abs:
 1399 D1:BE03 CD 34 B6 D1     call subroutine6502_abs_split_start
 1400 D1:BE07 E5 -  -  -      push hl
 1401 D1:BE08 50 -  -  -          ld  d,b
 1402 D1:BE09 79 -  -  -          ld  a,c
 1403 D1:BE0A 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1404 D1:BE0C ED 4C -  -          mlt bc
 1405 D1:BE0E 21 00 40 D0         ld  hl,PAGETABLE
 1406 D1:BE12 09 -  -  -          add hl,bc
 1407 D1:BE13 ED 27 -  -          ld  hl,(hl)
 1408 D1:BE15 06 00 -  -          ld  b,0
 1409 D1:BE17 4F -  -  -          ld  c,a
 1410 D1:BE18 09 -  -  -          add hl,bc   ;full address
 1411 D1:BE19 7E -  -  -          READ_ACCESS
 1412 D1:BE1A 3C -  -  -          inc a
 1413 D1:BE1B 47 -  -  -          ld  b,a
 1414 D1:BE1C -  -  -  -          ;
 1415 D1:BE1C DD 7E 04 -          ld  a,(ix+REGSR)
 1416 D1:BE1F CB 8F -  -          res SF_ZERO,a
 1417 D1:BE21 20 02 -  -          jr  nz,$+4
 1418 D1:BE23 CB CF -  -          set SF_ZERO,a
 1419 D1:BE25 CB BF -  -          res SF_NEG,a
 1420 D1:BE27 F2 2D BE D1         jp  p,$+6
 1421 D1:BE2B CB FF -  -          set SF_NEG,a
 1422 D1:BE2D DD 77 04 -          ld  (ix+REGSR),a
 1423 D1:BE30 -  -  -  -          ;
 1424 D1:BE30 70 -  -  -          WRITE_ACCESS
 1425 D1:BE31 ED 33 06 -          ADDCYC(6)
 1426 D1:BE34 E1 -  -  -      pop hl
 1427 D1:BE35 C3 B4 B3 D1     jp i6502NextLoad
 1428 D1:BE39 -  -  -  -  
 1429 D1:BE39 -  -  -  -  ;absolute,X	INC oper,X	FE	3	7  
 1430 D1:BE39 -  -  -  -  inst6502_inc_absx:
 1431 D1:BE39 ED 33 07 -      ADDCYC(7)
 1432 D1:BE3C CD 91 B6 D1     PUSH_ABSXSPLIT_NODEP
 1433 D1:BE40 7E -  -  -          READ_ACCESS
 1434 D1:BE41 3C -  -  -          inc a
 1435 D1:BE42 47 -  -  -          ld  b,a
 1436 D1:BE43 -  -  -  -          ;
 1437 D1:BE43 DD 7E 04 -          ld  a,(ix+REGSR)
 1438 D1:BE46 CB 8F -  -          res SF_ZERO,a
 1439 D1:BE48 20 02 -  -          jr  nz,$+4
 1440 D1:BE4A CB CF -  -          set SF_ZERO,a
 1441 D1:BE4C CB BF -  -          res SF_NEG,a
 1442 D1:BE4E F2 54 BE D1         jp  p,$+6
 1443 D1:BE52 CB FF -  -          set SF_NEG,a
 1444 D1:BE54 DD 77 04 -          ld  (ix+REGSR),a
 1445 D1:BE57 -  -  -  -          ;
 1446 D1:BE57 70 -  -  -          WRITE_ACCESS
 1447 D1:BE58 E1 -  -  -      pop hl
 1448 D1:BE59 C3 B4 B3 D1     jp i6502NextLoad
 1449 D1:BE5D -  -  -  -  
 1450 D1:BE5D -  -  -  -  ;-----------------------------------------------------------------------------
 1451 D1:BE5D -  -  -  -  ;-----------------------------------------------------------------------------
 1452 D1:BE5D -  -  -  -  ;-----------------------------------------------------------------------------
 1453 D1:BE5D -  -  -  -  ;Instructions by type: Arithmetic Operations
 1454 D1:BE5D -  -  -  -  ;ADC - Add Memory to Accumulator with Carry  [A + M + C -> A, C]
 1455 D1:BE5D -  -  -  -  ;    N	Z	C	I	D	V
 1456 D1:BE5D -  -  -  -  ;    +	+	+	-	-	+
 1457 D1:BE5D -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1458 D1:BE5D -  -  -  -  
 1459 D1:BE5D -  -  -  -  ;immediate	ADC #oper	69	2	2  
 1460 D1:BE5D -  -  -  -  inst6502_adc_imm:
 1461 D1:BE5D ED 33 02 -      ADDCYC(2)
 1462 D1:BE60 4E -  -  -      ld  c,(hl)
 1463 D1:BE61 C3 C6 B6 D1     jp  subroutine6502_adc_combined_end
 1464 D1:BE65 -  -  -  -      
 1465 D1:BE65 -  -  -  -  
 1466 D1:BE65 -  -  -  -  ;zeropage	ADC oper	65	2	3
 1467 D1:BE65 -  -  -  -  inst6502_adc_zp:
 1468 D1:BE65 ED 33 03 -      ADDCYC(3)
 1469 D1:BE68 7E -  -  -      ld  a,(hl)
 1470 D1:BE69 01 00 38 D0     ld  bc,ZEROPAGE
 1471 D1:BE6D 81 -  -  -      add a,c
 1472 D1:BE6E 4F -  -  -      ld  c,a
 1473 D1:BE6F 0A -  -  -      ld  a,(bc)
 1474 D1:BE70 4F -  -  -      ld  c,a
 1475 D1:BE71 C3 C6 B6 D1     jp  subroutine6502_adc_combined_end
 1476 D1:BE75 -  -  -  -  
 1477 D1:BE75 -  -  -  -  ;zeropage,X	ADC oper,X	75	2	4  
 1478 D1:BE75 -  -  -  -  inst6502_adc_zpx:
 1479 D1:BE75 ED 33 04 -      ADDCYC(4)
 1480 D1:BE78 7E -  -  -      ld  a,(hl)
 1481 D1:BE79 DD 86 01 -      add a,(ix+REGX)
 1482 D1:BE7C 01 00 38 D0     ld  bc,ZEROPAGE
 1483 D1:BE80 81 -  -  -      add a,c
 1484 D1:BE81 4F -  -  -      ld  c,a
 1485 D1:BE82 0A -  -  -      ld  a,(bc)
 1486 D1:BE83 4F -  -  -      ld  c,a
 1487 D1:BE84 C3 C6 B6 D1     jp  subroutine6502_adc_combined_end
 1488 D1:BE88 -  -  -  -  
 1489 D1:BE88 -  -  -  -  ;absolute	ADC oper	6D	3	4  
 1490 D1:BE88 -  -  -  -  inst6502_adc_abs:
 1491 D1:BE88 ED 33 04 -      ADDCYC(4)
 1492 D1:BE8B CD 34 B6 D1     call subroutine6502_abs_split_start
 1493 D1:BE8F E5 -  -  -      push hl
 1494 D1:BE90 50 -  -  -          ld  d,b
 1495 D1:BE91 79 -  -  -          ld  a,c
 1496 D1:BE92 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1497 D1:BE94 ED 4C -  -          mlt bc
 1498 D1:BE96 21 00 40 D0         ld  hl,PAGETABLE
 1499 D1:BE9A 09 -  -  -          add hl,bc
 1500 D1:BE9B ED 27 -  -          ld  hl,(hl)
 1501 D1:BE9D 06 00 -  -          ld  b,0
 1502 D1:BE9F 4F -  -  -          ld  c,a
 1503 D1:BEA0 09 -  -  -          add hl,bc   ;full address
 1504 D1:BEA1 7E -  -  -          READ_ACCESS
 1505 D1:BEA2 E1 -  -  -      pop hl
 1506 D1:BEA3 4F -  -  -      ld  c,a
 1507 D1:BEA4 C3 C6 B6 D1     jp  subroutine6502_adc_combined_end
 1508 D1:BEA8 -  -  -  -  
 1509 D1:BEA8 -  -  -  -  ;absolute,X	ADC oper,X	7D	3	4* 
 1510 D1:BEA8 -  -  -  -  inst6502_adc_absx:
 1511 D1:BEA8 ED 33 04 -      ADDCYC(4)
 1512 D1:BEAB CD 55 B6 D1     PUSH_ABSXSPLIT
 1513 D1:BEAF 7E -  -  -          READ_ACCESS
 1514 D1:BEB0 E1 -  -  -      pop hl
 1515 D1:BEB1 4F -  -  -      ld  c,a
 1516 D1:BEB2 C3 C6 B6 D1     jp  subroutine6502_adc_combined_end
 1517 D1:BEB6 -  -  -  -  
 1518 D1:BEB6 -  -  -  -  ;absolute,Y	ADC oper,Y	79	3	4*
 1519 D1:BEB6 -  -  -  -  inst6502_adc_absy:
 1520 D1:BEB6 ED 33 04 -      ADDCYC(4)
 1521 D1:BEB9 CD 50 B6 D1     PUSH_ABSYSPLIT
 1522 D1:BEBD 7E -  -  -          READ_ACCESS
 1523 D1:BEBE E1 -  -  -      pop hl
 1524 D1:BEBF 4F -  -  -      ld  c,a
 1525 D1:BEC0 C3 C6 B6 D1     jp  subroutine6502_adc_combined_end
 1526 D1:BEC4 -  -  -  -  
 1527 D1:BEC4 -  -  -  -  ;(indirect,X)	ADC (oper,X)	61	2	6  
 1528 D1:BEC4 -  -  -  -  inst6502_adc_indx:
 1529 D1:BEC4 ED 33 06 -      ADDCYC(6)
 1530 D1:BEC7 E5 -  -  -      push hl
 1531 D1:BEC8 7E -  -  -          ld  a,(hl)
 1532 D1:BEC9 21 00 38 D0         ld  hl,ZEROPAGE
 1533 D1:BECD 85 -  -  -          add a,L
 1534 D1:BECE DD 86 01 -          add a,(ix+REGX)
 1535 D1:BED1 6F -  -  -          ld  L,a
 1536 D1:BED2 7E -  -  -          ld  a,(hl)
 1537 D1:BED3 2C -  -  -          inc L
 1538 D1:BED4 56 -  -  -          ld  d,(hl)
 1539 D1:BED5 42 -  -  -          ld  b,d
 1540 D1:BED6 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1541 D1:BED8 ED 4C -  -          mlt bc
 1542 D1:BEDA 21 00 40 D0         ld  hl,PAGETABLE
 1543 D1:BEDE 09 -  -  -          add hl,bc
 1544 D1:BEDF ED 27 -  -          ld  hl,(hl)
 1545 D1:BEE1 06 00 -  -          ld  b,0
 1546 D1:BEE3 4F -  -  -          ld  c,a
 1547 D1:BEE4 09 -  -  -          add hl,bc
 1548 D1:BEE5 7E -  -  -          READ_ACCESS
 1549 D1:BEE6 E1 -  -  -      pop hl
 1550 D1:BEE7 4F -  -  -      ld  c,a
 1551 D1:BEE8 C3 C6 B6 D1     jp  subroutine6502_adc_combined_end
 1552 D1:BEEC -  -  -  -  
 1553 D1:BEEC -  -  -  -  ;(indirect),Y	ADC (oper),Y	71	2	5* 
 1554 D1:BEEC -  -  -  -  inst6502_adc_indy:
 1555 D1:BEEC ED 33 05 -      ADDCYC(5)
 1556 D1:BEEF E5 -  -  -      push hl
 1557 D1:BEF0 7E -  -  -          ld  a,(hl)
 1558 D1:BEF1 21 00 38 D0         ld  hl,ZEROPAGE
 1559 D1:BEF5 85 -  -  -          add a,L
 1560 D1:BEF6 6F -  -  -          ld  L,a
 1561 D1:BEF7 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1562 D1:BEF8 2C -  -  -          inc L
 1563 D1:BEF9 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1564 D1:BEFC 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1565 D1:BEFD 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1566 D1:BEFF FD 23 -  -          ADDCYC(1)
 1567 D1:BF01 24 -  -  -          inc h
 1568 D1:BF02 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1569 D1:BF03 2E 08 -  -          ld  L,BASETABLE_STRIDE
 1570 D1:BF05 ED 6C -  -          mlt hl          ;23.
 1571 D1:BF07 01 00 40 D0         ld  bc,PAGETABLE
 1572 D1:BF0B 09 -  -  -          add hl,bc
 1573 D1:BF0C ED 27 -  -          ld  hl,(hl)     ;address get.
 1574 D1:BF0E 01 00 00 00         ld  bc,0
 1575 D1:BF12 4F -  -  -          ld  c,a
 1576 D1:BF13 09 -  -  -          add hl,bc       ;Full address get.
 1577 D1:BF14 7E -  -  -          READ_ACCESS
 1578 D1:BF15 E1 -  -  -      pop hl
 1579 D1:BF16 4F -  -  -      ld  c,a
 1580 D1:BF17 C3 C6 B6 D1     jp  subroutine6502_adc_combined_end
 1581 D1:BF1B -  -  -  -  
 1582 D1:BF1B -  -  -  -  
 1583 D1:BF1B -  -  -  -  ;SBC - Subtract Memory from Accumulator with Borrow
 1584 D1:BF1B -  -  -  -  ;A - M - C̅ -> A
 1585 D1:BF1B -  -  -  -  ;N	Z	C	I	D	V
 1586 D1:BF1B -  -  -  -  ;+	+	+	-	-	+
 1587 D1:BF1B -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1588 D1:BF1B -  -  -  -  
 1589 D1:BF1B -  -  -  -  ;immediate	SBC #oper	E9	2	2  
 1590 D1:BF1B -  -  -  -  inst6502_sbc_imm:
 1591 D1:BF1B ED 33 02 -      ADDCYC(2)
 1592 D1:BF1E 4E -  -  -      ld  c,(hl)
 1593 D1:BF1F C3 F7 B6 D1     jp  subroutine6502_sbc_combined_end
 1594 D1:BF23 -  -  -  -  
 1595 D1:BF23 -  -  -  -  ;zeropage	SBC oper	E5	2	3  
 1596 D1:BF23 -  -  -  -  inst6502_sbc_zp:
 1597 D1:BF23 ED 33 03 -      ADDCYC(3)
 1598 D1:BF26 7E -  -  -      ld  a,(hl)
 1599 D1:BF27 01 00 38 D0     ld  bc,ZEROPAGE
 1600 D1:BF2B 81 -  -  -      add a,c
 1601 D1:BF2C 4F -  -  -      ld  c,a
 1602 D1:BF2D 0A -  -  -      ld  a,(bc)
 1603 D1:BF2E 4F -  -  -      ld  c,a
 1604 D1:BF2F C3 F7 B6 D1     jp  subroutine6502_sbc_combined_end
 1605 D1:BF33 -  -  -  -  
 1606 D1:BF33 -  -  -  -  ;zeropage,X	SBC oper,X	F5	2	4  
 1607 D1:BF33 -  -  -  -  inst6502_sbc_zpx:
 1608 D1:BF33 ED 33 04 -      ADDCYC(4)
 1609 D1:BF36 7E -  -  -      ld  a,(hl)
 1610 D1:BF37 DD 86 01 -      add a,(ix+REGX)
 1611 D1:BF3A 01 00 38 D0     ld  bc,ZEROPAGE
 1612 D1:BF3E 81 -  -  -      add a,c
 1613 D1:BF3F 4F -  -  -      ld  c,a
 1614 D1:BF40 0A -  -  -      ld  a,(bc)
 1615 D1:BF41 4F -  -  -      ld  c,a
 1616 D1:BF42 C3 F7 B6 D1     jp  subroutine6502_sbc_combined_end
 1617 D1:BF46 -  -  -  -  
 1618 D1:BF46 -  -  -  -  ;absolute	SBC oper	ED	3	4  
 1619 D1:BF46 -  -  -  -  inst6502_sbc_abs:
 1620 D1:BF46 ED 33 04 -      ADDCYC(4)
 1621 D1:BF49 CD 34 B6 D1     call subroutine6502_abs_split_start
 1622 D1:BF4D E5 -  -  -      push hl
 1623 D1:BF4E 50 -  -  -          ld  d,b
 1624 D1:BF4F 79 -  -  -          ld  a,c
 1625 D1:BF50 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1626 D1:BF52 ED 4C -  -          mlt bc
 1627 D1:BF54 21 00 40 D0         ld  hl,PAGETABLE
 1628 D1:BF58 09 -  -  -          add hl,bc
 1629 D1:BF59 ED 27 -  -          ld  hl,(hl)
 1630 D1:BF5B 06 00 -  -          ld  b,0
 1631 D1:BF5D 4F -  -  -          ld  c,a
 1632 D1:BF5E 09 -  -  -          add hl,bc   ;full address
 1633 D1:BF5F 7E -  -  -          READ_ACCESS
 1634 D1:BF60 E1 -  -  -      pop hl
 1635 D1:BF61 4F -  -  -      ld  c,a
 1636 D1:BF62 C3 F7 B6 D1     jp  subroutine6502_sbc_combined_end
 1637 D1:BF66 -  -  -  -  
 1638 D1:BF66 -  -  -  -  ;absolute,X	SBC oper,X	FD	3	4* 
 1639 D1:BF66 -  -  -  -  inst6502_sbc_absx:
 1640 D1:BF66 ED 33 04 -      ADDCYC(4)
 1641 D1:BF69 CD 55 B6 D1     PUSH_ABSXSPLIT
 1642 D1:BF6D 7E -  -  -          READ_ACCESS
 1643 D1:BF6E E1 -  -  -      pop hl
 1644 D1:BF6F 4F -  -  -      ld  c,a
 1645 D1:BF70 C3 F7 B6 D1     jp  subroutine6502_sbc_combined_end
 1646 D1:BF74 -  -  -  -  
 1647 D1:BF74 -  -  -  -  ;absolute,Y	SBC oper,Y	F9	3	4* 
 1648 D1:BF74 -  -  -  -  inst6502_sbc_absy:
 1649 D1:BF74 ED 33 04 -      ADDCYC(4)
 1650 D1:BF77 CD 50 B6 D1     PUSH_ABSYSPLIT
 1651 D1:BF7B 7E -  -  -          READ_ACCESS
 1652 D1:BF7C E1 -  -  -      pop hl
 1653 D1:BF7D 4F -  -  -      ld  c,a
 1654 D1:BF7E C3 F7 B6 D1     jp  subroutine6502_sbc_combined_end
 1655 D1:BF82 -  -  -  -  
 1656 D1:BF82 -  -  -  -  ;(indirect,X)	SBC (oper,X)	E1	2	6  
 1657 D1:BF82 -  -  -  -  inst6502_sbc_indx:
 1658 D1:BF82 ED 33 06 -      ADDCYC(6)
 1659 D1:BF85 E5 -  -  -      push hl
 1660 D1:BF86 7E -  -  -          ld  a,(hl)
 1661 D1:BF87 21 00 38 D0         ld  hl,ZEROPAGE
 1662 D1:BF8B 85 -  -  -          add a,L
 1663 D1:BF8C DD 86 01 -          add a,(ix+REGX)
 1664 D1:BF8F 6F -  -  -          ld  L,a
 1665 D1:BF90 7E -  -  -          ld  a,(hl)
 1666 D1:BF91 2C -  -  -          inc L
 1667 D1:BF92 56 -  -  -          ld  d,(hl)
 1668 D1:BF93 42 -  -  -          ld  b,d
 1669 D1:BF94 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1670 D1:BF96 ED 4C -  -          mlt bc
 1671 D1:BF98 21 00 40 D0         ld  hl,PAGETABLE
 1672 D1:BF9C 09 -  -  -          add hl,bc
 1673 D1:BF9D ED 27 -  -          ld  hl,(hl)
 1674 D1:BF9F 06 00 -  -          ld  b,0
 1675 D1:BFA1 4F -  -  -          ld  c,a
 1676 D1:BFA2 09 -  -  -          add hl,bc
 1677 D1:BFA3 7E -  -  -          READ_ACCESS
 1678 D1:BFA4 E1 -  -  -      pop hl
 1679 D1:BFA5 4F -  -  -      ld  c,a
 1680 D1:BFA6 C3 F7 B6 D1     jp  subroutine6502_sbc_combined_end
 1681 D1:BFAA -  -  -  -  
 1682 D1:BFAA -  -  -  -  ;(indirect),Y	SBC (oper),Y	F1	2	5* 
 1683 D1:BFAA -  -  -  -  inst6502_sbc_indy:
 1684 D1:BFAA ED 33 05 -      ADDCYC(5)
 1685 D1:BFAD E5 -  -  -      push hl
 1686 D1:BFAE 7E -  -  -          ld  a,(hl)
 1687 D1:BFAF 21 00 38 D0         ld  hl,ZEROPAGE
 1688 D1:BFB3 85 -  -  -          add a,L
 1689 D1:BFB4 6F -  -  -          ld  L,a
 1690 D1:BFB5 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1691 D1:BFB6 2C -  -  -          inc L
 1692 D1:BFB7 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1693 D1:BFBA 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1694 D1:BFBB 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1695 D1:BFBD FD 23 -  -          ADDCYC(1)
 1696 D1:BFBF 24 -  -  -          inc h
 1697 D1:BFC0 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1698 D1:BFC1 2E 08 -  -          ld  L,BASETABLE_STRIDE
 1699 D1:BFC3 ED 6C -  -          mlt hl          ;23.
 1700 D1:BFC5 01 00 40 D0         ld  bc,PAGETABLE
 1701 D1:BFC9 09 -  -  -          add hl,bc
 1702 D1:BFCA ED 27 -  -          ld  hl,(hl)     ;address get.
 1703 D1:BFCC 01 00 00 00         ld  bc,0
 1704 D1:BFD0 4F -  -  -          ld  c,a
 1705 D1:BFD1 09 -  -  -          add hl,bc       ;Full address get.
 1706 D1:BFD2 7E -  -  -          READ_ACCESS
 1707 D1:BFD3 E1 -  -  -      pop hl
 1708 D1:BFD4 4F -  -  -      ld  c,a
 1709 D1:BFD5 C3 F7 B6 D1     jp  subroutine6502_sbc_combined_end
 1710 D1:BFD9 -  -  -  -  
 1711 D1:BFD9 -  -  -  -  
 1712 D1:BFD9 -  -  -  -  
 1713 D1:BFD9 -  -  -  -  ;-----------------------------------------------------------------------------
 1714 D1:BFD9 -  -  -  -  ;-----------------------------------------------------------------------------
 1715 D1:BFD9 -  -  -  -  ;-----------------------------------------------------------------------------
 1716 D1:BFD9 -  -  -  -  ;Instructions by type: Logical Operations
 1717 D1:BFD9 -  -  -  -  
 1718 D1:BFD9 -  -  -  -  ;AND - AND Memory with Accumulator
 1719 D1:BFD9 -  -  -  -  ;A AND M -> A
 1720 D1:BFD9 -  -  -  -  ;N	Z	C	I	D	V
 1721 D1:BFD9 -  -  -  -  ;+	+	-	-	-	-
 1722 D1:BFD9 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1723 D1:BFD9 -  -  -  -  
 1724 D1:BFD9 -  -  -  -  ;immediate	AND #oper	29	2	2  
 1725 D1:BFD9 -  -  -  -  inst6502_and_imm:
 1726 D1:BFD9 ED 33 02 -      ADDCYC(2)
 1727 D1:BFDC 7E -  -  -      ld  a,(hl)
 1728 D1:BFDD DD A6 00 -      and a,(ix+REGA)
 1729 D1:BFE0 DD 77 00 -      ld  (ix+REGA),A
 1730 D1:BFE3 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1731 D1:BFF7 C3 B4 B3 D1     jp i6502NextLoad
 1732 D1:BFFB -  -  -  -  
 1733 D1:BFFB -  -  -  -  ;zeropage	AND oper	25	2	3  
 1734 D1:BFFB -  -  -  -  inst6502_and_zp:
 1735 D1:BFFB ED 33 03 -      ADDCYC(3)
 1736 D1:BFFE 7E -  -  -      ld  a,(hl)
 1737 D1:BFFF 01 00 38 D0     ld  bc,ZEROPAGE
 1738 D1:C003 81 -  -  -      add a,c
 1739 D1:C004 4F -  -  -      ld  c,a
 1740 D1:C005 0A -  -  -      ld  a,(bc)
 1741 D1:C006 DD A6 00 -      and a,(ix+REGA)
 1742 D1:C009 DD 77 00 -      ld  (ix+REGA),A
 1743 D1:C00C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1744 D1:C020 C3 B4 B3 D1     jp i6502NextLoad
 1745 D1:C024 -  -  -  -  
 1746 D1:C024 -  -  -  -  ;zeropage,X	AND oper,X	35	2	4  
 1747 D1:C024 -  -  -  -  inst6502_and_zpx:
 1748 D1:C024 ED 33 04 -      ADDCYC(4)
 1749 D1:C027 7E -  -  -      ld  a,(hl)
 1750 D1:C028 01 00 38 D0     ld  bc,ZEROPAGE
 1751 D1:C02C 81 -  -  -      add a,c
 1752 D1:C02D DD 86 01 -      add a,(ix+REGX)
 1753 D1:C030 4F -  -  -      ld  c,a
 1754 D1:C031 0A -  -  -      ld  a,(bc)
 1755 D1:C032 DD A6 00 -      and a,(ix+REGA)
 1756 D1:C035 DD 77 00 -      ld  (ix+REGA),A
 1757 D1:C038 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1758 D1:C04C C3 B4 B3 D1     jp i6502NextLoad
 1759 D1:C050 -  -  -  -  
 1760 D1:C050 -  -  -  -  ;absolute	AND oper	2D	3	4  
 1761 D1:C050 -  -  -  -  inst6502_and_abs:
 1762 D1:C050 ED 33 04 -      ADDCYC(4)
 1763 D1:C053 CD 34 B6 D1     call subroutine6502_abs_split_start
 1764 D1:C057 E5 -  -  -      push hl
 1765 D1:C058 50 -  -  -          ld  d,b
 1766 D1:C059 79 -  -  -          ld  a,c
 1767 D1:C05A 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1768 D1:C05C ED 4C -  -          mlt bc
 1769 D1:C05E 21 00 40 D0         ld  hl,PAGETABLE
 1770 D1:C062 09 -  -  -          add hl,bc
 1771 D1:C063 ED 27 -  -          ld  hl,(hl)
 1772 D1:C065 06 00 -  -          ld  b,0
 1773 D1:C067 4F -  -  -          ld  c,a
 1774 D1:C068 09 -  -  -          add hl,bc   ;full address
 1775 D1:C069 7E -  -  -          READ_ACCESS
 1776 D1:C06A E1 -  -  -      pop hl
 1777 D1:C06B DD A6 00 -      and a,(ix+REGA)
 1778 D1:C06E DD 77 00 -      ld  (ix+REGA),A
 1779 D1:C071 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1780 D1:C085 C3 B4 B3 D1     jp i6502NextLoad
 1781 D1:C089 -  -  -  -  
 1782 D1:C089 -  -  -  -  ;absolute,X	AND oper,X	3D	3	4* 
 1783 D1:C089 -  -  -  -  inst6502_and_absx:
 1784 D1:C089 ED 33 04 -      ADDCYC(4)
 1785 D1:C08C CD 55 B6 D1     PUSH_ABSXSPLIT
 1786 D1:C090 7E -  -  -          READ_ACCESS
 1787 D1:C091 DD A6 00 -          and a,(ix+REGA)
 1788 D1:C094 DD 77 00 -          ld  (ix+REGA),A
 1789 D1:C097 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1790 D1:C0AB E1 -  -  -      pop hl
 1791 D1:C0AC C3 B4 B3 D1     jp i6502NextLoad
 1792 D1:C0B0 -  -  -  -  
 1793 D1:C0B0 -  -  -  -  ;absolute,Y	AND oper,Y	39	3	4* 
 1794 D1:C0B0 -  -  -  -  inst6502_and_absy:
 1795 D1:C0B0 ED 33 04 -      ADDCYC(4)
 1796 D1:C0B3 CD 50 B6 D1     PUSH_ABSYSPLIT
 1797 D1:C0B7 7E -  -  -          READ_ACCESS
 1798 D1:C0B8 E1 -  -  -      pop hl
 1799 D1:C0B9 DD A6 00 -      and a,(ix+REGA)
 1800 D1:C0BC DD 77 00 -      ld  (ix+REGA),A
 1801 D1:C0BF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1802 D1:C0D3 C3 B4 B3 D1     jp i6502NextLoad
 1803 D1:C0D7 -  -  -  -  
 1804 D1:C0D7 -  -  -  -  ;(indirect,X)	AND (oper,X)	21	2	6  
 1805 D1:C0D7 -  -  -  -  inst6502_and_indx:
 1806 D1:C0D7 ED 33 06 -      ADDCYC(6)
 1807 D1:C0DA E5 -  -  -      push hl
 1808 D1:C0DB 7E -  -  -          ld  a,(hl)
 1809 D1:C0DC 21 00 38 D0         ld  hl,ZEROPAGE
 1810 D1:C0E0 85 -  -  -          add a,L
 1811 D1:C0E1 DD 86 01 -          add a,(ix+REGX)
 1812 D1:C0E4 6F -  -  -          ld  L,a
 1813 D1:C0E5 7E -  -  -          ld  a,(hl)
 1814 D1:C0E6 2C -  -  -          inc L
 1815 D1:C0E7 56 -  -  -          ld  d,(hl)
 1816 D1:C0E8 42 -  -  -          ld  b,d
 1817 D1:C0E9 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1818 D1:C0EB ED 4C -  -          mlt bc
 1819 D1:C0ED 21 00 40 D0         ld  hl,PAGETABLE
 1820 D1:C0F1 09 -  -  -          add hl,bc
 1821 D1:C0F2 ED 27 -  -          ld  hl,(hl)
 1822 D1:C0F4 06 00 -  -          ld  b,0
 1823 D1:C0F6 4F -  -  -          ld  c,a
 1824 D1:C0F7 09 -  -  -          add hl,bc
 1825 D1:C0F8 7E -  -  -          READ_ACCESS
 1826 D1:C0F9 E1 -  -  -      pop hl
 1827 D1:C0FA DD A6 00 -      and a,(ix+REGA)
 1828 D1:C0FD DD 77 00 -      ld  (ix+REGA),A
 1829 D1:C100 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1830 D1:C114 C3 B4 B3 D1     jp i6502NextLoad
 1831 D1:C118 -  -  -  -  
 1832 D1:C118 -  -  -  -  ;(indirect),Y	AND (oper),Y	31	2	5* 
 1833 D1:C118 -  -  -  -  inst6502_and_indy:
 1834 D1:C118 ED 33 05 -      ADDCYC(5)
 1835 D1:C11B E5 -  -  -      push hl
 1836 D1:C11C 7E -  -  -          ld  a,(hl)
 1837 D1:C11D 21 00 38 D0         ld  hl,ZEROPAGE
 1838 D1:C121 85 -  -  -          add a,L
 1839 D1:C122 6F -  -  -          ld  L,a
 1840 D1:C123 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1841 D1:C124 2C -  -  -          inc L
 1842 D1:C125 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1843 D1:C128 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1844 D1:C129 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1845 D1:C12B 24 -  -  -          inc h
 1846 D1:C12C FD 23 -  -          ADDCYC(1)
 1847 D1:C12E 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1848 D1:C12F 2E 08 -  -          ld  L,BASETABLE_STRIDE
 1849 D1:C131 ED 6C -  -          mlt hl          ;23.
 1850 D1:C133 01 00 40 D0         ld  bc,PAGETABLE
 1851 D1:C137 09 -  -  -          add hl,bc
 1852 D1:C138 ED 27 -  -          ld  hl,(hl)     ;address get.
 1853 D1:C13A 01 00 00 00         ld  bc,0
 1854 D1:C13E 4F -  -  -          ld  c,a
 1855 D1:C13F 09 -  -  -          add hl,bc       ;Full address get.
 1856 D1:C140 7E -  -  -          READ_ACCESS
 1857 D1:C141 E1 -  -  -      pop hl
 1858 D1:C142 DD A6 00 -      and a,(ix+REGA)
 1859 D1:C145 DD 77 00 -      ld  (ix+REGA),A
 1860 D1:C148 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1861 D1:C15C C3 B4 B3 D1     jp i6502NextLoad
 1862 D1:C160 -  -  -  -  
 1863 D1:C160 -  -  -  -  ;-----------------------------------------------------------------------------
 1864 D1:C160 -  -  -  -  ;EOR - Exclusive-OR Memory with Accumulator
 1865 D1:C160 -  -  -  -  ;A EOR M -> A
 1866 D1:C160 -  -  -  -  ;N	Z	C	I	D	V
 1867 D1:C160 -  -  -  -  ;+	+	-	-	-	-
 1868 D1:C160 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1869 D1:C160 -  -  -  -  
 1870 D1:C160 -  -  -  -  ;immediate	EOR #oper	49	2	2  
 1871 D1:C160 -  -  -  -  inst6502_eor_imm:
 1872 D1:C160 ED 33 02 -      ADDCYC(2)
 1873 D1:C163 7E -  -  -      ld  a,(hl)
 1874 D1:C164 DD AE 00 -      xor a,(ix+REGA)
 1875 D1:C167 DD 77 00 -      ld  (ix+REGA),A
 1876 D1:C16A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1877 D1:C17E C3 B4 B3 D1     jp i6502NextLoad
 1878 D1:C182 -  -  -  -  
 1879 D1:C182 -  -  -  -  ;zeropage	EOR oper	45	2	3  
 1880 D1:C182 -  -  -  -  inst6502_eor_zp:
 1881 D1:C182 ED 33 03 -      ADDCYC(3)
 1882 D1:C185 7E -  -  -      ld  a,(hl)
 1883 D1:C186 01 00 38 D0     ld  bc,ZEROPAGE
 1884 D1:C18A 81 -  -  -      add a,c
 1885 D1:C18B 4F -  -  -      ld  c,a
 1886 D1:C18C 0A -  -  -      ld  a,(bc)
 1887 D1:C18D DD AE 00 -      xor a,(ix+REGA)
 1888 D1:C190 DD 77 00 -      ld  (ix+REGA),A
 1889 D1:C193 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1890 D1:C1A7 C3 B4 B3 D1     jp i6502NextLoad
 1891 D1:C1AB -  -  -  -  
 1892 D1:C1AB -  -  -  -  
 1893 D1:C1AB -  -  -  -  ;zeropage,X	EOR oper,X	55	2	4  
 1894 D1:C1AB -  -  -  -  inst6502_eor_zpx:
 1895 D1:C1AB ED 33 04 -      ADDCYC(4)
 1896 D1:C1AE 7E -  -  -      ld  a,(hl)
 1897 D1:C1AF 01 00 38 D0     ld  bc,ZEROPAGE
 1898 D1:C1B3 81 -  -  -      add a,c
 1899 D1:C1B4 DD 86 01 -      add a,(ix+REGX)
 1900 D1:C1B7 4F -  -  -      ld  c,a
 1901 D1:C1B8 0A -  -  -      ld  a,(bc)
 1902 D1:C1B9 DD AE 00 -      xor a,(ix+REGA)
 1903 D1:C1BC DD 77 00 -      ld  (ix+REGA),A
 1904 D1:C1BF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1905 D1:C1D3 C3 B4 B3 D1     jp i6502NextLoad
 1906 D1:C1D7 -  -  -  -  
 1907 D1:C1D7 -  -  -  -  ;absolute	EOR oper	4D	3	4  
 1908 D1:C1D7 -  -  -  -  inst6502_eor_abs:
 1909 D1:C1D7 ED 33 04 -      ADDCYC(4)
 1910 D1:C1DA CD 34 B6 D1     call subroutine6502_abs_split_start
 1911 D1:C1DE E5 -  -  -      push hl
 1912 D1:C1DF 50 -  -  -          ld  d,b
 1913 D1:C1E0 79 -  -  -          ld  a,c
 1914 D1:C1E1 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1915 D1:C1E3 ED 4C -  -          mlt bc
 1916 D1:C1E5 21 00 40 D0         ld  hl,PAGETABLE
 1917 D1:C1E9 09 -  -  -          add hl,bc
 1918 D1:C1EA ED 27 -  -          ld  hl,(hl)
 1919 D1:C1EC 06 00 -  -          ld  b,0
 1920 D1:C1EE 4F -  -  -          ld  c,a
 1921 D1:C1EF 09 -  -  -          add hl,bc   ;full address
 1922 D1:C1F0 7E -  -  -          READ_ACCESS
 1923 D1:C1F1 E1 -  -  -      pop hl
 1924 D1:C1F2 DD AE 00 -      xor a,(ix+REGA)
 1925 D1:C1F5 DD 77 00 -      ld  (ix+REGA),A
 1926 D1:C1F8 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1927 D1:C20C C3 B4 B3 D1     jp i6502NextLoad
 1928 D1:C210 -  -  -  -  
 1929 D1:C210 -  -  -  -  ;absolute,X	EOR oper,X	5D	3	4* 
 1930 D1:C210 -  -  -  -  inst6502_eor_absx:
 1931 D1:C210 ED 33 04 -      ADDCYC(4)
 1932 D1:C213 CD 55 B6 D1     PUSH_ABSXSPLIT
 1933 D1:C217 7E -  -  -          READ_ACCESS
 1934 D1:C218 DD AE 00 -          xor a,(ix+REGA)
 1935 D1:C21B DD 77 00 -          ld  (ix+REGA),A
 1936 D1:C21E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1937 D1:C232 E1 -  -  -      pop hl
 1938 D1:C233 C3 B4 B3 D1     jp i6502NextLoad
 1939 D1:C237 -  -  -  -  
 1940 D1:C237 -  -  -  -  ;absolute,Y	EOR oper,Y	59	3	4* 
 1941 D1:C237 -  -  -  -  inst6502_eor_absy:
 1942 D1:C237 ED 33 04 -      ADDCYC(4)
 1943 D1:C23A CD 50 B6 D1     PUSH_ABSYSPLIT
 1944 D1:C23E 7E -  -  -          READ_ACCESS
 1945 D1:C23F E1 -  -  -      pop hl
 1946 D1:C240 DD AE 00 -      xor a,(ix+REGA)
 1947 D1:C243 DD 77 00 -      ld  (ix+REGA),A
 1948 D1:C246 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1949 D1:C25A C3 B4 B3 D1     jp i6502NextLoad
 1950 D1:C25E -  -  -  -  
 1951 D1:C25E -  -  -  -  ;(indirect,X)	EOR (oper,X)	41	2	6  
 1952 D1:C25E -  -  -  -  inst6502_eor_indx:
 1953 D1:C25E ED 33 06 -      ADDCYC(6)
 1954 D1:C261 E5 -  -  -      push hl
 1955 D1:C262 7E -  -  -          ld  a,(hl)
 1956 D1:C263 21 00 38 D0         ld  hl,ZEROPAGE
 1957 D1:C267 85 -  -  -          add a,L
 1958 D1:C268 DD 86 01 -          add a,(ix+REGX)
 1959 D1:C26B 6F -  -  -          ld  L,a
 1960 D1:C26C 7E -  -  -          ld  a,(hl)
 1961 D1:C26D 2C -  -  -          inc L
 1962 D1:C26E 56 -  -  -          ld  d,(hl)
 1963 D1:C26F 42 -  -  -          ld  b,d
 1964 D1:C270 0E 08 -  -          ld  c,BASETABLE_STRIDE
 1965 D1:C272 ED 4C -  -          mlt bc
 1966 D1:C274 21 00 40 D0         ld  hl,PAGETABLE
 1967 D1:C278 09 -  -  -          add hl,bc
 1968 D1:C279 ED 27 -  -          ld  hl,(hl)
 1969 D1:C27B 06 00 -  -          ld  b,0
 1970 D1:C27D 4F -  -  -          ld  c,a
 1971 D1:C27E 09 -  -  -          add hl,bc
 1972 D1:C27F 7E -  -  -          READ_ACCESS
 1973 D1:C280 E1 -  -  -      pop hl
 1974 D1:C281 DD AE 00 -      xor a,(ix+REGA)
 1975 D1:C284 DD 77 00 -      ld  (ix+REGA),A
 1976 D1:C287 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1977 D1:C29B C3 B4 B3 D1     jp i6502NextLoad
 1978 D1:C29F -  -  -  -  
 1979 D1:C29F -  -  -  -  ;(indirect),Y	EOR (oper),Y	51	2	5* 
 1980 D1:C29F -  -  -  -  inst6502_eor_indy:
 1981 D1:C29F ED 33 05 -      ADDCYC(5)
 1982 D1:C2A2 E5 -  -  -      push hl
 1983 D1:C2A3 7E -  -  -          ld  a,(hl)
 1984 D1:C2A4 21 00 38 D0         ld  hl,ZEROPAGE
 1985 D1:C2A8 85 -  -  -          add a,L
 1986 D1:C2A9 6F -  -  -          ld  L,a
 1987 D1:C2AA 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1988 D1:C2AB 2C -  -  -          inc L
 1989 D1:C2AC DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1990 D1:C2AF 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1991 D1:C2B0 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1992 D1:C2B2 24 -  -  -          inc h
 1993 D1:C2B3 FD 23 -  -          ADDCYC(1)
 1994 D1:C2B5 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1995 D1:C2B6 2E 08 -  -          ld  L,BASETABLE_STRIDE
 1996 D1:C2B8 ED 6C -  -          mlt hl          ;23.
 1997 D1:C2BA 01 00 40 D0         ld  bc,PAGETABLE
 1998 D1:C2BE 09 -  -  -          add hl,bc
 1999 D1:C2BF ED 27 -  -          ld  hl,(hl)     ;address get.
 2000 D1:C2C1 01 00 00 00         ld  bc,0
 2001 D1:C2C5 4F -  -  -          ld  c,a
 2002 D1:C2C6 09 -  -  -          add hl,bc       ;Full address get.
 2003 D1:C2C7 7E -  -  -          READ_ACCESS
 2004 D1:C2C8 E1 -  -  -      pop hl
 2005 D1:C2C9 DD AE 00 -      xor a,(ix+REGA)
 2006 D1:C2CC DD 77 00 -      ld  (ix+REGA),A
 2007 D1:C2CF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2008 D1:C2E3 C3 B4 B3 D1     jp i6502NextLoad
 2009 D1:C2E7 -  -  -  -  
 2010 D1:C2E7 -  -  -  -  ;-----------------------------------------------------------------------------
 2011 D1:C2E7 -  -  -  -  ;ORA - OR Memory with Accumulator
 2012 D1:C2E7 -  -  -  -  ;A OR M -> A
 2013 D1:C2E7 -  -  -  -  ;N	Z	C	I	D	V
 2014 D1:C2E7 -  -  -  -  ;+	+	-	-	-	-
 2015 D1:C2E7 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2016 D1:C2E7 -  -  -  -  
 2017 D1:C2E7 -  -  -  -  ;immediate	ORA #oper	09	2	2  
 2018 D1:C2E7 -  -  -  -  inst6502_ora_imm:
 2019 D1:C2E7 ED 33 02 -      ADDCYC(2)
 2020 D1:C2EA 7E -  -  -      ld  a,(hl)
 2021 D1:C2EB DD B6 00 -      or  a,(ix+REGA)
 2022 D1:C2EE DD 77 00 -      ld  (ix+REGA),A
 2023 D1:C2F1 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2024 D1:C305 C3 B4 B3 D1     jp i6502NextLoad
 2025 D1:C309 -  -  -  -  
 2026 D1:C309 -  -  -  -  ;zeropage	ORA oper	05	2	3  
 2027 D1:C309 -  -  -  -  inst6502_ora_zp:
 2028 D1:C309 ED 33 03 -      ADDCYC(3)
 2029 D1:C30C 7E -  -  -      ld  a,(hl)
 2030 D1:C30D 01 00 38 D0     ld  bc,ZEROPAGE
 2031 D1:C311 81 -  -  -      add a,c
 2032 D1:C312 4F -  -  -      ld  c,a
 2033 D1:C313 0A -  -  -      ld  a,(bc)
 2034 D1:C314 DD B6 00 -      or  a,(ix+REGA)
 2035 D1:C317 DD 77 00 -      ld  (ix+REGA),A
 2036 D1:C31A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2037 D1:C32E C3 B4 B3 D1     jp i6502NextLoad
 2038 D1:C332 -  -  -  -  
 2039 D1:C332 -  -  -  -  ;zeropage,X	ORA oper,X	15	2	4  
 2040 D1:C332 -  -  -  -  inst6502_ora_zpx:
 2041 D1:C332 ED 33 04 -      ADDCYC(4)
 2042 D1:C335 7E -  -  -      ld  a,(hl)
 2043 D1:C336 01 00 38 D0     ld  bc,ZEROPAGE
 2044 D1:C33A 81 -  -  -      add a,c
 2045 D1:C33B DD 86 01 -      add a,(ix+REGX)
 2046 D1:C33E 4F -  -  -      ld  c,a
 2047 D1:C33F 0A -  -  -      ld  a,(bc)
 2048 D1:C340 DD B6 00 -      or  a,(ix+REGA)
 2049 D1:C343 DD 77 00 -      ld  (ix+REGA),A
 2050 D1:C346 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2051 D1:C35A C3 B4 B3 D1     jp i6502NextLoad
 2052 D1:C35E -  -  -  -  
 2053 D1:C35E -  -  -  -  ;absolute	ORA oper	0D	3	4  
 2054 D1:C35E -  -  -  -  inst6502_ora_abs:
 2055 D1:C35E ED 33 04 -      ADDCYC(4)
 2056 D1:C361 CD 34 B6 D1     call subroutine6502_abs_split_start
 2057 D1:C365 E5 -  -  -      push hl
 2058 D1:C366 50 -  -  -          ld  d,b
 2059 D1:C367 79 -  -  -          ld  a,c
 2060 D1:C368 0E 08 -  -          ld  c,BASETABLE_STRIDE
 2061 D1:C36A ED 4C -  -          mlt bc
 2062 D1:C36C 21 00 40 D0         ld  hl,PAGETABLE
 2063 D1:C370 09 -  -  -          add hl,bc
 2064 D1:C371 ED 27 -  -          ld  hl,(hl)
 2065 D1:C373 06 00 -  -          ld  b,0
 2066 D1:C375 4F -  -  -          ld  c,a
 2067 D1:C376 09 -  -  -          add hl,bc   ;full address
 2068 D1:C377 7E -  -  -          READ_ACCESS
 2069 D1:C378 E1 -  -  -      pop hl
 2070 D1:C379 DD B6 00 -      or  a,(ix+REGA)
 2071 D1:C37C DD 77 00 -      ld  (ix+REGA),A
 2072 D1:C37F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2073 D1:C393 C3 B4 B3 D1     jp i6502NextLoad
 2074 D1:C397 -  -  -  -  
 2075 D1:C397 -  -  -  -  ;absolute,X	ORA oper,X	1D	3	4* 
 2076 D1:C397 -  -  -  -  inst6502_ora_absx:
 2077 D1:C397 ED 33 04 -      ADDCYC(4)
 2078 D1:C39A CD 55 B6 D1     PUSH_ABSXSPLIT
 2079 D1:C39E 7E -  -  -          READ_ACCESS
 2080 D1:C39F DD B6 00 -          or  a,(ix+REGA)
 2081 D1:C3A2 DD 77 00 -          ld  (ix+REGA),A
 2082 D1:C3A5 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2083 D1:C3B9 E1 -  -  -      pop hl
 2084 D1:C3BA C3 B4 B3 D1     jp i6502NextLoad
 2085 D1:C3BE -  -  -  -  
 2086 D1:C3BE -  -  -  -  ;absolute,Y	ORA oper,Y	19	3	4* 
 2087 D1:C3BE -  -  -  -  inst6502_ora_absy:
 2088 D1:C3BE ED 33 04 -      ADDCYC(4)
 2089 D1:C3C1 CD 50 B6 D1     PUSH_ABSYSPLIT
 2090 D1:C3C5 7E -  -  -          READ_ACCESS
 2091 D1:C3C6 E1 -  -  -      pop hl
 2092 D1:C3C7 DD B6 00 -      or  a,(ix+REGA)
 2093 D1:C3CA DD 77 00 -      ld  (ix+REGA),A
 2094 D1:C3CD DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2095 D1:C3E1 C3 B4 B3 D1     jp i6502NextLoad
 2096 D1:C3E5 -  -  -  -  
 2097 D1:C3E5 -  -  -  -  ;(indirect,X)	ORA (oper,X)	01	2	6  
 2098 D1:C3E5 -  -  -  -  inst6502_ora_indx:
 2099 D1:C3E5 ED 33 06 -      ADDCYC(6)
 2100 D1:C3E8 E5 -  -  -      push hl
 2101 D1:C3E9 7E -  -  -          ld  a,(hl)
 2102 D1:C3EA 21 00 38 D0         ld  hl,ZEROPAGE
 2103 D1:C3EE 85 -  -  -          add a,L
 2104 D1:C3EF DD 86 01 -          add a,(ix+REGX)
 2105 D1:C3F2 6F -  -  -          ld  L,a
 2106 D1:C3F3 7E -  -  -          ld  a,(hl)
 2107 D1:C3F4 2C -  -  -          inc L
 2108 D1:C3F5 56 -  -  -          ld  d,(hl)
 2109 D1:C3F6 42 -  -  -          ld  b,d
 2110 D1:C3F7 0E 08 -  -          ld  c,BASETABLE_STRIDE
 2111 D1:C3F9 ED 4C -  -          mlt bc
 2112 D1:C3FB 21 00 40 D0         ld  hl,PAGETABLE
 2113 D1:C3FF 09 -  -  -          add hl,bc
 2114 D1:C400 ED 27 -  -          ld  hl,(hl)
 2115 D1:C402 06 00 -  -          ld  b,0
 2116 D1:C404 4F -  -  -          ld  c,a
 2117 D1:C405 09 -  -  -          add hl,bc
 2118 D1:C406 7E -  -  -          READ_ACCESS
 2119 D1:C407 E1 -  -  -      pop hl
 2120 D1:C408 DD B6 00 -      or  a,(ix+REGA)
 2121 D1:C40B DD 77 00 -      ld  (ix+REGA),A
 2122 D1:C40E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2123 D1:C422 C3 B4 B3 D1     jp i6502NextLoad
 2124 D1:C426 -  -  -  -  
 2125 D1:C426 -  -  -  -  ;(indirect),Y	ORA (oper),Y	11	2	5* 
 2126 D1:C426 -  -  -  -  inst6502_ora_indy:
 2127 D1:C426 ED 33 05 -      ADDCYC(5)
 2128 D1:C429 E5 -  -  -      push hl
 2129 D1:C42A 7E -  -  -          ld  a,(hl)
 2130 D1:C42B 21 00 38 D0         ld  hl,ZEROPAGE
 2131 D1:C42F 85 -  -  -          add a,L
 2132 D1:C430 6F -  -  -          ld  L,a
 2133 D1:C431 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 2134 D1:C432 2C -  -  -          inc L
 2135 D1:C433 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 2136 D1:C436 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 2137 D1:C437 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 2138 D1:C439 24 -  -  -          inc h
 2139 D1:C43A FD 23 -  -          ADDCYC(1)
 2140 D1:C43C 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 2141 D1:C43D 2E 08 -  -          ld  L,BASETABLE_STRIDE
 2142 D1:C43F ED 6C -  -          mlt hl          ;23.
 2143 D1:C441 01 00 40 D0         ld  bc,PAGETABLE
 2144 D1:C445 09 -  -  -          add hl,bc
 2145 D1:C446 ED 27 -  -          ld  hl,(hl)     ;address get.
 2146 D1:C448 01 00 00 00         ld  bc,0
 2147 D1:C44C 4F -  -  -          ld  c,a
 2148 D1:C44D 09 -  -  -          add hl,bc       ;Full address get.
 2149 D1:C44E 7E -  -  -          READ_ACCESS
 2150 D1:C44F E1 -  -  -      pop hl
 2151 D1:C450 DD B6 00 -      or  a,(ix+REGA)
 2152 D1:C453 DD 77 00 -      ld  (ix+REGA),A
 2153 D1:C456 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2154 D1:C46A C3 B4 B3 D1     jp i6502NextLoad
 2155 D1:C46E -  -  -  -  
 2156 D1:C46E -  -  -  -  ;-----------------------------------------------------------------------------
 2157 D1:C46E -  -  -  -  ;-----------------------------------------------------------------------------
 2158 D1:C46E -  -  -  -  ;-----------------------------------------------------------------------------
 2159 D1:C46E -  -  -  -  ;Instructions by type: Shift & Rotate Instructions
 2160 D1:C46E -  -  -  -  ;ASL - Shift Left One Bit (Memory or Accumulator)
 2161 D1:C46E -  -  -  -  ;C <- [76543210] <- 0
 2162 D1:C46E -  -  -  -  ;N	Z	C	I	D	V
 2163 D1:C46E -  -  -  -  ;+	+	+	-	-	-
 2164 D1:C46E -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2165 D1:C46E -  -  -  -  
 2166 D1:C46E -  -  -  -  ;accumulator	ASL A	0A	1	2  
 2167 D1:C46E -  -  -  -  inst6502_asl:
 2168 D1:C46E ED 33 02 -      ADDCYC(2)
 2169 D1:C471 DD 7E 00 -      ld  a,(ix+REGA)
 2170 D1:C474 CB 27 -  -      sla a
 2171 D1:C476 DD 77 00 -      ld  (ix+REGA),a
 2172 D1:C479 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2173 D1:C493 C3 CD B3 D1     jp i6502FinishLoad
 2174 D1:C497 -  -  -  -  
 2175 D1:C497 -  -  -  -  ;zeropage	ASL oper	06	2	5  
 2176 D1:C497 -  -  -  -  inst6502_asl_zp:
 2177 D1:C497 ED 33 05 -      ADDCYC(5)
 2178 D1:C49A 7E -  -  -      ld  a,(hl)
 2179 D1:C49B 01 00 38 D0     ld  bc,ZEROPAGE
 2180 D1:C49F 81 -  -  -      add a,c
 2181 D1:C4A0 4F -  -  -      ld  c,a
 2182 D1:C4A1 0A -  -  -      ld  a,(bc)
 2183 D1:C4A2 CB 27 -  -      sla a
 2184 D1:C4A4 02 -  -  -      ld  (bc),a
 2185 D1:C4A5 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2186 D1:C4BF C3 B4 B3 D1     jp i6502NextLoad
 2187 D1:C4C3 -  -  -  -  
 2188 D1:C4C3 -  -  -  -  ;zeropage,X	ASL oper,X	16	2	6  
 2189 D1:C4C3 -  -  -  -  inst6502_asl_zpx:
 2190 D1:C4C3 ED 33 06 -      ADDCYC(6)
 2191 D1:C4C6 7E -  -  -      ld  a,(hl)
 2192 D1:C4C7 01 00 38 D0     ld  bc,ZEROPAGE
 2193 D1:C4CB 81 -  -  -      add a,c
 2194 D1:C4CC DD 86 01 -      add a,(ix+REGX)
 2195 D1:C4CF 4F -  -  -      ld  c,a
 2196 D1:C4D0 0A -  -  -      ld  a,(bc)
 2197 D1:C4D1 CB 27 -  -      sla a
 2198 D1:C4D3 02 -  -  -      ld  (bc),a
 2199 D1:C4D4 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2200 D1:C4EE C3 B4 B3 D1     jp i6502NextLoad
 2201 D1:C4F2 -  -  -  -  
 2202 D1:C4F2 -  -  -  -  ;absolute	ASL oper	0E	3	6  
 2203 D1:C4F2 -  -  -  -  inst6502_asl_abs:
 2204 D1:C4F2 ED 33 06 -      ADDCYC(6)
 2205 D1:C4F5 CD 34 B6 D1     call subroutine6502_abs_split_start
 2206 D1:C4F9 E5 -  -  -      push hl
 2207 D1:C4FA 50 -  -  -          ld  d,b
 2208 D1:C4FB 79 -  -  -          ld  a,c
 2209 D1:C4FC 0E 08 -  -          ld  c,BASETABLE_STRIDE
 2210 D1:C4FE ED 4C -  -          mlt bc
 2211 D1:C500 21 00 40 D0         ld  hl,PAGETABLE
 2212 D1:C504 09 -  -  -          add hl,bc
 2213 D1:C505 ED 27 -  -          ld  hl,(hl)
 2214 D1:C507 06 00 -  -          ld  b,0
 2215 D1:C509 4F -  -  -          ld  c,a
 2216 D1:C50A 09 -  -  -          add hl,bc   ;full address
 2217 D1:C50B 7E -  -  -          READ_ACCESS
 2218 D1:C50C CB 27 -  -          sla a
 2219 D1:C50E 4F -  -  -          ld  c,a
 2220 D1:C50F DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2221 D1:C529 41 -  -  -          ld  b,c
 2222 D1:C52A 70 -  -  -          WRITE_ACCESS
 2223 D1:C52B E1 -  -  -      pop hl
 2224 D1:C52C C3 B4 B3 D1     jp i6502NextLoad
 2225 D1:C530 -  -  -  -  
 2226 D1:C530 -  -  -  -  ;absolute,X	ASL oper,X	1E	3	7  
 2227 D1:C530 -  -  -  -  inst6502_asl_absx:
 2228 D1:C530 ED 33 07 -      ADDCYC(7)
 2229 D1:C533 CD 91 B6 D1     PUSH_ABSXSPLIT_NODEP
 2230 D1:C537 7E -  -  -          READ_ACCESS
 2231 D1:C538 CB 27 -  -          sla a
 2232 D1:C53A 4F -  -  -          ld  c,a
 2233 D1:C53B DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2234 D1:C555 41 -  -  -          ld  b,c
 2235 D1:C556 70 -  -  -          WRITE_ACCESS
 2236 D1:C557 E1 -  -  -      pop hl
 2237 D1:C558 C3 B4 B3 D1     jp i6502NextLoad
 2238 D1:C55C -  -  -  -  
 2239 D1:C55C -  -  -  -  ;-----------------------------------------------------------------------------
 2240 D1:C55C -  -  -  -  ;LSR - Shift One Bit Right (Memory or Accumulator)
 2241 D1:C55C -  -  -  -  ;0 -> [76543210] -> C
 2242 D1:C55C -  -  -  -  ;N	Z	C	I	D	V
 2243 D1:C55C -  -  -  -  ;0	+	+	-	-	-
 2244 D1:C55C -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2245 D1:C55C -  -  -  -  
 2246 D1:C55C -  -  -  -  ;accumulator	LSR A	4A	1	2  
 2247 D1:C55C -  -  -  -  inst6502_lsr:
 2248 D1:C55C ED 33 02 -      ADDCYC(2)
 2249 D1:C55F DD 7E 00 -      ld  a,(ix+REGA)
 2250 D1:C562 CB 3F -  -      srl a
 2251 D1:C564 DD 77 00 -      ld  (ix+REGA),a
 2252 D1:C567 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2253 D1:C581 C3 CD B3 D1     jp i6502FinishLoad
 2254 D1:C585 -  -  -  -  
 2255 D1:C585 -  -  -  -  ;zeropage	LSR oper	46	2	5  
 2256 D1:C585 -  -  -  -  inst6502_lsr_zp:
 2257 D1:C585 ED 33 05 -      ADDCYC(5)
 2258 D1:C588 7E -  -  -      ld  a,(hl)
 2259 D1:C589 01 00 38 D0     ld  bc,ZEROPAGE
 2260 D1:C58D 81 -  -  -      add a,c
 2261 D1:C58E 4F -  -  -      ld  c,a
 2262 D1:C58F 0A -  -  -      ld  a,(bc)
 2263 D1:C590 CB 3F -  -      srl a
 2264 D1:C592 02 -  -  -      ld  (bc),a
 2265 D1:C593 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2266 D1:C5AD C3 B4 B3 D1     jp i6502NextLoad
 2267 D1:C5B1 -  -  -  -  
 2268 D1:C5B1 -  -  -  -  ;zeropage,X	LSR oper,X	56	2	6  
 2269 D1:C5B1 -  -  -  -  inst6502_lsr_zpx:
 2270 D1:C5B1 ED 33 06 -      ADDCYC(6)
 2271 D1:C5B4 7E -  -  -      ld  a,(hl)
 2272 D1:C5B5 01 00 38 D0     ld  bc,ZEROPAGE
 2273 D1:C5B9 81 -  -  -      add a,c
 2274 D1:C5BA DD 86 01 -      add a,(ix+REGX)
 2275 D1:C5BD 4F -  -  -      ld  c,a
 2276 D1:C5BE 0A -  -  -      ld  a,(bc)
 2277 D1:C5BF CB 3F -  -      srl a
 2278 D1:C5C1 02 -  -  -      ld  (bc),a
 2279 D1:C5C2 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2280 D1:C5DC C3 B4 B3 D1     jp i6502NextLoad
 2281 D1:C5E0 -  -  -  -      
 2282 D1:C5E0 -  -  -  -  ;absolute	LSR oper	4E	3	6  
 2283 D1:C5E0 -  -  -  -  inst6502_lsr_abs:
 2284 D1:C5E0 ED 33 06 -      ADDCYC(6)
 2285 D1:C5E3 CD 34 B6 D1     call subroutine6502_abs_split_start
 2286 D1:C5E7 E5 -  -  -      push hl
 2287 D1:C5E8 50 -  -  -          ld  d,b
 2288 D1:C5E9 79 -  -  -          ld  a,c
 2289 D1:C5EA 0E 08 -  -          ld  c,BASETABLE_STRIDE
 2290 D1:C5EC ED 4C -  -          mlt bc
 2291 D1:C5EE 21 00 40 D0         ld  hl,PAGETABLE
 2292 D1:C5F2 09 -  -  -          add hl,bc
 2293 D1:C5F3 ED 27 -  -          ld  hl,(hl)
 2294 D1:C5F5 06 00 -  -          ld  b,0
 2295 D1:C5F7 4F -  -  -          ld  c,a
 2296 D1:C5F8 09 -  -  -          add hl,bc   ;full address
 2297 D1:C5F9 7E -  -  -          READ_ACCESS
 2298 D1:C5FA CB 3F -  -          srl a
 2299 D1:C5FC 4F -  -  -          ld  c,a
 2300 D1:C5FD DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2301 D1:C617 41 -  -  -          ld  b,c
 2302 D1:C618 70 -  -  -          WRITE_ACCESS
 2303 D1:C619 E1 -  -  -      pop hl
 2304 D1:C61A C3 B4 B3 D1     jp i6502NextLoad
 2305 D1:C61E -  -  -  -  
 2306 D1:C61E -  -  -  -  ;absolute,X	LSR oper,X	5E	3	7  
 2307 D1:C61E -  -  -  -  inst6502_lsr_absx:
 2308 D1:C61E ED 33 07 -      ADDCYC(7)
 2309 D1:C621 CD 91 B6 D1     PUSH_ABSXSPLIT_NODEP
 2310 D1:C625 7E -  -  -          READ_ACCESS
 2311 D1:C626 CB 3F -  -          srl a
 2312 D1:C628 4F -  -  -          ld  c,a
 2313 D1:C629 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2314 D1:C643 41 -  -  -          ld  b,c
 2315 D1:C644 70 -  -  -          WRITE_ACCESS
 2316 D1:C645 E1 -  -  -      pop hl
 2317 D1:C646 C3 B4 B3 D1     jp i6502NextLoad
 2318 D1:C64A -  -  -  -  
 2319 D1:C64A -  -  -  -  ;-----------------------------------------------------------------------------
 2320 D1:C64A -  -  -  -  ;ROL - Rotate One Bit Left (Memory or Accumulator)
 2321 D1:C64A -  -  -  -  ;C <- [76543210] <- C
 2322 D1:C64A -  -  -  -  ;N	Z	C	I	D	V
 2323 D1:C64A -  -  -  -  ;+	+	+	-	-	-
 2324 D1:C64A -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2325 D1:C64A -  -  -  -  
 2326 D1:C64A -  -  -  -  ;accumulator	ROL A	2A	1	2  
 2327 D1:C64A -  -  -  -  inst6502_rol:
 2328 D1:C64A ED 33 02 -      ADDCYC(2)
 2329 D1:C64D DD 7E 04 -      ld  a,(ix+REGSR)
 2330 D1:C650 1F -  -  -      rra
 2331 D1:C651 DD CB 00 16     rl  (ix+REGA)
 2332 D1:C655 DD 7E 00 -      ld  a,(ix+REGA)
 2333 D1:C658 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2334 D1:C672 C3 CD B3 D1     jp i6502FinishLoad
 2335 D1:C676 -  -  -  -  
 2336 D1:C676 -  -  -  -  ;zeropage	ROL oper	26	2	5  
 2337 D1:C676 -  -  -  -  inst6502_rol_zp:
 2338 D1:C676 ED 33 05 -      ADDCYC(5)
 2339 D1:C679 7E -  -  -      ld  a,(hl)
 2340 D1:C67A 01 00 38 D0     ld  bc,ZEROPAGE
 2341 D1:C67E 81 -  -  -      add a,c
 2342 D1:C67F 4F -  -  -      ld  c,a
 2343 D1:C680 DD 7E 04 -      ld  a,(ix+REGSR)
 2344 D1:C683 1F -  -  -      rra
 2345 D1:C684 0A -  -  -      ld  a,(bc)
 2346 D1:C685 17 -  -  -      rla
 2347 D1:C686 02 -  -  -      ld  (bc),a
 2348 D1:C687 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2349 D1:C6A1 C3 B4 B3 D1     jp i6502NextLoad
 2350 D1:C6A5 -  -  -  -  
 2351 D1:C6A5 -  -  -  -  ;zeropage,X	ROL oper,X	36	2	6  
 2352 D1:C6A5 -  -  -  -  inst6502_rol_zpx:
 2353 D1:C6A5 ED 33 06 -      ADDCYC(6)
 2354 D1:C6A8 7E -  -  -      ld  a,(hl)
 2355 D1:C6A9 01 00 38 D0     ld  bc,ZEROPAGE
 2356 D1:C6AD 81 -  -  -      add a,c
 2357 D1:C6AE DD 86 01 -      add a,(ix+REGX)
 2358 D1:C6B1 4F -  -  -      ld  c,a
 2359 D1:C6B2 DD 7E 04 -      ld  a,(ix+REGSR)
 2360 D1:C6B5 1F -  -  -      rra
 2361 D1:C6B6 0A -  -  -      ld  a,(bc)
 2362 D1:C6B7 17 -  -  -      rla
 2363 D1:C6B8 02 -  -  -      ld  (bc),a
 2364 D1:C6B9 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2365 D1:C6D3 C3 B4 B3 D1     jp i6502NextLoad
 2366 D1:C6D7 -  -  -  -  
 2367 D1:C6D7 -  -  -  -  ;absolute	ROL oper	2E	3	6  
 2368 D1:C6D7 -  -  -  -  inst6502_rol_abs:
 2369 D1:C6D7 ED 33 06 -      ADDCYC(6)
 2370 D1:C6DA CD 34 B6 D1     call subroutine6502_abs_split_start
 2371 D1:C6DE E5 -  -  -      push hl
 2372 D1:C6DF 50 -  -  -          ld  d,b
 2373 D1:C6E0 79 -  -  -          ld  a,c
 2374 D1:C6E1 0E 08 -  -          ld  c,BASETABLE_STRIDE
 2375 D1:C6E3 ED 4C -  -          mlt bc
 2376 D1:C6E5 21 00 40 D0         ld  hl,PAGETABLE
 2377 D1:C6E9 09 -  -  -          add hl,bc
 2378 D1:C6EA ED 27 -  -          ld  hl,(hl)
 2379 D1:C6EC 06 00 -  -          ld  b,0
 2380 D1:C6EE 4F -  -  -          ld  c,a
 2381 D1:C6EF 09 -  -  -          add hl,bc   ;full address
 2382 D1:C6F0 7E -  -  -          READ_ACCESS
 2383 D1:C6F1 DD 46 04 -          ld  b,(ix+REGSR)
 2384 D1:C6F4 CB 18 -  -          rr b
 2385 D1:C6F6 17 -  -  -          rla
 2386 D1:C6F7 4F -  -  -          ld  c,a
 2387 D1:C6F8 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2388 D1:C712 41 -  -  -          ld  b,c
 2389 D1:C713 70 -  -  -          WRITE_ACCESS
 2390 D1:C714 E1 -  -  -      pop hl
 2391 D1:C715 C3 B4 B3 D1     jp i6502NextLoad
 2392 D1:C719 -  -  -  -  
 2393 D1:C719 -  -  -  -  ;absolute,X	ROL oper,X	3E	3	7  
 2394 D1:C719 -  -  -  -  inst6502_rol_absx:
 2395 D1:C719 ED 33 07 -      ADDCYC(7)
 2396 D1:C71C CD 91 B6 D1     PUSH_ABSXSPLIT_NODEP
 2397 D1:C720 7E -  -  -          READ_ACCESS
 2398 D1:C721 DD 46 04 -          ld  b,(ix+REGSR)
 2399 D1:C724 CB 18 -  -          rr b
 2400 D1:C726 17 -  -  -          rla
 2401 D1:C727 4F -  -  -          ld  c,a
 2402 D1:C728 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2403 D1:C742 41 -  -  -          ld  b,c
 2404 D1:C743 70 -  -  -          WRITE_ACCESS
 2405 D1:C744 E1 -  -  -      pop hl
 2406 D1:C745 C3 B4 B3 D1     jp i6502NextLoad
 2407 D1:C749 -  -  -  -  
 2408 D1:C749 -  -  -  -  ;-----------------------------------------------------------------------------
 2409 D1:C749 -  -  -  -  ;ROR - Rotate One Bit Right (Memory or Accumulator)
 2410 D1:C749 -  -  -  -  ;C -> [76543210] -> C
 2411 D1:C749 -  -  -  -  ;N	Z	C	I	D	V
 2412 D1:C749 -  -  -  -  ;+	+	+	-	-	-
 2413 D1:C749 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2414 D1:C749 -  -  -  -  
 2415 D1:C749 -  -  -  -  ;accumulator	ROR A	6A	1	2  
 2416 D1:C749 -  -  -  -  inst6502_ror:
 2417 D1:C749 ED 33 02 -      ADDCYC(2)
 2418 D1:C74C DD 7E 04 -      ld  a,(ix+REGSR)
 2419 D1:C74F 1F -  -  -      rra
 2420 D1:C750 DD CB 00 1E     rr  (ix+REGA)
 2421 D1:C754 DD 7E 00 -      ld  a,(ix+REGA)
 2422 D1:C757 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2423 D1:C771 C3 CD B3 D1     jp i6502FinishLoad
 2424 D1:C775 -  -  -  -  
 2425 D1:C775 -  -  -  -  ;zeropage	ROR oper	66	2	5  
 2426 D1:C775 -  -  -  -  inst6502_ror_zp:
 2427 D1:C775 ED 33 05 -      ADDCYC(5)
 2428 D1:C778 7E -  -  -      ld  a,(hl)
 2429 D1:C779 01 00 38 D0     ld  bc,ZEROPAGE
 2430 D1:C77D 81 -  -  -      add a,c
 2431 D1:C77E 4F -  -  -      ld  c,a
 2432 D1:C77F DD 7E 04 -      ld  a,(ix+REGSR)
 2433 D1:C782 1F -  -  -      rra
 2434 D1:C783 0A -  -  -      ld  a,(bc)
 2435 D1:C784 1F -  -  -      rra
 2436 D1:C785 02 -  -  -      ld  (bc),a
 2437 D1:C786 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2438 D1:C7A0 C3 B4 B3 D1     jp i6502NextLoad
 2439 D1:C7A4 -  -  -  -  
 2440 D1:C7A4 -  -  -  -  ;zeropage,X	ROR oper,X	76	2	6  
 2441 D1:C7A4 -  -  -  -  inst6502_ror_zpx:
 2442 D1:C7A4 ED 33 06 -      ADDCYC(6)
 2443 D1:C7A7 7E -  -  -      ld  a,(hl)
 2444 D1:C7A8 01 00 38 D0     ld  bc,ZEROPAGE
 2445 D1:C7AC 81 -  -  -      add a,c
 2446 D1:C7AD DD 86 01 -      add a,(ix+REGX)
 2447 D1:C7B0 4F -  -  -      ld  c,a
 2448 D1:C7B1 DD 7E 04 -      ld  a,(ix+REGSR)
 2449 D1:C7B4 1F -  -  -      rra
 2450 D1:C7B5 0A -  -  -      ld  a,(bc)
 2451 D1:C7B6 1F -  -  -      rra
 2452 D1:C7B7 02 -  -  -      ld  (bc),a
 2453 D1:C7B8 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2454 D1:C7D2 C3 B4 B3 D1     jp i6502NextLoad
 2455 D1:C7D6 -  -  -  -  
 2456 D1:C7D6 -  -  -  -  ;absolute	ROR oper	6E	3	6  
 2457 D1:C7D6 -  -  -  -  inst6502_ror_abs:
 2458 D1:C7D6 ED 33 06 -      ADDCYC(6)
 2459 D1:C7D9 CD 34 B6 D1     call subroutine6502_abs_split_start
 2460 D1:C7DD E5 -  -  -      push hl
 2461 D1:C7DE 50 -  -  -          ld  d,b
 2462 D1:C7DF 79 -  -  -          ld  a,c
 2463 D1:C7E0 0E 08 -  -          ld  c,BASETABLE_STRIDE
 2464 D1:C7E2 ED 4C -  -          mlt bc
 2465 D1:C7E4 21 00 40 D0         ld  hl,PAGETABLE
 2466 D1:C7E8 09 -  -  -          add hl,bc
 2467 D1:C7E9 ED 27 -  -          ld  hl,(hl)
 2468 D1:C7EB 06 00 -  -          ld  b,0
 2469 D1:C7ED 4F -  -  -          ld  c,a
 2470 D1:C7EE 09 -  -  -          add hl,bc   ;full address
 2471 D1:C7EF 7E -  -  -          READ_ACCESS
 2472 D1:C7F0 DD 46 04 -          ld  b,(ix+REGSR)
 2473 D1:C7F3 CB 18 -  -          rr b
 2474 D1:C7F5 1F -  -  -          rra
 2475 D1:C7F6 4F -  -  -          ld  c,a
 2476 D1:C7F7 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2477 D1:C811 41 -  -  -          ld  b,c
 2478 D1:C812 70 -  -  -          WRITE_ACCESS
 2479 D1:C813 E1 -  -  -      pop hl
 2480 D1:C814 C3 B4 B3 D1     jp i6502NextLoad
 2481 D1:C818 -  -  -  -  
 2482 D1:C818 -  -  -  -  ;absolute,X	ROR oper,X	7E	3	7  
 2483 D1:C818 -  -  -  -  inst6502_ror_absx:
 2484 D1:C818 ED 33 07 -      ADDCYC(7)
 2485 D1:C81B CD 91 B6 D1     PUSH_ABSXSPLIT_NODEP
 2486 D1:C81F 7E -  -  -          READ_ACCESS
 2487 D1:C820 DD 46 04 -          ld  b,(ix+REGSR)
 2488 D1:C823 CB 18 -  -          rr b
 2489 D1:C825 1F -  -  -          rra
 2490 D1:C826 4F -  -  -          ld  c,a
 2491 D1:C827 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2492 D1:C841 41 -  -  -          ld  b,c
 2493 D1:C842 70 -  -  -          WRITE_ACCESS
 2494 D1:C843 E1 -  -  -      pop hl
 2495 D1:C844 C3 B4 B3 D1     jp i6502NextLoad
 2496 D1:C848 -  -  -  -  
 2497 D1:C848 -  -  -  -  ;-----------------------------------------------------------------------------
 2498 D1:C848 -  -  -  -  ;-----------------------------------------------------------------------------
 2499 D1:C848 -  -  -  -  ;-----------------------------------------------------------------------------
 2500 D1:C848 -  -  -  -  ;Instructions by type: Flag Instructions
 2501 D1:C848 -  -  -  -  
 2502 D1:C848 -  -  -  -  ;CLC - Clear Carry Flag
 2503 D1:C848 -  -  -  -  ;0 -> C
 2504 D1:C848 -  -  -  -  ;N	Z	C	I	D	V
 2505 D1:C848 -  -  -  -  ;-	-	0	-	-	-
 2506 D1:C848 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2507 D1:C848 -  -  -  -  ;implied	CLC	18	1	2  
 2508 D1:C848 -  -  -  -  inst6502_clc:
 2509 D1:C848 ED 33 02 -      ADDCYC(2)
 2510 D1:C84B DD CB 04 86     res SF_CARRY,(ix+REGSR)
 2511 D1:C84F C3 CD B3 D1     jp  i6502FinishLoad
 2512 D1:C853 -  -  -  -  
 2513 D1:C853 -  -  -  -  ;CLD - Clear Decimal Mode
 2514 D1:C853 -  -  -  -  ;0 -> D
 2515 D1:C853 -  -  -  -  ;N	Z	C	I	D	V
 2516 D1:C853 -  -  -  -  ;-	-	-	-	0	-
 2517 D1:C853 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2518 D1:C853 -  -  -  -  ;implied	CLD	D8	1	2  
 2519 D1:C853 -  -  -  -  inst6502_cld:
 2520 D1:C853 ED 33 02 -      ADDCYC(2)
 2521 D1:C856 DD CB 04 9E     res SF_DEC,(ix+REGSR)
 2522 D1:C85A C3 CD B3 D1     jp  i6502FinishLoad
 2523 D1:C85E -  -  -  -  
 2524 D1:C85E -  -  -  -  ;CLI -  Clear Interrupt Disable Bit
 2525 D1:C85E -  -  -  -  ;0 -> I
 2526 D1:C85E -  -  -  -  ;N	Z	C	I	D	V
 2527 D1:C85E -  -  -  -  ;-	-	-	0	-	-
 2528 D1:C85E -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2529 D1:C85E -  -  -  -  ;implied	CLI	58	1	2  
 2530 D1:C85E -  -  -  -  inst6502_cli:
 2531 D1:C85E ED 33 02 -      ADDCYC(2)
 2532 D1:C861 DD CB 04 96     res SF_INT,(ix+REGSR)
 2533 D1:C865 C3 CD B3 D1     jp  i6502FinishLoad
 2534 D1:C869 -  -  -  -  
 2535 D1:C869 -  -  -  -  ;CLV - Clear Overflow Flag
 2536 D1:C869 -  -  -  -  ;0 -> V
 2537 D1:C869 -  -  -  -  ;N	Z	C	I	D	V
 2538 D1:C869 -  -  -  -  ;-	-	-	-	-	0
 2539 D1:C869 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2540 D1:C869 -  -  -  -  ;implied	CLV	B8	1	2  
 2541 D1:C869 -  -  -  -  inst6502_clv:
 2542 D1:C869 ED 33 02 -      ADDCYC(2)
 2543 D1:C86C DD CB 04 B6     res SF_OVER,(ix+REGSR)
 2544 D1:C870 C3 CD B3 D1     jp  i6502FinishLoad
 2545 D1:C874 -  -  -  -  
 2546 D1:C874 -  -  -  -  ;SEC - Set Carry Flag
 2547 D1:C874 -  -  -  -  ;1 -> C
 2548 D1:C874 -  -  -  -  ;N	Z	C	I	D	V
 2549 D1:C874 -  -  -  -  ;-	-	1	-	-	-
 2550 D1:C874 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2551 D1:C874 -  -  -  -  ;implied	SEC	38	1	2  
 2552 D1:C874 -  -  -  -  inst6502_sec:
 2553 D1:C874 ED 33 02 -      ADDCYC(2)
 2554 D1:C877 DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 2555 D1:C87B C3 CD B3 D1     jp  i6502FinishLoad
 2556 D1:C87F -  -  -  -  
 2557 D1:C87F -  -  -  -  ;SED - Set Decimal Flag
 2558 D1:C87F -  -  -  -  ;1 -> D
 2559 D1:C87F -  -  -  -  ;N	Z	C	I	D	V
 2560 D1:C87F -  -  -  -  ;-	-	-	-	1	-
 2561 D1:C87F -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2562 D1:C87F -  -  -  -  ;implied	SED	F8	1	2  
 2563 D1:C87F -  -  -  -  inst6502_sed:
 2564 D1:C87F ED 33 02 -      ADDCYC(2)
 2565 D1:C882 DD CB 04 DE     set SF_DEC,(ix+REGSR)
 2566 D1:C886 C3 CD B3 D1     jp  i6502FinishLoad
 2567 D1:C88A -  -  -  -  
 2568 D1:C88A -  -  -  -  ;SEI - Set Interrupt Disable Status
 2569 D1:C88A -  -  -  -  ;1 -> I
 2570 D1:C88A -  -  -  -  ;N	Z	C	I	D	V
 2571 D1:C88A -  -  -  -  ;-	-	-	1	-	-
 2572 D1:C88A -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2573 D1:C88A -  -  -  -  ;implied	SEI	78	1	2  
 2574 D1:C88A -  -  -  -  inst6502_sei:
 2575 D1:C88A ED 33 02 -      ADDCYC(2)
 2576 D1:C88D DD CB 04 D6     set SF_INT,(ix+REGSR)
 2577 D1:C891 C3 CD B3 D1     jp  i6502FinishLoad
 2578 D1:C895 -  -  -  -  
 2579 D1:C895 -  -  -  -  ;-----------------------------------------------------------------------------
 2580 D1:C895 -  -  -  -  ;-----------------------------------------------------------------------------
 2581 D1:C895 -  -  -  -  ;-----------------------------------------------------------------------------
 2582 D1:C895 -  -  -  -  ;Instructions by type: Comparisons
 2583 D1:C895 -  -  -  -  
 2584 D1:C895 -  -  -  -  ;CMP - Compare Memory with Accumulator
 2585 D1:C895 -  -  -  -  ;A - M
 2586 D1:C895 -  -  -  -  ;N	Z	C	I	D	V
 2587 D1:C895 -  -  -  -  ;+	+	+	-	-	-
 2588 D1:C895 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2589 D1:C895 -  -  -  -  
 2590 D1:C895 -  -  -  -  ;immediate	CMP #oper	C9	2	2  
 2591 D1:C895 -  -  -  -  inst6502_cmp_imm:
 2592 D1:C895 ED 33 02 -      ADDCYC(2)
 2593 D1:C898 46 -  -  -      ld  b,(hl)
 2594 D1:C899 C3 2A B7 D1     jp  subroutine6502_cmp_combined_end
 2595 D1:C89D -  -  -  -  
 2596 D1:C89D -  -  -  -  ;zeropage	CMP oper	C5	2	3  
 2597 D1:C89D -  -  -  -  inst6502_cmp_zp:
 2598 D1:C89D ED 33 03 -      ADDCYC(3)
 2599 D1:C8A0 7E -  -  -      ld  a,(hl)
 2600 D1:C8A1 01 00 38 D0     ld  bc,ZEROPAGE
 2601 D1:C8A5 81 -  -  -      add a,c
 2602 D1:C8A6 4F -  -  -      ld  c,a
 2603 D1:C8A7 0A -  -  -      ld  a,(bc)
 2604 D1:C8A8 47 -  -  -      ld  b,a
 2605 D1:C8A9 C3 2A B7 D1     jp  subroutine6502_cmp_combined_end
 2606 D1:C8AD -  -  -  -  
 2607 D1:C8AD -  -  -  -  ;zeropage,X	CMP oper,X	D5	2	4  
 2608 D1:C8AD -  -  -  -  inst6502_cmp_zpx:
 2609 D1:C8AD ED 33 04 -      ADDCYC(4)
 2610 D1:C8B0 7E -  -  -      ld  a,(hl)
 2611 D1:C8B1 01 00 38 D0     ld  bc,ZEROPAGE
 2612 D1:C8B5 81 -  -  -      add a,c
 2613 D1:C8B6 DD 86 01 -      add a,(ix+REGX)
 2614 D1:C8B9 4F -  -  -      ld  c,a
 2615 D1:C8BA 0A -  -  -      ld  a,(bc)
 2616 D1:C8BB 47 -  -  -      ld  b,a
 2617 D1:C8BC C3 2A B7 D1     jp  subroutine6502_cmp_combined_end
 2618 D1:C8C0 -  -  -  -  
 2619 D1:C8C0 -  -  -  -  ;absolute	CMP oper	CD	3	4  
 2620 D1:C8C0 -  -  -  -  inst6502_cmp_abs:
 2621 D1:C8C0 ED 33 04 -      ADDCYC(4)
 2622 D1:C8C3 CD 34 B6 D1     call subroutine6502_abs_split_start
 2623 D1:C8C7 E5 -  -  -      push hl
 2624 D1:C8C8 50 -  -  -          ld  d,b
 2625 D1:C8C9 79 -  -  -          ld  a,c
 2626 D1:C8CA 0E 08 -  -          ld  c,BASETABLE_STRIDE
 2627 D1:C8CC ED 4C -  -          mlt bc
 2628 D1:C8CE 21 00 40 D0         ld  hl,PAGETABLE
 2629 D1:C8D2 09 -  -  -          add hl,bc
 2630 D1:C8D3 ED 27 -  -          ld  hl,(hl)
 2631 D1:C8D5 06 00 -  -          ld  b,0
 2632 D1:C8D7 4F -  -  -          ld  c,a
 2633 D1:C8D8 09 -  -  -          add hl,bc   ;full address
 2634 D1:C8D9 7E -  -  -          READ_ACCESS
 2635 D1:C8DA E1 -  -  -      pop hl
 2636 D1:C8DB 47 -  -  -      ld  b,a
 2637 D1:C8DC C3 2A B7 D1     jp  subroutine6502_cmp_combined_end
 2638 D1:C8E0 -  -  -  -  
 2639 D1:C8E0 -  -  -  -  ;absolute,X	CMP oper,X	DD	3	4* 
 2640 D1:C8E0 -  -  -  -  inst6502_cmp_absx:
 2641 D1:C8E0 ED 33 04 -      ADDCYC(4)
 2642 D1:C8E3 CD 55 B6 D1     PUSH_ABSXSPLIT
 2643 D1:C8E7 7E -  -  -          READ_ACCESS
 2644 D1:C8E8 E1 -  -  -      pop hl
 2645 D1:C8E9 47 -  -  -      ld  b,a
 2646 D1:C8EA C3 2A B7 D1     jp  subroutine6502_cmp_combined_end
 2647 D1:C8EE -  -  -  -  
 2648 D1:C8EE -  -  -  -  ;absolute,Y	CMP oper,Y	D9	3	4* 
 2649 D1:C8EE -  -  -  -  inst6502_cmp_absy:
 2650 D1:C8EE ED 33 04 -      ADDCYC(4)
 2651 D1:C8F1 CD 50 B6 D1     PUSH_ABSYSPLIT
 2652 D1:C8F5 7E -  -  -          READ_ACCESS
 2653 D1:C8F6 E1 -  -  -      pop hl
 2654 D1:C8F7 47 -  -  -      ld  b,a
 2655 D1:C8F8 C3 2A B7 D1     jp  subroutine6502_cmp_combined_end
 2656 D1:C8FC -  -  -  -  
 2657 D1:C8FC -  -  -  -  ;(indirect,X)	CMP (oper,X)	C1	2	6  
 2658 D1:C8FC -  -  -  -  inst6502_cmp_indx:
 2659 D1:C8FC ED 33 06 -      ADDCYC(6)
 2660 D1:C8FF E5 -  -  -      push hl
 2661 D1:C900 7E -  -  -          ld  a,(hl)
 2662 D1:C901 21 00 38 D0         ld  hl,ZEROPAGE
 2663 D1:C905 85 -  -  -          add a,L
 2664 D1:C906 DD 86 01 -          add a,(ix+REGX)
 2665 D1:C909 6F -  -  -          ld  L,a
 2666 D1:C90A 7E -  -  -          ld  a,(hl)
 2667 D1:C90B 2C -  -  -          inc L
 2668 D1:C90C 56 -  -  -          ld  d,(hl)
 2669 D1:C90D 42 -  -  -          ld  b,d
 2670 D1:C90E 0E 08 -  -          ld  c,BASETABLE_STRIDE
 2671 D1:C910 ED 4C -  -          mlt bc
 2672 D1:C912 21 00 40 D0         ld  hl,PAGETABLE
 2673 D1:C916 09 -  -  -          add hl,bc
 2674 D1:C917 ED 27 -  -          ld  hl,(hl)
 2675 D1:C919 06 00 -  -          ld  b,0
 2676 D1:C91B 4F -  -  -          ld  c,a
 2677 D1:C91C 09 -  -  -          add hl,bc
 2678 D1:C91D 7E -  -  -          READ_ACCESS
 2679 D1:C91E E1 -  -  -      pop hl
 2680 D1:C91F 47 -  -  -      ld  b,a
 2681 D1:C920 C3 2A B7 D1     jp  subroutine6502_cmp_combined_end
 2682 D1:C924 -  -  -  -  
 2683 D1:C924 -  -  -  -  ;(indirect),Y	CMP (oper),Y	D1	2	5* 
 2684 D1:C924 -  -  -  -  inst6502_cmp_indy:
 2685 D1:C924 ED 33 05 -      ADDCYC(5)
 2686 D1:C927 E5 -  -  -      push hl
 2687 D1:C928 7E -  -  -          ld  a,(hl)
 2688 D1:C929 21 00 38 D0         ld  hl,ZEROPAGE
 2689 D1:C92D 85 -  -  -          add a,L
 2690 D1:C92E 6F -  -  -          ld  L,a
 2691 D1:C92F 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 2692 D1:C930 2C -  -  -          inc L
 2693 D1:C931 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 2694 D1:C934 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 2695 D1:C935 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 2696 D1:C937 24 -  -  -          inc h
 2697 D1:C938 FD 23 -  -          ADDCYC(1)
 2698 D1:C93A 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 2699 D1:C93B 2E 08 -  -          ld  L,BASETABLE_STRIDE
 2700 D1:C93D ED 6C -  -          mlt hl          ;23.
 2701 D1:C93F 01 00 40 D0         ld  bc,PAGETABLE
 2702 D1:C943 09 -  -  -          add hl,bc
 2703 D1:C944 ED 27 -  -          ld  hl,(hl)     ;address get.
 2704 D1:C946 01 00 00 00         ld  bc,0
 2705 D1:C94A 4F -  -  -          ld  c,a
 2706 D1:C94B 09 -  -  -          add hl,bc       ;Full address get.
 2707 D1:C94C 7E -  -  -          READ_ACCESS
 2708 D1:C94D E1 -  -  -      pop hl
 2709 D1:C94E 47 -  -  -      ld  b,a
 2710 D1:C94F C3 2A B7 D1     jp  subroutine6502_cmp_combined_end
 2711 D1:C953 -  -  -  -  
 2712 D1:C953 -  -  -  -  ;-----------------------------------------------------------------------------
 2713 D1:C953 -  -  -  -  ;CPX - Compare Memory and Index X
 2714 D1:C953 -  -  -  -  ;X - M
 2715 D1:C953 -  -  -  -  ;N	Z	C	I	D	V
 2716 D1:C953 -  -  -  -  ;+	+	+	-	-	-
 2717 D1:C953 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2718 D1:C953 -  -  -  -  ;immediate	CPX #oper	E0	2	2  
 2719 D1:C953 -  -  -  -  inst6502_cpx_imm:
 2720 D1:C953 ED 33 02 -      ADDCYC(2)
 2721 D1:C956 DD 7E 01 -      ld  a,(ix+REGX)
 2722 D1:C959 96 -  -  -      sub a,(hl)
 2723 D1:C95A 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2724 D1:C95B DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2725 D1:C975 C3 B4 B3 D1     jp  i6502NextLoad
 2726 D1:C979 -  -  -  -  
 2727 D1:C979 -  -  -  -  ;zeropage	CPX oper	E4	2	3  
 2728 D1:C979 -  -  -  -  inst6502_cpx_zp:
 2729 D1:C979 ED 33 03 -      ADDCYC(3)
 2730 D1:C97C 7E -  -  -      ld  a,(hl)
 2731 D1:C97D 01 00 38 D0     ld  bc,ZEROPAGE
 2732 D1:C981 81 -  -  -      add a,c
 2733 D1:C982 4F -  -  -      ld  c,a
 2734 D1:C983 0A -  -  -      ld  a,(bc)
 2735 D1:C984 47 -  -  -      ld  b,a
 2736 D1:C985 DD 7E 01 -      ld  a,(ix+REGX)
 2737 D1:C988 90 -  -  -      sub a,b
 2738 D1:C989 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2739 D1:C98A DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2740 D1:C9A4 C3 B4 B3 D1     jp i6502NextLoad
 2741 D1:C9A8 -  -  -  -  ;absolute	CPX oper	EC	3	4  
 2742 D1:C9A8 -  -  -  -  inst6502_cpx_abs:
 2743 D1:C9A8 ED 33 04 -      ADDCYC(4)
 2744 D1:C9AB CD 34 B6 D1     call subroutine6502_abs_split_start
 2745 D1:C9AF E5 -  -  -      push hl
 2746 D1:C9B0 50 -  -  -          ld  d,b
 2747 D1:C9B1 79 -  -  -          ld  a,c
 2748 D1:C9B2 0E 08 -  -          ld  c,BASETABLE_STRIDE
 2749 D1:C9B4 ED 4C -  -          mlt bc
 2750 D1:C9B6 21 00 40 D0         ld  hl,PAGETABLE
 2751 D1:C9BA 09 -  -  -          add hl,bc
 2752 D1:C9BB ED 27 -  -          ld  hl,(hl)
 2753 D1:C9BD 06 00 -  -          ld  b,0
 2754 D1:C9BF 4F -  -  -          ld  c,a
 2755 D1:C9C0 09 -  -  -          add hl,bc   ;full address
 2756 D1:C9C1 7E -  -  -          READ_ACCESS
 2757 D1:C9C2 E1 -  -  -      pop hl
 2758 D1:C9C3 47 -  -  -      ld  b,a
 2759 D1:C9C4 DD 7E 01 -      ld  a,(ix+REGX)
 2760 D1:C9C7 90 -  -  -      sub a,b
 2761 D1:C9C8 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2762 D1:C9C9 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2763 D1:C9E3 C3 B4 B3 D1     jp i6502NextLoad
 2764 D1:C9E7 -  -  -  -  
 2765 D1:C9E7 -  -  -  -  ;-----------------------------------------------------------------------------
 2766 D1:C9E7 -  -  -  -  ;CPY - Compare Memory and Index Y
 2767 D1:C9E7 -  -  -  -  ;Y - M
 2768 D1:C9E7 -  -  -  -  ;N	Z	C	I	D	V
 2769 D1:C9E7 -  -  -  -  ;+	+	+	-	-	-
 2770 D1:C9E7 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2771 D1:C9E7 -  -  -  -  ;immediate	CPY #oper	C0	2	2  
 2772 D1:C9E7 -  -  -  -  inst6502_cpy_imm:
 2773 D1:C9E7 ED 33 02 -      ADDCYC(2)
 2774 D1:C9EA DD 7E 02 -      ld  a,(ix+REGY)
 2775 D1:C9ED 96 -  -  -      sub a,(hl)
 2776 D1:C9EE 3F -  -  -      ccf
 2777 D1:C9EF DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2778 D1:CA09 C3 B4 B3 D1     jp  i6502NextLoad
 2779 D1:CA0D -  -  -  -  
 2780 D1:CA0D -  -  -  -  ;zeropage	CPY oper	C4	2	3  
 2781 D1:CA0D -  -  -  -  inst6502_cpy_zp:
 2782 D1:CA0D ED 33 03 -      ADDCYC(3)
 2783 D1:CA10 7E -  -  -      ld  a,(hl)
 2784 D1:CA11 01 00 38 D0     ld  bc,ZEROPAGE
 2785 D1:CA15 81 -  -  -      add a,c
 2786 D1:CA16 4F -  -  -      ld  c,a
 2787 D1:CA17 0A -  -  -      ld  a,(bc)
 2788 D1:CA18 47 -  -  -      ld  b,a
 2789 D1:CA19 DD 7E 02 -      ld  a,(ix+REGY)
 2790 D1:CA1C 90 -  -  -      sub a,b
 2791 D1:CA1D 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2792 D1:CA1E DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2793 D1:CA38 C3 B4 B3 D1     jp i6502NextLoad
 2794 D1:CA3C -  -  -  -  
 2795 D1:CA3C -  -  -  -  ;absolute	CPY oper	CC	3	4  
 2796 D1:CA3C -  -  -  -  inst6502_cpy_abs:
 2797 D1:CA3C ED 33 04 -      ADDCYC(4)
 2798 D1:CA3F CD 34 B6 D1     call subroutine6502_abs_split_start
 2799 D1:CA43 E5 -  -  -      push hl
 2800 D1:CA44 50 -  -  -          ld  d,b
 2801 D1:CA45 79 -  -  -          ld  a,c
 2802 D1:CA46 0E 08 -  -          ld  c,BASETABLE_STRIDE
 2803 D1:CA48 ED 4C -  -          mlt bc
 2804 D1:CA4A 21 00 40 D0         ld  hl,PAGETABLE
 2805 D1:CA4E 09 -  -  -          add hl,bc
 2806 D1:CA4F ED 27 -  -          ld  hl,(hl)
 2807 D1:CA51 06 00 -  -          ld  b,0
 2808 D1:CA53 4F -  -  -          ld  c,a
 2809 D1:CA54 09 -  -  -          add hl,bc   ;full address
 2810 D1:CA55 7E -  -  -          READ_ACCESS
 2811 D1:CA56 E1 -  -  -      pop hl
 2812 D1:CA57 47 -  -  -      ld  b,a
 2813 D1:CA58 DD 7E 02 -      ld  a,(ix+REGY)
 2814 D1:CA5B 90 -  -  -      sub a,b
 2815 D1:CA5C 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2816 D1:CA5D DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2817 D1:CA77 C3 B4 B3 D1     jp i6502NextLoad
 2818 D1:CA7B -  -  -  -  
 2819 D1:CA7B -  -  -  -  
 2820 D1:CA7B -  -  -  -  ;-----------------------------------------------------------------------------
 2821 D1:CA7B -  -  -  -  ;-----------------------------------------------------------------------------
 2822 D1:CA7B -  -  -  -  ;-----------------------------------------------------------------------------
 2823 D1:CA7B -  -  -  -  ;Instructions by type: Conditional Branch Instructions
 2824 D1:CA7B -  -  -  -  
 2825 D1:CA7B -  -  -  -  ;branch on C=0
 2826 D1:CA7B -  -  -  -  ;relative	BCC oper	90	2	2**
 2827 D1:CA7B -  -  -  -  inst6502_bcc:
 2828 D1:CA7B ED 33 02 -      ADDCYC(2)
 2829 D1:CA7E DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2830 D1:CA82 C2 B4 B3 D1     jp  nz,i6502NextLoad
 2831 D1:CA86 C3 4D B7 D1     jp  subroutine6502_take_branch
 2832 D1:CA8A -  -  -  -  
 2833 D1:CA8A -  -  -  -  ;branch on C=1
 2834 D1:CA8A -  -  -  -  ;relative	BCS oper	B0	2	2**
 2835 D1:CA8A -  -  -  -  inst6502_bcs:
 2836 D1:CA8A ED 33 02 -      ADDCYC(2)
 2837 D1:CA8D DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2838 D1:CA91 CA B4 B3 D1     jp  z,i6502NextLoad
 2839 D1:CA95 C3 4D B7 D1     jp  subroutine6502_take_branch
 2840 D1:CA99 -  -  -  -  
 2841 D1:CA99 -  -  -  -  ;branch on Z=1
 2842 D1:CA99 -  -  -  -  ;relative	BEQ oper	F0	2	2**
 2843 D1:CA99 -  -  -  -  inst6502_beq:
 2844 D1:CA99 ED 33 02 -      ADDCYC(2)
 2845 D1:CA9C DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2846 D1:CAA0 CA B4 B3 D1     jp  z,i6502NextLoad
 2847 D1:CAA4 C3 4D B7 D1     jp  subroutine6502_take_branch
 2848 D1:CAA8 -  -  -  -  
 2849 D1:CAA8 -  -  -  -  ;branch on N=1
 2850 D1:CAA8 -  -  -  -  ;relative	BMI oper	30	2	2**
 2851 D1:CAA8 -  -  -  -  inst6502_bmi:
 2852 D1:CAA8 ED 33 02 -      ADDCYC(2)
 2853 D1:CAAB DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2854 D1:CAAF CA B4 B3 D1     jp  z,i6502NextLoad
 2855 D1:CAB3 C3 4D B7 D1     jp  subroutine6502_take_branch
 2856 D1:CAB7 -  -  -  -  
 2857 D1:CAB7 -  -  -  -  
 2858 D1:CAB7 -  -  -  -  ;branch on Z=0
 2859 D1:CAB7 -  -  -  -  ;relative	BNE oper	D0	2	2**
 2860 D1:CAB7 -  -  -  -  inst6502_bne:
 2861 D1:CAB7 ED 33 02 -      ADDCYC(2)
 2862 D1:CABA DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2863 D1:CABE C2 B4 B3 D1     jp  nz,i6502NextLoad
 2864 D1:CAC2 C3 4D B7 D1     jp  subroutine6502_take_branch
 2865 D1:CAC6 -  -  -  -  
 2866 D1:CAC6 -  -  -  -  ;branch on N=0
 2867 D1:CAC6 -  -  -  -  ;relative	BPL oper	10	2	2**
 2868 D1:CAC6 -  -  -  -  inst6502_bpl:
 2869 D1:CAC6 ED 33 02 -      ADDCYC(2)
 2870 D1:CAC9 DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2871 D1:CACD C2 B4 B3 D1     jp  nz,i6502NextLoad
 2872 D1:CAD1 C3 4D B7 D1     jp  subroutine6502_take_branch
 2873 D1:CAD5 -  -  -  -  
 2874 D1:CAD5 -  -  -  -  ;branch on V=0
 2875 D1:CAD5 -  -  -  -  ;relative	BVC oper	50	2	2**
 2876 D1:CAD5 -  -  -  -  inst6502_bvc:
 2877 D1:CAD5 ED 33 02 -      ADDCYC(2)
 2878 D1:CAD8 DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2879 D1:CADC C2 B4 B3 D1     jp  nz,i6502NextLoad
 2880 D1:CAE0 C3 4D B7 D1     jp  subroutine6502_take_branch
 2881 D1:CAE4 -  -  -  -  
 2882 D1:CAE4 -  -  -  -  ;branch on V=1
 2883 D1:CAE4 -  -  -  -  ;relative	BVS oper	70	2	2**
 2884 D1:CAE4 -  -  -  -  inst6502_bvs:
 2885 D1:CAE4 ED 33 02 -      ADDCYC(2)
 2886 D1:CAE7 DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2887 D1:CAEB CA B4 B3 D1     jp  z,i6502NextLoad
 2888 D1:CAEF C3 4D B7 D1     jp  subroutine6502_take_branch
 2889 D1:CAF3 -  -  -  -  
 2890 D1:CAF3 -  -  -  -  ;-----------------------------------------------------------------------------
 2891 D1:CAF3 -  -  -  -  ;-----------------------------------------------------------------------------
 2892 D1:CAF3 -  -  -  -  ;-----------------------------------------------------------------------------
 2893 D1:CAF3 -  -  -  -  ;Instructions by type: Interrupts
 2894 D1:CAF3 -  -  -  -  
 2895 D1:CAF3 -  -  -  -  ;BRK - Force Break
 2896 D1:CAF3 -  -  -  -  ;BRK initiates a software interrupt similar to a hardware
 2897 D1:CAF3 -  -  -  -  ;interrupt (IRQ). The return address pushed to the stack is
 2898 D1:CAF3 -  -  -  -  ;PC+2, providing an extra byte of spacing for a break mark
 2899 D1:CAF3 -  -  -  -  ;(identifying a reason for the break.)
 2900 D1:CAF3 -  -  -  -  ;The status register will be pushed to the stack with the break
 2901 D1:CAF3 -  -  -  -  ;flag set to 1. However, when retrieved during RTI or by a PLP
 2902 D1:CAF3 -  -  -  -  ;instruction, the break flag will be ignored.
 2903 D1:CAF3 -  -  -  -  ;The interrupt disable flag is not set automatically.
 2904 D1:CAF3 -  -  -  -  ;
 2905 D1:CAF3 -  -  -  -  ;interrupt,             N	Z	C	I	D	V
 2906 D1:CAF3 -  -  -  -  ;push PC+2, push SR     -	-	-	1	-	-
 2907 D1:CAF3 -  -  -  -  ;implied	BRK	00	1	7  
 2908 D1:CAF3 -  -  -  -  inst6502_brk:
 2909 D1:CAF3 ED 33 07 -      ADDCYC(7)
 2910 D1:CAF6 21 00 39 D0     ld  hl,STACKBASE
 2911 D1:CAFA DD 6E 03 -      ld  L,(ix+REGSP)
 2912 D1:CAFD 52 DD 17 05     ld.s de,(ix+REGPC)
 2913 D1:CB01 13 -  -  -      inc de      ;that extra spacer.
 2914 D1:CB02 72 -  -  -      ld  (hl),d
 2915 D1:CB03 2D -  -  -      dec L
 2916 D1:CB04 73 -  -  -      ld  (hl),e
 2917 D1:CB05 2D -  -  -      dec L
 2918 D1:CB06 DD 7E 04 -      ld  a,(ix+REGSR)
 2919 D1:CB09 CB D7 -  -      set SF_INT,a
 2920 D1:CB0B 77 -  -  -      ld  (hl),a
 2921 D1:CB0C 2D -  -  -      dec L
 2922 D1:CB0D DD 75 03 -      ld  (ix+REGSP),L
 2923 D1:CB10 B7 -  -  -      WAS_NMI_TRIGGERED
 2924 D1:CB11 01 FE 00 00     ld  bc,$FE  ;IRQ vector
 2925 D1:CB15 28 04 -  -      jr  z,+_
 2926 D1:CB17 01 FA 00 00     ld  bc,$FA  ;NMI vector, if NMI is hijacking this instruction.
 2927 D1:CB1B 21 F8 47 D0 _:  ld  hl,(BASETABLE_STRIDE*$FF)+PAGETABLE
 2928 D1:CB1F ED 27 -  -      ld  hl,(hl)
 2929 D1:CB21 09 -  -  -      add hl,bc
 2930 D1:CB22 ED 17 -  -      ld  de,(hl)
 2931 D1:CB24 52 DD 1F 05     ld.s (ix+REGPC),de
 2932 D1:CB28 C3 9E B3 D1     jp  i6502FirstLoad
 2933 D1:CB2C -  -  -  -  
 2934 D1:CB2C -  -  -  -  ;RTI - Return from Interrupt
 2935 D1:CB2C -  -  -  -  ;The status register is pulled with the break flag
 2936 D1:CB2C -  -  -  -  ;and bit 5 ignored. Then PC is pulled from the stack.
 2937 D1:CB2C -  -  -  -  ;pull SR, pull PC      N Z C I D V
 2938 D1:CB2C -  -  -  -  ;                      from stack
 2939 D1:CB2C -  -  -  -  ;implied	RTI	40	1	6  
 2940 D1:CB2C -  -  -  -  inst6502_rti:
 2941 D1:CB2C 21 00 39 D0     ld  hl,STACKBASE
 2942 D1:CB30 DD 6E 03 -      ld  l,(ix+REGSP)
 2943 D1:CB33 2C -  -  -      inc l
 2944 D1:CB34 7E -  -  -      ld  a,(hl)
 2945 D1:CB35 2C -  -  -      inc l
 2946 D1:CB36 5E -  -  -      ld  e,(hl)
 2947 D1:CB37 2C -  -  -      inc l
 2948 D1:CB38 56 -  -  -      ld  d,(hl)
 2949 D1:CB39 DD 75 03 -      ld  (ix+REGSP),l
 2950 D1:CB3C 52 DD 1F 05     ld.s (ix+REGPC),de
 2951 D1:CB40 DD 46 04 -      ld  b,(ix+REGSR)
 2952 D1:CB43 A8 -  -  -      xor a,b
 2953 D1:CB44 E6 DF -  -      and a,%11011111
 2954 D1:CB46 A8 -  -  -      xor a,b
 2955 D1:CB47 DD 77 04 -      ld  (ix+REGSR),a
 2956 D1:CB4A ED 33 06 -      ADDCYC(6)
 2957 D1:CB4D C3 9E B3 D1     jp  i6502FirstLoad
 2958 D1:CB51 -  -  -  -  
 2959 D1:CB51 -  -  -  -  
 2960 D1:CB51 -  -  -  -  
 2961 D1:CB51 -  -  -  -  ;-----------------------------------------------------------------------------
 2962 D1:CB51 -  -  -  -  ;-----------------------------------------------------------------------------
 2963 D1:CB51 -  -  -  -  ;-----------------------------------------------------------------------------
 2964 D1:CB51 -  -  -  -  ;Instructions by type: Jumps and Subroutines
 2965 D1:CB51 -  -  -  -  
 2966 D1:CB51 -  -  -  -  ;absolute	JMP oper	4C	3	3  
 2967 D1:CB51 -  -  -  -  inst6052_jmp_abs:
 2968 D1:CB51 7E -  -  -      ld  a,(hl)
 2969 D1:CB52 23 -  -  -      inc hl
 2970 D1:CB53 1C -  -  -      inc e
 2971 D1:CB54 20 0F -  -      jr  nz,+_
 2972 D1:CB56 DD 56 06 -      ld  d,(ix+REGPC+1)
 2973 D1:CB59 14 -  -  -      inc d
 2974 D1:CB5A 1E 08 -  -      ld  e,BASETABLE_STRIDE
 2975 D1:CB5C ED 5C -  -      mlt de
 2976 D1:CB5E 21 00 40 D0     ld  hl,PAGETABLE
 2977 D1:CB62 19 -  -  -      add hl,de
 2978 D1:CB63 ED 27 -  -      ld  hl,(hl)
 2979 D1:CB65 DD 77 05 -  _:  ld  (ix+REGPC+0),a
 2980 D1:CB68 7E -  -  -      ld  a,(hl)
 2981 D1:CB69 DD 77 06 -      ld  (ix+REGPC+1),a
 2982 D1:CB6C ED 33 03 -      ADDCYC(3)
 2983 D1:CB6F C3 9E B3 D1     jp i6502FirstLoad
 2984 D1:CB73 -  -  -  -  
 2985 D1:CB73 -  -  -  -  
 2986 D1:CB73 -  -  -  -  ;Note: In earlier 6502 implementations, cross-page reads on indirect is bugged.
 2987 D1:CB73 -  -  -  -  ;   The end effect would be that inst6502_jmp_indir_splitread would wrap around
 2988 D1:CB73 -  -  -  -  ;   to the start of the current page rather than try to read the next page.
 2989 D1:CB73 -  -  -  -  ;indirect	JMP (oper)	6C	3	5  
 2990 D1:CB73 -  -  -  -  inst6502_jmp_indir:
 2991 D1:CB73 ED 33 05 -      ADDCYC(5)
 2992 D1:CB76 -  -  -  -      ;Doing much the same as abs_split_start below, except with fewer things
 2993 D1:CB76 -  -  -  -      ;because we don't need to preserve any of the other stuff.
 2994 D1:CB76 4E -  -  -      ld  c,(hl)
 2995 D1:CB77 23 -  -  -      inc hl
 2996 D1:CB78 1C -  -  -      inc e
 2997 D1:CB79 20 0F -  -      jr  nz,+_
 2998 D1:CB7B DD 56 06 -      ld  d,(ix+REGPC+1)
 2999 D1:CB7E 14 -  -  -      inc d
 3000 D1:CB7F 1E 08 -  -      ld  e,BASETABLE_STRIDE
 3001 D1:CB81 ED 5C -  -      mlt de
 3002 D1:CB83 21 00 40 D0     ld  hl,PAGETABLE
 3003 D1:CB87 19 -  -  -      add hl,de
 3004 D1:CB88 ED 27 -  -      ld  hl,(hl)
 3005 D1:CB8A 46 -  -  -  _:  ld  b,(hl)
 3006 D1:CB8B 79 -  -  -      ld  a,c
 3007 D1:CB8C 0C -  -  -      inc c   ;check if there will be a split read.
 3008 D1:CB8D 0E 08 -  -      ld  c,BASETABLE_STRIDE  ;Flags not affected
 3009 D1:CB8F ED 4C -  -      mlt bc                  ;Flags not affected
 3010 D1:CB91 21 00 40 D0     ld  hl,PAGETABLE        ;Flags not affected
 3011 D1:CB95 CA AA CB D1     jp  z,inst6502_jmp_indir_splitRead
 3012 D1:CB99 09 -  -  -      add hl,bc
 3013 D1:CB9A ED 27 -  -      ld  hl,(hl)
 3014 D1:CB9C 06 00 -  -      ld  b,0
 3015 D1:CB9E 4F -  -  -      ld  c,a
 3016 D1:CB9F 09 -  -  -      add hl,bc
 3017 D1:CBA0 ED 27 -  -      ld  hl,(hl)
 3018 D1:CBA2 52 DD 2F 05     ld.s (ix+REGPC),hl
 3019 D1:CBA6 C3 9E B3 D1     jp  i6502FirstLoad
 3020 D1:CBAA -  -  -  -  inst6502_jmp_indir_splitRead:
 3021 D1:CBAA 09 -  -  -      add hl,bc
 3022 D1:CBAB ED 27 -  -      ld  hl,(hl)
 3023 D1:CBAD 7E -  -  -      ld  a,(hl)  ;high byte
 3024 D1:CBAE 01 FF 00 00     ld  bc,255
 3025 D1:CBB2 09 -  -  -      add hl,bc
 3026 D1:CBB3 4E -  -  -      ld  c,(hl)  ;low byte
 3027 D1:CBB4 47 -  -  -      ld  b,a
 3028 D1:CBB5 52 DD 0F 05     ld.s (ix+REGPC),bc
 3029 D1:CBB9 C3 9E B3 D1     jp  i6502FirstLoad
 3030 D1:CBBD -  -  -  -  
 3031 D1:CBBD -  -  -  -  
 3032 D1:CBBD -  -  -  -  
 3033 D1:CBBD -  -  -  -  
 3034 D1:CBBD -  -  -  -  
 3035 D1:CBBD -  -  -  -  ;absolute	JSR oper	20	3	6  
 3036 D1:CBBD -  -  -  -  inst6502_jsr:
 3037 D1:CBBD DD 56 06 -      ld  d,(ix+REGPC+1)
 3038 D1:CBC0 4E -  -  -      ld  c,(hl)
 3039 D1:CBC1 23 -  -  -      inc hl
 3040 D1:CBC2 1C -  -  -      inc e
 3041 D1:CBC3 20 10 -  -      jr  nz,+_
 3042 D1:CBC5 14 -  -  -      inc d
 3043 D1:CBC6 7A -  -  -      ld  a,d
 3044 D1:CBC7 1E 08 -  -      ld  e,BASETABLE_STRIDE
 3045 D1:CBC9 ED 5C -  -      mlt de
 3046 D1:CBCB 21 00 40 D0     ld  hl,PAGETABLE
 3047 D1:CBCF 19 -  -  -      add hl,de
 3048 D1:CBD0 ED 27 -  -      ld  hl,(hl)
 3049 D1:CBD2 57 -  -  -      ld  d,a
 3050 D1:CBD3 1E 00 -  -      ld  e,0
 3051 D1:CBD5 46 -  -  -  _:  ld  b,(hl)
 3052 D1:CBD6 -  -  -  -      ;push de to 6502stack
 3053 D1:CBD6 21 00 39 D0     ld  hl,STACKBASE
 3054 D1:CBDA DD 6E 03 -      ld  l,(ix+REGSP)
 3055 D1:CBDD 72 -  -  -      ld  (hl),d
 3056 D1:CBDE 2D -  -  -      dec l
 3057 D1:CBDF 73 -  -  -      ld  (hl),e
 3058 D1:CBE0 2D -  -  -      dec l
 3059 D1:CBE1 DD 75 03 -      ld  (ix+REGSP),l
 3060 D1:CBE4 52 DD 0F 05     ld.s (ix+REGPC),bc
 3061 D1:CBE8 ED 33 06 -      ADDCYC(6)
 3062 D1:CBEB C3 9E B3 D1     jp  i6502FirstLoad
 3063 D1:CBEF -  -  -  -  
 3064 D1:CBEF -  -  -  -  ;implied	RTS	60	1	6
 3065 D1:CBEF -  -  -  -  inst6502_rts:
 3066 D1:CBEF 21 00 39 D0     ld  hl,STACKBASE
 3067 D1:CBF3 DD 6E 03 -      ld  l,(ix+REGSP)
 3068 D1:CBF6 2C -  -  -      inc l
 3069 D1:CBF7 5E -  -  -      ld  e,(hl)
 3070 D1:CBF8 2C -  -  -      inc l
 3071 D1:CBF9 56 -  -  -      ld  d,(hl)
 3072 D1:CBFA DD 75 03 -      ld  (ix+REGSP),l
 3073 D1:CBFD 13 -  -  -      inc de
 3074 D1:CBFE 52 DD 1F 05     ld.s (ix+REGPC),de
 3075 D1:CC02 ED 33 06 -      ADDCYC(6)
 3076 D1:CC05 C3 9E B3 D1     jp  i6502FirstLoad
 3077 D1:CC09 -  -  -  -  
 3078 D1:CC09 -  -  -  -  
 3079 D1:CC09 -  -  -  -  ;-----------------------------------------------------------------------------
 3080 D1:CC09 -  -  -  -  ;-----------------------------------------------------------------------------
 3081 D1:CC09 -  -  -  -  ;-----------------------------------------------------------------------------
 3082 D1:CC09 -  -  -  -  ;Instructions by type: Miscellaneous
 3083 D1:CC09 -  -  -  -  ;BIT - Test Bits in Memory with Accumulator
 3084 D1:CC09 -  -  -  -  ;
 3085 D1:CC09 -  -  -  -  ;bits 7 and 6 of operand are transfered to bit 7 and 6 of SR (N,V);
 3086 D1:CC09 -  -  -  -  ;the zero-flag is set according to the result of the operand AND
 3087 D1:CC09 -  -  -  -  ;the accumulator (set, if the result is zero, unset otherwise).
 3088 D1:CC09 -  -  -  -  ;This allows a quick check of a few bits at once without affecting
 3089 D1:CC09 -  -  -  -  ;any of the registers, other than the status register (SR).
 3090 D1:CC09 -  -  -  -  
 3091 D1:CC09 -  -  -  -  ;A AND M -> Z, M7 -> N, M6 -> V             N	Z	C	I	D	V
 3092 D1:CC09 -  -  -  -  ;                                           M7	+	-	-	-	M6
 3093 D1:CC09 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 3094 D1:CC09 -  -  -  -  ;zeropage	BIT oper	24	2	3  
 3095 D1:CC09 -  -  -  -  inst6502_bit_zp:
 3096 D1:CC09 ED 33 03 -      ADDCYC(3)
 3097 D1:CC0C 7E -  -  -      ld  a,(hl)
 3098 D1:CC0D 01 00 38 D0     ld  bc,ZEROPAGE
 3099 D1:CC11 81 -  -  -      add a,c
 3100 D1:CC12 4F -  -  -      ld  c,a
 3101 D1:CC13 0A -  -  -      ld  a,(bc)
 3102 D1:CC14 4F -  -  -      ld  c,a
 3103 D1:CC15 DD A6 00 -  _:  and a,(ix+REGA)
 3104 D1:CC18 79 -  -  -      ld  a,c     ;discard result, get bits from OPERANDs
 3105 D1:CC19 CB 8F -  -      res SF_ZERO,a
 3106 D1:CC1B 20 02 -  -      jr  nz,$+4
 3107 D1:CC1D CB CF -  -      set SF_ZERO,a
 3108 D1:CC1F DD 46 04 -      ld  b,(ix+REGSR)    ;keep bits in flag other than NZ and V
 3109 D1:CC22 A8 -  -  -      xor a,b
 3110 D1:CC23 E6 C2 -  -      and a,%11000010     ;1=keepA, 0=discardA,keepB
 3111 D1:CC25 A8 -  -  -      xor a,b
 3112 D1:CC26 DD 77 04 -      ld  (ix+REGSR),a
 3113 D1:CC29 C3 B4 B3 D1     jp  i6502NextLoad
 3114 D1:CC2D -  -  -  -  
 3115 D1:CC2D -  -  -  -  ;absolute	BIT oper	2C	3	4  
 3116 D1:CC2D -  -  -  -  inst6502_bit_abs:
 3117 D1:CC2D ED 33 04 -      ADDCYC(4)
 3118 D1:CC30 CD 34 B6 D1     call subroutine6502_abs_split_start
 3119 D1:CC34 E5 -  -  -      push hl
 3120 D1:CC35 50 -  -  -          ld  d,b
 3121 D1:CC36 79 -  -  -          ld  a,c
 3122 D1:CC37 0E 08 -  -          ld  c,BASETABLE_STRIDE
 3123 D1:CC39 ED 4C -  -          mlt bc
 3124 D1:CC3B 21 00 40 D0         ld  hl,PAGETABLE
 3125 D1:CC3F 09 -  -  -          add hl,bc
 3126 D1:CC40 ED 27 -  -          ld  hl,(hl)
 3127 D1:CC42 06 00 -  -          ld  b,0
 3128 D1:CC44 4F -  -  -          ld  c,a
 3129 D1:CC45 09 -  -  -          add hl,bc   ;full address
 3130 D1:CC46 7E -  -  -          READ_ACCESS
 3131 D1:CC47 4F -  -  -          ld  c,a
 3132 D1:CC48 E1 -  -  -      pop hl
 3133 D1:CC49 18 CA -  -      jr  -_    
 3134 D1:CC4B -  -  -  -  
 3135 D1:CC4B -  -  -  -  ;NOP - No Operation
 3136 D1:CC4B -  -  -  -  ;implied	NOP	EA	1	2  
 3137 D1:CC4B -  -  -  -  inst6502_nop:
 3138 D1:CC4B ED 33 02 -      ADDCYC(2)
 3139 D1:CC4E C3 CD B3 D1     jp  i6502FinishLoad
 3140 D1:CC52 -  -  -  -  
 3141 D1:CC52 -  -  -  -  
 3142 D1:CC52 -  -  -  -  
 3143 D1:CC52 -  -  -  -  ;##############################################################################
 3144 D1:CC52 -  -  -  -  ;##############################################################################
 3145 D1:CC52 -  -  -  -  ;##############################################################################
 3146 D1:CC52 -  -  -  -  ;##-----#-#####-#####-----##---###---##-########-----#--##-##---#-----#----####
 3147 D1:CC52 -  -  -  -  ;####-###-#####-#####-#####-#####-###-#-##########-###--##-#-######-###-###-###
 3148 D1:CC52 -  -  -  -  ;####-###-#####-#####---###-##--#-----#-##########-###-#-#-##---###-###-----###
 3149 D1:CC52 -  -  -  -  ;####-###-#####-#####-#####-###-#-###-#-##########-###-##--#####-##-###-##-####
 3150 D1:CC52 -  -  -  -  ;##-----#-----#-----#-----##----#-###-#-----####-----#-##--#----###-###-###-#-#
 3151 D1:CC52 -  -  -  -  ;##############################################################################
 3152 D1:CC52 -  -  -  -  ;##############################################################################
 3153 D1:CC52 -  -  -  -  ;##############################################################################
 3154 D1:CC52 -  -  -  -  ;Instructions by type: Illegal Instructions
 3155 D1:CC52 -  -  -  -  
 3156 D1:CC52 -  -  -  -  ;NOP - No operations. All the no-operations. Even the ones that are linked
 3157 D1:CC52 -  -  -  -  ;to the machinery that operates an addressing mode, but does nothing with it.
 3158 D1:CC52 -  -  -  -  ;A whole lotta nothing.
 3159 D1:CC52 -  -  -  -  
 3160 D1:CC52 -  -  -  -  ;Bytes:1, Cycles:2, Opcodes: 1A, 3A, 5A, 7A, DA, FA
 3161 D1:CC52 -  -  -  -  inst6502_nop_implied:
 3162 D1:CC52 ED 33 02 -      ADDCYC(2)
 3163 D1:CC55 C3 CD B3 D1     jp  i6502FinishLoad
 3164 D1:CC59 -  -  -  -  
 3165 D1:CC59 -  -  -  -  ;Bytes:2, Cycles:2, Opcodes: 80, 82, 89, C2, E2
 3166 D1:CC59 -  -  -  -  inst6502_nop_imm:
 3167 D1:CC59 ED 33 02 -      ADDCYC(2)
 3168 D1:CC5C C3 B4 B3 D1     jp  i6502NextLoad
 3169 D1:CC60 -  -  -  -  
 3170 D1:CC60 -  -  -  -  ;Bytes:2, Cycles:3, Opcodes: 04, 44, 64
 3171 D1:CC60 -  -  -  -  inst6502_nop_zp:
 3172 D1:CC60 ED 33 03 -      ADDCYC(3)
 3173 D1:CC63 C3 B4 B3 D1     jp  i6502NextLoad
 3174 D1:CC67 -  -  -  -  
 3175 D1:CC67 -  -  -  -  ;Bytes:2, Cycles:4, Opcodes: 14, 34, 54, 74, D4, F4
 3176 D1:CC67 -  -  -  -  inst6502_nop_zpx:
 3177 D1:CC67 ED 33 04 -      ADDCYC(4)
 3178 D1:CC6A C3 B4 B3 D1     jp  i6502NextLoad
 3179 D1:CC6E -  -  -  -  
 3180 D1:CC6E -  -  -  -  ;Bytes:3, Cycles:4, Opcode: 0C
 3181 D1:CC6E -  -  -  -  inst6502_nop_abs:
 3182 D1:CC6E ED 33 04 -      ADDCYC(4)
 3183 D1:CC71 CD 34 B6 D1     call subroutine6502_abs_split_start
 3184 D1:CC75 E5 -  -  -      push hl
 3185 D1:CC76 7E -  -  -          READ_ACCESS
 3186 D1:CC77 E1 -  -  -      pop hl
 3187 D1:CC78 C3 B4 B3 D1     jp  i6502NextLoad
 3188 D1:CC7C -  -  -  -  
 3189 D1:CC7C -  -  -  -  ;Note: This thing latches all over the place but does nothing. All these
 3190 D1:CC7C -  -  -  -  ;READ_ACCESS thingies are in case the ROM wants to clear PPU flags or something
 3191 D1:CC7C -  -  -  -  ;using these instructions. But the one below is noted to do the touchy-feelies
 3192 D1:CC7C -  -  -  -  ;at ABS and (ABS+X)&0xFF
 3193 D1:CC7C -  -  -  -  ;Bytes:3, Cycles:4*, Opcodes: 1C, 3C, 5C, 7C, DC, FC
 3194 D1:CC7C -  -  -  -  inst6502_nop_absx:
 3195 D1:CC7C ED 33 04 -      ADDCYC(4)
 3196 D1:CC7F CD 55 B6 D1     PUSH_ABSXSPLIT
 3197 D1:CC83 7E -  -  -          READ_ACCESS
 3198 D1:CC84 E1 -  -  -      pop hl
 3199 D1:CC85 C3 B4 B3 D1     jp  i6502NextLoad
 3200 D1:CC89 -  -  -  -  
 3201 D1:CC89 -  -  -  -  ;-----------------------------------------------------------------------------
 3202 D1:CC89 -  -  -  -  ;ALR (ASR) - AND oper + LSR
 3203 D1:CC89 -  -  -  -  ;Affects CZN
 3204 D1:CC89 -  -  -  -  
 3205 D1:CC89 -  -  -  -  ;immediate	ALR #oper	4B	2	2 
 3206 D1:CC89 -  -  -  -  inst6502_alr_imm:
 3207 D1:CC89 ED 33 02 -      ADDCYC(2)
 3208 D1:CC8C DD 7E 00 -      ld  a,(ix+REGA)
 3209 D1:CC8F A6 -  -  -      and a,(hl)
 3210 D1:CC90 CB 3F -  -      srl a   ;Must do it this way. A-optimized instr do not affect Z
 3211 D1:CC92 DD 77 00 -      ld  (ix+REGA),a
 3212 D1:CC95 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3213 D1:CCAF C3 B4 B3 D1     jp  i6502NextLoad
 3214 D1:CCB3 -  -  -  -  
 3215 D1:CCB3 -  -  -  -  ;-----------------------------------------------------------------------------
 3216 D1:CCB3 -  -  -  -  
 3217 D1:CCB3 -  -  -  -  ;ANC [ANC (ANC2)] - AND oper + set Carry as if ASL [ROL]
 3218 D1:CCB3 -  -  -  -  
 3219 D1:CCB3 -  -  -  -  ;immediate	ANC #oper	0B	2	2 
 3220 D1:CCB3 -  -  -  -  ;immediate	ANC #oper	2B	2	2
 3221 D1:CCB3 -  -  -  -  instr6502_anc_imm:
 3222 D1:CCB3 -  -  -  -  instr6502_anc2_imm:
 3223 D1:CCB3 ED 33 02 -      ADDCYC(2)
 3224 D1:CCB6 DD 7E 00 -      ld  a,(ix+REGA)
 3225 D1:CCB9 A6 -  -  -      and a,(hl)
 3226 D1:CCBA DD 77 00 -      ld  (ix+REGA),a
 3227 D1:CCBD CB 07 -  -      rlc a
 3228 D1:CCBF DD 7E 04 -      ld  a,(ix+REGSR)
 3229 D1:CCC2 -  -  -  -      ;A small optimiztion here, letting us merge OPRFLG_C and OPRFLG_N
 3230 D1:CCC2 CB 87 -  -      res SF_CARRY,a
 3231 D1:CCC4 CB BF -  -      res SF_NEG,a
 3232 D1:CCC6 30 04 -  -      jr  nc,+_
 3233 D1:CCC8 CB C7 -  -      set SF_CARRY,a
 3234 D1:CCCA CB FF -  -      set SF_NEG,a
 3235 D1:CCCC CB 8F -  -  _:  res SF_ZERO,a
 3236 D1:CCCE 20 02 -  -      jr  nz,$+4
 3237 D1:CCD0 CB CF -  -      set SF_ZERO,a
 3238 D1:CCD2 DD 77 04 -      ld  (ix+REGSR),a
 3239 D1:CCD5 C3 B4 B3 D1     jp  i6502NextLoad
 3240 D1:CCD9 -  -  -  -  
 3241 D1:CCD9 -  -  -  -  ;-----------------------------------------------------------------------------
 3242 D1:CCD9 -  -  -  -  
 3243 D1:CCD9 -  -  -  -  ;ANE (XAA) - (A OR ??) AND X AND oper -> A
 3244 D1:CCD9 -  -  -  -  ;immediate	ANE #oper	8B	2	2  	††
 3245 D1:CCD9 -  -  -  -  instr6502_ane_imm:
 3246 D1:CCD9 ED 33 02 -      ADDCYC(2)
 3247 D1:CCDC ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3248 D1:CCDE DD B6 00 -      or  a,(ix+REGA)
 3249 D1:CCE1 DD A6 01 -      and a,(ix+REGX)
 3250 D1:CCE4 A6 -  -  -      and a,(hl)
 3251 D1:CCE5 DD 77 00 -      ld  (ix+REGA),a
 3252 D1:CCE8 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3253 D1:CCFC C3 B4 B3 D1     jp  i6502NextLoad
 3254 D1:CD00 -  -  -  -  
 3255 D1:CD00 -  -  -  -  ;-----------------------------------------------------------------------------
 3256 D1:CD00 -  -  -  -  
 3257 D1:CD00 -  -  -  -  
 3258 D1:CD00 -  -  -  -  ;ARR - AND OPER + ROR
 3259 D1:CD00 -  -  -  -  ;Something hinky is going on with the flags. "This operation involves the adder"
 3260 D1:CD00 -  -  -  -  ;I need to get a better handle over what that might be.
 3261 D1:CD00 -  -  -  -  ;CVZN flags affected.
 3262 D1:CD00 -  -  -  -  ;
 3263 D1:CD00 -  -  -  -  ;Primary sources reads:
 3264 D1:CD00 -  -  -  -  ;----------------------
 3265 D1:CD00 -  -  -  -  ;This operation involves the adder:
 3266 D1:CD00 -  -  -  -  ;V-flag is set according to (A AND oper) + oper
 3267 D1:CD00 -  -  -  -  ;The carry is not set, but bit 7 (sign) is exchanged with the carry
 3268 D1:CD00 -  -  -  -  ;A AND oper, C -> [76543210] -> C
 3269 D1:CD00 -  -  -  -  ;
 3270 D1:CD00 -  -  -  -  ;Secondary source reads:
 3271 D1:CD00 -  -  -  -  ;-----------------------
 3272 D1:CD00 -  -  -  -  ;Similar to AND #i then ROR A, except sets the flags differently. 
 3273 D1:CD00 -  -  -  -  ;N and Z are normal, but C is bit 6 and V is bit 6 xor bit 5. 
 3274 D1:CD00 -  -  -  -  ;A fast way to perform signed division by 4 is: CMP #$80; ARR #$FF; ROR. 
 3275 D1:CD00 -  -  -  -  ;This can be extended to larger powers of two.
 3276 D1:CD00 -  -  -  -  
 3277 D1:CD00 -  -  -  -  ;immediate	ARR #oper	6B	2	2  
 3278 D1:CD00 -  -  -  -  instr6502_arr_imm:
 3279 D1:CD00 ED 33 02 -      ADDCYC(2)
 3280 D1:CD03 DD 7E 00 -      ld  a,(ix+REGA)
 3281 D1:CD06 A6 -  -  -      and a,(hl)
 3282 D1:CD07 47 -  -  -      ld  b,a
 3283 D1:CD08 DD 7E 04 -      ld  a,(ix+REGSR)
 3284 D1:CD0B 4F -  -  -      ld  c,a
 3285 D1:CD0C 0F -  -  -      rrca    ;extract carry. This carry will go into sign bit of result
 3286 D1:CD0D CB B9 -  -      res SF_NEG,c
 3287 D1:CD0F 30 02 -  -      jr  nc,$+4
 3288 D1:CD11 CB F9 -  -      set SF_NEG,c
 3289 D1:CD13 CB 18 -  -      rr b
 3290 D1:CD15 CB 89 -  -      res SF_ZERO,c
 3291 D1:CD17 20 02 -  -      jr  nz,$+4
 3292 D1:CD19 CB C9 -  -      set SF_ZERO,c
 3293 D1:CD1B DD 70 00 -      ld  (ix+REGA),b
 3294 D1:CD1E 78 -  -  -      ld  a,b
 3295 D1:CD1F E6 40 -  -      and a,%01000000
 3296 D1:CD21 CB 81 -  -      res SF_CARRY,c
 3297 D1:CD23 28 02 -  -      jr  z,$+4
 3298 D1:CD25 CB C1 -  -      set SF_CARRY,c
 3299 D1:CD27 0F -  -  -      rrca
 3300 D1:CD28 EE 20 -  -      xor a,%00100000
 3301 D1:CD2A E6 20 -  -      and a,%00100000
 3302 D1:CD2C CB B1 -  -      res SF_OVER,c
 3303 D1:CD2E 28 02 -  -      jr  z,$+4
 3304 D1:CD30 CB F1 -  -      set SF_OVER,c
 3305 D1:CD32 DD 71 04 -      ld  (ix+REGSR),c
 3306 D1:CD35 -  -  -  -      ;TODO: Figure out a more efficient way to emulate this instruction.
 3307 D1:CD35 C3 B4 B3 D1     jp  i6502NextLoad
 3308 D1:CD39 -  -  -  -  
 3309 D1:CD39 -  -  -  -  ;-----------------------------------------------------------------------------
 3310 D1:CD39 -  -  -  -  ;DCP (DCM) - DEC oper + CMP oper
 3311 D1:CD39 -  -  -  -  ;M-1->M, A-M. Affects CZN
 3312 D1:CD39 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3313 D1:CD39 -  -  -  -  
 3314 D1:CD39 -  -  -  -  ;zeropage	DCP oper	C7	2	5  	
 3315 D1:CD39 -  -  -  -  inst6502_dcp_zp:
 3316 D1:CD39 ED 33 05 -      ADDCYC(5)
 3317 D1:CD3C 7E -  -  -      ld  a,(hl)
 3318 D1:CD3D 01 00 38 D0     ld  bc,ZEROPAGE
 3319 D1:CD41 81 -  -  -      add a,c
 3320 D1:CD42 4F -  -  -      ld  c,a
 3321 D1:CD43 0A -  -  -      ld  a,(bc)
 3322 D1:CD44 3D -  -  -      dec a
 3323 D1:CD45 02 -  -  -      ld  (bc),a
 3324 D1:CD46 47 -  -  -      ld  b,a
 3325 D1:CD47 C3 2A B7 D1     jp  subroutine6502_cmp_combined_end
 3326 D1:CD4B -  -  -  -  
 3327 D1:CD4B -  -  -  -  ;zeropage,X	DCP oper,X	D7	2	6  	
 3328 D1:CD4B -  -  -  -  inst6520_dcp_zpx:
 3329 D1:CD4B ED 33 06 -      ADDCYC(6)
 3330 D1:CD4E 7E -  -  -      ld  a,(hl)
 3331 D1:CD4F 01 00 38 D0     ld  bc,ZEROPAGE
 3332 D1:CD53 81 -  -  -      add a,c
 3333 D1:CD54 DD 86 01 -      add a,(ix+REGX)
 3334 D1:CD57 4F -  -  -      ld  c,a
 3335 D1:CD58 0A -  -  -      ld  a,(bc)
 3336 D1:CD59 3D -  -  -      dec a
 3337 D1:CD5A 02 -  -  -      ld  (bc),a
 3338 D1:CD5B 47 -  -  -      ld  b,a
 3339 D1:CD5C C3 2A B7 D1     jp  subroutine6502_cmp_combined_end
 3340 D1:CD60 -  -  -  -  
 3341 D1:CD60 -  -  -  -  ;absolute	DCP oper	CF	3	6  	
 3342 D1:CD60 -  -  -  -  inst6502_dcp_abs:
 3343 D1:CD60 ED 33 06 -      ADDCYC(6)
 3344 D1:CD63 CD 34 B6 D1     call subroutine6502_abs_split_start
 3345 D1:CD67 E5 -  -  -      push hl
 3346 D1:CD68 50 -  -  -          ld  d,b
 3347 D1:CD69 79 -  -  -          ld  a,c
 3348 D1:CD6A 0E 08 -  -          ld  c,BASETABLE_STRIDE
 3349 D1:CD6C ED 4C -  -          mlt bc
 3350 D1:CD6E 21 00 40 D0         ld  hl,PAGETABLE
 3351 D1:CD72 09 -  -  -          add hl,bc
 3352 D1:CD73 ED 27 -  -          ld  hl,(hl)
 3353 D1:CD75 06 00 -  -          ld  b,0
 3354 D1:CD77 4F -  -  -          ld  c,a
 3355 D1:CD78 09 -  -  -          add hl,bc   ;full address
 3356 D1:CD79 7E -  -  -          READ_ACCESS
 3357 D1:CD7A 3D -  -  -          dec a
 3358 D1:CD7B 47 -  -  -          ld b,a
 3359 D1:CD7C C5 -  -  -          push bc
 3360 D1:CD7D 70 -  -  -              WRITE_ACCESS
 3361 D1:CD7E C1 -  -  -          pop bc
 3362 D1:CD7F E1 -  -  -      pop hl
 3363 D1:CD80 C3 2A B7 D1     jp  subroutine6502_cmp_combined_end
 3364 D1:CD84 -  -  -  -  
 3365 D1:CD84 -  -  -  -  ;absolut,X	DCP oper,X	DF	3	7  	
 3366 D1:CD84 -  -  -  -  inst6502_dcp_absx:
 3367 D1:CD84 ED 33 07 -      ADDCYC(7)
 3368 D1:CD87 CD 91 B6 D1     PUSH_ABSXSPLIT_NODEP
 3369 D1:CD8B 7E -  -  -          READ_ACCESS
 3370 D1:CD8C 3D -  -  -          dec a
 3371 D1:CD8D 47 -  -  -          ld  b,a
 3372 D1:CD8E C5 -  -  -          push bc
 3373 D1:CD8F 70 -  -  -              WRITE_ACCESS
 3374 D1:CD90 C1 -  -  -          pop bc
 3375 D1:CD91 E1 -  -  -      pop hl
 3376 D1:CD92 C3 2A B7 D1     jp  subroutine6502_cmp_combined_end
 3377 D1:CD96 -  -  -  -  
 3378 D1:CD96 -  -  -  -  ;absolut,Y	DCP oper,Y	DB	3	7  	
 3379 D1:CD96 -  -  -  -  inst6502_dcp_absy:
 3380 D1:CD96 ED 33 07 -      ADDCYC(7)
 3381 D1:CD99 CD 8C B6 D1     PUSH_ABSYSPLIT_NODEP
 3382 D1:CD9D 7E -  -  -          READ_ACCESS
 3383 D1:CD9E 3D -  -  -          dec a
 3384 D1:CD9F 47 -  -  -          ld  b,a
 3385 D1:CDA0 C5 -  -  -          push bc
 3386 D1:CDA1 70 -  -  -              WRITE_ACCESS
 3387 D1:CDA2 C1 -  -  -          pop bc
 3388 D1:CDA3 E1 -  -  -      pop hl
 3389 D1:CDA4 C3 2A B7 D1     jp  subroutine6502_cmp_combined_end
 3390 D1:CDA8 -  -  -  -  
 3391 D1:CDA8 -  -  -  -  ;(indirect,X)	DCP (oper,X)	C3	2	8  	
 3392 D1:CDA8 -  -  -  -  inst6502_dcp_indx:
 3393 D1:CDA8 ED 33 08 -      ADDCYC(8)
 3394 D1:CDAB E5 -  -  -      push hl
 3395 D1:CDAC 7E -  -  -          ld  a,(hl)
 3396 D1:CDAD 21 00 38 D0         ld  hl,ZEROPAGE
 3397 D1:CDB1 85 -  -  -          add a,L
 3398 D1:CDB2 DD 86 01 -          add a,(ix+REGX)
 3399 D1:CDB5 6F -  -  -          ld  L,a
 3400 D1:CDB6 7E -  -  -          ld  a,(hl)
 3401 D1:CDB7 2C -  -  -          inc L
 3402 D1:CDB8 56 -  -  -          ld  d,(hl)
 3403 D1:CDB9 42 -  -  -          ld  b,d
 3404 D1:CDBA 0E 08 -  -          ld  c,BASETABLE_STRIDE
 3405 D1:CDBC ED 4C -  -          mlt bc
 3406 D1:CDBE 21 00 40 D0         ld  hl,PAGETABLE
 3407 D1:CDC2 09 -  -  -          add hl,bc
 3408 D1:CDC3 ED 27 -  -          ld  hl,(hl)
 3409 D1:CDC5 06 00 -  -          ld  b,0
 3410 D1:CDC7 4F -  -  -          ld  c,a
 3411 D1:CDC8 09 -  -  -          add hl,bc
 3412 D1:CDC9 7E -  -  -          READ_ACCESS
 3413 D1:CDCA 3D -  -  -          dec a
 3414 D1:CDCB 47 -  -  -          ld  b,a
 3415 D1:CDCC C5 -  -  -          push bc
 3416 D1:CDCD 70 -  -  -              WRITE_ACCESS
 3417 D1:CDCE C1 -  -  -          pop bc
 3418 D1:CDCF E1 -  -  -      pop hl
 3419 D1:CDD0 C3 2A B7 D1     jp  subroutine6502_cmp_combined_end
 3420 D1:CDD4 -  -  -  -  
 3421 D1:CDD4 -  -  -  -  ;(indirect),Y	DCP (oper),Y	D3	2	8  
 3422 D1:CDD4 -  -  -  -  inst6502_dcp_indy:
 3423 D1:CDD4 ED 33 08 -      ADDCYC(8)
 3424 D1:CDD7 E5 -  -  -      push hl
 3425 D1:CDD8 7E -  -  -          ld  a,(hl)
 3426 D1:CDD9 21 00 38 D0         ld  hl,ZEROPAGE
 3427 D1:CDDD 85 -  -  -          add a,L
 3428 D1:CDDE 6F -  -  -          ld  L,a
 3429 D1:CDDF 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3430 D1:CDE0 2C -  -  -          inc L
 3431 D1:CDE1 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3432 D1:CDE4 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3433 D1:CDE5 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3434 D1:CDE7 24 -  -  -          inc h
 3435 D1:CDE8 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3436 D1:CDE9 2E 08 -  -          ld  L,BASETABLE_STRIDE
 3437 D1:CDEB ED 6C -  -          mlt hl          ;23.
 3438 D1:CDED 01 00 40 D0         ld  bc,PAGETABLE
 3439 D1:CDF1 09 -  -  -          add hl,bc
 3440 D1:CDF2 ED 27 -  -          ld  hl,(hl)     ;address get.
 3441 D1:CDF4 01 00 00 00         ld  bc,0
 3442 D1:CDF8 4F -  -  -          ld  c,a
 3443 D1:CDF9 09 -  -  -          add hl,bc       ;Full address get.
 3444 D1:CDFA 7E -  -  -          READ_ACCESS
 3445 D1:CDFB 3D -  -  -          dec a
 3446 D1:CDFC 47 -  -  -          ld  b,a
 3447 D1:CDFD C5 -  -  -          push bc
 3448 D1:CDFE 70 -  -  -              WRITE_ACCESS
 3449 D1:CDFF C1 -  -  -          pop bc
 3450 D1:CE00 E1 -  -  -      pop hl
 3451 D1:CE01 C3 2A B7 D1     jp  subroutine6502_cmp_combined_end
 3452 D1:CE05 -  -  -  -  
 3453 D1:CE05 -  -  -  -  ;-----------------------------------------------------------------------------
 3454 D1:CE05 -  -  -  -  ;ISC (ISB, INS) - INC oper + SBC oper
 3455 D1:CE05 -  -  -  -  ;M+1->M, A-M-not(C)->A, affects VCZN
 3456 D1:CE05 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3457 D1:CE05 -  -  -  -  
 3458 D1:CE05 -  -  -  -  
 3459 D1:CE05 -  -  -  -  
 3460 D1:CE05 -  -  -  -  ;zeropage	ISC oper	E7	2	5  	
 3461 D1:CE05 -  -  -  -  inst6502_isc_zp:
 3462 D1:CE05 ED 33 05 -      ADDCYC(5)
 3463 D1:CE08 7E -  -  -      ld  a,(hl)
 3464 D1:CE09 01 00 38 D0     ld  bc,ZEROPAGE
 3465 D1:CE0D 81 -  -  -      add a,c
 3466 D1:CE0E 4F -  -  -      ld  c,a
 3467 D1:CE0F 0A -  -  -      ld  a,(bc)
 3468 D1:CE10 3C -  -  -      inc a
 3469 D1:CE11 02 -  -  -      ld  (bc),a
 3470 D1:CE12 4F -  -  -      ld  c,a
 3471 D1:CE13 C3 F7 B6 D1     jp  subroutine6502_sbc_combined_end
 3472 D1:CE17 -  -  -  -  
 3473 D1:CE17 -  -  -  -  ;zeropage,X	ISC oper,X	F7	2	6  
 3474 D1:CE17 -  -  -  -  inst6520_isc_zpx:
 3475 D1:CE17 ED 33 06 -      ADDCYC(6)
 3476 D1:CE1A 7E -  -  -      ld  a,(hl)
 3477 D1:CE1B 01 00 38 D0     ld  bc,ZEROPAGE
 3478 D1:CE1F 81 -  -  -      add a,c
 3479 D1:CE20 DD 86 01 -      add a,(ix+REGX)
 3480 D1:CE23 4F -  -  -      ld  c,a
 3481 D1:CE24 0A -  -  -      ld  a,(bc)
 3482 D1:CE25 3C -  -  -      inc a
 3483 D1:CE26 02 -  -  -      ld  (bc),a
 3484 D1:CE27 4F -  -  -      ld  c,a
 3485 D1:CE28 C3 F7 B6 D1     jp  subroutine6502_sbc_combined_end
 3486 D1:CE2C -  -  -  -  
 3487 D1:CE2C -  -  -  -  ;absolute	ISC oper	EF	3	6  	
 3488 D1:CE2C -  -  -  -  inst6502_isc_abs:
 3489 D1:CE2C ED 33 06 -      ADDCYC(6)
 3490 D1:CE2F CD 34 B6 D1     call subroutine6502_abs_split_start
 3491 D1:CE33 E5 -  -  -      push hl
 3492 D1:CE34 50 -  -  -          ld  d,b
 3493 D1:CE35 79 -  -  -          ld  a,c
 3494 D1:CE36 0E 08 -  -          ld  c,BASETABLE_STRIDE
 3495 D1:CE38 ED 4C -  -          mlt bc
 3496 D1:CE3A 21 00 40 D0         ld  hl,PAGETABLE
 3497 D1:CE3E 09 -  -  -          add hl,bc
 3498 D1:CE3F ED 27 -  -          ld  hl,(hl)
 3499 D1:CE41 06 00 -  -          ld  b,0
 3500 D1:CE43 4F -  -  -          ld  c,a
 3501 D1:CE44 09 -  -  -          add hl,bc   ;full address
 3502 D1:CE45 7E -  -  -          READ_ACCESS
 3503 D1:CE46 3C -  -  -          inc a
 3504 D1:CE47 47 -  -  -          ld b,a
 3505 D1:CE48 4F -  -  -          ld c,a
 3506 D1:CE49 C5 -  -  -          push bc
 3507 D1:CE4A 70 -  -  -              WRITE_ACCESS
 3508 D1:CE4B C1 -  -  -          pop bc
 3509 D1:CE4C E1 -  -  -      pop hl
 3510 D1:CE4D C3 F7 B6 D1     jp  subroutine6502_sbc_combined_end
 3511 D1:CE51 -  -  -  -  
 3512 D1:CE51 -  -  -  -  ;absolut,X	ISC oper,X	FF	3	7  	
 3513 D1:CE51 -  -  -  -  inst6502_isc_absx:
 3514 D1:CE51 ED 33 07 -      ADDCYC(7)
 3515 D1:CE54 CD 91 B6 D1     PUSH_ABSXSPLIT_NODEP
 3516 D1:CE58 7E -  -  -          READ_ACCESS
 3517 D1:CE59 3C -  -  -          inc a
 3518 D1:CE5A 47 -  -  -          ld  b,a
 3519 D1:CE5B 4F -  -  -          ld  c,a
 3520 D1:CE5C C5 -  -  -          push bc
 3521 D1:CE5D 70 -  -  -              WRITE_ACCESS
 3522 D1:CE5E C1 -  -  -          pop bc
 3523 D1:CE5F E1 -  -  -      pop hl
 3524 D1:CE60 C3 F7 B6 D1     jp  subroutine6502_sbc_combined_end
 3525 D1:CE64 -  -  -  -  
 3526 D1:CE64 -  -  -  -  ;absolut,Y	ISC oper,Y	FB	3	7  	
 3527 D1:CE64 -  -  -  -  inst6502_isc_absy:
 3528 D1:CE64 ED 33 07 -      ADDCYC(7)
 3529 D1:CE67 CD 8C B6 D1     PUSH_ABSYSPLIT_NODEP
 3530 D1:CE6B 7E -  -  -          READ_ACCESS
 3531 D1:CE6C 3C -  -  -          inc a
 3532 D1:CE6D 47 -  -  -          ld  b,a
 3533 D1:CE6E 4F -  -  -          ld  c,a
 3534 D1:CE6F C5 -  -  -          push bc
 3535 D1:CE70 70 -  -  -              WRITE_ACCESS
 3536 D1:CE71 C1 -  -  -          pop bc
 3537 D1:CE72 E1 -  -  -      pop hl
 3538 D1:CE73 C3 F7 B6 D1     jp  subroutine6502_sbc_combined_end
 3539 D1:CE77 -  -  -  -  
 3540 D1:CE77 -  -  -  -  ;(indirect,X)	ISC (oper,X)	E3	2	8  	
 3541 D1:CE77 -  -  -  -  inst6502_isc_indx:
 3542 D1:CE77 ED 33 08 -      ADDCYC(8)
 3543 D1:CE7A E5 -  -  -      push hl
 3544 D1:CE7B 7E -  -  -          ld  a,(hl)
 3545 D1:CE7C 21 00 38 D0         ld  hl,ZEROPAGE
 3546 D1:CE80 85 -  -  -          add a,L
 3547 D1:CE81 DD 86 01 -          add a,(ix+REGX)
 3548 D1:CE84 6F -  -  -          ld  L,a
 3549 D1:CE85 7E -  -  -          ld  a,(hl)
 3550 D1:CE86 2C -  -  -          inc L
 3551 D1:CE87 56 -  -  -          ld  d,(hl)
 3552 D1:CE88 42 -  -  -          ld  b,d
 3553 D1:CE89 0E 08 -  -          ld  c,BASETABLE_STRIDE
 3554 D1:CE8B ED 4C -  -          mlt bc
 3555 D1:CE8D 21 00 40 D0         ld  hl,PAGETABLE
 3556 D1:CE91 09 -  -  -          add hl,bc
 3557 D1:CE92 ED 27 -  -          ld  hl,(hl)
 3558 D1:CE94 06 00 -  -          ld  b,0
 3559 D1:CE96 4F -  -  -          ld  c,a
 3560 D1:CE97 09 -  -  -          add hl,bc
 3561 D1:CE98 7E -  -  -          READ_ACCESS
 3562 D1:CE99 3C -  -  -          inc a
 3563 D1:CE9A 47 -  -  -          ld  b,a
 3564 D1:CE9B 4F -  -  -          ld  c,a
 3565 D1:CE9C C5 -  -  -          push bc
 3566 D1:CE9D 70 -  -  -              WRITE_ACCESS
 3567 D1:CE9E C1 -  -  -          pop bc
 3568 D1:CE9F E1 -  -  -      pop hl
 3569 D1:CEA0 C3 F7 B6 D1     jp  subroutine6502_sbc_combined_end
 3570 D1:CEA4 -  -  -  -  
 3571 D1:CEA4 -  -  -  -  ;(indirect),Y	ISC (oper),Y	F3	2	8  
 3572 D1:CEA4 -  -  -  -  inst6502_isc_indy:
 3573 D1:CEA4 ED 33 08 -      ADDCYC(8)
 3574 D1:CEA7 E5 -  -  -      push hl
 3575 D1:CEA8 7E -  -  -          ld  a,(hl)
 3576 D1:CEA9 21 00 38 D0         ld  hl,ZEROPAGE
 3577 D1:CEAD 85 -  -  -          add a,L
 3578 D1:CEAE 6F -  -  -          ld  L,a
 3579 D1:CEAF 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3580 D1:CEB0 2C -  -  -          inc L
 3581 D1:CEB1 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3582 D1:CEB4 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3583 D1:CEB5 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3584 D1:CEB7 24 -  -  -          inc h
 3585 D1:CEB8 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3586 D1:CEB9 2E 08 -  -          ld  L,BASETABLE_STRIDE
 3587 D1:CEBB ED 6C -  -          mlt hl          ;23.
 3588 D1:CEBD 01 00 40 D0         ld  bc,PAGETABLE
 3589 D1:CEC1 09 -  -  -          add hl,bc
 3590 D1:CEC2 ED 27 -  -          ld  hl,(hl)     ;address get.
 3591 D1:CEC4 01 00 00 00         ld  bc,0
 3592 D1:CEC8 4F -  -  -          ld  c,a
 3593 D1:CEC9 09 -  -  -          add hl,bc       ;Full address get.
 3594 D1:CECA 7E -  -  -          READ_ACCESS
 3595 D1:CECB 3C -  -  -          inc a
 3596 D1:CECC 47 -  -  -          ld  b,a
 3597 D1:CECD 4F -  -  -          ld  c,a
 3598 D1:CECE C5 -  -  -          push bc
 3599 D1:CECF 70 -  -  -              WRITE_ACCESS
 3600 D1:CED0 C1 -  -  -          pop bc
 3601 D1:CED1 E1 -  -  -      pop hl
 3602 D1:CED2 C3 F7 B6 D1     jp  subroutine6502_sbc_combined_end
 3603 D1:CED6 -  -  -  -  ;-----------------------------------------------------------------------------
 3604 D1:CED6 -  -  -  -  ;LAS (LAR) - LDA/TSX oper
 3605 D1:CED6 -  -  -  -  ;M AND SP -> A, X, SP. Affects ZN
 3606 D1:CED6 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3607 D1:CED6 -  -  -  -  ;absolut,Y	LAS oper,Y	BB	3	4* 
 3608 D1:CED6 -  -  -  -  inst6502_las_absy:
 3609 D1:CED6 ED 33 04 -      ADDCYC(4)
 3610 D1:CED9 CD 50 B6 D1     PUSH_ABSYSPLIT
 3611 D1:CEDD 7E -  -  -          READ_ACCESS
 3612 D1:CEDE E1 -  -  -      pop hl
 3613 D1:CEDF DD A6 03 -      and a,(ix+REGSP)
 3614 D1:CEE2 DD 77 00 -      ld  (ix+REGA),A
 3615 D1:CEE5 DD 77 01 -      ld  (ix+REGX),A
 3616 D1:CEE8 DD 77 03 -      ld  (ix+REGSP),A
 3617 D1:CEEB DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3618 D1:CEFF C3 B4 B3 D1     jp i6502NextLoad
 3619 D1:CF03 -  -  -  -  
 3620 D1:CF03 -  -  -  -  ;-----------------------------------------------------------------------------
 3621 D1:CF03 -  -  -  -  ;LAX - LDA oper + LDX oper
 3622 D1:CF03 -  -  -  -  ;M -> A -> X. Flags affected: ZN
 3623 D1:CF03 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3624 D1:CF03 -  -  -  -  ;zeropage	LAX oper	A7	2	3  	
 3625 D1:CF03 -  -  -  -  inst6502_lax_zp:
 3626 D1:CF03 ED 33 03 -      ADDCYC(3)
 3627 D1:CF06 7E -  -  -      ld  a,(hl)
 3628 D1:CF07 01 00 38 D0     ld  bc,ZEROPAGE
 3629 D1:CF0B 81 -  -  -      add a,c
 3630 D1:CF0C 4F -  -  -      ld  c,a
 3631 D1:CF0D 0A -  -  -      ld  a,(bc)
 3632 D1:CF0E DD 77 00 -      ld  (ix+REGA),a
 3633 D1:CF11 DD 77 01 -      ld  (ix+REGX),a
 3634 D1:CF14 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3635 D1:CF28 C3 B4 B3 D1     jp i6502NextLoad
 3636 D1:CF2C -  -  -  -  
 3637 D1:CF2C -  -  -  -  ;zeropage,Y	LAX oper,Y	B7	2	4  	
 3638 D1:CF2C -  -  -  -  inst6502_lax_zpy:
 3639 D1:CF2C ED 33 04 -      ADDCYC(4)
 3640 D1:CF2F 7E -  -  -      ld  a,(hl)
 3641 D1:CF30 01 00 38 D0     ld  bc,ZEROPAGE
 3642 D1:CF34 81 -  -  -      add a,c
 3643 D1:CF35 DD 86 02 -      add a,(ix+REGY)
 3644 D1:CF38 4F -  -  -      ld  c,a
 3645 D1:CF39 0A -  -  -      ld  a,(bc)
 3646 D1:CF3A DD 77 00 -      ld  (ix+REGA),a
 3647 D1:CF3D DD 77 01 -      ld  (ix+REGX),a
 3648 D1:CF40 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3649 D1:CF54 C3 B4 B3 D1     jp i6502NextLoad
 3650 D1:CF58 -  -  -  -  
 3651 D1:CF58 -  -  -  -  ;absolute	LAX oper	AF	3	4  	
 3652 D1:CF58 -  -  -  -  inst6502_lax_abs:
 3653 D1:CF58 ED 33 04 -      ADDCYC(4)
 3654 D1:CF5B CD 34 B6 D1     call subroutine6502_abs_split_start
 3655 D1:CF5F E5 -  -  -      push hl
 3656 D1:CF60 50 -  -  -          ld  d,b
 3657 D1:CF61 79 -  -  -          ld  a,c
 3658 D1:CF62 0E 08 -  -          ld  c,BASETABLE_STRIDE
 3659 D1:CF64 ED 4C -  -          mlt bc
 3660 D1:CF66 21 00 40 D0         ld  hl,PAGETABLE
 3661 D1:CF6A 09 -  -  -          add hl,bc
 3662 D1:CF6B ED 27 -  -          ld  hl,(hl)
 3663 D1:CF6D 06 00 -  -          ld  b,0
 3664 D1:CF6F 4F -  -  -          ld  c,a
 3665 D1:CF70 09 -  -  -          add hl,bc   ;full address
 3666 D1:CF71 7E -  -  -          READ_ACCESS
 3667 D1:CF72 DD 77 00 -          ld (ix+REGA),a
 3668 D1:CF75 DD 77 01 -          ld (ix+REGX),a
 3669 D1:CF78 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3670 D1:CF8C E1 -  -  -      pop hl
 3671 D1:CF8D C3 B4 B3 D1     jp i6502NextLoad
 3672 D1:CF91 -  -  -  -  
 3673 D1:CF91 -  -  -  -  ;absolut,Y	LAX oper,Y	BF	3	4* 	
 3674 D1:CF91 -  -  -  -  inst6502_lax_absy:
 3675 D1:CF91 ED 33 04 -      ADDCYC(4)
 3676 D1:CF94 CD 50 B6 D1     PUSH_ABSYSPLIT
 3677 D1:CF98 7E -  -  -          READ_ACCESS
 3678 D1:CF99 DD 77 00 -          ld (ix+REGA),a
 3679 D1:CF9C DD 77 01 -          ld (ix+REGX),a
 3680 D1:CF9F DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3681 D1:CFB3 E1 -  -  -      pop hl
 3682 D1:CFB4 C3 B4 B3 D1     jp i6502NextLoad
 3683 D1:CFB8 -  -  -  -  
 3684 D1:CFB8 -  -  -  -  ;(indirect,X)	LAX (oper,X)	A3	2	6  	
 3685 D1:CFB8 -  -  -  -  inst6502_lax_indx:
 3686 D1:CFB8 ED 33 06 -      ADDCYC(6)
 3687 D1:CFBB E5 -  -  -      push hl
 3688 D1:CFBC 7E -  -  -          ld  a,(hl)
 3689 D1:CFBD 21 00 38 D0         ld  hl,ZEROPAGE
 3690 D1:CFC1 85 -  -  -          add a,L
 3691 D1:CFC2 DD 86 01 -          add a,(ix+REGX)
 3692 D1:CFC5 6F -  -  -          ld  L,a
 3693 D1:CFC6 7E -  -  -          ld  a,(hl)
 3694 D1:CFC7 2C -  -  -          inc L
 3695 D1:CFC8 56 -  -  -          ld  d,(hl)
 3696 D1:CFC9 42 -  -  -          ld  b,d
 3697 D1:CFCA 0E 08 -  -          ld  c,BASETABLE_STRIDE
 3698 D1:CFCC ED 4C -  -          mlt bc
 3699 D1:CFCE 21 00 40 D0         ld  hl,PAGETABLE
 3700 D1:CFD2 09 -  -  -          add hl,bc
 3701 D1:CFD3 ED 27 -  -          ld  hl,(hl)
 3702 D1:CFD5 06 00 -  -          ld  b,0
 3703 D1:CFD7 4F -  -  -          ld  c,a
 3704 D1:CFD8 09 -  -  -          add hl,bc
 3705 D1:CFD9 7E -  -  -          READ_ACCESS
 3706 D1:CFDA DD 77 00 -          ld (ix+REGA),a
 3707 D1:CFDD DD 77 01 -          ld (ix+REGX),a
 3708 D1:CFE0 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3709 D1:CFF4 E1 -  -  -      pop hl
 3710 D1:CFF5 C3 B4 B3 D1     jp i6502NextLoad
 3711 D1:CFF9 -  -  -  -  
 3712 D1:CFF9 -  -  -  -  ;(indirect),Y	LAX (oper),Y	B3	2	5* 
 3713 D1:CFF9 -  -  -  -  inst6502_lax_indy:
 3714 D1:CFF9 ED 33 05 -      ADDCYC(5)
 3715 D1:CFFC E5 -  -  -      push hl
 3716 D1:CFFD 7E -  -  -          ld  a,(hl)
 3717 D1:CFFE 21 00 38 D0         ld  hl,ZEROPAGE
 3718 D1:D002 85 -  -  -          add a,L
 3719 D1:D003 6F -  -  -          ld  L,a
 3720 D1:D004 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3721 D1:D005 2C -  -  -          inc L
 3722 D1:D006 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3723 D1:D009 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3724 D1:D00A 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3725 D1:D00C FD 23 -  -          ADDCYC(1)
 3726 D1:D00E 24 -  -  -          inc h
 3727 D1:D00F 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3728 D1:D010 2E 08 -  -          ld  L,BASETABLE_STRIDE
 3729 D1:D012 ED 6C -  -          mlt hl          ;23.
 3730 D1:D014 01 00 40 D0         ld  bc,PAGETABLE
 3731 D1:D018 09 -  -  -          add hl,bc
 3732 D1:D019 ED 27 -  -          ld  hl,(hl)     ;address get.
 3733 D1:D01B 01 00 00 00         ld  bc,0
 3734 D1:D01F 4F -  -  -          ld  c,a
 3735 D1:D020 09 -  -  -          add hl,bc       ;Full address get.
 3736 D1:D021 7E -  -  -          READ_ACCESS
 3737 D1:D022 DD 77 00 -          ld  (ix+REGA),a
 3738 D1:D025 DD 77 01 -          ld  (ix+REGX),a
 3739 D1:D028 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3740 D1:D03C E1 -  -  -      pop hl
 3741 D1:D03D C3 B4 B3 D1     jp i6502NextLoad
 3742 D1:D041 -  -  -  -  
 3743 D1:D041 -  -  -  -  ;-----------------------------------------------------------------------------
 3744 D1:D041 -  -  -  -  ;LXA (LAX immediate)
 3745 D1:D041 -  -  -  -  ;Store * AND oper in A and X
 3746 D1:D041 -  -  -  -  ;Highly unstable, involves a 'magic' constant, see ANE
 3747 D1:D041 -  -  -  -  ;(A OR CONST) AND oper -> A -> X
 3748 D1:D041 -  -  -  -  ;immediate	LXA #oper	AB	2	2  	††
 3749 D1:D041 -  -  -  -  inst6502_lxa:
 3750 D1:D041 ED 33 02 -      ADDCYC(2)
 3751 D1:D044 ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3752 D1:D046 DD B6 00 -      or  a,(ix+REGA)
 3753 D1:D049 A6 -  -  -      and a,(hl)
 3754 D1:D04A DD 77 00 -      ld  (ix+REGA),a
 3755 D1:D04D DD 77 01 -      ld  (ix+REGX),a
 3756 D1:D050 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3757 D1:D064 C3 B4 B3 D1     jp  i6502NextLoad
 3758 D1:D068 -  -  -  -  
 3759 D1:D068 -  -  -  -  ;-----------------------------------------------------------------------------
 3760 D1:D068 -  -  -  -  ;RLA - ROL oper + AND oper
 3761 D1:D068 -  -  -  -  ;M = C <- [76543210] <- C, A AND M -> A. flags CZN
 3762 D1:D068 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3763 D1:D068 -  -  -  -  ;zeropage	RLA oper	27	2	5  	
 3764 D1:D068 -  -  -  -  inst6502_rla_zp:
 3765 D1:D068 ED 33 05 -      ADDCYC(5)
 3766 D1:D06B 7E -  -  -      ld  a,(hl)
 3767 D1:D06C 01 00 38 D0     ld  bc,ZEROPAGE
 3768 D1:D070 81 -  -  -      add a,c
 3769 D1:D071 4F -  -  -      ld  c,a
 3770 D1:D072 DD 7E 04 -      ld  a,(ix+REGSR)
 3771 D1:D075 1F -  -  -      rra
 3772 D1:D076 0A -  -  -      ld  a,(bc)
 3773 D1:D077 17 -  -  -      rla
 3774 D1:D078 02 -  -  -      ld  (bc),a
 3775 D1:D079 -  -  -  -      ;Flag breakdown to optimize for split operation
 3776 D1:D079 DD 46 04 -      ld  b,(ix+REGSR)
 3777 D1:D07C CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3778 D1:D082 DD A6 00 -      and a,(ix+REGA)
 3779 D1:D085 DD 77 00 -      ld  (ix+REGA),a
 3780 D1:D088 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3781 D1:D08E 87 -  -  -      add a,a
 3782 D1:D08F CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3783 D1:D095 DD 70 04 -      ld  (ix+REGSR),b
 3784 D1:D098 C3 B4 B3 D1     jp i6502NextLoad
 3785 D1:D09C -  -  -  -  
 3786 D1:D09C -  -  -  -  ;zeropage,X	RLA oper,X	37	2	6  	
 3787 D1:D09C -  -  -  -  inst6502_rla_zpx:
 3788 D1:D09C ED 33 06 -      ADDCYC(6)
 3789 D1:D09F 7E -  -  -      ld  a,(hl)
 3790 D1:D0A0 01 00 38 D0     ld  bc,ZEROPAGE
 3791 D1:D0A4 81 -  -  -      add a,c
 3792 D1:D0A5 DD 86 01 -      add a,(ix+REGX)
 3793 D1:D0A8 4F -  -  -      ld  c,a
 3794 D1:D0A9 DD 7E 04 -      ld  a,(ix+REGSR)
 3795 D1:D0AC 1F -  -  -      rra
 3796 D1:D0AD 0A -  -  -      ld  a,(bc)
 3797 D1:D0AE 17 -  -  -      rla
 3798 D1:D0AF 02 -  -  -      ld  (bc),a
 3799 D1:D0B0 -  -  -  -      ;Flag breakdown to optimize for split operation
 3800 D1:D0B0 DD 46 04 -      ld  b,(ix+REGSR)
 3801 D1:D0B3 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3802 D1:D0B9 DD A6 00 -      and a,(ix+REGA)
 3803 D1:D0BC DD 77 00 -      ld  (ix+REGA),a
 3804 D1:D0BF CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3805 D1:D0C5 87 -  -  -      add a,a
 3806 D1:D0C6 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3807 D1:D0CC DD 70 04 -      ld  (ix+REGSR),b
 3808 D1:D0CF C3 B4 B3 D1     jp i6502NextLoad
 3809 D1:D0D3 -  -  -  -  
 3810 D1:D0D3 -  -  -  -  ;absolute	RLA oper	2F	3	6  	
 3811 D1:D0D3 -  -  -  -  inst6502_rla_abs:
 3812 D1:D0D3 ED 33 06 -      ADDCYC(6)
 3813 D1:D0D6 CD 34 B6 D1     call subroutine6502_abs_split_start
 3814 D1:D0DA E5 -  -  -      push hl
 3815 D1:D0DB 50 -  -  -          ld  d,b
 3816 D1:D0DC 79 -  -  -          ld  a,c
 3817 D1:D0DD 0E 08 -  -          ld  c,BASETABLE_STRIDE
 3818 D1:D0DF ED 4C -  -          mlt bc
 3819 D1:D0E1 21 00 40 D0         ld  hl,PAGETABLE
 3820 D1:D0E5 09 -  -  -          add hl,bc
 3821 D1:D0E6 ED 27 -  -          ld  hl,(hl)
 3822 D1:D0E8 06 00 -  -          ld  b,0
 3823 D1:D0EA 4F -  -  -          ld  c,a
 3824 D1:D0EB 09 -  -  -          add hl,bc   ;full address
 3825 D1:D0EC 7E -  -  -          READ_ACCESS
 3826 D1:D0ED DD 46 04 -          ld  b,(ix+REGSR)
 3827 D1:D0F0 CB 18 -  -          rr b
 3828 D1:D0F2 17 -  -  -          rla
 3829 D1:D0F3 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3830 D1:D0F4 -  -  -  -          ;Split oper
 3831 D1:D0F4 DD 46 04 -          ld  b,(ix+REGSR)
 3832 D1:D0F7 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3833 D1:D0FD DD A6 00 -          and a,(ix+REGA)
 3834 D1:D100 DD 77 00 -          ld  (ix+REGA),a
 3835 D1:D103 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3836 D1:D109 87 -  -  -          add a,a
 3837 D1:D10A CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3838 D1:D110 DD 70 04 -          ld  (ix+REGSR),b
 3839 D1:D113 41 -  -  -          ld  b,c
 3840 D1:D114 70 -  -  -          WRITE_ACCESS
 3841 D1:D115 E1 -  -  -      pop hl
 3842 D1:D116 C3 B4 B3 D1     jp i6502NextLoad
 3843 D1:D11A -  -  -  -  
 3844 D1:D11A -  -  -  -  ;absolut,X	RLA oper,X	3F	3	7  	
 3845 D1:D11A -  -  -  -  inst6502_rla_absx:
 3846 D1:D11A ED 33 07 -      ADDCYC(7)
 3847 D1:D11D CD 91 B6 D1     PUSH_ABSXSPLIT_NODEP
 3848 D1:D121 7E -  -  -          READ_ACCESS
 3849 D1:D122 DD 46 04 -          ld  b,(ix+REGSR)
 3850 D1:D125 CB 18 -  -          rr b
 3851 D1:D127 17 -  -  -          rla
 3852 D1:D128 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3853 D1:D129 -  -  -  -          ;Split oper
 3854 D1:D129 DD 46 04 -          ld  b,(ix+REGSR)
 3855 D1:D12C CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3856 D1:D132 DD A6 00 -          and a,(ix+REGA)
 3857 D1:D135 DD 77 00 -          ld  (ix+REGA),a
 3858 D1:D138 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3859 D1:D13E 87 -  -  -          add a,a
 3860 D1:D13F CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3861 D1:D145 DD 70 04 -          ld  (ix+REGSR),b
 3862 D1:D148 41 -  -  -          ld  b,c
 3863 D1:D149 70 -  -  -          WRITE_ACCESS
 3864 D1:D14A E1 -  -  -      pop hl
 3865 D1:D14B C3 B4 B3 D1     jp i6502NextLoad
 3866 D1:D14F -  -  -  -  
 3867 D1:D14F -  -  -  -  ;absolut,Y	RLA oper,Y	3B	3	7  	
 3868 D1:D14F -  -  -  -  inst6502_rla_absy:
 3869 D1:D14F ED 33 07 -      ADDCYC(7)
 3870 D1:D152 CD 8C B6 D1     PUSH_ABSYSPLIT_NODEP
 3871 D1:D156 7E -  -  -          READ_ACCESS
 3872 D1:D157 DD 46 04 -          ld  b,(ix+REGSR)
 3873 D1:D15A CB 18 -  -          rr b
 3874 D1:D15C 17 -  -  -          rla
 3875 D1:D15D 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3876 D1:D15E -  -  -  -          ;Split oper
 3877 D1:D15E DD 46 04 -          ld  b,(ix+REGSR)
 3878 D1:D161 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3879 D1:D167 DD A6 00 -          and a,(ix+REGA)
 3880 D1:D16A DD 77 00 -          ld  (ix+REGA),a
 3881 D1:D16D CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3882 D1:D173 87 -  -  -          add a,a
 3883 D1:D174 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3884 D1:D17A DD 70 04 -          ld  (ix+REGSR),b
 3885 D1:D17D 41 -  -  -          ld  b,c
 3886 D1:D17E 70 -  -  -          WRITE_ACCESS
 3887 D1:D17F E1 -  -  -      pop hl
 3888 D1:D180 C3 B4 B3 D1     jp i6502NextLoad
 3889 D1:D184 -  -  -  -  
 3890 D1:D184 -  -  -  -  ;(indirect,X)	RLA (oper,X)	23	2	8  	
 3891 D1:D184 -  -  -  -  isnt6502_rla_indx:
 3892 D1:D184 ED 33 08 -      ADDCYC(8)
 3893 D1:D187 E5 -  -  -      push hl
 3894 D1:D188 7E -  -  -          ld  a,(hl)
 3895 D1:D189 21 00 38 D0         ld  hl,ZEROPAGE
 3896 D1:D18D 85 -  -  -          add a,L
 3897 D1:D18E DD 86 01 -          add a,(ix+REGX)
 3898 D1:D191 6F -  -  -          ld  L,a
 3899 D1:D192 7E -  -  -          ld  a,(hl)
 3900 D1:D193 2C -  -  -          inc L
 3901 D1:D194 56 -  -  -          ld  d,(hl)
 3902 D1:D195 42 -  -  -          ld  b,d
 3903 D1:D196 0E 08 -  -          ld  c,BASETABLE_STRIDE
 3904 D1:D198 ED 4C -  -          mlt bc
 3905 D1:D19A 21 00 40 D0         ld  hl,PAGETABLE
 3906 D1:D19E 09 -  -  -          add hl,bc
 3907 D1:D19F ED 27 -  -          ld  hl,(hl)
 3908 D1:D1A1 06 00 -  -          ld  b,0
 3909 D1:D1A3 4F -  -  -          ld  c,a
 3910 D1:D1A4 09 -  -  -          add hl,bc
 3911 D1:D1A5 7E -  -  -          READ_ACCESS
 3912 D1:D1A6 DD 46 04 -          ld  b,(ix+REGSR)
 3913 D1:D1A9 CB 18 -  -          rr b
 3914 D1:D1AB 17 -  -  -          rla
 3915 D1:D1AC 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3916 D1:D1AD -  -  -  -          ;Split oper
 3917 D1:D1AD DD 46 04 -          ld  b,(ix+REGSR)
 3918 D1:D1B0 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3919 D1:D1B6 DD A6 00 -          and a,(ix+REGA)
 3920 D1:D1B9 DD 77 00 -          ld  (ix+REGA),a
 3921 D1:D1BC CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3922 D1:D1C2 87 -  -  -          add a,a
 3923 D1:D1C3 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3924 D1:D1C9 DD 70 04 -          ld  (ix+REGSR),b
 3925 D1:D1CC 41 -  -  -          ld  b,c
 3926 D1:D1CD 70 -  -  -          WRITE_ACCESS
 3927 D1:D1CE E1 -  -  -      pop hl
 3928 D1:D1CF C3 B4 B3 D1     jp  i6502NextLoad
 3929 D1:D1D3 -  -  -  -  
 3930 D1:D1D3 -  -  -  -  ;(indirect),Y	RLA (oper),Y	33	2	8  
 3931 D1:D1D3 -  -  -  -  inst6502_rla_indy:
 3932 D1:D1D3 ED 33 08 -      ADDCYC(8)
 3933 D1:D1D6 E5 -  -  -      push hl
 3934 D1:D1D7 7E -  -  -          ld  a,(hl)
 3935 D1:D1D8 21 00 38 D0         ld  hl,ZEROPAGE
 3936 D1:D1DC 85 -  -  -          add a,L
 3937 D1:D1DD 6F -  -  -          ld  L,a
 3938 D1:D1DE 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3939 D1:D1DF 2C -  -  -          inc L
 3940 D1:D1E0 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3941 D1:D1E3 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3942 D1:D1E4 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3943 D1:D1E6 24 -  -  -          inc h
 3944 D1:D1E7 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3945 D1:D1E8 2E 08 -  -          ld  L,BASETABLE_STRIDE
 3946 D1:D1EA ED 6C -  -          mlt hl          ;23.
 3947 D1:D1EC 01 00 40 D0         ld  bc,PAGETABLE
 3948 D1:D1F0 09 -  -  -          add hl,bc
 3949 D1:D1F1 ED 27 -  -          ld  hl,(hl)     ;address get.
 3950 D1:D1F3 01 00 00 00         ld  bc,0
 3951 D1:D1F7 4F -  -  -          ld  c,a
 3952 D1:D1F8 09 -  -  -          add hl,bc       ;Full address get.
 3953 D1:D1F9 7E -  -  -          READ_ACCESS
 3954 D1:D1FA DD 46 04 -          ld  b,(ix+REGSR)
 3955 D1:D1FD CB 18 -  -          rr b
 3956 D1:D1FF 17 -  -  -          rla
 3957 D1:D200 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3958 D1:D201 -  -  -  -          ;Split oper
 3959 D1:D201 DD 46 04 -          ld  b,(ix+REGSR)
 3960 D1:D204 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3961 D1:D20A DD A6 00 -          and a,(ix+REGA)
 3962 D1:D20D DD 77 00 -          ld  (ix+REGA),a
 3963 D1:D210 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3964 D1:D216 87 -  -  -          add a,a
 3965 D1:D217 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3966 D1:D21D DD 70 04 -          ld  (ix+REGSR),b
 3967 D1:D220 41 -  -  -          ld  b,c
 3968 D1:D221 70 -  -  -          WRITE_ACCESS
 3969 D1:D222 E1 -  -  -      pop hl
 3970 D1:D223 C3 B4 B3 D1     jp  i6502NextLoad
 3971 D1:D227 -  -  -  -  
 3972 D1:D227 -  -  -  -  ;-----------------------------------------------------------------------------
 3973 D1:D227 -  -  -  -  ;RRA
 3974 D1:D227 -  -  -  -  ;ROR oper + ADC oper
 3975 D1:D227 -  -  -  -  ;M = C -> [76543210] -> C, A + M + C -> A, C. Affects VCZN
 3976 D1:D227 -  -  -  -  
 3977 D1:D227 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3978 D1:D227 -  -  -  -  ;zeropage	RRA oper	67	2	5  	
 3979 D1:D227 -  -  -  -  inst6502_rra_zp:
 3980 D1:D227 ED 33 05 -      ADDCYC(5)
 3981 D1:D22A 7E -  -  -      ld  a,(hl)
 3982 D1:D22B 01 00 38 D0     ld  bc,ZEROPAGE
 3983 D1:D22F 81 -  -  -      add a,c
 3984 D1:D230 4F -  -  -      ld  c,a
 3985 D1:D231 DD 7E 04 -      ld  a,(ix+REGSR)
 3986 D1:D234 1F -  -  -      rra
 3987 D1:D235 0A -  -  -      ld  a,(bc)
 3988 D1:D236 1F -  -  -      rra
 3989 D1:D237 02 -  -  -      ld  (bc),a
 3990 D1:D238 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 3991 D1:D23C 30 04 -  -      jr nc,$+6
 3992 D1:D23E DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 3993 D1:D242 4F -  -  -      ld  c,a
 3994 D1:D243 C3 C6 B6 D1     jp  subroutine6502_adc_combined_end
 3995 D1:D247 -  -  -  -  
 3996 D1:D247 -  -  -  -  ;zeropage,X	RRA oper,X	77	2	6  	
 3997 D1:D247 -  -  -  -  inst6502_rra_zpx:
 3998 D1:D247 ED 33 06 -      ADDCYC(6)
 3999 D1:D24A 7E -  -  -      ld  a,(hl)
 4000 D1:D24B 01 00 38 D0     ld  bc,ZEROPAGE
 4001 D1:D24F 81 -  -  -      add a,c
 4002 D1:D250 DD 86 01 -      add a,(ix+REGX)
 4003 D1:D253 4F -  -  -      ld  c,a
 4004 D1:D254 DD 7E 04 -      ld  a,(ix+REGSR)
 4005 D1:D257 1F -  -  -      rra
 4006 D1:D258 0A -  -  -      ld  a,(bc)
 4007 D1:D259 1F -  -  -      rra
 4008 D1:D25A 02 -  -  -      ld  (bc),a
 4009 D1:D25B DD CB 04 86     res SF_CARRY,(ix+REGSR)
 4010 D1:D25F 30 04 -  -      jr nc,$+6
 4011 D1:D261 DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 4012 D1:D265 4F -  -  -      ld  c,a
 4013 D1:D266 C3 C6 B6 D1     jp  subroutine6502_adc_combined_end
 4014 D1:D26A -  -  -  -  
 4015 D1:D26A -  -  -  -  ;absolute	RRA oper	6F	3	6  	
 4016 D1:D26A -  -  -  -  inst6502_rra_abs:
 4017 D1:D26A ED 33 06 -      ADDCYC(6)
 4018 D1:D26D CD 34 B6 D1     call subroutine6502_abs_split_start
 4019 D1:D271 E5 -  -  -      push hl
 4020 D1:D272 50 -  -  -          ld  d,b
 4021 D1:D273 79 -  -  -          ld  a,c
 4022 D1:D274 0E 08 -  -          ld  c,BASETABLE_STRIDE
 4023 D1:D276 ED 4C -  -          mlt bc
 4024 D1:D278 21 00 40 D0         ld  hl,PAGETABLE
 4025 D1:D27C 09 -  -  -          add hl,bc
 4026 D1:D27D ED 27 -  -          ld  hl,(hl)
 4027 D1:D27F 06 00 -  -          ld  b,0
 4028 D1:D281 4F -  -  -          ld  c,a
 4029 D1:D282 09 -  -  -          add hl,bc   ;full address
 4030 D1:D283 7E -  -  -          READ_ACCESS
 4031 D1:D284 DD 46 04 -          ld  b,(ix+REGSR)
 4032 D1:D287 CB 18 -  -          rr b
 4033 D1:D289 1F -  -  -          rra
 4034 D1:D28A DD CB 04 86         res SF_CARRY,(ix+REGSR)
 4035 D1:D28E 30 04 -  -          jr nc,$+6
 4036 D1:D290 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 4037 D1:D294 47 -  -  -          ld  b,a
 4038 D1:D295 C5 -  -  -          push bc
 4039 D1:D296 70 -  -  -              WRITE_ACCESS
 4040 D1:D297 C1 -  -  -          pop bc
 4041 D1:D298 48 -  -  -          ld c,b
 4042 D1:D299 E1 -  -  -      pop hl
 4043 D1:D29A C3 C6 B6 D1     jp  subroutine6502_adc_combined_end
 4044 D1:D29E -  -  -  -  
 4045 D1:D29E -  -  -  -  ;absolut,X	RRA oper,X	7F	3	7  	
 4046 D1:D29E -  -  -  -  inst6502_rra_absx:
 4047 D1:D29E ED 33 07 -      ADDCYC(7)
 4048 D1:D2A1 CD 91 B6 D1     PUSH_ABSXSPLIT_NODEP
 4049 D1:D2A5 7E -  -  -          READ_ACCESS
 4050 D1:D2A6 DD 46 04 -          ld  b,(ix+REGSR)
 4051 D1:D2A9 CB 18 -  -          rr b
 4052 D1:D2AB 1F -  -  -          rra
 4053 D1:D2AC DD CB 04 86         res SF_CARRY,(ix+REGSR)
 4054 D1:D2B0 30 04 -  -          jr nc,$+6
 4055 D1:D2B2 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 4056 D1:D2B6 47 -  -  -          ld  b,a
 4057 D1:D2B7 C5 -  -  -          push bc
 4058 D1:D2B8 70 -  -  -              WRITE_ACCESS
 4059 D1:D2B9 C1 -  -  -          pop bc
 4060 D1:D2BA 48 -  -  -          ld c,b
 4061 D1:D2BB E1 -  -  -      pop hl
 4062 D1:D2BC C3 C6 B6 D1     jp  subroutine6502_adc_combined_end
 4063 D1:D2C0 -  -  -  -  
 4064 D1:D2C0 -  -  -  -  ;absolut,Y	RRA oper,Y	7B	3	7  	
 4065 D1:D2C0 -  -  -  -  inst6502_rra_absy:
 4066 D1:D2C0 ED 33 07 -      ADDCYC(7)
 4067 D1:D2C3 CD 8C B6 D1     PUSH_ABSYSPLIT_NODEP
 4068 D1:D2C7 7E -  -  -          READ_ACCESS
 4069 D1:D2C8 DD 46 04 -          ld  b,(ix+REGSR)
 4070 D1:D2CB CB 18 -  -          rr b
 4071 D1:D2CD 1F -  -  -          rra
 4072 D1:D2CE DD CB 04 86         res SF_CARRY,(ix+REGSR)
 4073 D1:D2D2 30 04 -  -          jr nc,$+6
 4074 D1:D2D4 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 4075 D1:D2D8 47 -  -  -          ld  b,a
 4076 D1:D2D9 C5 -  -  -          push bc
 4077 D1:D2DA 70 -  -  -              WRITE_ACCESS
 4078 D1:D2DB C1 -  -  -          pop bc
 4079 D1:D2DC 48 -  -  -          ld c,b
 4080 D1:D2DD E1 -  -  -      pop hl
 4081 D1:D2DE C3 C6 B6 D1     jp  subroutine6502_adc_combined_end
 4082 D1:D2E2 -  -  -  -  
 4083 D1:D2E2 -  -  -  -  ;(indirect,X)	RRA (oper,X)	63	2	8  	
 4084 D1:D2E2 -  -  -  -  isnt6502_rra_indx:
 4085 D1:D2E2 ED 33 08 -      ADDCYC(8)
 4086 D1:D2E5 E5 -  -  -      push hl
 4087 D1:D2E6 7E -  -  -          ld  a,(hl)
 4088 D1:D2E7 21 00 38 D0         ld  hl,ZEROPAGE
 4089 D1:D2EB 85 -  -  -          add a,L
 4090 D1:D2EC DD 86 01 -          add a,(ix+REGX)
 4091 D1:D2EF 6F -  -  -          ld  L,a
 4092 D1:D2F0 7E -  -  -          ld  a,(hl)
 4093 D1:D2F1 2C -  -  -          inc L
 4094 D1:D2F2 56 -  -  -          ld  d,(hl)
 4095 D1:D2F3 42 -  -  -          ld  b,d
 4096 D1:D2F4 0E 08 -  -          ld  c,BASETABLE_STRIDE
 4097 D1:D2F6 ED 4C -  -          mlt bc
 4098 D1:D2F8 21 00 40 D0         ld  hl,PAGETABLE
 4099 D1:D2FC 09 -  -  -          add hl,bc
 4100 D1:D2FD ED 27 -  -          ld  hl,(hl)
 4101 D1:D2FF 06 00 -  -          ld  b,0
 4102 D1:D301 4F -  -  -          ld  c,a
 4103 D1:D302 09 -  -  -          add hl,bc
 4104 D1:D303 7E -  -  -          READ_ACCESS
 4105 D1:D304 DD 46 04 -          ld  b,(ix+REGSR)
 4106 D1:D307 CB 18 -  -          rr b
 4107 D1:D309 1F -  -  -          rra
 4108 D1:D30A DD CB 04 86         res SF_CARRY,(ix+REGSR)
 4109 D1:D30E 30 04 -  -          jr nc,$+6
 4110 D1:D310 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 4111 D1:D314 47 -  -  -          ld  b,a
 4112 D1:D315 C5 -  -  -          push bc
 4113 D1:D316 70 -  -  -              WRITE_ACCESS
 4114 D1:D317 C1 -  -  -          pop bc
 4115 D1:D318 48 -  -  -          ld c,b
 4116 D1:D319 E1 -  -  -      pop hl
 4117 D1:D31A C3 C6 B6 D1     jp  subroutine6502_adc_combined_end
 4118 D1:D31E -  -  -  -  
 4119 D1:D31E -  -  -  -  ;(indirect),Y	RRA (oper),Y	73	2	8  
 4120 D1:D31E -  -  -  -  inst6502_rra_indy:
 4121 D1:D31E ED 33 08 -      ADDCYC(8)
 4122 D1:D321 E5 -  -  -      push hl
 4123 D1:D322 7E -  -  -          ld  a,(hl)
 4124 D1:D323 21 00 38 D0         ld  hl,ZEROPAGE
 4125 D1:D327 85 -  -  -          add a,L
 4126 D1:D328 6F -  -  -          ld  L,a
 4127 D1:D329 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4128 D1:D32A 2C -  -  -          inc L
 4129 D1:D32B DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4130 D1:D32E 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4131 D1:D32F 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4132 D1:D331 24 -  -  -          inc h
 4133 D1:D332 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4134 D1:D333 2E 08 -  -          ld  L,BASETABLE_STRIDE
 4135 D1:D335 ED 6C -  -          mlt hl          ;23.
 4136 D1:D337 01 00 40 D0         ld  bc,PAGETABLE
 4137 D1:D33B 09 -  -  -          add hl,bc
 4138 D1:D33C ED 27 -  -          ld  hl,(hl)     ;address get.
 4139 D1:D33E 01 00 00 00         ld  bc,0
 4140 D1:D342 4F -  -  -          ld  c,a
 4141 D1:D343 09 -  -  -          add hl,bc       ;Full address get.
 4142 D1:D344 7E -  -  -          READ_ACCESS
 4143 D1:D345 DD 46 04 -          ld  b,(ix+REGSR)
 4144 D1:D348 CB 18 -  -          rr b
 4145 D1:D34A 1F -  -  -          rra
 4146 D1:D34B DD CB 04 86         res SF_CARRY,(ix+REGSR)
 4147 D1:D34F 30 04 -  -          jr nc,$+6
 4148 D1:D351 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 4149 D1:D355 47 -  -  -          ld  b,a
 4150 D1:D356 C5 -  -  -          push bc
 4151 D1:D357 70 -  -  -              WRITE_ACCESS
 4152 D1:D358 C1 -  -  -          pop bc
 4153 D1:D359 48 -  -  -          ld c,b
 4154 D1:D35A E1 -  -  -      pop hl
 4155 D1:D35B C3 C6 B6 D1     jp  subroutine6502_adc_combined_end
 4156 D1:D35F -  -  -  -  
 4157 D1:D35F -  -  -  -  ;-----------------------------------------------------------------------------
 4158 D1:D35F -  -  -  -  ;SAX (AXS, AAX) - A AND X -> M
 4159 D1:D35F -  -  -  -  ;A and X are put on the bus at the same time (resulting effectively in an 
 4160 D1:D35F -  -  -  -  ;AND operation) and stored in M. Flags not affected.
 4161 D1:D35F -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4162 D1:D35F -  -  -  -  ;zeropage	SAX oper	87	2	3  	
 4163 D1:D35F -  -  -  -  inst6502_sax_zp:
 4164 D1:D35F ED 33 03 -      ADDCYC(3)
 4165 D1:D362 7E -  -  -      ld  a,(hl)
 4166 D1:D363 01 00 38 D0     ld  bc,ZEROPAGE
 4167 D1:D367 81 -  -  -      add a,c
 4168 D1:D368 4F -  -  -      ld  c,a
 4169 D1:D369 DD 7E 00 -      ld  a,(ix+REGA)
 4170 D1:D36C DD A6 01 -      and a,(ix+REGX)
 4171 D1:D36F 02 -  -  -      ld  (bc),a
 4172 D1:D370 C3 B4 B3 D1     jp i6502NextLoad
 4173 D1:D374 -  -  -  -  
 4174 D1:D374 -  -  -  -  
 4175 D1:D374 -  -  -  -  ;zeropage,Y	SAX oper,Y	97	2	4  	
 4176 D1:D374 -  -  -  -  inst6502_sax_zpy:
 4177 D1:D374 ED 33 04 -      ADDCYC(4)
 4178 D1:D377 7E -  -  -      ld  a,(hl)
 4179 D1:D378 01 00 38 D0     ld  bc,ZEROPAGE
 4180 D1:D37C 81 -  -  -      add a,c
 4181 D1:D37D DD 86 02 -      add a,(ix+REGY)
 4182 D1:D380 4F -  -  -      ld  c,a
 4183 D1:D381 DD 7E 00 -      ld  a,(ix+REGA)
 4184 D1:D384 DD A6 01 -      and a,(ix+REGX)
 4185 D1:D387 02 -  -  -      ld  (bc),a
 4186 D1:D388 C3 B4 B3 D1     jp i6502NextLoad
 4187 D1:D38C -  -  -  -  
 4188 D1:D38C -  -  -  -  
 4189 D1:D38C -  -  -  -  ;absolute	SAX oper	8F	3	4  	
 4190 D1:D38C -  -  -  -  inst6502_sax_abs:
 4191 D1:D38C ED 33 04 -      ADDCYC(4)
 4192 D1:D38F CD 34 B6 D1     call subroutine6502_abs_split_start
 4193 D1:D393 E5 -  -  -      push hl
 4194 D1:D394 50 -  -  -          ld  d,b
 4195 D1:D395 79 -  -  -          ld  a,c
 4196 D1:D396 0E 08 -  -          ld  c,BASETABLE_STRIDE
 4197 D1:D398 ED 4C -  -          mlt bc
 4198 D1:D39A 21 00 40 D0         ld  hl,PAGETABLE
 4199 D1:D39E 09 -  -  -          add hl,bc
 4200 D1:D39F ED 27 -  -          ld  hl,(hl)
 4201 D1:D3A1 06 00 -  -          ld  b,0
 4202 D1:D3A3 4F -  -  -          ld  c,a
 4203 D1:D3A4 09 -  -  -          add hl,bc   ;full address
 4204 D1:D3A5 DD 7E 00 -          ld  a,(ix+REGA)
 4205 D1:D3A8 DD A6 01 -          and a,(ix+REGX)
 4206 D1:D3AB 47 -  -  -          ld  b,a
 4207 D1:D3AC 70 -  -  -          WRITE_ACCESS
 4208 D1:D3AD E1 -  -  -      pop hl
 4209 D1:D3AE C3 B4 B3 D1     jp i6502NextLoad
 4210 D1:D3B2 -  -  -  -  
 4211 D1:D3B2 -  -  -  -  ;(indirect,X)	SAX (oper,X)	83	2	6  
 4212 D1:D3B2 -  -  -  -  inst6502_sax_indx:
 4213 D1:D3B2 ED 33 06 -      ADDCYC(6)
 4214 D1:D3B5 E5 -  -  -      push hl
 4215 D1:D3B6 7E -  -  -          ld  a,(hl)
 4216 D1:D3B7 21 00 38 D0         ld  hl,ZEROPAGE
 4217 D1:D3BB 85 -  -  -          add a,L
 4218 D1:D3BC DD 86 01 -          add a,(ix+REGX)
 4219 D1:D3BF 6F -  -  -          ld  L,a
 4220 D1:D3C0 7E -  -  -          ld  a,(hl)
 4221 D1:D3C1 2C -  -  -          inc L
 4222 D1:D3C2 56 -  -  -          ld  d,(hl)
 4223 D1:D3C3 42 -  -  -          ld  b,d
 4224 D1:D3C4 0E 08 -  -          ld  c,BASETABLE_STRIDE
 4225 D1:D3C6 ED 4C -  -          mlt bc
 4226 D1:D3C8 21 00 40 D0         ld  hl,PAGETABLE
 4227 D1:D3CC 09 -  -  -          add hl,bc
 4228 D1:D3CD ED 27 -  -          ld  hl,(hl)
 4229 D1:D3CF 06 00 -  -          ld  b,0
 4230 D1:D3D1 4F -  -  -          ld  c,a
 4231 D1:D3D2 09 -  -  -          add hl,bc
 4232 D1:D3D3 DD 7E 00 -          ld  a,(ix+REGA)
 4233 D1:D3D6 DD A6 01 -          and a,(ix+REGX)
 4234 D1:D3D9 47 -  -  -          ld  b,a
 4235 D1:D3DA 70 -  -  -          WRITE_ACCESS
 4236 D1:D3DB E1 -  -  -      pop hl
 4237 D1:D3DC C3 B4 B3 D1     jp i6502NextLoad
 4238 D1:D3E0 -  -  -  -  
 4239 D1:D3E0 -  -  -  -  ;-----------------------------------------------------------------------------
 4240 D1:D3E0 -  -  -  -  ;SBX (AXS, SAX) - CMP and DEX at once, sets flags like CMP
 4241 D1:D3E0 -  -  -  -  ;(A AND X) - oper -> X.  Flags affected: CZN
 4242 D1:D3E0 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4243 D1:D3E0 -  -  -  -  ;immediate	SBX #oper	CB	2	2  
 4244 D1:D3E0 -  -  -  -  inst6502_sbx_imm:
 4245 D1:D3E0 DD 7E 00 -      ld  a,(ix+REGA)
 4246 D1:D3E3 DD A6 01 -      and a,(ix+REGX)
 4247 D1:D3E6 96 -  -  -      sub a,(hl)
 4248 D1:D3E7 DD 77 01 -      ld  (ix+REGX),a
 4249 D1:D3EA 3F -  -  -      ccf
 4250 D1:D3EB DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 4251 D1:D405 C3 B4 B3 D1     jp  i6502NextLoad
 4252 D1:D409 -  -  -  -  
 4253 D1:D409 -  -  -  -  ;-----------------------------------------------------------------------------
 4254 D1:D409 -  -  -  -  ;SHA (AHX, AXA) - Stores A AND X AND (high-byte of addr. + 1) at addr.
 4255 D1:D409 -  -  -  -  ;unstable: sometimes 'AND (H+1)' is dropped, 
 4256 D1:D409 -  -  -  -  ;page boundary crossings may not work 
 4257 D1:D409 -  -  -  -  ;(with the high-byte of the value used as the high-byte of the address)
 4258 D1:D409 -  -  -  -  ;A AND X AND (H+1) -> M
 4259 D1:D409 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4260 D1:D409 -  -  -  -  ;
 4261 D1:D409 -  -  -  -  ;NOTE: NOT GOING TO IMPLEMENT THESE. THEY'LL ADVANCE THE 6502 PC IN THE CORRECT
 4262 D1:D409 -  -  -  -  ;MANNER BUT NOTHING MORE. THE CPU WILL HALT WHEN ENCOUNTERING ONE OF THESE.
 4263 D1:D409 -  -  -  -  ;
 4264 D1:D409 -  -  -  -  ;absolut,Y	SHA oper,Y	9F	3	5  	†
 4265 D1:D409 -  -  -  -  inst6502_sha_absy:
 4266 D1:D409 ED 33 05 -      ADDCYC(5)
 4267 D1:D40C CD 50 B6 D1     PUSH_ABSYSPLIT
 4268 D1:D410 18 FE -  -          jr $
 4269 D1:D412 E1 -  -  -      pop hl
 4270 D1:D413 C3 B4 B3 D1     jp i6502NextLoad
 4271 D1:D417 -  -  -  -  
 4272 D1:D417 -  -  -  -  ;(indirect),Y	SHA (oper),Y	93	2	6  	†
 4273 D1:D417 -  -  -  -  inst6502_sha_indy:
 4274 D1:D417 ED 33 06 -      ADDCYC(6)
 4275 D1:D41A E5 -  -  -      push hl
 4276 D1:D41B 7E -  -  -          ld  a,(hl)
 4277 D1:D41C 21 00 38 D0         ld  hl,ZEROPAGE
 4278 D1:D420 85 -  -  -          add a,L
 4279 D1:D421 6F -  -  -          ld  L,a
 4280 D1:D422 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4281 D1:D423 2C -  -  -          inc L
 4282 D1:D424 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4283 D1:D427 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4284 D1:D428 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4285 D1:D42A 24 -  -  -          inc h
 4286 D1:D42B 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4287 D1:D42C 2E 08 -  -          ld  L,BASETABLE_STRIDE
 4288 D1:D42E ED 6C -  -          mlt hl          ;23.
 4289 D1:D430 01 00 40 D0         ld  bc,PAGETABLE
 4290 D1:D434 09 -  -  -          add hl,bc
 4291 D1:D435 ED 27 -  -          ld  hl,(hl)     ;address get.
 4292 D1:D437 01 00 00 00         ld  bc,0
 4293 D1:D43B 4F -  -  -          ld  c,a
 4294 D1:D43C 09 -  -  -          add hl,bc       ;Full address get.
 4295 D1:D43D 7E -  -  -          READ_ACCESS
 4296 D1:D43E 18 FE -  -          jr $
 4297 D1:D440 E1 -  -  -      pop hl
 4298 D1:D441 C3 B4 B3 D1     jp i6502NextLoad
 4299 D1:D445 -  -  -  -  
 4300 D1:D445 -  -  -  -  ;-----------------------------------------------------------------------------
 4301 D1:D445 -  -  -  -  ;SHX (A11, SXA, XAS)
 4302 D1:D445 -  -  -  -  ;SHY (A11, SYA, SAY)
 4303 D1:D445 -  -  -  -  ;TAS (XAS, SHS)
 4304 D1:D445 -  -  -  -  ;Not going to implement these, but they'll still get the program
 4305 D1:D445 -  -  -  -  ;counter to make the correct noises. Right before locking up the core.
 4306 D1:D445 -  -  -  -  ;All of these instructions are marked as "unstable" in that they'll sometimes
 4307 D1:D445 -  -  -  -  ;drop the high byte, and page crossings sometimes won't work.
 4308 D1:D445 -  -  -  -  
 4309 D1:D445 -  -  -  -  ;absolut,Y	SHX oper,Y	9E	3	5  	†
 4310 D1:D445 -  -  -  -  inst6502_shx_absy:
 4311 D1:D445 ED 33 05 -      ADDCYC(5)
 4312 D1:D448 CD 8C B6 D1     PUSH_ABSYSPLIT_NODEP
 4313 D1:D44C 18 FE -  -          jr $
 4314 D1:D44E E1 -  -  -      pop hl
 4315 D1:D44F C3 B4 B3 D1     jp i6502NextLoad
 4316 D1:D453 -  -  -  -  
 4317 D1:D453 -  -  -  -  ;absolut,X	SHY oper,X	9C	3	5  	†
 4318 D1:D453 -  -  -  -  inst6502_shy_absx:
 4319 D1:D453 ED 33 05 -      ADDCYC(5)
 4320 D1:D456 CD 91 B6 D1     PUSH_ABSXSPLIT_NODEP
 4321 D1:D45A 18 FE -  -          jr $
 4322 D1:D45C E1 -  -  -      pop hl
 4323 D1:D45D C3 B4 B3 D1     jp i6502NextLoad
 4324 D1:D461 -  -  -  -  
 4325 D1:D461 -  -  -  -  ;absolut,Y	TAS oper,Y	9B	3	5  	†
 4326 D1:D461 -  -  -  -  inst6502_tas_absy:
 4327 D1:D461 ED 33 05 -      ADDCYC(5)
 4328 D1:D464 CD 8C B6 D1     PUSH_ABSYSPLIT_NODEP
 4329 D1:D468 18 FE -  -          jr $
 4330 D1:D46A E1 -  -  -      pop hl
 4331 D1:D46B C3 B4 B3 D1     jp i6502NextLoad
 4332 D1:D46F -  -  -  -  
 4333 D1:D46F -  -  -  -  ;-----------------------------------------------------------------------------
 4334 D1:D46F -  -  -  -  ;SLO (ASO) - ASL oper + ORA oper
 4335 D1:D46F -  -  -  -  ;M = C <- [76543210] <- 0, A OR M -> A. Affects: CZN
 4336 D1:D46F -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4337 D1:D46F -  -  -  -  
 4338 D1:D46F -  -  -  -  ;zeropage	SLO oper	07	2	5  	
 4339 D1:D46F -  -  -  -  inst6502_slo_zp:
 4340 D1:D46F ED 33 05 -      ADDCYC(5)
 4341 D1:D472 7E -  -  -      ld  a,(hl)
 4342 D1:D473 01 00 38 D0     ld  bc,ZEROPAGE
 4343 D1:D477 81 -  -  -      add a,c
 4344 D1:D478 4F -  -  -      ld  c,a
 4345 D1:D479 0A -  -  -      ld  a,(bc)
 4346 D1:D47A CB 27 -  -      sla a
 4347 D1:D47C 02 -  -  -      ld  (bc),a
 4348 D1:D47D -  -  -  -      ;Flag breakdown to optimize for split operation
 4349 D1:D47D DD 46 04 -      ld  b,(ix+REGSR)
 4350 D1:D480 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4351 D1:D486 DD B6 00 -      or  a,(ix+REGA)
 4352 D1:D489 DD 77 00 -      ld  (ix+REGA),a
 4353 D1:D48C CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4354 D1:D492 87 -  -  -      add a,a
 4355 D1:D493 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4356 D1:D499 DD 70 04 -      ld  (ix+REGSR),b
 4357 D1:D49C C3 B4 B3 D1     jp i6502NextLoad
 4358 D1:D4A0 -  -  -  -  
 4359 D1:D4A0 -  -  -  -  ;zeropage,X	SLO oper,X	17	2	6  	
 4360 D1:D4A0 -  -  -  -  inst6502_slo_zpx:
 4361 D1:D4A0 ED 33 06 -      ADDCYC(6)
 4362 D1:D4A3 7E -  -  -      ld  a,(hl)
 4363 D1:D4A4 01 00 38 D0     ld  bc,ZEROPAGE
 4364 D1:D4A8 81 -  -  -      add a,c
 4365 D1:D4A9 DD 86 01 -      add a,(ix+REGX)
 4366 D1:D4AC 4F -  -  -      ld  c,a
 4367 D1:D4AD 0A -  -  -      ld  a,(bc)
 4368 D1:D4AE CB 27 -  -      sla a
 4369 D1:D4B0 02 -  -  -      ld  (bc),a
 4370 D1:D4B1 -  -  -  -      ;Flag breakdown to optimize for split operation
 4371 D1:D4B1 DD 46 04 -      ld  b,(ix+REGSR)
 4372 D1:D4B4 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4373 D1:D4BA DD B6 00 -      or  a,(ix+REGA)
 4374 D1:D4BD DD 77 00 -      ld  (ix+REGA),a
 4375 D1:D4C0 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4376 D1:D4C6 87 -  -  -      add a,a
 4377 D1:D4C7 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4378 D1:D4CD DD 70 04 -      ld  (ix+REGSR),b
 4379 D1:D4D0 C3 B4 B3 D1     jp i6502NextLoad
 4380 D1:D4D4 -  -  -  -  
 4381 D1:D4D4 -  -  -  -  ;absolute	SLO oper	0F	3	6  	
 4382 D1:D4D4 -  -  -  -  inst6502_slo_abs:
 4383 D1:D4D4 ED 33 06 -      ADDCYC(6)
 4384 D1:D4D7 CD 34 B6 D1     call subroutine6502_abs_split_start
 4385 D1:D4DB E5 -  -  -      push hl
 4386 D1:D4DC 50 -  -  -          ld  d,b
 4387 D1:D4DD 79 -  -  -          ld  a,c
 4388 D1:D4DE 0E 08 -  -          ld  c,BASETABLE_STRIDE
 4389 D1:D4E0 ED 4C -  -          mlt bc
 4390 D1:D4E2 21 00 40 D0         ld  hl,PAGETABLE
 4391 D1:D4E6 09 -  -  -          add hl,bc
 4392 D1:D4E7 ED 27 -  -          ld  hl,(hl)
 4393 D1:D4E9 06 00 -  -          ld  b,0
 4394 D1:D4EB 4F -  -  -          ld  c,a
 4395 D1:D4EC 09 -  -  -          add hl,bc   ;full address
 4396 D1:D4ED 7E -  -  -          READ_ACCESS
 4397 D1:D4EE CB 27 -  -          sla a
 4398 D1:D4F0 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4399 D1:D4F1 -  -  -  -          ;Split oper
 4400 D1:D4F1 DD 46 04 -          ld  b,(ix+REGSR)
 4401 D1:D4F4 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4402 D1:D4FA DD B6 00 -          or  a,(ix+REGA)
 4403 D1:D4FD DD 77 00 -          ld  (ix+REGA),a
 4404 D1:D500 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4405 D1:D506 87 -  -  -          add a,a
 4406 D1:D507 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4407 D1:D50D DD 70 04 -          ld  (ix+REGSR),b
 4408 D1:D510 41 -  -  -          ld  b,c
 4409 D1:D511 70 -  -  -          WRITE_ACCESS
 4410 D1:D512 E1 -  -  -      pop hl
 4411 D1:D513 C3 B4 B3 D1     jp i6502NextLoad
 4412 D1:D517 -  -  -  -  
 4413 D1:D517 -  -  -  -  ;absolut,X	SLO oper,X	1F	3	7  	
 4414 D1:D517 -  -  -  -  inst6502_slo_absx:
 4415 D1:D517 ED 33 07 -      ADDCYC(7)
 4416 D1:D51A CD 91 B6 D1     PUSH_ABSXSPLIT_NODEP
 4417 D1:D51E 7E -  -  -          READ_ACCESS
 4418 D1:D51F CB 27 -  -          sla a
 4419 D1:D521 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4420 D1:D522 -  -  -  -          ;Split oper
 4421 D1:D522 DD 46 04 -          ld  b,(ix+REGSR)
 4422 D1:D525 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4423 D1:D52B DD B6 00 -          or  a,(ix+REGA)
 4424 D1:D52E DD 77 00 -          ld  (ix+REGA),a
 4425 D1:D531 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4426 D1:D537 87 -  -  -          add a,a
 4427 D1:D538 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4428 D1:D53E DD 70 04 -          ld  (ix+REGSR),b
 4429 D1:D541 41 -  -  -          ld  b,c
 4430 D1:D542 70 -  -  -          WRITE_ACCESS
 4431 D1:D543 E1 -  -  -      pop hl
 4432 D1:D544 C3 B4 B3 D1     jp i6502NextLoad
 4433 D1:D548 -  -  -  -  
 4434 D1:D548 -  -  -  -  ;absolut,Y	SLO oper,Y	1B	3	7  	
 4435 D1:D548 -  -  -  -  inst6502_slo_absy:
 4436 D1:D548 ED 33 07 -      ADDCYC(7)
 4437 D1:D54B CD 8C B6 D1     PUSH_ABSYSPLIT_NODEP
 4438 D1:D54F 7E -  -  -          READ_ACCESS
 4439 D1:D550 CB 27 -  -          sla a
 4440 D1:D552 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4441 D1:D553 -  -  -  -          ;Split oper
 4442 D1:D553 DD 46 04 -          ld  b,(ix+REGSR)
 4443 D1:D556 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4444 D1:D55C DD B6 00 -          or  a,(ix+REGA)
 4445 D1:D55F DD 77 00 -          ld  (ix+REGA),a
 4446 D1:D562 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4447 D1:D568 87 -  -  -          add a,a
 4448 D1:D569 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4449 D1:D56F DD 70 04 -          ld  (ix+REGSR),b
 4450 D1:D572 41 -  -  -          ld  b,c
 4451 D1:D573 70 -  -  -          WRITE_ACCESS
 4452 D1:D574 E1 -  -  -      pop hl
 4453 D1:D575 C3 B4 B3 D1     jp i6502NextLoad
 4454 D1:D579 -  -  -  -  
 4455 D1:D579 -  -  -  -  ;(indirect,X)	SLO (oper,X)	03	2	8  	
 4456 D1:D579 -  -  -  -  isnt6502_slo_indx:
 4457 D1:D579 ED 33 08 -      ADDCYC(8)
 4458 D1:D57C E5 -  -  -      push hl
 4459 D1:D57D 7E -  -  -          ld  a,(hl)
 4460 D1:D57E 21 00 38 D0         ld  hl,ZEROPAGE
 4461 D1:D582 85 -  -  -          add a,L
 4462 D1:D583 DD 86 01 -          add a,(ix+REGX)
 4463 D1:D586 6F -  -  -          ld  L,a
 4464 D1:D587 7E -  -  -          ld  a,(hl)
 4465 D1:D588 2C -  -  -          inc L
 4466 D1:D589 56 -  -  -          ld  d,(hl)
 4467 D1:D58A 42 -  -  -          ld  b,d
 4468 D1:D58B 0E 08 -  -          ld  c,BASETABLE_STRIDE
 4469 D1:D58D ED 4C -  -          mlt bc
 4470 D1:D58F 21 00 40 D0         ld  hl,PAGETABLE
 4471 D1:D593 09 -  -  -          add hl,bc
 4472 D1:D594 ED 27 -  -          ld  hl,(hl)
 4473 D1:D596 06 00 -  -          ld  b,0
 4474 D1:D598 4F -  -  -          ld  c,a
 4475 D1:D599 09 -  -  -          add hl,bc
 4476 D1:D59A 7E -  -  -          READ_ACCESS
 4477 D1:D59B CB 27 -  -          sla a
 4478 D1:D59D 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4479 D1:D59E -  -  -  -          ;Split oper
 4480 D1:D59E DD 46 04 -          ld  b,(ix+REGSR)
 4481 D1:D5A1 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4482 D1:D5A7 DD B6 00 -          or  a,(ix+REGA)
 4483 D1:D5AA DD 77 00 -          ld  (ix+REGA),a
 4484 D1:D5AD CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4485 D1:D5B3 87 -  -  -          add a,a
 4486 D1:D5B4 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4487 D1:D5BA DD 70 04 -          ld  (ix+REGSR),b
 4488 D1:D5BD 41 -  -  -          ld  b,c
 4489 D1:D5BE 70 -  -  -          WRITE_ACCESS
 4490 D1:D5BF E1 -  -  -      pop hl
 4491 D1:D5C0 C3 B4 B3 D1     jp  i6502NextLoad
 4492 D1:D5C4 -  -  -  -  
 4493 D1:D5C4 -  -  -  -  ;(indirect),Y	SLO (oper),Y	13	2	8  
 4494 D1:D5C4 -  -  -  -  inst6502_slo_indy:
 4495 D1:D5C4 ED 33 08 -      ADDCYC(8)
 4496 D1:D5C7 E5 -  -  -      push hl
 4497 D1:D5C8 7E -  -  -          ld  a,(hl)
 4498 D1:D5C9 21 00 38 D0         ld  hl,ZEROPAGE
 4499 D1:D5CD 85 -  -  -          add a,L
 4500 D1:D5CE 6F -  -  -          ld  L,a
 4501 D1:D5CF 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4502 D1:D5D0 2C -  -  -          inc L
 4503 D1:D5D1 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4504 D1:D5D4 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4505 D1:D5D5 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4506 D1:D5D7 24 -  -  -          inc h
 4507 D1:D5D8 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4508 D1:D5D9 2E 08 -  -          ld  L,BASETABLE_STRIDE
 4509 D1:D5DB ED 6C -  -          mlt hl          ;23.
 4510 D1:D5DD 01 00 40 D0         ld  bc,PAGETABLE
 4511 D1:D5E1 09 -  -  -          add hl,bc
 4512 D1:D5E2 ED 27 -  -          ld  hl,(hl)     ;address get.
 4513 D1:D5E4 01 00 00 00         ld  bc,0
 4514 D1:D5E8 4F -  -  -          ld  c,a
 4515 D1:D5E9 09 -  -  -          add hl,bc       ;Full address get.
 4516 D1:D5EA 7E -  -  -          READ_ACCESS
 4517 D1:D5EB CB 27 -  -          sla a
 4518 D1:D5ED 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4519 D1:D5EE -  -  -  -          ;Split oper
 4520 D1:D5EE DD 46 04 -          ld  b,(ix+REGSR)
 4521 D1:D5F1 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4522 D1:D5F7 DD B6 00 -          or  a,(ix+REGA)
 4523 D1:D5FA DD 77 00 -          ld  (ix+REGA),a
 4524 D1:D5FD CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4525 D1:D603 87 -  -  -          add a,a
 4526 D1:D604 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4527 D1:D60A DD 70 04 -          ld  (ix+REGSR),b
 4528 D1:D60D 41 -  -  -          ld  b,c
 4529 D1:D60E 70 -  -  -          WRITE_ACCESS
 4530 D1:D60F E1 -  -  -      pop hl
 4531 D1:D610 C3 B4 B3 D1     jp  i6502NextLoad
 4532 D1:D614 -  -  -  -  
 4533 D1:D614 -  -  -  -  ;-----------------------------------------------------------------------------
 4534 D1:D614 -  -  -  -  ;SRE (LSE) - LSR oper + EOR oper
 4535 D1:D614 -  -  -  -  ;M = 0 -> [76543210] -> C, A EOR M -> A. Affects: CZN
 4536 D1:D614 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4537 D1:D614 -  -  -  -  
 4538 D1:D614 -  -  -  -  ;zeropage	SRE oper	47	2	5  	
 4539 D1:D614 -  -  -  -  inst6502_sre_zp:
 4540 D1:D614 ED 33 05 -      ADDCYC(5)
 4541 D1:D617 7E -  -  -      ld  a,(hl)
 4542 D1:D618 01 00 38 D0     ld  bc,ZEROPAGE
 4543 D1:D61C 81 -  -  -      add a,c
 4544 D1:D61D 4F -  -  -      ld  c,a
 4545 D1:D61E 0A -  -  -      ld  a,(bc)
 4546 D1:D61F CB 3F -  -      srl a
 4547 D1:D621 02 -  -  -      ld  (bc),a
 4548 D1:D622 -  -  -  -      ;Flag breakdown to optimize for split operation
 4549 D1:D622 DD 46 04 -      ld  b,(ix+REGSR)
 4550 D1:D625 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4551 D1:D62B DD AE 00 -      xor a,(ix+REGA)
 4552 D1:D62E DD 77 00 -      ld  (ix+REGA),a
 4553 D1:D631 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4554 D1:D637 87 -  -  -      add a,a
 4555 D1:D638 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4556 D1:D63E DD 70 04 -      ld  (ix+REGSR),b
 4557 D1:D641 C3 B4 B3 D1     jp i6502NextLoad
 4558 D1:D645 -  -  -  -  
 4559 D1:D645 -  -  -  -  ;zeropage,X	SRE oper,X	57	2	6  	
 4560 D1:D645 -  -  -  -  inst6502_sre_zpx:
 4561 D1:D645 ED 33 06 -      ADDCYC(6)
 4562 D1:D648 7E -  -  -      ld  a,(hl)
 4563 D1:D649 01 00 38 D0     ld  bc,ZEROPAGE
 4564 D1:D64D 81 -  -  -      add a,c
 4565 D1:D64E DD 86 01 -      add a,(ix+REGX)
 4566 D1:D651 4F -  -  -      ld  c,a
 4567 D1:D652 0A -  -  -      ld  a,(bc)
 4568 D1:D653 CB 3F -  -      srl a
 4569 D1:D655 02 -  -  -      ld  (bc),a
 4570 D1:D656 -  -  -  -      ;Flag breakdown to optimize for split operation
 4571 D1:D656 DD 46 04 -      ld  b,(ix+REGSR)
 4572 D1:D659 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4573 D1:D65F DD AE 00 -      xor a,(ix+REGA)
 4574 D1:D662 DD 77 00 -      ld  (ix+REGA),a
 4575 D1:D665 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4576 D1:D66B 87 -  -  -      add a,a
 4577 D1:D66C CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4578 D1:D672 DD 70 04 -      ld  (ix+REGSR),b
 4579 D1:D675 C3 B4 B3 D1     jp i6502NextLoad
 4580 D1:D679 -  -  -  -  
 4581 D1:D679 -  -  -  -  ;absolute	SRE oper	4F	3	6  	
 4582 D1:D679 -  -  -  -  inst6502_sre_abs:
 4583 D1:D679 ED 33 06 -      ADDCYC(6)
 4584 D1:D67C CD 34 B6 D1     call subroutine6502_abs_split_start
 4585 D1:D680 E5 -  -  -      push hl
 4586 D1:D681 50 -  -  -          ld  d,b
 4587 D1:D682 79 -  -  -          ld  a,c
 4588 D1:D683 0E 08 -  -          ld  c,BASETABLE_STRIDE
 4589 D1:D685 ED 4C -  -          mlt bc
 4590 D1:D687 21 00 40 D0         ld  hl,PAGETABLE
 4591 D1:D68B 09 -  -  -          add hl,bc
 4592 D1:D68C ED 27 -  -          ld  hl,(hl)
 4593 D1:D68E 06 00 -  -          ld  b,0
 4594 D1:D690 4F -  -  -          ld  c,a
 4595 D1:D691 09 -  -  -          add hl,bc   ;full address
 4596 D1:D692 7E -  -  -          READ_ACCESS
 4597 D1:D693 CB 3F -  -          srl a
 4598 D1:D695 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4599 D1:D696 -  -  -  -          ;Split oper
 4600 D1:D696 DD 46 04 -          ld  b,(ix+REGSR)
 4601 D1:D699 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4602 D1:D69F DD AE 00 -          xor a,(ix+REGA)
 4603 D1:D6A2 DD 77 00 -          ld  (ix+REGA),a
 4604 D1:D6A5 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4605 D1:D6AB 87 -  -  -          add a,a
 4606 D1:D6AC CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4607 D1:D6B2 DD 70 04 -          ld  (ix+REGSR),b
 4608 D1:D6B5 41 -  -  -          ld  b,c
 4609 D1:D6B6 70 -  -  -          WRITE_ACCESS
 4610 D1:D6B7 E1 -  -  -      pop hl
 4611 D1:D6B8 C3 B4 B3 D1     jp i6502NextLoad
 4612 D1:D6BC -  -  -  -  
 4613 D1:D6BC -  -  -  -  ;absolut,X	SRE oper,X	5F	3	7  	
 4614 D1:D6BC -  -  -  -  inst6502_sre_absx:
 4615 D1:D6BC ED 33 07 -      ADDCYC(7)
 4616 D1:D6BF CD 91 B6 D1     PUSH_ABSXSPLIT_NODEP
 4617 D1:D6C3 7E -  -  -          READ_ACCESS
 4618 D1:D6C4 CB 3F -  -          srl a
 4619 D1:D6C6 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4620 D1:D6C7 -  -  -  -          ;Split oper
 4621 D1:D6C7 DD 46 04 -          ld  b,(ix+REGSR)
 4622 D1:D6CA CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4623 D1:D6D0 DD AE 00 -          xor a,(ix+REGA)
 4624 D1:D6D3 DD 77 00 -          ld  (ix+REGA),a
 4625 D1:D6D6 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4626 D1:D6DC 87 -  -  -          add a,a
 4627 D1:D6DD CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4628 D1:D6E3 DD 70 04 -          ld  (ix+REGSR),b
 4629 D1:D6E6 41 -  -  -          ld  b,c
 4630 D1:D6E7 70 -  -  -          WRITE_ACCESS
 4631 D1:D6E8 E1 -  -  -      pop hl
 4632 D1:D6E9 C3 B4 B3 D1     jp i6502NextLoad
 4633 D1:D6ED -  -  -  -  
 4634 D1:D6ED -  -  -  -  ;absolut,Y	SRE oper,Y	5B	3	7  	
 4635 D1:D6ED -  -  -  -  inst6502_sre_absy:
 4636 D1:D6ED ED 33 07 -      ADDCYC(7)
 4637 D1:D6F0 CD 8C B6 D1     PUSH_ABSYSPLIT_NODEP
 4638 D1:D6F4 7E -  -  -          READ_ACCESS
 4639 D1:D6F5 CB 3F -  -          srl a
 4640 D1:D6F7 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4641 D1:D6F8 -  -  -  -          ;Split oper
 4642 D1:D6F8 DD 46 04 -          ld  b,(ix+REGSR)
 4643 D1:D6FB CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4644 D1:D701 DD AE 00 -          xor a,(ix+REGA)
 4645 D1:D704 DD 77 00 -          ld  (ix+REGA),a
 4646 D1:D707 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4647 D1:D70D 87 -  -  -          add a,a
 4648 D1:D70E CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4649 D1:D714 DD 70 04 -          ld  (ix+REGSR),b
 4650 D1:D717 41 -  -  -          ld  b,c
 4651 D1:D718 70 -  -  -          WRITE_ACCESS
 4652 D1:D719 E1 -  -  -      pop hl
 4653 D1:D71A C3 B4 B3 D1     jp i6502NextLoad
 4654 D1:D71E -  -  -  -  
 4655 D1:D71E -  -  -  -  ;(indirect,X)	SRE (oper,X)	43	2	8  	
 4656 D1:D71E -  -  -  -  isnt6502_sre_indx:
 4657 D1:D71E ED 33 08 -      ADDCYC(8)
 4658 D1:D721 E5 -  -  -      push hl
 4659 D1:D722 7E -  -  -          ld  a,(hl)
 4660 D1:D723 21 00 38 D0         ld  hl,ZEROPAGE
 4661 D1:D727 85 -  -  -          add a,L
 4662 D1:D728 DD 86 01 -          add a,(ix+REGX)
 4663 D1:D72B 6F -  -  -          ld  L,a
 4664 D1:D72C 7E -  -  -          ld  a,(hl)
 4665 D1:D72D 2C -  -  -          inc L
 4666 D1:D72E 56 -  -  -          ld  d,(hl)
 4667 D1:D72F 42 -  -  -          ld  b,d
 4668 D1:D730 0E 08 -  -          ld  c,BASETABLE_STRIDE
 4669 D1:D732 ED 4C -  -          mlt bc
 4670 D1:D734 21 00 40 D0         ld  hl,PAGETABLE
 4671 D1:D738 09 -  -  -          add hl,bc
 4672 D1:D739 ED 27 -  -          ld  hl,(hl)
 4673 D1:D73B 06 00 -  -          ld  b,0
 4674 D1:D73D 4F -  -  -          ld  c,a
 4675 D1:D73E 09 -  -  -          add hl,bc
 4676 D1:D73F 7E -  -  -          READ_ACCESS
 4677 D1:D740 CB 3F -  -          srl a
 4678 D1:D742 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4679 D1:D743 -  -  -  -          ;Split oper
 4680 D1:D743 DD 46 04 -          ld  b,(ix+REGSR)
 4681 D1:D746 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4682 D1:D74C DD AE 00 -          xor a,(ix+REGA)
 4683 D1:D74F DD 77 00 -          ld  (ix+REGA),a
 4684 D1:D752 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4685 D1:D758 87 -  -  -          add a,a
 4686 D1:D759 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4687 D1:D75F DD 70 04 -          ld  (ix+REGSR),b
 4688 D1:D762 41 -  -  -          ld  b,c
 4689 D1:D763 70 -  -  -          WRITE_ACCESS
 4690 D1:D764 E1 -  -  -      pop hl
 4691 D1:D765 C3 B4 B3 D1     jp  i6502NextLoad
 4692 D1:D769 -  -  -  -  
 4693 D1:D769 -  -  -  -  ;(indirect),Y	SRE (oper),Y	53	2	8  
 4694 D1:D769 -  -  -  -  inst6502_sre_indy:
 4695 D1:D769 ED 33 08 -      ADDCYC(8)
 4696 D1:D76C E5 -  -  -      push hl
 4697 D1:D76D 7E -  -  -          ld  a,(hl)
 4698 D1:D76E 21 00 38 D0         ld  hl,ZEROPAGE
 4699 D1:D772 85 -  -  -          add a,L
 4700 D1:D773 6F -  -  -          ld  L,a
 4701 D1:D774 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4702 D1:D775 2C -  -  -          inc L
 4703 D1:D776 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4704 D1:D779 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4705 D1:D77A 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4706 D1:D77C 24 -  -  -          inc h
 4707 D1:D77D 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4708 D1:D77E 2E 08 -  -          ld  L,BASETABLE_STRIDE
 4709 D1:D780 ED 6C -  -          mlt hl          ;23.
 4710 D1:D782 01 00 40 D0         ld  bc,PAGETABLE
 4711 D1:D786 09 -  -  -          add hl,bc
 4712 D1:D787 ED 27 -  -          ld  hl,(hl)     ;address get.
 4713 D1:D789 01 00 00 00         ld  bc,0
 4714 D1:D78D 4F -  -  -          ld  c,a
 4715 D1:D78E 09 -  -  -          add hl,bc       ;Full address get.
 4716 D1:D78F 7E -  -  -          READ_ACCESS
 4717 D1:D790 CB 3F -  -          srl a
 4718 D1:D792 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4719 D1:D793 -  -  -  -          ;Split oper
 4720 D1:D793 DD 46 04 -          ld  b,(ix+REGSR)
 4721 D1:D796 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4722 D1:D79C DD AE 00 -          xor a,(ix+REGA)
 4723 D1:D79F DD 77 00 -          ld  (ix+REGA),a
 4724 D1:D7A2 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4725 D1:D7A8 87 -  -  -          add a,a
 4726 D1:D7A9 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4727 D1:D7AF DD 70 04 -          ld  (ix+REGSR),b
 4728 D1:D7B2 41 -  -  -          ld  b,c
 4729 D1:D7B3 70 -  -  -          WRITE_ACCESS
 4730 D1:D7B4 E1 -  -  -      pop hl
 4731 D1:D7B5 C3 B4 B3 D1     jp  i6502NextLoad
 4732 D1:D7B9 -  -  -  -  
 4733 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4734 D1:D7B9 -  -  -  -  ;USBC (USBC)
 4735 D1:D7B9 -  -  -  -  ;immediate	USBC #oper	EB	2	2  
 4736 D1:D7B9 -  -  -  -  ;Map this to instruction $E9 (inst6502_sbc_imm)
 4737 D1:D7B9 -  -  -  -  
 4738 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4739 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4740 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4741 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4742 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4743 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4744 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4745 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4746 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4747 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4748 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4749 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4750 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4751 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4752 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4753 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4754 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4755 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4756 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4757 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4758 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4759 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4760 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4761 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4762 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4763 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4764 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4765 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4766 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4767 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4768 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4769 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4770 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4771 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4772 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4773 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4774 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4775 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4776 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4777 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4778 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4779 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4780 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4781 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4782 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4783 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4784 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4785 D1:D7B9 -  -  -  -  ;-----------------------------------------------------------------------------
 4786 D1:D7B9 -  -  -  -  
 4787 D1:D7B9 -  -  -  -  inst6502_instruction_set:
 4788 D1:D7B9 F3 CA D1 -  .dl	inst6502_brk					;00
 4789 D1:D7BC E5 C3 D1 -  .dl	inst6502_ora_indx				;01
 4790 D1:D7BF C0 DA D1 -  .dl	inst6502_jam_02 				;02
 4791 D1:D7C2 79 D5 D1 -  .dl	isnt6502_slo_indx				;03
 4792 D1:D7C5 60 CC D1 -  .dl	inst6502_nop_zp 				;04
 4793 D1:D7C8 09 C3 D1 -  .dl	inst6502_ora_zp					;05
 4794 D1:D7CB 97 C4 D1 -  .dl	inst6502_asl_zp					;06
 4795 D1:D7CE 6F D4 D1 -  .dl	inst6502_slo_zp 				;07
 4796 D1:D7D1 83 BC D1 -  .dl	inst6502_php					;08
 4797 D1:D7D4 E7 C2 D1 -  .dl	inst6502_ora_imm				;09
 4798 D1:D7D7 6E C4 D1 -  .dl	inst6502_asl					;0A
 4799 D1:D7DA B3 CC D1 -  .dl	instr6502_anc_imm				;0B
 4800 D1:D7DD 6E CC D1 -  .dl	inst6502_nop_abs				;0C
 4801 D1:D7E0 5E C3 D1 -  .dl	inst6502_ora_abs				;0D
 4802 D1:D7E3 F2 C4 D1 -  .dl	inst6502_asl_abs				;0E
 4803 D1:D7E6 D4 D4 D1 -  .dl	inst6502_slo_abs				;0F
 4804 D1:D7E9 C6 CA D1 -  .dl	inst6502_bpl					;10
 4805 D1:D7EC 26 C4 D1 -  .dl	inst6502_ora_indy				;11
 4806 D1:D7EF BA DA D1 -  .dl	inst6502_jam_12_halt			;12 JAM. Used to halt emulation for inspection
 4807 D1:D7F2 C4 D5 D1 -  .dl	inst6502_slo_indy				;13
 4808 D1:D7F5 67 CC D1 -  .dl	inst6502_nop_zpx				;14
 4809 D1:D7F8 32 C3 D1 -  .dl	inst6502_ora_zpx				;15
 4810 D1:D7FB C3 C4 D1 -  .dl	inst6502_asl_zpx				;16
 4811 D1:D7FE A0 D4 D1 -  .dl	inst6502_slo_zpx				;17
 4812 D1:D801 48 C8 D1 -  .dl	inst6502_clc					;18
 4813 D1:D804 BE C3 D1 -  .dl	inst6502_ora_absy				;19
 4814 D1:D807 52 CC D1 -  .dl	inst6502_nop_implied    		;1A
 4815 D1:D80A 48 D5 D1 -  .dl	inst6502_slo_absy				;1B
 4816 D1:D80D 7C CC D1 -  .dl	inst6502_nop_absx				;1C
 4817 D1:D810 97 C3 D1 -  .dl	inst6502_ora_absx				;1D
 4818 D1:D813 30 C5 D1 -  .dl	inst6502_asl_absx				;1E
 4819 D1:D816 17 D5 D1 -  .dl	inst6502_slo_absx				;1F
 4820 D1:D819 BD CB D1 -  .dl	inst6502_jsr					;20
 4821 D1:D81C D7 C0 D1 -  .dl	inst6502_and_indx				;21
 4822 D1:D81F C0 DA D1 -  .dl	inst6502_jam_22 				;22
 4823 D1:D822 84 D1 D1 -  .dl	isnt6502_rla_indx				;23
 4824 D1:D825 09 CC D1 -  .dl	inst6502_bit_zp					;24
 4825 D1:D828 FB BF D1 -  .dl	inst6502_and_zp					;25
 4826 D1:D82B 76 C6 D1 -  .dl	inst6502_rol_zp					;26
 4827 D1:D82E 68 D0 D1 -  .dl	inst6502_rla_zp 				;27
 4828 D1:D831 C5 BC D1 -  .dl	inst6502_plp					;28
 4829 D1:D834 D9 BF D1 -  .dl	inst6502_and_imm				;29
 4830 D1:D837 4A C6 D1 -  .dl	inst6502_rol					;2A
 4831 D1:D83A B3 CC D1 -  .dl	instr6502_anc2_imm				;2B
 4832 D1:D83D 2D CC D1 -  .dl	inst6502_bit_abs				;2C
 4833 D1:D840 50 C0 D1 -  .dl	inst6502_and_abs				;2D
 4834 D1:D843 D7 C6 D1 -  .dl	inst6502_rol_abs				;2E
 4835 D1:D846 D3 D0 D1 -  .dl	inst6502_rla_abs				;2F
 4836 D1:D849 A8 CA D1 -  .dl	inst6502_bmi					;30
 4837 D1:D84C 18 C1 D1 -  .dl	inst6502_and_indy				;31
 4838 D1:D84F C0 DA D1 -  .dl	inst6502_jam_32 				;32
 4839 D1:D852 D3 D1 D1 -  .dl	inst6502_rla_indy				;33
 4840 D1:D855 67 CC D1 -  .dl	inst6502_nop_zpx				;34
 4841 D1:D858 24 C0 D1 -  .dl	inst6502_and_zpx				;35
 4842 D1:D85B A5 C6 D1 -  .dl	inst6502_rol_zpx				;36
 4843 D1:D85E 9C D0 D1 -  .dl	inst6502_rla_zpx				;37
 4844 D1:D861 74 C8 D1 -  .dl	inst6502_sec					;38
 4845 D1:D864 B0 C0 D1 -  .dl	inst6502_and_absy				;39
 4846 D1:D867 52 CC D1 -  .dl	inst6502_nop_implied			;3A
 4847 D1:D86A 4F D1 D1 -  .dl	inst6502_rla_absy   			;3B
 4848 D1:D86D 7C CC D1 -  .dl	inst6502_nop_absx   			;3C
 4849 D1:D870 89 C0 D1 -  .dl	inst6502_and_absx				;3D
 4850 D1:D873 19 C7 D1 -  .dl	inst6502_rol_absx				;3E
 4851 D1:D876 1A D1 D1 -  .dl	inst6502_rla_absx   			;3F
 4852 D1:D879 2C CB D1 -  .dl	inst6502_rti					;40
 4853 D1:D87C 5E C2 D1 -  .dl	inst6502_eor_indx				;41
 4854 D1:D87F C0 DA D1 -  .dl	inst6502_jam_42     			;42
 4855 D1:D882 1E D7 D1 -  .dl	isnt6502_sre_indx   			;43
 4856 D1:D885 60 CC D1 -  .dl	inst6502_nop_zp     			;44
 4857 D1:D888 82 C1 D1 -  .dl	inst6502_eor_zp					;45
 4858 D1:D88B 85 C5 D1 -  .dl	inst6502_lsr_zp					;46
 4859 D1:D88E 14 D6 D1 -  .dl	inst6502_sre_zp     			;47
 4860 D1:D891 6D BC D1 -  .dl	inst6502_pha					;48
 4861 D1:D894 60 C1 D1 -  .dl	inst6502_eor_imm				;49
 4862 D1:D897 5C C5 D1 -  .dl	inst6502_lsr					;4A
 4863 D1:D89A 89 CC D1 -  .dl	inst6502_alr_imm    			;4B
 4864 D1:D89D 51 CB D1 -  .dl	inst6052_jmp_abs				;4C
 4865 D1:D8A0 D7 C1 D1 -  .dl	inst6502_eor_abs				;4D
 4866 D1:D8A3 E0 C5 D1 -  .dl	inst6502_lsr_abs				;4E
 4867 D1:D8A6 79 D6 D1 -  .dl	inst6502_sre_abs    			;4F
 4868 D1:D8A9 D5 CA D1 -  .dl	inst6502_bvc					;50
 4869 D1:D8AC 9F C2 D1 -  .dl	inst6502_eor_indy				;51
 4870 D1:D8AF C0 DA D1 -  .dl	inst6502_jam_52     			;52
 4871 D1:D8B2 69 D7 D1 -  .dl	inst6502_sre_indy   			;53
 4872 D1:D8B5 67 CC D1 -  .dl	inst6502_nop_zpx    			;54
 4873 D1:D8B8 AB C1 D1 -  .dl	inst6502_eor_zpx				;55
 4874 D1:D8BB B1 C5 D1 -  .dl	inst6502_lsr_zpx				;56
 4875 D1:D8BE 45 D6 D1 -  .dl	inst6502_sre_zpx    			;57
 4876 D1:D8C1 5E C8 D1 -  .dl	inst6502_cli					;58
 4877 D1:D8C4 37 C2 D1 -  .dl	inst6502_eor_absy				;59
 4878 D1:D8C7 52 CC D1 -  .dl	inst6502_nop_implied			;5A
 4879 D1:D8CA ED D6 D1 -  .dl	inst6502_sre_absy   			;5B
 4880 D1:D8CD 7C CC D1 -  .dl	inst6502_nop_absx   			;5C
 4881 D1:D8D0 10 C2 D1 -  .dl	inst6502_eor_absx				;5D
 4882 D1:D8D3 1E C6 D1 -  .dl	inst6502_lsr_absx				;5E
 4883 D1:D8D6 BC D6 D1 -  .dl	inst6502_sre_absx   			;5F
 4884 D1:D8D9 EF CB D1 -  .dl	inst6502_rts					;60
 4885 D1:D8DC C4 BE D1 -  .dl	inst6502_adc_indx				;61
 4886 D1:D8DF C0 DA D1 -  .dl	inst6502_jam_62     			;62
 4887 D1:D8E2 E2 D2 D1 -  .dl	isnt6502_rra_indx   			;63
 4888 D1:D8E5 60 CC D1 -  .dl	inst6502_nop_zp     			;64
 4889 D1:D8E8 65 BE D1 -  .dl	inst6502_adc_zp					;65
 4890 D1:D8EB 75 C7 D1 -  .dl	inst6502_ror_zp					;66
 4891 D1:D8EE 27 D2 D1 -  .dl	inst6502_rra_zp     			;67
 4892 D1:D8F1 9B BC D1 -  .dl	inst6502_pla					;68
 4893 D1:D8F4 5D BE D1 -  .dl	inst6502_adc_imm				;69
 4894 D1:D8F7 49 C7 D1 -  .dl	inst6502_ror					;6A
 4895 D1:D8FA 00 CD D1 -  .dl	instr6502_arr_imm   			;6B
 4896 D1:D8FD 73 CB D1 -  .dl	inst6502_jmp_indir				;6C
 4897 D1:D900 88 BE D1 -  .dl	inst6502_adc_abs				;6D
 4898 D1:D903 D6 C7 D1 -  .dl	inst6502_ror_abs				;6E
 4899 D1:D906 6A D2 D1 -  .dl	inst6502_rra_abs    			;6F
 4900 D1:D909 E4 CA D1 -  .dl	inst6502_bvs					;70
 4901 D1:D90C EC BE D1 -  .dl	inst6502_adc_indy				;71
 4902 D1:D90F C0 DA D1 -  .dl	inst6502_jam_72     			;72
 4903 D1:D912 1E D3 D1 -  .dl	inst6502_rra_indy   			;73
 4904 D1:D915 67 CC D1 -  .dl	inst6502_nop_zpx    			;74
 4905 D1:D918 75 BE D1 -  .dl	inst6502_adc_zpx				;75
 4906 D1:D91B A4 C7 D1 -  .dl	inst6502_ror_zpx				;76
 4907 D1:D91E 47 D2 D1 -  .dl	inst6502_rra_zpx    			;77
 4908 D1:D921 8A C8 D1 -  .dl	inst6502_sei					;78
 4909 D1:D924 B6 BE D1 -  .dl	inst6502_adc_absy				;79
 4910 D1:D927 52 CC D1 -  .dl	inst6502_nop_implied			;7A
 4911 D1:D92A C0 D2 D1 -  .dl	inst6502_rra_absy   			;7B
 4912 D1:D92D 7C CC D1 -  .dl	inst6502_nop_absx   			;7C
 4913 D1:D930 A8 BE D1 -  .dl	inst6502_adc_absx				;7D
 4914 D1:D933 18 C8 D1 -  .dl	inst6502_ror_absx				;7E
 4915 D1:D936 9E D2 D1 -  .dl	inst6502_rra_absx   			;7F
 4916 D1:D939 59 CC D1 -  .dl	inst6502_nop_imm    			;80
 4917 D1:D93C D0 BA D1 -  .dl	inst6502_sta_indx				;81
 4918 D1:D93F 59 CC D1 -  .dl	inst6502_nop_imm    			;82
 4919 D1:D942 B2 D3 D1 -  .dl	inst6502_sax_indx   			;83
 4920 D1:D945 72 BB D1 -  .dl	inst6502_sty_zp					;84
 4921 D1:D948 67 BA D1 -  .dl	inst6502_sta_zp					;85
 4922 D1:D94B 29 BB D1 -  .dl	inst6502_stx_zp					;86
 4923 D1:D94E 5F D3 D1 -  .dl	inst6502_sax_zp     			;87
 4924 D1:D951 A7 BD D1 -  .dl	inst6502_dey					;88
 4925 D1:D954 59 CC D1 -  .dl	inst6502_nop_imm    			;89
 4926 D1:D957 1E BC D1 -  .dl	inst6502_txa					;8A
 4927 D1:D95A D9 CC D1 -  .dl	instr6502_ane_imm   			;8B
 4928 D1:D95D 99 BB D1 -  .dl	inst6502_sty_abs				;8C
 4929 D1:D960 8E BA D1 -  .dl	inst6502_sta_abs				;8D
 4930 D1:D963 50 BB D1 -  .dl	inst6502_stx_abs				;8E
 4931 D1:D966 8C D3 D1 -  .dl	inst6502_sax_abs    			;8F
 4932 D1:D969 7B CA D1 -  .dl	inst6502_bcc					;90
 4933 D1:D96C FA BA D1 -  .dl	inst6502_sta_indy				;91
 4934 D1:D96F C0 DA D1 -  .dl	inst6502_jam_92     			;92
 4935 D1:D972 17 D4 D1 -  .dl	inst6502_sha_indy   			;93
 4936 D1:D975 84 BB D1 -  .dl	inst6502_sty_zpx				;94
 4937 D1:D978 79 BA D1 -  .dl	inst6502_sta_zpx				;95
 4938 D1:D97B 3B BB D1 -  .dl	inst6502_stx_zpy				;96
 4939 D1:D97E 74 D3 D1 -  .dl	inst6502_sax_zpy    			;97
 4940 D1:D981 4C BC D1 -  .dl	inst6502_tya					;98
 4941 D1:D984 C0 BA D1 -  .dl	inst6502_sta_absy				;99
 4942 D1:D987 3F BC D1 -  .dl	inst6502_txs					;9A
 4943 D1:D98A 61 D4 D1 -  .dl	inst6502_tas_absy   			;9B
 4944 D1:D98D 53 D4 D1 -  .dl	inst6502_shy_absx   			;9C
 4945 D1:D990 B0 BA D1 -  .dl	inst6502_sta_absx				;9D
 4946 D1:D993 45 D4 D1 -  .dl	inst6502_shx_absy   			;9E
 4947 D1:D996 09 D4 D1 -  .dl	inst6502_sha_absy   			;9F
 4948 D1:D999 9F B9 D1 -  .dl	inst6502_ldy_imm				;A0
 4949 D1:D99C 54 B8 D1 -  .dl	inst6502_lda_indx				;A1
 4950 D1:D99F D7 B8 D1 -  .dl	inst6502_ldx_imm				;A2
 4951 D1:D9A2 B8 CF D1 -  .dl	inst6502_lax_indx   			;A3
 4952 D1:D9A5 BE B9 D1 -  .dl	inst6502_ldy_zp					;A4
 4953 D1:D9A8 87 B7 D1 -  .dl	inst6502_lda_zp					;A5
 4954 D1:D9AB F6 B8 D1 -  .dl	inst6502_ldx_zp					;A6
 4955 D1:D9AE 03 CF D1 -  .dl	inst6502_lax_zp     			;A7
 4956 D1:D9B1 DC BB D1 -  .dl	inst6502_tay					;A8
 4957 D1:D9B4 68 B7 D1 -  .dl	inst6502_lda_imm				;A9
 4958 D1:D9B7 BB BB D1 -  .dl	inst6502_tax					;AA
 4959 D1:D9BA 41 D0 D1 -  .dl	inst6502_lxa        			;AB
 4960 D1:D9BD 0D BA D1 -  .dl	inst6502_ldy_abs				;AC
 4961 D1:D9C0 D6 B7 D1 -  .dl	inst6502_lda_abs				;AD
 4962 D1:D9C3 45 B9 D1 -  .dl	inst6502_ldx_abs				;AE
 4963 D1:D9C6 58 CF D1 -  .dl	inst6502_lax_abs    			;AF
 4964 D1:D9C9 8A CA D1 -  .dl	inst6502_bcs					;B0
 4965 D1:D9CC 92 B8 D1 -  .dl	inst6502_lda_indy				;B1
 4966 D1:D9CF C0 DA D1 -  .dl	inst6502_jam_B2     			;B2
 4967 D1:D9D2 F9 CF D1 -  .dl	inst6502_lax_indy   			;B3
 4968 D1:D9D5 E4 B9 D1 -  .dl	inst6502_ldy_zpx				;B4
 4969 D1:D9D8 AD B7 D1 -  .dl	inst6502_lda_zpx				;B5
 4970 D1:D9DB 1C B9 D1 -  .dl	inst6502_ldx_zpy				;B6
 4971 D1:D9DE 2C CF D1 -  .dl	inst6502_lax_zpy    			;B7
 4972 D1:D9E1 69 C8 D1 -  .dl	inst6502_clv					;B8
 4973 D1:D9E4 30 B8 D1 -  .dl	inst6502_lda_absy				;B9
 4974 D1:D9E7 FD BB D1 -  .dl	inst6502_tsx					;BA
 4975 D1:D9EA D6 CE D1 -  .dl	inst6502_las_absy   			;BB
 4976 D1:D9ED 43 BA D1 -  .dl	inst6502_ldy_absx				;BC
 4977 D1:D9F0 0C B8 D1 -  .dl	inst6502_lda_absx				;BD
 4978 D1:D9F3 7B B9 D1 -  .dl	inst6502_ldx_absy				;BE
 4979 D1:D9F6 91 CF D1 -  .dl	inst6502_lax_absy   			;BF
 4980 D1:D9F9 E7 C9 D1 -  .dl	inst6502_cpy_imm				;C0
 4981 D1:D9FC FC C8 D1 -  .dl	inst6502_cmp_indx				;C1
 4982 D1:D9FF 59 CC D1 -  .dl	inst6502_nop_imm    			;C2
 4983 D1:DA02 A8 CD D1 -  .dl	inst6502_dcp_indx   			;C3
 4984 D1:DA05 0D CA D1 -  .dl	inst6502_cpy_zp					;C4
 4985 D1:DA08 9D C8 D1 -  .dl	inst6502_cmp_zp					;C5
 4986 D1:DA0B E2 BC D1 -  .dl	inst6502_dec_zp					;C6
 4987 D1:DA0E 39 CD D1 -  .dl	inst6502_dcp_zp     			;C7
 4988 D1:DA11 B1 BD D1 -  .dl	inst6502_iny					;C8
 4989 D1:DA14 95 C8 D1 -  .dl	inst6502_cmp_imm				;C9
 4990 D1:DA17 89 BD D1 -  .dl	inst6502_dex					;CA
 4991 D1:DA1A E0 D3 D1 -  .dl	inst6502_sbx_imm    			;CB
 4992 D1:DA1D 3C CA D1 -  .dl	inst6502_cpy_abs				;CC
 4993 D1:DA20 C0 C8 D1 -  .dl	inst6502_cmp_abs				;CD
 4994 D1:DA23 2F BD D1 -  .dl	inst6502_dec_abs				;CE
 4995 D1:DA26 60 CD D1 -  .dl	inst6502_dcp_abs    			;CF
 4996 D1:DA29 B7 CA D1 -  .dl	inst6502_bne					;D0
 4997 D1:DA2C 24 C9 D1 -  .dl	inst6502_cmp_indy				;D1
 4998 D1:DA2F C0 DA D1 -  .dl	inst6502_jam_D2     			;D2
 4999 D1:DA32 D4 CD D1 -  .dl	inst6502_dcp_indy   			;D3
 5000 D1:DA35 67 CC D1 -  .dl	inst6502_nop_zpx    			;D4
 5001 D1:DA38 AD C8 D1 -  .dl	inst6502_cmp_zpx				;D5
 5002 D1:DA3B 07 BD D1 -  .dl	inst6502_dec_zpx				;D6
 5003 D1:DA3E 4B CD D1 -  .dl	inst6520_dcp_zpx    			;D7
 5004 D1:DA41 53 C8 D1 -  .dl	inst6502_cld					;D8
 5005 D1:DA44 EE C8 D1 -  .dl	inst6502_cmp_absy				;D9
 5006 D1:DA47 52 CC D1 -  .dl	inst6502_nop_implied			;DA
 5007 D1:DA4A 96 CD D1 -  .dl	inst6502_dcp_absy   			;DB
 5008 D1:DA4D 7C CC D1 -  .dl	inst6502_nop_absx   			;DC
 5009 D1:DA50 E0 C8 D1 -  .dl	inst6502_cmp_absx				;DD
 5010 D1:DA53 65 BD D1 -  .dl	inst6502_dec_absx				;DE
 5011 D1:DA56 84 CD D1 -  .dl	inst6502_dcp_absx   			;DF
 5012 D1:DA59 53 C9 D1 -  .dl	inst6502_cpx_imm				;E0
 5013 D1:DA5C 82 BF D1 -  .dl	inst6502_sbc_indx				;E1
 5014 D1:DA5F 59 CC D1 -  .dl	inst6502_nop_imm    			;E2
 5015 D1:DA62 77 CE D1 -  .dl	inst6502_isc_indx   			;E3
 5016 D1:DA65 79 C9 D1 -  .dl	inst6502_cpx_zp					;E4
 5017 D1:DA68 23 BF D1 -  .dl	inst6502_sbc_zp					;E5
 5018 D1:DA6B B6 BD D1 -  .dl	inst6502_inc_zp					;E6
 5019 D1:DA6E 05 CE D1 -  .dl	inst6502_isc_zp     			;E7
 5020 D1:DA71 AC BD D1 -  .dl	inst6502_inx					;E8
 5021 D1:DA74 1B BF D1 -  .dl	inst6502_sbc_imm				;E9
 5022 D1:DA77 4B CC D1 -  .dl	inst6502_nop					;EA
 5023 D1:DA7A 1B BF D1 -  .dl	inst6502_sbc_imm			    ;EB *DUPLICATE OF E9
 5024 D1:DA7D A8 C9 D1 -  .dl	inst6502_cpx_abs				;EC
 5025 D1:DA80 46 BF D1 -  .dl	inst6502_sbc_abs				;ED
 5026 D1:DA83 03 BE D1 -  .dl	inst6502_inc_abs				;EE
 5027 D1:DA86 2C CE D1 -  .dl	inst6502_isc_abs    			;EF
 5028 D1:DA89 99 CA D1 -  .dl	inst6502_beq					;F0
 5029 D1:DA8C AA BF D1 -  .dl	inst6502_sbc_indy				;F1
 5030 D1:DA8F C0 DA D1 -  .dl	inst6502_jam_F2     			;F2
 5031 D1:DA92 A4 CE D1 -  .dl	inst6502_isc_indy   			;F3
 5032 D1:DA95 67 CC D1 -  .dl	inst6502_nop_zpx    			;F4
 5033 D1:DA98 33 BF D1 -  .dl	inst6502_sbc_zpx				;F5
 5034 D1:DA9B DB BD D1 -  .dl	inst6502_inc_zpx				;F6
 5035 D1:DA9E 17 CE D1 -  .dl	inst6520_isc_zpx    			;F7
 5036 D1:DAA1 7F C8 D1 -  .dl	inst6502_sed					;F8
 5037 D1:DAA4 74 BF D1 -  .dl	inst6502_sbc_absy				;F9
 5038 D1:DAA7 52 CC D1 -  .dl	inst6502_nop_implied			;FA
 5039 D1:DAAA 64 CE D1 -  .dl	inst6502_isc_absy   			;FB
 5040 D1:DAAD 7C CC D1 -  .dl	inst6502_nop_absx   			;FC
 5041 D1:DAB0 66 BF D1 -  .dl	inst6502_sbc_absx				;FD
 5042 D1:DAB3 39 BE D1 -  .dl	inst6502_inc_absx				;FE
 5043 D1:DAB6 51 CE D1 -  .dl	inst6502_isc_absx   			;FF
 5044 D1:DAB9 -  -  -  -  
 5045 D1:DAB9 -  -  -  -  ;-----------------------------------------------------------------------------
 5046 D1:DAB9 -  -  -  -  ;-----------------------------------------------------------------------------
 5047 D1:DAB9 -  -  -  -  ;-----------------------------------------------------------------------------
 5048 D1:DAB9 -  -  -  -  ;These instructions are located here because they perform a function outside
 5049 D1:DAB9 -  -  -  -  ;the context of emulating instructions. These are mapped to instructions that
 5050 D1:DAB9 -  -  -  -  ;would, on the real hardware, freeze the CPU and require a reset to continue.
 5051 D1:DAB9 -  -  -  -  ;
 5052 D1:DAB9 -  -  -  -  ;Here, they'll let us perform useful things. Like exiting the emulator.
 5053 D1:DAB9 -  -  -  -  ;Or jamming in one spot. Or other things in the future. Debugging things.
 5054 D1:DAB9 -  -  -  -  ;Future stuff like breakpoints and console output. That sorta thing.
 5055 D1:DAB9 -  -  -  -  ;
 5056 D1:DAB9 -  -  -  -  
 5057 D1:DAB9 -  -  -  -  inst6502_:
 5058 D1:DAB9 C9 -  -  -      ret
 5059 D1:DABA -  -  -  -  
 5060 D1:DABA -  -  -  -  inst6502_jam_12_halt:
 5061 D1:DABA 18 FE -  -      jr $
 5062 D1:DABC C3 CD B3 D1     jp i6502FinishLoad
 5063 D1:DAC0 -  -  -  -  
 5064 D1:DAC0 -  -  -  -  inst6502_jam_02:
 5065 D1:DAC0 -  -  -  -  inst6502_jam_22:
 5066 D1:DAC0 -  -  -  -  inst6502_jam_32:
 5067 D1:DAC0 -  -  -  -  inst6502_jam_42:
 5068 D1:DAC0 -  -  -  -  inst6502_jam_52:
 5069 D1:DAC0 -  -  -  -  inst6502_jam_62:
 5070 D1:DAC0 -  -  -  -  inst6502_jam_72:
 5071 D1:DAC0 -  -  -  -  inst6502_jam_92:
 5072 D1:DAC0 -  -  -  -  inst6502_jam_B2:
 5073 D1:DAC0 -  -  -  -  inst6502_jam_D2:
 5074 D1:DAC0 -  -  -  -  inst6502_jam_F2:
 5075 D1:DAC0 C9 -  -  -      ret
 5076 D1:DAC1 -  -  -  -  
 5077 D1:DAC1 -  -  -  -  
 5078 D1:DAC1 -  -  -  -  
 5079 D1:DAC1 -  -  -  -  
 5080 D1:DAC1 -  -  -  -  
 5081 D1:DAC1 -  -  -  -  
 5082 D1:DAC1 -  -  -  -  
 5083 D1:DAC1 -  -  -  -  
 5084 D1:DAC1 -  -  -  -  
 5085 D1:DAC1 -  -  -  -  
 5086 D1:DAC1 -  -  -  -  
 5087 D1:DAC1 -  -  -  -  
 5088 D1:DAC1 -  -  -  -  
Listing for file "main.z80"
  667 D1:DAC1 -  -  -  -  #include "debug.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    1 D1:DAC1 -  -  -  -  ;This has all the tables needed to drive the debugger.
    2 D1:DAC1 -  -  -  -  #include "debug_itab.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug_itab.z80"
    1 D1:DAC1 -  -  -  -  inst6502_opcode_width_table:
    2 D1:DAC1 01 -  -  -  .db 1    ;0: 
    3 D1:DAC2 02 -  -  -  .db 2    ;1: zpg,X
    4 D1:DAC3 03 -  -  -  .db 3    ;2: ind
    5 D1:DAC4 03 -  -  -  .db 3    ;3: abs
    6 D1:DAC5 03 -  -  -  .db 3    ;4: abs,X
    7 D1:DAC6 02 -  -  -  .db 2    ;5: X,ind
    8 D1:DAC7 01 -  -  -  .db 1    ;6: A
    9 D1:DAC8 02 -  -  -  .db 2    ;7: zpg
   10 D1:DAC9 02 -  -  -  .db 2    ;8: rel
   11 D1:DACA 02 -  -  -  .db 2    ;9: #
   12 D1:DACB 01 -  -  -  .db 1    ;10: impl
   13 D1:DACC 02 -  -  -  .db 2    ;11: ind,Y
   14 D1:DACD 03 -  -  -  .db 3    ;12: abs,Y
   15 D1:DACE 02 -  -  -  .db 2    ;13: zpg,Y
   16 D1:DACF -  -  -  -  
   17 D1:DACF -  -  -  -  
   18 D1:DACF -  -  -  -  ;Note: 1=1byteOper, 2=2byteOper, -=1byteRelOper. Other chrs are literal
   19 D1:DACF -  -  -  -  
   20 D1:DACF -  -  -  -  inst6502_disassembler:
   21 D1:DACF 01 -  -  -  .db 1,""  ;
   22 D1:DAD0 04 31 2C 58 .db 4,"1,X"  ;
   23 D1:DAD4 04 28 32 29 .db 4,"(2)"  ;
   24 D1:DAD8 02 32 -  -  .db 2,"2"  ;
   25 D1:DADA 04 32 2C 58 .db 4,"2,X"  ;
   26 D1:DADE 06 28 31 2C 
              58 29 -  -  .db 6,"(1,X)"  ;
   27 D1:DAE4 02 41 -  -  .db 2,"A"  ;
   28 D1:DAE6 02 31 -  -  .db 2,"1"  ;
   29 D1:DAE8 02 2D -  -  .db 2,"-"  ;
   30 D1:DAEA 03 23 31 -  .db 3,"#1"  ;
   31 D1:DAED 01 -  -  -  .db 1,""  ;
   32 D1:DAEE 06 28 31 29 
              2C 59 -  -  .db 6,"(1),Y"  ;
   33 D1:DAF4 04 32 2C 59 .db 4,"2,Y"  ;
   34 D1:DAF8 04 31 2C 59 .db 4,"1,Y"  ;
   35 D1:DAFC -  -  -  -  
   36 D1:DAFC -  -  -  -  inst6502_disassembly_table:
   37 D1:DAFC 42 52 4B 0A .db "BRK", 10     ;0x00
   38 D1:DB00 4F 52 41 05 .db "ORA", 5     ;0x01
   39 D1:DB04 4A 41 4D 00 .db "JAM", 0     ;0x02
   40 D1:DB08 53 4C 4F 05 .db "SLO", 5     ;0x03
   41 D1:DB0C 4E 4F 50 07 .db "NOP", 7     ;0x04
   42 D1:DB10 4F 52 41 07 .db "ORA", 7     ;0x05
   43 D1:DB14 41 53 4C 07 .db "ASL", 7     ;0x06
   44 D1:DB18 53 4C 4F 07 .db "SLO", 7     ;0x07
   45 D1:DB1C 50 48 50 0A .db "PHP", 10     ;0x08
   46 D1:DB20 4F 52 41 09 .db "ORA", 9     ;0x09
   47 D1:DB24 41 53 4C 06 .db "ASL", 6     ;0x0A
   48 D1:DB28 41 4E 43 09 .db "ANC", 9     ;0x0B
   49 D1:DB2C 4E 4F 50 03 .db "NOP", 3     ;0x0C
   50 D1:DB30 4F 52 41 03 .db "ORA", 3     ;0x0D
   51 D1:DB34 41 53 4C 03 .db "ASL", 3     ;0x0E
   52 D1:DB38 53 4C 4F 03 .db "SLO", 3     ;0x0F
   53 D1:DB3C 42 50 4C 08 .db "BPL", 8     ;0x10
   54 D1:DB40 4F 52 41 0B .db "ORA", 11     ;0x11
   55 D1:DB44 4A 41 4D 00 .db "JAM", 0     ;0x12
   56 D1:DB48 53 4C 4F 0B .db "SLO", 11     ;0x13
   57 D1:DB4C 4E 4F 50 01 .db "NOP", 1     ;0x14
   58 D1:DB50 4F 52 41 01 .db "ORA", 1     ;0x15
   59 D1:DB54 41 53 4C 01 .db "ASL", 1     ;0x16
   60 D1:DB58 53 4C 4F 01 .db "SLO", 1     ;0x17
   61 D1:DB5C 43 4C 43 0A .db "CLC", 10     ;0x18
   62 D1:DB60 4F 52 41 0C .db "ORA", 12     ;0x19
   63 D1:DB64 4E 4F 50 0A .db "NOP", 10     ;0x1A
   64 D1:DB68 53 4C 4F 0C .db "SLO", 12     ;0x1B
   65 D1:DB6C 4E 4F 50 04 .db "NOP", 4     ;0x1C
   66 D1:DB70 4F 52 41 04 .db "ORA", 4     ;0x1D
   67 D1:DB74 41 53 4C 04 .db "ASL", 4     ;0x1E
   68 D1:DB78 53 4C 4F 04 .db "SLO", 4     ;0x1F
   69 D1:DB7C 4A 53 52 03 .db "JSR", 3     ;0x20
   70 D1:DB80 41 4E 44 05 .db "AND", 5     ;0x21
   71 D1:DB84 4A 41 4D 00 .db "JAM", 0     ;0x22
   72 D1:DB88 52 4C 41 05 .db "RLA", 5     ;0x23
   73 D1:DB8C 42 49 54 07 .db "BIT", 7     ;0x24
   74 D1:DB90 41 4E 44 07 .db "AND", 7     ;0x25
   75 D1:DB94 52 4F 4C 07 .db "ROL", 7     ;0x26
   76 D1:DB98 52 4C 41 07 .db "RLA", 7     ;0x27
   77 D1:DB9C 50 4C 50 0A .db "PLP", 10     ;0x28
   78 D1:DBA0 41 4E 44 09 .db "AND", 9     ;0x29
   79 D1:DBA4 52 4F 4C 06 .db "ROL", 6     ;0x2A
   80 D1:DBA8 41 4E 43 09 .db "ANC", 9     ;0x2B
   81 D1:DBAC 42 49 54 03 .db "BIT", 3     ;0x2C
   82 D1:DBB0 41 4E 44 03 .db "AND", 3     ;0x2D
   83 D1:DBB4 52 4F 4C 03 .db "ROL", 3     ;0x2E
   84 D1:DBB8 52 4C 41 03 .db "RLA", 3     ;0x2F
   85 D1:DBBC 42 4D 49 08 .db "BMI", 8     ;0x30
   86 D1:DBC0 41 4E 44 0B .db "AND", 11     ;0x31
   87 D1:DBC4 4A 41 4D 00 .db "JAM", 0     ;0x32
   88 D1:DBC8 52 4C 41 0B .db "RLA", 11     ;0x33
   89 D1:DBCC 4E 4F 50 01 .db "NOP", 1     ;0x34
   90 D1:DBD0 41 4E 44 01 .db "AND", 1     ;0x35
   91 D1:DBD4 52 4F 4C 01 .db "ROL", 1     ;0x36
   92 D1:DBD8 52 4C 41 01 .db "RLA", 1     ;0x37
   93 D1:DBDC 53 45 43 0A .db "SEC", 10     ;0x38
   94 D1:DBE0 41 4E 44 0C .db "AND", 12     ;0x39
   95 D1:DBE4 4E 4F 50 0A .db "NOP", 10     ;0x3A
   96 D1:DBE8 52 4C 41 0C .db "RLA", 12     ;0x3B
   97 D1:DBEC 4E 4F 50 04 .db "NOP", 4     ;0x3C
   98 D1:DBF0 41 4E 44 04 .db "AND", 4     ;0x3D
   99 D1:DBF4 52 4F 4C 04 .db "ROL", 4     ;0x3E
  100 D1:DBF8 52 4C 41 04 .db "RLA", 4     ;0x3F
  101 D1:DBFC 52 54 49 0A .db "RTI", 10     ;0x40
  102 D1:DC00 45 4F 52 05 .db "EOR", 5     ;0x41
  103 D1:DC04 4A 41 4D 00 .db "JAM", 0     ;0x42
  104 D1:DC08 53 52 45 05 .db "SRE", 5     ;0x43
  105 D1:DC0C 4E 4F 50 07 .db "NOP", 7     ;0x44
  106 D1:DC10 45 4F 52 07 .db "EOR", 7     ;0x45
  107 D1:DC14 4C 53 52 07 .db "LSR", 7     ;0x46
  108 D1:DC18 53 52 45 07 .db "SRE", 7     ;0x47
  109 D1:DC1C 50 48 41 0A .db "PHA", 10     ;0x48
  110 D1:DC20 45 4F 52 09 .db "EOR", 9     ;0x49
  111 D1:DC24 4C 53 52 06 .db "LSR", 6     ;0x4A
  112 D1:DC28 41 4C 52 09 .db "ALR", 9     ;0x4B
  113 D1:DC2C 4A 4D 50 03 .db "JMP", 3     ;0x4C
  114 D1:DC30 45 4F 52 03 .db "EOR", 3     ;0x4D
  115 D1:DC34 4C 53 52 03 .db "LSR", 3     ;0x4E
  116 D1:DC38 53 52 45 03 .db "SRE", 3     ;0x4F
  117 D1:DC3C 42 56 43 08 .db "BVC", 8     ;0x50
  118 D1:DC40 45 4F 52 0B .db "EOR", 11     ;0x51
  119 D1:DC44 4A 41 4D 00 .db "JAM", 0     ;0x52
  120 D1:DC48 53 52 45 0B .db "SRE", 11     ;0x53
  121 D1:DC4C 4E 4F 50 01 .db "NOP", 1     ;0x54
  122 D1:DC50 45 4F 52 01 .db "EOR", 1     ;0x55
  123 D1:DC54 4C 53 52 01 .db "LSR", 1     ;0x56
  124 D1:DC58 53 52 45 01 .db "SRE", 1     ;0x57
  125 D1:DC5C 43 4C 49 0A .db "CLI", 10     ;0x58
  126 D1:DC60 45 4F 52 0C .db "EOR", 12     ;0x59
  127 D1:DC64 4E 4F 50 0A .db "NOP", 10     ;0x5A
  128 D1:DC68 53 52 45 0C .db "SRE", 12     ;0x5B
  129 D1:DC6C 4E 4F 50 04 .db "NOP", 4     ;0x5C
  130 D1:DC70 45 4F 52 04 .db "EOR", 4     ;0x5D
  131 D1:DC74 4C 53 52 04 .db "LSR", 4     ;0x5E
  132 D1:DC78 53 52 45 04 .db "SRE", 4     ;0x5F
  133 D1:DC7C 52 54 53 0A .db "RTS", 10     ;0x60
  134 D1:DC80 41 44 43 05 .db "ADC", 5     ;0x61
  135 D1:DC84 4A 41 4D 00 .db "JAM", 0     ;0x62
  136 D1:DC88 52 52 41 05 .db "RRA", 5     ;0x63
  137 D1:DC8C 4E 4F 50 07 .db "NOP", 7     ;0x64
  138 D1:DC90 41 44 43 07 .db "ADC", 7     ;0x65
  139 D1:DC94 52 4F 52 07 .db "ROR", 7     ;0x66
  140 D1:DC98 52 52 41 07 .db "RRA", 7     ;0x67
  141 D1:DC9C 50 4C 41 0A .db "PLA", 10     ;0x68
  142 D1:DCA0 41 44 43 09 .db "ADC", 9     ;0x69
  143 D1:DCA4 52 4F 52 06 .db "ROR", 6     ;0x6A
  144 D1:DCA8 41 52 52 09 .db "ARR", 9     ;0x6B
  145 D1:DCAC 4A 4D 50 02 .db "JMP", 2     ;0x6C
  146 D1:DCB0 41 44 43 03 .db "ADC", 3     ;0x6D
  147 D1:DCB4 52 4F 52 03 .db "ROR", 3     ;0x6E
  148 D1:DCB8 52 52 41 03 .db "RRA", 3     ;0x6F
  149 D1:DCBC 42 56 53 08 .db "BVS", 8     ;0x70
  150 D1:DCC0 41 44 43 0B .db "ADC", 11     ;0x71
  151 D1:DCC4 4A 41 4D 00 .db "JAM", 0     ;0x72
  152 D1:DCC8 52 52 41 0B .db "RRA", 11     ;0x73
  153 D1:DCCC 4E 4F 50 01 .db "NOP", 1     ;0x74
  154 D1:DCD0 41 44 43 01 .db "ADC", 1     ;0x75
  155 D1:DCD4 52 4F 52 01 .db "ROR", 1     ;0x76
  156 D1:DCD8 52 52 41 01 .db "RRA", 1     ;0x77
  157 D1:DCDC 53 45 49 0A .db "SEI", 10     ;0x78
  158 D1:DCE0 41 44 43 0C .db "ADC", 12     ;0x79
  159 D1:DCE4 4E 4F 50 0A .db "NOP", 10     ;0x7A
  160 D1:DCE8 52 52 41 0C .db "RRA", 12     ;0x7B
  161 D1:DCEC 4E 4F 50 04 .db "NOP", 4     ;0x7C
  162 D1:DCF0 41 44 43 04 .db "ADC", 4     ;0x7D
  163 D1:DCF4 52 4F 52 04 .db "ROR", 4     ;0x7E
  164 D1:DCF8 52 52 41 04 .db "RRA", 4     ;0x7F
  165 D1:DCFC 4E 4F 50 09 .db "NOP", 9     ;0x80
  166 D1:DD00 53 54 41 05 .db "STA", 5     ;0x81
  167 D1:DD04 4E 4F 50 09 .db "NOP", 9     ;0x82
  168 D1:DD08 53 41 58 05 .db "SAX", 5     ;0x83
  169 D1:DD0C 53 54 59 07 .db "STY", 7     ;0x84
  170 D1:DD10 53 54 41 07 .db "STA", 7     ;0x85
  171 D1:DD14 53 54 58 07 .db "STX", 7     ;0x86
  172 D1:DD18 53 41 58 07 .db "SAX", 7     ;0x87
  173 D1:DD1C 44 45 59 0A .db "DEY", 10     ;0x88
  174 D1:DD20 4E 4F 50 09 .db "NOP", 9     ;0x89
  175 D1:DD24 54 58 41 0A .db "TXA", 10     ;0x8A
  176 D1:DD28 41 4E 45 09 .db "ANE", 9     ;0x8B
  177 D1:DD2C 53 54 59 03 .db "STY", 3     ;0x8C
  178 D1:DD30 53 54 41 03 .db "STA", 3     ;0x8D
  179 D1:DD34 53 54 58 03 .db "STX", 3     ;0x8E
  180 D1:DD38 53 41 58 03 .db "SAX", 3     ;0x8F
  181 D1:DD3C 42 43 43 08 .db "BCC", 8     ;0x90
  182 D1:DD40 53 54 41 0B .db "STA", 11     ;0x91
  183 D1:DD44 4A 41 4D 00 .db "JAM", 0     ;0x92
  184 D1:DD48 53 48 41 0B .db "SHA", 11     ;0x93
  185 D1:DD4C 53 54 59 01 .db "STY", 1     ;0x94
  186 D1:DD50 53 54 41 01 .db "STA", 1     ;0x95
  187 D1:DD54 53 54 58 0D .db "STX", 13     ;0x96
  188 D1:DD58 53 41 58 0D .db "SAX", 13     ;0x97
  189 D1:DD5C 54 59 41 0A .db "TYA", 10     ;0x98
  190 D1:DD60 53 54 41 0C .db "STA", 12     ;0x99
  191 D1:DD64 54 58 53 0A .db "TXS", 10     ;0x9A
  192 D1:DD68 54 41 53 0C .db "TAS", 12     ;0x9B
  193 D1:DD6C 53 48 59 04 .db "SHY", 4     ;0x9C
  194 D1:DD70 53 54 41 04 .db "STA", 4     ;0x9D
  195 D1:DD74 53 48 58 0C .db "SHX", 12     ;0x9E
  196 D1:DD78 53 48 41 0C .db "SHA", 12     ;0x9F
  197 D1:DD7C 4C 44 59 09 .db "LDY", 9     ;0xA0
  198 D1:DD80 4C 44 41 05 .db "LDA", 5     ;0xA1
  199 D1:DD84 4C 44 58 09 .db "LDX", 9     ;0xA2
  200 D1:DD88 4C 41 58 05 .db "LAX", 5     ;0xA3
  201 D1:DD8C 4C 44 59 07 .db "LDY", 7     ;0xA4
  202 D1:DD90 4C 44 41 07 .db "LDA", 7     ;0xA5
  203 D1:DD94 4C 44 58 07 .db "LDX", 7     ;0xA6
  204 D1:DD98 4C 41 58 07 .db "LAX", 7     ;0xA7
  205 D1:DD9C 54 41 59 0A .db "TAY", 10     ;0xA8
  206 D1:DDA0 4C 44 41 09 .db "LDA", 9     ;0xA9
  207 D1:DDA4 54 41 58 0A .db "TAX", 10     ;0xAA
  208 D1:DDA8 4C 58 41 09 .db "LXA", 9     ;0xAB
  209 D1:DDAC 4C 44 59 03 .db "LDY", 3     ;0xAC
  210 D1:DDB0 4C 44 41 03 .db "LDA", 3     ;0xAD
  211 D1:DDB4 4C 44 58 03 .db "LDX", 3     ;0xAE
  212 D1:DDB8 4C 41 58 03 .db "LAX", 3     ;0xAF
  213 D1:DDBC 42 43 53 08 .db "BCS", 8     ;0xB0
  214 D1:DDC0 4C 44 41 0B .db "LDA", 11     ;0xB1
  215 D1:DDC4 4A 41 4D 00 .db "JAM", 0     ;0xB2
  216 D1:DDC8 4C 41 58 0B .db "LAX", 11     ;0xB3
  217 D1:DDCC 4C 44 59 01 .db "LDY", 1     ;0xB4
  218 D1:DDD0 4C 44 41 01 .db "LDA", 1     ;0xB5
  219 D1:DDD4 4C 44 58 0D .db "LDX", 13     ;0xB6
  220 D1:DDD8 4C 41 58 0D .db "LAX", 13     ;0xB7
  221 D1:DDDC 43 4C 56 0A .db "CLV", 10     ;0xB8
  222 D1:DDE0 4C 44 41 0C .db "LDA", 12     ;0xB9
  223 D1:DDE4 54 53 58 0A .db "TSX", 10     ;0xBA
  224 D1:DDE8 4C 41 53 0C .db "LAS", 12     ;0xBB
  225 D1:DDEC 4C 44 59 04 .db "LDY", 4     ;0xBC
  226 D1:DDF0 4C 44 41 04 .db "LDA", 4     ;0xBD
  227 D1:DDF4 4C 44 58 0C .db "LDX", 12     ;0xBE
  228 D1:DDF8 4C 41 58 0C .db "LAX", 12     ;0xBF
  229 D1:DDFC 43 50 59 09 .db "CPY", 9     ;0xC0
  230 D1:DE00 43 4D 50 05 .db "CMP", 5     ;0xC1
  231 D1:DE04 4E 4F 50 09 .db "NOP", 9     ;0xC2
  232 D1:DE08 44 43 50 05 .db "DCP", 5     ;0xC3
  233 D1:DE0C 43 50 59 07 .db "CPY", 7     ;0xC4
  234 D1:DE10 43 4D 50 07 .db "CMP", 7     ;0xC5
  235 D1:DE14 44 45 43 07 .db "DEC", 7     ;0xC6
  236 D1:DE18 44 43 50 07 .db "DCP", 7     ;0xC7
  237 D1:DE1C 49 4E 59 0A .db "INY", 10     ;0xC8
  238 D1:DE20 43 4D 50 09 .db "CMP", 9     ;0xC9
  239 D1:DE24 44 45 58 0A .db "DEX", 10     ;0xCA
  240 D1:DE28 53 42 58 09 .db "SBX", 9     ;0xCB
  241 D1:DE2C 43 50 59 03 .db "CPY", 3     ;0xCC
  242 D1:DE30 43 4D 50 03 .db "CMP", 3     ;0xCD
  243 D1:DE34 44 45 43 03 .db "DEC", 3     ;0xCE
  244 D1:DE38 44 43 50 03 .db "DCP", 3     ;0xCF
  245 D1:DE3C 42 4E 45 08 .db "BNE", 8     ;0xD0
  246 D1:DE40 43 4D 50 0B .db "CMP", 11     ;0xD1
  247 D1:DE44 4A 41 4D 00 .db "JAM", 0     ;0xD2
  248 D1:DE48 44 43 50 0B .db "DCP", 11     ;0xD3
  249 D1:DE4C 4E 4F 50 01 .db "NOP", 1     ;0xD4
  250 D1:DE50 43 4D 50 01 .db "CMP", 1     ;0xD5
  251 D1:DE54 44 45 43 01 .db "DEC", 1     ;0xD6
  252 D1:DE58 44 43 50 01 .db "DCP", 1     ;0xD7
  253 D1:DE5C 43 4C 44 0A .db "CLD", 10     ;0xD8
  254 D1:DE60 43 4D 50 0C .db "CMP", 12     ;0xD9
  255 D1:DE64 4E 4F 50 0A .db "NOP", 10     ;0xDA
  256 D1:DE68 44 43 50 0C .db "DCP", 12     ;0xDB
  257 D1:DE6C 4E 4F 50 04 .db "NOP", 4     ;0xDC
  258 D1:DE70 43 4D 50 04 .db "CMP", 4     ;0xDD
  259 D1:DE74 44 45 43 04 .db "DEC", 4     ;0xDE
  260 D1:DE78 44 43 50 04 .db "DCP", 4     ;0xDF
  261 D1:DE7C 43 50 58 09 .db "CPX", 9     ;0xE0
  262 D1:DE80 53 42 43 05 .db "SBC", 5     ;0xE1
  263 D1:DE84 4E 4F 50 09 .db "NOP", 9     ;0xE2
  264 D1:DE88 49 53 43 05 .db "ISC", 5     ;0xE3
  265 D1:DE8C 43 50 58 07 .db "CPX", 7     ;0xE4
  266 D1:DE90 53 42 43 07 .db "SBC", 7     ;0xE5
  267 D1:DE94 49 4E 43 07 .db "INC", 7     ;0xE6
  268 D1:DE98 49 53 43 07 .db "ISC", 7     ;0xE7
  269 D1:DE9C 49 4E 58 0A .db "INX", 10     ;0xE8
  270 D1:DEA0 53 42 43 09 .db "SBC", 9     ;0xE9
  271 D1:DEA4 4E 4F 50 0A .db "NOP", 10     ;0xEA
  272 D1:DEA8 55 53 42 09 .db "USB", 9     ;0xEB
  273 D1:DEAC 43 50 58 03 .db "CPX", 3     ;0xEC
  274 D1:DEB0 53 42 43 03 .db "SBC", 3     ;0xED
  275 D1:DEB4 49 4E 43 03 .db "INC", 3     ;0xEE
  276 D1:DEB8 49 53 43 03 .db "ISC", 3     ;0xEF
  277 D1:DEBC 42 45 51 08 .db "BEQ", 8     ;0xF0
  278 D1:DEC0 53 42 43 0B .db "SBC", 11     ;0xF1
  279 D1:DEC4 4A 41 4D 00 .db "JAM", 0     ;0xF2
  280 D1:DEC8 49 53 43 0B .db "ISC", 11     ;0xF3
  281 D1:DECC 4E 4F 50 01 .db "NOP", 1     ;0xF4
  282 D1:DED0 53 42 43 01 .db "SBC", 1     ;0xF5
  283 D1:DED4 49 4E 43 01 .db "INC", 1     ;0xF6
  284 D1:DED8 49 53 43 01 .db "ISC", 1     ;0xF7
  285 D1:DEDC 53 45 44 0A .db "SED", 10     ;0xF8
  286 D1:DEE0 53 42 43 0C .db "SBC", 12     ;0xF9
  287 D1:DEE4 4E 4F 50 0A .db "NOP", 10     ;0xFA
  288 D1:DEE8 49 53 43 0C .db "ISC", 12     ;0xFB
  289 D1:DEEC 4E 4F 50 04 .db "NOP", 4     ;0xFC
  290 D1:DEF0 53 42 43 04 .db "SBC", 4     ;0xFD
  291 D1:DEF4 49 4E 43 04 .db "INC", 4     ;0xFE
  292 D1:DEF8 49 53 43 04 .db "ISC", 4     ;0xFF
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    3 D1:DEFC -  -  -  -  
    4 D1:DEFC -  -  -  -  
    5 D1:DEFC -  -  -  -  ;You must assign a print character routine.
    6 D1:DEFC -  -  -  -  ;You must also write all opcode bytes to operbuf or map operbuf to where written
    7 D1:DEFC -  -  -  -  dbg_printChr    = PrintBigFont
    8 D1:DEFC -  -  -  -  operbuf         = debugram
    9 D1:DEFC -  -  -  -  
   10 D1:DEFC -  -  -  -  
   11 D1:DEFC -  -  -  -  dbg_resetScreen:
   12 D1:DEFC 21 00 00 D4     ld  hl,screenBuf1
   13 D1:DF00 11 01 00 D4     ld  de,screenBuf1+1
   14 D1:DF04 01 FF 57 02     ld  bc,(2*240*320)-1
   15 D1:DF08 36 00 -  -      ld  (hl),$00
   16 D1:DF0A ED B0 -  -      ldir
   17 D1:DF0C AF -  -  -      xor a,a
   18 D1:DF0D CD 1F AF D1     call setLineStart
   19 D1:DF11 CD 28 AF D1     call setCurLine
   20 D1:DF15 C9 -  -  -      ret
   21 D1:DF16 -  -  -  -  
   22 D1:DF16 -  -  -  -  dbg_prepNextLine:
   23 D1:DF16 AF -  -  -      xor a,a
   24 D1:DF17 32 F6 31 D0     ld  (xPos),a
   25 D1:DF1B CD F5 AF D1     call calculateScreenPtr
   26 D1:DF1F EB -  -  -      ex  de,hl
   27 D1:DF20 21 FF 2B D5     ld  hl,screenBuf2-1
   28 D1:DF24 B7 -  -  -      or  a,a
   29 D1:DF25 ED 52 -  -      sbc hl,de
   30 D1:DF27 -  -  -  -  ;If C: DE in sb2. subtract to set in sb1.
   31 D1:DF27 -  -  -  -  ;If NC: DE in sb1. add to set in sb2.
   32 D1:DF27 21 00 2C 01     ld  hl,320*240
   33 D1:DF2B 30 04 -  -      jr  nc,+_
   34 D1:DF2D 21 00 D4 FE     ld  hl,-(320*240)+0
   35 D1:DF31 19 -  -  -  _:  add hl,de   ;HL set to other buffer. DE points to current buffer.
   36 D1:DF32 01 00 0A 00     ld  bc,320*8    ;copy one line from other buffer to current buffer.
   37 D1:DF36 7E -  -  -  _:  ld  a,(hl)
   38 D1:DF37 C6 01 -  -      add a,1     ;carry if $FF (white), NC if not
   39 D1:DF39 9F -  -  -      sbc a,a     ;if carry, returns to $FF, else is black
   40 D1:DF3A 77 -  -  -      ld  (hl),a
   41 D1:DF3B ED A0 -  -      ldi
   42 D1:DF3D EA 36 DF D1     jp  pe,-_
   43 D1:DF41 3A F7 31 D0     ld  a,(yPos)
   44 D1:DF45 FE 1D -  -      cp  a,29
   45 D1:DF47 20 06 -  -      jr  nz,+_
   46 D1:DF49 21 00 D4 FE     ld  hl,-(320*240)
   47 D1:DF4D 19 -  -  -      add hl,de
   48 D1:DF4E EB -  -  -      ex de,hl        ;if bottom of screen, then reset DE to top of screen.
   49 D1:DF4F D5 -  -  -  _:  push de
   50 D1:DF50 E1 -  -  -      pop hl
   51 D1:DF51 13 -  -  -      inc de
   52 D1:DF52 71 -  -  -      ld  (hl),c
   53 D1:DF53 01 BF 08 00     ld  bc,(320*7)-1    ;erase whole line below it to prepare for writing.
   54 D1:DF57 ED B0 -  -      ldir
   55 D1:DF59 C9 -  -  -      ret
   56 D1:DF5A -  -  -  -  
   57 D1:DF5A -  -  -  -  ;Input: ix = core_memory_ix 
   58 D1:DF5A -  -  -  -  ;Output: Text onscreen
   59 D1:DF5A -  -  -  -  dbg_printLine:
   60 D1:DF5A E5 C5 D5 DD 
              E5 FD E5 F5     push hl \ push bc \ push de \ push ix \ push iy \ push af
   61 D1:DF62 ED 23 00 -      lea hl,iy+0
   62 D1:DF65 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl
   63 D1:DF68 11 75 67 00     ld  de,DEBUG_PRINT_START_CYCLE
   64 D1:DF6C B7 -  -  -      or  a,a
   65 D1:DF6D ED 52 -  -      sbc hl,de
   66 D1:DF6F DA 53 E0 D1     jp  c,dbg_printLine_noPrint
   67 D1:DF73 -  -  -  -  
   68 D1:DF73 3E 1A -  -      ld  a,$1A   ;blue
   69 D1:DF75 32 77 AF D1     ld  (fontBGColor_var),a
   70 D1:DF79 32 C4 AF D1     ld  (smallFontBGColor_var),a
   71 D1:DF7D DD 27 0E -      ld  hl,(ix+CURRENT_OPCODES)
   72 D1:DF80 22 F9 31 D0     ld  (operbuf),hl
   73 D1:DF84 CD 16 DF D1     call dbg_prepNextLine
   74 D1:DF88 CD 33 AF D1     call newLine
   75 D1:DF8C DD 7E 06 -      ld  a,(ix+REGPC+1)
   76 D1:DF8F CD 90 AF D1     call printSmallNumPair
   77 D1:DF93 DD 7E 05 -      ld  a,(ix+REGPC+0)
   78 D1:DF96 CD 90 AF D1     call printSmallNumPair
   79 D1:DF9A 3E 20 -  -      ld  a,' '
   80 D1:DF9C CD 60 AF D1     call printBigFont
   81 D1:DFA0 -  -  -  -      ;
   82 D1:DFA0 3E 41 -  -      ld  a,'A'
   83 D1:DFA2 CD 60 AF D1     call printBigFont
   84 D1:DFA6 DD 7E 00 -      ld  a,(ix+REGA)
   85 D1:DFA9 CD 90 AF D1     call printSmallNumPair
   86 D1:DFAD 3E 20 -  -      ld  a,' '
   87 D1:DFAF CD 60 AF D1     call printBigFont
   88 D1:DFB3 -  -  -  -      ;
   89 D1:DFB3 3E 58 -  -      ld  a,'X'
   90 D1:DFB5 CD 60 AF D1     call printBigFont
   91 D1:DFB9 DD 7E 01 -      ld  a,(ix+REGX)
   92 D1:DFBC CD 90 AF D1     call printSmallNumPair
   93 D1:DFC0 3E 20 -  -      ld  a,' '
   94 D1:DFC2 CD 60 AF D1     call printBigFont
   95 D1:DFC6 -  -  -  -      ;
   96 D1:DFC6 3E 59 -  -      ld  a,'Y'
   97 D1:DFC8 CD 60 AF D1     call printBigFont
   98 D1:DFCC DD 7E 02 -      ld  a,(ix+REGY)
   99 D1:DFCF CD 90 AF D1     call printSmallNumPair
  100 D1:DFD3 3E 20 -  -      ld  a,' '
  101 D1:DFD5 CD 60 AF D1     call printBigFont
  102 D1:DFD9 -  -  -  -      ;
  103 D1:DFD9 3E 53 -  -      ld  a,'S'
  104 D1:DFDB CD 60 AF D1     call printBigFont
  105 D1:DFDF DD 7E 03 -      ld  a,(ix+REGSP)
  106 D1:DFE2 CD 90 AF D1     call printSmallNumPair
  107 D1:DFE6 3E 20 -  -      ld  a,' '
  108 D1:DFE8 CD 60 AF D1     call printBigFont
  109 D1:DFEC -  -  -  -      ;
  110 D1:DFEC 3E 50 -  -      ld  a,'P'
  111 D1:DFEE CD 60 AF D1     call printBigFont
  112 D1:DFF2 DD 7E 04 -      ld  a,(ix+REGSR)
  113 D1:DFF5 CD 90 AF D1     call printSmallNumPair
  114 D1:DFF9 3E 20 -  -      ld  a,' '
  115 D1:DFFB CD 60 AF D1     call printBigFont
  116 D1:DFFF -  -  -  -  
  117 D1:DFFF -  -  -  -      ;
  118 D1:DFFF -  -  -  -  ;    ld  hl,dbg_printLine_str001
  119 D1:DFFF -  -  -  -  ;    call printString
  120 D1:DFFF -  -  -  -  ;    ld  b,5
  121 D1:DFFF -  -  -  -  ;    lea hl,ix+0
  122 D1:DFFF -  -  -  -  ;_:  ld  a,(hl)
  123 D1:DFFF -  -  -  -  ;    inc hl
  124 D1:DFFF -  -  -  -  ;    push bc
  125 D1:DFFF -  -  -  -  ;        push hl
  126 D1:DFFF -  -  -  -  ;            call printSmallNumPair
  127 D1:DFFF -  -  -  -  ;            ld  a,' '
  128 D1:DFFF -  -  -  -  ;            call printBigFont
  129 D1:DFFF -  -  -  -  ;        pop hl
  130 D1:DFFF -  -  -  -  ;    pop bc
  131 D1:DFFF -  -  -  -  ;    djnz -_
  132 D1:DFFF -  -  -  -  
  133 D1:DFFF DD 7E 0D -      ld  a,(ix+CYCLES_CURRENT+2)
  134 D1:E002 CD 90 AF D1     call printSmallNumPair
  135 D1:E006 DD 7E 0C -      ld  a,(ix+CYCLES_CURRENT+1)
  136 D1:E009 CD 90 AF D1     call printSmallNumPair
  137 D1:E00D DD 7E 0B -      ld  a,(ix+CYCLES_CURRENT+0)
  138 D1:E010 CD 90 AF D1     call printSmallNumPair
  139 D1:E014 3E 20 -  -      ld  a,' '
  140 D1:E016 CD 60 AF D1     call printBigFont
  141 D1:E01A 2A F9 31 D0     ld  hl,(operbuf)
  142 D1:E01E DD 2F 0E -      ld  (ix+CURRENT_OPCODES),hl
  143 D1:E021 7D -  -  -      ld  a,L
  144 D1:E022 CD 43 E1 D1     call dbg_getInstSize
  145 D1:E026 06 03 -  -      ld  b,3
  146 D1:E028 4F -  -  -      ld  c,a
  147 D1:E029 0C -  -  -      inc c
  148 D1:E02A ED 22 0E -      lea hl,ix+CURRENT_OPCODES
  149 D1:E02D 7E -  -  -  _:  ld  a,(hl)
  150 D1:E02E 23 -  -  -      inc hl
  151 D1:E02F E5 -  -  -      push hl
  152 D1:E030 0D -  -  -          dec c
  153 D1:E031 F2 36 E0 D1         jp p,+_
  154 D1:E035 0C -  -  -          inc c   ;never let c go below zero.
  155 D1:E036 C5 -  -  -  _:      push bc
  156 D1:E037 28 06 -  -              jr  z,+_
  157 D1:E039 CD 90 AF D1             call printSmallNumPair
  158 D1:E03D 18 06 -  -              jr ++_
  159 D1:E03F 3E 20 -  -  _:          ld  a,' '
  160 D1:E041 CD 60 AF D1             call printBigFont
  161 D1:E045 C1 -  -  -  _:      pop bc
  162 D1:E046 E1 -  -  -      pop hl
  163 D1:E047 10 E4 -  -      djnz ----_
  164 D1:E049 3E 20 -  -      ld  a,' '
  165 D1:E04B CD 60 AF D1     call printBigFont
  166 D1:E04F CD 5B E1 D1     call dbg_printDisassembly
  167 D1:E053 -  -  -  -  
  168 D1:E053 -  -  -  -      ;
  169 D1:E053 -  -  -  -      ;Remove section below when done testing nestest for timings
  170 D1:E053 -  -  -  -      ;
  171 D1:E053 -  -  -  -  dbg_printLine_noPrint:
  172 D1:E053 11 00 00 00     ld  de,0
  173 D1:E057 2A 1F 34 D0     ld  hl,(timings_base)
  174 D1:E05B 5E -  -  -      ld  e,(hl)
  175 D1:E05C 23 -  -  -      inc hl
  176 D1:E05D 56 -  -  -      ld  d,(hl)
  177 D1:E05E 23 -  -  -      inc hl
  178 D1:E05F 22 1F 34 D0     ld  (timings_base),hl
  179 D1:E063 DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  180 D1:E066 B7 -  -  -      or  a,a
  181 D1:E067 ED 52 -  -      sbc hl,de
  182 D1:E069 28 17 -  -      jr  z,+_
  183 D1:E06B 21 FF FF FF     ld  hl,-1
  184 D1:E06F DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  185 D1:E072 CD 33 AF D1     call newLine
  186 D1:E076 21 06 E1 D1     ld  hl,dbg_printLine_timeMismatch
  187 D1:E07A CD 4A AF D1     call printString
  188 D1:E07E DD 36 14 01     ld  (ix+CORE_ERROR_LEVEL),1
  189 D1:E082 2A 1F 34 D0 _:  ld  hl,(timings_base)
  190 D1:E086 7E -  -  -      ld  a,(hl)
  191 D1:E087 23 -  -  -      inc hl
  192 D1:E088 22 1F 34 D0     ld  (timings_base),hl
  193 D1:E08C DD BE 04 -      cp  a,(ix+REGSR)
  194 D1:E08F 28 17 -  -      jr  z,+_
  195 D1:E091 21 FF FF FF     ld  hl,-1
  196 D1:E095 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  197 D1:E098 CD 33 AF D1     call newLine
  198 D1:E09C 21 20 E1 D1     ld  hl,dbg_printLine_statusRegisterMismatch
  199 D1:E0A0 CD 4A AF D1     call printString
  200 D1:E0A4 DD 36 14 02     ld  (ix+CORE_ERROR_LEVEL),2
  201 D1:E0A8 -  -  -  -  _:
  202 D1:E0A8 -  -  -  -      ;
  203 D1:E0A8 -  -  -  -      ;End debug-debug section
  204 D1:E0A8 -  -  -  -      ;
  205 D1:E0A8 CD 56 AE D1     call fastCopy
  206 D1:E0AC AF -  -  -      xor a,a     ;black
  207 D1:E0AD 32 77 AF D1     ld  (fontBGColor_var),a
  208 D1:E0B1 32 C4 AF D1     ld  (smallFontBGColor_var),a
  209 D1:E0B5 -  -  -  -  
  210 D1:E0B5 F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  211 D1:E0BD -  -  -  -      ;push hl \ push bc \ push de \ push ix \ push iy \ push af
  212 D1:E0BD C9 -  -  -      ret
  213 D1:E0BE -  -  -  -  
  214 D1:E0BE -  -  -  -  
  215 D1:E0BE -  -  -  -      ;also remove this when done timing debugging
  216 D1:E0BE 11 00 00 00     ld  de,0
  217 D1:E0C2 2A 1F 34 D0     ld  hl,(timings_base)
  218 D1:E0C6 5E -  -  -      ld  e,(hl)
  219 D1:E0C7 23 -  -  -      inc hl
  220 D1:E0C8 56 -  -  -      ld  d,(hl)
  221 D1:E0C9 23 -  -  -      inc hl
  222 D1:E0CA 22 1F 34 D0     ld  (timings_base),hl
  223 D1:E0CE DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  224 D1:E0D1 B7 -  -  -      or  a,a
  225 D1:E0D2 ED 52 -  -      sbc hl,de
  226 D1:E0D4 28 13 -  -      jr  z,+_
  227 D1:E0D6 21 FF FF FF     ld  hl,-1
  228 D1:E0DA DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  229 D1:E0DD CD 33 AF D1     call newLine
  230 D1:E0E1 21 06 E1 D1     ld  hl,dbg_printLine_timeMismatch
  231 D1:E0E5 CD 4A AF D1     call printString
  232 D1:E0E9 -  -  -  -  _:  ;
  233 D1:E0E9 -  -  -  -      ;End debug-debug section
  234 D1:E0E9 -  -  -  -      ;
  235 D1:E0E9 CD 56 AE D1     call fastCopy
  236 D1:E0ED AF -  -  -      xor a,a     ;black
  237 D1:E0EE 32 77 AF D1     ld  (fontBGColor_var),a
  238 D1:E0F2 32 C4 AF D1     ld  (smallFontBGColor_var),a
  239 D1:E0F6 F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  240 D1:E0FE C9 -  -  -      ret
  241 D1:E0FF -  -  -  -  
  242 D1:E0FF -  -  -  -  dbg_printLine_str001:
  243 D1:E0FF 41 58 59 53 
              50 20 00 -  .db "AXYSP ",0
  244 D1:E106 -  -  -  -  dbg_printLine_timeMismatch:
  245 D1:E106 43 50 55 20 
              54 65 73 74 
              20 74 69 6D 
              69 6E 67 20 
              6D 69 73 6D 
              61 74 63 68 
              2E 00 -  -  .db "CPU Test timing mismatch.",0
  246 D1:E120 -  -  -  -  dbg_printLine_statusRegisterMismatch:
  247 D1:E120 -  -  -  -  ;    0123456789012345678901234567890123456789
  248 D1:E120 43 50 55 20 
              54 65 73 74 
              20 73 74 61 
              74 75 73 20 
              72 65 67 69 
              73 74 65 72 
              20 6D 69 73 
              6D 61 74 63 
              68 2E 00 -  .db "CPU Test status register mismatch.",0
  249 D1:E143 -  -  -  -  
  250 D1:E143 -  -  -  -  
  251 D1:E143 -  -  -  -  
  252 D1:E143 -  -  -  -  
  253 D1:E143 -  -  -  -  
  254 D1:E143 -  -  -  -  
  255 D1:E143 -  -  -  -  ;A=instruction. Returns: A=size
  256 D1:E143 -  -  -  -  dbg_getInstSize:
  257 D1:E143 E5 D5 -  -      push hl \ push de
  258 D1:E145 57 -  -  -          ld  d,a
  259 D1:E146 1E 04 -  -          ld  e,4
  260 D1:E148 ED 5C -  -          mlt de
  261 D1:E14A 21 FF DA D1         ld  hl,inst6502_disassembly_table+3
  262 D1:E14E 19 -  -  -          add hl,de
  263 D1:E14F 16 00 -  -          ld  d,0
  264 D1:E151 5E -  -  -          ld  e,(hl)
  265 D1:E152 21 C1 DA D1         ld  hl,inst6502_opcode_width_table
  266 D1:E156 19 -  -  -          add hl,de
  267 D1:E157 7E -  -  -          ld  a,(hl)
  268 D1:E158 D1 E1 -  -      pop de \ pop hl
  269 D1:E15A C9 -  -  -      ret
  270 D1:E15B -  -  -  -  
  271 D1:E15B -  -  -  -  dbg_printDisassembly:
  272 D1:E15B F5 C5 D5 E5 
              DD E5 -  -      push af \ push bc \ push de \ push hl \ push ix
  273 D1:E161 -  -  -  -      ;find entry in disassembly table
  274 D1:E161 2A F9 31 D0     ld  hl,(operbuf)
  275 D1:E165 26 04 -  -      ld  H,4
  276 D1:E167 ED 6C -  -      mlt hl
  277 D1:E169 11 FC DA D1     ld  de,inst6502_disassembly_table
  278 D1:E16D 19 -  -  -      add hl,de
  279 D1:E16E 06 03 -  -      ld  b,3
  280 D1:E170 7E -  -  -  _:  ld  a,(hl)
  281 D1:E171 23 -  -  -      inc hl
  282 D1:E172 CD F8 E1 D1     call dbg_printC
  283 D1:E176 10 F8 -  -      djnz -_
  284 D1:E178 3E 20 -  -      ld  a,' '
  285 D1:E17A CD F8 E1 D1     call dbg_printC
  286 D1:E17E 46 -  -  -      ld  b,(hl)
  287 D1:E17F 04 -  -  -      inc b
  288 D1:E180 -  -  -  -      ;Instruction addressing mode in B. Now find text for that address mode.
  289 D1:E180 21 CF DA D1     ld  hl,inst6502_disassembler
  290 D1:E184 11 00 00 00     ld  de,0
  291 D1:E188 5E -  -  -  _:  ld  e,(hl)
  292 D1:E189 19 -  -  -      add hl,de
  293 D1:E18A 10 FC -  -      djnz -_
  294 D1:E18C 1D -  -  -      dec e
  295 D1:E18D 28 29 -  -      jr  z,dbg_printDisassembly_end  ;stop if text is zero-sized
  296 D1:E18F ED 52 -  -      sbc hl,de   ;rewind to start of text part of instruction. E is text length.
  297 D1:E191 43 -  -  -      ld  b,e
  298 D1:E192 -  -  -  -  dbg_printDisassembly_printOperandLoop:
  299 D1:E192 7E -  -  -      ld  a,(hl)
  300 D1:E193 23 -  -  -      inc hl
  301 D1:E194 FE 31 -  -      cp  a,'1'
  302 D1:E196 20 06 -  -      jr  nz,+_
  303 D1:E198 CD DC E1 D1     call dbg_printOperand1
  304 D1:E19C 18 18 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  305 D1:E19E FE 32 -  -  _:  cp  a,'2'
  306 D1:E1A0 20 06 -  -      jr  nz,+_
  307 D1:E1A2 CD D4 E1 D1     call dbg_printOperand2
  308 D1:E1A6 18 0E -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  309 D1:E1A8 FE 2D -  -  _:  cp  a,'-'
  310 D1:E1AA 20 06 -  -      jr  nz,+_
  311 D1:E1AC CD BF E1 D1     call dbg_printRel1
  312 D1:E1B0 18 04 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  313 D1:E1B2 CD F8 E1 D1 _:  call dbg_printC
  314 D1:E1B6 -  -  -  -  dbg_PrintDisassembly_printOperandFallthrough:
  315 D1:E1B6 10 DA -  -      djnz dbg_printDisassembly_printOperandLoop
  316 D1:E1B8 -  -  -  -  dbg_printDisassembly_end:
  317 D1:E1B8 DD E1 E1 D1 
              C1 F1 -  -      pop ix \ pop hl \ pop de \ pop bc \ pop af
  318 D1:E1BE C9 -  -  -      ret
  319 D1:E1BF -  -  -  -  
  320 D1:E1BF -  -  -  -  dbg_printRel1:
  321 D1:E1BF 3A FA 31 D0     ld  a,(operbuf+1)
  322 D1:E1C3 B7 -  -  -      or  a,a
  323 D1:E1C4 F2 D2 E1 D1     jp  p,dbg_printRel1_skipNeg
  324 D1:E1C8 F5 -  -  -      push af
  325 D1:E1C9 3E 2D -  -          ld   a,'-'
  326 D1:E1CB CD F8 E1 D1         call dbg_printC
  327 D1:E1CF F1 -  -  -      pop af
  328 D1:E1D0 ED 44 -  -      neg
  329 D1:E1D2 -  -  -  -  dbg_printRel1_skipNeg:
  330 D1:E1D2 18 0C -  -      jr dbg_printHex
  331 D1:E1D4 -  -  -  -  
  332 D1:E1D4 -  -  -  -  dbg_printOperand2:
  333 D1:E1D4 3A FB 31 D0     ld  a,(operbuf+2)
  334 D1:E1D8 CD E0 E1 D1     call dbg_printHex
  335 D1:E1DC -  -  -  -  dbg_printOperand1:
  336 D1:E1DC 3A FA 31 D0     ld  a,(operbuf+1)
  337 D1:E1E0 -  -  -  -  dbg_printHex:
  338 D1:E1E0 CD E5 E1 D1     call dispAHex
  339 D1:E1E4 C9 -  -  -      ret
  340 D1:E1E5 -  -  -  -  
  341 D1:E1E5 -  -  -  -  dispAHex:
  342 D1:E1E5 F5 -  -  -      push af
  343 D1:E1E6 CD ED E1 D1         call +_
  344 D1:E1EA F1 -  -  -      pop af
  345 D1:E1EB 18 04 -  -      jr  ++_
  346 D1:E1ED 1F -  -  -  _:  rra
  347 D1:E1EE 1F -  -  -      rra
  348 D1:E1EF 1F -  -  -      rra
  349 D1:E1F0 1F -  -  -      rra
  350 D1:E1F1 F6 F0 -  -  _:  or  a,$F0
  351 D1:E1F3 27 -  -  -      daa
  352 D1:E1F4 C6 A0 -  -      add a,$A0
  353 D1:E1F6 CE 40 -  -      adc a,$40
  354 D1:E1F8 -  -  -  -  dbg_printC:
  355 D1:E1F8 E5 -  -  -      push hl
  356 D1:E1F9 C5 -  -  -          push bc
  357 D1:E1FA CD 60 AF D1             call dbg_printChr
  358 D1:E1FE C1 -  -  -          pop bc
  359 D1:E1FF E1 -  -  -      pop hl
  360 D1:E200 C9 -  -  -      ret
Listing for file "main.z80"
  668 D1:E201 -  -  -  -  .echo "Main program size: ",$-programStart
