    1 00:0000 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "main.z80"
    2 00:0000 -  -  -  -  .org userMem-2
    3 D1:A87F EF 7B -  -  .db $EF, $7B
    4 D1:A881 -  -  -  -  
    5 D1:A881 -  -  -  -  ;SPASM help msg
    6 D1:A881 -  -  -  -  ;-E = Assemble eZ80 code
    7 D1:A881 -  -  -  -  ;-T = Generate code listing
    8 D1:A881 -  -  -  -  ;-C = Code counter mode
    9 D1:A881 -  -  -  -  ;-L = Symbol table mode
   10 D1:A881 -  -  -  -  ;-S = Stats mode
   11 D1:A881 -  -  -  -  ;-O = Don't write to output file
   12 D1:A881 -  -  -  -  ;-I [directory] = Add include directory
   13 D1:A881 -  -  -  -  ;-A = Labels are cAse-sensitive
   14 D1:A881 -  -  -  -  ;-D<name>[=value] = Create a define 'name' [with 'value']
   15 D1:A881 -  -  -  -  ;-N = Don't use colors for messages
   16 D1:A881 -  -  -  -  ;-V <Expression> = Pipe expression directly into assembly
   17 D1:A881 -  -  -  -  ;-H = Print this help message
   18 D1:A881 -  -  -  -  
   19 D1:A881 -  -  -  -  
   20 D1:A881 -  -  -  -  
   21 D1:A881 -  -  -  -  
   22 D1:A881 -  -  -  -  programStart:
   23 D1:A881 F3 -  -  -      di
   24 D1:A882 DD 21 00 00 
              F0 -  -  -      ld  ix,$F00000
   25 D1:A887 DD CB 2C C6     set 0,(ix+$2C)      ;Enable ON latch
   26 D1:A88B DD 36 28 01     ld  (ix+$28),1      ;If latch was set, clear it.
   27 D1:A88F -  -  -  -  
   28 D1:A88F -  -  -  -      ;Continuous. Else it'd be possible for an NES ROM to tank the CPU
   29 D1:A88F -  -  -  -      ;performance by constantly polling the keyboard.
   30 D1:A88F 21 00 00 F5     ld  hl,mpKeyMode
   31 D1:A893 36 03 -  -      ld  (hl),3      
   32 D1:A895 ED 73 FC 31 
              D0 -  -  -      ld  (save_spl),sp
   33 D1:A89A ED 6E -  -      ld  a,MB
   34 D1:A89C 32 FF 31 D0     ld  (save_mbase),a
   35 D1:A8A0 3E D0 -  -      ld  a,$D0
   36 D1:A8A2 ED 6D -  -      ld  MB,a
   37 D1:A8A4 CD C9 B0 D1     call startGfx
   38 D1:A8A8 -  -  -  -      ;
   39 D1:A8A8 -  -  -  -      ; todo; write test 6502 program, map it into rom.
   40 D1:A8A8 -  -  -  -      ; map virtual screen device into ram too. 32x30 screen ascii display
   41 D1:A8A8 -  -  -  -      ; is probably looking nice right about now.
   42 D1:A8A8 -  -  -  -      ; Could probably map it into PPU space since we're not actually doing
   43 D1:A8A8 -  -  -  -      ; anything about that until long after we're done testing core integrity
   44 D1:A8A8 -  -  -  -      ; You'll probably want to create a mockup vector table then do some equate
   45 D1:A8A8 -  -  -  -      ; magic to offset it and map it to $FFXX such that the three vectors will
   46 D1:A8A8 -  -  -  -      ; magically line up with $FFFA-$FFFF. NMI, RES, and IRQ. In that order.
   47 D1:A8A8 -  -  -  -      ; The rest of the page won't need to matter. It could literally be the
   48 D1:A8A8 -  -  -  -      ; surrounding eZ80 data/code. Just... don't allow writes to it.
   49 D1:A8A8 -  -  -  -      ;
   50 D1:A8A8 -  -  -  -  
   51 D1:A8A8 21 00 00 D4     ld  hl,screenBuf1
   52 D1:A8AC 11 01 00 D4     ld  de,screenBuf1+1
   53 D1:A8B0 01 FF 57 02     ld  bc,(2*240*320)-1
   54 D1:A8B4 36 00 -  -      ld  (hl),$00
   55 D1:A8B6 ED B0 -  -      ldir
   56 D1:A8B8 -  -  -  -  
   57 D1:A8B8 -  -  -  -      ;Makes sure all non-ROM areas have a mapping
   58 D1:A8B8 21 00 33 D0     ld  hl,scrap_mapping
   59 D1:A8BC 01 01 80 00     ld  bc,$008001
   60 D1:A8C0 1E 00 -  -      ld  e,0
   61 D1:A8C2 CD 7A B7 D1     call i6502_map_pages
   62 D1:A8C6 -  -  -  -  
   63 D1:A8C6 -  -  -  -  
   64 D1:A8C6 -  -  -  -  
   65 D1:A8C6 -  -  -  -      ;load reset vectors
   66 D1:A8C6 21 D6 A8 D1     ld  hl,testVectors
   67 D1:A8CA 01 01 01 00     ld  bc,$000101
   68 D1:A8CE 1E FF -  -      ld  e,$FF
   69 D1:A8D0 CD 7A B7 D1     call i6502_map_pages
   70 D1:A8D4 -  -  -  -      ;load program ROM to lowmem
   71 D1:A8D4 21 D6 A9 D1     ld  hl,testCode
   72 D1:A8D8 01 08 20 00     ld  bc,$002008
   73 D1:A8DC 1E 80 -  -      ld  e,$80
   74 D1:A8DE CD 7A B7 D1     call i6502_map_pages
   75 D1:A8E2 -  -  -  -      ;map nametable to writeable address space. Write routine to mirror this
   76 D1:A8E2 -  -  -  -      ;memory to screen.
   77 D1:A8E2 21 00 58 D0     ld  hl,NAMETABLE1
   78 D1:A8E6 01 04 20 00     ld  bc,$002004
   79 D1:A8EA 1E 40 -  -      ld  e,$40
   80 D1:A8EC CD 7A B7 D1     call i6502_map_pages
   81 D1:A8F0 -  -  -  -      ;Default mappings have been mapped. Let's search for and load a ROM file
   82 D1:A8F0 -  -  -  -      ;to acquire additional mappings. And maybe load in something that'll run.
   83 D1:A8F0 CD 1C B1 D1     call clearTextBuf
   84 D1:A8F4 3E 01 -  -      ld  a,1
   85 D1:A8F6 CD 69 B1 D1     call setLineStart
   86 D1:A8FA CD 72 B1 D1     call setCurLine
   87 D1:A8FE 21 2F AA D1     ld  hl,text001
   88 D1:A902 CD 94 B1 D1     call printString
   89 D1:A906 FD 21 9D AA 
              D1 -  -  -      ld  iy,firstFileHeader
   90 D1:A90B 01 00 00 00     ld  bc,0
   91 D1:A90F FD 4E FF -      ld  c,(iy-1)
   92 D1:A912 CD 17 B0 D1     call vatTraverse
   93 D1:A916 DA BA AA D1     jp  c,err_noContainersFound
   94 D1:A91A D5 -  -  -      push de
   95 D1:A91B 21 46 AA D1         ld  hl,text003
   96 D1:A91F CD 94 B1 D1         call printString
   97 D1:A923 DD 46 FA -          ld  b,(ix-6)
   98 D1:A926 ED 22 F9 -          lea hl,ix-7
   99 D1:A929 7E -  -  -  _:      ld  a,(hl)
  100 D1:A92A 2B -  -  -          dec hl
  101 D1:A92B E5 -  -  -          push hl
  102 D1:A92C C5 -  -  -              push bc
  103 D1:A92D CD AA B1 D1                 call PrintBigFont
  104 D1:A931 C1 -  -  -              pop bc
  105 D1:A932 E1 -  -  -          pop hl
  106 D1:A933 10 F4 -  -          djnz -_
  107 D1:A935 CD 7D B1 D1         call newLine
  108 D1:A939 D1 -  -  -      pop de
  109 D1:A93A CD 14 AC D1     call loadROMFile
  110 D1:A93E -  -  -  -  
  111 D1:A93E 21 53 AA D1     ld  hl,text004
  112 D1:A942 CD 94 B1 D1     call printString
  113 D1:A946 -  -  -  -  
  114 D1:A946 -  -  -  -      ;load perf timers
  115 D1:A946 -  -  -  -  
  116 D1:A946 DD 21 00 00 
              F2 -  -  -      ld  ix,$F20000
  117 D1:A94B DD 27 30 -      ld  hl,(ix+$30)
  118 D1:A94E CB 85 -  -      res 0,L ;turn off timer 0
  119 D1:A950 CB CD -  -      set 1,L ;timer 0 uses 32KHz clock
  120 D1:A952 CB 95 -  -      res 2,L ;disables timer 0 interrupt generator
  121 D1:A954 CB CC -  -      set 1,H ;timer 0 counts upward
  122 D1:A956 DD 2F 30 -      ld  (ix+$30),hl
  123 D1:A959 -  -  -  -      
  124 D1:A959 AF -  -  -      xor a,a
  125 D1:A95A ED 62 -  -      sbc hl,hl
  126 D1:A95C DD 2F 00 -      ld  (ix+0),hl
  127 D1:A95F DD 77 03 -      ld  (ix+3),a
  128 D1:A962 -  -  -  -  
  129 D1:A962 -  -  -  -      ;Initialize all (additional) state machines,
  130 D1:A962 -  -  -  -      ;then initialize/start the emulation core
  131 D1:A962 -  -  -  -  
  132 D1:A962 CD AF B5 D1     call int6502_init
  133 D1:A966 CD A0 E5 D1     call ppu_init
  134 D1:A96A CD 74 B6 D1     call i6502Init
  135 D1:A96E -  -  -  -  
  136 D1:A96E -  -  -  -      ;Performance timer disable and read.
  137 D1:A96E -  -  -  -  
  138 D1:A96E DD 21 00 00 
              F2 -  -  -      ld  ix,$F20000
  139 D1:A973 DD 7E 30 -      ld  a,(ix+$30)
  140 D1:A976 CB 87 -  -      res 0,a ;turn off timer 0
  141 D1:A978 CB CF -  -      set 1,a ;timer 0 uses 32768Hz clock
  142 D1:A97A CB 97 -  -      res 2,a ;disables timer 0 interrupt generator
  143 D1:A97C DD 77 30 -      ld  (ix+$30),a
  144 D1:A97F -  -  -  -      ;
  145 D1:A97F 2A 00 00 F2     ld  hl,($F20000)
  146 D1:A983 -  -  -  -  
  147 D1:A983 -  -  -  -  endCurrentRun:
  148 D1:A983 DD 21 00 00 
              F0 -  -  -      ld  ix,$F00000
  149 D1:A988 DD 36 28 01     ld  (ix+$28),1      ;If latch was set, clear it.
  150 D1:A98C DD 7E 20 -      ld  a,(ix+$20)      ;Check state of latch.
  151 D1:A98F E6 01 -  -      and a,%0000001
  152 D1:A991 C2 83 A9 D1     jp  nz,endCurrentRun    ;wait until ON key is released.
  153 D1:A995 DD 21 00 00 
              F0 -  -  -      ld  ix,$F00000
  154 D1:A99A DD CB 2C 86     res 0,(ix+$2C)      ;Disable ON latch
  155 D1:A99E -  -  -  -  
  156 D1:A99E -  -  -  -  
  157 D1:A99E CD 30 E2 D1     call dbg_prepNextLine
  158 D1:A9A2 CD 7D B1 D1     call newLine
  159 D1:A9A6 21 75 AA D1     ld  hl,text005
  160 D1:A9AA CD 94 B1 D1     call printString
  161 D1:A9AE -  -  -  -  
  162 D1:A9AE -  -  -  -      ;call printTextBuf
  163 D1:A9AE CD A0 B0 D1     call fastCopy
  164 D1:A9B2 00 -  -  -      nop
  165 D1:A9B3 CD 94 B0 D1     call waituntilnewkeypress
  166 D1:A9B7 CD 8C B0 D1     call waituntilkeyrelease
  167 D1:A9BB -  -  -  -  
  168 D1:A9BB -  -  -  -      ;
  169 D1:A9BB -  -  -  -      ;
  170 D1:A9BB -  -  -  -      ;
  171 D1:A9BB -  -  -  -  programExit:
  172 D1:A9BB CD BB B0 D1     call stopGfx
  173 D1:A9BF ED 7B FC 31 
              D0 -  -  -      ld  sp,(save_spl)
  174 D1:A9C4 3A FF 31 D0     ld  a,(save_mbase)
  175 D1:A9C8 ED 6D -  -      ld  MB,a
  176 D1:A9CA FD 21 80 00 
              D0 -  -  -      ld  iy,flags
  177 D1:A9CF C9 -  -  -      ret
  178 D1:A9D0 -  -  -  -  
  179 D1:A9D0 -  -  -  -  ;NMI, RES, and IRQ. In that order.
  180 D1:A9D0 -  -  -  -  testVectors .equ $-(256-6)
  181 D1:A9D0 00 80 -  -  .dw $8000
  182 D1:A9D2 00 80 -  -  .dw $8000
  183 D1:A9D4 00 80 -  -  .dw $8000
  184 D1:A9D6 -  -  -  -  testCode:
  185 D1:A9D6 A9 00 AA A8 .db $A9,$00,$AA,$A8
  186 D1:A9DA BD 14 80 -  .db $BD,$14,$80
  187 D1:A9DD C9 00 -  -  .db $C9,$00
  188 D1:A9DF F0 08 -  -  .db $F0,$08
  189 D1:A9E1 99 21 40 -  .db $99,$21,$40
  190 D1:A9E4 E8 C8 -  -  .db $E8,$C8
  191 D1:A9E6 -  -  -  -  ;.db $12
  192 D1:A9E6 4C 04 80 02 .db $4C,$04,$80,$02
  193 D1:A9EA 48 65 6C 6C 
              6F 2C 20 57 
              6F -  -  -  .db $48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F
  194 D1:A9F3 72 6C 64 21 
              00 -  -  -  .db $72,$6C,$64,$21,$00
  195 D1:A9F8 -  -  -  -  
  196 D1:A9F8 -  -  -  -  
  197 D1:A9F8 A9 00 AA A8 
              BD 11 80 C9 
              00 F0 05 99 
              21 40 D0 -  .db $A9,$00,$AA,$A8,$BD,$11,$80,$C9,$00,$F0,$05,$99,$21,$40,$D0
  198 D1:AA07 F4 02 48 65 
              6C 6C 6F 2C 
              20 57 6F 72 
              6C 64 21 00 .db $F4,$02,$48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F,$72,$6C,$64,$21,$00
  199 D1:AA17 02 -  -  -  .db $02     ;JAM. Emulator terminates on unsupported instructions or JAMs.
  200 D1:AA18 -  -  -  -  
  201 D1:AA18 -  -  -  -  helloWorld:
  202 D1:AA18 48 65 6C 6C 
              6F 2C 20 57 
              6F 72 6C 64 
              21 00 -  -  .db "Hello, World!",0
  203 D1:AA26 -  -  -  -  
  204 D1:AA26 -  -  -  -  timings_file:
  205 D1:AA26 15 74 69 6D 
              69 6E 67 73 
              00 -  -  -  .db AppVarObj,"timings",0
  206 D1:AA2F -  -  -  -  
  207 D1:AA2F -  -  -  -  text001:
  208 D1:AA2F 4C 6F 6F 6B 
              69 6E 67 20 
              75 70 20 6E 
              65 73 74 65 
              73 74 2E 2E 
              2E 0A 00 -  .db "Looking up nestest...\n",0
  209 D1:AA46 -  -  -  -  text003:
  210 D1:AA46 46 69 6C 65 
              20 66 6F 75 
              6E 64 3A 20 
              00 -  -  -  .db "File found: ",0
  211 D1:AA53 -  -  -  -  text004:
  212 D1:AA53 52 4F 4D 46 
              69 6C 65 20 
              6C 6F 61 64 
              65 64 20 61 
              6E 64 20 72 
              65 61 64 79 
              20 74 6F 20 
              72 75 6E 2E 
              0A 00 -  -  .db "ROMFile loaded and ready to run.\n",0
  213 D1:AA75 -  -  -  -  text005:
  214 D1:AA75 -  -  -  -  ;    0123456789012345678901234567890123456789
  215 D1:AA75 43 50 55 20 
              45 78 65 63 
              75 74 69 6F 
              6E 20 48 61 
              6C 74 65 64 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 20 20 
              20 20 00 -  .db "CPU Execution Halted                  ",0
  216 D1:AA9C -  -  -  -  text006:
  217 D1:AA9C -  -  -  -  
  218 D1:AA9C -  -  -  -  
  219 D1:AA9C 07 -  -  -  .db 7
  220 D1:AA9D -  -  -  -  firstFileHeader:
  221 D1:AA9D 43 45 4E 52 
              4F 4D 00 -  .db "CENROM",0
  222 D1:AAA4 -  -  -  -  
  223 D1:AAA4 -  -  -  -  err_:
  224 D1:AAA4 -  -  -  -  
  225 D1:AAA4 -  -  -  -  err_err:
  226 D1:AAA4 E1 -  -  -      pop hl
  227 D1:AAA5 CD 94 B1 D1     call printString
  228 D1:AAA9 -  -  -  -  err_err_quit:
  229 D1:AAA9 CD A0 B0 D1     call fastCopy
  230 D1:AAAD 00 -  -  -      nop
  231 D1:AAAE CD 94 B0 D1     call waituntilnewkeypress
  232 D1:AAB2 CD 8C B0 D1     call waituntilkeyrelease
  233 D1:AAB6 C3 BB A9 D1     jp programExit
  234 D1:AABA -  -  -  -  
  235 D1:AABA -  -  -  -  err_noContainersFound:
  236 D1:AABA CD A4 AA D1     call err_err
  237 D1:AABE -  -  -  -      ;0123456789012345678901234567890123456789
  238 D1:AABE 54 72 61 76 
              65 72 73 65 
              20 66 6F 75 
              6E 64 20 6E 
              6F 20 63 61 
              6E 64 69 64 
              61 74 65 20 
              52 4F 4D 53 
              2E 0A 00 -  .db "Traverse found no candidate ROMS.\n",0
  239 D1:AAE1 -  -  -  -  
  240 D1:AAE1 -  -  -  -  err_missingFiles:
  241 D1:AAE1 F5 -  -  -      push af
  242 D1:AAE2 21 F3 AA D1         ld  hl,err_missingFiles_str
  243 D1:AAE6 CD 94 B1 D1         call printString
  244 D1:AAEA F1 -  -  -      pop af
  245 D1:AAEB CD DA B1 D1     call printSmallNumPair
  246 D1:AAEF C3 A9 AA D1     jp err_err_quit
  247 D1:AAF3 -  -  -  -  err_missingFiles_str:
  248 D1:AAF3 4E 75 6D 62 
              65 72 20 6F 
              66 20 66 69 
              6C 65 73 20 
              6D 69 73 73 
              69 6E 67 3A 
              20 00 -  -  .db "Number of files missing: ",0
  249 D1:AB0D -  -  -  -  
  250 D1:AB0D -  -  -  -  err_tooManyFiles:
  251 D1:AB0D CD A4 AA D1     call err_err
  252 D1:AB11 -  -  -  -      ;0123456789012345678901234567890123456789
  253 D1:AB11 4D 61 78 20 
              66 69 6C 65 
              20 63 6F 75 
              6E 74 20 70 
              65 72 20 52 
              4F 4D 20 69 
              6D 61 67 65 
              20 65 78 63 
              65 65 64 65 
              64 2E 00 -  .db "Max file count per ROM image exceeded.",0
  254 D1:AB38 -  -  -  -  
  255 D1:AB38 -  -  -  -  err_PRGROMTooLarge:
  256 D1:AB38 CD A4 AA D1     call err_err
  257 D1:AB3C 4D 61 78 69 
              6D 75 6D 20 
              73 75 70 70 
              6F 72 74 65 
              64 20 50 52 
              47 5F 52 4F 
              4D 20 65 78 
              63 65 65 64 
              65 64 2E 00 .db "Maximum supported PRG_ROM exceeded.",0
  258 D1:AB60 -  -  -  -  err_CHRROMTooLarge:
  259 D1:AB60 CD A4 AA D1     call err_err
  260 D1:AB64 4D 61 78 69 
              6D 75 6D 20 
              73 75 70 70 
              6F 72 74 65 
              64 20 43 48 
              52 5F 52 4F 
              4D 20 65 78 
              63 65 65 64 
              65 64 2E 00 .db "Maximum supported CHR_ROM exceeded.",0
  261 D1:AB88 -  -  -  -  
  262 D1:AB88 -  -  -  -  err_missingROMDetected:
  263 D1:AB88 CD A4 AA D1     call err_err
  264 D1:AB8C 46 69 6C 65 
              20 74 6F 6F 
              20 73 6D 61 
              6C 6C 20 74 
              6F 20 68 6F 
              6C 64 20 64 
              65 63 6C 61 
              72 65 64 20 
              50 52 47 2B 
              43 48 52 00 .db "File too small to hold declared PRG+CHR",0
  265 D1:ABB4 -  -  -  -  
  266 D1:ABB4 -  -  -  -  err_ROMHeaderDamaged:
  267 D1:ABB4 CD A4 AA D1     call err_err
  268 D1:ABB8 69 4E 45 53 
              20 52 4F 4D 
              20 68 65 61 
              64 65 72 20 
              64 61 6D 61 
              67 65 64 2E 
              00 -  -  -  .db "iNES ROM header damaged.",0
  269 D1:ABD1 -  -  -  -  
  270 D1:ABD1 -  -  -  -  err_MapperOutOfRange:
  271 D1:ABD1 CD A4 AA D1     call err_err
  272 D1:ABD5 55 6E 73 75 
              70 70 6F 72 
              74 65 64 20 
              6D 61 70 70 
              65 72 20 64 
              65 74 65 63 
              74 65 64 2E 
              00 -  -  -  .db "Unsupported mapper detected.",0
  273 D1:ABF2 -  -  -  -  
  274 D1:ABF2 -  -  -  -  err_CHRROMNotFound:
  275 D1:ABF2 CD A4 AA D1     call err_err
  276 D1:ABF6 43 48 52 5F 
              52 4F 4D 20 
              6E 6F 74 20 
              66 6F 75 6E 
              64 20 69 6E 
              73 69 64 65 
              20 66 69 6C 
              65 00 -  -  .db "CHR_ROM not found inside file",0
  277 D1:AC14 -  -  -  -  
  278 D1:AC14 -  -  -  -  
  279 D1:AC14 -  -  -  -  ;Input: DE = Address of first file after the container header signature
  280 D1:AC14 -  -  -  -  ;Outputs: ROM vectors recorded and ready to map
  281 D1:AC14 -  -  -  -  ;Destroys: All registers.
  282 D1:AC14 -  -  -  -  loadROMFile:
  283 D1:AC14 EB -  -  -      ex  de,hl
  284 D1:AC15 AF -  -  -      xor a,a
  285 D1:AC16 32 33 34 D0     ld  (missing_files),a
  286 D1:AC1A BE -  -  -  _:  cp  (hl)    ;
  287 D1:AC1B 23 -  -  -      inc hl      ;
  288 D1:AC1C 20 FC -  -      jr  nz,-_   ;skips past zero-terminated string containing full ROM name
  289 D1:AC1E 22 30 34 D0     ld  (basefile_sig),hl
  290 D1:AC22 01 10 00 00     ld  bc,SIZEOF_INTEGRITY_HASH
  291 D1:AC26 09 -  -  -      add hl,bc
  292 D1:AC27 7E -  -  -      ld  a,(hl)
  293 D1:AC28 FE 01 -  -      cp  a,MAXNUMFILES
  294 D1:AC2A D2 0D AB D1     jp  nc,err_tooManyFiles
  295 D1:AC2E 32 2F 34 D0     ld  (inputNumFiles),a
  296 D1:AC32 47 -  -  -      ld  b,a
  297 D1:AC33 -  -  -  -  ;    ld  c,SIZEOF_INTEGRITY_HASH     ;c already set to this value from earlier.
  298 D1:AC33 ED 4C -  -      mlt bc
  299 D1:AC35 23 -  -  -      inc hl
  300 D1:AC36 E5 -  -  -      push hl
  301 D1:AC37 09 -  -  -          add hl,bc
  302 D1:AC38 FD 21 50 34 
              D0 -  -  -          ld  iy,FILETABLE
  303 D1:AC3D 4E -  -  -          ld  c,(hl)
  304 D1:AC3E 23 -  -  -          inc hl
  305 D1:AC3F 46 -  -  -          ld  b,(hl)
  306 D1:AC40 23 -  -  -          inc hl
  307 D1:AC41 52 FD 0F 00         ld.s (iy+FILE_SIZE_OFFSET),bc
  308 D1:AC45 FD 2F 02 -          ld  (iy+FILE_ADR_OFFSET),hl
  309 D1:AC48 E1 -  -  -      pop hl
  310 D1:AC49 3C -  -  -      inc a
  311 D1:AC4A 3D -  -  -      dec a
  312 D1:AC4B 28 47 -  -      jr  z,loadROMFile_singleFileLoad
  313 D1:AC4D -  -  -  -      ;If more than one file, fill FILETABLE.
  314 D1:AC4D -  -  -  -      ;NOTE: For now, this machinery is disabled. Only a single file is allowed.
  315 D1:AC4D ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  316 D1:AC50 47 -  -  -      ld  b,a
  317 D1:AC51 -  -  -  -  loadROMFile_multiFileLoadLoop:
  318 D1:AC51 C5 -  -  -      push bc
  319 D1:AC52 FD 2F 05 -          ld  (iy+FILE_SIG_ADR_OFFSET),hl
  320 D1:AC55 01 10 00 00         ld  bc,16
  321 D1:AC59 11 07 B0 D1         ld  de,loadROMFile_tempSigHash
  322 D1:AC5D ED B0 -  -          ldir
  323 D1:AC5F E5 -  -  -          push hl
  324 D1:AC60 FD E5 -  -              push iy
  325 D1:AC62 01 17 00 00                 ld  bc,23
  326 D1:AC66 FD 21 00 B0 
              D1 -  -  -                  ld  iy,loadROMFile_tempSig
  327 D1:AC6B CD 17 B0 D1                 call vatTraverse    ;returns DE @ datasection size if found
  328 D1:AC6F 30 05 -  -                  jr  nc,+_
  329 D1:AC71 21 33 34 D0                 ld  hl,missing_files
  330 D1:AC75 34 -  -  -                  inc (hl)
  331 D1:AC76 FD E1 -  -  _:          pop iy
  332 D1:AC78 EB -  -  -              ex  de,hl
  333 D1:AC79 5E -  -  -              ld  e,(hl)
  334 D1:AC7A 23 -  -  -              inc hl
  335 D1:AC7B 56 -  -  -              ld  d,(hl)
  336 D1:AC7C 23 -  -  -              inc hl
  337 D1:AC7D 52 FD 1F 00             ld.s (iy+FILE_SIZE_OFFSET),de
  338 D1:AC81 FD 2F 02 -              ld  (iy+FILE_ADR_OFFSET),hl
  339 D1:AC84 E1 -  -  -          pop hl
  340 D1:AC85 C1 -  -  -      pop bc
  341 D1:AC86 ED 33 08 -      lea iy,iy+FILETABLE_STRIDE
  342 D1:AC89 10 C6 -  -      djnz loadROMFile_multiFileLoadLoop
  343 D1:AC8B 3A 33 34 D0     ld  a,(missing_files)
  344 D1:AC8F B7 -  -  -      or  a,a
  345 D1:AC90 C2 E1 AA D1     jp  nz,err_missingFiles
  346 D1:AC94 -  -  -  -  loadROMFile_singleFileLoad:
  347 D1:AC94 -  -  -  -      ;Compute size of ROM by summing filesizes, less INES header
  348 D1:AC94 3A 2F 34 D0     ld  a,(inputNumFiles)
  349 D1:AC98 3C -  -  -      inc a
  350 D1:AC99 47 -  -  -      ld  b,a
  351 D1:AC9A 21 00 00 00     ld  hl,0
  352 D1:AC9E DD 21 50 34 
              D0 -  -  -      ld  ix,FILETABLE
  353 D1:ACA3 52 DD 17 00 _:  ld.s de,(ix+FILE_SIZE_OFFSET)
  354 D1:ACA7 19 -  -  -      add hl,de
  355 D1:ACA8 ED 32 08 -      lea ix,ix+FILETABLE_STRIDE
  356 D1:ACAB 10 F6 -  -      djnz -_
  357 D1:ACAD 01 F0 FF FF     ld  bc,-16
  358 D1:ACB1 09 -  -  -      add hl,bc   ;subtract INES header
  359 D1:ACB2 22 34 34 D0     ld  (total_rom_size),hl
  360 D1:ACB6 -  -  -  -      ;Verify that the file actually contains an INES header.
  361 D1:ACB6 -  -  -  -      ;TODO: Do this at an earlier stage. Such as file selection.
  362 D1:ACB6 DD 2A 52 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  363 D1:ACBB DD 27 00 -      ld  hl,(ix+0)
  364 D1:ACBE 11 4E 45 53     ld  de,$53454E         ;4E 45 53 == "NES"
  365 D1:ACC2 B7 -  -  -      or  a,a
  366 D1:ACC3 ED 52 -  -      sbc hl,de   ;Note: add does not affect zero flag. Can't test this via -DE
  367 D1:ACC5 C2 B4 AB D1 _:  jp  nz,err_ROMHeaderDamaged
  368 D1:ACC9 DD 7E 03 -      ld  a,(ix+3)
  369 D1:ACCC FE 1A -  -      cp  a,$1A
  370 D1:ACCE 20 F5 -  -      jr  nz,-_   ;19
  371 D1:ACD0 -  -  -  -      ;Compute ROM size by reading INES header. This should be equ or lt above.
  372 D1:ACD0 -  -  -  -      ;Note: The below line is optimized from...
  373 D1:ACD0 DD 2A 52 34 
              D0 -  -  -      ld  ix,(FILETABLE+FILE_ADR_OFFSET)
  374 D1:ACD5 -  -  -  -      ;... these lines. But the intent might not be perfectly clear. We'll keep
  375 D1:ACD5 -  -  -  -      ;these here just in case there's ever a question about it.
  376 D1:ACD5 -  -  -  -  ;    ld  ix,FILETABLE
  377 D1:ACD5 -  -  -  -  ;    ld  ix,(ix+FILE_ADR_OFFSET)
  378 D1:ACD5 DD 6E 04 -      ld  L,(ix+4)    ;PRG ROM count, low
  379 D1:ACD8 DD 5E 05 -      ld  e,(ix+5)    ;CHR ROM count, low
  380 D1:ACDB 26 00 -  -      ld  h,0
  381 D1:ACDD 54 -  -  -      ld  d,h
  382 D1:ACDE DD 7E 07 -      ld  a,(ix+7)    ;Check for INES2 bits
  383 D1:ACE1 E6 0C -  -      and a,%00001100
  384 D1:ACE3 FE 08 -  -      cp  a,%00001000
  385 D1:ACE5 20 1B -  -      jr  nz,+_
  386 D1:ACE7 DD 7E 09 -      ld  a,(ix+9)
  387 D1:ACEA 47 -  -  -      ld  b,a
  388 D1:ACEB E6 0F -  -      and a,$0F
  389 D1:ACED FE 02 -  -      cp  a,MAXPRGROM_HINIB+1
  390 D1:ACEF D2 38 AB D1     jp  nc,err_PRGROMTooLarge
  391 D1:ACF3 67 -  -  -      ld  h,a
  392 D1:ACF4 78 -  -  -      ld  a,b
  393 D1:ACF5 E6 F0 -  -      and a,$F0
  394 D1:ACF7 07 -  -  -      rlca
  395 D1:ACF8 07 -  -  -      rlca
  396 D1:ACF9 07 -  -  -      rlca
  397 D1:ACFA 07 -  -  -      rlca
  398 D1:ACFB FE 04 -  -      cp  a,MAXCHRROM_HINIB+1
  399 D1:ACFD D2 60 AB D1     jp  nc,err_CHRROMTooLarge
  400 D1:AD01 57 -  -  -      ld  d,a
  401 D1:AD02 AF -  -  -  _:  xor a,a
  402 D1:AD03 32 37 34 D0     ld  (prg_rom_size),a
  403 D1:AD07 32 3A 34 D0     ld  (chr_rom_size),a
  404 D1:AD0B 29 -  -  -      add hl,hl   ;x2
  405 D1:AD0C 29 -  -  -      add hl,hl   ;x4
  406 D1:AD0D 29 -  -  -      add hl,hl   ;x8
  407 D1:AD0E 29 -  -  -      add hl,hl   ;x16
  408 D1:AD0F 29 -  -  -      add hl,hl   ;x32
  409 D1:AD10 29 -  -  -      add hl,hl   ;x64
  410 D1:AD11 52 22 38 34 
              D0 -  -  -      ld.s (prg_rom_size+1),hl    ;x64x256
  411 D1:AD16 EB -  -  -      ex  de,hl
  412 D1:AD17 29 -  -  -      add hl,hl   ;x2
  413 D1:AD18 29 -  -  -      add hl,hl   ;x4
  414 D1:AD19 29 -  -  -      add hl,hl   ;x8
  415 D1:AD1A 29 -  -  -      add hl,hl   ;x16
  416 D1:AD1B 29 -  -  -      add hl,hl   ;x32
  417 D1:AD1C 52 22 3B 34 
              D0 -  -  -      ld.s (chr_rom_size+1),hl    ;x32x256
  418 D1:AD21 2A 3A 34 D0     ld  hl,(chr_rom_size)
  419 D1:AD25 ED 5B 37 34 
              D0 -  -  -      ld  de,(prg_rom_size)
  420 D1:AD2A 19 -  -  -      add hl,de
  421 D1:AD2B ED 5B 34 34 
              D0 -  -  -      ld  de,(total_rom_size)
  422 D1:AD30 B7 -  -  -      or  a,a
  423 D1:AD31 ED 52 -  -      sbc hl,de   ;declared-actual. declared must be equal to or smaller.
  424 D1:AD33 28 04 -  -      jr  z,+_
  425 D1:AD35 D2 88 AB D1     jp  nc,err_missingROMDetected
  426 D1:AD39 -  -  -  -  _:  ;Find trainer, PRG, and CHR base addresses
  427 D1:AD39 ED 22 10 -      lea hl,ix+16
  428 D1:AD3C 22 43 34 D0     ld  (trainer_base),hl   ;whether it exists or not.
  429 D1:AD40 11 00 00 00     ld  de,0
  430 D1:AD44 DD CB 06 56     bit 2,(ix+6)
  431 D1:AD48 28 04 -  -      jr  z,+_
  432 D1:AD4A 11 00 02 00     ld  de,512
  433 D1:AD4E 19 -  -  -  _:  add hl,de
  434 D1:AD4F 22 43 34 D0     ld  (prg_rom_base),hl
  435 D1:AD53 FD 21 50 34 
              D0 -  -  -      ld  iy,FILETABLE
  436 D1:AD58 52 FD 27 00     ld.s hl,(iy+FILE_SIZE_OFFSET)
  437 D1:AD5C B7 -  -  -      or  a,a
  438 D1:AD5D ED 52 -  -      sbc hl,de   ;less possible trainer
  439 D1:AD5F 11 10 00 00     ld  de,16
  440 D1:AD63 ED 52 -  -      sbc hl,de   ;less iNES header. Remaining is now size of current file.
  441 D1:AD65 EB -  -  -      ex  de,hl   ;curfilesize is now in DE
  442 D1:AD66 2A 37 34 D0     ld  hl,(prg_rom_size)   ;keep subtracting filesize from this until carry.
  443 D1:AD6A B7 -  -  -      or  a,a
  444 D1:AD6B ED 52 -  -      sbc hl,de   ;if carry, prg_rom end is inside this file. Undo: HL is offset.
  445 D1:AD6D 0E 00 -  -      ld  c,0     ;0th file current
  446 D1:AD6F 38 1D -  -      jr  c,loadROMFile_locatedCHRROM
  447 D1:AD71 3A 2F 34 D0     ld  a,(inputNumFiles)
  448 D1:AD75 B7 -  -  -      or  a,a
  449 D1:AD76 28 12 -  -      jr  z,loadROMFile_noCHRROMFound
  450 D1:AD78 47 -  -  -      ld  b,a
  451 D1:AD79 ED 33 08 -  _:  lea iy,iy+FILETABLE_STRIDE
  452 D1:AD7C 52 ED 5B 00 
              00 00 -  -      ld.s de,(FILE_SIZE_OFFSET)
  453 D1:AD82 0C -  -  -      inc c
  454 D1:AD83 B7 -  -  -      or  a,a
  455 D1:AD84 ED 52 -  -      sbc hl,de   ;
  456 D1:AD86 38 06 -  -      jr  c,loadROMFile_locatedCHRROM
  457 D1:AD88 10 EF -  -      djnz -_
  458 D1:AD8A -  -  -  -  loadROMFile_noCHRROMFound:
  459 D1:AD8A C3 F2 AB D1     jp  err_CHRROMNotFound
  460 D1:AD8E -  -  -  -  loadROMFile_locatedCHRROM:
  461 D1:AD8E 19 -  -  -      add hl,de       ;Undid subtract. HL is now offset in current file
  462 D1:AD8F FD 17 02 -      ld  de,(iy+FILE_ADR_OFFSET) ;so get address inside that file.
  463 D1:AD92 19 -  -  -      add hl,de
  464 D1:AD93 79 -  -  -      ld  a,c
  465 D1:AD94 22 46 34 D0     ld  (chr_rom_base),hl
  466 D1:AD98 32 49 34 D0     ld  (chr_rom_base_file),a
  467 D1:AD9C -  -  -  -      ;Detect mapper and run its initializer
  468 D1:AD9C DD 7E 06 -      ld  a,(ix+6)
  469 D1:AD9F DD 46 07 -      ld  b,(ix+7)
  470 D1:ADA2 07 -  -  -      rlca
  471 D1:ADA3 07 -  -  -      rlca
  472 D1:ADA4 07 -  -  -      rlca
  473 D1:ADA5 07 -  -  -      rlca
  474 D1:ADA6 A8 -  -  -      xor a,b
  475 D1:ADA7 E6 0F -  -      and a,$0F
  476 D1:ADA9 A8 -  -  -      xor a,b
  477 D1:ADAA 52 EB -  -      ex.s de,hl  ;clears HLU,DEU
  478 D1:ADAC 5F -  -  -      ld  e,a
  479 D1:ADAD 21 3D 34 D0     ld  hl,submapper
  480 D1:ADB1 36 00 -  -      ld  (hl),0
  481 D1:ADB3 78 -  -  -      ld  a,b
  482 D1:ADB4 E6 0C -  -      and a,%00001100
  483 D1:ADB6 FE 08 -  -      cp  a,%00001000
  484 D1:ADB8 3E 00 -  -      ld  a,0
  485 D1:ADBA 20 0E -  -      jr  nz,+_
  486 D1:ADBC DD 46 08 -      ld  b,(ix+8)
  487 D1:ADBF 78 -  -  -      ld  a,b
  488 D1:ADC0 07 -  -  -      rlca
  489 D1:ADC1 07 -  -  -      rlca
  490 D1:ADC2 07 -  -  -      rlca
  491 D1:ADC3 07 -  -  -      rlca
  492 D1:ADC4 E6 0F -  -      and a,$0F
  493 D1:ADC6 77 -  -  -      ld  (hl),a
  494 D1:ADC7 78 -  -  -      ld  a,b
  495 D1:ADC8 E6 0F -  -      and a,$0F
  496 D1:ADCA 57 -  -  -  _:  ld  d,a
  497 D1:ADCB ED 53 3F 34 
              D0 -  -  -      ld  (mapper_id),de
  498 D1:ADD0 21 FF FF FF     ld  hl,-NUMBER_OF_MAPPERS
  499 D1:ADD4 19 -  -  -      add hl,de
  500 D1:ADD5 DA D1 AB D1     jp  c,err_MapperOutOfRange
  501 D1:ADD9 ED 62 -  -      sbc hl,hl
  502 D1:ADDB 19 -  -  -      add hl,de               ;hl=de. both are mapper IDs
  503 D1:ADDC 2E 09 -  -      ld  L,MAPPER_STRIDE
  504 D1:ADDE 55 -  -  -      ld  d,L
  505 D1:ADDF ED 6C -  -      mlt hl                  ;high byte multiply
  506 D1:ADE1 65 -  -  -      ld  h,L
  507 D1:ADE2 2E 00 -  -      ld  L,0
  508 D1:ADE4 ED 5C -  -      mlt de                  ;low byte multiply
  509 D1:ADE6 19 -  -  -      add hl,de               ;This is the best 16bit * 8bit I know to do.
  510 D1:ADE7 11 F3 AD D1     ld  de,mapper_table
  511 D1:ADEB 19 -  -  -      add hl,de
  512 D1:ADEC 22 40 34 D0     ld  (mapper_adr_base),hl
  513 D1:ADF0 ED 27 -  -      ld  hl,(hl)
  514 D1:ADF2 E9 -  -  -      jp  (hl)
  515 D1:ADF3 -  -  -  -  
  516 D1:ADF3 -  -  -  -  mapper_table:   ;entries 9 wide
  517 D1:ADF3 FC AD D1 -  .dl mapper0_init
  518 D1:ADF6 79 AE D1 -  .dl mapper0_read
  519 D1:ADF9 1B AF D1 -  .dl mapper0_write
  520 D1:ADFC -  -  -  -  
  521 D1:ADFC -  -  -  -  mapper0_init:
  522 D1:ADFC -  -  -  -      ;map trainer, if exist
  523 D1:ADFC DD CB 06 56     bit 2,(ix+6)
  524 D1:AE00 28 0D -  -      jr  z,+_
  525 D1:AE02 2A 43 34 D0     ld  hl,(trainer_base)
  526 D1:AE06 1E 70 -  -      ld  e,$70
  527 D1:AE08 0E 02 -  -      ld  c,2
  528 D1:AE0A 41 -  -  -      ld  b,c
  529 D1:AE0B CD 7A B7 D1     call i6502_map_pages
  530 D1:AE0F 2A 37 34 D0 _:  ld  hl,(prg_rom_size)
  531 D1:AE13 11 FF BF FF     ld  de,-(16384+1)
  532 D1:AE17 19 -  -  -      add hl,de   ;carry if more than 1 16KB segment
  533 D1:AE18 2A 43 34 D0     ld  hl,(prg_rom_base)
  534 D1:AE1C -  -  -  -      ;jr  $
  535 D1:AE1C 06 80 -  -      ld  b,$80
  536 D1:AE1E 58 -  -  -      ld  e,b
  537 D1:AE1F 0E 40 -  -      ld  c,$40
  538 D1:AE21 30 02 -  -      jr  nc,+_
  539 D1:AE23 CB 21 -  -      sla c
  540 D1:AE25 CD 7A B7 D1 _:  call i6502_map_pages
  541 D1:AE29 -  -  -  -      ;map in nametable mirroring
  542 D1:AE29 21 00 58 D0     ld  hl,NAMETABLE1
  543 D1:AE2D 11 00 5C D0     ld  de,NAMETABLE2
  544 D1:AE31 22 00 34 D0     ld  (nametable00),hl
  545 D1:AE35 ED 53 0C 34 
              D0 -  -  -      ld  (nametable11),de
  546 D1:AE3A DD CB 06 46     bit 0,(ix+6)    ;nametable arrangement. Mapper 0 has no alternates.
  547 D1:AE3E 28 01 -  -      jr  z,+_
  548 D1:AE40 EB -  -  -      ex  de,hl
  549 D1:AE41 22 04 34 D0 _:  ld  (nametable01),hl
  550 D1:AE45 ED 53 08 34 
              D0 -  -  -      ld  (nametable10),de
  551 D1:AE4A -  -  -  -      ;Fill out nametable attrib pointers
  552 D1:AE4A 21 00 34 D0     ld  hl,nametable00
  553 D1:AE4E 01 C0 03 00     ld  bc,960
  554 D1:AE52 3E 04 -  -      ld  a,4
  555 D1:AE54 ED 17 -  -  _:  ld  de,(hl)
  556 D1:AE56 CB E5 -  -      set 4,L
  557 D1:AE58 EB -  -  -      ex  de,hl
  558 D1:AE59 09 -  -  -      add hl,bc
  559 D1:AE5A EB -  -  -      ex  de,hl
  560 D1:AE5B ED 1F -  -      ld  (hl),de
  561 D1:AE5D CB A5 -  -      res 4,L
  562 D1:AE5F 23 -  -  -      inc hl
  563 D1:AE60 23 -  -  -      inc hl
  564 D1:AE61 23 -  -  -      inc hl
  565 D1:AE62 23 -  -  -      inc hl
  566 D1:AE63 3D -  -  -      dec a
  567 D1:AE64 20 EE -  -      jr  nz,-_
  568 D1:AE66 -  -  -  -      ;initilize chr_rom current bank address.
  569 D1:AE66 -  -  -  -      ;This mapper does not allow any additional banks, but if it does, this
  570 D1:AE66 -  -  -  -      ;value must be recalculated from chr_rom_base
  571 D1:AE66 2A 46 34 D0     ld  hl,(chr_rom_base)
  572 D1:AE6A 22 2C 34 D0     ld  (chr_rom_curbank),hl
  573 D1:AE6E 21 8E AF D1     ld  hl,mapper0_ppu_write
  574 D1:AE72 22 4A 34 D0     ld  (ppu_smc_gate),hl
  575 D1:AE76 36 C9 -  -      ld  (hl),$C9    ;ret. Will write nop here during first NMI handle
  576 D1:AE78 C9 -  -  -      ret
  577 D1:AE79 -  -  -  -  
  578 D1:AE79 -  -  -  -  
  579 D1:AE79 -  -  -  -  mapper0_read:
  580 D1:AE79 7A -  -  -      ld  a,d
  581 D1:AE7A 87 -  -  -      add a,a
  582 D1:AE7B 30 08 -  -      jr  nc,+_
  583 D1:AE7D 7E -  -  -      ld  a,(hl)  ;is $8000 or above
  584 D1:AE7E C9 -  -  -      ret
  585 D1:AE7F FE 40 -  -      cp  a,$20*2
  586 D1:AE81 38 02 -  -      jr  c,+_
  587 D1:AE83 7E -  -  -      ld  a,(hl)  ;is below $2000
  588 D1:AE84 C9 -  -  -      ret
  589 D1:AE85 87 -  -  -  _:  add a,a
  590 D1:AE86 30 12 -  -      jr  nc,mapper0_ppu_read     ;wasn't $4000 or higher.
  591 D1:AE88 28 02 -  -      jr  z,mapper0_apu_read      ;high byte was exactly $40
  592 D1:AE8A 7E -  -  -      ld  a,(hl)
  593 D1:AE8B C9 -  -  -      ret
  594 D1:AE8C -  -  -  -  mapper0_apu_read:
  595 D1:AE8C 79 -  -  -      ld  a,c
  596 D1:AE8D FE 16 -  -      cp  a,$16
  597 D1:AE8F 20 07 -  -      jr  nz,+_
  598 D1:AE91 AF -  -  -      xor a,a
  599 D1:AE92 DD CB FE 3E     srl (ix+APU_KEYPAD)
  600 D1:AE96 8F -  -  -      adc a,a                 ;TODO: Open bus behavior on bits 5-7
  601 D1:AE97 C9 -  -  -      ret
  602 D1:AE98 7E -  -  -  _:  ld  a,(hl)  ;hope that the dummy map page is good enough to not crash.
  603 D1:AE99 C9 -  -  -      ret
  604 D1:AE9A -  -  -  -  mapper0_ppu_read:
  605 D1:AE9A 79 -  -  -      ld  a,c
  606 D1:AE9B E6 07 -  -      and a,%00000111
  607 D1:AE9D FE 07 -  -      cp  a,$07
  608 D1:AE9F 28 17 -  -      jr  z,mapper0_ppu_read_ppudata
  609 D1:AEA1 FE 04 -  -      cp  a,$04
  610 D1:AEA3 28 6D -  -      jr  z,mapper0_ppu_read_oamdata
  611 D1:AEA5 FE 02 -  -      cp  a,$02   ;gotta break this out since reading ppustatus does other stuff
  612 D1:AEA7 28 08 -  -      jr  z,mapper0_ppu_read_ppustatus
  613 D1:AEA9 -  -  -  -      ;We should ignore reads from write-only registers but i'm sure nothing
  614 D1:AEA9 -  -  -  -      ;will come of allowing it.
  615 D1:AEA9 ED 22 E0 -  _:  lea hl,ix+PPU_CTRL
  616 D1:AEAC 7D -  -  -      ld  a,l
  617 D1:AEAD 81 -  -  -      add a,c
  618 D1:AEAE 6F -  -  -      ld  l,a
  619 D1:AEAF 7E -  -  -      ld  a,(hl)  
  620 D1:AEB0 C9 -  -  -      ret
  621 D1:AEB1 -  -  -  -  mapper0_ppu_read_ppustatus:
  622 D1:AEB1 -  -  -  -      ;reading ppustatus does additional things.
  623 D1:AEB1 3E 55 -  -      ld  a,WREG_CONST
  624 D1:AEB3 DD 77 F4 -      ld  (ix+PPU_W),a
  625 D1:AEB6 18 F1 -  -      jr -_
  626 D1:AEB8 -  -  -  -  mapper0_ppu_read_ppudata:
  627 D1:AEB8 DD 7E F3 -      ld  a,(ix+PPU_V+1)
  628 D1:AEBB 4F -  -  -      ld  c,a
  629 D1:AEBC E6 3F -  -      and a,%00111111
  630 D1:AEBE FE 20 -  -      cp  a,$20
  631 D1:AEC0 30 0F -  -      jr  nc,+_   ;skip reading from CHR_ROM
  632 D1:AEC2 D5 -  -  -      push de
  633 D1:AEC3 52 EB -  -          ex.s de,hl  ;clears DEU
  634 D1:AEC5 2A 2C 34 D0         ld  hl,(chr_rom_curbank)
  635 D1:AEC9 57 -  -  -          ld  d,a
  636 D1:AECA DD 5E F2 -          ld  e,(ix+PPU_V+0)
  637 D1:AECD 19 -  -  -          add hl,de
  638 D1:AECE D1 -  -  -      pop de
  639 D1:AECF 7E -  -  -      ld  a,(hl)
  640 D1:AED0 C9 -  -  -      ret
  641 D1:AED1 FE 3F -  -  _:  cp  a,$3F
  642 D1:AED3 20 0C -  -      jr  nz,+_
  643 D1:AED5 DD 7E F2 -      ld  a,(ix+PPU_V+0)
  644 D1:AED8 E6 3F -  -      and a,%00111111
  645 D1:AEDA 21 00 32 D0     ld  hl,vram_palette
  646 D1:AEDE 6F -  -  -      ld  L,a
  647 D1:AEDF 7E -  -  -      ld  a,(hl)
  648 D1:AEE0 C9 -  -  -      ret
  649 D1:AEE1 E6 0C -  -  _:  and a,%00001100     ;%00ZZTTaa Z:00,01=CHR,02=NT,03=PAL; T:WhichNT; a:adrHI
  650 D1:AEE3 21 00 34 D0     ld  hl,nametable00
  651 D1:AEE7 6F -  -  -      ld  L,a             ;bits already in position to index the table
  652 D1:AEE8 ED 27 -  -      ld  hl,(hl)
  653 D1:AEEA DD 6E F2 -      ld  L,(ix+PPU_V+0)
  654 D1:AEED DD 7E F3 -      ld  a,(ix+PPU_V+1)
  655 D1:AEF0 AC -  -  -      xor a,h     ;
  656 D1:AEF1 E6 03 -  -      and a,%00000011 ;keep low bits of address in A. H keep is location-specific.
  657 D1:AEF3 AC -  -  -      xor a,h
  658 D1:AEF4 67 -  -  -      ld  h,a
  659 D1:AEF5 DD CB E0 56     bit 2,(ix+PPU_CTRL) ;VRAM cursor direction
  660 D1:AEF9 3E 01 -  -      ld  a,1
  661 D1:AEFB 28 02 -  -      jr  z,+_
  662 D1:AEFD C6 1F -  -      add a,31
  663 D1:AEFF DD 86 F2 -  _:  add a,(ix+PPU_V)
  664 D1:AF02 DD 77 F2 -      ld  (ix+PPU_V),a
  665 D1:AF05 30 03 -  -      jr  nc,+_
  666 D1:AF07 DD 34 F3 -      inc (ix+PPU_V+1)
  667 D1:AF0A DD 7E E7 -  _:  ld  a,(ix+PPU_DATA) ;following dance simulates delayed buffer read
  668 D1:AF0D 46 -  -  -      ld  b,(hl)
  669 D1:AF0E DD 70 E7 -      ld  (ix+PPU_DATA),b
  670 D1:AF11 C9 -  -  -      ret
  671 D1:AF12 -  -  -  -  mapper0_ppu_read_oamdata:
  672 D1:AF12 -  -  -  -      ;this needs to be more complex than this. But I'm not. I won't.
  673 D1:AF12 -  -  -  -      ;Not now. Not going to play Micro Machines. I don't wanna.
  674 D1:AF12 21 00 60 D0     ld  hl,OBJECT_ATTRIB_MEM
  675 D1:AF16 DD 6E E3 -      ld  L,(ix+PPU_OAMADDR)
  676 D1:AF19 7E -  -  -      ld  a,(hl)
  677 D1:AF1A C9 -  -  -      ret
  678 D1:AF1B -  -  -  -  
  679 D1:AF1B -  -  -  -  
  680 D1:AF1B -  -  -  -  mapper0_write:
  681 D1:AF1B 7A -  -  -      ld  a,d
  682 D1:AF1C FE 20 -  -      cp  a,$20
  683 D1:AF1E 30 02 -  -      jr  nc,+_
  684 D1:AF20 70 -  -  -      ld  (hl),b
  685 D1:AF21 C9 -  -  -      ret
  686 D1:AF22 FE 40 -  -  _:  cp  a,$40
  687 D1:AF24 38 68 -  -      jr  c,mapper0_ppu_write
  688 D1:AF26 28 04 -  -      jr  z,mapper0_apu_write
  689 D1:AF28 87 -  -  -      add a,a
  690 D1:AF29 D8 -  -  -      ret c       ;don't write anything to above $8000
  691 D1:AF2A 70 -  -  -      ld  (hl),b  ;but allow it in $4100-$7FFF because it might be RAM.
  692 D1:AF2B C9 -  -  -      ret
  693 D1:AF2C -  -  -  -  mapper0_apu_write:
  694 D1:AF2C 79 -  -  -      ld  a,c
  695 D1:AF2D FE 16 -  -      cp  a,$16
  696 D1:AF2F 20 3B -  -      jr  nz,+_
  697 D1:AF31 DD 7E FF -      ld  a,(ix+APU_KEYLATCH)
  698 D1:AF34 A8 -  -  -      xor a,b     ;Bit 0 is set if we're trying to change controller poll state.
  699 D1:AF35 0F -  -  -      rrca        ;And this is how we're going to get it.
  700 D1:AF36 D0 -  -  -      ret nc      ;Only support NES standard controller.
  701 D1:AF37 CB 40 -  -      bit 0,b     ;So... what are we changing it to?
  702 D1:AF39 DD 70 FF -      ld  (ix+APU_KEYLATCH),b
  703 D1:AF3C 21 00 00 F5     ld  hl,mpKeyMode
  704 D1:AF40 28 06 -  -      jr  z,mapper0_apu_stop_keyboard
  705 D1:AF42 7E -  -  -      ld  a,(hl)
  706 D1:AF43 FE 03 -  -      cp  a,3
  707 D1:AF45 C8 -  -  -      ret z       ;don't do anything to the keyboard if running continuous.
  708 D1:AF46 77 -  -  -      ld  (hl),a  ;else set to continuous and keep going.
  709 D1:AF47 C9 -  -  -      ret
  710 D1:AF48 -  -  -  -  mapper0_apu_stop_keyboard:
  711 D1:AF48 2E 12 -  -      ld  L,$12   ;76543210 : del mode 2nd y= wind zoom trace graph
  712 D1:AF4A 7E -  -  -      ld  a,(hl)
  713 D1:AF4B 2E 1E -  -      ld  L,$1E   ;----3210 : up right left down
  714 D1:AF4D 4E -  -  -      ld  c,(hl)
  715 D1:AF4E A9 -  -  -      xor a,c
  716 D1:AF4F E6 F0 -  -      and a,%11110000
  717 D1:AF51 A9 -  -  -      xor a,c     ;keymapping has changed. We need to further alter it.
  718 D1:AF52 -  -  -  -      ;[DE MO 2N Y= UP RI LE DO] maps to [SE, B, A, ST, UP, RI, LE, DO]
  719 D1:AF52 -  -  -  -      ;The above must be rearranged to become:
  720 D1:AF52 -  -  -  -      ;            [RI, LE, DO, UP, ST, SE, B , A ]
  721 D1:AF52 -  -  -  -      ;as compared to
  722 D1:AF52 -  -  -  -      ;            [SE, B , A , ST, UP, RI, LE, DO]
  723 D1:AF52 07 -  -  -      rlca        ;[B , A , ST, UP, RI, LE, DO, SE]
  724 D1:AF53 4F -  -  -      ld  c,a     ;b4  : UP is in correct position.
  725 D1:AF54 07 -  -  -      rlca        ;[A , ST, UP, RI, LE, DO, SE, B ]
  726 D1:AF55 07 -  -  -      rlca        ;[ST, UP, RI, LE, DO, SE, B , A ]
  727 D1:AF56 47 -  -  -      ld  b,a     ;b0-2:SE, B , and A are in the correct position
  728 D1:AF57 07 -  -  -      rlca        ;[UP, RI, LE, DO, SE, B , A , ST]
  729 D1:AF58 07 -  -  -      rlca        ;[RI, LE, DO, SE, B , A , ST, UP]
  730 D1:AF59 57 -  -  -      ld  d,a     ;b5-7: RI LE DO in correct position.
  731 D1:AF5A 07 -  -  -      rlca        ;[LE, DO, SE, B , A , ST, UP, RI]
  732 D1:AF5B 07 -  -  -      rlca        ;b3: ST is in the correct position.
  733 D1:AF5C A9 -  -  -      xor a,c     ;
  734 D1:AF5D E6 08 -  -      and a,%00001000 ;keep A3, merge others
  735 D1:AF5F A9 -  -  -      xor a,c     ;Has: A3. Merge-in contains b4
  736 D1:AF60 A8 -  -  -      xor a,b     ;
  737 D1:AF61 E6 18 -  -      and a,%00011000 ;keep A3-4
  738 D1:AF63 A8 -  -  -      xor a,b     ;Merge-in contains b0-2
  739 D1:AF64 AA -  -  -      xor a,d     ;
  740 D1:AF65 E6 1F -  -      and a,%00011111 ;keep A0-4
  741 D1:AF67 AA -  -  -      xor a,d     ;Merge-in contains b5-7. Is complete.
  742 D1:AF68 DD 77 FE -      ld  (ix+APU_KEYPAD),a
  743 D1:AF6B C9 -  -  -      ret
  744 D1:AF6C FE 14 -  -  _:  cp  a,$14   ;OAM DMA
  745 D1:AF6E 20 1C -  -      jr  nz,+_
  746 D1:AF70 C5 -  -  -      push bc
  747 D1:AF71 D5 -  -  -          push de
  748 D1:AF72 11 01 02 00             ld  de,513  ;or 514. Not going to emulate put/get cycles
  749 D1:AF76 FD 19 -  -              add iy,de
  750 D1:AF78 0E 0C -  -              ld  c,BASETABLE_STRIDE
  751 D1:AF7A 21 00 40 D0             ld  hl,PAGETABLE
  752 D1:AF7E 09 -  -  -              add hl,bc
  753 D1:AF7F 11 00 60 D0             ld  de,OBJECT_ATTRIB_MEM
  754 D1:AF83 01 00 01 00             ld  bc,256
  755 D1:AF87 ED B0 -  -              ldir
  756 D1:AF89 D1 -  -  -          pop de
  757 D1:AF8A C1 -  -  -      pop bc
  758 D1:AF8B C9 -  -  -      ret
  759 D1:AF8C 70 -  -  -  _:  ld  (hl),b
  760 D1:AF8D C9 -  -  -      ret
  761 D1:AF8E -  -  -  -  mapper0_ppu_write:
  762 D1:AF8E C9 -  -  -      ret
  763 D1:AF8F -  -  -  -      ;TODO: gate off access outside VBlank
  764 D1:AF8F -  -  -  -      ;TODO: Replace cp/jr chain with DJNZ chain for more optimal branching.
  765 D1:AF8F 79 -  -  -      ld  a,c
  766 D1:AF90 E6 07 -  -      and a,%00000111
  767 D1:AF92 -  -  -  -  ;    cp  a,$01  ;Once midframe is supported, uncomment this.
  768 D1:AF92 -  -  -  -  ;    jr  z,mapper0_ppu_write_ppumask
  769 D1:AF92 FE 02 -  -      cp  a,$02
  770 D1:AF94 C8 -  -  -      ret z   ;read-only register. do not write to it.
  771 D1:AF95 FE 04 -  -      cp  a,$04
  772 D1:AF97 28 08 -  -      jr  z,mapper0_ppu_write_oamdata
  773 D1:AF99 FE 06 -  -      cp a,$06
  774 D1:AF9B 28 0D -  -      jr  z,mapper0_ppu_write_ppuaddr
  775 D1:AF9D FE 07 -  -      cp  a,$07
  776 D1:AF9F 28 17 -  -      jr  z,mapper0_ppu_write_ppudata
  777 D1:AFA1 -  -  -  -  ;    cp  a,$05  ;Once midframe is supported, uncomment this.
  778 D1:AFA1 -  -  -  -  ;    jr  z,mapper0_ppu_write_ppuscroll
  779 D1:AFA1 -  -  -  -  
  780 D1:AFA1 -  -  -  -  
  781 D1:AFA1 -  -  -  -  mapper0_ppu_write_oamdata:
  782 D1:AFA1 -  -  -  -      ;Doesn't check anything. So sad.
  783 D1:AFA1 21 00 60 D0     ld  hl,OBJECT_ATTRIB_MEM
  784 D1:AFA5 DD 6E E3 -      ld  L,(ix+PPU_OAMADDR)
  785 D1:AFA8 70 -  -  -      ld  (hl),b
  786 D1:AFA9 C9 -  -  -      ret
  787 D1:AFAA -  -  -  -  mapper0_ppu_write_ppuaddr:
  788 D1:AFAA DD CB F4 0E     rrc (ix+PPU_W)
  789 D1:AFAE 38 04 -  -      jr  c,+_
  790 D1:AFB0 DD 70 F2 -      ld  (ix+PPU_V+0),b
  791 D1:AFB3 C9 -  -  -      ret
  792 D1:AFB4 DD 70 F3 -  _:  ld  (ix+PPU_V+1),b
  793 D1:AFB7 C9 -  -  -      ret
  794 D1:AFB8 -  -  -  -  
  795 D1:AFB8 -  -  -  -  mapper0_ppu_write_ppudata:
  796 D1:AFB8 DD 7E F3 -      ld  a,(ix+PPU_V+1)
  797 D1:AFBB 4F -  -  -      ld  c,a
  798 D1:AFBC E6 3F -  -      and a,%00111111
  799 D1:AFBE FE 20 -  -      cp  a,$20
  800 D1:AFC0 D8 -  -  -      ret c   ;Mapper 0 does not allow writing to CHR_ROM
  801 D1:AFC1 FE 3F -  -      cp  a,$3F
  802 D1:AFC3 28 2B -  -      jr  z,+++_    ;write to palette table
  803 D1:AFC5 E6 0C -  -      and a,%00001100     ;%00ZZTTaa Z:00,01=CHR,02=NT,03=PAL; T:WhichNT; a:adrHI
  804 D1:AFC7 21 00 34 D0     ld  hl,nametable00
  805 D1:AFCB 6F -  -  -      ld  L,a             ;bits already in position to index the table
  806 D1:AFCC ED 27 -  -      ld  hl,(hl)
  807 D1:AFCE DD 6E F2 -      ld  L,(ix+PPU_V+0)
  808 D1:AFD1 DD 7E F3 -      ld  a,(ix+PPU_V+1)
  809 D1:AFD4 AC -  -  -      xor a,h     ;
  810 D1:AFD5 E6 03 -  -      and a,%00000011 ;keep low bits of address in A. H keep is location-specific.
  811 D1:AFD7 AC -  -  -      xor a,h
  812 D1:AFD8 67 -  -  -      ld  h,a
  813 D1:AFD9 70 -  -  -      ld  (hl),b
  814 D1:AFDA DD CB E0 56     bit 2,(ix+PPU_CTRL) ;VRAM cursor direction
  815 D1:AFDE 3E 01 -  -      ld  a,1
  816 D1:AFE0 28 02 -  -      jr  z,+_
  817 D1:AFE2 C6 1F -  -      add a,31
  818 D1:AFE4 DD 86 F2 -  _:  add a,(ix+PPU_V)
  819 D1:AFE7 DD 77 F2 -      ld  (ix+PPU_V),a
  820 D1:AFEA 30 03 -  -      jr  nc,+_
  821 D1:AFEC DD 34 F3 -      inc (ix+PPU_V+1)
  822 D1:AFEF C9 -  -  -  _:  ret
  823 D1:AFF0 21 00 32 D0 _:  ld  hl,vram_palette
  824 D1:AFF4 DD 7E F2 -      ld  a,(ix+PPU_V+0)
  825 D1:AFF7 E6 3F -  -      and a,%00111111
  826 D1:AFF9 6F -  -  -      ld  L,a
  827 D1:AFFA 70 -  -  -      ld  (hl),b
  828 D1:AFFB C9 -  -  -      ret
  829 D1:AFFC -  -  -  -  
  830 D1:AFFC -  -  -  -  mapper0_ppu_write_ppumask:
  831 D1:AFFC -  -  -  -      ;TODO: Allow queueing for midframe writes.
  832 D1:AFFC 70 -  -  -      ld  (hl),b
  833 D1:AFFD C9 -  -  -      ret
  834 D1:AFFE -  -  -  -  mapper0_ppu_write_ppuscroll:
  835 D1:AFFE -  -  -  -      ;TODO: Allow queueing for midframe writes. Often used in conjunction
  836 D1:AFFE -  -  -  -      ;with Sprite0 hits for status bar rendering.
  837 D1:AFFE 70 -  -  -      ld  (hl),b
  838 D1:AFFF C9 -  -  -      ret
  839 D1:B000 -  -  -  -  
  840 D1:B000 -  -  -  -  
  841 D1:B000 -  -  -  -  loadROMFile_tempSig:    ;total 23 bytes
  842 D1:B000 43 45 4E 52 
              4F 32 00 -  .db "CENRO2",0
  843 D1:B007 -  -  -  -  loadROMFile_tempSigHash:
  844 D1:B007 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;16 bytes for hash
  845 D1:B017 -  -  -  -  
  846 D1:B017 -  -  -  -  
  847 D1:B017 -  -  -  -  ;Input: IY = locationOfSignature. 
  848 D1:B017 -  -  -  -  ;       BC=size of signature (long load to clear BCU), still limited to 255.
  849 D1:B017 -  -  -  -  ;Output: carry=1: Variable not found.
  850 D1:B017 -  -  -  -  ;Output: carry=0: DE=address of variable data start after the signature
  851 D1:B017 -  -  -  -  ;        IX=location of current variable's VAT location.
  852 D1:B017 -  -  -  -  ;Destroys: All registers not in use.
  853 D1:B017 -  -  -  -  ;NOTES: This routine is capable of resuming a search that has ended.
  854 D1:B017 -  -  -  -  
  855 D1:B017 -  -  -  -  ;To continue searching:
  856 D1:B017 -  -  -  -  ;call vatTraverse_continue with the following inputs:
  857 D1:B017 -  -  -  -  ;   IX preserved from a non-carry return of vatTraverse.
  858 D1:B017 -  -  -  -  ;   BC = same as input for vatTraverse. vatTraverse does not destroy this reg.
  859 D1:B017 -  -  -  -  ;   WARNING: DO NOT KEEP SEARCHING AFTER CALL RETURNS CARRY. START A NEW SEARCH.
  860 D1:B017 -  -  -  -  vatTraverse:
  861 D1:B017 -  -  -  -      ;progPtr = progvat start; ptemp = progvatend
  862 D1:B017 DD 2A 9D 25 
              D0 -  -  -      ld  ix,(progPtr)
  863 D1:B01C -  -  -  -  vatTraverse_loop:
  864 D1:B01C 2A 9A 25 D0     ld  hl,(pTemp)
  865 D1:B020 ED 12 00 -      lea de,ix+0
  866 D1:B023 B7 -  -  -      or  a,a
  867 D1:B024 ED 52 -  -      sbc hl,de   ;HL<DE while in pVAT, else carry set.
  868 D1:B026 3F -  -  -      ccf
  869 D1:B027 D8 -  -  -      ret c
  870 D1:B028 1A -  -  -      ld  a,(de)
  871 D1:B029 E6 1F -  -      and a,$1F
  872 D1:B02B FE 15 -  -      cp  a,AppVarObj
  873 D1:B02D 20 34 -  -      jr  nz,vatTraverse_skip
  874 D1:B02F DD 17 F9 -      ld  de,(ix-7)   ;puts "page" byte in DEU
  875 D1:B032 DD 5E FD -      ld  e,(ix-3)
  876 D1:B035 DD 56 FC -      ld  d,(ix-4)
  877 D1:B038 CD 98 1F 02     call _ChkInRam
  878 D1:B03C EB -  -  -      ex  de,hl
  879 D1:B03D 30 08 -  -      jr  nc,+_
  880 D1:B03F 11 09 00 00     ld  de,9
  881 D1:B043 19 -  -  -      add hl,de
  882 D1:B044 5E -  -  -      ld  e,(hl)
  883 D1:B045 19 -  -  -      add hl,de
  884 D1:B046 23 -  -  -      inc hl
  885 D1:B047 5E -  -  -  _:  ld  e,(hl)
  886 D1:B048 23 -  -  -      inc hl
  887 D1:B049 56 -  -  -      ld  d,(hl)
  888 D1:B04A 23 -  -  -      inc hl
  889 D1:B04B EB -  -  -      ex  de,hl
  890 D1:B04C B7 -  -  -      or  a,a
  891 D1:B04D ED 42 -  -      sbc hl,bc   ;varsize-entrysize. If carry, entry cannot possibly be in var.
  892 D1:B04F 38 12 -  -      jr  c,vatTraverse_skip
  893 D1:B051 ED 23 00 -      lea hl,iy+0
  894 D1:B054 C5 -  -  -      push bc
  895 D1:B055 1A -  -  -  _:      ld  a,(de)
  896 D1:B056 13 -  -  -          inc de
  897 D1:B057 ED A1 -  -          cpi
  898 D1:B059 20 07 -  -          jr  nz,vatTraverse_sigNoMatch
  899 D1:B05B EA 55 B0 D1         jp  pe,-_
  900 D1:B05F C1 -  -  -      pop bc
  901 D1:B060 B7 -  -  -      or  a,a
  902 D1:B061 C9 -  -  -      ret         ;NC. DE = past the signature.
  903 D1:B062 -  -  -  -  vatTraverse_sigNoMatch:
  904 D1:B062 C1 -  -  -      pop bc
  905 D1:B063 -  -  -  -  vatTraverse_continue:
  906 D1:B063 -  -  -  -  vatTraverse_skip:
  907 D1:B063 3E 07 -  -      ld  a,7
  908 D1:B065 11 FF FF FF     ld  de,-1
  909 D1:B069 DD 86 FA -      add a,(ix-6)
  910 D1:B06C ED 44 -  -      neg
  911 D1:B06E 5F -  -  -      ld  e,a
  912 D1:B06F DD 19 -  -      add ix,de   ;because "sbc ix,de" isn't a thing. Boo.
  913 D1:B071 18 A9 -  -      jr  vatTraverse_loop
  914 D1:B073 -  -  -  -  
  915 D1:B073 -  -  -  -  ;Copied from my Falldown2 project. I didn't want to have to
  916 D1:B073 -  -  -  -  ;find yet another hardware reference for something I already did.
  917 D1:B073 -  -  -  -  ;But I'll have to do it again anyway because this isn't exactly
  918 D1:B073 -  -  -  -  ;what we're looking for. Here, we output the same sort of
  919 D1:B073 -  -  -  -  ;game keys that I've used basically all my programming life.
  920 D1:B073 -  -  -  -  ;Anyhoo. We'll be using the following:
  921 D1:B073 -  -  -  -  ;kbitDown	equ 00h
  922 D1:B073 -  -  -  -  ;kbitLeft	equ 01h
  923 D1:B073 -  -  -  -  ;kbitRight	equ 02h
  924 D1:B073 -  -  -  -  ;kbitUp		equ 03h
  925 D1:B073 -  -  -  -  ;kbitYequ equ 04h
  926 D1:B073 -  -  -  -  ;kbit2nd		equ 05h
  927 D1:B073 -  -  -  -  ;kbitMode	equ 06h
  928 D1:B073 -  -  -  -  ;kbitDel		equ 07h
  929 D1:B073 -  -  -  -  ;You can find the other defines approximately where I found the stuff above.
  930 D1:B073 -  -  -  -  
  931 D1:B073 -  -  -  -  getkbd_adl:
  932 D1:B073 DD 21 00 00 
              F5 -  -  -  	ld  ix,mpKeyMode
  933 D1:B078 ED 22 00 -  	lea hl,ix+0
  934 D1:B07B 36 02 -  -  	ld  (hl),keyModeScanOnce
  935 D1:B07D AF -  -  -  	xor a
  936 D1:B07E BE -  -  -  _:  cp  (hl)
  937 D1:B07F 20 FD -  -  	jr  nz,-_
  938 D1:B081 DD 7E 12 -  	ld  a,(ix+kbdG1-mpKeyRange)
  939 D1:B084 DD 6E 1E -  	ld  l,(ix+kbdG7-mpKeyRange)
  940 D1:B087 AD -  -  -  	xor L
  941 D1:B088 E6 F0 -  -  	and 11110000b	;mask out lower bits to let me shove dpad bits in
  942 D1:B08A AD -  -  -  	xor L
  943 D1:B08B C9 -  -  -  	ret
  944 D1:B08C -  -  -  -  
  945 D1:B08C -  -  -  -  waituntilkeyrelease:
  946 D1:B08C CD 73 B0 D1     call getkbd_adl
  947 D1:B090 B7 -  -  -      or  a,a
  948 D1:B091 20 F9 -  -      jr  nz,waituntilkeyrelease
  949 D1:B093 C9 -  -  -  	ret
  950 D1:B094 -  -  -  -  
  951 D1:B094 -  -  -  -  waituntilnewkeypress:
  952 D1:B094 CD 8C B0 D1     call waituntilkeyrelease
  953 D1:B098 CD 73 B0 D1 _:  call getkbd_adl
  954 D1:B09C B7 -  -  -  	or  a,a
  955 D1:B09D 28 F9 -  -  	jr  z,-_
  956 D1:B09F C9 -  -  -      ret
  957 D1:B0A0 -  -  -  -  
  958 D1:B0A0 -  -  -  -  #include "lcd.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    1 D1:B0A0 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ti84pce.inc"
    1 D1:B0A0 -  -  -  -  ;TI-84 Plus CE Include File
    2 D1:B0A0 -  -  -  -  
    3 D1:B0A0 -  -  -  -  ;Various Parts Contributed by
    4 D1:B0A0 -  -  -  -  ;- BrandonW
    5 D1:B0A0 -  -  -  -  ;- calc84
    6 D1:B0A0 -  -  -  -  ;- MateoConLechuga
    7 D1:B0A0 -  -  -  -  ;- Runer112
    8 D1:B0A0 -  -  -  -  ;- tr1p1ea
    9 D1:B0A0 -  -  -  -  ;- Kerm Martian
   10 D1:B0A0 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    2 D1:B0A0 -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
    5 D1:B0A0 -  -  -  -  ;
    6 D1:B0A0 -  -  -  -  ;
    7 D1:B0A0 -  -  -  -  ;
    8 D1:B0A0 -  -  -  -  
    9 D1:B0A0 -  -  -  -  ;Undefine this to speed up core process by losing debug state
   10 D1:B0A0 -  -  -  -  ;#define COREDEBUG
   11 D1:B0A0 -  -  -  -  
   12 D1:B0A0 -  -  -  -  DEBUG_PRINT_START_CYCLE .equ 0
   13 D1:B0A0 -  -  -  -  DEBUG_STEP_START_CYCLE  .equ 30000 ;26485
   14 D1:B0A0 -  -  -  -  
   15 D1:B0A0 -  -  -  -  
   16 D1:B0A0 -  -  -  -  
   17 D1:B0A0 -  -  -  -  FONTFGCOLOR .EQU $1A
   18 D1:B0A0 -  -  -  -  FONTBGCOLOR .EQU $00
   19 D1:B0A0 -  -  -  -  
   20 D1:B0A0 -  -  -  -  screenBuf1      .equ vRam
   21 D1:B0A0 -  -  -  -  screenBuf2      .equ vRam+(320*240)
   22 D1:B0A0 -  -  -  -  ;DO NOT MOVE THESE.
   23 D1:B0A0 -  -  -  -  xPos                .equ $D031F6
   24 D1:B0A0 -  -  -  -  yPos                .equ $D031F7
   25 D1:B0A0 -  -  -  -  slopPos             .equ $D031F8        ;extra byte here
   26 D1:B0A0 -  -  -  -  debugram            .equ $D031F9        ;FA and FB occupied too.
   27 D1:B0A0 -  -  -  -  save_spl            .equ $D031FC        ;FD and FE occupied too.
   28 D1:B0A0 -  -  -  -  save_mbase          .equ $D031FF        ;
   29 D1:B0A0 -  -  -  -  vram_palette        .equ $D03200        ;64 bytes of color. It looks like itself
   30 D1:B0A0 -  -  -  -  core_memory_ix      .equ $D03280        ;IX range -128 to -64 already in use.
   31 D1:B0A0 -  -  -  -  scrap_mapping       .equ $D03300        ;256 bytes. maps to nowhere important.
   32 D1:B0A0 -  -  -  -  saferam1            .equ $D03400        ;1024 bytes available. Define later.
   33 D1:B0A0 -  -  -  -  main_ram            .equ $D03800        ;$0800 bytes of main system memory
   34 D1:B0A0 -  -  -  -  
   35 D1:B0A0 -  -  -  -  ZEROPAGE            .equ main_ram+(0*256)
   36 D1:B0A0 -  -  -  -  STACKBASE           .equ main_ram+(1*256)
   37 D1:B0A0 -  -  -  -  
   38 D1:B0A0 -  -  -  -  BASETABLE           .equ $D04000        ;variable size. 256*BASETABLE_STRIDE
   39 D1:B0A0 -  -  -  -  BASETABLE_STRIDE    .equ 12
   40 D1:B0A0 -  -  -  -  PAGETABLE_OFFSET    .equ 0
   41 D1:B0A0 -  -  -  -  PAGETABLE           .equ BASETABLE+PAGETABLE_OFFSET
   42 D1:B0A0 -  -  -  -  JUMPTABLE_OFFSET    .equ 4
   43 D1:B0A0 -  -  -  -  JUMPTABLE           .equ BASETABLE+JUMPTABLE_OFFSET
   44 D1:B0A0 -  -  -  -  USETABLE_OFFSET     .equ 8
   45 D1:B0A0 -  -  -  -  USETABLE            .equ BASETABLE+USETABLE_OFFSET
   46 D1:B0A0 -  -  -  -  
   47 D1:B0A0 -  -  -  -  NAMETABLE1          .equ BASETABLE+(512*BASETABLE_STRIDE)
   48 D1:B0A0 -  -  -  -  NAMETABLE2          .equ NAMETABLE1 + 1024  ;1024 BYTES
   49 D1:B0A0 -  -  -  -  OBJECT_ATTRIB_MEM   .equ NAMETABLE2 + 1024  ;256 BYTES
   50 D1:B0A0 -  -  -  -  
   51 D1:B0A0 -  -  -  -  ;
   52 D1:B0A0 -  -  -  -  ;saferam1 1024 bytes storage
   53 D1:B0A0 -  -  -  -  ;
   54 D1:B0A0 -  -  -  -  nametable00         .equ saferam1           ;4b Do not move these vars
   55 D1:B0A0 -  -  -  -  nametable01         .equ nametable00+4      ;4b
   56 D1:B0A0 -  -  -  -  nametable10         .equ nametable01+4      ;4b
   57 D1:B0A0 -  -  -  -  nametable11         .equ nametable10+4      ;4b
   58 D1:B0A0 -  -  -  -  nametable00_attrib  .equ nametable11+4      ;4b
   59 D1:B0A0 -  -  -  -  nametable01_attrib  .equ nametable00_attrib+4   ;4b
   60 D1:B0A0 -  -  -  -  nametable10_attrib  .equ nametable01_attrib+4   ;4b
   61 D1:B0A0 -  -  -  -  nametable11_attrib  .equ nametable10_attrib+4   ;4b
   62 D1:B0A0 -  -  -  -  chr_rom_tiles       .equ nametable11_attrib+4   ;4b
   63 D1:B0A0 -  -  -  -  chr_rom_sprites     .equ chr_rom_tiles+4    ;4b
   64 D1:B0A0 -  -  -  -  curScreenBuf        .equ chr_rom_sprites+4  ;4b
   65 D1:B0A0 -  -  -  -  linestart           .equ curScreenBuf+3     ;1b
   66 D1:B0A0 -  -  -  -  chr_rom_curbank     .equ linestart+1        ;3b Base used for PPU stuff.
   67 D1:B0A0 -  -  -  -  inputNumFiles       .equ chr_rom_curbank+3  ;1b
   68 D1:B0A0 -  -  -  -  basefile_sig        .equ inputNumFiles+1    ;3b pointer to 16b hash
   69 D1:B0A0 -  -  -  -  missing_files       .equ basefile_sig+3     ;1b
   70 D1:B0A0 -  -  -  -  total_rom_size      .equ missing_files+1    ;3b
   71 D1:B0A0 -  -  -  -  prg_rom_size        .equ total_rom_size+3   ;3b
   72 D1:B0A0 -  -  -  -  chr_rom_size        .equ prg_rom_size+3     ;3b
   73 D1:B0A0 -  -  -  -  submapper           .equ chr_rom_size+3     ;1b. iNES2 thing. Not often used.
   74 D1:B0A0 -  -  -  -  ines_flag_6         .equ submapper+1        ;1b. Flags that a mapper may need.
   75 D1:B0A0 -  -  -  -  mapper_id           .equ ines_flag_6+1      ;3b. Convenience load for 12 bits
   76 D1:B0A0 -  -  -  -  mapper_adr_base     .equ mapper_id+1        ;3b. Used to load mapper
   77 D1:B0A0 -  -  -  -  trainer_base        .equ mapper_adr_base+3  ;3b. If exist, starts here
   78 D1:B0A0 -  -  -  -  prg_rom_base        .equ mapper_adr_base+3  ;3b. Adjusted in case of trainer.
   79 D1:B0A0 -  -  -  -  chr_rom_base        .equ prg_rom_base+3     ;3b. Located somewhere.
   80 D1:B0A0 -  -  -  -  chr_rom_base_file   .equ chr_rom_base+3     ;1b. Nonzero if not in first file.
   81 D1:B0A0 -  -  -  -  ppu_smc_gate        .equ chr_rom_base_file+1 ;3b write address to ungate PPU
   82 D1:B0A0 -  -  -  -  timings_base        .equ ppu_smc_gate+3    ;3b. Current pointer to timings
   83 D1:B0A0 -  -  -  -  
   84 D1:B0A0 -  -  -  -  SIZEOF_INTEGRITY_HASH    .equ 16
   85 D1:B0A0 -  -  -  -  MAXPRGROM_HINIB     .equ 1
   86 D1:B0A0 -  -  -  -  MAXCHRROM_HINIB     .equ 3
   87 D1:B0A0 -  -  -  -  NUMBER_OF_MAPPERS   .equ 1
   88 D1:B0A0 -  -  -  -  MAPPER_STRIDE       .equ 9
   89 D1:B0A0 -  -  -  -  
   90 D1:B0A0 -  -  -  -  MAXNUMFILES         .equ 1                  ;set to 32 later. that's like 1.5MB
   91 D1:B0A0 -  -  -  -  FILETABLE_STRIDE    .equ 8
   92 D1:B0A0 -  -  -  -  FILETABLE           .equ timings_base+3   ;(MAXNUMFILES*FILETABLE_STRIDE)b
   93 D1:B0A0 -  -  -  -  FILE_SIZE_OFFSET    .equ 0
   94 D1:B0A0 -  -  -  -  FILE_ADR_OFFSET     .equ 2
   95 D1:B0A0 -  -  -  -  FILE_SIG_ADR_OFFSET .equ 5
   96 D1:B0A0 -  -  -  -  
   97 D1:B0A0 -  -  -  -  int_table_len       .equ FILETABLE+((MAXNUMFILES+1)*FILETABLE_STRIDE)
   98 D1:B0A0 -  -  -  -  INT_TABLE           .equ int_table_len+1
   99 D1:B0A0 -  -  -  -  INT_TABLE_MAXLEN    .equ 8
  100 D1:B0A0 -  -  -  -  INT_TABLE_STRIDE    .equ 6
  101 D1:B0A0 -  -  -  -  INT_ADDR_OFFSET     .equ 0
  102 D1:B0A0 -  -  -  -  INT_CYCLE_OFFSET    .equ 3
  103 D1:B0A0 -  -  -  -  
  104 D1:B0A0 -  -  -  -  
  105 D1:B0A0 -  -  -  -  
  106 D1:B0A0 -  -  -  -  ;
  107 D1:B0A0 -  -  -  -  ;
  108 D1:B0A0 -  -  -  -  ;
  109 D1:B0A0 -  -  -  -  ;
  110 D1:B0A0 -  -  -  -  #define WREG_CONST %01010101
  111 D1:B0A0 -  -  -  -  
  112 D1:B0A0 -  -  -  -  ;PPU default locations. Some are not used
  113 D1:B0A0 -  -  -  -  #define PPU_CTRL -32
  114 D1:B0A0 -  -  -  -  #define PPU_MASK -31
  115 D1:B0A0 -  -  -  -  #define PPU_STATUS -30
  116 D1:B0A0 -  -  -  -  #define PPU_OAMADDR -29
  117 D1:B0A0 -  -  -  -  #define PPU_OAMDATA -28
  118 D1:B0A0 -  -  -  -  #define PPU_SCROLL -27
  119 D1:B0A0 -  -  -  -  #define PPU_ADDR -26
  120 D1:B0A0 -  -  -  -  #define PPU_DATA -25
  121 D1:B0A0 -  -  -  -  ;PPU internal stuff
  122 D1:B0A0 -  -  -  -  #define PPU_SUBCYCLE -15    ;0, 1, or 2.
  123 D1:B0A0 -  -  -  -  #define PPU_V -14           ;USED TO STORE VRAM ADDRESS (PPU ADDRESS SPACE)
  124 D1:B0A0 -  -  -  -  #define PPU_W -12           ;INTERNAL W REGISTER FOR HIGH/LOW BYTE PORT WRITES
  125 D1:B0A0 -  -  -  -  #define PPU_FRAMECOUNT -11  ;USED FOR EVEN/ODD
  126 D1:B0A0 -  -  -  -  #define PPU_NAMETABLE_PTR -10   ;Pointer cache
  127 D1:B0A0 -  -  -  -  #define PPU_VCOUNT -7
  128 D1:B0A0 -  -  -  -  #define PPU_HCOUNT -6
  129 D1:B0A0 -  -  -  -  #define PPU_TCOUNT -5
  130 D1:B0A0 -  -  -  -  #define PPU_XSCROLL -4  ;Should be constructed from PPU_SCROLL
  131 D1:B0A0 -  -  -  -  #define PPU_YSCROLL -3  ;
  132 D1:B0A0 -  -  -  -  #define APU_KEYPAD -2   ;First to last: A,B,SE,ST,UP,DO,LE,RI. 01234567.
  133 D1:B0A0 -  -  -  -  #define APU_KEYLATCH -1
  134 D1:B0A0 -  -  -  -  ;core memory
  135 D1:B0A0 -  -  -  -  #define REGA 0
  136 D1:B0A0 -  -  -  -  #define REGX 1
  137 D1:B0A0 -  -  -  -  #define REGY 2
  138 D1:B0A0 -  -  -  -  #define REGSP 3
  139 D1:B0A0 -  -  -  -  #define REGSR 4
  140 D1:B0A0 -  -  -  -  #define REGPC 5
  141 D1:B0A0 -  -  -  -  #define CYCLES_REMAIN 8
  142 D1:B0A0 -  -  -  -  #define CYCLES_CURRENT 11
  143 D1:B0A0 -  -  -  -  #define CURRENT_OPCODES 14
  144 D1:B0A0 -  -  -  -  #define CORE_STACK_BASE 17
  145 D1:B0A0 -  -  -  -  #define CORE_ERROR_LEVEL 20
  146 D1:B0A0 -  -  -  -  #define SCRAP_COUNTER 21
  147 D1:B0A0 -  -  -  -  #define PORT_WRITE_TIMESTAMP 24
  148 D1:B0A0 -  -  -  -  #define TEMP_MEMORY 27
  149 D1:B0A0 -  -  -  -  #define NMI_TRIGGERED 30 
  150 D1:B0A0 -  -  -  -  ;flag IDs
  151 D1:B0A0 -  -  -  -  #define SF_NEG 7
  152 D1:B0A0 -  -  -  -  #define SF_OVER 6 
  153 D1:B0A0 -  -  -  -  #define SF_RESERVED 5 
  154 D1:B0A0 -  -  -  -  #define SF_BRK 4
  155 D1:B0A0 -  -  -  -  #define SF_DEC 3
  156 D1:B0A0 -  -  -  -  #define SF_INT 2
  157 D1:B0A0 -  -  -  -  #define SF_ZERO 1
  158 D1:B0A0 -  -  -  -  #define SF_CARRY 0
  159 D1:B0A0 -  -  -  -  
  160 D1:B0A0 -  -  -  -  #macro ADDCYC(X)
  161 D1:B0A0                 #if (x < 1)
  162 D1:B0A0                     nop
  163 D1:B0A0                 #elif (X = 1)
  164 D1:B0A0                     inc iy
  165 D1:B0A0                 #else
  166 D1:B0A0                     lea iy,iy+X
  167 D1:B0A0                 #endif
  168 D1:B0A0             #endmacro
  169 D1:B0A0 -  -  -  -  
  170 D1:B0A0 -  -  -  -  ;
  171 D1:B0A0 -  -  -  -  ;
  172 D1:B0A0 -  -  -  -  ;
  173 D1:B0A0 -  -  -  -  #endif
  174 D1:B0A0 -  -  -  -  .list
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\lcd.z80"
    3 D1:B0A0 -  -  -  -  
    4 D1:B0A0 -  -  -  -  ;Function list:
    5 D1:B0A0 -  -  -  -  ; fastCopy - Swaps drawing buffer to display what is currently written there.
    6 D1:B0A0 -  -  -  -  ; startGfx - Configures LCD to run in graphx mode. UNSAFE TO RUN MORE THAN ONCE
    7 D1:B0A0 -  -  -  -  ; stopGfx - Restores LCD configuration to TI-OS default.
    8 D1:B0A0 -  -  -  -  ; configureScreen - Swaps screen configuration betwen current and stored.
    9 D1:B0A0 -  -  -  -  ; setDefaultPalette - Sets default (XLIBC) color palette.
   10 D1:B0A0 -  -  -  -  ; clearTextBuf - no inputs. Sets text buffer to all spaces.
   11 D1:B0A0 -  -  -  -  ; printTextBuf - no inputs. Mirrors buffer to screen.
   12 D1:B0A0 -  -  -  -  ; setLineStart - A=xpos. Set xPos and linestart
   13 D1:B0A0 -  -  -  -  ; setCurLine - A=ypos. Set yPos.
   14 D1:B0A0 -  -  -  -  ; newLine - no inputs. sets linestart = xPos, increments yPos
   15 D1:B0A0 -  -  -  -  ; newPage - no inputs. sets linestart = xPos, yPos = 0
   16 D1:B0A0 -  -  -  -  ; printString - HL=address to string. destroys all.
   17 D1:B0A0 -  -  -  -  ; printBigFont - A=ASCII char to print at xPos,yPos. Advances xPos by 1.
   18 D1:B0A0 -  -  -  -  ; printSmallNumPair - A=0-255 to print at xPos,Ypos. Advances xPos by 1.
   19 D1:B0A0 -  -  -  -  ; calculateScreenPtr - Converts xPos,yPos into HL= screen buffer address.
   20 D1:B0A0 -  -  -  -  ; calculateScreenPtrDE - Converts E=xPos,D=yPos into HL= screen buffer address.
   21 D1:B0A0 -  -  -  -  ;
   22 D1:B0A0 -  -  -  -  ;
   23 D1:B0A0 -  -  -  -  ;
   24 D1:B0A0 -  -  -  -  ;
   25 D1:B0A0 -  -  -  -  ;
   26 D1:B0A0 -  -  -  -  ;
   27 D1:B0A0 -  -  -  -  ;
   28 D1:B0A0 -  -  -  -  
   29 D1:B0A0 -  -  -  -  
   30 D1:B0A0 -  -  -  -  
   31 D1:B0A0 -  -  -  -  
   32 D1:B0A0 -  -  -  -  ;-----------------------------------------------------------------------------
   33 D1:B0A0 -  -  -  -  ;Screen hardware interface stuff
   34 D1:B0A0 -  -  -  -  
   35 D1:B0A0 -  -  -  -  ;It ought to be called "bufSwap" but I just can't. I won't.
   36 D1:B0A0 -  -  -  -  fastCopy:
   37 D1:B0A0 11 00 00 D4     ld  de,screenBuf1
   38 D1:B0A4 2A 10 00 E3     ld  hl,(mpLcdBase)
   39 D1:B0A8 22 28 34 D0     ld  (curScreenBuf),hl
   40 D1:B0AC B7 -  -  -      or  a,a
   41 D1:B0AD ED 52 -  -      sbc hl,de
   42 D1:B0AF EB -  -  -      ex  de,hl
   43 D1:B0B0 20 04 -  -      jr  nz,+_
   44 D1:B0B2 21 00 2C D5     ld  hl,screenBuf2
   45 D1:B0B6 22 10 00 E3 _:  ld  (mpLcdBase),hl
   46 D1:B0BA C9 -  -  -      ret
   47 D1:B0BB -  -  -  -  
   48 D1:B0BB -  -  -  -  stopGfx:
   49 D1:B0BB CD 74 03 00     call _boot_ClearVRAM
   50 D1:B0BF 11 2D 09 00     ld  de,lcdNormalMode
   51 D1:B0C3 01 00 00 D4     ld  bc,screenBuf1
   52 D1:B0C7 18 0C -  -      jr  configureScreen
   53 D1:B0C9 -  -  -  -  
   54 D1:B0C9 -  -  -  -  startGfx:
   55 D1:B0C9 CD 74 03 00     call _boot_ClearVRAM
   56 D1:B0CD 11 27 39 01     ld  de,lcdWatermark+lcdIntFront+lcdPwr+lcdBgr+lcdBpp8
   57 D1:B0D1 01 00 00 D4     ld  bc,screenBuf1
   58 D1:B0D5 -  -  -  -  configureScreen:
   59 D1:B0D5 21 10 00 E3     ld  hl,mpLcdBase
   60 D1:B0D9 ED 0F -  -      ld  (hl),bc
   61 D1:B0DB 2E 18 -  -      ld  L,lcdCtrl
   62 D1:B0DD ED 1F -  -      ld  (hl),de
   63 D1:B0DF 2E 01 -  -      ld  L,lcdTiming0 + 1
   64 D1:B0E1 01 08 00 00     ld  bc,8
   65 D1:B0E5 11 14 B1 D1     ld  de,screenSettings
   66 D1:B0E9 1A -  -  -  _:  ld  a,(de)
   67 D1:B0EA ED A0 -  -      ldi
   68 D1:B0EC 2B -  -  -      dec hl
   69 D1:B0ED 77 -  -  -      ld  (hl),a
   70 D1:B0EE 23 -  -  -      inc hl
   71 D1:B0EF EA E9 B0 D1     jp  pe,-_
   72 D1:B0F3 21 00 2C D5     ld  hl,screenBuf2
   73 D1:B0F7 22 28 34 D0     ld  (curScreenBuf),hl
   74 D1:B0FB -  -  -  -  ;Also copied from graphx
   75 D1:B0FB -  -  -  -  setDefaultPalette:
   76 D1:B0FB 11 00 02 E3 	ld	de,mpLcdPalette	    ; address of mmio palette
   77 D1:B0FF 43 -  -  -  	ld	b,e			        ; b = 0
   78 D1:B100 78 -  -  -  _:	ld	a,b
   79 D1:B101 0F -  -  -  	rrca
   80 D1:B102 A8 -  -  -  	xor	a,b
   81 D1:B103 E6 E0 -  -  	and	a,224
   82 D1:B105 A8 -  -  -  	xor	a,b
   83 D1:B106 12 -  -  -  	ld	(de),a
   84 D1:B107 13 -  -  -  	inc	de
   85 D1:B108 78 -  -  -  	ld	a,b
   86 D1:B109 17 -  -  -  	rla
   87 D1:B10A 17 -  -  -  	rla
   88 D1:B10B 17 -  -  -  	rla
   89 D1:B10C 78 -  -  -  	ld	a,b
   90 D1:B10D 1F -  -  -  	rra
   91 D1:B10E 12 -  -  -  	ld	(de),a
   92 D1:B10F 13 -  -  -  	inc	de
   93 D1:B110 04 -  -  -  	inc	b
   94 D1:B111 20 ED -  -  	jr	nz,-_		    ; loop for 256 times to fill palette
   95 D1:B113 C9 -  -  -  	ret
   96 D1:B114 -  -  -  -  
   97 D1:B114 -  -  -  -  screenSettings:
   98 D1:B114 -  -  -  -  ;Copied from my old Falldown2 project, which was also copied from graphx.asm
   99 D1:B114 -  -  -  -  ;	.db	14 shl 2			; PPL shl 2
  100 D1:B114 07 -  -  -  	.db	7					; HSW
  101 D1:B115 57 -  -  -  	.db	87					; HFP
  102 D1:B116 3F -  -  -  	.db	63					; HBP
  103 D1:B117 3F 01 -  -  	.dw	(0 >> 10)+319		; (VSW shl 10)+LPP
  104 D1:B119 B3 -  -  -  	.db	179					; VFP
  105 D1:B11A 00 -  -  -  	.db	0					; VBP
  106 D1:B11B 00 -  -  -  	.db	(0 >> 6)+(0 >> 5)+0	; (ACB shl 6)+(CLKSEL shl 5)+PCD_LO
  107 D1:B11C -  -  -  -  ;  H = ((PPL+1)*16)+(HSW+1)+(HFP+1)+(HBP+1) = 240+8+88+64 = 400
  108 D1:B11C -  -  -  -  ;  V = (LPP+1)+(VSW+1)+VFP+VBP = 320+1+179+0 = 500
  109 D1:B11C -  -  -  -  ; CC = H*V*PCD*2 = 400*500*2*2 = 800000
  110 D1:B11C -  -  -  -  ; Hz = 48000000/CC = 60
  111 D1:B11C -  -  -  -  
  112 D1:B11C -  -  -  -  
  113 D1:B11C -  -  -  -  ;-----------------------------------------------------------------------------
  114 D1:B11C -  -  -  -  ; Text Rendering
  115 D1:B11C -  -  -  -  
  116 D1:B11C -  -  -  -  clearTextBuf:
  117 D1:B11C 21 00 58 D0     ld  hl,NAMETABLE1
  118 D1:B120 11 01 58 D0     ld  de,NAMETABLE1+1
  119 D1:B124 01 FF 03 00     ld  bc,1023
  120 D1:B128 36 20 -  -      ld  (hl),' '
  121 D1:B12A ED B0 -  -      ldir
  122 D1:B12C C9 -  -  -      ret
  123 D1:B12D -  -  -  -  
  124 D1:B12D -  -  -  -  printTextBuf:
  125 D1:B12D 2A F6 31 D0     ld  hl,(xPos)
  126 D1:B131 22 61 B1 D1     ld  (printTextBuf_smcPosRecovery),hl
  127 D1:B135 21 00 58 D0     ld  hl,NAMETABLE1
  128 D1:B139 AF -  -  -      xor a,a
  129 D1:B13A 32 F7 31 D0     ld  (yPos),a
  130 D1:B13E 0E 1E -  -      ld  c,30
  131 D1:B140 3E 08 -  -  _:  ld  a,8
  132 D1:B142 32 F6 31 D0     ld  (xPos),a
  133 D1:B146 06 20 -  -      ld  b,$20
  134 D1:B148 7E -  -  -  _:  ld  a,(hl)
  135 D1:B149 23 -  -  -      inc hl
  136 D1:B14A C5 -  -  -      push bc
  137 D1:B14B E5 -  -  -          push hl
  138 D1:B14C CD AA B1 D1             call printBigFont
  139 D1:B150 E1 -  -  -          pop hl
  140 D1:B151 C1 -  -  -      pop bc
  141 D1:B152 10 F4 -  -      djnz -_
  142 D1:B154 3A F7 31 D0     ld  a,(yPos)
  143 D1:B158 3C -  -  -      inc a
  144 D1:B159 32 F7 31 D0     ld  (yPos),a
  145 D1:B15D 0D -  -  -      dec  c
  146 D1:B15E 20 E0 -  -      jr  nz,--_
  147 D1:B160 -  -  -  -  printTextBuf_smcPosRecovery .equ $+1
  148 D1:B160 21 00 00 00     ld  hl,0
  149 D1:B164 22 F6 31 D0     ld  (xPos),hl
  150 D1:B168 C9 -  -  -      ret
  151 D1:B169 -  -  -  -  
  152 D1:B169 -  -  -  -  ;A=column to start on
  153 D1:B169 -  -  -  -  setLineStart:
  154 D1:B169 32 F6 31 D0     ld  (xPos),a
  155 D1:B16D 32 2B 34 D0     ld  (linestart),a
  156 D1:B171 C9 -  -  -      ret
  157 D1:B172 -  -  -  -  
  158 D1:B172 -  -  -  -  ;A=row to start on
  159 D1:B172 -  -  -  -  setCurLine:
  160 D1:B172 32 F7 31 D0     ld  (yPos),a
  161 D1:B176 C9 -  -  -      ret
  162 D1:B177 -  -  -  -  
  163 D1:B177 -  -  -  -  newPage:
  164 D1:B177 3E FF -  -      ld  a,$FF
  165 D1:B179 32 F7 31 D0     ld  (yPos),a
  166 D1:B17D -  -  -  -  newLine:
  167 D1:B17D 3A 2B 34 D0     ld  a,(linestart)
  168 D1:B181 32 F6 31 D0     ld  (xPos),a
  169 D1:B185 3A F7 31 D0     ld  a,(yPos)
  170 D1:B189 3C -  -  -      inc a
  171 D1:B18A FE 1E -  -      cp  30
  172 D1:B18C 38 01 -  -      jr  c,+_
  173 D1:B18E AF -  -  -      xor a,a
  174 D1:B18F 32 F7 31 D0 _:  ld  (yPos),a
  175 D1:B193 C9 -  -  -      ret
  176 D1:B194 -  -  -  -  
  177 D1:B194 -  -  -  -      
  178 D1:B194 -  -  -  -      
  179 D1:B194 -  -  -  -  
  180 D1:B194 -  -  -  -  ;HL=address to string
  181 D1:B194 -  -  -  -  printString:
  182 D1:B194 7E -  -  -      ld  a,(hl)
  183 D1:B195 23 -  -  -      inc hl
  184 D1:B196 B7 -  -  -      or  a,a
  185 D1:B197 C8 -  -  -      ret z
  186 D1:B198 FE 0A -  -      cp  a,'\n'
  187 D1:B19A 20 06 -  -      jr nz,+_
  188 D1:B19C CD 7D B1 D1     call newLine
  189 D1:B1A0 18 F2 -  -      jr  printString
  190 D1:B1A2 E5 -  -  -  _:  push hl
  191 D1:B1A3 CD AA B1 D1         call printBigFont
  192 D1:B1A7 E1 -  -  -      pop hl
  193 D1:B1A8 18 EA -  -      jr printString
  194 D1:B1AA -  -  -  -  
  195 D1:B1AA -  -  -  -  
  196 D1:B1AA -  -  -  -  ;in: A=chrToPrint
  197 D1:B1AA -  -  -  -  printBigFont:
  198 D1:B1AA CD 3F B2 D1     call calculateScreenPtr
  199 D1:B1AE EB -  -  -      ex  de,hl
  200 D1:B1AF 6F -  -  -      ld  L,a
  201 D1:B1B0 26 08 -  -      ld  H,8
  202 D1:B1B2 ED 6C -  -      mlt hl
  203 D1:B1B4 01 59 B1 D1     ld  bc,graphx_textdata
  204 D1:B1B8 09 -  -  -      add hl,bc
  205 D1:B1B9 EB -  -  -      ex  de,hl
  206 D1:B1BA 0E 08 -  -      ld  c,8
  207 D1:B1BC 06 08 -  -  _:  ld  b,8
  208 D1:B1BE 1A -  -  -      ld  a,(de)
  209 D1:B1BF 87 -  -  -  _:  add a,a
  210 D1:B1C0 -  -  -  -  fontBGColor_var .equ $+1
  211 D1:B1C0 36 00 -  -      ld  (hl),FONTBGCOLOR
  212 D1:B1C2 30 02 -  -      jr  nc,$+4
  213 D1:B1C4 -  -  -  -  fontFGColor_var .equ $+1
  214 D1:B1C4 36 1A -  -      ld  (hl),FONTFGCOLOR
  215 D1:B1C6 23 -  -  -      inc hl
  216 D1:B1C7 10 F6 -  -      djnz -_
  217 D1:B1C9 79 -  -  -      ld  a,c
  218 D1:B1CA 01 38 01 00     ld  bc,320-8
  219 D1:B1CE 09 -  -  -      add hl,bc
  220 D1:B1CF 4F -  -  -      ld  c,a
  221 D1:B1D0 13 -  -  -      inc de
  222 D1:B1D1 0D -  -  -      dec c
  223 D1:B1D2 20 E8 -  -      jr  nz,--_
  224 D1:B1D4 21 F6 31 D0     ld  hl,xPos
  225 D1:B1D8 34 -  -  -      inc (hl)
  226 D1:B1D9 C9 -  -  -      ret
  227 D1:B1DA -  -  -  -  
  228 D1:B1DA -  -  -  -  ;A= 0-255 numeric value to display as hex
  229 D1:B1DA -  -  -  -  printSmallNumPair:
  230 D1:B1DA CD 3F B2 D1     call calculateScreenPtr
  231 D1:B1DE F5 -  -  -      push af
  232 D1:B1DF 1F -  -  -          rra
  233 D1:B1E0 1F -  -  -          rra
  234 D1:B1E1 1F -  -  -          rra
  235 D1:B1E2 1F -  -  -          rra
  236 D1:B1E3 CD F2 B1 D1         call +_
  237 D1:B1E7 F1 -  -  -      pop af
  238 D1:B1E8 CD F2 B1 D1     call +_
  239 D1:B1EC 21 F6 31 D0     ld  hl,xPos
  240 D1:B1F0 34 -  -  -      inc (hl)
  241 D1:B1F1 C9 -  -  -      ret
  242 D1:B1F2 E6 0F -  -  _:  and a,$0F
  243 D1:B1F4 01 40 01 00     ld  bc,320
  244 D1:B1F8 09 -  -  -      add hl,bc   ;drop height by one. These small chars are *short*
  245 D1:B1F9 EB -  -  -      ex  de,hl
  246 D1:B1FA 6F -  -  -      ld  L,a
  247 D1:B1FB 26 03 -  -      ld  H,3
  248 D1:B1FD ED 6C -  -      mlt hl
  249 D1:B1FF 01 59 B5 D1     ld  bc,SmallHexFont
  250 D1:B203 09 -  -  -      add hl,bc
  251 D1:B204 EB -  -  -      ex  de,hl
  252 D1:B205 0E 03 -  -      ld  c,3
  253 D1:B207 18 14 -  -      jr  printSmallNumPair_2ndHalf
  254 D1:B209 -  -  -  -  printSmallNumPair_1stHalf:
  255 D1:B209 1A -  -  -      ld  a,(de)
  256 D1:B20A 06 04 -  -      ld  b,4
  257 D1:B20C 87 -  -  -  _:  add a,a
  258 D1:B20D -  -  -  -  smallFontBGColor_var .equ $+1
  259 D1:B20D 36 00 -  -      ld  (hl),FONTBGCOLOR
  260 D1:B20F 30 02 -  -      jr  nc,$+4
  261 D1:B211 -  -  -  -  smallFontFGColor_var .equ $+1
  262 D1:B211 36 1A -  -      ld  (hl),FONTFGCOLOR
  263 D1:B213 23 -  -  -      inc hl
  264 D1:B214 10 F6 -  -      djnz -_
  265 D1:B216 79 -  -  -      ld  a,c
  266 D1:B217 01 3C 01 00     ld  bc,320-4
  267 D1:B21B 09 -  -  -      add hl,bc
  268 D1:B21C 4F -  -  -      ld  c,a
  269 D1:B21D -  -  -  -  printSmallNumPair_2ndHalf:
  270 D1:B21D 1A -  -  -      ld  a,(de)
  271 D1:B21E 07 -  -  -      rlca
  272 D1:B21F 07 -  -  -      rlca
  273 D1:B220 07 -  -  -      rlca
  274 D1:B221 07 -  -  -      rlca
  275 D1:B222 06 04 -  -      ld  b,4
  276 D1:B224 87 -  -  -  _:  add a,a
  277 D1:B225 36 00 -  -      ld  (hl),FONTBGCOLOR
  278 D1:B227 30 02 -  -      jr  nc,$+4
  279 D1:B229 36 1A -  -      ld  (hl),FONTFGCOLOR
  280 D1:B22B 23 -  -  -      inc hl
  281 D1:B22C 10 F6 -  -      djnz -_
  282 D1:B22E 13 -  -  -      inc de
  283 D1:B22F 79 -  -  -      ld  a,c
  284 D1:B230 01 3C 01 00     ld  bc,320-4
  285 D1:B234 09 -  -  -      add hl,bc
  286 D1:B235 4F -  -  -      ld  c,a
  287 D1:B236 0D -  -  -      dec c
  288 D1:B237 20 D0 -  -      jr  nz,printSmallNumPair_1stHalf
  289 D1:B239 01 84 F8 FF     ld  bc,-(320*(1+5))+4
  290 D1:B23D 09 -  -  -      add hl,bc
  291 D1:B23E C9 -  -  -      ret
  292 D1:B23F -  -  -  -  
  293 D1:B23F -  -  -  -  calculateScreenPtr:
  294 D1:B23F -  -  -  -      ;xcoord: x * 8 
  295 D1:B23F -  -  -  -      ;ycoord: 320 * 8 * y
  296 D1:B23F -  -  -  -      ;coord: (8x)+320*8y -> 8(x+320y)
  297 D1:B23F ED 5B F6 31 
              D0 -  -  -      ld  de,(xPos)
  298 D1:B244 -  -  -  -  calculateScreenPtrDE:
  299 D1:B244 6A -  -  -      ld  L,d     ;yPos
  300 D1:B245 26 A0 -  -      ld  h,160
  301 D1:B247 ED 6C -  -      mlt hl
  302 D1:B249 29 -  -  -      add hl,hl
  303 D1:B24A 16 01 -  -      ld  d,1
  304 D1:B24C ED 5C -  -      mlt de      ;DE=E. Clears high bytes.
  305 D1:B24E 19 -  -  -      add hl,de
  306 D1:B24F 29 -  -  -      add hl,hl
  307 D1:B250 29 -  -  -      add hl,hl
  308 D1:B251 29 -  -  -      add hl,hl
  309 D1:B252 ED 5B 28 34 
              D0 -  -  -      ld  de,(curScreenBuf)
  310 D1:B257 19 -  -  -      add hl,de
  311 D1:B258 C9 -  -  -      ret
  312 D1:B259 -  -  -  -  
  313 D1:B259 -  -  -  -  
  314 D1:B259 -  -  -  -  
  315 D1:B259 -  -  -  -  
  316 D1:B259 -  -  -  -  
  317 D1:B259 -  -  -  -  
  318 D1:B259 -  -  -  -  
  319 D1:B259 -  -  -  -  
  320 D1:B259 -  -  -  -  
  321 D1:B259 -  -  -  -  ;-----------------------------------------------------------------------------
  322 D1:B259 -  -  -  -  ; Data Section
  323 D1:B259 -  -  -  -  
  324 D1:B259 -  -  -  -  graphx_textdata		.EQU $-(8*' ')		;points to what would be start of ASCII
  325 D1:B259 00 00 00 00 
              00 00 00 00 .db	$00,$00,$00,$00,$00,$00,$00,$00 ;
  326 D1:B261 C0 C0 C0 C0 
              C0 00 C0 00 .db	$C0,$C0,$C0,$C0,$C0,$00,$C0,$00 ; !
  327 D1:B269 D8 D8 D8 00 
              00 00 00 00 .db	$D8,$D8,$D8,$00,$00,$00,$00,$00 ; "
  328 D1:B271 6C 6C FE 6C 
              FE 6C 6C 00 .db	$6C,$6C,$FE,$6C,$FE,$6C,$6C,$00 ; #
  329 D1:B279 18 7E C0 7C 
              06 FC 18 00 .db	$18,$7E,$C0,$7C,$06,$FC,$18,$00 ; $
  330 D1:B281 00 C6 CC 18 
              30 66 C6 00 .db	$00,$C6,$CC,$18,$30,$66,$C6,$00 ; %
  331 D1:B289 38 6C 38 76 
              DC CC 76 00 .db	$38,$6C,$38,$76,$DC,$CC,$76,$00 ; &
  332 D1:B291 30 30 60 00 
              00 00 00 00 .db	$30,$30,$60,$00,$00,$00,$00,$00 ; '
  333 D1:B299 30 60 C0 C0 
              C0 60 30 00 .db	$30,$60,$C0,$C0,$C0,$60,$30,$00 ; (
  334 D1:B2A1 C0 60 30 30 
              30 60 C0 00 .db	$C0,$60,$30,$30,$30,$60,$C0,$00 ; )
  335 D1:B2A9 00 66 3C FF 
              3C 66 00 00 .db	$00,$66,$3C,$FF,$3C,$66,$00,$00 ; *
  336 D1:B2B1 00 30 30 FC 
              FC 30 30 00 .db	$00,$30,$30,$FC,$FC,$30,$30,$00 ; +
  337 D1:B2B9 00 00 00 00 
              00 60 60 C0 .db	$00,$00,$00,$00,$00,$60,$60,$C0 ; ,
  338 D1:B2C1 00 00 00 FC 
              00 00 00 00 .db	$00,$00,$00,$FC,$00,$00,$00,$00 ; -
  339 D1:B2C9 00 00 00 00 
              00 C0 C0 00 .db	$00,$00,$00,$00,$00,$C0,$C0,$00 ; .
  340 D1:B2D1 06 0C 18 30 
              60 C0 80 00 .db	$06,$0C,$18,$30,$60,$C0,$80,$00 ; /
  341 D1:B2D9 7C CE DE F6 
              E6 C6 7C 00 .db	$7C,$CE,$DE,$F6,$E6,$C6,$7C,$00 ; 0
  342 D1:B2E1 30 70 30 30 
              30 30 FC 00 .db	$30,$70,$30,$30,$30,$30,$FC,$00 ; 1
  343 D1:B2E9 7C C6 06 7C 
              C0 C0 FE 00 .db	$7C,$C6,$06,$7C,$C0,$C0,$FE,$00 ; 2
  344 D1:B2F1 FC 06 06 3C 
              06 06 FC 00 .db	$FC,$06,$06,$3C,$06,$06,$FC,$00 ; 3
  345 D1:B2F9 0C CC CC CC 
              FE 0C 0C 00 .db	$0C,$CC,$CC,$CC,$FE,$0C,$0C,$00 ; 4
  346 D1:B301 FE C0 FC 06 
              06 C6 7C 00 .db	$FE,$C0,$FC,$06,$06,$C6,$7C,$00 ; 5
  347 D1:B309 7C C0 C0 FC 
              C6 C6 7C 00 .db	$7C,$C0,$C0,$FC,$C6,$C6,$7C,$00 ; 6
  348 D1:B311 FE 06 06 0C 
              18 30 30 00 .db	$FE,$06,$06,$0C,$18,$30,$30,$00 ; 7
  349 D1:B319 7C C6 C6 7C 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$7C,$C6,$C6,$7C,$00 ; 8
  350 D1:B321 7C C6 C6 7E 
              06 06 7C 00 .db	$7C,$C6,$C6,$7E,$06,$06,$7C,$00 ; 9
  351 D1:B329 00 C0 C0 00 
              00 C0 C0 00 .db	$00,$C0,$C0,$00,$00,$C0,$C0,$00 ; :
  352 D1:B331 00 60 60 00 
              00 60 60 C0 .db	$00,$60,$60,$00,$00,$60,$60,$C0 ; ;
  353 D1:B339 18 30 60 C0 
              60 30 18 00 .db	$18,$30,$60,$C0,$60,$30,$18,$00 ; <
  354 D1:B341 00 00 FC 00 
              FC 00 00 00 .db	$00,$00,$FC,$00,$FC,$00,$00,$00 ; =
  355 D1:B349 C0 60 30 18 
              30 60 C0 00 .db	$C0,$60,$30,$18,$30,$60,$C0,$00 ; >
  356 D1:B351 78 CC 18 30 
              30 00 30 00 .db	$78,$CC,$18,$30,$30,$00,$30,$00 ; ?
  357 D1:B359 7C C6 DE DE 
              DE C0 7E 00 .db	$7C,$C6,$DE,$DE,$DE,$C0,$7E,$00 ; @
  358 D1:B361 38 6C C6 C6 
              FE C6 C6 00 .db	$38,$6C,$C6,$C6,$FE,$C6,$C6,$00 ; A
  359 D1:B369 FC C6 C6 FC 
              C6 C6 FC 00 .db	$FC,$C6,$C6,$FC,$C6,$C6,$FC,$00 ; B
  360 D1:B371 7C C6 C0 C0 
              C0 C6 7C 00 .db	$7C,$C6,$C0,$C0,$C0,$C6,$7C,$00 ; C
  361 D1:B379 F8 CC C6 C6 
              C6 CC F8 00 .db	$F8,$CC,$C6,$C6,$C6,$CC,$F8,$00 ; D
  362 D1:B381 FE C0 C0 F8 
              C0 C0 FE 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$FE,$00 ; E
  363 D1:B389 FE C0 C0 F8 
              C0 C0 C0 00 .db	$FE,$C0,$C0,$F8,$C0,$C0,$C0,$00 ; F
  364 D1:B391 7C C6 C0 C0 
              CE C6 7C 00 .db	$7C,$C6,$C0,$C0,$CE,$C6,$7C,$00 ; G
  365 D1:B399 C6 C6 C6 FE 
              C6 C6 C6 00 .db	$C6,$C6,$C6,$FE,$C6,$C6,$C6,$00 ; H
  366 D1:B3A1 7E 18 18 18 
              18 18 7E 00 .db	$7E,$18,$18,$18,$18,$18,$7E,$00 ; I
  367 D1:B3A9 06 06 06 06 
              06 C6 7C 00 .db	$06,$06,$06,$06,$06,$C6,$7C,$00 ; J
  368 D1:B3B1 C6 CC D8 F0 
              D8 CC C6 00 .db	$C6,$CC,$D8,$F0,$D8,$CC,$C6,$00 ; K
  369 D1:B3B9 C0 C0 C0 C0 
              C0 C0 FE 00 .db	$C0,$C0,$C0,$C0,$C0,$C0,$FE,$00 ; L
  370 D1:B3C1 C6 EE FE FE 
              D6 C6 C6 00 .db	$C6,$EE,$FE,$FE,$D6,$C6,$C6,$00 ; M
  371 D1:B3C9 C6 E6 F6 DE 
              CE C6 C6 00 .db	$C6,$E6,$F6,$DE,$CE,$C6,$C6,$00 ; N
  372 D1:B3D1 7C C6 C6 C6 
              C6 C6 7C 00 .db	$7C,$C6,$C6,$C6,$C6,$C6,$7C,$00 ; O
  373 D1:B3D9 FC C6 C6 FC 
              C0 C0 C0 00 .db	$FC,$C6,$C6,$FC,$C0,$C0,$C0,$00 ; P
  374 D1:B3E1 7C C6 C6 C6 
              D6 DE 7C 06 .db	$7C,$C6,$C6,$C6,$D6,$DE,$7C,$06 ; Q
  375 D1:B3E9 FC C6 C6 FC 
              D8 CC C6 00 .db	$FC,$C6,$C6,$FC,$D8,$CC,$C6,$00 ; R
  376 D1:B3F1 7C C6 C0 7C 
              06 C6 7C 00 .db	$7C,$C6,$C0,$7C,$06,$C6,$7C,$00 ; S
  377 D1:B3F9 FF 18 18 18 
              18 18 18 00 .db	$FF,$18,$18,$18,$18,$18,$18,$00 ; T
  378 D1:B401 C6 C6 C6 C6 
              C6 C6 FE 00 .db	$C6,$C6,$C6,$C6,$C6,$C6,$FE,$00 ; U
  379 D1:B409 C6 C6 C6 C6 
              C6 7C 38 00 .db	$C6,$C6,$C6,$C6,$C6,$7C,$38,$00 ; V
  380 D1:B411 C6 C6 C6 C6 
              D6 FE 6C 00 .db	$C6,$C6,$C6,$C6,$D6,$FE,$6C,$00 ; W
  381 D1:B419 C6 C6 6C 38 
              6C C6 C6 00 .db	$C6,$C6,$6C,$38,$6C,$C6,$C6,$00 ; X
  382 D1:B421 C6 C6 C6 7C 
              18 30 E0 00 .db	$C6,$C6,$C6,$7C,$18,$30,$E0,$00 ; Y
  383 D1:B429 FE 06 0C 18 
              30 60 FE 00 .db	$FE,$06,$0C,$18,$30,$60,$FE,$00 ; Z
  384 D1:B431 F0 C0 C0 C0 
              C0 C0 F0 00 .db	$F0,$C0,$C0,$C0,$C0,$C0,$F0,$00 ; [
  385 D1:B439 C0 60 30 18 
              0C 06 02 00 .db	$C0,$60,$30,$18,$0C,$06,$02,$00 ; \
  386 D1:B441 F0 30 30 30 
              30 30 F0 00 .db	$F0,$30,$30,$30,$30,$30,$F0,$00 ; ]
  387 D1:B449 10 38 6C C6 
              00 00 00 00 .db	$10,$38,$6C,$C6,$00,$00,$00,$00 ; ^
  388 D1:B451 00 00 00 00 
              00 00 00 FF .db	$00,$00,$00,$00,$00,$00,$00,$FF ; _
  389 D1:B459 C0 C0 60 00 
              00 00 00 00 .db	$C0,$C0,$60,$00,$00,$00,$00,$00 ; `
  390 D1:B461 00 00 7C 06 
              7E C6 7E 00 .db	$00,$00,$7C,$06,$7E,$C6,$7E,$00 ; a
  391 D1:B469 C0 C0 C0 FC 
              C6 C6 FC 00 .db	$C0,$C0,$C0,$FC,$C6,$C6,$FC,$00 ; b
  392 D1:B471 00 00 7C C6 
              C0 C6 7C 00 .db	$00,$00,$7C,$C6,$C0,$C6,$7C,$00 ; c
  393 D1:B479 06 06 06 7E 
              C6 C6 7E 00 .db	$06,$06,$06,$7E,$C6,$C6,$7E,$00 ; d
  394 D1:B481 00 00 7C C6 
              FE C0 7C 00 .db	$00,$00,$7C,$C6,$FE,$C0,$7C,$00 ; e
  395 D1:B489 1C 36 30 78 
              30 30 78 00 .db	$1C,$36,$30,$78,$30,$30,$78,$00 ; f
  396 D1:B491 00 00 7E C6 
              C6 7E 06 FC .db	$00,$00,$7E,$C6,$C6,$7E,$06,$FC ; g
  397 D1:B499 C0 C0 FC C6 
              C6 C6 C6 00 .db	$C0,$C0,$FC,$C6,$C6,$C6,$C6,$00 ; h
  398 D1:B4A1 18 00 38 18 
              18 18 3C 00 .db	$18,$00,$38,$18,$18,$18,$3C,$00 ; i
  399 D1:B4A9 06 00 06 06 
              06 06 C6 7C .db	$06,$00,$06,$06,$06,$06,$C6,$7C ; j
  400 D1:B4B1 C0 C0 CC D8 
              F8 CC C6 00 .db	$C0,$C0,$CC,$D8,$F8,$CC,$C6,$00 ; k
  401 D1:B4B9 38 18 18 18 
              18 18 3C 00 .db	$38,$18,$18,$18,$18,$18,$3C,$00 ; l
  402 D1:B4C1 00 00 CC FE 
              FE D6 D6 00 .db	$00,$00,$CC,$FE,$FE,$D6,$D6,$00 ; m
  403 D1:B4C9 00 00 FC C6 
              C6 C6 C6 00 .db	$00,$00,$FC,$C6,$C6,$C6,$C6,$00 ; n
  404 D1:B4D1 00 00 7C C6 
              C6 C6 7C 00 .db	$00,$00,$7C,$C6,$C6,$C6,$7C,$00 ; o
  405 D1:B4D9 00 00 FC C6 
              C6 FC C0 C0 .db	$00,$00,$FC,$C6,$C6,$FC,$C0,$C0 ; p
  406 D1:B4E1 00 00 7E C6 
              C6 7E 06 06 .db	$00,$00,$7E,$C6,$C6,$7E,$06,$06 ; q
  407 D1:B4E9 00 00 FC C6 
              C0 C0 C0 00 .db	$00,$00,$FC,$C6,$C0,$C0,$C0,$00 ; r
  408 D1:B4F1 00 00 7E C0 
              7C 06 FC 00 .db	$00,$00,$7E,$C0,$7C,$06,$FC,$00 ; s
  409 D1:B4F9 30 30 FC 30 
              30 30 1C 00 .db	$30,$30,$FC,$30,$30,$30,$1C,$00 ; t
  410 D1:B501 00 00 C6 C6 
              C6 C6 7E 00 .db	$00,$00,$C6,$C6,$C6,$C6,$7E,$00 ; u
  411 D1:B509 00 00 C6 C6 
              C6 7C 38 00 .db	$00,$00,$C6,$C6,$C6,$7C,$38,$00 ; v
  412 D1:B511 00 00 C6 C6 
              D6 FE 6C 00 .db	$00,$00,$C6,$C6,$D6,$FE,$6C,$00 ; w
  413 D1:B519 00 00 C6 6C 
              38 6C C6 00 .db	$00,$00,$C6,$6C,$38,$6C,$C6,$00 ; x
  414 D1:B521 00 00 C6 C6 
              C6 7E 06 FC .db	$00,$00,$C6,$C6,$C6,$7E,$06,$FC ; y
  415 D1:B529 00 00 FE 0C 
              38 60 FE 00 .db	$00,$00,$FE,$0C,$38,$60,$FE,$00 ; z
  416 D1:B531 1C 30 30 E0 
              30 30 1C 00 .db	$1C,$30,$30,$E0,$30,$30,$1C,$00 ; {
  417 D1:B539 C0 C0 C0 00 
              C0 C0 C0 00 .db	$C0,$C0,$C0,$00,$C0,$C0,$C0,$00 ; |
  418 D1:B541 E0 30 30 1C 
              30 30 E0 00 .db	$E0,$30,$30,$1C,$30,$30,$E0,$00 ; }
  419 D1:B549 76 DC 00 00 
              00 00 00 00 .db	$76,$DC,$00,$00,$00,$00,$00,$00 ; ~
  420 D1:B551 00 10 38 6C 
              C6 C6 FE 00 .db	$00,$10,$38,$6C,$C6,$C6,$FE,$00 ; △
  421 D1:B559 -  -  -  -  
  422 D1:B559 -  -  -  -  ;Copied from the Escheron: Twilight over Ragnoth project
  423 D1:B559 -  -  -  -  ;whose format was copied from a (then-)authorized source
  424 D1:B559 -  -  -  -  ;for DoorsCS (I think? The one for the 83+) by "Kerm Martian".
  425 D1:B559 -  -  -  -  SmallHexFont:
  426 D1:B559 4E AA AE -  .db $4E,$AA,$AE				;zero
  427 D1:B55C 44 C4 4E -  .db $44,$C4,$4E				;one
  428 D1:B55F 4C 24 8E -  .db $4C,$24,$8E				;two
  429 D1:B562 4C 24 2C -  .db $4C,$24,$2C				;three
  430 D1:B565 48 AE 22 -  .db $48,$AE,$22				;four
  431 D1:B568 4E 8C 2C -  .db $4E,$8C,$2C				;five
  432 D1:B56B 46 8E AE -  .db $46,$8E,$AE				;six
  433 D1:B56E 4E 24 88 -  .db $4E,$24,$88				;seven
  434 D1:B571 4E AE AE -  .db $4E,$AE,$AE				;eight
  435 D1:B574 4E AE 2C -  .db $4E,$AE,$2C				;nine
  436 D1:B577 44 AE AA -  .db $44,$AE,$AA				;A
  437 D1:B57A 4C AC AC -  .db $4C,$AC,$AC				;B
  438 D1:B57D 46 88 86 -  .db $46,$88,$86				;C
  439 D1:B580 4C AA AC -  .db $4C,$AA,$AC				;D
  440 D1:B583 4E 8C 8E -  .db $4E,$8C,$8E				;E
  441 D1:B586 4E 8C 88 -  .db $4E,$8C,$88				;F
  442 D1:B589 -  -  -  -  
  443 D1:B589 -  -  -  -  
  444 D1:B589 -  -  -  -  
Listing for file "main.z80"
  959 D1:B589 -  -  -  -  #include "coreint.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\coreint.z80"
    1 D1:B589 -  -  -  -  ; Code to handle interrup servicer. Note: This hinges on 
    2 D1:B589 -  -  -  -  ; PPU timing, so some of its initilization code will end up here too.
    3 D1:B589 -  -  -  -  ;
    4 D1:B589 -  -  -  -  
    5 D1:B589 -  -  -  -  
    6 D1:B589 -  -  -  -  ;This routine is called after the end of every insert/push/pop operation
    7 D1:B589 -  -  -  -  int6502_updateIntCounter:
    8 D1:B589 21 60 34 D0     ld  hl,int_table_len
    9 D1:B58D 7E -  -  -      ld  a,(hl)
   10 D1:B58E B7 -  -  -      or  a,a
   11 D1:B58F C8 -  -  -      ret z
   12 D1:B590 23 -  -  -      inc hl  ;advance to first pointer
   13 D1:B591 23 -  -  -      inc hl
   14 D1:B592 23 -  -  -      inc hl
   15 D1:B593 23 -  -  -      inc hl  ;advanced to first time
   16 D1:B594 ED 27 -  -      ld  hl,(hl)
   17 D1:B596 -  -  -  -      ;neg hl
   18 D1:B596 DD 2F 1B -      ld  (ix+TEMP_MEMORY),hl
   19 D1:B599 DD 7E 1D -      ld  a,(ix+TEMP_MEMORY+2)
   20 D1:B59C 2F -  -  -      cpl
   21 D1:B59D DD 77 1D -      ld  (ix+TEMP_MEMORY+2),a
   22 D1:B5A0 DD 27 1B -      ld  hl,(ix+TEMP_MEMORY)
   23 D1:B5A3 7D -  -  -      ld  a,l
   24 D1:B5A4 2F -  -  -      cpl
   25 D1:B5A5 6F -  -  -      ld  l,a
   26 D1:B5A6 7C -  -  -      ld  a,h
   27 D1:B5A7 2F -  -  -      cpl
   28 D1:B5A8 67 -  -  -      ld  h,a
   29 D1:B5A9 23 -  -  -      inc hl
   30 D1:B5AA -  -  -  -      ;load to clock counter in "core.z80"
   31 D1:B5AA 22 2E B7 D1     ld  (i6502_interrupt_timer),hl
   32 D1:B5AE C9 -  -  -      ret
   33 D1:B5AF -  -  -  -  
   34 D1:B5AF -  -  -  -  int6502_init:
   35 D1:B5AF AF -  -  -      xor a,a
   36 D1:B5B0 32 60 34 D0     ld  (int_table_len),a
   37 D1:B5B4 C9 -  -  -      ret
   38 D1:B5B5 -  -  -  -  
   39 D1:B5B5 -  -  -  -  
   40 D1:B5B5 -  -  -  -  ;Only call this inside the NMI handler, since that is the routine that adjusts
   41 D1:B5B5 -  -  -  -  ;the cycle counter downard. All entries that remain on the table will by
   42 D1:B5B5 -  -  -  -  ;have a higher count than the NMI. The table's probably empty, though.
   43 D1:B5B5 -  -  -  -  ;BC=timeToAdjust IX=thing
   44 D1:B5B5 -  -  -  -  int6502_adjustTimings:
   45 D1:B5B5 DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
   46 D1:B5BA DD 7E FF -      ld  a,(ix-1)
   47 D1:B5BD B7 -  -  -      or  a,a
   48 D1:B5BE 20 0F -  -      jr  nz,int6502_adjustTimings_noAdjust
   49 D1:B5C0 -  -  -  -  int6502_adjustTimings_loop:
   50 D1:B5C0 DD 27 03 -      ld  hl,(ix+INT_CYCLE_OFFSET)
   51 D1:B5C3 B7 -  -  -      or  a,a
   52 D1:B5C4 ED 42 -  -      sbc hl,bc
   53 D1:B5C6 DD 2F 03 -      ld  (ix+INT_CYCLE_OFFSET),hl
   54 D1:B5C9 ED 32 06 -      lea ix,ix+INT_TABLE_STRIDE
   55 D1:B5CC 3D -  -  -      dec a
   56 D1:B5CD 20 F1 -  -      jr  nz,int6502_adjustTimings_loop
   57 D1:B5CF -  -  -  -  int6502_adjustTimings_noAdjust:
   58 D1:B5CF DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   59 D1:B5D4 C9 -  -  -      ret
   60 D1:B5D5 -  -  -  -  
   61 D1:B5D5 -  -  -  -  ;DE=ISRToPush, BC=CallWhenThisClockIsPassed
   62 D1:B5D5 -  -  -  -  ;This routine is called in the ISR handler to both acknowledge the consumption
   63 D1:B5D5 -  -  -  -  ;of its turn at the ISR, and to (potentially) push another entry to the stack.
   64 D1:B5D5 -  -  -  -  ;This does not affect ths size of a table since this is a combined
   65 D1:B5D5 -  -  -  -  ;pop-and-insert operation
   66 D1:B5D5 -  -  -  -  int6502_pushISRAfterPop:
   67 D1:B5D5 DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
   68 D1:B5DA DD 7E FF -      ld  a,(ix-1)        ;length of the table
   69 D1:B5DD B7 -  -  -      or  a,a
   70 D1:B5DE 20 13 -  -      jr  nz,int6502_pushISRAfterPop_keepChecking
   71 D1:B5E0 -  -  -  -  int6502_pushISRAfterPop_writeFirstEntry:
   72 D1:B5E0 DD 36 FF 01     ld  (ix-1),1
   73 D1:B5E4 -  -  -  -  int6502_pushISRAfterPop_writeEntry:
   74 D1:B5E4 DD 1F 00 -      ld  (ix+0),de
   75 D1:B5E7 DD 0F 03 -      ld  (ix+3),bc
   76 D1:B5EA DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   77 D1:B5EF C3 89 B5 D1     jp  int6502_updateIntCounter
   78 D1:B5F3 -  -  -  -  int6502_pushISRAfterPop_keepChecking:
   79 D1:B5F3 3D -  -  -      dec a
   80 D1:B5F4 28 EA -  -      jr  z,int6502_pushISRAfterPop_writeFirstEntry
   81 D1:B5F6 -  -  -  -      ;Loop steps:
   82 D1:B5F6 -  -  -  -      ;If not loopCounter or BC < ix[0].T:
   83 D1:B5F6 -  -  -  -      ;   ix[-1] = DE,BC
   84 D1:B5F6 -  -  -  -      ;   STOP.
   85 D1:B5F6 -  -  -  -      ;Else:
   86 D1:B5F6 -  -  -  -      ;   ix[-1] = ix[0]
   87 D1:B5F6 -  -  -  -      ;   ix += STRIDE
   88 D1:B5F6 -  -  -  -      ;   --loopCounter;
   89 D1:B5F6 -  -  -  -  int6502_pushISRAfterPop_loop:
   90 D1:B5F6 ED 32 06 -      lea ix,ix+INT_TABLE_STRIDE
   91 D1:B5F9 B7 -  -  -      or  a,a
   92 D1:B5FA 28 E8 -  -      jr  z,int6502_pushISRAfterPop_writeEntry
   93 D1:B5FC DD 27 03 -      ld  hl,(ix+INT_CYCLE_OFFSET)
   94 D1:B5FF ED 42 -  -      sbc hl,bc   ;C if ix[0]<BC
   95 D1:B601 38 E1 -  -      jr  c,int6502_pushISRAfterPop_writeEntry
   96 D1:B603 DD 27 00 -      ld  hl,(ix+INT_ADDR_OFFSET)
   97 D1:B606 DD 2F FA -      ld  (ix+INT_ADDR_OFFSET-INT_TABLE_STRIDE),hl
   98 D1:B609 DD 27 03 -      ld  hl,(ix+INT_CYCLE_OFFSET)
   99 D1:B60C DD 2F FD -      ld  (ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE),hl
  100 D1:B60F 3D -  -  -      dec a
  101 D1:B610 18 E4 -  -      jr int6502_pushISRAfterPop_loop
  102 D1:B612 -  -  -  -      
  103 D1:B612 -  -  -  -  ;DE=ISRToPush, BC=CallWhenThisClockIsPassed
  104 D1:B612 -  -  -  -  ;This actually adds an entry to the stack.
  105 D1:B612 -  -  -  -  int6502_insertISA:
  106 D1:B612 DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
  107 D1:B617 DD 7E FF -      ld  a,(ix-1)
  108 D1:B61A B7 -  -  -      or  a,a
  109 D1:B61B 28 C3 -  -      jr  z,int6502_pushISRAfterPop_writeFirstEntry
  110 D1:B61D FE 08 -  -      cp  a,INT_TABLE_MAXLEN
  111 D1:B61F C8 -  -  -      ret z       ;do not attempt to insert if table is maxed out
  112 D1:B620 C5 -  -  -      push bc
  113 D1:B621 47 -  -  -          ld  b,a
  114 D1:B622 0E 06 -  -          ld  c,INT_TABLE_STRIDE
  115 D1:B624 ED 4C -  -          mlt bc
  116 D1:B626 DD 09 -  -          add ix,bc   ;at end of table
  117 D1:B628 C1 -  -  -      pop bc
  118 D1:B629 -  -  -  -      ;Loop details. IX points at entry after last:
  119 D1:B629 -  -  -  -      ;if not loopCtr or ix[-1].T < BC:
  120 D1:B629 -  -  -  -      ;   ix[0] = DE,BC , STOP.
  121 D1:B629 -  -  -  -      ;else:
  122 D1:B629 -  -  -  -      ;   ix[0] = ix[-1], ix-=STRIDE, loopCtr--
  123 D1:B629 -  -  -  -  int6502_insertISA_Loop:
  124 D1:B629 B7 -  -  -      or  a,a
  125 D1:B62A 28 B4 -  -      jr  z,int6502_pushISRAfterPop_writeFirstEntry
  126 D1:B62C DD 27 FD -      ld  hl,(ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE)
  127 D1:B62F ED 42 -  -      sbc hl,bc   ;C if ix[-1]<BC
  128 D1:B631 30 AD -  -      jr  nc,int6502_pushISRAfterPop_writeFirstEntry
  129 D1:B633 DD 27 FA -      ld  hl,(ix+INT_ADDR_OFFSET-INT_TABLE_STRIDE)
  130 D1:B636 DD 2F 00 -      ld  (ix+INT_ADDR_OFFSET),hl
  131 D1:B639 DD 27 FD -      ld  hl,(ix+INT_CYCLE_OFFSET-INT_TABLE_STRIDE)
  132 D1:B63C DD 2F 03 -      ld  (ix+INT_CYCLE_OFFSET),hl
  133 D1:B63F ED 32 FA -      lea ix,ix-INT_TABLE_STRIDE
  134 D1:B642 3D -  -  -      dec a
  135 D1:B643 18 E4 -  -      jr int6502_insertISA_Loop
  136 D1:B645 -  -  -  -      
  137 D1:B645 -  -  -  -  
  138 D1:B645 -  -  -  -  int6502_removeTop:
  139 D1:B645 DD 21 61 34 
              D0 -  -  -      ld  ix,INT_TABLE
  140 D1:B64A DD 7E FF -      ld  a,(ix-1)
  141 D1:B64D B7 -  -  -      or  a,a
  142 D1:B64E 28 1B -  -      jr  z,+_
  143 D1:B650 DD 35 FF -      dec (ix-1)
  144 D1:B653 4F -  -  -      ld  c,a
  145 D1:B654 06 06 -  -      ld  b,INT_TABLE_STRIDE
  146 D1:B656 ED 4C -  -      mlt bc
  147 D1:B658 ED 32 06 -      lea ix,ix+INT_TABLE_STRIDE
  148 D1:B65B ED 12 FA -      lea de,ix-INT_TABLE_STRIDE
  149 D1:B65E ED 22 00 -      lea hl,ix+0
  150 D1:B661 ED B0 -  -      ldir
  151 D1:B663 D5 -  -  -      push de
  152 D1:B664 E1 -  -  -      pop hl
  153 D1:B665 13 -  -  -      inc de
  154 D1:B666 71 -  -  -      ld  (hl),c
  155 D1:B667 0E 05 -  -      ld  c,INT_TABLE_STRIDE-1
  156 D1:B669 ED B0 -  -      ldir
  157 D1:B66B DD 21 80 32 
              D0 -  -  -  _:  ld ix,core_memory_ix
  158 D1:B670 C3 89 B5 D1     jp int6502_updateIntCounter
  159 D1:B674 -  -  -  -  
  160 D1:B674 -  -  -  -  
  161 D1:B674 -  -  -  -  
  162 D1:B674 -  -  -  -  
  163 D1:B674 -  -  -  -  
  164 D1:B674 -  -  -  -  
  165 D1:B674 -  -  -  -  
  166 D1:B674 -  -  -  -  
  167 D1:B674 -  -  -  -  
  168 D1:B674 -  -  -  -  
  169 D1:B674 -  -  -  -  
  170 D1:B674 -  -  -  -  
  171 D1:B674 -  -  -  -  
  172 D1:B674 -  -  -  -  
Listing for file "main.z80"
  960 D1:B674 -  -  -  -  #include "core.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    1 D1:B674 -  -  -  -  #include "defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\defs.inc"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
    2 D1:B674 -  -  -  -  
    3 D1:B674 -  -  -  -  ;TODO: DEFINE MEMORY ACCESS MACROS. ONE OR MORE FOR READ AND WRITE.
    4 D1:B674 -  -  -  -  ;FIGURE OUT HOW TO GET BOTH HIGH AND LOW BYTE OF ORIGINAL ADDRESS
    5 D1:B674 -  -  -  -  ;AND PERFORM ALTERNATE ACTIONS BASED ON WHAT HARDWARE WAS ACCESSED.
    6 D1:B674 -  -  -  -  ;NOTE: PATTERN SHOWS THAT D=MSB, C=LSB OF 6502 ADDRESS. USE THIS.
    7 D1:B674 -  -  -  -  ;
    8 D1:B674 -  -  -  -  ;THESE MACROS ARE PLACEHOLDERS. CHANGE THEM LATER ON TO REFLECT ACTUAL
    9 D1:B674 -  -  -  -  ;HARDWARE SHENANIGANS.
   10 D1:B674 -  -  -  -  ;
   11 D1:B674 -  -  -  -  ;NOTE: WRITE ACCESSES RELY ON KNOWING WHAT DATA TO WRITE. CAN'T STORE THAT IN A
   12 D1:B674 -  -  -  -  ;      SINCE WE NEED TO DO CONDITIONING. REGISTER B IS UNUSED SO LET'S USE THAT.
   13 D1:B674 -  -  -  -  ;
   14 D1:B674 -  -  -  -  #define READ_ACCESS call mapper0_read
   15 D1:B674 -  -  -  -  #define WRITE_ACCESS call mapper0_write
   16 D1:B674 -  -  -  -  ;Later, put in actual test. Z if not triggered, NZ if triggered. This
   17 D1:B674 -  -  -  -  ;alters the behavior of the BRK instruction.
   18 D1:B674 -  -  -  -  #define WAS_NMI_TRIGGERED bit 0,(ix+NMI_TRIGGERED)
   19 D1:B674 -  -  -  -  
   20 D1:B674 -  -  -  -  #define OPRFLG_C res SF_CARRY,b \ jr nc,$+4 \ set SF_CARRY,b
   21 D1:B674 -  -  -  -  #define OPRFLG_V res SF_OVER,b \ jp po,$+6 \ set SF_OVER,b
   22 D1:B674 -  -  -  -  #define OPRFLG_Z res SF_ZERO,b \ jr nz,$+4 \ set SF_ZERO,b
   23 D1:B674 -  -  -  -  #define OPRFLG_N res SF_NEG,b \ jr nc,$+4 \ set SF_NEG,b
   24 D1:B674 -  -  -  -  
   25 D1:B674 -  -  -  -  #define FLAGS_ZN ld b,(ix+REGSR) \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   26 D1:B674 -  -  -  -  #define FLAGS_CZN ld b,(ix+REGSR) \ OPRFLG_C \ rlc a  \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   27 D1:B674 -  -  -  -  #define FLAGS_VCZN ld b,(ix+REGSR) \ OPRFLG_V \ OPRFLG_C \ rlc a \ OPRFLG_Z \ OPRFLG_N \ ld (ix+REGSR),b
   28 D1:B674 -  -  -  -  
   29 D1:B674 -  -  -  -  
   30 D1:B674 -  -  -  -  ;Modify later to include provisions for hardware i/o based on page
   31 D1:B674 -  -  -  -  #define HW_READ(src_reg) ld a,(src_reg)
   32 D1:B674 -  -  -  -  #define HW_WRITE(dst_reg) ld (dst_reg),a
   33 D1:B674 -  -  -  -  
   34 D1:B674 -  -  -  -  
   35 D1:B674 -  -  -  -  
   36 D1:B674 -  -  -  -  
   37 D1:B674 -  -  -  -  ;=============================================================================
   38 D1:B674 -  -  -  -  ;=============================================================================
   39 D1:B674 -  -  -  -  ;=============================================================================
   40 D1:B674 -  -  -  -  ;=============================================================================
   41 D1:B674 -  -  -  -  ;You should have set up the mappings already. This is because
   42 D1:B674 -  -  -  -  ;mappings are program-dependant. Only $0000-$3FFF will be mapped in here
   43 D1:B674 -  -  -  -  ;more or less because I don't expect anything else to map that.
   44 D1:B674 -  -  -  -  i6502Init:
   45 D1:B674 -  -  -  -      ;
   46 D1:B674 -  -  -  -      ; At this point, you may need to randomize 2048 bytes at main_ram
   47 D1:B674 -  -  -  -      ;
   48 D1:B674 21 00 38 D0     ld  hl,main_ram
   49 D1:B678 01 08 20 00     ld  bc,$002008
   50 D1:B67C 1E 00 -  -      ld  e,$00
   51 D1:B67E CD 7A B7 D1     call i6502_map_pages
   52 D1:B682 21 00 33 D0     ld  hl,scrap_mapping
   53 D1:B686 01 01 20 00     ld  bc,$002001
   54 D1:B68A 1E 20 -  -      ld  e,$20
   55 D1:B68C CD 7A B7 D1     call i6502_map_pages
   56 D1:B690 CD 61 B7 D1     call i6502_load_instruction_set
   57 D1:B694 -  -  -  -      ;
   58 D1:B694 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
   59 D1:B699 FD 21 08 00 
              00 -  -  -      ld  iy,8    ;8 cycle startup. Hooking into inst6502_jsr for init
   60 D1:B69E ED 22 00 -      lea hl,ix
   61 D1:B6A1 ED 12 01 -      lea de,ix+1
   62 D1:B6A4 01 7E 00 00     ld  bc,126
   63 D1:B6A8 36 00 -  -      ld  (hl),$00
   64 D1:B6AA ED B0 -  -      ldir
   65 D1:B6AC -  -  -  -      ;
   66 D1:B6AC 21 00 00 00     ld  hl,0
   67 D1:B6B0 39 -  -  -      add hl,sp
   68 D1:B6B1 DD 2F 11 -      ld  (ix+CORE_STACK_BASE),hl
   69 D1:B6B4 -  -  -  -      ;
   70 D1:B6B4 DD 36 03 FD     ld  (ix+REGSP),$FD  ;init does a BRK-like action without the actual pushes.
   71 D1:B6B8 DD 36 04 24     ld  (ix+REGSR),$24  ;Presumably, this is what status register starts with?
   72 D1:B6BC 21 F4 4B D0     ld  hl,PAGETABLE+(255*BASETABLE_STRIDE)
   73 D1:B6C0 ED 27 -  -      ld  hl,(hl)
   74 D1:B6C2 11 FC 00 00     ld  de,$0000FC
   75 D1:B6C6 19 -  -  -      add hl,de
   76 D1:B6C7 ED 27 -  -      ld  hl,(hl) ;get RST vector
   77 D1:B6C9 52 DD 2F 05     ld.s (ix+REGPC),hl
   78 D1:B6CD -  -  -  -      ;-- debug stuff. Timer things.
   79 D1:B6CD 3A 30 00 F2     ld  a,($F20030)
   80 D1:B6D1 CB C7 -  -      set 0,a ;turn on timer 1
   81 D1:B6D3 32 30 00 F2     ld  ($F20030),a
   82 D1:B6D7 -  -  -  -      ; Core initialized. Begin fetching instructions
   83 D1:B6D7 18 07 -  -      jr  i6502FirstLoad
   84 D1:B6D9 -  -  -  -  
   85 D1:B6D9 -  -  -  -  i6502RetryFirstLoad:    ;reentrant from ISR handler
   86 D1:B6D9 52 DD 17 05     ld.s de,(ix+REGPC)
   87 D1:B6DD 1B -  -  -      dec de
   88 D1:B6DE 18 04 -  -      jr +_
   89 D1:B6E0 -  -  -  -  i6502FirstLoad:
   90 D1:B6E0 52 DD 17 05     ld.s de,(ix+REGPC)
   91 D1:B6E4 7B -  -  -  _:  ld  a,e
   92 D1:B6E5 1E 0C -  -      ld  e,BASETABLE_STRIDE
   93 D1:B6E7 ED 5C -  -      mlt de
   94 D1:B6E9 21 00 40 D0     ld  hl,PAGETABLE
   95 D1:B6ED 19 -  -  -      add hl,de
   96 D1:B6EE ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
   97 D1:B6F0 16 00 -  -      ld  d,0
   98 D1:B6F2 5F -  -  -      ld  e,a
   99 D1:B6F3 19 -  -  -      add hl,de       ;resolve final address
  100 D1:B6F4 18 19 -  -      jr  i6502FinishLoad
  101 D1:B6F6 -  -  -  -  i6502NextLoad:
  102 D1:B6F6 23 -  -  -      inc hl
  103 D1:B6F7 1C -  -  -      inc e
  104 D1:B6F8 20 15 -  -      jr  nz,i6502FinishLoad
  105 D1:B6FA DD 56 06 -      ld  d,(ix+REGPC+1)
  106 D1:B6FD 14 -  -  -      inc d
  107 D1:B6FE 52 DD 1F 05     ld.s (ix+REGPC),de
  108 D1:B702 1E 0C -  -      ld  e,BASETABLE_STRIDE
  109 D1:B704 ED 5C -  -      mlt de
  110 D1:B706 21 00 40 D0     ld  hl,PAGETABLE
  111 D1:B70A 19 -  -  -      add hl,de
  112 D1:B70B ED 27 -  -      ld  hl,(hl)     ;get address to current page's base
  113 D1:B70D 1E 00 -  -      ld  e,0         ;PCL known to be zero at this point.
  114 D1:B70F -  -  -  -  i6502FinishLoad:
  115 D1:B70F 7E -  -  -      ld  a,(hl)
  116 D1:B710 -  -  -  -  
  117 D1:B710 -  -  -  -  #ifdef COREDEBUG
  118 D1:B710                 ld  (ix+CURRENT_OPCODES+0),a
  119 D1:B710                 ld  (ix+REGPC+0),e
  120 D1:B710             #endif
  121 D1:B710 23 -  -  -      inc hl
  122 D1:B711 1C -  -  -      inc e
  123 D1:B712 20 15 -  -      jr  nz,i6502PrepNextPage
  124 D1:B714 DD 56 06 -      ld  d,(ix+REGPC+1)
  125 D1:B717 14 -  -  -      inc d
  126 D1:B718 52 DD 1F 05     ld.s (ix+REGPC),de
  127 D1:B71C 1E 0C -  -      ld  e,BASETABLE_STRIDE
  128 D1:B71E ED 5C -  -      mlt de
  129 D1:B720 21 00 40 D0     ld  hl,PAGETABLE
  130 D1:B724 19 -  -  -      add hl,de
  131 D1:B725 ED 27 -  -      ld  hl,(hl)
  132 D1:B727 1E 00 -  -      ld  e,0
  133 D1:B729 -  -  -  -  i6502PrepNextPage:
  134 D1:B729 -  -  -  -  #ifdef COREDEBUG
  135 D1:B729                 push af
  136 D1:B729                     ld  a,(hl)
  137 D1:B729                     ld  (ix+CURRENT_OPCODES+1),a
  138 D1:B729                     push de
  139 D1:B729                         push hl
  140 D1:B729                             push ix
  141 D1:B729                                 inc hl
  142 D1:B729                                 inc e
  143 D1:B729                                 jr  nz,+_
  144 D1:B729                                 ld  d,(ix+REGPC+1)
  145 D1:B729                                 inc d
  146 D1:B729                                 ld  e,BASETABLE_STRIDE
  147 D1:B729                                 mlt de
  148 D1:B729                                 ld  hl,PAGETABLE
  149 D1:B729                                 add hl,de
  150 D1:B729                                 ld  hl,(hl)
  151 D1:B729             _:                  ld  a,(hl)
  152 D1:B729                                 ld  (ix+CURRENT_OPCODES+2),a
  153 D1:B729                                 lea hl,ix
  154 D1:B729                                 ld  de,core_memory_ix
  155 D1:B729                                 or  a,a
  156 D1:B729                                 sbc hl,de
  157 D1:B729                                 jr  nz,$    ;halt program if IX is not core_memory_ix
  158 D1:B729                                 ;jr $
  159 D1:B729                                 push iy
  160 D1:B729                                     call dbg_printLine
  161 D1:B729                                 pop iy
  162 D1:B729                                 ld  a,(ix+CORE_ERROR_LEVEL)
  163 D1:B729                                 or  a,a
  164 D1:B729                                 jr  z,+_
  165 D1:B729                                 ld  hl,(ix+CORE_STACK_BASE)
  166 D1:B729                                 ld  sp,hl
  167 D1:B729                                 ret
  168 D1:B729             _:                  ld  iy,(ix+CYCLES_CURRENT)  ;remove when done with timings
  169 D1:B729                                 lea hl,iy+0
  170 D1:B729                                 ld  de,DEBUG_STEP_START_CYCLE
  171 D1:B729                                 or  a,a
  172 D1:B729                                 sbc hl,de
  173 D1:B729                                 call nc,waituntilnewkeypress
  174 D1:B729                             pop ix
  175 D1:B729                         pop hl
  176 D1:B729                     pop de
  177 D1:B729                 pop af
  178 D1:B729             #endif
  179 D1:B729 E5 -  -  -      push hl
  180 D1:B72A ED 23 00 -          lea hl,iy
  181 D1:B72D -  -  -  -  i6502_interrupt_timer   .equ $+1
  182 D1:B72D 01 4C 98 FF         ld  bc,-26548
  183 D1:B731 09 -  -  -          add hl,bc
  184 D1:B732 38 1A -  -          jr  c,i6502_take_interrupt
  185 D1:B734 -  -  -  -  i6502_continue_instruction_fetch:
  186 D1:B734 67 -  -  -          ld  h,a
  187 D1:B735 2E 0C -  -          ld  l,BASETABLE_STRIDE
  188 D1:B737 ED 6C -  -          mlt hl
  189 D1:B739 01 04 40 D0         ld  bc,JUMPTABLE
  190 D1:B73D 09 -  -  -          add hl,bc
  191 D1:B73E ED 27 -  -          ld  hl,(hl)     ;jumptable
  192 D1:B740 E3 -  -  -          ex  (sp),hl     ;exch with exec addr, jumpto-via-ret
  193 D1:B741 C9 -  -  -      ret
  194 D1:B742 -  -  -  -  
  195 D1:B742 -  -  -  -  i6502_no_interrupts:
  196 D1:B742 -  -  -  -          ;This is what happens when you let the core run without setting
  197 D1:B742 -  -  -  -          ;up interrupts. It'll be up to the hardware access subroutines
  198 D1:B742 -  -  -  -          ;to configure interrupts from now on. See "coreint.z80" for
  199 D1:B742 -  -  -  -          ;more information
  200 D1:B742 21 00 00 80         ld  hl,$800000  ;INT_MIN. Prevent retry for as long as possible.
  201 D1:B746 22 4E B7 D1         ld  (i6502_take_interrupt),hl
  202 D1:B74A C3 34 B7 D1         jp  i6502_continue_instruction_fetch
  203 D1:B74E -  -  -  -  
  204 D1:B74E -  -  -  -  i6502_take_interrupt:
  205 D1:B74E 67 -  -  -          ld  h,a
  206 D1:B74F 3A 60 34 D0         ld  a,(int_table_len)
  207 D1:B753 B7 -  -  -          or  a,a
  208 D1:B754 7C -  -  -          ld  a,h
  209 D1:B755 28 EB -  -          jr  z,i6502_no_interrupts
  210 D1:B757 E1 -  -  -      pop hl
  211 D1:B758 AF -  -  -      xor a,a
  212 D1:B759 DD 73 05 -      ld  (ix+REGPC+0),e
  213 D1:B75C 2A 61 34 D0     ld  hl,(INT_TABLE)  ;Find the routines in "coreint.z80" that handles
  214 D1:B760 E9 -  -  -      jp  (hl)            ;and maintains the interrupt table being used here.
  215 D1:B761 -  -  -  -  
  216 D1:B761 -  -  -  -  
  217 D1:B761 -  -  -  -  ;Instructions one byte wide returns to the main loop via:
  218 D1:B761 -  -  -  -  ;   JP i6502FinishLoad
  219 D1:B761 -  -  -  -  ;Those with parameters have HL at the address in quetion, and is expected to
  220 D1:B761 -  -  -  -  ;advance HL and E at the end of the instruction. You return to main loop via:
  221 D1:B761 -  -  -  -  ;   JP i6502NextLoad
  222 D1:B761 -  -  -  -  ;Unless you manually advance the pointer to the next instruction.
  223 D1:B761 -  -  -  -  ;You really shouldn't but if you must do that, then also do this:
  224 D1:B761 -  -  -  -  ;   JP i6502FinishLoad
  225 D1:B761 -  -  -  -  ;Remember that register E is very important; it tells you about page boundaries.
  226 D1:B761 -  -  -  -  
  227 D1:B761 -  -  -  -  
  228 D1:B761 -  -  -  -  ;-----------------------------------------------------------------------------
  229 D1:B761 -  -  -  -  ;-----------------------------------------------------------------------------
  230 D1:B761 -  -  -  -  ;-----------------------------------------------------------------------------
  231 D1:B761 -  -  -  -  
  232 D1:B761 -  -  -  -  ;  ***  *   * ****  ****   ***  *   * ***** ***** **  * *****  ***  
  233 D1:B761 -  -  -  -  ; *     *   * *   * *   * *   * *   *   *     *   **  * *     *     
  234 D1:B761 -  -  -  -  ;  ***  *   * ****  ****  *   * *   *   *     *   * * * ***    ***  
  235 D1:B761 -  -  -  -  ;     * *   * *   * *   * *   * *   *   *     *   *  ** *         * 
  236 D1:B761 -  -  -  -  ;  ***   ***  ****  *   *  ***   ***    *   ***** *  ** *****  ***  
  237 D1:B761 -  -  -  -  
  238 D1:B761 -  -  -  -  ;-----------------------------------------------------------------------------
  239 D1:B761 -  -  -  -  
  240 D1:B761 -  -  -  -  i6502_load_instruction_set:
  241 D1:B761 DD 21 04 40 
              D0 -  -  -      ld  ix,JUMPTABLE
  242 D1:B766 21 D3 DA D1     ld  hl,inst6502_instruction_set
  243 D1:B76A 06 00 -  -      ld  b,0
  244 D1:B76C ED 17 -  -  _:  ld  de,(hl)
  245 D1:B76E DD 1F 00 -      ld  (ix+0),de
  246 D1:B771 23 -  -  -      inc hl
  247 D1:B772 23 -  -  -      inc hl
  248 D1:B773 23 -  -  -      inc hl
  249 D1:B774 ED 32 0C -      lea ix,ix+BASETABLE_STRIDE
  250 D1:B777 10 F3 -  -      djnz -_
  251 D1:B779 C9 -  -  -      ret
  252 D1:B77A -  -  -  -  
  253 D1:B77A -  -  -  -  ;HL=Base_ez80_address, C=Numpages_in_map, B=numpages_in_space, E=starting_page
  254 D1:B77A -  -  -  -  ;Example: To map and mirror 2KB RAM at $D03800 inside first 8KB of 6502 space
  255 D1:B77A -  -  -  -  ;HL=$D03800, C=$08, B=$20, E=$00
  256 D1:B77A -  -  -  -  ;Note: B should be a power of two and evenly divisible by C.
  257 D1:B77A -  -  -  -  i6502_map_pages:
  258 D1:B77A 16 0C -  -      ld  d,BASETABLE_STRIDE
  259 D1:B77C ED 5C -  -      mlt de
  260 D1:B77E DD 21 00 40 
              D0 -  -  -      ld  ix,PAGETABLE
  261 D1:B783 DD 19 -  -      add ix,de
  262 D1:B785 78 -  -  -      ld  a,b     ;A = main counter for total number of pages in mapping space
  263 D1:B786 11 00 01 00     ld  de,256
  264 D1:B78A E5 -  -  -      push hl
  265 D1:B78B FD E1 -  -      pop iy
  266 D1:B78D 41 -  -  -  _:  ld  b,c     ;looping for number of pages to map
  267 D1:B78E DD 2F 00 -  _:  ld  (ix+0),hl
  268 D1:B791 19 -  -  -      add hl,de                   ;next page z80
  269 D1:B792 ED 32 0C -      lea ix,ix+BASETABLE_STRIDE  ;next page entry
  270 D1:B795 3D -  -  -      dec a
  271 D1:B796 C8 -  -  -      ret z
  272 D1:B797 10 F5 -  -      djnz -_
  273 D1:B799 ED 23 00 -      lea hl,iy+0     ;start z80 pages over again for mirroring
  274 D1:B79C 18 EF -  -      jr --_
  275 D1:B79E -  -  -  -  
  276 D1:B79E -  -  -  -  
  277 D1:B79E -  -  -  -  subroutine6502_abs_split_start:
  278 D1:B79E 4E -  -  -      ld  c,(hl)
  279 D1:B79F 23 -  -  -      inc hl
  280 D1:B7A0 1C -  -  -      inc e
  281 D1:B7A1 20 15 -  -      jr nz,+_
  282 D1:B7A3 DD 56 06 -      ld  d,(ix+REGPC+1)
  283 D1:B7A6 14 -  -  -      inc d
  284 D1:B7A7 52 DD 1F 05     ld.s (ix+REGPC),de
  285 D1:B7AB 1E 0C -  -      ld  e,BASETABLE_STRIDE
  286 D1:B7AD ED 5C -  -      mlt de
  287 D1:B7AF 21 00 40 D0     ld  hl,PAGETABLE
  288 D1:B7B3 19 -  -  -      add hl,de
  289 D1:B7B4 ED 27 -  -      ld  hl,(hl) ;
  290 D1:B7B6 1E 00 -  -      ld  e,0
  291 D1:B7B8 46 -  -  -  _:  ld  b,(hl)
  292 D1:B7B9 C9 -  -  -      ret
  293 D1:B7BA -  -  -  -  
  294 D1:B7BA -  -  -  -  #define PUSH_ABSXSPLIT call subroutine6502_absx_split_start
  295 D1:B7BA -  -  -  -  #define PUSH_ABSXSPLIT_NODEP call subroutine6502_absx_ss_noDep
  296 D1:B7BA -  -  -  -  #define PUSH_ABSYSPLIT call subroutine6502_absy_split_start
  297 D1:B7BA -  -  -  -  #define PUSH_ABSYSPLIT_NODEP call subroutine6502_absy_ss_noDep
  298 D1:B7BA -  -  -  -  
  299 D1:B7BA -  -  -  -  subroutine6502_absy_split_start:
  300 D1:B7BA DD 4E 02 -      ld  c,(ix+REGY)
  301 D1:B7BD 18 03 -  -      jr +_
  302 D1:B7BF -  -  -  -  
  303 D1:B7BF -  -  -  -  subroutine6502_absx_split_start:
  304 D1:B7BF DD 4E 01 -      ld  c,(ix+REGX)
  305 D1:B7C2 7E -  -  -  _:  ld  a,(hl)
  306 D1:B7C3 23 -  -  -      inc hl
  307 D1:B7C4 1C -  -  -      inc e
  308 D1:B7C5 20 15 -  -      jr nz,+_
  309 D1:B7C7 DD 56 06 -      ld  d,(ix+REGPC+1)
  310 D1:B7CA 14 -  -  -      inc d
  311 D1:B7CB 52 DD 1F 05     ld.s (ix+REGPC),de
  312 D1:B7CF 1E 0C -  -      ld  e,BASETABLE_STRIDE
  313 D1:B7D1 ED 5C -  -      mlt de
  314 D1:B7D3 21 00 40 D0     ld  hl,PAGETABLE
  315 D1:B7D7 19 -  -  -      add hl,de
  316 D1:B7D8 ED 27 -  -      ld  hl,(hl) ;
  317 D1:B7DA 1E 00 -  -      ld  e,0
  318 D1:B7DC 46 -  -  -  _:  ld  b,(hl)
  319 D1:B7DD E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  320 D1:B7DE E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  321 D1:B7DF 81 -  -  -          add a,c
  322 D1:B7E0 30 03 -  -          jr  nc,+_
  323 D1:B7E2 FD 23 -  -          ADDCYC(1)
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  324 D1:B7E4 04 -  -  -          inc b
  325 D1:B7E5 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  326 D1:B7E6 0E 0C -  -          ld  c,BASETABLE_STRIDE
  327 D1:B7E8 ED 4C -  -          mlt bc
  328 D1:B7EA 21 00 40 D0         ld  hl,PAGETABLE
  329 D1:B7EE 09 -  -  -          add hl,bc
  330 D1:B7EF ED 27 -  -          ld  hl,(hl)
  331 D1:B7F1 06 00 -  -          ld  b,0
  332 D1:B7F3 4F -  -  -          ld  c,a
  333 D1:B7F4 09 -  -  -          add hl,bc
  334 D1:B7F5 C9 -  -  -      ret
  335 D1:B7F6 -  -  -  -      
  336 D1:B7F6 -  -  -  -  subroutine6502_absy_ss_noDep:
  337 D1:B7F6 DD 4E 02 -      ld  c,(ix+REGY)
  338 D1:B7F9 18 03 -  -      jr +_
  339 D1:B7FB -  -  -  -  subroutine6502_absx_ss_noDep:
  340 D1:B7FB DD 4E 01 -      ld  c,(ix+REGX)
  341 D1:B7FE 7E -  -  -  _:  ld  a,(hl)
  342 D1:B7FF 23 -  -  -      inc hl
  343 D1:B800 1C -  -  -      inc e
  344 D1:B801 20 15 -  -      jr nz,+_
  345 D1:B803 DD 56 06 -      ld  d,(ix+REGPC+1)
  346 D1:B806 14 -  -  -      inc d
  347 D1:B807 52 DD 1F 05     ld.s (ix+REGPC),de
  348 D1:B80B 1E 0C -  -      ld  e,BASETABLE_STRIDE
  349 D1:B80D ED 5C -  -      mlt de
  350 D1:B80F 21 00 40 D0     ld  hl,PAGETABLE
  351 D1:B813 19 -  -  -      add hl,de
  352 D1:B814 ED 27 -  -      ld  hl,(hl) ;
  353 D1:B816 1E 00 -  -      ld  e,0
  354 D1:B818 46 -  -  -  _:  ld  b,(hl)
  355 D1:B819 E3 -  -  -      ex  (sp),hl ;save HL onto stack as if we'd pushed HL from the caller
  356 D1:B81A E5 -  -  -      push hl     ;return address back onto stack. HL is now free to be anything.
  357 D1:B81B 81 -  -  -          add a,c
  358 D1:B81C 30 01 -  -          jr  nc,+_
  359 D1:B81E 04 -  -  -          inc b
  360 D1:B81F 50 -  -  -  _:      ld  d,b ;save that high byte for read/write access macros
  361 D1:B820 0E 0C -  -          ld  c,BASETABLE_STRIDE
  362 D1:B822 ED 4C -  -          mlt bc
  363 D1:B824 21 00 40 D0         ld  hl,PAGETABLE
  364 D1:B828 09 -  -  -          add hl,bc
  365 D1:B829 ED 27 -  -          ld  hl,(hl)
  366 D1:B82B 06 00 -  -          ld  b,0
  367 D1:B82D 4F -  -  -          ld  c,a
  368 D1:B82E 09 -  -  -          add hl,bc
  369 D1:B82F C9 -  -  -      ret
  370 D1:B830 -  -  -  -  
  371 D1:B830 -  -  -  -  
  372 D1:B830 -  -  -  -  
  373 D1:B830 -  -  -  -  
  374 D1:B830 -  -  -  -  
  375 D1:B830 -  -  -  -  
  376 D1:B830 -  -  -  -  
  377 D1:B830 -  -  -  -  subroutine6502_adc_combined_end:
  378 D1:B830 DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  379 D1:B833 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  380 D1:B834 DD 7E 00 -      ld  a,(ix+REGA)
  381 D1:B837 89 -  -  -      adc a,c
  382 D1:B838 DD 77 00 -      ld  (ix+REGA),a
  383 D1:B83B DD 46 04 CB 
              B0 E2 46 B8 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  384 D1:B85D C3 F6 B6 D1     jp i6502NextLoad
  385 D1:B861 -  -  -  -  
  386 D1:B861 -  -  -  -  subroutine6502_sbc_combined_end:
  387 D1:B861 DD 7E 04 -      ld  a,(ix+REGSR)   ;flags register
  388 D1:B864 1F -  -  -      rra             ;gets b0 (6502 carry) into (Z80) carry flag.
  389 D1:B865 DD 7E 00 -      ld  a,(ix+REGA)
  390 D1:B868 3F -  -  -      ccf
  391 D1:B869 99 -  -  -      sbc a,c
  392 D1:B86A 3F -  -  -      ccf
  393 D1:B86B DD 77 00 -      ld  (ix+REGA),a
  394 D1:B86E DD 46 04 CB 
              B0 E2 79 B8 
              D1 CB F0 -      FLAGS_VCZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 80 30 02 
              CB C0 CB 07 
              CB 88 20 02 
              CB C8 CB B8 
              30 02 CB F8 
              DD 70 04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  395 D1:B890 C3 F6 B6 D1     jp i6502NextLoad
  396 D1:B894 -  -  -  -  
  397 D1:B894 -  -  -  -  subroutine6502_cmp_combined_end:
  398 D1:B894 DD 7E 00 -      ld  a,(ix+REGA)
  399 D1:B897 90 -  -  -      sub a,b
  400 D1:B898 3F -  -  -      ccf     ;because the 6502 is strange like that.
  401 D1:B899 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  402 D1:B8B3 C3 F6 B6 D1     jp i6502NextLoad
  403 D1:B8B7 -  -  -  -  
  404 D1:B8B7 -  -  -  -  subroutine6502_take_branch:
  405 D1:B8B7 FD 23 -  -      ADDCYC(1)
  406 D1:B8B9 7E -  -  -      ld  a,(hl)  ;offset byte
  407 D1:B8BA 6F -  -  -      ld  L,a
  408 D1:B8BB 87 -  -  -      add a,a
  409 D1:B8BC 9F -  -  -      sbc a,a
  410 D1:B8BD 67 -  -  -      ld  H,a     ;sign-extending offset byte
  411 D1:B8BE DD 56 06 -      ld  d,(ix+REGPC+1)
  412 D1:B8C1 13 -  -  -      inc de
  413 D1:B8C2 52 19 -  -      add.s hl,de
  414 D1:B8C4 7C -  -  -      ld  a,h
  415 D1:B8C5 BA -  -  -      cp  d       ;is high byte the same?
  416 D1:B8C6 28 02 -  -      jr  z,+_    ;if so, do not add another clock
  417 D1:B8C8 FD 23 -  -      ADDCYC(1)
  418 D1:B8CA 52 DD 2F 05 _:  ld.s (ix+REGPC),hl
  419 D1:B8CE C3 E0 B6 D1     jp  i6502FirstLoad
  420 D1:B8D2 -  -  -  -  
  421 D1:B8D2 -  -  -  -  
  422 D1:B8D2 -  -  -  -  ;-----------------------------------------------------------------------------
  423 D1:B8D2 -  -  -  -  
  424 D1:B8D2 -  -  -  -  ; *** **  *  *** ***** ***  *   *  *** ***** *** ***  **  *     ***  ***** *****                                                
  425 D1:B8D2 -  -  -  -  ;  *  **  * *      *   *  * *   * *      *    * *   * **  *    *     *       *                   
  426 D1:B8D2 -  -  -  -  ;  *  * * *  ***   *   ***  *   * *      *    * *   * * * *     ***  ***     *                          
  427 D1:B8D2 -  -  -  -  ;  *  *  **     *  *   *  * *   * *      *    * *   * *  **        * *       *                   
  428 D1:B8D2 -  -  -  -  ; *** *  **  ***   *   *  *  ***   ***   *   *** ***  *  **     ***  *****   *                                 
  429 D1:B8D2 -  -  -  -  
  430 D1:B8D2 -  -  -  -  ;-----------------------------------------------------------------------------
  431 D1:B8D2 -  -  -  -  
  432 D1:B8D2 -  -  -  -  ;-----------------------------------------------------------------------------
  433 D1:B8D2 -  -  -  -  ;-----------------------------------------------------------------------------
  434 D1:B8D2 -  -  -  -  ;-----------------------------------------------------------------------------
  435 D1:B8D2 -  -  -  -  ;Instructions by type: Transfer Instructions
  436 D1:B8D2 -  -  -  -  ;LDA - Load Accumulator with Memory
  437 D1:B8D2 -  -  -  -  ;    M -> A
  438 D1:B8D2 -  -  -  -  ;    N	Z	C	I	D	V
  439 D1:B8D2 -  -  -  -  ;    +	+	-	-	-	-
  440 D1:B8D2 -  -  -  -  
  441 D1:B8D2 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
  442 D1:B8D2 -  -  -  -  ;immediate	LDA #oper	A9	2	2
  443 D1:B8D2 -  -  -  -  inst6502_lda_imm:
  444 D1:B8D2 7E -  -  -      ld  a,(hl)
  445 D1:B8D3 DD 77 00 -      ld  (ix+REGA),a
  446 D1:B8D6 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  447 D1:B8EA ED 33 02 -      ADDCYC(2)
  448 D1:B8ED C3 F6 B6 D1     jp i6502NextLoad
  449 D1:B8F1 -  -  -  -  
  450 D1:B8F1 -  -  -  -  ;zeropage	LDA oper	A5	2	3
  451 D1:B8F1 -  -  -  -  inst6502_lda_zp:
  452 D1:B8F1 7E -  -  -      ld  a,(hl)
  453 D1:B8F2 01 00 38 D0     ld  bc,ZEROPAGE
  454 D1:B8F6 81 -  -  -      add a,c
  455 D1:B8F7 4F -  -  -      ld  c,a
  456 D1:B8F8 0A -  -  -      ld  a,(bc)
  457 D1:B8F9 DD 77 00 -      ld  (ix+REGA),a
  458 D1:B8FC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  459 D1:B910 ED 33 03 -      ADDCYC(3)
  460 D1:B913 C3 F6 B6 D1     jp i6502NextLoad
  461 D1:B917 -  -  -  -  
  462 D1:B917 -  -  -  -  ;zeropage,X	LDA oper,X	B5	2	4 
  463 D1:B917 -  -  -  -  inst6502_lda_zpx:
  464 D1:B917 7E -  -  -      ld  a,(hl)
  465 D1:B918 01 00 38 D0     ld  bc,ZEROPAGE
  466 D1:B91C 81 -  -  -      add a,c
  467 D1:B91D DD 86 01 -      add a,(ix+REGX)
  468 D1:B920 4F -  -  -      ld  c,a
  469 D1:B921 0A -  -  -      ld  a,(bc)
  470 D1:B922 DD 77 00 -      ld  (ix+REGA),a
  471 D1:B925 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  472 D1:B939 ED 33 04 -      ADDCYC(4)
  473 D1:B93C C3 F6 B6 D1     jp i6502NextLoad
  474 D1:B940 -  -  -  -  
  475 D1:B940 -  -  -  -  ;absolute	LDA oper	AD	3	4
  476 D1:B940 -  -  -  -  inst6502_lda_abs:
  477 D1:B940 CD 9E B7 D1     call subroutine6502_abs_split_start
  478 D1:B944 E5 -  -  -      push hl
  479 D1:B945 50 -  -  -          ld  d,b
  480 D1:B946 79 -  -  -          ld  a,c
  481 D1:B947 0E 0C -  -          ld  c,BASETABLE_STRIDE
  482 D1:B949 ED 4C -  -          mlt bc
  483 D1:B94B 21 00 40 D0         ld  hl,PAGETABLE
  484 D1:B94F 09 -  -  -          add hl,bc
  485 D1:B950 ED 27 -  -          ld  hl,(hl)
  486 D1:B952 06 00 -  -          ld  b,0
  487 D1:B954 4F -  -  -          ld  c,a
  488 D1:B955 09 -  -  -          add hl,bc   ;full address
  489 D1:B956 CD 79 AE D1         READ_ACCESS
  490 D1:B95A DD 77 00 -          ld (ix+REGA),a
  491 D1:B95D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  492 D1:B971 ED 33 04 -          ADDCYC(4)
  493 D1:B974 E1 -  -  -      pop hl
  494 D1:B975 C3 F6 B6 D1     jp i6502NextLoad
  495 D1:B979 -  -  -  -  
  496 D1:B979 -  -  -  -  ;absolute,X	LDA oper,X	BD	3	4* 
  497 D1:B979 -  -  -  -  inst6502_lda_absx:
  498 D1:B979 ED 33 04 -      ADDCYC(4)
  499 D1:B97C CD BF B7 D1     PUSH_ABSXSPLIT
  500 D1:B980 CD 79 AE D1         READ_ACCESS
  501 D1:B984 DD 77 00 -          ld (ix+REGA),a
  502 D1:B987 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  503 D1:B99B E1 -  -  -      pop hl
  504 D1:B99C C3 F6 B6 D1     jp i6502NextLoad
  505 D1:B9A0 -  -  -  -  
  506 D1:B9A0 -  -  -  -  ;absolute,Y	LDA oper,Y	B9	3	4* 
  507 D1:B9A0 -  -  -  -  inst6502_lda_absy:
  508 D1:B9A0 ED 33 04 -      ADDCYC(4)
  509 D1:B9A3 CD BA B7 D1     PUSH_ABSYSPLIT
  510 D1:B9A7 CD 79 AE D1         READ_ACCESS
  511 D1:B9AB DD 77 00 -          ld (ix+REGA),a
  512 D1:B9AE DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  513 D1:B9C2 E1 -  -  -      pop hl
  514 D1:B9C3 C3 F6 B6 D1     jp i6502NextLoad
  515 D1:B9C7 -  -  -  -  
  516 D1:B9C7 -  -  -  -  ;(indirect,X)	LDA (oper,X)	A1	2	6
  517 D1:B9C7 -  -  -  -  inst6502_lda_indx:
  518 D1:B9C7 E5 -  -  -      push hl
  519 D1:B9C8 7E -  -  -          ld  a,(hl)
  520 D1:B9C9 21 00 38 D0         ld  hl,ZEROPAGE
  521 D1:B9CD 85 -  -  -          add a,L
  522 D1:B9CE DD 86 01 -          add a,(ix+REGX)
  523 D1:B9D1 6F -  -  -          ld  L,a
  524 D1:B9D2 7E -  -  -          ld  a,(hl)
  525 D1:B9D3 2C -  -  -          inc L
  526 D1:B9D4 56 -  -  -          ld  d,(hl)
  527 D1:B9D5 42 -  -  -          ld  b,d
  528 D1:B9D6 0E 0C -  -          ld  c,BASETABLE_STRIDE
  529 D1:B9D8 ED 4C -  -          mlt bc
  530 D1:B9DA 21 00 40 D0         ld  hl,PAGETABLE
  531 D1:B9DE 09 -  -  -          add hl,bc
  532 D1:B9DF ED 27 -  -          ld  hl,(hl)
  533 D1:B9E1 06 00 -  -          ld  b,0
  534 D1:B9E3 4F -  -  -          ld  c,a
  535 D1:B9E4 09 -  -  -          add hl,bc
  536 D1:B9E5 CD 79 AE D1         READ_ACCESS
  537 D1:B9E9 DD 77 00 -          ld (ix+REGA),a
  538 D1:B9EC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  539 D1:BA00 ED 33 06 -          ADDCYC(6)
  540 D1:BA03 E1 -  -  -      pop hl
  541 D1:BA04 C3 F6 B6 D1     jp i6502NextLoad
  542 D1:BA08 -  -  -  -  
  543 D1:BA08 -  -  -  -  ;(indirect),Y	LDA (oper),Y	B1	2	5*
  544 D1:BA08 -  -  -  -  inst6502_lda_indy:
  545 D1:BA08 E5 -  -  -      push hl
  546 D1:BA09 7E -  -  -          ld  a,(hl)
  547 D1:BA0A 21 00 38 D0         ld  hl,ZEROPAGE
  548 D1:BA0E 85 -  -  -          add a,L
  549 D1:BA0F 6F -  -  -          ld  L,a
  550 D1:BA10 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  551 D1:BA11 2C -  -  -          inc L
  552 D1:BA12 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  553 D1:BA15 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  554 D1:BA16 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  555 D1:BA18 FD 23 -  -          ADDCYC(1)
  556 D1:BA1A 24 -  -  -          inc h
  557 D1:BA1B 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  558 D1:BA1C 2E 0C -  -          ld  L,BASETABLE_STRIDE
  559 D1:BA1E ED 6C -  -          mlt hl          ;23.
  560 D1:BA20 01 00 40 D0         ld  bc,PAGETABLE
  561 D1:BA24 09 -  -  -          add hl,bc
  562 D1:BA25 ED 27 -  -          ld  hl,(hl)     ;address get.
  563 D1:BA27 01 00 00 00         ld  bc,0
  564 D1:BA2B 4F -  -  -          ld  c,a
  565 D1:BA2C 09 -  -  -          add hl,bc       ;Full address get.
  566 D1:BA2D CD 79 AE D1         READ_ACCESS
  567 D1:BA31 DD 77 00 -          ld  (ix+REGA),a
  568 D1:BA34 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  569 D1:BA48 ED 33 05 -          ADDCYC(5)
  570 D1:BA4B E1 -  -  -      pop hl
  571 D1:BA4C C3 F6 B6 D1     jp i6502NextLoad
  572 D1:BA50 -  -  -  -  
  573 D1:BA50 -  -  -  -  ;-----------------------------------------------------------------------------
  574 D1:BA50 -  -  -  -  ;LDX - Load Index X with Memory
  575 D1:BA50 -  -  -  -  ;    M -> X
  576 D1:BA50 -  -  -  -  ;    N	Z	C	I	D	V
  577 D1:BA50 -  -  -  -  ;    +	+	-	-	-	-
  578 D1:BA50 -  -  -  -  
  579 D1:BA50 -  -  -  -  ;immediate	LDX #oper	A2	2	2  
  580 D1:BA50 -  -  -  -  inst6502_ldx_imm:
  581 D1:BA50 7E -  -  -      ld  a,(hl)
  582 D1:BA51 DD 77 01 -      ld  (ix+REGX),a
  583 D1:BA54 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  584 D1:BA68 ED 33 02 -      ADDCYC(2)
  585 D1:BA6B C3 F6 B6 D1     jp i6502NextLoad
  586 D1:BA6F -  -  -  -  
  587 D1:BA6F -  -  -  -  ;zeropage	LDX oper	A6	2	3 
  588 D1:BA6F -  -  -  -  inst6502_ldx_zp:
  589 D1:BA6F 7E -  -  -      ld  a,(hl)
  590 D1:BA70 01 00 38 D0     ld  bc,ZEROPAGE
  591 D1:BA74 81 -  -  -      add a,c
  592 D1:BA75 4F -  -  -      ld  c,a
  593 D1:BA76 0A -  -  -      ld  a,(bc)
  594 D1:BA77 DD 77 01 -      ld  (ix+REGX),a
  595 D1:BA7A DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  596 D1:BA8E ED 33 03 -      ADDCYC(3)
  597 D1:BA91 C3 F6 B6 D1     jp i6502NextLoad
  598 D1:BA95 -  -  -  -  
  599 D1:BA95 -  -  -  -  ;zeropage,Y	LDX oper,Y	B6	2	4  
  600 D1:BA95 -  -  -  -  inst6502_ldx_zpy:
  601 D1:BA95 7E -  -  -      ld  a,(hl)
  602 D1:BA96 01 00 38 D0     ld  bc,ZEROPAGE
  603 D1:BA9A 81 -  -  -      add a,c
  604 D1:BA9B DD 86 02 -      add a,(ix+REGY)
  605 D1:BA9E 4F -  -  -      ld  c,a
  606 D1:BA9F 0A -  -  -      ld  a,(bc)
  607 D1:BAA0 DD 77 01 -      ld  (ix+REGX),a
  608 D1:BAA3 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  609 D1:BAB7 ED 33 04 -      ADDCYC(4)
  610 D1:BABA C3 F6 B6 D1     jp i6502NextLoad
  611 D1:BABE -  -  -  -  
  612 D1:BABE -  -  -  -  ;absolute	LDX oper	AE	3	4  
  613 D1:BABE -  -  -  -  inst6502_ldx_abs:
  614 D1:BABE CD 9E B7 D1     call subroutine6502_abs_split_start
  615 D1:BAC2 E5 -  -  -      push hl
  616 D1:BAC3 50 -  -  -          ld  d,b
  617 D1:BAC4 79 -  -  -          ld  a,c
  618 D1:BAC5 0E 0C -  -          ld  c,BASETABLE_STRIDE
  619 D1:BAC7 ED 4C -  -          mlt bc
  620 D1:BAC9 21 00 40 D0         ld  hl,PAGETABLE
  621 D1:BACD 09 -  -  -          add hl,bc
  622 D1:BACE ED 27 -  -          ld  hl,(hl)
  623 D1:BAD0 06 00 -  -          ld  b,0
  624 D1:BAD2 4F -  -  -          ld  c,a
  625 D1:BAD3 09 -  -  -          add hl,bc   ;full address
  626 D1:BAD4 CD 79 AE D1         READ_ACCESS
  627 D1:BAD8 DD 77 01 -          ld (ix+REGX),a
  628 D1:BADB DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  629 D1:BAEF ED 33 04 -          ADDCYC(4)
  630 D1:BAF2 E1 -  -  -      pop hl
  631 D1:BAF3 C3 F6 B6 D1     jp i6502NextLoad
  632 D1:BAF7 -  -  -  -  
  633 D1:BAF7 -  -  -  -  ;absolute,Y	LDX oper,Y	BE	3	4* 
  634 D1:BAF7 -  -  -  -  inst6502_ldx_absy:
  635 D1:BAF7 ED 33 04 -      ADDCYC(4)
  636 D1:BAFA CD BA B7 D1     PUSH_ABSYSPLIT
  637 D1:BAFE CD 79 AE D1         READ_ACCESS
  638 D1:BB02 DD 77 01 -          ld (ix+REGX),a
  639 D1:BB05 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  640 D1:BB19 E1 -  -  -      pop hl
  641 D1:BB1A C3 F6 B6 D1     jp i6502NextLoad
  642 D1:BB1E -  -  -  -  
  643 D1:BB1E -  -  -  -  ;-----------------------------------------------------------------------------
  644 D1:BB1E -  -  -  -  ;LDY -  Load Index Y with Memory
  645 D1:BB1E -  -  -  -  ;    M -> Y
  646 D1:BB1E -  -  -  -  ;    N	Z	C	I	D	V
  647 D1:BB1E -  -  -  -  ;    +	+	-	-	-	-
  648 D1:BB1E -  -  -  -  
  649 D1:BB1E -  -  -  -  ;immediate	LDY #oper	A0	2	2  
  650 D1:BB1E -  -  -  -  inst6502_ldy_imm:
  651 D1:BB1E 7E -  -  -      ld  a,(hl)
  652 D1:BB1F DD 77 02 -      ld  (ix+REGY),a
  653 D1:BB22 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  654 D1:BB36 ED 33 02 -      ADDCYC(2)
  655 D1:BB39 C3 F6 B6 D1     jp i6502NextLoad
  656 D1:BB3D -  -  -  -  
  657 D1:BB3D -  -  -  -  ;zeropage	LDY oper	A4	2	3  
  658 D1:BB3D -  -  -  -  inst6502_ldy_zp:
  659 D1:BB3D 7E -  -  -      ld  a,(hl)
  660 D1:BB3E 01 00 38 D0     ld  bc,ZEROPAGE
  661 D1:BB42 81 -  -  -      add a,c
  662 D1:BB43 4F -  -  -      ld  c,a
  663 D1:BB44 0A -  -  -      ld  a,(bc)
  664 D1:BB45 DD 77 02 -      ld  (ix+REGY),a
  665 D1:BB48 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  666 D1:BB5C ED 33 03 -      ADDCYC(3)
  667 D1:BB5F C3 F6 B6 D1     jp i6502NextLoad
  668 D1:BB63 -  -  -  -  
  669 D1:BB63 -  -  -  -  ;zeropage,X	LDY oper,X	B4	2	4  
  670 D1:BB63 -  -  -  -  inst6502_ldy_zpx:
  671 D1:BB63 7E -  -  -      ld  a,(hl)
  672 D1:BB64 01 00 38 D0     ld  bc,ZEROPAGE
  673 D1:BB68 81 -  -  -      add a,c
  674 D1:BB69 DD 86 01 -      add a,(ix+REGX)
  675 D1:BB6C 4F -  -  -      ld  c,a
  676 D1:BB6D 0A -  -  -      ld  a,(bc)
  677 D1:BB6E DD 77 02 -      ld  (ix+REGY),a
  678 D1:BB71 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  679 D1:BB85 ED 33 04 -      ADDCYC(4)
  680 D1:BB88 C3 F6 B6 D1     jp i6502NextLoad
  681 D1:BB8C -  -  -  -  
  682 D1:BB8C -  -  -  -  ;absolute	LDY oper	AC	3	4  
  683 D1:BB8C -  -  -  -  inst6502_ldy_abs:
  684 D1:BB8C CD 9E B7 D1     call subroutine6502_abs_split_start
  685 D1:BB90 E5 -  -  -      push hl
  686 D1:BB91 50 -  -  -          ld  d,b
  687 D1:BB92 79 -  -  -          ld  a,c
  688 D1:BB93 0E 0C -  -          ld  c,BASETABLE_STRIDE
  689 D1:BB95 ED 4C -  -          mlt bc
  690 D1:BB97 21 00 40 D0         ld  hl,PAGETABLE
  691 D1:BB9B 09 -  -  -          add hl,bc
  692 D1:BB9C ED 27 -  -          ld  hl,(hl)
  693 D1:BB9E 06 00 -  -          ld  b,0
  694 D1:BBA0 4F -  -  -          ld  c,a
  695 D1:BBA1 09 -  -  -          add hl,bc   ;full address
  696 D1:BBA2 CD 79 AE D1         READ_ACCESS
  697 D1:BBA6 DD 77 02 -          ld (ix+REGY),a
  698 D1:BBA9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  699 D1:BBBD ED 33 04 -          ADDCYC(4)
  700 D1:BBC0 E1 -  -  -      pop hl
  701 D1:BBC1 C3 F6 B6 D1     jp i6502NextLoad
  702 D1:BBC5 -  -  -  -  
  703 D1:BBC5 -  -  -  -  ;absolute,X	LDY oper,X	BC	3	4* 
  704 D1:BBC5 -  -  -  -  inst6502_ldy_absx:
  705 D1:BBC5 ED 33 04 -      ADDCYC(4)
  706 D1:BBC8 CD BF B7 D1     PUSH_ABSXSPLIT
  707 D1:BBCC CD 79 AE D1         READ_ACCESS
  708 D1:BBD0 DD 77 02 -          ld (ix+REGY),a
  709 D1:BBD3 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  710 D1:BBE7 E1 -  -  -      pop hl
  711 D1:BBE8 C3 F6 B6 D1     jp i6502NextLoad
  712 D1:BBEC -  -  -  -  
  713 D1:BBEC -  -  -  -  ;-----------------------------------------------------------------------------
  714 D1:BBEC -  -  -  -  ;STA - Store Accumulator in Memory
  715 D1:BBEC -  -  -  -  ;    A -> M
  716 D1:BBEC -  -  -  -  ;    N	Z	C	I	D	V
  717 D1:BBEC -  -  -  -  ;    -	-	-	-	-	-
  718 D1:BBEC -  -  -  -  
  719 D1:BBEC -  -  -  -  ;zeropage	STA oper	85	2	3  
  720 D1:BBEC -  -  -  -  inst6502_sta_zp:
  721 D1:BBEC 7E -  -  -      ld  a,(hl)
  722 D1:BBED 01 00 38 D0     ld  bc,ZEROPAGE
  723 D1:BBF1 81 -  -  -      add a,c
  724 D1:BBF2 4F -  -  -      ld  c,a
  725 D1:BBF3 DD 7E 00 -      ld  a,(ix+REGA)
  726 D1:BBF6 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  727 D1:BBF7 ED 33 03 -      ADDCYC(3)
  728 D1:BBFA C3 F6 B6 D1     jp i6502NextLoad
  729 D1:BBFE -  -  -  -  
  730 D1:BBFE -  -  -  -  ;zeropage,X	STA oper,X	95	2	4  
  731 D1:BBFE -  -  -  -  inst6502_sta_zpx:
  732 D1:BBFE 7E -  -  -      ld  a,(hl)
  733 D1:BBFF 01 00 38 D0     ld  bc,ZEROPAGE
  734 D1:BC03 81 -  -  -      add a,c
  735 D1:BC04 DD 86 01 -      add a,(ix+REGX)
  736 D1:BC07 4F -  -  -      ld  c,a
  737 D1:BC08 DD 7E 00 -      ld  a,(ix+REGA)
  738 D1:BC0B 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  739 D1:BC0C ED 33 04 -      ADDCYC(4)
  740 D1:BC0F C3 F6 B6 D1     jp i6502NextLoad
  741 D1:BC13 -  -  -  -  
  742 D1:BC13 -  -  -  -  ;absolute	STA oper	8D	3	4
  743 D1:BC13 -  -  -  -  inst6502_sta_abs:
  744 D1:BC13 CD 9E B7 D1     call subroutine6502_abs_split_start
  745 D1:BC17 E5 -  -  -      push hl
  746 D1:BC18 50 -  -  -          ld  d,b
  747 D1:BC19 79 -  -  -          ld  a,c
  748 D1:BC1A 0E 0C -  -          ld  c,BASETABLE_STRIDE
  749 D1:BC1C ED 4C -  -          mlt bc
  750 D1:BC1E 21 00 40 D0         ld  hl,PAGETABLE
  751 D1:BC22 09 -  -  -          add hl,bc
  752 D1:BC23 ED 27 -  -          ld  hl,(hl)
  753 D1:BC25 06 00 -  -          ld  b,0
  754 D1:BC27 4F -  -  -          ld  c,a
  755 D1:BC28 09 -  -  -          add hl,bc   ;full address
  756 D1:BC29 DD 46 00 -          ld  b,(ix+REGA)
  757 D1:BC2C CD 1B AF D1         WRITE_ACCESS
  758 D1:BC30 ED 33 04 -          ADDCYC(4)
  759 D1:BC33 E1 -  -  -      pop hl
  760 D1:BC34 C3 F6 B6 D1     jp i6502NextLoad
  761 D1:BC38 -  -  -  -  
  762 D1:BC38 -  -  -  -  ;absolute,X	STA oper,X	9D	3	5  
  763 D1:BC38 -  -  -  -  inst6502_sta_absx:
  764 D1:BC38 ED 33 05 -      ADDCYC(5)
  765 D1:BC3B CD FB B7 D1     PUSH_ABSXSPLIT_NODEP
  766 D1:BC3F DD 46 00 -          ld  b,(ix+REGA)
  767 D1:BC42 CD 1B AF D1         WRITE_ACCESS
  768 D1:BC46 E1 -  -  -      pop hl
  769 D1:BC47 C3 F6 B6 D1     jp i6502NextLoad
  770 D1:BC4B -  -  -  -  
  771 D1:BC4B -  -  -  -  ;absolute,Y	STA oper,Y	99	3	5  
  772 D1:BC4B -  -  -  -  inst6502_sta_absy:
  773 D1:BC4B ED 33 05 -      ADDCYC(5)
  774 D1:BC4E CD F6 B7 D1     PUSH_ABSYSPLIT_NODEP
  775 D1:BC52 DD 46 00 -          ld  b,(ix+REGA)
  776 D1:BC55 CD 1B AF D1         WRITE_ACCESS
  777 D1:BC59 E1 -  -  -      pop hl
  778 D1:BC5A C3 F6 B6 D1     jp i6502NextLoad
  779 D1:BC5E -  -  -  -  
  780 D1:BC5E -  -  -  -  ;(indirect,X)	STA (oper,X)	81	2	6  
  781 D1:BC5E -  -  -  -  inst6502_sta_indx:
  782 D1:BC5E E5 -  -  -      push hl
  783 D1:BC5F 7E -  -  -          ld  a,(hl)
  784 D1:BC60 21 00 38 D0         ld  hl,ZEROPAGE
  785 D1:BC64 85 -  -  -          add a,L
  786 D1:BC65 DD 86 01 -          add a,(ix+REGX)
  787 D1:BC68 6F -  -  -          ld  L,a
  788 D1:BC69 7E -  -  -          ld  a,(hl)
  789 D1:BC6A 2C -  -  -          inc L
  790 D1:BC6B 56 -  -  -          ld  d,(hl)
  791 D1:BC6C 42 -  -  -          ld  b,d
  792 D1:BC6D 0E 0C -  -          ld  c,BASETABLE_STRIDE
  793 D1:BC6F ED 4C -  -          mlt bc
  794 D1:BC71 21 00 40 D0         ld  hl,PAGETABLE
  795 D1:BC75 09 -  -  -          add hl,bc
  796 D1:BC76 ED 27 -  -          ld  hl,(hl)
  797 D1:BC78 06 00 -  -          ld  b,0
  798 D1:BC7A 4F -  -  -          ld  c,a
  799 D1:BC7B 09 -  -  -          add hl,bc
  800 D1:BC7C DD 46 00 -          ld  b,(ix+REGA)
  801 D1:BC7F CD 1B AF D1         WRITE_ACCESS
  802 D1:BC83 ED 33 06 -          ADDCYC(6)
  803 D1:BC86 E1 -  -  -      pop hl
  804 D1:BC87 C3 F6 B6 D1     jp i6502NextLoad
  805 D1:BC8B -  -  -  -  
  806 D1:BC8B -  -  -  -  ;(indirect),Y	STA (oper),Y	91	2	6  
  807 D1:BC8B -  -  -  -  inst6502_sta_indy:
  808 D1:BC8B E5 -  -  -      push hl
  809 D1:BC8C 7E -  -  -          ld  a,(hl)
  810 D1:BC8D 21 00 38 D0         ld  hl,ZEROPAGE
  811 D1:BC91 85 -  -  -          add a,L
  812 D1:BC92 6F -  -  -          ld  L,a
  813 D1:BC93 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
  814 D1:BC94 2C -  -  -          inc L
  815 D1:BC95 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
  816 D1:BC98 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
  817 D1:BC99 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
  818 D1:BC9B 24 -  -  -          inc h
  819 D1:BC9C 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
  820 D1:BC9D 2E 0C -  -          ld  L,BASETABLE_STRIDE
  821 D1:BC9F ED 6C -  -          mlt hl          ;23.
  822 D1:BCA1 01 00 40 D0         ld  bc,PAGETABLE
  823 D1:BCA5 09 -  -  -          add hl,bc
  824 D1:BCA6 ED 27 -  -          ld  hl,(hl)     ;address get.
  825 D1:BCA8 01 00 00 00         ld  bc,0
  826 D1:BCAC 4F -  -  -          ld  c,a
  827 D1:BCAD 09 -  -  -          add hl,bc       ;Full address get.
  828 D1:BCAE DD 46 00 -          ld  b,(ix+REGA)
  829 D1:BCB1 CD 1B AF D1         WRITE_ACCESS
  830 D1:BCB5 ED 33 06 -          ADDCYC(6)
  831 D1:BCB8 E1 -  -  -      pop hl
  832 D1:BCB9 C3 F6 B6 D1     jp i6502NextLoad
  833 D1:BCBD -  -  -  -  
  834 D1:BCBD -  -  -  -  ;-----------------------------------------------------------------------------
  835 D1:BCBD -  -  -  -  ;STX - Store Index X in Memory
  836 D1:BCBD -  -  -  -  ;    X -> M
  837 D1:BCBD -  -  -  -  ;    N	Z	C	I	D	V
  838 D1:BCBD -  -  -  -  ;    -	-	-	-	-	-
  839 D1:BCBD -  -  -  -  
  840 D1:BCBD -  -  -  -  ;zeropage	STX oper	86	2	3  
  841 D1:BCBD -  -  -  -  inst6502_stx_zp:
  842 D1:BCBD 7E -  -  -      ld  a,(hl)
  843 D1:BCBE 01 00 38 D0     ld  bc,ZEROPAGE
  844 D1:BCC2 81 -  -  -      add a,c
  845 D1:BCC3 4F -  -  -      ld  c,a
  846 D1:BCC4 DD 7E 01 -      ld  a,(ix+REGX)
  847 D1:BCC7 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  848 D1:BCC8 ED 33 03 -      ADDCYC(3)
  849 D1:BCCB C3 F6 B6 D1     jp i6502NextLoad
  850 D1:BCCF -  -  -  -  
  851 D1:BCCF -  -  -  -  ;zeropage,Y	STX oper,Y	96	2	4  
  852 D1:BCCF -  -  -  -  inst6502_stx_zpy:
  853 D1:BCCF 7E -  -  -      ld  a,(hl)
  854 D1:BCD0 01 00 38 D0     ld  bc,ZEROPAGE
  855 D1:BCD4 81 -  -  -      add a,c
  856 D1:BCD5 DD 86 02 -      add a,(ix+REGY)
  857 D1:BCD8 4F -  -  -      ld  c,a
  858 D1:BCD9 DD 7E 01 -      ld  a,(ix+REGX)
  859 D1:BCDC 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  860 D1:BCDD ED 33 04 -      ADDCYC(4)
  861 D1:BCE0 C3 F6 B6 D1     jp i6502NextLoad
  862 D1:BCE4 -  -  -  -  
  863 D1:BCE4 -  -  -  -  ;absolute	STX oper	8E	3	4  
  864 D1:BCE4 -  -  -  -  inst6502_stx_abs:
  865 D1:BCE4 CD 9E B7 D1     call subroutine6502_abs_split_start
  866 D1:BCE8 E5 -  -  -      push hl
  867 D1:BCE9 50 -  -  -          ld  d,b
  868 D1:BCEA 79 -  -  -          ld  a,c
  869 D1:BCEB 0E 0C -  -          ld  c,BASETABLE_STRIDE
  870 D1:BCED ED 4C -  -          mlt bc
  871 D1:BCEF 21 00 40 D0         ld  hl,PAGETABLE
  872 D1:BCF3 09 -  -  -          add hl,bc
  873 D1:BCF4 ED 27 -  -          ld  hl,(hl)
  874 D1:BCF6 06 00 -  -          ld  b,0
  875 D1:BCF8 4F -  -  -          ld  c,a
  876 D1:BCF9 09 -  -  -          add hl,bc   ;full address
  877 D1:BCFA DD 46 01 -          ld  b,(ix+REGX)
  878 D1:BCFD CD 1B AF D1         WRITE_ACCESS
  879 D1:BD01 ED 33 04 -          ADDCYC(4)
  880 D1:BD04 E1 -  -  -      pop hl
  881 D1:BD05 C3 F6 B6 D1     jp i6502NextLoad
  882 D1:BD09 -  -  -  -  
  883 D1:BD09 -  -  -  -  ;-----------------------------------------------------------------------------
  884 D1:BD09 -  -  -  -  ;STY - Store Index Y in Memory
  885 D1:BD09 -  -  -  -  ;    Y -> M
  886 D1:BD09 -  -  -  -  ;    N	Z	C	I	D	V
  887 D1:BD09 -  -  -  -  ;    -	-	-	-	-	-
  888 D1:BD09 -  -  -  -  
  889 D1:BD09 -  -  -  -  ;zeropage	STY oper	84	2	3  
  890 D1:BD09 -  -  -  -  inst6502_sty_zp:
  891 D1:BD09 7E -  -  -      ld  a,(hl)
  892 D1:BD0A 01 00 38 D0     ld  bc,ZEROPAGE
  893 D1:BD0E 81 -  -  -      add a,c
  894 D1:BD0F 4F -  -  -      ld  c,a
  895 D1:BD10 DD 7E 02 -      ld  a,(ix+REGY)
  896 D1:BD13 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  897 D1:BD14 ED 33 03 -      ADDCYC(3)
  898 D1:BD17 C3 F6 B6 D1     jp i6502NextLoad
  899 D1:BD1B -  -  -  -  
  900 D1:BD1B -  -  -  -  ;zeropage,X	STY oper,X	94	2	4  
  901 D1:BD1B -  -  -  -  inst6502_sty_zpx:
  902 D1:BD1B 7E -  -  -      ld  a,(hl)
  903 D1:BD1C 01 00 38 D0     ld  bc,ZEROPAGE
  904 D1:BD20 81 -  -  -      add a,c
  905 D1:BD21 DD 86 01 -      add a,(ix+REGX)
  906 D1:BD24 4F -  -  -      ld  c,a
  907 D1:BD25 DD 7E 02 -      ld  a,(ix+REGY)
  908 D1:BD28 02 -  -  -      ld  (bc),a      ;Zeropage access is not hardware-gated
  909 D1:BD29 ED 33 04 -      ADDCYC(4)
  910 D1:BD2C C3 F6 B6 D1     jp i6502NextLoad
  911 D1:BD30 -  -  -  -  
  912 D1:BD30 -  -  -  -  ;absolute	STY oper	8C	3	4  
  913 D1:BD30 -  -  -  -  inst6502_sty_abs:
  914 D1:BD30 CD 9E B7 D1     call subroutine6502_abs_split_start
  915 D1:BD34 E5 -  -  -      push hl
  916 D1:BD35 50 -  -  -          ld  d,b
  917 D1:BD36 79 -  -  -          ld  a,c
  918 D1:BD37 0E 0C -  -          ld  c,BASETABLE_STRIDE
  919 D1:BD39 ED 4C -  -          mlt bc
  920 D1:BD3B 21 00 40 D0         ld  hl,PAGETABLE
  921 D1:BD3F 09 -  -  -          add hl,bc
  922 D1:BD40 ED 27 -  -          ld  hl,(hl)
  923 D1:BD42 06 00 -  -          ld  b,0
  924 D1:BD44 4F -  -  -          ld  c,a
  925 D1:BD45 09 -  -  -          add hl,bc   ;full address
  926 D1:BD46 DD 46 02 -          ld  b,(ix+REGY)
  927 D1:BD49 CD 1B AF D1         WRITE_ACCESS
  928 D1:BD4D ED 33 04 -          ADDCYC(4)
  929 D1:BD50 E1 -  -  -      pop hl
  930 D1:BD51 C3 F6 B6 D1     jp i6502NextLoad
  931 D1:BD55 -  -  -  -  
  932 D1:BD55 -  -  -  -  ;-----------------------------------------------------------------------------
  933 D1:BD55 -  -  -  -  ;TAX - Transfer Accumulator to Index X [A -> X]
  934 D1:BD55 -  -  -  -  ;N	Z	C	I	D	V
  935 D1:BD55 -  -  -  -  ;+	+	-	-	-	-
  936 D1:BD55 -  -  -  -  ;implied	TAX	AA	1	2
  937 D1:BD55 -  -  -  -  inst6502_tax:
  938 D1:BD55 DD 7E 00 -      ld  a,(ix+REGA)
  939 D1:BD58 DD 77 01 -      ld  (ix+REGX),a
  940 D1:BD5B DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  941 D1:BD6F ED 33 02 -      ADDCYC(2)
  942 D1:BD72 C3 0F B7 D1     jp i6502FinishLoad
  943 D1:BD76 -  -  -  -  
  944 D1:BD76 -  -  -  -  ;TAY - Transfer Accumulator to Index Y [A -> Y]
  945 D1:BD76 -  -  -  -  ;N	Z	C	I	D	V
  946 D1:BD76 -  -  -  -  ;+	+	-	-	-	-
  947 D1:BD76 -  -  -  -  ;implied	TAY	A8	1	2
  948 D1:BD76 -  -  -  -  inst6502_tay:
  949 D1:BD76 DD 7E 00 -      ld  a,(ix+REGA)
  950 D1:BD79 DD 77 02 -      ld  (ix+REGY),a
  951 D1:BD7C DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  952 D1:BD90 ED 33 02 -      ADDCYC(2)
  953 D1:BD93 C3 0F B7 D1     jp i6502FinishLoad
  954 D1:BD97 -  -  -  -  
  955 D1:BD97 -  -  -  -  ;TSX - Transfer Stack Pointer to Index X [SP -> X]
  956 D1:BD97 -  -  -  -  ;N	Z	C	I	D	V
  957 D1:BD97 -  -  -  -  ;+	+	-	-	-	-
  958 D1:BD97 -  -  -  -  ;implied	TSX	BA	1	2
  959 D1:BD97 -  -  -  -  inst6502_tsx:
  960 D1:BD97 DD 7E 03 -      ld  a,(ix+REGSP)
  961 D1:BD9A DD 77 01 -      ld  (ix+REGX),a
  962 D1:BD9D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  963 D1:BDB1 ED 33 02 -      ADDCYC(2)
  964 D1:BDB4 C3 0F B7 D1     jp i6502FinishLoad
  965 D1:BDB8 -  -  -  -  
  966 D1:BDB8 -  -  -  -  ;TXA - Transfer Index X to Accumulator [X -> A]
  967 D1:BDB8 -  -  -  -  ;N	Z	C	I	D	V
  968 D1:BDB8 -  -  -  -  ;+	+	-	-	-	-
  969 D1:BDB8 -  -  -  -  ;implied	TXA	8A	1	2
  970 D1:BDB8 -  -  -  -  inst6502_txa:
  971 D1:BDB8 DD 7E 01 -      ld  a,(ix+REGX)
  972 D1:BDBB DD 77 00 -      ld  (ix+REGA),a
  973 D1:BDBE DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  974 D1:BDD2 ED 33 02 -      ADDCYC(2)
  975 D1:BDD5 C3 0F B7 D1     jp i6502FinishLoad
  976 D1:BDD9 -  -  -  -  
  977 D1:BDD9 -  -  -  -  ;TXS - Transfer Index X to Stack Pointer [X -> SP]
  978 D1:BDD9 -  -  -  -  ;N	Z	C	I	D	V
  979 D1:BDD9 -  -  -  -  ;-	-	-	-	-	-
  980 D1:BDD9 -  -  -  -  ;implied	TXS	9A	1	2
  981 D1:BDD9 -  -  -  -  inst6502_txs:
  982 D1:BDD9 DD 7E 01 -      ld  a,(ix+REGX)
  983 D1:BDDC DD 77 03 -      ld  (ix+REGSP),a
  984 D1:BDDF ED 33 02 -      ADDCYC(2)
  985 D1:BDE2 C3 0F B7 D1     jp i6502FinishLoad
  986 D1:BDE6 -  -  -  -  
  987 D1:BDE6 -  -  -  -  ;TYA - Transfer Index Y to Accumulator [Y -> A]
  988 D1:BDE6 -  -  -  -  ;N	Z	C	I	D	V
  989 D1:BDE6 -  -  -  -  ;+	+	-	-	-	-
  990 D1:BDE6 -  -  -  -  ;implied	TYA	98	1	2
  991 D1:BDE6 -  -  -  -  inst6502_tya:
  992 D1:BDE6 DD 7E 02 -      ld  a,(ix+REGY)
  993 D1:BDE9 DD 77 00 -      ld  (ix+REGA),a
  994 D1:BDEC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
  995 D1:BE00 ED 33 02 -      ADDCYC(2)
  996 D1:BE03 C3 0F B7 D1     jp i6502FinishLoad
  997 D1:BE07 -  -  -  -  
  998 D1:BE07 -  -  -  -  ;-----------------------------------------------------------------------------
  999 D1:BE07 -  -  -  -  ;-----------------------------------------------------------------------------
 1000 D1:BE07 -  -  -  -  ;-----------------------------------------------------------------------------
 1001 D1:BE07 -  -  -  -  ;Instructions by type: Stack Instructions
 1002 D1:BE07 -  -  -  -  ;PHA - Push Accumulator on Stack
 1003 D1:BE07 -  -  -  -  ;    push A
 1004 D1:BE07 -  -  -  -  ;    N	Z	C	I	D	V
 1005 D1:BE07 -  -  -  -  ;    -	-	-	-	-	-
 1006 D1:BE07 -  -  -  -  ;implied	PHA	48	1	3 
 1007 D1:BE07 -  -  -  -  inst6502_pha:
 1008 D1:BE07 ED 33 03 -      ADDCYC(3)
 1009 D1:BE0A DD 7E 00 -      ld  a,(ix+REGA)
 1010 D1:BE0D 01 00 39 D0     ld  bc,STACKBASE
 1011 D1:BE11 DD 4E 03 -      ld  c,(ix+REGSP)
 1012 D1:BE14 02 -  -  -      ld  (bc),a
 1013 D1:BE15 0D -  -  -      dec c
 1014 D1:BE16 DD 71 03 -      ld  (ix+REGSP),c
 1015 D1:BE19 C3 0F B7 D1     jp i6502FinishLoad
 1016 D1:BE1D -  -  -  -  
 1017 D1:BE1D -  -  -  -  ;PHP - Push Processor Status on Stack
 1018 D1:BE1D -  -  -  -  ;    The status register will be pushed with the break
 1019 D1:BE1D -  -  -  -  ;    flag and bit 5 set to 1.
 1020 D1:BE1D -  -  -  -  ;    push SR
 1021 D1:BE1D -  -  -  -  ;    N	Z	C	I	D	V
 1022 D1:BE1D -  -  -  -  ;    -	-	-	-	-	-
 1023 D1:BE1D -  -  -  -  ;implied	PHP	08	1	3  
 1024 D1:BE1D -  -  -  -  inst6502_php:
 1025 D1:BE1D ED 33 03 -      ADDCYC(3)
 1026 D1:BE20 DD 7E 04 -      ld  a,(ix+REGSR)
 1027 D1:BE23 F6 30 -  -      or  a,%00110000
 1028 D1:BE25 01 00 39 D0     ld  bc,STACKBASE
 1029 D1:BE29 DD 4E 03 -      ld  c,(ix+REGSP)
 1030 D1:BE2C 02 -  -  -      ld  (bc),a
 1031 D1:BE2D 0D -  -  -      dec c
 1032 D1:BE2E DD 71 03 -      ld  (ix+REGSP),c
 1033 D1:BE31 C3 0F B7 D1     jp i6502FinishLoad
 1034 D1:BE35 -  -  -  -  
 1035 D1:BE35 -  -  -  -  
 1036 D1:BE35 -  -  -  -  
 1037 D1:BE35 -  -  -  -  ;PLA - Pull Accumulator from Stack
 1038 D1:BE35 -  -  -  -  ;    pull A
 1039 D1:BE35 -  -  -  -  ;    N	Z	C	I	D	V
 1040 D1:BE35 -  -  -  -  ;    +	+	-	-	-	-
 1041 D1:BE35 -  -  -  -  ;implied	PLA	68	1	4  
 1042 D1:BE35 -  -  -  -  inst6502_pla:
 1043 D1:BE35 ED 33 04 -      ADDCYC(4)
 1044 D1:BE38 01 00 39 D0     ld  bc,STACKBASE
 1045 D1:BE3C DD 4E 03 -      ld  c,(ix+REGSP)
 1046 D1:BE3F 0C -  -  -      inc c
 1047 D1:BE40 0A -  -  -      ld  a,(bc)
 1048 D1:BE41 DD 71 03 -      ld  (ix+REGSP),c
 1049 D1:BE44 DD 77 00 -      ld  (ix+REGA),a
 1050 D1:BE47 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1051 D1:BE5B C3 0F B7 D1     jp i6502FinishLoad
 1052 D1:BE5F -  -  -  -  
 1053 D1:BE5F -  -  -  -  ;PLP - Pull Processor Status from Stack
 1054 D1:BE5F -  -  -  -  ;    The status register will be pulled with the break
 1055 D1:BE5F -  -  -  -  ;    flag and bit 5 ignored.
 1056 D1:BE5F -  -  -  -  ;    pull SR
 1057 D1:BE5F -  -  -  -  ;    N	Z	C	I	D	V
 1058 D1:BE5F -  -  -  -  ;    from stack
 1059 D1:BE5F -  -  -  -  ;implied	PLP	28	1	4  
 1060 D1:BE5F -  -  -  -  inst6502_plp:
 1061 D1:BE5F ED 33 04 -      ADDCYC(4)
 1062 D1:BE62 01 00 39 D0     ld  bc,STACKBASE
 1063 D1:BE66 DD 4E 03 -      ld  c,(ix+REGSP)
 1064 D1:BE69 0C -  -  -      inc c
 1065 D1:BE6A 0A -  -  -      ld  a,(bc)
 1066 D1:BE6B DD 71 03 -      ld  (ix+REGSP),c
 1067 D1:BE6E DD 46 04 -      ld  b,(ix+REGSR)
 1068 D1:BE71 A8 -  -  -      xor a,b
 1069 D1:BE72 E6 CF -  -      and a,%11001111
 1070 D1:BE74 A8 -  -  -      xor a,b
 1071 D1:BE75 DD 77 04 -      ld  (ix+REGSR),a
 1072 D1:BE78 C3 0F B7 D1     jp i6502FinishLoad
 1073 D1:BE7C -  -  -  -  
 1074 D1:BE7C -  -  -  -  
 1075 D1:BE7C -  -  -  -  ;-----------------------------------------------------------------------------
 1076 D1:BE7C -  -  -  -  ;-----------------------------------------------------------------------------
 1077 D1:BE7C -  -  -  -  ;-----------------------------------------------------------------------------
 1078 D1:BE7C -  -  -  -  ;Instructions by type: Decrements and Increments
 1079 D1:BE7C -  -  -  -  
 1080 D1:BE7C -  -  -  -  ;DEC -  Decrement Memory by One
 1081 D1:BE7C -  -  -  -  ;    M - 1 -> M
 1082 D1:BE7C -  -  -  -  ;    N	Z	C	I	D	V
 1083 D1:BE7C -  -  -  -  ;    +	+	-	-	-	-
 1084 D1:BE7C -  -  -  -  ;    addressing	assembler	opc	bytes	cycles
 1085 D1:BE7C -  -  -  -  
 1086 D1:BE7C -  -  -  -  ;    zeropage	DEC oper	C6	2	5  
 1087 D1:BE7C -  -  -  -  inst6502_dec_zp:
 1088 D1:BE7C 7E -  -  -      ld  a,(hl)
 1089 D1:BE7D 01 00 38 D0     ld  bc,ZEROPAGE
 1090 D1:BE81 81 -  -  -      add a,c
 1091 D1:BE82 4F -  -  -      ld  c,a
 1092 D1:BE83 0A -  -  -      ld  a,(bc)
 1093 D1:BE84 3D -  -  -      dec a
 1094 D1:BE85 02 -  -  -      ld  (bc),a
 1095 D1:BE86 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1096 D1:BE9A ED 33 05 -      ADDCYC(5)
 1097 D1:BE9D C3 F6 B6 D1     jp i6502NextLoad
 1098 D1:BEA1 -  -  -  -  
 1099 D1:BEA1 -  -  -  -  ;    zeropage,X	DEC oper,X	D6	2	6  
 1100 D1:BEA1 -  -  -  -  inst6502_dec_zpx:
 1101 D1:BEA1 7E -  -  -      ld  a,(hl)
 1102 D1:BEA2 01 00 38 D0     ld  bc,ZEROPAGE
 1103 D1:BEA6 81 -  -  -      add a,c
 1104 D1:BEA7 DD 86 01 -      add a,(ix+REGX)
 1105 D1:BEAA 4F -  -  -      ld  c,a
 1106 D1:BEAB 0A -  -  -      ld  a,(bc)
 1107 D1:BEAC 3D -  -  -      dec a
 1108 D1:BEAD 02 -  -  -      ld  (bc),a
 1109 D1:BEAE DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1110 D1:BEC2 ED 33 06 -      ADDCYC(6)
 1111 D1:BEC5 C3 F6 B6 D1     jp i6502NextLoad
 1112 D1:BEC9 -  -  -  -  
 1113 D1:BEC9 -  -  -  -  ;    absolute	DEC oper	CE	3	6  
 1114 D1:BEC9 -  -  -  -  inst6502_dec_abs:
 1115 D1:BEC9 CD 9E B7 D1     call subroutine6502_abs_split_start
 1116 D1:BECD E5 -  -  -      push hl
 1117 D1:BECE 50 -  -  -          ld  d,b
 1118 D1:BECF 79 -  -  -          ld  a,c
 1119 D1:BED0 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1120 D1:BED2 ED 4C -  -          mlt bc
 1121 D1:BED4 21 00 40 D0         ld  hl,PAGETABLE
 1122 D1:BED8 09 -  -  -          add hl,bc
 1123 D1:BED9 ED 27 -  -          ld  hl,(hl)
 1124 D1:BEDB 06 00 -  -          ld  b,0
 1125 D1:BEDD 4F -  -  -          ld  c,a
 1126 D1:BEDE 09 -  -  -          add hl,bc   ;full address
 1127 D1:BEDF CD 79 AE D1         READ_ACCESS
 1128 D1:BEE3 3D -  -  -          dec a
 1129 D1:BEE4 47 -  -  -          ld  b,a
 1130 D1:BEE5 -  -  -  -          ;
 1131 D1:BEE5 DD 7E 04 -          ld  a,(ix+REGSR)
 1132 D1:BEE8 CB 8F -  -          res SF_ZERO,a
 1133 D1:BEEA 20 02 -  -          jr  nz,$+4
 1134 D1:BEEC CB CF -  -          set SF_ZERO,a
 1135 D1:BEEE CB BF -  -          res SF_NEG,a
 1136 D1:BEF0 F2 F6 BE D1         jp  p,$+6
 1137 D1:BEF4 CB FF -  -          set SF_NEG,a
 1138 D1:BEF6 DD 77 04 -          ld  (ix+REGSR),a
 1139 D1:BEF9 -  -  -  -          ;
 1140 D1:BEF9 CD 1B AF D1         WRITE_ACCESS
 1141 D1:BEFD ED 33 06 -          ADDCYC(6)
 1142 D1:BF00 E1 -  -  -      pop hl
 1143 D1:BF01 C3 F6 B6 D1     jp i6502NextLoad
 1144 D1:BF05 -  -  -  -  
 1145 D1:BF05 -  -  -  -  ;    absolute,X	DEC oper,X	DE	3	7  
 1146 D1:BF05 -  -  -  -  inst6502_dec_absx:
 1147 D1:BF05 ED 33 07 -      ADDCYC(7)
 1148 D1:BF08 CD FB B7 D1     PUSH_ABSXSPLIT_NODEP
 1149 D1:BF0C CD 79 AE D1         READ_ACCESS
 1150 D1:BF10 3D -  -  -          dec a
 1151 D1:BF11 47 -  -  -          ld  b,a
 1152 D1:BF12 -  -  -  -          ;
 1153 D1:BF12 DD 7E 04 -          ld  a,(ix+REGSR)
 1154 D1:BF15 CB 8F -  -          res SF_ZERO,a
 1155 D1:BF17 20 02 -  -          jr  nz,$+4
 1156 D1:BF19 CB CF -  -          set SF_ZERO,a
 1157 D1:BF1B CB BF -  -          res SF_NEG,a
 1158 D1:BF1D F2 23 BF D1         jp  p,$+6
 1159 D1:BF21 CB FF -  -          set SF_NEG,a
 1160 D1:BF23 DD 77 04 -          ld  (ix+REGSR),a
 1161 D1:BF26 -  -  -  -          ;
 1162 D1:BF26 CD 1B AF D1         WRITE_ACCESS
 1163 D1:BF2A E1 -  -  -      pop hl
 1164 D1:BF2B C3 F6 B6 D1     jp i6502NextLoad
 1165 D1:BF2F -  -  -  -  
 1166 D1:BF2F -  -  -  -  ;DEX - Decrement Index X by One [X - 1 -> X]
 1167 D1:BF2F -  -  -  -  ;Flags altered: NZ
 1168 D1:BF2F -  -  -  -  ;implied	DEX	CA	1	2  
 1169 D1:BF2F -  -  -  -  inst6502_dex:
 1170 D1:BF2F DD 35 01 -      dec (ix+REGX)
 1171 D1:BF32 DD 7E 04 -  _:  ld  a,(ix+REGSR)
 1172 D1:BF35 CB 8F -  -      res SF_ZERO,a
 1173 D1:BF37 20 02 -  -      jr  nz,$+4
 1174 D1:BF39 CB CF -  -      set SF_ZERO,a
 1175 D1:BF3B CB BF -  -      res SF_NEG,a
 1176 D1:BF3D F2 43 BF D1     jp  p,$+6
 1177 D1:BF41 CB FF -  -      set SF_NEG,a
 1178 D1:BF43 DD 77 04 -      ld  (ix+REGSR),a
 1179 D1:BF46 ED 33 02 -      ADDCYC(2)
 1180 D1:BF49 C3 0F B7 D1     jp i6502FinishLoad
 1181 D1:BF4D -  -  -  -  
 1182 D1:BF4D -  -  -  -  ;DEY - Decrement Index Y by One [Y - 1 -> Y]
 1183 D1:BF4D -  -  -  -  ;Flags altered: NZ
 1184 D1:BF4D -  -  -  -  ;implied	DEY	88	1	2  
 1185 D1:BF4D -  -  -  -  inst6502_dey:
 1186 D1:BF4D DD 35 02 -      dec (ix+REGY)
 1187 D1:BF50 18 E0 -  -      jr  -_
 1188 D1:BF52 -  -  -  -  
 1189 D1:BF52 -  -  -  -  
 1190 D1:BF52 -  -  -  -  ;INX - Increment Index X by One [X + 1 -> X]
 1191 D1:BF52 -  -  -  -  ;Flags altered: NZ
 1192 D1:BF52 -  -  -  -  ;implied	INX	E8	1	2  
 1193 D1:BF52 -  -  -  -  inst6502_inx:
 1194 D1:BF52 DD 34 01 -      inc (ix+REGX)
 1195 D1:BF55 18 DB -  -      jr  -_
 1196 D1:BF57 -  -  -  -  
 1197 D1:BF57 -  -  -  -  
 1198 D1:BF57 -  -  -  -  ;INY - Increment Index Y by One [Y + 1 -> Y]
 1199 D1:BF57 -  -  -  -  ;Flags altered: NZ
 1200 D1:BF57 -  -  -  -  ;implied	INY	C8	1	2  
 1201 D1:BF57 -  -  -  -  inst6502_iny:
 1202 D1:BF57 DD 34 02 -      inc (ix+REGY)
 1203 D1:BF5A 18 D6 -  -      jr  -_
 1204 D1:BF5C -  -  -  -  
 1205 D1:BF5C -  -  -  -  
 1206 D1:BF5C -  -  -  -  ;INC - Increment Memory by One
 1207 D1:BF5C -  -  -  -  ;    M + 1 -> M
 1208 D1:BF5C -  -  -  -  ;    N	Z	C	I	D	V
 1209 D1:BF5C -  -  -  -  ;    +	+	-	-	-	-
 1210 D1:BF5C -  -  -  -  
 1211 D1:BF5C -  -  -  -  ;zeropage	INC oper	E6	2	5  
 1212 D1:BF5C -  -  -  -  inst6502_inc_zp:
 1213 D1:BF5C 7E -  -  -      ld  a,(hl)
 1214 D1:BF5D 01 00 38 D0     ld  bc,ZEROPAGE
 1215 D1:BF61 81 -  -  -      add a,c
 1216 D1:BF62 4F -  -  -      ld  c,a
 1217 D1:BF63 0A -  -  -      ld  a,(bc)
 1218 D1:BF64 3C -  -  -      inc a
 1219 D1:BF65 02 -  -  -      ld  (bc),a
 1220 D1:BF66 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1221 D1:BF7A ED 33 05 -      ADDCYC(5)
 1222 D1:BF7D C3 F6 B6 D1     jp i6502NextLoad
 1223 D1:BF81 -  -  -  -  
 1224 D1:BF81 -  -  -  -  ;zeropage,X	INC oper,X	F6	2	6  
 1225 D1:BF81 -  -  -  -  inst6502_inc_zpx:
 1226 D1:BF81 7E -  -  -      ld  a,(hl)
 1227 D1:BF82 01 00 38 D0     ld  bc,ZEROPAGE
 1228 D1:BF86 81 -  -  -      add a,c
 1229 D1:BF87 DD 86 01 -      add a,(ix+REGX)
 1230 D1:BF8A 4F -  -  -      ld  c,a
 1231 D1:BF8B 0A -  -  -      ld  a,(bc)
 1232 D1:BF8C 3C -  -  -      inc a
 1233 D1:BF8D 02 -  -  -      ld  (bc),a
 1234 D1:BF8E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1235 D1:BFA2 ED 33 06 -      ADDCYC(6)
 1236 D1:BFA5 C3 F6 B6 D1     jp i6502NextLoad
 1237 D1:BFA9 -  -  -  -      
 1238 D1:BFA9 -  -  -  -  ;absolute	INC oper	EE	3	6
 1239 D1:BFA9 -  -  -  -  inst6502_inc_abs:
 1240 D1:BFA9 CD 9E B7 D1     call subroutine6502_abs_split_start
 1241 D1:BFAD E5 -  -  -      push hl
 1242 D1:BFAE 50 -  -  -          ld  d,b
 1243 D1:BFAF 79 -  -  -          ld  a,c
 1244 D1:BFB0 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1245 D1:BFB2 ED 4C -  -          mlt bc
 1246 D1:BFB4 21 00 40 D0         ld  hl,PAGETABLE
 1247 D1:BFB8 09 -  -  -          add hl,bc
 1248 D1:BFB9 ED 27 -  -          ld  hl,(hl)
 1249 D1:BFBB 06 00 -  -          ld  b,0
 1250 D1:BFBD 4F -  -  -          ld  c,a
 1251 D1:BFBE 09 -  -  -          add hl,bc   ;full address
 1252 D1:BFBF CD 79 AE D1         READ_ACCESS
 1253 D1:BFC3 3C -  -  -          inc a
 1254 D1:BFC4 47 -  -  -          ld  b,a
 1255 D1:BFC5 -  -  -  -          ;
 1256 D1:BFC5 DD 7E 04 -          ld  a,(ix+REGSR)
 1257 D1:BFC8 CB 8F -  -          res SF_ZERO,a
 1258 D1:BFCA 20 02 -  -          jr  nz,$+4
 1259 D1:BFCC CB CF -  -          set SF_ZERO,a
 1260 D1:BFCE CB BF -  -          res SF_NEG,a
 1261 D1:BFD0 F2 D6 BF D1         jp  p,$+6
 1262 D1:BFD4 CB FF -  -          set SF_NEG,a
 1263 D1:BFD6 DD 77 04 -          ld  (ix+REGSR),a
 1264 D1:BFD9 -  -  -  -          ;
 1265 D1:BFD9 CD 1B AF D1         WRITE_ACCESS
 1266 D1:BFDD ED 33 06 -          ADDCYC(6)
 1267 D1:BFE0 E1 -  -  -      pop hl
 1268 D1:BFE1 C3 F6 B6 D1     jp i6502NextLoad
 1269 D1:BFE5 -  -  -  -  
 1270 D1:BFE5 -  -  -  -  ;absolute,X	INC oper,X	FE	3	7  
 1271 D1:BFE5 -  -  -  -  inst6502_inc_absx:
 1272 D1:BFE5 ED 33 07 -      ADDCYC(7)
 1273 D1:BFE8 CD FB B7 D1     PUSH_ABSXSPLIT_NODEP
 1274 D1:BFEC CD 79 AE D1         READ_ACCESS
 1275 D1:BFF0 3C -  -  -          inc a
 1276 D1:BFF1 47 -  -  -          ld  b,a
 1277 D1:BFF2 -  -  -  -          ;
 1278 D1:BFF2 DD 7E 04 -          ld  a,(ix+REGSR)
 1279 D1:BFF5 CB 8F -  -          res SF_ZERO,a
 1280 D1:BFF7 20 02 -  -          jr  nz,$+4
 1281 D1:BFF9 CB CF -  -          set SF_ZERO,a
 1282 D1:BFFB CB BF -  -          res SF_NEG,a
 1283 D1:BFFD F2 03 C0 D1         jp  p,$+6
 1284 D1:C001 CB FF -  -          set SF_NEG,a
 1285 D1:C003 DD 77 04 -          ld  (ix+REGSR),a
 1286 D1:C006 -  -  -  -          ;
 1287 D1:C006 CD 1B AF D1         WRITE_ACCESS
 1288 D1:C00A E1 -  -  -      pop hl
 1289 D1:C00B C3 F6 B6 D1     jp i6502NextLoad
 1290 D1:C00F -  -  -  -  
 1291 D1:C00F -  -  -  -  ;-----------------------------------------------------------------------------
 1292 D1:C00F -  -  -  -  ;-----------------------------------------------------------------------------
 1293 D1:C00F -  -  -  -  ;-----------------------------------------------------------------------------
 1294 D1:C00F -  -  -  -  ;Instructions by type: Arithmetic Operations
 1295 D1:C00F -  -  -  -  ;ADC - Add Memory to Accumulator with Carry  [A + M + C -> A, C]
 1296 D1:C00F -  -  -  -  ;    N	Z	C	I	D	V
 1297 D1:C00F -  -  -  -  ;    +	+	+	-	-	+
 1298 D1:C00F -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1299 D1:C00F -  -  -  -  
 1300 D1:C00F -  -  -  -  ;immediate	ADC #oper	69	2	2  
 1301 D1:C00F -  -  -  -  inst6502_adc_imm:
 1302 D1:C00F ED 33 02 -      ADDCYC(2)
 1303 D1:C012 4E -  -  -      ld  c,(hl)
 1304 D1:C013 C3 30 B8 D1     jp  subroutine6502_adc_combined_end
 1305 D1:C017 -  -  -  -      
 1306 D1:C017 -  -  -  -  
 1307 D1:C017 -  -  -  -  ;zeropage	ADC oper	65	2	3
 1308 D1:C017 -  -  -  -  inst6502_adc_zp:
 1309 D1:C017 ED 33 03 -      ADDCYC(3)
 1310 D1:C01A 7E -  -  -      ld  a,(hl)
 1311 D1:C01B 01 00 38 D0     ld  bc,ZEROPAGE
 1312 D1:C01F 81 -  -  -      add a,c
 1313 D1:C020 4F -  -  -      ld  c,a
 1314 D1:C021 0A -  -  -      ld  a,(bc)
 1315 D1:C022 4F -  -  -      ld  c,a
 1316 D1:C023 C3 30 B8 D1     jp  subroutine6502_adc_combined_end
 1317 D1:C027 -  -  -  -  
 1318 D1:C027 -  -  -  -  ;zeropage,X	ADC oper,X	75	2	4  
 1319 D1:C027 -  -  -  -  inst6502_adc_zpx:
 1320 D1:C027 ED 33 04 -      ADDCYC(4)
 1321 D1:C02A 7E -  -  -      ld  a,(hl)
 1322 D1:C02B DD 86 01 -      add a,(ix+REGX)
 1323 D1:C02E 01 00 38 D0     ld  bc,ZEROPAGE
 1324 D1:C032 81 -  -  -      add a,c
 1325 D1:C033 4F -  -  -      ld  c,a
 1326 D1:C034 0A -  -  -      ld  a,(bc)
 1327 D1:C035 4F -  -  -      ld  c,a
 1328 D1:C036 C3 30 B8 D1     jp  subroutine6502_adc_combined_end
 1329 D1:C03A -  -  -  -  
 1330 D1:C03A -  -  -  -  ;absolute	ADC oper	6D	3	4  
 1331 D1:C03A -  -  -  -  inst6502_adc_abs:
 1332 D1:C03A ED 33 04 -      ADDCYC(4)
 1333 D1:C03D CD 9E B7 D1     call subroutine6502_abs_split_start
 1334 D1:C041 E5 -  -  -      push hl
 1335 D1:C042 50 -  -  -          ld  d,b
 1336 D1:C043 79 -  -  -          ld  a,c
 1337 D1:C044 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1338 D1:C046 ED 4C -  -          mlt bc
 1339 D1:C048 21 00 40 D0         ld  hl,PAGETABLE
 1340 D1:C04C 09 -  -  -          add hl,bc
 1341 D1:C04D ED 27 -  -          ld  hl,(hl)
 1342 D1:C04F 06 00 -  -          ld  b,0
 1343 D1:C051 4F -  -  -          ld  c,a
 1344 D1:C052 09 -  -  -          add hl,bc   ;full address
 1345 D1:C053 CD 79 AE D1         READ_ACCESS
 1346 D1:C057 E1 -  -  -      pop hl
 1347 D1:C058 4F -  -  -      ld  c,a
 1348 D1:C059 C3 30 B8 D1     jp  subroutine6502_adc_combined_end
 1349 D1:C05D -  -  -  -  
 1350 D1:C05D -  -  -  -  ;absolute,X	ADC oper,X	7D	3	4* 
 1351 D1:C05D -  -  -  -  inst6502_adc_absx:
 1352 D1:C05D ED 33 04 -      ADDCYC(4)
 1353 D1:C060 CD BF B7 D1     PUSH_ABSXSPLIT
 1354 D1:C064 CD 79 AE D1         READ_ACCESS
 1355 D1:C068 E1 -  -  -      pop hl
 1356 D1:C069 4F -  -  -      ld  c,a
 1357 D1:C06A C3 30 B8 D1     jp  subroutine6502_adc_combined_end
 1358 D1:C06E -  -  -  -  
 1359 D1:C06E -  -  -  -  ;absolute,Y	ADC oper,Y	79	3	4*
 1360 D1:C06E -  -  -  -  inst6502_adc_absy:
 1361 D1:C06E ED 33 04 -      ADDCYC(4)
 1362 D1:C071 CD BA B7 D1     PUSH_ABSYSPLIT
 1363 D1:C075 CD 79 AE D1         READ_ACCESS
 1364 D1:C079 E1 -  -  -      pop hl
 1365 D1:C07A 4F -  -  -      ld  c,a
 1366 D1:C07B C3 30 B8 D1     jp  subroutine6502_adc_combined_end
 1367 D1:C07F -  -  -  -  
 1368 D1:C07F -  -  -  -  ;(indirect,X)	ADC (oper,X)	61	2	6  
 1369 D1:C07F -  -  -  -  inst6502_adc_indx:
 1370 D1:C07F ED 33 06 -      ADDCYC(6)
 1371 D1:C082 E5 -  -  -      push hl
 1372 D1:C083 7E -  -  -          ld  a,(hl)
 1373 D1:C084 21 00 38 D0         ld  hl,ZEROPAGE
 1374 D1:C088 85 -  -  -          add a,L
 1375 D1:C089 DD 86 01 -          add a,(ix+REGX)
 1376 D1:C08C 6F -  -  -          ld  L,a
 1377 D1:C08D 7E -  -  -          ld  a,(hl)
 1378 D1:C08E 2C -  -  -          inc L
 1379 D1:C08F 56 -  -  -          ld  d,(hl)
 1380 D1:C090 42 -  -  -          ld  b,d
 1381 D1:C091 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1382 D1:C093 ED 4C -  -          mlt bc
 1383 D1:C095 21 00 40 D0         ld  hl,PAGETABLE
 1384 D1:C099 09 -  -  -          add hl,bc
 1385 D1:C09A ED 27 -  -          ld  hl,(hl)
 1386 D1:C09C 06 00 -  -          ld  b,0
 1387 D1:C09E 4F -  -  -          ld  c,a
 1388 D1:C09F 09 -  -  -          add hl,bc
 1389 D1:C0A0 CD 79 AE D1         READ_ACCESS
 1390 D1:C0A4 E1 -  -  -      pop hl
 1391 D1:C0A5 4F -  -  -      ld  c,a
 1392 D1:C0A6 C3 30 B8 D1     jp  subroutine6502_adc_combined_end
 1393 D1:C0AA -  -  -  -  
 1394 D1:C0AA -  -  -  -  ;(indirect),Y	ADC (oper),Y	71	2	5* 
 1395 D1:C0AA -  -  -  -  inst6502_adc_indy:
 1396 D1:C0AA ED 33 05 -      ADDCYC(5)
 1397 D1:C0AD E5 -  -  -      push hl
 1398 D1:C0AE 7E -  -  -          ld  a,(hl)
 1399 D1:C0AF 21 00 38 D0         ld  hl,ZEROPAGE
 1400 D1:C0B3 85 -  -  -          add a,L
 1401 D1:C0B4 6F -  -  -          ld  L,a
 1402 D1:C0B5 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1403 D1:C0B6 2C -  -  -          inc L
 1404 D1:C0B7 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1405 D1:C0BA 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1406 D1:C0BB 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1407 D1:C0BD FD 23 -  -          ADDCYC(1)
 1408 D1:C0BF 24 -  -  -          inc h
 1409 D1:C0C0 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1410 D1:C0C1 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1411 D1:C0C3 ED 6C -  -          mlt hl          ;23.
 1412 D1:C0C5 01 00 40 D0         ld  bc,PAGETABLE
 1413 D1:C0C9 09 -  -  -          add hl,bc
 1414 D1:C0CA ED 27 -  -          ld  hl,(hl)     ;address get.
 1415 D1:C0CC 01 00 00 00         ld  bc,0
 1416 D1:C0D0 4F -  -  -          ld  c,a
 1417 D1:C0D1 09 -  -  -          add hl,bc       ;Full address get.
 1418 D1:C0D2 CD 79 AE D1         READ_ACCESS
 1419 D1:C0D6 E1 -  -  -      pop hl
 1420 D1:C0D7 4F -  -  -      ld  c,a
 1421 D1:C0D8 C3 30 B8 D1     jp  subroutine6502_adc_combined_end
 1422 D1:C0DC -  -  -  -  
 1423 D1:C0DC -  -  -  -  
 1424 D1:C0DC -  -  -  -  ;SBC - Subtract Memory from Accumulator with Borrow
 1425 D1:C0DC -  -  -  -  ;A - M - C̅ -> A
 1426 D1:C0DC -  -  -  -  ;N	Z	C	I	D	V
 1427 D1:C0DC -  -  -  -  ;+	+	+	-	-	+
 1428 D1:C0DC -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1429 D1:C0DC -  -  -  -  
 1430 D1:C0DC -  -  -  -  ;immediate	SBC #oper	E9	2	2  
 1431 D1:C0DC -  -  -  -  inst6502_sbc_imm:
 1432 D1:C0DC ED 33 02 -      ADDCYC(2)
 1433 D1:C0DF 4E -  -  -      ld  c,(hl)
 1434 D1:C0E0 C3 61 B8 D1     jp  subroutine6502_sbc_combined_end
 1435 D1:C0E4 -  -  -  -  
 1436 D1:C0E4 -  -  -  -  ;zeropage	SBC oper	E5	2	3  
 1437 D1:C0E4 -  -  -  -  inst6502_sbc_zp:
 1438 D1:C0E4 ED 33 03 -      ADDCYC(3)
 1439 D1:C0E7 7E -  -  -      ld  a,(hl)
 1440 D1:C0E8 01 00 38 D0     ld  bc,ZEROPAGE
 1441 D1:C0EC 81 -  -  -      add a,c
 1442 D1:C0ED 4F -  -  -      ld  c,a
 1443 D1:C0EE 0A -  -  -      ld  a,(bc)
 1444 D1:C0EF 4F -  -  -      ld  c,a
 1445 D1:C0F0 C3 61 B8 D1     jp  subroutine6502_sbc_combined_end
 1446 D1:C0F4 -  -  -  -  
 1447 D1:C0F4 -  -  -  -  ;zeropage,X	SBC oper,X	F5	2	4  
 1448 D1:C0F4 -  -  -  -  inst6502_sbc_zpx:
 1449 D1:C0F4 ED 33 04 -      ADDCYC(4)
 1450 D1:C0F7 7E -  -  -      ld  a,(hl)
 1451 D1:C0F8 DD 86 01 -      add a,(ix+REGX)
 1452 D1:C0FB 01 00 38 D0     ld  bc,ZEROPAGE
 1453 D1:C0FF 81 -  -  -      add a,c
 1454 D1:C100 4F -  -  -      ld  c,a
 1455 D1:C101 0A -  -  -      ld  a,(bc)
 1456 D1:C102 4F -  -  -      ld  c,a
 1457 D1:C103 C3 61 B8 D1     jp  subroutine6502_sbc_combined_end
 1458 D1:C107 -  -  -  -  
 1459 D1:C107 -  -  -  -  ;absolute	SBC oper	ED	3	4  
 1460 D1:C107 -  -  -  -  inst6502_sbc_abs:
 1461 D1:C107 ED 33 04 -      ADDCYC(4)
 1462 D1:C10A CD 9E B7 D1     call subroutine6502_abs_split_start
 1463 D1:C10E E5 -  -  -      push hl
 1464 D1:C10F 50 -  -  -          ld  d,b
 1465 D1:C110 79 -  -  -          ld  a,c
 1466 D1:C111 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1467 D1:C113 ED 4C -  -          mlt bc
 1468 D1:C115 21 00 40 D0         ld  hl,PAGETABLE
 1469 D1:C119 09 -  -  -          add hl,bc
 1470 D1:C11A ED 27 -  -          ld  hl,(hl)
 1471 D1:C11C 06 00 -  -          ld  b,0
 1472 D1:C11E 4F -  -  -          ld  c,a
 1473 D1:C11F 09 -  -  -          add hl,bc   ;full address
 1474 D1:C120 CD 79 AE D1         READ_ACCESS
 1475 D1:C124 E1 -  -  -      pop hl
 1476 D1:C125 4F -  -  -      ld  c,a
 1477 D1:C126 C3 61 B8 D1     jp  subroutine6502_sbc_combined_end
 1478 D1:C12A -  -  -  -  
 1479 D1:C12A -  -  -  -  ;absolute,X	SBC oper,X	FD	3	4* 
 1480 D1:C12A -  -  -  -  inst6502_sbc_absx:
 1481 D1:C12A ED 33 04 -      ADDCYC(4)
 1482 D1:C12D CD BF B7 D1     PUSH_ABSXSPLIT
 1483 D1:C131 CD 79 AE D1         READ_ACCESS
 1484 D1:C135 E1 -  -  -      pop hl
 1485 D1:C136 4F -  -  -      ld  c,a
 1486 D1:C137 C3 61 B8 D1     jp  subroutine6502_sbc_combined_end
 1487 D1:C13B -  -  -  -  
 1488 D1:C13B -  -  -  -  ;absolute,Y	SBC oper,Y	F9	3	4* 
 1489 D1:C13B -  -  -  -  inst6502_sbc_absy:
 1490 D1:C13B ED 33 04 -      ADDCYC(4)
 1491 D1:C13E CD BA B7 D1     PUSH_ABSYSPLIT
 1492 D1:C142 CD 79 AE D1         READ_ACCESS
 1493 D1:C146 E1 -  -  -      pop hl
 1494 D1:C147 4F -  -  -      ld  c,a
 1495 D1:C148 C3 61 B8 D1     jp  subroutine6502_sbc_combined_end
 1496 D1:C14C -  -  -  -  
 1497 D1:C14C -  -  -  -  ;(indirect,X)	SBC (oper,X)	E1	2	6  
 1498 D1:C14C -  -  -  -  inst6502_sbc_indx:
 1499 D1:C14C ED 33 06 -      ADDCYC(6)
 1500 D1:C14F E5 -  -  -      push hl
 1501 D1:C150 7E -  -  -          ld  a,(hl)
 1502 D1:C151 21 00 38 D0         ld  hl,ZEROPAGE
 1503 D1:C155 85 -  -  -          add a,L
 1504 D1:C156 DD 86 01 -          add a,(ix+REGX)
 1505 D1:C159 6F -  -  -          ld  L,a
 1506 D1:C15A 7E -  -  -          ld  a,(hl)
 1507 D1:C15B 2C -  -  -          inc L
 1508 D1:C15C 56 -  -  -          ld  d,(hl)
 1509 D1:C15D 42 -  -  -          ld  b,d
 1510 D1:C15E 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1511 D1:C160 ED 4C -  -          mlt bc
 1512 D1:C162 21 00 40 D0         ld  hl,PAGETABLE
 1513 D1:C166 09 -  -  -          add hl,bc
 1514 D1:C167 ED 27 -  -          ld  hl,(hl)
 1515 D1:C169 06 00 -  -          ld  b,0
 1516 D1:C16B 4F -  -  -          ld  c,a
 1517 D1:C16C 09 -  -  -          add hl,bc
 1518 D1:C16D CD 79 AE D1         READ_ACCESS
 1519 D1:C171 E1 -  -  -      pop hl
 1520 D1:C172 4F -  -  -      ld  c,a
 1521 D1:C173 C3 61 B8 D1     jp  subroutine6502_sbc_combined_end
 1522 D1:C177 -  -  -  -  
 1523 D1:C177 -  -  -  -  ;(indirect),Y	SBC (oper),Y	F1	2	5* 
 1524 D1:C177 -  -  -  -  inst6502_sbc_indy:
 1525 D1:C177 ED 33 05 -      ADDCYC(5)
 1526 D1:C17A E5 -  -  -      push hl
 1527 D1:C17B 7E -  -  -          ld  a,(hl)
 1528 D1:C17C 21 00 38 D0         ld  hl,ZEROPAGE
 1529 D1:C180 85 -  -  -          add a,L
 1530 D1:C181 6F -  -  -          ld  L,a
 1531 D1:C182 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1532 D1:C183 2C -  -  -          inc L
 1533 D1:C184 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1534 D1:C187 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1535 D1:C188 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1536 D1:C18A FD 23 -  -          ADDCYC(1)
 1537 D1:C18C 24 -  -  -          inc h
 1538 D1:C18D 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1539 D1:C18E 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1540 D1:C190 ED 6C -  -          mlt hl          ;23.
 1541 D1:C192 01 00 40 D0         ld  bc,PAGETABLE
 1542 D1:C196 09 -  -  -          add hl,bc
 1543 D1:C197 ED 27 -  -          ld  hl,(hl)     ;address get.
 1544 D1:C199 01 00 00 00         ld  bc,0
 1545 D1:C19D 4F -  -  -          ld  c,a
 1546 D1:C19E 09 -  -  -          add hl,bc       ;Full address get.
 1547 D1:C19F CD 79 AE D1         READ_ACCESS
 1548 D1:C1A3 E1 -  -  -      pop hl
 1549 D1:C1A4 4F -  -  -      ld  c,a
 1550 D1:C1A5 C3 61 B8 D1     jp  subroutine6502_sbc_combined_end
 1551 D1:C1A9 -  -  -  -  
 1552 D1:C1A9 -  -  -  -  
 1553 D1:C1A9 -  -  -  -  
 1554 D1:C1A9 -  -  -  -  ;-----------------------------------------------------------------------------
 1555 D1:C1A9 -  -  -  -  ;-----------------------------------------------------------------------------
 1556 D1:C1A9 -  -  -  -  ;-----------------------------------------------------------------------------
 1557 D1:C1A9 -  -  -  -  ;Instructions by type: Logical Operations
 1558 D1:C1A9 -  -  -  -  
 1559 D1:C1A9 -  -  -  -  ;AND - AND Memory with Accumulator
 1560 D1:C1A9 -  -  -  -  ;A AND M -> A
 1561 D1:C1A9 -  -  -  -  ;N	Z	C	I	D	V
 1562 D1:C1A9 -  -  -  -  ;+	+	-	-	-	-
 1563 D1:C1A9 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1564 D1:C1A9 -  -  -  -  
 1565 D1:C1A9 -  -  -  -  ;immediate	AND #oper	29	2	2  
 1566 D1:C1A9 -  -  -  -  inst6502_and_imm:
 1567 D1:C1A9 ED 33 02 -      ADDCYC(2)
 1568 D1:C1AC 7E -  -  -      ld  a,(hl)
 1569 D1:C1AD DD A6 00 -      and a,(ix+REGA)
 1570 D1:C1B0 DD 77 00 -      ld  (ix+REGA),A
 1571 D1:C1B3 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1572 D1:C1C7 C3 F6 B6 D1     jp i6502NextLoad
 1573 D1:C1CB -  -  -  -  
 1574 D1:C1CB -  -  -  -  ;zeropage	AND oper	25	2	3  
 1575 D1:C1CB -  -  -  -  inst6502_and_zp:
 1576 D1:C1CB ED 33 03 -      ADDCYC(3)
 1577 D1:C1CE 7E -  -  -      ld  a,(hl)
 1578 D1:C1CF 01 00 38 D0     ld  bc,ZEROPAGE
 1579 D1:C1D3 81 -  -  -      add a,c
 1580 D1:C1D4 4F -  -  -      ld  c,a
 1581 D1:C1D5 0A -  -  -      ld  a,(bc)
 1582 D1:C1D6 DD A6 00 -      and a,(ix+REGA)
 1583 D1:C1D9 DD 77 00 -      ld  (ix+REGA),A
 1584 D1:C1DC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1585 D1:C1F0 C3 F6 B6 D1     jp i6502NextLoad
 1586 D1:C1F4 -  -  -  -  
 1587 D1:C1F4 -  -  -  -  ;zeropage,X	AND oper,X	35	2	4  
 1588 D1:C1F4 -  -  -  -  inst6502_and_zpx:
 1589 D1:C1F4 ED 33 04 -      ADDCYC(4)
 1590 D1:C1F7 7E -  -  -      ld  a,(hl)
 1591 D1:C1F8 01 00 38 D0     ld  bc,ZEROPAGE
 1592 D1:C1FC 81 -  -  -      add a,c
 1593 D1:C1FD DD 86 01 -      add a,(ix+REGX)
 1594 D1:C200 4F -  -  -      ld  c,a
 1595 D1:C201 0A -  -  -      ld  a,(bc)
 1596 D1:C202 DD A6 00 -      and a,(ix+REGA)
 1597 D1:C205 DD 77 00 -      ld  (ix+REGA),A
 1598 D1:C208 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1599 D1:C21C C3 F6 B6 D1     jp i6502NextLoad
 1600 D1:C220 -  -  -  -  
 1601 D1:C220 -  -  -  -  ;absolute	AND oper	2D	3	4  
 1602 D1:C220 -  -  -  -  inst6502_and_abs:
 1603 D1:C220 ED 33 04 -      ADDCYC(4)
 1604 D1:C223 CD 9E B7 D1     call subroutine6502_abs_split_start
 1605 D1:C227 E5 -  -  -      push hl
 1606 D1:C228 50 -  -  -          ld  d,b
 1607 D1:C229 79 -  -  -          ld  a,c
 1608 D1:C22A 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1609 D1:C22C ED 4C -  -          mlt bc
 1610 D1:C22E 21 00 40 D0         ld  hl,PAGETABLE
 1611 D1:C232 09 -  -  -          add hl,bc
 1612 D1:C233 ED 27 -  -          ld  hl,(hl)
 1613 D1:C235 06 00 -  -          ld  b,0
 1614 D1:C237 4F -  -  -          ld  c,a
 1615 D1:C238 09 -  -  -          add hl,bc   ;full address
 1616 D1:C239 CD 79 AE D1         READ_ACCESS
 1617 D1:C23D E1 -  -  -      pop hl
 1618 D1:C23E DD A6 00 -      and a,(ix+REGA)
 1619 D1:C241 DD 77 00 -      ld  (ix+REGA),A
 1620 D1:C244 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1621 D1:C258 C3 F6 B6 D1     jp i6502NextLoad
 1622 D1:C25C -  -  -  -  
 1623 D1:C25C -  -  -  -  ;absolute,X	AND oper,X	3D	3	4* 
 1624 D1:C25C -  -  -  -  inst6502_and_absx:
 1625 D1:C25C ED 33 04 -      ADDCYC(4)
 1626 D1:C25F CD BF B7 D1     PUSH_ABSXSPLIT
 1627 D1:C263 CD 79 AE D1         READ_ACCESS
 1628 D1:C267 DD A6 00 -          and a,(ix+REGA)
 1629 D1:C26A DD 77 00 -          ld  (ix+REGA),A
 1630 D1:C26D DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1631 D1:C281 E1 -  -  -      pop hl
 1632 D1:C282 C3 F6 B6 D1     jp i6502NextLoad
 1633 D1:C286 -  -  -  -  
 1634 D1:C286 -  -  -  -  ;absolute,Y	AND oper,Y	39	3	4* 
 1635 D1:C286 -  -  -  -  inst6502_and_absy:
 1636 D1:C286 ED 33 04 -      ADDCYC(4)
 1637 D1:C289 CD BA B7 D1     PUSH_ABSYSPLIT
 1638 D1:C28D CD 79 AE D1         READ_ACCESS
 1639 D1:C291 E1 -  -  -      pop hl
 1640 D1:C292 DD A6 00 -      and a,(ix+REGA)
 1641 D1:C295 DD 77 00 -      ld  (ix+REGA),A
 1642 D1:C298 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1643 D1:C2AC C3 F6 B6 D1     jp i6502NextLoad
 1644 D1:C2B0 -  -  -  -  
 1645 D1:C2B0 -  -  -  -  ;(indirect,X)	AND (oper,X)	21	2	6  
 1646 D1:C2B0 -  -  -  -  inst6502_and_indx:
 1647 D1:C2B0 ED 33 06 -      ADDCYC(6)
 1648 D1:C2B3 E5 -  -  -      push hl
 1649 D1:C2B4 7E -  -  -          ld  a,(hl)
 1650 D1:C2B5 21 00 38 D0         ld  hl,ZEROPAGE
 1651 D1:C2B9 85 -  -  -          add a,L
 1652 D1:C2BA DD 86 01 -          add a,(ix+REGX)
 1653 D1:C2BD 6F -  -  -          ld  L,a
 1654 D1:C2BE 7E -  -  -          ld  a,(hl)
 1655 D1:C2BF 2C -  -  -          inc L
 1656 D1:C2C0 56 -  -  -          ld  d,(hl)
 1657 D1:C2C1 42 -  -  -          ld  b,d
 1658 D1:C2C2 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1659 D1:C2C4 ED 4C -  -          mlt bc
 1660 D1:C2C6 21 00 40 D0         ld  hl,PAGETABLE
 1661 D1:C2CA 09 -  -  -          add hl,bc
 1662 D1:C2CB ED 27 -  -          ld  hl,(hl)
 1663 D1:C2CD 06 00 -  -          ld  b,0
 1664 D1:C2CF 4F -  -  -          ld  c,a
 1665 D1:C2D0 09 -  -  -          add hl,bc
 1666 D1:C2D1 CD 79 AE D1         READ_ACCESS
 1667 D1:C2D5 E1 -  -  -      pop hl
 1668 D1:C2D6 DD A6 00 -      and a,(ix+REGA)
 1669 D1:C2D9 DD 77 00 -      ld  (ix+REGA),A
 1670 D1:C2DC DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1671 D1:C2F0 C3 F6 B6 D1     jp i6502NextLoad
 1672 D1:C2F4 -  -  -  -  
 1673 D1:C2F4 -  -  -  -  ;(indirect),Y	AND (oper),Y	31	2	5* 
 1674 D1:C2F4 -  -  -  -  inst6502_and_indy:
 1675 D1:C2F4 ED 33 05 -      ADDCYC(5)
 1676 D1:C2F7 E5 -  -  -      push hl
 1677 D1:C2F8 7E -  -  -          ld  a,(hl)
 1678 D1:C2F9 21 00 38 D0         ld  hl,ZEROPAGE
 1679 D1:C2FD 85 -  -  -          add a,L
 1680 D1:C2FE 6F -  -  -          ld  L,a
 1681 D1:C2FF 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1682 D1:C300 2C -  -  -          inc L
 1683 D1:C301 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1684 D1:C304 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1685 D1:C305 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1686 D1:C307 24 -  -  -          inc h
 1687 D1:C308 FD 23 -  -          ADDCYC(1)
 1688 D1:C30A 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1689 D1:C30B 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1690 D1:C30D ED 6C -  -          mlt hl          ;23.
 1691 D1:C30F 01 00 40 D0         ld  bc,PAGETABLE
 1692 D1:C313 09 -  -  -          add hl,bc
 1693 D1:C314 ED 27 -  -          ld  hl,(hl)     ;address get.
 1694 D1:C316 01 00 00 00         ld  bc,0
 1695 D1:C31A 4F -  -  -          ld  c,a
 1696 D1:C31B 09 -  -  -          add hl,bc       ;Full address get.
 1697 D1:C31C CD 79 AE D1         READ_ACCESS
 1698 D1:C320 E1 -  -  -      pop hl
 1699 D1:C321 DD A6 00 -      and a,(ix+REGA)
 1700 D1:C324 DD 77 00 -      ld  (ix+REGA),A
 1701 D1:C327 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1702 D1:C33B C3 F6 B6 D1     jp i6502NextLoad
 1703 D1:C33F -  -  -  -  
 1704 D1:C33F -  -  -  -  ;-----------------------------------------------------------------------------
 1705 D1:C33F -  -  -  -  ;EOR - Exclusive-OR Memory with Accumulator
 1706 D1:C33F -  -  -  -  ;A EOR M -> A
 1707 D1:C33F -  -  -  -  ;N	Z	C	I	D	V
 1708 D1:C33F -  -  -  -  ;+	+	-	-	-	-
 1709 D1:C33F -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1710 D1:C33F -  -  -  -  
 1711 D1:C33F -  -  -  -  ;immediate	EOR #oper	49	2	2  
 1712 D1:C33F -  -  -  -  inst6502_eor_imm:
 1713 D1:C33F ED 33 02 -      ADDCYC(2)
 1714 D1:C342 7E -  -  -      ld  a,(hl)
 1715 D1:C343 DD AE 00 -      xor a,(ix+REGA)
 1716 D1:C346 DD 77 00 -      ld  (ix+REGA),A
 1717 D1:C349 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1718 D1:C35D C3 F6 B6 D1     jp i6502NextLoad
 1719 D1:C361 -  -  -  -  
 1720 D1:C361 -  -  -  -  ;zeropage	EOR oper	45	2	3  
 1721 D1:C361 -  -  -  -  inst6502_eor_zp:
 1722 D1:C361 ED 33 03 -      ADDCYC(3)
 1723 D1:C364 7E -  -  -      ld  a,(hl)
 1724 D1:C365 01 00 38 D0     ld  bc,ZEROPAGE
 1725 D1:C369 81 -  -  -      add a,c
 1726 D1:C36A 4F -  -  -      ld  c,a
 1727 D1:C36B 0A -  -  -      ld  a,(bc)
 1728 D1:C36C DD AE 00 -      xor a,(ix+REGA)
 1729 D1:C36F DD 77 00 -      ld  (ix+REGA),A
 1730 D1:C372 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1731 D1:C386 C3 F6 B6 D1     jp i6502NextLoad
 1732 D1:C38A -  -  -  -  
 1733 D1:C38A -  -  -  -  
 1734 D1:C38A -  -  -  -  ;zeropage,X	EOR oper,X	55	2	4  
 1735 D1:C38A -  -  -  -  inst6502_eor_zpx:
 1736 D1:C38A ED 33 04 -      ADDCYC(4)
 1737 D1:C38D 7E -  -  -      ld  a,(hl)
 1738 D1:C38E 01 00 38 D0     ld  bc,ZEROPAGE
 1739 D1:C392 81 -  -  -      add a,c
 1740 D1:C393 DD 86 01 -      add a,(ix+REGX)
 1741 D1:C396 4F -  -  -      ld  c,a
 1742 D1:C397 0A -  -  -      ld  a,(bc)
 1743 D1:C398 DD AE 00 -      xor a,(ix+REGA)
 1744 D1:C39B DD 77 00 -      ld  (ix+REGA),A
 1745 D1:C39E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1746 D1:C3B2 C3 F6 B6 D1     jp i6502NextLoad
 1747 D1:C3B6 -  -  -  -  
 1748 D1:C3B6 -  -  -  -  ;absolute	EOR oper	4D	3	4  
 1749 D1:C3B6 -  -  -  -  inst6502_eor_abs:
 1750 D1:C3B6 ED 33 04 -      ADDCYC(4)
 1751 D1:C3B9 CD 9E B7 D1     call subroutine6502_abs_split_start
 1752 D1:C3BD E5 -  -  -      push hl
 1753 D1:C3BE 50 -  -  -          ld  d,b
 1754 D1:C3BF 79 -  -  -          ld  a,c
 1755 D1:C3C0 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1756 D1:C3C2 ED 4C -  -          mlt bc
 1757 D1:C3C4 21 00 40 D0         ld  hl,PAGETABLE
 1758 D1:C3C8 09 -  -  -          add hl,bc
 1759 D1:C3C9 ED 27 -  -          ld  hl,(hl)
 1760 D1:C3CB 06 00 -  -          ld  b,0
 1761 D1:C3CD 4F -  -  -          ld  c,a
 1762 D1:C3CE 09 -  -  -          add hl,bc   ;full address
 1763 D1:C3CF CD 79 AE D1         READ_ACCESS
 1764 D1:C3D3 E1 -  -  -      pop hl
 1765 D1:C3D4 DD AE 00 -      xor a,(ix+REGA)
 1766 D1:C3D7 DD 77 00 -      ld  (ix+REGA),A
 1767 D1:C3DA DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1768 D1:C3EE C3 F6 B6 D1     jp i6502NextLoad
 1769 D1:C3F2 -  -  -  -  
 1770 D1:C3F2 -  -  -  -  ;absolute,X	EOR oper,X	5D	3	4* 
 1771 D1:C3F2 -  -  -  -  inst6502_eor_absx:
 1772 D1:C3F2 ED 33 04 -      ADDCYC(4)
 1773 D1:C3F5 CD BF B7 D1     PUSH_ABSXSPLIT
 1774 D1:C3F9 CD 79 AE D1         READ_ACCESS
 1775 D1:C3FD DD AE 00 -          xor a,(ix+REGA)
 1776 D1:C400 DD 77 00 -          ld  (ix+REGA),A
 1777 D1:C403 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1778 D1:C417 E1 -  -  -      pop hl
 1779 D1:C418 C3 F6 B6 D1     jp i6502NextLoad
 1780 D1:C41C -  -  -  -  
 1781 D1:C41C -  -  -  -  ;absolute,Y	EOR oper,Y	59	3	4* 
 1782 D1:C41C -  -  -  -  inst6502_eor_absy:
 1783 D1:C41C ED 33 04 -      ADDCYC(4)
 1784 D1:C41F CD BA B7 D1     PUSH_ABSYSPLIT
 1785 D1:C423 CD 79 AE D1         READ_ACCESS
 1786 D1:C427 E1 -  -  -      pop hl
 1787 D1:C428 DD AE 00 -      xor a,(ix+REGA)
 1788 D1:C42B DD 77 00 -      ld  (ix+REGA),A
 1789 D1:C42E DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1790 D1:C442 C3 F6 B6 D1     jp i6502NextLoad
 1791 D1:C446 -  -  -  -  
 1792 D1:C446 -  -  -  -  ;(indirect,X)	EOR (oper,X)	41	2	6  
 1793 D1:C446 -  -  -  -  inst6502_eor_indx:
 1794 D1:C446 ED 33 06 -      ADDCYC(6)
 1795 D1:C449 E5 -  -  -      push hl
 1796 D1:C44A 7E -  -  -          ld  a,(hl)
 1797 D1:C44B 21 00 38 D0         ld  hl,ZEROPAGE
 1798 D1:C44F 85 -  -  -          add a,L
 1799 D1:C450 DD 86 01 -          add a,(ix+REGX)
 1800 D1:C453 6F -  -  -          ld  L,a
 1801 D1:C454 7E -  -  -          ld  a,(hl)
 1802 D1:C455 2C -  -  -          inc L
 1803 D1:C456 56 -  -  -          ld  d,(hl)
 1804 D1:C457 42 -  -  -          ld  b,d
 1805 D1:C458 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1806 D1:C45A ED 4C -  -          mlt bc
 1807 D1:C45C 21 00 40 D0         ld  hl,PAGETABLE
 1808 D1:C460 09 -  -  -          add hl,bc
 1809 D1:C461 ED 27 -  -          ld  hl,(hl)
 1810 D1:C463 06 00 -  -          ld  b,0
 1811 D1:C465 4F -  -  -          ld  c,a
 1812 D1:C466 09 -  -  -          add hl,bc
 1813 D1:C467 CD 79 AE D1         READ_ACCESS
 1814 D1:C46B E1 -  -  -      pop hl
 1815 D1:C46C DD AE 00 -      xor a,(ix+REGA)
 1816 D1:C46F DD 77 00 -      ld  (ix+REGA),A
 1817 D1:C472 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1818 D1:C486 C3 F6 B6 D1     jp i6502NextLoad
 1819 D1:C48A -  -  -  -  
 1820 D1:C48A -  -  -  -  ;(indirect),Y	EOR (oper),Y	51	2	5* 
 1821 D1:C48A -  -  -  -  inst6502_eor_indy:
 1822 D1:C48A ED 33 05 -      ADDCYC(5)
 1823 D1:C48D E5 -  -  -      push hl
 1824 D1:C48E 7E -  -  -          ld  a,(hl)
 1825 D1:C48F 21 00 38 D0         ld  hl,ZEROPAGE
 1826 D1:C493 85 -  -  -          add a,L
 1827 D1:C494 6F -  -  -          ld  L,a
 1828 D1:C495 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1829 D1:C496 2C -  -  -          inc L
 1830 D1:C497 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1831 D1:C49A 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1832 D1:C49B 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1833 D1:C49D 24 -  -  -          inc h
 1834 D1:C49E FD 23 -  -          ADDCYC(1)
 1835 D1:C4A0 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1836 D1:C4A1 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1837 D1:C4A3 ED 6C -  -          mlt hl          ;23.
 1838 D1:C4A5 01 00 40 D0         ld  bc,PAGETABLE
 1839 D1:C4A9 09 -  -  -          add hl,bc
 1840 D1:C4AA ED 27 -  -          ld  hl,(hl)     ;address get.
 1841 D1:C4AC 01 00 00 00         ld  bc,0
 1842 D1:C4B0 4F -  -  -          ld  c,a
 1843 D1:C4B1 09 -  -  -          add hl,bc       ;Full address get.
 1844 D1:C4B2 CD 79 AE D1         READ_ACCESS
 1845 D1:C4B6 E1 -  -  -      pop hl
 1846 D1:C4B7 DD AE 00 -      xor a,(ix+REGA)
 1847 D1:C4BA DD 77 00 -      ld  (ix+REGA),A
 1848 D1:C4BD DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1849 D1:C4D1 C3 F6 B6 D1     jp i6502NextLoad
 1850 D1:C4D5 -  -  -  -  
 1851 D1:C4D5 -  -  -  -  ;-----------------------------------------------------------------------------
 1852 D1:C4D5 -  -  -  -  ;ORA - OR Memory with Accumulator
 1853 D1:C4D5 -  -  -  -  ;A OR M -> A
 1854 D1:C4D5 -  -  -  -  ;N	Z	C	I	D	V
 1855 D1:C4D5 -  -  -  -  ;+	+	-	-	-	-
 1856 D1:C4D5 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 1857 D1:C4D5 -  -  -  -  
 1858 D1:C4D5 -  -  -  -  ;immediate	ORA #oper	09	2	2  
 1859 D1:C4D5 -  -  -  -  inst6502_ora_imm:
 1860 D1:C4D5 ED 33 02 -      ADDCYC(2)
 1861 D1:C4D8 7E -  -  -      ld  a,(hl)
 1862 D1:C4D9 DD B6 00 -      or  a,(ix+REGA)
 1863 D1:C4DC DD 77 00 -      ld  (ix+REGA),A
 1864 D1:C4DF DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1865 D1:C4F3 C3 F6 B6 D1     jp i6502NextLoad
 1866 D1:C4F7 -  -  -  -  
 1867 D1:C4F7 -  -  -  -  ;zeropage	ORA oper	05	2	3  
 1868 D1:C4F7 -  -  -  -  inst6502_ora_zp:
 1869 D1:C4F7 ED 33 03 -      ADDCYC(3)
 1870 D1:C4FA 7E -  -  -      ld  a,(hl)
 1871 D1:C4FB 01 00 38 D0     ld  bc,ZEROPAGE
 1872 D1:C4FF 81 -  -  -      add a,c
 1873 D1:C500 4F -  -  -      ld  c,a
 1874 D1:C501 0A -  -  -      ld  a,(bc)
 1875 D1:C502 DD B6 00 -      or  a,(ix+REGA)
 1876 D1:C505 DD 77 00 -      ld  (ix+REGA),A
 1877 D1:C508 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1878 D1:C51C C3 F6 B6 D1     jp i6502NextLoad
 1879 D1:C520 -  -  -  -  
 1880 D1:C520 -  -  -  -  ;zeropage,X	ORA oper,X	15	2	4  
 1881 D1:C520 -  -  -  -  inst6502_ora_zpx:
 1882 D1:C520 ED 33 04 -      ADDCYC(4)
 1883 D1:C523 7E -  -  -      ld  a,(hl)
 1884 D1:C524 01 00 38 D0     ld  bc,ZEROPAGE
 1885 D1:C528 81 -  -  -      add a,c
 1886 D1:C529 DD 86 01 -      add a,(ix+REGX)
 1887 D1:C52C 4F -  -  -      ld  c,a
 1888 D1:C52D 0A -  -  -      ld  a,(bc)
 1889 D1:C52E DD B6 00 -      or  a,(ix+REGA)
 1890 D1:C531 DD 77 00 -      ld  (ix+REGA),A
 1891 D1:C534 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1892 D1:C548 C3 F6 B6 D1     jp i6502NextLoad
 1893 D1:C54C -  -  -  -  
 1894 D1:C54C -  -  -  -  ;absolute	ORA oper	0D	3	4  
 1895 D1:C54C -  -  -  -  inst6502_ora_abs:
 1896 D1:C54C ED 33 04 -      ADDCYC(4)
 1897 D1:C54F CD 9E B7 D1     call subroutine6502_abs_split_start
 1898 D1:C553 E5 -  -  -      push hl
 1899 D1:C554 50 -  -  -          ld  d,b
 1900 D1:C555 79 -  -  -          ld  a,c
 1901 D1:C556 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1902 D1:C558 ED 4C -  -          mlt bc
 1903 D1:C55A 21 00 40 D0         ld  hl,PAGETABLE
 1904 D1:C55E 09 -  -  -          add hl,bc
 1905 D1:C55F ED 27 -  -          ld  hl,(hl)
 1906 D1:C561 06 00 -  -          ld  b,0
 1907 D1:C563 4F -  -  -          ld  c,a
 1908 D1:C564 09 -  -  -          add hl,bc   ;full address
 1909 D1:C565 CD 79 AE D1         READ_ACCESS
 1910 D1:C569 E1 -  -  -      pop hl
 1911 D1:C56A DD B6 00 -      or  a,(ix+REGA)
 1912 D1:C56D DD 77 00 -      ld  (ix+REGA),A
 1913 D1:C570 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1914 D1:C584 C3 F6 B6 D1     jp i6502NextLoad
 1915 D1:C588 -  -  -  -  
 1916 D1:C588 -  -  -  -  ;absolute,X	ORA oper,X	1D	3	4* 
 1917 D1:C588 -  -  -  -  inst6502_ora_absx:
 1918 D1:C588 ED 33 04 -      ADDCYC(4)
 1919 D1:C58B CD BF B7 D1     PUSH_ABSXSPLIT
 1920 D1:C58F CD 79 AE D1         READ_ACCESS
 1921 D1:C593 DD B6 00 -          or  a,(ix+REGA)
 1922 D1:C596 DD 77 00 -          ld  (ix+REGA),A
 1923 D1:C599 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1924 D1:C5AD E1 -  -  -      pop hl
 1925 D1:C5AE C3 F6 B6 D1     jp i6502NextLoad
 1926 D1:C5B2 -  -  -  -  
 1927 D1:C5B2 -  -  -  -  ;absolute,Y	ORA oper,Y	19	3	4* 
 1928 D1:C5B2 -  -  -  -  inst6502_ora_absy:
 1929 D1:C5B2 ED 33 04 -      ADDCYC(4)
 1930 D1:C5B5 CD BA B7 D1     PUSH_ABSYSPLIT
 1931 D1:C5B9 CD 79 AE D1         READ_ACCESS
 1932 D1:C5BD E1 -  -  -      pop hl
 1933 D1:C5BE DD B6 00 -      or  a,(ix+REGA)
 1934 D1:C5C1 DD 77 00 -      ld  (ix+REGA),A
 1935 D1:C5C4 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1936 D1:C5D8 C3 F6 B6 D1     jp i6502NextLoad
 1937 D1:C5DC -  -  -  -  
 1938 D1:C5DC -  -  -  -  ;(indirect,X)	ORA (oper,X)	01	2	6  
 1939 D1:C5DC -  -  -  -  inst6502_ora_indx:
 1940 D1:C5DC ED 33 06 -      ADDCYC(6)
 1941 D1:C5DF E5 -  -  -      push hl
 1942 D1:C5E0 7E -  -  -          ld  a,(hl)
 1943 D1:C5E1 21 00 38 D0         ld  hl,ZEROPAGE
 1944 D1:C5E5 85 -  -  -          add a,L
 1945 D1:C5E6 DD 86 01 -          add a,(ix+REGX)
 1946 D1:C5E9 6F -  -  -          ld  L,a
 1947 D1:C5EA 7E -  -  -          ld  a,(hl)
 1948 D1:C5EB 2C -  -  -          inc L
 1949 D1:C5EC 56 -  -  -          ld  d,(hl)
 1950 D1:C5ED 42 -  -  -          ld  b,d
 1951 D1:C5EE 0E 0C -  -          ld  c,BASETABLE_STRIDE
 1952 D1:C5F0 ED 4C -  -          mlt bc
 1953 D1:C5F2 21 00 40 D0         ld  hl,PAGETABLE
 1954 D1:C5F6 09 -  -  -          add hl,bc
 1955 D1:C5F7 ED 27 -  -          ld  hl,(hl)
 1956 D1:C5F9 06 00 -  -          ld  b,0
 1957 D1:C5FB 4F -  -  -          ld  c,a
 1958 D1:C5FC 09 -  -  -          add hl,bc
 1959 D1:C5FD CD 79 AE D1         READ_ACCESS
 1960 D1:C601 E1 -  -  -      pop hl
 1961 D1:C602 DD B6 00 -      or  a,(ix+REGA)
 1962 D1:C605 DD 77 00 -      ld  (ix+REGA),A
 1963 D1:C608 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1964 D1:C61C C3 F6 B6 D1     jp i6502NextLoad
 1965 D1:C620 -  -  -  -  
 1966 D1:C620 -  -  -  -  ;(indirect),Y	ORA (oper),Y	11	2	5* 
 1967 D1:C620 -  -  -  -  inst6502_ora_indy:
 1968 D1:C620 ED 33 05 -      ADDCYC(5)
 1969 D1:C623 E5 -  -  -      push hl
 1970 D1:C624 7E -  -  -          ld  a,(hl)
 1971 D1:C625 21 00 38 D0         ld  hl,ZEROPAGE
 1972 D1:C629 85 -  -  -          add a,L
 1973 D1:C62A 6F -  -  -          ld  L,a
 1974 D1:C62B 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 1975 D1:C62C 2C -  -  -          inc L
 1976 D1:C62D DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 1977 D1:C630 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 1978 D1:C631 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 1979 D1:C633 24 -  -  -          inc h
 1980 D1:C634 FD 23 -  -          ADDCYC(1)
 1981 D1:C636 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 1982 D1:C637 2E 0C -  -          ld  L,BASETABLE_STRIDE
 1983 D1:C639 ED 6C -  -          mlt hl          ;23.
 1984 D1:C63B 01 00 40 D0         ld  bc,PAGETABLE
 1985 D1:C63F 09 -  -  -          add hl,bc
 1986 D1:C640 ED 27 -  -          ld  hl,(hl)     ;address get.
 1987 D1:C642 01 00 00 00         ld  bc,0
 1988 D1:C646 4F -  -  -          ld  c,a
 1989 D1:C647 09 -  -  -          add hl,bc       ;Full address get.
 1990 D1:C648 CD 79 AE D1         READ_ACCESS
 1991 D1:C64C E1 -  -  -      pop hl
 1992 D1:C64D DD B6 00 -      or  a,(ix+REGA)
 1993 D1:C650 DD 77 00 -      ld  (ix+REGA),A
 1994 D1:C653 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 1995 D1:C667 C3 F6 B6 D1     jp i6502NextLoad
 1996 D1:C66B -  -  -  -  
 1997 D1:C66B -  -  -  -  ;-----------------------------------------------------------------------------
 1998 D1:C66B -  -  -  -  ;-----------------------------------------------------------------------------
 1999 D1:C66B -  -  -  -  ;-----------------------------------------------------------------------------
 2000 D1:C66B -  -  -  -  ;Instructions by type: Shift & Rotate Instructions
 2001 D1:C66B -  -  -  -  ;ASL - Shift Left One Bit (Memory or Accumulator)
 2002 D1:C66B -  -  -  -  ;C <- [76543210] <- 0
 2003 D1:C66B -  -  -  -  ;N	Z	C	I	D	V
 2004 D1:C66B -  -  -  -  ;+	+	+	-	-	-
 2005 D1:C66B -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2006 D1:C66B -  -  -  -  
 2007 D1:C66B -  -  -  -  ;accumulator	ASL A	0A	1	2  
 2008 D1:C66B -  -  -  -  inst6502_asl:
 2009 D1:C66B ED 33 02 -      ADDCYC(2)
 2010 D1:C66E DD 7E 00 -      ld  a,(ix+REGA)
 2011 D1:C671 CB 27 -  -      sla a
 2012 D1:C673 DD 77 00 -      ld  (ix+REGA),a
 2013 D1:C676 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2014 D1:C690 C3 0F B7 D1     jp i6502FinishLoad
 2015 D1:C694 -  -  -  -  
 2016 D1:C694 -  -  -  -  ;zeropage	ASL oper	06	2	5  
 2017 D1:C694 -  -  -  -  inst6502_asl_zp:
 2018 D1:C694 ED 33 05 -      ADDCYC(5)
 2019 D1:C697 7E -  -  -      ld  a,(hl)
 2020 D1:C698 01 00 38 D0     ld  bc,ZEROPAGE
 2021 D1:C69C 81 -  -  -      add a,c
 2022 D1:C69D 4F -  -  -      ld  c,a
 2023 D1:C69E 0A -  -  -      ld  a,(bc)
 2024 D1:C69F CB 27 -  -      sla a
 2025 D1:C6A1 02 -  -  -      ld  (bc),a
 2026 D1:C6A2 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2027 D1:C6BC C3 F6 B6 D1     jp i6502NextLoad
 2028 D1:C6C0 -  -  -  -  
 2029 D1:C6C0 -  -  -  -  ;zeropage,X	ASL oper,X	16	2	6  
 2030 D1:C6C0 -  -  -  -  inst6502_asl_zpx:
 2031 D1:C6C0 ED 33 06 -      ADDCYC(6)
 2032 D1:C6C3 7E -  -  -      ld  a,(hl)
 2033 D1:C6C4 01 00 38 D0     ld  bc,ZEROPAGE
 2034 D1:C6C8 81 -  -  -      add a,c
 2035 D1:C6C9 DD 86 01 -      add a,(ix+REGX)
 2036 D1:C6CC 4F -  -  -      ld  c,a
 2037 D1:C6CD 0A -  -  -      ld  a,(bc)
 2038 D1:C6CE CB 27 -  -      sla a
 2039 D1:C6D0 02 -  -  -      ld  (bc),a
 2040 D1:C6D1 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2041 D1:C6EB C3 F6 B6 D1     jp i6502NextLoad
 2042 D1:C6EF -  -  -  -  
 2043 D1:C6EF -  -  -  -  ;absolute	ASL oper	0E	3	6  
 2044 D1:C6EF -  -  -  -  inst6502_asl_abs:
 2045 D1:C6EF ED 33 06 -      ADDCYC(6)
 2046 D1:C6F2 CD 9E B7 D1     call subroutine6502_abs_split_start
 2047 D1:C6F6 E5 -  -  -      push hl
 2048 D1:C6F7 50 -  -  -          ld  d,b
 2049 D1:C6F8 79 -  -  -          ld  a,c
 2050 D1:C6F9 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2051 D1:C6FB ED 4C -  -          mlt bc
 2052 D1:C6FD 21 00 40 D0         ld  hl,PAGETABLE
 2053 D1:C701 09 -  -  -          add hl,bc
 2054 D1:C702 ED 27 -  -          ld  hl,(hl)
 2055 D1:C704 06 00 -  -          ld  b,0
 2056 D1:C706 4F -  -  -          ld  c,a
 2057 D1:C707 09 -  -  -          add hl,bc   ;full address
 2058 D1:C708 CD 79 AE D1         READ_ACCESS
 2059 D1:C70C CB 27 -  -          sla a
 2060 D1:C70E 4F -  -  -          ld  c,a
 2061 D1:C70F DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2062 D1:C729 41 -  -  -          ld  b,c
 2063 D1:C72A CD 1B AF D1         WRITE_ACCESS
 2064 D1:C72E E1 -  -  -      pop hl
 2065 D1:C72F C3 F6 B6 D1     jp i6502NextLoad
 2066 D1:C733 -  -  -  -  
 2067 D1:C733 -  -  -  -  ;absolute,X	ASL oper,X	1E	3	7  
 2068 D1:C733 -  -  -  -  inst6502_asl_absx:
 2069 D1:C733 ED 33 07 -      ADDCYC(7)
 2070 D1:C736 CD FB B7 D1     PUSH_ABSXSPLIT_NODEP
 2071 D1:C73A CD 79 AE D1         READ_ACCESS
 2072 D1:C73E CB 27 -  -          sla a
 2073 D1:C740 4F -  -  -          ld  c,a
 2074 D1:C741 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2075 D1:C75B 41 -  -  -          ld  b,c
 2076 D1:C75C CD 1B AF D1         WRITE_ACCESS
 2077 D1:C760 E1 -  -  -      pop hl
 2078 D1:C761 C3 F6 B6 D1     jp i6502NextLoad
 2079 D1:C765 -  -  -  -  
 2080 D1:C765 -  -  -  -  ;-----------------------------------------------------------------------------
 2081 D1:C765 -  -  -  -  ;LSR - Shift One Bit Right (Memory or Accumulator)
 2082 D1:C765 -  -  -  -  ;0 -> [76543210] -> C
 2083 D1:C765 -  -  -  -  ;N	Z	C	I	D	V
 2084 D1:C765 -  -  -  -  ;0	+	+	-	-	-
 2085 D1:C765 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2086 D1:C765 -  -  -  -  
 2087 D1:C765 -  -  -  -  ;accumulator	LSR A	4A	1	2  
 2088 D1:C765 -  -  -  -  inst6502_lsr:
 2089 D1:C765 ED 33 02 -      ADDCYC(2)
 2090 D1:C768 DD 7E 00 -      ld  a,(ix+REGA)
 2091 D1:C76B CB 3F -  -      srl a
 2092 D1:C76D DD 77 00 -      ld  (ix+REGA),a
 2093 D1:C770 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2094 D1:C78A C3 0F B7 D1     jp i6502FinishLoad
 2095 D1:C78E -  -  -  -  
 2096 D1:C78E -  -  -  -  ;zeropage	LSR oper	46	2	5  
 2097 D1:C78E -  -  -  -  inst6502_lsr_zp:
 2098 D1:C78E ED 33 05 -      ADDCYC(5)
 2099 D1:C791 7E -  -  -      ld  a,(hl)
 2100 D1:C792 01 00 38 D0     ld  bc,ZEROPAGE
 2101 D1:C796 81 -  -  -      add a,c
 2102 D1:C797 4F -  -  -      ld  c,a
 2103 D1:C798 0A -  -  -      ld  a,(bc)
 2104 D1:C799 CB 3F -  -      srl a
 2105 D1:C79B 02 -  -  -      ld  (bc),a
 2106 D1:C79C DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2107 D1:C7B6 C3 F6 B6 D1     jp i6502NextLoad
 2108 D1:C7BA -  -  -  -  
 2109 D1:C7BA -  -  -  -  ;zeropage,X	LSR oper,X	56	2	6  
 2110 D1:C7BA -  -  -  -  inst6502_lsr_zpx:
 2111 D1:C7BA ED 33 06 -      ADDCYC(6)
 2112 D1:C7BD 7E -  -  -      ld  a,(hl)
 2113 D1:C7BE 01 00 38 D0     ld  bc,ZEROPAGE
 2114 D1:C7C2 81 -  -  -      add a,c
 2115 D1:C7C3 DD 86 01 -      add a,(ix+REGX)
 2116 D1:C7C6 4F -  -  -      ld  c,a
 2117 D1:C7C7 0A -  -  -      ld  a,(bc)
 2118 D1:C7C8 CB 3F -  -      srl a
 2119 D1:C7CA 02 -  -  -      ld  (bc),a
 2120 D1:C7CB DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2121 D1:C7E5 C3 F6 B6 D1     jp i6502NextLoad
 2122 D1:C7E9 -  -  -  -      
 2123 D1:C7E9 -  -  -  -  ;absolute	LSR oper	4E	3	6  
 2124 D1:C7E9 -  -  -  -  inst6502_lsr_abs:
 2125 D1:C7E9 ED 33 06 -      ADDCYC(6)
 2126 D1:C7EC CD 9E B7 D1     call subroutine6502_abs_split_start
 2127 D1:C7F0 E5 -  -  -      push hl
 2128 D1:C7F1 50 -  -  -          ld  d,b
 2129 D1:C7F2 79 -  -  -          ld  a,c
 2130 D1:C7F3 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2131 D1:C7F5 ED 4C -  -          mlt bc
 2132 D1:C7F7 21 00 40 D0         ld  hl,PAGETABLE
 2133 D1:C7FB 09 -  -  -          add hl,bc
 2134 D1:C7FC ED 27 -  -          ld  hl,(hl)
 2135 D1:C7FE 06 00 -  -          ld  b,0
 2136 D1:C800 4F -  -  -          ld  c,a
 2137 D1:C801 09 -  -  -          add hl,bc   ;full address
 2138 D1:C802 CD 79 AE D1         READ_ACCESS
 2139 D1:C806 CB 3F -  -          srl a
 2140 D1:C808 4F -  -  -          ld  c,a
 2141 D1:C809 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2142 D1:C823 41 -  -  -          ld  b,c
 2143 D1:C824 CD 1B AF D1         WRITE_ACCESS
 2144 D1:C828 E1 -  -  -      pop hl
 2145 D1:C829 C3 F6 B6 D1     jp i6502NextLoad
 2146 D1:C82D -  -  -  -  
 2147 D1:C82D -  -  -  -  ;absolute,X	LSR oper,X	5E	3	7  
 2148 D1:C82D -  -  -  -  inst6502_lsr_absx:
 2149 D1:C82D ED 33 07 -      ADDCYC(7)
 2150 D1:C830 CD FB B7 D1     PUSH_ABSXSPLIT_NODEP
 2151 D1:C834 CD 79 AE D1         READ_ACCESS
 2152 D1:C838 CB 3F -  -          srl a
 2153 D1:C83A 4F -  -  -          ld  c,a
 2154 D1:C83B DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2155 D1:C855 41 -  -  -          ld  b,c
 2156 D1:C856 CD 1B AF D1         WRITE_ACCESS
 2157 D1:C85A E1 -  -  -      pop hl
 2158 D1:C85B C3 F6 B6 D1     jp i6502NextLoad
 2159 D1:C85F -  -  -  -  
 2160 D1:C85F -  -  -  -  ;-----------------------------------------------------------------------------
 2161 D1:C85F -  -  -  -  ;ROL - Rotate One Bit Left (Memory or Accumulator)
 2162 D1:C85F -  -  -  -  ;C <- [76543210] <- C
 2163 D1:C85F -  -  -  -  ;N	Z	C	I	D	V
 2164 D1:C85F -  -  -  -  ;+	+	+	-	-	-
 2165 D1:C85F -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2166 D1:C85F -  -  -  -  
 2167 D1:C85F -  -  -  -  ;accumulator	ROL A	2A	1	2  
 2168 D1:C85F -  -  -  -  inst6502_rol:
 2169 D1:C85F ED 33 02 -      ADDCYC(2)
 2170 D1:C862 DD 7E 04 -      ld  a,(ix+REGSR)
 2171 D1:C865 1F -  -  -      rra
 2172 D1:C866 DD CB 00 16     rl  (ix+REGA)
 2173 D1:C86A DD 7E 00 -      ld  a,(ix+REGA)
 2174 D1:C86D DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2175 D1:C887 C3 0F B7 D1     jp i6502FinishLoad
 2176 D1:C88B -  -  -  -  
 2177 D1:C88B -  -  -  -  ;zeropage	ROL oper	26	2	5  
 2178 D1:C88B -  -  -  -  inst6502_rol_zp:
 2179 D1:C88B ED 33 05 -      ADDCYC(5)
 2180 D1:C88E 7E -  -  -      ld  a,(hl)
 2181 D1:C88F 01 00 38 D0     ld  bc,ZEROPAGE
 2182 D1:C893 81 -  -  -      add a,c
 2183 D1:C894 4F -  -  -      ld  c,a
 2184 D1:C895 DD 7E 04 -      ld  a,(ix+REGSR)
 2185 D1:C898 1F -  -  -      rra
 2186 D1:C899 0A -  -  -      ld  a,(bc)
 2187 D1:C89A 17 -  -  -      rla
 2188 D1:C89B 02 -  -  -      ld  (bc),a
 2189 D1:C89C DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2190 D1:C8B6 C3 F6 B6 D1     jp i6502NextLoad
 2191 D1:C8BA -  -  -  -  
 2192 D1:C8BA -  -  -  -  ;zeropage,X	ROL oper,X	36	2	6  
 2193 D1:C8BA -  -  -  -  inst6502_rol_zpx:
 2194 D1:C8BA ED 33 06 -      ADDCYC(6)
 2195 D1:C8BD 7E -  -  -      ld  a,(hl)
 2196 D1:C8BE 01 00 38 D0     ld  bc,ZEROPAGE
 2197 D1:C8C2 81 -  -  -      add a,c
 2198 D1:C8C3 DD 86 01 -      add a,(ix+REGX)
 2199 D1:C8C6 4F -  -  -      ld  c,a
 2200 D1:C8C7 DD 7E 04 -      ld  a,(ix+REGSR)
 2201 D1:C8CA 1F -  -  -      rra
 2202 D1:C8CB 0A -  -  -      ld  a,(bc)
 2203 D1:C8CC 17 -  -  -      rla
 2204 D1:C8CD 02 -  -  -      ld  (bc),a
 2205 D1:C8CE DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2206 D1:C8E8 C3 F6 B6 D1     jp i6502NextLoad
 2207 D1:C8EC -  -  -  -  
 2208 D1:C8EC -  -  -  -  ;absolute	ROL oper	2E	3	6  
 2209 D1:C8EC -  -  -  -  inst6502_rol_abs:
 2210 D1:C8EC ED 33 06 -      ADDCYC(6)
 2211 D1:C8EF CD 9E B7 D1     call subroutine6502_abs_split_start
 2212 D1:C8F3 E5 -  -  -      push hl
 2213 D1:C8F4 50 -  -  -          ld  d,b
 2214 D1:C8F5 79 -  -  -          ld  a,c
 2215 D1:C8F6 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2216 D1:C8F8 ED 4C -  -          mlt bc
 2217 D1:C8FA 21 00 40 D0         ld  hl,PAGETABLE
 2218 D1:C8FE 09 -  -  -          add hl,bc
 2219 D1:C8FF ED 27 -  -          ld  hl,(hl)
 2220 D1:C901 06 00 -  -          ld  b,0
 2221 D1:C903 4F -  -  -          ld  c,a
 2222 D1:C904 09 -  -  -          add hl,bc   ;full address
 2223 D1:C905 CD 79 AE D1         READ_ACCESS
 2224 D1:C909 DD 46 04 -          ld  b,(ix+REGSR)
 2225 D1:C90C CB 18 -  -          rr b
 2226 D1:C90E 17 -  -  -          rla
 2227 D1:C90F 4F -  -  -          ld  c,a
 2228 D1:C910 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2229 D1:C92A 41 -  -  -          ld  b,c
 2230 D1:C92B CD 1B AF D1         WRITE_ACCESS
 2231 D1:C92F E1 -  -  -      pop hl
 2232 D1:C930 C3 F6 B6 D1     jp i6502NextLoad
 2233 D1:C934 -  -  -  -  
 2234 D1:C934 -  -  -  -  ;absolute,X	ROL oper,X	3E	3	7  
 2235 D1:C934 -  -  -  -  inst6502_rol_absx:
 2236 D1:C934 ED 33 07 -      ADDCYC(7)
 2237 D1:C937 CD FB B7 D1     PUSH_ABSXSPLIT_NODEP
 2238 D1:C93B CD 79 AE D1         READ_ACCESS
 2239 D1:C93F DD 46 04 -          ld  b,(ix+REGSR)
 2240 D1:C942 CB 18 -  -          rr b
 2241 D1:C944 17 -  -  -          rla
 2242 D1:C945 4F -  -  -          ld  c,a
 2243 D1:C946 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2244 D1:C960 41 -  -  -          ld  b,c
 2245 D1:C961 CD 1B AF D1         WRITE_ACCESS
 2246 D1:C965 E1 -  -  -      pop hl
 2247 D1:C966 C3 F6 B6 D1     jp i6502NextLoad
 2248 D1:C96A -  -  -  -  
 2249 D1:C96A -  -  -  -  ;-----------------------------------------------------------------------------
 2250 D1:C96A -  -  -  -  ;ROR - Rotate One Bit Right (Memory or Accumulator)
 2251 D1:C96A -  -  -  -  ;C -> [76543210] -> C
 2252 D1:C96A -  -  -  -  ;N	Z	C	I	D	V
 2253 D1:C96A -  -  -  -  ;+	+	+	-	-	-
 2254 D1:C96A -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2255 D1:C96A -  -  -  -  
 2256 D1:C96A -  -  -  -  ;accumulator	ROR A	6A	1	2  
 2257 D1:C96A -  -  -  -  inst6502_ror:
 2258 D1:C96A ED 33 02 -      ADDCYC(2)
 2259 D1:C96D DD 7E 04 -      ld  a,(ix+REGSR)
 2260 D1:C970 1F -  -  -      rra
 2261 D1:C971 DD CB 00 1E     rr  (ix+REGA)
 2262 D1:C975 DD 7E 00 -      ld  a,(ix+REGA)
 2263 D1:C978 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2264 D1:C992 C3 0F B7 D1     jp i6502FinishLoad
 2265 D1:C996 -  -  -  -  
 2266 D1:C996 -  -  -  -  ;zeropage	ROR oper	66	2	5  
 2267 D1:C996 -  -  -  -  inst6502_ror_zp:
 2268 D1:C996 ED 33 05 -      ADDCYC(5)
 2269 D1:C999 7E -  -  -      ld  a,(hl)
 2270 D1:C99A 01 00 38 D0     ld  bc,ZEROPAGE
 2271 D1:C99E 81 -  -  -      add a,c
 2272 D1:C99F 4F -  -  -      ld  c,a
 2273 D1:C9A0 DD 7E 04 -      ld  a,(ix+REGSR)
 2274 D1:C9A3 1F -  -  -      rra
 2275 D1:C9A4 0A -  -  -      ld  a,(bc)
 2276 D1:C9A5 1F -  -  -      rra
 2277 D1:C9A6 02 -  -  -      ld  (bc),a
 2278 D1:C9A7 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2279 D1:C9C1 C3 F6 B6 D1     jp i6502NextLoad
 2280 D1:C9C5 -  -  -  -  
 2281 D1:C9C5 -  -  -  -  ;zeropage,X	ROR oper,X	76	2	6  
 2282 D1:C9C5 -  -  -  -  inst6502_ror_zpx:
 2283 D1:C9C5 ED 33 06 -      ADDCYC(6)
 2284 D1:C9C8 7E -  -  -      ld  a,(hl)
 2285 D1:C9C9 01 00 38 D0     ld  bc,ZEROPAGE
 2286 D1:C9CD 81 -  -  -      add a,c
 2287 D1:C9CE DD 86 01 -      add a,(ix+REGX)
 2288 D1:C9D1 4F -  -  -      ld  c,a
 2289 D1:C9D2 DD 7E 04 -      ld  a,(ix+REGSR)
 2290 D1:C9D5 1F -  -  -      rra
 2291 D1:C9D6 0A -  -  -      ld  a,(bc)
 2292 D1:C9D7 1F -  -  -      rra
 2293 D1:C9D8 02 -  -  -      ld  (bc),a
 2294 D1:C9D9 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2295 D1:C9F3 C3 F6 B6 D1     jp i6502NextLoad
 2296 D1:C9F7 -  -  -  -  
 2297 D1:C9F7 -  -  -  -  ;absolute	ROR oper	6E	3	6  
 2298 D1:C9F7 -  -  -  -  inst6502_ror_abs:
 2299 D1:C9F7 ED 33 06 -      ADDCYC(6)
 2300 D1:C9FA CD 9E B7 D1     call subroutine6502_abs_split_start
 2301 D1:C9FE E5 -  -  -      push hl
 2302 D1:C9FF 50 -  -  -          ld  d,b
 2303 D1:CA00 79 -  -  -          ld  a,c
 2304 D1:CA01 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2305 D1:CA03 ED 4C -  -          mlt bc
 2306 D1:CA05 21 00 40 D0         ld  hl,PAGETABLE
 2307 D1:CA09 09 -  -  -          add hl,bc
 2308 D1:CA0A ED 27 -  -          ld  hl,(hl)
 2309 D1:CA0C 06 00 -  -          ld  b,0
 2310 D1:CA0E 4F -  -  -          ld  c,a
 2311 D1:CA0F 09 -  -  -          add hl,bc   ;full address
 2312 D1:CA10 CD 79 AE D1         READ_ACCESS
 2313 D1:CA14 DD 46 04 -          ld  b,(ix+REGSR)
 2314 D1:CA17 CB 18 -  -          rr b
 2315 D1:CA19 1F -  -  -          rra
 2316 D1:CA1A 4F -  -  -          ld  c,a
 2317 D1:CA1B DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2318 D1:CA35 41 -  -  -          ld  b,c
 2319 D1:CA36 CD 1B AF D1         WRITE_ACCESS
 2320 D1:CA3A E1 -  -  -      pop hl
 2321 D1:CA3B C3 F6 B6 D1     jp i6502NextLoad
 2322 D1:CA3F -  -  -  -  
 2323 D1:CA3F -  -  -  -  ;absolute,X	ROR oper,X	7E	3	7  
 2324 D1:CA3F -  -  -  -  inst6502_ror_absx:
 2325 D1:CA3F ED 33 07 -      ADDCYC(7)
 2326 D1:CA42 CD FB B7 D1     PUSH_ABSXSPLIT_NODEP
 2327 D1:CA46 CD 79 AE D1         READ_ACCESS
 2328 D1:CA4A DD 46 04 -          ld  b,(ix+REGSR)
 2329 D1:CA4D CB 18 -  -          rr b
 2330 D1:CA4F 1F -  -  -          rra
 2331 D1:CA50 4F -  -  -          ld  c,a
 2332 D1:CA51 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -          FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2333 D1:CA6B 41 -  -  -          ld  b,c
 2334 D1:CA6C CD 1B AF D1         WRITE_ACCESS
 2335 D1:CA70 E1 -  -  -      pop hl
 2336 D1:CA71 C3 F6 B6 D1     jp i6502NextLoad
 2337 D1:CA75 -  -  -  -  
 2338 D1:CA75 -  -  -  -  ;-----------------------------------------------------------------------------
 2339 D1:CA75 -  -  -  -  ;-----------------------------------------------------------------------------
 2340 D1:CA75 -  -  -  -  ;-----------------------------------------------------------------------------
 2341 D1:CA75 -  -  -  -  ;Instructions by type: Flag Instructions
 2342 D1:CA75 -  -  -  -  
 2343 D1:CA75 -  -  -  -  ;CLC - Clear Carry Flag
 2344 D1:CA75 -  -  -  -  ;0 -> C
 2345 D1:CA75 -  -  -  -  ;N	Z	C	I	D	V
 2346 D1:CA75 -  -  -  -  ;-	-	0	-	-	-
 2347 D1:CA75 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2348 D1:CA75 -  -  -  -  ;implied	CLC	18	1	2  
 2349 D1:CA75 -  -  -  -  inst6502_clc:
 2350 D1:CA75 ED 33 02 -      ADDCYC(2)
 2351 D1:CA78 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 2352 D1:CA7C C3 0F B7 D1     jp  i6502FinishLoad
 2353 D1:CA80 -  -  -  -  
 2354 D1:CA80 -  -  -  -  ;CLD - Clear Decimal Mode
 2355 D1:CA80 -  -  -  -  ;0 -> D
 2356 D1:CA80 -  -  -  -  ;N	Z	C	I	D	V
 2357 D1:CA80 -  -  -  -  ;-	-	-	-	0	-
 2358 D1:CA80 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2359 D1:CA80 -  -  -  -  ;implied	CLD	D8	1	2  
 2360 D1:CA80 -  -  -  -  inst6502_cld:
 2361 D1:CA80 ED 33 02 -      ADDCYC(2)
 2362 D1:CA83 DD CB 04 9E     res SF_DEC,(ix+REGSR)
 2363 D1:CA87 C3 0F B7 D1     jp  i6502FinishLoad
 2364 D1:CA8B -  -  -  -  
 2365 D1:CA8B -  -  -  -  ;CLI -  Clear Interrupt Disable Bit
 2366 D1:CA8B -  -  -  -  ;0 -> I
 2367 D1:CA8B -  -  -  -  ;N	Z	C	I	D	V
 2368 D1:CA8B -  -  -  -  ;-	-	-	0	-	-
 2369 D1:CA8B -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2370 D1:CA8B -  -  -  -  ;implied	CLI	58	1	2  
 2371 D1:CA8B -  -  -  -  inst6502_cli:
 2372 D1:CA8B ED 33 02 -      ADDCYC(2)
 2373 D1:CA8E DD CB 04 96     res SF_INT,(ix+REGSR)
 2374 D1:CA92 C3 0F B7 D1     jp  i6502FinishLoad
 2375 D1:CA96 -  -  -  -  
 2376 D1:CA96 -  -  -  -  ;CLV - Clear Overflow Flag
 2377 D1:CA96 -  -  -  -  ;0 -> V
 2378 D1:CA96 -  -  -  -  ;N	Z	C	I	D	V
 2379 D1:CA96 -  -  -  -  ;-	-	-	-	-	0
 2380 D1:CA96 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2381 D1:CA96 -  -  -  -  ;implied	CLV	B8	1	2  
 2382 D1:CA96 -  -  -  -  inst6502_clv:
 2383 D1:CA96 ED 33 02 -      ADDCYC(2)
 2384 D1:CA99 DD CB 04 B6     res SF_OVER,(ix+REGSR)
 2385 D1:CA9D C3 0F B7 D1     jp  i6502FinishLoad
 2386 D1:CAA1 -  -  -  -  
 2387 D1:CAA1 -  -  -  -  ;SEC - Set Carry Flag
 2388 D1:CAA1 -  -  -  -  ;1 -> C
 2389 D1:CAA1 -  -  -  -  ;N	Z	C	I	D	V
 2390 D1:CAA1 -  -  -  -  ;-	-	1	-	-	-
 2391 D1:CAA1 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2392 D1:CAA1 -  -  -  -  ;implied	SEC	38	1	2  
 2393 D1:CAA1 -  -  -  -  inst6502_sec:
 2394 D1:CAA1 ED 33 02 -      ADDCYC(2)
 2395 D1:CAA4 DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 2396 D1:CAA8 C3 0F B7 D1     jp  i6502FinishLoad
 2397 D1:CAAC -  -  -  -  
 2398 D1:CAAC -  -  -  -  ;SED - Set Decimal Flag
 2399 D1:CAAC -  -  -  -  ;1 -> D
 2400 D1:CAAC -  -  -  -  ;N	Z	C	I	D	V
 2401 D1:CAAC -  -  -  -  ;-	-	-	-	1	-
 2402 D1:CAAC -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2403 D1:CAAC -  -  -  -  ;implied	SED	F8	1	2  
 2404 D1:CAAC -  -  -  -  inst6502_sed:
 2405 D1:CAAC ED 33 02 -      ADDCYC(2)
 2406 D1:CAAF DD CB 04 DE     set SF_DEC,(ix+REGSR)
 2407 D1:CAB3 C3 0F B7 D1     jp  i6502FinishLoad
 2408 D1:CAB7 -  -  -  -  
 2409 D1:CAB7 -  -  -  -  ;SEI - Set Interrupt Disable Status
 2410 D1:CAB7 -  -  -  -  ;1 -> I
 2411 D1:CAB7 -  -  -  -  ;N	Z	C	I	D	V
 2412 D1:CAB7 -  -  -  -  ;-	-	-	1	-	-
 2413 D1:CAB7 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2414 D1:CAB7 -  -  -  -  ;implied	SEI	78	1	2  
 2415 D1:CAB7 -  -  -  -  inst6502_sei:
 2416 D1:CAB7 ED 33 02 -      ADDCYC(2)
 2417 D1:CABA DD CB 04 D6     set SF_INT,(ix+REGSR)
 2418 D1:CABE C3 0F B7 D1     jp  i6502FinishLoad
 2419 D1:CAC2 -  -  -  -  
 2420 D1:CAC2 -  -  -  -  ;-----------------------------------------------------------------------------
 2421 D1:CAC2 -  -  -  -  ;-----------------------------------------------------------------------------
 2422 D1:CAC2 -  -  -  -  ;-----------------------------------------------------------------------------
 2423 D1:CAC2 -  -  -  -  ;Instructions by type: Comparisons
 2424 D1:CAC2 -  -  -  -  
 2425 D1:CAC2 -  -  -  -  ;CMP - Compare Memory with Accumulator
 2426 D1:CAC2 -  -  -  -  ;A - M
 2427 D1:CAC2 -  -  -  -  ;N	Z	C	I	D	V
 2428 D1:CAC2 -  -  -  -  ;+	+	+	-	-	-
 2429 D1:CAC2 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2430 D1:CAC2 -  -  -  -  
 2431 D1:CAC2 -  -  -  -  ;immediate	CMP #oper	C9	2	2  
 2432 D1:CAC2 -  -  -  -  inst6502_cmp_imm:
 2433 D1:CAC2 ED 33 02 -      ADDCYC(2)
 2434 D1:CAC5 46 -  -  -      ld  b,(hl)
 2435 D1:CAC6 C3 94 B8 D1     jp  subroutine6502_cmp_combined_end
 2436 D1:CACA -  -  -  -  
 2437 D1:CACA -  -  -  -  ;zeropage	CMP oper	C5	2	3  
 2438 D1:CACA -  -  -  -  inst6502_cmp_zp:
 2439 D1:CACA ED 33 03 -      ADDCYC(3)
 2440 D1:CACD 7E -  -  -      ld  a,(hl)
 2441 D1:CACE 01 00 38 D0     ld  bc,ZEROPAGE
 2442 D1:CAD2 81 -  -  -      add a,c
 2443 D1:CAD3 4F -  -  -      ld  c,a
 2444 D1:CAD4 0A -  -  -      ld  a,(bc)
 2445 D1:CAD5 47 -  -  -      ld  b,a
 2446 D1:CAD6 C3 94 B8 D1     jp  subroutine6502_cmp_combined_end
 2447 D1:CADA -  -  -  -  
 2448 D1:CADA -  -  -  -  ;zeropage,X	CMP oper,X	D5	2	4  
 2449 D1:CADA -  -  -  -  inst6502_cmp_zpx:
 2450 D1:CADA ED 33 04 -      ADDCYC(4)
 2451 D1:CADD 7E -  -  -      ld  a,(hl)
 2452 D1:CADE 01 00 38 D0     ld  bc,ZEROPAGE
 2453 D1:CAE2 81 -  -  -      add a,c
 2454 D1:CAE3 DD 86 01 -      add a,(ix+REGX)
 2455 D1:CAE6 4F -  -  -      ld  c,a
 2456 D1:CAE7 0A -  -  -      ld  a,(bc)
 2457 D1:CAE8 47 -  -  -      ld  b,a
 2458 D1:CAE9 C3 94 B8 D1     jp  subroutine6502_cmp_combined_end
 2459 D1:CAED -  -  -  -  
 2460 D1:CAED -  -  -  -  ;absolute	CMP oper	CD	3	4  
 2461 D1:CAED -  -  -  -  inst6502_cmp_abs:
 2462 D1:CAED ED 33 04 -      ADDCYC(4)
 2463 D1:CAF0 CD 9E B7 D1     call subroutine6502_abs_split_start
 2464 D1:CAF4 E5 -  -  -      push hl
 2465 D1:CAF5 50 -  -  -          ld  d,b
 2466 D1:CAF6 79 -  -  -          ld  a,c
 2467 D1:CAF7 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2468 D1:CAF9 ED 4C -  -          mlt bc
 2469 D1:CAFB 21 00 40 D0         ld  hl,PAGETABLE
 2470 D1:CAFF 09 -  -  -          add hl,bc
 2471 D1:CB00 ED 27 -  -          ld  hl,(hl)
 2472 D1:CB02 06 00 -  -          ld  b,0
 2473 D1:CB04 4F -  -  -          ld  c,a
 2474 D1:CB05 09 -  -  -          add hl,bc   ;full address
 2475 D1:CB06 CD 79 AE D1         READ_ACCESS
 2476 D1:CB0A E1 -  -  -      pop hl
 2477 D1:CB0B 47 -  -  -      ld  b,a
 2478 D1:CB0C C3 94 B8 D1     jp  subroutine6502_cmp_combined_end
 2479 D1:CB10 -  -  -  -  
 2480 D1:CB10 -  -  -  -  ;absolute,X	CMP oper,X	DD	3	4* 
 2481 D1:CB10 -  -  -  -  inst6502_cmp_absx:
 2482 D1:CB10 ED 33 04 -      ADDCYC(4)
 2483 D1:CB13 CD BF B7 D1     PUSH_ABSXSPLIT
 2484 D1:CB17 CD 79 AE D1         READ_ACCESS
 2485 D1:CB1B E1 -  -  -      pop hl
 2486 D1:CB1C 47 -  -  -      ld  b,a
 2487 D1:CB1D C3 94 B8 D1     jp  subroutine6502_cmp_combined_end
 2488 D1:CB21 -  -  -  -  
 2489 D1:CB21 -  -  -  -  ;absolute,Y	CMP oper,Y	D9	3	4* 
 2490 D1:CB21 -  -  -  -  inst6502_cmp_absy:
 2491 D1:CB21 ED 33 04 -      ADDCYC(4)
 2492 D1:CB24 CD BA B7 D1     PUSH_ABSYSPLIT
 2493 D1:CB28 CD 79 AE D1         READ_ACCESS
 2494 D1:CB2C E1 -  -  -      pop hl
 2495 D1:CB2D 47 -  -  -      ld  b,a
 2496 D1:CB2E C3 94 B8 D1     jp  subroutine6502_cmp_combined_end
 2497 D1:CB32 -  -  -  -  
 2498 D1:CB32 -  -  -  -  ;(indirect,X)	CMP (oper,X)	C1	2	6  
 2499 D1:CB32 -  -  -  -  inst6502_cmp_indx:
 2500 D1:CB32 ED 33 06 -      ADDCYC(6)
 2501 D1:CB35 E5 -  -  -      push hl
 2502 D1:CB36 7E -  -  -          ld  a,(hl)
 2503 D1:CB37 21 00 38 D0         ld  hl,ZEROPAGE
 2504 D1:CB3B 85 -  -  -          add a,L
 2505 D1:CB3C DD 86 01 -          add a,(ix+REGX)
 2506 D1:CB3F 6F -  -  -          ld  L,a
 2507 D1:CB40 7E -  -  -          ld  a,(hl)
 2508 D1:CB41 2C -  -  -          inc L
 2509 D1:CB42 56 -  -  -          ld  d,(hl)
 2510 D1:CB43 42 -  -  -          ld  b,d
 2511 D1:CB44 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2512 D1:CB46 ED 4C -  -          mlt bc
 2513 D1:CB48 21 00 40 D0         ld  hl,PAGETABLE
 2514 D1:CB4C 09 -  -  -          add hl,bc
 2515 D1:CB4D ED 27 -  -          ld  hl,(hl)
 2516 D1:CB4F 06 00 -  -          ld  b,0
 2517 D1:CB51 4F -  -  -          ld  c,a
 2518 D1:CB52 09 -  -  -          add hl,bc
 2519 D1:CB53 CD 79 AE D1         READ_ACCESS
 2520 D1:CB57 E1 -  -  -      pop hl
 2521 D1:CB58 47 -  -  -      ld  b,a
 2522 D1:CB59 C3 94 B8 D1     jp  subroutine6502_cmp_combined_end
 2523 D1:CB5D -  -  -  -  
 2524 D1:CB5D -  -  -  -  ;(indirect),Y	CMP (oper),Y	D1	2	5* 
 2525 D1:CB5D -  -  -  -  inst6502_cmp_indy:
 2526 D1:CB5D ED 33 05 -      ADDCYC(5)
 2527 D1:CB60 E5 -  -  -      push hl
 2528 D1:CB61 7E -  -  -          ld  a,(hl)
 2529 D1:CB62 21 00 38 D0         ld  hl,ZEROPAGE
 2530 D1:CB66 85 -  -  -          add a,L
 2531 D1:CB67 6F -  -  -          ld  L,a
 2532 D1:CB68 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 2533 D1:CB69 2C -  -  -          inc L
 2534 D1:CB6A DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 2535 D1:CB6D 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 2536 D1:CB6E 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 2537 D1:CB70 24 -  -  -          inc h
 2538 D1:CB71 FD 23 -  -          ADDCYC(1)
 2539 D1:CB73 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 2540 D1:CB74 2E 0C -  -          ld  L,BASETABLE_STRIDE
 2541 D1:CB76 ED 6C -  -          mlt hl          ;23.
 2542 D1:CB78 01 00 40 D0         ld  bc,PAGETABLE
 2543 D1:CB7C 09 -  -  -          add hl,bc
 2544 D1:CB7D ED 27 -  -          ld  hl,(hl)     ;address get.
 2545 D1:CB7F 01 00 00 00         ld  bc,0
 2546 D1:CB83 4F -  -  -          ld  c,a
 2547 D1:CB84 09 -  -  -          add hl,bc       ;Full address get.
 2548 D1:CB85 CD 79 AE D1         READ_ACCESS
 2549 D1:CB89 E1 -  -  -      pop hl
 2550 D1:CB8A 47 -  -  -      ld  b,a
 2551 D1:CB8B C3 94 B8 D1     jp  subroutine6502_cmp_combined_end
 2552 D1:CB8F -  -  -  -  
 2553 D1:CB8F -  -  -  -  ;-----------------------------------------------------------------------------
 2554 D1:CB8F -  -  -  -  ;CPX - Compare Memory and Index X
 2555 D1:CB8F -  -  -  -  ;X - M
 2556 D1:CB8F -  -  -  -  ;N	Z	C	I	D	V
 2557 D1:CB8F -  -  -  -  ;+	+	+	-	-	-
 2558 D1:CB8F -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2559 D1:CB8F -  -  -  -  ;immediate	CPX #oper	E0	2	2  
 2560 D1:CB8F -  -  -  -  inst6502_cpx_imm:
 2561 D1:CB8F ED 33 02 -      ADDCYC(2)
 2562 D1:CB92 DD 7E 01 -      ld  a,(ix+REGX)
 2563 D1:CB95 96 -  -  -      sub a,(hl)
 2564 D1:CB96 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2565 D1:CB97 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2566 D1:CBB1 C3 F6 B6 D1     jp  i6502NextLoad
 2567 D1:CBB5 -  -  -  -  
 2568 D1:CBB5 -  -  -  -  ;zeropage	CPX oper	E4	2	3  
 2569 D1:CBB5 -  -  -  -  inst6502_cpx_zp:
 2570 D1:CBB5 ED 33 03 -      ADDCYC(3)
 2571 D1:CBB8 7E -  -  -      ld  a,(hl)
 2572 D1:CBB9 01 00 38 D0     ld  bc,ZEROPAGE
 2573 D1:CBBD 81 -  -  -      add a,c
 2574 D1:CBBE 4F -  -  -      ld  c,a
 2575 D1:CBBF 0A -  -  -      ld  a,(bc)
 2576 D1:CBC0 47 -  -  -      ld  b,a
 2577 D1:CBC1 DD 7E 01 -      ld  a,(ix+REGX)
 2578 D1:CBC4 90 -  -  -      sub a,b
 2579 D1:CBC5 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2580 D1:CBC6 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2581 D1:CBE0 C3 F6 B6 D1     jp i6502NextLoad
 2582 D1:CBE4 -  -  -  -  ;absolute	CPX oper	EC	3	4  
 2583 D1:CBE4 -  -  -  -  inst6502_cpx_abs:
 2584 D1:CBE4 ED 33 04 -      ADDCYC(4)
 2585 D1:CBE7 CD 9E B7 D1     call subroutine6502_abs_split_start
 2586 D1:CBEB E5 -  -  -      push hl
 2587 D1:CBEC 50 -  -  -          ld  d,b
 2588 D1:CBED 79 -  -  -          ld  a,c
 2589 D1:CBEE 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2590 D1:CBF0 ED 4C -  -          mlt bc
 2591 D1:CBF2 21 00 40 D0         ld  hl,PAGETABLE
 2592 D1:CBF6 09 -  -  -          add hl,bc
 2593 D1:CBF7 ED 27 -  -          ld  hl,(hl)
 2594 D1:CBF9 06 00 -  -          ld  b,0
 2595 D1:CBFB 4F -  -  -          ld  c,a
 2596 D1:CBFC 09 -  -  -          add hl,bc   ;full address
 2597 D1:CBFD CD 79 AE D1         READ_ACCESS
 2598 D1:CC01 E1 -  -  -      pop hl
 2599 D1:CC02 47 -  -  -      ld  b,a
 2600 D1:CC03 DD 7E 01 -      ld  a,(ix+REGX)
 2601 D1:CC06 90 -  -  -      sub a,b
 2602 D1:CC07 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2603 D1:CC08 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2604 D1:CC22 C3 F6 B6 D1     jp i6502NextLoad
 2605 D1:CC26 -  -  -  -  
 2606 D1:CC26 -  -  -  -  ;-----------------------------------------------------------------------------
 2607 D1:CC26 -  -  -  -  ;CPY - Compare Memory and Index Y
 2608 D1:CC26 -  -  -  -  ;Y - M
 2609 D1:CC26 -  -  -  -  ;N	Z	C	I	D	V
 2610 D1:CC26 -  -  -  -  ;+	+	+	-	-	-
 2611 D1:CC26 -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2612 D1:CC26 -  -  -  -  ;immediate	CPY #oper	C0	2	2  
 2613 D1:CC26 -  -  -  -  inst6502_cpy_imm:
 2614 D1:CC26 ED 33 02 -      ADDCYC(2)
 2615 D1:CC29 DD 7E 02 -      ld  a,(ix+REGY)
 2616 D1:CC2C 96 -  -  -      sub a,(hl)
 2617 D1:CC2D 3F -  -  -      ccf
 2618 D1:CC2E DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2619 D1:CC48 C3 F6 B6 D1     jp  i6502NextLoad
 2620 D1:CC4C -  -  -  -  
 2621 D1:CC4C -  -  -  -  ;zeropage	CPY oper	C4	2	3  
 2622 D1:CC4C -  -  -  -  inst6502_cpy_zp:
 2623 D1:CC4C ED 33 03 -      ADDCYC(3)
 2624 D1:CC4F 7E -  -  -      ld  a,(hl)
 2625 D1:CC50 01 00 38 D0     ld  bc,ZEROPAGE
 2626 D1:CC54 81 -  -  -      add a,c
 2627 D1:CC55 4F -  -  -      ld  c,a
 2628 D1:CC56 0A -  -  -      ld  a,(bc)
 2629 D1:CC57 47 -  -  -      ld  b,a
 2630 D1:CC58 DD 7E 02 -      ld  a,(ix+REGY)
 2631 D1:CC5B 90 -  -  -      sub a,b
 2632 D1:CC5C 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2633 D1:CC5D DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2634 D1:CC77 C3 F6 B6 D1     jp i6502NextLoad
 2635 D1:CC7B -  -  -  -  
 2636 D1:CC7B -  -  -  -  ;absolute	CPY oper	CC	3	4  
 2637 D1:CC7B -  -  -  -  inst6502_cpy_abs:
 2638 D1:CC7B ED 33 04 -      ADDCYC(4)
 2639 D1:CC7E CD 9E B7 D1     call subroutine6502_abs_split_start
 2640 D1:CC82 E5 -  -  -      push hl
 2641 D1:CC83 50 -  -  -          ld  d,b
 2642 D1:CC84 79 -  -  -          ld  a,c
 2643 D1:CC85 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2644 D1:CC87 ED 4C -  -          mlt bc
 2645 D1:CC89 21 00 40 D0         ld  hl,PAGETABLE
 2646 D1:CC8D 09 -  -  -          add hl,bc
 2647 D1:CC8E ED 27 -  -          ld  hl,(hl)
 2648 D1:CC90 06 00 -  -          ld  b,0
 2649 D1:CC92 4F -  -  -          ld  c,a
 2650 D1:CC93 09 -  -  -          add hl,bc   ;full address
 2651 D1:CC94 CD 79 AE D1         READ_ACCESS
 2652 D1:CC98 E1 -  -  -      pop hl
 2653 D1:CC99 47 -  -  -      ld  b,a
 2654 D1:CC9A DD 7E 02 -      ld  a,(ix+REGY)
 2655 D1:CC9D 90 -  -  -      sub a,b
 2656 D1:CC9E 3F -  -  -      ccf     ;because the 6502 is strange like that.
 2657 D1:CC9F DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 2658 D1:CCB9 C3 F6 B6 D1     jp i6502NextLoad
 2659 D1:CCBD -  -  -  -  
 2660 D1:CCBD -  -  -  -  
 2661 D1:CCBD -  -  -  -  ;-----------------------------------------------------------------------------
 2662 D1:CCBD -  -  -  -  ;-----------------------------------------------------------------------------
 2663 D1:CCBD -  -  -  -  ;-----------------------------------------------------------------------------
 2664 D1:CCBD -  -  -  -  ;Instructions by type: Conditional Branch Instructions
 2665 D1:CCBD -  -  -  -  
 2666 D1:CCBD -  -  -  -  ;branch on C=0
 2667 D1:CCBD -  -  -  -  ;relative	BCC oper	90	2	2**
 2668 D1:CCBD -  -  -  -  inst6502_bcc:
 2669 D1:CCBD ED 33 02 -      ADDCYC(2)
 2670 D1:CCC0 DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2671 D1:CCC4 C2 F6 B6 D1     jp  nz,i6502NextLoad
 2672 D1:CCC8 C3 B7 B8 D1     jp  subroutine6502_take_branch
 2673 D1:CCCC -  -  -  -  
 2674 D1:CCCC -  -  -  -  ;branch on C=1
 2675 D1:CCCC -  -  -  -  ;relative	BCS oper	B0	2	2**
 2676 D1:CCCC -  -  -  -  inst6502_bcs:
 2677 D1:CCCC ED 33 02 -      ADDCYC(2)
 2678 D1:CCCF DD CB 04 46     bit SF_CARRY,(ix+REGSR)
 2679 D1:CCD3 CA F6 B6 D1     jp  z,i6502NextLoad
 2680 D1:CCD7 C3 B7 B8 D1     jp  subroutine6502_take_branch
 2681 D1:CCDB -  -  -  -  
 2682 D1:CCDB -  -  -  -  ;branch on Z=1
 2683 D1:CCDB -  -  -  -  ;relative	BEQ oper	F0	2	2**
 2684 D1:CCDB -  -  -  -  inst6502_beq:
 2685 D1:CCDB ED 33 02 -      ADDCYC(2)
 2686 D1:CCDE DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2687 D1:CCE2 CA F6 B6 D1     jp  z,i6502NextLoad
 2688 D1:CCE6 C3 B7 B8 D1     jp  subroutine6502_take_branch
 2689 D1:CCEA -  -  -  -  
 2690 D1:CCEA -  -  -  -  ;branch on N=1
 2691 D1:CCEA -  -  -  -  ;relative	BMI oper	30	2	2**
 2692 D1:CCEA -  -  -  -  inst6502_bmi:
 2693 D1:CCEA ED 33 02 -      ADDCYC(2)
 2694 D1:CCED DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2695 D1:CCF1 CA F6 B6 D1     jp  z,i6502NextLoad
 2696 D1:CCF5 C3 B7 B8 D1     jp  subroutine6502_take_branch
 2697 D1:CCF9 -  -  -  -  
 2698 D1:CCF9 -  -  -  -  
 2699 D1:CCF9 -  -  -  -  ;branch on Z=0
 2700 D1:CCF9 -  -  -  -  ;relative	BNE oper	D0	2	2**
 2701 D1:CCF9 -  -  -  -  inst6502_bne:
 2702 D1:CCF9 ED 33 02 -      ADDCYC(2)
 2703 D1:CCFC DD CB 04 4E     bit SF_ZERO,(ix+REGSR)
 2704 D1:CD00 C2 F6 B6 D1     jp  nz,i6502NextLoad
 2705 D1:CD04 C3 B7 B8 D1     jp  subroutine6502_take_branch
 2706 D1:CD08 -  -  -  -  
 2707 D1:CD08 -  -  -  -  ;branch on N=0
 2708 D1:CD08 -  -  -  -  ;relative	BPL oper	10	2	2**
 2709 D1:CD08 -  -  -  -  inst6502_bpl:
 2710 D1:CD08 ED 33 02 -      ADDCYC(2)
 2711 D1:CD0B DD CB 04 7E     bit SF_NEG,(ix+REGSR)
 2712 D1:CD0F C2 F6 B6 D1     jp  nz,i6502NextLoad
 2713 D1:CD13 C3 B7 B8 D1     jp  subroutine6502_take_branch
 2714 D1:CD17 -  -  -  -  
 2715 D1:CD17 -  -  -  -  ;branch on V=0
 2716 D1:CD17 -  -  -  -  ;relative	BVC oper	50	2	2**
 2717 D1:CD17 -  -  -  -  inst6502_bvc:
 2718 D1:CD17 ED 33 02 -      ADDCYC(2)
 2719 D1:CD1A DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2720 D1:CD1E C2 F6 B6 D1     jp  nz,i6502NextLoad
 2721 D1:CD22 C3 B7 B8 D1     jp  subroutine6502_take_branch
 2722 D1:CD26 -  -  -  -  
 2723 D1:CD26 -  -  -  -  ;branch on V=1
 2724 D1:CD26 -  -  -  -  ;relative	BVS oper	70	2	2**
 2725 D1:CD26 -  -  -  -  inst6502_bvs:
 2726 D1:CD26 ED 33 02 -      ADDCYC(2)
 2727 D1:CD29 DD CB 04 76     bit SF_OVER,(ix+REGSR)
 2728 D1:CD2D CA F6 B6 D1     jp  z,i6502NextLoad
 2729 D1:CD31 C3 B7 B8 D1     jp  subroutine6502_take_branch
 2730 D1:CD35 -  -  -  -  
 2731 D1:CD35 -  -  -  -  ;-----------------------------------------------------------------------------
 2732 D1:CD35 -  -  -  -  ;-----------------------------------------------------------------------------
 2733 D1:CD35 -  -  -  -  ;-----------------------------------------------------------------------------
 2734 D1:CD35 -  -  -  -  ;Instructions by type: Interrupts
 2735 D1:CD35 -  -  -  -  
 2736 D1:CD35 -  -  -  -  ;BRK - Force Break
 2737 D1:CD35 -  -  -  -  ;BRK initiates a software interrupt similar to a hardware
 2738 D1:CD35 -  -  -  -  ;interrupt (IRQ). The return address pushed to the stack is
 2739 D1:CD35 -  -  -  -  ;PC+2, providing an extra byte of spacing for a break mark
 2740 D1:CD35 -  -  -  -  ;(identifying a reason for the break.)
 2741 D1:CD35 -  -  -  -  ;The status register will be pushed to the stack with the break
 2742 D1:CD35 -  -  -  -  ;flag set to 1. However, when retrieved during RTI or by a PLP
 2743 D1:CD35 -  -  -  -  ;instruction, the break flag will be ignored.
 2744 D1:CD35 -  -  -  -  ;The interrupt disable flag is not set automatically.
 2745 D1:CD35 -  -  -  -  ;
 2746 D1:CD35 -  -  -  -  ;interrupt,             N	Z	C	I	D	V
 2747 D1:CD35 -  -  -  -  ;push PC+2, push SR     -	-	-	1	-	-
 2748 D1:CD35 -  -  -  -  ;implied	BRK	00	1	7  
 2749 D1:CD35 -  -  -  -  inst6502_brk:
 2750 D1:CD35 ED 33 07 -      ADDCYC(7)
 2751 D1:CD38 21 00 39 D0     ld  hl,STACKBASE
 2752 D1:CD3C DD 6E 03 -      ld  L,(ix+REGSP)
 2753 D1:CD3F 52 DD 17 05     ld.s de,(ix+REGPC)
 2754 D1:CD43 13 -  -  -      inc de      ;that extra spacer.
 2755 D1:CD44 72 -  -  -      ld  (hl),d
 2756 D1:CD45 2D -  -  -      dec L
 2757 D1:CD46 73 -  -  -      ld  (hl),e
 2758 D1:CD47 2D -  -  -      dec L
 2759 D1:CD48 DD 7E 04 -      ld  a,(ix+REGSR)
 2760 D1:CD4B CB D7 -  -      set SF_INT,a
 2761 D1:CD4D 77 -  -  -      ld  (hl),a
 2762 D1:CD4E 2D -  -  -      dec L
 2763 D1:CD4F DD 75 03 -      ld  (ix+REGSP),L
 2764 D1:CD52 DD CB 1E 46     WAS_NMI_TRIGGERED
 2765 D1:CD56 01 FE 00 00     ld  bc,$FE  ;IRQ vector
 2766 D1:CD5A 28 04 -  -      jr  z,+_
 2767 D1:CD5C 01 FA 00 00     ld  bc,$FA  ;NMI vector, if NMI is hijacking this instruction.
 2768 D1:CD60 21 F4 4B D0 _:  ld  hl,(BASETABLE_STRIDE*$FF)+PAGETABLE
 2769 D1:CD64 ED 27 -  -      ld  hl,(hl)
 2770 D1:CD66 09 -  -  -      add hl,bc
 2771 D1:CD67 ED 17 -  -      ld  de,(hl)
 2772 D1:CD69 52 DD 1F 05     ld.s (ix+REGPC),de
 2773 D1:CD6D C3 E0 B6 D1     jp  i6502FirstLoad
 2774 D1:CD71 -  -  -  -  
 2775 D1:CD71 -  -  -  -  ;RTI - Return from Interrupt
 2776 D1:CD71 -  -  -  -  ;The status register is pulled with the break flag
 2777 D1:CD71 -  -  -  -  ;and bit 5 ignored. Then PC is pulled from the stack.
 2778 D1:CD71 -  -  -  -  ;pull SR, pull PC      N Z C I D V
 2779 D1:CD71 -  -  -  -  ;                      from stack
 2780 D1:CD71 -  -  -  -  ;implied	RTI	40	1	6  
 2781 D1:CD71 -  -  -  -  inst6502_rti:
 2782 D1:CD71 21 00 39 D0     ld  hl,STACKBASE
 2783 D1:CD75 DD 6E 03 -      ld  l,(ix+REGSP)
 2784 D1:CD78 2C -  -  -      inc l
 2785 D1:CD79 7E -  -  -      ld  a,(hl)
 2786 D1:CD7A 2C -  -  -      inc l
 2787 D1:CD7B 5E -  -  -      ld  e,(hl)
 2788 D1:CD7C 2C -  -  -      inc l
 2789 D1:CD7D 56 -  -  -      ld  d,(hl)
 2790 D1:CD7E DD 75 03 -      ld  (ix+REGSP),l
 2791 D1:CD81 52 DD 1F 05     ld.s (ix+REGPC),de
 2792 D1:CD85 DD 46 04 -      ld  b,(ix+REGSR)
 2793 D1:CD88 A8 -  -  -      xor a,b
 2794 D1:CD89 E6 DF -  -      and a,%11011111
 2795 D1:CD8B A8 -  -  -      xor a,b
 2796 D1:CD8C DD 77 04 -      ld  (ix+REGSR),a
 2797 D1:CD8F ED 33 06 -      ADDCYC(6)
 2798 D1:CD92 C3 E0 B6 D1     jp  i6502FirstLoad
 2799 D1:CD96 -  -  -  -  
 2800 D1:CD96 -  -  -  -  
 2801 D1:CD96 -  -  -  -  
 2802 D1:CD96 -  -  -  -  ;-----------------------------------------------------------------------------
 2803 D1:CD96 -  -  -  -  ;-----------------------------------------------------------------------------
 2804 D1:CD96 -  -  -  -  ;-----------------------------------------------------------------------------
 2805 D1:CD96 -  -  -  -  ;Instructions by type: Jumps and Subroutines
 2806 D1:CD96 -  -  -  -  
 2807 D1:CD96 -  -  -  -  ;absolute	JMP oper	4C	3	3  
 2808 D1:CD96 -  -  -  -  inst6052_jmp_abs:
 2809 D1:CD96 7E -  -  -      ld  a,(hl)
 2810 D1:CD97 23 -  -  -      inc hl
 2811 D1:CD98 1C -  -  -      inc e
 2812 D1:CD99 20 0F -  -      jr  nz,+_
 2813 D1:CD9B DD 56 06 -      ld  d,(ix+REGPC+1)
 2814 D1:CD9E 14 -  -  -      inc d
 2815 D1:CD9F 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2816 D1:CDA1 ED 5C -  -      mlt de
 2817 D1:CDA3 21 00 40 D0     ld  hl,PAGETABLE
 2818 D1:CDA7 19 -  -  -      add hl,de
 2819 D1:CDA8 ED 27 -  -      ld  hl,(hl)
 2820 D1:CDAA DD 77 05 -  _:  ld  (ix+REGPC+0),a
 2821 D1:CDAD 7E -  -  -      ld  a,(hl)
 2822 D1:CDAE DD 77 06 -      ld  (ix+REGPC+1),a
 2823 D1:CDB1 ED 33 03 -      ADDCYC(3)
 2824 D1:CDB4 C3 E0 B6 D1     jp i6502FirstLoad
 2825 D1:CDB8 -  -  -  -  
 2826 D1:CDB8 -  -  -  -  
 2827 D1:CDB8 -  -  -  -  ;Note: In earlier 6502 implementations, cross-page reads on indirect is bugged.
 2828 D1:CDB8 -  -  -  -  ;   The end effect would be that inst6502_jmp_indir_splitread would wrap around
 2829 D1:CDB8 -  -  -  -  ;   to the start of the current page rather than try to read the next page.
 2830 D1:CDB8 -  -  -  -  ;indirect	JMP (oper)	6C	3	5  
 2831 D1:CDB8 -  -  -  -  inst6502_jmp_indir:
 2832 D1:CDB8 ED 33 05 -      ADDCYC(5)
 2833 D1:CDBB -  -  -  -      ;Doing much the same as abs_split_start below, except with fewer things
 2834 D1:CDBB -  -  -  -      ;because we don't need to preserve any of the other stuff.
 2835 D1:CDBB 4E -  -  -      ld  c,(hl)
 2836 D1:CDBC 23 -  -  -      inc hl
 2837 D1:CDBD 1C -  -  -      inc e
 2838 D1:CDBE 20 0F -  -      jr  nz,+_
 2839 D1:CDC0 DD 56 06 -      ld  d,(ix+REGPC+1)
 2840 D1:CDC3 14 -  -  -      inc d
 2841 D1:CDC4 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2842 D1:CDC6 ED 5C -  -      mlt de
 2843 D1:CDC8 21 00 40 D0     ld  hl,PAGETABLE
 2844 D1:CDCC 19 -  -  -      add hl,de
 2845 D1:CDCD ED 27 -  -      ld  hl,(hl)
 2846 D1:CDCF 46 -  -  -  _:  ld  b,(hl)
 2847 D1:CDD0 79 -  -  -      ld  a,c
 2848 D1:CDD1 0C -  -  -      inc c   ;check if there will be a split read.
 2849 D1:CDD2 0E 0C -  -      ld  c,BASETABLE_STRIDE  ;Flags not affected
 2850 D1:CDD4 ED 4C -  -      mlt bc                  ;Flags not affected
 2851 D1:CDD6 21 00 40 D0     ld  hl,PAGETABLE        ;Flags not affected
 2852 D1:CDDA CA EF CD D1     jp  z,inst6502_jmp_indir_splitRead
 2853 D1:CDDE 09 -  -  -      add hl,bc
 2854 D1:CDDF ED 27 -  -      ld  hl,(hl)
 2855 D1:CDE1 06 00 -  -      ld  b,0
 2856 D1:CDE3 4F -  -  -      ld  c,a
 2857 D1:CDE4 09 -  -  -      add hl,bc
 2858 D1:CDE5 ED 27 -  -      ld  hl,(hl)
 2859 D1:CDE7 52 DD 2F 05     ld.s (ix+REGPC),hl
 2860 D1:CDEB C3 E0 B6 D1     jp  i6502FirstLoad
 2861 D1:CDEF -  -  -  -  inst6502_jmp_indir_splitRead:
 2862 D1:CDEF 09 -  -  -      add hl,bc
 2863 D1:CDF0 ED 27 -  -      ld  hl,(hl)
 2864 D1:CDF2 7E -  -  -      ld  a,(hl)  ;high byte
 2865 D1:CDF3 01 FF 00 00     ld  bc,255
 2866 D1:CDF7 09 -  -  -      add hl,bc
 2867 D1:CDF8 4E -  -  -      ld  c,(hl)  ;low byte
 2868 D1:CDF9 47 -  -  -      ld  b,a
 2869 D1:CDFA 52 DD 0F 05     ld.s (ix+REGPC),bc
 2870 D1:CDFE C3 E0 B6 D1     jp  i6502FirstLoad
 2871 D1:CE02 -  -  -  -  
 2872 D1:CE02 -  -  -  -  
 2873 D1:CE02 -  -  -  -  
 2874 D1:CE02 -  -  -  -  
 2875 D1:CE02 -  -  -  -  
 2876 D1:CE02 -  -  -  -  ;absolute	JSR oper	20	3	6  
 2877 D1:CE02 -  -  -  -  inst6502_jsr:
 2878 D1:CE02 DD 56 06 -      ld  d,(ix+REGPC+1)
 2879 D1:CE05 4E -  -  -      ld  c,(hl)
 2880 D1:CE06 23 -  -  -      inc hl
 2881 D1:CE07 1C -  -  -      inc e
 2882 D1:CE08 20 10 -  -      jr  nz,+_
 2883 D1:CE0A 14 -  -  -      inc d
 2884 D1:CE0B 7A -  -  -      ld  a,d
 2885 D1:CE0C 1E 0C -  -      ld  e,BASETABLE_STRIDE
 2886 D1:CE0E ED 5C -  -      mlt de
 2887 D1:CE10 21 00 40 D0     ld  hl,PAGETABLE
 2888 D1:CE14 19 -  -  -      add hl,de
 2889 D1:CE15 ED 27 -  -      ld  hl,(hl)
 2890 D1:CE17 57 -  -  -      ld  d,a
 2891 D1:CE18 1E 00 -  -      ld  e,0
 2892 D1:CE1A 46 -  -  -  _:  ld  b,(hl)
 2893 D1:CE1B -  -  -  -      ;push de to 6502stack
 2894 D1:CE1B 21 00 39 D0     ld  hl,STACKBASE
 2895 D1:CE1F DD 6E 03 -      ld  l,(ix+REGSP)
 2896 D1:CE22 72 -  -  -      ld  (hl),d
 2897 D1:CE23 2D -  -  -      dec l
 2898 D1:CE24 73 -  -  -      ld  (hl),e
 2899 D1:CE25 2D -  -  -      dec l
 2900 D1:CE26 DD 75 03 -      ld  (ix+REGSP),l
 2901 D1:CE29 52 DD 0F 05     ld.s (ix+REGPC),bc
 2902 D1:CE2D ED 33 06 -      ADDCYC(6)
 2903 D1:CE30 C3 E0 B6 D1     jp  i6502FirstLoad
 2904 D1:CE34 -  -  -  -  
 2905 D1:CE34 -  -  -  -  ;implied	RTS	60	1	6
 2906 D1:CE34 -  -  -  -  inst6502_rts:
 2907 D1:CE34 21 00 39 D0     ld  hl,STACKBASE
 2908 D1:CE38 DD 6E 03 -      ld  l,(ix+REGSP)
 2909 D1:CE3B 2C -  -  -      inc l
 2910 D1:CE3C 5E -  -  -      ld  e,(hl)
 2911 D1:CE3D 2C -  -  -      inc l
 2912 D1:CE3E 56 -  -  -      ld  d,(hl)
 2913 D1:CE3F DD 75 03 -      ld  (ix+REGSP),l
 2914 D1:CE42 13 -  -  -      inc de
 2915 D1:CE43 52 DD 1F 05     ld.s (ix+REGPC),de
 2916 D1:CE47 ED 33 06 -      ADDCYC(6)
 2917 D1:CE4A C3 E0 B6 D1     jp  i6502FirstLoad
 2918 D1:CE4E -  -  -  -  
 2919 D1:CE4E -  -  -  -  
 2920 D1:CE4E -  -  -  -  ;-----------------------------------------------------------------------------
 2921 D1:CE4E -  -  -  -  ;-----------------------------------------------------------------------------
 2922 D1:CE4E -  -  -  -  ;-----------------------------------------------------------------------------
 2923 D1:CE4E -  -  -  -  ;Instructions by type: Miscellaneous
 2924 D1:CE4E -  -  -  -  ;BIT - Test Bits in Memory with Accumulator
 2925 D1:CE4E -  -  -  -  ;
 2926 D1:CE4E -  -  -  -  ;bits 7 and 6 of operand are transfered to bit 7 and 6 of SR (N,V);
 2927 D1:CE4E -  -  -  -  ;the zero-flag is set according to the result of the operand AND
 2928 D1:CE4E -  -  -  -  ;the accumulator (set, if the result is zero, unset otherwise).
 2929 D1:CE4E -  -  -  -  ;This allows a quick check of a few bits at once without affecting
 2930 D1:CE4E -  -  -  -  ;any of the registers, other than the status register (SR).
 2931 D1:CE4E -  -  -  -  
 2932 D1:CE4E -  -  -  -  ;A AND M -> Z, M7 -> N, M6 -> V             N	Z	C	I	D	V
 2933 D1:CE4E -  -  -  -  ;                                           M7	+	-	-	-	M6
 2934 D1:CE4E -  -  -  -  ;addressing	assembler	opc	bytes	cycles
 2935 D1:CE4E -  -  -  -  ;zeropage	BIT oper	24	2	3  
 2936 D1:CE4E -  -  -  -  inst6502_bit_zp:
 2937 D1:CE4E ED 33 03 -      ADDCYC(3)
 2938 D1:CE51 7E -  -  -      ld  a,(hl)
 2939 D1:CE52 01 00 38 D0     ld  bc,ZEROPAGE
 2940 D1:CE56 81 -  -  -      add a,c
 2941 D1:CE57 4F -  -  -      ld  c,a
 2942 D1:CE58 0A -  -  -      ld  a,(bc)
 2943 D1:CE59 4F -  -  -      ld  c,a
 2944 D1:CE5A DD A6 00 -  _:  and a,(ix+REGA)
 2945 D1:CE5D 79 -  -  -      ld  a,c     ;discard result, get bits from OPERANDs
 2946 D1:CE5E CB 8F -  -      res SF_ZERO,a
 2947 D1:CE60 20 02 -  -      jr  nz,$+4
 2948 D1:CE62 CB CF -  -      set SF_ZERO,a
 2949 D1:CE64 DD 46 04 -      ld  b,(ix+REGSR)    ;keep bits in flag other than NZ and V
 2950 D1:CE67 A8 -  -  -      xor a,b
 2951 D1:CE68 E6 C2 -  -      and a,%11000010     ;1=keepA, 0=discardA,keepB
 2952 D1:CE6A A8 -  -  -      xor a,b
 2953 D1:CE6B DD 77 04 -      ld  (ix+REGSR),a
 2954 D1:CE6E C3 F6 B6 D1     jp  i6502NextLoad
 2955 D1:CE72 -  -  -  -  
 2956 D1:CE72 -  -  -  -  ;absolute	BIT oper	2C	3	4  
 2957 D1:CE72 -  -  -  -  inst6502_bit_abs:
 2958 D1:CE72 ED 33 04 -      ADDCYC(4)
 2959 D1:CE75 CD 9E B7 D1     call subroutine6502_abs_split_start
 2960 D1:CE79 E5 -  -  -      push hl
 2961 D1:CE7A 50 -  -  -          ld  d,b
 2962 D1:CE7B 79 -  -  -          ld  a,c
 2963 D1:CE7C 0E 0C -  -          ld  c,BASETABLE_STRIDE
 2964 D1:CE7E ED 4C -  -          mlt bc
 2965 D1:CE80 21 00 40 D0         ld  hl,PAGETABLE
 2966 D1:CE84 09 -  -  -          add hl,bc
 2967 D1:CE85 ED 27 -  -          ld  hl,(hl)
 2968 D1:CE87 06 00 -  -          ld  b,0
 2969 D1:CE89 4F -  -  -          ld  c,a
 2970 D1:CE8A 09 -  -  -          add hl,bc   ;full address
 2971 D1:CE8B CD 79 AE D1         READ_ACCESS
 2972 D1:CE8F 4F -  -  -          ld  c,a
 2973 D1:CE90 E1 -  -  -      pop hl
 2974 D1:CE91 18 C7 -  -      jr  -_    
 2975 D1:CE93 -  -  -  -  
 2976 D1:CE93 -  -  -  -  ;NOP - No Operation
 2977 D1:CE93 -  -  -  -  ;implied	NOP	EA	1	2  
 2978 D1:CE93 -  -  -  -  inst6502_nop:
 2979 D1:CE93 ED 33 02 -      ADDCYC(2)
 2980 D1:CE96 C3 0F B7 D1     jp  i6502FinishLoad
 2981 D1:CE9A -  -  -  -  
 2982 D1:CE9A -  -  -  -  
 2983 D1:CE9A -  -  -  -  
 2984 D1:CE9A -  -  -  -  ;##############################################################################
 2985 D1:CE9A -  -  -  -  ;##############################################################################
 2986 D1:CE9A -  -  -  -  ;##############################################################################
 2987 D1:CE9A -  -  -  -  ;##-----#-#####-#####-----##---###---##-########-----#--##-##---#-----#----####
 2988 D1:CE9A -  -  -  -  ;####-###-#####-#####-#####-#####-###-#-##########-###--##-#-######-###-###-###
 2989 D1:CE9A -  -  -  -  ;####-###-#####-#####---###-##--#-----#-##########-###-#-#-##---###-###-----###
 2990 D1:CE9A -  -  -  -  ;####-###-#####-#####-#####-###-#-###-#-##########-###-##--#####-##-###-##-####
 2991 D1:CE9A -  -  -  -  ;##-----#-----#-----#-----##----#-###-#-----####-----#-##--#----###-###-###-#-#
 2992 D1:CE9A -  -  -  -  ;##############################################################################
 2993 D1:CE9A -  -  -  -  ;##############################################################################
 2994 D1:CE9A -  -  -  -  ;##############################################################################
 2995 D1:CE9A -  -  -  -  ;Instructions by type: Illegal Instructions
 2996 D1:CE9A -  -  -  -  
 2997 D1:CE9A -  -  -  -  ;NOP - No operations. All the no-operations. Even the ones that are linked
 2998 D1:CE9A -  -  -  -  ;to the machinery that operates an addressing mode, but does nothing with it.
 2999 D1:CE9A -  -  -  -  ;A whole lotta nothing.
 3000 D1:CE9A -  -  -  -  
 3001 D1:CE9A -  -  -  -  ;Bytes:1, Cycles:2, Opcodes: 1A, 3A, 5A, 7A, DA, FA
 3002 D1:CE9A -  -  -  -  inst6502_nop_implied:
 3003 D1:CE9A ED 33 02 -      ADDCYC(2)
 3004 D1:CE9D C3 0F B7 D1     jp  i6502FinishLoad
 3005 D1:CEA1 -  -  -  -  
 3006 D1:CEA1 -  -  -  -  ;Bytes:2, Cycles:2, Opcodes: 80, 82, 89, C2, E2
 3007 D1:CEA1 -  -  -  -  inst6502_nop_imm:
 3008 D1:CEA1 ED 33 02 -      ADDCYC(2)
 3009 D1:CEA4 C3 F6 B6 D1     jp  i6502NextLoad
 3010 D1:CEA8 -  -  -  -  
 3011 D1:CEA8 -  -  -  -  ;Bytes:2, Cycles:3, Opcodes: 04, 44, 64
 3012 D1:CEA8 -  -  -  -  inst6502_nop_zp:
 3013 D1:CEA8 ED 33 03 -      ADDCYC(3)
 3014 D1:CEAB C3 F6 B6 D1     jp  i6502NextLoad
 3015 D1:CEAF -  -  -  -  
 3016 D1:CEAF -  -  -  -  ;Bytes:2, Cycles:4, Opcodes: 14, 34, 54, 74, D4, F4
 3017 D1:CEAF -  -  -  -  inst6502_nop_zpx:
 3018 D1:CEAF ED 33 04 -      ADDCYC(4)
 3019 D1:CEB2 C3 F6 B6 D1     jp  i6502NextLoad
 3020 D1:CEB6 -  -  -  -  
 3021 D1:CEB6 -  -  -  -  ;Bytes:3, Cycles:4, Opcode: 0C
 3022 D1:CEB6 -  -  -  -  inst6502_nop_abs:
 3023 D1:CEB6 ED 33 04 -      ADDCYC(4)
 3024 D1:CEB9 CD 9E B7 D1     call subroutine6502_abs_split_start
 3025 D1:CEBD E5 -  -  -      push hl
 3026 D1:CEBE CD 79 AE D1         READ_ACCESS
 3027 D1:CEC2 E1 -  -  -      pop hl
 3028 D1:CEC3 C3 F6 B6 D1     jp  i6502NextLoad
 3029 D1:CEC7 -  -  -  -  
 3030 D1:CEC7 -  -  -  -  ;Note: This thing latches all over the place but does nothing. All these
 3031 D1:CEC7 -  -  -  -  ;READ_ACCESS thingies are in case the ROM wants to clear PPU flags or something
 3032 D1:CEC7 -  -  -  -  ;using these instructions. But the one below is noted to do the touchy-feelies
 3033 D1:CEC7 -  -  -  -  ;at ABS and (ABS+X)&0xFF
 3034 D1:CEC7 -  -  -  -  ;Bytes:3, Cycles:4*, Opcodes: 1C, 3C, 5C, 7C, DC, FC
 3035 D1:CEC7 -  -  -  -  inst6502_nop_absx:
 3036 D1:CEC7 ED 33 04 -      ADDCYC(4)
 3037 D1:CECA CD BF B7 D1     PUSH_ABSXSPLIT
 3038 D1:CECE CD 79 AE D1         READ_ACCESS
 3039 D1:CED2 E1 -  -  -      pop hl
 3040 D1:CED3 C3 F6 B6 D1     jp  i6502NextLoad
 3041 D1:CED7 -  -  -  -  
 3042 D1:CED7 -  -  -  -  ;-----------------------------------------------------------------------------
 3043 D1:CED7 -  -  -  -  ;ALR (ASR) - AND oper + LSR
 3044 D1:CED7 -  -  -  -  ;Affects CZN
 3045 D1:CED7 -  -  -  -  
 3046 D1:CED7 -  -  -  -  ;immediate	ALR #oper	4B	2	2 
 3047 D1:CED7 -  -  -  -  inst6502_alr_imm:
 3048 D1:CED7 ED 33 02 -      ADDCYC(2)
 3049 D1:CEDA DD 7E 00 -      ld  a,(ix+REGA)
 3050 D1:CEDD A6 -  -  -      and a,(hl)
 3051 D1:CEDE CB 3F -  -      srl a   ;Must do it this way. A-optimized instr do not affect Z
 3052 D1:CEE0 DD 77 00 -      ld  (ix+REGA),a
 3053 D1:CEE3 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3054 D1:CEFD C3 F6 B6 D1     jp  i6502NextLoad
 3055 D1:CF01 -  -  -  -  
 3056 D1:CF01 -  -  -  -  ;-----------------------------------------------------------------------------
 3057 D1:CF01 -  -  -  -  
 3058 D1:CF01 -  -  -  -  ;ANC [ANC (ANC2)] - AND oper + set Carry as if ASL [ROL]
 3059 D1:CF01 -  -  -  -  
 3060 D1:CF01 -  -  -  -  ;immediate	ANC #oper	0B	2	2 
 3061 D1:CF01 -  -  -  -  ;immediate	ANC #oper	2B	2	2
 3062 D1:CF01 -  -  -  -  instr6502_anc_imm:
 3063 D1:CF01 -  -  -  -  instr6502_anc2_imm:
 3064 D1:CF01 ED 33 02 -      ADDCYC(2)
 3065 D1:CF04 DD 7E 00 -      ld  a,(ix+REGA)
 3066 D1:CF07 A6 -  -  -      and a,(hl)
 3067 D1:CF08 DD 77 00 -      ld  (ix+REGA),a
 3068 D1:CF0B CB 07 -  -      rlc a
 3069 D1:CF0D DD 7E 04 -      ld  a,(ix+REGSR)
 3070 D1:CF10 -  -  -  -      ;A small optimiztion here, letting us merge OPRFLG_C and OPRFLG_N
 3071 D1:CF10 CB 87 -  -      res SF_CARRY,a
 3072 D1:CF12 CB BF -  -      res SF_NEG,a
 3073 D1:CF14 30 04 -  -      jr  nc,+_
 3074 D1:CF16 CB C7 -  -      set SF_CARRY,a
 3075 D1:CF18 CB FF -  -      set SF_NEG,a
 3076 D1:CF1A CB 8F -  -  _:  res SF_ZERO,a
 3077 D1:CF1C 20 02 -  -      jr  nz,$+4
 3078 D1:CF1E CB CF -  -      set SF_ZERO,a
 3079 D1:CF20 DD 77 04 -      ld  (ix+REGSR),a
 3080 D1:CF23 C3 F6 B6 D1     jp  i6502NextLoad
 3081 D1:CF27 -  -  -  -  
 3082 D1:CF27 -  -  -  -  ;-----------------------------------------------------------------------------
 3083 D1:CF27 -  -  -  -  
 3084 D1:CF27 -  -  -  -  ;ANE (XAA) - (A OR ??) AND X AND oper -> A
 3085 D1:CF27 -  -  -  -  ;immediate	ANE #oper	8B	2	2  	††
 3086 D1:CF27 -  -  -  -  instr6502_ane_imm:
 3087 D1:CF27 ED 33 02 -      ADDCYC(2)
 3088 D1:CF2A ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3089 D1:CF2C DD B6 00 -      or  a,(ix+REGA)
 3090 D1:CF2F DD A6 01 -      and a,(ix+REGX)
 3091 D1:CF32 A6 -  -  -      and a,(hl)
 3092 D1:CF33 DD 77 00 -      ld  (ix+REGA),a
 3093 D1:CF36 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3094 D1:CF4A C3 F6 B6 D1     jp  i6502NextLoad
 3095 D1:CF4E -  -  -  -  
 3096 D1:CF4E -  -  -  -  ;-----------------------------------------------------------------------------
 3097 D1:CF4E -  -  -  -  
 3098 D1:CF4E -  -  -  -  
 3099 D1:CF4E -  -  -  -  ;ARR - AND OPER + ROR
 3100 D1:CF4E -  -  -  -  ;Something hinky is going on with the flags. "This operation involves the adder"
 3101 D1:CF4E -  -  -  -  ;I need to get a better handle over what that might be.
 3102 D1:CF4E -  -  -  -  ;CVZN flags affected.
 3103 D1:CF4E -  -  -  -  ;
 3104 D1:CF4E -  -  -  -  ;Primary sources reads:
 3105 D1:CF4E -  -  -  -  ;----------------------
 3106 D1:CF4E -  -  -  -  ;This operation involves the adder:
 3107 D1:CF4E -  -  -  -  ;V-flag is set according to (A AND oper) + oper
 3108 D1:CF4E -  -  -  -  ;The carry is not set, but bit 7 (sign) is exchanged with the carry
 3109 D1:CF4E -  -  -  -  ;A AND oper, C -> [76543210] -> C
 3110 D1:CF4E -  -  -  -  ;
 3111 D1:CF4E -  -  -  -  ;Secondary source reads:
 3112 D1:CF4E -  -  -  -  ;-----------------------
 3113 D1:CF4E -  -  -  -  ;Similar to AND #i then ROR A, except sets the flags differently. 
 3114 D1:CF4E -  -  -  -  ;N and Z are normal, but C is bit 6 and V is bit 6 xor bit 5. 
 3115 D1:CF4E -  -  -  -  ;A fast way to perform signed division by 4 is: CMP #$80; ARR #$FF; ROR. 
 3116 D1:CF4E -  -  -  -  ;This can be extended to larger powers of two.
 3117 D1:CF4E -  -  -  -  
 3118 D1:CF4E -  -  -  -  ;immediate	ARR #oper	6B	2	2  
 3119 D1:CF4E -  -  -  -  instr6502_arr_imm:
 3120 D1:CF4E ED 33 02 -      ADDCYC(2)
 3121 D1:CF51 DD 7E 00 -      ld  a,(ix+REGA)
 3122 D1:CF54 A6 -  -  -      and a,(hl)
 3123 D1:CF55 47 -  -  -      ld  b,a
 3124 D1:CF56 DD 7E 04 -      ld  a,(ix+REGSR)
 3125 D1:CF59 4F -  -  -      ld  c,a
 3126 D1:CF5A 0F -  -  -      rrca    ;extract carry. This carry will go into sign bit of result
 3127 D1:CF5B CB B9 -  -      res SF_NEG,c
 3128 D1:CF5D 30 02 -  -      jr  nc,$+4
 3129 D1:CF5F CB F9 -  -      set SF_NEG,c
 3130 D1:CF61 CB 18 -  -      rr b
 3131 D1:CF63 CB 89 -  -      res SF_ZERO,c
 3132 D1:CF65 20 02 -  -      jr  nz,$+4
 3133 D1:CF67 CB C9 -  -      set SF_ZERO,c
 3134 D1:CF69 DD 70 00 -      ld  (ix+REGA),b
 3135 D1:CF6C 78 -  -  -      ld  a,b
 3136 D1:CF6D E6 40 -  -      and a,%01000000
 3137 D1:CF6F CB 81 -  -      res SF_CARRY,c
 3138 D1:CF71 28 02 -  -      jr  z,$+4
 3139 D1:CF73 CB C1 -  -      set SF_CARRY,c
 3140 D1:CF75 0F -  -  -      rrca
 3141 D1:CF76 EE 20 -  -      xor a,%00100000
 3142 D1:CF78 E6 20 -  -      and a,%00100000
 3143 D1:CF7A CB B1 -  -      res SF_OVER,c
 3144 D1:CF7C 28 02 -  -      jr  z,$+4
 3145 D1:CF7E CB F1 -  -      set SF_OVER,c
 3146 D1:CF80 DD 71 04 -      ld  (ix+REGSR),c
 3147 D1:CF83 -  -  -  -      ;TODO: Figure out a more efficient way to emulate this instruction.
 3148 D1:CF83 C3 F6 B6 D1     jp  i6502NextLoad
 3149 D1:CF87 -  -  -  -  
 3150 D1:CF87 -  -  -  -  ;-----------------------------------------------------------------------------
 3151 D1:CF87 -  -  -  -  ;DCP (DCM) - DEC oper + CMP oper
 3152 D1:CF87 -  -  -  -  ;M-1->M, A-M. Affects CZN
 3153 D1:CF87 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3154 D1:CF87 -  -  -  -  
 3155 D1:CF87 -  -  -  -  ;zeropage	DCP oper	C7	2	5  	
 3156 D1:CF87 -  -  -  -  inst6502_dcp_zp:
 3157 D1:CF87 ED 33 05 -      ADDCYC(5)
 3158 D1:CF8A 7E -  -  -      ld  a,(hl)
 3159 D1:CF8B 01 00 38 D0     ld  bc,ZEROPAGE
 3160 D1:CF8F 81 -  -  -      add a,c
 3161 D1:CF90 4F -  -  -      ld  c,a
 3162 D1:CF91 0A -  -  -      ld  a,(bc)
 3163 D1:CF92 3D -  -  -      dec a
 3164 D1:CF93 02 -  -  -      ld  (bc),a
 3165 D1:CF94 47 -  -  -      ld  b,a
 3166 D1:CF95 C3 94 B8 D1     jp  subroutine6502_cmp_combined_end
 3167 D1:CF99 -  -  -  -  
 3168 D1:CF99 -  -  -  -  ;zeropage,X	DCP oper,X	D7	2	6  	
 3169 D1:CF99 -  -  -  -  inst6520_dcp_zpx:
 3170 D1:CF99 ED 33 06 -      ADDCYC(6)
 3171 D1:CF9C 7E -  -  -      ld  a,(hl)
 3172 D1:CF9D 01 00 38 D0     ld  bc,ZEROPAGE
 3173 D1:CFA1 81 -  -  -      add a,c
 3174 D1:CFA2 DD 86 01 -      add a,(ix+REGX)
 3175 D1:CFA5 4F -  -  -      ld  c,a
 3176 D1:CFA6 0A -  -  -      ld  a,(bc)
 3177 D1:CFA7 3D -  -  -      dec a
 3178 D1:CFA8 02 -  -  -      ld  (bc),a
 3179 D1:CFA9 47 -  -  -      ld  b,a
 3180 D1:CFAA C3 94 B8 D1     jp  subroutine6502_cmp_combined_end
 3181 D1:CFAE -  -  -  -  
 3182 D1:CFAE -  -  -  -  ;absolute	DCP oper	CF	3	6  	
 3183 D1:CFAE -  -  -  -  inst6502_dcp_abs:
 3184 D1:CFAE ED 33 06 -      ADDCYC(6)
 3185 D1:CFB1 CD 9E B7 D1     call subroutine6502_abs_split_start
 3186 D1:CFB5 E5 -  -  -      push hl
 3187 D1:CFB6 50 -  -  -          ld  d,b
 3188 D1:CFB7 79 -  -  -          ld  a,c
 3189 D1:CFB8 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3190 D1:CFBA ED 4C -  -          mlt bc
 3191 D1:CFBC 21 00 40 D0         ld  hl,PAGETABLE
 3192 D1:CFC0 09 -  -  -          add hl,bc
 3193 D1:CFC1 ED 27 -  -          ld  hl,(hl)
 3194 D1:CFC3 06 00 -  -          ld  b,0
 3195 D1:CFC5 4F -  -  -          ld  c,a
 3196 D1:CFC6 09 -  -  -          add hl,bc   ;full address
 3197 D1:CFC7 CD 79 AE D1         READ_ACCESS
 3198 D1:CFCB 3D -  -  -          dec a
 3199 D1:CFCC 47 -  -  -          ld b,a
 3200 D1:CFCD C5 -  -  -          push bc
 3201 D1:CFCE CD 1B AF D1             WRITE_ACCESS
 3202 D1:CFD2 C1 -  -  -          pop bc
 3203 D1:CFD3 E1 -  -  -      pop hl
 3204 D1:CFD4 C3 94 B8 D1     jp  subroutine6502_cmp_combined_end
 3205 D1:CFD8 -  -  -  -  
 3206 D1:CFD8 -  -  -  -  ;absolut,X	DCP oper,X	DF	3	7  	
 3207 D1:CFD8 -  -  -  -  inst6502_dcp_absx:
 3208 D1:CFD8 ED 33 07 -      ADDCYC(7)
 3209 D1:CFDB CD FB B7 D1     PUSH_ABSXSPLIT_NODEP
 3210 D1:CFDF CD 79 AE D1         READ_ACCESS
 3211 D1:CFE3 3D -  -  -          dec a
 3212 D1:CFE4 47 -  -  -          ld  b,a
 3213 D1:CFE5 C5 -  -  -          push bc
 3214 D1:CFE6 CD 1B AF D1             WRITE_ACCESS
 3215 D1:CFEA C1 -  -  -          pop bc
 3216 D1:CFEB E1 -  -  -      pop hl
 3217 D1:CFEC C3 94 B8 D1     jp  subroutine6502_cmp_combined_end
 3218 D1:CFF0 -  -  -  -  
 3219 D1:CFF0 -  -  -  -  ;absolut,Y	DCP oper,Y	DB	3	7  	
 3220 D1:CFF0 -  -  -  -  inst6502_dcp_absy:
 3221 D1:CFF0 ED 33 07 -      ADDCYC(7)
 3222 D1:CFF3 CD F6 B7 D1     PUSH_ABSYSPLIT_NODEP
 3223 D1:CFF7 CD 79 AE D1         READ_ACCESS
 3224 D1:CFFB 3D -  -  -          dec a
 3225 D1:CFFC 47 -  -  -          ld  b,a
 3226 D1:CFFD C5 -  -  -          push bc
 3227 D1:CFFE CD 1B AF D1             WRITE_ACCESS
 3228 D1:D002 C1 -  -  -          pop bc
 3229 D1:D003 E1 -  -  -      pop hl
 3230 D1:D004 C3 94 B8 D1     jp  subroutine6502_cmp_combined_end
 3231 D1:D008 -  -  -  -  
 3232 D1:D008 -  -  -  -  ;(indirect,X)	DCP (oper,X)	C3	2	8  	
 3233 D1:D008 -  -  -  -  inst6502_dcp_indx:
 3234 D1:D008 ED 33 08 -      ADDCYC(8)
 3235 D1:D00B E5 -  -  -      push hl
 3236 D1:D00C 7E -  -  -          ld  a,(hl)
 3237 D1:D00D 21 00 38 D0         ld  hl,ZEROPAGE
 3238 D1:D011 85 -  -  -          add a,L
 3239 D1:D012 DD 86 01 -          add a,(ix+REGX)
 3240 D1:D015 6F -  -  -          ld  L,a
 3241 D1:D016 7E -  -  -          ld  a,(hl)
 3242 D1:D017 2C -  -  -          inc L
 3243 D1:D018 56 -  -  -          ld  d,(hl)
 3244 D1:D019 42 -  -  -          ld  b,d
 3245 D1:D01A 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3246 D1:D01C ED 4C -  -          mlt bc
 3247 D1:D01E 21 00 40 D0         ld  hl,PAGETABLE
 3248 D1:D022 09 -  -  -          add hl,bc
 3249 D1:D023 ED 27 -  -          ld  hl,(hl)
 3250 D1:D025 06 00 -  -          ld  b,0
 3251 D1:D027 4F -  -  -          ld  c,a
 3252 D1:D028 09 -  -  -          add hl,bc
 3253 D1:D029 CD 79 AE D1         READ_ACCESS
 3254 D1:D02D 3D -  -  -          dec a
 3255 D1:D02E 47 -  -  -          ld  b,a
 3256 D1:D02F C5 -  -  -          push bc
 3257 D1:D030 CD 1B AF D1             WRITE_ACCESS
 3258 D1:D034 C1 -  -  -          pop bc
 3259 D1:D035 E1 -  -  -      pop hl
 3260 D1:D036 C3 94 B8 D1     jp  subroutine6502_cmp_combined_end
 3261 D1:D03A -  -  -  -  
 3262 D1:D03A -  -  -  -  ;(indirect),Y	DCP (oper),Y	D3	2	8  
 3263 D1:D03A -  -  -  -  inst6502_dcp_indy:
 3264 D1:D03A ED 33 08 -      ADDCYC(8)
 3265 D1:D03D E5 -  -  -      push hl
 3266 D1:D03E 7E -  -  -          ld  a,(hl)
 3267 D1:D03F 21 00 38 D0         ld  hl,ZEROPAGE
 3268 D1:D043 85 -  -  -          add a,L
 3269 D1:D044 6F -  -  -          ld  L,a
 3270 D1:D045 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3271 D1:D046 2C -  -  -          inc L
 3272 D1:D047 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3273 D1:D04A 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3274 D1:D04B 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3275 D1:D04D 24 -  -  -          inc h
 3276 D1:D04E 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3277 D1:D04F 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3278 D1:D051 ED 6C -  -          mlt hl          ;23.
 3279 D1:D053 01 00 40 D0         ld  bc,PAGETABLE
 3280 D1:D057 09 -  -  -          add hl,bc
 3281 D1:D058 ED 27 -  -          ld  hl,(hl)     ;address get.
 3282 D1:D05A 01 00 00 00         ld  bc,0
 3283 D1:D05E 4F -  -  -          ld  c,a
 3284 D1:D05F 09 -  -  -          add hl,bc       ;Full address get.
 3285 D1:D060 CD 79 AE D1         READ_ACCESS
 3286 D1:D064 3D -  -  -          dec a
 3287 D1:D065 47 -  -  -          ld  b,a
 3288 D1:D066 C5 -  -  -          push bc
 3289 D1:D067 CD 1B AF D1             WRITE_ACCESS
 3290 D1:D06B C1 -  -  -          pop bc
 3291 D1:D06C E1 -  -  -      pop hl
 3292 D1:D06D C3 94 B8 D1     jp  subroutine6502_cmp_combined_end
 3293 D1:D071 -  -  -  -  
 3294 D1:D071 -  -  -  -  ;-----------------------------------------------------------------------------
 3295 D1:D071 -  -  -  -  ;ISC (ISB, INS) - INC oper + SBC oper
 3296 D1:D071 -  -  -  -  ;M+1->M, A-M-not(C)->A, affects VCZN
 3297 D1:D071 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3298 D1:D071 -  -  -  -  
 3299 D1:D071 -  -  -  -  
 3300 D1:D071 -  -  -  -  
 3301 D1:D071 -  -  -  -  ;zeropage	ISC oper	E7	2	5  	
 3302 D1:D071 -  -  -  -  inst6502_isc_zp:
 3303 D1:D071 ED 33 05 -      ADDCYC(5)
 3304 D1:D074 7E -  -  -      ld  a,(hl)
 3305 D1:D075 01 00 38 D0     ld  bc,ZEROPAGE
 3306 D1:D079 81 -  -  -      add a,c
 3307 D1:D07A 4F -  -  -      ld  c,a
 3308 D1:D07B 0A -  -  -      ld  a,(bc)
 3309 D1:D07C 3C -  -  -      inc a
 3310 D1:D07D 02 -  -  -      ld  (bc),a
 3311 D1:D07E 4F -  -  -      ld  c,a
 3312 D1:D07F C3 61 B8 D1     jp  subroutine6502_sbc_combined_end
 3313 D1:D083 -  -  -  -  
 3314 D1:D083 -  -  -  -  ;zeropage,X	ISC oper,X	F7	2	6  
 3315 D1:D083 -  -  -  -  inst6520_isc_zpx:
 3316 D1:D083 ED 33 06 -      ADDCYC(6)
 3317 D1:D086 7E -  -  -      ld  a,(hl)
 3318 D1:D087 01 00 38 D0     ld  bc,ZEROPAGE
 3319 D1:D08B 81 -  -  -      add a,c
 3320 D1:D08C DD 86 01 -      add a,(ix+REGX)
 3321 D1:D08F 4F -  -  -      ld  c,a
 3322 D1:D090 0A -  -  -      ld  a,(bc)
 3323 D1:D091 3C -  -  -      inc a
 3324 D1:D092 02 -  -  -      ld  (bc),a
 3325 D1:D093 4F -  -  -      ld  c,a
 3326 D1:D094 C3 61 B8 D1     jp  subroutine6502_sbc_combined_end
 3327 D1:D098 -  -  -  -  
 3328 D1:D098 -  -  -  -  ;absolute	ISC oper	EF	3	6  	
 3329 D1:D098 -  -  -  -  inst6502_isc_abs:
 3330 D1:D098 ED 33 06 -      ADDCYC(6)
 3331 D1:D09B CD 9E B7 D1     call subroutine6502_abs_split_start
 3332 D1:D09F E5 -  -  -      push hl
 3333 D1:D0A0 50 -  -  -          ld  d,b
 3334 D1:D0A1 79 -  -  -          ld  a,c
 3335 D1:D0A2 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3336 D1:D0A4 ED 4C -  -          mlt bc
 3337 D1:D0A6 21 00 40 D0         ld  hl,PAGETABLE
 3338 D1:D0AA 09 -  -  -          add hl,bc
 3339 D1:D0AB ED 27 -  -          ld  hl,(hl)
 3340 D1:D0AD 06 00 -  -          ld  b,0
 3341 D1:D0AF 4F -  -  -          ld  c,a
 3342 D1:D0B0 09 -  -  -          add hl,bc   ;full address
 3343 D1:D0B1 CD 79 AE D1         READ_ACCESS
 3344 D1:D0B5 3C -  -  -          inc a
 3345 D1:D0B6 47 -  -  -          ld b,a
 3346 D1:D0B7 4F -  -  -          ld c,a
 3347 D1:D0B8 C5 -  -  -          push bc
 3348 D1:D0B9 CD 1B AF D1             WRITE_ACCESS
 3349 D1:D0BD C1 -  -  -          pop bc
 3350 D1:D0BE E1 -  -  -      pop hl
 3351 D1:D0BF C3 61 B8 D1     jp  subroutine6502_sbc_combined_end
 3352 D1:D0C3 -  -  -  -  
 3353 D1:D0C3 -  -  -  -  ;absolut,X	ISC oper,X	FF	3	7  	
 3354 D1:D0C3 -  -  -  -  inst6502_isc_absx:
 3355 D1:D0C3 ED 33 07 -      ADDCYC(7)
 3356 D1:D0C6 CD FB B7 D1     PUSH_ABSXSPLIT_NODEP
 3357 D1:D0CA CD 79 AE D1         READ_ACCESS
 3358 D1:D0CE 3C -  -  -          inc a
 3359 D1:D0CF 47 -  -  -          ld  b,a
 3360 D1:D0D0 4F -  -  -          ld  c,a
 3361 D1:D0D1 C5 -  -  -          push bc
 3362 D1:D0D2 CD 1B AF D1             WRITE_ACCESS
 3363 D1:D0D6 C1 -  -  -          pop bc
 3364 D1:D0D7 E1 -  -  -      pop hl
 3365 D1:D0D8 C3 61 B8 D1     jp  subroutine6502_sbc_combined_end
 3366 D1:D0DC -  -  -  -  
 3367 D1:D0DC -  -  -  -  ;absolut,Y	ISC oper,Y	FB	3	7  	
 3368 D1:D0DC -  -  -  -  inst6502_isc_absy:
 3369 D1:D0DC ED 33 07 -      ADDCYC(7)
 3370 D1:D0DF CD F6 B7 D1     PUSH_ABSYSPLIT_NODEP
 3371 D1:D0E3 CD 79 AE D1         READ_ACCESS
 3372 D1:D0E7 3C -  -  -          inc a
 3373 D1:D0E8 47 -  -  -          ld  b,a
 3374 D1:D0E9 4F -  -  -          ld  c,a
 3375 D1:D0EA C5 -  -  -          push bc
 3376 D1:D0EB CD 1B AF D1             WRITE_ACCESS
 3377 D1:D0EF C1 -  -  -          pop bc
 3378 D1:D0F0 E1 -  -  -      pop hl
 3379 D1:D0F1 C3 61 B8 D1     jp  subroutine6502_sbc_combined_end
 3380 D1:D0F5 -  -  -  -  
 3381 D1:D0F5 -  -  -  -  ;(indirect,X)	ISC (oper,X)	E3	2	8  	
 3382 D1:D0F5 -  -  -  -  inst6502_isc_indx:
 3383 D1:D0F5 ED 33 08 -      ADDCYC(8)
 3384 D1:D0F8 E5 -  -  -      push hl
 3385 D1:D0F9 7E -  -  -          ld  a,(hl)
 3386 D1:D0FA 21 00 38 D0         ld  hl,ZEROPAGE
 3387 D1:D0FE 85 -  -  -          add a,L
 3388 D1:D0FF DD 86 01 -          add a,(ix+REGX)
 3389 D1:D102 6F -  -  -          ld  L,a
 3390 D1:D103 7E -  -  -          ld  a,(hl)
 3391 D1:D104 2C -  -  -          inc L
 3392 D1:D105 56 -  -  -          ld  d,(hl)
 3393 D1:D106 42 -  -  -          ld  b,d
 3394 D1:D107 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3395 D1:D109 ED 4C -  -          mlt bc
 3396 D1:D10B 21 00 40 D0         ld  hl,PAGETABLE
 3397 D1:D10F 09 -  -  -          add hl,bc
 3398 D1:D110 ED 27 -  -          ld  hl,(hl)
 3399 D1:D112 06 00 -  -          ld  b,0
 3400 D1:D114 4F -  -  -          ld  c,a
 3401 D1:D115 09 -  -  -          add hl,bc
 3402 D1:D116 CD 79 AE D1         READ_ACCESS
 3403 D1:D11A 3C -  -  -          inc a
 3404 D1:D11B 47 -  -  -          ld  b,a
 3405 D1:D11C 4F -  -  -          ld  c,a
 3406 D1:D11D C5 -  -  -          push bc
 3407 D1:D11E CD 1B AF D1             WRITE_ACCESS
 3408 D1:D122 C1 -  -  -          pop bc
 3409 D1:D123 E1 -  -  -      pop hl
 3410 D1:D124 C3 61 B8 D1     jp  subroutine6502_sbc_combined_end
 3411 D1:D128 -  -  -  -  
 3412 D1:D128 -  -  -  -  ;(indirect),Y	ISC (oper),Y	F3	2	8  
 3413 D1:D128 -  -  -  -  inst6502_isc_indy:
 3414 D1:D128 ED 33 08 -      ADDCYC(8)
 3415 D1:D12B E5 -  -  -      push hl
 3416 D1:D12C 7E -  -  -          ld  a,(hl)
 3417 D1:D12D 21 00 38 D0         ld  hl,ZEROPAGE
 3418 D1:D131 85 -  -  -          add a,L
 3419 D1:D132 6F -  -  -          ld  L,a
 3420 D1:D133 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3421 D1:D134 2C -  -  -          inc L
 3422 D1:D135 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3423 D1:D138 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3424 D1:D139 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3425 D1:D13B 24 -  -  -          inc h
 3426 D1:D13C 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3427 D1:D13D 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3428 D1:D13F ED 6C -  -          mlt hl          ;23.
 3429 D1:D141 01 00 40 D0         ld  bc,PAGETABLE
 3430 D1:D145 09 -  -  -          add hl,bc
 3431 D1:D146 ED 27 -  -          ld  hl,(hl)     ;address get.
 3432 D1:D148 01 00 00 00         ld  bc,0
 3433 D1:D14C 4F -  -  -          ld  c,a
 3434 D1:D14D 09 -  -  -          add hl,bc       ;Full address get.
 3435 D1:D14E CD 79 AE D1         READ_ACCESS
 3436 D1:D152 3C -  -  -          inc a
 3437 D1:D153 47 -  -  -          ld  b,a
 3438 D1:D154 4F -  -  -          ld  c,a
 3439 D1:D155 C5 -  -  -          push bc
 3440 D1:D156 CD 1B AF D1             WRITE_ACCESS
 3441 D1:D15A C1 -  -  -          pop bc
 3442 D1:D15B E1 -  -  -      pop hl
 3443 D1:D15C C3 61 B8 D1     jp  subroutine6502_sbc_combined_end
 3444 D1:D160 -  -  -  -  ;-----------------------------------------------------------------------------
 3445 D1:D160 -  -  -  -  ;LAS (LAR) - LDA/TSX oper
 3446 D1:D160 -  -  -  -  ;M AND SP -> A, X, SP. Affects ZN
 3447 D1:D160 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3448 D1:D160 -  -  -  -  ;absolut,Y	LAS oper,Y	BB	3	4* 
 3449 D1:D160 -  -  -  -  inst6502_las_absy:
 3450 D1:D160 ED 33 04 -      ADDCYC(4)
 3451 D1:D163 CD BA B7 D1     PUSH_ABSYSPLIT
 3452 D1:D167 CD 79 AE D1         READ_ACCESS
 3453 D1:D16B E1 -  -  -      pop hl
 3454 D1:D16C DD A6 03 -      and a,(ix+REGSP)
 3455 D1:D16F DD 77 00 -      ld  (ix+REGA),A
 3456 D1:D172 DD 77 01 -      ld  (ix+REGX),A
 3457 D1:D175 DD 77 03 -      ld  (ix+REGSP),A
 3458 D1:D178 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3459 D1:D18C C3 F6 B6 D1     jp i6502NextLoad
 3460 D1:D190 -  -  -  -  
 3461 D1:D190 -  -  -  -  ;-----------------------------------------------------------------------------
 3462 D1:D190 -  -  -  -  ;LAX - LDA oper + LDX oper
 3463 D1:D190 -  -  -  -  ;M -> A -> X. Flags affected: ZN
 3464 D1:D190 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3465 D1:D190 -  -  -  -  ;zeropage	LAX oper	A7	2	3  	
 3466 D1:D190 -  -  -  -  inst6502_lax_zp:
 3467 D1:D190 ED 33 03 -      ADDCYC(3)
 3468 D1:D193 7E -  -  -      ld  a,(hl)
 3469 D1:D194 01 00 38 D0     ld  bc,ZEROPAGE
 3470 D1:D198 81 -  -  -      add a,c
 3471 D1:D199 4F -  -  -      ld  c,a
 3472 D1:D19A 0A -  -  -      ld  a,(bc)
 3473 D1:D19B DD 77 00 -      ld  (ix+REGA),a
 3474 D1:D19E DD 77 01 -      ld  (ix+REGX),a
 3475 D1:D1A1 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3476 D1:D1B5 C3 F6 B6 D1     jp i6502NextLoad
 3477 D1:D1B9 -  -  -  -  
 3478 D1:D1B9 -  -  -  -  ;zeropage,Y	LAX oper,Y	B7	2	4  	
 3479 D1:D1B9 -  -  -  -  inst6502_lax_zpy:
 3480 D1:D1B9 ED 33 04 -      ADDCYC(4)
 3481 D1:D1BC 7E -  -  -      ld  a,(hl)
 3482 D1:D1BD 01 00 38 D0     ld  bc,ZEROPAGE
 3483 D1:D1C1 81 -  -  -      add a,c
 3484 D1:D1C2 DD 86 02 -      add a,(ix+REGY)
 3485 D1:D1C5 4F -  -  -      ld  c,a
 3486 D1:D1C6 0A -  -  -      ld  a,(bc)
 3487 D1:D1C7 DD 77 00 -      ld  (ix+REGA),a
 3488 D1:D1CA DD 77 01 -      ld  (ix+REGX),a
 3489 D1:D1CD DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3490 D1:D1E1 C3 F6 B6 D1     jp i6502NextLoad
 3491 D1:D1E5 -  -  -  -  
 3492 D1:D1E5 -  -  -  -  ;absolute	LAX oper	AF	3	4  	
 3493 D1:D1E5 -  -  -  -  inst6502_lax_abs:
 3494 D1:D1E5 ED 33 04 -      ADDCYC(4)
 3495 D1:D1E8 CD 9E B7 D1     call subroutine6502_abs_split_start
 3496 D1:D1EC E5 -  -  -      push hl
 3497 D1:D1ED 50 -  -  -          ld  d,b
 3498 D1:D1EE 79 -  -  -          ld  a,c
 3499 D1:D1EF 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3500 D1:D1F1 ED 4C -  -          mlt bc
 3501 D1:D1F3 21 00 40 D0         ld  hl,PAGETABLE
 3502 D1:D1F7 09 -  -  -          add hl,bc
 3503 D1:D1F8 ED 27 -  -          ld  hl,(hl)
 3504 D1:D1FA 06 00 -  -          ld  b,0
 3505 D1:D1FC 4F -  -  -          ld  c,a
 3506 D1:D1FD 09 -  -  -          add hl,bc   ;full address
 3507 D1:D1FE CD 79 AE D1         READ_ACCESS
 3508 D1:D202 DD 77 00 -          ld (ix+REGA),a
 3509 D1:D205 DD 77 01 -          ld (ix+REGX),a
 3510 D1:D208 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3511 D1:D21C E1 -  -  -      pop hl
 3512 D1:D21D C3 F6 B6 D1     jp i6502NextLoad
 3513 D1:D221 -  -  -  -  
 3514 D1:D221 -  -  -  -  ;absolut,Y	LAX oper,Y	BF	3	4* 	
 3515 D1:D221 -  -  -  -  inst6502_lax_absy:
 3516 D1:D221 ED 33 04 -      ADDCYC(4)
 3517 D1:D224 CD BA B7 D1     PUSH_ABSYSPLIT
 3518 D1:D228 CD 79 AE D1         READ_ACCESS
 3519 D1:D22C DD 77 00 -          ld (ix+REGA),a
 3520 D1:D22F DD 77 01 -          ld (ix+REGX),a
 3521 D1:D232 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3522 D1:D246 E1 -  -  -      pop hl
 3523 D1:D247 C3 F6 B6 D1     jp i6502NextLoad
 3524 D1:D24B -  -  -  -  
 3525 D1:D24B -  -  -  -  ;(indirect,X)	LAX (oper,X)	A3	2	6  	
 3526 D1:D24B -  -  -  -  inst6502_lax_indx:
 3527 D1:D24B ED 33 06 -      ADDCYC(6)
 3528 D1:D24E E5 -  -  -      push hl
 3529 D1:D24F 7E -  -  -          ld  a,(hl)
 3530 D1:D250 21 00 38 D0         ld  hl,ZEROPAGE
 3531 D1:D254 85 -  -  -          add a,L
 3532 D1:D255 DD 86 01 -          add a,(ix+REGX)
 3533 D1:D258 6F -  -  -          ld  L,a
 3534 D1:D259 7E -  -  -          ld  a,(hl)
 3535 D1:D25A 2C -  -  -          inc L
 3536 D1:D25B 56 -  -  -          ld  d,(hl)
 3537 D1:D25C 42 -  -  -          ld  b,d
 3538 D1:D25D 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3539 D1:D25F ED 4C -  -          mlt bc
 3540 D1:D261 21 00 40 D0         ld  hl,PAGETABLE
 3541 D1:D265 09 -  -  -          add hl,bc
 3542 D1:D266 ED 27 -  -          ld  hl,(hl)
 3543 D1:D268 06 00 -  -          ld  b,0
 3544 D1:D26A 4F -  -  -          ld  c,a
 3545 D1:D26B 09 -  -  -          add hl,bc
 3546 D1:D26C CD 79 AE D1         READ_ACCESS
 3547 D1:D270 DD 77 00 -          ld (ix+REGA),a
 3548 D1:D273 DD 77 01 -          ld (ix+REGX),a
 3549 D1:D276 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3550 D1:D28A E1 -  -  -      pop hl
 3551 D1:D28B C3 F6 B6 D1     jp i6502NextLoad
 3552 D1:D28F -  -  -  -  
 3553 D1:D28F -  -  -  -  ;(indirect),Y	LAX (oper),Y	B3	2	5* 
 3554 D1:D28F -  -  -  -  inst6502_lax_indy:
 3555 D1:D28F ED 33 05 -      ADDCYC(5)
 3556 D1:D292 E5 -  -  -      push hl
 3557 D1:D293 7E -  -  -          ld  a,(hl)
 3558 D1:D294 21 00 38 D0         ld  hl,ZEROPAGE
 3559 D1:D298 85 -  -  -          add a,L
 3560 D1:D299 6F -  -  -          ld  L,a
 3561 D1:D29A 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3562 D1:D29B 2C -  -  -          inc L
 3563 D1:D29C DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3564 D1:D29F 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3565 D1:D2A0 30 03 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3566 D1:D2A2 FD 23 -  -          ADDCYC(1)
 3567 D1:D2A4 24 -  -  -          inc h
 3568 D1:D2A5 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3569 D1:D2A6 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3570 D1:D2A8 ED 6C -  -          mlt hl          ;23.
 3571 D1:D2AA 01 00 40 D0         ld  bc,PAGETABLE
 3572 D1:D2AE 09 -  -  -          add hl,bc
 3573 D1:D2AF ED 27 -  -          ld  hl,(hl)     ;address get.
 3574 D1:D2B1 01 00 00 00         ld  bc,0
 3575 D1:D2B5 4F -  -  -          ld  c,a
 3576 D1:D2B6 09 -  -  -          add hl,bc       ;Full address get.
 3577 D1:D2B7 CD 79 AE D1         READ_ACCESS
 3578 D1:D2BB DD 77 00 -          ld  (ix+REGA),a
 3579 D1:D2BE DD 77 01 -          ld  (ix+REGX),a
 3580 D1:D2C1 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -          FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3581 D1:D2D5 E1 -  -  -      pop hl
 3582 D1:D2D6 C3 F6 B6 D1     jp i6502NextLoad
 3583 D1:D2DA -  -  -  -  
 3584 D1:D2DA -  -  -  -  ;-----------------------------------------------------------------------------
 3585 D1:D2DA -  -  -  -  ;LXA (LAX immediate)
 3586 D1:D2DA -  -  -  -  ;Store * AND oper in A and X
 3587 D1:D2DA -  -  -  -  ;Highly unstable, involves a 'magic' constant, see ANE
 3588 D1:D2DA -  -  -  -  ;(A OR CONST) AND oper -> A -> X
 3589 D1:D2DA -  -  -  -  ;immediate	LXA #oper	AB	2	2  	††
 3590 D1:D2DA -  -  -  -  inst6502_lxa:
 3591 D1:D2DA ED 33 02 -      ADDCYC(2)
 3592 D1:D2DD ED 5F -  -      ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
 3593 D1:D2DF DD B6 00 -      or  a,(ix+REGA)
 3594 D1:D2E2 A6 -  -  -      and a,(hl)
 3595 D1:D2E3 DD 77 00 -      ld  (ix+REGA),a
 3596 D1:D2E6 DD 77 01 -      ld  (ix+REGX),a
 3597 D1:D2E9 DD 46 04 CB 
              07 CB 88 20 
              02 CB C8 -      FLAGS_ZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 3598 D1:D2FD C3 F6 B6 D1     jp  i6502NextLoad
 3599 D1:D301 -  -  -  -  
 3600 D1:D301 -  -  -  -  ;-----------------------------------------------------------------------------
 3601 D1:D301 -  -  -  -  ;RLA - ROL oper + AND oper
 3602 D1:D301 -  -  -  -  ;M = C <- [76543210] <- C, A AND M -> A. flags CZN
 3603 D1:D301 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3604 D1:D301 -  -  -  -  ;zeropage	RLA oper	27	2	5  	
 3605 D1:D301 -  -  -  -  inst6502_rla_zp:
 3606 D1:D301 ED 33 05 -      ADDCYC(5)
 3607 D1:D304 7E -  -  -      ld  a,(hl)
 3608 D1:D305 01 00 38 D0     ld  bc,ZEROPAGE
 3609 D1:D309 81 -  -  -      add a,c
 3610 D1:D30A 4F -  -  -      ld  c,a
 3611 D1:D30B DD 7E 04 -      ld  a,(ix+REGSR)
 3612 D1:D30E 1F -  -  -      rra
 3613 D1:D30F 0A -  -  -      ld  a,(bc)
 3614 D1:D310 17 -  -  -      rla
 3615 D1:D311 02 -  -  -      ld  (bc),a
 3616 D1:D312 -  -  -  -      ;Flag breakdown to optimize for split operation
 3617 D1:D312 DD 46 04 -      ld  b,(ix+REGSR)
 3618 D1:D315 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3619 D1:D31B DD A6 00 -      and a,(ix+REGA)
 3620 D1:D31E DD 77 00 -      ld  (ix+REGA),a
 3621 D1:D321 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3622 D1:D327 87 -  -  -      add a,a
 3623 D1:D328 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3624 D1:D32E DD 70 04 -      ld  (ix+REGSR),b
 3625 D1:D331 C3 F6 B6 D1     jp i6502NextLoad
 3626 D1:D335 -  -  -  -  
 3627 D1:D335 -  -  -  -  ;zeropage,X	RLA oper,X	37	2	6  	
 3628 D1:D335 -  -  -  -  inst6502_rla_zpx:
 3629 D1:D335 ED 33 06 -      ADDCYC(6)
 3630 D1:D338 7E -  -  -      ld  a,(hl)
 3631 D1:D339 01 00 38 D0     ld  bc,ZEROPAGE
 3632 D1:D33D 81 -  -  -      add a,c
 3633 D1:D33E DD 86 01 -      add a,(ix+REGX)
 3634 D1:D341 4F -  -  -      ld  c,a
 3635 D1:D342 DD 7E 04 -      ld  a,(ix+REGSR)
 3636 D1:D345 1F -  -  -      rra
 3637 D1:D346 0A -  -  -      ld  a,(bc)
 3638 D1:D347 17 -  -  -      rla
 3639 D1:D348 02 -  -  -      ld  (bc),a
 3640 D1:D349 -  -  -  -      ;Flag breakdown to optimize for split operation
 3641 D1:D349 DD 46 04 -      ld  b,(ix+REGSR)
 3642 D1:D34C CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 3643 D1:D352 DD A6 00 -      and a,(ix+REGA)
 3644 D1:D355 DD 77 00 -      ld  (ix+REGA),a
 3645 D1:D358 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 3646 D1:D35E 87 -  -  -      add a,a
 3647 D1:D35F CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 3648 D1:D365 DD 70 04 -      ld  (ix+REGSR),b
 3649 D1:D368 C3 F6 B6 D1     jp i6502NextLoad
 3650 D1:D36C -  -  -  -  
 3651 D1:D36C -  -  -  -  ;absolute	RLA oper	2F	3	6  	
 3652 D1:D36C -  -  -  -  inst6502_rla_abs:
 3653 D1:D36C ED 33 06 -      ADDCYC(6)
 3654 D1:D36F CD 9E B7 D1     call subroutine6502_abs_split_start
 3655 D1:D373 E5 -  -  -      push hl
 3656 D1:D374 50 -  -  -          ld  d,b
 3657 D1:D375 79 -  -  -          ld  a,c
 3658 D1:D376 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3659 D1:D378 ED 4C -  -          mlt bc
 3660 D1:D37A 21 00 40 D0         ld  hl,PAGETABLE
 3661 D1:D37E 09 -  -  -          add hl,bc
 3662 D1:D37F ED 27 -  -          ld  hl,(hl)
 3663 D1:D381 06 00 -  -          ld  b,0
 3664 D1:D383 4F -  -  -          ld  c,a
 3665 D1:D384 09 -  -  -          add hl,bc   ;full address
 3666 D1:D385 CD 79 AE D1         READ_ACCESS
 3667 D1:D389 DD 46 04 -          ld  b,(ix+REGSR)
 3668 D1:D38C CB 18 -  -          rr b
 3669 D1:D38E 17 -  -  -          rla
 3670 D1:D38F 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3671 D1:D390 -  -  -  -          ;Split oper
 3672 D1:D390 DD 46 04 -          ld  b,(ix+REGSR)
 3673 D1:D393 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3674 D1:D399 DD A6 00 -          and a,(ix+REGA)
 3675 D1:D39C DD 77 00 -          ld  (ix+REGA),a
 3676 D1:D39F CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3677 D1:D3A5 87 -  -  -          add a,a
 3678 D1:D3A6 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3679 D1:D3AC DD 70 04 -          ld  (ix+REGSR),b
 3680 D1:D3AF 41 -  -  -          ld  b,c
 3681 D1:D3B0 CD 1B AF D1         WRITE_ACCESS
 3682 D1:D3B4 E1 -  -  -      pop hl
 3683 D1:D3B5 C3 F6 B6 D1     jp i6502NextLoad
 3684 D1:D3B9 -  -  -  -  
 3685 D1:D3B9 -  -  -  -  ;absolut,X	RLA oper,X	3F	3	7  	
 3686 D1:D3B9 -  -  -  -  inst6502_rla_absx:
 3687 D1:D3B9 ED 33 07 -      ADDCYC(7)
 3688 D1:D3BC CD FB B7 D1     PUSH_ABSXSPLIT_NODEP
 3689 D1:D3C0 CD 79 AE D1         READ_ACCESS
 3690 D1:D3C4 DD 46 04 -          ld  b,(ix+REGSR)
 3691 D1:D3C7 CB 18 -  -          rr b
 3692 D1:D3C9 17 -  -  -          rla
 3693 D1:D3CA 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3694 D1:D3CB -  -  -  -          ;Split oper
 3695 D1:D3CB DD 46 04 -          ld  b,(ix+REGSR)
 3696 D1:D3CE CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3697 D1:D3D4 DD A6 00 -          and a,(ix+REGA)
 3698 D1:D3D7 DD 77 00 -          ld  (ix+REGA),a
 3699 D1:D3DA CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3700 D1:D3E0 87 -  -  -          add a,a
 3701 D1:D3E1 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3702 D1:D3E7 DD 70 04 -          ld  (ix+REGSR),b
 3703 D1:D3EA 41 -  -  -          ld  b,c
 3704 D1:D3EB CD 1B AF D1         WRITE_ACCESS
 3705 D1:D3EF E1 -  -  -      pop hl
 3706 D1:D3F0 C3 F6 B6 D1     jp i6502NextLoad
 3707 D1:D3F4 -  -  -  -  
 3708 D1:D3F4 -  -  -  -  ;absolut,Y	RLA oper,Y	3B	3	7  	
 3709 D1:D3F4 -  -  -  -  inst6502_rla_absy:
 3710 D1:D3F4 ED 33 07 -      ADDCYC(7)
 3711 D1:D3F7 CD F6 B7 D1     PUSH_ABSYSPLIT_NODEP
 3712 D1:D3FB CD 79 AE D1         READ_ACCESS
 3713 D1:D3FF DD 46 04 -          ld  b,(ix+REGSR)
 3714 D1:D402 CB 18 -  -          rr b
 3715 D1:D404 17 -  -  -          rla
 3716 D1:D405 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3717 D1:D406 -  -  -  -          ;Split oper
 3718 D1:D406 DD 46 04 -          ld  b,(ix+REGSR)
 3719 D1:D409 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3720 D1:D40F DD A6 00 -          and a,(ix+REGA)
 3721 D1:D412 DD 77 00 -          ld  (ix+REGA),a
 3722 D1:D415 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3723 D1:D41B 87 -  -  -          add a,a
 3724 D1:D41C CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3725 D1:D422 DD 70 04 -          ld  (ix+REGSR),b
 3726 D1:D425 41 -  -  -          ld  b,c
 3727 D1:D426 CD 1B AF D1         WRITE_ACCESS
 3728 D1:D42A E1 -  -  -      pop hl
 3729 D1:D42B C3 F6 B6 D1     jp i6502NextLoad
 3730 D1:D42F -  -  -  -  
 3731 D1:D42F -  -  -  -  ;(indirect,X)	RLA (oper,X)	23	2	8  	
 3732 D1:D42F -  -  -  -  isnt6502_rla_indx:
 3733 D1:D42F ED 33 08 -      ADDCYC(8)
 3734 D1:D432 E5 -  -  -      push hl
 3735 D1:D433 7E -  -  -          ld  a,(hl)
 3736 D1:D434 21 00 38 D0         ld  hl,ZEROPAGE
 3737 D1:D438 85 -  -  -          add a,L
 3738 D1:D439 DD 86 01 -          add a,(ix+REGX)
 3739 D1:D43C 6F -  -  -          ld  L,a
 3740 D1:D43D 7E -  -  -          ld  a,(hl)
 3741 D1:D43E 2C -  -  -          inc L
 3742 D1:D43F 56 -  -  -          ld  d,(hl)
 3743 D1:D440 42 -  -  -          ld  b,d
 3744 D1:D441 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3745 D1:D443 ED 4C -  -          mlt bc
 3746 D1:D445 21 00 40 D0         ld  hl,PAGETABLE
 3747 D1:D449 09 -  -  -          add hl,bc
 3748 D1:D44A ED 27 -  -          ld  hl,(hl)
 3749 D1:D44C 06 00 -  -          ld  b,0
 3750 D1:D44E 4F -  -  -          ld  c,a
 3751 D1:D44F 09 -  -  -          add hl,bc
 3752 D1:D450 CD 79 AE D1         READ_ACCESS
 3753 D1:D454 DD 46 04 -          ld  b,(ix+REGSR)
 3754 D1:D457 CB 18 -  -          rr b
 3755 D1:D459 17 -  -  -          rla
 3756 D1:D45A 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3757 D1:D45B -  -  -  -          ;Split oper
 3758 D1:D45B DD 46 04 -          ld  b,(ix+REGSR)
 3759 D1:D45E CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3760 D1:D464 DD A6 00 -          and a,(ix+REGA)
 3761 D1:D467 DD 77 00 -          ld  (ix+REGA),a
 3762 D1:D46A CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3763 D1:D470 87 -  -  -          add a,a
 3764 D1:D471 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3765 D1:D477 DD 70 04 -          ld  (ix+REGSR),b
 3766 D1:D47A 41 -  -  -          ld  b,c
 3767 D1:D47B CD 1B AF D1         WRITE_ACCESS
 3768 D1:D47F E1 -  -  -      pop hl
 3769 D1:D480 C3 F6 B6 D1     jp  i6502NextLoad
 3770 D1:D484 -  -  -  -  
 3771 D1:D484 -  -  -  -  ;(indirect),Y	RLA (oper),Y	33	2	8  
 3772 D1:D484 -  -  -  -  inst6502_rla_indy:
 3773 D1:D484 ED 33 08 -      ADDCYC(8)
 3774 D1:D487 E5 -  -  -      push hl
 3775 D1:D488 7E -  -  -          ld  a,(hl)
 3776 D1:D489 21 00 38 D0         ld  hl,ZEROPAGE
 3777 D1:D48D 85 -  -  -          add a,L
 3778 D1:D48E 6F -  -  -          ld  L,a
 3779 D1:D48F 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3780 D1:D490 2C -  -  -          inc L
 3781 D1:D491 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3782 D1:D494 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3783 D1:D495 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3784 D1:D497 24 -  -  -          inc h
 3785 D1:D498 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3786 D1:D499 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3787 D1:D49B ED 6C -  -          mlt hl          ;23.
 3788 D1:D49D 01 00 40 D0         ld  bc,PAGETABLE
 3789 D1:D4A1 09 -  -  -          add hl,bc
 3790 D1:D4A2 ED 27 -  -          ld  hl,(hl)     ;address get.
 3791 D1:D4A4 01 00 00 00         ld  bc,0
 3792 D1:D4A8 4F -  -  -          ld  c,a
 3793 D1:D4A9 09 -  -  -          add hl,bc       ;Full address get.
 3794 D1:D4AA CD 79 AE D1         READ_ACCESS
 3795 D1:D4AE DD 46 04 -          ld  b,(ix+REGSR)
 3796 D1:D4B1 CB 18 -  -          rr b
 3797 D1:D4B3 17 -  -  -          rla
 3798 D1:D4B4 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 3799 D1:D4B5 -  -  -  -          ;Split oper
 3800 D1:D4B5 DD 46 04 -          ld  b,(ix+REGSR)
 3801 D1:D4B8 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 3802 D1:D4BE DD A6 00 -          and a,(ix+REGA)
 3803 D1:D4C1 DD 77 00 -          ld  (ix+REGA),a
 3804 D1:D4C4 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 3805 D1:D4CA 87 -  -  -          add a,a
 3806 D1:D4CB CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 3807 D1:D4D1 DD 70 04 -          ld  (ix+REGSR),b
 3808 D1:D4D4 41 -  -  -          ld  b,c
 3809 D1:D4D5 CD 1B AF D1         WRITE_ACCESS
 3810 D1:D4D9 E1 -  -  -      pop hl
 3811 D1:D4DA C3 F6 B6 D1     jp  i6502NextLoad
 3812 D1:D4DE -  -  -  -  
 3813 D1:D4DE -  -  -  -  ;-----------------------------------------------------------------------------
 3814 D1:D4DE -  -  -  -  ;RRA
 3815 D1:D4DE -  -  -  -  ;ROR oper + ADC oper
 3816 D1:D4DE -  -  -  -  ;M = C -> [76543210] -> C, A + M + C -> A, C. Affects VCZN
 3817 D1:D4DE -  -  -  -  
 3818 D1:D4DE -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 3819 D1:D4DE -  -  -  -  ;zeropage	RRA oper	67	2	5  	
 3820 D1:D4DE -  -  -  -  inst6502_rra_zp:
 3821 D1:D4DE ED 33 05 -      ADDCYC(5)
 3822 D1:D4E1 7E -  -  -      ld  a,(hl)
 3823 D1:D4E2 01 00 38 D0     ld  bc,ZEROPAGE
 3824 D1:D4E6 81 -  -  -      add a,c
 3825 D1:D4E7 4F -  -  -      ld  c,a
 3826 D1:D4E8 DD 7E 04 -      ld  a,(ix+REGSR)
 3827 D1:D4EB 1F -  -  -      rra
 3828 D1:D4EC 0A -  -  -      ld  a,(bc)
 3829 D1:D4ED 1F -  -  -      rra
 3830 D1:D4EE 02 -  -  -      ld  (bc),a
 3831 D1:D4EF DD CB 04 86     res SF_CARRY,(ix+REGSR)
 3832 D1:D4F3 30 04 -  -      jr nc,$+6
 3833 D1:D4F5 DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 3834 D1:D4F9 4F -  -  -      ld  c,a
 3835 D1:D4FA C3 30 B8 D1     jp  subroutine6502_adc_combined_end
 3836 D1:D4FE -  -  -  -  
 3837 D1:D4FE -  -  -  -  ;zeropage,X	RRA oper,X	77	2	6  	
 3838 D1:D4FE -  -  -  -  inst6502_rra_zpx:
 3839 D1:D4FE ED 33 06 -      ADDCYC(6)
 3840 D1:D501 7E -  -  -      ld  a,(hl)
 3841 D1:D502 01 00 38 D0     ld  bc,ZEROPAGE
 3842 D1:D506 81 -  -  -      add a,c
 3843 D1:D507 DD 86 01 -      add a,(ix+REGX)
 3844 D1:D50A 4F -  -  -      ld  c,a
 3845 D1:D50B DD 7E 04 -      ld  a,(ix+REGSR)
 3846 D1:D50E 1F -  -  -      rra
 3847 D1:D50F 0A -  -  -      ld  a,(bc)
 3848 D1:D510 1F -  -  -      rra
 3849 D1:D511 02 -  -  -      ld  (bc),a
 3850 D1:D512 DD CB 04 86     res SF_CARRY,(ix+REGSR)
 3851 D1:D516 30 04 -  -      jr nc,$+6
 3852 D1:D518 DD CB 04 C6     set SF_CARRY,(ix+REGSR)
 3853 D1:D51C 4F -  -  -      ld  c,a
 3854 D1:D51D C3 30 B8 D1     jp  subroutine6502_adc_combined_end
 3855 D1:D521 -  -  -  -  
 3856 D1:D521 -  -  -  -  ;absolute	RRA oper	6F	3	6  	
 3857 D1:D521 -  -  -  -  inst6502_rra_abs:
 3858 D1:D521 ED 33 06 -      ADDCYC(6)
 3859 D1:D524 CD 9E B7 D1     call subroutine6502_abs_split_start
 3860 D1:D528 E5 -  -  -      push hl
 3861 D1:D529 50 -  -  -          ld  d,b
 3862 D1:D52A 79 -  -  -          ld  a,c
 3863 D1:D52B 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3864 D1:D52D ED 4C -  -          mlt bc
 3865 D1:D52F 21 00 40 D0         ld  hl,PAGETABLE
 3866 D1:D533 09 -  -  -          add hl,bc
 3867 D1:D534 ED 27 -  -          ld  hl,(hl)
 3868 D1:D536 06 00 -  -          ld  b,0
 3869 D1:D538 4F -  -  -          ld  c,a
 3870 D1:D539 09 -  -  -          add hl,bc   ;full address
 3871 D1:D53A CD 79 AE D1         READ_ACCESS
 3872 D1:D53E DD 46 04 -          ld  b,(ix+REGSR)
 3873 D1:D541 CB 18 -  -          rr b
 3874 D1:D543 1F -  -  -          rra
 3875 D1:D544 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3876 D1:D548 30 04 -  -          jr nc,$+6
 3877 D1:D54A DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3878 D1:D54E 47 -  -  -          ld  b,a
 3879 D1:D54F C5 -  -  -          push bc
 3880 D1:D550 CD 1B AF D1             WRITE_ACCESS
 3881 D1:D554 C1 -  -  -          pop bc
 3882 D1:D555 48 -  -  -          ld c,b
 3883 D1:D556 E1 -  -  -      pop hl
 3884 D1:D557 C3 30 B8 D1     jp  subroutine6502_adc_combined_end
 3885 D1:D55B -  -  -  -  
 3886 D1:D55B -  -  -  -  ;absolut,X	RRA oper,X	7F	3	7  	
 3887 D1:D55B -  -  -  -  inst6502_rra_absx:
 3888 D1:D55B ED 33 07 -      ADDCYC(7)
 3889 D1:D55E CD FB B7 D1     PUSH_ABSXSPLIT_NODEP
 3890 D1:D562 CD 79 AE D1         READ_ACCESS
 3891 D1:D566 DD 46 04 -          ld  b,(ix+REGSR)
 3892 D1:D569 CB 18 -  -          rr b
 3893 D1:D56B 1F -  -  -          rra
 3894 D1:D56C DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3895 D1:D570 30 04 -  -          jr nc,$+6
 3896 D1:D572 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3897 D1:D576 47 -  -  -          ld  b,a
 3898 D1:D577 C5 -  -  -          push bc
 3899 D1:D578 CD 1B AF D1             WRITE_ACCESS
 3900 D1:D57C C1 -  -  -          pop bc
 3901 D1:D57D 48 -  -  -          ld c,b
 3902 D1:D57E E1 -  -  -      pop hl
 3903 D1:D57F C3 30 B8 D1     jp  subroutine6502_adc_combined_end
 3904 D1:D583 -  -  -  -  
 3905 D1:D583 -  -  -  -  ;absolut,Y	RRA oper,Y	7B	3	7  	
 3906 D1:D583 -  -  -  -  inst6502_rra_absy:
 3907 D1:D583 ED 33 07 -      ADDCYC(7)
 3908 D1:D586 CD F6 B7 D1     PUSH_ABSYSPLIT_NODEP
 3909 D1:D58A CD 79 AE D1         READ_ACCESS
 3910 D1:D58E DD 46 04 -          ld  b,(ix+REGSR)
 3911 D1:D591 CB 18 -  -          rr b
 3912 D1:D593 1F -  -  -          rra
 3913 D1:D594 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3914 D1:D598 30 04 -  -          jr nc,$+6
 3915 D1:D59A DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3916 D1:D59E 47 -  -  -          ld  b,a
 3917 D1:D59F C5 -  -  -          push bc
 3918 D1:D5A0 CD 1B AF D1             WRITE_ACCESS
 3919 D1:D5A4 C1 -  -  -          pop bc
 3920 D1:D5A5 48 -  -  -          ld c,b
 3921 D1:D5A6 E1 -  -  -      pop hl
 3922 D1:D5A7 C3 30 B8 D1     jp  subroutine6502_adc_combined_end
 3923 D1:D5AB -  -  -  -  
 3924 D1:D5AB -  -  -  -  ;(indirect,X)	RRA (oper,X)	63	2	8  	
 3925 D1:D5AB -  -  -  -  isnt6502_rra_indx:
 3926 D1:D5AB ED 33 08 -      ADDCYC(8)
 3927 D1:D5AE E5 -  -  -      push hl
 3928 D1:D5AF 7E -  -  -          ld  a,(hl)
 3929 D1:D5B0 21 00 38 D0         ld  hl,ZEROPAGE
 3930 D1:D5B4 85 -  -  -          add a,L
 3931 D1:D5B5 DD 86 01 -          add a,(ix+REGX)
 3932 D1:D5B8 6F -  -  -          ld  L,a
 3933 D1:D5B9 7E -  -  -          ld  a,(hl)
 3934 D1:D5BA 2C -  -  -          inc L
 3935 D1:D5BB 56 -  -  -          ld  d,(hl)
 3936 D1:D5BC 42 -  -  -          ld  b,d
 3937 D1:D5BD 0E 0C -  -          ld  c,BASETABLE_STRIDE
 3938 D1:D5BF ED 4C -  -          mlt bc
 3939 D1:D5C1 21 00 40 D0         ld  hl,PAGETABLE
 3940 D1:D5C5 09 -  -  -          add hl,bc
 3941 D1:D5C6 ED 27 -  -          ld  hl,(hl)
 3942 D1:D5C8 06 00 -  -          ld  b,0
 3943 D1:D5CA 4F -  -  -          ld  c,a
 3944 D1:D5CB 09 -  -  -          add hl,bc
 3945 D1:D5CC CD 79 AE D1         READ_ACCESS
 3946 D1:D5D0 DD 46 04 -          ld  b,(ix+REGSR)
 3947 D1:D5D3 CB 18 -  -          rr b
 3948 D1:D5D5 1F -  -  -          rra
 3949 D1:D5D6 DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3950 D1:D5DA 30 04 -  -          jr nc,$+6
 3951 D1:D5DC DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3952 D1:D5E0 47 -  -  -          ld  b,a
 3953 D1:D5E1 C5 -  -  -          push bc
 3954 D1:D5E2 CD 1B AF D1             WRITE_ACCESS
 3955 D1:D5E6 C1 -  -  -          pop bc
 3956 D1:D5E7 48 -  -  -          ld c,b
 3957 D1:D5E8 E1 -  -  -      pop hl
 3958 D1:D5E9 C3 30 B8 D1     jp  subroutine6502_adc_combined_end
 3959 D1:D5ED -  -  -  -  
 3960 D1:D5ED -  -  -  -  ;(indirect),Y	RRA (oper),Y	73	2	8  
 3961 D1:D5ED -  -  -  -  inst6502_rra_indy:
 3962 D1:D5ED ED 33 08 -      ADDCYC(8)
 3963 D1:D5F0 E5 -  -  -      push hl
 3964 D1:D5F1 7E -  -  -          ld  a,(hl)
 3965 D1:D5F2 21 00 38 D0         ld  hl,ZEROPAGE
 3966 D1:D5F6 85 -  -  -          add a,L
 3967 D1:D5F7 6F -  -  -          ld  L,a
 3968 D1:D5F8 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 3969 D1:D5F9 2C -  -  -          inc L
 3970 D1:D5FA DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 3971 D1:D5FD 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 3972 D1:D5FE 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 3973 D1:D600 24 -  -  -          inc h
 3974 D1:D601 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 3975 D1:D602 2E 0C -  -          ld  L,BASETABLE_STRIDE
 3976 D1:D604 ED 6C -  -          mlt hl          ;23.
 3977 D1:D606 01 00 40 D0         ld  bc,PAGETABLE
 3978 D1:D60A 09 -  -  -          add hl,bc
 3979 D1:D60B ED 27 -  -          ld  hl,(hl)     ;address get.
 3980 D1:D60D 01 00 00 00         ld  bc,0
 3981 D1:D611 4F -  -  -          ld  c,a
 3982 D1:D612 09 -  -  -          add hl,bc       ;Full address get.
 3983 D1:D613 CD 79 AE D1         READ_ACCESS
 3984 D1:D617 DD 46 04 -          ld  b,(ix+REGSR)
 3985 D1:D61A CB 18 -  -          rr b
 3986 D1:D61C 1F -  -  -          rra
 3987 D1:D61D DD CB 04 86         res SF_CARRY,(ix+REGSR)
 3988 D1:D621 30 04 -  -          jr nc,$+6
 3989 D1:D623 DD CB 04 C6         set SF_CARRY,(ix+REGSR)
 3990 D1:D627 47 -  -  -          ld  b,a
 3991 D1:D628 C5 -  -  -          push bc
 3992 D1:D629 CD 1B AF D1             WRITE_ACCESS
 3993 D1:D62D C1 -  -  -          pop bc
 3994 D1:D62E 48 -  -  -          ld c,b
 3995 D1:D62F E1 -  -  -      pop hl
 3996 D1:D630 C3 30 B8 D1     jp  subroutine6502_adc_combined_end
 3997 D1:D634 -  -  -  -  
 3998 D1:D634 -  -  -  -  ;-----------------------------------------------------------------------------
 3999 D1:D634 -  -  -  -  ;SAX (AXS, AAX) - A AND X -> M
 4000 D1:D634 -  -  -  -  ;A and X are put on the bus at the same time (resulting effectively in an 
 4001 D1:D634 -  -  -  -  ;AND operation) and stored in M. Flags not affected.
 4002 D1:D634 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4003 D1:D634 -  -  -  -  ;zeropage	SAX oper	87	2	3  	
 4004 D1:D634 -  -  -  -  inst6502_sax_zp:
 4005 D1:D634 ED 33 03 -      ADDCYC(3)
 4006 D1:D637 7E -  -  -      ld  a,(hl)
 4007 D1:D638 01 00 38 D0     ld  bc,ZEROPAGE
 4008 D1:D63C 81 -  -  -      add a,c
 4009 D1:D63D 4F -  -  -      ld  c,a
 4010 D1:D63E DD 7E 00 -      ld  a,(ix+REGA)
 4011 D1:D641 DD A6 01 -      and a,(ix+REGX)
 4012 D1:D644 02 -  -  -      ld  (bc),a
 4013 D1:D645 C3 F6 B6 D1     jp i6502NextLoad
 4014 D1:D649 -  -  -  -  
 4015 D1:D649 -  -  -  -  
 4016 D1:D649 -  -  -  -  ;zeropage,Y	SAX oper,Y	97	2	4  	
 4017 D1:D649 -  -  -  -  inst6502_sax_zpy:
 4018 D1:D649 ED 33 04 -      ADDCYC(4)
 4019 D1:D64C 7E -  -  -      ld  a,(hl)
 4020 D1:D64D 01 00 38 D0     ld  bc,ZEROPAGE
 4021 D1:D651 81 -  -  -      add a,c
 4022 D1:D652 DD 86 02 -      add a,(ix+REGY)
 4023 D1:D655 4F -  -  -      ld  c,a
 4024 D1:D656 DD 7E 00 -      ld  a,(ix+REGA)
 4025 D1:D659 DD A6 01 -      and a,(ix+REGX)
 4026 D1:D65C 02 -  -  -      ld  (bc),a
 4027 D1:D65D C3 F6 B6 D1     jp i6502NextLoad
 4028 D1:D661 -  -  -  -  
 4029 D1:D661 -  -  -  -  
 4030 D1:D661 -  -  -  -  ;absolute	SAX oper	8F	3	4  	
 4031 D1:D661 -  -  -  -  inst6502_sax_abs:
 4032 D1:D661 ED 33 04 -      ADDCYC(4)
 4033 D1:D664 CD 9E B7 D1     call subroutine6502_abs_split_start
 4034 D1:D668 E5 -  -  -      push hl
 4035 D1:D669 50 -  -  -          ld  d,b
 4036 D1:D66A 79 -  -  -          ld  a,c
 4037 D1:D66B 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4038 D1:D66D ED 4C -  -          mlt bc
 4039 D1:D66F 21 00 40 D0         ld  hl,PAGETABLE
 4040 D1:D673 09 -  -  -          add hl,bc
 4041 D1:D674 ED 27 -  -          ld  hl,(hl)
 4042 D1:D676 06 00 -  -          ld  b,0
 4043 D1:D678 4F -  -  -          ld  c,a
 4044 D1:D679 09 -  -  -          add hl,bc   ;full address
 4045 D1:D67A DD 7E 00 -          ld  a,(ix+REGA)
 4046 D1:D67D DD A6 01 -          and a,(ix+REGX)
 4047 D1:D680 47 -  -  -          ld  b,a
 4048 D1:D681 CD 1B AF D1         WRITE_ACCESS
 4049 D1:D685 E1 -  -  -      pop hl
 4050 D1:D686 C3 F6 B6 D1     jp i6502NextLoad
 4051 D1:D68A -  -  -  -  
 4052 D1:D68A -  -  -  -  ;(indirect,X)	SAX (oper,X)	83	2	6  
 4053 D1:D68A -  -  -  -  inst6502_sax_indx:
 4054 D1:D68A ED 33 06 -      ADDCYC(6)
 4055 D1:D68D E5 -  -  -      push hl
 4056 D1:D68E 7E -  -  -          ld  a,(hl)
 4057 D1:D68F 21 00 38 D0         ld  hl,ZEROPAGE
 4058 D1:D693 85 -  -  -          add a,L
 4059 D1:D694 DD 86 01 -          add a,(ix+REGX)
 4060 D1:D697 6F -  -  -          ld  L,a
 4061 D1:D698 7E -  -  -          ld  a,(hl)
 4062 D1:D699 2C -  -  -          inc L
 4063 D1:D69A 56 -  -  -          ld  d,(hl)
 4064 D1:D69B 42 -  -  -          ld  b,d
 4065 D1:D69C 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4066 D1:D69E ED 4C -  -          mlt bc
 4067 D1:D6A0 21 00 40 D0         ld  hl,PAGETABLE
 4068 D1:D6A4 09 -  -  -          add hl,bc
 4069 D1:D6A5 ED 27 -  -          ld  hl,(hl)
 4070 D1:D6A7 06 00 -  -          ld  b,0
 4071 D1:D6A9 4F -  -  -          ld  c,a
 4072 D1:D6AA 09 -  -  -          add hl,bc
 4073 D1:D6AB DD 7E 00 -          ld  a,(ix+REGA)
 4074 D1:D6AE DD A6 01 -          and a,(ix+REGX)
 4075 D1:D6B1 47 -  -  -          ld  b,a
 4076 D1:D6B2 CD 1B AF D1         WRITE_ACCESS
 4077 D1:D6B6 E1 -  -  -      pop hl
 4078 D1:D6B7 C3 F6 B6 D1     jp i6502NextLoad
 4079 D1:D6BB -  -  -  -  
 4080 D1:D6BB -  -  -  -  ;-----------------------------------------------------------------------------
 4081 D1:D6BB -  -  -  -  ;SBX (AXS, SAX) - CMP and DEX at once, sets flags like CMP
 4082 D1:D6BB -  -  -  -  ;(A AND X) - oper -> X.  Flags affected: CZN
 4083 D1:D6BB -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4084 D1:D6BB -  -  -  -  ;immediate	SBX #oper	CB	2	2  
 4085 D1:D6BB -  -  -  -  inst6502_sbx_imm:
 4086 D1:D6BB DD 7E 00 -      ld  a,(ix+REGA)
 4087 D1:D6BE DD A6 01 -      and a,(ix+REGX)
 4088 D1:D6C1 96 -  -  -      sub a,(hl)
 4089 D1:D6C2 DD 77 01 -      ld  (ix+REGX),a
 4090 D1:D6C5 3F -  -  -      ccf
 4091 D1:D6C6 DD 46 04 CB 
              80 30 02 CB 
              C0 -  -  -      FLAGS_CZN
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"

              CB 07 CB 88 
              20 02 CB C8 
              CB B8 30 02 
              CB F8 DD 70 
              04 Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\core.z80"
 4092 D1:D6E0 C3 F6 B6 D1     jp  i6502NextLoad
 4093 D1:D6E4 -  -  -  -  
 4094 D1:D6E4 -  -  -  -  ;-----------------------------------------------------------------------------
 4095 D1:D6E4 -  -  -  -  ;SHA (AHX, AXA) - Stores A AND X AND (high-byte of addr. + 1) at addr.
 4096 D1:D6E4 -  -  -  -  ;unstable: sometimes 'AND (H+1)' is dropped, 
 4097 D1:D6E4 -  -  -  -  ;page boundary crossings may not work 
 4098 D1:D6E4 -  -  -  -  ;(with the high-byte of the value used as the high-byte of the address)
 4099 D1:D6E4 -  -  -  -  ;A AND X AND (H+1) -> M
 4100 D1:D6E4 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4101 D1:D6E4 -  -  -  -  ;
 4102 D1:D6E4 -  -  -  -  ;NOTE: NOT GOING TO IMPLEMENT THESE. THEY'LL ADVANCE THE 6502 PC IN THE CORRECT
 4103 D1:D6E4 -  -  -  -  ;MANNER BUT NOTHING MORE. THE CPU WILL HALT WHEN ENCOUNTERING ONE OF THESE.
 4104 D1:D6E4 -  -  -  -  ;
 4105 D1:D6E4 -  -  -  -  ;absolut,Y	SHA oper,Y	9F	3	5  	†
 4106 D1:D6E4 -  -  -  -  inst6502_sha_absy:
 4107 D1:D6E4 ED 33 05 -      ADDCYC(5)
 4108 D1:D6E7 CD BA B7 D1     PUSH_ABSYSPLIT
 4109 D1:D6EB 18 FE -  -          jr $
 4110 D1:D6ED E1 -  -  -      pop hl
 4111 D1:D6EE C3 F6 B6 D1     jp i6502NextLoad
 4112 D1:D6F2 -  -  -  -  
 4113 D1:D6F2 -  -  -  -  ;(indirect),Y	SHA (oper),Y	93	2	6  	†
 4114 D1:D6F2 -  -  -  -  inst6502_sha_indy:
 4115 D1:D6F2 ED 33 06 -      ADDCYC(6)
 4116 D1:D6F5 E5 -  -  -      push hl
 4117 D1:D6F6 7E -  -  -          ld  a,(hl)
 4118 D1:D6F7 21 00 38 D0         ld  hl,ZEROPAGE
 4119 D1:D6FB 85 -  -  -          add a,L
 4120 D1:D6FC 6F -  -  -          ld  L,a
 4121 D1:D6FD 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4122 D1:D6FE 2C -  -  -          inc L
 4123 D1:D6FF DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4124 D1:D702 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4125 D1:D703 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4126 D1:D705 24 -  -  -          inc h
 4127 D1:D706 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4128 D1:D707 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4129 D1:D709 ED 6C -  -          mlt hl          ;23.
 4130 D1:D70B 01 00 40 D0         ld  bc,PAGETABLE
 4131 D1:D70F 09 -  -  -          add hl,bc
 4132 D1:D710 ED 27 -  -          ld  hl,(hl)     ;address get.
 4133 D1:D712 01 00 00 00         ld  bc,0
 4134 D1:D716 4F -  -  -          ld  c,a
 4135 D1:D717 09 -  -  -          add hl,bc       ;Full address get.
 4136 D1:D718 CD 79 AE D1         READ_ACCESS
 4137 D1:D71C 18 FE -  -          jr $
 4138 D1:D71E E1 -  -  -      pop hl
 4139 D1:D71F C3 F6 B6 D1     jp i6502NextLoad
 4140 D1:D723 -  -  -  -  
 4141 D1:D723 -  -  -  -  ;-----------------------------------------------------------------------------
 4142 D1:D723 -  -  -  -  ;SHX (A11, SXA, XAS)
 4143 D1:D723 -  -  -  -  ;SHY (A11, SYA, SAY)
 4144 D1:D723 -  -  -  -  ;TAS (XAS, SHS)
 4145 D1:D723 -  -  -  -  ;Not going to implement these, but they'll still get the program
 4146 D1:D723 -  -  -  -  ;counter to make the correct noises. Right before locking up the core.
 4147 D1:D723 -  -  -  -  ;All of these instructions are marked as "unstable" in that they'll sometimes
 4148 D1:D723 -  -  -  -  ;drop the high byte, and page crossings sometimes won't work.
 4149 D1:D723 -  -  -  -  
 4150 D1:D723 -  -  -  -  ;absolut,Y	SHX oper,Y	9E	3	5  	†
 4151 D1:D723 -  -  -  -  inst6502_shx_absy:
 4152 D1:D723 ED 33 05 -      ADDCYC(5)
 4153 D1:D726 CD F6 B7 D1     PUSH_ABSYSPLIT_NODEP
 4154 D1:D72A 18 FE -  -          jr $
 4155 D1:D72C E1 -  -  -      pop hl
 4156 D1:D72D C3 F6 B6 D1     jp i6502NextLoad
 4157 D1:D731 -  -  -  -  
 4158 D1:D731 -  -  -  -  ;absolut,X	SHY oper,X	9C	3	5  	†
 4159 D1:D731 -  -  -  -  inst6502_shy_absx:
 4160 D1:D731 ED 33 05 -      ADDCYC(5)
 4161 D1:D734 CD FB B7 D1     PUSH_ABSXSPLIT_NODEP
 4162 D1:D738 18 FE -  -          jr $
 4163 D1:D73A E1 -  -  -      pop hl
 4164 D1:D73B C3 F6 B6 D1     jp i6502NextLoad
 4165 D1:D73F -  -  -  -  
 4166 D1:D73F -  -  -  -  ;absolut,Y	TAS oper,Y	9B	3	5  	†
 4167 D1:D73F -  -  -  -  inst6502_tas_absy:
 4168 D1:D73F ED 33 05 -      ADDCYC(5)
 4169 D1:D742 CD F6 B7 D1     PUSH_ABSYSPLIT_NODEP
 4170 D1:D746 18 FE -  -          jr $
 4171 D1:D748 E1 -  -  -      pop hl
 4172 D1:D749 C3 F6 B6 D1     jp i6502NextLoad
 4173 D1:D74D -  -  -  -  
 4174 D1:D74D -  -  -  -  ;-----------------------------------------------------------------------------
 4175 D1:D74D -  -  -  -  ;SLO (ASO) - ASL oper + ORA oper
 4176 D1:D74D -  -  -  -  ;M = C <- [76543210] <- 0, A OR M -> A. Affects: CZN
 4177 D1:D74D -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4178 D1:D74D -  -  -  -  
 4179 D1:D74D -  -  -  -  ;zeropage	SLO oper	07	2	5  	
 4180 D1:D74D -  -  -  -  inst6502_slo_zp:
 4181 D1:D74D ED 33 05 -      ADDCYC(5)
 4182 D1:D750 7E -  -  -      ld  a,(hl)
 4183 D1:D751 01 00 38 D0     ld  bc,ZEROPAGE
 4184 D1:D755 81 -  -  -      add a,c
 4185 D1:D756 4F -  -  -      ld  c,a
 4186 D1:D757 0A -  -  -      ld  a,(bc)
 4187 D1:D758 CB 27 -  -      sla a
 4188 D1:D75A 02 -  -  -      ld  (bc),a
 4189 D1:D75B -  -  -  -      ;Flag breakdown to optimize for split operation
 4190 D1:D75B DD 46 04 -      ld  b,(ix+REGSR)
 4191 D1:D75E CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4192 D1:D764 DD B6 00 -      or  a,(ix+REGA)
 4193 D1:D767 DD 77 00 -      ld  (ix+REGA),a
 4194 D1:D76A CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4195 D1:D770 87 -  -  -      add a,a
 4196 D1:D771 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4197 D1:D777 DD 70 04 -      ld  (ix+REGSR),b
 4198 D1:D77A C3 F6 B6 D1     jp i6502NextLoad
 4199 D1:D77E -  -  -  -  
 4200 D1:D77E -  -  -  -  ;zeropage,X	SLO oper,X	17	2	6  	
 4201 D1:D77E -  -  -  -  inst6502_slo_zpx:
 4202 D1:D77E ED 33 06 -      ADDCYC(6)
 4203 D1:D781 7E -  -  -      ld  a,(hl)
 4204 D1:D782 01 00 38 D0     ld  bc,ZEROPAGE
 4205 D1:D786 81 -  -  -      add a,c
 4206 D1:D787 DD 86 01 -      add a,(ix+REGX)
 4207 D1:D78A 4F -  -  -      ld  c,a
 4208 D1:D78B 0A -  -  -      ld  a,(bc)
 4209 D1:D78C CB 27 -  -      sla a
 4210 D1:D78E 02 -  -  -      ld  (bc),a
 4211 D1:D78F -  -  -  -      ;Flag breakdown to optimize for split operation
 4212 D1:D78F DD 46 04 -      ld  b,(ix+REGSR)
 4213 D1:D792 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4214 D1:D798 DD B6 00 -      or  a,(ix+REGA)
 4215 D1:D79B DD 77 00 -      ld  (ix+REGA),a
 4216 D1:D79E CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4217 D1:D7A4 87 -  -  -      add a,a
 4218 D1:D7A5 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4219 D1:D7AB DD 70 04 -      ld  (ix+REGSR),b
 4220 D1:D7AE C3 F6 B6 D1     jp i6502NextLoad
 4221 D1:D7B2 -  -  -  -  
 4222 D1:D7B2 -  -  -  -  ;absolute	SLO oper	0F	3	6  	
 4223 D1:D7B2 -  -  -  -  inst6502_slo_abs:
 4224 D1:D7B2 ED 33 06 -      ADDCYC(6)
 4225 D1:D7B5 CD 9E B7 D1     call subroutine6502_abs_split_start
 4226 D1:D7B9 E5 -  -  -      push hl
 4227 D1:D7BA 50 -  -  -          ld  d,b
 4228 D1:D7BB 79 -  -  -          ld  a,c
 4229 D1:D7BC 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4230 D1:D7BE ED 4C -  -          mlt bc
 4231 D1:D7C0 21 00 40 D0         ld  hl,PAGETABLE
 4232 D1:D7C4 09 -  -  -          add hl,bc
 4233 D1:D7C5 ED 27 -  -          ld  hl,(hl)
 4234 D1:D7C7 06 00 -  -          ld  b,0
 4235 D1:D7C9 4F -  -  -          ld  c,a
 4236 D1:D7CA 09 -  -  -          add hl,bc   ;full address
 4237 D1:D7CB CD 79 AE D1         READ_ACCESS
 4238 D1:D7CF CB 27 -  -          sla a
 4239 D1:D7D1 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4240 D1:D7D2 -  -  -  -          ;Split oper
 4241 D1:D7D2 DD 46 04 -          ld  b,(ix+REGSR)
 4242 D1:D7D5 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4243 D1:D7DB DD B6 00 -          or  a,(ix+REGA)
 4244 D1:D7DE DD 77 00 -          ld  (ix+REGA),a
 4245 D1:D7E1 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4246 D1:D7E7 87 -  -  -          add a,a
 4247 D1:D7E8 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4248 D1:D7EE DD 70 04 -          ld  (ix+REGSR),b
 4249 D1:D7F1 41 -  -  -          ld  b,c
 4250 D1:D7F2 CD 1B AF D1         WRITE_ACCESS
 4251 D1:D7F6 E1 -  -  -      pop hl
 4252 D1:D7F7 C3 F6 B6 D1     jp i6502NextLoad
 4253 D1:D7FB -  -  -  -  
 4254 D1:D7FB -  -  -  -  ;absolut,X	SLO oper,X	1F	3	7  	
 4255 D1:D7FB -  -  -  -  inst6502_slo_absx:
 4256 D1:D7FB ED 33 07 -      ADDCYC(7)
 4257 D1:D7FE CD FB B7 D1     PUSH_ABSXSPLIT_NODEP
 4258 D1:D802 CD 79 AE D1         READ_ACCESS
 4259 D1:D806 CB 27 -  -          sla a
 4260 D1:D808 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4261 D1:D809 -  -  -  -          ;Split oper
 4262 D1:D809 DD 46 04 -          ld  b,(ix+REGSR)
 4263 D1:D80C CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4264 D1:D812 DD B6 00 -          or  a,(ix+REGA)
 4265 D1:D815 DD 77 00 -          ld  (ix+REGA),a
 4266 D1:D818 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4267 D1:D81E 87 -  -  -          add a,a
 4268 D1:D81F CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4269 D1:D825 DD 70 04 -          ld  (ix+REGSR),b
 4270 D1:D828 41 -  -  -          ld  b,c
 4271 D1:D829 CD 1B AF D1         WRITE_ACCESS
 4272 D1:D82D E1 -  -  -      pop hl
 4273 D1:D82E C3 F6 B6 D1     jp i6502NextLoad
 4274 D1:D832 -  -  -  -  
 4275 D1:D832 -  -  -  -  ;absolut,Y	SLO oper,Y	1B	3	7  	
 4276 D1:D832 -  -  -  -  inst6502_slo_absy:
 4277 D1:D832 ED 33 07 -      ADDCYC(7)
 4278 D1:D835 CD F6 B7 D1     PUSH_ABSYSPLIT_NODEP
 4279 D1:D839 CD 79 AE D1         READ_ACCESS
 4280 D1:D83D CB 27 -  -          sla a
 4281 D1:D83F 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4282 D1:D840 -  -  -  -          ;Split oper
 4283 D1:D840 DD 46 04 -          ld  b,(ix+REGSR)
 4284 D1:D843 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4285 D1:D849 DD B6 00 -          or  a,(ix+REGA)
 4286 D1:D84C DD 77 00 -          ld  (ix+REGA),a
 4287 D1:D84F CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4288 D1:D855 87 -  -  -          add a,a
 4289 D1:D856 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4290 D1:D85C DD 70 04 -          ld  (ix+REGSR),b
 4291 D1:D85F 41 -  -  -          ld  b,c
 4292 D1:D860 CD 1B AF D1         WRITE_ACCESS
 4293 D1:D864 E1 -  -  -      pop hl
 4294 D1:D865 C3 F6 B6 D1     jp i6502NextLoad
 4295 D1:D869 -  -  -  -  
 4296 D1:D869 -  -  -  -  ;(indirect,X)	SLO (oper,X)	03	2	8  	
 4297 D1:D869 -  -  -  -  isnt6502_slo_indx:
 4298 D1:D869 ED 33 08 -      ADDCYC(8)
 4299 D1:D86C E5 -  -  -      push hl
 4300 D1:D86D 7E -  -  -          ld  a,(hl)
 4301 D1:D86E 21 00 38 D0         ld  hl,ZEROPAGE
 4302 D1:D872 85 -  -  -          add a,L
 4303 D1:D873 DD 86 01 -          add a,(ix+REGX)
 4304 D1:D876 6F -  -  -          ld  L,a
 4305 D1:D877 7E -  -  -          ld  a,(hl)
 4306 D1:D878 2C -  -  -          inc L
 4307 D1:D879 56 -  -  -          ld  d,(hl)
 4308 D1:D87A 42 -  -  -          ld  b,d
 4309 D1:D87B 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4310 D1:D87D ED 4C -  -          mlt bc
 4311 D1:D87F 21 00 40 D0         ld  hl,PAGETABLE
 4312 D1:D883 09 -  -  -          add hl,bc
 4313 D1:D884 ED 27 -  -          ld  hl,(hl)
 4314 D1:D886 06 00 -  -          ld  b,0
 4315 D1:D888 4F -  -  -          ld  c,a
 4316 D1:D889 09 -  -  -          add hl,bc
 4317 D1:D88A CD 79 AE D1         READ_ACCESS
 4318 D1:D88E CB 27 -  -          sla a
 4319 D1:D890 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4320 D1:D891 -  -  -  -          ;Split oper
 4321 D1:D891 DD 46 04 -          ld  b,(ix+REGSR)
 4322 D1:D894 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4323 D1:D89A DD B6 00 -          or  a,(ix+REGA)
 4324 D1:D89D DD 77 00 -          ld  (ix+REGA),a
 4325 D1:D8A0 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4326 D1:D8A6 87 -  -  -          add a,a
 4327 D1:D8A7 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4328 D1:D8AD DD 70 04 -          ld  (ix+REGSR),b
 4329 D1:D8B0 41 -  -  -          ld  b,c
 4330 D1:D8B1 CD 1B AF D1         WRITE_ACCESS
 4331 D1:D8B5 E1 -  -  -      pop hl
 4332 D1:D8B6 C3 F6 B6 D1     jp  i6502NextLoad
 4333 D1:D8BA -  -  -  -  
 4334 D1:D8BA -  -  -  -  ;(indirect),Y	SLO (oper),Y	13	2	8  
 4335 D1:D8BA -  -  -  -  inst6502_slo_indy:
 4336 D1:D8BA ED 33 08 -      ADDCYC(8)
 4337 D1:D8BD E5 -  -  -      push hl
 4338 D1:D8BE 7E -  -  -          ld  a,(hl)
 4339 D1:D8BF 21 00 38 D0         ld  hl,ZEROPAGE
 4340 D1:D8C3 85 -  -  -          add a,L
 4341 D1:D8C4 6F -  -  -          ld  L,a
 4342 D1:D8C5 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4343 D1:D8C6 2C -  -  -          inc L
 4344 D1:D8C7 DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4345 D1:D8CA 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4346 D1:D8CB 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4347 D1:D8CD 24 -  -  -          inc h
 4348 D1:D8CE 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4349 D1:D8CF 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4350 D1:D8D1 ED 6C -  -          mlt hl          ;23.
 4351 D1:D8D3 01 00 40 D0         ld  bc,PAGETABLE
 4352 D1:D8D7 09 -  -  -          add hl,bc
 4353 D1:D8D8 ED 27 -  -          ld  hl,(hl)     ;address get.
 4354 D1:D8DA 01 00 00 00         ld  bc,0
 4355 D1:D8DE 4F -  -  -          ld  c,a
 4356 D1:D8DF 09 -  -  -          add hl,bc       ;Full address get.
 4357 D1:D8E0 CD 79 AE D1         READ_ACCESS
 4358 D1:D8E4 CB 27 -  -          sla a
 4359 D1:D8E6 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4360 D1:D8E7 -  -  -  -          ;Split oper
 4361 D1:D8E7 DD 46 04 -          ld  b,(ix+REGSR)
 4362 D1:D8EA CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4363 D1:D8F0 DD B6 00 -          or  a,(ix+REGA)
 4364 D1:D8F3 DD 77 00 -          ld  (ix+REGA),a
 4365 D1:D8F6 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4366 D1:D8FC 87 -  -  -          add a,a
 4367 D1:D8FD CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4368 D1:D903 DD 70 04 -          ld  (ix+REGSR),b
 4369 D1:D906 41 -  -  -          ld  b,c
 4370 D1:D907 CD 1B AF D1         WRITE_ACCESS
 4371 D1:D90B E1 -  -  -      pop hl
 4372 D1:D90C C3 F6 B6 D1     jp  i6502NextLoad
 4373 D1:D910 -  -  -  -  
 4374 D1:D910 -  -  -  -  ;-----------------------------------------------------------------------------
 4375 D1:D910 -  -  -  -  ;SRE (LSE) - LSR oper + EOR oper
 4376 D1:D910 -  -  -  -  ;M = 0 -> [76543210] -> C, A EOR M -> A. Affects: CZN
 4377 D1:D910 -  -  -  -  ;addressing	assembler	opc	bytes	cycles	
 4378 D1:D910 -  -  -  -  
 4379 D1:D910 -  -  -  -  ;zeropage	SRE oper	47	2	5  	
 4380 D1:D910 -  -  -  -  inst6502_sre_zp:
 4381 D1:D910 ED 33 05 -      ADDCYC(5)
 4382 D1:D913 7E -  -  -      ld  a,(hl)
 4383 D1:D914 01 00 38 D0     ld  bc,ZEROPAGE
 4384 D1:D918 81 -  -  -      add a,c
 4385 D1:D919 4F -  -  -      ld  c,a
 4386 D1:D91A 0A -  -  -      ld  a,(bc)
 4387 D1:D91B CB 3F -  -      srl a
 4388 D1:D91D 02 -  -  -      ld  (bc),a
 4389 D1:D91E -  -  -  -      ;Flag breakdown to optimize for split operation
 4390 D1:D91E DD 46 04 -      ld  b,(ix+REGSR)
 4391 D1:D921 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4392 D1:D927 DD AE 00 -      xor a,(ix+REGA)
 4393 D1:D92A DD 77 00 -      ld  (ix+REGA),a
 4394 D1:D92D CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4395 D1:D933 87 -  -  -      add a,a
 4396 D1:D934 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4397 D1:D93A DD 70 04 -      ld  (ix+REGSR),b
 4398 D1:D93D C3 F6 B6 D1     jp i6502NextLoad
 4399 D1:D941 -  -  -  -  
 4400 D1:D941 -  -  -  -  ;zeropage,X	SRE oper,X	57	2	6  	
 4401 D1:D941 -  -  -  -  inst6502_sre_zpx:
 4402 D1:D941 ED 33 06 -      ADDCYC(6)
 4403 D1:D944 7E -  -  -      ld  a,(hl)
 4404 D1:D945 01 00 38 D0     ld  bc,ZEROPAGE
 4405 D1:D949 81 -  -  -      add a,c
 4406 D1:D94A DD 86 01 -      add a,(ix+REGX)
 4407 D1:D94D 4F -  -  -      ld  c,a
 4408 D1:D94E 0A -  -  -      ld  a,(bc)
 4409 D1:D94F CB 3F -  -      srl a
 4410 D1:D951 02 -  -  -      ld  (bc),a
 4411 D1:D952 -  -  -  -      ;Flag breakdown to optimize for split operation
 4412 D1:D952 DD 46 04 -      ld  b,(ix+REGSR)
 4413 D1:D955 CB 80 30 02 
              CB C0 -  -      OPRFLG_C
 4414 D1:D95B DD AE 00 -      xor a,(ix+REGA)
 4415 D1:D95E DD 77 00 -      ld  (ix+REGA),a
 4416 D1:D961 CB 88 20 02 
              CB C8 -  -      OPRFLG_Z
 4417 D1:D967 87 -  -  -      add a,a
 4418 D1:D968 CB B8 30 02 
              CB F8 -  -      OPRFLG_N
 4419 D1:D96E DD 70 04 -      ld  (ix+REGSR),b
 4420 D1:D971 C3 F6 B6 D1     jp i6502NextLoad
 4421 D1:D975 -  -  -  -  
 4422 D1:D975 -  -  -  -  ;absolute	SRE oper	4F	3	6  	
 4423 D1:D975 -  -  -  -  inst6502_sre_abs:
 4424 D1:D975 ED 33 06 -      ADDCYC(6)
 4425 D1:D978 CD 9E B7 D1     call subroutine6502_abs_split_start
 4426 D1:D97C E5 -  -  -      push hl
 4427 D1:D97D 50 -  -  -          ld  d,b
 4428 D1:D97E 79 -  -  -          ld  a,c
 4429 D1:D97F 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4430 D1:D981 ED 4C -  -          mlt bc
 4431 D1:D983 21 00 40 D0         ld  hl,PAGETABLE
 4432 D1:D987 09 -  -  -          add hl,bc
 4433 D1:D988 ED 27 -  -          ld  hl,(hl)
 4434 D1:D98A 06 00 -  -          ld  b,0
 4435 D1:D98C 4F -  -  -          ld  c,a
 4436 D1:D98D 09 -  -  -          add hl,bc   ;full address
 4437 D1:D98E CD 79 AE D1         READ_ACCESS
 4438 D1:D992 CB 3F -  -          srl a
 4439 D1:D994 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4440 D1:D995 -  -  -  -          ;Split oper
 4441 D1:D995 DD 46 04 -          ld  b,(ix+REGSR)
 4442 D1:D998 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4443 D1:D99E DD AE 00 -          xor a,(ix+REGA)
 4444 D1:D9A1 DD 77 00 -          ld  (ix+REGA),a
 4445 D1:D9A4 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4446 D1:D9AA 87 -  -  -          add a,a
 4447 D1:D9AB CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4448 D1:D9B1 DD 70 04 -          ld  (ix+REGSR),b
 4449 D1:D9B4 41 -  -  -          ld  b,c
 4450 D1:D9B5 CD 1B AF D1         WRITE_ACCESS
 4451 D1:D9B9 E1 -  -  -      pop hl
 4452 D1:D9BA C3 F6 B6 D1     jp i6502NextLoad
 4453 D1:D9BE -  -  -  -  
 4454 D1:D9BE -  -  -  -  ;absolut,X	SRE oper,X	5F	3	7  	
 4455 D1:D9BE -  -  -  -  inst6502_sre_absx:
 4456 D1:D9BE ED 33 07 -      ADDCYC(7)
 4457 D1:D9C1 CD FB B7 D1     PUSH_ABSXSPLIT_NODEP
 4458 D1:D9C5 CD 79 AE D1         READ_ACCESS
 4459 D1:D9C9 CB 3F -  -          srl a
 4460 D1:D9CB 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4461 D1:D9CC -  -  -  -          ;Split oper
 4462 D1:D9CC DD 46 04 -          ld  b,(ix+REGSR)
 4463 D1:D9CF CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4464 D1:D9D5 DD AE 00 -          xor a,(ix+REGA)
 4465 D1:D9D8 DD 77 00 -          ld  (ix+REGA),a
 4466 D1:D9DB CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4467 D1:D9E1 87 -  -  -          add a,a
 4468 D1:D9E2 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4469 D1:D9E8 DD 70 04 -          ld  (ix+REGSR),b
 4470 D1:D9EB 41 -  -  -          ld  b,c
 4471 D1:D9EC CD 1B AF D1         WRITE_ACCESS
 4472 D1:D9F0 E1 -  -  -      pop hl
 4473 D1:D9F1 C3 F6 B6 D1     jp i6502NextLoad
 4474 D1:D9F5 -  -  -  -  
 4475 D1:D9F5 -  -  -  -  ;absolut,Y	SRE oper,Y	5B	3	7  	
 4476 D1:D9F5 -  -  -  -  inst6502_sre_absy:
 4477 D1:D9F5 ED 33 07 -      ADDCYC(7)
 4478 D1:D9F8 CD F6 B7 D1     PUSH_ABSYSPLIT_NODEP
 4479 D1:D9FC CD 79 AE D1         READ_ACCESS
 4480 D1:DA00 CB 3F -  -          srl a
 4481 D1:DA02 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4482 D1:DA03 -  -  -  -          ;Split oper
 4483 D1:DA03 DD 46 04 -          ld  b,(ix+REGSR)
 4484 D1:DA06 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4485 D1:DA0C DD AE 00 -          xor a,(ix+REGA)
 4486 D1:DA0F DD 77 00 -          ld  (ix+REGA),a
 4487 D1:DA12 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4488 D1:DA18 87 -  -  -          add a,a
 4489 D1:DA19 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4490 D1:DA1F DD 70 04 -          ld  (ix+REGSR),b
 4491 D1:DA22 41 -  -  -          ld  b,c
 4492 D1:DA23 CD 1B AF D1         WRITE_ACCESS
 4493 D1:DA27 E1 -  -  -      pop hl
 4494 D1:DA28 C3 F6 B6 D1     jp i6502NextLoad
 4495 D1:DA2C -  -  -  -  
 4496 D1:DA2C -  -  -  -  ;(indirect,X)	SRE (oper,X)	43	2	8  	
 4497 D1:DA2C -  -  -  -  isnt6502_sre_indx:
 4498 D1:DA2C ED 33 08 -      ADDCYC(8)
 4499 D1:DA2F E5 -  -  -      push hl
 4500 D1:DA30 7E -  -  -          ld  a,(hl)
 4501 D1:DA31 21 00 38 D0         ld  hl,ZEROPAGE
 4502 D1:DA35 85 -  -  -          add a,L
 4503 D1:DA36 DD 86 01 -          add a,(ix+REGX)
 4504 D1:DA39 6F -  -  -          ld  L,a
 4505 D1:DA3A 7E -  -  -          ld  a,(hl)
 4506 D1:DA3B 2C -  -  -          inc L
 4507 D1:DA3C 56 -  -  -          ld  d,(hl)
 4508 D1:DA3D 42 -  -  -          ld  b,d
 4509 D1:DA3E 0E 0C -  -          ld  c,BASETABLE_STRIDE
 4510 D1:DA40 ED 4C -  -          mlt bc
 4511 D1:DA42 21 00 40 D0         ld  hl,PAGETABLE
 4512 D1:DA46 09 -  -  -          add hl,bc
 4513 D1:DA47 ED 27 -  -          ld  hl,(hl)
 4514 D1:DA49 06 00 -  -          ld  b,0
 4515 D1:DA4B 4F -  -  -          ld  c,a
 4516 D1:DA4C 09 -  -  -          add hl,bc
 4517 D1:DA4D CD 79 AE D1         READ_ACCESS
 4518 D1:DA51 CB 3F -  -          srl a
 4519 D1:DA53 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4520 D1:DA54 -  -  -  -          ;Split oper
 4521 D1:DA54 DD 46 04 -          ld  b,(ix+REGSR)
 4522 D1:DA57 CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4523 D1:DA5D DD AE 00 -          xor a,(ix+REGA)
 4524 D1:DA60 DD 77 00 -          ld  (ix+REGA),a
 4525 D1:DA63 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4526 D1:DA69 87 -  -  -          add a,a
 4527 D1:DA6A CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4528 D1:DA70 DD 70 04 -          ld  (ix+REGSR),b
 4529 D1:DA73 41 -  -  -          ld  b,c
 4530 D1:DA74 CD 1B AF D1         WRITE_ACCESS
 4531 D1:DA78 E1 -  -  -      pop hl
 4532 D1:DA79 C3 F6 B6 D1     jp  i6502NextLoad
 4533 D1:DA7D -  -  -  -  
 4534 D1:DA7D -  -  -  -  ;(indirect),Y	SRE (oper),Y	53	2	8  
 4535 D1:DA7D -  -  -  -  inst6502_sre_indy:
 4536 D1:DA7D ED 33 08 -      ADDCYC(8)
 4537 D1:DA80 E5 -  -  -      push hl
 4538 D1:DA81 7E -  -  -          ld  a,(hl)
 4539 D1:DA82 21 00 38 D0         ld  hl,ZEROPAGE
 4540 D1:DA86 85 -  -  -          add a,L
 4541 D1:DA87 6F -  -  -          ld  L,a
 4542 D1:DA88 7E -  -  -          ld  a,(hl)      ;LSB. Keep in A for now.
 4543 D1:DA89 2C -  -  -          inc L
 4544 D1:DA8A DD 86 02 -          add a,(ix+REGY)    ;Adjust LSB for post-idx
 4545 D1:DA8D 66 -  -  -          ld  h,(hl)      ;Retrieve MSB.
 4546 D1:DA8E 30 01 -  -          jr  nc,+_       ;Skip MSB/CC adjust if addition did not carry.
 4547 D1:DA90 24 -  -  -          inc h
 4548 D1:DA91 54 -  -  -  _:      ld  d,h         ;save MSB of read address for access controls
 4549 D1:DA92 2E 0C -  -          ld  L,BASETABLE_STRIDE
 4550 D1:DA94 ED 6C -  -          mlt hl          ;23.
 4551 D1:DA96 01 00 40 D0         ld  bc,PAGETABLE
 4552 D1:DA9A 09 -  -  -          add hl,bc
 4553 D1:DA9B ED 27 -  -          ld  hl,(hl)     ;address get.
 4554 D1:DA9D 01 00 00 00         ld  bc,0
 4555 D1:DAA1 4F -  -  -          ld  c,a
 4556 D1:DAA2 09 -  -  -          add hl,bc       ;Full address get.
 4557 D1:DAA3 CD 79 AE D1         READ_ACCESS
 4558 D1:DAA7 CB 3F -  -          srl a
 4559 D1:DAA9 4F -  -  -          ld  c,a ;save the result of the rotation. This is written back to mem.
 4560 D1:DAAA -  -  -  -          ;Split oper
 4561 D1:DAAA DD 46 04 -          ld  b,(ix+REGSR)
 4562 D1:DAAD CB 80 30 02 
              CB C0 -  -          OPRFLG_C
 4563 D1:DAB3 DD AE 00 -          xor a,(ix+REGA)
 4564 D1:DAB6 DD 77 00 -          ld  (ix+REGA),a
 4565 D1:DAB9 CB 88 20 02 
              CB C8 -  -          OPRFLG_Z
 4566 D1:DABF 87 -  -  -          add a,a
 4567 D1:DAC0 CB B8 30 02 
              CB F8 -  -          OPRFLG_N
 4568 D1:DAC6 DD 70 04 -          ld  (ix+REGSR),b
 4569 D1:DAC9 41 -  -  -          ld  b,c
 4570 D1:DACA CD 1B AF D1         WRITE_ACCESS
 4571 D1:DACE E1 -  -  -      pop hl
 4572 D1:DACF C3 F6 B6 D1     jp  i6502NextLoad
 4573 D1:DAD3 -  -  -  -  
 4574 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4575 D1:DAD3 -  -  -  -  ;USBC (USBC)
 4576 D1:DAD3 -  -  -  -  ;immediate	USBC #oper	EB	2	2  
 4577 D1:DAD3 -  -  -  -  ;Map this to instruction $E9 (inst6502_sbc_imm)
 4578 D1:DAD3 -  -  -  -  
 4579 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4580 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4581 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4582 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4583 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4584 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4585 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4586 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4587 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4588 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4589 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4590 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4591 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4592 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4593 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4594 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4595 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4596 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4597 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4598 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4599 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4600 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4601 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4602 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4603 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4604 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4605 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4606 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4607 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4608 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4609 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4610 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4611 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4612 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4613 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4614 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4615 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4616 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4617 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4618 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4619 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4620 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4621 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4622 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4623 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4624 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4625 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4626 D1:DAD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4627 D1:DAD3 -  -  -  -  
 4628 D1:DAD3 -  -  -  -  inst6502_instruction_set:
 4629 D1:DAD3 35 CD D1 -  .dl	inst6502_brk					;00
 4630 D1:DAD6 DC C5 D1 -  .dl	inst6502_ora_indx				;01
 4631 D1:DAD9 DA DD D1 -  .dl	inst6502_jam_02 				;02
 4632 D1:DADC 69 D8 D1 -  .dl	isnt6502_slo_indx				;03
 4633 D1:DADF A8 CE D1 -  .dl	inst6502_nop_zp 				;04
 4634 D1:DAE2 F7 C4 D1 -  .dl	inst6502_ora_zp					;05
 4635 D1:DAE5 94 C6 D1 -  .dl	inst6502_asl_zp					;06
 4636 D1:DAE8 4D D7 D1 -  .dl	inst6502_slo_zp 				;07
 4637 D1:DAEB 1D BE D1 -  .dl	inst6502_php					;08
 4638 D1:DAEE D5 C4 D1 -  .dl	inst6502_ora_imm				;09
 4639 D1:DAF1 6B C6 D1 -  .dl	inst6502_asl					;0A
 4640 D1:DAF4 01 CF D1 -  .dl	instr6502_anc_imm				;0B
 4641 D1:DAF7 B6 CE D1 -  .dl	inst6502_nop_abs				;0C
 4642 D1:DAFA 4C C5 D1 -  .dl	inst6502_ora_abs				;0D
 4643 D1:DAFD EF C6 D1 -  .dl	inst6502_asl_abs				;0E
 4644 D1:DB00 B2 D7 D1 -  .dl	inst6502_slo_abs				;0F
 4645 D1:DB03 08 CD D1 -  .dl	inst6502_bpl					;10
 4646 D1:DB06 20 C6 D1 -  .dl	inst6502_ora_indy				;11
 4647 D1:DB09 D4 DD D1 -  .dl	inst6502_jam_12_halt			;12 JAM. Used to halt emulation for inspection
 4648 D1:DB0C BA D8 D1 -  .dl	inst6502_slo_indy				;13
 4649 D1:DB0F AF CE D1 -  .dl	inst6502_nop_zpx				;14
 4650 D1:DB12 20 C5 D1 -  .dl	inst6502_ora_zpx				;15
 4651 D1:DB15 C0 C6 D1 -  .dl	inst6502_asl_zpx				;16
 4652 D1:DB18 7E D7 D1 -  .dl	inst6502_slo_zpx				;17
 4653 D1:DB1B 75 CA D1 -  .dl	inst6502_clc					;18
 4654 D1:DB1E B2 C5 D1 -  .dl	inst6502_ora_absy				;19
 4655 D1:DB21 9A CE D1 -  .dl	inst6502_nop_implied    		;1A
 4656 D1:DB24 32 D8 D1 -  .dl	inst6502_slo_absy				;1B
 4657 D1:DB27 C7 CE D1 -  .dl	inst6502_nop_absx				;1C
 4658 D1:DB2A 88 C5 D1 -  .dl	inst6502_ora_absx				;1D
 4659 D1:DB2D 33 C7 D1 -  .dl	inst6502_asl_absx				;1E
 4660 D1:DB30 FB D7 D1 -  .dl	inst6502_slo_absx				;1F
 4661 D1:DB33 02 CE D1 -  .dl	inst6502_jsr					;20
 4662 D1:DB36 B0 C2 D1 -  .dl	inst6502_and_indx				;21
 4663 D1:DB39 DA DD D1 -  .dl	inst6502_jam_22 				;22
 4664 D1:DB3C 2F D4 D1 -  .dl	isnt6502_rla_indx				;23
 4665 D1:DB3F 4E CE D1 -  .dl	inst6502_bit_zp					;24
 4666 D1:DB42 CB C1 D1 -  .dl	inst6502_and_zp					;25
 4667 D1:DB45 8B C8 D1 -  .dl	inst6502_rol_zp					;26
 4668 D1:DB48 01 D3 D1 -  .dl	inst6502_rla_zp 				;27
 4669 D1:DB4B 5F BE D1 -  .dl	inst6502_plp					;28
 4670 D1:DB4E A9 C1 D1 -  .dl	inst6502_and_imm				;29
 4671 D1:DB51 5F C8 D1 -  .dl	inst6502_rol					;2A
 4672 D1:DB54 01 CF D1 -  .dl	instr6502_anc2_imm				;2B
 4673 D1:DB57 72 CE D1 -  .dl	inst6502_bit_abs				;2C
 4674 D1:DB5A 20 C2 D1 -  .dl	inst6502_and_abs				;2D
 4675 D1:DB5D EC C8 D1 -  .dl	inst6502_rol_abs				;2E
 4676 D1:DB60 6C D3 D1 -  .dl	inst6502_rla_abs				;2F
 4677 D1:DB63 EA CC D1 -  .dl	inst6502_bmi					;30
 4678 D1:DB66 F4 C2 D1 -  .dl	inst6502_and_indy				;31
 4679 D1:DB69 DA DD D1 -  .dl	inst6502_jam_32 				;32
 4680 D1:DB6C 84 D4 D1 -  .dl	inst6502_rla_indy				;33
 4681 D1:DB6F AF CE D1 -  .dl	inst6502_nop_zpx				;34
 4682 D1:DB72 F4 C1 D1 -  .dl	inst6502_and_zpx				;35
 4683 D1:DB75 BA C8 D1 -  .dl	inst6502_rol_zpx				;36
 4684 D1:DB78 35 D3 D1 -  .dl	inst6502_rla_zpx				;37
 4685 D1:DB7B A1 CA D1 -  .dl	inst6502_sec					;38
 4686 D1:DB7E 86 C2 D1 -  .dl	inst6502_and_absy				;39
 4687 D1:DB81 9A CE D1 -  .dl	inst6502_nop_implied			;3A
 4688 D1:DB84 F4 D3 D1 -  .dl	inst6502_rla_absy   			;3B
 4689 D1:DB87 C7 CE D1 -  .dl	inst6502_nop_absx   			;3C
 4690 D1:DB8A 5C C2 D1 -  .dl	inst6502_and_absx				;3D
 4691 D1:DB8D 34 C9 D1 -  .dl	inst6502_rol_absx				;3E
 4692 D1:DB90 B9 D3 D1 -  .dl	inst6502_rla_absx   			;3F
 4693 D1:DB93 71 CD D1 -  .dl	inst6502_rti					;40
 4694 D1:DB96 46 C4 D1 -  .dl	inst6502_eor_indx				;41
 4695 D1:DB99 DA DD D1 -  .dl	inst6502_jam_42     			;42
 4696 D1:DB9C 2C DA D1 -  .dl	isnt6502_sre_indx   			;43
 4697 D1:DB9F A8 CE D1 -  .dl	inst6502_nop_zp     			;44
 4698 D1:DBA2 61 C3 D1 -  .dl	inst6502_eor_zp					;45
 4699 D1:DBA5 8E C7 D1 -  .dl	inst6502_lsr_zp					;46
 4700 D1:DBA8 10 D9 D1 -  .dl	inst6502_sre_zp     			;47
 4701 D1:DBAB 07 BE D1 -  .dl	inst6502_pha					;48
 4702 D1:DBAE 3F C3 D1 -  .dl	inst6502_eor_imm				;49
 4703 D1:DBB1 65 C7 D1 -  .dl	inst6502_lsr					;4A
 4704 D1:DBB4 D7 CE D1 -  .dl	inst6502_alr_imm    			;4B
 4705 D1:DBB7 96 CD D1 -  .dl	inst6052_jmp_abs				;4C
 4706 D1:DBBA B6 C3 D1 -  .dl	inst6502_eor_abs				;4D
 4707 D1:DBBD E9 C7 D1 -  .dl	inst6502_lsr_abs				;4E
 4708 D1:DBC0 75 D9 D1 -  .dl	inst6502_sre_abs    			;4F
 4709 D1:DBC3 17 CD D1 -  .dl	inst6502_bvc					;50
 4710 D1:DBC6 8A C4 D1 -  .dl	inst6502_eor_indy				;51
 4711 D1:DBC9 DA DD D1 -  .dl	inst6502_jam_52     			;52
 4712 D1:DBCC 7D DA D1 -  .dl	inst6502_sre_indy   			;53
 4713 D1:DBCF AF CE D1 -  .dl	inst6502_nop_zpx    			;54
 4714 D1:DBD2 8A C3 D1 -  .dl	inst6502_eor_zpx				;55
 4715 D1:DBD5 BA C7 D1 -  .dl	inst6502_lsr_zpx				;56
 4716 D1:DBD8 41 D9 D1 -  .dl	inst6502_sre_zpx    			;57
 4717 D1:DBDB 8B CA D1 -  .dl	inst6502_cli					;58
 4718 D1:DBDE 1C C4 D1 -  .dl	inst6502_eor_absy				;59
 4719 D1:DBE1 9A CE D1 -  .dl	inst6502_nop_implied			;5A
 4720 D1:DBE4 F5 D9 D1 -  .dl	inst6502_sre_absy   			;5B
 4721 D1:DBE7 C7 CE D1 -  .dl	inst6502_nop_absx   			;5C
 4722 D1:DBEA F2 C3 D1 -  .dl	inst6502_eor_absx				;5D
 4723 D1:DBED 2D C8 D1 -  .dl	inst6502_lsr_absx				;5E
 4724 D1:DBF0 BE D9 D1 -  .dl	inst6502_sre_absx   			;5F
 4725 D1:DBF3 34 CE D1 -  .dl	inst6502_rts					;60
 4726 D1:DBF6 7F C0 D1 -  .dl	inst6502_adc_indx				;61
 4727 D1:DBF9 DA DD D1 -  .dl	inst6502_jam_62     			;62
 4728 D1:DBFC AB D5 D1 -  .dl	isnt6502_rra_indx   			;63
 4729 D1:DBFF A8 CE D1 -  .dl	inst6502_nop_zp     			;64
 4730 D1:DC02 17 C0 D1 -  .dl	inst6502_adc_zp					;65
 4731 D1:DC05 96 C9 D1 -  .dl	inst6502_ror_zp					;66
 4732 D1:DC08 DE D4 D1 -  .dl	inst6502_rra_zp     			;67
 4733 D1:DC0B 35 BE D1 -  .dl	inst6502_pla					;68
 4734 D1:DC0E 0F C0 D1 -  .dl	inst6502_adc_imm				;69
 4735 D1:DC11 6A C9 D1 -  .dl	inst6502_ror					;6A
 4736 D1:DC14 4E CF D1 -  .dl	instr6502_arr_imm   			;6B
 4737 D1:DC17 B8 CD D1 -  .dl	inst6502_jmp_indir				;6C
 4738 D1:DC1A 3A C0 D1 -  .dl	inst6502_adc_abs				;6D
 4739 D1:DC1D F7 C9 D1 -  .dl	inst6502_ror_abs				;6E
 4740 D1:DC20 21 D5 D1 -  .dl	inst6502_rra_abs    			;6F
 4741 D1:DC23 26 CD D1 -  .dl	inst6502_bvs					;70
 4742 D1:DC26 AA C0 D1 -  .dl	inst6502_adc_indy				;71
 4743 D1:DC29 DA DD D1 -  .dl	inst6502_jam_72     			;72
 4744 D1:DC2C ED D5 D1 -  .dl	inst6502_rra_indy   			;73
 4745 D1:DC2F AF CE D1 -  .dl	inst6502_nop_zpx    			;74
 4746 D1:DC32 27 C0 D1 -  .dl	inst6502_adc_zpx				;75
 4747 D1:DC35 C5 C9 D1 -  .dl	inst6502_ror_zpx				;76
 4748 D1:DC38 FE D4 D1 -  .dl	inst6502_rra_zpx    			;77
 4749 D1:DC3B B7 CA D1 -  .dl	inst6502_sei					;78
 4750 D1:DC3E 6E C0 D1 -  .dl	inst6502_adc_absy				;79
 4751 D1:DC41 9A CE D1 -  .dl	inst6502_nop_implied			;7A
 4752 D1:DC44 83 D5 D1 -  .dl	inst6502_rra_absy   			;7B
 4753 D1:DC47 C7 CE D1 -  .dl	inst6502_nop_absx   			;7C
 4754 D1:DC4A 5D C0 D1 -  .dl	inst6502_adc_absx				;7D
 4755 D1:DC4D 3F CA D1 -  .dl	inst6502_ror_absx				;7E
 4756 D1:DC50 5B D5 D1 -  .dl	inst6502_rra_absx   			;7F
 4757 D1:DC53 A1 CE D1 -  .dl	inst6502_nop_imm    			;80
 4758 D1:DC56 5E BC D1 -  .dl	inst6502_sta_indx				;81
 4759 D1:DC59 A1 CE D1 -  .dl	inst6502_nop_imm    			;82
 4760 D1:DC5C 8A D6 D1 -  .dl	inst6502_sax_indx   			;83
 4761 D1:DC5F 09 BD D1 -  .dl	inst6502_sty_zp					;84
 4762 D1:DC62 EC BB D1 -  .dl	inst6502_sta_zp					;85
 4763 D1:DC65 BD BC D1 -  .dl	inst6502_stx_zp					;86
 4764 D1:DC68 34 D6 D1 -  .dl	inst6502_sax_zp     			;87
 4765 D1:DC6B 4D BF D1 -  .dl	inst6502_dey					;88
 4766 D1:DC6E A1 CE D1 -  .dl	inst6502_nop_imm    			;89
 4767 D1:DC71 B8 BD D1 -  .dl	inst6502_txa					;8A
 4768 D1:DC74 27 CF D1 -  .dl	instr6502_ane_imm   			;8B
 4769 D1:DC77 30 BD D1 -  .dl	inst6502_sty_abs				;8C
 4770 D1:DC7A 13 BC D1 -  .dl	inst6502_sta_abs				;8D
 4771 D1:DC7D E4 BC D1 -  .dl	inst6502_stx_abs				;8E
 4772 D1:DC80 61 D6 D1 -  .dl	inst6502_sax_abs    			;8F
 4773 D1:DC83 BD CC D1 -  .dl	inst6502_bcc					;90
 4774 D1:DC86 8B BC D1 -  .dl	inst6502_sta_indy				;91
 4775 D1:DC89 DA DD D1 -  .dl	inst6502_jam_92     			;92
 4776 D1:DC8C F2 D6 D1 -  .dl	inst6502_sha_indy   			;93
 4777 D1:DC8F 1B BD D1 -  .dl	inst6502_sty_zpx				;94
 4778 D1:DC92 FE BB D1 -  .dl	inst6502_sta_zpx				;95
 4779 D1:DC95 CF BC D1 -  .dl	inst6502_stx_zpy				;96
 4780 D1:DC98 49 D6 D1 -  .dl	inst6502_sax_zpy    			;97
 4781 D1:DC9B E6 BD D1 -  .dl	inst6502_tya					;98
 4782 D1:DC9E 4B BC D1 -  .dl	inst6502_sta_absy				;99
 4783 D1:DCA1 D9 BD D1 -  .dl	inst6502_txs					;9A
 4784 D1:DCA4 3F D7 D1 -  .dl	inst6502_tas_absy   			;9B
 4785 D1:DCA7 31 D7 D1 -  .dl	inst6502_shy_absx   			;9C
 4786 D1:DCAA 38 BC D1 -  .dl	inst6502_sta_absx				;9D
 4787 D1:DCAD 23 D7 D1 -  .dl	inst6502_shx_absy   			;9E
 4788 D1:DCB0 E4 D6 D1 -  .dl	inst6502_sha_absy   			;9F
 4789 D1:DCB3 1E BB D1 -  .dl	inst6502_ldy_imm				;A0
 4790 D1:DCB6 C7 B9 D1 -  .dl	inst6502_lda_indx				;A1
 4791 D1:DCB9 50 BA D1 -  .dl	inst6502_ldx_imm				;A2
 4792 D1:DCBC 4B D2 D1 -  .dl	inst6502_lax_indx   			;A3
 4793 D1:DCBF 3D BB D1 -  .dl	inst6502_ldy_zp					;A4
 4794 D1:DCC2 F1 B8 D1 -  .dl	inst6502_lda_zp					;A5
 4795 D1:DCC5 6F BA D1 -  .dl	inst6502_ldx_zp					;A6
 4796 D1:DCC8 90 D1 D1 -  .dl	inst6502_lax_zp     			;A7
 4797 D1:DCCB 76 BD D1 -  .dl	inst6502_tay					;A8
 4798 D1:DCCE D2 B8 D1 -  .dl	inst6502_lda_imm				;A9
 4799 D1:DCD1 55 BD D1 -  .dl	inst6502_tax					;AA
 4800 D1:DCD4 DA D2 D1 -  .dl	inst6502_lxa        			;AB
 4801 D1:DCD7 8C BB D1 -  .dl	inst6502_ldy_abs				;AC
 4802 D1:DCDA 40 B9 D1 -  .dl	inst6502_lda_abs				;AD
 4803 D1:DCDD BE BA D1 -  .dl	inst6502_ldx_abs				;AE
 4804 D1:DCE0 E5 D1 D1 -  .dl	inst6502_lax_abs    			;AF
 4805 D1:DCE3 CC CC D1 -  .dl	inst6502_bcs					;B0
 4806 D1:DCE6 08 BA D1 -  .dl	inst6502_lda_indy				;B1
 4807 D1:DCE9 DA DD D1 -  .dl	inst6502_jam_B2     			;B2
 4808 D1:DCEC 8F D2 D1 -  .dl	inst6502_lax_indy   			;B3
 4809 D1:DCEF 63 BB D1 -  .dl	inst6502_ldy_zpx				;B4
 4810 D1:DCF2 17 B9 D1 -  .dl	inst6502_lda_zpx				;B5
 4811 D1:DCF5 95 BA D1 -  .dl	inst6502_ldx_zpy				;B6
 4812 D1:DCF8 B9 D1 D1 -  .dl	inst6502_lax_zpy    			;B7
 4813 D1:DCFB 96 CA D1 -  .dl	inst6502_clv					;B8
 4814 D1:DCFE A0 B9 D1 -  .dl	inst6502_lda_absy				;B9
 4815 D1:DD01 97 BD D1 -  .dl	inst6502_tsx					;BA
 4816 D1:DD04 60 D1 D1 -  .dl	inst6502_las_absy   			;BB
 4817 D1:DD07 C5 BB D1 -  .dl	inst6502_ldy_absx				;BC
 4818 D1:DD0A 79 B9 D1 -  .dl	inst6502_lda_absx				;BD
 4819 D1:DD0D F7 BA D1 -  .dl	inst6502_ldx_absy				;BE
 4820 D1:DD10 21 D2 D1 -  .dl	inst6502_lax_absy   			;BF
 4821 D1:DD13 26 CC D1 -  .dl	inst6502_cpy_imm				;C0
 4822 D1:DD16 32 CB D1 -  .dl	inst6502_cmp_indx				;C1
 4823 D1:DD19 A1 CE D1 -  .dl	inst6502_nop_imm    			;C2
 4824 D1:DD1C 08 D0 D1 -  .dl	inst6502_dcp_indx   			;C3
 4825 D1:DD1F 4C CC D1 -  .dl	inst6502_cpy_zp					;C4
 4826 D1:DD22 CA CA D1 -  .dl	inst6502_cmp_zp					;C5
 4827 D1:DD25 7C BE D1 -  .dl	inst6502_dec_zp					;C6
 4828 D1:DD28 87 CF D1 -  .dl	inst6502_dcp_zp     			;C7
 4829 D1:DD2B 57 BF D1 -  .dl	inst6502_iny					;C8
 4830 D1:DD2E C2 CA D1 -  .dl	inst6502_cmp_imm				;C9
 4831 D1:DD31 2F BF D1 -  .dl	inst6502_dex					;CA
 4832 D1:DD34 BB D6 D1 -  .dl	inst6502_sbx_imm    			;CB
 4833 D1:DD37 7B CC D1 -  .dl	inst6502_cpy_abs				;CC
 4834 D1:DD3A ED CA D1 -  .dl	inst6502_cmp_abs				;CD
 4835 D1:DD3D C9 BE D1 -  .dl	inst6502_dec_abs				;CE
 4836 D1:DD40 AE CF D1 -  .dl	inst6502_dcp_abs    			;CF
 4837 D1:DD43 F9 CC D1 -  .dl	inst6502_bne					;D0
 4838 D1:DD46 5D CB D1 -  .dl	inst6502_cmp_indy				;D1
 4839 D1:DD49 DA DD D1 -  .dl	inst6502_jam_D2     			;D2
 4840 D1:DD4C 3A D0 D1 -  .dl	inst6502_dcp_indy   			;D3
 4841 D1:DD4F AF CE D1 -  .dl	inst6502_nop_zpx    			;D4
 4842 D1:DD52 DA CA D1 -  .dl	inst6502_cmp_zpx				;D5
 4843 D1:DD55 A1 BE D1 -  .dl	inst6502_dec_zpx				;D6
 4844 D1:DD58 99 CF D1 -  .dl	inst6520_dcp_zpx    			;D7
 4845 D1:DD5B 80 CA D1 -  .dl	inst6502_cld					;D8
 4846 D1:DD5E 21 CB D1 -  .dl	inst6502_cmp_absy				;D9
 4847 D1:DD61 9A CE D1 -  .dl	inst6502_nop_implied			;DA
 4848 D1:DD64 F0 CF D1 -  .dl	inst6502_dcp_absy   			;DB
 4849 D1:DD67 C7 CE D1 -  .dl	inst6502_nop_absx   			;DC
 4850 D1:DD6A 10 CB D1 -  .dl	inst6502_cmp_absx				;DD
 4851 D1:DD6D 05 BF D1 -  .dl	inst6502_dec_absx				;DE
 4852 D1:DD70 D8 CF D1 -  .dl	inst6502_dcp_absx   			;DF
 4853 D1:DD73 8F CB D1 -  .dl	inst6502_cpx_imm				;E0
 4854 D1:DD76 4C C1 D1 -  .dl	inst6502_sbc_indx				;E1
 4855 D1:DD79 A1 CE D1 -  .dl	inst6502_nop_imm    			;E2
 4856 D1:DD7C F5 D0 D1 -  .dl	inst6502_isc_indx   			;E3
 4857 D1:DD7F B5 CB D1 -  .dl	inst6502_cpx_zp					;E4
 4858 D1:DD82 E4 C0 D1 -  .dl	inst6502_sbc_zp					;E5
 4859 D1:DD85 5C BF D1 -  .dl	inst6502_inc_zp					;E6
 4860 D1:DD88 71 D0 D1 -  .dl	inst6502_isc_zp     			;E7
 4861 D1:DD8B 52 BF D1 -  .dl	inst6502_inx					;E8
 4862 D1:DD8E DC C0 D1 -  .dl	inst6502_sbc_imm				;E9
 4863 D1:DD91 93 CE D1 -  .dl	inst6502_nop					;EA
 4864 D1:DD94 DC C0 D1 -  .dl	inst6502_sbc_imm			    ;EB *DUPLICATE OF E9
 4865 D1:DD97 E4 CB D1 -  .dl	inst6502_cpx_abs				;EC
 4866 D1:DD9A 07 C1 D1 -  .dl	inst6502_sbc_abs				;ED
 4867 D1:DD9D A9 BF D1 -  .dl	inst6502_inc_abs				;EE
 4868 D1:DDA0 98 D0 D1 -  .dl	inst6502_isc_abs    			;EF
 4869 D1:DDA3 DB CC D1 -  .dl	inst6502_beq					;F0
 4870 D1:DDA6 77 C1 D1 -  .dl	inst6502_sbc_indy				;F1
 4871 D1:DDA9 DA DD D1 -  .dl	inst6502_jam_F2     			;F2
 4872 D1:DDAC 28 D1 D1 -  .dl	inst6502_isc_indy   			;F3
 4873 D1:DDAF AF CE D1 -  .dl	inst6502_nop_zpx    			;F4
 4874 D1:DDB2 F4 C0 D1 -  .dl	inst6502_sbc_zpx				;F5
 4875 D1:DDB5 81 BF D1 -  .dl	inst6502_inc_zpx				;F6
 4876 D1:DDB8 83 D0 D1 -  .dl	inst6520_isc_zpx    			;F7
 4877 D1:DDBB AC CA D1 -  .dl	inst6502_sed					;F8
 4878 D1:DDBE 3B C1 D1 -  .dl	inst6502_sbc_absy				;F9
 4879 D1:DDC1 9A CE D1 -  .dl	inst6502_nop_implied			;FA
 4880 D1:DDC4 DC D0 D1 -  .dl	inst6502_isc_absy   			;FB
 4881 D1:DDC7 C7 CE D1 -  .dl	inst6502_nop_absx   			;FC
 4882 D1:DDCA 2A C1 D1 -  .dl	inst6502_sbc_absx				;FD
 4883 D1:DDCD E5 BF D1 -  .dl	inst6502_inc_absx				;FE
 4884 D1:DDD0 C3 D0 D1 -  .dl	inst6502_isc_absx   			;FF
 4885 D1:DDD3 -  -  -  -  
 4886 D1:DDD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4887 D1:DDD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4888 D1:DDD3 -  -  -  -  ;-----------------------------------------------------------------------------
 4889 D1:DDD3 -  -  -  -  ;These instructions are located here because they perform a function outside
 4890 D1:DDD3 -  -  -  -  ;the context of emulating instructions. These are mapped to instructions that
 4891 D1:DDD3 -  -  -  -  ;would, on the real hardware, freeze the CPU and require a reset to continue.
 4892 D1:DDD3 -  -  -  -  ;
 4893 D1:DDD3 -  -  -  -  ;Here, they'll let us perform useful things. Like exiting the emulator.
 4894 D1:DDD3 -  -  -  -  ;Or jamming in one spot. Or other things in the future. Debugging things.
 4895 D1:DDD3 -  -  -  -  ;Future stuff like breakpoints and console output. That sorta thing.
 4896 D1:DDD3 -  -  -  -  ;
 4897 D1:DDD3 -  -  -  -  
 4898 D1:DDD3 -  -  -  -  inst6502_:
 4899 D1:DDD3 C9 -  -  -      ret
 4900 D1:DDD4 -  -  -  -  
 4901 D1:DDD4 -  -  -  -  inst6502_jam_12_halt:
 4902 D1:DDD4 18 FE -  -      jr $
 4903 D1:DDD6 C3 0F B7 D1     jp i6502FinishLoad
 4904 D1:DDDA -  -  -  -  
 4905 D1:DDDA -  -  -  -  inst6502_jam_02:
 4906 D1:DDDA -  -  -  -  inst6502_jam_22:
 4907 D1:DDDA -  -  -  -  inst6502_jam_32:
 4908 D1:DDDA -  -  -  -  inst6502_jam_42:
 4909 D1:DDDA -  -  -  -  inst6502_jam_52:
 4910 D1:DDDA -  -  -  -  inst6502_jam_62:
 4911 D1:DDDA -  -  -  -  inst6502_jam_72:
 4912 D1:DDDA -  -  -  -  inst6502_jam_92:
 4913 D1:DDDA -  -  -  -  inst6502_jam_B2:
 4914 D1:DDDA -  -  -  -  inst6502_jam_D2:
 4915 D1:DDDA -  -  -  -  inst6502_jam_F2:
 4916 D1:DDDA C9 -  -  -      ret
 4917 D1:DDDB -  -  -  -  
 4918 D1:DDDB -  -  -  -  
 4919 D1:DDDB -  -  -  -  
 4920 D1:DDDB -  -  -  -  
 4921 D1:DDDB -  -  -  -  
 4922 D1:DDDB -  -  -  -  
 4923 D1:DDDB -  -  -  -  
 4924 D1:DDDB -  -  -  -  
 4925 D1:DDDB -  -  -  -  
 4926 D1:DDDB -  -  -  -  
 4927 D1:DDDB -  -  -  -  
 4928 D1:DDDB -  -  -  -  
 4929 D1:DDDB -  -  -  -  
Listing for file "main.z80"
  961 D1:DDDB -  -  -  -  #include "debug.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    1 D1:DDDB -  -  -  -  ;This has all the tables needed to drive the debugger.
    2 D1:DDDB -  -  -  -  #include "debug_itab.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug_itab.z80"
    1 D1:DDDB -  -  -  -  inst6502_opcode_width_table:
    2 D1:DDDB 01 -  -  -  .db 1    ;0: 
    3 D1:DDDC 02 -  -  -  .db 2    ;1: zpg,X
    4 D1:DDDD 03 -  -  -  .db 3    ;2: ind
    5 D1:DDDE 03 -  -  -  .db 3    ;3: abs
    6 D1:DDDF 03 -  -  -  .db 3    ;4: abs,X
    7 D1:DDE0 02 -  -  -  .db 2    ;5: X,ind
    8 D1:DDE1 01 -  -  -  .db 1    ;6: A
    9 D1:DDE2 02 -  -  -  .db 2    ;7: zpg
   10 D1:DDE3 02 -  -  -  .db 2    ;8: rel
   11 D1:DDE4 02 -  -  -  .db 2    ;9: #
   12 D1:DDE5 01 -  -  -  .db 1    ;10: impl
   13 D1:DDE6 02 -  -  -  .db 2    ;11: ind,Y
   14 D1:DDE7 03 -  -  -  .db 3    ;12: abs,Y
   15 D1:DDE8 02 -  -  -  .db 2    ;13: zpg,Y
   16 D1:DDE9 -  -  -  -  
   17 D1:DDE9 -  -  -  -  
   18 D1:DDE9 -  -  -  -  ;Note: 1=1byteOper, 2=2byteOper, -=1byteRelOper. Other chrs are literal
   19 D1:DDE9 -  -  -  -  
   20 D1:DDE9 -  -  -  -  inst6502_disassembler:
   21 D1:DDE9 01 -  -  -  .db 1,""  ;
   22 D1:DDEA 04 31 2C 58 .db 4,"1,X"  ;
   23 D1:DDEE 04 28 32 29 .db 4,"(2)"  ;
   24 D1:DDF2 02 32 -  -  .db 2,"2"  ;
   25 D1:DDF4 04 32 2C 58 .db 4,"2,X"  ;
   26 D1:DDF8 06 28 31 2C 
              58 29 -  -  .db 6,"(1,X)"  ;
   27 D1:DDFE 02 41 -  -  .db 2,"A"  ;
   28 D1:DE00 02 31 -  -  .db 2,"1"  ;
   29 D1:DE02 02 2D -  -  .db 2,"-"  ;
   30 D1:DE04 03 23 31 -  .db 3,"#1"  ;
   31 D1:DE07 01 -  -  -  .db 1,""  ;
   32 D1:DE08 06 28 31 29 
              2C 59 -  -  .db 6,"(1),Y"  ;
   33 D1:DE0E 04 32 2C 59 .db 4,"2,Y"  ;
   34 D1:DE12 04 31 2C 59 .db 4,"1,Y"  ;
   35 D1:DE16 -  -  -  -  
   36 D1:DE16 -  -  -  -  inst6502_disassembly_table:
   37 D1:DE16 42 52 4B 0A .db "BRK", 10     ;0x00
   38 D1:DE1A 4F 52 41 05 .db "ORA", 5     ;0x01
   39 D1:DE1E 4A 41 4D 00 .db "JAM", 0     ;0x02
   40 D1:DE22 53 4C 4F 05 .db "SLO", 5     ;0x03
   41 D1:DE26 4E 4F 50 07 .db "NOP", 7     ;0x04
   42 D1:DE2A 4F 52 41 07 .db "ORA", 7     ;0x05
   43 D1:DE2E 41 53 4C 07 .db "ASL", 7     ;0x06
   44 D1:DE32 53 4C 4F 07 .db "SLO", 7     ;0x07
   45 D1:DE36 50 48 50 0A .db "PHP", 10     ;0x08
   46 D1:DE3A 4F 52 41 09 .db "ORA", 9     ;0x09
   47 D1:DE3E 41 53 4C 06 .db "ASL", 6     ;0x0A
   48 D1:DE42 41 4E 43 09 .db "ANC", 9     ;0x0B
   49 D1:DE46 4E 4F 50 03 .db "NOP", 3     ;0x0C
   50 D1:DE4A 4F 52 41 03 .db "ORA", 3     ;0x0D
   51 D1:DE4E 41 53 4C 03 .db "ASL", 3     ;0x0E
   52 D1:DE52 53 4C 4F 03 .db "SLO", 3     ;0x0F
   53 D1:DE56 42 50 4C 08 .db "BPL", 8     ;0x10
   54 D1:DE5A 4F 52 41 0B .db "ORA", 11     ;0x11
   55 D1:DE5E 4A 41 4D 00 .db "JAM", 0     ;0x12
   56 D1:DE62 53 4C 4F 0B .db "SLO", 11     ;0x13
   57 D1:DE66 4E 4F 50 01 .db "NOP", 1     ;0x14
   58 D1:DE6A 4F 52 41 01 .db "ORA", 1     ;0x15
   59 D1:DE6E 41 53 4C 01 .db "ASL", 1     ;0x16
   60 D1:DE72 53 4C 4F 01 .db "SLO", 1     ;0x17
   61 D1:DE76 43 4C 43 0A .db "CLC", 10     ;0x18
   62 D1:DE7A 4F 52 41 0C .db "ORA", 12     ;0x19
   63 D1:DE7E 4E 4F 50 0A .db "NOP", 10     ;0x1A
   64 D1:DE82 53 4C 4F 0C .db "SLO", 12     ;0x1B
   65 D1:DE86 4E 4F 50 04 .db "NOP", 4     ;0x1C
   66 D1:DE8A 4F 52 41 04 .db "ORA", 4     ;0x1D
   67 D1:DE8E 41 53 4C 04 .db "ASL", 4     ;0x1E
   68 D1:DE92 53 4C 4F 04 .db "SLO", 4     ;0x1F
   69 D1:DE96 4A 53 52 03 .db "JSR", 3     ;0x20
   70 D1:DE9A 41 4E 44 05 .db "AND", 5     ;0x21
   71 D1:DE9E 4A 41 4D 00 .db "JAM", 0     ;0x22
   72 D1:DEA2 52 4C 41 05 .db "RLA", 5     ;0x23
   73 D1:DEA6 42 49 54 07 .db "BIT", 7     ;0x24
   74 D1:DEAA 41 4E 44 07 .db "AND", 7     ;0x25
   75 D1:DEAE 52 4F 4C 07 .db "ROL", 7     ;0x26
   76 D1:DEB2 52 4C 41 07 .db "RLA", 7     ;0x27
   77 D1:DEB6 50 4C 50 0A .db "PLP", 10     ;0x28
   78 D1:DEBA 41 4E 44 09 .db "AND", 9     ;0x29
   79 D1:DEBE 52 4F 4C 06 .db "ROL", 6     ;0x2A
   80 D1:DEC2 41 4E 43 09 .db "ANC", 9     ;0x2B
   81 D1:DEC6 42 49 54 03 .db "BIT", 3     ;0x2C
   82 D1:DECA 41 4E 44 03 .db "AND", 3     ;0x2D
   83 D1:DECE 52 4F 4C 03 .db "ROL", 3     ;0x2E
   84 D1:DED2 52 4C 41 03 .db "RLA", 3     ;0x2F
   85 D1:DED6 42 4D 49 08 .db "BMI", 8     ;0x30
   86 D1:DEDA 41 4E 44 0B .db "AND", 11     ;0x31
   87 D1:DEDE 4A 41 4D 00 .db "JAM", 0     ;0x32
   88 D1:DEE2 52 4C 41 0B .db "RLA", 11     ;0x33
   89 D1:DEE6 4E 4F 50 01 .db "NOP", 1     ;0x34
   90 D1:DEEA 41 4E 44 01 .db "AND", 1     ;0x35
   91 D1:DEEE 52 4F 4C 01 .db "ROL", 1     ;0x36
   92 D1:DEF2 52 4C 41 01 .db "RLA", 1     ;0x37
   93 D1:DEF6 53 45 43 0A .db "SEC", 10     ;0x38
   94 D1:DEFA 41 4E 44 0C .db "AND", 12     ;0x39
   95 D1:DEFE 4E 4F 50 0A .db "NOP", 10     ;0x3A
   96 D1:DF02 52 4C 41 0C .db "RLA", 12     ;0x3B
   97 D1:DF06 4E 4F 50 04 .db "NOP", 4     ;0x3C
   98 D1:DF0A 41 4E 44 04 .db "AND", 4     ;0x3D
   99 D1:DF0E 52 4F 4C 04 .db "ROL", 4     ;0x3E
  100 D1:DF12 52 4C 41 04 .db "RLA", 4     ;0x3F
  101 D1:DF16 52 54 49 0A .db "RTI", 10     ;0x40
  102 D1:DF1A 45 4F 52 05 .db "EOR", 5     ;0x41
  103 D1:DF1E 4A 41 4D 00 .db "JAM", 0     ;0x42
  104 D1:DF22 53 52 45 05 .db "SRE", 5     ;0x43
  105 D1:DF26 4E 4F 50 07 .db "NOP", 7     ;0x44
  106 D1:DF2A 45 4F 52 07 .db "EOR", 7     ;0x45
  107 D1:DF2E 4C 53 52 07 .db "LSR", 7     ;0x46
  108 D1:DF32 53 52 45 07 .db "SRE", 7     ;0x47
  109 D1:DF36 50 48 41 0A .db "PHA", 10     ;0x48
  110 D1:DF3A 45 4F 52 09 .db "EOR", 9     ;0x49
  111 D1:DF3E 4C 53 52 06 .db "LSR", 6     ;0x4A
  112 D1:DF42 41 4C 52 09 .db "ALR", 9     ;0x4B
  113 D1:DF46 4A 4D 50 03 .db "JMP", 3     ;0x4C
  114 D1:DF4A 45 4F 52 03 .db "EOR", 3     ;0x4D
  115 D1:DF4E 4C 53 52 03 .db "LSR", 3     ;0x4E
  116 D1:DF52 53 52 45 03 .db "SRE", 3     ;0x4F
  117 D1:DF56 42 56 43 08 .db "BVC", 8     ;0x50
  118 D1:DF5A 45 4F 52 0B .db "EOR", 11     ;0x51
  119 D1:DF5E 4A 41 4D 00 .db "JAM", 0     ;0x52
  120 D1:DF62 53 52 45 0B .db "SRE", 11     ;0x53
  121 D1:DF66 4E 4F 50 01 .db "NOP", 1     ;0x54
  122 D1:DF6A 45 4F 52 01 .db "EOR", 1     ;0x55
  123 D1:DF6E 4C 53 52 01 .db "LSR", 1     ;0x56
  124 D1:DF72 53 52 45 01 .db "SRE", 1     ;0x57
  125 D1:DF76 43 4C 49 0A .db "CLI", 10     ;0x58
  126 D1:DF7A 45 4F 52 0C .db "EOR", 12     ;0x59
  127 D1:DF7E 4E 4F 50 0A .db "NOP", 10     ;0x5A
  128 D1:DF82 53 52 45 0C .db "SRE", 12     ;0x5B
  129 D1:DF86 4E 4F 50 04 .db "NOP", 4     ;0x5C
  130 D1:DF8A 45 4F 52 04 .db "EOR", 4     ;0x5D
  131 D1:DF8E 4C 53 52 04 .db "LSR", 4     ;0x5E
  132 D1:DF92 53 52 45 04 .db "SRE", 4     ;0x5F
  133 D1:DF96 52 54 53 0A .db "RTS", 10     ;0x60
  134 D1:DF9A 41 44 43 05 .db "ADC", 5     ;0x61
  135 D1:DF9E 4A 41 4D 00 .db "JAM", 0     ;0x62
  136 D1:DFA2 52 52 41 05 .db "RRA", 5     ;0x63
  137 D1:DFA6 4E 4F 50 07 .db "NOP", 7     ;0x64
  138 D1:DFAA 41 44 43 07 .db "ADC", 7     ;0x65
  139 D1:DFAE 52 4F 52 07 .db "ROR", 7     ;0x66
  140 D1:DFB2 52 52 41 07 .db "RRA", 7     ;0x67
  141 D1:DFB6 50 4C 41 0A .db "PLA", 10     ;0x68
  142 D1:DFBA 41 44 43 09 .db "ADC", 9     ;0x69
  143 D1:DFBE 52 4F 52 06 .db "ROR", 6     ;0x6A
  144 D1:DFC2 41 52 52 09 .db "ARR", 9     ;0x6B
  145 D1:DFC6 4A 4D 50 02 .db "JMP", 2     ;0x6C
  146 D1:DFCA 41 44 43 03 .db "ADC", 3     ;0x6D
  147 D1:DFCE 52 4F 52 03 .db "ROR", 3     ;0x6E
  148 D1:DFD2 52 52 41 03 .db "RRA", 3     ;0x6F
  149 D1:DFD6 42 56 53 08 .db "BVS", 8     ;0x70
  150 D1:DFDA 41 44 43 0B .db "ADC", 11     ;0x71
  151 D1:DFDE 4A 41 4D 00 .db "JAM", 0     ;0x72
  152 D1:DFE2 52 52 41 0B .db "RRA", 11     ;0x73
  153 D1:DFE6 4E 4F 50 01 .db "NOP", 1     ;0x74
  154 D1:DFEA 41 44 43 01 .db "ADC", 1     ;0x75
  155 D1:DFEE 52 4F 52 01 .db "ROR", 1     ;0x76
  156 D1:DFF2 52 52 41 01 .db "RRA", 1     ;0x77
  157 D1:DFF6 53 45 49 0A .db "SEI", 10     ;0x78
  158 D1:DFFA 41 44 43 0C .db "ADC", 12     ;0x79
  159 D1:DFFE 4E 4F 50 0A .db "NOP", 10     ;0x7A
  160 D1:E002 52 52 41 0C .db "RRA", 12     ;0x7B
  161 D1:E006 4E 4F 50 04 .db "NOP", 4     ;0x7C
  162 D1:E00A 41 44 43 04 .db "ADC", 4     ;0x7D
  163 D1:E00E 52 4F 52 04 .db "ROR", 4     ;0x7E
  164 D1:E012 52 52 41 04 .db "RRA", 4     ;0x7F
  165 D1:E016 4E 4F 50 09 .db "NOP", 9     ;0x80
  166 D1:E01A 53 54 41 05 .db "STA", 5     ;0x81
  167 D1:E01E 4E 4F 50 09 .db "NOP", 9     ;0x82
  168 D1:E022 53 41 58 05 .db "SAX", 5     ;0x83
  169 D1:E026 53 54 59 07 .db "STY", 7     ;0x84
  170 D1:E02A 53 54 41 07 .db "STA", 7     ;0x85
  171 D1:E02E 53 54 58 07 .db "STX", 7     ;0x86
  172 D1:E032 53 41 58 07 .db "SAX", 7     ;0x87
  173 D1:E036 44 45 59 0A .db "DEY", 10     ;0x88
  174 D1:E03A 4E 4F 50 09 .db "NOP", 9     ;0x89
  175 D1:E03E 54 58 41 0A .db "TXA", 10     ;0x8A
  176 D1:E042 41 4E 45 09 .db "ANE", 9     ;0x8B
  177 D1:E046 53 54 59 03 .db "STY", 3     ;0x8C
  178 D1:E04A 53 54 41 03 .db "STA", 3     ;0x8D
  179 D1:E04E 53 54 58 03 .db "STX", 3     ;0x8E
  180 D1:E052 53 41 58 03 .db "SAX", 3     ;0x8F
  181 D1:E056 42 43 43 08 .db "BCC", 8     ;0x90
  182 D1:E05A 53 54 41 0B .db "STA", 11     ;0x91
  183 D1:E05E 4A 41 4D 00 .db "JAM", 0     ;0x92
  184 D1:E062 53 48 41 0B .db "SHA", 11     ;0x93
  185 D1:E066 53 54 59 01 .db "STY", 1     ;0x94
  186 D1:E06A 53 54 41 01 .db "STA", 1     ;0x95
  187 D1:E06E 53 54 58 0D .db "STX", 13     ;0x96
  188 D1:E072 53 41 58 0D .db "SAX", 13     ;0x97
  189 D1:E076 54 59 41 0A .db "TYA", 10     ;0x98
  190 D1:E07A 53 54 41 0C .db "STA", 12     ;0x99
  191 D1:E07E 54 58 53 0A .db "TXS", 10     ;0x9A
  192 D1:E082 54 41 53 0C .db "TAS", 12     ;0x9B
  193 D1:E086 53 48 59 04 .db "SHY", 4     ;0x9C
  194 D1:E08A 53 54 41 04 .db "STA", 4     ;0x9D
  195 D1:E08E 53 48 58 0C .db "SHX", 12     ;0x9E
  196 D1:E092 53 48 41 0C .db "SHA", 12     ;0x9F
  197 D1:E096 4C 44 59 09 .db "LDY", 9     ;0xA0
  198 D1:E09A 4C 44 41 05 .db "LDA", 5     ;0xA1
  199 D1:E09E 4C 44 58 09 .db "LDX", 9     ;0xA2
  200 D1:E0A2 4C 41 58 05 .db "LAX", 5     ;0xA3
  201 D1:E0A6 4C 44 59 07 .db "LDY", 7     ;0xA4
  202 D1:E0AA 4C 44 41 07 .db "LDA", 7     ;0xA5
  203 D1:E0AE 4C 44 58 07 .db "LDX", 7     ;0xA6
  204 D1:E0B2 4C 41 58 07 .db "LAX", 7     ;0xA7
  205 D1:E0B6 54 41 59 0A .db "TAY", 10     ;0xA8
  206 D1:E0BA 4C 44 41 09 .db "LDA", 9     ;0xA9
  207 D1:E0BE 54 41 58 0A .db "TAX", 10     ;0xAA
  208 D1:E0C2 4C 58 41 09 .db "LXA", 9     ;0xAB
  209 D1:E0C6 4C 44 59 03 .db "LDY", 3     ;0xAC
  210 D1:E0CA 4C 44 41 03 .db "LDA", 3     ;0xAD
  211 D1:E0CE 4C 44 58 03 .db "LDX", 3     ;0xAE
  212 D1:E0D2 4C 41 58 03 .db "LAX", 3     ;0xAF
  213 D1:E0D6 42 43 53 08 .db "BCS", 8     ;0xB0
  214 D1:E0DA 4C 44 41 0B .db "LDA", 11     ;0xB1
  215 D1:E0DE 4A 41 4D 00 .db "JAM", 0     ;0xB2
  216 D1:E0E2 4C 41 58 0B .db "LAX", 11     ;0xB3
  217 D1:E0E6 4C 44 59 01 .db "LDY", 1     ;0xB4
  218 D1:E0EA 4C 44 41 01 .db "LDA", 1     ;0xB5
  219 D1:E0EE 4C 44 58 0D .db "LDX", 13     ;0xB6
  220 D1:E0F2 4C 41 58 0D .db "LAX", 13     ;0xB7
  221 D1:E0F6 43 4C 56 0A .db "CLV", 10     ;0xB8
  222 D1:E0FA 4C 44 41 0C .db "LDA", 12     ;0xB9
  223 D1:E0FE 54 53 58 0A .db "TSX", 10     ;0xBA
  224 D1:E102 4C 41 53 0C .db "LAS", 12     ;0xBB
  225 D1:E106 4C 44 59 04 .db "LDY", 4     ;0xBC
  226 D1:E10A 4C 44 41 04 .db "LDA", 4     ;0xBD
  227 D1:E10E 4C 44 58 0C .db "LDX", 12     ;0xBE
  228 D1:E112 4C 41 58 0C .db "LAX", 12     ;0xBF
  229 D1:E116 43 50 59 09 .db "CPY", 9     ;0xC0
  230 D1:E11A 43 4D 50 05 .db "CMP", 5     ;0xC1
  231 D1:E11E 4E 4F 50 09 .db "NOP", 9     ;0xC2
  232 D1:E122 44 43 50 05 .db "DCP", 5     ;0xC3
  233 D1:E126 43 50 59 07 .db "CPY", 7     ;0xC4
  234 D1:E12A 43 4D 50 07 .db "CMP", 7     ;0xC5
  235 D1:E12E 44 45 43 07 .db "DEC", 7     ;0xC6
  236 D1:E132 44 43 50 07 .db "DCP", 7     ;0xC7
  237 D1:E136 49 4E 59 0A .db "INY", 10     ;0xC8
  238 D1:E13A 43 4D 50 09 .db "CMP", 9     ;0xC9
  239 D1:E13E 44 45 58 0A .db "DEX", 10     ;0xCA
  240 D1:E142 53 42 58 09 .db "SBX", 9     ;0xCB
  241 D1:E146 43 50 59 03 .db "CPY", 3     ;0xCC
  242 D1:E14A 43 4D 50 03 .db "CMP", 3     ;0xCD
  243 D1:E14E 44 45 43 03 .db "DEC", 3     ;0xCE
  244 D1:E152 44 43 50 03 .db "DCP", 3     ;0xCF
  245 D1:E156 42 4E 45 08 .db "BNE", 8     ;0xD0
  246 D1:E15A 43 4D 50 0B .db "CMP", 11     ;0xD1
  247 D1:E15E 4A 41 4D 00 .db "JAM", 0     ;0xD2
  248 D1:E162 44 43 50 0B .db "DCP", 11     ;0xD3
  249 D1:E166 4E 4F 50 01 .db "NOP", 1     ;0xD4
  250 D1:E16A 43 4D 50 01 .db "CMP", 1     ;0xD5
  251 D1:E16E 44 45 43 01 .db "DEC", 1     ;0xD6
  252 D1:E172 44 43 50 01 .db "DCP", 1     ;0xD7
  253 D1:E176 43 4C 44 0A .db "CLD", 10     ;0xD8
  254 D1:E17A 43 4D 50 0C .db "CMP", 12     ;0xD9
  255 D1:E17E 4E 4F 50 0A .db "NOP", 10     ;0xDA
  256 D1:E182 44 43 50 0C .db "DCP", 12     ;0xDB
  257 D1:E186 4E 4F 50 04 .db "NOP", 4     ;0xDC
  258 D1:E18A 43 4D 50 04 .db "CMP", 4     ;0xDD
  259 D1:E18E 44 45 43 04 .db "DEC", 4     ;0xDE
  260 D1:E192 44 43 50 04 .db "DCP", 4     ;0xDF
  261 D1:E196 43 50 58 09 .db "CPX", 9     ;0xE0
  262 D1:E19A 53 42 43 05 .db "SBC", 5     ;0xE1
  263 D1:E19E 4E 4F 50 09 .db "NOP", 9     ;0xE2
  264 D1:E1A2 49 53 43 05 .db "ISC", 5     ;0xE3
  265 D1:E1A6 43 50 58 07 .db "CPX", 7     ;0xE4
  266 D1:E1AA 53 42 43 07 .db "SBC", 7     ;0xE5
  267 D1:E1AE 49 4E 43 07 .db "INC", 7     ;0xE6
  268 D1:E1B2 49 53 43 07 .db "ISC", 7     ;0xE7
  269 D1:E1B6 49 4E 58 0A .db "INX", 10     ;0xE8
  270 D1:E1BA 53 42 43 09 .db "SBC", 9     ;0xE9
  271 D1:E1BE 4E 4F 50 0A .db "NOP", 10     ;0xEA
  272 D1:E1C2 55 53 42 09 .db "USB", 9     ;0xEB
  273 D1:E1C6 43 50 58 03 .db "CPX", 3     ;0xEC
  274 D1:E1CA 53 42 43 03 .db "SBC", 3     ;0xED
  275 D1:E1CE 49 4E 43 03 .db "INC", 3     ;0xEE
  276 D1:E1D2 49 53 43 03 .db "ISC", 3     ;0xEF
  277 D1:E1D6 42 45 51 08 .db "BEQ", 8     ;0xF0
  278 D1:E1DA 53 42 43 0B .db "SBC", 11     ;0xF1
  279 D1:E1DE 4A 41 4D 00 .db "JAM", 0     ;0xF2
  280 D1:E1E2 49 53 43 0B .db "ISC", 11     ;0xF3
  281 D1:E1E6 4E 4F 50 01 .db "NOP", 1     ;0xF4
  282 D1:E1EA 53 42 43 01 .db "SBC", 1     ;0xF5
  283 D1:E1EE 49 4E 43 01 .db "INC", 1     ;0xF6
  284 D1:E1F2 49 53 43 01 .db "ISC", 1     ;0xF7
  285 D1:E1F6 53 45 44 0A .db "SED", 10     ;0xF8
  286 D1:E1FA 53 42 43 0C .db "SBC", 12     ;0xF9
  287 D1:E1FE 4E 4F 50 0A .db "NOP", 10     ;0xFA
  288 D1:E202 49 53 43 0C .db "ISC", 12     ;0xFB
  289 D1:E206 4E 4F 50 04 .db "NOP", 4     ;0xFC
  290 D1:E20A 53 42 43 04 .db "SBC", 4     ;0xFD
  291 D1:E20E 49 4E 43 04 .db "INC", 4     ;0xFE
  292 D1:E212 49 53 43 04 .db "ISC", 4     ;0xFF
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\debug.z80"
    3 D1:E216 -  -  -  -  
    4 D1:E216 -  -  -  -  
    5 D1:E216 -  -  -  -  ;You must assign a print character routine.
    6 D1:E216 -  -  -  -  ;You must also write all opcode bytes to operbuf or map operbuf to where written
    7 D1:E216 -  -  -  -  dbg_printChr    = PrintBigFont
    8 D1:E216 -  -  -  -  operbuf         = debugram
    9 D1:E216 -  -  -  -  
   10 D1:E216 -  -  -  -  
   11 D1:E216 -  -  -  -  dbg_resetScreen:
   12 D1:E216 21 00 00 D4     ld  hl,screenBuf1
   13 D1:E21A 11 01 00 D4     ld  de,screenBuf1+1
   14 D1:E21E 01 FF 57 02     ld  bc,(2*240*320)-1
   15 D1:E222 36 00 -  -      ld  (hl),$00
   16 D1:E224 ED B0 -  -      ldir
   17 D1:E226 AF -  -  -      xor a,a
   18 D1:E227 CD 69 B1 D1     call setLineStart
   19 D1:E22B CD 72 B1 D1     call setCurLine
   20 D1:E22F C9 -  -  -      ret
   21 D1:E230 -  -  -  -  
   22 D1:E230 -  -  -  -  dbg_prepNextLine:
   23 D1:E230 AF -  -  -      xor a,a
   24 D1:E231 32 F6 31 D0     ld  (xPos),a
   25 D1:E235 CD 3F B2 D1     call calculateScreenPtr
   26 D1:E239 EB -  -  -      ex  de,hl
   27 D1:E23A 21 FF 2B D5     ld  hl,screenBuf2-1
   28 D1:E23E B7 -  -  -      or  a,a
   29 D1:E23F ED 52 -  -      sbc hl,de
   30 D1:E241 -  -  -  -  ;If C: DE in sb2. subtract to set in sb1.
   31 D1:E241 -  -  -  -  ;If NC: DE in sb1. add to set in sb2.
   32 D1:E241 21 00 2C 01     ld  hl,320*240
   33 D1:E245 30 04 -  -      jr  nc,+_
   34 D1:E247 21 00 D4 FE     ld  hl,-(320*240)+0
   35 D1:E24B 19 -  -  -  _:  add hl,de   ;HL set to other buffer. DE points to current buffer.
   36 D1:E24C 01 00 0A 00     ld  bc,320*8    ;copy one line from other buffer to current buffer.
   37 D1:E250 7E -  -  -  _:  ld  a,(hl)
   38 D1:E251 C6 01 -  -      add a,1     ;carry if $FF (white), NC if not
   39 D1:E253 9F -  -  -      sbc a,a     ;if carry, returns to $FF, else is black
   40 D1:E254 77 -  -  -      ld  (hl),a
   41 D1:E255 ED A0 -  -      ldi
   42 D1:E257 EA 50 E2 D1     jp  pe,-_
   43 D1:E25B 3A F7 31 D0     ld  a,(yPos)
   44 D1:E25F FE 1D -  -      cp  a,29
   45 D1:E261 20 06 -  -      jr  nz,+_
   46 D1:E263 21 00 D4 FE     ld  hl,-(320*240)
   47 D1:E267 19 -  -  -      add hl,de
   48 D1:E268 EB -  -  -      ex de,hl        ;if bottom of screen, then reset DE to top of screen.
   49 D1:E269 D5 -  -  -  _:  push de
   50 D1:E26A E1 -  -  -      pop hl
   51 D1:E26B 13 -  -  -      inc de
   52 D1:E26C 71 -  -  -      ld  (hl),c
   53 D1:E26D 01 BF 08 00     ld  bc,(320*7)-1    ;erase whole line below it to prepare for writing.
   54 D1:E271 ED B0 -  -      ldir
   55 D1:E273 C9 -  -  -      ret
   56 D1:E274 -  -  -  -  
   57 D1:E274 -  -  -  -  ;Input: ix = core_memory_ix 
   58 D1:E274 -  -  -  -  ;Output: Text onscreen
   59 D1:E274 -  -  -  -  dbg_printLine:
   60 D1:E274 E5 C5 D5 DD 
              E5 FD E5 F5     push hl \ push bc \ push de \ push ix \ push iy \ push af
   61 D1:E27C ED 23 00 -      lea hl,iy+0
   62 D1:E27F DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl
   63 D1:E282 11 00 00 00     ld  de,DEBUG_PRINT_START_CYCLE
   64 D1:E286 B7 -  -  -      or  a,a
   65 D1:E287 ED 52 -  -      sbc hl,de
   66 D1:E289 DA 6D E3 D1     jp  c,dbg_printLine_noPrint
   67 D1:E28D -  -  -  -  
   68 D1:E28D 3E 1A -  -      ld  a,$1A   ;blue
   69 D1:E28F 32 C1 B1 D1     ld  (fontBGColor_var),a
   70 D1:E293 32 0E B2 D1     ld  (smallFontBGColor_var),a
   71 D1:E297 DD 27 0E -      ld  hl,(ix+CURRENT_OPCODES)
   72 D1:E29A 22 F9 31 D0     ld  (operbuf),hl
   73 D1:E29E CD 30 E2 D1     call dbg_prepNextLine
   74 D1:E2A2 CD 7D B1 D1     call newLine
   75 D1:E2A6 DD 7E 06 -      ld  a,(ix+REGPC+1)
   76 D1:E2A9 CD DA B1 D1     call printSmallNumPair
   77 D1:E2AD DD 7E 05 -      ld  a,(ix+REGPC+0)
   78 D1:E2B0 CD DA B1 D1     call printSmallNumPair
   79 D1:E2B4 3E 20 -  -      ld  a,' '
   80 D1:E2B6 CD AA B1 D1     call printBigFont
   81 D1:E2BA -  -  -  -      ;
   82 D1:E2BA 3E 41 -  -      ld  a,'A'
   83 D1:E2BC CD AA B1 D1     call printBigFont
   84 D1:E2C0 DD 7E 00 -      ld  a,(ix+REGA)
   85 D1:E2C3 CD DA B1 D1     call printSmallNumPair
   86 D1:E2C7 3E 20 -  -      ld  a,' '
   87 D1:E2C9 CD AA B1 D1     call printBigFont
   88 D1:E2CD -  -  -  -      ;
   89 D1:E2CD 3E 58 -  -      ld  a,'X'
   90 D1:E2CF CD AA B1 D1     call printBigFont
   91 D1:E2D3 DD 7E 01 -      ld  a,(ix+REGX)
   92 D1:E2D6 CD DA B1 D1     call printSmallNumPair
   93 D1:E2DA 3E 20 -  -      ld  a,' '
   94 D1:E2DC CD AA B1 D1     call printBigFont
   95 D1:E2E0 -  -  -  -      ;
   96 D1:E2E0 3E 59 -  -      ld  a,'Y'
   97 D1:E2E2 CD AA B1 D1     call printBigFont
   98 D1:E2E6 DD 7E 02 -      ld  a,(ix+REGY)
   99 D1:E2E9 CD DA B1 D1     call printSmallNumPair
  100 D1:E2ED 3E 20 -  -      ld  a,' '
  101 D1:E2EF CD AA B1 D1     call printBigFont
  102 D1:E2F3 -  -  -  -      ;
  103 D1:E2F3 3E 53 -  -      ld  a,'S'
  104 D1:E2F5 CD AA B1 D1     call printBigFont
  105 D1:E2F9 DD 7E 03 -      ld  a,(ix+REGSP)
  106 D1:E2FC CD DA B1 D1     call printSmallNumPair
  107 D1:E300 3E 20 -  -      ld  a,' '
  108 D1:E302 CD AA B1 D1     call printBigFont
  109 D1:E306 -  -  -  -      ;
  110 D1:E306 3E 50 -  -      ld  a,'P'
  111 D1:E308 CD AA B1 D1     call printBigFont
  112 D1:E30C DD 7E 04 -      ld  a,(ix+REGSR)
  113 D1:E30F CD DA B1 D1     call printSmallNumPair
  114 D1:E313 3E 20 -  -      ld  a,' '
  115 D1:E315 CD AA B1 D1     call printBigFont
  116 D1:E319 -  -  -  -  
  117 D1:E319 -  -  -  -      ;
  118 D1:E319 -  -  -  -  ;    ld  hl,dbg_printLine_str001
  119 D1:E319 -  -  -  -  ;    call printString
  120 D1:E319 -  -  -  -  ;    ld  b,5
  121 D1:E319 -  -  -  -  ;    lea hl,ix+0
  122 D1:E319 -  -  -  -  ;_:  ld  a,(hl)
  123 D1:E319 -  -  -  -  ;    inc hl
  124 D1:E319 -  -  -  -  ;    push bc
  125 D1:E319 -  -  -  -  ;        push hl
  126 D1:E319 -  -  -  -  ;            call printSmallNumPair
  127 D1:E319 -  -  -  -  ;            ld  a,' '
  128 D1:E319 -  -  -  -  ;            call printBigFont
  129 D1:E319 -  -  -  -  ;        pop hl
  130 D1:E319 -  -  -  -  ;    pop bc
  131 D1:E319 -  -  -  -  ;    djnz -_
  132 D1:E319 -  -  -  -  
  133 D1:E319 DD 7E 0D -      ld  a,(ix+CYCLES_CURRENT+2)
  134 D1:E31C CD DA B1 D1     call printSmallNumPair
  135 D1:E320 DD 7E 0C -      ld  a,(ix+CYCLES_CURRENT+1)
  136 D1:E323 CD DA B1 D1     call printSmallNumPair
  137 D1:E327 DD 7E 0B -      ld  a,(ix+CYCLES_CURRENT+0)
  138 D1:E32A CD DA B1 D1     call printSmallNumPair
  139 D1:E32E 3E 20 -  -      ld  a,' '
  140 D1:E330 CD AA B1 D1     call printBigFont
  141 D1:E334 2A F9 31 D0     ld  hl,(operbuf)
  142 D1:E338 DD 2F 0E -      ld  (ix+CURRENT_OPCODES),hl
  143 D1:E33B 7D -  -  -      ld  a,L
  144 D1:E33C CD 5D E4 D1     call dbg_getInstSize
  145 D1:E340 06 03 -  -      ld  b,3
  146 D1:E342 4F -  -  -      ld  c,a
  147 D1:E343 0C -  -  -      inc c
  148 D1:E344 ED 22 0E -      lea hl,ix+CURRENT_OPCODES
  149 D1:E347 7E -  -  -  _:  ld  a,(hl)
  150 D1:E348 23 -  -  -      inc hl
  151 D1:E349 E5 -  -  -      push hl
  152 D1:E34A 0D -  -  -          dec c
  153 D1:E34B F2 50 E3 D1         jp p,+_
  154 D1:E34F 0C -  -  -          inc c   ;never let c go below zero.
  155 D1:E350 C5 -  -  -  _:      push bc
  156 D1:E351 28 06 -  -              jr  z,+_
  157 D1:E353 CD DA B1 D1             call printSmallNumPair
  158 D1:E357 18 06 -  -              jr ++_
  159 D1:E359 3E 20 -  -  _:          ld  a,' '
  160 D1:E35B CD AA B1 D1             call printBigFont
  161 D1:E35F C1 -  -  -  _:      pop bc
  162 D1:E360 E1 -  -  -      pop hl
  163 D1:E361 10 E4 -  -      djnz ----_
  164 D1:E363 3E 20 -  -      ld  a,' '
  165 D1:E365 CD AA B1 D1     call printBigFont
  166 D1:E369 CD 75 E4 D1     call dbg_printDisassembly
  167 D1:E36D -  -  -  -  
  168 D1:E36D -  -  -  -      ;
  169 D1:E36D -  -  -  -      ;Remove section below when done testing nestest for timings
  170 D1:E36D -  -  -  -      ;
  171 D1:E36D -  -  -  -  dbg_printLine_noPrint:
  172 D1:E36D 11 00 00 00     ld  de,0
  173 D1:E371 2A 4D 34 D0     ld  hl,(timings_base)
  174 D1:E375 5E -  -  -      ld  e,(hl)
  175 D1:E376 23 -  -  -      inc hl
  176 D1:E377 56 -  -  -      ld  d,(hl)
  177 D1:E378 23 -  -  -      inc hl
  178 D1:E379 22 4D 34 D0     ld  (timings_base),hl
  179 D1:E37D DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  180 D1:E380 B7 -  -  -      or  a,a
  181 D1:E381 ED 52 -  -      sbc hl,de
  182 D1:E383 28 17 -  -      jr  z,+_
  183 D1:E385 21 FF FF FF     ld  hl,-1
  184 D1:E389 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  185 D1:E38C CD 7D B1 D1     call newLine
  186 D1:E390 21 20 E4 D1     ld  hl,dbg_printLine_timeMismatch
  187 D1:E394 CD 94 B1 D1     call printString
  188 D1:E398 DD 36 14 01     ld  (ix+CORE_ERROR_LEVEL),1
  189 D1:E39C 2A 4D 34 D0 _:  ld  hl,(timings_base)
  190 D1:E3A0 7E -  -  -      ld  a,(hl)
  191 D1:E3A1 23 -  -  -      inc hl
  192 D1:E3A2 22 4D 34 D0     ld  (timings_base),hl
  193 D1:E3A6 DD BE 04 -      cp  a,(ix+REGSR)
  194 D1:E3A9 28 17 -  -      jr  z,+_
  195 D1:E3AB 21 FF FF FF     ld  hl,-1
  196 D1:E3AF DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  197 D1:E3B2 CD 7D B1 D1     call newLine
  198 D1:E3B6 21 3A E4 D1     ld  hl,dbg_printLine_statusRegisterMismatch
  199 D1:E3BA CD 94 B1 D1     call printString
  200 D1:E3BE DD 36 14 02     ld  (ix+CORE_ERROR_LEVEL),2
  201 D1:E3C2 -  -  -  -  _:
  202 D1:E3C2 -  -  -  -      ;
  203 D1:E3C2 -  -  -  -      ;End debug-debug section
  204 D1:E3C2 -  -  -  -      ;
  205 D1:E3C2 CD A0 B0 D1     call fastCopy
  206 D1:E3C6 AF -  -  -      xor a,a     ;black
  207 D1:E3C7 32 C1 B1 D1     ld  (fontBGColor_var),a
  208 D1:E3CB 32 0E B2 D1     ld  (smallFontBGColor_var),a
  209 D1:E3CF -  -  -  -  
  210 D1:E3CF F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  211 D1:E3D7 -  -  -  -      ;push hl \ push bc \ push de \ push ix \ push iy \ push af
  212 D1:E3D7 C9 -  -  -      ret
  213 D1:E3D8 -  -  -  -  
  214 D1:E3D8 -  -  -  -  
  215 D1:E3D8 -  -  -  -      ;also remove this when done timing debugging
  216 D1:E3D8 11 00 00 00     ld  de,0
  217 D1:E3DC 2A 4D 34 D0     ld  hl,(timings_base)
  218 D1:E3E0 5E -  -  -      ld  e,(hl)
  219 D1:E3E1 23 -  -  -      inc hl
  220 D1:E3E2 56 -  -  -      ld  d,(hl)
  221 D1:E3E3 23 -  -  -      inc hl
  222 D1:E3E4 22 4D 34 D0     ld  (timings_base),hl
  223 D1:E3E8 DD 27 0B -      ld  hl,(ix+CYCLES_CURRENT)
  224 D1:E3EB B7 -  -  -      or  a,a
  225 D1:E3EC ED 52 -  -      sbc hl,de
  226 D1:E3EE 28 13 -  -      jr  z,+_
  227 D1:E3F0 21 FF FF FF     ld  hl,-1
  228 D1:E3F4 DD 2F 0B -      ld  (ix+CYCLES_CURRENT),hl  ;halt simulator
  229 D1:E3F7 CD 7D B1 D1     call newLine
  230 D1:E3FB 21 20 E4 D1     ld  hl,dbg_printLine_timeMismatch
  231 D1:E3FF CD 94 B1 D1     call printString
  232 D1:E403 -  -  -  -  _:  ;
  233 D1:E403 -  -  -  -      ;End debug-debug section
  234 D1:E403 -  -  -  -      ;
  235 D1:E403 CD A0 B0 D1     call fastCopy
  236 D1:E407 AF -  -  -      xor a,a     ;black
  237 D1:E408 32 C1 B1 D1     ld  (fontBGColor_var),a
  238 D1:E40C 32 0E B2 D1     ld  (smallFontBGColor_var),a
  239 D1:E410 F1 FD E1 DD 
              E1 D1 C1 E1     pop af \ pop iy \ pop ix \ pop de \ pop bc \ pop hl
  240 D1:E418 C9 -  -  -      ret
  241 D1:E419 -  -  -  -  
  242 D1:E419 -  -  -  -  dbg_printLine_str001:
  243 D1:E419 41 58 59 53 
              50 20 00 -  .db "AXYSP ",0
  244 D1:E420 -  -  -  -  dbg_printLine_timeMismatch:
  245 D1:E420 43 50 55 20 
              54 65 73 74 
              20 74 69 6D 
              69 6E 67 20 
              6D 69 73 6D 
              61 74 63 68 
              2E 00 -  -  .db "CPU Test timing mismatch.",0
  246 D1:E43A -  -  -  -  dbg_printLine_statusRegisterMismatch:
  247 D1:E43A -  -  -  -  ;    0123456789012345678901234567890123456789
  248 D1:E43A 43 50 55 20 
              54 65 73 74 
              20 73 74 61 
              74 75 73 20 
              72 65 67 69 
              73 74 65 72 
              20 6D 69 73 
              6D 61 74 63 
              68 2E 00 -  .db "CPU Test status register mismatch.",0
  249 D1:E45D -  -  -  -  
  250 D1:E45D -  -  -  -  
  251 D1:E45D -  -  -  -  
  252 D1:E45D -  -  -  -  
  253 D1:E45D -  -  -  -  
  254 D1:E45D -  -  -  -  
  255 D1:E45D -  -  -  -  ;A=instruction. Returns: A=size
  256 D1:E45D -  -  -  -  dbg_getInstSize:
  257 D1:E45D E5 D5 -  -      push hl \ push de
  258 D1:E45F 57 -  -  -          ld  d,a
  259 D1:E460 1E 04 -  -          ld  e,4
  260 D1:E462 ED 5C -  -          mlt de
  261 D1:E464 21 19 DE D1         ld  hl,inst6502_disassembly_table+3
  262 D1:E468 19 -  -  -          add hl,de
  263 D1:E469 16 00 -  -          ld  d,0
  264 D1:E46B 5E -  -  -          ld  e,(hl)
  265 D1:E46C 21 DB DD D1         ld  hl,inst6502_opcode_width_table
  266 D1:E470 19 -  -  -          add hl,de
  267 D1:E471 7E -  -  -          ld  a,(hl)
  268 D1:E472 D1 E1 -  -      pop de \ pop hl
  269 D1:E474 C9 -  -  -      ret
  270 D1:E475 -  -  -  -  
  271 D1:E475 -  -  -  -  dbg_printDisassembly:
  272 D1:E475 F5 C5 D5 E5 
              DD E5 -  -      push af \ push bc \ push de \ push hl \ push ix
  273 D1:E47B -  -  -  -      ;find entry in disassembly table
  274 D1:E47B 2A F9 31 D0     ld  hl,(operbuf)
  275 D1:E47F 26 04 -  -      ld  H,4
  276 D1:E481 ED 6C -  -      mlt hl
  277 D1:E483 11 16 DE D1     ld  de,inst6502_disassembly_table
  278 D1:E487 19 -  -  -      add hl,de
  279 D1:E488 06 03 -  -      ld  b,3
  280 D1:E48A 7E -  -  -  _:  ld  a,(hl)
  281 D1:E48B 23 -  -  -      inc hl
  282 D1:E48C CD 12 E5 D1     call dbg_printC
  283 D1:E490 10 F8 -  -      djnz -_
  284 D1:E492 3E 20 -  -      ld  a,' '
  285 D1:E494 CD 12 E5 D1     call dbg_printC
  286 D1:E498 46 -  -  -      ld  b,(hl)
  287 D1:E499 04 -  -  -      inc b
  288 D1:E49A -  -  -  -      ;Instruction addressing mode in B. Now find text for that address mode.
  289 D1:E49A 21 E9 DD D1     ld  hl,inst6502_disassembler
  290 D1:E49E 11 00 00 00     ld  de,0
  291 D1:E4A2 5E -  -  -  _:  ld  e,(hl)
  292 D1:E4A3 19 -  -  -      add hl,de
  293 D1:E4A4 10 FC -  -      djnz -_
  294 D1:E4A6 1D -  -  -      dec e
  295 D1:E4A7 28 29 -  -      jr  z,dbg_printDisassembly_end  ;stop if text is zero-sized
  296 D1:E4A9 ED 52 -  -      sbc hl,de   ;rewind to start of text part of instruction. E is text length.
  297 D1:E4AB 43 -  -  -      ld  b,e
  298 D1:E4AC -  -  -  -  dbg_printDisassembly_printOperandLoop:
  299 D1:E4AC 7E -  -  -      ld  a,(hl)
  300 D1:E4AD 23 -  -  -      inc hl
  301 D1:E4AE FE 31 -  -      cp  a,'1'
  302 D1:E4B0 20 06 -  -      jr  nz,+_
  303 D1:E4B2 CD F6 E4 D1     call dbg_printOperand1
  304 D1:E4B6 18 18 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  305 D1:E4B8 FE 32 -  -  _:  cp  a,'2'
  306 D1:E4BA 20 06 -  -      jr  nz,+_
  307 D1:E4BC CD EE E4 D1     call dbg_printOperand2
  308 D1:E4C0 18 0E -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  309 D1:E4C2 FE 2D -  -  _:  cp  a,'-'
  310 D1:E4C4 20 06 -  -      jr  nz,+_
  311 D1:E4C6 CD D9 E4 D1     call dbg_printRel1
  312 D1:E4CA 18 04 -  -      jr  dbg_PrintDisassembly_printOperandFallthrough
  313 D1:E4CC CD 12 E5 D1 _:  call dbg_printC
  314 D1:E4D0 -  -  -  -  dbg_PrintDisassembly_printOperandFallthrough:
  315 D1:E4D0 10 DA -  -      djnz dbg_printDisassembly_printOperandLoop
  316 D1:E4D2 -  -  -  -  dbg_printDisassembly_end:
  317 D1:E4D2 DD E1 E1 D1 
              C1 F1 -  -      pop ix \ pop hl \ pop de \ pop bc \ pop af
  318 D1:E4D8 C9 -  -  -      ret
  319 D1:E4D9 -  -  -  -  
  320 D1:E4D9 -  -  -  -  dbg_printRel1:
  321 D1:E4D9 3A FA 31 D0     ld  a,(operbuf+1)
  322 D1:E4DD B7 -  -  -      or  a,a
  323 D1:E4DE F2 EC E4 D1     jp  p,dbg_printRel1_skipNeg
  324 D1:E4E2 F5 -  -  -      push af
  325 D1:E4E3 3E 2D -  -          ld   a,'-'
  326 D1:E4E5 CD 12 E5 D1         call dbg_printC
  327 D1:E4E9 F1 -  -  -      pop af
  328 D1:E4EA ED 44 -  -      neg
  329 D1:E4EC -  -  -  -  dbg_printRel1_skipNeg:
  330 D1:E4EC 18 0C -  -      jr dbg_printHex
  331 D1:E4EE -  -  -  -  
  332 D1:E4EE -  -  -  -  dbg_printOperand2:
  333 D1:E4EE 3A FB 31 D0     ld  a,(operbuf+2)
  334 D1:E4F2 CD FA E4 D1     call dbg_printHex
  335 D1:E4F6 -  -  -  -  dbg_printOperand1:
  336 D1:E4F6 3A FA 31 D0     ld  a,(operbuf+1)
  337 D1:E4FA -  -  -  -  dbg_printHex:
  338 D1:E4FA CD FF E4 D1     call dispAHex
  339 D1:E4FE C9 -  -  -      ret
  340 D1:E4FF -  -  -  -  
  341 D1:E4FF -  -  -  -  dispAHex:
  342 D1:E4FF F5 -  -  -      push af
  343 D1:E500 CD 07 E5 D1         call +_
  344 D1:E504 F1 -  -  -      pop af
  345 D1:E505 18 04 -  -      jr  ++_
  346 D1:E507 1F -  -  -  _:  rra
  347 D1:E508 1F -  -  -      rra
  348 D1:E509 1F -  -  -      rra
  349 D1:E50A 1F -  -  -      rra
  350 D1:E50B F6 F0 -  -  _:  or  a,$F0
  351 D1:E50D 27 -  -  -      daa
  352 D1:E50E C6 A0 -  -      add a,$A0
  353 D1:E510 CE 40 -  -      adc a,$40
  354 D1:E512 -  -  -  -  dbg_printC:
  355 D1:E512 E5 -  -  -      push hl
  356 D1:E513 C5 -  -  -          push bc
  357 D1:E514 CD AA B1 D1             call dbg_printChr
  358 D1:E518 C1 -  -  -          pop bc
  359 D1:E519 E1 -  -  -      pop hl
  360 D1:E51A C9 -  -  -      ret
Listing for file "main.z80"
  962 D1:E51B -  -  -  -  #include "ppu.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\ppu.z80"
    1 D1:E51B -  -  -  -  ;PPU-related stuff is written here, though not all of it is localized in
    2 D1:E51B -  -  -  -  ;this file. Some of it will necessarily be located with the mapper code
    3 D1:E51B -  -  -  -  ;that handles PPU I/O.
    4 D1:E51B -  -  -  -  
    5 D1:E51B -  -  -  -  
    6 D1:E51B -  -  -  -      ;Do this before a lot of other things.
    7 D1:E51B -  -  -  -      ;Select current character rom banks from PPU settings.
    8 D1:E51B 2A 46 34 D0     ld  hl,(chr_rom_base)
    9 D1:E51F 01 00 10 00     ld  bc,$001000
   10 D1:E523 DD 7E E0 -      ld  a,(ix+PPU_CTRL)
   11 D1:E526 E5 -  -  -      push hl
   12 D1:E527 CB 67 -  -          bit 4,a     ;background pattern base offset
   13 D1:E529 28 01 -  -          jr  z,+_
   14 D1:E52B 09 -  -  -          add hl,bc
   15 D1:E52C 22 20 34 D0 _:      ld  (chr_rom_tiles),hl
   16 D1:E530 E1 -  -  -      pop hl
   17 D1:E531 CB 6F -  -      bit 5,a     ;sprite pattern base offset
   18 D1:E533 28 01 -  -      jr  z,+_
   19 D1:E535 09 -  -  -      add hl,bc
   20 D1:E536 22 24 34 D0 _:  ld  (chr_rom_sprites),hl
   21 D1:E53A -  -  -  -  
   22 D1:E53A -  -  -  -  
   23 D1:E53A -  -  -  -  
   24 D1:E53A -  -  -  -      ;B=Y, C=X. Obtain nametable address
   25 D1:E53A -  -  -  -      ;You must preserve BC yourself. Somehow. Or not depending on how you loop.
   26 D1:E53A -  -  -  -      ;B and C are modified to fit inside the nametable selected.
   27 D1:E53A 21 80 06 1A     ld  hl,nametable00>>3
   28 D1:E53E 78 -  -  -      ld  a,b
   29 D1:E53F D6 20 -  -      sub 32
   30 D1:E541 38 01 -  -      jr  c,+_
   31 D1:E543 78 -  -  -      ld  a,b
   32 D1:E544 47 -  -  -  _:  ld  b,a
   33 D1:E545 3F -  -  -      ccf
   34 D1:E546 ED 6A -  -      adc hl,hl
   35 D1:E548 79 -  -  -      ld  a,c
   36 D1:E549 D6 1E -  -      sub 30
   37 D1:E54B 38 01 -  -      jr  c,+_
   38 D1:E54D 79 -  -  -      ld  a,c
   39 D1:E54E 4F -  -  -  _:  ld  c,a
   40 D1:E54F 3F -  -  -      ccf
   41 D1:E550 ED 6A -  -      adc hl,hl
   42 D1:E552 29 -  -  -      add hl,hl   ;HL is now a pointer. do ld hl,(hl) to get actual NT address.
   43 D1:E553 -  -  -  -  
   44 D1:E553 -  -  -  -  
   45 D1:E553 -  -  -  -      ;Increment C=X, adjusting nametable pointer table in HL if crossover
   46 D1:E553 0C -  -  -      inc c
   47 D1:E554 79 -  -  -      ld  a,c
   48 D1:E555 FE 20 -  -      cp  a,32
   49 D1:E557 38 06 -  -      jr  c,+_
   50 D1:E559 0E 00 -  -      ld  c,0
   51 D1:E55B 7D -  -  -      ld  a,L
   52 D1:E55C EE 04 -  -      xor a,%00000100
   53 D1:E55E 6F -  -  -      ld  L,a
   54 D1:E55F 00 -  -  -  _:  nop
   55 D1:E560 -  -  -  -  
   56 D1:E560 -  -  -  -      ;Increment B=Y, adjusting nametable pointer table in HL if crossover
   57 D1:E560 04 -  -  -      inc b
   58 D1:E561 78 -  -  -      ld  a,b
   59 D1:E562 FE 1E -  -      cp  a,30
   60 D1:E564 38 06 -  -      jr  c,+_
   61 D1:E566 06 00 -  -      ld  b,0
   62 D1:E568 7D -  -  -      ld  a,L
   63 D1:E569 EE 08 -  -      xor a,%00001000
   64 D1:E56B 6F -  -  -      ld  L,a
   65 D1:E56C 00 -  -  -  _:  nop
   66 D1:E56D -  -  -  -  
   67 D1:E56D -  -  -  -      ;Retrieves attribute byte from B=Y, C=X
   68 D1:E56D -  -  -  -      ;HL=nametable pointer table
   69 D1:E56D -  -  -  -      ;NTptr tab low byte fmt: %000TIIAA. T=attrib, I=ID, A=address bytes
   70 D1:E56D D5 -  -  -      push de
   71 D1:E56E 79 -  -  -          ld  a,c
   72 D1:E56F CB 3F -  -          srl a
   73 D1:E571 CB 3F -  -          srl a   ;change 0-30 to 0-7. Discards low 2 bits.
   74 D1:E573 5F -  -  -          ld  e,a
   75 D1:E574 78 -  -  -          ld  a,b
   76 D1:E575 E6 03 -  -          and a,3 ;discard two lower bits
   77 D1:E577 87 -  -  -          add a,a ;But place remaining bits up higher
   78 D1:E578 83 -  -  -          add a,e ;A=%00YYYXXX
   79 D1:E579 CB E5 -  -          set 4,L ;swap to attrib
   80 D1:E57B ED 17 -  -          ld  de,(hl)
   81 D1:E57D CB A5 -  -          res 4,L ;swap back to main nametable pointers
   82 D1:E57F 83 -  -  -          add a,e ;base is $C0. This will not produce a carry.
   83 D1:E580 5F -  -  -          ld  e,a
   84 D1:E581 1A -  -  -          ld  a,(de)
   85 D1:E582 D1 -  -  -      pop de
   86 D1:E583 -  -  -  -  
   87 D1:E583 -  -  -  -      ;Selects attribute from A from B=Y, C=X in format %0000AA00
   88 D1:E583 CB 48 -  -      bit 1,b
   89 D1:E585 28 04 -  -      jr  z,+_
   90 D1:E587 07 -  -  -      rlca    ;If not zero, shift upper nibble into lower nibble
   91 D1:E588 07 -  -  -      rlca    ;for further selection.
   92 D1:E589 07 -  -  -      rlca
   93 D1:E58A 07 -  -  -      rlca
   94 D1:E58B CB 49 -  -  _:  bit 1,c
   95 D1:E58D 20 02 -  -      jr  nz,+_   ;If not zero, upper 2 bits of lower nibble already in position
   96 D1:E58F 07 -  -  -      rlca        ;Otherwise, move them into position
   97 D1:E590 07 -  -  -      rlca        
   98 D1:E591 E6 0C -  -  _:  and a,%00001100
   99 D1:E593 -  -  -  -  
  100 D1:E593 -  -  -  -      ;Nametable/tilemap variant
  101 D1:E593 -  -  -  -      ;Sets DE to current location in nametable wrt B=Y, C=X
  102 D1:E593 -  -  -  -      ;HL=current nametable pointer
  103 D1:E593 E5 -  -  -      push hl
  104 D1:E594 ED 27 -  -          ld  hl,(hl)
  105 D1:E596 1E 20 -  -          ld  e,32
  106 D1:E598 50 -  -  -          ld  d,b
  107 D1:E599 ED 5C -  -          mlt de
  108 D1:E59B 7B -  -  -          ld  a,e
  109 D1:E59C 81 -  -  -          add a,c
  110 D1:E59D 5F -  -  -          ld  e,a
  111 D1:E59E 19 -  -  -          add hl,de
  112 D1:E59F -  -  -  -          ;ex  de,hl
  113 D1:E59F E1 -  -  -      pop hl
  114 D1:E5A0 -  -  -  -  
  115 D1:E5A0 -  -  -  -      ;TODO: Find way to link stuff above. The task set forth is the following:
  116 D1:E5A0 -  -  -  -      ;Create the main tile rendering loop. We must track the following:
  117 D1:E5A0 -  -  -  -      ;   Screen pointer, nametable position, loop parameters.
  118 D1:E5A0 -  -  -  -      ;With these, we will:
  119 D1:E5A0 -  -  -  -      ;1. Get tileID from nametable position
  120 D1:E5A0 -  -  -  -      ;2. Get attribute data associated with that tile.
  121 D1:E5A0 -  -  -  -      ;3. Retrieve CHR_ROM data and
  122 D1:E5A0 -  -  -  -      ;4. Combine it to retrieve color data, then write it to screen buffer.
  123 D1:E5A0 -  -  -  -      ;
  124 D1:E5A0 -  -  -  -      ;Later on, insert a cacheing step between 2 and 3. to selectively
  125 D1:E5A0 -  -  -  -      ;modify step 4.
  126 D1:E5A0 -  -  -  -      ;
  127 D1:E5A0 -  -  -  -      ; Do in the inlining thing later.
  128 D1:E5A0 -  -  -  -      ;
  129 D1:E5A0 -  -  -  -  
  130 D1:E5A0 -  -  -  -  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  131 D1:E5A0 -  -  -  -  ;    ***   *** ***** *   *  ***  *          *** ***** *   * ***** *****
  132 D1:E5A0 -  -  -  -  ;   *   * *      *   *   * *   * *         *      *   *   * *     *    
  133 D1:E5A0 -  -  -  -  ;   ***** *      *   *   * ***** *          ***   *   *   * ***   ***  
  134 D1:E5A0 -  -  -  -  ;   *   * *      *   *   * *   * *             *  *   *   * *     *    
  135 D1:E5A0 -  -  -  -  ;   *   *  ***   *    ***  *   * *****      ***   *    ***  *     *    
  136 D1:E5A0 -  -  -  -  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  137 D1:E5A0 -  -  -  -  
  138 D1:E5A0 -  -  -  -  
  139 D1:E5A0 -  -  -  -  
  140 D1:E5A0 -  -  -  -  ;
  141 D1:E5A0 -  -  -  -  ppu_init:
  142 D1:E5A0 -  -  -  -      ;
  143 D1:E5A0 DD 21 80 32 
              D0 -  -  -      ld  ix,core_memory_ix
  144 D1:E5A5 ED 22 80 -      lea hl,ix-128
  145 D1:E5A8 ED 12 81 -      lea de,ix-127
  146 D1:E5AB 01 7E 00 00     ld  bc,126
  147 D1:E5AF 36 00 -  -      ld  (hl),$00
  148 D1:E5B1 ED B0 -  -      ldir
  149 D1:E5B3 -  -  -  -      ;
  150 D1:E5B3 3E 55 -  -      ld  a,WREG_CONST
  151 D1:E5B5 DD 77 F4 -      ld  (ix+PPU_W),a
  152 D1:E5B8 -  -  -  -      ;
  153 D1:E5B8 11 00 02 E3     ld  de,mpLcdPalette
  154 D1:E5BC 21 88 E8 D1     ld  hl,paletteData
  155 D1:E5C0 01 80 00 00     ld  bc,64*2
  156 D1:E5C4 ED B0 -  -      ldir
  157 D1:E5C6 -  -  -  -      ;
  158 D1:E5C6 -  -  -  -  
  159 D1:E5C6 -  -  -  -  
  160 D1:E5C6 AF -  -  -      xor a,a
  161 D1:E5C7 32 60 34 D0     ld  (int_table_len),a
  162 D1:E5CB 11 DC E5 D1     ld  de,ppu_isr
  163 D1:E5CF 01 23 6D 00     ld  bc,27939
  164 D1:E5D3 CD 12 B6 D1     call int6502_insertISA  ;sets ix. ix before this unknown.
  165 D1:E5D7 DD 36 F1 02     ld  (ix+PPU_SUBCYCLE),2
  166 D1:E5DB C9 -  -  -      ret
  167 D1:E5DC -  -  -  -  
  168 D1:E5DC -  -  -  -  
  169 D1:E5DC -  -  -  -  
  170 D1:E5DC -  -  -  -  ;Some bits of this is in "coreint.z80"
  171 D1:E5DC -  -  -  -  ppu_isr:
  172 D1:E5DC 3A 20 00 F0     ld  a,($F00020)
  173 D1:E5E0 E6 01 -  -      and a,%0000001
  174 D1:E5E2 C2 83 A9 D1     jp  nz,endCurrentRun    ;stop execution when ON key is pressed
  175 D1:E5E6 -  -  -  -  
  176 D1:E5E6 DD 7E E0 -      ld  a,(ix+PPU_CTRL)
  177 D1:E5E9 E6 18 -  -      and a,%00011000     ;sprite and background. if zero, no rendering happens.
  178 D1:E5EB 28 11 -  -      jr  z,ppu_isr_nodraw
  179 D1:E5ED -  -  -  -      ;perform the check that makes odd cycles one ppu cc shorter, but only if
  180 D1:E5ED -  -  -  -      ;something is being rendered to the screen
  181 D1:E5ED DD 7E F5 -      ld  a,(ix+PPU_FRAMECOUNT)
  182 D1:E5F0 0F -  -  -      rrca
  183 D1:E5F1 30 03 -  -      jr  nc,+_
  184 D1:E5F3 DD 35 F1 -      dec (ix+PPU_SUBCYCLE)
  185 D1:E5F6 -  -  -  -  _:  ;there... should be something else to do?
  186 D1:E5F6 -  -  -  -      ;call ppu_drawBGSprites
  187 D1:E5F6 FD E5 -  -      push iy
  188 D1:E5F8 CD 44 E6 D1         call ppu_drawBG
  189 D1:E5FC FD E1 -  -      pop iy
  190 D1:E5FE -  -  -  -      ;call ppu_drawFGSprites
  191 D1:E5FE -  -  -  -  ppu_isr_nodraw:
  192 D1:E5FE DD 34 F5 -      inc (ix+PPU_FRAMECOUNT)
  193 D1:E601 01 23 6D 00     ld  bc,27939
  194 D1:E605 DD 7E F1 -      ld  a,(ix+PPU_SUBCYCLE)
  195 D1:E608 C6 02 -  -      add a,2     ;add the 2/3rds cycle
  196 D1:E60A FE 03 -  -      cp  a,3     ;but is it more than 3? (0,1,2)
  197 D1:E60C 38 03 -  -      jr  c,+_
  198 D1:E60E D6 03 -  -      sub a,3
  199 D1:E610 03 -  -  -      inc bc
  200 D1:E611 DD 77 F1 -  _:  ld  (ix+PPU_SUBCYCLE),a
  201 D1:E614 ED 23 00 -      lea hl,iy+0
  202 D1:E617 B7 -  -  -      or  a,a
  203 D1:E618 ED 42 -  -      sbc hl,bc
  204 D1:E61A E5 -  -  -      push hl
  205 D1:E61B FD E1 -  -      pop iy
  206 D1:E61D 11 DC E5 D1     ld  de,ppu_isr
  207 D1:E621 CD B5 B5 D1     call int6502_adjustTimings
  208 D1:E625 CD D5 B5 D1     call int6502_pushISRAfterPop
  209 D1:E629 DD CB E2 FE     set 7,(ix+PPU_STATUS)
  210 D1:E62D 2A 4A 34 D0     ld  hl,(ppu_smc_gate)
  211 D1:E631 36 00 -  -      ld  (hl),$00        ;nop out ret so writes no longer ignored.
  212 D1:E633 -  -  -  -      ;
  213 D1:E633 -  -  -  -      ; TODO: Figure this one out:
  214 D1:E633 -  -  -  -      ; Do we need something to unset VBlank active flag at the end of
  215 D1:E633 -  -  -  -      ; VBlank if left unread?
  216 D1:E633 -  -  -  -      ;
  217 D1:E633 DD CB E0 7E     bit 7,(ix+PPU_CTRL)     ;VBlank NMI enable flag
  218 D1:E637 CA D9 B6 D1     jp  z,i6502RetryFirstLoad
  219 D1:E63B 3E FF -  -      ld  a,$FF
  220 D1:E63D DD 77 1E -      ld  (ix+NMI_TRIGGERED),a
  221 D1:E640 C3 35 CD D1     jp  inst6502_brk
  222 D1:E644 -  -  -  -  
  223 D1:E644 -  -  -  -  
  224 D1:E644 -  -  -  -  
  225 D1:E644 -  -  -  -  
  226 D1:E644 -  -  -  -  
  227 D1:E644 -  -  -  -  
  228 D1:E644 -  -  -  -  ppu_drawBG:
  229 D1:E644 -  -  -  -  
  230 D1:E644 -  -  -  -  ;backdrop color. Do not render the following if there are no
  231 D1:E644 -  -  -  -  ;sprites to hide in the background.
  232 D1:E644 2A 28 34 D0     ld  hl,(curScreenBuf)
  233 D1:E648 01 00 2C 01     ld  bc,320*240
  234 D1:E64C 09 -  -  -      add hl,bc
  235 D1:E64D ED 73 C0 E6 
              D1 -  -  -      ld  (++_+1),sp
  236 D1:E652 F9 -  -  -      ld  sp,hl
  237 D1:E653 06 00 -  -      ld  b,0
  238 D1:E655 11 00 00 00     ld  de,0
  239 D1:E659 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -  _:  push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  240 D1:E663 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  241 D1:E66D D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  242 D1:E677 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  243 D1:E681 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  244 D1:E68B D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  245 D1:E695 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  246 D1:E69F D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  247 D1:E6A9 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  248 D1:E6B3 D5 D5 D5 D5 
              D5 D5 D5 D5 
              D5 D5 -  -      push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de \ push de
  249 D1:E6BD 10 9A -  -      djnz -_
  250 D1:E6BF 31 00 00 00 _:  ld  sp,0
  251 D1:E6C3 -  -  -  -  ;The following is a framecounter. Mask out if needed.
  252 D1:E6C3 21 01 00 00     ld  hl,1
  253 D1:E6C7 22 F6 31 D0     ld  (xPos),hl   
  254 D1:E6CB DD 7E F5 -      ld  a,(ix+PPU_FRAMECOUNT)
  255 D1:E6CE CD DA B1 D1     call printSmallNumPair
  256 D1:E6D2 3E 20 -  -      ld  a,' '
  257 D1:E6D4 CD AA B1 D1     call printBigFont
  258 D1:E6D8 AF -  -  -      xor a,a
  259 D1:E6D9 ED 62 -  -      sbc hl,hl
  260 D1:E6DB ED 5B 00 00 
              F2 -  -  -      ld  de,($F20000)
  261 D1:E6E0 7A -  -  -      ld  a,d
  262 D1:E6E1 B7 -  -  -      or  a,a     ;Framerate too large to bother calculating. Or far too small.
  263 D1:E6E2 28 30 -  -      jr  z,ppu_noframerate
  264 D1:E6E4 22 00 00 F2     ld  ($F20000),hl
  265 D1:E6E8 21 00 80 00     ld  hl,32768
  266 D1:E6EC AF -  -  -      xor a,a
  267 D1:E6ED 3C -  -  -  _:  inc a
  268 D1:E6EE ED 52 -  -      sbc hl,de
  269 D1:E6F0 30 FB -  -      jr  nc,-_
  270 D1:E6F2 3D -  -  -      dec a
  271 D1:E6F3 B7 -  -  -      or  a,a ;clears necessary flags
  272 D1:E6F4 27 -  -  -      daa
  273 D1:E6F5 D5 -  -  -      push de
  274 D1:E6F6 CD DA B1 D1         call printSmallNumPair
  275 D1:E6FA 3E 2E -  -          ld  a,'.'
  276 D1:E6FC CD AA B1 D1         call printBigFont
  277 D1:E700 D1 -  -  -      pop de
  278 D1:E701 AF -  -  -      xor a,a
  279 D1:E702 5A -  -  -      ld  e,d
  280 D1:E703 57 -  -  -      ld  d,a
  281 D1:E704 21 00 32 00     ld  hl,32768/256*100
  282 D1:E708 3C -  -  -  _:  inc a
  283 D1:E709 ED 52 -  -      sbc hl,de
  284 D1:E70B 30 FB -  -      jr  nc,-_
  285 D1:E70D 3D -  -  -      dec a
  286 D1:E70E B7 -  -  -      or  a,a ;clears necessary flags
  287 D1:E70F 27 -  -  -      daa
  288 D1:E710 CD DA B1 D1     call printSmallNumPair
  289 D1:E714 -  -  -  -  ppu_noframerate:
  290 D1:E714 C9 -  -  -      ret
  291 D1:E715 -  -  -  -  
  292 D1:E715 -  -  -  -      
  293 D1:E715 -  -  -  -      
  294 D1:E715 -  -  -  -  
  295 D1:E715 -  -  -  -  
  296 D1:E715 -  -  -  -  
  297 D1:E715 -  -  -  -  
  298 D1:E715 -  -  -  -  
  299 D1:E715 -  -  -  -  
  300 D1:E715 -  -  -  -  
  301 D1:E715 -  -  -  -  
  302 D1:E715 -  -  -  -  
  303 D1:E715 -  -  -  -      ;set base rom addresses
  304 D1:E715 2A 46 34 D0     ld  hl,(chr_rom_base)
  305 D1:E719 01 00 10 00     ld  bc,$001000
  306 D1:E71D DD 7E E0 -      ld  a,(ix+PPU_CTRL)
  307 D1:E720 E5 -  -  -      push hl
  308 D1:E721 CB 67 -  -          bit 4,a     ;background pattern base offset
  309 D1:E723 28 01 -  -          jr  z,+_
  310 D1:E725 09 -  -  -          add hl,bc
  311 D1:E726 22 20 34 D0 _:      ld  (chr_rom_tiles),hl
  312 D1:E72A E1 -  -  -      pop hl
  313 D1:E72B CB 6F -  -      bit 5,a     ;sprite pattern base offset
  314 D1:E72D 28 01 -  -      jr  z,+_
  315 D1:E72F 09 -  -  -      add hl,bc
  316 D1:E730 22 24 34 D0 _:  ld  (chr_rom_sprites),hl
  317 D1:E734 -  -  -  -      ;set coarse x,y scroll positions. B=Y, C=x
  318 D1:E734 DD 07 FC -      ld  bc,(ix+PPU_XSCROLL)
  319 D1:E737 CB 20 -  -      sla b
  320 D1:E739 CB 20 -  -      sla b
  321 D1:E73B CB 20 -  -      sla b
  322 D1:E73D CB 21 -  -      sla c
  323 D1:E73F CB 21 -  -      sla c
  324 D1:E741 CB 21 -  -      sla c
  325 D1:E743 -  -  -  -      ;set base nametable addresses
  326 D1:E743 21 00 34 D0     ld  hl,nametable00
  327 D1:E747 DD 7E E0 -      ld  a,(ix+PPU_CTRL)
  328 D1:E74A E6 03 -  -      and a,3
  329 D1:E74C 87 -  -  -      add a,a
  330 D1:E74D 87 -  -  -      add a,a
  331 D1:E74E 6F -  -  -      ld  L,a
  332 D1:E74F DD 2F F6 -      ld  (ix+PPU_NAMETABLE_PTR),hl   ;yeah. let's cache this so we don't lose it
  333 D1:E752 -  -  -  -      ;In-place setting of nametable address wrt X,Y
  334 D1:E752 -  -  -  -      ;%------YY YYYXXXXX
  335 D1:E752 ED 17 -  -      ld  de,(hl)
  336 D1:E754 79 -  -  -      ld  a,c
  337 D1:E755 07 -  -  -      rlca
  338 D1:E756 07 -  -  -      rlca
  339 D1:E757 07 -  -  -      rlca
  340 D1:E758 5F -  -  -      ld  e,a
  341 D1:E759 AA -  -  -      xor a,d
  342 D1:E75A E6 03 -  -      and a,%00000011
  343 D1:E75C AA -  -  -      xor a,d
  344 D1:E75D 7B -  -  -      ld  a,e
  345 D1:E75E A8 -  -  -      xor a,b
  346 D1:E75F E6 E0 -  -      and %11100000
  347 D1:E761 A8 -  -  -      xor a,b
  348 D1:E762 5F -  -  -      ld  e,a
  349 D1:E763 -  -  -  -      ;Fetch first attribute byte from address
  350 D1:E763 -  -  -  -      ;%------YY YYYXXXXX -> %------11 11YYYXXX
  351 D1:E763 D5 -  -  -      push de
  352 D1:E764 7A -  -  -          ld  a,d
  353 D1:E765 1F -  -  -          rra
  354 D1:E766 CB 3B -  -          srl e
  355 D1:E768 1F -  -  -          rra
  356 D1:E769 CB 3B -  -          srl e       ;YYYYYXXX
  357 D1:E76B CB C2 -  -          set 0,d
  358 D1:E76D CB CA -  -          set 1,d
  359 D1:E76F 7B -  -  -          ld  a,e
  360 D1:E770 07 -  -  -          rlca
  361 D1:E771 07 -  -  -          rlca
  362 D1:E772 F6 C0 -  -          or  a,%11000000
  363 D1:E774 AB -  -  -          xor a,e
  364 D1:E775 E6 F8 -  -          and a,%11111000
  365 D1:E777 AB -  -  -          xor a,e
  366 D1:E778 5F -  -  -          ld  e,a
  367 D1:E779 1A -  -  -          ld  a,(de)
  368 D1:E77A D1 -  -  -      pop de
  369 D1:E77B -  -  -  -      ;Selects attribute from A from B=Y, C=X in format %0000AA00
  370 D1:E77B -  -  -  -      ;Let's instead use DE %------yy yYyxxxXx y: e6, x: e1
  371 D1:E77B CB 73 -  -      bit 6,e
  372 D1:E77D 28 04 -  -      jr  z,+_
  373 D1:E77F 07 -  -  -      rlca    ;If not zero, shift upper nibble into lower nibble
  374 D1:E780 07 -  -  -      rlca    ;for further selection.
  375 D1:E781 07 -  -  -      rlca
  376 D1:E782 07 -  -  -      rlca
  377 D1:E783 CB 4B -  -  _:  bit 1,e
  378 D1:E785 20 02 -  -      jr  nz,+_   ;If not zero, upper 2 bits of lower nibble already in position
  379 D1:E787 07 -  -  -      rlca        ;Otherwise, move them into position
  380 D1:E788 07 -  -  -      rlca        
  381 D1:E789 E6 0C -  -  _:  and a,%00001100
  382 D1:E78B 32 C1 E7 D1     ld  (ppu_mainTileLoop_attribute_write),a
  383 D1:E78F -  -  -  -  
  384 D1:E78F DD 36 F9 1E     ld  (ix+PPU_VCOUNT),30
  385 D1:E793 FD 2A 28 34 
              D0 -  -  -      ld  iy,(curScreenBuf)
  386 D1:E798 ED 33 20 -      lea iy,iy+32
  387 D1:E79B -  -  -  -  ppu_verticalLoop:
  388 D1:E79B DD 36 FA 20     ld  (ix+PPU_HCOUNT),32
  389 D1:E79F -  -  -  -  ppu_horizontalLoop:
  390 D1:E79F 1A -  -  -      ld  a,(de)
  391 D1:E7A0 E5 -  -  -      push hl
  392 D1:E7A1 D5 -  -  -          push de
  393 D1:E7A2 2A 20 34 D0             ld  hl,(chr_rom_tiles)
  394 D1:E7A6 4F -  -  -              ld  c,a
  395 D1:E7A7 06 10 -  -              ld  b,16
  396 D1:E7A9 ED 4C -  -              mlt bc
  397 D1:E7AB 09 -  -  -              add hl,bc
  398 D1:E7AC DD 36 FB 08             ld  (ix+PPU_TCOUNT),8
  399 D1:E7B0 ED 13 00 -              lea de,iy+0
  400 D1:E7B3 -  -  -  -  ppu_mainTileLoop:
  401 D1:E7B3 7E -  -  -              ld  a,(hl)
  402 D1:E7B4 01 08 00 00             ld  bc,8
  403 D1:E7B8 09 -  -  -              add hl,bc
  404 D1:E7B9 46 -  -  -              ld  b,(hl)
  405 D1:E7BA 4F -  -  -              ld  c,a
  406 D1:E7BB E5 -  -  -              push hl
  407 D1:E7BC 21 00 32 D0                 ld  hl,vram_palette
  408 D1:E7C0 -  -  -  -  ppu_mainTileLoop_attribute_write    .equ $+1
  409 D1:E7C0 3E 00 -  -                  ld  a,0
  410 D1:E7C2 -  -  -  -                  ;Attrib to LSB of VRAM_PALETTE, shift CHR_ROM data to LSB to
  411 D1:E7C2 -  -  -  -                  ;form full address+offset. Copy from palette to buffer.
  412 D1:E7C2 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;1/8 12b apiece
  413 D1:E7CE 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;2/8
  414 D1:E7DA 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;3/8
  415 D1:E7E6 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;4/8
  416 D1:E7F2 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;5/8
  417 D1:E7FE 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;6/8
  418 D1:E80A 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;7/8
  419 D1:E816 6F CB 20 CB 
              15 CB 21 CB 
              15 0C ED A0                 ld  L,a \ sla b \ rl  L \ sla c \ rl  L \ inc c \ ldi   ;8/8 96b tot
  420 D1:E822 21 38 01 00                 ld  hl,320-8
  421 D1:E826 19 -  -  -                  add hl,de
  422 D1:E827 EB -  -  -                  ex  de,hl
  423 D1:E828 E1 -  -  -              pop hl
  424 D1:E829 01 F9 FF FF             ld  bc,-7
  425 D1:E82D 09 -  -  -              add hl,bc
  426 D1:E82E DD 35 FB -              dec (ix+PPU_TCOUNT)
  427 D1:E831 20 80 -  -              jr  nz,ppu_mainTileLoop
  428 D1:E833 -  -  -  -              ;start wrapping up the horizontal loop
  429 D1:E833 D1 -  -  -          pop de
  430 D1:E834 E1 -  -  -      pop hl
  431 D1:E835 7B -  -  -      ld  a,e
  432 D1:E836 13 -  -  -      inc de
  433 D1:E837 AB -  -  -      xor a,e
  434 D1:E838 CB 6F -  -      bit 5,a     ;A carry in X would result in a change in bit 5
  435 D1:E83A 28 14 -  -      jr  z,+_    ;Which means there's no crossover if no sign change
  436 D1:E83C 1B -  -  -      dec de      ;revert those changes in case they cascaded past E
  437 D1:E83D 1C -  -  -      inc e
  438 D1:E83E E6 E0 -  -      and a,%11100000     ;The funny thing is that the XOR above...
  439 D1:E840 AB -  -  -      xor a,e             ;... is still valid for this masking technique.
  440 D1:E841 4F -  -  -      ld  c,a     ;And now let's squirrel this and...
  441 D1:E842 42 -  -  -      ld  b,d     ;...D for later merge magic
  442 D1:E843 7C -  -  -      ld  a,h
  443 D1:E844 EE 04 -  -      xor a,%00000100 ;flip to the next horizontal buffer...
  444 D1:E846 67 -  -  -      ld  h,a
  445 D1:E847 ED 17 -  -      ld  de,(hl)
  446 D1:E849 59 -  -  -      ld  e,c
  447 D1:E84A 78 -  -  -      ld  a,b
  448 D1:E84B AA -  -  -      xor d
  449 D1:E84C E6 03 -  -      and a,%00000011
  450 D1:E84E AA -  -  -      xor d
  451 D1:E84F 57 -  -  -      ld  d,a         ;and map coords into a new nametable
  452 D1:E850 ED 33 08 -  _:  lea iy,iy+8     ;next position on the buffer.
  453 D1:E853 DD 35 FA -      dec (ix+PPU_HCOUNT)
  454 D1:E856 C2 9F E7 D1     jp  nz,ppu_horizontalLoop
  455 D1:E85A -  -  -  -      ;the X buffer *will* have changed at some point and rolled around
  456 D1:E85A -  -  -  -      ;so there's no need to deal with X. Still gotta do Y first...
  457 D1:E85A EB -  -  -      ex  de,hl
  458 D1:E85B 7C -  -  -      ld  a,h
  459 D1:E85C 01 20 00 00     ld  bc,%00100000
  460 D1:E860 09 -  -  -      add hl,bc   ;%-----^yy yYyxxxXx
  461 D1:E861 EB -  -  -      ex  de,hl
  462 D1:E862 4B -  -  -      ld  c,e     ;coordinate storage.
  463 D1:E863 42 -  -  -      ld  b,d
  464 D1:E864 AA -  -  -      xor a,d     ;detect sign change in bit 2
  465 D1:E865 CB 57 -  -      bit 2,a
  466 D1:E867 28 04 -  -      jr  z,+_
  467 D1:E869 7D -  -  -      ld  a,L
  468 D1:E86A EE 08 -  -      xor a,%00001000 ;flip to the next vertical buffer...
  469 D1:E86C 6F -  -  -      ld  L,a
  470 D1:E86D 7D -  -  -  _:  ld  a,L
  471 D1:E86E EE 04 -  -      xor a,%00000100 ;flip back the horizontal buffer that must've been flipped.
  472 D1:E870 6F -  -  -      ld  L,a
  473 D1:E871 ED 17 -  -      ld  de,(hl)
  474 D1:E873 59 -  -  -      ld  e,c
  475 D1:E874 78 -  -  -      ld  a,b
  476 D1:E875 AA -  -  -      xor d
  477 D1:E876 E6 03 -  -      and a,%00000011
  478 D1:E878 AA -  -  -      xor d
  479 D1:E879 57 -  -  -      ld  d,a         ;and map coords into a new nametable
  480 D1:E87A 01 00 09 00     ld  bc,(320*7)+(320-256)
  481 D1:E87E FD 09 -  -      add iy,bc       ;move cursor pointer to the next row
  482 D1:E880 DD 35 F9 -      dec (ix+PPU_VCOUNT)
  483 D1:E883 C2 9B E7 D1     jp  nz,ppu_verticalLoop
  484 D1:E887 C9 -  -  -      ret
  485 D1:E888 -  -  -  -  
  486 D1:E888 -  -  -  -  ;TODO: Test changes to the PPU and link together something in the mapper
  487 D1:E888 -  -  -  -  ;to perform controls. Also. Those freakin' interrupts. DO THEM.
  488 D1:E888 -  -  -  -  ;Might also want to implement a drawlist of sorts since writes to the ports
  489 D1:E888 -  -  -  -  ;ought to be timestamped. That way, we'll be able to tell what the hell is
  490 D1:E888 -  -  -  -  ;being done mid-frame and then make adjustments to such things as
  491 D1:E888 -  -  -  -  ;BG rendering mid-draw, if necessary. Or be able to detect such attempts as
  492 D1:E888 -  -  -  -  ;I don't think I want to deal with that. Only deal with stuff that should
  493 D1:E888 -  -  -  -  ;be occurring within the VBlank period.
  494 D1:E888 -  -  -  -  
  495 D1:E888 -  -  -  -  
  496 D1:E888 -  -  -  -  
  497 D1:E888 -  -  -  -  
  498 D1:E888 -  -  -  -  
  499 D1:E888 -  -  -  -  
  500 D1:E888 -  -  -  -  
  501 D1:E888 -  -  -  -  
  502 D1:E888 -  -  -  -  
  503 D1:E888 -  -  -  -  
  504 D1:E888 -  -  -  -  
Listing for file "main.z80"
  963 D1:E888 -  -  -  -  #include "palette.z80"
Listing for file "C:\Users\Xethyl\Desktop\aCEtoNES\palette.z80"
    1 D1:E888 -  -  -  -  paletteData:
    2 D1:E888 8C 31 E5 01 
              62 0A 60 1A 
              E0 29 00 31 
              00 30 03 28 .dw $318C, $01E5, $0A62, $1A60, $29E0, $3100, $3000, $2803
    3 D1:E898 06 18 08 08 
              09 00 09 00 
              08 01 00 00 
              00 00 00 00 .dw $1806, $0808, $0009, $0009, $0108, $0000, $0000, $0000
    4 D1:E8A8 B5 56 2C 0B 
              E8 1F E5 37 
              23 4F 03 5A 
              A5 58 09 4C .dw $56B5, $0B2C, $1FE8, $37E5, $4F23, $5A03, $58A5, $4C09
    5 D1:E8B8 0D 34 10 1C 
              11 08 B1 00 
              0F 02 00 00 
              00 00 00 00 .dw $340D, $1C10, $0811, $00B1, $020F, $0000, $0000, $0000
    6 D1:E8C8 FF 7F F6 33 
              F2 47 EF 63 
              ED 77 4D 7F 
              EF 7D B3 74 .dw $7FFF, $33F6, $47F2, $63EF, $77ED, $7F4D, $7DEF, $74B3
    7 D1:E8D8 17 60 1A 44 
              BC 30 FC 21 
              59 23 29 25 
              00 00 00 00 .dw $6017, $441A, $30BC, $21FC, $2359, $2529, $0000, $0000
    8 D1:E8E8 FF 7F FC 5F 
              FA 6B F9 73 
              F8 7B B8 7F 
              39 7F BA 7A .dw $7FFF, $5FFC, $6BFA, $73F9, $7BF8, $7FB8, $7F39, $7ABA
    9 D1:E8F8 5C 72 5D 6A 
              BE 5E 3E 5B 
              BD 5B F7 5E 
              00 00 00 00 .dw $725C, $6A5D, $5EBE, $5B3E, $5BBD, $5EF7, $0000, $0000
   10 D1:E908 08 31 62 01 
              E0 09 E0 19 
              80 29 C0 30 
              00 34 01 28 .dw $3108, $0162, $09E0, $19E0, $2980, $30C0, $3400, $2801
   11 D1:E918 04 18 05 08 
              06 00 06 00 
              84 00 00 00 
              00 00 00 00 .dw $1804, $0805, $0006, $0006, $0084, $0000, $0000, $0000
   12 D1:E928 10 56 88 0A 
              24 1F 22 37 
              A1 4A A2 55 
              64 58 07 4C .dw $5610, $0A88, $1F24, $3722, $4AA1, $55A2, $5864, $4C07
   13 D1:E938 0A 38 0C 20 
              0D 08 2D 00 
              6A 01 00 00 
              00 00 00 00 .dw $380A, $200C, $080D, $002D, $016A, $0000, $0000, $0000
   14 D1:E948 39 7F B0 33 
              ED 47 EB 63 
              C9 77 AA 7E 
              6C 7D 4F 74 .dw $7F39, $33B0, $47ED, $63EB, $77C9, $7EAA, $7D6C, $744F
   15 D1:E958 12 60 15 48 
              36 30 56 25 
              93 26 C6 24 
              00 00 00 00 .dw $6012, $4815, $3036, $2556, $2693, $24C6, $0000, $0000
   16 D1:E968 39 7F 76 63 
              B4 6B B3 73 
              73 7F 13 7F 
              94 7E 15 7E .dw $7F39, $6376, $6BB4, $73B3, $7F73, $7F13, $7E94, $7E15
   17 D1:E978 D7 75 B8 69 
              F8 61 78 5E 
              F7 5E 32 5E 
              00 00 00 00 .dw $75D7, $69B8, $61F8, $5E78, $5EF7, $5E32, $0000, $0000
   18 D1:E988 CB 20 44 01 
              C2 01 A0 0D 
              20 19 60 20 
              00 24 03 1C .dw $20CB, $0144, $01C2, $0DA0, $1920, $2060, $2400, $1C03
   19 D1:E998 05 10 08 00 
              09 00 09 00 
              87 00 00 00 
              00 00 00 00 .dw $1005, $0008, $0009, $0009, $0087, $0000, $0000, $0000
   20 D1:E9A8 B4 3D 4B 02 
              E7 0E E4 22 
              22 36 23 41 
              05 40 08 38 .dw $3DB4, $024B, $0EE7, $22E4, $3622, $4123, $4005, $3808
   21 D1:E9B8 0C 24 0F 10 
              11 00 30 00 
              4E 01 00 00 
              00 00 00 00 .dw $240C, $100F, $0011, $0030, $014E, $0000, $0000, $0000
   22 D1:E9C8 DE 62 75 1F 
              F1 33 ED 47 
              4C 5B 2C 66 
              EE 64 12 5C .dw $62DE, $1F75, $33F1, $47ED, $5B4C, $662C, $64EE, $5C12
   23 D1:E9D8 16 48 19 34 
              1B 20 1B 15 
              58 12 89 18 
              00 00 00 00 .dw $4816, $3419, $201B, $151B, $1258, $1889, $0000, $0000
   24 D1:E9E8 DE 62 1A 47 
              59 4F 57 57 
              F7 5E 97 62 
              18 66 99 5D .dw $62DE, $471A, $4F59, $5757, $5EF7, $6297, $6618, $5D99
   25 D1:E9F8 5B 59 5C 4D 
              BD 45 1D 42 
              9C 42 D5 41 
              00 00 00 00 .dw $595B, $4D5C, $45BD, $421D, $429C, $41D5, $0000, $0000
   26 D1:EA08 C8 20 22 01 
              80 01 80 0D 
              20 19 60 24 
              00 24 01 1C .dw $20C8, $0122, $0180, $0D80, $1920, $2460, $2400, $1C01
   27 D1:EA18 03 10 05 00 
              06 00 06 00 
              84 00 00 00 
              00 00 00 00 .dw $1003, $0005, $0006, $0006, $0084, $0000, $0000, $0000
   28 D1:EA28 90 41 27 02 
              A4 12 A2 26 
              21 36 21 41 
              03 44 06 38 .dw $4190, $0227, $12A4, $26A2, $3621, $4121, $4403, $3806
   29 D1:EA38 09 28 0C 14 
              0D 04 0C 00 
              2A 01 00 00 
              00 00 00 00 .dw $2809, $140C, $040D, $000C, $012A, $0000, $0000, $0000
   30 D1:EA48 B9 66 50 23 
              CD 37 CA 4B 
              49 5B 2A 6A 
              EC 68 0F 5C .dw $66B9, $2350, $37CD, $4BCA, $5B49, $6A2A, $68EC, $5C0F
   31 D1:EA58 12 4C 15 34 
              16 24 F5 18 
              33 16 86 18 
              00 00 00 00 .dw $4C12, $3415, $2416, $18F5, $1633, $1886, $0000, $0000
   32 D1:EA68 B9 66 F5 4A 
              14 53 13 5B 
              F2 62 73 66 
              F4 65 95 61 .dw $66B9, $4AF5, $5314, $5B13, $62F2, $6673, $65F4, $6195
   33 D1:EA78 56 5D 57 51 
              98 49 F8 45 
              77 46 D1 45 
              00 00 00 00 .dw $5D56, $5157, $4998, $45F8, $4677, $45D1, $0000, $0000
   34 D1:EA88 C9 25 04 02 
              81 06 60 16 
              00 22 20 29 
              40 24 01 1C .dw $25C9, $0204, $0681, $1660, $2200, $2920, $2440, $1C01
   35 D1:EA98 03 0C 05 00 
              07 00 47 00 
              26 01 00 00 
              00 00 00 00 .dw $0C03, $0005, $0007, $0047, $0126, $0000, $0000, $0000
   36 D1:EAA8 11 47 49 07 
              E6 1B E3 2F 
              41 3F 21 4A 
              E3 44 06 38 .dw $4711, $0749, $1BE6, $2FE3, $3F41, $4A21, $44E3, $3806
   37 D1:EAB8 09 24 0C 10 
              0E 00 EE 00 
              4C 02 20 00 
              00 00 00 00 .dw $2409, $100C, $000E, $00EE, $024C, $0020, $0000, $0000
   38 D1:EAC8 FA 6B F3 27 
              EF 3B EC 53 
              EA 67 8A 6F 
              4C 6E 0F 61 .dw $6BFA, $27F3, $3BEF, $53EC, $67EA, $6F8A, $6E4C, $610F
   39 D1:EAD8 72 48 75 34 
              37 21 57 16 
              B5 1B 67 1D 
              00 00 00 00 .dw $4872, $3475, $2137, $1657, $1BB5, $1D67, $0000, $0000
   40 D1:EAE8 FA 6B F7 4F 
              F6 57 F4 63 
              F4 67 F4 6F 
              94 6B 16 67 .dw $6BFA, $4FF7, $57F6, $63F4, $67F4, $6FF4, $6B94, $6716
   41 D1:EAF8 D7 5E D8 56 
              39 4F 99 4B 
              F8 4B 52 4B 
              00 00 00 00 .dw $5ED7, $56D8, $4F39, $4B99, $4BF8, $4B52, $0000, $0000
   42 D1:EB08 47 25 62 01 
              E0 05 E0 11 
              80 21 E0 24 
              00 24 00 1C .dw $2547, $0162, $05E0, $11E0, $2180, $24E0, $2400, $1C00
   43 D1:EB18 02 0C 04 00 
              05 00 05 00 
              A4 00 00 00 
              00 00 00 00 .dw $0C02, $0004, $0005, $0005, $00A4, $0000, $0000, $0000
   44 D1:EB28 4E 46 87 06 
              44 1B 41 2F 
              A0 3E C0 45 
              A2 44 05 38 .dw $464E, $0687, $1B44, $2F41, $3EA0, $45C0, $44A2, $3805
   45 D1:EB38 08 24 0A 10 
              0C 00 6B 00 
              6A 01 00 00 
              00 00 00 00 .dw $2408, $100A, $000C, $006B, $016A, $0000, $0000, $0000
   46 D1:EB48 77 6B CF 27 
              EC 3F E9 53 
              E8 63 E8 6E 
              CA 6D 8D 60 .dw $6B77, $27CF, $3FEC, $53E9, $63E8, $6EE8, $6DCA, $608D
   47 D1:EB58 10 48 13 34 
              94 24 94 19 
              B2 1A E5 1C 
              00 00 00 00 .dw $4810, $3413, $2494, $1994, $1AB2, $1CE5, $0000, $0000
   48 D1:EB68 77 6B B4 4F 
              F3 57 F2 63 
              B1 67 51 6B 
              D2 6A 53 66 .dw $6B77, $4FB4, $57F3, $63F2, $67B1, $6B51, $6AD2, $6653
   49 D1:EB78 14 5E 15 56 
              56 4E B6 4A 
              35 4B 70 4A 
              00 00 00 00 .dw $5E14, $5615, $4E56, $4AB6, $4B35, $4A70, $0000, $0000
   50 D1:EB88 28 1D 63 01 
              C1 01 C0 09 
              40 19 A0 20 
              00 20 01 18 .dw $1D28, $0163, $01C1, $09C0, $1940, $20A0, $2000, $1801
   51 D1:EB98 03 0C 05 00 
              06 00 06 00 
              C5 00 00 00 
              00 00 00 00 .dw $0C03, $0005, $0006, $0006, $00C5, $0000, $0000, $0000
   52 D1:EBA8 10 3A 89 02 
              06 0F 03 23 
              41 32 61 3D 
              43 3C 05 30 .dw $3A10, $0289, $0F06, $2303, $3241, $3D61, $3C43, $3005
   53 D1:EBB8 08 20 0C 0C 
              0D 00 6D 00 
              8B 01 00 00 
              00 00 00 00 .dw $2008, $0C0C, $000D, $006D, $018B, $0000, $0000, $0000
   54 D1:EBC8 59 5B B2 1B 
              EE 2F EB 43 
              89 57 89 5E 
              6B 5D 6E 54 .dw $5B59, $1BB2, $2FEE, $43EB, $5789, $5E89, $5D6B, $546E
   55 D1:EBD8 11 40 15 2C 
              97 18 96 11 
              B4 12 C6 14 
              00 00 00 00 .dw $4011, $2C15, $1897, $1196, $12B4, $14C6, $0000, $0000
   56 D1:EBE8 59 5B 76 43 
              B5 4B B4 53 
              73 5B F3 5E 
              94 5E 15 5A .dw $5B59, $4376, $4BB5, $53B4, $5B73, $5EF3, $5E94, $5A15
   57 D1:EBF8 D6 51 D8 49 
              38 42 98 3E 
              17 3F 52 3E 
              00 00 00 00 .dw $51D6, $49D8, $4238, $3E98, $3F17, $3E52, $0000, $0000
   58 D1:EC08 E7 1C 42 01 
              A0 01 A0 0D 
              40 19 80 20 
              00 20 00 18 .dw $1CE7, $0142, $01A0, $0DA0, $1940, $2080, $2000, $1800
   59 D1:EC18 02 0C 04 00 
              05 00 05 00 
              84 00 00 00 
              00 00 00 00 .dw $0C02, $0004, $0005, $0005, $0084, $0000, $0000, $0000
   60 D1:EC28 CE 39 47 02 
              C4 0E C1 22 
              40 32 40 3D 
              22 3C 05 30 .dw $39CE, $0247, $0EC4, $22C1, $3240, $3D40, $3C22, $3005
   61 D1:EC38 08 20 0A 0C 
              0C 00 2B 00 
              4A 01 00 00 
              00 00 00 00 .dw $2008, $0C0A, $000C, $002B, $014A, $0000, $0000, $0000
   62 D1:EC48 F7 5E 6F 1F 
              EC 33 E9 47 
              68 57 68 62 
              2A 61 2D 54 .dw $5EF7, $1F6F, $33EC, $47E9, $5768, $6268, $612A, $542D
   63 D1:EC58 10 44 13 30 
              34 1C 34 11 
              72 12 A5 14 
              00 00 00 00 .dw $4410, $3013, $1C34, $1134, $1272, $14A5, $0000, $0000
   64 D1:EC68 F7 5E 34 47 
              73 4B 72 57 
              31 5B B1 5E 
              52 5E D3 59 .dw $5EF7, $4734, $4B73, $5772, $5B31, $5EB1, $5E52, $59D3
   65 D1:EC78 94 55 95 49 
              D6 45 56 3E 
              B5 3E 10 42 
              00 00 00 00 .dw $5594, $4995, $45D6, $3E56, $3EB5, $4210, $0000, $0000
Listing for file "main.z80"
  964 D1:EC88 -  -  -  -  
  965 D1:EC88 -  -  -  -  .echo "Main program size: ",$-programStart
