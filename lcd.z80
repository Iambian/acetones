#include "ti84pce.inc"
#include "defs.inc"

;Function list:
; fastCopy - Swaps drawing buffer to display what is currently written there.
; startGfx - Configures LCD to run in graphx mode. UNSAFE TO RUN MORE THAN ONCE
; stopGfx - Restores LCD configuration to TI-OS default.
; configureScreen - Swaps screen configuration betwen current and stored.
; setDefaultPalette - Sets default (XLIBC) color palette.
; clearTextBuf - no inputs. Sets text buffer to all spaces.
; printTextBuf - no inputs. Mirrors buffer to screen.
; setLineStart - A=xpos. Set xPos and linestart
; setCurLine - A=ypos. Set yPos.
; newLine - no inputs. sets linestart = xPos, increments yPos
; newPage - no inputs. sets linestart = xPos, yPos = 0
; printString - HL=address to string. destroys all.
; printBigFont - A=ASCII char to print at xPos,yPos. Advances xPos by 1.
; printSmallNumPair - A=0-255 to print at xPos,Ypos. Advances xPos by 1.
; calculateScreenPtr - Converts xPos,yPos into screen buffer address.
;
;
;
;
;
;
;




;-----------------------------------------------------------------------------
;Screen hardware interface stuff

;It ought to be called "bufSwap" but I just can't. I won't.
fastCopy:
    ld  de,screenBuf1
    ld  hl,(mpLcdBase)
    ld  (curScreenBuf),hl
    or  a,a
    sbc hl,de
    ex  de,hl
    jr  nz,+_
    ld  hl,screenBuf2
_:  ld  (mpLcdBase),hl
    ret

stopGfx:
    call _boot_ClearVRAM
    ld  de,lcdNormalMode
    ld  bc,screenBuf1
    jr  configureScreen

startGfx:
    call _boot_ClearVRAM
    ld  de,lcdWatermark+lcdIntFront+lcdPwr+lcdBgr+lcdBpp8
    ld  bc,screenBuf1
configureScreen:
    ld  hl,mpLcdBase
    ld  (hl),bc
    ld  L,lcdCtrl
    ld  (hl),de
    ld  L,lcdTiming0 + 1
    ld  bc,8
    ld  de,screenSettings
_:  ld  a,(de)
    ldi
    dec hl
    ld  (hl),a
    inc hl
    jp  pe,-_
    ld  hl,screenBuf2
    ld  (curScreenBuf),hl
;Also copied from graphx
setDefaultPalette:
	ld	de,mpLcdPalette	    ; address of mmio palette
	ld	b,e			        ; b = 0
_:	ld	a,b
	rrca
	xor	a,b
	and	a,224
	xor	a,b
	ld	(de),a
	inc	de
	ld	a,b
	rla
	rla
	rla
	ld	a,b
	rra
	ld	(de),a
	inc	de
	inc	b
	jr	nz,-_		    ; loop for 256 times to fill palette
	ret

screenSettings:
;Copied from my old Falldown2 project, which was also copied from graphx.asm
;	.db	14 shl 2			; PPL shl 2
	.db	7					; HSW
	.db	87					; HFP
	.db	63					; HBP
	.dw	(0 >> 10)+319		; (VSW shl 10)+LPP
	.db	179					; VFP
	.db	0					; VBP
	.db	(0 >> 6)+(0 >> 5)+0	; (ACB shl 6)+(CLKSEL shl 5)+PCD_LO
;  H = ((PPL+1)*16)+(HSW+1)+(HFP+1)+(HBP+1) = 240+8+88+64 = 400
;  V = (LPP+1)+(VSW+1)+VFP+VBP = 320+1+179+0 = 500
; CC = H*V*PCD*2 = 400*500*2*2 = 800000
; Hz = 48000000/CC = 60


;-----------------------------------------------------------------------------
; Text Rendering

clearTextBuf:
    ld  hl,NAMETABLE1
    ld  de,NAMETABLE1+1
    ld  bc,1023
    ld  (hl),' '
    ldir
    ret

printTextBuf:
    ld  hl,(xPos)
    ld  (printTextBuf_smcPosRecovery),hl
    ld  hl,NAMETABLE1
    xor a,a
    ld  (yPos),a
    ld  c,30
_:  ld  a,8
    ld  (xPos),a
    ld  b,$20
_:  ld  a,(hl)
    inc hl
    push bc
        push hl
            call printBigFont
        pop hl
    pop bc
    djnz -_
    ld  a,(yPos)
    inc a
    ld  (yPos),a
    dec  c
    jr  nz,--_
printTextBuf_smcPosRecovery .equ $+1
    ld  hl,0
    ld  (xPos),hl
    ret

;A=column to start on
setLineStart:
    ld  (xPos),a
    ld  (linestart),a
    ret

;A=row to start on
setCurLine:
    ld  (yPos),a
    ret

newPage:
    ld  a,$FF
    ld  (yPos),a
newLine:
    ld  a,(linestart)
    ld  (xPos),a
    ld  a,(yPos)
    inc a
    ld  (yPos),a
    ret

    
    

;HL=address to string
printString:
    ld  a,(hl)
    inc hl
    or  a,a
    ret z
    cp  a,'\n'
    jr nz,+_
    call newLine
    jr  printString
_:  push hl
        call printBigFont
    pop hl
    jr printString


;in: A=chrToPrint
printBigFont:
    call calculateScreenPtr
    ex  de,hl
    ld  L,a
    ld  H,8
    mlt hl
    ld  bc,graphx_textdata
    add hl,bc
    ex  de,hl
    ld  c,8
_:  ld  b,8
    ld  a,(de)
_:  add a,a
fontBGColor_var .equ $+1
    ld  (hl),FONTBGCOLOR
    jr  nc,$+4
fontFGColor_var .equ $+1
    ld  (hl),FONTFGCOLOR
    inc hl
    djnz -_
    ld  a,c
    ld  bc,320-8
    add hl,bc
    ld  c,a
    inc de
    dec c
    jr  nz,--_
    ld  hl,xPos
    inc (hl)
    ret

;A= 0-255 numeric value to display as hex
printSmallNumPair:
    call calculateScreenPtr
    push af
        rra
        rra
        rra
        rra
        call +_
    pop af
    call +_
    ld  hl,xPos
    inc (hl)
    ret
_:  and a,$0F
    ld  bc,320
    add hl,bc   ;drop height by one. These small chars are *short*
    ex  de,hl
    ld  L,a
    ld  H,3
    mlt hl
    ld  bc,SmallHexFont
    add hl,bc
    ex  de,hl
    ld  c,3
    jr  printSmallNumPair_2ndHalf
printSmallNumPair_1stHalf:
    ld  a,(de)
    ld  b,4
_:  add a,a
    ld  (hl),FONTBGCOLOR
    jr  nc,$+4
    ld  (hl),FONTFGCOLOR
    inc hl
    djnz -_
    ld  a,c
    ld  bc,320-4
    add hl,bc
    ld  c,a
printSmallNumPair_2ndHalf:
    ld  a,(de)
    rlca
    rlca
    rlca
    rlca
    ld  b,4
_:  add a,a
    ld  (hl),FONTBGCOLOR
    jr  nc,$+4
    ld  (hl),FONTFGCOLOR
    inc hl
    djnz -_
    inc de
    ld  a,c
    ld  bc,320-4
    add hl,bc
    ld  c,a
    dec c
    jr  nz,printSmallNumPair_1stHalf
    ld  bc,-(320*(1+5))+4
    add hl,bc
    ret

calculateScreenPtr:
    ;xcoord: x * 8 
    ;ycoord: 320 * 8 * y
    ;coord: (8x)+320*8y -> 8(x+320y)
    ld  de,(xPos)
    ld  L,d     ;yPos
    ld  h,160
    mlt hl
    add hl,hl
    ld  d,1
    mlt de      ;DE=E. Clears high bytes.
    add hl,de
    add hl,hl
    add hl,hl
    add hl,hl
    ld  de,(curScreenBuf)
    add hl,de
    ret









;-----------------------------------------------------------------------------
; Data Section

graphx_textdata		.EQU $-(8*' ')		;points to what would be start of ASCII
.db	$00,$00,$00,$00,$00,$00,$00,$00 ;
.db	$C0,$C0,$C0,$C0,$C0,$00,$C0,$00 ; !
.db	$D8,$D8,$D8,$00,$00,$00,$00,$00 ; "
.db	$6C,$6C,$FE,$6C,$FE,$6C,$6C,$00 ; #
.db	$18,$7E,$C0,$7C,$06,$FC,$18,$00 ; $
.db	$00,$C6,$CC,$18,$30,$66,$C6,$00 ; %
.db	$38,$6C,$38,$76,$DC,$CC,$76,$00 ; &
.db	$30,$30,$60,$00,$00,$00,$00,$00 ; '
.db	$30,$60,$C0,$C0,$C0,$60,$30,$00 ; (
.db	$C0,$60,$30,$30,$30,$60,$C0,$00 ; )
.db	$00,$66,$3C,$FF,$3C,$66,$00,$00 ; *
.db	$00,$30,$30,$FC,$FC,$30,$30,$00 ; +
.db	$00,$00,$00,$00,$00,$60,$60,$C0 ; ,
.db	$00,$00,$00,$FC,$00,$00,$00,$00 ; -
.db	$00,$00,$00,$00,$00,$C0,$C0,$00 ; .
.db	$06,$0C,$18,$30,$60,$C0,$80,$00 ; /
.db	$7C,$CE,$DE,$F6,$E6,$C6,$7C,$00 ; 0
.db	$30,$70,$30,$30,$30,$30,$FC,$00 ; 1
.db	$7C,$C6,$06,$7C,$C0,$C0,$FE,$00 ; 2
.db	$FC,$06,$06,$3C,$06,$06,$FC,$00 ; 3
.db	$0C,$CC,$CC,$CC,$FE,$0C,$0C,$00 ; 4
.db	$FE,$C0,$FC,$06,$06,$C6,$7C,$00 ; 5
.db	$7C,$C0,$C0,$FC,$C6,$C6,$7C,$00 ; 6
.db	$FE,$06,$06,$0C,$18,$30,$30,$00 ; 7
.db	$7C,$C6,$C6,$7C,$C6,$C6,$7C,$00 ; 8
.db	$7C,$C6,$C6,$7E,$06,$06,$7C,$00 ; 9
.db	$00,$C0,$C0,$00,$00,$C0,$C0,$00 ; :
.db	$00,$60,$60,$00,$00,$60,$60,$C0 ; ;
.db	$18,$30,$60,$C0,$60,$30,$18,$00 ; <
.db	$00,$00,$FC,$00,$FC,$00,$00,$00 ; =
.db	$C0,$60,$30,$18,$30,$60,$C0,$00 ; >
.db	$78,$CC,$18,$30,$30,$00,$30,$00 ; ?
.db	$7C,$C6,$DE,$DE,$DE,$C0,$7E,$00 ; @
.db	$38,$6C,$C6,$C6,$FE,$C6,$C6,$00 ; A
.db	$FC,$C6,$C6,$FC,$C6,$C6,$FC,$00 ; B
.db	$7C,$C6,$C0,$C0,$C0,$C6,$7C,$00 ; C
.db	$F8,$CC,$C6,$C6,$C6,$CC,$F8,$00 ; D
.db	$FE,$C0,$C0,$F8,$C0,$C0,$FE,$00 ; E
.db	$FE,$C0,$C0,$F8,$C0,$C0,$C0,$00 ; F
.db	$7C,$C6,$C0,$C0,$CE,$C6,$7C,$00 ; G
.db	$C6,$C6,$C6,$FE,$C6,$C6,$C6,$00 ; H
.db	$7E,$18,$18,$18,$18,$18,$7E,$00 ; I
.db	$06,$06,$06,$06,$06,$C6,$7C,$00 ; J
.db	$C6,$CC,$D8,$F0,$D8,$CC,$C6,$00 ; K
.db	$C0,$C0,$C0,$C0,$C0,$C0,$FE,$00 ; L
.db	$C6,$EE,$FE,$FE,$D6,$C6,$C6,$00 ; M
.db	$C6,$E6,$F6,$DE,$CE,$C6,$C6,$00 ; N
.db	$7C,$C6,$C6,$C6,$C6,$C6,$7C,$00 ; O
.db	$FC,$C6,$C6,$FC,$C0,$C0,$C0,$00 ; P
.db	$7C,$C6,$C6,$C6,$D6,$DE,$7C,$06 ; Q
.db	$FC,$C6,$C6,$FC,$D8,$CC,$C6,$00 ; R
.db	$7C,$C6,$C0,$7C,$06,$C6,$7C,$00 ; S
.db	$FF,$18,$18,$18,$18,$18,$18,$00 ; T
.db	$C6,$C6,$C6,$C6,$C6,$C6,$FE,$00 ; U
.db	$C6,$C6,$C6,$C6,$C6,$7C,$38,$00 ; V
.db	$C6,$C6,$C6,$C6,$D6,$FE,$6C,$00 ; W
.db	$C6,$C6,$6C,$38,$6C,$C6,$C6,$00 ; X
.db	$C6,$C6,$C6,$7C,$18,$30,$E0,$00 ; Y
.db	$FE,$06,$0C,$18,$30,$60,$FE,$00 ; Z
.db	$F0,$C0,$C0,$C0,$C0,$C0,$F0,$00 ; [
.db	$C0,$60,$30,$18,$0C,$06,$02,$00 ; \
.db	$F0,$30,$30,$30,$30,$30,$F0,$00 ; ]
.db	$10,$38,$6C,$C6,$00,$00,$00,$00 ; ^
.db	$00,$00,$00,$00,$00,$00,$00,$FF ; _
.db	$C0,$C0,$60,$00,$00,$00,$00,$00 ; `
.db	$00,$00,$7C,$06,$7E,$C6,$7E,$00 ; a
.db	$C0,$C0,$C0,$FC,$C6,$C6,$FC,$00 ; b
.db	$00,$00,$7C,$C6,$C0,$C6,$7C,$00 ; c
.db	$06,$06,$06,$7E,$C6,$C6,$7E,$00 ; d
.db	$00,$00,$7C,$C6,$FE,$C0,$7C,$00 ; e
.db	$1C,$36,$30,$78,$30,$30,$78,$00 ; f
.db	$00,$00,$7E,$C6,$C6,$7E,$06,$FC ; g
.db	$C0,$C0,$FC,$C6,$C6,$C6,$C6,$00 ; h
.db	$18,$00,$38,$18,$18,$18,$3C,$00 ; i
.db	$06,$00,$06,$06,$06,$06,$C6,$7C ; j
.db	$C0,$C0,$CC,$D8,$F8,$CC,$C6,$00 ; k
.db	$38,$18,$18,$18,$18,$18,$3C,$00 ; l
.db	$00,$00,$CC,$FE,$FE,$D6,$D6,$00 ; m
.db	$00,$00,$FC,$C6,$C6,$C6,$C6,$00 ; n
.db	$00,$00,$7C,$C6,$C6,$C6,$7C,$00 ; o
.db	$00,$00,$FC,$C6,$C6,$FC,$C0,$C0 ; p
.db	$00,$00,$7E,$C6,$C6,$7E,$06,$06 ; q
.db	$00,$00,$FC,$C6,$C0,$C0,$C0,$00 ; r
.db	$00,$00,$7E,$C0,$7C,$06,$FC,$00 ; s
.db	$30,$30,$FC,$30,$30,$30,$1C,$00 ; t
.db	$00,$00,$C6,$C6,$C6,$C6,$7E,$00 ; u
.db	$00,$00,$C6,$C6,$C6,$7C,$38,$00 ; v
.db	$00,$00,$C6,$C6,$D6,$FE,$6C,$00 ; w
.db	$00,$00,$C6,$6C,$38,$6C,$C6,$00 ; x
.db	$00,$00,$C6,$C6,$C6,$7E,$06,$FC ; y
.db	$00,$00,$FE,$0C,$38,$60,$FE,$00 ; z
.db	$1C,$30,$30,$E0,$30,$30,$1C,$00 ; {
.db	$C0,$C0,$C0,$00,$C0,$C0,$C0,$00 ; |
.db	$E0,$30,$30,$1C,$30,$30,$E0,$00 ; }
.db	$76,$DC,$00,$00,$00,$00,$00,$00 ; ~
.db	$00,$10,$38,$6C,$C6,$C6,$FE,$00 ; â–³

;Copied from the Escheron: Twilight over Ragnoth project
;whose format was copied from a (then-)authorized source
;for DoorsCS (I think? The one for the 83+) by "Kerm Martian".
SmallHexFont:
.db $4E,$AA,$AE				;zero
.db $44,$C4,$4E				;one
.db $4C,$24,$8E				;two
.db $4C,$24,$2C				;three
.db $48,$AE,$22				;four
.db $4E,$8C,$2C				;five
.db $45,$8E,$AE				;six
.db $4E,$24,$88				;seven
.db $4E,$AE,$AE				;eight
.db $4E,$AE,$2C				;nine
.db $44,$AE,$AA				;A
.db $4C,$AC,$AC				;B
.db $46,$88,$86				;C
.db $4C,$AA,$AC				;D
.db $4E,$8C,$8E				;E
.db $4E,$8C,$88				;F



