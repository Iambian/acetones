

#include "defs.inc"
.org usermem-2
.db $EF, $7B



a6502_module_start:
a6502_init:
    ;stuff
    ;stuff
    ;stuff

    ;Setup normal registers
    ld  iy,8
    ;Setup shadow registers
    exx
    exx

    call a6502_flagsToNativeLUTGen
;------------------------------
;Runs instruction at REGPC while
;reloading E,HL
a6502_reload_then_getInstruction:
    ld.s bc,(ix+REGPC)
    ld  e,c
    ld  c,BASETABLE_STRIDE
    mlt bc
    ld  hl,PAGETABLE
    ld  hl,(hl)
    ld  b,0
    ld  c,e
    add hl,bc
    jr  a6502_getInstruction
;------------------------------
a6502_getInstruction_exx:
    exx
    jr  a6502_getInstruction
;------------------------------
a6502_newfetch_pagecross:
    ld  d,(ix+REGPC+1)
    inc d
    ld.s (ix+REGPC),de
    ld  b,d
    ld  c,BASETABLE_STRIDE
    mlt bc
    ld  hl,PAGETABLE
    ld  hl,(hl)
    jr  a6502_newfetch_continue
;------------------------------
a6502_nextargfetch_pagecross:
    ld  d,(ix+REGPC+1)
    inc d
    ld.s (ix+REGPC),de
    ld  b,d
    ld  c,BASETABLE_STRIDE
    mlt bc
    ld  hl,PAGETABLE
    ld  hl,(hl)
    jr  a6502_nextargfetch_continue
;------------------------------
a6502_newfetch_exx:
    exx
a6502_newfetch:
    inc hl
    inc e
    jr  z,a6502_newfetch_pagecross
a6502_newfetch_continue:
a6502_getInstruction:
    ld  a,(hl)
    inc hl
    inc e
    jr  z,a6502_nextargfetch_pagecross
a6502_nextargfetch_continue:
    exx
    lea hl,iy+0
a6502_int_timer         .equ $+1
    ld  bc,-27939
    add hl,bc
    jr  c,a6502_int_take
a6502_int_cancel_take:
    ld  L,a
    ld  h,BASETABLE_STRIDE
    ld  sp,CALLTABLE
    add hl,sp
    ld  sp,hl
    pop bc
    add iy,bc   ;advance instruction timer
    exx
    ret

a6502_int_take:
    jr  a6502_int_cancel_take

;##############################################################################

;          ###  #   # ####  ####   ###  #   # ##### # ##  # #####  ###             
;         #     #   # #   # #   # #   # #   #   #   # ##  # #     # 
;          ###  #   # ####  ####  #   # #   #   #   # # # # ###    ###          
;             # #   # #   # #   # #   # #   #   #   # #  ## #         #       
;          ###   ###  ####  #   #  ###   ###    #   # #  ## #####  ###                             

;##############################################################################

;Call this during init.
;Src: [12-- --34]  => [13-- -2-4]
a6502_flagsToNativeLUTGen:
    ld  hl,flags6502toNativeLUT
_:  ld  c,l     ;keep original copy in C, for final step
    ld  a,l
    rlca
    rlca
    rlca
    rlca   
    ld  b,a     ;bit 2 moved into position.
    rlca        ;bit 3 moved into position
    xor a,b
    and a,%11111011 ;Eh. Just trust me on this one. we have src 2 and 3 in place
    xor a,b
    xor a,c
    and a,%01111110 ;src 1 and 4 hasn't moved, so put them in place.
    xor a,c
    ld  (hl),a      ;z80 maskout value %00111010 with LUT not-A operand on xor.
    inc l
    jr  nz,-_
    ret

    
    





;==============================================================================
;
;    #   # ##### #   #  ###  #### #   #     #   #  ###  ####  #####  ###  
;    ## ## #     ## ## #   # #   # # #      ## ## #   # #   # #     #     
;    # # # ###   # # # #   # ####   #       # # # #   # #   # ###    ###  
;    # # # #     # # # #   # #  ##  #       #   # #   # #   # #         # 
;    #   # ##### #   #  ###  #   #  #       #   #  ###  ####  #####  ###  
;
;==============================================================================

;:You probably shouldn't.
a6502_adrmode_read_imm:
    ld  a,(hl)
    ret

;That ret is making it slow.
a6502_adrmode_read_zp:
    ld  bc,ZEROPAGE
    ld  c,(hl)
    ld  a,(bc)
    ret

a6502_adrmode_read_zpx:
    ld  bc,ZEROPAGE
    ld  a,(ix+REGX)
    add a,(hl)
    ld  c,a
    ld  a,(bc)
    ret

a6502_adrmode_read_zpy:
    ld  bc,ZEROPAGE
    ld  a,(ix+REGY)
    add a,(hl)
    ld  c,a
    ld  a,(bc)
    ret

;Oh yeah. It gets juicy.
a6502_adrmode_read_abs:
    ld  a,(hl)
    inc hl
    inc e
    jr  nz,+_
    ld  d,(ix+REGPC+1)
    inc d
    ld.s (ix+REGPC),de
    ld  b,d
    ld  c,BASETABLE_STRIDE
    mlt bc
    ld  hl,PAGETABLE
    ld  hl,(hl)
    add hl,bc
_:  exx
    ld  e,a         ;LSB
    exx
    ld  a,(hl)
    exx
    ld  b,a
    ld  d,a
    ld  c,BASETABLE_STRIDE
    mlt bc
    ld  hl,PAGETABLE
    add hl,bc
    ld  hl,(hl)
    ld  b,0
    ld  c,e
    add hl,bc
    ret                     ;D=MSB, C=LSB, HL=address

a6502_adrmode_read_absx:
    ld  a,(hl)              ;read first byte of abs val
    inc hl
    inc e
    jr  nz,+_               ;and adjust page if needed
    ld  d,(ix+REGPC+1)
    inc d
    ld.s (ix+REGPC),de
    ld  c,BASETABLE_STRIDE
    ld  b,d
    mlt bc
    add hl,bc
_:  exx
    add a,(ix+REGX)         ;add X to abs lsb
    ld  e,a                 ;and store to shadow E
    exx
    ld  a,(hl)              ;read second byte of abs val
    exx
    jr  nc,+_               ;adjust timing if page increment
    ADDCYC(1)
    inc a
_:  ld  b,a                 ;MSB to page lookup. MSB peserved to A
    ld  c,BASETABLE_STRIDE
    mlt bc
    ld  hl,PAGETABLE
    add hl,bc
    ld  hl,(hl)             ;page address found
    ld  b,0
    ld  c,e
    add hl,bc
    ld  d,a                 ;D=MSB, C=LSB, HL=address
    ret

a6502_adrmode_read_absy:
    ld  a,(hl)          ;fetch LSB of abs val
    inc hl
    inc e
    jr  nz,+_           ;page adjust if needed
    ld  d,(ix+REGPC+1)
    inc d
    ld.s (ix+REGPC),de
    ld  c,BASETABLE_STRIDE
    ld  b,d
    mlt bc
    add hl,bc
_:  exx
    add a,(ix+REGY)
    ld  e,a                 ;and store to shadow E
    exx
    ld  a,(hl)              ;read second byte of abs val
    exx
    jr  nc,+_               ;adjust timing if page increment
    ADDCYC(1)
    inc a
_:  ld  b,a                 ;MSB to page lookup. MSB peserved to A
    ld  c,BASETABLE_STRIDE
    mlt bc
    ld  hl,PAGETABLE
    add hl,bc
    ld  hl,(hl)             ;page address found
    ld  b,0
    ld  c,e
    add hl,bc
    ld  d,a                 ;D=MSB, C=LSB, HL=address
    ret

;Much the same as above, but does not adjust cycle count on page crossing
a6502_adrmode_write_absx:
    ld  a,(hl)
    inc hl
    inc e
    jr  nz,+_
    ld  d,(ix+REGPC+1)
    inc d
    ld.s (ix+REGPC),de
    ld  c,BASETABLE_STRIDE
    ld  b,d
    mlt bc
    add hl,bc
_:  exx
    add a,(ix+REGX)
    ld  e,a     ;LSB
    exx
    ld  a,(hl)
    exx
    adc a,0     ;MSB adjusted if needed
    ld  b,a     ;MSB D and A
    ld  c,BASETABLE_STRIDE
    mlt bc
    ld  hl,PAGETABLE
    add hl,bc
    ld  hl,(hl)
    ld  b,0
    ld  c,e
    add hl,bc
    ld  d,a     ;D=MSB, C=LSB, HL=address
    ret


a6502_adrmode_write_absy:
    ld  a,(hl)
    inc hl
    inc e
    jr  nz,+_
    ld  d,(ix+REGPC+1)
    inc d
    ld.s (ix+REGPC),de
    ld  c,BASETABLE_STRIDE
    ld  b,d
    mlt bc
    add hl,bc
_:  exx
    add a,(ix+REGY)
    ld  e,a     ;LSB
    exx
    ld  a,(hl)
    exx
    adc a,0     ;MSB adjusted if needed
    ld  b,a     ;MSB D and A
    ld  c,BASETABLE_STRIDE
    mlt bc
    ld  hl,PAGETABLE
    add hl,bc
    ld  hl,(hl)
    ld  b,0
    ld  c,e
    add hl,bc
    ld  d,a     ;D=MSB, C=LSB, HL=address
    ret

a6502_adrmode_read_indx:
    ld  a,(hl)
    exx
    ld  hl,ZEROPAGE
    add a,(ix+REGX)
    ld  L,a
    ld  a,(hl)
    inc L
    ld  d,(hl)
    ld  b,d
    ld  c,BASETABLE_STRIDE
    mlt bc
    ld  hl,PAGETABLE
    add hl,bc
    ld  hl,(hl)
    ld  b,0
    ld  c,a
    add hl,bc
    ret

a6502_adrmode_read_indy:
    ld  a,(hl)
    exx
    ld  hl,ZEROPAGE
    ld  L,a
    ld  a,(hl)
    inc L
    add a,(ix+REGY)
    ld  b,(hl)
    jr  nc,+_
    ADDCYC(1)
    inc b
_:  ld  d,b
    ld  c,BASETABLE_STRIDE
    mlt bc
    ld  hl,PAGETABLE
    add hl,bc
    ld  hl,(hl)
    ld  b,0
    ld  c,a
    add hl,bc
    ret         ;D=MSB C=LSB HL=address

a6502_adrmode_write_indy:
    ld  a,(hl)
    exx
    ld  hl,ZEROPAGE
    ld  L,a
    ld  a,(hl)
    inc L
    add a,(ix+REGY)
    ld  e,a         ;LSB
    ld  a,(hl)
    adc a,0
    ld  d,a
    ld  b,a
    ld  c,BASETABLE_STRIDE
    mlt bc
    ld  hl,PAGETABLE
    add hl,bc
    ld  hl,(hl)
    ld  b,0
    ld  c,e
    add hl,bc
    ret         ;D=MSB C=LSB HL=address


;==============================================================================
;
; #   #  #  ##  ### ##   ### ##  #  ## ### ###  # #  ## ### ###  ##  ##  #  ## 
; ## ## # # # # #   # #   #  ##  # #    #  #  # # # #    #   #  #  # ##  # #   
; # # # # # # # ##  # #   #  # # #  ##  #  ###  # # #    #   #  #  # # # #  ## 
; #   # # # # # #   # #   #  #  ##    # #  #  # # # #    #   #  #  # #  ##    #
; #   #  #  ##  ### ##   ### #  ##  ##  #  #  # ###  ##  #  ###  ##  #  ##  ## 
;
;==============================================================================
; * For read-only instructions, you accept data in register A. The constructor
;   will have a read or read/write opener that outputs data to A, and flips
;   the registers to the nonshadow versions by the time it is receieved.
; * For instructions containing writes, they come in two forms:
;   1. Write-to-(BC)
;       These aren't gated, and the data in (BC) is also in A. Best to use A
;       since I think there's a few illegals that takes immediate data too.
;   2. Write-to-(HL).
;       All registers incoming are shadow registers. Your free and available
;       registers are thus B and E.
;       Read-accesses are passed in through register A, for which you do ops.
;       Write-accesses are passed in through register B to input D=MSB, C=LSB,
;           and HL=address.
;       DO NOT EXX AT THE END. THE RETURN-TO-INSTRUCTION-FETCHER WILL DO THAT.



;------------------------------------------
a6502_inst_lda:
    ld  (ix+REGA),a
    ld  b,a
    ex  af,af'
    inc b
    dec b
    ex  af,af'
    ret
;------------------------------------------
a6502_inst_ldx:
    ld  (ix+REGX),a
    ld  b,a
    ex  af,af'
    inc b
    dec b
    ex  af,af'
    ret
;------------------------------------------
a6502_inst_ldy:
    ld  (ix+REGY),a
    ld  b,a
    ex  af,af'
    inc b
    dec b
    ex  af,af'
    ret
;------------------------------------------
a6502_inst_sta_bc:
    ld  a,(ix+REGA)
    ld  (bc),a
    ret

a6502_inst_sta_hl:
    ld  b,(ix+REGA)
    ret
;------------------------------------------
a6502_inst_stx_bc:
    ld  a,(ix+REGX)
    ld  (bc),a
    ret

a6502_inst_stx_hl:
    ld  b,(ix+REGX)
    ret
;------------------------------------------
a6502_inst_sty_bc:
    ld  a,(ix+REGY)
    ld  (bc),a
    ret

a6502_inst_sty_hl:
    ld  b,(ix+REGY)
    ret
;------------------------------------------
a6502_inst_dec_bc:
    dec a
    ld  (bc),a
    ld  b,a
    ex  af,af'
    inc b
    dec b
    ex  af,af'
    ret

a6502_inst_dec_hl:
    ld  b,a
    ex  af,af'
    dec b
    ex  af,af'
    ret
;------------------------------------------
a6502_inst_inc_bc:
    inc a
    ld  (bc),a
    ld  b,a
    ex  af,af'
    inc b
    dec b
    ex  af,af'
    ret

a6502_inst_inc_hl:
    ld  b,a
    ex  af,af'
    inc b
    ex  af,af'
    ret
;------------------------------------------
a6502_inst_adc_bc:
a6502_inst_adc_hl:
    ld  b,a
    ex  af,af'
    ld  a,(ix+REGA)
    adc a,b
    ld  (ix+REGA),a
    res SF_OVER,(ix+REGSR)
    jp  po,+_
    set SF_OVER,(ix+REGSR)
_:  ex  af,af'
    ret
;------------------------------------------
a6502_inst_sbc_bc:
a6502_inst_sbc_hl:
    ld  b,a
    ex  af,af'
    ld  a,(ix+REGA)
    ccf
    sbc a,b
    ccf
    ld  (ix+REGA),a
    res SF_OVER,(ix+REGSR)
    jp  po,+_
    set SF_OVER,(ix+REGSR)
_:  ex  af,af'
    ret
;------------------------------------------
a6502_inst_and_bc:
a6502_inst_and_hl:
    ld  b,a
    ex  af,af'
    adc a,a
    ld  c,a     ;preserve carry flag
    ld  a,(ix+REGA)
    and a,b
    ld  (ix+REGA),a
    bit 0,c
    jr  z,+_
    scf
_:  ex  af,af'
    ret
;------------------------------------------
a6502_inst_eor_bc:
a6502_inst_eor_hl:
    ld  b,a
    ex  af,af'
    adc a,a
    ld  c,a     ;preserve carry flag
    ld  a,(ix+REGA)
    xor a,b
    ld  (ix+REGA),a
    bit 0,c
    jr  z,+_
    scf
_:  ex  af,af'
    ret
;------------------------------------------
a6502_inst_or_bc:
a6502_inst_or_hl:
    ld  b,a
    ex  af,af'
    adc a,a
    ld  c,a     ;preserve carry flag
    ld  a,(ix+REGA)
    or  a,b
    ld  (ix+REGA),a
    bit 0,c
    jr  z,+_
    scf
_:  ex  af,af'
    ret
;------------------------------------------
a6502_inst_asl_bc:
    ld  d,a
    ex  af,af'
    sla d
    ex  af,af'
    ld  a,d
    ld  (bc),a
    ret

a6502_inst_asl_hl:
    ld  b,a
    ex  af,af'
    sla b
    ex  af,af'
    ret
;------------------------------------------
a6502_inst_lsr_bc:
    ld  d,a
    ex  af,af'
    srl d
    ex  af,af'
    ld  a,d
    ld  (bc),a
    ret

a6502_inst_lsr_hl:
    ld  b,a
    ex  af,af'
    srl b
    ex  af,af'
    ret
;------------------------------------------
a6502_inst_rol_bc:
    ld  d,a
    ex  af,af'
    rl  d
    ex  af,af'
    ld  a,d
    ld  (bc),a
    ret

a6502_inst_rol_hl:
    ld  b,a
    ex  af,af'
    rl  b
    ex  af,af'
    ret
;------------------------------------------
a6502_inst_ror_bc:
    ld  d,a
    ex  af,af'
    rr  d
    ex  af,af'
    ld  a,d
    ld  (bc),a
    ret

a6502_inst_ror_hl:
    ld  b,a
    ex  af,af'
    rr  b
    ex  af,af'
    ret
;------------------------------------------
a6502_inst_cmp_bc:
a6502_inst_cmp_hl:
    ld  b,a
    ex  af,af'
    ld  a,(ix+REGA)
    sub a,b
    ccf
_:  ex  af,af'
    ret
;------------------------------------------
a6502_inst_cpx_bc:
a6502_inst_cpx_hl:
    ld  b,a
    ex  af,af'
    ld  a,(ix+REGX)
    sub a,b
    ccf
_:  ex  af,af'
    ret
;------------------------------------------
a6502_inst_cpy_bc:
a6502_inst_cpy_hl:
    ld  b,a
    ex  af,af'
    ld  a,(ix+REGY)
    sub a,b
    ccf
_:  ex  af,af'
    ret
;------------------------------------------
a6502_inst_bit_bc:  ;Only zp uses this.
a6502_inst_bit_hl:  ;Only abs uses this.
    ld  c,a
    and a,(ix+REGA)
    ld  a,c
    res SF_ZERO,a
    jr  nz,+_
    set SF_ZERO,a
_:  ld  bc,flags6502toNativeLUT
    ld  c,a         ;NZ-V bits now in-place. Gotta shuffle C in too. Pull native
    ld  a,(bc)
    rrca        ;preshift right to accept carry on next lshift.
    ld  c,a
    ex  af,af'
    rl c
    push.s bc
    pop.s af    ;flags reestablished.
    res SF_OVER,(ix+REGSR)
    jp  po,+_
    set SF_OVER,(ix+REGSR)
_:  ex  af,af'
    ret


;-------------------------------------------------------------------------------
; # #  #  ### ##  #  #     #  ##   ##  #  ##  ###  ##    #  #  ## ### # ##   ##                                      
; # #  #  ## #   # # #    # # # # #   # # # # ##  #      #  # #    #  # # # #                               
; # #  #  #  # # ### #    # # ##  #   # # # # #    ##    #  #  ##  #  # # # # #                                     
; # ## ## ### ## # # ##    #  #    ##  #  ##  ### ##     ## # ##   #  # # #  ##                                       
;-------------------------------------------------------------------------------
 
a6502_inst_dcp_bc:
    dec a
    ld  (bc),a
    ld  c,a
    ex  af,af'
    ld  a,(ix+REGA)
    cp  a,c
    ccf
    ex  af,af'
    ret

;NOTE: a6502_inst_dcp_hl has special considerations, so must be special-cased
;       during generation
a6502_inst_dcp_hl_seg1: ;Placed after initial R/RMW access as normal.
    dec a
    ld  b,a
    ld  (+_++1),a
    ret

a6502_inst_dcp_hl_seg2: ;Placed after the W access
    ex  af,af'
    ld  a,(ix+REGA)
_:  cp  a,0     ;SMC'd for second segment.
    ex  af,af'
    ret

;------------------------------------------------------------------------------
a6502_inst_isc_bc:
    inc a
    ld  (bc),a
    ld  c,a
    ex  af,af'
    ld  a,(ix+REGA)
    ccf
    sbc a,c
    ccf
    ld  (ix+REGA),a
    res SF_OVER,(ix+REGSR)
    jp  po,+_
    set SF_OVER,(ix+REGSR)
_:  ex  af,af'
    ret

;NOTE: a6502_inst_isc_hl also has special considerations,
;        so must be special-cased during generation.
a6502_inst_isc_hl_seg1: ;Placed after initial R/RMW access as normal.
    dec a
    ld  b,a
    ld  (+_+1),a
    ret

a6502_inst_isc_hl_seg2: ;Placed after the W access
    ex  af,af'
    ccf
_:  sbc a,0
    ccf
    ld  (ix+REGA),a
    res SF_OVER,(ix+REGSR)
    jp  po,+_
    set SF_OVER,(ix+REGSR)
_:  ex  af,af'
    ret
;------------------------------------------------------------------------------
a6502_inst_lax_bc:
a6502_inst_lax_hl:
    ld  (ix+REGA),a
    ld  (ix+REGX),a
    ld  b,a
    ex  af,af'
    inc b
    dec b
    ex  af,af'
    ret
;------------------------------------------------------------------------------
;M = C <- [76543210] <- C, A AND M -> A. flags CZN
;Flags juggling required to preserve C while doing (A AND M).
a6502_inst_rla_bc:
    ld  d,a
    ex  af,af'
    ld  a,d
    rla             ;1st half oper once
    ld  (bc),a
    and a,(ix+REGA) ;2nd half oper
    ld  (ix+REGA),a
    push.s af
    pop.s bc
    srl c       ;prep flag for carry insert
    rl d        ;1st half oper for carry
    rl c        ;realign flags
    push.s bc
    pop.s af    ;flags set
    ex  af,af'
    ret

a6502_inst_rla_hl_seg1:
    ld  b,a
    ex  af,af'
    rl  b
    ld  a,b
    ld  (+_+1),a
    ex  af,af'
    ret

a6502_inst_rla_hl_seg2:
    ld  a,(ix+REGA)
_:  and a,0
    ld  (ix+REGA),a
    push.s af
    ex  af,af'
    adc a,a
    pop.s bc
    srl c
    rrca
    rl c
    push.s bc
    pop.s af
    ex  af,af'
    ret
;------------------------------------------------------------------------------
;RRA
;ROR oper + ADC oper
;M = C -> [76543210] -> C, A + M + C -> A, C. Affects VCZN

a6502_inst_rra_bc:
    ld  d,a
    ex  af,af'
    ld  a,d
    rra
    ld  (bc),a
    adc a,(ix+REGA)
    ld  (ix+REGA),a
    res SF_OVER,(ix+REGSR)
    jp  po,+_
    set SF_OVER,(ix+REGSR)
_:  ex  af,af'
    ret

a6502_inst_rra_hl_seg1:
    ld  b,a
    ex  af,af'
    rl  b
    ld  a,b
    ex  af,af'
    ret

a6502_inst_rra_hl_seg2:
    ex  af,af'
    adc a,(ix+REGA)
    ld  (ix+REGA),a
    jp  po,+_
    set SF_OVER,(ix+REGSR)
_:  ex  af,af'
    ret
;------------------------------------------------------------------------------
;SAX (AXS, AAX) - A AND X -> M
;A and X are put on the bus at the same time (resulting effectively in an 
;AND operation) and stored in M. Flags not affected.

a6502_inst_sax_bc:
    ld  a,(ix+REGA)
    and a,(ix+REGX)
    ld  (bc),a
    ret

a6502_inst_sax_hl:
    ld  a,(ix+REGA)
    and a,(ix+REGX)
    ld  b,a
    ret
;------------------------------------------------------------------------------
;SLO (ASO) - ASL oper + ORA oper
;M = C <- [76543210] <- 0, A OR M -> A. Affects: CZN
a6502_inst_slo_bc:
    ld  d,a
    ex  af,af'
    ld  a,d
    sla a           ;1st half oper once
    ld  (bc),a
    or  a,(ix+REGA) ;2nd half oper
    ld  (ix+REGA),a
    push.s af
    pop.s bc
    srl c       ;prep flag for carry insert
    sla d       ;1st half oper for carry
    rl c        ;realign flags
    push.s bc
    pop.s af    ;flags set
    ex  af,af'
    ret

a6502_inst_slo_hl_seg1:
    ld  b,a
    ex  af,af'
    sla b
    ld  a,b
    ld  (+_+1),a
    ex  af,af'
    ret

a6502_inst_slo_hl_seg2:
    ld  a,(ix+REGA)
_:  or  a,0
    ld  (ix+REGA),a
    push.s af
    ex  af,af'
    adc a,a
    pop.s bc
    srl c
    rrca
    rl c
    push.s bc
    pop.s af
    ex  af,af'
    ret
;-----------------------------------------------------------------------------
;SRE (LSE) - LSR oper + EOR oper
;M = 0 -> [76543210] -> C, A EOR M -> A. Affects: CZN
a6502_inst_sre_bc:
    ld  d,a
    ex  af,af'
    ld  a,d
    srl a           ;1st half oper once
    ld  (bc),a
    xor a,(ix+REGA) ;2nd half oper
    ld  (ix+REGA),a
    push.s af
    pop.s bc
    srl c       ;prep flag for carry insert
    srl d       ;1st half oper for carry
    rl c        ;realign flags
    push.s bc
    pop.s af    ;flags set
    ex  af,af'
    ret

a6502_inst_sre_hl_seg1:
    ld  b,a
    ex  af,af'
    srl b
    ld  a,b
    ld  (+_+1),a
    ex  af,af'
    ret

a6502_inst_sre_hl_seg2:
    ld  a,(ix+REGA)
_:  xor a,0
    ld  (ix+REGA),a
    push.s af
    ex  af,af'
    adc a,a
    pop.s bc
    srl c
    rrca
    rl c
    push.s bc
    pop.s af
    ex  af,af'
    ret


;==============================================================================
;
;  ##  ##  ### ## #  #  #    # ##  #  ## ### ###  # #  ## ### #  ##  ##  #  ## 
; #    # # #  #   # # # #    # ##  # #    #  #  # # # #    #  # #  # ##  # #   
;  ##  ##  ## #   # ### #    # # # #  ##  #  ###  # # #    #  # #  # # # #  ## 
;    # #   #  #   # # # #    # #  ##    # #  #  # # # #    #  # #  # #  ##    #
;  ##  #   ### ## # # # ###  # #  ##  ##  #  #  # ###  ##  #  #  ##  #  ##  ## 
;
;==============================================================================
; One or more of the following may be true about the instructions below:
; * It supports exactly one memory mode:
;       (e.g.) any transfer instruction (tax, txa, ...), flag instructions, etc.
; * The generalisation is either inefficient, or would make a giant mess to
;   try to clean up.
;       (e.g.) basically all branch and branch-adjacent instructions
a6502_inst_tax: ;NZ 1b 2cc A->X
    ld  b,(ix+REGA)
    ld  (ix+REGX),b
    ex  af,af'
    inc b
    dec b
    ex  af,af'
    ret
a6502_inst_tay: ;NZ 1b 2cc A->Y
    ld  b,(ix+REGA)
    ld  (ix+REGY),b
    ex  af,af'
    inc b
    dec b
    ex  af,af'
    ret
a6502_inst_tsx: ;NZ 1b 2cc S->X
    ld  b,(ix+REGSP)
    ld  (ix+REGX),b
    ex  af,af'
    inc b
    dec b
    ex  af,af'
    ret
a6502_inst_txa: ;NZ 1b 2cc X->A
    ld  b,(ix+REGX)
    ld  (ix+REGA),b
    ex  af,af'
    inc b
    dec b
    ex  af,af'
    ret
a6502_inst_txs: ;-- 1b 2cc X->S
    ld  b,(ix+REGX)
    ld  (ix+REGSP),b
    ret
a6502_inst_tya: ;NZ 1b 2cc X->A
    ld  b,(ix+REGY)
    ld  (ix+REGA),b
    ex  af,af'
    inc b
    dec b
    ex  af,af'
    ret
a6502_inst_pha: ;flags not affected
    ld  a,(ix+REGA)
    ld  bc,STACKBASE
    ld  c,(ix+REGSP)
    ld  (bc),a
    dec c
    ld  (ix+REGSP),c
    ret
a6502_inst_php: ;you must construct flags to push to stack
    ld  a,(ix+REGSR)
    or  a,%00110000
    ld  bc,STACKBASE
    ld  c,(ix+REGSP)
    ld  (bc),a
    dec c
    ld  (ix+REGSP),c
    .error "YOU MUST FIX THIS."
    ret
a6502_inst_pla:
    ld  bc,STACKBASE
    ld  c,(ix+REGSP)
    inc c
    ld  a,(bc)
    ld  (ix+REGSP),c
    ld  (ix+REGA),a
    ld  b,a
    ex  af,af'
    inc b
    dec b
    ex  af,af'
    ret
a6502_inst_plp: ;you must deconstruct flags back to native order
    ld  bc,STACKBASE
    ld  c,(ix+REGSP)
    inc c
    ld  a,(bc)
    ld  (ix+REGSP),c
    ld  b,(ix+REGSR)
    xor a,b
    and a,%11001111
    xor a,b
    ld  (ix+REGSR),a
    .error "YOU MUST FIX THIS."
    ret
a6502_inst_dex:
    ex  af,af'
    dec (ix+REGX)
    ex  af,af'
    ret
a6502_inst_dey:
    ex  af,af'
    dec (ix+REGY)
    ex  af,af'
    ret
a6502_inst_inx:
    ex  af,af'
    inc (ix+REGX)
    ex  af,af'
    ret
a6502_inst_iny:
    ex  af,af'
    inc (ix+REGY)
    ex  af,af'
    ret
a6502_inst_asl: ;it has other memory modes, but this one operates on reg A too.
    ex  af,af'
    sla (ix+REGA)
    ex  af,af'
    ret
a6502_inst_lsr: ;it has other memory modes, but this one operates on reg A too.
    ex  af,af'
    srl (ix+REGA)
    ex  af,af'
    ret
a6502_inst_rol: ;it has other memory modes, but this one operates on reg A too.
    ex  af,af'
    rl  (ix+REGA)
    ex  af,af'
    ret
a6502_inst_ror: ;it has other memory modes, but this one operates on reg A too.
    ex  af,af'
    rr  (ix+REGA)
    ex  af,af'
    ret
a6502_inst_clc:
    ex  af,af'
    scf
    ccf
    ex  af,af'
    ret
a6502_inst_cld:
    res SF_DEC,(ix+REGSR)
    ret
a6502_inst_cli:
    res SF_INT,(ix+REGSR)
    ret
a6502_inst_clv:
    res SF_OVER,(ix+REGSR)
    ret
a6502_inst_sec:
    ex  af,af'
    scf
    ex  af,af'
    ret
a6502_inst_sed:
    set SF_DEC,(ix+REGSR)
    ret
a6502_inst_sei:
    set SF_INT,(ix+REGSR)
    ret
a6502_inst_bcc:
a6502_inst_bcs:
a6502_inst_beq:
a6502_inst_bmi:
a6502_inst_bne:
a6502_inst_bpl:
a6502_inst_bvc:
a6502_inst_bvs:
a6502_inst_brk:
a6502_inst_rti:
a6502_inst_jmp_abs:
a6502_inst_jmp_ind:
a6502_inst_jsr:
a6502_inst_rts:
a6502_inst_nop: ;$EA. There are many other NOPs with their own timings and modes
    ret



;-------------------------------------------------------------------------------
; # #  #  ### ##  #  #     #  ##   ##  #  ##  ###  ##    #  #  ## ### # ##   ##                                      
; # #  #  ## #   # # #    # # # # #   # # # # ##  #      #  # #    #  # # # #                               
; # #  #  #  # # ### #    # # ##  #   # # # # #    ##    #  #  ##  #  # # # # #                                     
; # ## ## ### ## # # ##    #  #    ##  #  ##  ### ##     ## # ##   #  # # #  ##                                       
;-------------------------------------------------------------------------------
;Unofficial instructions. Surprisingly many of them are usable. A few are
;unstable. A few more will lock up the CPU, making their use for alternate
;emulator-specific purposes an appealing idea. HINT HINT NUDGE NUDGE.
;
a6502_inst_alr:     ;imm, opc $4B
    ex  af,af'
    ld  a,(ix+REGA)
    and a,(hl)
    srl a
    ld  (ix+REGA),a
    ex  af,af'
    ret

a6502_inst_anc:     ;imm, opc $0B
a6502_inst_anc2:    ;imm, opc $2B
    ld  a,(ix+REGA)
    and a,(hl)
    ld  (ix+REGA),a
    ld  c,a
    ex  af,af'
    rl  c       ;Just affect flags.
    ex  af,af'
    ret

a6502_inst_ane:     ;imm, opc $88. Highly unstable. But probably implementable.
    ld  a,r
    or  a,(ix+REGA)
    and a,(ix+REGX)
    and a,(hl)
    ld  (ix+REGA),a
    ld  c,a
    ex  af,af'
    inc c
    dec c
    ex  af,af'
    ret

a6502_inst_arr:     ;imm, opc $6B
    ld  a,(ix+REGA)
    and a,(hl)
    ld  c,a ;oldval
    ex  af,af'
    rr  c
    ld  a,c
    add a,a
    xor a,c ;V check. V=b5^b6.
    res SF_OVER,(ix+REGSR)
    jr  z,+_
    set SF_OVER,(ix+REGSR)
_:  ld  a,c
    add a,a
    add a,a ;C check. Puts bit 6 into carry
    inc c
    dec c   ;Sets N and Z appropriately.
    ex  af,af'
    ret

a6502_inst_las:     ;absy, opc $BB. Prefix with normal absy. Read access only.
    and a,(ix+REGSP)
    ld  c,a
    ld  (ix+REGA),a
    ld  (ix+REGX),a
    ld  (ix+REGSP),a
    ex  af,af'
    inc c
    dec c
    ex  af,af'
    ret

a6502_inst_lxa:     ;imm, opc $AB. Highly unstable. See ANE.
    ld  a,r     ;?? HIGHLY UNSTABLE INSTRUCTION
    or  a,(ix+REGA)
    and a,(hl)
    ld  (ix+REGA),a
    ld  (ix+REGX),a
    ld  b,a
    ex  af,af'
    inc b
    dec b
    ex  af,af'
    ret
    
a6502_inst_sbx:     ;imm, opc $CB. (A AND X) - oper -> X. flags CZN
    ld  b,a
    ex  af,af'
    ld  a,(ix+REGA)
    and a,(ix+REGX)
    sub a,b
    ld  (ix+REGX),a
    ccf
    ex  af,af'
    ret

a6502_inst_sha:     ;9F, 93
a6502_inst_shx:     ;9E
a6502_inst_shy:     ;9C
a6502_inst_tas:     ;9B
a6502_inst_usbc:    ;EB Map this to instruction $E9 (inst6502_sbc_imm)
a6502_inst_lxa:
    ret








a6502_main_table:
A6502T(MEMACC_NO, ADRMODE_SPEC, 7, ISC_BRK)    ;00
A6502T(MEMACC_R , ADRMODE_INDX, 6, ISC_ORA)    ;01
A6502T(MEMACC_NO, ADRMODE_SPEC, 4, ISC_JAM)    ;02
A6502T(MEMACC_RW, ADRMODE_INDX, 8, ISC_SLO)    ;03
A6502T(MEMACC_NO, ADRMODE_ZP  , 3, ISC_JAMX)    ;04
A6502T(MEMACC_NO, ADRMODE_ZP  , 3, ISC_ORA)    ;05
A6502T(MEMACC_NO, ADRMODE_ZP  , 5, ISC_ASL)    ;06
A6502T(MEMACC_NO, ADRMODE_ZP  , 5, ISC_SLO)    ;07
A6502T(MEMACC_NO, ADRMODE_SPEC, 3, ISC_PHP)    ;08
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_ORA)    ;09
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_ASLA)    ;0A
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_ANC)    ;0B
A6502T(MEMACC_R , ADRMODE_ABS , 4, ISC_JAMX)    ;0C
A6502T(MEMACC_R , ADRMODE_ABS , 4, ISC_ORA)    ;0D
A6502T(MEMACC_RW, ADRMODE_ABS , 6, ISC_ASL)    ;0E
A6502T(MEMACC_RW, ADRMODE_ABS , 6, ISC_SLO)    ;0F
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_BPL)    ;10
A6502T(MEMACC_R , ADRMODE_INDY, 5, ISC_ORA)    ;11
A6502T(MEMACC_NO, ADRMODE_SPEC, 4, ISC_JAM)    ;12
A6502T(MEMACC_RW, ADRMODE_INDY, 8, ISC_SLO)    ;13
A6502T(MEMACC_NO, ADRMODE_ZPX , 4, ISC_JAMX)    ;14
A6502T(MEMACC_NO, ADRMODE_ZPX , 4, ISC_ORA)    ;15
A6502T(MEMACC_NO, ADRMODE_ZPX , 6, ISC_ASL)    ;16
A6502T(MEMACC_NO, ADRMODE_ZPX , 6, ISC_SLO)    ;17
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_CLC)    ;18
A6502T(MEMACC_R , ADRMODE_ABSY, 4, ISC_ORA)    ;19
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_JAMX)    ;1A
A6502T(MEMACC_RW, ADRMODE_ABSY, 7, ISC_SLO)    ;1B
A6502T(MEMACC_R , ADRMODE_ABSX, 4, ISC_JAMX)    ;1C
A6502T(MEMACC_R , ADRMODE_ABSX, 4, ISC_ORA)    ;1D
A6502T(MEMACC_RW, ADRMODE_ABSX, 7, ISC_ASL)    ;1E
A6502T(MEMACC_RW, ADRMODE_ABSX, 7, ISC_SLO)    ;1F
A6502T(MEMACC_NO, ADRMODE_SPEC, 6, ISC_JSR)    ;20
A6502T(MEMACC_R , ADRMODE_INDX, 6, ISC_AND)    ;21
A6502T(MEMACC_NO, ADRMODE_SPEC, 4, ISC_JAM)    ;22
A6502T(MEMACC_RW, ADRMODE_INDX, 8, ISC_RLA)    ;23
A6502T(MEMACC_NO, ADRMODE_ZP  , 3, ISC_BIT)    ;24
A6502T(MEMACC_NO, ADRMODE_ZP  , 3, ISC_AND)    ;25
A6502T(MEMACC_NO, ADRMODE_ZP  , 5, ISC_ROL)    ;26
A6502T(MEMACC_NO, ADRMODE_ZP  , 5, ISC_RLA)    ;27
A6502T(MEMACC_NO, ADRMODE_SPEC, 4, ISC_PLP)    ;28
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_AND)    ;29
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_ROLA)    ;2A
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_ANC)    ;2B
A6502T(MEMACC_R , ADRMODE_ABS , 4, ISC_BIT)    ;2C
A6502T(MEMACC_R , ADRMODE_ABS , 4, ISC_AND)    ;2D
A6502T(MEMACC_RW, ADRMODE_ABS , 6, ISC_ROL)    ;2E
A6502T(MEMACC_RW, ADRMODE_ABS , 6, ISC_RLA)    ;2F
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_BMI)    ;30
A6502T(MEMACC_R , ADRMODE_INDY, 5, ISC_AND)    ;31
A6502T(MEMACC_NO, ADRMODE_SPEC, 4, ISC_JAM)    ;32
A6502T(MEMACC_RW, ADRMODE_INDY, 8, ISC_RLA)    ;33
A6502T(MEMACC_NO, ADRMODE_ZPX , 4, ISC_JAMX)    ;34
A6502T(MEMACC_NO, ADRMODE_ZPX , 4, ISC_AND)    ;35
A6502T(MEMACC_NO, ADRMODE_ZPX , 6, ISC_ROL)    ;36
A6502T(MEMACC_NO, ADRMODE_ZPX , 6, ISC_RLA)    ;37
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_SEC)    ;38
A6502T(MEMACC_R , ADRMODE_ABSY, 4, ISC_AND)    ;39
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_JAMX)    ;3A
A6502T(MEMACC_RW, ADRMODE_ABSY, 7, ISC_RLA)    ;3B
A6502T(MEMACC_R , ADRMODE_ABSX, 4, ISC_JAMX)    ;3C
A6502T(MEMACC_R , ADRMODE_ABSX, 4, ISC_AND)    ;3D
A6502T(MEMACC_RW, ADRMODE_ABSX, 7, ISC_ROL)    ;3E
A6502T(MEMACC_RW, ADRMODE_ABSX, 7, ISC_RLA)    ;3F
A6502T(MEMACC_NO, ADRMODE_SPEC, 6, ISC_RTI)    ;40
A6502T(MEMACC_R , ADRMODE_INDX, 6, ISC_EOR)    ;41
A6502T(MEMACC_NO, ADRMODE_SPEC, 4, ISC_JAM)    ;42
A6502T(MEMACC_RW, ADRMODE_INDX, 8, ISC_SRE)    ;43
A6502T(MEMACC_NO, ADRMODE_ZP  , 3, ISC_JAMX)    ;44
A6502T(MEMACC_NO, ADRMODE_ZP  , 3, ISC_EOR)    ;45
A6502T(MEMACC_NO, ADRMODE_ZP  , 5, ISC_LSR)    ;46
A6502T(MEMACC_NO, ADRMODE_ZP  , 5, ISC_SRE)    ;47
A6502T(MEMACC_NO, ADRMODE_SPEC, 3, ISC_PHA)    ;48
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_EOR)    ;49
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_LSRA)    ;4A
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_ALR)    ;4B
A6502T(MEMACC_NO, ADRMODE_SPEC, 3, ISC_JMPA)    ;4C
A6502T(MEMACC_R , ADRMODE_ABS , 4, ISC_EOR)    ;4D
A6502T(MEMACC_RW, ADRMODE_ABS , 6, ISC_LSR)    ;4E
A6502T(MEMACC_RW, ADRMODE_ABS , 6, ISC_SRE)    ;4F
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_BVC)    ;50
A6502T(MEMACC_R , ADRMODE_INDY, 5, ISC_EOR)    ;51
A6502T(MEMACC_NO, ADRMODE_SPEC, 4, ISC_JAM)    ;52
A6502T(MEMACC_RW, ADRMODE_INDY, 8, ISC_SRE)    ;53
A6502T(MEMACC_NO, ADRMODE_ZPX , 4, ISC_JAMX)    ;54
A6502T(MEMACC_NO, ADRMODE_ZPX , 4, ISC_EOR)    ;55
A6502T(MEMACC_NO, ADRMODE_ZPX , 6, ISC_LSR)    ;56
A6502T(MEMACC_NO, ADRMODE_ZPX , 6, ISC_SRE)    ;57
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_CLI)    ;58
A6502T(MEMACC_R , ADRMODE_ABSY, 4, ISC_EOR)    ;59
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_JAMX)    ;5A
A6502T(MEMACC_RW, ADRMODE_ABSY, 7, ISC_SRE)    ;5B
A6502T(MEMACC_R , ADRMODE_ABSX, 4, ISC_JAMX)    ;5C
A6502T(MEMACC_R , ADRMODE_ABSX, 4, ISC_EOR)    ;5D
A6502T(MEMACC_RW, ADRMODE_ABSX, 7, ISC_LSR)    ;5E
A6502T(MEMACC_RW, ADRMODE_ABSX, 7, ISC_SRE)    ;5F
A6502T(MEMACC_NO, ADRMODE_SPEC, 6, ISC_RTS)    ;60
A6502T(MEMACC_R , ADRMODE_INDX, 6, ISC_ADC)    ;61
A6502T(MEMACC_NO, ADRMODE_SPEC, 4, ISC_JAM)    ;62
A6502T(MEMACC_RW, ADRMODE_INDX, 8, ISC_RRA)    ;63
A6502T(MEMACC_NO, ADRMODE_ZP  , 3, ISC_JAMX)    ;64
A6502T(MEMACC_NO, ADRMODE_ZP  , 3, ISC_ADC)    ;65
A6502T(MEMACC_NO, ADRMODE_ZP  , 5, ISC_ROR)    ;66
A6502T(MEMACC_NO, ADRMODE_ZP  , 5, ISC_RRA)    ;67
A6502T(MEMACC_NO, ADRMODE_SPEC, 4, ISC_PLA)    ;68
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_ADC)    ;69
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_RORA)    ;6A
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_ARR)    ;6B
A6502T(MEMACC_NO, ADRMODE_SPEC, 5, ISC_JMPI)    ;6C
A6502T(MEMACC_R , ADRMODE_ABS , 4, ISC_ADC)    ;6D
A6502T(MEMACC_RW, ADRMODE_ABS , 6, ISC_ROR)    ;6E
A6502T(MEMACC_RW, ADRMODE_ABS , 6, ISC_RRA)    ;6F
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_BVS)    ;70
A6502T(MEMACC_R , ADRMODE_INDY, 5, ISC_ADC)    ;71
A6502T(MEMACC_NO, ADRMODE_SPEC, 4, ISC_JAM)    ;72
A6502T(MEMACC_RW, ADRMODE_INDY, 8, ISC_RRA)    ;73
A6502T(MEMACC_NO, ADRMODE_ZPX , 4, ISC_JAMX)    ;74
A6502T(MEMACC_NO, ADRMODE_ZPX , 4, ISC_ADC)    ;75
A6502T(MEMACC_NO, ADRMODE_ZPX , 6, ISC_ROR)    ;76
A6502T(MEMACC_NO, ADRMODE_ZPX , 6, ISC_RRA)    ;77
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_SEI)    ;78
A6502T(MEMACC_R , ADRMODE_ABSY, 4, ISC_ADC)    ;79
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_JAMX)    ;7A
A6502T(MEMACC_RW, ADRMODE_ABSY, 7, ISC_RRA)    ;7B
A6502T(MEMACC_R , ADRMODE_ABSX, 4, ISC_JAMX)    ;7C
A6502T(MEMACC_R , ADRMODE_ABSX, 4, ISC_ADC)    ;7D
A6502T(MEMACC_RW, ADRMODE_ABSX, 7, ISC_ROR)    ;7E
A6502T(MEMACC_RW, ADRMODE_ABSX, 7, ISC_RRA)    ;7F
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_JAMX)    ;80
A6502T(MEMACC_W , ADRMODE_INDX, 6, ISC_STA)    ;81
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_JAMX)    ;82
A6502T(MEMACC_W , ADRMODE_INDX, 6, ISC_SAX)    ;83
A6502T(MEMACC_NO, ADRMODE_ZP  , 3, ISC_STY)    ;84
A6502T(MEMACC_NO, ADRMODE_ZP  , 3, ISC_STA)    ;85
A6502T(MEMACC_NO, ADRMODE_ZP  , 3, ISC_STX)    ;86
A6502T(MEMACC_NO, ADRMODE_ZP  , 3, ISC_SAX)    ;87
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_DEY)    ;88
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_JAMX)    ;89
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_TXA)    ;8A
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_ANE)    ;8B
A6502T(MEMACC_W , ADRMODE_ABS , 4, ISC_STY)    ;8C
A6502T(MEMACC_W , ADRMODE_ABS , 4, ISC_STA)    ;8D
A6502T(MEMACC_W , ADRMODE_ABS , 4, ISC_STX)    ;8E
A6502T(MEMACC_W , ADRMODE_ABS , 4, ISC_SAX)    ;8F
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_BCC)    ;90
A6502T(MEMACC_W , ADRMODE_INDY, 6, ISC_STA)    ;91
A6502T(MEMACC_NO, ADRMODE_SPEC, 4, ISC_JAM)    ;92
A6502T(MEMACC_RW, ADRMODE_INDY, 6, ISC_SHA)    ;93
A6502T(MEMACC_NO, ADRMODE_ZPX , 4, ISC_STY)    ;94
A6502T(MEMACC_NO, ADRMODE_ZPX , 4, ISC_STA)    ;95
A6502T(MEMACC_NO, ADRMODE_ZPY , 4, ISC_STX)    ;96
A6502T(MEMACC_NO, ADRMODE_ZPY , 4, ISC_SAX)    ;97
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_TYA)    ;98
A6502T(MEMACC_W , ADRMODE_ABSY, 5, ISC_STA)    ;99
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_TXS)    ;9A
A6502T(MEMACC_R , ADRMODE_ABSY, 5, ISC_TAS)    ;9B
A6502T(MEMACC_R , ADRMODE_ABSX, 5, ISC_SHY)    ;9C
A6502T(MEMACC_W , ADRMODE_ABSX, 5, ISC_STA)    ;9D
A6502T(MEMACC_R , ADRMODE_ABSY, 5, ISC_SHX)    ;9E
A6502T(MEMACC_RW, ADRMODE_ABSY, 5, ISC_SHA)    ;9F
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_LDY)    ;A0
A6502T(MEMACC_R , ADRMODE_INDX, 6, ISC_LDA)    ;A1
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_LDX)    ;A2
A6502T(MEMACC_R , ADRMODE_INDX, 6, ISC_LAX)    ;A3
A6502T(MEMACC_NO, ADRMODE_ZP  , 3, ISC_LDY)    ;A4
A6502T(MEMACC_NO, ADRMODE_ZP  , 3, ISC_LDA)    ;A5
A6502T(MEMACC_NO, ADRMODE_ZP  , 3, ISC_LDX)    ;A6
A6502T(MEMACC_NO, ADRMODE_ZP  , 3, ISC_LAX)    ;A7
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_TAY)    ;A8
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_LDA)    ;A9
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_TAX)    ;AA
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_LXA)    ;AB
A6502T(MEMACC_R , ADRMODE_ABS , 4, ISC_LDY)    ;AC
A6502T(MEMACC_R , ADRMODE_ABS , 4, ISC_LDA)    ;AD
A6502T(MEMACC_R , ADRMODE_ABS , 4, ISC_LDX)    ;AE
A6502T(MEMACC_R , ADRMODE_ABS , 4, ISC_LAX)    ;AF
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_BCS)    ;B0
A6502T(MEMACC_R , ADRMODE_INDY, 5, ISC_LDA)    ;B1
A6502T(MEMACC_NO, ADRMODE_SPEC, 4, ISC_JAM)    ;B2
A6502T(MEMACC_R , ADRMODE_INDY, 5, ISC_LAX)    ;B3
A6502T(MEMACC_NO, ADRMODE_ZPX , 4, ISC_LDY)    ;B4
A6502T(MEMACC_NO, ADRMODE_ZPX , 4, ISC_LDA)    ;B5
A6502T(MEMACC_NO, ADRMODE_ZPY , 4, ISC_LDX)    ;B6
A6502T(MEMACC_NO, ADRMODE_ZPY , 4, ISC_LAX)    ;B7
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_CLV)    ;B8
A6502T(MEMACC_R , ADRMODE_ABSY, 4, ISC_LDA)    ;B9
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_TSX)    ;BA
A6502T(MEMACC_R , ADRMODE_ABSY, 4, ISC_LAS)    ;BB
A6502T(MEMACC_R , ADRMODE_ABSX, 4, ISC_LDY)    ;BC
A6502T(MEMACC_R , ADRMODE_ABSX, 4, ISC_LDA)    ;BD
A6502T(MEMACC_R , ADRMODE_ABSY, 4, ISC_LDX)    ;BE
A6502T(MEMACC_R , ADRMODE_ABSY, 4, ISC_LAX)    ;BF
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_CPY)    ;C0
A6502T(MEMACC_R , ADRMODE_INDX, 6, ISC_CMP)    ;C1
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_JAMX)    ;C2
A6502T(MEMACC_RW, ADRMODE_INDX, 8, ISC_DCP)    ;C3
A6502T(MEMACC_NO, ADRMODE_ZP  , 3, ISC_CPY)    ;C4
A6502T(MEMACC_NO, ADRMODE_ZP  , 3, ISC_CMP)    ;C5
A6502T(MEMACC_NO, ADRMODE_ZP  , 5, ISC_DEC)    ;C6
A6502T(MEMACC_NO, ADRMODE_ZP  , 5, ISC_DCP)    ;C7
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_INY)    ;C8
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_CMP)    ;C9
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_DEX)    ;CA
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_SBX)    ;CB
A6502T(MEMACC_R , ADRMODE_ABS , 4, ISC_CPY)    ;CC
A6502T(MEMACC_R , ADRMODE_ABS , 4, ISC_CMP)    ;CD
A6502T(MEMACC_RW, ADRMODE_ABS , 6, ISC_DEC)    ;CE
A6502T(MEMACC_RW, ADRMODE_ABS , 6, ISC_DCP)    ;CF
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_BNE)    ;D0
A6502T(MEMACC_R , ADRMODE_INDY, 5, ISC_CMP)    ;D1
A6502T(MEMACC_NO, ADRMODE_SPEC, 4, ISC_JAM)    ;D2
A6502T(MEMACC_RW, ADRMODE_INDY, 8, ISC_DCP)    ;D3
A6502T(MEMACC_NO, ADRMODE_ZPX , 4, ISC_JAMX)    ;D4
A6502T(MEMACC_NO, ADRMODE_ZPX , 4, ISC_CMP)    ;D5
A6502T(MEMACC_NO, ADRMODE_ZPX , 6, ISC_DEC)    ;D6
A6502T(MEMACC_NO, ADRMODE_ZPX , 6, ISC_DCP)    ;D7
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_CLD)    ;D8
A6502T(MEMACC_R , ADRMODE_ABSY, 4, ISC_CMP)    ;D9
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_JAMX)    ;DA
A6502T(MEMACC_RW, ADRMODE_ABSY, 7, ISC_DCP)    ;DB
A6502T(MEMACC_R , ADRMODE_ABSX, 4, ISC_JAMX)    ;DC
A6502T(MEMACC_R , ADRMODE_ABSX, 4, ISC_CMP)    ;DD
A6502T(MEMACC_RW, ADRMODE_ABSX, 7, ISC_DEC)    ;DE
A6502T(MEMACC_RW, ADRMODE_ABSX, 7, ISC_DCP)    ;DF
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_CPX)    ;E0
A6502T(MEMACC_R , ADRMODE_INDX, 6, ISC_SBC)    ;E1
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_JAMX)    ;E2
A6502T(MEMACC_RW, ADRMODE_INDX, 8, ISC_ISC)    ;E3
A6502T(MEMACC_NO, ADRMODE_ZP  , 3, ISC_CPX)    ;E4
A6502T(MEMACC_NO, ADRMODE_ZP  , 3, ISC_SBC)    ;E5
A6502T(MEMACC_NO, ADRMODE_ZP  , 5, ISC_INC)    ;E6
A6502T(MEMACC_NO, ADRMODE_ZP  , 5, ISC_ISC)    ;E7
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_INX)    ;E8
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_SBC)    ;E9
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_NOP)    ;EA
A6502T(MEMACC_NO, ADRMODE_IMM , 2, ISC_SBC)    ;EB
A6502T(MEMACC_R , ADRMODE_ABS , 4, ISC_CPX)    ;EC
A6502T(MEMACC_R , ADRMODE_ABS , 4, ISC_SBC)    ;ED
A6502T(MEMACC_RW, ADRMODE_ABS , 6, ISC_INC)    ;EE
A6502T(MEMACC_RW, ADRMODE_ABS , 6, ISC_ISC)    ;EF
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_BEQ)    ;F0
A6502T(MEMACC_R , ADRMODE_INDY, 5, ISC_SBC)    ;F1
A6502T(MEMACC_NO, ADRMODE_SPEC, 4, ISC_JAM)    ;F2
A6502T(MEMACC_RW, ADRMODE_INDY, 8, ISC_ISC)    ;F3
A6502T(MEMACC_NO, ADRMODE_ZPX , 4, ISC_JAMX)    ;F4
A6502T(MEMACC_NO, ADRMODE_ZPX , 4, ISC_SBC)    ;F5
A6502T(MEMACC_NO, ADRMODE_ZPX , 6, ISC_INC)    ;F6
A6502T(MEMACC_NO, ADRMODE_ZPX , 6, ISC_ISC)    ;F7
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_SED)    ;F8
A6502T(MEMACC_R , ADRMODE_ABSY, 4, ISC_SBC)    ;F9
A6502T(MEMACC_NO, ADRMODE_SPEC, 2, ISC_JAMX)    ;FA
A6502T(MEMACC_RW, ADRMODE_ABSY, 7, ISC_ISC)    ;FB
A6502T(MEMACC_R , ADRMODE_ABSX, 4, ISC_JAMX)    ;FC
A6502T(MEMACC_R , ADRMODE_ABSX, 4, ISC_SBC)    ;FD
A6502T(MEMACC_RW, ADRMODE_ABSX, 7, ISC_INC)    ;FE
A6502T(MEMACC_RW, ADRMODE_ABSX, 7, ISC_ISC)    ;FF

a6502_norm_func_table:
.dl a6502_inst_tas    ,a6502_inst_tas       ;ISC_TAS .equ 0
.dl a6502_inst_shy    ,a6502_inst_shy       ;ISC_SHY .equ 1
.dl a6502_inst_shx    ,a6502_inst_shx       ;ISC_SHX .equ 2
.dl a6502_inst_sha    ,a6502_inst_sha       ;ISC_SHA .equ 3
.dl a6502_inst_sbx    ,a6502_inst_sbx       ;ISC_SBX .equ 4
.dl a6502_inst_sax_bc ,a6502_inst_sax_hl    ;ISC_SAX .equ 5
.dl a6502_inst_lxa    ,a6502_inst_lxa       ;ISC_LXA .equ 6
.dl a6502_inst_lax_bc ,a6502_inst_lax_hl    ;ISC_LAX .equ 7
.dl a6502_inst_las    ,a6502_inst_las       ;ISC_LAS .equ 8
.dl a6502_inst_arr    ,a6502_inst_arr       ;ISC_ARR .equ 9
.dl a6502_inst_ane    ,a6502_inst_ane       ;ISC_ANE .equ 10
.dl a6502_inst_anc    ,a6502_inst_anc       ;ISC_ANC .equ 11
.dl a6502_inst_alr    ,a6502_inst_alr       ;ISC_ALR .equ 12
.dl a6502_inst_bit_bc ,a6502_inst_bit_hl    ;ISC_BIT .equ 13
.dl a6502_inst_cpy_bc ,a6502_inst_cpy_hl    ;ISC_CPY .equ 14
.dl a6502_inst_cpx_bc ,a6502_inst_cpx_hl    ;ISC_CPX .equ 15
.dl a6502_inst_cmp_bc ,a6502_inst_cmp_hl   ;ISC_CMP .equ 16
.dl a6502_inst_ror_bc ,a6502_inst_ror_hl   ;ISC_ROR .equ 17
.dl a6502_inst_rol_bc ,a6502_inst_rol_hl   ;ISC_ROL .equ 18
.dl a6502_inst_lsr_bc ,a6502_inst_lsr_hl   ;ISC_LSR .equ 19
.dl a6502_inst_asl_bc ,a6502_inst_asl_hl   ;ISC_ASL .equ 20
.dl a6502_inst_or_bc  ,a6502_inst_or_hl    ;ISC_ORA .equ 21
.dl a6502_inst_eor_bc ,a6502_inst_eor_hl   ;ISC_EOR .equ 22
.dl a6502_inst_and_bc ,a6502_inst_and_hl   ;ISC_AND .equ 23
.dl a6502_inst_sbc_bc ,a6502_inst_sbc_hl   ;ISC_SBC .equ 24
.dl a6502_inst_adc_bc ,a6502_inst_adc_hl   ;ISC_ADC .equ 25
.dl a6502_inst_inc_bc ,a6502_inst_inc_hl   ;ISC_INC .equ 26
.dl a6502_inst_dec_bc ,a6502_inst_dec_hl   ;ISC_DEC .equ 27
.dl a6502_inst_sty_bc ,a6502_inst_sty_hl   ;ISC_STY .equ 28
.dl a6502_inst_stx_bc ,a6502_inst_stx_hl   ;ISC_STX .equ 29
.dl a6502_inst_sta_bc ,a6502_inst_sta_hl   ;ISC_STA .equ 30
.dl a6502_inst_ldy ,a6502_inst_ldy         ;ISC_LDY .equ 31
.dl a6502_inst_ldx ,a6502_inst_ldx         ;ISC_LDX .equ 32
.dl a6502_inst_lda ,a6502_inst_lda         ;ISC_LDA .equ 33

a6502_special_moded_func_table:
.dl a6502_inst_sre_bc,a6502_inst_sre_hl_seg1,a6502_inst_sre_hl_seg2 ;ISC_SRE .equ 76
.dl a6502_inst_slo_bc,a6502_inst_slo_hl_seg1,a6502_inst_slo_hl_seg2 ;ISC_SLO .equ 77
.dl a6502_inst_rra_bc,a6502_inst_rra_hl_seg1,a6502_inst_rra_hl_seg2 ;ISC_RRA .equ 78
.dl a6502_inst_rla_bc,a6502_inst_rla_hl_seg1,a6502_inst_rla_hl_seg2 ;ISC_RLA .equ 79
.dl a6502_inst_isc_bc,a6502_inst_isc_hl_seg1,a6502_inst_isc_hl_seg2 ;ISC_ISC .equ 80
.dl a6502_inst_dcp_bc,a6502_inst_dcp_hl_seg1,a6502_inst_dcp_hl_seg2 ;ISC_DCP .equ 81



;Note: Register timings are always in the main table. You should be using that
;to retrieve instruction timings. DO NOT INCLUDE THAT INFORMATION HERE.

a6502_special_specific_case_func_table:
.db 2 \.dl a6502_inst_tax, a6502_getInstruction ;ISC_TAX   .equ 34
.db 2 \.dl a6502_inst_tay, a6502_getInstruction ;ISC_TAY  .equ 35
.db 2 \.dl a6502_inst_tsx, a6502_getInstruction ;ISC_TSX  .equ 36
.db 2 \.dl a6502_inst_txa, a6502_getInstruction ;ISC_TXA  .equ 37
.db 2 \.dl a6502_inst_txs, a6502_getInstruction ;ISC_TXS  .equ 38
.db 2 \.dl a6502_inst_tya, a6502_getInstruction ;ISC_TYA  .equ 39
.db 2 \.dl a6502_inst_pha, a6502_getInstruction ;ISC_PHA  .equ 40
.db 2 \.dl               ;ISC_PHP  .equ 41
.db 2 \.dl a6502_inst_pla, a6502_getInstruction ;ISC_PLA  .equ 42
.db 2 \.dl               ;ISC_PLP  .equ 43
.db 2 \.dl a6502_inst_dex, a6502_getInstruction ;ISC_DEX  .equ 44
.db 2 \.dl a6502_inst_dey, a6502_getInstruction ;ISC_DEY  .equ 45
.db 2 \.dl a6502_inst_inx, a6502_getInstruction ;ISC_INX  .equ 46
.db 2 \.dl a6502_inst_iny, a6502_getInstruction ;ISC_INY  .equ 47
.db 2 \.dl a6502_inst_asl, a6502_getInstruction ;ISC_ASLA .equ 48
.db 2 \.dl a6502_inst_lsr, a6502_getInstruction ;ISC_LSRA  .equ 49
.db 2 \.dl a6502_inst_rol, a6502_getInstruction ;ISC_ROLA  .equ 50
.db 2 \.dl a6502_inst_ror, a6502_getInstruction ;ISC_RORA  .equ 51
.db 2 \.dl a6502_inst_clc, a6502_getInstruction ;ISC_CLC   .equ 52
.db 2 \.dl a6502_inst_cld, a6502_getInstruction ;ISC_CLD  .equ 53
.db 2 \.dl a6502_inst_cli, a6502_getInstruction ;ISC_CLI  .equ 54
.db 2 \.dl a6502_inst_clv, a6502_getInstruction ;ISC_CLV  .equ 55
.db 2 \.dl a6502_inst_sec, a6502_getInstruction ;ISC_SEC  .equ 56
.db 2 \.dl a6502_inst_sed, a6502_getInstruction ;ISC_SED  .equ 57
.db 2 \.dl a6502_inst_sei, a6502_getInstruction ;ISC_SEI  .equ 58
.db  \.dl               ;ISC_BCC  .equ 59
.db  \.dl               ;ISC_BCS  .equ 60
.db  \.dl               ;ISC_BEQ  .equ 61
.db  \.dl               ;ISC_BMI  .equ 62
.db  \.dl               ;ISC_BNE  .equ 63
.db  \.dl               ;ISC_BPL  .equ 64
.db  \.dl               ;ISC_BVC  .equ 65
.db  \.dl               ;ISC_BVS  .equ 66
.db  \.dl               ;ISC_BRK  .equ 67
.db  \.dl               ;ISC_RTI  .equ 68
.db  \.dl               ;ISC_RTS  .equ 69
.db  \.dl               ;ISC_NOP  .equ 70
.db  \.dl               ;ISC_JAMX .equ 71
.db  \.dl               ;ISC_JSR   .equ 72
.db  \.dl               ;ISC_JMPA .equ 73
.db  \.dl               ;ISC_JMPI  .equ 74
.db  \.dl               ;ISC_JAM   .equ 75














.echo "Core 2 module size: ",$-a6502_module_start
