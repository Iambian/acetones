;This has all the tables needed to drive the debugger.
#include "debug_itab.z80"


;You must assign a print character routine.
;You must also write all opcode bytes to operbuf or map operbuf to where written
dbg_printChr    = PrintBigFont
operbuf         = debugram

;A=instruction. Returns: A=size
dbg_getInstSize:
    push hl \ push de
        ld  d,a
        ld  e,4
        mlt de
        ld  hl,inst6502_disassembly_table+3
        add hl,de
        ld  d,0
        ld  e,(hl)
        ld  hl,inst6502_opcode_width_table
        add hl,de
        ld  a,(hl)
    pop de \ pop hl
    ret



dbg_printDisassembly:
    push af \ push bc \ push de \ push hl \ push ix
    ;find entry in disassembly table
    ld  hl,(operbuf)
    ld  H,4
    mlt hl
    ld  de,inst6502_disassembly_table
    add hl,de
    ld  b,3
_:  ld  a,(hl)
    inc hl
    call dbg_printC
    djnz -_
    ld  a,' '
    call dbg_printC
    ld  b,(hl)
    inc b
    ;Instruction addressing mode in B. Now find text for that address mode.
    ld  hl,inst6502_disassembler
    ld  de,0
_:  ld  e,(hl)
    add hl,de
    djnz -_
    dec e
    jr  z,dbg_printDisassembly_end  ;stop if text is zero-sized
    sbc hl,de   ;rewind to start of text part of instruction. E is text length.
    ld  b,e
dbg_printDisassembly_printOperandLoop:
    ld  a,(hl)
    inc hl
    cp  a,'1'
    jr  nz,+_
    call dbg_printOperand1
    jr  dbg_PrintDisassembly_printOperandFallthrough
_:  cp  a,'2'
    jr  nz,+_
    call dbg_printOperand2
    jr  dbg_PrintDisassembly_printOperandFallthrough
_:  cp  a,'-'
    jr  nz,+_
    call dbg_printRel1
    jr  dbg_PrintDisassembly_printOperandFallthrough
_:  call dbg_printC
dbg_PrintDisassembly_printOperandFallthrough:
    djnz dbg_printDisassembly_printOperandLoop
dbg_printDisassembly_end:
    pop ix \ pop hl \ pop de \ pop bc \ pop af
    ret

dbg_printRel1:
    ld  a,(operbuf+1)
    or  a,a
    jp  p,dbg_printRel1_skipNeg
    push af
        ld   a,'-'
        call dbg_printC
    pop af
    neg
dbg_printRel1_skipNeg:
    jr dbg_printHex

dbg_printOperand2:
    ld  a,(operbuf+2)
    call dbg_printHex
dbg_printOperand1:
    ld  a,(operbuf+1)
dbg_printHex:
    call dispAHex
    ret

dispAHex:
    push af
        call +_
    pop af
    jr  ++_
_:  rra
    rra
    rra
    rra
_:  or  a,$F0
    daa
    add a,$A0
    adc a,$40
dbg_printC:
    push hl
        push bc
            call dbg_printChr
        pop bc
    pop hl
    ret
